

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Sun Aug 20 17:11:55 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    52                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    53                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    54  0000                     
    55                           ; Version 1.42
    56                           ; Generated 13/04/2017 GMT
    57                           ; 
    58                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    59                           ; All rights reserved.
    60                           ; 
    61                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    62                           ; 
    63                           ; Redistribution and use in source and binary forms, with or without modification, are
    64                           ; permitted provided that the following conditions are met:
    65                           ; 
    66                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    67                           ;        conditions and the following disclaimer.
    68                           ; 
    69                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    70                           ;        of conditions and the following disclaimer in the documentation and/or other
    71                           ;        materials provided with the distribution.
    72                           ; 
    73                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    74                           ;        software without specific prior written permission.
    75                           ; 
    76                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    77                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    78                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    79                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    80                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    81                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    82                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    83                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    84                           ; 
    85                           ; 
    86                           ; Code-generator required, PIC18F45K22 Definitions
    87                           ; 
    88                           ; SFR Addresses
    89  0000                     
    90                           	psect	idataCOMRAM
    91  001008                     __pidataCOMRAM:
    92                           	opt stack 0
    93                           
    94                           ;initializer for Start@F7240
    95  001008  04                 	db	4
    96  001009  02                 	db	2
    97  00100A  00                 	db	0
    98  00100B  00                 	db	0
    99  00100C  00                 	db	0
   100                           
   101                           ;initializer for _Transmit_stall
   102  00100D  01                 	db	1
   103  0000                     _ANSELE	set	3900
   104  0000                     _ANSELD	set	3899
   105  0000                     _ANSELC	set	3898
   106  0000                     _ANSELB	set	3897
   107  0000                     _ANSELA	set	3896
   108  0000                     _ANSELCbits	set	3898
   109  0000                     _LATAbits	set	3977
   110  0000                     _PIR1bits	set	3998
   111  0000                     _IPR2bits	set	4002
   112  0000                     _IPR1bits	set	3999
   113  0000                     _RCONbits	set	4048
   114  0000                     _OSCTUNE	set	3995
   115  0000                     _OSCCON2	set	4050
   116  0000                     _OSCCON	set	4051
   117  0000                     _TRISAbits	set	3986
   118  0000                     _TRISDbits	set	3989
   119  0000                     _TRISCbits	set	3988
   120  0000                     _PORTAbits	set	3968
   121  0000                     _PORTCbits	set	3970
   122  0000                     _T0CONbits	set	4053
   123  0000                     _INTCONbits	set	4082
   124  0000                     _TMR0L	set	4054
   125  0000                     _TMR0H	set	4055
   126  0000                     _T0CON	set	4053
   127  0000                     _RC1STAbits	set	4011
   128  0000                     _RCREG1	set	4014
   129  0000                     _TXREG1	set	4013
   130  0000                     _SPBRGH1	set	4016
   131  0000                     _SPBRG1	set	4015
   132  0000                     _TX1STA	set	4012
   133  0000                     _RC1STA	set	4011
   134  0000                     _BAUD1CON	set	4024
   135  0000                     _PIE1bits	set	3997
   136  0000                     _LATDbits	set	3980
   137                           
   138                           ; #config settings
   139  0000                     
   140                           	psect	cinit
   141  000CF2                     __pcinit:
   142                           	opt stack 0
   143  000CF2                     start_initialization:
   144                           	opt stack 0
   145  000CF2                     __initialization:
   146                           	opt stack 0
   147                           
   148                           ; Initialize objects allocated to COMRAM (6 bytes)
   149                           ; load TBLPTR registers with __pidataCOMRAM
   150  000CF2  0E08               	movlw	low __pidataCOMRAM
   151  000CF4  6EF6               	movwf	tblptrl,c
   152  000CF6  0E10               	movlw	high __pidataCOMRAM
   153  000CF8  6EF7               	movwf	tblptrh,c
   154  000CFA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   155  000CFC  6EF8               	movwf	tblptru,c
   156  000CFE  EE00  F03F         	lfsr	0,__pdataCOMRAM
   157  000D02  EE10 F006          	lfsr	1,6
   158  000D06                     copy_data0:
   159  000D06  0009               	tblrd		*+
   160  000D08  CFF5 FFEE          	movff	tablat,postinc0
   161  000D0C  50E5               	movf	postdec1,w,c
   162  000D0E  50E1               	movf	fsr1l,w,c
   163  000D10  E1FA               	bnz	copy_data0
   164                           
   165                           ; Clear objects allocated to BANK1 (242 bytes)
   166  000D12  EE01  F000         	lfsr	0,__pbssBANK1
   167  000D16  0EF2               	movlw	242
   168  000D18                     clear_0:
   169  000D18  6AEE               	clrf	postinc0,c
   170  000D1A  06E8               	decf	wreg,f,c
   171  000D1C  E1FD               	bnz	clear_0
   172                           
   173                           ; Clear objects allocated to BANK0 (51 bytes)
   174  000D1E  EE00  F0C9         	lfsr	0,__pbssBANK0
   175  000D22  0E33               	movlw	51
   176  000D24                     clear_1:
   177  000D24  6AEE               	clrf	postinc0,c
   178  000D26  06E8               	decf	wreg,f,c
   179  000D28  E1FD               	bnz	clear_1
   180                           
   181                           ; Clear objects allocated to COMRAM (21 bytes)
   182  000D2A  EE00  F02A         	lfsr	0,__pbssCOMRAM
   183  000D2E  0E15               	movlw	21
   184  000D30                     clear_2:
   185  000D30  6AEE               	clrf	postinc0,c
   186  000D32  06E8               	decf	wreg,f,c
   187  000D34  E1FD               	bnz	clear_2
   188  000D36                     end_of_initialization:
   189                           	opt stack 0
   190  000D36                     __end_of__initialization:
   191                           	opt stack 0
   192  000D36  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   193  000D38  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   194  000D3A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   195  000D3C  6EF8               	movwf	tblptru,c
   196  000D3E  0100               	movlb	0
   197  000D40  EF2F  F007         	goto	_main	;jump to C main() function
   198                           tblptru	equ	0xFF8
   199                           tblptrh	equ	0xFF7
   200                           tblptrl	equ	0xFF6
   201                           tablat	equ	0xFF5
   202                           postinc0	equ	0xFEE
   203                           wreg	equ	0xFE8
   204                           postdec1	equ	0xFE5
   205                           fsr1l	equ	0xFE1
   206                           
   207                           	psect	bssCOMRAM
   208  00002A                     __pbssCOMRAM:
   209                           	opt stack 0
   210  00002A                     _Count:
   211                           	opt stack 0
   212  00002A                     	ds	4
   213  00002E                     _time:
   214                           	opt stack 0
   215  00002E                     	ds	4
   216  000032                     _DataTableArrayTwo:
   217                           	opt stack 0
   218  000032                     	ds	3
   219  000035                     cobs_decode@F192:
   220                           	opt stack 0
   221  000035                     	ds	3
   222  000038                     cobs_encode@F180:
   223                           	opt stack 0
   224  000038                     	ds	3
   225  00003B                     _timer0ReloadVal16bit:
   226                           	opt stack 0
   227  00003B                     	ds	2
   228  00003D                     _ByteLow:
   229                           	opt stack 0
   230  00003D                     	ds	1
   231  00003E                     _ByteHigh:
   232                           	opt stack 0
   233  00003E                     	ds	1
   234                           tblptru	equ	0xFF8
   235                           tblptrh	equ	0xFF7
   236                           tblptrl	equ	0xFF6
   237                           tablat	equ	0xFF5
   238                           postinc0	equ	0xFEE
   239                           wreg	equ	0xFE8
   240                           postdec1	equ	0xFE5
   241                           fsr1l	equ	0xFE1
   242                           
   243                           	psect	dataCOMRAM
   244  00003F                     __pdataCOMRAM:
   245                           	opt stack 0
   246  00003F                     Start@F7240:
   247                           	opt stack 0
   248  00003F                     	ds	5
   249  000044                     _Transmit_stall:
   250                           	opt stack 0
   251  000044                     	ds	1
   252                           tblptru	equ	0xFF8
   253                           tblptrh	equ	0xFF7
   254                           tblptrl	equ	0xFF6
   255                           tablat	equ	0xFF5
   256                           postinc0	equ	0xFEE
   257                           wreg	equ	0xFE8
   258                           postdec1	equ	0xFE5
   259                           fsr1l	equ	0xFE1
   260                           
   261                           	psect	bssBANK0
   262  0000C9                     __pbssBANK0:
   263                           	opt stack 0
   264  0000C9                     _DataTableArrayOne:
   265                           	opt stack 0
   266  0000C9                     	ds	10
   267  0000D3                     _receiveArray:
   268                           	opt stack 0
   269  0000D3                     	ds	10
   270  0000DD                     _Data:
   271                           	opt stack 0
   272  0000DD                     	ds	1
   273  0000DE                     _ProcessArray:
   274                           	opt stack 0
   275  0000DE                     	ds	30
   276                           tblptru	equ	0xFF8
   277                           tblptrh	equ	0xFF7
   278                           tblptrl	equ	0xFF6
   279                           tablat	equ	0xFF5
   280                           postinc0	equ	0xFEE
   281                           wreg	equ	0xFE8
   282                           postdec1	equ	0xFE5
   283                           fsr1l	equ	0xFE1
   284                           
   285                           	psect	bssBANK1
   286  000100                     __pbssBANK1:
   287                           	opt stack 0
   288  000100                     _output_buffer:
   289                           	opt stack 0
   290  000100                     	ds	106
   291  00016A                     _input_buffer:
   292                           	opt stack 0
   293  00016A                     	ds	106
   294  0001D4                     _ReciveArray:
   295                           	opt stack 0
   296  0001D4                     	ds	30
   297                           tblptru	equ	0xFF8
   298                           tblptrh	equ	0xFF7
   299                           tblptrl	equ	0xFF6
   300                           tablat	equ	0xFF5
   301                           postinc0	equ	0xFEE
   302                           wreg	equ	0xFE8
   303                           postdec1	equ	0xFE5
   304                           fsr1l	equ	0xFE1
   305                           
   306                           	psect	cstackBANK1
   307  0001F2                     __pcstackBANK1:
   308                           	opt stack 0
   309  0001F2                     receiveData@CS:
   310                           	opt stack 0
   311                           
   312                           ; 1 bytes @ 0x0
   313  0001F2                     	ds	1
   314  0001F3                     receiveData@i:
   315                           	opt stack 0
   316                           
   317                           ; 2 bytes @ 0x1
   318  0001F3                     	ds	2
   319  0001F5                     receiveData@result:
   320                           	opt stack 0
   321                           
   322                           ; 3 bytes @ 0x3
   323  0001F5                     	ds	3
   324                           tblptru	equ	0xFF8
   325                           tblptrh	equ	0xFF7
   326                           tblptrl	equ	0xFF6
   327                           tablat	equ	0xFF5
   328                           postinc0	equ	0xFEE
   329                           wreg	equ	0xFE8
   330                           postdec1	equ	0xFE5
   331                           fsr1l	equ	0xFE1
   332                           
   333                           	psect	cstackBANK0
   334  000060                     __pcstackBANK0:
   335                           	opt stack 0
   336  000060                     cobs_encode@src_end_ptr:
   337                           	opt stack 0
   338  000060                     cobs_decode@src_end_ptr:
   339                           	opt stack 0
   340                           
   341                           ; 2 bytes @ 0x0
   342  000060                     	ds	2
   343  000062                     cobs_encode@src_byte:
   344                           	opt stack 0
   345  000062                     cobs_decode@dst_buf_end_ptr:
   346                           	opt stack 0
   347                           
   348                           ; 2 bytes @ 0x2
   349  000062                     	ds	1
   350  000063                     cobs_encode@dst_buf_end_ptr:
   351                           	opt stack 0
   352                           
   353                           ; 2 bytes @ 0x3
   354  000063                     	ds	1
   355  000064                     cobs_decode@src_byte:
   356                           	opt stack 0
   357                           
   358                           ; 1 bytes @ 0x4
   359  000064                     	ds	1
   360  000065                     cobs_encode@search_len:
   361                           	opt stack 0
   362  000065                     cobs_decode@i:
   363                           	opt stack 0
   364                           
   365                           ; 1 bytes @ 0x5
   366  000065                     	ds	1
   367  000066                     cobs_encode@dst_code_write_ptr:
   368                           	opt stack 0
   369  000066                     cobs_decode@remaining_bytes:
   370                           	opt stack 0
   371                           
   372                           ; 2 bytes @ 0x6
   373  000066                     	ds	2
   374  000068                     cobs_encode@dst_write_ptr:
   375                           	opt stack 0
   376  000068                     cobs_decode@dst_write_ptr:
   377                           	opt stack 0
   378                           
   379                           ; 2 bytes @ 0x8
   380  000068                     	ds	2
   381  00006A                     cobs_decode@len_code:
   382                           	opt stack 0
   383  00006A                     cobs_encode@result:
   384                           	opt stack 0
   385                           
   386                           ; 3 bytes @ 0xA
   387  00006A                     	ds	1
   388  00006B                     cobs_decode@result:
   389                           	opt stack 0
   390                           
   391                           ; 3 bytes @ 0xB
   392  00006B                     	ds	2
   393  00006D                     sendData@ComandByte:
   394                           	opt stack 0
   395                           
   396                           ; 1 bytes @ 0xD
   397  00006D                     	ds	1
   398  00006E                     sendData@DataTable:
   399                           	opt stack 0
   400                           
   401                           ; 1 bytes @ 0xE
   402  00006E                     	ds	1
   403  00006F                     sendData@DataTableIndex:
   404                           	opt stack 0
   405                           
   406                           ; 1 bytes @ 0xF
   407  00006F                     	ds	1
   408  000070                     sendData@DTS:
   409                           	opt stack 0
   410                           
   411                           ; 2 bytes @ 0x10
   412  000070                     	ds	2
   413  000072                     sendData@lenth:
   414                           	opt stack 0
   415                           
   416                           ; 2 bytes @ 0x12
   417  000072                     	ds	2
   418  000074                     ??_sendData:
   419                           
   420                           ; 1 bytes @ 0x14
   421  000074                     	ds	4
   422  000078                     sendData@COBSArray:
   423                           	opt stack 0
   424                           
   425                           ; 30 bytes @ 0x18
   426  000078                     	ds	30
   427  000096                     sendData@SendArray:
   428                           	opt stack 0
   429                           
   430                           ; 30 bytes @ 0x36
   431  000096                     	ds	30
   432  0000B4                     sendData@whereToSend:
   433                           	opt stack 0
   434                           
   435                           ; 1 bytes @ 0x54
   436  0000B4                     	ds	1
   437  0000B5                     sendData@CS:
   438                           	opt stack 0
   439                           
   440                           ; 1 bytes @ 0x55
   441  0000B5                     	ds	1
   442  0000B6                     sendData@result:
   443                           	opt stack 0
   444                           
   445                           ; 3 bytes @ 0x56
   446  0000B6                     	ds	3
   447  0000B9                     sendData@count:
   448                           	opt stack 0
   449                           
   450                           ; 2 bytes @ 0x59
   451  0000B9                     	ds	2
   452  0000BB                     sendData@i:
   453                           	opt stack 0
   454                           
   455                           ; 1 bytes @ 0x5B
   456  0000BB                     	ds	1
   457  0000BC                     ComController@DTI:
   458                           	opt stack 0
   459                           
   460                           ; 2 bytes @ 0x5C
   461  0000BC                     	ds	2
   462  0000BE                     ComController@lenth:
   463                           	opt stack 0
   464                           
   465                           ; 2 bytes @ 0x5E
   466  0000BE                     	ds	2
   467  0000C0                     ComController@DataToSend:
   468                           	opt stack 0
   469                           
   470                           ; 4 bytes @ 0x60
   471  0000C0                     	ds	4
   472  0000C4                     ??_receiveData:
   473                           
   474                           ; 1 bytes @ 0x64
   475  0000C4                     	ds	5
   476                           tblptru	equ	0xFF8
   477                           tblptrh	equ	0xFF7
   478                           tblptrl	equ	0xFF6
   479                           tablat	equ	0xFF5
   480                           postinc0	equ	0xFEE
   481                           wreg	equ	0xFE8
   482                           postdec1	equ	0xFE5
   483                           fsr1l	equ	0xFE1
   484                           
   485                           	psect	cstackCOMRAM
   486  000001                     __pcstackCOMRAM:
   487                           	opt stack 0
   488  000001                     ?i2_UART_buff_size:
   489                           	opt stack 0
   490  000001                     ?i2_UART_buff_modulo_inc:
   491                           	opt stack 0
   492  000001                     i2UART_buff_size@_this:
   493                           	opt stack 0
   494  000001                     i2UART_buff_modulo_inc@value:
   495                           	opt stack 0
   496                           
   497                           ; 2 bytes @ 0x0
   498  000001                     	ds	2
   499  000003                     i2UART_buff_modulo_inc@modulus:
   500                           	opt stack 0
   501                           
   502                           ; 2 bytes @ 0x2
   503  000003                     	ds	2
   504  000005                     i2UART_buff_modulo_inc@my_value:
   505                           	opt stack 0
   506                           
   507                           ; 2 bytes @ 0x4
   508  000005                     	ds	2
   509  000007                     i2UART_buff_put@_this:
   510                           	opt stack 0
   511  000007                     i2UART_buff_get@_this:
   512                           	opt stack 0
   513                           
   514                           ; 2 bytes @ 0x6
   515  000007                     	ds	2
   516  000009                     ??i2_UART_buff_get:
   517  000009                     i2UART_buff_put@c:
   518                           	opt stack 0
   519                           
   520                           ; 1 bytes @ 0x8
   521  000009                     	ds	1
   522  00000A                     ??i2_UART_buff_put:
   523                           
   524                           ; 1 bytes @ 0x9
   525  00000A                     	ds	1
   526  00000B                     i2UART_buff_get@c:
   527                           	opt stack 0
   528                           
   529                           ; 1 bytes @ 0xA
   530  00000B                     	ds	1
   531  00000C                     EUSART1_Receive_ISR@data:
   532                           	opt stack 0
   533                           
   534                           ; 1 bytes @ 0xB
   535  00000C                     	ds	1
   536  00000D                     ??_INTERRUPT_InterruptManager:
   537                           
   538                           ; 1 bytes @ 0xC
   539  00000D                     	ds	14
   540  00001B                     ?_UART_buff_modulo_inc:
   541                           	opt stack 0
   542  00001B                     ?_UART_buff_size:
   543                           	opt stack 0
   544  00001B                     ?_cobs_encode:
   545                           	opt stack 0
   546  00001B                     ?_cobs_decode:
   547                           	opt stack 0
   548  00001B                     ?_GetTime:
   549                           	opt stack 0
   550  00001B                     GetDataDict@DataTableIndex:
   551                           	opt stack 0
   552  00001B                     SetDataDict@DataTableIndex:
   553                           	opt stack 0
   554  00001B                     UART_buff_size@_this:
   555                           	opt stack 0
   556  00001B                     UART_buff_modulo_inc@value:
   557                           	opt stack 0
   558  00001B                     Delay@wait:
   559                           	opt stack 0
   560  00001B                     cobs_encode@dst_buf_ptr:
   561                           	opt stack 0
   562  00001B                     cobs_decode@dst_buf_ptr:
   563                           	opt stack 0
   564  00001B                     CRC8@data:
   565                           	opt stack 0
   566  00001B                     memset@p1:
   567                           	opt stack 0
   568                           
   569                           ; 2 bytes @ 0x1A
   570  00001B                     	ds	1
   571  00001C                     GetDataDict@DataArray:
   572                           	opt stack 0
   573  00001C                     SetDataDict@DataArray:
   574                           	opt stack 0
   575                           
   576                           ; 2 bytes @ 0x1B
   577  00001C                     	ds	1
   578  00001D                     ??_Delay:
   579  00001D                     ?_Receive_available:
   580                           	opt stack 0
   581  00001D                     CRC8@len:
   582                           	opt stack 0
   583  00001D                     UART_buff_modulo_inc@modulus:
   584                           	opt stack 0
   585  00001D                     cobs_encode@dst_buf_len:
   586                           	opt stack 0
   587  00001D                     cobs_decode@dst_buf_len:
   588                           	opt stack 0
   589  00001D                     memset@c:
   590                           	opt stack 0
   591                           
   592                           ; 2 bytes @ 0x1C
   593  00001D                     	ds	1
   594  00001E                     GetDataDict@numbofbytes:
   595                           	opt stack 0
   596  00001E                     SetDataDict@numbofbytes:
   597                           	opt stack 0
   598  00001E                     CRC8@sum:
   599                           	opt stack 0
   600  00001E                     Delay@x:
   601                           	opt stack 0
   602                           
   603                           ; 2 bytes @ 0x1D
   604  00001E                     	ds	1
   605  00001F                     GetDataDict@Error:
   606                           	opt stack 0
   607  00001F                     SetDataDict@Error:
   608                           	opt stack 0
   609  00001F                     CRC8@extract:
   610                           	opt stack 0
   611  00001F                     UART_buff_modulo_inc@my_value:
   612                           	opt stack 0
   613  00001F                     cobs_encode@src_ptr:
   614                           	opt stack 0
   615  00001F                     cobs_decode@src_ptr:
   616                           	opt stack 0
   617  00001F                     memset@n:
   618                           	opt stack 0
   619                           
   620                           ; 2 bytes @ 0x1E
   621  00001F                     	ds	1
   622  000020                     GetDataDict@DataTable:
   623                           	opt stack 0
   624  000020                     SetDataDict@DataTable:
   625                           	opt stack 0
   626  000020                     CRC8@tempI:
   627                           	opt stack 0
   628                           
   629                           ; 1 bytes @ 0x1F
   630  000020                     	ds	1
   631  000021                     GetDataDict@DataCount:
   632                           	opt stack 0
   633  000021                     SetDataDict@DataCount:
   634                           	opt stack 0
   635  000021                     CRC8@crc:
   636                           	opt stack 0
   637  000021                     UART_buff_put@_this:
   638                           	opt stack 0
   639  000021                     UART_buff_get@_this:
   640                           	opt stack 0
   641  000021                     cobs_encode@src_len:
   642                           	opt stack 0
   643  000021                     cobs_decode@src_len:
   644                           	opt stack 0
   645  000021                     memset@p:
   646                           	opt stack 0
   647                           
   648                           ; 2 bytes @ 0x20
   649  000021                     	ds	1
   650  000022                     GetDataDict@ReturnCounter:
   651                           	opt stack 0
   652  000022                     SetDataDict@ReturnCounter:
   653                           	opt stack 0
   654                           
   655                           ; 1 bytes @ 0x21
   656  000022                     	ds	1
   657  000023                     ??_ReadFaults:
   658  000023                     ??_UART_buff_get:
   659  000023                     ??_cobs_encode:
   660  000023                     ??_cobs_decode:
   661  000023                     UART_buff_put@c:
   662                           	opt stack 0
   663  000023                     UART_buff_init@_this:
   664                           	opt stack 0
   665                           
   666                           ; 2 bytes @ 0x22
   667  000023                     	ds	1
   668  000024                     ??_UART_buff_put:
   669  000024                     ReadFaults@Data:
   670                           	opt stack 0
   671                           
   672                           ; 4 bytes @ 0x23
   673  000024                     	ds	1
   674  000025                     UART_buff_get@c:
   675                           	opt stack 0
   676  000025                     Start@Data:
   677                           	opt stack 0
   678                           
   679                           ; 5 bytes @ 0x24
   680  000025                     	ds	1
   681  000026                     Send_put@_data:
   682                           	opt stack 0
   683                           
   684                           ; 1 bytes @ 0x25
   685  000026                     	ds	1
   686  000027                     ??_ComController:
   687                           
   688                           ; 1 bytes @ 0x26
   689  000027                     	ds	1
   690  000028                     
   691                           ; 1 bytes @ 0x27
   692  000028                     	ds	2
   693  00002A                     tblptru	equ	0xFF8
   694                           tblptrh	equ	0xFF7
   695                           tblptrl	equ	0xFF6
   696                           tablat	equ	0xFF5
   697                           postinc0	equ	0xFEE
   698                           wreg	equ	0xFE8
   699                           postdec1	equ	0xFE5
   700                           fsr1l	equ	0xFE1
   701                           
   702                           ; 1 bytes @ 0x29
   703 ;;
   704 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   705 ;;
   706 ;; *************** function _main *****************
   707 ;; Defined at:
   708 ;;		line 24 in file "Main.c"
   709 ;; Parameters:    Size  Location     Type
   710 ;;		None
   711 ;; Auto vars:     Size  Location     Type
   712 ;;		None
   713 ;; Return value:  Size  Location     Type
   714 ;;                  1    wreg      void 
   715 ;; Registers used:
   716 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   717 ;; Tracked objects:
   718 ;;		On entry : 0/0
   719 ;;		On exit  : 0/0
   720 ;;		Unchanged: 0/0
   721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   722 ;;      Params:         0       0       0       0       0       0       0
   723 ;;      Locals:         0       0       0       0       0       0       0
   724 ;;      Temps:          0       0       0       0       0       0       0
   725 ;;      Totals:         0       0       0       0       0       0       0
   726 ;;Total ram usage:        0 bytes
   727 ;; Hardware stack levels required when called:   11
   728 ;; This function calls:
   729 ;;		_GetTime
   730 ;;		_ReadFaults
   731 ;;		_SetTime
   732 ;;		_Start
   733 ;;		_updateComms
   734 ;; This function is called by:
   735 ;;		Startup code after reset
   736 ;; This function uses a non-reentrant model
   737 ;;
   738                           
   739                           	psect	text0
   740  000E5E                     __ptext0:
   741                           	opt stack 0
   742  000E5E                     _main:
   743                           	opt stack 20
   744                           
   745                           ;Main.c: 25: Start();
   746                           
   747                           ;incstack = 0
   748  000E5E  EC07  F006         	call	_Start	;wreg free
   749                           
   750                           ;Main.c: 26: LATDbits.LATD4 = 0;
   751  000E62  988C               	bcf	3980,4,c	;volatile
   752  000E64                     l36:
   753                           
   754                           ;Main.c: 28: updateComms();
   755  000E64  EC07  F008         	call	_updateComms	;wreg free
   756                           
   757                           ;Main.c: 31: if(GetTime() > 5){
   758  000E68  ECF4  F007         	call	_GetTime	;wreg free
   759  000E6C  BE1E               	btfsc	?_GetTime+3,7,c
   760  000E6E  D7FA               	goto	l36
   761  000E70  501E               	movf	?_GetTime+3,w,c
   762  000E72  101D               	iorwf	?_GetTime+2,w,c
   763  000E74  101C               	iorwf	?_GetTime+1,w,c
   764  000E76  E104               	bnz	u1580
   765  000E78  0E06               	movlw	6
   766  000E7A  5C1B               	subwf	?_GetTime,w,c
   767  000E7C  A0D8               	btfss	status,0,c
   768  000E7E  D7F2               	goto	l36
   769  000E80                     u1580:
   770                           
   771                           ;Main.c: 32: ReadFaults();
   772  000E80  EC48  F006         	call	_ReadFaults	;wreg free
   773                           
   774                           ;Main.c: 33: SetTime();
   775  000E84  ECEB  F007         	call	_SetTime	;wreg free
   776  000E88  D7ED               	goto	l36
   777  000E8A                     __end_of_main:
   778                           	opt stack 0
   779                           tblptru	equ	0xFF8
   780                           tblptrh	equ	0xFF7
   781                           tblptrl	equ	0xFF6
   782                           tablat	equ	0xFF5
   783                           postinc0	equ	0xFEE
   784                           wreg	equ	0xFE8
   785                           postdec1	equ	0xFE5
   786                           fsr1l	equ	0xFE1
   787                           status	equ	0xFD8
   788                           
   789 ;; *************** function _updateComms *****************
   790 ;; Defined at:
   791 ;;		line 16 in file "Communications.c"
   792 ;; Parameters:    Size  Location     Type
   793 ;;		None
   794 ;; Auto vars:     Size  Location     Type
   795 ;;		None
   796 ;; Return value:  Size  Location     Type
   797 ;;                  1    wreg      void 
   798 ;; Registers used:
   799 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   800 ;; Tracked objects:
   801 ;;		On entry : 0/0
   802 ;;		On exit  : 0/0
   803 ;;		Unchanged: 0/0
   804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   805 ;;      Params:         0       0       0       0       0       0       0
   806 ;;      Locals:         0       0       0       0       0       0       0
   807 ;;      Temps:          0       0       0       0       0       0       0
   808 ;;      Totals:         0       0       0       0       0       0       0
   809 ;;Total ram usage:        0 bytes
   810 ;; Hardware stack levels used:    1
   811 ;; Hardware stack levels required when called:   10
   812 ;; This function calls:
   813 ;;		_receiveData
   814 ;; This function is called by:
   815 ;;		_main
   816 ;; This function uses a non-reentrant model
   817 ;;
   818                           
   819                           	psect	text1
   820  00100E                     __ptext1:
   821                           	opt stack 0
   822  00100E                     _updateComms:
   823                           	opt stack 20
   824                           
   825                           ;Communications.c: 17: if (receiveData()) {
   826                           
   827                           ;incstack = 0
   828  00100E  EC04  F004         	call	_receiveData	;wreg free
   829  001012  0012               	return	
   830  001014                     __end_of_updateComms:
   831                           	opt stack 0
   832                           tblptru	equ	0xFF8
   833                           tblptrh	equ	0xFF7
   834                           tblptrl	equ	0xFF6
   835                           tablat	equ	0xFF5
   836                           postinc0	equ	0xFEE
   837                           wreg	equ	0xFE8
   838                           postdec1	equ	0xFE5
   839                           fsr1l	equ	0xFE1
   840                           status	equ	0xFD8
   841                           
   842 ;; *************** function _receiveData *****************
   843 ;; Defined at:
   844 ;;		line 80 in file "CarCom.c"
   845 ;; Parameters:    Size  Location     Type
   846 ;;		None
   847 ;; Auto vars:     Size  Location     Type
   848 ;;  result          3    3[BANK1 ] struct .
   849 ;;  i               2    1[BANK1 ] int 
   850 ;;  CS              1    0[BANK1 ] unsigned char 
   851 ;; Return value:  Size  Location     Type
   852 ;;                  1    wreg      unsigned char 
   853 ;; Registers used:
   854 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   855 ;; Tracked objects:
   856 ;;		On entry : 0/0
   857 ;;		On exit  : 0/0
   858 ;;		Unchanged: 0/0
   859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   860 ;;      Params:         0       0       0       0       0       0       0
   861 ;;      Locals:         0       0       6       0       0       0       0
   862 ;;      Temps:          0       5       0       0       0       0       0
   863 ;;      Totals:         0       5       6       0       0       0       0
   864 ;;Total ram usage:       11 bytes
   865 ;; Hardware stack levels used:    1
   866 ;; Hardware stack levels required when called:    9
   867 ;; This function calls:
   868 ;;		_CRC8
   869 ;;		_ComController
   870 ;;		_Receive_available
   871 ;;		_Receive_get
   872 ;;		_cobs_decode
   873 ;; This function is called by:
   874 ;;		_updateComms
   875 ;; This function uses a non-reentrant model
   876 ;;
   877                           
   878                           	psect	text2
   879  000808                     __ptext2:
   880                           	opt stack 0
   881  000808                     _receiveData:
   882                           	opt stack 20
   883                           
   884                           ;CarCom.c: 82: if(Receive_available()>5){
   885                           
   886                           ;incstack = 0
   887  000808  ECCA  F007         	call	_Receive_available	;wreg free
   888  00080C  BE1E               	btfsc	?_Receive_available+1,7,c
   889  00080E  D07B               	goto	l2507
   890  000810  501E               	movf	?_Receive_available+1,w,c
   891  000812  E104               	bnz	u1540
   892  000814  0E06               	movlw	6
   893  000816  5C1D               	subwf	?_Receive_available,w,c
   894  000818  A0D8               	btfss	status,0,c
   895  00081A  D075               	goto	l2507
   896  00081C                     u1540:
   897                           
   898                           ;CarCom.c: 83: if(Receive_get() == 8){
   899  00081C  ECFD  F007         	call	_Receive_get	;wreg free
   900  000820  0A08               	xorlw	8
   901  000822  A4D8               	btfss	status,2,c
   902  000824  D070               	goto	l2507
   903                           
   904                           ;CarCom.c: 84: int i = 0;
   905  000826  0E00               	movlw	0
   906  000828  0101               	movlb	1	; () banked
   907  00082A  6FF4               	movwf	(receiveData@i+1)& (0+255),b
   908  00082C  0E00               	movlw	0
   909  00082E  6FF3               	movwf	receiveData@i& (0+255),b
   910  000830                     l2485:
   911                           
   912                           ;CarCom.c: 87: Data = Receive_get();
   913  000830  ECFD  F007         	call	_Receive_get	;wreg free
   914  000834  0100               	movlb	0	; () banked
   915  000836  6FDD               	movwf	_Data& (0+255),b
   916                           
   917                           ; BSR set to: 0
   918                           ;CarCom.c: 88: ReciveArray[i] = Data;
   919  000838  0ED4               	movlw	low _ReciveArray
   920  00083A  0101               	movlb	1	; () banked
   921  00083C  25F3               	addwf	receiveData@i& (0+255),w,b
   922  00083E  6ED9               	movwf	fsr2l,c
   923  000840  0E01               	movlw	high _ReciveArray
   924  000842  0101               	movlb	1	; () banked
   925  000844  21F4               	addwfc	(receiveData@i+1)& (0+255),w,b
   926  000846  6EDA               	movwf	fsr2h,c
   927  000848  C0DD  FFDF         	movff	_Data,indf2
   928                           
   929                           ; BSR set to: 1
   930                           ;CarCom.c: 89: _delay((unsigned long)((100)*(16000000/4000000.0)));
   931  00084C  0E85               	movlw	133
   932  00084E                     u1597:
   933  00084E  2EE8               	decfsz	wreg,f,c
   934  000850  D7FE               	bra	u1597
   935  000852  F000               	nop	
   936                           
   937                           ;CarCom.c: 90: i++;
   938  000854  0101               	movlb	1	; () banked
   939  000856  4BF3               	infsnz	receiveData@i& (0+255),f,b
   940  000858  2BF4               	incf	(receiveData@i+1)& (0+255),f,b
   941                           
   942                           ; BSR set to: 1
   943                           ;CarCom.c: 91: }while(Data != 0x00);
   944  00085A  0100               	movlb	0	; () banked
   945  00085C  51DD               	movf	_Data& (0+255),w,b
   946  00085E  0100               	movlb	0	; () banked
   947  000860  A4D8               	btfss	status,2,c
   948  000862  D7E6               	goto	l2485
   949                           
   950                           ; BSR set to: 0
   951                           ;CarCom.c: 93: cobs_decode_result result;
   952                           ;CarCom.c: 95: result = cobs_decode(ProcessArray, sizeof(ProcessArray), ReciveArray, i);
   953                           
   954                           ; BSR set to: 0
   955  000864  0EDE               	movlw	low _ProcessArray
   956  000866  6E1B               	movwf	cobs_decode@dst_buf_ptr,c
   957  000868  0E00               	movlw	high _ProcessArray
   958  00086A  6E1C               	movwf	cobs_decode@dst_buf_ptr+1,c
   959  00086C  0E00               	movlw	0
   960  00086E  6E1E               	movwf	cobs_decode@dst_buf_len+1,c
   961  000870  0E1E               	movlw	30
   962  000872  6E1D               	movwf	cobs_decode@dst_buf_len,c
   963  000874  0ED4               	movlw	low _ReciveArray
   964  000876  6E1F               	movwf	cobs_decode@src_ptr,c
   965  000878  0E01               	movlw	high _ReciveArray
   966  00087A  6E20               	movwf	cobs_decode@src_ptr+1,c
   967  00087C  C1F3  F021         	movff	receiveData@i,cobs_decode@src_len
   968  000880  C1F4  F022         	movff	receiveData@i+1,cobs_decode@src_len+1
   969  000884  EC3F  F001         	call	_cobs_decode	;wreg free
   970  000888  C01B  F1F5         	movff	?_cobs_decode,receiveData@result
   971  00088C  C01C  F1F6         	movff	?_cobs_decode+1,receiveData@result+1
   972  000890  C01D  F1F7         	movff	?_cobs_decode+2,receiveData@result+2
   973                           
   974                           ;CarCom.c: 97: unsigned char CS = CRC8(ProcessArray, result.out_len-1);
   975  000894  0EDE               	movlw	low _ProcessArray
   976  000896  6E1B               	movwf	CRC8@data,c
   977  000898  0E00               	movlw	high _ProcessArray
   978  00089A  6E1C               	movwf	CRC8@data+1,c
   979  00089C  0101               	movlb	1	; () banked
   980  00089E  05F5               	decf	receiveData@result& (0+255),w,b
   981  0008A0  6E1D               	movwf	CRC8@len,c
   982  0008A2  ECA2  F006         	call	_CRC8	;wreg free
   983  0008A6  0101               	movlb	1	; () banked
   984  0008A8  6FF2               	movwf	receiveData@CS& (0+255),b
   985                           
   986                           ; BSR set to: 1
   987                           ;CarCom.c: 99: if(ProcessArray[result.out_len-1] == CS){
   988  0008AA  0EFF               	movlw	255
   989  0008AC  0100               	movlb	0	; () banked
   990  0008AE  6FC4               	movwf	??_receiveData& (0+255),b
   991  0008B0  0EFF               	movlw	255
   992  0008B2  0100               	movlb	0	; () banked
   993  0008B4  6FC5               	movwf	(??_receiveData+1)& (0+255),b
   994  0008B6  C1F5  F0C6         	movff	receiveData@result,??_receiveData+2
   995  0008BA  C1F6  F0C7         	movff	receiveData@result+1,??_receiveData+3
   996  0008BE  0100               	movlb	0	; () banked
   997  0008C0  51C4               	movf	??_receiveData& (0+255),w,b
   998  0008C2  0100               	movlb	0	; () banked
   999  0008C4  27C6               	addwf	(??_receiveData+2)& (0+255),f,b
  1000  0008C6  0100               	movlb	0	; () banked
  1001  0008C8  51C5               	movf	(??_receiveData+1)& (0+255),w,b
  1002  0008CA  0100               	movlb	0	; () banked
  1003  0008CC  23C7               	addwfc	(??_receiveData+3)& (0+255),f,b
  1004  0008CE  0EDE               	movlw	low _ProcessArray
  1005  0008D0  0100               	movlb	0	; () banked
  1006  0008D2  25C6               	addwf	(??_receiveData+2)& (0+255),w,b
  1007  0008D4  6ED9               	movwf	fsr2l,c
  1008  0008D6  0E00               	movlw	high _ProcessArray
  1009  0008D8  0100               	movlb	0	; () banked
  1010  0008DA  21C7               	addwfc	(??_receiveData+3)& (0+255),w,b
  1011  0008DC  6EDA               	movwf	fsr2h,c
  1012  0008DE  0101               	movlb	1	; () banked
  1013  0008E0  51F2               	movf	receiveData@CS& (0+255),w,b
  1014  0008E2  18DE               	xorwf	postinc2,w,c
  1015  0008E4  A4D8               	btfss	status,2,c
  1016  0008E6  D00F               	goto	l2507
  1017                           
  1018                           ; BSR set to: 1
  1019                           ;CarCom.c: 100: LATAbits.LATA3 ^= 1;
  1020  0008E8  7689               	btg	3977,3,c	;volatile
  1021                           
  1022                           ; BSR set to: 1
  1023                           ;CarCom.c: 101: ComController(ProcessArray,result.out_len);
  1024  0008EA  0EDE               	movlw	low _ProcessArray
  1025  0008EC  0100               	movlb	0	; () banked
  1026  0008EE  6FBC               	movwf	ComController@DTI& (0+255),b
  1027  0008F0  0E00               	movlw	high _ProcessArray
  1028  0008F2  0100               	movlb	0	; () banked
  1029  0008F4  6FBD               	movwf	(ComController@DTI+1)& (0+255),b
  1030  0008F6  C1F5  F0BE         	movff	receiveData@result,ComController@lenth
  1031  0008FA  C1F6  F0BF         	movff	receiveData@result+1,ComController@lenth+1
  1032  0008FE  EC85  F004         	call	_ComController	;wreg free
  1033                           
  1034                           ;CarCom.c: 102: return 1;
  1035  000902  0E01               	movlw	1
  1036  000904  0012               	return	
  1037  000906                     l2507:
  1038                           
  1039                           ;CarCom.c: 113: }
  1040                           ;CarCom.c: 115: return 0;
  1041  000906  0E00               	movlw	0
  1042  000908  0012               	return	
  1043  00090A                     __end_of_receiveData:
  1044                           	opt stack 0
  1045                           tblptru	equ	0xFF8
  1046                           tblptrh	equ	0xFF7
  1047                           tblptrl	equ	0xFF6
  1048                           tablat	equ	0xFF5
  1049                           postinc0	equ	0xFEE
  1050                           wreg	equ	0xFE8
  1051                           postdec1	equ	0xFE5
  1052                           fsr1l	equ	0xFE1
  1053                           indf2	equ	0xFDF
  1054                           postinc2	equ	0xFDE
  1055                           fsr2h	equ	0xFDA
  1056                           fsr2l	equ	0xFD9
  1057                           status	equ	0xFD8
  1058                           
  1059 ;; *************** function _cobs_decode *****************
  1060 ;; Defined at:
  1061 ;;		line 115 in file "COBS.c"
  1062 ;; Parameters:    Size  Location     Type
  1063 ;;  dst_buf_ptr     2   26[COMRAM] PTR unsigned char 
  1064 ;;		 -> ProcessArray(30), 
  1065 ;;  dst_buf_len     2   28[COMRAM] unsigned int 
  1066 ;;  src_ptr         2   30[COMRAM] PTR const unsigned char 
  1067 ;;		 -> ReciveArray(30), 
  1068 ;;  src_len         2   32[COMRAM] unsigned int 
  1069 ;; Auto vars:     Size  Location     Type
  1070 ;;  result          3   11[BANK0 ] struct .
  1071 ;;  dst_write_pt    2    8[BANK0 ] PTR unsigned char 
  1072 ;;		 -> ProcessArray(30), 
  1073 ;;  remaining_by    2    6[BANK0 ] unsigned int 
  1074 ;;  dst_buf_end_    2    2[BANK0 ] PTR unsigned char 
  1075 ;;		 -> ProcessArray(30), 
  1076 ;;  src_end_ptr     2    0[BANK0 ] PTR const unsigned char 
  1077 ;;		 -> ReciveArray(30), 
  1078 ;;  len_code        1   10[BANK0 ] unsigned char 
  1079 ;;  i               1    5[BANK0 ] unsigned char 
  1080 ;;  src_byte        1    4[BANK0 ] unsigned char 
  1081 ;; Return value:  Size  Location     Type
  1082 ;;                  3   26[COMRAM] struct .
  1083 ;; Registers used:
  1084 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1085 ;; Tracked objects:
  1086 ;;		On entry : 0/0
  1087 ;;		On exit  : 0/0
  1088 ;;		Unchanged: 0/0
  1089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1090 ;;      Params:         8       0       0       0       0       0       0
  1091 ;;      Locals:         0      14       0       0       0       0       0
  1092 ;;      Temps:          2       0       0       0       0       0       0
  1093 ;;      Totals:        10      14       0       0       0       0       0
  1094 ;;Total ram usage:       24 bytes
  1095 ;; Hardware stack levels used:    1
  1096 ;; Hardware stack levels required when called:    4
  1097 ;; This function calls:
  1098 ;;		Nothing
  1099 ;; This function is called by:
  1100 ;;		_receiveData
  1101 ;; This function uses a non-reentrant model
  1102 ;;
  1103                           
  1104                           	psect	text3
  1105  00027E                     __ptext3:
  1106                           	opt stack 0
  1107  00027E                     _cobs_decode:
  1108                           	opt stack 24
  1109                           
  1110                           ;COBS.c: 117: cobs_decode_result result = { 0, COBS_DECODE_OK };
  1111                           
  1112                           ;incstack = 0
  1113  00027E  C035  F06B         	movff	cobs_decode@F192,cobs_decode@result
  1114  000282  C036  F06C         	movff	cobs_decode@F192+1,cobs_decode@result+1
  1115  000286  C037  F06D         	movff	cobs_decode@F192+2,cobs_decode@result+2
  1116                           
  1117                           ;COBS.c: 118: const uint8_t * src_end_ptr = src_ptr + src_len;
  1118  00028A  5021               	movf	cobs_decode@src_len,w,c
  1119  00028C  241F               	addwf	cobs_decode@src_ptr,w,c
  1120  00028E  0100               	movlb	0	; () banked
  1121  000290  6F60               	movwf	cobs_decode@src_end_ptr& (0+255),b
  1122  000292  5022               	movf	cobs_decode@src_len+1,w,c
  1123  000294  2020               	addwfc	cobs_decode@src_ptr+1,w,c
  1124  000296  0100               	movlb	0	; () banked
  1125  000298  6F61               	movwf	(cobs_decode@src_end_ptr+1)& (0+255),b
  1126                           
  1127                           ;COBS.c: 119: uint8_t * dst_buf_end_ptr = dst_buf_ptr + dst_buf_len;
  1128  00029A  501D               	movf	cobs_decode@dst_buf_len,w,c
  1129  00029C  241B               	addwf	cobs_decode@dst_buf_ptr,w,c
  1130  00029E  0100               	movlb	0	; () banked
  1131  0002A0  6F62               	movwf	cobs_decode@dst_buf_end_ptr& (0+255),b
  1132  0002A2  501E               	movf	cobs_decode@dst_buf_len+1,w,c
  1133  0002A4  201C               	addwfc	cobs_decode@dst_buf_ptr+1,w,c
  1134  0002A6  0100               	movlb	0	; () banked
  1135  0002A8  6F63               	movwf	(cobs_decode@dst_buf_end_ptr+1)& (0+255),b
  1136                           
  1137                           ;COBS.c: 120: uint8_t * dst_write_ptr = dst_buf_ptr;
  1138  0002AA  C01B  F068         	movff	cobs_decode@dst_buf_ptr,cobs_decode@dst_write_ptr
  1139  0002AE  C01C  F069         	movff	cobs_decode@dst_buf_ptr+1,cobs_decode@dst_write_ptr+1
  1140                           
  1141                           ;COBS.c: 121: size_t remaining_bytes;
  1142                           ;COBS.c: 122: uint8_t src_byte;
  1143                           ;COBS.c: 123: uint8_t i;
  1144                           ;COBS.c: 124: uint8_t len_code;
  1145                           ;COBS.c: 128: if ((dst_buf_ptr == (0)) || (src_ptr == (0)))
  1146  0002B2  501B               	movf	cobs_decode@dst_buf_ptr,w,c
  1147  0002B4  101C               	iorwf	cobs_decode@dst_buf_ptr+1,w,c
  1148  0002B6  B4D8               	btfsc	status,2,c
  1149  0002B8  D004               	goto	l2391
  1150                           
  1151                           ; BSR set to: 0
  1152  0002BA  501F               	movf	cobs_decode@src_ptr,w,c
  1153  0002BC  1020               	iorwf	cobs_decode@src_ptr+1,w,c
  1154  0002BE  A4D8               	btfss	status,2,c
  1155  0002C0  D00A               	goto	l2397
  1156  0002C2                     l2391:
  1157                           
  1158                           ; BSR set to: 0
  1159                           ;COBS.c: 129: {
  1160                           ;COBS.c: 130: result.status = COBS_DECODE_NULL_POINTER;
  1161  0002C2  0E01               	movlw	1
  1162  0002C4  0100               	movlb	0	; () banked
  1163  0002C6  6F6D               	movwf	(cobs_decode@result+2)& (0+255),b
  1164                           
  1165                           ; BSR set to: 0
  1166                           ;COBS.c: 131: return result;
  1167  0002C8  C06B  F01B         	movff	cobs_decode@result,?_cobs_decode
  1168  0002CC  C06C  F01C         	movff	cobs_decode@result+1,?_cobs_decode+1
  1169  0002D0  C06D  F01D         	movff	cobs_decode@result+2,?_cobs_decode+2
  1170                           
  1171                           ; BSR set to: 0
  1172  0002D4  0012               	return	
  1173  0002D6                     l2397:
  1174                           
  1175                           ; BSR set to: 0
  1176                           ;COBS.c: 132: }
  1177                           ;COBS.c: 134: if (src_len != 0)
  1178  0002D6  5021               	movf	cobs_decode@src_len,w,c
  1179  0002D8  1022               	iorwf	cobs_decode@src_len+1,w,c
  1180  0002DA  B4D8               	btfsc	status,2,c
  1181  0002DC  D096               	goto	l2461
  1182  0002DE                     l2399:
  1183                           
  1184                           ; BSR set to: 0
  1185                           ;COBS.c: 137: {
  1186                           ;COBS.c: 138: len_code = *src_ptr++;
  1187  0002DE  C01F  FFD9         	movff	cobs_decode@src_ptr,fsr2l
  1188  0002E2  C020  FFDA         	movff	cobs_decode@src_ptr+1,fsr2h
  1189  0002E6  50DF               	movf	indf2,w,c
  1190  0002E8  0100               	movlb	0	; () banked
  1191  0002EA  6F6A               	movwf	cobs_decode@len_code& (0+255),b
  1192                           
  1193                           ; BSR set to: 0
  1194  0002EC  4A1F               	infsnz	cobs_decode@src_ptr,f,c
  1195  0002EE  2A20               	incf	cobs_decode@src_ptr+1,f,c
  1196                           
  1197                           ; BSR set to: 0
  1198                           ;COBS.c: 139: if (len_code == 0)
  1199  0002F0  0100               	movlb	0	; () banked
  1200  0002F2  516A               	movf	cobs_decode@len_code& (0+255),w,b
  1201  0002F4  0100               	movlb	0	; () banked
  1202  0002F6  A4D8               	btfss	status,2,c
  1203  0002F8  D003               	goto	l2407
  1204                           
  1205                           ; BSR set to: 0
  1206                           ;COBS.c: 140: {
  1207                           ;COBS.c: 141: result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
  1208  0002FA  0100               	movlb	0	; () banked
  1209  0002FC  856D               	bsf	(cobs_decode@result+2)& (0+255),2,b
  1210                           
  1211                           ;COBS.c: 142: break;
  1212  0002FE  D085               	goto	l2461
  1213  000300                     l2407:
  1214                           
  1215                           ; BSR set to: 0
  1216                           ;COBS.c: 143: }
  1217                           ;COBS.c: 144: len_code--;
  1218  000300  0100               	movlb	0	; () banked
  1219  000302  076A               	decf	cobs_decode@len_code& (0+255),f,b
  1220                           
  1221                           ; BSR set to: 0
  1222                           ;COBS.c: 147: remaining_bytes = src_end_ptr - src_ptr;
  1223  000304  C01F  F023         	movff	cobs_decode@src_ptr,??_cobs_decode
  1224  000308  C020  F024         	movff	cobs_decode@src_ptr+1,??_cobs_decode+1
  1225  00030C  1E23               	comf	??_cobs_decode,f,c
  1226  00030E  1E24               	comf	??_cobs_decode+1,f,c
  1227  000310  4A23               	infsnz	??_cobs_decode,f,c
  1228  000312  2A24               	incf	??_cobs_decode+1,f,c
  1229  000314  0100               	movlb	0	; () banked
  1230  000316  5160               	movf	cobs_decode@src_end_ptr& (0+255),w,b
  1231  000318  2423               	addwf	??_cobs_decode,w,c
  1232  00031A  0100               	movlb	0	; () banked
  1233  00031C  6F66               	movwf	cobs_decode@remaining_bytes& (0+255),b
  1234  00031E  0100               	movlb	0	; () banked
  1235  000320  5161               	movf	(cobs_decode@src_end_ptr+1)& (0+255),w,b
  1236  000322  2024               	addwfc	??_cobs_decode+1,w,c
  1237  000324  0100               	movlb	0	; () banked
  1238  000326  6F67               	movwf	(cobs_decode@remaining_bytes+1)& (0+255),b
  1239                           
  1240                           ; BSR set to: 0
  1241                           ;COBS.c: 148: if (len_code > remaining_bytes)
  1242  000328  0100               	movlb	0	; () banked
  1243  00032A  516A               	movf	cobs_decode@len_code& (0+255),w,b
  1244  00032C  0100               	movlb	0	; () banked
  1245  00032E  5D66               	subwf	cobs_decode@remaining_bytes& (0+255),w,b
  1246  000330  0E00               	movlw	0
  1247  000332  5967               	subwfb	(cobs_decode@remaining_bytes+1)& (0+255),w,b
  1248  000334  B0D8               	btfsc	status,0,c
  1249  000336  D004               	goto	l2417
  1250                           
  1251                           ; BSR set to: 0
  1252                           ;COBS.c: 149: {
  1253                           ;COBS.c: 150: result.status |= COBS_DECODE_INPUT_TOO_SHORT;
  1254  000338  0100               	movlb	0	; () banked
  1255  00033A  876D               	bsf	(cobs_decode@result+2)& (0+255),3,b
  1256                           
  1257                           ; BSR set to: 0
  1258                           ;COBS.c: 151: len_code = remaining_bytes;
  1259  00033C  C066  F06A         	movff	cobs_decode@remaining_bytes,cobs_decode@len_code
  1260  000340                     l2417:
  1261                           
  1262                           ; BSR set to: 0
  1263                           ;COBS.c: 152: }
  1264                           ;COBS.c: 155: remaining_bytes = dst_buf_end_ptr - dst_write_ptr;
  1265  000340  C068  F023         	movff	cobs_decode@dst_write_ptr,??_cobs_decode
  1266  000344  C069  F024         	movff	cobs_decode@dst_write_ptr+1,??_cobs_decode+1
  1267  000348  1E23               	comf	??_cobs_decode,f,c
  1268  00034A  1E24               	comf	??_cobs_decode+1,f,c
  1269  00034C  4A23               	infsnz	??_cobs_decode,f,c
  1270  00034E  2A24               	incf	??_cobs_decode+1,f,c
  1271  000350  0100               	movlb	0	; () banked
  1272  000352  5162               	movf	cobs_decode@dst_buf_end_ptr& (0+255),w,b
  1273  000354  2423               	addwf	??_cobs_decode,w,c
  1274  000356  0100               	movlb	0	; () banked
  1275  000358  6F66               	movwf	cobs_decode@remaining_bytes& (0+255),b
  1276  00035A  0100               	movlb	0	; () banked
  1277  00035C  5163               	movf	(cobs_decode@dst_buf_end_ptr+1)& (0+255),w,b
  1278  00035E  2024               	addwfc	??_cobs_decode+1,w,c
  1279  000360  0100               	movlb	0	; () banked
  1280  000362  6F67               	movwf	(cobs_decode@remaining_bytes+1)& (0+255),b
  1281                           
  1282                           ; BSR set to: 0
  1283                           ;COBS.c: 156: if (len_code > remaining_bytes)
  1284  000364  0100               	movlb	0	; () banked
  1285  000366  516A               	movf	cobs_decode@len_code& (0+255),w,b
  1286  000368  0100               	movlb	0	; () banked
  1287  00036A  5D66               	subwf	cobs_decode@remaining_bytes& (0+255),w,b
  1288  00036C  0E00               	movlw	0
  1289  00036E  5967               	subwfb	(cobs_decode@remaining_bytes+1)& (0+255),w,b
  1290  000370  B0D8               	btfsc	status,0,c
  1291  000372  D004               	goto	l2425
  1292                           
  1293                           ; BSR set to: 0
  1294                           ;COBS.c: 157: {
  1295                           ;COBS.c: 158: result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
  1296  000374  0100               	movlb	0	; () banked
  1297  000376  836D               	bsf	(cobs_decode@result+2)& (0+255),1,b
  1298                           
  1299                           ; BSR set to: 0
  1300                           ;COBS.c: 159: len_code = remaining_bytes;
  1301  000378  C066  F06A         	movff	cobs_decode@remaining_bytes,cobs_decode@len_code
  1302  00037C                     l2425:
  1303                           
  1304                           ; BSR set to: 0
  1305                           ;COBS.c: 160: }
  1306                           ;COBS.c: 162: for (i = len_code; i != 0; i--)
  1307  00037C  C06A  F065         	movff	cobs_decode@len_code,cobs_decode@i
  1308  000380                     l2427:
  1309                           
  1310                           ; BSR set to: 0
  1311  000380  0100               	movlb	0	; () banked
  1312  000382  5165               	movf	cobs_decode@i& (0+255),w,b
  1313  000384  0100               	movlb	0	; () banked
  1314  000386  B4D8               	btfsc	status,2,c
  1315  000388  D01C               	goto	l2447
  1316                           
  1317                           ; BSR set to: 0
  1318                           ;COBS.c: 163: {
  1319                           ;COBS.c: 164: src_byte = *src_ptr++;
  1320                           
  1321                           ; BSR set to: 0
  1322                           
  1323                           ; BSR set to: 0
  1324  00038A  C01F  FFD9         	movff	cobs_decode@src_ptr,fsr2l
  1325  00038E  C020  FFDA         	movff	cobs_decode@src_ptr+1,fsr2h
  1326  000392  50DF               	movf	indf2,w,c
  1327  000394  0100               	movlb	0	; () banked
  1328  000396  6F64               	movwf	cobs_decode@src_byte& (0+255),b
  1329                           
  1330                           ; BSR set to: 0
  1331  000398  4A1F               	infsnz	cobs_decode@src_ptr,f,c
  1332  00039A  2A20               	incf	cobs_decode@src_ptr+1,f,c
  1333                           
  1334                           ; BSR set to: 0
  1335                           ;COBS.c: 165: if (src_byte == 0)
  1336  00039C  0100               	movlb	0	; () banked
  1337  00039E  5164               	movf	cobs_decode@src_byte& (0+255),w,b
  1338  0003A0  0100               	movlb	0	; () banked
  1339  0003A2  A4D8               	btfss	status,2,c
  1340  0003A4  D002               	goto	l2439
  1341                           
  1342                           ; BSR set to: 0
  1343                           ;COBS.c: 166: {
  1344                           ;COBS.c: 167: result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
  1345  0003A6  0100               	movlb	0	; () banked
  1346  0003A8  856D               	bsf	(cobs_decode@result+2)& (0+255),2,b
  1347  0003AA                     l2439:
  1348                           
  1349                           ; BSR set to: 0
  1350                           ;COBS.c: 168: }
  1351                           ;COBS.c: 169: *dst_write_ptr++ = src_byte;
  1352  0003AA  C068  FFD9         	movff	cobs_decode@dst_write_ptr,fsr2l
  1353  0003AE  C069  FFDA         	movff	cobs_decode@dst_write_ptr+1,fsr2h
  1354  0003B2  C064  FFDF         	movff	cobs_decode@src_byte,indf2
  1355                           
  1356                           ; BSR set to: 0
  1357  0003B6  0100               	movlb	0	; () banked
  1358  0003B8  4B68               	infsnz	cobs_decode@dst_write_ptr& (0+255),f,b
  1359  0003BA  2B69               	incf	(cobs_decode@dst_write_ptr+1)& (0+255),f,b
  1360                           
  1361                           ; BSR set to: 0
  1362  0003BC  0100               	movlb	0	; () banked
  1363  0003BE  0765               	decf	cobs_decode@i& (0+255),f,b
  1364  0003C0  D7DF               	goto	l2427
  1365  0003C2                     l2447:
  1366                           
  1367                           ; BSR set to: 0
  1368                           ;COBS.c: 170: }
  1369                           ;COBS.c: 172: if (src_ptr >= src_end_ptr)
  1370  0003C2  0100               	movlb	0	; () banked
  1371  0003C4  5160               	movf	cobs_decode@src_end_ptr& (0+255),w,b
  1372  0003C6  5C1F               	subwf	cobs_decode@src_ptr,w,c
  1373  0003C8  0100               	movlb	0	; () banked
  1374  0003CA  5161               	movf	(cobs_decode@src_end_ptr+1)& (0+255),w,b
  1375  0003CC  5820               	subwfb	cobs_decode@src_ptr+1,w,c
  1376  0003CE  B0D8               	btfsc	status,0,c
  1377  0003D0  D01C               	goto	l2461
  1378                           
  1379                           ; BSR set to: 0
  1380                           ;COBS.c: 175: }
  1381                           ;COBS.c: 178: if (len_code != 0xFE)
  1382                           
  1383                           ; BSR set to: 0
  1384                           
  1385                           ; BSR set to: 0
  1386                           ;COBS.c: 173: {
  1387                           ;COBS.c: 174: break;
  1388  0003D2  0EFE               	movlw	254
  1389  0003D4  0100               	movlb	0	; () banked
  1390  0003D6  196A               	xorwf	cobs_decode@len_code& (0+255),w,b
  1391  0003D8  B4D8               	btfsc	status,2,c
  1392  0003DA  D781               	goto	l2399
  1393                           
  1394                           ; BSR set to: 0
  1395                           ;COBS.c: 179: {
  1396                           ;COBS.c: 180: if (dst_write_ptr >= dst_buf_end_ptr)
  1397  0003DC  0100               	movlb	0	; () banked
  1398  0003DE  5162               	movf	cobs_decode@dst_buf_end_ptr& (0+255),w,b
  1399  0003E0  0100               	movlb	0	; () banked
  1400  0003E2  5D68               	subwf	cobs_decode@dst_write_ptr& (0+255),w,b
  1401  0003E4  0100               	movlb	0	; () banked
  1402  0003E6  5163               	movf	(cobs_decode@dst_buf_end_ptr+1)& (0+255),w,b
  1403  0003E8  0100               	movlb	0	; () banked
  1404  0003EA  5969               	subwfb	(cobs_decode@dst_write_ptr+1)& (0+255),w,b
  1405  0003EC  A0D8               	btfss	status,0,c
  1406  0003EE  D003               	goto	l2457
  1407                           
  1408                           ; BSR set to: 0
  1409                           ;COBS.c: 181: {
  1410                           ;COBS.c: 182: result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
  1411  0003F0  0100               	movlb	0	; () banked
  1412  0003F2  836D               	bsf	(cobs_decode@result+2)& (0+255),1,b
  1413                           
  1414                           ;COBS.c: 183: break;
  1415  0003F4  D00A               	goto	l2461
  1416  0003F6                     l2457:
  1417                           
  1418                           ; BSR set to: 0
  1419                           ;COBS.c: 184: }
  1420                           ;COBS.c: 185: *dst_write_ptr++ = 0;
  1421  0003F6  C068  FFD9         	movff	cobs_decode@dst_write_ptr,fsr2l
  1422  0003FA  C069  FFDA         	movff	cobs_decode@dst_write_ptr+1,fsr2h
  1423  0003FE  0E00               	movlw	0
  1424  000400  6EDF               	movwf	indf2,c
  1425                           
  1426                           ; BSR set to: 0
  1427  000402  0100               	movlb	0	; () banked
  1428  000404  4B68               	infsnz	cobs_decode@dst_write_ptr& (0+255),f,b
  1429  000406  2B69               	incf	(cobs_decode@dst_write_ptr+1)& (0+255),f,b
  1430                           
  1431                           ; BSR set to: 0
  1432                           ;COBS.c: 186: }
  1433                           ;COBS.c: 187: }
  1434  000408  D76A               	goto	l2399
  1435  00040A                     l2461:
  1436                           
  1437                           ; BSR set to: 0
  1438                           ;COBS.c: 188: }
  1439                           ;COBS.c: 190: result.out_len = dst_write_ptr - dst_buf_ptr;
  1440  00040A  C01B  F023         	movff	cobs_decode@dst_buf_ptr,??_cobs_decode
  1441  00040E  C01C  F024         	movff	cobs_decode@dst_buf_ptr+1,??_cobs_decode+1
  1442  000412  1E23               	comf	??_cobs_decode,f,c
  1443  000414  1E24               	comf	??_cobs_decode+1,f,c
  1444  000416  4A23               	infsnz	??_cobs_decode,f,c
  1445  000418  2A24               	incf	??_cobs_decode+1,f,c
  1446  00041A  0100               	movlb	0	; () banked
  1447  00041C  5168               	movf	cobs_decode@dst_write_ptr& (0+255),w,b
  1448  00041E  2423               	addwf	??_cobs_decode,w,c
  1449  000420  0100               	movlb	0	; () banked
  1450  000422  6F6B               	movwf	cobs_decode@result& (0+255),b
  1451  000424  0100               	movlb	0	; () banked
  1452  000426  5169               	movf	(cobs_decode@dst_write_ptr+1)& (0+255),w,b
  1453  000428  2024               	addwfc	??_cobs_decode+1,w,c
  1454  00042A  0100               	movlb	0	; () banked
  1455  00042C  6F6C               	movwf	(cobs_decode@result+1)& (0+255),b
  1456                           
  1457                           ; BSR set to: 0
  1458                           ;COBS.c: 192: return result;
  1459  00042E  C06B  F01B         	movff	cobs_decode@result,?_cobs_decode
  1460  000432  C06C  F01C         	movff	cobs_decode@result+1,?_cobs_decode+1
  1461  000436  C06D  F01D         	movff	cobs_decode@result+2,?_cobs_decode+2
  1462  00043A  0012               	return	
  1463  00043C                     __end_of_cobs_decode:
  1464                           	opt stack 0
  1465                           tblptru	equ	0xFF8
  1466                           tblptrh	equ	0xFF7
  1467                           tblptrl	equ	0xFF6
  1468                           tablat	equ	0xFF5
  1469                           postinc0	equ	0xFEE
  1470                           wreg	equ	0xFE8
  1471                           postdec1	equ	0xFE5
  1472                           fsr1l	equ	0xFE1
  1473                           indf2	equ	0xFDF
  1474                           postinc2	equ	0xFDE
  1475                           fsr2h	equ	0xFDA
  1476                           fsr2l	equ	0xFD9
  1477                           status	equ	0xFD8
  1478                           
  1479 ;; *************** function _Receive_get *****************
  1480 ;; Defined at:
  1481 ;;		line 125 in file "UART.c"
  1482 ;; Parameters:    Size  Location     Type
  1483 ;;		None
  1484 ;; Auto vars:     Size  Location     Type
  1485 ;;		None
  1486 ;; Return value:  Size  Location     Type
  1487 ;;                  1    wreg      unsigned char 
  1488 ;; Registers used:
  1489 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1490 ;; Tracked objects:
  1491 ;;		On entry : 0/0
  1492 ;;		On exit  : 0/0
  1493 ;;		Unchanged: 0/0
  1494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1495 ;;      Params:         0       0       0       0       0       0       0
  1496 ;;      Locals:         0       0       0       0       0       0       0
  1497 ;;      Temps:          0       0       0       0       0       0       0
  1498 ;;      Totals:         0       0       0       0       0       0       0
  1499 ;;Total ram usage:        0 bytes
  1500 ;; Hardware stack levels used:    1
  1501 ;; Hardware stack levels required when called:    6
  1502 ;; This function calls:
  1503 ;;		_UART_buff_get
  1504 ;; This function is called by:
  1505 ;;		_receiveData
  1506 ;;		_getch
  1507 ;; This function uses a non-reentrant model
  1508 ;;
  1509                           
  1510                           	psect	text4
  1511  000FFA                     __ptext4:
  1512                           	opt stack 0
  1513  000FFA                     _Receive_get:
  1514                           	opt stack 22
  1515                           
  1516                           ;UART.c: 126: return UART_buff_get(&input_buffer);
  1517                           
  1518                           ; BSR set to: 0
  1519                           ;incstack = 0
  1520  000FFA  0E6A               	movlw	low _input_buffer
  1521  000FFC  6E21               	movwf	UART_buff_get@_this,c
  1522  000FFE  0E01               	movlw	high _input_buffer
  1523  001000  6E22               	movwf	UART_buff_get@_this+1,c
  1524  001002  EC75  F005         	call	_UART_buff_get	;wreg free
  1525  001006  0012               	return	
  1526  001008                     __end_of_Receive_get:
  1527                           	opt stack 0
  1528                           tblptru	equ	0xFF8
  1529                           tblptrh	equ	0xFF7
  1530                           tblptrl	equ	0xFF6
  1531                           tablat	equ	0xFF5
  1532                           postinc0	equ	0xFEE
  1533                           wreg	equ	0xFE8
  1534                           postdec1	equ	0xFE5
  1535                           fsr1l	equ	0xFE1
  1536                           indf2	equ	0xFDF
  1537                           postinc2	equ	0xFDE
  1538                           fsr2h	equ	0xFDA
  1539                           fsr2l	equ	0xFD9
  1540                           status	equ	0xFD8
  1541                           
  1542 ;; *************** function _Receive_available *****************
  1543 ;; Defined at:
  1544 ;;		line 121 in file "UART.c"
  1545 ;; Parameters:    Size  Location     Type
  1546 ;;		None
  1547 ;; Auto vars:     Size  Location     Type
  1548 ;;		None
  1549 ;; Return value:  Size  Location     Type
  1550 ;;                  2   28[COMRAM] int 
  1551 ;; Registers used:
  1552 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1553 ;; Tracked objects:
  1554 ;;		On entry : 0/0
  1555 ;;		On exit  : 0/0
  1556 ;;		Unchanged: 0/0
  1557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1558 ;;      Params:         2       0       0       0       0       0       0
  1559 ;;      Locals:         0       0       0       0       0       0       0
  1560 ;;      Temps:          0       0       0       0       0       0       0
  1561 ;;      Totals:         2       0       0       0       0       0       0
  1562 ;;Total ram usage:        2 bytes
  1563 ;; Hardware stack levels used:    1
  1564 ;; Hardware stack levels required when called:    5
  1565 ;; This function calls:
  1566 ;;		_UART_buff_size
  1567 ;; This function is called by:
  1568 ;;		_receiveData
  1569 ;; This function uses a non-reentrant model
  1570 ;;
  1571                           
  1572                           	psect	text5
  1573  000F94                     __ptext5:
  1574                           	opt stack 0
  1575  000F94                     _Receive_available:
  1576                           	opt stack 23
  1577                           
  1578                           ;UART.c: 122: return UART_buff_size(&input_buffer);
  1579                           
  1580                           ;incstack = 0
  1581  000F94  0E6A               	movlw	low _input_buffer
  1582  000F96  6E1B               	movwf	UART_buff_size@_this,c
  1583  000F98  0E01               	movlw	high _input_buffer
  1584  000F9A  6E1C               	movwf	UART_buff_size@_this+1,c
  1585  000F9C  ECD5  F007         	call	_UART_buff_size	;wreg free
  1586  000FA0  C01B  F01D         	movff	?_UART_buff_size,?_Receive_available
  1587  000FA4  C01C  F01E         	movff	?_UART_buff_size+1,?_Receive_available+1
  1588  000FA8  0012               	return	
  1589  000FAA                     __end_of_Receive_available:
  1590                           	opt stack 0
  1591                           tblptru	equ	0xFF8
  1592                           tblptrh	equ	0xFF7
  1593                           tblptrl	equ	0xFF6
  1594                           tablat	equ	0xFF5
  1595                           postinc0	equ	0xFEE
  1596                           wreg	equ	0xFE8
  1597                           postdec1	equ	0xFE5
  1598                           fsr1l	equ	0xFE1
  1599                           indf2	equ	0xFDF
  1600                           postinc2	equ	0xFDE
  1601                           fsr2h	equ	0xFDA
  1602                           fsr2l	equ	0xFD9
  1603                           status	equ	0xFD8
  1604                           
  1605 ;; *************** function _UART_buff_size *****************
  1606 ;; Defined at:
  1607 ;;		line 101 in file "UART.c"
  1608 ;; Parameters:    Size  Location     Type
  1609 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  1610 ;;		 -> output_buffer(106), input_buffer(106), 
  1611 ;; Auto vars:     Size  Location     Type
  1612 ;;		None
  1613 ;; Return value:  Size  Location     Type
  1614 ;;                  2   26[COMRAM] int 
  1615 ;; Registers used:
  1616 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1617 ;; Tracked objects:
  1618 ;;		On entry : 0/0
  1619 ;;		On exit  : 0/0
  1620 ;;		Unchanged: 0/0
  1621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1622 ;;      Params:         2       0       0       0       0       0       0
  1623 ;;      Locals:         0       0       0       0       0       0       0
  1624 ;;      Temps:          0       0       0       0       0       0       0
  1625 ;;      Totals:         2       0       0       0       0       0       0
  1626 ;;Total ram usage:        2 bytes
  1627 ;; Hardware stack levels used:    1
  1628 ;; Hardware stack levels required when called:    4
  1629 ;; This function calls:
  1630 ;;		Nothing
  1631 ;; This function is called by:
  1632 ;;		_Receive_available
  1633 ;; This function uses a non-reentrant model
  1634 ;;
  1635                           
  1636                           	psect	text6
  1637  000FAA                     __ptext6:
  1638                           	opt stack 0
  1639  000FAA                     _UART_buff_size:
  1640                           	opt stack 23
  1641                           
  1642                           ;UART.c: 102: return (_this->count);
  1643                           
  1644                           ;incstack = 0
  1645  000FAA  EE20 F068          	lfsr	2,104
  1646  000FAE  501B               	movf	UART_buff_size@_this,w,c
  1647  000FB0  26D9               	addwf	fsr2l,f,c
  1648  000FB2  501C               	movf	UART_buff_size@_this+1,w,c
  1649  000FB4  22DA               	addwfc	fsr2h,f,c
  1650  000FB6  CFDE F01B          	movff	postinc2,?_UART_buff_size
  1651  000FBA  CFDD F01C          	movff	postdec2,?_UART_buff_size+1
  1652  000FBE  0012               	return	
  1653  000FC0                     __end_of_UART_buff_size:
  1654                           	opt stack 0
  1655                           tblptru	equ	0xFF8
  1656                           tblptrh	equ	0xFF7
  1657                           tblptrl	equ	0xFF6
  1658                           tablat	equ	0xFF5
  1659                           postinc0	equ	0xFEE
  1660                           wreg	equ	0xFE8
  1661                           postdec1	equ	0xFE5
  1662                           fsr1l	equ	0xFE1
  1663                           indf2	equ	0xFDF
  1664                           postinc2	equ	0xFDE
  1665                           postdec2	equ	0xFDD
  1666                           fsr2h	equ	0xFDA
  1667                           fsr2l	equ	0xFD9
  1668                           status	equ	0xFD8
  1669                           
  1670 ;; *************** function _ComController *****************
  1671 ;; Defined at:
  1672 ;;		line 118 in file "CarCom.c"
  1673 ;; Parameters:    Size  Location     Type
  1674 ;;  DTI             2   92[BANK0 ] PTR unsigned char 
  1675 ;;		 -> ProcessArray(30), 
  1676 ;;  lenth           2   94[BANK0 ] unsigned int 
  1677 ;; Auto vars:     Size  Location     Type
  1678 ;;  DataToSend      4   96[BANK0 ] unsigned char [4]
  1679 ;; Return value:  Size  Location     Type
  1680 ;;                  1    wreg      void 
  1681 ;; Registers used:
  1682 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1683 ;; Tracked objects:
  1684 ;;		On entry : 0/0
  1685 ;;		On exit  : 0/0
  1686 ;;		Unchanged: 0/0
  1687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1688 ;;      Params:         0       4       0       0       0       0       0
  1689 ;;      Locals:         0       4       0       0       0       0       0
  1690 ;;      Temps:          1       0       0       0       0       0       0
  1691 ;;      Totals:         1       8       0       0       0       0       0
  1692 ;;Total ram usage:        9 bytes
  1693 ;; Hardware stack levels used:    1
  1694 ;; Hardware stack levels required when called:    8
  1695 ;; This function calls:
  1696 ;;		_Delay
  1697 ;;		_GetDataDict
  1698 ;;		_sendData
  1699 ;; This function is called by:
  1700 ;;		_receiveData
  1701 ;; This function uses a non-reentrant model
  1702 ;;
  1703                           
  1704                           	psect	text7
  1705  00090A                     __ptext7:
  1706                           	opt stack 0
  1707  00090A                     _ComController:
  1708                           	opt stack 20
  1709                           
  1710                           ;CarCom.c: 119: if(DTI[1] == 1){
  1711                           
  1712                           ;incstack = 0
  1713  00090A  0100               	movlb	0	; () banked
  1714  00090C  EE20 F001          	lfsr	2,1
  1715  000910  51BC               	movf	ComController@DTI& (0+255),w,b
  1716  000912  26D9               	addwf	fsr2l,f,c
  1717  000914  51BD               	movf	(ComController@DTI+1)& (0+255),w,b
  1718  000916  22DA               	addwfc	fsr2h,f,c
  1719  000918  04DE               	decf	postinc2,w,c
  1720  00091A  A4D8               	btfss	status,2,c
  1721  00091C  0012               	return	
  1722                           
  1723                           ; BSR set to: 0
  1724                           ;CarCom.c: 120: unsigned char DataToSend[4];
  1725                           ;CarCom.c: 121: GetDataDict(DTI[2], DTI[3], DataToSend, DTI[4]);
  1726  00091E  0100               	movlb	0	; () banked
  1727  000920  EE20 F003          	lfsr	2,3
  1728  000924  51BC               	movf	ComController@DTI& (0+255),w,b
  1729  000926  26D9               	addwf	fsr2l,f,c
  1730  000928  51BD               	movf	(ComController@DTI+1)& (0+255),w,b
  1731  00092A  22DA               	addwfc	fsr2h,f,c
  1732  00092C  50DF               	movf	indf2,w,c
  1733  00092E  6E1B               	movwf	GetDataDict@DataTableIndex,c
  1734  000930  0EC0               	movlw	low ComController@DataToSend
  1735  000932  6E1C               	movwf	GetDataDict@DataArray,c
  1736  000934  0E00               	movlw	high ComController@DataToSend
  1737  000936  6E1D               	movwf	GetDataDict@DataArray+1,c
  1738  000938  0100               	movlb	0	; () banked
  1739  00093A  EE20 F004          	lfsr	2,4
  1740  00093E  51BC               	movf	ComController@DTI& (0+255),w,b
  1741  000940  26D9               	addwf	fsr2l,f,c
  1742  000942  51BD               	movf	(ComController@DTI+1)& (0+255),w,b
  1743  000944  22DA               	addwfc	fsr2h,f,c
  1744  000946  50DF               	movf	indf2,w,c
  1745  000948  6E1E               	movwf	GetDataDict@numbofbytes,c
  1746  00094A  0100               	movlb	0	; () banked
  1747  00094C  EE20 F002          	lfsr	2,2
  1748  000950  51BC               	movf	ComController@DTI& (0+255),w,b
  1749  000952  26D9               	addwf	fsr2l,f,c
  1750  000954  51BD               	movf	(ComController@DTI+1)& (0+255),w,b
  1751  000956  22DA               	addwfc	fsr2h,f,c
  1752  000958  50DF               	movf	indf2,w,c
  1753  00095A  ECDD  F004         	call	_GetDataDict
  1754                           
  1755                           ;CarCom.c: 122: LATDbits.LATD4 = 1;
  1756  00095E  888C               	bsf	3980,4,c	;volatile
  1757                           
  1758                           ;CarCom.c: 123: Delay(5);
  1759  000960  0E00               	movlw	0
  1760  000962  6E1C               	movwf	Delay@wait+1,c
  1761  000964  0E05               	movlw	5
  1762  000966  6E1B               	movwf	Delay@wait,c
  1763  000968  ECE5  F006         	call	_Delay	;wreg free
  1764                           
  1765                           ;CarCom.c: 124: sendData(1, 2, 1, 1, DataToSend, DTI[4]);
  1766  00096C  0E02               	movlw	2
  1767  00096E  0100               	movlb	0	; () banked
  1768  000970  6F6D               	movwf	sendData@ComandByte& (0+255),b
  1769  000972  0E01               	movlw	1
  1770  000974  0100               	movlb	0	; () banked
  1771  000976  6F6E               	movwf	sendData@DataTable& (0+255),b
  1772  000978  0E01               	movlw	1
  1773  00097A  0100               	movlb	0	; () banked
  1774  00097C  6F6F               	movwf	sendData@DataTableIndex& (0+255),b
  1775  00097E  0EC0               	movlw	low ComController@DataToSend
  1776  000980  0100               	movlb	0	; () banked
  1777  000982  6F70               	movwf	sendData@DTS& (0+255),b
  1778  000984  0E00               	movlw	high ComController@DataToSend
  1779  000986  0100               	movlb	0	; () banked
  1780  000988  6F71               	movwf	(sendData@DTS+1)& (0+255),b
  1781  00098A  0100               	movlb	0	; () banked
  1782  00098C  EE20 F004          	lfsr	2,4
  1783  000990  51BC               	movf	ComController@DTI& (0+255),w,b
  1784  000992  26D9               	addwf	fsr2l,f,c
  1785  000994  51BD               	movf	(ComController@DTI+1)& (0+255),w,b
  1786  000996  22DA               	addwfc	fsr2h,f,c
  1787  000998  50DF               	movf	indf2,w,c
  1788  00099A  6E27               	movwf	??_ComController& (0+255),c
  1789  00099C  5027               	movf	??_ComController,w,c
  1790  00099E  0100               	movlb	0	; () banked
  1791  0009A0  6F72               	movwf	sendData@lenth& (0+255),b
  1792  0009A2  6B73               	clrf	(sendData@lenth+1)& (0+255),b
  1793  0009A4  0E01               	movlw	1
  1794  0009A6  EC52  F000         	call	_sendData
  1795                           
  1796                           ;CarCom.c: 125: Delay(3);
  1797  0009AA  0E00               	movlw	0
  1798  0009AC  6E1C               	movwf	Delay@wait+1,c
  1799  0009AE  0E03               	movlw	3
  1800  0009B0  6E1B               	movwf	Delay@wait,c
  1801  0009B2  ECE5  F006         	call	_Delay	;wreg free
  1802                           
  1803                           ;CarCom.c: 126: LATDbits.LATD4 = 0;
  1804  0009B6  988C               	bcf	3980,4,c	;volatile
  1805  0009B8  0012               	return	
  1806  0009BA                     __end_of_ComController:
  1807                           	opt stack 0
  1808                           tblptru	equ	0xFF8
  1809                           tblptrh	equ	0xFF7
  1810                           tblptrl	equ	0xFF6
  1811                           tablat	equ	0xFF5
  1812                           postinc0	equ	0xFEE
  1813                           wreg	equ	0xFE8
  1814                           postdec1	equ	0xFE5
  1815                           fsr1l	equ	0xFE1
  1816                           indf2	equ	0xFDF
  1817                           postinc2	equ	0xFDE
  1818                           postdec2	equ	0xFDD
  1819                           fsr2h	equ	0xFDA
  1820                           fsr2l	equ	0xFD9
  1821                           status	equ	0xFD8
  1822                           
  1823 ;; *************** function _sendData *****************
  1824 ;; Defined at:
  1825 ;;		line 40 in file "CarCom.c"
  1826 ;; Parameters:    Size  Location     Type
  1827 ;;  whereToSend     1    wreg     unsigned char 
  1828 ;;  ComandByte      1   13[BANK0 ] unsigned char 
  1829 ;;  DataTable       1   14[BANK0 ] unsigned char 
  1830 ;;  DataTableInd    1   15[BANK0 ] unsigned char 
  1831 ;;  DTS             2   16[BANK0 ] PTR unsigned char 
  1832 ;;		 -> ComController@DataToSend(4), 
  1833 ;;  lenth           2   18[BANK0 ] unsigned int 
  1834 ;; Auto vars:     Size  Location     Type
  1835 ;;  whereToSend     1   84[BANK0 ] unsigned char 
  1836 ;;  SendArray      30   54[BANK0 ] unsigned char [30]
  1837 ;;  COBSArray      30   24[BANK0 ] unsigned char [30]
  1838 ;;  result          3   86[BANK0 ] struct .
  1839 ;;  count           2   89[BANK0 ] int 
  1840 ;;  i               1   91[BANK0 ] unsigned char 
  1841 ;;  CS              1   85[BANK0 ] unsigned char 
  1842 ;; Return value:  Size  Location     Type
  1843 ;;                  1    wreg      void 
  1844 ;; Registers used:
  1845 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1846 ;; Tracked objects:
  1847 ;;		On entry : 0/0
  1848 ;;		On exit  : 0/0
  1849 ;;		Unchanged: 0/0
  1850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1851 ;;      Params:         0       7       0       0       0       0       0
  1852 ;;      Locals:         0      68       0       0       0       0       0
  1853 ;;      Temps:          0       4       0       0       0       0       0
  1854 ;;      Totals:         0      79       0       0       0       0       0
  1855 ;;Total ram usage:       79 bytes
  1856 ;; Hardware stack levels used:    1
  1857 ;; Hardware stack levels required when called:    7
  1858 ;; This function calls:
  1859 ;;		_CRC8
  1860 ;;		_Send_put
  1861 ;;		_cobs_encode
  1862 ;; This function is called by:
  1863 ;;		_ComController
  1864 ;; This function uses a non-reentrant model
  1865 ;;
  1866                           
  1867                           	psect	text8
  1868  0000A4                     __ptext8:
  1869                           	opt stack 0
  1870  0000A4                     _sendData:
  1871                           	opt stack 20
  1872                           
  1873                           ;incstack = 0
  1874                           ;sendData@whereToSend stored from wreg
  1875  0000A4  0100               	movlb	0	; () banked
  1876  0000A6  6FB4               	movwf	sendData@whereToSend& (0+255),b
  1877                           
  1878                           ;CarCom.c: 41: unsigned char SendArray[30];
  1879                           ;CarCom.c: 42: unsigned char COBSArray[30];
  1880                           ;CarCom.c: 44: cobs_encode_result result;
  1881                           ;CarCom.c: 46: SendArray[0] = 5+lenth;
  1882  0000A8  0100               	movlb	0	; () banked
  1883  0000AA  5172               	movf	sendData@lenth& (0+255),w,b
  1884  0000AC  0F05               	addlw	5
  1885  0000AE  0100               	movlb	0	; () banked
  1886  0000B0  6F96               	movwf	sendData@SendArray& (0+255),b
  1887                           
  1888                           ; BSR set to: 0
  1889                           ;CarCom.c: 47: SendArray[1] = ComandByte;
  1890  0000B2  C06D  F097         	movff	sendData@ComandByte,sendData@SendArray+1
  1891                           
  1892                           ; BSR set to: 0
  1893                           ;CarCom.c: 48: SendArray[2] = DataTable;
  1894  0000B6  C06E  F098         	movff	sendData@DataTable,sendData@SendArray+2
  1895                           
  1896                           ; BSR set to: 0
  1897                           ;CarCom.c: 49: SendArray[3] = DataTableIndex;
  1898  0000BA  C06F  F099         	movff	sendData@DataTableIndex,sendData@SendArray+3
  1899                           
  1900                           ; BSR set to: 0
  1901                           ;CarCom.c: 50: SendArray[4] = lenth;
  1902  0000BE  C072  F09A         	movff	sendData@lenth,sendData@SendArray+4
  1903                           
  1904                           ; BSR set to: 0
  1905                           ;CarCom.c: 52: unsigned char i = 0;
  1906  0000C2  0E00               	movlw	0
  1907  0000C4  0100               	movlb	0	; () banked
  1908  0000C6  6FBB               	movwf	sendData@i& (0+255),b
  1909                           
  1910                           ; BSR set to: 0
  1911                           ;CarCom.c: 53: int count = 5;
  1912  0000C8  0E00               	movlw	0
  1913  0000CA  0100               	movlb	0	; () banked
  1914  0000CC  6FBA               	movwf	(sendData@count+1)& (0+255),b
  1915  0000CE  0E05               	movlw	5
  1916  0000D0  6FB9               	movwf	sendData@count& (0+255),b
  1917  0000D2  D024               	goto	l2349
  1918  0000D4                     l2343:
  1919                           
  1920                           ; BSR set to: 0
  1921                           ;CarCom.c: 56: SendArray[i+5] = DTS[i];
  1922  0000D4  0100               	movlb	0	; () banked
  1923  0000D6  51BB               	movf	sendData@i& (0+255),w,b
  1924  0000D8  0D01               	mullw	1
  1925  0000DA  50F3               	movf	prodl,w,c
  1926  0000DC  0100               	movlb	0	; () banked
  1927  0000DE  2570               	addwf	sendData@DTS& (0+255),w,b
  1928  0000E0  6ED9               	movwf	fsr2l,c
  1929  0000E2  50F4               	movf	prodh,w,c
  1930  0000E4  0100               	movlb	0	; () banked
  1931  0000E6  2171               	addwfc	(sendData@DTS+1)& (0+255),w,b
  1932  0000E8  6EDA               	movwf	fsr2h,c
  1933  0000EA  0100               	movlb	0	; () banked
  1934  0000EC  51BB               	movf	sendData@i& (0+255),w,b
  1935  0000EE  0100               	movlb	0	; () banked
  1936  0000F0  6F74               	movwf	??_sendData& (0+255),b
  1937  0000F2  6B75               	clrf	(??_sendData+1)& (0+255),b
  1938  0000F4  0E05               	movlw	5
  1939  0000F6  0100               	movlb	0	; () banked
  1940  0000F8  2774               	addwf	??_sendData& (0+255),f,b
  1941  0000FA  0E00               	movlw	0
  1942  0000FC  2375               	addwfc	(??_sendData+1)& (0+255),f,b
  1943  0000FE  0E96               	movlw	low sendData@SendArray
  1944  000100  0100               	movlb	0	; () banked
  1945  000102  2574               	addwf	??_sendData& (0+255),w,b
  1946  000104  6EE1               	movwf	fsr1l,c
  1947  000106  0E00               	movlw	high sendData@SendArray
  1948  000108  0100               	movlb	0	; () banked
  1949  00010A  2175               	addwfc	(??_sendData+1)& (0+255),w,b
  1950  00010C  6EE2               	movwf	fsr1h,c
  1951  00010E  CFDF FFE7          	movff	indf2,indf1
  1952                           
  1953                           ; BSR set to: 0
  1954                           ;CarCom.c: 57: count++;
  1955  000112  0100               	movlb	0	; () banked
  1956  000114  4BB9               	infsnz	sendData@count& (0+255),f,b
  1957  000116  2BBA               	incf	(sendData@count+1)& (0+255),f,b
  1958                           
  1959                           ; BSR set to: 0
  1960  000118  0100               	movlb	0	; () banked
  1961  00011A  2BBB               	incf	sendData@i& (0+255),f,b
  1962  00011C                     l2349:
  1963                           
  1964                           ; BSR set to: 0
  1965  00011C  0100               	movlb	0	; () banked
  1966  00011E  51BB               	movf	sendData@i& (0+255),w,b
  1967  000120  0100               	movlb	0	; () banked
  1968  000122  6F74               	movwf	??_sendData& (0+255),b
  1969  000124  6B75               	clrf	(??_sendData+1)& (0+255),b
  1970  000126  0100               	movlb	0	; () banked
  1971  000128  5172               	movf	sendData@lenth& (0+255),w,b
  1972  00012A  0100               	movlb	0	; () banked
  1973  00012C  5D74               	subwf	??_sendData& (0+255),w,b
  1974  00012E  0100               	movlb	0	; () banked
  1975  000130  5173               	movf	(sendData@lenth+1)& (0+255),w,b
  1976  000132  0100               	movlb	0	; () banked
  1977  000134  5975               	subwfb	(??_sendData+1)& (0+255),w,b
  1978  000136  A0D8               	btfss	status,0,c
  1979  000138  D7CD               	goto	l2343
  1980                           
  1981                           ; BSR set to: 0
  1982                           ;CarCom.c: 58: }
  1983                           ;CarCom.c: 60: unsigned char CS = CRC8(SendArray, count);
  1984                           
  1985                           ; BSR set to: 0
  1986  00013A  0E96               	movlw	low sendData@SendArray
  1987  00013C  6E1B               	movwf	CRC8@data,c
  1988  00013E  0E00               	movlw	high sendData@SendArray
  1989  000140  6E1C               	movwf	CRC8@data+1,c
  1990  000142  C0B9  F01D         	movff	sendData@count,CRC8@len
  1991  000146  ECA2  F006         	call	_CRC8	;wreg free
  1992  00014A  0100               	movlb	0	; () banked
  1993  00014C  6FB5               	movwf	sendData@CS& (0+255),b
  1994                           
  1995                           ; BSR set to: 0
  1996                           ;CarCom.c: 61: SendArray[count] = CS;
  1997  00014E  0E96               	movlw	low sendData@SendArray
  1998  000150  0100               	movlb	0	; () banked
  1999  000152  25B9               	addwf	sendData@count& (0+255),w,b
  2000  000154  6ED9               	movwf	fsr2l,c
  2001  000156  0E00               	movlw	high sendData@SendArray
  2002  000158  0100               	movlb	0	; () banked
  2003  00015A  21BA               	addwfc	(sendData@count+1)& (0+255),w,b
  2004  00015C  6EDA               	movwf	fsr2h,c
  2005  00015E  C0B5  FFDF         	movff	sendData@CS,indf2
  2006                           
  2007                           ; BSR set to: 0
  2008                           ;CarCom.c: 62: count++;
  2009  000162  0100               	movlb	0	; () banked
  2010  000164  4BB9               	infsnz	sendData@count& (0+255),f,b
  2011  000166  2BBA               	incf	(sendData@count+1)& (0+255),f,b
  2012                           
  2013                           ; BSR set to: 0
  2014                           ;CarCom.c: 63: result = cobs_encode(COBSArray, sizeof(COBSArray), SendArray, count);
  2015  000168  0E78               	movlw	low sendData@COBSArray
  2016  00016A  6E1B               	movwf	cobs_encode@dst_buf_ptr,c
  2017  00016C  0E00               	movlw	high sendData@COBSArray
  2018  00016E  6E1C               	movwf	cobs_encode@dst_buf_ptr+1,c
  2019  000170  0E00               	movlw	0
  2020  000172  6E1E               	movwf	cobs_encode@dst_buf_len+1,c
  2021  000174  0E1E               	movlw	30
  2022  000176  6E1D               	movwf	cobs_encode@dst_buf_len,c
  2023  000178  0E96               	movlw	low sendData@SendArray
  2024  00017A  6E1F               	movwf	cobs_encode@src_ptr,c
  2025  00017C  0E00               	movlw	high sendData@SendArray
  2026  00017E  6E20               	movwf	cobs_encode@src_ptr+1,c
  2027  000180  C0B9  F021         	movff	sendData@count,cobs_encode@src_len
  2028  000184  C0BA  F022         	movff	sendData@count+1,cobs_encode@src_len+1
  2029  000188  EC1E  F002         	call	_cobs_encode	;wreg free
  2030  00018C  C01B  F0B6         	movff	?_cobs_encode,sendData@result
  2031  000190  C01C  F0B7         	movff	?_cobs_encode+1,sendData@result+1
  2032  000194  C01D  F0B8         	movff	?_cobs_encode+2,sendData@result+2
  2033                           
  2034                           ;CarCom.c: 64: SendArray[0] = whereToSend;
  2035  000198  C0B4  F096         	movff	sendData@whereToSend,sendData@SendArray
  2036                           
  2037                           ;CarCom.c: 66: for(i = 1;i<result.out_len+1;i++){
  2038  00019C  0E01               	movlw	1
  2039  00019E  0100               	movlb	0	; () banked
  2040  0001A0  6FBB               	movwf	sendData@i& (0+255),b
  2041  0001A2  D028               	goto	l2367
  2042  0001A4                     l2363:
  2043                           
  2044                           ; BSR set to: 0
  2045                           ;CarCom.c: 67: SendArray[i] = COBSArray[i-1];
  2046  0001A4  0EFF               	movlw	255
  2047  0001A6  0100               	movlb	0	; () banked
  2048  0001A8  6F74               	movwf	??_sendData& (0+255),b
  2049  0001AA  0EFF               	movlw	255
  2050  0001AC  0100               	movlb	0	; () banked
  2051  0001AE  6F75               	movwf	(??_sendData+1)& (0+255),b
  2052  0001B0  0100               	movlb	0	; () banked
  2053  0001B2  51BB               	movf	sendData@i& (0+255),w,b
  2054  0001B4  0100               	movlb	0	; () banked
  2055  0001B6  6F76               	movwf	(??_sendData+2)& (0+255),b
  2056  0001B8  6B77               	clrf	(??_sendData+3)& (0+255),b
  2057  0001BA  0100               	movlb	0	; () banked
  2058  0001BC  5174               	movf	??_sendData& (0+255),w,b
  2059  0001BE  0100               	movlb	0	; () banked
  2060  0001C0  2776               	addwf	(??_sendData+2)& (0+255),f,b
  2061  0001C2  0100               	movlb	0	; () banked
  2062  0001C4  5175               	movf	(??_sendData+1)& (0+255),w,b
  2063  0001C6  0100               	movlb	0	; () banked
  2064  0001C8  2377               	addwfc	(??_sendData+3)& (0+255),f,b
  2065  0001CA  0E78               	movlw	low sendData@COBSArray
  2066  0001CC  0100               	movlb	0	; () banked
  2067  0001CE  2576               	addwf	(??_sendData+2)& (0+255),w,b
  2068  0001D0  6ED9               	movwf	fsr2l,c
  2069  0001D2  0E00               	movlw	high sendData@COBSArray
  2070  0001D4  0100               	movlb	0	; () banked
  2071  0001D6  2177               	addwfc	(??_sendData+3)& (0+255),w,b
  2072  0001D8  6EDA               	movwf	fsr2h,c
  2073  0001DA  0100               	movlb	0	; () banked
  2074  0001DC  51BB               	movf	sendData@i& (0+255),w,b
  2075  0001DE  0D01               	mullw	1
  2076  0001E0  0E96               	movlw	low sendData@SendArray
  2077  0001E2  24F3               	addwf	prodl,w,c
  2078  0001E4  6EE1               	movwf	fsr1l,c
  2079  0001E6  0E00               	movlw	high sendData@SendArray
  2080  0001E8  20F4               	addwfc	prodh,w,c
  2081  0001EA  6EE2               	movwf	fsr1h,c
  2082  0001EC  CFDF FFE7          	movff	indf2,indf1
  2083                           
  2084                           ; BSR set to: 0
  2085  0001F0  0100               	movlb	0	; () banked
  2086  0001F2  2BBB               	incf	sendData@i& (0+255),f,b
  2087  0001F4                     l2367:
  2088                           
  2089                           ; BSR set to: 0
  2090  0001F4  0E01               	movlw	1
  2091  0001F6  0100               	movlb	0	; () banked
  2092  0001F8  25B6               	addwf	sendData@result& (0+255),w,b
  2093  0001FA  0100               	movlb	0	; () banked
  2094  0001FC  6F74               	movwf	??_sendData& (0+255),b
  2095  0001FE  0E00               	movlw	0
  2096  000200  0100               	movlb	0	; () banked
  2097  000202  21B7               	addwfc	(sendData@result+1)& (0+255),w,b
  2098  000204  0100               	movlb	0	; () banked
  2099  000206  6F75               	movwf	(??_sendData+1)& (0+255),b
  2100  000208  0100               	movlb	0	; () banked
  2101  00020A  51BB               	movf	sendData@i& (0+255),w,b
  2102  00020C  0100               	movlb	0	; () banked
  2103  00020E  6F76               	movwf	(??_sendData+2)& (0+255),b
  2104  000210  6B77               	clrf	(??_sendData+3)& (0+255),b
  2105  000212  0100               	movlb	0	; () banked
  2106  000214  5174               	movf	??_sendData& (0+255),w,b
  2107  000216  0100               	movlb	0	; () banked
  2108  000218  5D76               	subwf	(??_sendData+2)& (0+255),w,b
  2109  00021A  0100               	movlb	0	; () banked
  2110  00021C  5175               	movf	(??_sendData+1)& (0+255),w,b
  2111  00021E  0100               	movlb	0	; () banked
  2112  000220  5977               	subwfb	(??_sendData+3)& (0+255),w,b
  2113  000222  A0D8               	btfss	status,0,c
  2114  000224  D7BF               	goto	l2363
  2115                           
  2116                           ; BSR set to: 0
  2117                           ;CarCom.c: 68: }
  2118                           ;CarCom.c: 70: for(i = 0;i<result.out_len+2;i++){
  2119                           
  2120                           ; BSR set to: 0
  2121  000226  0E00               	movlw	0
  2122  000228  0100               	movlb	0	; () banked
  2123  00022A  6FBB               	movwf	sendData@i& (0+255),b
  2124  00022C  D00E               	goto	l2375
  2125  00022E                     l2371:
  2126                           
  2127                           ; BSR set to: 0
  2128                           ;CarCom.c: 71: Send_put(SendArray[i]);
  2129  00022E  0100               	movlb	0	; () banked
  2130  000230  51BB               	movf	sendData@i& (0+255),w,b
  2131  000232  0D01               	mullw	1
  2132  000234  0E96               	movlw	low sendData@SendArray
  2133  000236  24F3               	addwf	prodl,w,c
  2134  000238  6ED9               	movwf	fsr2l,c
  2135  00023A  0E00               	movlw	high sendData@SendArray
  2136  00023C  20F4               	addwfc	prodh,w,c
  2137  00023E  6EDA               	movwf	fsr2h,c
  2138  000240  50DF               	movf	indf2,w,c
  2139  000242  EC18  F007         	call	_Send_put
  2140  000246  0100               	movlb	0	; () banked
  2141  000248  2BBB               	incf	sendData@i& (0+255),f,b
  2142  00024A                     l2375:
  2143                           
  2144                           ; BSR set to: 0
  2145  00024A  0E02               	movlw	2
  2146  00024C  0100               	movlb	0	; () banked
  2147  00024E  25B6               	addwf	sendData@result& (0+255),w,b
  2148  000250  0100               	movlb	0	; () banked
  2149  000252  6F74               	movwf	??_sendData& (0+255),b
  2150  000254  0E00               	movlw	0
  2151  000256  0100               	movlb	0	; () banked
  2152  000258  21B7               	addwfc	(sendData@result+1)& (0+255),w,b
  2153  00025A  0100               	movlb	0	; () banked
  2154  00025C  6F75               	movwf	(??_sendData+1)& (0+255),b
  2155  00025E  0100               	movlb	0	; () banked
  2156  000260  51BB               	movf	sendData@i& (0+255),w,b
  2157  000262  0100               	movlb	0	; () banked
  2158  000264  6F76               	movwf	(??_sendData+2)& (0+255),b
  2159  000266  6B77               	clrf	(??_sendData+3)& (0+255),b
  2160  000268  0100               	movlb	0	; () banked
  2161  00026A  5174               	movf	??_sendData& (0+255),w,b
  2162  00026C  0100               	movlb	0	; () banked
  2163  00026E  5D76               	subwf	(??_sendData+2)& (0+255),w,b
  2164  000270  0100               	movlb	0	; () banked
  2165  000272  5175               	movf	(??_sendData+1)& (0+255),w,b
  2166  000274  0100               	movlb	0	; () banked
  2167  000276  5977               	subwfb	(??_sendData+3)& (0+255),w,b
  2168  000278  B0D8               	btfsc	status,0,c
  2169  00027A  0012               	return	
  2170  00027C  D7D8               	goto	l2371
  2171  00027E                     __end_of_sendData:
  2172                           	opt stack 0
  2173                           tblptru	equ	0xFF8
  2174                           tblptrh	equ	0xFF7
  2175                           tblptrl	equ	0xFF6
  2176                           tablat	equ	0xFF5
  2177                           prodh	equ	0xFF4
  2178                           prodl	equ	0xFF3
  2179                           postinc0	equ	0xFEE
  2180                           wreg	equ	0xFE8
  2181                           indf1	equ	0xFE7
  2182                           postdec1	equ	0xFE5
  2183                           fsr1h	equ	0xFE2
  2184                           fsr1l	equ	0xFE1
  2185                           indf2	equ	0xFDF
  2186                           postinc2	equ	0xFDE
  2187                           postdec2	equ	0xFDD
  2188                           fsr2h	equ	0xFDA
  2189                           fsr2l	equ	0xFD9
  2190                           status	equ	0xFD8
  2191                           
  2192 ;; *************** function _cobs_encode *****************
  2193 ;; Defined at:
  2194 ;;		line 29 in file "COBS.c"
  2195 ;; Parameters:    Size  Location     Type
  2196 ;;  dst_buf_ptr     2   26[COMRAM] PTR unsigned char 
  2197 ;;		 -> sendData@COBSArray(30), 
  2198 ;;  dst_buf_len     2   28[COMRAM] unsigned int 
  2199 ;;  src_ptr         2   30[COMRAM] PTR const unsigned char 
  2200 ;;		 -> sendData@SendArray(30), 
  2201 ;;  src_len         2   32[COMRAM] unsigned int 
  2202 ;; Auto vars:     Size  Location     Type
  2203 ;;  result          3   10[BANK0 ] struct .
  2204 ;;  dst_write_pt    2    8[BANK0 ] PTR unsigned char 
  2205 ;;		 -> sendData@COBSArray(30), 
  2206 ;;  dst_code_wri    2    6[BANK0 ] PTR unsigned char 
  2207 ;;		 -> sendData@COBSArray(30), 
  2208 ;;  dst_buf_end_    2    3[BANK0 ] PTR unsigned char 
  2209 ;;		 -> sendData@COBSArray(30), 
  2210 ;;  src_end_ptr     2    0[BANK0 ] PTR const unsigned char 
  2211 ;;		 -> sendData@SendArray(30), 
  2212 ;;  search_len      1    5[BANK0 ] unsigned char 
  2213 ;;  src_byte        1    2[BANK0 ] unsigned char 
  2214 ;; Return value:  Size  Location     Type
  2215 ;;                  3   26[COMRAM] struct .
  2216 ;; Registers used:
  2217 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2218 ;; Tracked objects:
  2219 ;;		On entry : 0/0
  2220 ;;		On exit  : 0/0
  2221 ;;		Unchanged: 0/0
  2222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2223 ;;      Params:         8       0       0       0       0       0       0
  2224 ;;      Locals:         0      13       0       0       0       0       0
  2225 ;;      Temps:          2       0       0       0       0       0       0
  2226 ;;      Totals:        10      13       0       0       0       0       0
  2227 ;;Total ram usage:       23 bytes
  2228 ;; Hardware stack levels used:    1
  2229 ;; Hardware stack levels required when called:    4
  2230 ;; This function calls:
  2231 ;;		Nothing
  2232 ;; This function is called by:
  2233 ;;		_sendData
  2234 ;; This function uses a non-reentrant model
  2235 ;;
  2236                           
  2237                           	psect	text9
  2238  00043C                     __ptext9:
  2239                           	opt stack 0
  2240  00043C                     _cobs_encode:
  2241                           	opt stack 22
  2242                           
  2243                           ;COBS.c: 31: cobs_encode_result result = { 0, COBS_ENCODE_OK };
  2244                           
  2245                           ; BSR set to: 0
  2246                           ;incstack = 0
  2247  00043C  C038  F06A         	movff	cobs_encode@F180,cobs_encode@result
  2248  000440  C039  F06B         	movff	cobs_encode@F180+1,cobs_encode@result+1
  2249  000444  C03A  F06C         	movff	cobs_encode@F180+2,cobs_encode@result+2
  2250                           
  2251                           ;COBS.c: 32: const uint8_t * src_end_ptr = src_ptr + src_len;
  2252  000448  5021               	movf	cobs_encode@src_len,w,c
  2253  00044A  241F               	addwf	cobs_encode@src_ptr,w,c
  2254  00044C  0100               	movlb	0	; () banked
  2255  00044E  6F60               	movwf	cobs_encode@src_end_ptr& (0+255),b
  2256  000450  5022               	movf	cobs_encode@src_len+1,w,c
  2257  000452  2020               	addwfc	cobs_encode@src_ptr+1,w,c
  2258  000454  0100               	movlb	0	; () banked
  2259  000456  6F61               	movwf	(cobs_encode@src_end_ptr+1)& (0+255),b
  2260                           
  2261                           ;COBS.c: 33: uint8_t * dst_buf_end_ptr = dst_buf_ptr + dst_buf_len;
  2262  000458  501D               	movf	cobs_encode@dst_buf_len,w,c
  2263  00045A  241B               	addwf	cobs_encode@dst_buf_ptr,w,c
  2264  00045C  0100               	movlb	0	; () banked
  2265  00045E  6F63               	movwf	cobs_encode@dst_buf_end_ptr& (0+255),b
  2266  000460  501E               	movf	cobs_encode@dst_buf_len+1,w,c
  2267  000462  201C               	addwfc	cobs_encode@dst_buf_ptr+1,w,c
  2268  000464  0100               	movlb	0	; () banked
  2269  000466  6F64               	movwf	(cobs_encode@dst_buf_end_ptr+1)& (0+255),b
  2270                           
  2271                           ;COBS.c: 34: uint8_t * dst_code_write_ptr = dst_buf_ptr;
  2272  000468  C01B  F066         	movff	cobs_encode@dst_buf_ptr,cobs_encode@dst_code_write_ptr
  2273  00046C  C01C  F067         	movff	cobs_encode@dst_buf_ptr+1,cobs_encode@dst_code_write_ptr+1
  2274                           
  2275                           ;COBS.c: 35: uint8_t * dst_write_ptr = dst_code_write_ptr + 1;
  2276  000470  0E01               	movlw	1
  2277  000472  0100               	movlb	0	; () banked
  2278  000474  2566               	addwf	cobs_encode@dst_code_write_ptr& (0+255),w,b
  2279  000476  0100               	movlb	0	; () banked
  2280  000478  6F68               	movwf	cobs_encode@dst_write_ptr& (0+255),b
  2281  00047A  0E00               	movlw	0
  2282  00047C  0100               	movlb	0	; () banked
  2283  00047E  2167               	addwfc	(cobs_encode@dst_code_write_ptr+1)& (0+255),w,b
  2284  000480  0100               	movlb	0	; () banked
  2285  000482  6F69               	movwf	(cobs_encode@dst_write_ptr+1)& (0+255),b
  2286                           
  2287                           ; BSR set to: 0
  2288                           ;COBS.c: 36: uint8_t src_byte = 0;
  2289  000484  0E00               	movlw	0
  2290  000486  0100               	movlb	0	; () banked
  2291  000488  6F62               	movwf	cobs_encode@src_byte& (0+255),b
  2292                           
  2293                           ; BSR set to: 0
  2294                           ;COBS.c: 37: uint8_t search_len = 1;
  2295  00048A  0E01               	movlw	1
  2296  00048C  0100               	movlb	0	; () banked
  2297  00048E  6F65               	movwf	cobs_encode@search_len& (0+255),b
  2298                           
  2299                           ;COBS.c: 41: if ((dst_buf_ptr == (0)) || (src_ptr == (0)))
  2300  000490  501B               	movf	cobs_encode@dst_buf_ptr,w,c
  2301  000492  101C               	iorwf	cobs_encode@dst_buf_ptr+1,w,c
  2302  000494  B4D8               	btfsc	status,2,c
  2303  000496  D004               	goto	l2207
  2304                           
  2305                           ; BSR set to: 0
  2306  000498  501F               	movf	cobs_encode@src_ptr,w,c
  2307  00049A  1020               	iorwf	cobs_encode@src_ptr+1,w,c
  2308  00049C  A4D8               	btfss	status,2,c
  2309  00049E  D00A               	goto	l2213
  2310  0004A0                     l2207:
  2311                           
  2312                           ; BSR set to: 0
  2313                           ;COBS.c: 42: {
  2314                           ;COBS.c: 43: result.status = COBS_ENCODE_NULL_POINTER;
  2315  0004A0  0E01               	movlw	1
  2316  0004A2  0100               	movlb	0	; () banked
  2317  0004A4  6F6C               	movwf	(cobs_encode@result+2)& (0+255),b
  2318                           
  2319                           ; BSR set to: 0
  2320                           ;COBS.c: 44: return result;
  2321  0004A6  C06A  F01B         	movff	cobs_encode@result,?_cobs_encode
  2322  0004AA  C06B  F01C         	movff	cobs_encode@result+1,?_cobs_encode+1
  2323  0004AE  C06C  F01D         	movff	cobs_encode@result+2,?_cobs_encode+2
  2324                           
  2325                           ; BSR set to: 0
  2326  0004B2  0012               	return	
  2327  0004B4                     l2213:
  2328                           
  2329                           ; BSR set to: 0
  2330                           ;COBS.c: 45: }
  2331                           ;COBS.c: 47: if (src_len != 0)
  2332  0004B4  5021               	movf	cobs_encode@src_len,w,c
  2333  0004B6  1022               	iorwf	cobs_encode@src_len+1,w,c
  2334  0004B8  B4D8               	btfsc	status,2,c
  2335  0004BA  D05C               	goto	l2257
  2336  0004BC                     l2215:
  2337                           
  2338                           ; BSR set to: 0
  2339                           ;COBS.c: 51: {
  2340                           ;COBS.c: 53: if (dst_write_ptr >= dst_buf_end_ptr)
  2341  0004BC  0100               	movlb	0	; () banked
  2342  0004BE  5163               	movf	cobs_encode@dst_buf_end_ptr& (0+255),w,b
  2343  0004C0  0100               	movlb	0	; () banked
  2344  0004C2  5D68               	subwf	cobs_encode@dst_write_ptr& (0+255),w,b
  2345  0004C4  0100               	movlb	0	; () banked
  2346  0004C6  5164               	movf	(cobs_encode@dst_buf_end_ptr+1)& (0+255),w,b
  2347  0004C8  0100               	movlb	0	; () banked
  2348  0004CA  5969               	subwfb	(cobs_encode@dst_write_ptr+1)& (0+255),w,b
  2349  0004CC  A0D8               	btfss	status,0,c
  2350  0004CE  D003               	goto	l2219
  2351                           
  2352                           ; BSR set to: 0
  2353                           ;COBS.c: 54: {
  2354                           ;COBS.c: 55: result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
  2355  0004D0  0100               	movlb	0	; () banked
  2356  0004D2  836C               	bsf	(cobs_encode@result+2)& (0+255),1,b
  2357                           
  2358                           ;COBS.c: 56: break;
  2359  0004D4  D04F               	goto	l2257
  2360  0004D6                     l2219:
  2361                           
  2362                           ; BSR set to: 0
  2363                           ;COBS.c: 57: }
  2364                           ;COBS.c: 59: src_byte = *src_ptr++;
  2365  0004D6  C01F  FFD9         	movff	cobs_encode@src_ptr,fsr2l
  2366  0004DA  C020  FFDA         	movff	cobs_encode@src_ptr+1,fsr2h
  2367  0004DE  50DF               	movf	indf2,w,c
  2368  0004E0  0100               	movlb	0	; () banked
  2369  0004E2  6F62               	movwf	cobs_encode@src_byte& (0+255),b
  2370                           
  2371                           ; BSR set to: 0
  2372  0004E4  4A1F               	infsnz	cobs_encode@src_ptr,f,c
  2373  0004E6  2A20               	incf	cobs_encode@src_ptr+1,f,c
  2374                           
  2375                           ; BSR set to: 0
  2376                           ;COBS.c: 60: if (src_byte == 0)
  2377  0004E8  0100               	movlb	0	; () banked
  2378  0004EA  5162               	movf	cobs_encode@src_byte& (0+255),w,b
  2379  0004EC  0100               	movlb	0	; () banked
  2380  0004EE  A4D8               	btfss	status,2,c
  2381  0004F0  D019               	goto	l2237
  2382                           
  2383                           ; BSR set to: 0
  2384                           ;COBS.c: 61: {
  2385                           ;COBS.c: 63: *dst_code_write_ptr = search_len;
  2386  0004F2  C066  FFD9         	movff	cobs_encode@dst_code_write_ptr,fsr2l
  2387  0004F6  C067  FFDA         	movff	cobs_encode@dst_code_write_ptr+1,fsr2h
  2388  0004FA  C065  FFDF         	movff	cobs_encode@search_len,indf2
  2389                           
  2390                           ; BSR set to: 0
  2391                           ;COBS.c: 64: dst_code_write_ptr = dst_write_ptr++;
  2392  0004FE  C068  F066         	movff	cobs_encode@dst_write_ptr,cobs_encode@dst_code_write_ptr
  2393  000502  C069  F067         	movff	cobs_encode@dst_write_ptr+1,cobs_encode@dst_code_write_ptr+1
  2394                           
  2395                           ; BSR set to: 0
  2396  000506  0100               	movlb	0	; () banked
  2397  000508  4B68               	infsnz	cobs_encode@dst_write_ptr& (0+255),f,b
  2398  00050A  2B69               	incf	(cobs_encode@dst_write_ptr+1)& (0+255),f,b
  2399                           
  2400                           ; BSR set to: 0
  2401                           ;COBS.c: 65: search_len = 1;
  2402  00050C  0E01               	movlw	1
  2403  00050E  0100               	movlb	0	; () banked
  2404  000510  6F65               	movwf	cobs_encode@search_len& (0+255),b
  2405                           
  2406                           ; BSR set to: 0
  2407                           ;COBS.c: 66: if (src_ptr >= src_end_ptr)
  2408  000512  0100               	movlb	0	; () banked
  2409  000514  5160               	movf	cobs_encode@src_end_ptr& (0+255),w,b
  2410  000516  5C1F               	subwf	cobs_encode@src_ptr,w,c
  2411  000518  0100               	movlb	0	; () banked
  2412  00051A  5161               	movf	(cobs_encode@src_end_ptr+1)& (0+255),w,b
  2413  00051C  5820               	subwfb	cobs_encode@src_ptr+1,w,c
  2414  00051E  B0D8               	btfsc	status,0,c
  2415  000520  D029               	goto	l2257
  2416  000522  D7CC               	goto	l2215
  2417  000524                     l2237:
  2418                           
  2419                           ; BSR set to: 0
  2420                           ;COBS.c: 71: else
  2421                           ;COBS.c: 72: {
  2422                           ;COBS.c: 74: *dst_write_ptr++ = src_byte;
  2423  000524  C068  FFD9         	movff	cobs_encode@dst_write_ptr,fsr2l
  2424  000528  C069  FFDA         	movff	cobs_encode@dst_write_ptr+1,fsr2h
  2425  00052C  C062  FFDF         	movff	cobs_encode@src_byte,indf2
  2426                           
  2427                           ; BSR set to: 0
  2428  000530  0100               	movlb	0	; () banked
  2429  000532  4B68               	infsnz	cobs_encode@dst_write_ptr& (0+255),f,b
  2430  000534  2B69               	incf	(cobs_encode@dst_write_ptr+1)& (0+255),f,b
  2431                           
  2432                           ; BSR set to: 0
  2433                           ;COBS.c: 75: search_len++;
  2434  000536  0100               	movlb	0	; () banked
  2435  000538  2B65               	incf	cobs_encode@search_len& (0+255),f,b
  2436                           
  2437                           ; BSR set to: 0
  2438                           ;COBS.c: 76: if (src_ptr >= src_end_ptr)
  2439  00053A  0100               	movlb	0	; () banked
  2440  00053C  5160               	movf	cobs_encode@src_end_ptr& (0+255),w,b
  2441  00053E  5C1F               	subwf	cobs_encode@src_ptr,w,c
  2442  000540  0100               	movlb	0	; () banked
  2443  000542  5161               	movf	(cobs_encode@src_end_ptr+1)& (0+255),w,b
  2444  000544  5820               	subwfb	cobs_encode@src_ptr+1,w,c
  2445  000546  B0D8               	btfsc	status,0,c
  2446  000548  D015               	goto	l2257
  2447                           
  2448                           ; BSR set to: 0
  2449                           ;COBS.c: 79: }
  2450                           ;COBS.c: 80: if (search_len == 0xFF)
  2451                           
  2452                           ; BSR set to: 0
  2453                           
  2454                           ; BSR set to: 0
  2455                           ;COBS.c: 77: {
  2456                           ;COBS.c: 78: break;
  2457  00054A  0100               	movlb	0	; () banked
  2458  00054C  2965               	incf	cobs_encode@search_len& (0+255),w,b
  2459  00054E  A4D8               	btfss	status,2,c
  2460  000550  D7B5               	goto	l2215
  2461                           
  2462                           ; BSR set to: 0
  2463                           ;COBS.c: 81: {
  2464                           ;COBS.c: 84: *dst_code_write_ptr = search_len;
  2465  000552  C066  FFD9         	movff	cobs_encode@dst_code_write_ptr,fsr2l
  2466  000556  C067  FFDA         	movff	cobs_encode@dst_code_write_ptr+1,fsr2h
  2467  00055A  C065  FFDF         	movff	cobs_encode@search_len,indf2
  2468                           
  2469                           ; BSR set to: 0
  2470                           ;COBS.c: 85: dst_code_write_ptr = dst_write_ptr++;
  2471  00055E  C068  F066         	movff	cobs_encode@dst_write_ptr,cobs_encode@dst_code_write_ptr
  2472  000562  C069  F067         	movff	cobs_encode@dst_write_ptr+1,cobs_encode@dst_code_write_ptr+1
  2473                           
  2474                           ; BSR set to: 0
  2475  000566  0100               	movlb	0	; () banked
  2476  000568  4B68               	infsnz	cobs_encode@dst_write_ptr& (0+255),f,b
  2477  00056A  2B69               	incf	(cobs_encode@dst_write_ptr+1)& (0+255),f,b
  2478                           
  2479                           ; BSR set to: 0
  2480                           ;COBS.c: 86: search_len = 1;
  2481  00056C  0E01               	movlw	1
  2482  00056E  0100               	movlb	0	; () banked
  2483  000570  6F65               	movwf	cobs_encode@search_len& (0+255),b
  2484                           
  2485                           ; BSR set to: 0
  2486                           ;COBS.c: 87: }
  2487                           ;COBS.c: 88: }
  2488                           ;COBS.c: 89: }
  2489                           
  2490                           ; BSR set to: 0
  2491  000572  D7A4               	goto	l2215
  2492  000574                     l2257:
  2493                           
  2494                           ; BSR set to: 0
  2495                           ;COBS.c: 90: }
  2496                           ;COBS.c: 96: if (dst_code_write_ptr >= dst_buf_end_ptr)
  2497  000574  0100               	movlb	0	; () banked
  2498  000576  5163               	movf	cobs_encode@dst_buf_end_ptr& (0+255),w,b
  2499  000578  0100               	movlb	0	; () banked
  2500  00057A  5D66               	subwf	cobs_encode@dst_code_write_ptr& (0+255),w,b
  2501  00057C  0100               	movlb	0	; () banked
  2502  00057E  5164               	movf	(cobs_encode@dst_buf_end_ptr+1)& (0+255),w,b
  2503  000580  0100               	movlb	0	; () banked
  2504  000582  5967               	subwfb	(cobs_encode@dst_code_write_ptr+1)& (0+255),w,b
  2505  000584  A0D8               	btfss	status,0,c
  2506  000586  D007               	goto	l2263
  2507                           
  2508                           ; BSR set to: 0
  2509                           ;COBS.c: 97: {
  2510                           ;COBS.c: 99: result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
  2511  000588  0100               	movlb	0	; () banked
  2512  00058A  836C               	bsf	(cobs_encode@result+2)& (0+255),1,b
  2513                           
  2514                           ; BSR set to: 0
  2515                           ;COBS.c: 100: dst_write_ptr = dst_buf_end_ptr;
  2516  00058C  C063  F068         	movff	cobs_encode@dst_buf_end_ptr,cobs_encode@dst_write_ptr
  2517  000590  C064  F069         	movff	cobs_encode@dst_buf_end_ptr+1,cobs_encode@dst_write_ptr+1
  2518                           
  2519                           ;COBS.c: 101: }
  2520  000594  D006               	goto	l2265
  2521  000596                     l2263:
  2522                           
  2523                           ; BSR set to: 0
  2524                           ;COBS.c: 102: else
  2525                           ;COBS.c: 103: {
  2526                           ;COBS.c: 105: *dst_code_write_ptr = search_len;
  2527  000596  C066  FFD9         	movff	cobs_encode@dst_code_write_ptr,fsr2l
  2528  00059A  C067  FFDA         	movff	cobs_encode@dst_code_write_ptr+1,fsr2h
  2529  00059E  C065  FFDF         	movff	cobs_encode@search_len,indf2
  2530  0005A2                     l2265:
  2531                           
  2532                           ; BSR set to: 0
  2533                           ;COBS.c: 106: }
  2534                           ;COBS.c: 109: result.out_len = dst_write_ptr - dst_buf_ptr;
  2535  0005A2  C01B  F023         	movff	cobs_encode@dst_buf_ptr,??_cobs_encode
  2536  0005A6  C01C  F024         	movff	cobs_encode@dst_buf_ptr+1,??_cobs_encode+1
  2537  0005AA  1E23               	comf	??_cobs_encode,f,c
  2538  0005AC  1E24               	comf	??_cobs_encode+1,f,c
  2539  0005AE  4A23               	infsnz	??_cobs_encode,f,c
  2540  0005B0  2A24               	incf	??_cobs_encode+1,f,c
  2541  0005B2  0100               	movlb	0	; () banked
  2542  0005B4  5168               	movf	cobs_encode@dst_write_ptr& (0+255),w,b
  2543  0005B6  2423               	addwf	??_cobs_encode,w,c
  2544  0005B8  0100               	movlb	0	; () banked
  2545  0005BA  6F6A               	movwf	cobs_encode@result& (0+255),b
  2546  0005BC  0100               	movlb	0	; () banked
  2547  0005BE  5169               	movf	(cobs_encode@dst_write_ptr+1)& (0+255),w,b
  2548  0005C0  2024               	addwfc	??_cobs_encode+1,w,c
  2549  0005C2  0100               	movlb	0	; () banked
  2550  0005C4  6F6B               	movwf	(cobs_encode@result+1)& (0+255),b
  2551                           
  2552                           ; BSR set to: 0
  2553                           ;COBS.c: 111: return result;
  2554  0005C6  C06A  F01B         	movff	cobs_encode@result,?_cobs_encode
  2555  0005CA  C06B  F01C         	movff	cobs_encode@result+1,?_cobs_encode+1
  2556  0005CE  C06C  F01D         	movff	cobs_encode@result+2,?_cobs_encode+2
  2557  0005D2  0012               	return	
  2558  0005D4                     __end_of_cobs_encode:
  2559                           	opt stack 0
  2560                           tblptru	equ	0xFF8
  2561                           tblptrh	equ	0xFF7
  2562                           tblptrl	equ	0xFF6
  2563                           tablat	equ	0xFF5
  2564                           prodh	equ	0xFF4
  2565                           prodl	equ	0xFF3
  2566                           postinc0	equ	0xFEE
  2567                           wreg	equ	0xFE8
  2568                           indf1	equ	0xFE7
  2569                           postdec1	equ	0xFE5
  2570                           fsr1h	equ	0xFE2
  2571                           fsr1l	equ	0xFE1
  2572                           indf2	equ	0xFDF
  2573                           postinc2	equ	0xFDE
  2574                           postdec2	equ	0xFDD
  2575                           fsr2h	equ	0xFDA
  2576                           fsr2l	equ	0xFD9
  2577                           status	equ	0xFD8
  2578                           
  2579 ;; *************** function _Send_put *****************
  2580 ;; Defined at:
  2581 ;;		line 129 in file "UART.c"
  2582 ;; Parameters:    Size  Location     Type
  2583 ;;  _data           1    wreg     unsigned char 
  2584 ;; Auto vars:     Size  Location     Type
  2585 ;;  _data           1   37[COMRAM] unsigned char 
  2586 ;; Return value:  Size  Location     Type
  2587 ;;                  1    wreg      void 
  2588 ;; Registers used:
  2589 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2590 ;; Tracked objects:
  2591 ;;		On entry : 0/0
  2592 ;;		On exit  : 0/0
  2593 ;;		Unchanged: 0/0
  2594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2595 ;;      Params:         0       0       0       0       0       0       0
  2596 ;;      Locals:         1       0       0       0       0       0       0
  2597 ;;      Temps:          0       0       0       0       0       0       0
  2598 ;;      Totals:         1       0       0       0       0       0       0
  2599 ;;Total ram usage:        1 bytes
  2600 ;; Hardware stack levels used:    1
  2601 ;; Hardware stack levels required when called:    6
  2602 ;; This function calls:
  2603 ;;		_UART_buff_get
  2604 ;;		_UART_buff_put
  2605 ;; This function is called by:
  2606 ;;		_sendData
  2607 ;;		_putch
  2608 ;; This function uses a non-reentrant model
  2609 ;;
  2610                           
  2611                           	psect	text10
  2612  000E30                     __ptext10:
  2613                           	opt stack 0
  2614  000E30                     _Send_put:
  2615                           	opt stack 20
  2616                           
  2617                           ; BSR set to: 0
  2618                           ;incstack = 0
  2619                           ;Send_put@_data stored from wreg
  2620  000E30  6E26               	movwf	Send_put@_data,c
  2621                           
  2622                           ;UART.c: 130: UART_buff_put(&output_buffer, _data);
  2623  000E32  0E00               	movlw	low _output_buffer
  2624  000E34  6E21               	movwf	UART_buff_put@_this,c
  2625  000E36  0E01               	movlw	high _output_buffer
  2626  000E38  6E22               	movwf	UART_buff_put@_this+1,c
  2627  000E3A  C026  F023         	movff	Send_put@_data,UART_buff_put@c
  2628  000E3E  ECEA  F002         	call	_UART_buff_put	;wreg free
  2629                           
  2630                           ;UART.c: 131: if (Transmit_stall == 1) {
  2631  000E42  0444               	decf	_Transmit_stall,w,c
  2632  000E44  A4D8               	btfss	status,2,c
  2633  000E46  0012               	return	
  2634                           
  2635                           ;UART.c: 132: Transmit_stall = 0;
  2636  000E48  0E00               	movlw	0
  2637  000E4A  6E44               	movwf	_Transmit_stall,c
  2638                           
  2639                           ;UART.c: 133: TXREG1 = UART_buff_get(&output_buffer);
  2640  000E4C  0E00               	movlw	low _output_buffer
  2641  000E4E  6E21               	movwf	UART_buff_get@_this,c
  2642  000E50  0E01               	movlw	high _output_buffer
  2643  000E52  6E22               	movwf	UART_buff_get@_this+1,c
  2644  000E54  EC75  F005         	call	_UART_buff_get	;wreg free
  2645  000E58  6EAD               	movwf	4013,c	;volatile
  2646                           
  2647                           ;UART.c: 134: PIE1bits.TX1IE = 1;
  2648  000E5A  889D               	bsf	3997,4,c	;volatile
  2649  000E5C  0012               	return	
  2650  000E5E                     __end_of_Send_put:
  2651                           	opt stack 0
  2652                           tblptru	equ	0xFF8
  2653                           tblptrh	equ	0xFF7
  2654                           tblptrl	equ	0xFF6
  2655                           tablat	equ	0xFF5
  2656                           prodh	equ	0xFF4
  2657                           prodl	equ	0xFF3
  2658                           postinc0	equ	0xFEE
  2659                           wreg	equ	0xFE8
  2660                           indf1	equ	0xFE7
  2661                           postdec1	equ	0xFE5
  2662                           fsr1h	equ	0xFE2
  2663                           fsr1l	equ	0xFE1
  2664                           indf2	equ	0xFDF
  2665                           postinc2	equ	0xFDE
  2666                           postdec2	equ	0xFDD
  2667                           fsr2h	equ	0xFDA
  2668                           fsr2l	equ	0xFD9
  2669                           status	equ	0xFD8
  2670                           
  2671 ;; *************** function _UART_buff_put *****************
  2672 ;; Defined at:
  2673 ;;		line 67 in file "UART.c"
  2674 ;; Parameters:    Size  Location     Type
  2675 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  2676 ;;		 -> output_buffer(106), input_buffer(106), 
  2677 ;;  c               1   34[COMRAM] const unsigned char 
  2678 ;; Auto vars:     Size  Location     Type
  2679 ;;		None
  2680 ;; Return value:  Size  Location     Type
  2681 ;;                  1    wreg      void 
  2682 ;; Registers used:
  2683 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2684 ;; Tracked objects:
  2685 ;;		On entry : 0/0
  2686 ;;		On exit  : 0/0
  2687 ;;		Unchanged: 0/0
  2688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2689 ;;      Params:         3       0       0       0       0       0       0
  2690 ;;      Locals:         0       0       0       0       0       0       0
  2691 ;;      Temps:          2       0       0       0       0       0       0
  2692 ;;      Totals:         5       0       0       0       0       0       0
  2693 ;;Total ram usage:        5 bytes
  2694 ;; Hardware stack levels used:    1
  2695 ;; Hardware stack levels required when called:    5
  2696 ;; This function calls:
  2697 ;;		_UART_buff_modulo_inc
  2698 ;; This function is called by:
  2699 ;;		_Send_put
  2700 ;; This function uses a non-reentrant model
  2701 ;;
  2702                           
  2703                           	psect	text11
  2704  0005D4                     __ptext11:
  2705                           	opt stack 0
  2706  0005D4                     _UART_buff_put:
  2707                           	opt stack 20
  2708                           
  2709                           ;UART.c: 68: if (_this->count < 100) {
  2710                           
  2711                           ;incstack = 0
  2712  0005D4  EE20 F068          	lfsr	2,104
  2713  0005D8  5021               	movf	UART_buff_put@_this,w,c
  2714  0005DA  26D9               	addwf	fsr2l,f,c
  2715  0005DC  5022               	movf	UART_buff_put@_this+1,w,c
  2716  0005DE  22DA               	addwfc	fsr2h,f,c
  2717  0005E0  0E01               	movlw	1
  2718  0005E2  BEDB               	btfsc	plusw2,7,c
  2719  0005E4  D007               	goto	l2163
  2720  0005E6  0E01               	movlw	1
  2721  0005E8  50DB               	movf	plusw2,w,c
  2722  0005EA  E13A               	bnz	l2169
  2723  0005EC  0E64               	movlw	100
  2724  0005EE  5CDE               	subwf	postinc2,w,c
  2725  0005F0  B0D8               	btfsc	status,0,c
  2726  0005F2  D036               	goto	l2169
  2727  0005F4                     l2163:
  2728                           
  2729                           ;UART.c: 69: _this->buf[_this->head] = c;
  2730  0005F4  EE20 F064          	lfsr	2,100
  2731  0005F8  5021               	movf	UART_buff_put@_this,w,c
  2732  0005FA  26D9               	addwf	fsr2l,f,c
  2733  0005FC  5022               	movf	UART_buff_put@_this+1,w,c
  2734  0005FE  22DA               	addwfc	fsr2h,f,c
  2735  000600  CFDE F024          	movff	postinc2,??_UART_buff_put
  2736  000604  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  2737  000608  5024               	movf	??_UART_buff_put,w,c
  2738  00060A  2421               	addwf	UART_buff_put@_this,w,c
  2739  00060C  6ED9               	movwf	fsr2l,c
  2740  00060E  5025               	movf	??_UART_buff_put+1,w,c
  2741  000610  2022               	addwfc	UART_buff_put@_this+1,w,c
  2742  000612  6EDA               	movwf	fsr2h,c
  2743  000614  C023  FFDF         	movff	UART_buff_put@c,indf2
  2744                           
  2745                           ;UART.c: 70: _this->head = UART_buff_modulo_inc(_this->head, 100);
  2746  000618  EE20 F064          	lfsr	2,100
  2747  00061C  5021               	movf	UART_buff_put@_this,w,c
  2748  00061E  26D9               	addwf	fsr2l,f,c
  2749  000620  5022               	movf	UART_buff_put@_this+1,w,c
  2750  000622  22DA               	addwfc	fsr2h,f,c
  2751  000624  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  2752  000628  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  2753  00062C  0E00               	movlw	0
  2754  00062E  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  2755  000630  0E64               	movlw	100
  2756  000632  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  2757  000634  EC5B  F007         	call	_UART_buff_modulo_inc	;wreg free
  2758  000638  EE20 F064          	lfsr	2,100
  2759  00063C  5021               	movf	UART_buff_put@_this,w,c
  2760  00063E  26D9               	addwf	fsr2l,f,c
  2761  000640  5022               	movf	UART_buff_put@_this+1,w,c
  2762  000642  22DA               	addwfc	fsr2h,f,c
  2763  000644  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  2764  000648  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  2765                           
  2766                           ;UART.c: 71: ++_this->count;
  2767  00064C  EE20 F068          	lfsr	2,104
  2768  000650  5021               	movf	UART_buff_put@_this,w,c
  2769  000652  26D9               	addwf	fsr2l,f,c
  2770  000654  5022               	movf	UART_buff_put@_this+1,w,c
  2771  000656  22DA               	addwfc	fsr2h,f,c
  2772  000658  2ADE               	incf	postinc2,f,c
  2773  00065A  0E00               	movlw	0
  2774  00065C  22DD               	addwfc	postdec2,f,c
  2775                           
  2776                           ;UART.c: 72: } else {
  2777  00065E  0012               	return	
  2778  000660                     l2169:
  2779                           
  2780                           ;UART.c: 73: _this->buf[_this->head] = c;
  2781  000660  EE20 F064          	lfsr	2,100
  2782  000664  5021               	movf	UART_buff_put@_this,w,c
  2783  000666  26D9               	addwf	fsr2l,f,c
  2784  000668  5022               	movf	UART_buff_put@_this+1,w,c
  2785  00066A  22DA               	addwfc	fsr2h,f,c
  2786  00066C  CFDE F024          	movff	postinc2,??_UART_buff_put
  2787  000670  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  2788  000674  5024               	movf	??_UART_buff_put,w,c
  2789  000676  2421               	addwf	UART_buff_put@_this,w,c
  2790  000678  6ED9               	movwf	fsr2l,c
  2791  00067A  5025               	movf	??_UART_buff_put+1,w,c
  2792  00067C  2022               	addwfc	UART_buff_put@_this+1,w,c
  2793  00067E  6EDA               	movwf	fsr2h,c
  2794  000680  C023  FFDF         	movff	UART_buff_put@c,indf2
  2795                           
  2796                           ;UART.c: 74: _this->head = UART_buff_modulo_inc(_this->head, 100);
  2797  000684  EE20 F064          	lfsr	2,100
  2798  000688  5021               	movf	UART_buff_put@_this,w,c
  2799  00068A  26D9               	addwf	fsr2l,f,c
  2800  00068C  5022               	movf	UART_buff_put@_this+1,w,c
  2801  00068E  22DA               	addwfc	fsr2h,f,c
  2802  000690  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  2803  000694  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  2804  000698  0E00               	movlw	0
  2805  00069A  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  2806  00069C  0E64               	movlw	100
  2807  00069E  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  2808  0006A0  EC5B  F007         	call	_UART_buff_modulo_inc	;wreg free
  2809  0006A4  EE20 F064          	lfsr	2,100
  2810  0006A8  5021               	movf	UART_buff_put@_this,w,c
  2811  0006AA  26D9               	addwf	fsr2l,f,c
  2812  0006AC  5022               	movf	UART_buff_put@_this+1,w,c
  2813  0006AE  22DA               	addwfc	fsr2h,f,c
  2814  0006B0  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  2815  0006B4  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  2816                           
  2817                           ;UART.c: 75: _this->tail = UART_buff_modulo_inc(_this->tail, 100);
  2818  0006B8  EE20 F066          	lfsr	2,102
  2819  0006BC  5021               	movf	UART_buff_put@_this,w,c
  2820  0006BE  26D9               	addwf	fsr2l,f,c
  2821  0006C0  5022               	movf	UART_buff_put@_this+1,w,c
  2822  0006C2  22DA               	addwfc	fsr2h,f,c
  2823  0006C4  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  2824  0006C8  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  2825  0006CC  0E00               	movlw	0
  2826  0006CE  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  2827  0006D0  0E64               	movlw	100
  2828  0006D2  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  2829  0006D4  EC5B  F007         	call	_UART_buff_modulo_inc	;wreg free
  2830  0006D8  EE20 F066          	lfsr	2,102
  2831  0006DC  5021               	movf	UART_buff_put@_this,w,c
  2832  0006DE  26D9               	addwf	fsr2l,f,c
  2833  0006E0  5022               	movf	UART_buff_put@_this+1,w,c
  2834  0006E2  22DA               	addwfc	fsr2h,f,c
  2835  0006E4  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  2836  0006E8  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  2837  0006EC  0012               	return	
  2838  0006EE                     __end_of_UART_buff_put:
  2839                           	opt stack 0
  2840                           tblptru	equ	0xFF8
  2841                           tblptrh	equ	0xFF7
  2842                           tblptrl	equ	0xFF6
  2843                           tablat	equ	0xFF5
  2844                           prodh	equ	0xFF4
  2845                           prodl	equ	0xFF3
  2846                           postinc0	equ	0xFEE
  2847                           wreg	equ	0xFE8
  2848                           indf1	equ	0xFE7
  2849                           postdec1	equ	0xFE5
  2850                           fsr1h	equ	0xFE2
  2851                           fsr1l	equ	0xFE1
  2852                           indf2	equ	0xFDF
  2853                           postinc2	equ	0xFDE
  2854                           postdec2	equ	0xFDD
  2855                           plusw2	equ	0xFDB
  2856                           fsr2h	equ	0xFDA
  2857                           fsr2l	equ	0xFD9
  2858                           status	equ	0xFD8
  2859                           
  2860 ;; *************** function _UART_buff_get *****************
  2861 ;; Defined at:
  2862 ;;		line 80 in file "UART.c"
  2863 ;; Parameters:    Size  Location     Type
  2864 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  2865 ;;		 -> output_buffer(106), input_buffer(106), 
  2866 ;; Auto vars:     Size  Location     Type
  2867 ;;  c               1   36[COMRAM] unsigned char 
  2868 ;; Return value:  Size  Location     Type
  2869 ;;                  1    wreg      unsigned char 
  2870 ;; Registers used:
  2871 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2872 ;; Tracked objects:
  2873 ;;		On entry : 0/0
  2874 ;;		On exit  : 0/0
  2875 ;;		Unchanged: 0/0
  2876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2877 ;;      Params:         2       0       0       0       0       0       0
  2878 ;;      Locals:         1       0       0       0       0       0       0
  2879 ;;      Temps:          2       0       0       0       0       0       0
  2880 ;;      Totals:         5       0       0       0       0       0       0
  2881 ;;Total ram usage:        5 bytes
  2882 ;; Hardware stack levels used:    1
  2883 ;; Hardware stack levels required when called:    5
  2884 ;; This function calls:
  2885 ;;		_UART_buff_modulo_inc
  2886 ;; This function is called by:
  2887 ;;		_Receive_get
  2888 ;;		_Send_put
  2889 ;; This function uses a non-reentrant model
  2890 ;;
  2891                           
  2892                           	psect	text12
  2893  000AEA                     __ptext12:
  2894                           	opt stack 0
  2895  000AEA                     _UART_buff_get:
  2896                           	opt stack 22
  2897                           
  2898                           ;UART.c: 81: unsigned char c;
  2899                           ;UART.c: 82: if (_this->count > 0) {
  2900                           
  2901                           ;incstack = 0
  2902  000AEA  EE20 F068          	lfsr	2,104
  2903  000AEE  5021               	movf	UART_buff_get@_this,w,c
  2904  000AF0  26D9               	addwf	fsr2l,f,c
  2905  000AF2  5022               	movf	UART_buff_get@_this+1,w,c
  2906  000AF4  22DA               	addwfc	fsr2h,f,c
  2907  000AF6  0E01               	movlw	1
  2908  000AF8  BEDB               	btfsc	plusw2,7,c
  2909  000AFA  D03C               	goto	l2183
  2910  000AFC  0E01               	movlw	1
  2911  000AFE  50DB               	movf	plusw2,w,c
  2912  000B00  E103               	bnz	u1210
  2913  000B02  04DE               	decf	postinc2,w,c
  2914  000B04  A0D8               	btfss	status,0,c
  2915  000B06  D036               	goto	l2183
  2916  000B08                     u1210:
  2917                           
  2918                           ;UART.c: 83: c = _this->buf[_this->tail];
  2919  000B08  EE20 F066          	lfsr	2,102
  2920  000B0C  5021               	movf	UART_buff_get@_this,w,c
  2921  000B0E  26D9               	addwf	fsr2l,f,c
  2922  000B10  5022               	movf	UART_buff_get@_this+1,w,c
  2923  000B12  22DA               	addwfc	fsr2h,f,c
  2924  000B14  CFDE F023          	movff	postinc2,??_UART_buff_get
  2925  000B18  CFDD F024          	movff	postdec2,??_UART_buff_get+1
  2926  000B1C  5023               	movf	??_UART_buff_get,w,c
  2927  000B1E  2421               	addwf	UART_buff_get@_this,w,c
  2928  000B20  6ED9               	movwf	fsr2l,c
  2929  000B22  5024               	movf	??_UART_buff_get+1,w,c
  2930  000B24  2022               	addwfc	UART_buff_get@_this+1,w,c
  2931  000B26  6EDA               	movwf	fsr2h,c
  2932  000B28  50DF               	movf	indf2,w,c
  2933  000B2A  6E25               	movwf	UART_buff_get@c,c
  2934                           
  2935                           ;UART.c: 84: _this->tail = UART_buff_modulo_inc(_this->tail, 100);
  2936  000B2C  EE20 F066          	lfsr	2,102
  2937  000B30  5021               	movf	UART_buff_get@_this,w,c
  2938  000B32  26D9               	addwf	fsr2l,f,c
  2939  000B34  5022               	movf	UART_buff_get@_this+1,w,c
  2940  000B36  22DA               	addwfc	fsr2h,f,c
  2941  000B38  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  2942  000B3C  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  2943  000B40  0E00               	movlw	0
  2944  000B42  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  2945  000B44  0E64               	movlw	100
  2946  000B46  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  2947  000B48  EC5B  F007         	call	_UART_buff_modulo_inc	;wreg free
  2948  000B4C  EE20 F066          	lfsr	2,102
  2949  000B50  5021               	movf	UART_buff_get@_this,w,c
  2950  000B52  26D9               	addwf	fsr2l,f,c
  2951  000B54  5022               	movf	UART_buff_get@_this+1,w,c
  2952  000B56  22DA               	addwfc	fsr2h,f,c
  2953  000B58  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  2954  000B5C  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  2955                           
  2956                           ;UART.c: 85: --_this->count;
  2957  000B60  EE20 F068          	lfsr	2,104
  2958  000B64  5021               	movf	UART_buff_get@_this,w,c
  2959  000B66  26D9               	addwf	fsr2l,f,c
  2960  000B68  5022               	movf	UART_buff_get@_this+1,w,c
  2961  000B6A  22DA               	addwfc	fsr2h,f,c
  2962  000B6C  06DE               	decf	postinc2,f,c
  2963  000B6E  0E00               	movlw	0
  2964  000B70  5ADD               	subwfb	postdec2,f,c
  2965                           
  2966                           ;UART.c: 86: } else {
  2967  000B72  D002               	goto	l85
  2968  000B74                     l2183:
  2969                           
  2970                           ;UART.c: 87: c = 0;
  2971  000B74  0E00               	movlw	0
  2972  000B76  6E25               	movwf	UART_buff_get@c,c
  2973  000B78                     l85:
  2974                           
  2975                           ;UART.c: 88: }
  2976                           ;UART.c: 89: return (c);
  2977  000B78  5025               	movf	UART_buff_get@c,w,c
  2978  000B7A  0012               	return	
  2979  000B7C                     __end_of_UART_buff_get:
  2980                           	opt stack 0
  2981                           tblptru	equ	0xFF8
  2982                           tblptrh	equ	0xFF7
  2983                           tblptrl	equ	0xFF6
  2984                           tablat	equ	0xFF5
  2985                           prodh	equ	0xFF4
  2986                           prodl	equ	0xFF3
  2987                           postinc0	equ	0xFEE
  2988                           wreg	equ	0xFE8
  2989                           indf1	equ	0xFE7
  2990                           postdec1	equ	0xFE5
  2991                           fsr1h	equ	0xFE2
  2992                           fsr1l	equ	0xFE1
  2993                           indf2	equ	0xFDF
  2994                           postinc2	equ	0xFDE
  2995                           postdec2	equ	0xFDD
  2996                           plusw2	equ	0xFDB
  2997                           fsr2h	equ	0xFDA
  2998                           fsr2l	equ	0xFD9
  2999                           status	equ	0xFD8
  3000                           
  3001 ;; *************** function _UART_buff_modulo_inc *****************
  3002 ;; Defined at:
  3003 ;;		line 105 in file "UART.c"
  3004 ;; Parameters:    Size  Location     Type
  3005 ;;  value           2   26[COMRAM] const unsigned int 
  3006 ;;  modulus         2   28[COMRAM] const unsigned int 
  3007 ;; Auto vars:     Size  Location     Type
  3008 ;;  my_value        2   30[COMRAM] unsigned int 
  3009 ;; Return value:  Size  Location     Type
  3010 ;;                  2   26[COMRAM] unsigned int 
  3011 ;; Registers used:
  3012 ;;		wreg, status,2, status,0
  3013 ;; Tracked objects:
  3014 ;;		On entry : 0/0
  3015 ;;		On exit  : 0/0
  3016 ;;		Unchanged: 0/0
  3017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3018 ;;      Params:         4       0       0       0       0       0       0
  3019 ;;      Locals:         2       0       0       0       0       0       0
  3020 ;;      Temps:          0       0       0       0       0       0       0
  3021 ;;      Totals:         6       0       0       0       0       0       0
  3022 ;;Total ram usage:        6 bytes
  3023 ;; Hardware stack levels used:    1
  3024 ;; Hardware stack levels required when called:    4
  3025 ;; This function calls:
  3026 ;;		Nothing
  3027 ;; This function is called by:
  3028 ;;		_UART_buff_put
  3029 ;;		_UART_buff_get
  3030 ;; This function uses a non-reentrant model
  3031 ;;
  3032                           
  3033                           	psect	text13
  3034  000EB6                     __ptext13:
  3035                           	opt stack 0
  3036  000EB6                     _UART_buff_modulo_inc:
  3037                           	opt stack 22
  3038                           
  3039                           ;UART.c: 106: unsigned int my_value = value + 1;
  3040                           
  3041                           ;incstack = 0
  3042  000EB6  0E01               	movlw	1
  3043  000EB8  241B               	addwf	UART_buff_modulo_inc@value,w,c
  3044  000EBA  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  3045  000EBC  0E00               	movlw	0
  3046  000EBE  201C               	addwfc	UART_buff_modulo_inc@value+1,w,c
  3047  000EC0  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  3048                           
  3049                           ;UART.c: 107: if (my_value >= modulus) {
  3050  000EC2  501D               	movf	UART_buff_modulo_inc@modulus,w,c
  3051  000EC4  5C1F               	subwf	UART_buff_modulo_inc@my_value,w,c
  3052  000EC6  501E               	movf	UART_buff_modulo_inc@modulus+1,w,c
  3053  000EC8  5820               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  3054  000ECA  A0D8               	btfss	status,0,c
  3055  000ECC  D004               	goto	l2157
  3056                           
  3057                           ;UART.c: 108: my_value = 0;
  3058  000ECE  0E00               	movlw	0
  3059  000ED0  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  3060  000ED2  0E00               	movlw	0
  3061  000ED4  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  3062  000ED6                     l2157:
  3063                           
  3064                           ;UART.c: 109: }
  3065                           ;UART.c: 110: return (my_value);
  3066  000ED6  C01F  F01B         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  3067  000EDA  C020  F01C         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  3068  000EDE  0012               	return	
  3069  000EE0                     __end_of_UART_buff_modulo_inc:
  3070                           	opt stack 0
  3071                           tblptru	equ	0xFF8
  3072                           tblptrh	equ	0xFF7
  3073                           tblptrl	equ	0xFF6
  3074                           tablat	equ	0xFF5
  3075                           prodh	equ	0xFF4
  3076                           prodl	equ	0xFF3
  3077                           postinc0	equ	0xFEE
  3078                           wreg	equ	0xFE8
  3079                           indf1	equ	0xFE7
  3080                           postdec1	equ	0xFE5
  3081                           fsr1h	equ	0xFE2
  3082                           fsr1l	equ	0xFE1
  3083                           indf2	equ	0xFDF
  3084                           postinc2	equ	0xFDE
  3085                           postdec2	equ	0xFDD
  3086                           plusw2	equ	0xFDB
  3087                           fsr2h	equ	0xFDA
  3088                           fsr2l	equ	0xFD9
  3089                           status	equ	0xFD8
  3090                           
  3091 ;; *************** function _CRC8 *****************
  3092 ;; Defined at:
  3093 ;;		line 21 in file "CarCom.c"
  3094 ;; Parameters:    Size  Location     Type
  3095 ;;  data            2   26[COMRAM] PTR const unsigned char 
  3096 ;;		 -> ProcessArray(30), sendData@SendArray(30), 
  3097 ;;  len             1   28[COMRAM] unsigned char 
  3098 ;; Auto vars:     Size  Location     Type
  3099 ;;  sum             1   29[COMRAM] unsigned char 
  3100 ;;  tempI           1   31[COMRAM] unsigned char 
  3101 ;;  extract         1   30[COMRAM] unsigned char 
  3102 ;;  crc             1   32[COMRAM] unsigned char 
  3103 ;; Return value:  Size  Location     Type
  3104 ;;                  1    wreg      unsigned char 
  3105 ;; Registers used:
  3106 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3107 ;; Tracked objects:
  3108 ;;		On entry : 0/0
  3109 ;;		On exit  : 0/0
  3110 ;;		Unchanged: 0/0
  3111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3112 ;;      Params:         3       0       0       0       0       0       0
  3113 ;;      Locals:         4       0       0       0       0       0       0
  3114 ;;      Temps:          0       0       0       0       0       0       0
  3115 ;;      Totals:         7       0       0       0       0       0       0
  3116 ;;Total ram usage:        7 bytes
  3117 ;; Hardware stack levels used:    1
  3118 ;; Hardware stack levels required when called:    4
  3119 ;; This function calls:
  3120 ;;		Nothing
  3121 ;; This function is called by:
  3122 ;;		_sendData
  3123 ;;		_receiveData
  3124 ;; This function uses a non-reentrant model
  3125 ;;
  3126                           
  3127                           	psect	text14
  3128  000D44                     __ptext14:
  3129                           	opt stack 0
  3130  000D44                     _CRC8:
  3131                           	opt stack 22
  3132                           
  3133                           ;CarCom.c: 22: unsigned char crc = 0x00;
  3134                           
  3135                           ;incstack = 0
  3136  000D44  0E00               	movlw	0
  3137  000D46  6E21               	movwf	CRC8@crc,c
  3138                           
  3139                           ;CarCom.c: 23: while (len--) {
  3140  000D48  D01C               	goto	l2289
  3141  000D4A                     l2273:
  3142                           
  3143                           ;CarCom.c: 24: unsigned char extract = *data++;
  3144  000D4A  C01B  FFD9         	movff	CRC8@data,fsr2l
  3145  000D4E  C01C  FFDA         	movff	CRC8@data+1,fsr2h
  3146  000D52  50DF               	movf	indf2,w,c
  3147  000D54  6E1F               	movwf	CRC8@extract,c
  3148  000D56  4A1B               	infsnz	CRC8@data,f,c
  3149  000D58  2A1C               	incf	CRC8@data+1,f,c
  3150                           
  3151                           ;CarCom.c: 25: unsigned char tempI;
  3152                           ;CarCom.c: 26: for (tempI = 8; tempI; tempI--) {
  3153  000D5A  0E08               	movlw	8
  3154  000D5C  6E20               	movwf	CRC8@tempI,c
  3155  000D5E  D00E               	goto	l2287
  3156  000D60                     l2279:
  3157                           
  3158                           ;CarCom.c: 27: unsigned char sum = (crc ^ extract) & 0x01;
  3159  000D60  5021               	movf	CRC8@crc,w,c
  3160  000D62  181F               	xorwf	CRC8@extract,w,c
  3161  000D64  0B01               	andlw	1
  3162  000D66  6E1E               	movwf	CRC8@sum,c
  3163                           
  3164                           ;CarCom.c: 28: crc >>= 1;
  3165  000D68  90D8               	bcf	status,0,c
  3166  000D6A  3221               	rrcf	CRC8@crc,f,c
  3167                           
  3168                           ;CarCom.c: 29: if (sum) {
  3169  000D6C  501E               	movf	CRC8@sum,w,c
  3170  000D6E  B4D8               	btfsc	status,2,c
  3171  000D70  D002               	goto	l384
  3172                           
  3173                           ;CarCom.c: 30: crc ^= 0x8C;
  3174  000D72  0E8C               	movlw	140
  3175  000D74  1A21               	xorwf	CRC8@crc,f,c
  3176  000D76                     l384:
  3177                           
  3178                           ;CarCom.c: 31: }
  3179                           ;CarCom.c: 32: extract >>= 1;
  3180  000D76  90D8               	bcf	status,0,c
  3181  000D78  321F               	rrcf	CRC8@extract,f,c
  3182  000D7A  0620               	decf	CRC8@tempI,f,c
  3183  000D7C                     l2287:
  3184  000D7C  5020               	movf	CRC8@tempI,w,c
  3185  000D7E  A4D8               	btfss	status,2,c
  3186  000D80  D7EF               	goto	l2279
  3187  000D82                     l2289:
  3188  000D82  061D               	decf	CRC8@len,f,c
  3189  000D84  281D               	incf	CRC8@len,w,c
  3190  000D86  A4D8               	btfss	status,2,c
  3191  000D88  D7E0               	goto	l2273
  3192                           
  3193                           ;CarCom.c: 33: }
  3194                           ;CarCom.c: 34: }
  3195                           ;CarCom.c: 35: return crc;
  3196  000D8A  5021               	movf	CRC8@crc,w,c
  3197  000D8C  0012               	return	
  3198  000D8E                     __end_of_CRC8:
  3199                           	opt stack 0
  3200                           tblptru	equ	0xFF8
  3201                           tblptrh	equ	0xFF7
  3202                           tblptrl	equ	0xFF6
  3203                           tablat	equ	0xFF5
  3204                           prodh	equ	0xFF4
  3205                           prodl	equ	0xFF3
  3206                           postinc0	equ	0xFEE
  3207                           wreg	equ	0xFE8
  3208                           indf1	equ	0xFE7
  3209                           postdec1	equ	0xFE5
  3210                           fsr1h	equ	0xFE2
  3211                           fsr1l	equ	0xFE1
  3212                           indf2	equ	0xFDF
  3213                           postinc2	equ	0xFDE
  3214                           postdec2	equ	0xFDD
  3215                           plusw2	equ	0xFDB
  3216                           fsr2h	equ	0xFDA
  3217                           fsr2l	equ	0xFD9
  3218                           status	equ	0xFD8
  3219                           
  3220 ;; *************** function _GetDataDict *****************
  3221 ;; Defined at:
  3222 ;;		line 9 in file "CarDataDictionary.c"
  3223 ;; Parameters:    Size  Location     Type
  3224 ;;  DataTable       1    wreg     unsigned char 
  3225 ;;  DataTableInd    1   26[COMRAM] unsigned char 
  3226 ;;  DataArray       2   27[COMRAM] PTR unsigned char 
  3227 ;;		 -> ComController@DataToSend(4), 
  3228 ;;  numbofbytes     1   29[COMRAM] unsigned char 
  3229 ;; Auto vars:     Size  Location     Type
  3230 ;;  DataTable       1   31[COMRAM] unsigned char 
  3231 ;;  ReturnCounte    1   33[COMRAM] unsigned char 
  3232 ;;  DataCount       1   32[COMRAM] unsigned char 
  3233 ;;  Error           1   30[COMRAM] unsigned char 
  3234 ;; Return value:  Size  Location     Type
  3235 ;;                  1    wreg      unsigned char 
  3236 ;; Registers used:
  3237 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3238 ;; Tracked objects:
  3239 ;;		On entry : 0/0
  3240 ;;		On exit  : 0/0
  3241 ;;		Unchanged: 0/0
  3242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3243 ;;      Params:         4       0       0       0       0       0       0
  3244 ;;      Locals:         4       0       0       0       0       0       0
  3245 ;;      Temps:          0       0       0       0       0       0       0
  3246 ;;      Totals:         8       0       0       0       0       0       0
  3247 ;;Total ram usage:        8 bytes
  3248 ;; Hardware stack levels used:    1
  3249 ;; Hardware stack levels required when called:    4
  3250 ;; This function calls:
  3251 ;;		Nothing
  3252 ;; This function is called by:
  3253 ;;		_ComController
  3254 ;; This function uses a non-reentrant model
  3255 ;;
  3256                           
  3257                           	psect	text15
  3258  0009BA                     __ptext15:
  3259                           	opt stack 0
  3260  0009BA                     _GetDataDict:
  3261                           	opt stack 23
  3262                           
  3263                           ;incstack = 0
  3264                           ;GetDataDict@DataTable stored from wreg
  3265  0009BA  6E20               	movwf	GetDataDict@DataTable,c
  3266                           
  3267                           ;CarDataDictionary.c: 10: unsigned char Error = 0;
  3268  0009BC  0E00               	movlw	0
  3269  0009BE  6E1F               	movwf	GetDataDict@Error,c
  3270                           
  3271                           ;CarDataDictionary.c: 11: unsigned char DataCount = 0;
  3272  0009C0  0E00               	movlw	0
  3273  0009C2  6E21               	movwf	GetDataDict@DataCount,c
  3274                           
  3275                           ;CarDataDictionary.c: 12: unsigned char ReturnCounter = 0;
  3276  0009C4  0E00               	movlw	0
  3277  0009C6  6E22               	movwf	GetDataDict@ReturnCounter,c
  3278                           
  3279                           ;CarDataDictionary.c: 13: switch(DataTable){
  3280  0009C8  D03C               	goto	l2327
  3281  0009CA                     l2307:
  3282                           
  3283                           ;CarDataDictionary.c: 15: DataCount = DataTableIndex + numbofbytes;
  3284  0009CA  501B               	movf	GetDataDict@DataTableIndex,w,c
  3285  0009CC  241E               	addwf	GetDataDict@numbofbytes,w,c
  3286  0009CE  6E21               	movwf	GetDataDict@DataCount,c
  3287  0009D0  D014               	goto	l2315
  3288  0009D2                     l2309:
  3289                           
  3290                           ;CarDataDictionary.c: 17: DataArray[ReturnCounter] = DataTableArrayOne[DataTableIndex];
  3291  0009D2  501B               	movf	GetDataDict@DataTableIndex,w,c
  3292  0009D4  0D01               	mullw	1
  3293  0009D6  0EC9               	movlw	low _DataTableArrayOne
  3294  0009D8  24F3               	addwf	prodl,w,c
  3295  0009DA  6ED9               	movwf	fsr2l,c
  3296  0009DC  0E00               	movlw	high _DataTableArrayOne
  3297  0009DE  20F4               	addwfc	prodh,w,c
  3298  0009E0  6EDA               	movwf	fsr2h,c
  3299  0009E2  5022               	movf	GetDataDict@ReturnCounter,w,c
  3300  0009E4  0D01               	mullw	1
  3301  0009E6  50F3               	movf	prodl,w,c
  3302  0009E8  241C               	addwf	GetDataDict@DataArray,w,c
  3303  0009EA  6EE1               	movwf	fsr1l,c
  3304  0009EC  50F4               	movf	prodh,w,c
  3305  0009EE  201D               	addwfc	GetDataDict@DataArray+1,w,c
  3306  0009F0  6EE2               	movwf	fsr1h,c
  3307  0009F2  CFDF FFE7          	movff	indf2,indf1
  3308                           
  3309                           ;CarDataDictionary.c: 18: ReturnCounter++;
  3310  0009F6  2A22               	incf	GetDataDict@ReturnCounter,f,c
  3311  0009F8  2A1B               	incf	GetDataDict@DataTableIndex,f,c
  3312  0009FA                     l2315:
  3313  0009FA  5021               	movf	GetDataDict@DataCount,w,c
  3314  0009FC  5C1B               	subwf	GetDataDict@DataTableIndex,w,c
  3315  0009FE  B0D8               	btfsc	status,0,c
  3316  000A00  0012               	return	
  3317  000A02  D7E7               	goto	l2309
  3318  000A04                     l2317:
  3319                           
  3320                           ;CarDataDictionary.c: 22: DataCount = DataTableIndex + numbofbytes;
  3321  000A04  501B               	movf	GetDataDict@DataTableIndex,w,c
  3322  000A06  241E               	addwf	GetDataDict@numbofbytes,w,c
  3323  000A08  6E21               	movwf	GetDataDict@DataCount,c
  3324  000A0A  D014               	goto	l2325
  3325  000A0C                     l2319:
  3326                           
  3327                           ;CarDataDictionary.c: 24: DataArray[ReturnCounter] = DataTableArrayTwo[DataTableIndex];
  3328  000A0C  501B               	movf	GetDataDict@DataTableIndex,w,c
  3329  000A0E  0D01               	mullw	1
  3330  000A10  0E32               	movlw	low _DataTableArrayTwo
  3331  000A12  24F3               	addwf	prodl,w,c
  3332  000A14  6ED9               	movwf	fsr2l,c
  3333  000A16  0E00               	movlw	high _DataTableArrayTwo
  3334  000A18  20F4               	addwfc	prodh,w,c
  3335  000A1A  6EDA               	movwf	fsr2h,c
  3336  000A1C  5022               	movf	GetDataDict@ReturnCounter,w,c
  3337  000A1E  0D01               	mullw	1
  3338  000A20  50F3               	movf	prodl,w,c
  3339  000A22  241C               	addwf	GetDataDict@DataArray,w,c
  3340  000A24  6EE1               	movwf	fsr1l,c
  3341  000A26  50F4               	movf	prodh,w,c
  3342  000A28  201D               	addwfc	GetDataDict@DataArray+1,w,c
  3343  000A2A  6EE2               	movwf	fsr1h,c
  3344  000A2C  CFDF FFE7          	movff	indf2,indf1
  3345                           
  3346                           ;CarDataDictionary.c: 25: ReturnCounter++;
  3347  000A30  2A22               	incf	GetDataDict@ReturnCounter,f,c
  3348  000A32  2A1B               	incf	GetDataDict@DataTableIndex,f,c
  3349  000A34                     l2325:
  3350  000A34  5021               	movf	GetDataDict@DataCount,w,c
  3351  000A36  5C1B               	subwf	GetDataDict@DataTableIndex,w,c
  3352  000A38  B0D8               	btfsc	status,0,c
  3353  000A3A  0012               	return	
  3354  000A3C  D7E7               	goto	l2319
  3355  000A3E                     l334:
  3356                           
  3357                           ;CarDataDictionary.c: 29: Error = -1;
  3358  000A3E  681F               	setf	GetDataDict@Error,c
  3359                           
  3360                           ;CarDataDictionary.c: 30: }
  3361  000A40  0012               	return	
  3362  000A42                     l2327:
  3363  000A42  5020               	movf	GetDataDict@DataTable,w,c
  3364                           
  3365                           ; Switch size 1, requested type "space"
  3366                           ; Number of cases is 2, Range of values is 0 to 1
  3367                           ; switch strategies available:
  3368                           ; Name         Instructions Cycles
  3369                           ; simple_byte            7     4 (average)
  3370                           ;	Chosen strategy is simple_byte
  3371  000A44  0A00               	xorlw	0	; case 0
  3372  000A46  B4D8               	btfsc	status,2,c
  3373  000A48  D7C0               	goto	l2307
  3374  000A4A  0A01               	xorlw	1	; case 1
  3375  000A4C  B4D8               	btfsc	status,2,c
  3376  000A4E  D7DA               	goto	l2317
  3377  000A50  D7F6               	goto	l334
  3378  000A52                     __end_of_GetDataDict:
  3379                           	opt stack 0
  3380                           tblptru	equ	0xFF8
  3381                           tblptrh	equ	0xFF7
  3382                           tblptrl	equ	0xFF6
  3383                           tablat	equ	0xFF5
  3384                           prodh	equ	0xFF4
  3385                           prodl	equ	0xFF3
  3386                           postinc0	equ	0xFEE
  3387                           wreg	equ	0xFE8
  3388                           indf1	equ	0xFE7
  3389                           postdec1	equ	0xFE5
  3390                           fsr1h	equ	0xFE2
  3391                           fsr1l	equ	0xFE1
  3392                           indf2	equ	0xFDF
  3393                           postinc2	equ	0xFDE
  3394                           postdec2	equ	0xFDD
  3395                           plusw2	equ	0xFDB
  3396                           fsr2h	equ	0xFDA
  3397                           fsr2l	equ	0xFD9
  3398                           status	equ	0xFD8
  3399                           
  3400 ;; *************** function _Delay *****************
  3401 ;; Defined at:
  3402 ;;		line 210 in file "Function.c"
  3403 ;; Parameters:    Size  Location     Type
  3404 ;;  wait            2   26[COMRAM] int 
  3405 ;; Auto vars:     Size  Location     Type
  3406 ;;  x               2   29[COMRAM] int 
  3407 ;; Return value:  Size  Location     Type
  3408 ;;                  1    wreg      void 
  3409 ;; Registers used:
  3410 ;;		wreg, status,2, status,0
  3411 ;; Tracked objects:
  3412 ;;		On entry : 0/0
  3413 ;;		On exit  : 0/0
  3414 ;;		Unchanged: 0/0
  3415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3416 ;;      Params:         2       0       0       0       0       0       0
  3417 ;;      Locals:         2       0       0       0       0       0       0
  3418 ;;      Temps:          1       0       0       0       0       0       0
  3419 ;;      Totals:         5       0       0       0       0       0       0
  3420 ;;Total ram usage:        5 bytes
  3421 ;; Hardware stack levels used:    1
  3422 ;; Hardware stack levels required when called:    4
  3423 ;; This function calls:
  3424 ;;		Nothing
  3425 ;; This function is called by:
  3426 ;;		_ComController
  3427 ;; This function uses a non-reentrant model
  3428 ;;
  3429                           
  3430                           	psect	text16
  3431  000DCA                     __ptext16:
  3432                           	opt stack 0
  3433  000DCA                     _Delay:
  3434                           	opt stack 23
  3435                           
  3436                           ;Function.c: 211: int x;
  3437                           ;Function.c: 212: for (x = 0; x < wait; x++) {
  3438                           
  3439                           ;incstack = 0
  3440  000DCA  0E00               	movlw	0
  3441  000DCC  6E1F               	movwf	Delay@x+1,c
  3442  000DCE  0E00               	movlw	0
  3443  000DD0  6E1E               	movwf	Delay@x,c
  3444  000DD2  D00A               	goto	l269
  3445  000DD4                     l2301:
  3446                           
  3447                           ;Function.c: 213: _delay((unsigned long)((1)*(16000000/4000.0)));
  3448  000DD4  0E06               	movlw	6
  3449  000DD6  6E1D               	movwf	??_Delay& (0+255),c
  3450  000DD8  0E30               	movlw	48
  3451  000DDA                     u1607:
  3452  000DDA  2EE8               	decfsz	wreg,f,c
  3453  000DDC  D7FE               	bra	u1607
  3454  000DDE  2E1D               	decfsz	??_Delay& (0+255),f,c
  3455  000DE0  D7FC               	bra	u1607
  3456  000DE2  D000               	nop2	
  3457  000DE4  4A1E               	infsnz	Delay@x,f,c
  3458  000DE6  2A1F               	incf	Delay@x+1,f,c
  3459  000DE8                     l269:
  3460  000DE8  501B               	movf	Delay@wait,w,c
  3461  000DEA  5C1E               	subwf	Delay@x,w,c
  3462  000DEC  501F               	movf	Delay@x+1,w,c
  3463  000DEE  0A80               	xorlw	128
  3464  000DF0  6E1D               	movwf	??_Delay& (0+255),c
  3465  000DF2  501C               	movf	Delay@wait+1,w,c
  3466  000DF4  0A80               	xorlw	128
  3467  000DF6  581D               	subwfb	??_Delay& (0+255),w,c
  3468  000DF8  B0D8               	btfsc	status,0,c
  3469  000DFA  0012               	return	
  3470  000DFC  D7EB               	goto	l2301
  3471  000DFE                     __end_of_Delay:
  3472                           	opt stack 0
  3473                           tblptru	equ	0xFF8
  3474                           tblptrh	equ	0xFF7
  3475                           tblptrl	equ	0xFF6
  3476                           tablat	equ	0xFF5
  3477                           prodh	equ	0xFF4
  3478                           prodl	equ	0xFF3
  3479                           postinc0	equ	0xFEE
  3480                           wreg	equ	0xFE8
  3481                           indf1	equ	0xFE7
  3482                           postdec1	equ	0xFE5
  3483                           fsr1h	equ	0xFE2
  3484                           fsr1l	equ	0xFE1
  3485                           indf2	equ	0xFDF
  3486                           postinc2	equ	0xFDE
  3487                           postdec2	equ	0xFDD
  3488                           plusw2	equ	0xFDB
  3489                           fsr2h	equ	0xFDA
  3490                           fsr2l	equ	0xFD9
  3491                           status	equ	0xFD8
  3492                           
  3493 ;; *************** function _Start *****************
  3494 ;; Defined at:
  3495 ;;		line 49 in file "Function.c"
  3496 ;; Parameters:    Size  Location     Type
  3497 ;;		None
  3498 ;; Auto vars:     Size  Location     Type
  3499 ;;  Data            5   36[COMRAM] unsigned char [5]
  3500 ;; Return value:  Size  Location     Type
  3501 ;;                  1    wreg      void 
  3502 ;; Registers used:
  3503 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3504 ;; Tracked objects:
  3505 ;;		On entry : 0/0
  3506 ;;		On exit  : 0/0
  3507 ;;		Unchanged: 0/0
  3508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3509 ;;      Params:         0       0       0       0       0       0       0
  3510 ;;      Locals:         5       0       0       0       0       0       0
  3511 ;;      Temps:          0       0       0       0       0       0       0
  3512 ;;      Totals:         5       0       0       0       0       0       0
  3513 ;;Total ram usage:        5 bytes
  3514 ;; Hardware stack levels used:    1
  3515 ;; Hardware stack levels required when called:    8
  3516 ;; This function calls:
  3517 ;;		_ComStart
  3518 ;;		_INTERRUPT_Initialize
  3519 ;;		_SetDataDict
  3520 ;;		_TMR0_Initialize
  3521 ;; This function is called by:
  3522 ;;		_main
  3523 ;; This function uses a non-reentrant model
  3524 ;;
  3525                           
  3526                           	psect	text17
  3527  000C0E                     __ptext17:
  3528                           	opt stack 0
  3529  000C0E                     _Start:
  3530                           	opt stack 22
  3531                           
  3532                           ;Function.c: 114: TRISCbits.TRISC5 = 1;
  3533                           
  3534                           ;incstack = 0
  3535  000C0E  8A94               	bsf	3988,5,c	;volatile
  3536                           
  3537                           ;Function.c: 115: TRISCbits.TRISC4 = 1;
  3538  000C10  8894               	bsf	3988,4,c	;volatile
  3539                           
  3540                           ;Function.c: 116: TRISDbits.TRISD3 = 1;
  3541  000C12  8695               	bsf	3989,3,c	;volatile
  3542                           
  3543                           ;Function.c: 117: TRISDbits.TRISD2 = 1;
  3544  000C14  8495               	bsf	3989,2,c	;volatile
  3545                           
  3546                           ;Function.c: 118: TRISDbits.TRISD1 = 1;
  3547  000C16  8295               	bsf	3989,1,c	;volatile
  3548                           
  3549                           ;Function.c: 119: TRISDbits.TRISD0 = 1;
  3550  000C18  8095               	bsf	3989,0,c	;volatile
  3551                           
  3552                           ;Function.c: 120: TRISCbits.TRISC3 = 1;
  3553  000C1A  8694               	bsf	3988,3,c	;volatile
  3554                           
  3555                           ;Function.c: 121: TRISCbits.TRISC2 = 1;
  3556  000C1C  8494               	bsf	3988,2,c	;volatile
  3557                           
  3558                           ;Function.c: 122: TRISCbits.TRISC1 = 1;
  3559  000C1E  8294               	bsf	3988,1,c	;volatile
  3560                           
  3561                           ;Function.c: 123: TRISAbits.TRISA7 = 1;
  3562  000C20  8E92               	bsf	3986,7,c	;volatile
  3563                           
  3564                           ;Function.c: 124: TRISCbits.TRISC0 = 1;
  3565  000C22  8094               	bsf	3988,0,c	;volatile
  3566                           
  3567                           ;Function.c: 125: TRISAbits.TRISA4 = 1;
  3568  000C24  8892               	bsf	3986,4,c	;volatile
  3569                           
  3570                           ;Function.c: 126: TRISAbits.TRISA6 = 1;
  3571  000C26  8C92               	bsf	3986,6,c	;volatile
  3572                           
  3573                           ;Function.c: 128: ANSELCbits.ANSC2 = 1;
  3574  000C28  010F               	movlb	15	; () banked
  3575  000C2A  853A               	bsf	58,2,b	;volatile
  3576                           
  3577                           ;Function.c: 131: TRISAbits.TRISA3 = 0;
  3578  000C2C  9692               	bcf	3986,3,c	;volatile
  3579                           
  3580                           ;Function.c: 132: TRISDbits.TRISD4 = 0;
  3581  000C2E  9895               	bcf	3989,4,c	;volatile
  3582                           
  3583                           ; BSR set to: 15
  3584                           ;Function.c: 137: ANSELA = 0;
  3585  000C30  0E00               	movlw	0
  3586  000C32  010F               	movlb	15	; () banked
  3587  000C34  6F38               	movwf	56,b	;volatile
  3588                           
  3589                           ;Function.c: 138: ANSELB = 0;
  3590  000C36  0E00               	movlw	0
  3591  000C38  010F               	movlb	15	; () banked
  3592  000C3A  6F39               	movwf	57,b	;volatile
  3593                           
  3594                           ;Function.c: 139: ANSELC = 0;
  3595  000C3C  0E00               	movlw	0
  3596  000C3E  010F               	movlb	15	; () banked
  3597  000C40  6F3A               	movwf	58,b	;volatile
  3598                           
  3599                           ;Function.c: 140: ANSELD = 0;
  3600  000C42  0E00               	movlw	0
  3601  000C44  010F               	movlb	15	; () banked
  3602  000C46  6F3B               	movwf	59,b	;volatile
  3603                           
  3604                           ;Function.c: 141: ANSELE = 0;
  3605  000C48  0E00               	movlw	0
  3606  000C4A  010F               	movlb	15	; () banked
  3607  000C4C  6F3C               	movwf	60,b	;volatile
  3608                           
  3609                           ;Function.c: 145: OSCCON = 0x72;
  3610  000C4E  0E72               	movlw	114
  3611  000C50  6ED3               	movwf	4051,c	;volatile
  3612                           
  3613                           ;Function.c: 147: OSCCON2 = 0x04;
  3614  000C52  0E04               	movlw	4
  3615  000C54  6ED2               	movwf	4050,c	;volatile
  3616                           
  3617                           ;Function.c: 149: OSCTUNE = 0x00;
  3618  000C56  0E00               	movlw	0
  3619  000C58  6E9B               	movwf	3995,c	;volatile
  3620                           
  3621                           ; BSR set to: 15
  3622                           ;Function.c: 152: ComStart();
  3623  000C5A  EC0A  F008         	call	_ComStart	;wreg free
  3624                           
  3625                           ;Function.c: 153: INTERRUPT_Initialize();
  3626  000C5E  ECB2  F007         	call	_INTERRUPT_Initialize	;wreg free
  3627                           
  3628                           ;Function.c: 154: TMR0_Initialize();
  3629  000C62  EC85  F007         	call	_TMR0_Initialize	;wreg free
  3630                           
  3631                           ;Function.c: 156: unsigned char Data[5] = {4,2};
  3632  000C66  EE20  F03F         	lfsr	2,Start@F7240
  3633  000C6A  EE10  F025         	lfsr	1,Start@Data
  3634  000C6E  0E04               	movlw	4
  3635  000C70                     u1051:
  3636  000C70  CFDB FFE3          	movff	plusw2,plusw1
  3637  000C74  06E8               	decf	wreg,f,c
  3638  000C76  E2FC               	bc	u1051
  3639                           
  3640                           ;Function.c: 157: SetDataDict(0, 0,Data,2);
  3641  000C78  0E00               	movlw	0
  3642  000C7A  6E1B               	movwf	SetDataDict@DataTableIndex,c
  3643  000C7C  0E25               	movlw	low Start@Data
  3644  000C7E  6E1C               	movwf	SetDataDict@DataArray,c
  3645  000C80  0E00               	movlw	high Start@Data
  3646  000C82  6E1D               	movwf	SetDataDict@DataArray+1,c
  3647  000C84  0E02               	movlw	2
  3648  000C86  6E1E               	movwf	SetDataDict@numbofbytes,c
  3649  000C88  0E00               	movlw	0
  3650  000C8A  EC29  F005         	call	_SetDataDict
  3651  000C8E  0012               	return		;funcret
  3652  000C90                     __end_of_Start:
  3653                           	opt stack 0
  3654                           tblptru	equ	0xFF8
  3655                           tblptrh	equ	0xFF7
  3656                           tblptrl	equ	0xFF6
  3657                           tablat	equ	0xFF5
  3658                           prodh	equ	0xFF4
  3659                           prodl	equ	0xFF3
  3660                           postinc0	equ	0xFEE
  3661                           wreg	equ	0xFE8
  3662                           indf1	equ	0xFE7
  3663                           postdec1	equ	0xFE5
  3664                           plusw1	equ	0xFE3
  3665                           fsr1h	equ	0xFE2
  3666                           fsr1l	equ	0xFE1
  3667                           indf2	equ	0xFDF
  3668                           postinc2	equ	0xFDE
  3669                           postdec2	equ	0xFDD
  3670                           plusw2	equ	0xFDB
  3671                           fsr2h	equ	0xFDA
  3672                           fsr2l	equ	0xFD9
  3673                           status	equ	0xFD8
  3674                           
  3675 ;; *************** function _TMR0_Initialize *****************
  3676 ;; Defined at:
  3677 ;;		line 23 in file "tmr0.c"
  3678 ;; Parameters:    Size  Location     Type
  3679 ;;		None
  3680 ;; Auto vars:     Size  Location     Type
  3681 ;;		None
  3682 ;; Return value:  Size  Location     Type
  3683 ;;                  1    wreg      void 
  3684 ;; Registers used:
  3685 ;;		wreg, status,2, cstack
  3686 ;; Tracked objects:
  3687 ;;		On entry : 0/0
  3688 ;;		On exit  : 0/0
  3689 ;;		Unchanged: 0/0
  3690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3691 ;;      Params:         0       0       0       0       0       0       0
  3692 ;;      Locals:         0       0       0       0       0       0       0
  3693 ;;      Temps:          0       0       0       0       0       0       0
  3694 ;;      Totals:         0       0       0       0       0       0       0
  3695 ;;Total ram usage:        0 bytes
  3696 ;; Hardware stack levels used:    1
  3697 ;; Hardware stack levels required when called:    5
  3698 ;; This function calls:
  3699 ;;		_TMR0_StartTimer
  3700 ;; This function is called by:
  3701 ;;		_Start
  3702 ;; This function uses a non-reentrant model
  3703 ;;
  3704                           
  3705                           	psect	text18
  3706  000F0A                     __ptext18:
  3707                           	opt stack 0
  3708  000F0A                     _TMR0_Initialize:
  3709                           	opt stack 24
  3710                           
  3711                           ;tmr0.c: 27: T0CON = 0x94;
  3712                           
  3713                           ;incstack = 0
  3714  000F0A  0E94               	movlw	148
  3715  000F0C  6ED5               	movwf	4053,c	;volatile
  3716                           
  3717                           ;tmr0.c: 30: TMR0H = 0xCF;
  3718  000F0E  0ECF               	movlw	207
  3719  000F10  6ED7               	movwf	4055,c	;volatile
  3720                           
  3721                           ;tmr0.c: 33: TMR0L = 0x2C;
  3722  000F12  0E2C               	movlw	44
  3723  000F14  6ED6               	movwf	4054,c	;volatile
  3724                           
  3725                           ;tmr0.c: 36: timer0ReloadVal16bit = 53036;
  3726  000F16  0ECF               	movlw	207
  3727  000F18  6E3C               	movwf	_timer0ReloadVal16bit+1,c	;volatile
  3728  000F1A  0E2C               	movlw	44
  3729  000F1C  6E3B               	movwf	_timer0ReloadVal16bit,c	;volatile
  3730                           
  3731                           ;tmr0.c: 39: INTCONbits.TMR0IF = 0;
  3732  000F1E  94F2               	bcf	intcon,2,c	;volatile
  3733                           
  3734                           ;tmr0.c: 42: INTCONbits.TMR0IE = 1;
  3735  000F20  8AF2               	bsf	intcon,5,c	;volatile
  3736                           
  3737                           ;tmr0.c: 45: TMR0_StartTimer();
  3738  000F22  EC0D  F008         	call	_TMR0_StartTimer	;wreg free
  3739  000F26  0012               	return		;funcret
  3740  000F28                     __end_of_TMR0_Initialize:
  3741                           	opt stack 0
  3742                           tblptru	equ	0xFF8
  3743                           tblptrh	equ	0xFF7
  3744                           tblptrl	equ	0xFF6
  3745                           tablat	equ	0xFF5
  3746                           prodh	equ	0xFF4
  3747                           prodl	equ	0xFF3
  3748                           intcon	equ	0xFF2
  3749                           postinc0	equ	0xFEE
  3750                           wreg	equ	0xFE8
  3751                           indf1	equ	0xFE7
  3752                           postdec1	equ	0xFE5
  3753                           plusw1	equ	0xFE3
  3754                           fsr1h	equ	0xFE2
  3755                           fsr1l	equ	0xFE1
  3756                           indf2	equ	0xFDF
  3757                           postinc2	equ	0xFDE
  3758                           postdec2	equ	0xFDD
  3759                           plusw2	equ	0xFDB
  3760                           fsr2h	equ	0xFDA
  3761                           fsr2l	equ	0xFD9
  3762                           status	equ	0xFD8
  3763                           
  3764 ;; *************** function _TMR0_StartTimer *****************
  3765 ;; Defined at:
  3766 ;;		line 48 in file "tmr0.c"
  3767 ;; Parameters:    Size  Location     Type
  3768 ;;		None
  3769 ;; Auto vars:     Size  Location     Type
  3770 ;;		None
  3771 ;; Return value:  Size  Location     Type
  3772 ;;                  1    wreg      void 
  3773 ;; Registers used:
  3774 ;;		None
  3775 ;; Tracked objects:
  3776 ;;		On entry : 0/0
  3777 ;;		On exit  : 0/0
  3778 ;;		Unchanged: 0/0
  3779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3780 ;;      Params:         0       0       0       0       0       0       0
  3781 ;;      Locals:         0       0       0       0       0       0       0
  3782 ;;      Temps:          0       0       0       0       0       0       0
  3783 ;;      Totals:         0       0       0       0       0       0       0
  3784 ;;Total ram usage:        0 bytes
  3785 ;; Hardware stack levels used:    1
  3786 ;; Hardware stack levels required when called:    4
  3787 ;; This function calls:
  3788 ;;		Nothing
  3789 ;; This function is called by:
  3790 ;;		_TMR0_Initialize
  3791 ;; This function uses a non-reentrant model
  3792 ;;
  3793                           
  3794                           	psect	text19
  3795  00101A                     __ptext19:
  3796                           	opt stack 0
  3797  00101A                     _TMR0_StartTimer:
  3798                           	opt stack 24
  3799                           
  3800                           ;tmr0.c: 50: T0CONbits.TMR0ON = 1;
  3801                           
  3802                           ;incstack = 0
  3803  00101A  8ED5               	bsf	4053,7,c	;volatile
  3804  00101C  0012               	return		;funcret
  3805  00101E                     __end_of_TMR0_StartTimer:
  3806                           	opt stack 0
  3807                           tblptru	equ	0xFF8
  3808                           tblptrh	equ	0xFF7
  3809                           tblptrl	equ	0xFF6
  3810                           tablat	equ	0xFF5
  3811                           prodh	equ	0xFF4
  3812                           prodl	equ	0xFF3
  3813                           intcon	equ	0xFF2
  3814                           postinc0	equ	0xFEE
  3815                           wreg	equ	0xFE8
  3816                           indf1	equ	0xFE7
  3817                           postdec1	equ	0xFE5
  3818                           plusw1	equ	0xFE3
  3819                           fsr1h	equ	0xFE2
  3820                           fsr1l	equ	0xFE1
  3821                           indf2	equ	0xFDF
  3822                           postinc2	equ	0xFDE
  3823                           postdec2	equ	0xFDD
  3824                           plusw2	equ	0xFDB
  3825                           fsr2h	equ	0xFDA
  3826                           fsr2l	equ	0xFD9
  3827                           status	equ	0xFD8
  3828                           
  3829 ;; *************** function _INTERRUPT_Initialize *****************
  3830 ;; Defined at:
  3831 ;;		line 160 in file "Function.c"
  3832 ;; Parameters:    Size  Location     Type
  3833 ;;		None
  3834 ;; Auto vars:     Size  Location     Type
  3835 ;;		None
  3836 ;; Return value:  Size  Location     Type
  3837 ;;                  1    wreg      void 
  3838 ;; Registers used:
  3839 ;;		None
  3840 ;; Tracked objects:
  3841 ;;		On entry : 0/0
  3842 ;;		On exit  : 0/0
  3843 ;;		Unchanged: 0/0
  3844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3845 ;;      Params:         0       0       0       0       0       0       0
  3846 ;;      Locals:         0       0       0       0       0       0       0
  3847 ;;      Temps:          0       0       0       0       0       0       0
  3848 ;;      Totals:         0       0       0       0       0       0       0
  3849 ;;Total ram usage:        0 bytes
  3850 ;; Hardware stack levels used:    1
  3851 ;; Hardware stack levels required when called:    4
  3852 ;; This function calls:
  3853 ;;		Nothing
  3854 ;; This function is called by:
  3855 ;;		_Start
  3856 ;; This function uses a non-reentrant model
  3857 ;;
  3858                           
  3859                           	psect	text20
  3860  000F64                     __ptext20:
  3861                           	opt stack 0
  3862  000F64                     _INTERRUPT_Initialize:
  3863                           	opt stack 25
  3864                           
  3865                           ;Function.c: 162: INTCONbits.PEIE = 1;
  3866                           
  3867                           ;incstack = 0
  3868  000F64  8CF2               	bsf	intcon,6,c	;volatile
  3869                           
  3870                           ;Function.c: 163: INTCONbits.GIE = 1;
  3871  000F66  8EF2               	bsf	intcon,7,c	;volatile
  3872                           
  3873                           ;Function.c: 165: RCONbits.IPEN = 0;
  3874  000F68  9ED0               	bcf	4048,7,c	;volatile
  3875                           
  3876                           ;Function.c: 170: IPR1bits.RC1IP = 0;
  3877  000F6A  9A9F               	bcf	3999,5,c	;volatile
  3878                           
  3879                           ;Function.c: 172: IPR1bits.TX1IP = 0;
  3880  000F6C  989F               	bcf	3999,4,c	;volatile
  3881                           
  3882                           ;Function.c: 175: INTCONbits.TMR0IF = 0;
  3883  000F6E  94F2               	bcf	intcon,2,c	;volatile
  3884                           
  3885                           ;Function.c: 178: INTCONbits.TMR0IE = 1;
  3886  000F70  8AF2               	bsf	intcon,5,c	;volatile
  3887                           
  3888                           ;Function.c: 180: IPR1bits.ADIP = 0;
  3889  000F72  9C9F               	bcf	3999,6,c	;volatile
  3890                           
  3891                           ;Function.c: 182: IPR1bits.SSP1IP = 0;
  3892  000F74  969F               	bcf	3999,3,c	;volatile
  3893                           
  3894                           ;Function.c: 184: IPR2bits.BCL1IP = 0;
  3895  000F76  96A2               	bcf	4002,3,c	;volatile
  3896                           
  3897                           ;Function.c: 185: IPR1bits.TMR2IP=0;
  3898  000F78  929F               	bcf	3999,1,c	;volatile
  3899  000F7A  0012               	return		;funcret
  3900  000F7C                     __end_of_INTERRUPT_Initialize:
  3901                           	opt stack 0
  3902                           tblptru	equ	0xFF8
  3903                           tblptrh	equ	0xFF7
  3904                           tblptrl	equ	0xFF6
  3905                           tablat	equ	0xFF5
  3906                           prodh	equ	0xFF4
  3907                           prodl	equ	0xFF3
  3908                           intcon	equ	0xFF2
  3909                           postinc0	equ	0xFEE
  3910                           wreg	equ	0xFE8
  3911                           indf1	equ	0xFE7
  3912                           postdec1	equ	0xFE5
  3913                           plusw1	equ	0xFE3
  3914                           fsr1h	equ	0xFE2
  3915                           fsr1l	equ	0xFE1
  3916                           indf2	equ	0xFDF
  3917                           postinc2	equ	0xFDE
  3918                           postdec2	equ	0xFDD
  3919                           plusw2	equ	0xFDB
  3920                           fsr2h	equ	0xFDA
  3921                           fsr2l	equ	0xFD9
  3922                           status	equ	0xFD8
  3923                           
  3924 ;; *************** function _ComStart *****************
  3925 ;; Defined at:
  3926 ;;		line 12 in file "Communications.c"
  3927 ;; Parameters:    Size  Location     Type
  3928 ;;		None
  3929 ;; Auto vars:     Size  Location     Type
  3930 ;;		None
  3931 ;; Return value:  Size  Location     Type
  3932 ;;                  1    wreg      void 
  3933 ;; Registers used:
  3934 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3935 ;; Tracked objects:
  3936 ;;		On entry : 0/0
  3937 ;;		On exit  : 0/0
  3938 ;;		Unchanged: 0/0
  3939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3940 ;;      Params:         0       0       0       0       0       0       0
  3941 ;;      Locals:         0       0       0       0       0       0       0
  3942 ;;      Temps:          0       0       0       0       0       0       0
  3943 ;;      Totals:         0       0       0       0       0       0       0
  3944 ;;Total ram usage:        0 bytes
  3945 ;; Hardware stack levels used:    1
  3946 ;; Hardware stack levels required when called:    7
  3947 ;; This function calls:
  3948 ;;		_EUSART1_Initialize
  3949 ;; This function is called by:
  3950 ;;		_Start
  3951 ;; This function uses a non-reentrant model
  3952 ;;
  3953                           
  3954                           	psect	text21
  3955  001014                     __ptext21:
  3956                           	opt stack 0
  3957  001014                     _ComStart:
  3958                           	opt stack 22
  3959                           
  3960                           ;Communications.c: 13: EUSART1_Initialize();
  3961                           
  3962                           ;incstack = 0
  3963  001014  ECC7  F006         	call	_EUSART1_Initialize	;wreg free
  3964  001018  0012               	return		;funcret
  3965  00101A                     __end_of_ComStart:
  3966                           	opt stack 0
  3967                           tblptru	equ	0xFF8
  3968                           tblptrh	equ	0xFF7
  3969                           tblptrl	equ	0xFF6
  3970                           tablat	equ	0xFF5
  3971                           prodh	equ	0xFF4
  3972                           prodl	equ	0xFF3
  3973                           intcon	equ	0xFF2
  3974                           postinc0	equ	0xFEE
  3975                           wreg	equ	0xFE8
  3976                           indf1	equ	0xFE7
  3977                           postdec1	equ	0xFE5
  3978                           plusw1	equ	0xFE3
  3979                           fsr1h	equ	0xFE2
  3980                           fsr1l	equ	0xFE1
  3981                           indf2	equ	0xFDF
  3982                           postinc2	equ	0xFDE
  3983                           postdec2	equ	0xFDD
  3984                           plusw2	equ	0xFDB
  3985                           fsr2h	equ	0xFDA
  3986                           fsr2l	equ	0xFD9
  3987                           status	equ	0xFD8
  3988                           
  3989 ;; *************** function _EUSART1_Initialize *****************
  3990 ;; Defined at:
  3991 ;;		line 20 in file "UART.c"
  3992 ;; Parameters:    Size  Location     Type
  3993 ;;		None
  3994 ;; Auto vars:     Size  Location     Type
  3995 ;;		None
  3996 ;; Return value:  Size  Location     Type
  3997 ;;                  1    wreg      void 
  3998 ;; Registers used:
  3999 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4000 ;; Tracked objects:
  4001 ;;		On entry : 0/0
  4002 ;;		On exit  : 0/0
  4003 ;;		Unchanged: 0/0
  4004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4005 ;;      Params:         0       0       0       0       0       0       0
  4006 ;;      Locals:         0       0       0       0       0       0       0
  4007 ;;      Temps:          0       0       0       0       0       0       0
  4008 ;;      Totals:         0       0       0       0       0       0       0
  4009 ;;Total ram usage:        0 bytes
  4010 ;; Hardware stack levels used:    1
  4011 ;; Hardware stack levels required when called:    6
  4012 ;; This function calls:
  4013 ;;		_UART_buff_init
  4014 ;; This function is called by:
  4015 ;;		_ComStart
  4016 ;; This function uses a non-reentrant model
  4017 ;;
  4018                           
  4019                           	psect	text22
  4020  000D8E                     __ptext22:
  4021                           	opt stack 0
  4022  000D8E                     _EUSART1_Initialize:
  4023                           	opt stack 22
  4024                           
  4025                           ;UART.c: 22: PIE1bits.RC1IE = 0;
  4026                           
  4027                           ;incstack = 0
  4028  000D8E  9A9D               	bcf	3997,5,c	;volatile
  4029                           
  4030                           ;UART.c: 23: PIE1bits.TX1IE = 0;
  4031  000D90  989D               	bcf	3997,4,c	;volatile
  4032                           
  4033                           ;UART.c: 28: BAUD1CON = 0x48;
  4034  000D92  0E48               	movlw	72
  4035  000D94  6EB8               	movwf	4024,c	;volatile
  4036                           
  4037                           ;UART.c: 31: RC1STA = 0x98;
  4038  000D96  0E98               	movlw	152
  4039  000D98  6EAB               	movwf	4011,c	;volatile
  4040                           
  4041                           ;UART.c: 34: TX1STA = 0x26;
  4042  000D9A  0E26               	movlw	38
  4043  000D9C  6EAC               	movwf	4012,c	;volatile
  4044                           
  4045                           ;UART.c: 37: SPBRG1 = (((16000000/38400)/4)-1);
  4046  000D9E  0E67               	movlw	103
  4047  000DA0  6EAF               	movwf	4015,c	;volatile
  4048                           
  4049                           ;UART.c: 40: SPBRGH1 = 0x00;
  4050  000DA2  0E00               	movlw	0
  4051  000DA4  6EB0               	movwf	4016,c	;volatile
  4052                           
  4053                           ;UART.c: 43: TXREG1 = 0x00;
  4054  000DA6  0E00               	movlw	0
  4055  000DA8  6EAD               	movwf	4013,c	;volatile
  4056                           
  4057                           ;UART.c: 46: RCREG1 = 0x00;
  4058  000DAA  0E00               	movlw	0
  4059  000DAC  6EAE               	movwf	4014,c	;volatile
  4060                           
  4061                           ;UART.c: 48: UART_buff_init(&input_buffer);
  4062  000DAE  0E6A               	movlw	low _input_buffer
  4063  000DB0  6E23               	movwf	UART_buff_init@_this,c
  4064  000DB2  0E01               	movlw	high _input_buffer
  4065  000DB4  6E24               	movwf	UART_buff_init@_this+1,c
  4066  000DB6  EC94  F007         	call	_UART_buff_init	;wreg free
  4067                           
  4068                           ;UART.c: 49: UART_buff_init(&output_buffer);
  4069  000DBA  0E00               	movlw	low _output_buffer
  4070  000DBC  6E23               	movwf	UART_buff_init@_this,c
  4071  000DBE  0E01               	movlw	high _output_buffer
  4072  000DC0  6E24               	movwf	UART_buff_init@_this+1,c
  4073  000DC2  EC94  F007         	call	_UART_buff_init	;wreg free
  4074                           
  4075                           ;UART.c: 51: PIE1bits.RC1IE = 1;
  4076  000DC6  8A9D               	bsf	3997,5,c	;volatile
  4077  000DC8  0012               	return		;funcret
  4078  000DCA                     __end_of_EUSART1_Initialize:
  4079                           	opt stack 0
  4080                           tblptru	equ	0xFF8
  4081                           tblptrh	equ	0xFF7
  4082                           tblptrl	equ	0xFF6
  4083                           tablat	equ	0xFF5
  4084                           prodh	equ	0xFF4
  4085                           prodl	equ	0xFF3
  4086                           intcon	equ	0xFF2
  4087                           postinc0	equ	0xFEE
  4088                           wreg	equ	0xFE8
  4089                           indf1	equ	0xFE7
  4090                           postdec1	equ	0xFE5
  4091                           plusw1	equ	0xFE3
  4092                           fsr1h	equ	0xFE2
  4093                           fsr1l	equ	0xFE1
  4094                           indf2	equ	0xFDF
  4095                           postinc2	equ	0xFDE
  4096                           postdec2	equ	0xFDD
  4097                           plusw2	equ	0xFDB
  4098                           fsr2h	equ	0xFDA
  4099                           fsr2l	equ	0xFD9
  4100                           status	equ	0xFD8
  4101                           
  4102 ;; *************** function _UART_buff_init *****************
  4103 ;; Defined at:
  4104 ;;		line 55 in file "UART.c"
  4105 ;; Parameters:    Size  Location     Type
  4106 ;;  _this           2   34[COMRAM] PTR struct UART_ring_buf
  4107 ;;		 -> output_buffer(106), input_buffer(106), 
  4108 ;; Auto vars:     Size  Location     Type
  4109 ;;		None
  4110 ;; Return value:  Size  Location     Type
  4111 ;;                  1    wreg      void 
  4112 ;; Registers used:
  4113 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4114 ;; Tracked objects:
  4115 ;;		On entry : 0/0
  4116 ;;		On exit  : 0/0
  4117 ;;		Unchanged: 0/0
  4118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4119 ;;      Params:         2       0       0       0       0       0       0
  4120 ;;      Locals:         0       0       0       0       0       0       0
  4121 ;;      Temps:          0       0       0       0       0       0       0
  4122 ;;      Totals:         2       0       0       0       0       0       0
  4123 ;;Total ram usage:        2 bytes
  4124 ;; Hardware stack levels used:    1
  4125 ;; Hardware stack levels required when called:    5
  4126 ;; This function calls:
  4127 ;;		_memset
  4128 ;; This function is called by:
  4129 ;;		_EUSART1_Initialize
  4130 ;; This function uses a non-reentrant model
  4131 ;;
  4132                           
  4133                           	psect	text23
  4134  000F28                     __ptext23:
  4135                           	opt stack 0
  4136  000F28                     _UART_buff_init:
  4137                           	opt stack 22
  4138                           
  4139                           ;UART.c: 64: memset(_this, 0, sizeof (*_this));
  4140                           
  4141                           ;incstack = 0
  4142  000F28  C023  F01B         	movff	UART_buff_init@_this,memset@p1
  4143  000F2C  C024  F01C         	movff	UART_buff_init@_this+1,memset@p1+1
  4144  000F30  0E00               	movlw	0
  4145  000F32  6E1E               	movwf	memset@c+1,c
  4146  000F34  0E00               	movlw	0
  4147  000F36  6E1D               	movwf	memset@c,c
  4148  000F38  0E00               	movlw	0
  4149  000F3A  6E20               	movwf	memset@n+1,c
  4150  000F3C  0E6A               	movlw	106
  4151  000F3E  6E1F               	movwf	memset@n,c
  4152  000F40  EC45  F007         	call	_memset	;wreg free
  4153  000F44  0012               	return		;funcret
  4154  000F46                     __end_of_UART_buff_init:
  4155                           	opt stack 0
  4156                           tblptru	equ	0xFF8
  4157                           tblptrh	equ	0xFF7
  4158                           tblptrl	equ	0xFF6
  4159                           tablat	equ	0xFF5
  4160                           prodh	equ	0xFF4
  4161                           prodl	equ	0xFF3
  4162                           intcon	equ	0xFF2
  4163                           postinc0	equ	0xFEE
  4164                           wreg	equ	0xFE8
  4165                           indf1	equ	0xFE7
  4166                           postdec1	equ	0xFE5
  4167                           plusw1	equ	0xFE3
  4168                           fsr1h	equ	0xFE2
  4169                           fsr1l	equ	0xFE1
  4170                           indf2	equ	0xFDF
  4171                           postinc2	equ	0xFDE
  4172                           postdec2	equ	0xFDD
  4173                           plusw2	equ	0xFDB
  4174                           fsr2h	equ	0xFDA
  4175                           fsr2l	equ	0xFD9
  4176                           status	equ	0xFD8
  4177                           
  4178 ;; *************** function _memset *****************
  4179 ;; Defined at:
  4180 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\memset.c"
  4181 ;; Parameters:    Size  Location     Type
  4182 ;;  p1              2   26[COMRAM] PTR void 
  4183 ;;		 -> output_buffer(106), input_buffer(106), 
  4184 ;;  c               2   28[COMRAM] int 
  4185 ;;  n               2   30[COMRAM] unsigned int 
  4186 ;; Auto vars:     Size  Location     Type
  4187 ;;  p               2   32[COMRAM] PTR unsigned char 
  4188 ;;		 -> output_buffer(106), input_buffer(106), 
  4189 ;; Return value:  Size  Location     Type
  4190 ;;                  2   26[COMRAM] PTR void 
  4191 ;; Registers used:
  4192 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4193 ;; Tracked objects:
  4194 ;;		On entry : 0/0
  4195 ;;		On exit  : 0/0
  4196 ;;		Unchanged: 0/0
  4197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4198 ;;      Params:         6       0       0       0       0       0       0
  4199 ;;      Locals:         2       0       0       0       0       0       0
  4200 ;;      Temps:          0       0       0       0       0       0       0
  4201 ;;      Totals:         8       0       0       0       0       0       0
  4202 ;;Total ram usage:        8 bytes
  4203 ;; Hardware stack levels used:    1
  4204 ;; Hardware stack levels required when called:    4
  4205 ;; This function calls:
  4206 ;;		Nothing
  4207 ;; This function is called by:
  4208 ;;		_UART_buff_init
  4209 ;;		_UART_buff_flush
  4210 ;; This function uses a non-reentrant model
  4211 ;;
  4212                           
  4213                           	psect	text24
  4214  000E8A                     __ptext24:
  4215                           	opt stack 0
  4216  000E8A                     _memset:
  4217                           	opt stack 22
  4218                           
  4219                           ;incstack = 0
  4220  000E8A  C01B  F021         	movff	memset@p1,memset@p
  4221  000E8E  C01C  F022         	movff	memset@p1+1,memset@p+1
  4222  000E92  D008               	goto	l1663
  4223  000E94                     l1659:
  4224  000E94  C021  FFD9         	movff	memset@p,fsr2l
  4225  000E98  C022  FFDA         	movff	memset@p+1,fsr2h
  4226  000E9C  C01D  FFDF         	movff	memset@c,indf2
  4227  000EA0  4A21               	infsnz	memset@p,f,c
  4228  000EA2  2A22               	incf	memset@p+1,f,c
  4229  000EA4                     l1663:
  4230  000EA4  061F               	decf	memset@n,f,c
  4231  000EA6  A0D8               	btfss	status,0,c
  4232  000EA8  0620               	decf	memset@n+1,f,c
  4233  000EAA  281F               	incf	memset@n,w,c
  4234  000EAC  E1F3               	bnz	l1659
  4235  000EAE  2820               	incf	memset@n+1,w,c
  4236  000EB0  B4D8               	btfsc	status,2,c
  4237  000EB2  0012               	return	
  4238  000EB4  D7EF               	goto	l1659
  4239  000EB6                     __end_of_memset:
  4240                           	opt stack 0
  4241                           tblptru	equ	0xFF8
  4242                           tblptrh	equ	0xFF7
  4243                           tblptrl	equ	0xFF6
  4244                           tablat	equ	0xFF5
  4245                           prodh	equ	0xFF4
  4246                           prodl	equ	0xFF3
  4247                           intcon	equ	0xFF2
  4248                           postinc0	equ	0xFEE
  4249                           wreg	equ	0xFE8
  4250                           indf1	equ	0xFE7
  4251                           postdec1	equ	0xFE5
  4252                           plusw1	equ	0xFE3
  4253                           fsr1h	equ	0xFE2
  4254                           fsr1l	equ	0xFE1
  4255                           indf2	equ	0xFDF
  4256                           postinc2	equ	0xFDE
  4257                           postdec2	equ	0xFDD
  4258                           plusw2	equ	0xFDB
  4259                           fsr2h	equ	0xFDA
  4260                           fsr2l	equ	0xFD9
  4261                           status	equ	0xFD8
  4262                           
  4263 ;; *************** function _SetTime *****************
  4264 ;; Defined at:
  4265 ;;		line 97 in file "tmr0.c"
  4266 ;; Parameters:    Size  Location     Type
  4267 ;;		None
  4268 ;; Auto vars:     Size  Location     Type
  4269 ;;		None
  4270 ;; Return value:  Size  Location     Type
  4271 ;;                  1    wreg      void 
  4272 ;; Registers used:
  4273 ;;		wreg, status,2
  4274 ;; Tracked objects:
  4275 ;;		On entry : 0/0
  4276 ;;		On exit  : 0/0
  4277 ;;		Unchanged: 0/0
  4278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4279 ;;      Params:         0       0       0       0       0       0       0
  4280 ;;      Locals:         0       0       0       0       0       0       0
  4281 ;;      Temps:          0       0       0       0       0       0       0
  4282 ;;      Totals:         0       0       0       0       0       0       0
  4283 ;;Total ram usage:        0 bytes
  4284 ;; Hardware stack levels used:    1
  4285 ;; Hardware stack levels required when called:    4
  4286 ;; This function calls:
  4287 ;;		Nothing
  4288 ;; This function is called by:
  4289 ;;		_main
  4290 ;; This function uses a non-reentrant model
  4291 ;;
  4292                           
  4293                           	psect	text25
  4294  000FD6                     __ptext25:
  4295                           	opt stack 0
  4296  000FD6                     _SetTime:
  4297                           	opt stack 26
  4298                           
  4299                           ;tmr0.c: 98: time = 0;
  4300                           
  4301                           ;incstack = 0
  4302  000FD6  0E00               	movlw	0
  4303  000FD8  6E2E               	movwf	_time,c
  4304  000FDA  0E00               	movlw	0
  4305  000FDC  6E2F               	movwf	_time+1,c
  4306  000FDE  0E00               	movlw	0
  4307  000FE0  6E30               	movwf	_time+2,c
  4308  000FE2  0E00               	movlw	0
  4309  000FE4  6E31               	movwf	_time+3,c
  4310  000FE6  0012               	return		;funcret
  4311  000FE8                     __end_of_SetTime:
  4312                           	opt stack 0
  4313                           tblptru	equ	0xFF8
  4314                           tblptrh	equ	0xFF7
  4315                           tblptrl	equ	0xFF6
  4316                           tablat	equ	0xFF5
  4317                           prodh	equ	0xFF4
  4318                           prodl	equ	0xFF3
  4319                           intcon	equ	0xFF2
  4320                           postinc0	equ	0xFEE
  4321                           wreg	equ	0xFE8
  4322                           indf1	equ	0xFE7
  4323                           postdec1	equ	0xFE5
  4324                           plusw1	equ	0xFE3
  4325                           fsr1h	equ	0xFE2
  4326                           fsr1l	equ	0xFE1
  4327                           indf2	equ	0xFDF
  4328                           postinc2	equ	0xFDE
  4329                           postdec2	equ	0xFDD
  4330                           plusw2	equ	0xFDB
  4331                           fsr2h	equ	0xFDA
  4332                           fsr2l	equ	0xFD9
  4333                           status	equ	0xFD8
  4334                           
  4335 ;; *************** function _ReadFaults *****************
  4336 ;; Defined at:
  4337 ;;		line 13 in file "Function.c"
  4338 ;; Parameters:    Size  Location     Type
  4339 ;;		None
  4340 ;; Auto vars:     Size  Location     Type
  4341 ;;  Data            4   35[COMRAM] unsigned char [4]
  4342 ;; Return value:  Size  Location     Type
  4343 ;;                  1    wreg      void 
  4344 ;; Registers used:
  4345 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4346 ;; Tracked objects:
  4347 ;;		On entry : 0/0
  4348 ;;		On exit  : 0/0
  4349 ;;		Unchanged: 0/0
  4350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4351 ;;      Params:         0       0       0       0       0       0       0
  4352 ;;      Locals:         4       0       0       0       0       0       0
  4353 ;;      Temps:          1       0       0       0       0       0       0
  4354 ;;      Totals:         5       0       0       0       0       0       0
  4355 ;;Total ram usage:        5 bytes
  4356 ;; Hardware stack levels used:    1
  4357 ;; Hardware stack levels required when called:    5
  4358 ;; This function calls:
  4359 ;;		_SetDataDict
  4360 ;; This function is called by:
  4361 ;;		_main
  4362 ;; This function uses a non-reentrant model
  4363 ;;
  4364                           
  4365                           	psect	text26
  4366  000C90                     __ptext26:
  4367                           	opt stack 0
  4368  000C90                     _ReadFaults:
  4369                           	opt stack 25
  4370                           
  4371                           ;Function.c: 22: ByteHigh = PORTCbits.RC2;
  4372                           
  4373                           ;incstack = 0
  4374  000C90  0E00               	movlw	0
  4375  000C92  B482               	btfsc	3970,2,c	;volatile
  4376  000C94  0E01               	movlw	1
  4377  000C96  6E3E               	movwf	_ByteHigh,c
  4378                           
  4379                           ;Function.c: 23: ByteLow = ByteLow | ((PORTCbits.RC2 & 0x01) << 0);
  4380  000C98  A482               	btfss	3970,2,c	;volatile
  4381  000C9A  D002               	goto	u1060
  4382  000C9C  0E01               	movlw	1
  4383  000C9E  D001               	goto	u1066
  4384  000CA0                     u1060:
  4385  000CA0  0E00               	movlw	0
  4386  000CA2                     u1066:
  4387  000CA2  103D               	iorwf	_ByteLow,w,c
  4388  000CA4  6E3D               	movwf	_ByteLow,c
  4389                           
  4390                           ;Function.c: 24: ByteLow = ByteLow | ((PORTAbits.RA7 & 0x01) << 1);
  4391  000CA6  AE80               	btfss	3968,7,c	;volatile
  4392  000CA8  D003               	goto	u1070
  4393  000CAA  6A23               	clrf	??_ReadFaults& (0+255),c
  4394  000CAC  2A23               	incf	??_ReadFaults& (0+255),f,c
  4395  000CAE  D001               	goto	u1078
  4396  000CB0                     u1070:
  4397  000CB0  6A23               	clrf	??_ReadFaults& (0+255),c
  4398  000CB2                     u1078:
  4399  000CB2  90D8               	bcf	status,0,c
  4400  000CB4  3423               	rlcf	??_ReadFaults,w,c
  4401  000CB6  103D               	iorwf	_ByteLow,w,c
  4402  000CB8  6E3D               	movwf	_ByteLow,c
  4403                           
  4404                           ;Function.c: 25: ByteLow = ByteLow | ((PORTCbits.RC0 & 0x01) << 2);
  4405  000CBA  A082               	btfss	3970,0,c	;volatile
  4406  000CBC  D003               	goto	u1080
  4407  000CBE  6A23               	clrf	??_ReadFaults& (0+255),c
  4408  000CC0  2A23               	incf	??_ReadFaults& (0+255),f,c
  4409  000CC2  D001               	goto	u1088
  4410  000CC4                     u1080:
  4411  000CC4  6A23               	clrf	??_ReadFaults& (0+255),c
  4412  000CC6                     u1088:
  4413  000CC6  90D8               	bcf	status,0,c
  4414  000CC8  3623               	rlcf	??_ReadFaults,f,c
  4415  000CCA  90D8               	bcf	status,0,c
  4416  000CCC  3423               	rlcf	??_ReadFaults,w,c
  4417  000CCE  103D               	iorwf	_ByteLow,w,c
  4418  000CD0  6E3D               	movwf	_ByteLow,c
  4419                           
  4420                           ;Function.c: 28: unsigned char Data[4];
  4421                           ;Function.c: 29: Data[0] = ByteHigh;
  4422  000CD2  C03E  F024         	movff	_ByteHigh,ReadFaults@Data
  4423                           
  4424                           ;Function.c: 30: Data[1] = ByteLow;
  4425  000CD6  C03D  F025         	movff	_ByteLow,ReadFaults@Data+1
  4426                           
  4427                           ;Function.c: 32: SetDataDict(1,0,Data,2);
  4428  000CDA  0E00               	movlw	0
  4429  000CDC  6E1B               	movwf	SetDataDict@DataTableIndex,c
  4430  000CDE  0E24               	movlw	low ReadFaults@Data
  4431  000CE0  6E1C               	movwf	SetDataDict@DataArray,c
  4432  000CE2  0E00               	movlw	high ReadFaults@Data
  4433  000CE4  6E1D               	movwf	SetDataDict@DataArray+1,c
  4434  000CE6  0E02               	movlw	2
  4435  000CE8  6E1E               	movwf	SetDataDict@numbofbytes,c
  4436  000CEA  0E01               	movlw	1
  4437  000CEC  EC29  F005         	call	_SetDataDict
  4438  000CF0  0012               	return		;funcret
  4439  000CF2                     __end_of_ReadFaults:
  4440                           	opt stack 0
  4441                           tblptru	equ	0xFF8
  4442                           tblptrh	equ	0xFF7
  4443                           tblptrl	equ	0xFF6
  4444                           tablat	equ	0xFF5
  4445                           prodh	equ	0xFF4
  4446                           prodl	equ	0xFF3
  4447                           intcon	equ	0xFF2
  4448                           postinc0	equ	0xFEE
  4449                           wreg	equ	0xFE8
  4450                           indf1	equ	0xFE7
  4451                           postdec1	equ	0xFE5
  4452                           plusw1	equ	0xFE3
  4453                           fsr1h	equ	0xFE2
  4454                           fsr1l	equ	0xFE1
  4455                           indf2	equ	0xFDF
  4456                           postinc2	equ	0xFDE
  4457                           postdec2	equ	0xFDD
  4458                           plusw2	equ	0xFDB
  4459                           fsr2h	equ	0xFDA
  4460                           fsr2l	equ	0xFD9
  4461                           status	equ	0xFD8
  4462                           
  4463 ;; *************** function _SetDataDict *****************
  4464 ;; Defined at:
  4465 ;;		line 34 in file "CarDataDictionary.c"
  4466 ;; Parameters:    Size  Location     Type
  4467 ;;  DataTable       1    wreg     unsigned char 
  4468 ;;  DataTableInd    1   26[COMRAM] unsigned char 
  4469 ;;  DataArray       2   27[COMRAM] PTR unsigned char 
  4470 ;;		 -> Start@Data(5), ReadFaults@Data(4), 
  4471 ;;  numbofbytes     1   29[COMRAM] unsigned char 
  4472 ;; Auto vars:     Size  Location     Type
  4473 ;;  DataTable       1   31[COMRAM] unsigned char 
  4474 ;;  ReturnCounte    1   33[COMRAM] unsigned char 
  4475 ;;  DataCount       1   32[COMRAM] unsigned char 
  4476 ;;  Error           1   30[COMRAM] unsigned char 
  4477 ;; Return value:  Size  Location     Type
  4478 ;;                  1    wreg      unsigned char 
  4479 ;; Registers used:
  4480 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4481 ;; Tracked objects:
  4482 ;;		On entry : 0/0
  4483 ;;		On exit  : 0/0
  4484 ;;		Unchanged: 0/0
  4485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4486 ;;      Params:         4       0       0       0       0       0       0
  4487 ;;      Locals:         4       0       0       0       0       0       0
  4488 ;;      Temps:          0       0       0       0       0       0       0
  4489 ;;      Totals:         8       0       0       0       0       0       0
  4490 ;;Total ram usage:        8 bytes
  4491 ;; Hardware stack levels used:    1
  4492 ;; Hardware stack levels required when called:    4
  4493 ;; This function calls:
  4494 ;;		Nothing
  4495 ;; This function is called by:
  4496 ;;		_ReadFaults
  4497 ;;		_Start
  4498 ;; This function uses a non-reentrant model
  4499 ;;
  4500                           
  4501                           	psect	text27
  4502  000A52                     __ptext27:
  4503                           	opt stack 0
  4504  000A52                     _SetDataDict:
  4505                           	opt stack 25
  4506                           
  4507                           ;incstack = 0
  4508                           ;SetDataDict@DataTable stored from wreg
  4509  000A52  6E20               	movwf	SetDataDict@DataTable,c
  4510                           
  4511                           ;CarDataDictionary.c: 35: unsigned char Error = 0;
  4512  000A54  0E00               	movlw	0
  4513  000A56  6E1F               	movwf	SetDataDict@Error,c
  4514                           
  4515                           ;CarDataDictionary.c: 36: unsigned char DataCount = 0;
  4516  000A58  0E00               	movlw	0
  4517  000A5A  6E21               	movwf	SetDataDict@DataCount,c
  4518                           
  4519                           ;CarDataDictionary.c: 37: unsigned char ReturnCounter = 0;
  4520  000A5C  0E00               	movlw	0
  4521  000A5E  6E22               	movwf	SetDataDict@ReturnCounter,c
  4522                           
  4523                           ;CarDataDictionary.c: 38: switch(DataTable){
  4524  000A60  D03C               	goto	l2033
  4525  000A62                     l2013:
  4526                           
  4527                           ;CarDataDictionary.c: 40: DataCount = DataTableIndex + numbofbytes;
  4528  000A62  501B               	movf	SetDataDict@DataTableIndex,w,c
  4529  000A64  241E               	addwf	SetDataDict@numbofbytes,w,c
  4530  000A66  6E21               	movwf	SetDataDict@DataCount,c
  4531  000A68  D014               	goto	l2021
  4532  000A6A                     l2015:
  4533                           
  4534                           ;CarDataDictionary.c: 42: DataTableArrayOne[DataTableIndex] = DataArray[ReturnCounter];
  4535  000A6A  5022               	movf	SetDataDict@ReturnCounter,w,c
  4536  000A6C  0D01               	mullw	1
  4537  000A6E  50F3               	movf	prodl,w,c
  4538  000A70  241C               	addwf	SetDataDict@DataArray,w,c
  4539  000A72  6ED9               	movwf	fsr2l,c
  4540  000A74  50F4               	movf	prodh,w,c
  4541  000A76  201D               	addwfc	SetDataDict@DataArray+1,w,c
  4542  000A78  6EDA               	movwf	fsr2h,c
  4543  000A7A  501B               	movf	SetDataDict@DataTableIndex,w,c
  4544  000A7C  0D01               	mullw	1
  4545  000A7E  0EC9               	movlw	low _DataTableArrayOne
  4546  000A80  24F3               	addwf	prodl,w,c
  4547  000A82  6EE1               	movwf	fsr1l,c
  4548  000A84  0E00               	movlw	high _DataTableArrayOne
  4549  000A86  20F4               	addwfc	prodh,w,c
  4550  000A88  6EE2               	movwf	fsr1h,c
  4551  000A8A  CFDF FFE7          	movff	indf2,indf1
  4552                           
  4553                           ;CarDataDictionary.c: 43: ReturnCounter++;
  4554  000A8E  2A22               	incf	SetDataDict@ReturnCounter,f,c
  4555  000A90  2A1B               	incf	SetDataDict@DataTableIndex,f,c
  4556  000A92                     l2021:
  4557  000A92  5021               	movf	SetDataDict@DataCount,w,c
  4558  000A94  5C1B               	subwf	SetDataDict@DataTableIndex,w,c
  4559  000A96  B0D8               	btfsc	status,0,c
  4560  000A98  0012               	return	
  4561  000A9A  D7E7               	goto	l2015
  4562  000A9C                     l2023:
  4563                           
  4564                           ;CarDataDictionary.c: 47: DataCount = DataTableIndex + numbofbytes;
  4565  000A9C  501B               	movf	SetDataDict@DataTableIndex,w,c
  4566  000A9E  241E               	addwf	SetDataDict@numbofbytes,w,c
  4567  000AA0  6E21               	movwf	SetDataDict@DataCount,c
  4568  000AA2  D014               	goto	l2031
  4569  000AA4                     l2025:
  4570                           
  4571                           ;CarDataDictionary.c: 49: DataTableArrayTwo[DataTableIndex] = DataArray[ReturnCounter];
  4572  000AA4  5022               	movf	SetDataDict@ReturnCounter,w,c
  4573  000AA6  0D01               	mullw	1
  4574  000AA8  50F3               	movf	prodl,w,c
  4575  000AAA  241C               	addwf	SetDataDict@DataArray,w,c
  4576  000AAC  6ED9               	movwf	fsr2l,c
  4577  000AAE  50F4               	movf	prodh,w,c
  4578  000AB0  201D               	addwfc	SetDataDict@DataArray+1,w,c
  4579  000AB2  6EDA               	movwf	fsr2h,c
  4580  000AB4  501B               	movf	SetDataDict@DataTableIndex,w,c
  4581  000AB6  0D01               	mullw	1
  4582  000AB8  0E32               	movlw	low _DataTableArrayTwo
  4583  000ABA  24F3               	addwf	prodl,w,c
  4584  000ABC  6EE1               	movwf	fsr1l,c
  4585  000ABE  0E00               	movlw	high _DataTableArrayTwo
  4586  000AC0  20F4               	addwfc	prodh,w,c
  4587  000AC2  6EE2               	movwf	fsr1h,c
  4588  000AC4  CFDF FFE7          	movff	indf2,indf1
  4589                           
  4590                           ;CarDataDictionary.c: 50: ReturnCounter++;
  4591  000AC8  2A22               	incf	SetDataDict@ReturnCounter,f,c
  4592  000ACA  2A1B               	incf	SetDataDict@DataTableIndex,f,c
  4593  000ACC                     l2031:
  4594  000ACC  5021               	movf	SetDataDict@DataCount,w,c
  4595  000ACE  5C1B               	subwf	SetDataDict@DataTableIndex,w,c
  4596  000AD0  B0D8               	btfsc	status,0,c
  4597  000AD2  0012               	return	
  4598  000AD4  D7E7               	goto	l2025
  4599  000AD6                     l348:
  4600                           
  4601                           ;CarDataDictionary.c: 54: Error = -1;
  4602  000AD6  681F               	setf	SetDataDict@Error,c
  4603                           
  4604                           ;CarDataDictionary.c: 55: }
  4605  000AD8  0012               	return	
  4606  000ADA                     l2033:
  4607  000ADA  5020               	movf	SetDataDict@DataTable,w,c
  4608                           
  4609                           ; Switch size 1, requested type "space"
  4610                           ; Number of cases is 2, Range of values is 0 to 1
  4611                           ; switch strategies available:
  4612                           ; Name         Instructions Cycles
  4613                           ; simple_byte            7     4 (average)
  4614                           ;	Chosen strategy is simple_byte
  4615  000ADC  0A00               	xorlw	0	; case 0
  4616  000ADE  B4D8               	btfsc	status,2,c
  4617  000AE0  D7C0               	goto	l2013
  4618  000AE2  0A01               	xorlw	1	; case 1
  4619  000AE4  B4D8               	btfsc	status,2,c
  4620  000AE6  D7DA               	goto	l2023
  4621  000AE8  D7F6               	goto	l348
  4622  000AEA                     __end_of_SetDataDict:
  4623                           	opt stack 0
  4624                           tblptru	equ	0xFF8
  4625                           tblptrh	equ	0xFF7
  4626                           tblptrl	equ	0xFF6
  4627                           tablat	equ	0xFF5
  4628                           prodh	equ	0xFF4
  4629                           prodl	equ	0xFF3
  4630                           intcon	equ	0xFF2
  4631                           postinc0	equ	0xFEE
  4632                           wreg	equ	0xFE8
  4633                           indf1	equ	0xFE7
  4634                           postdec1	equ	0xFE5
  4635                           plusw1	equ	0xFE3
  4636                           fsr1h	equ	0xFE2
  4637                           fsr1l	equ	0xFE1
  4638                           indf2	equ	0xFDF
  4639                           postinc2	equ	0xFDE
  4640                           postdec2	equ	0xFDD
  4641                           plusw2	equ	0xFDB
  4642                           fsr2h	equ	0xFDA
  4643                           fsr2l	equ	0xFD9
  4644                           status	equ	0xFD8
  4645                           
  4646 ;; *************** function _GetTime *****************
  4647 ;; Defined at:
  4648 ;;		line 93 in file "tmr0.c"
  4649 ;; Parameters:    Size  Location     Type
  4650 ;;		None
  4651 ;; Auto vars:     Size  Location     Type
  4652 ;;		None
  4653 ;; Return value:  Size  Location     Type
  4654 ;;                  4   26[COMRAM] long 
  4655 ;; Registers used:
  4656 ;;		None
  4657 ;; Tracked objects:
  4658 ;;		On entry : 0/0
  4659 ;;		On exit  : 0/0
  4660 ;;		Unchanged: 0/0
  4661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4662 ;;      Params:         4       0       0       0       0       0       0
  4663 ;;      Locals:         0       0       0       0       0       0       0
  4664 ;;      Temps:          0       0       0       0       0       0       0
  4665 ;;      Totals:         4       0       0       0       0       0       0
  4666 ;;Total ram usage:        4 bytes
  4667 ;; Hardware stack levels used:    1
  4668 ;; Hardware stack levels required when called:    4
  4669 ;; This function calls:
  4670 ;;		Nothing
  4671 ;; This function is called by:
  4672 ;;		_main
  4673 ;; This function uses a non-reentrant model
  4674 ;;
  4675                           
  4676                           	psect	text28
  4677  000FE8                     __ptext28:
  4678                           	opt stack 0
  4679  000FE8                     _GetTime:
  4680                           	opt stack 26
  4681                           
  4682                           ;tmr0.c: 94: return time;
  4683                           
  4684                           ;incstack = 0
  4685  000FE8  C02E  F01B         	movff	_time,?_GetTime
  4686  000FEC  C02F  F01C         	movff	_time+1,?_GetTime+1
  4687  000FF0  C030  F01D         	movff	_time+2,?_GetTime+2
  4688  000FF4  C031  F01E         	movff	_time+3,?_GetTime+3
  4689  000FF8  0012               	return		;funcret
  4690  000FFA                     __end_of_GetTime:
  4691                           	opt stack 0
  4692                           tblptru	equ	0xFF8
  4693                           tblptrh	equ	0xFF7
  4694                           tblptrl	equ	0xFF6
  4695                           tablat	equ	0xFF5
  4696                           prodh	equ	0xFF4
  4697                           prodl	equ	0xFF3
  4698                           intcon	equ	0xFF2
  4699                           postinc0	equ	0xFEE
  4700                           wreg	equ	0xFE8
  4701                           indf1	equ	0xFE7
  4702                           postdec1	equ	0xFE5
  4703                           plusw1	equ	0xFE3
  4704                           fsr1h	equ	0xFE2
  4705                           fsr1l	equ	0xFE1
  4706                           indf2	equ	0xFDF
  4707                           postinc2	equ	0xFDE
  4708                           postdec2	equ	0xFDD
  4709                           plusw2	equ	0xFDB
  4710                           fsr2h	equ	0xFDA
  4711                           fsr2l	equ	0xFD9
  4712                           status	equ	0xFD8
  4713                           
  4714 ;; *************** function _INTERRUPT_InterruptManager *****************
  4715 ;; Defined at:
  4716 ;;		line 189 in file "Function.c"
  4717 ;; Parameters:    Size  Location     Type
  4718 ;;		None
  4719 ;; Auto vars:     Size  Location     Type
  4720 ;;		None
  4721 ;; Return value:  Size  Location     Type
  4722 ;;                  1    wreg      void 
  4723 ;; Registers used:
  4724 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4725 ;; Tracked objects:
  4726 ;;		On entry : 0/0
  4727 ;;		On exit  : 0/0
  4728 ;;		Unchanged: 0/0
  4729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4730 ;;      Params:         0       0       0       0       0       0       0
  4731 ;;      Locals:         0       0       0       0       0       0       0
  4732 ;;      Temps:         14       0       0       0       0       0       0
  4733 ;;      Totals:        14       0       0       0       0       0       0
  4734 ;;Total ram usage:       14 bytes
  4735 ;; Hardware stack levels used:    1
  4736 ;; Hardware stack levels required when called:    3
  4737 ;; This function calls:
  4738 ;;		_EUSART1_Receive_ISR
  4739 ;;		_EUSART1_Transmit_ISR
  4740 ;;		_TMR0_ISR
  4741 ;; This function is called by:
  4742 ;;		Interrupt level 2
  4743 ;; This function uses a non-reentrant model
  4744 ;;
  4745                           
  4746                           	psect	intcode
  4747  000008                     __pintcode:
  4748                           	opt stack 0
  4749  000008                     _INTERRUPT_InterruptManager:
  4750                           	opt stack 20
  4751                           
  4752                           ;incstack = 0
  4753  000008  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4754  00000A  CFFA F00D          	movff	pclath,??_INTERRUPT_InterruptManager
  4755  00000E  CFFB F00E          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  4756  000012  CFE9 F00F          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  4757  000016  CFEA F010          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  4758  00001A  CFE1 F011          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  4759  00001E  CFE2 F012          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  4760  000022  CFD9 F013          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  4761  000026  CFDA F014          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  4762  00002A  CFF3 F015          	movff	prodl,??_INTERRUPT_InterruptManager+8
  4763  00002E  CFF4 F016          	movff	prodh,??_INTERRUPT_InterruptManager+9
  4764  000032  CFF6 F017          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  4765  000036  CFF7 F018          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  4766  00003A  CFF8 F019          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  4767  00003E  CFF5 F01A          	movff	tablat,??_INTERRUPT_InterruptManager+13
  4768                           
  4769                           ;Function.c: 192: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  4770  000042  BA9D               	btfsc	3997,5,c	;volatile
  4771  000044  AA9E               	btfss	3998,5,c	;volatile
  4772  000046  D003               	goto	i2l260
  4773                           
  4774                           ;Function.c: 193: {
  4775                           ;Function.c: 194: EUSART1_Receive_ISR();
  4776  000048  ECA3  F007         	call	_EUSART1_Receive_ISR	;wreg free
  4777                           
  4778                           ;Function.c: 195: }
  4779  00004C  D00B               	goto	i2l266
  4780  00004E                     i2l260:
  4781                           
  4782                           ;Function.c: 196: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  4783  00004E  B89D               	btfsc	3997,4,c	;volatile
  4784  000050  A89E               	btfss	3998,4,c	;volatile
  4785  000052  D003               	goto	i2l262
  4786                           
  4787                           ;Function.c: 197: {
  4788                           ;Function.c: 198: EUSART1_Transmit_ISR();
  4789  000054  ECFF  F006         	call	_EUSART1_Transmit_ISR	;wreg free
  4790                           
  4791                           ;Function.c: 199: }
  4792  000058  D005               	goto	i2l266
  4793  00005A                     i2l262:
  4794                           
  4795                           ;Function.c: 200: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  4796  00005A  BAF2               	btfsc	intcon,5,c	;volatile
  4797  00005C  A4F2               	btfss	intcon,2,c	;volatile
  4798  00005E  D002               	goto	i2l266
  4799                           
  4800                           ;Function.c: 201: {
  4801                           ;Function.c: 202: TMR0_ISR();
  4802  000060  ECBE  F007         	call	_TMR0_ISR	;wreg free
  4803  000064                     i2l266:
  4804  000064  C01A  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  4805  000068  C019  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  4806  00006C  C018  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  4807  000070  C017  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  4808  000074  C016  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  4809  000078  C015  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  4810  00007C  C014  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  4811  000080  C013  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  4812  000084  C012  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  4813  000088  C011  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  4814  00008C  C010  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  4815  000090  C00F  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  4816  000094  C00E  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  4817  000098  C00D  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  4818  00009C  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4819  00009E  0011               	retfie		f
  4820  0000A0                     __end_of_INTERRUPT_InterruptManager:
  4821                           	opt stack 0
  4822                           pclatu	equ	0xFFB
  4823                           pclath	equ	0xFFA
  4824                           tblptru	equ	0xFF8
  4825                           tblptrh	equ	0xFF7
  4826                           tblptrl	equ	0xFF6
  4827                           tablat	equ	0xFF5
  4828                           prodh	equ	0xFF4
  4829                           prodl	equ	0xFF3
  4830                           intcon	equ	0xFF2
  4831                           postinc0	equ	0xFEE
  4832                           fsr0h	equ	0xFEA
  4833                           fsr0l	equ	0xFE9
  4834                           wreg	equ	0xFE8
  4835                           indf1	equ	0xFE7
  4836                           postdec1	equ	0xFE5
  4837                           plusw1	equ	0xFE3
  4838                           fsr1h	equ	0xFE2
  4839                           fsr1l	equ	0xFE1
  4840                           indf2	equ	0xFDF
  4841                           postinc2	equ	0xFDE
  4842                           postdec2	equ	0xFDD
  4843                           plusw2	equ	0xFDB
  4844                           fsr2h	equ	0xFDA
  4845                           fsr2l	equ	0xFD9
  4846                           status	equ	0xFD8
  4847                           
  4848 ;; *************** function _TMR0_ISR *****************
  4849 ;; Defined at:
  4850 ;;		line 82 in file "tmr0.c"
  4851 ;; Parameters:    Size  Location     Type
  4852 ;;		None
  4853 ;; Auto vars:     Size  Location     Type
  4854 ;;		None
  4855 ;; Return value:  Size  Location     Type
  4856 ;;                  1    wreg      void 
  4857 ;; Registers used:
  4858 ;;		wreg, status,2, status,0
  4859 ;; Tracked objects:
  4860 ;;		On entry : 0/0
  4861 ;;		On exit  : 0/0
  4862 ;;		Unchanged: 0/0
  4863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4864 ;;      Params:         0       0       0       0       0       0       0
  4865 ;;      Locals:         0       0       0       0       0       0       0
  4866 ;;      Temps:          0       0       0       0       0       0       0
  4867 ;;      Totals:         0       0       0       0       0       0       0
  4868 ;;Total ram usage:        0 bytes
  4869 ;; Hardware stack levels used:    1
  4870 ;; This function calls:
  4871 ;;		Nothing
  4872 ;; This function is called by:
  4873 ;;		_INTERRUPT_InterruptManager
  4874 ;; This function uses a non-reentrant model
  4875 ;;
  4876                           
  4877                           	psect	text30
  4878  000F7C                     __ptext30:
  4879                           	opt stack 0
  4880  000F7C                     _TMR0_ISR:
  4881                           	opt stack 22
  4882                           
  4883                           ;tmr0.c: 85: TMR0H = timer0ReloadVal16bit >> 8;
  4884                           
  4885                           ;incstack = 0
  4886  000F7C  503C               	movf	_timer0ReloadVal16bit+1,w,c	;volatile
  4887  000F7E  6ED7               	movwf	4055,c	;volatile
  4888                           
  4889                           ;tmr0.c: 86: TMR0L = (uint8_t) timer0ReloadVal16bit;
  4890  000F80  C03B  FFD6         	movff	_timer0ReloadVal16bit,4054	;volatile
  4891                           
  4892                           ;tmr0.c: 88: time++;
  4893  000F84  0E01               	movlw	1
  4894  000F86  262E               	addwf	_time,f,c
  4895  000F88  0E00               	movlw	0
  4896  000F8A  222F               	addwfc	_time+1,f,c
  4897  000F8C  2230               	addwfc	_time+2,f,c
  4898  000F8E  2231               	addwfc	_time+3,f,c
  4899                           
  4900                           ;tmr0.c: 90: INTCONbits.TMR0IF = 0;
  4901  000F90  94F2               	bcf	intcon,2,c	;volatile
  4902  000F92  0012               	return		;funcret
  4903  000F94                     __end_of_TMR0_ISR:
  4904                           	opt stack 0
  4905                           pclatu	equ	0xFFB
  4906                           pclath	equ	0xFFA
  4907                           tblptru	equ	0xFF8
  4908                           tblptrh	equ	0xFF7
  4909                           tblptrl	equ	0xFF6
  4910                           tablat	equ	0xFF5
  4911                           prodh	equ	0xFF4
  4912                           prodl	equ	0xFF3
  4913                           intcon	equ	0xFF2
  4914                           postinc0	equ	0xFEE
  4915                           fsr0h	equ	0xFEA
  4916                           fsr0l	equ	0xFE9
  4917                           wreg	equ	0xFE8
  4918                           indf1	equ	0xFE7
  4919                           postdec1	equ	0xFE5
  4920                           plusw1	equ	0xFE3
  4921                           fsr1h	equ	0xFE2
  4922                           fsr1l	equ	0xFE1
  4923                           indf2	equ	0xFDF
  4924                           postinc2	equ	0xFDE
  4925                           postdec2	equ	0xFDD
  4926                           plusw2	equ	0xFDB
  4927                           fsr2h	equ	0xFDA
  4928                           fsr2l	equ	0xFD9
  4929                           status	equ	0xFD8
  4930                           
  4931 ;; *************** function _EUSART1_Transmit_ISR *****************
  4932 ;; Defined at:
  4933 ;;		line 149 in file "UART.c"
  4934 ;; Parameters:    Size  Location     Type
  4935 ;;		None
  4936 ;; Auto vars:     Size  Location     Type
  4937 ;;		None
  4938 ;; Return value:  Size  Location     Type
  4939 ;;                  1    wreg      void 
  4940 ;; Registers used:
  4941 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4942 ;; Tracked objects:
  4943 ;;		On entry : 0/0
  4944 ;;		On exit  : 0/0
  4945 ;;		Unchanged: 0/0
  4946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4947 ;;      Params:         0       0       0       0       0       0       0
  4948 ;;      Locals:         0       0       0       0       0       0       0
  4949 ;;      Temps:          0       0       0       0       0       0       0
  4950 ;;      Totals:         0       0       0       0       0       0       0
  4951 ;;Total ram usage:        0 bytes
  4952 ;; Hardware stack levels used:    1
  4953 ;; Hardware stack levels required when called:    2
  4954 ;; This function calls:
  4955 ;;		i2_UART_buff_get
  4956 ;;		i2_UART_buff_size
  4957 ;; This function is called by:
  4958 ;;		_INTERRUPT_InterruptManager
  4959 ;; This function uses a non-reentrant model
  4960 ;;
  4961                           
  4962                           	psect	text31
  4963  000DFE                     __ptext31:
  4964                           	opt stack 0
  4965  000DFE                     _EUSART1_Transmit_ISR:
  4966                           	opt stack 20
  4967                           
  4968                           ;UART.c: 151: if (UART_buff_size(&output_buffer) > 0) {
  4969                           
  4970                           ;incstack = 0
  4971  000DFE  0E00               	movlw	low _output_buffer
  4972  000E00  6E01               	movwf	i2UART_buff_size@_this,c
  4973  000E02  0E01               	movlw	high _output_buffer
  4974  000E04  6E02               	movwf	i2UART_buff_size@_this+1,c
  4975  000E06  ECE0  F007         	call	i2_UART_buff_size	;wreg free
  4976  000E0A  BE02               	btfsc	?i2_UART_buff_size+1,7,c
  4977  000E0C  D00D               	goto	i2l2111
  4978  000E0E  5002               	movf	?i2_UART_buff_size+1,w,c
  4979  000E10  E103               	bnz	i2u110_40
  4980  000E12  0401               	decf	?i2_UART_buff_size,w,c
  4981  000E14  A0D8               	btfss	status,0,c
  4982  000E16  D008               	goto	i2l2111
  4983  000E18                     i2u110_40:
  4984                           
  4985                           ;UART.c: 152: TXREG1 = UART_buff_get(&output_buffer);
  4986  000E18  0E00               	movlw	low _output_buffer
  4987  000E1A  6E07               	movwf	i2UART_buff_get@_this,c
  4988  000E1C  0E01               	movlw	high _output_buffer
  4989  000E1E  6E08               	movwf	i2UART_buff_get@_this+1,c
  4990  000E20  ECBE  F005         	call	i2_UART_buff_get	;wreg free
  4991  000E24  6EAD               	movwf	4013,c	;volatile
  4992                           
  4993                           ;UART.c: 153: } else {
  4994  000E26  0012               	return	
  4995  000E28                     i2l2111:
  4996                           
  4997                           ;UART.c: 154: Transmit_stall = 1;
  4998  000E28  0E01               	movlw	1
  4999  000E2A  6E44               	movwf	_Transmit_stall,c
  5000                           
  5001                           ;UART.c: 155: PIE1bits.TX1IE = 0;
  5002  000E2C  989D               	bcf	3997,4,c	;volatile
  5003  000E2E  0012               	return	
  5004  000E30                     __end_of_EUSART1_Transmit_ISR:
  5005                           	opt stack 0
  5006                           pclatu	equ	0xFFB
  5007                           pclath	equ	0xFFA
  5008                           tblptru	equ	0xFF8
  5009                           tblptrh	equ	0xFF7
  5010                           tblptrl	equ	0xFF6
  5011                           tablat	equ	0xFF5
  5012                           prodh	equ	0xFF4
  5013                           prodl	equ	0xFF3
  5014                           intcon	equ	0xFF2
  5015                           postinc0	equ	0xFEE
  5016                           fsr0h	equ	0xFEA
  5017                           fsr0l	equ	0xFE9
  5018                           wreg	equ	0xFE8
  5019                           indf1	equ	0xFE7
  5020                           postdec1	equ	0xFE5
  5021                           plusw1	equ	0xFE3
  5022                           fsr1h	equ	0xFE2
  5023                           fsr1l	equ	0xFE1
  5024                           indf2	equ	0xFDF
  5025                           postinc2	equ	0xFDE
  5026                           postdec2	equ	0xFDD
  5027                           plusw2	equ	0xFDB
  5028                           fsr2h	equ	0xFDA
  5029                           fsr2l	equ	0xFD9
  5030                           status	equ	0xFD8
  5031                           
  5032 ;; *************** function i2_UART_buff_size *****************
  5033 ;; Defined at:
  5034 ;;		line 101 in file "UART.c"
  5035 ;; Parameters:    Size  Location     Type
  5036 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
  5037 ;;		 -> output_buffer(106), input_buffer(106), 
  5038 ;; Auto vars:     Size  Location     Type
  5039 ;;		None
  5040 ;; Return value:  Size  Location     Type
  5041 ;;                  2    0[COMRAM] int 
  5042 ;; Registers used:
  5043 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5044 ;; Tracked objects:
  5045 ;;		On entry : 0/0
  5046 ;;		On exit  : 0/0
  5047 ;;		Unchanged: 0/0
  5048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5049 ;;      Params:         2       0       0       0       0       0       0
  5050 ;;      Locals:         0       0       0       0       0       0       0
  5051 ;;      Temps:          0       0       0       0       0       0       0
  5052 ;;      Totals:         2       0       0       0       0       0       0
  5053 ;;Total ram usage:        2 bytes
  5054 ;; Hardware stack levels used:    1
  5055 ;; This function calls:
  5056 ;;		Nothing
  5057 ;; This function is called by:
  5058 ;;		_EUSART1_Transmit_ISR
  5059 ;; This function uses a non-reentrant model
  5060 ;;
  5061                           
  5062                           	psect	text32
  5063  000FC0                     __ptext32:
  5064                           	opt stack 0
  5065  000FC0                     i2_UART_buff_size:
  5066                           	opt stack 21
  5067                           
  5068                           ;UART.c: 102: return (_this->count);
  5069                           
  5070                           ;incstack = 0
  5071  000FC0  EE20 F068          	lfsr	2,104
  5072  000FC4  5001               	movf	i2UART_buff_size@_this,w,c
  5073  000FC6  26D9               	addwf	fsr2l,f,c
  5074  000FC8  5002               	movf	i2UART_buff_size@_this+1,w,c
  5075  000FCA  22DA               	addwfc	fsr2h,f,c
  5076  000FCC  CFDE F001          	movff	postinc2,?i2_UART_buff_size
  5077  000FD0  CFDD F002          	movff	postdec2,?i2_UART_buff_size+1
  5078  000FD4  0012               	return	
  5079  000FD6                     __end_ofi2_UART_buff_size:
  5080                           	opt stack 0
  5081                           pclatu	equ	0xFFB
  5082                           pclath	equ	0xFFA
  5083                           tblptru	equ	0xFF8
  5084                           tblptrh	equ	0xFF7
  5085                           tblptrl	equ	0xFF6
  5086                           tablat	equ	0xFF5
  5087                           prodh	equ	0xFF4
  5088                           prodl	equ	0xFF3
  5089                           intcon	equ	0xFF2
  5090                           postinc0	equ	0xFEE
  5091                           fsr0h	equ	0xFEA
  5092                           fsr0l	equ	0xFE9
  5093                           wreg	equ	0xFE8
  5094                           indf1	equ	0xFE7
  5095                           postdec1	equ	0xFE5
  5096                           plusw1	equ	0xFE3
  5097                           fsr1h	equ	0xFE2
  5098                           fsr1l	equ	0xFE1
  5099                           indf2	equ	0xFDF
  5100                           postinc2	equ	0xFDE
  5101                           postdec2	equ	0xFDD
  5102                           plusw2	equ	0xFDB
  5103                           fsr2h	equ	0xFDA
  5104                           fsr2l	equ	0xFD9
  5105                           status	equ	0xFD8
  5106                           
  5107 ;; *************** function i2_UART_buff_get *****************
  5108 ;; Defined at:
  5109 ;;		line 80 in file "UART.c"
  5110 ;; Parameters:    Size  Location     Type
  5111 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  5112 ;;		 -> output_buffer(106), input_buffer(106), 
  5113 ;; Auto vars:     Size  Location     Type
  5114 ;;  UART_buff_ge    1   10[COMRAM] unsigned char 
  5115 ;; Return value:  Size  Location     Type
  5116 ;;                  1    wreg      unsigned char 
  5117 ;; Registers used:
  5118 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5119 ;; Tracked objects:
  5120 ;;		On entry : 0/0
  5121 ;;		On exit  : 0/0
  5122 ;;		Unchanged: 0/0
  5123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5124 ;;      Params:         2       0       0       0       0       0       0
  5125 ;;      Locals:         1       0       0       0       0       0       0
  5126 ;;      Temps:          2       0       0       0       0       0       0
  5127 ;;      Totals:         5       0       0       0       0       0       0
  5128 ;;Total ram usage:        5 bytes
  5129 ;; Hardware stack levels used:    1
  5130 ;; Hardware stack levels required when called:    1
  5131 ;; This function calls:
  5132 ;;		i2_UART_buff_modulo_inc
  5133 ;; This function is called by:
  5134 ;;		_EUSART1_Transmit_ISR
  5135 ;; This function uses a non-reentrant model
  5136 ;;
  5137                           
  5138                           	psect	text33
  5139  000B7C                     __ptext33:
  5140                           	opt stack 0
  5141  000B7C                     i2_UART_buff_get:
  5142                           	opt stack 20
  5143                           
  5144                           ;UART.c: 81: unsigned char c;
  5145                           ;UART.c: 82: if (_this->count > 0) {
  5146                           
  5147                           ;incstack = 0
  5148  000B7C  EE20 F068          	lfsr	2,104
  5149  000B80  5007               	movf	i2UART_buff_get@_this,w,c
  5150  000B82  26D9               	addwf	fsr2l,f,c
  5151  000B84  5008               	movf	i2UART_buff_get@_this+1,w,c
  5152  000B86  22DA               	addwfc	fsr2h,f,c
  5153  000B88  0E01               	movlw	1
  5154  000B8A  BEDB               	btfsc	plusw2,7,c
  5155  000B8C  D03C               	goto	i2l2057
  5156  000B8E  0E01               	movlw	1
  5157  000B90  50DB               	movf	plusw2,w,c
  5158  000B92  E103               	bnz	i2u104_40
  5159  000B94  04DE               	decf	postinc2,w,c
  5160  000B96  A0D8               	btfss	status,0,c
  5161  000B98  D036               	goto	i2l2057
  5162  000B9A                     i2u104_40:
  5163                           
  5164                           ;UART.c: 83: c = _this->buf[_this->tail];
  5165  000B9A  EE20 F066          	lfsr	2,102
  5166  000B9E  5007               	movf	i2UART_buff_get@_this,w,c
  5167  000BA0  26D9               	addwf	fsr2l,f,c
  5168  000BA2  5008               	movf	i2UART_buff_get@_this+1,w,c
  5169  000BA4  22DA               	addwfc	fsr2h,f,c
  5170  000BA6  CFDE F009          	movff	postinc2,??i2_UART_buff_get
  5171  000BAA  CFDD F00A          	movff	postdec2,??i2_UART_buff_get+1
  5172  000BAE  5009               	movf	??i2_UART_buff_get,w,c
  5173  000BB0  2407               	addwf	i2UART_buff_get@_this,w,c
  5174  000BB2  6ED9               	movwf	fsr2l,c
  5175  000BB4  500A               	movf	??i2_UART_buff_get+1,w,c
  5176  000BB6  2008               	addwfc	i2UART_buff_get@_this+1,w,c
  5177  000BB8  6EDA               	movwf	fsr2h,c
  5178  000BBA  50DF               	movf	indf2,w,c
  5179  000BBC  6E0B               	movwf	i2UART_buff_get@c,c
  5180                           
  5181                           ;UART.c: 84: _this->tail = UART_buff_modulo_inc(_this->tail, 100);
  5182  000BBE  EE20 F066          	lfsr	2,102
  5183  000BC2  5007               	movf	i2UART_buff_get@_this,w,c
  5184  000BC4  26D9               	addwf	fsr2l,f,c
  5185  000BC6  5008               	movf	i2UART_buff_get@_this+1,w,c
  5186  000BC8  22DA               	addwfc	fsr2h,f,c
  5187  000BCA  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  5188  000BCE  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  5189  000BD2  0E00               	movlw	0
  5190  000BD4  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  5191  000BD6  0E64               	movlw	100
  5192  000BD8  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  5193  000BDA  EC70  F007         	call	i2_UART_buff_modulo_inc	;wreg free
  5194  000BDE  EE20 F066          	lfsr	2,102
  5195  000BE2  5007               	movf	i2UART_buff_get@_this,w,c
  5196  000BE4  26D9               	addwf	fsr2l,f,c
  5197  000BE6  5008               	movf	i2UART_buff_get@_this+1,w,c
  5198  000BE8  22DA               	addwfc	fsr2h,f,c
  5199  000BEA  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  5200  000BEE  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  5201                           
  5202                           ;UART.c: 85: --_this->count;
  5203  000BF2  EE20 F068          	lfsr	2,104
  5204  000BF6  5007               	movf	i2UART_buff_get@_this,w,c
  5205  000BF8  26D9               	addwf	fsr2l,f,c
  5206  000BFA  5008               	movf	i2UART_buff_get@_this+1,w,c
  5207  000BFC  22DA               	addwfc	fsr2h,f,c
  5208  000BFE  06DE               	decf	postinc2,f,c
  5209  000C00  0E00               	movlw	0
  5210  000C02  5ADD               	subwfb	postdec2,f,c
  5211                           
  5212                           ;UART.c: 86: } else {
  5213  000C04  D002               	goto	i2l85
  5214  000C06                     i2l2057:
  5215                           
  5216                           ;UART.c: 87: c = 0;
  5217  000C06  0E00               	movlw	0
  5218  000C08  6E0B               	movwf	i2UART_buff_get@c,c
  5219  000C0A                     i2l85:
  5220                           
  5221                           ;UART.c: 88: }
  5222                           ;UART.c: 89: return (c);
  5223  000C0A  500B               	movf	i2UART_buff_get@c,w,c
  5224  000C0C  0012               	return	
  5225  000C0E                     __end_ofi2_UART_buff_get:
  5226                           	opt stack 0
  5227                           pclatu	equ	0xFFB
  5228                           pclath	equ	0xFFA
  5229                           tblptru	equ	0xFF8
  5230                           tblptrh	equ	0xFF7
  5231                           tblptrl	equ	0xFF6
  5232                           tablat	equ	0xFF5
  5233                           prodh	equ	0xFF4
  5234                           prodl	equ	0xFF3
  5235                           intcon	equ	0xFF2
  5236                           postinc0	equ	0xFEE
  5237                           fsr0h	equ	0xFEA
  5238                           fsr0l	equ	0xFE9
  5239                           wreg	equ	0xFE8
  5240                           indf1	equ	0xFE7
  5241                           postdec1	equ	0xFE5
  5242                           plusw1	equ	0xFE3
  5243                           fsr1h	equ	0xFE2
  5244                           fsr1l	equ	0xFE1
  5245                           indf2	equ	0xFDF
  5246                           postinc2	equ	0xFDE
  5247                           postdec2	equ	0xFDD
  5248                           plusw2	equ	0xFDB
  5249                           fsr2h	equ	0xFDA
  5250                           fsr2l	equ	0xFD9
  5251                           status	equ	0xFD8
  5252                           
  5253 ;; *************** function _EUSART1_Receive_ISR *****************
  5254 ;; Defined at:
  5255 ;;		line 138 in file "UART.c"
  5256 ;; Parameters:    Size  Location     Type
  5257 ;;		None
  5258 ;; Auto vars:     Size  Location     Type
  5259 ;;  data            1   11[COMRAM] unsigned char 
  5260 ;; Return value:  Size  Location     Type
  5261 ;;                  1    wreg      void 
  5262 ;; Registers used:
  5263 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5264 ;; Tracked objects:
  5265 ;;		On entry : 0/0
  5266 ;;		On exit  : 0/0
  5267 ;;		Unchanged: 0/0
  5268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5269 ;;      Params:         0       0       0       0       0       0       0
  5270 ;;      Locals:         1       0       0       0       0       0       0
  5271 ;;      Temps:          0       0       0       0       0       0       0
  5272 ;;      Totals:         1       0       0       0       0       0       0
  5273 ;;Total ram usage:        1 bytes
  5274 ;; Hardware stack levels used:    1
  5275 ;; Hardware stack levels required when called:    2
  5276 ;; This function calls:
  5277 ;;		i2_UART_buff_put
  5278 ;; This function is called by:
  5279 ;;		_INTERRUPT_InterruptManager
  5280 ;; This function uses a non-reentrant model
  5281 ;;
  5282                           
  5283                           	psect	text34
  5284  000F46                     __ptext34:
  5285                           	opt stack 0
  5286  000F46                     _EUSART1_Receive_ISR:
  5287                           	opt stack 20
  5288                           
  5289                           ;UART.c: 139: if (1 == RC1STAbits.OERR) {
  5290                           
  5291                           ;incstack = 0
  5292  000F46  A2AB               	btfss	4011,1,c	;volatile
  5293  000F48  D002               	goto	i2l116
  5294                           
  5295                           ;UART.c: 142: RC1STAbits.CREN = 0;
  5296  000F4A  98AB               	bcf	4011,4,c	;volatile
  5297                           
  5298                           ;UART.c: 143: RC1STAbits.CREN = 1;
  5299  000F4C  88AB               	bsf	4011,4,c	;volatile
  5300  000F4E                     i2l116:
  5301                           
  5302                           ;UART.c: 144: }
  5303                           ;UART.c: 145: unsigned char data = RCREG1;
  5304  000F4E  CFAE F00C          	movff	4014,EUSART1_Receive_ISR@data	;volatile
  5305                           
  5306                           ;UART.c: 146: UART_buff_put(&input_buffer, data);
  5307  000F52  0E6A               	movlw	low _input_buffer
  5308  000F54  6E07               	movwf	i2UART_buff_put@_this,c
  5309  000F56  0E01               	movlw	high _input_buffer
  5310  000F58  6E08               	movwf	i2UART_buff_put@_this+1,c
  5311  000F5A  C00C  F009         	movff	EUSART1_Receive_ISR@data,i2UART_buff_put@c
  5312  000F5E  EC77  F003         	call	i2_UART_buff_put	;wreg free
  5313  000F62  0012               	return		;funcret
  5314  000F64                     __end_of_EUSART1_Receive_ISR:
  5315                           	opt stack 0
  5316                           pclatu	equ	0xFFB
  5317                           pclath	equ	0xFFA
  5318                           tblptru	equ	0xFF8
  5319                           tblptrh	equ	0xFF7
  5320                           tblptrl	equ	0xFF6
  5321                           tablat	equ	0xFF5
  5322                           prodh	equ	0xFF4
  5323                           prodl	equ	0xFF3
  5324                           intcon	equ	0xFF2
  5325                           postinc0	equ	0xFEE
  5326                           fsr0h	equ	0xFEA
  5327                           fsr0l	equ	0xFE9
  5328                           wreg	equ	0xFE8
  5329                           indf1	equ	0xFE7
  5330                           postdec1	equ	0xFE5
  5331                           plusw1	equ	0xFE3
  5332                           fsr1h	equ	0xFE2
  5333                           fsr1l	equ	0xFE1
  5334                           indf2	equ	0xFDF
  5335                           postinc2	equ	0xFDE
  5336                           postdec2	equ	0xFDD
  5337                           plusw2	equ	0xFDB
  5338                           fsr2h	equ	0xFDA
  5339                           fsr2l	equ	0xFD9
  5340                           status	equ	0xFD8
  5341                           
  5342 ;; *************** function i2_UART_buff_put *****************
  5343 ;; Defined at:
  5344 ;;		line 67 in file "UART.c"
  5345 ;; Parameters:    Size  Location     Type
  5346 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  5347 ;;		 -> output_buffer(106), input_buffer(106), 
  5348 ;;  c               1    8[COMRAM] const unsigned char 
  5349 ;; Auto vars:     Size  Location     Type
  5350 ;;		None
  5351 ;; Return value:  Size  Location     Type
  5352 ;;                  1    wreg      void 
  5353 ;; Registers used:
  5354 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5355 ;; Tracked objects:
  5356 ;;		On entry : 0/0
  5357 ;;		On exit  : 0/0
  5358 ;;		Unchanged: 0/0
  5359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5360 ;;      Params:         3       0       0       0       0       0       0
  5361 ;;      Locals:         0       0       0       0       0       0       0
  5362 ;;      Temps:          2       0       0       0       0       0       0
  5363 ;;      Totals:         5       0       0       0       0       0       0
  5364 ;;Total ram usage:        5 bytes
  5365 ;; Hardware stack levels used:    1
  5366 ;; Hardware stack levels required when called:    1
  5367 ;; This function calls:
  5368 ;;		i2_UART_buff_modulo_inc
  5369 ;; This function is called by:
  5370 ;;		_EUSART1_Receive_ISR
  5371 ;; This function uses a non-reentrant model
  5372 ;;
  5373                           
  5374                           	psect	text35
  5375  0006EE                     __ptext35:
  5376                           	opt stack 0
  5377  0006EE                     i2_UART_buff_put:
  5378                           	opt stack 20
  5379                           
  5380                           ;UART.c: 68: if (_this->count < 100) {
  5381                           
  5382                           ;incstack = 0
  5383  0006EE  EE20 F068          	lfsr	2,104
  5384  0006F2  5007               	movf	i2UART_buff_put@_this,w,c
  5385  0006F4  26D9               	addwf	fsr2l,f,c
  5386  0006F6  5008               	movf	i2UART_buff_put@_this+1,w,c
  5387  0006F8  22DA               	addwfc	fsr2h,f,c
  5388  0006FA  0E01               	movlw	1
  5389  0006FC  BEDB               	btfsc	plusw2,7,c
  5390  0006FE  D007               	goto	i2l2037
  5391  000700  0E01               	movlw	1
  5392  000702  50DB               	movf	plusw2,w,c
  5393  000704  E13A               	bnz	i2l2043
  5394  000706  0E64               	movlw	100
  5395  000708  5CDE               	subwf	postinc2,w,c
  5396  00070A  B0D8               	btfsc	status,0,c
  5397  00070C  D036               	goto	i2l2043
  5398  00070E                     i2l2037:
  5399                           
  5400                           ;UART.c: 69: _this->buf[_this->head] = c;
  5401  00070E  EE20 F064          	lfsr	2,100
  5402  000712  5007               	movf	i2UART_buff_put@_this,w,c
  5403  000714  26D9               	addwf	fsr2l,f,c
  5404  000716  5008               	movf	i2UART_buff_put@_this+1,w,c
  5405  000718  22DA               	addwfc	fsr2h,f,c
  5406  00071A  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  5407  00071E  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  5408  000722  500A               	movf	??i2_UART_buff_put,w,c
  5409  000724  2407               	addwf	i2UART_buff_put@_this,w,c
  5410  000726  6ED9               	movwf	fsr2l,c
  5411  000728  500B               	movf	??i2_UART_buff_put+1,w,c
  5412  00072A  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  5413  00072C  6EDA               	movwf	fsr2h,c
  5414  00072E  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  5415                           
  5416                           ;UART.c: 70: _this->head = UART_buff_modulo_inc(_this->head, 100);
  5417  000732  EE20 F064          	lfsr	2,100
  5418  000736  5007               	movf	i2UART_buff_put@_this,w,c
  5419  000738  26D9               	addwf	fsr2l,f,c
  5420  00073A  5008               	movf	i2UART_buff_put@_this+1,w,c
  5421  00073C  22DA               	addwfc	fsr2h,f,c
  5422  00073E  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  5423  000742  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  5424  000746  0E00               	movlw	0
  5425  000748  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  5426  00074A  0E64               	movlw	100
  5427  00074C  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  5428  00074E  EC70  F007         	call	i2_UART_buff_modulo_inc	;wreg free
  5429  000752  EE20 F064          	lfsr	2,100
  5430  000756  5007               	movf	i2UART_buff_put@_this,w,c
  5431  000758  26D9               	addwf	fsr2l,f,c
  5432  00075A  5008               	movf	i2UART_buff_put@_this+1,w,c
  5433  00075C  22DA               	addwfc	fsr2h,f,c
  5434  00075E  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  5435  000762  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  5436                           
  5437                           ;UART.c: 71: ++_this->count;
  5438  000766  EE20 F068          	lfsr	2,104
  5439  00076A  5007               	movf	i2UART_buff_put@_this,w,c
  5440  00076C  26D9               	addwf	fsr2l,f,c
  5441  00076E  5008               	movf	i2UART_buff_put@_this+1,w,c
  5442  000770  22DA               	addwfc	fsr2h,f,c
  5443  000772  2ADE               	incf	postinc2,f,c
  5444  000774  0E00               	movlw	0
  5445  000776  22DD               	addwfc	postdec2,f,c
  5446                           
  5447                           ;UART.c: 72: } else {
  5448  000778  0012               	return	
  5449  00077A                     i2l2043:
  5450                           
  5451                           ;UART.c: 73: _this->buf[_this->head] = c;
  5452  00077A  EE20 F064          	lfsr	2,100
  5453  00077E  5007               	movf	i2UART_buff_put@_this,w,c
  5454  000780  26D9               	addwf	fsr2l,f,c
  5455  000782  5008               	movf	i2UART_buff_put@_this+1,w,c
  5456  000784  22DA               	addwfc	fsr2h,f,c
  5457  000786  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  5458  00078A  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  5459  00078E  500A               	movf	??i2_UART_buff_put,w,c
  5460  000790  2407               	addwf	i2UART_buff_put@_this,w,c
  5461  000792  6ED9               	movwf	fsr2l,c
  5462  000794  500B               	movf	??i2_UART_buff_put+1,w,c
  5463  000796  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  5464  000798  6EDA               	movwf	fsr2h,c
  5465  00079A  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  5466                           
  5467                           ;UART.c: 74: _this->head = UART_buff_modulo_inc(_this->head, 100);
  5468  00079E  EE20 F064          	lfsr	2,100
  5469  0007A2  5007               	movf	i2UART_buff_put@_this,w,c
  5470  0007A4  26D9               	addwf	fsr2l,f,c
  5471  0007A6  5008               	movf	i2UART_buff_put@_this+1,w,c
  5472  0007A8  22DA               	addwfc	fsr2h,f,c
  5473  0007AA  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  5474  0007AE  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  5475  0007B2  0E00               	movlw	0
  5476  0007B4  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  5477  0007B6  0E64               	movlw	100
  5478  0007B8  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  5479  0007BA  EC70  F007         	call	i2_UART_buff_modulo_inc	;wreg free
  5480  0007BE  EE20 F064          	lfsr	2,100
  5481  0007C2  5007               	movf	i2UART_buff_put@_this,w,c
  5482  0007C4  26D9               	addwf	fsr2l,f,c
  5483  0007C6  5008               	movf	i2UART_buff_put@_this+1,w,c
  5484  0007C8  22DA               	addwfc	fsr2h,f,c
  5485  0007CA  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  5486  0007CE  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  5487                           
  5488                           ;UART.c: 75: _this->tail = UART_buff_modulo_inc(_this->tail, 100);
  5489  0007D2  EE20 F066          	lfsr	2,102
  5490  0007D6  5007               	movf	i2UART_buff_put@_this,w,c
  5491  0007D8  26D9               	addwf	fsr2l,f,c
  5492  0007DA  5008               	movf	i2UART_buff_put@_this+1,w,c
  5493  0007DC  22DA               	addwfc	fsr2h,f,c
  5494  0007DE  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  5495  0007E2  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  5496  0007E6  0E00               	movlw	0
  5497  0007E8  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  5498  0007EA  0E64               	movlw	100
  5499  0007EC  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  5500  0007EE  EC70  F007         	call	i2_UART_buff_modulo_inc	;wreg free
  5501  0007F2  EE20 F066          	lfsr	2,102
  5502  0007F6  5007               	movf	i2UART_buff_put@_this,w,c
  5503  0007F8  26D9               	addwf	fsr2l,f,c
  5504  0007FA  5008               	movf	i2UART_buff_put@_this+1,w,c
  5505  0007FC  22DA               	addwfc	fsr2h,f,c
  5506  0007FE  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  5507  000802  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  5508  000806  0012               	return	
  5509  000808                     __end_ofi2_UART_buff_put:
  5510                           	opt stack 0
  5511                           pclatu	equ	0xFFB
  5512                           pclath	equ	0xFFA
  5513                           tblptru	equ	0xFF8
  5514                           tblptrh	equ	0xFF7
  5515                           tblptrl	equ	0xFF6
  5516                           tablat	equ	0xFF5
  5517                           prodh	equ	0xFF4
  5518                           prodl	equ	0xFF3
  5519                           intcon	equ	0xFF2
  5520                           postinc0	equ	0xFEE
  5521                           fsr0h	equ	0xFEA
  5522                           fsr0l	equ	0xFE9
  5523                           wreg	equ	0xFE8
  5524                           indf1	equ	0xFE7
  5525                           postdec1	equ	0xFE5
  5526                           plusw1	equ	0xFE3
  5527                           fsr1h	equ	0xFE2
  5528                           fsr1l	equ	0xFE1
  5529                           indf2	equ	0xFDF
  5530                           postinc2	equ	0xFDE
  5531                           postdec2	equ	0xFDD
  5532                           plusw2	equ	0xFDB
  5533                           fsr2h	equ	0xFDA
  5534                           fsr2l	equ	0xFD9
  5535                           status	equ	0xFD8
  5536                           
  5537 ;; *************** function i2_UART_buff_modulo_inc *****************
  5538 ;; Defined at:
  5539 ;;		line 105 in file "UART.c"
  5540 ;; Parameters:    Size  Location     Type
  5541 ;;  value           2    0[COMRAM] const unsigned int 
  5542 ;;  modulus         2    2[COMRAM] const unsigned int 
  5543 ;; Auto vars:     Size  Location     Type
  5544 ;;  UART_buff_mo    2    4[COMRAM] unsigned int 
  5545 ;; Return value:  Size  Location     Type
  5546 ;;                  2    0[COMRAM] unsigned int 
  5547 ;; Registers used:
  5548 ;;		wreg, status,2, status,0
  5549 ;; Tracked objects:
  5550 ;;		On entry : 0/0
  5551 ;;		On exit  : 0/0
  5552 ;;		Unchanged: 0/0
  5553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5554 ;;      Params:         4       0       0       0       0       0       0
  5555 ;;      Locals:         2       0       0       0       0       0       0
  5556 ;;      Temps:          0       0       0       0       0       0       0
  5557 ;;      Totals:         6       0       0       0       0       0       0
  5558 ;;Total ram usage:        6 bytes
  5559 ;; Hardware stack levels used:    1
  5560 ;; This function calls:
  5561 ;;		Nothing
  5562 ;; This function is called by:
  5563 ;;		i2_UART_buff_put
  5564 ;;		i2_UART_buff_get
  5565 ;; This function uses a non-reentrant model
  5566 ;;
  5567                           
  5568                           	psect	text36
  5569  000EE0                     __ptext36:
  5570                           	opt stack 0
  5571  000EE0                     i2_UART_buff_modulo_inc:
  5572                           	opt stack 20
  5573                           
  5574                           ;UART.c: 106: unsigned int my_value = value + 1;
  5575                           
  5576                           ;incstack = 0
  5577  000EE0  0E01               	movlw	1
  5578  000EE2  2401               	addwf	i2UART_buff_modulo_inc@value,w,c
  5579  000EE4  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  5580  000EE6  0E00               	movlw	0
  5581  000EE8  2002               	addwfc	i2UART_buff_modulo_inc@value+1,w,c
  5582  000EEA  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  5583                           
  5584                           ;UART.c: 107: if (my_value >= modulus) {
  5585  000EEC  5003               	movf	i2UART_buff_modulo_inc@modulus,w,c
  5586  000EEE  5C05               	subwf	i2UART_buff_modulo_inc@my_value,w,c
  5587  000EF0  5004               	movf	i2UART_buff_modulo_inc@modulus+1,w,c
  5588  000EF2  5806               	subwfb	i2UART_buff_modulo_inc@my_value+1,w,c
  5589  000EF4  A0D8               	btfss	status,0,c
  5590  000EF6  D004               	goto	i2l1973
  5591                           
  5592                           ;UART.c: 108: my_value = 0;
  5593  000EF8  0E00               	movlw	0
  5594  000EFA  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  5595  000EFC  0E00               	movlw	0
  5596  000EFE  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  5597  000F00                     i2l1973:
  5598                           
  5599                           ;UART.c: 109: }
  5600                           ;UART.c: 110: return (my_value);
  5601  000F00  C005  F001         	movff	i2UART_buff_modulo_inc@my_value,?i2_UART_buff_modulo_inc
  5602  000F04  C006  F002         	movff	i2UART_buff_modulo_inc@my_value+1,?i2_UART_buff_modulo_inc+1
  5603  000F08  0012               	return	
  5604  000F0A                     __end_ofi2_UART_buff_modulo_inc:
  5605                           	opt stack 0
  5606  0000                     pclatu	equ	0xFFB
  5607                           pclath	equ	0xFFA
  5608                           tblptru	equ	0xFF8
  5609                           tblptrh	equ	0xFF7
  5610                           tblptrl	equ	0xFF6
  5611                           tablat	equ	0xFF5
  5612                           prodh	equ	0xFF4
  5613                           prodl	equ	0xFF3
  5614                           intcon	equ	0xFF2
  5615                           postinc0	equ	0xFEE
  5616                           fsr0h	equ	0xFEA
  5617                           fsr0l	equ	0xFE9
  5618                           wreg	equ	0xFE8
  5619                           indf1	equ	0xFE7
  5620                           postdec1	equ	0xFE5
  5621                           plusw1	equ	0xFE3
  5622                           fsr1h	equ	0xFE2
  5623                           fsr1l	equ	0xFE1
  5624                           indf2	equ	0xFDF
  5625                           postinc2	equ	0xFDE
  5626                           postdec2	equ	0xFDD
  5627                           plusw2	equ	0xFDB
  5628                           fsr2h	equ	0xFDA
  5629                           fsr2l	equ	0xFD9
  5630                           status	equ	0xFD8
  5631                           pclatu	equ	0xFFB
  5632                           pclath	equ	0xFFA
  5633                           tblptru	equ	0xFF8
  5634                           tblptrh	equ	0xFF7
  5635                           tblptrl	equ	0xFF6
  5636                           tablat	equ	0xFF5
  5637                           prodh	equ	0xFF4
  5638                           prodl	equ	0xFF3
  5639                           intcon	equ	0xFF2
  5640                           postinc0	equ	0xFEE
  5641                           fsr0h	equ	0xFEA
  5642                           fsr0l	equ	0xFE9
  5643                           wreg	equ	0xFE8
  5644                           indf1	equ	0xFE7
  5645                           postdec1	equ	0xFE5
  5646                           plusw1	equ	0xFE3
  5647                           fsr1h	equ	0xFE2
  5648                           fsr1l	equ	0xFE1
  5649                           indf2	equ	0xFDF
  5650                           postinc2	equ	0xFDE
  5651                           postdec2	equ	0xFDD
  5652                           plusw2	equ	0xFDB
  5653                           fsr2h	equ	0xFDA
  5654                           fsr2l	equ	0xFD9
  5655                           status	equ	0xFD8
  5656                           
  5657                           	psect	rparam
  5658  0000                     pclatu	equ	0xFFB
  5659                           pclath	equ	0xFFA
  5660                           tblptru	equ	0xFF8
  5661                           tblptrh	equ	0xFF7
  5662                           tblptrl	equ	0xFF6
  5663                           tablat	equ	0xFF5
  5664                           prodh	equ	0xFF4
  5665                           prodl	equ	0xFF3
  5666                           intcon	equ	0xFF2
  5667                           postinc0	equ	0xFEE
  5668                           fsr0h	equ	0xFEA
  5669                           fsr0l	equ	0xFE9
  5670                           wreg	equ	0xFE8
  5671                           indf1	equ	0xFE7
  5672                           postdec1	equ	0xFE5
  5673                           plusw1	equ	0xFE3
  5674                           fsr1h	equ	0xFE2
  5675                           fsr1l	equ	0xFE1
  5676                           indf2	equ	0xFDF
  5677                           postinc2	equ	0xFDE
  5678                           postdec2	equ	0xFDD
  5679                           plusw2	equ	0xFDB
  5680                           fsr2h	equ	0xFDA
  5681                           fsr2l	equ	0xFD9
  5682                           status	equ	0xFD8
  5683                           
  5684                           	psect	temp
  5685  000045                     btemp:
  5686                           	opt stack 0
  5687  000045                     	ds	1
  5688  0000                     int$flags	set	btemp
  5689                           pclatu	equ	0xFFB
  5690                           pclath	equ	0xFFA
  5691                           tblptru	equ	0xFF8
  5692                           tblptrh	equ	0xFF7
  5693                           tblptrl	equ	0xFF6
  5694                           tablat	equ	0xFF5
  5695                           prodh	equ	0xFF4
  5696                           prodl	equ	0xFF3
  5697                           intcon	equ	0xFF2
  5698                           postinc0	equ	0xFEE
  5699                           fsr0h	equ	0xFEA
  5700                           fsr0l	equ	0xFE9
  5701                           wreg	equ	0xFE8
  5702                           indf1	equ	0xFE7
  5703                           postdec1	equ	0xFE5
  5704                           plusw1	equ	0xFE3
  5705                           fsr1h	equ	0xFE2
  5706                           fsr1l	equ	0xFE1
  5707                           indf2	equ	0xFDF
  5708                           postinc2	equ	0xFDE
  5709                           postdec2	equ	0xFDD
  5710                           plusw2	equ	0xFDB
  5711                           fsr2h	equ	0xFDA
  5712                           fsr2l	equ	0xFD9
  5713                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        6
    BSS         314
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     41      68
    BANK0           160    105     156
    BANK1           256      6     248
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 106
		 -> output_buffer(BANK1[106]), input_buffer(BANK1[106]), 

    memset@p	PTR unsigned char  size(2) Largest target is 106
		 -> output_buffer(BANK1[106]), input_buffer(BANK1[106]), 

    ComController@DTI	PTR unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK0[30]), 

    sendData@DTS	PTR unsigned char  size(2) Largest target is 4
		 -> ComController@DataToSend(BANK0[4]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK0[30]), sendData@SendArray(BANK0[30]), 

    SetDataDict@DataArray	PTR unsigned char  size(2) Largest target is 5
		 -> Start@Data(COMRAM[5]), ReadFaults@Data(COMRAM[4]), 

    GetDataDict@DataArray	PTR unsigned char  size(2) Largest target is 4
		 -> ComController@DataToSend(BANK0[4]), 

    cobs_decode@dst_write_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK0[30]), 

    cobs_decode@dst_buf_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK0[30]), 

    cobs_decode@dst_buf_end_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK0[30]), 

    cobs_decode@src_ptr	PTR const unsigned char  size(2) Largest target is 30
		 -> ReciveArray(BANK1[30]), 

    cobs_decode@src_end_ptr	PTR const unsigned char  size(2) Largest target is 30
		 -> ReciveArray(BANK1[30]), 

    cobs_encode@dst_write_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> sendData@COBSArray(BANK0[30]), 

    cobs_encode@dst_code_write_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> sendData@COBSArray(BANK0[30]), 

    cobs_encode@dst_buf_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> sendData@COBSArray(BANK0[30]), 

    cobs_encode@dst_buf_end_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> sendData@COBSArray(BANK0[30]), 

    cobs_encode@src_ptr	PTR const unsigned char  size(2) Largest target is 30
		 -> sendData@SendArray(BANK0[30]), 

    cobs_encode@src_end_ptr	PTR const unsigned char  size(2) Largest target is 30
		 -> sendData@SendArray(BANK0[30]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 106
		 -> output_buffer(BANK1[106]), input_buffer(BANK1[106]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 106
		 -> output_buffer(BANK1[106]), input_buffer(BANK1[106]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 106
		 -> output_buffer(BANK1[106]), input_buffer(BANK1[106]), 

    sp__memset	PTR void  size(2) Largest target is 106
		 -> output_buffer(BANK1[106]), input_buffer(BANK1[106]), 

    UART_buff_init@_this	PTR struct UART_ring_buff size(2) Largest target is 106
		 -> output_buffer(BANK1[106]), input_buffer(BANK1[106]), 


Critical Paths under _main in COMRAM

    _main->_Start
    _receiveData->_ComController
    _Receive_get->_UART_buff_get
    _Receive_available->_UART_buff_size
    _sendData->_Send_put
    _Send_put->_UART_buff_get
    _Send_put->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc
    _UART_buff_get->_UART_buff_modulo_inc
    _EUSART1_Initialize->_UART_buff_init
    _UART_buff_init->_memset
    _ReadFaults->_SetDataDict

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _EUSART1_Transmit_ISR->i2_UART_buff_get
    i2_UART_buff_get->i2_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->i2_UART_buff_put
    i2_UART_buff_put->i2_UART_buff_modulo_inc

Critical Paths under _main in BANK0

    _updateComms->_receiveData
    _receiveData->_ComController
    _ComController->_sendData
    _sendData->_cobs_encode

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _updateComms->_receiveData

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   14656
                            _GetTime
                         _ReadFaults
                            _SetTime
                              _Start
                        _updateComms
 ---------------------------------------------------------------------------------
 (1) _updateComms                                          0     0      0   12252
                        _receiveData
 ---------------------------------------------------------------------------------
 (2) _receiveData                                         11    11      0   12252
                                            100 BANK0      5     5      0
                                              0 BANK1      6     6      0
                               _CRC8
                      _ComController
                  _Receive_available
                        _Receive_get
                        _cobs_decode
 ---------------------------------------------------------------------------------
 (3) _cobs_decode                                         24    16      8    1783
                                             26 COMRAM    10     2      8
                                              0 BANK0     14    14      0
 ---------------------------------------------------------------------------------
 (3) _Receive_get                                          0     0      0    1308
                      _UART_buff_get
 ---------------------------------------------------------------------------------
 (3) _Receive_available                                    2     0      2     176
                                             28 COMRAM     2     0      2
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (4) _UART_buff_size                                       2     0      2     176
                                             26 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _ComController                                        9     5      4    8183
                                             38 COMRAM     1     1      0
                                             92 BANK0      8     4      4
                              _Delay
                        _GetDataDict
                           _sendData
 ---------------------------------------------------------------------------------
 (4) _sendData                                            79    72      7    6751
                                             13 BANK0     79    72      7
                               _CRC8
                           _Send_put
                        _cobs_encode
 ---------------------------------------------------------------------------------
 (5) _cobs_encode                                         23    15      8    1613
                                             26 COMRAM    10     2      8
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (5) _Send_put                                             1     1      0    2913
                                             37 COMRAM     1     1      0
                      _UART_buff_get
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (6) _UART_buff_put                                        5     2      3    1574
                                             32 COMRAM     5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (4) _UART_buff_get                                        5     3      2    1308
                                             32 COMRAM     5     3      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _UART_buff_modulo_inc                                 6     2      4     850
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _CRC8                                                 7     4      3     604
                                             26 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (4) _GetDataDict                                          8     4      4     772
                                             26 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (4) _Delay                                                5     3      2     248
                                             26 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _Start                                                5     5      0    1553
                                             36 COMRAM     5     5      0
                           _ComStart
               _INTERRUPT_Initialize
                        _SetDataDict
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ComStart                                             0     0      0     726
                 _EUSART1_Initialize
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0     726
                     _UART_buff_init
 ---------------------------------------------------------------------------------
 (4) _UART_buff_init                                       2     0      2     726
                                             34 COMRAM     2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               8     2      6     552
                                             26 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (1) _SetTime                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ReadFaults                                           5     5      0     851
                                             34 COMRAM     5     5      0
                        _SetDataDict
 ---------------------------------------------------------------------------------
 (2) _SetDataDict                                          8     4      4     802
                                             26 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _GetTime                                              4     0      4       0
                                             26 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                          14    14      0    1209
                                             12 COMRAM    14    14      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR0_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Transmit_ISR                                 0     0      0     528
                    i2_UART_buff_get
                   i2_UART_buff_size
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_size                                    2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_get                                     5     3      2     480
                                              6 COMRAM     5     3      2
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Receive_ISR                                  1     1      0     681
                                             11 COMRAM     1     1      0
                    i2_UART_buff_put
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_put                                     5     2      3     658
                                              6 COMRAM     5     2      3
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (11) i2_UART_buff_modulo_inc                              6     2      4     298
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GetTime
   _ReadFaults
     _SetDataDict
   _SetTime
   _Start
     _ComStart
       _EUSART1_Initialize
         _UART_buff_init
           _memset
     _INTERRUPT_Initialize
     _SetDataDict
     _TMR0_Initialize
       _TMR0_StartTimer
   _updateComms
     _receiveData
       _CRC8
       _ComController
         _Delay
         _GetDataDict
         _sendData
           _CRC8
           _Send_put
             _UART_buff_get
               _UART_buff_modulo_inc
             _UART_buff_put
               _UART_buff_modulo_inc
           _cobs_encode
       _Receive_available
         _UART_buff_size
       _Receive_get
         _UART_buff_get
           _UART_buff_modulo_inc
       _cobs_decode

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
     i2_UART_buff_put
       i2_UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     i2_UART_buff_get
       i2_UART_buff_modulo_inc
     i2_UART_buff_size
   _TMR0_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      6      F8       6       96.9%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     69      9C       4       97.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     29      44       1       72.3%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1D8       9        0.0%
DATA                 0      0     1D8      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Sun Aug 20 17:11:55 2017

                __end_of_GetDataDict 0A52               i2_UART_buff_modulo_inc 0EE0  
           cobs_encode@dst_write_ptr 0068                                   l36 0E64  
                                 l85 0B78             GetDataDict@ReturnCounter 0022  
                       __CFG_CP0$OFF 000000                         __CFG_CP1$OFF 000000  
                       __CFG_CP2$OFF 000000                         __CFG_CP3$OFF 000000  
                                l334 0A3E                                  l348 0AD6  
                                l269 0DE8                                  l384 0D76  
                       __CFG_CPB$OFF 000000                         __CFG_CPD$OFF 000000  
                                prod 000FF3                                  wreg 000FE8  
      i2UART_buff_modulo_inc@modulus 0003                         __CFG_LVP$OFF 000000  
          SetDataDict@DataTableIndex 001B                                 l2021 0A92  
                               l2013 0A62                                 l2031 0ACC  
                               l2023 0A9C                                 l2015 0A6A  
                               l2025 0AA4                                 l2033 0ADA  
                               l2301 0DD4                                 l2213 04B4  
                               l2215 04BC                                 l2207 04A0  
                               l2315 09FA                                 l2307 09CA  
                               l2163 05F4                                 l2219 04D6  
                               l2325 0A34                                 l2317 0A04  
                               l2309 09D2                                 l2157 0ED6  
                               l2237 0524                                 l2319 0A0C  
                               l2327 0A42                                 l2183 0B74  
                               l2263 0596                                 l2343 00D4  
                               l2407 0300                                 l2273 0D4A  
                               l2169 0660                                 l2265 05A2  
                               l2257 0574                                 l2425 037C  
                               l2417 0340                                 l2371 022E  
                               l2363 01A4                                 l2427 0380  
                               l2507 0906                                 l2349 011C  
                               l2461 040A                                 l1663 0EA4  
                               l2279 0D60                                 l2287 0D7C  
                               l2375 024A                                 l2367 01F4  
                               l2439 03AA                                 l2447 03C2  
                               l2391 02C2                                 l2289 0D82  
                               l2457 03F6                                 l1659 0E94  
                               l2397 02D6                                 l2485 0830  
                               l2399 02DE                __end_of_ComController 09BA  
                               _CRC8 0D44                                 u1210 0B08  
                               u1051 0C70                                 u1060 0CA0  
                               u1070 0CB0                                 u1080 0CC4  
                               u1066 0CA2                                 u1078 0CB2  
                               u1088 0CC6                                 u1540 081C  
                               u1607 0DDA                                 u1580 0E80  
                               u1597 084E                                 i2l85 0C0A  
                               _Data 00DD                                 _main 0E5E  
                    _TMR0_StartTimer 101A                                 _time 002E  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                               fsr2h 000FDA                                 fsr0l 000FE9  
                               indf1 000FE7                                 indf2 000FDF  
                               fsr1l 000FE1                                 fsr2l 000FD9  
                               btemp 0045                        __CFG_BORV$190 000000  
                               prodh 000FF4                                 prodl 000FF3  
                               start 00A0                        __CFG_IESO$OFF 000000  
                    __end_of_GetTime 0FFA                         ___param_bank 000000  
     i2UART_buff_modulo_inc@my_value 0005                                ?_CRC8 001B  
                    __end_of_SetTime 0FE8              ComController@DataToSend 00C0  
            __end_of_TMR0_Initialize 0F28                                ?_main 0001  
                              _T0CON 000FD5                       __CFG_DEBUG$OFF 000000  
                              i2l116 0F4E                                i2l260 004E  
                              i2l262 005A                                i2l266 0064  
                              _TMR0H 000FD7                                _TMR0L 000FD6  
                              _Delay 0DCA                        __CFG_WRT0$OFF 000000  
                      __CFG_WRT1$OFF 000000                        __CFG_WRT2$OFF 000000  
                      __CFG_WRT3$OFF 000000                                _Count 002A  
               _EUSART1_Transmit_ISR 0DFE                       __CFG_EBTR0$OFF 000000  
                     __CFG_FCMEN$OFF 000000                       __CFG_EBTR1$OFF 000000  
                     __CFG_EBTR2$OFF 000000                       __CFG_EBTR3$OFF 000000  
                   __end_of_TMR0_ISR 0F94                                _Start 0C0E  
                      __CFG_WRTB$OFF 000000                        __CFG_WRTC$OFF 000000  
                      __CFG_WRTD$OFF 000000                       __CFG_EBTRB$OFF 000000  
                 __CFG_MCLRE$EXTMCLR 000000             SetDataDict@ReturnCounter 0022  
                              pclath 000FFA                                tablat 000FF5  
                      ??_Receive_get 0026                        receiveData@CS 01F2  
                              plusw1 000FE3                                plusw2 000FDB  
                              status 000FD8                          _GetDataDict 09BA  
                      ??_SetDataDict 001F                       __CFG_HFOFST$ON 000000  
                       ?_receiveData 0001                       __CFG_PBADEN$ON 000000  
                       __end_of_CRC8 0D8E                     __end_of_ComStart 101A  
                         _ReadFaults 0C90                      __initialization 0CF2  
         __end_of_EUSART1_Initialize 0DCA                         __end_of_main 0E8A  
                             ??_CRC8 001E          ?_INTERRUPT_InterruptManager 0001  
                             ??_main 002A                        __activetblptr 000002  
                   __end_of_Send_put 0E5E            __size_ofi2_UART_buff_size 0016  
                             ?_Delay 001B                ?_EUSART1_Transmit_ISR 0001  
               GetDataDict@DataArray 001C                 GetDataDict@DataCount 0021  
               GetDataDict@DataTable 0020                               ?_Start 0001  
               SetDataDict@DataArray 001C                 SetDataDict@DataCount 0021  
               SetDataDict@DataTable 0020              __end_of_TMR0_StartTimer 101E  
               __size_of_cobs_decode 01BE                 __size_of_cobs_encode 0198  
                             _ANSELA 000F38                               _ANSELB 000F39  
                             _ANSELC 000F3A                               _ANSELD 000F3B  
                             _ANSELE 000F3C                      i2_UART_buff_get 0B7C  
                             _RC1STA 000FAB                               i2l2111 0E28  
                             i2l2043 077A                               i2l2037 070E  
                    i2_UART_buff_put 06EE                               i2l2057 0C06  
                     __CFG_WDTEN$OFF 000000                               Delay@x 001E  
        UART_buff_modulo_inc@modulus 001D                               i2l1973 0F00  
                             _RCREG1 000FAE                               _OSCCON 000FD3  
                             _SPBRG1 000FAF                            ??_GetTime 001F  
                             _TX1STA 000FAC                               _TXREG1 000FAD  
                          ??_SetTime 001B                       __CFG_XINST$OFF 000000  
                __end_of_Receive_get 1008                        _output_buffer 0100  
                __end_of_SetDataDict 0AEA                            CRC8@tempI 0020  
                     __CFG_STVREN$ON 000000                     ?_TMR0_Initialize 0001  
                             _memset 0E8A                               clear_0 0D18  
                             clear_1 0D24                               clear_2 0D30  
                   __end_of_sendData 027E                         __pdataCOMRAM 003F  
                         Start@F7240 003F               cobs_encode@dst_buf_len 001D  
             cobs_encode@dst_buf_ptr 001B                        Send_put@_data 0026  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8         __end_of_UART_buff_modulo_inc 0EE0  
      __size_of_INTERRUPT_Initialize 0018                           __accesstop 0060  
            __end_of__initialization 0D36                        sendData@count 00B9  
                      sendData@lenth 0072                        ___rparam_used 000001  
            ?i2_UART_buff_modulo_inc 0001                         ?_updateComms 0001  
                      __end_of_Delay 0DFE                          ?_ReadFaults 0001  
                     __pcstackCOMRAM 0001                        __end_of_Start 0C90  
                          ?_TMR0_ISR 0001                   UART_buff_get@_this 0021  
              __end_of_UART_buff_get 0B7C               ??_EUSART1_Transmit_ISR 000C  
              __end_of_UART_buff_put 06EE                              ??_Delay 001D  
            __end_ofi2_UART_buff_get 0C0E              __end_ofi2_UART_buff_put 0808  
        __end_of_EUSART1_Receive_ISR 0F64                              CRC8@crc 0021  
                            CRC8@len 001D                              ??_Start 0025  
                            CRC8@sum 001E                            ?_ComStart 0001  
                   ?_TMR0_StartTimer 0001                          sendData@DTS 0070  
             cobs_decode@dst_buf_len 001D                           __pbssBANK0 00C9  
                         __pbssBANK1 0100               cobs_decode@dst_buf_ptr 001B  
                    __CFG_PLLCFG$OFF 000000                          _Receive_get 0FFA  
     __end_ofi2_UART_buff_modulo_inc 0F0A                          _SetDataDict 0A52  
            __size_of_UART_buff_init 001E                          _ReciveArray 01D4  
            __size_of_UART_buff_size 0016                            ?_Send_put 0001  
               __size_of_receiveData 0102                   __CFG_CCP2MX$PORTC1 000000  
                         ??_TMR0_ISR 0001                   __CFG_CCP3MX$PORTB5 000000  
           cobs_decode@dst_write_ptr 0068           cobs_decode@remaining_bytes 0066  
                            ?_memset 001B                   UART_buff_put@_this 0021  
                    cobs_decode@F192 0035                     i2_UART_buff_size 0FC0  
        i2UART_buff_modulo_inc@value 0001                              _OSCCON2 000FD2  
                  _Receive_available 0F94         UART_buff_modulo_inc@my_value 001F  
                  __CFG_PRICLKEN$OFF 000000                              _OSCTUNE 000F9B  
                            _SPBRGH1 000FB0                           ??_ComStart 0025  
                sendData@whereToSend 00B4                  __size_of_ReadFaults 0062  
                 ?_Receive_available 001D                              _GetTime 0FE8  
                       ?_GetDataDict 001B                     ComController@DTI 00BC  
                            _ByteLow 003D                  ??_Receive_available 001F  
                          ?_sendData 006D                      __CFG_PWRTEN$OFF 000000  
                         ??_Send_put 0026                              __Hparam 0000  
                            _SetTime 0FD6                              __Lparam 0000  
             cobs_encode@src_end_ptr 0060                 _UART_buff_modulo_inc 0EB6  
                            __pcinit 0CF2               __size_of_ComController 00B0  
                    __size_of_memset 002C                              __ramtop 0600  
                   i2UART_buff_get@c 000B                              __ptext0 0E5E  
                            __ptext1 100E                              __ptext2 0808  
                            __ptext3 027E                              __ptext4 0FFA  
                            __ptext5 0F94                              __ptext6 0FAA  
                            __ptext7 090A                              __ptext8 00A4  
                            __ptext9 043C                            _T0CONbits 000FD5  
                   i2UART_buff_put@c 0009           cobs_encode@dst_buf_end_ptr 0063  
          __end_of_Receive_available 0FAA                  cobs_encode@src_byte 0062  
                 _EUSART1_Initialize 0D8E                     ?i2_UART_buff_get 0007  
                   ?i2_UART_buff_put 0007                 end_of_initialization 0D36  
                          Delay@wait 001B                  ?_EUSART1_Initialize 0001  
                    cobs_encode@F180 0038                              memset@c 001D  
                            memset@n 001F                              memset@p 0021  
                      __Lmediumconst 0000                           ??_sendData 0074  
              ?_UART_buff_modulo_inc 001B                 __size_of_updateComms 0006  
                            postdec1 000FE5                              postdec2 000FDD  
                            postinc0 000FEE                              postinc2 000FDE  
               ??_EUSART1_Initialize 0025                    cobs_decode@result 006B  
             cobs_decode@src_end_ptr 0060                            _PORTAbits 000F80  
                          _PORTCbits 000F82                        ??_cobs_decode 0023  
                      ??_cobs_encode 0023                            _TRISAbits 000F92  
                          _TRISCbits 000F94                            _TRISDbits 000F95  
                     sendData@result 00B6                        _ComController 090A  
              i2UART_buff_size@_this 0001                       _UART_buff_init 0F28  
                     _UART_buff_size 0FAA                         ??_ReadFaults 0023  
               _timer0ReloadVal16bit 003B         __end_of_INTERRUPT_Initialize 0F7C  
             GetDataDict@numbofbytes 001E                        __pidataCOMRAM 1008  
                  __size_of_TMR0_ISR 0018                       __end_of_memset 0EB6  
                       receiveData@i 01F3           __size_of_Receive_available 0016  
                start_initialization 0CF2             __size_of_TMR0_Initialize 001E  
             SetDataDict@numbofbytes 001E                   __end_of_ReadFaults 0CF2  
                 ComController@lenth 00BE                       ?_ComController 00BC  
                __end_of_cobs_decode 043C                    __size_of_ComStart 0006  
             __end_of_UART_buff_init 0F46                       UART_buff_get@c 0025  
             __end_of_UART_buff_size 0FC0                  __end_of_cobs_encode 05D4  
                       ?_Receive_get 0001                       UART_buff_put@c 0023  
                       ?_SetDataDict 001B             __end_ofi2_UART_buff_size 0FD6  
               __size_of_GetDataDict 0098               ??_UART_buff_modulo_inc 001F  
                           CRC8@data 001B                    __size_of_Send_put 002E  
                           ??_memset 0021                            Start@Data 0025  
                        __pbssCOMRAM 002A        __size_of_EUSART1_Transmit_ISR 0032  
                      __pcstackBANK0 0060                        __pcstackBANK1 01F2  
                UART_buff_init@_this 0023                      ?_UART_buff_init 0023  
                    ?_UART_buff_size 001B         __size_of_EUSART1_Receive_ISR 001E  
                           ?_GetTime 001B                        ??_receiveData 00C4  
                         sendData@CS 00B5                cobs_encode@search_len 0065  
           __size_of_TMR0_StartTimer 0004               __size_of_UART_buff_get 0092  
             __size_of_UART_buff_put 011A                             ?_SetTime 0001  
                  __size_of_sendData 01DA                            __pintcode 0008  
       ??_INTERRUPT_InterruptManager 000D                 i2UART_buff_get@_this 0007  
                           _BAUD1CON 000FB8                       __size_of_Delay 0034  
                        _cobs_decode 027E                          _cobs_encode 043C  
             sendData@DataTableIndex 006F                       __size_of_Start 0082  
                    ??_ComController 0027                 _INTERRUPT_Initialize 0F64  
                 cobs_encode@src_len 0021                   cobs_encode@src_ptr 001F  
                       _receiveArray 00D3                    ??_TMR0_Initialize 001B  
                           _LATAbits 000F89                             _LATDbits 000F8C  
                UART_buff_size@_this 001B                             _IPR1bits 000F9F  
                           _IPR2bits 000FA2                             _PIE1bits 000F9D  
                           i2u110_40 0E18                             i2u104_40 0B9A  
__size_of_INTERRUPT_InterruptManager 0098                             _PIR1bits 000F9E  
                           _RCONbits 000FD0                     __CFG_WDTPS$32768 000000  
                __end_of_receiveData 090A                             _TMR0_ISR 0F7C  
                       _input_buffer 016A           cobs_decode@dst_buf_end_ptr 0062  
               i2UART_buff_put@_this 0007                        _UART_buff_get 0AEA  
                      _UART_buff_put 05D4                    sendData@COBSArray 0078  
      cobs_encode@dst_code_write_ptr 0066                             _ComStart 1014  
           ??i2_UART_buff_modulo_inc 0005                            copy_data0 0D06  
              ?_INTERRUPT_Initialize 0001                   sendData@ComandByte 006D  
                           _ByteHigh 003E             __size_ofi2_UART_buff_get 0092  
           __size_ofi2_UART_buff_put 011A                     __size_of_GetTime 0012  
                     ReadFaults@Data 0024                        ??_updateComms 0028  
               __size_of_Receive_get 000E                             __Hrparam 0000  
                           _Send_put 0E30                 __size_of_SetDataDict 0098  
                           __Lrparam 0000                   __CFG_BOREN$SBORDIS 000000  
                   __size_of_SetTime 0012                    __CFG_P2BMX$PORTD2 000000  
                  ??_TMR0_StartTimer 001B          __size_of_EUSART1_Initialize 003C  
                         _ANSELCbits 000F3A                       ?_UART_buff_get 0021  
                     ?_UART_buff_put 0021                          CRC8@extract 001F  
                   GetDataDict@Error 001F                     SetDataDict@Error 001F  
                          sendData@i 00BB                             __ptext10 0E30  
                           __ptext11 05D4                             __ptext20 0F64  
                           __ptext12 0AEA                             __ptext21 1014  
                           __ptext13 0EB6                             __ptext30 0F7C  
                           __ptext22 0D8E                             __ptext14 0D44  
                           __ptext31 0DFE                             __ptext23 0F28  
                           __ptext15 09BA                             __ptext32 0FC0  
                           __ptext24 0E8A                             __ptext16 0DCA  
                           __ptext33 0B7C                             __ptext25 0FD6  
                           __ptext17 0C0E                             __ptext34 0F46  
                           __ptext26 0C90                             __ptext18 0F0A  
                           __ptext35 06EE                             __ptext27 0A52  
                           __ptext19 101A                             __ptext36 0EE0  
                           __ptext28 0FE8                        __size_of_CRC8 004A  
          GetDataDict@DataTableIndex 001B              EUSART1_Receive_ISR@data 000C  
                      __size_of_main 002C                    cobs_encode@result 006A  
                        _receiveData 0808                       _Transmit_stall 0044  
                           _sendData 00A4                    ?i2_UART_buff_size 0001  
                  sendData@DataTable 006E                           _RC1STAbits 000FAB  
                       _ProcessArray 00DE                   ??i2_UART_buff_size 0003  
                           int$flags 0045                  __end_of_updateComms 1014  
 __end_of_INTERRUPT_InterruptManager 00A0           _INTERRUPT_InterruptManager 0008  
                _EUSART1_Receive_ISR 0F46                    receiveData@result 01F5  
                         _INTCONbits 000FF2            UART_buff_modulo_inc@value 001B  
                   ??_UART_buff_init 0025                     ??_UART_buff_size 001D  
             ??_INTERRUPT_Initialize 001B                             memset@p1 001B  
    __size_ofi2_UART_buff_modulo_inc 002A                             intlevel2 0000  
                cobs_decode@len_code 006A                 ?_EUSART1_Receive_ISR 0001  
                      ??_GetDataDict 001F                         cobs_decode@i 0065  
       __end_of_EUSART1_Transmit_ISR 0E30                    sendData@SendArray 0096  
                  ??i2_UART_buff_get 0009                    ??i2_UART_buff_put 000A  
                cobs_decode@src_byte 0064        __size_of_UART_buff_modulo_inc 002A  
                  _DataTableArrayOne 00C9                      ??_UART_buff_get 0023  
                  _DataTableArrayTwo 0032                      ??_UART_buff_put 0024  
                    _TMR0_Initialize 0F0A                         ?_cobs_decode 001B  
                       ?_cobs_encode 001B                    __CFG_T3CMX$PORTC0 000000  
                 cobs_decode@src_len 0021                   cobs_decode@src_ptr 001F  
              ??_EUSART1_Receive_ISR 000C                    __CFG_FOSC$INTIO67 000000  
                        _updateComms 100E  
