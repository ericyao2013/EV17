

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Sat Aug 12 13:01:15 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    54                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    55                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    56  0000                     
    57                           ; Version 1.42
    58                           ; Generated 13/04/2017 GMT
    59                           ; 
    60                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    61                           ; All rights reserved.
    62                           ; 
    63                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    64                           ; 
    65                           ; Redistribution and use in source and binary forms, with or without modification, are
    66                           ; permitted provided that the following conditions are met:
    67                           ; 
    68                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    69                           ;        conditions and the following disclaimer.
    70                           ; 
    71                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    72                           ;        of conditions and the following disclaimer in the documentation and/or other
    73                           ;        materials provided with the distribution.
    74                           ; 
    75                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    76                           ;        software without specific prior written permission.
    77                           ; 
    78                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    79                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    80                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    81                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    82                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    83                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    84                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    85                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    86                           ; 
    87                           ; 
    88                           ; Code-generator required, PIC18F45K22 Definitions
    89                           ; 
    90                           ; SFR Addresses
    91  0000                     
    92                           	psect	idataCOMRAM
    93  001002                     __pidataCOMRAM:
    94                           	opt stack 0
    95                           
    96                           ;initializer for _COBS_DECODE_DST_BUF_LEN_MAX
    97  001002  001E               	dw	30
    98                           
    99                           ;initializer for _COBS_ENCODE_DST_BUF_LEN_MAX
   100  001004  001E               	dw	30
   101                           
   102                           ;initializer for _Transmit_stall
   103  001006  01                 	db	1
   104                           
   105                           	psect	idataBANK0
   106  001007                     __pidataBANK0:
   107                           	opt stack 0
   108                           
   109                           ;initializer for Start@F7240
   110  001007  04                 	db	4
   111  001008  02                 	db	2
   112  001009  00                 	db	0
   113  00100A  00                 	db	0
   114  00100B  00                 	db	0
   115  0000                     _ANSELE	set	3900
   116  0000                     _ANSELD	set	3899
   117  0000                     _ANSELC	set	3898
   118  0000                     _ANSELB	set	3897
   119  0000                     _ANSELA	set	3896
   120  0000                     _ANSELCbits	set	3898
   121  0000                     _LATAbits	set	3977
   122  0000                     _PIR1bits	set	3998
   123  0000                     _IPR2bits	set	4002
   124  0000                     _IPR1bits	set	3999
   125  0000                     _RCONbits	set	4048
   126  0000                     _OSCTUNE	set	3995
   127  0000                     _OSCCON2	set	4050
   128  0000                     _OSCCON	set	4051
   129  0000                     _TRISAbits	set	3986
   130  0000                     _TRISDbits	set	3989
   131  0000                     _TRISCbits	set	3988
   132  0000                     _PORTAbits	set	3968
   133  0000                     _PORTCbits	set	3970
   134  0000                     _T0CONbits	set	4053
   135  0000                     _INTCONbits	set	4082
   136  0000                     _TMR0L	set	4054
   137  0000                     _TMR0H	set	4055
   138  0000                     _T0CON	set	4053
   139  0000                     _RC1STAbits	set	4011
   140  0000                     _RCREG1	set	4014
   141  0000                     _TXREG1	set	4013
   142  0000                     _SPBRGH1	set	4016
   143  0000                     _SPBRG1	set	4015
   144  0000                     _TX1STA	set	4012
   145  0000                     _RC1STA	set	4011
   146  0000                     _BAUD1CON	set	4024
   147  0000                     _PIE1bits	set	3997
   148  0000                     _LATDbits	set	3980
   149                           
   150                           ; #config settings
   151  0000                     
   152                           	psect	cinit
   153  000C5E                     __pcinit:
   154                           	opt stack 0
   155  000C5E                     start_initialization:
   156                           	opt stack 0
   157  000C5E                     __initialization:
   158                           	opt stack 0
   159                           
   160                           ; Initialize objects allocated to BANK0 (5 bytes)
   161                           ; load TBLPTR registers with __pidataBANK0
   162  000C5E  0E07               	movlw	low __pidataBANK0
   163  000C60  6EF6               	movwf	tblptrl,c
   164  000C62  0E10               	movlw	high __pidataBANK0
   165  000C64  6EF7               	movwf	tblptrh,c
   166  000C66  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   167  000C68  6EF8               	movwf	tblptru,c
   168  000C6A  EE00  F0F8         	lfsr	0,__pdataBANK0
   169  000C6E  EE10 F005          	lfsr	1,5
   170  000C72                     copy_data0:
   171  000C72  0009               	tblrd		*+
   172  000C74  CFF5 FFEE          	movff	tablat,postinc0
   173  000C78  50E5               	movf	postdec1,w,c
   174  000C7A  50E1               	movf	fsr1l,w,c
   175  000C7C  E1FA               	bnz	copy_data0
   176                           
   177                           ; Initialize objects allocated to COMRAM (5 bytes)
   178                           ; load TBLPTR registers with __pidataCOMRAM
   179  000C7E  0E02               	movlw	low __pidataCOMRAM
   180  000C80  6EF6               	movwf	tblptrl,c
   181  000C82  0E10               	movlw	high __pidataCOMRAM
   182  000C84  6EF7               	movwf	tblptrh,c
   183  000C86  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   184  000C88  6EF8               	movwf	tblptru,c
   185  000C8A  EE00  F040         	lfsr	0,__pdataCOMRAM
   186  000C8E  EE10 F005          	lfsr	1,5
   187  000C92                     copy_data1:
   188  000C92  0009               	tblrd		*+
   189  000C94  CFF5 FFEE          	movff	tablat,postinc0
   190  000C98  50E5               	movf	postdec1,w,c
   191  000C9A  50E1               	movf	fsr1l,w,c
   192  000C9C  E1FA               	bnz	copy_data1
   193                           
   194                           ; Clear objects allocated to BANK1 (242 bytes)
   195  000C9E  EE01  F000         	lfsr	0,__pbssBANK1
   196  000CA2  0EF2               	movlw	242
   197  000CA4                     clear_0:
   198  000CA4  6AEE               	clrf	postinc0,c
   199  000CA6  06E8               	decf	wreg,f,c
   200  000CA8  E1FD               	bnz	clear_0
   201                           
   202                           ; Clear objects allocated to BANK0 (50 bytes)
   203  000CAA  EE00  F0C6         	lfsr	0,__pbssBANK0
   204  000CAE  0E32               	movlw	50
   205  000CB0                     clear_1:
   206  000CB0  6AEE               	clrf	postinc0,c
   207  000CB2  06E8               	decf	wreg,f,c
   208  000CB4  E1FD               	bnz	clear_1
   209                           
   210                           ; Clear objects allocated to COMRAM (21 bytes)
   211  000CB6  EE00  F02B         	lfsr	0,__pbssCOMRAM
   212  000CBA  0E15               	movlw	21
   213  000CBC                     clear_2:
   214  000CBC  6AEE               	clrf	postinc0,c
   215  000CBE  06E8               	decf	wreg,f,c
   216  000CC0  E1FD               	bnz	clear_2
   217  000CC2                     end_of_initialization:
   218                           	opt stack 0
   219  000CC2                     __end_of__initialization:
   220                           	opt stack 0
   221  000CC2  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   222  000CC4  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   223  000CC6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   224  000CC8  6EF8               	movwf	tblptru,c
   225  000CCA  0100               	movlb	0
   226  000CCC  EF26  F007         	goto	_main	;jump to C main() function
   227                           tblptru	equ	0xFF8
   228                           tblptrh	equ	0xFF7
   229                           tblptrl	equ	0xFF6
   230                           tablat	equ	0xFF5
   231                           postinc0	equ	0xFEE
   232                           wreg	equ	0xFE8
   233                           postdec1	equ	0xFE5
   234                           fsr1l	equ	0xFE1
   235                           
   236                           	psect	bssCOMRAM
   237  00002B                     __pbssCOMRAM:
   238                           	opt stack 0
   239  00002B                     _Count:
   240                           	opt stack 0
   241  00002B                     	ds	4
   242  00002F                     _time:
   243                           	opt stack 0
   244  00002F                     	ds	4
   245  000033                     _DataTableArrayTwo:
   246                           	opt stack 0
   247  000033                     	ds	3
   248  000036                     cobs_decode@F192:
   249                           	opt stack 0
   250  000036                     	ds	3
   251  000039                     cobs_encode@F180:
   252                           	opt stack 0
   253  000039                     	ds	3
   254  00003C                     _timer0ReloadVal16bit:
   255                           	opt stack 0
   256  00003C                     	ds	2
   257  00003E                     _ByteLow:
   258                           	opt stack 0
   259  00003E                     	ds	1
   260  00003F                     _ByteHigh:
   261                           	opt stack 0
   262  00003F                     	ds	1
   263                           tblptru	equ	0xFF8
   264                           tblptrh	equ	0xFF7
   265                           tblptrl	equ	0xFF6
   266                           tablat	equ	0xFF5
   267                           postinc0	equ	0xFEE
   268                           wreg	equ	0xFE8
   269                           postdec1	equ	0xFE5
   270                           fsr1l	equ	0xFE1
   271                           
   272                           	psect	dataCOMRAM
   273  000040                     __pdataCOMRAM:
   274                           	opt stack 0
   275  000040                     _COBS_DECODE_DST_BUF_LEN_MAX:
   276                           	opt stack 0
   277  000040                     	ds	2
   278  000042                     _COBS_ENCODE_DST_BUF_LEN_MAX:
   279                           	opt stack 0
   280  000042                     	ds	2
   281  000044                     _Transmit_stall:
   282                           	opt stack 0
   283  000044                     	ds	1
   284                           tblptru	equ	0xFF8
   285                           tblptrh	equ	0xFF7
   286                           tblptrl	equ	0xFF6
   287                           tablat	equ	0xFF5
   288                           postinc0	equ	0xFEE
   289                           wreg	equ	0xFE8
   290                           postdec1	equ	0xFE5
   291                           fsr1l	equ	0xFE1
   292                           
   293                           	psect	bssBANK0
   294  0000C6                     __pbssBANK0:
   295                           	opt stack 0
   296  0000C6                     _DataTableArrayOne:
   297                           	opt stack 0
   298  0000C6                     	ds	10
   299  0000D0                     _receiveArray:
   300                           	opt stack 0
   301  0000D0                     	ds	10
   302  0000DA                     _ProcessArray:
   303                           	opt stack 0
   304  0000DA                     	ds	30
   305                           tblptru	equ	0xFF8
   306                           tblptrh	equ	0xFF7
   307                           tblptrl	equ	0xFF6
   308                           tablat	equ	0xFF5
   309                           postinc0	equ	0xFEE
   310                           wreg	equ	0xFE8
   311                           postdec1	equ	0xFE5
   312                           fsr1l	equ	0xFE1
   313                           
   314                           	psect	dataBANK0
   315  0000F8                     __pdataBANK0:
   316                           	opt stack 0
   317  0000F8                     Start@F7240:
   318                           	opt stack 0
   319  0000F8                     	ds	5
   320                           tblptru	equ	0xFF8
   321                           tblptrh	equ	0xFF7
   322                           tblptrl	equ	0xFF6
   323                           tablat	equ	0xFF5
   324                           postinc0	equ	0xFEE
   325                           wreg	equ	0xFE8
   326                           postdec1	equ	0xFE5
   327                           fsr1l	equ	0xFE1
   328                           
   329                           	psect	bssBANK1
   330  000100                     __pbssBANK1:
   331                           	opt stack 0
   332  000100                     _output_buffer:
   333                           	opt stack 0
   334  000100                     	ds	106
   335  00016A                     _input_buffer:
   336                           	opt stack 0
   337  00016A                     	ds	106
   338  0001D4                     _ReciveArray:
   339                           	opt stack 0
   340  0001D4                     	ds	30
   341                           tblptru	equ	0xFF8
   342                           tblptrh	equ	0xFF7
   343                           tblptrl	equ	0xFF6
   344                           tablat	equ	0xFF5
   345                           postinc0	equ	0xFEE
   346                           wreg	equ	0xFE8
   347                           postdec1	equ	0xFE5
   348                           fsr1l	equ	0xFE1
   349                           
   350                           	psect	cstackBANK1
   351  0001F2                     __pcstackBANK1:
   352                           	opt stack 0
   353  0001F2                     receiveData@CS:
   354                           	opt stack 0
   355                           
   356                           ; 1 bytes @ 0x0
   357  0001F2                     	ds	1
   358  0001F3                     receiveData@i:
   359                           	opt stack 0
   360                           
   361                           ; 2 bytes @ 0x1
   362  0001F3                     	ds	2
   363  0001F5                     receiveData@Data:
   364                           	opt stack 0
   365                           
   366                           ; 1 bytes @ 0x3
   367  0001F5                     	ds	1
   368  0001F6                     receiveData@result:
   369                           	opt stack 0
   370                           
   371                           ; 3 bytes @ 0x4
   372  0001F6                     	ds	3
   373                           tblptru	equ	0xFF8
   374                           tblptrh	equ	0xFF7
   375                           tblptrl	equ	0xFF6
   376                           tablat	equ	0xFF5
   377                           postinc0	equ	0xFEE
   378                           wreg	equ	0xFE8
   379                           postdec1	equ	0xFE5
   380                           fsr1l	equ	0xFE1
   381                           
   382                           	psect	cstackBANK0
   383  000060                     __pcstackBANK0:
   384                           	opt stack 0
   385  000060                     cobs_encode@src_end_ptr:
   386                           	opt stack 0
   387  000060                     cobs_decode@src_end_ptr:
   388                           	opt stack 0
   389                           
   390                           ; 2 bytes @ 0x0
   391  000060                     	ds	2
   392  000062                     cobs_encode@src_byte:
   393                           	opt stack 0
   394  000062                     cobs_decode@dst_buf_end_ptr:
   395                           	opt stack 0
   396                           
   397                           ; 2 bytes @ 0x2
   398  000062                     	ds	1
   399  000063                     cobs_encode@dst_buf_end_ptr:
   400                           	opt stack 0
   401                           
   402                           ; 2 bytes @ 0x3
   403  000063                     	ds	1
   404  000064                     cobs_decode@src_byte:
   405                           	opt stack 0
   406                           
   407                           ; 1 bytes @ 0x4
   408  000064                     	ds	1
   409  000065                     cobs_encode@search_len:
   410                           	opt stack 0
   411  000065                     cobs_decode@i:
   412                           	opt stack 0
   413                           
   414                           ; 1 bytes @ 0x5
   415  000065                     	ds	1
   416  000066                     cobs_encode@dst_code_write_ptr:
   417                           	opt stack 0
   418  000066                     cobs_decode@remaining_bytes:
   419                           	opt stack 0
   420                           
   421                           ; 2 bytes @ 0x6
   422  000066                     	ds	2
   423  000068                     cobs_encode@dst_write_ptr:
   424                           	opt stack 0
   425  000068                     cobs_decode@dst_write_ptr:
   426                           	opt stack 0
   427                           
   428                           ; 2 bytes @ 0x8
   429  000068                     	ds	2
   430  00006A                     cobs_decode@len_code:
   431                           	opt stack 0
   432  00006A                     cobs_encode@result:
   433                           	opt stack 0
   434                           
   435                           ; 3 bytes @ 0xA
   436  00006A                     	ds	1
   437  00006B                     cobs_decode@result:
   438                           	opt stack 0
   439                           
   440                           ; 3 bytes @ 0xB
   441  00006B                     	ds	2
   442  00006D                     sendData@ComandByte:
   443                           	opt stack 0
   444                           
   445                           ; 1 bytes @ 0xD
   446  00006D                     	ds	1
   447  00006E                     sendData@DataTable:
   448                           	opt stack 0
   449                           
   450                           ; 1 bytes @ 0xE
   451  00006E                     	ds	1
   452  00006F                     sendData@DataTableIndex:
   453                           	opt stack 0
   454                           
   455                           ; 1 bytes @ 0xF
   456  00006F                     	ds	1
   457  000070                     sendData@DTS:
   458                           	opt stack 0
   459                           
   460                           ; 2 bytes @ 0x10
   461  000070                     	ds	2
   462  000072                     sendData@lenth:
   463                           	opt stack 0
   464                           
   465                           ; 2 bytes @ 0x12
   466  000072                     	ds	2
   467  000074                     sendData@COBSArray:
   468                           	opt stack 0
   469                           
   470                           ; 30 bytes @ 0x14
   471  000074                     	ds	30
   472  000092                     sendData@SendArray:
   473                           	opt stack 0
   474                           
   475                           ; 30 bytes @ 0x32
   476  000092                     	ds	30
   477  0000B0                     sendData@whereToSend:
   478                           	opt stack 0
   479                           
   480                           ; 1 bytes @ 0x50
   481  0000B0                     	ds	1
   482  0000B1                     sendData@CS:
   483                           	opt stack 0
   484                           
   485                           ; 1 bytes @ 0x51
   486  0000B1                     	ds	1
   487  0000B2                     sendData@result:
   488                           	opt stack 0
   489                           
   490                           ; 3 bytes @ 0x52
   491  0000B2                     	ds	3
   492  0000B5                     sendData@count:
   493                           	opt stack 0
   494                           
   495                           ; 2 bytes @ 0x55
   496  0000B5                     	ds	2
   497  0000B7                     sendData@i:
   498                           	opt stack 0
   499                           
   500                           ; 1 bytes @ 0x57
   501  0000B7                     	ds	1
   502  0000B8                     ComController@DTI:
   503                           	opt stack 0
   504                           
   505                           ; 2 bytes @ 0x58
   506  0000B8                     	ds	2
   507  0000BA                     ComController@lenth:
   508                           	opt stack 0
   509                           
   510                           ; 2 bytes @ 0x5A
   511  0000BA                     	ds	2
   512  0000BC                     ??_ComController:
   513                           
   514                           ; 1 bytes @ 0x5C
   515  0000BC                     	ds	1
   516  0000BD                     ComController@DataToSend:
   517                           	opt stack 0
   518                           
   519                           ; 4 bytes @ 0x5D
   520  0000BD                     	ds	4
   521  0000C1                     ??_receiveData:
   522                           
   523                           ; 1 bytes @ 0x61
   524  0000C1                     	ds	5
   525                           tblptru	equ	0xFF8
   526                           tblptrh	equ	0xFF7
   527                           tblptrl	equ	0xFF6
   528                           tablat	equ	0xFF5
   529                           postinc0	equ	0xFEE
   530                           wreg	equ	0xFE8
   531                           postdec1	equ	0xFE5
   532                           fsr1l	equ	0xFE1
   533                           
   534                           	psect	cstackCOMRAM
   535  000001                     __pcstackCOMRAM:
   536                           	opt stack 0
   537  000001                     ?i2_UART_buff_size:
   538                           	opt stack 0
   539  000001                     ?i2_UART_buff_modulo_inc:
   540                           	opt stack 0
   541  000001                     i2UART_buff_size@_this:
   542                           	opt stack 0
   543  000001                     i2UART_buff_modulo_inc@value:
   544                           	opt stack 0
   545                           
   546                           ; 2 bytes @ 0x0
   547  000001                     	ds	2
   548  000003                     i2UART_buff_modulo_inc@modulus:
   549                           	opt stack 0
   550                           
   551                           ; 2 bytes @ 0x2
   552  000003                     	ds	2
   553  000005                     i2UART_buff_modulo_inc@my_value:
   554                           	opt stack 0
   555                           
   556                           ; 2 bytes @ 0x4
   557  000005                     	ds	2
   558  000007                     i2UART_buff_put@_this:
   559                           	opt stack 0
   560  000007                     i2UART_buff_get@_this:
   561                           	opt stack 0
   562                           
   563                           ; 2 bytes @ 0x6
   564  000007                     	ds	2
   565  000009                     ??i2_UART_buff_get:
   566  000009                     i2UART_buff_put@c:
   567                           	opt stack 0
   568                           
   569                           ; 1 bytes @ 0x8
   570  000009                     	ds	1
   571  00000A                     ??i2_UART_buff_put:
   572                           
   573                           ; 1 bytes @ 0x9
   574  00000A                     	ds	1
   575  00000B                     i2UART_buff_get@c:
   576                           	opt stack 0
   577                           
   578                           ; 1 bytes @ 0xA
   579  00000B                     	ds	1
   580  00000C                     EUSART1_Receive_ISR@data:
   581                           	opt stack 0
   582                           
   583                           ; 1 bytes @ 0xB
   584  00000C                     	ds	1
   585  00000D                     ??_INTERRUPT_InterruptManager:
   586                           
   587                           ; 1 bytes @ 0xC
   588  00000D                     	ds	14
   589  00001B                     ?_UART_buff_modulo_inc:
   590                           	opt stack 0
   591  00001B                     ?_UART_buff_size:
   592                           	opt stack 0
   593  00001B                     ?_cobs_encode:
   594                           	opt stack 0
   595  00001B                     ?_cobs_decode:
   596                           	opt stack 0
   597  00001B                     ?_GetTime:
   598                           	opt stack 0
   599  00001B                     GetDataDict@DataTableIndex:
   600                           	opt stack 0
   601  00001B                     SetDataDict@DataTableIndex:
   602                           	opt stack 0
   603  00001B                     UART_buff_size@_this:
   604                           	opt stack 0
   605  00001B                     UART_buff_modulo_inc@value:
   606                           	opt stack 0
   607  00001B                     Delay@wait:
   608                           	opt stack 0
   609  00001B                     cobs_encode@dst_buf_ptr:
   610                           	opt stack 0
   611  00001B                     cobs_decode@dst_buf_ptr:
   612                           	opt stack 0
   613  00001B                     CRC8@data:
   614                           	opt stack 0
   615  00001B                     memset@p1:
   616                           	opt stack 0
   617                           
   618                           ; 2 bytes @ 0x1A
   619  00001B                     	ds	1
   620  00001C                     GetDataDict@DataArray:
   621                           	opt stack 0
   622  00001C                     SetDataDict@DataArray:
   623                           	opt stack 0
   624                           
   625                           ; 2 bytes @ 0x1B
   626  00001C                     	ds	1
   627  00001D                     ??_Delay:
   628  00001D                     ?_Receive_available:
   629                           	opt stack 0
   630  00001D                     CRC8@len:
   631                           	opt stack 0
   632  00001D                     UART_buff_modulo_inc@modulus:
   633                           	opt stack 0
   634  00001D                     cobs_encode@dst_buf_len:
   635                           	opt stack 0
   636  00001D                     cobs_decode@dst_buf_len:
   637                           	opt stack 0
   638  00001D                     memset@c:
   639                           	opt stack 0
   640                           
   641                           ; 2 bytes @ 0x1C
   642  00001D                     	ds	1
   643  00001E                     GetDataDict@numbofbytes:
   644                           	opt stack 0
   645  00001E                     SetDataDict@numbofbytes:
   646                           	opt stack 0
   647  00001E                     CRC8@sum:
   648                           	opt stack 0
   649  00001E                     Delay@x:
   650                           	opt stack 0
   651                           
   652                           ; 2 bytes @ 0x1D
   653  00001E                     	ds	1
   654  00001F                     GetDataDict@Error:
   655                           	opt stack 0
   656  00001F                     SetDataDict@Error:
   657                           	opt stack 0
   658  00001F                     CRC8@extract:
   659                           	opt stack 0
   660  00001F                     UART_buff_modulo_inc@my_value:
   661                           	opt stack 0
   662  00001F                     cobs_encode@src_ptr:
   663                           	opt stack 0
   664  00001F                     cobs_decode@src_ptr:
   665                           	opt stack 0
   666  00001F                     memset@n:
   667                           	opt stack 0
   668                           
   669                           ; 2 bytes @ 0x1E
   670  00001F                     	ds	1
   671  000020                     GetDataDict@DataTable:
   672                           	opt stack 0
   673  000020                     SetDataDict@DataTable:
   674                           	opt stack 0
   675  000020                     CRC8@tempI:
   676                           	opt stack 0
   677                           
   678                           ; 1 bytes @ 0x1F
   679  000020                     	ds	1
   680  000021                     GetDataDict@DataCount:
   681                           	opt stack 0
   682  000021                     SetDataDict@DataCount:
   683                           	opt stack 0
   684  000021                     CRC8@crc:
   685                           	opt stack 0
   686  000021                     UART_buff_put@_this:
   687                           	opt stack 0
   688  000021                     UART_buff_get@_this:
   689                           	opt stack 0
   690  000021                     cobs_encode@src_len:
   691                           	opt stack 0
   692  000021                     cobs_decode@src_len:
   693                           	opt stack 0
   694  000021                     memset@p:
   695                           	opt stack 0
   696                           
   697                           ; 2 bytes @ 0x20
   698  000021                     	ds	1
   699  000022                     GetDataDict@ReturnCounter:
   700                           	opt stack 0
   701  000022                     SetDataDict@ReturnCounter:
   702                           	opt stack 0
   703                           
   704                           ; 1 bytes @ 0x21
   705  000022                     	ds	1
   706  000023                     ??_ReadFaults:
   707  000023                     ??_UART_buff_get:
   708  000023                     ??_cobs_encode:
   709  000023                     ??_cobs_decode:
   710  000023                     UART_buff_put@c:
   711                           	opt stack 0
   712  000023                     UART_buff_init@_this:
   713                           	opt stack 0
   714                           
   715                           ; 2 bytes @ 0x22
   716  000023                     	ds	1
   717  000024                     ??_UART_buff_put:
   718  000024                     ReadFaults@Data:
   719                           	opt stack 0
   720                           
   721                           ; 4 bytes @ 0x23
   722  000024                     	ds	1
   723  000025                     UART_buff_get@c:
   724                           	opt stack 0
   725  000025                     Start@Data:
   726                           	opt stack 0
   727                           
   728                           ; 5 bytes @ 0x24
   729  000025                     	ds	1
   730  000026                     Send_put@_data:
   731                           	opt stack 0
   732                           
   733                           ; 1 bytes @ 0x25
   734  000026                     	ds	1
   735  000027                     ??_sendData:
   736                           
   737                           ; 1 bytes @ 0x26
   738  000027                     	ds	4
   739  00002B                     tblptru	equ	0xFF8
   740                           tblptrh	equ	0xFF7
   741                           tblptrl	equ	0xFF6
   742                           tablat	equ	0xFF5
   743                           postinc0	equ	0xFEE
   744                           wreg	equ	0xFE8
   745                           postdec1	equ	0xFE5
   746                           fsr1l	equ	0xFE1
   747                           
   748                           ; 1 bytes @ 0x2A
   749 ;;
   750 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   751 ;;
   752 ;; *************** function _main *****************
   753 ;; Defined at:
   754 ;;		line 24 in file "Main.c"
   755 ;; Parameters:    Size  Location     Type
   756 ;;		None
   757 ;; Auto vars:     Size  Location     Type
   758 ;;		None
   759 ;; Return value:  Size  Location     Type
   760 ;;                  1    wreg      void 
   761 ;; Registers used:
   762 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   763 ;; Tracked objects:
   764 ;;		On entry : 0/0
   765 ;;		On exit  : 0/0
   766 ;;		Unchanged: 0/0
   767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   768 ;;      Params:         0       0       0       0       0       0       0
   769 ;;      Locals:         0       0       0       0       0       0       0
   770 ;;      Temps:          0       0       0       0       0       0       0
   771 ;;      Totals:         0       0       0       0       0       0       0
   772 ;;Total ram usage:        0 bytes
   773 ;; Hardware stack levels required when called:   11
   774 ;; This function calls:
   775 ;;		_GetTime
   776 ;;		_ReadFaults
   777 ;;		_SetTime
   778 ;;		_Start
   779 ;;		_updateComms
   780 ;; This function is called by:
   781 ;;		Startup code after reset
   782 ;; This function uses a non-reentrant model
   783 ;;
   784                           
   785                           	psect	text0
   786  000E4C                     __ptext0:
   787                           	opt stack 0
   788  000E4C                     _main:
   789                           	opt stack 20
   790                           
   791                           ;Main.c: 25: Start();
   792                           
   793                           ;incstack = 0
   794  000E4C  ECEE  F005         	call	_Start	;wreg free
   795                           
   796                           ;Main.c: 26: LATDbits.LATD4 = 0;
   797  000E50  988C               	bcf	3980,4,c	;volatile
   798  000E52                     l36:
   799                           
   800                           ;Main.c: 28: updateComms();
   801  000E52  ECFB  F007         	call	_updateComms	;wreg free
   802                           
   803                           ;Main.c: 31: if(GetTime() > 5){
   804  000E56  ECEB  F007         	call	_GetTime	;wreg free
   805  000E5A  BE1E               	btfsc	?_GetTime+3,7,c
   806  000E5C  D7FA               	goto	l36
   807  000E5E  501E               	movf	?_GetTime+3,w,c
   808  000E60  101D               	iorwf	?_GetTime+2,w,c
   809  000E62  101C               	iorwf	?_GetTime+1,w,c
   810  000E64  E104               	bnz	u1580
   811  000E66  0E06               	movlw	6
   812  000E68  5C1B               	subwf	?_GetTime,w,c
   813  000E6A  A0D8               	btfss	status,0,c
   814  000E6C  D7F2               	goto	l36
   815  000E6E                     u1580:
   816                           
   817                           ;Main.c: 32: ReadFaults();
   818  000E6E  EC68  F006         	call	_ReadFaults	;wreg free
   819                           
   820                           ;Main.c: 33: SetTime();
   821  000E72  ECE2  F007         	call	_SetTime	;wreg free
   822  000E76  D7ED               	goto	l36
   823  000E78                     __end_of_main:
   824                           	opt stack 0
   825                           tblptru	equ	0xFF8
   826                           tblptrh	equ	0xFF7
   827                           tblptrl	equ	0xFF6
   828                           tablat	equ	0xFF5
   829                           postinc0	equ	0xFEE
   830                           wreg	equ	0xFE8
   831                           postdec1	equ	0xFE5
   832                           fsr1l	equ	0xFE1
   833                           status	equ	0xFD8
   834                           
   835 ;; *************** function _updateComms *****************
   836 ;; Defined at:
   837 ;;		line 16 in file "Communications.c"
   838 ;; Parameters:    Size  Location     Type
   839 ;;		None
   840 ;; Auto vars:     Size  Location     Type
   841 ;;		None
   842 ;; Return value:  Size  Location     Type
   843 ;;                  1    wreg      void 
   844 ;; Registers used:
   845 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   846 ;; Tracked objects:
   847 ;;		On entry : 0/0
   848 ;;		On exit  : 0/0
   849 ;;		Unchanged: 0/0
   850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   851 ;;      Params:         0       0       0       0       0       0       0
   852 ;;      Locals:         0       0       0       0       0       0       0
   853 ;;      Temps:          0       0       0       0       0       0       0
   854 ;;      Totals:         0       0       0       0       0       0       0
   855 ;;Total ram usage:        0 bytes
   856 ;; Hardware stack levels used:    1
   857 ;; Hardware stack levels required when called:   10
   858 ;; This function calls:
   859 ;;		_receiveData
   860 ;; This function is called by:
   861 ;;		_main
   862 ;; This function uses a non-reentrant model
   863 ;;
   864                           
   865                           	psect	text1
   866  000FF6                     __ptext1:
   867                           	opt stack 0
   868  000FF6                     _updateComms:
   869                           	opt stack 20
   870                           
   871                           ;Communications.c: 17: if (receiveData()) {
   872                           
   873                           ;incstack = 0
   874  000FF6  ECE6  F003         	call	_receiveData	;wreg free
   875  000FFA  0012               	return	
   876  000FFC                     __end_of_updateComms:
   877                           	opt stack 0
   878                           tblptru	equ	0xFF8
   879                           tblptrh	equ	0xFF7
   880                           tblptrl	equ	0xFF6
   881                           tablat	equ	0xFF5
   882                           postinc0	equ	0xFEE
   883                           wreg	equ	0xFE8
   884                           postdec1	equ	0xFE5
   885                           fsr1l	equ	0xFE1
   886                           status	equ	0xFD8
   887                           
   888 ;; *************** function _receiveData *****************
   889 ;; Defined at:
   890 ;;		line 82 in file "CarCom.c"
   891 ;; Parameters:    Size  Location     Type
   892 ;;		None
   893 ;; Auto vars:     Size  Location     Type
   894 ;;  result          3    4[BANK1 ] struct .
   895 ;;  i               2    1[BANK1 ] int 
   896 ;;  Data            1    3[BANK1 ] unsigned char 
   897 ;;  CS              1    0[BANK1 ] unsigned char 
   898 ;; Return value:  Size  Location     Type
   899 ;;                  1    wreg      unsigned char 
   900 ;; Registers used:
   901 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   902 ;; Tracked objects:
   903 ;;		On entry : 0/0
   904 ;;		On exit  : 0/0
   905 ;;		Unchanged: 0/0
   906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   907 ;;      Params:         0       0       0       0       0       0       0
   908 ;;      Locals:         0       0       7       0       0       0       0
   909 ;;      Temps:          0       5       0       0       0       0       0
   910 ;;      Totals:         0       5       7       0       0       0       0
   911 ;;Total ram usage:       12 bytes
   912 ;; Hardware stack levels used:    1
   913 ;; Hardware stack levels required when called:    9
   914 ;; This function calls:
   915 ;;		_CRC8
   916 ;;		_ComController
   917 ;;		_Receive_available
   918 ;;		_Receive_get
   919 ;;		_cobs_decode
   920 ;; This function is called by:
   921 ;;		_updateComms
   922 ;; This function uses a non-reentrant model
   923 ;;
   924                           
   925                           	psect	text2
   926  0007CC                     __ptext2:
   927                           	opt stack 0
   928  0007CC                     _receiveData:
   929                           	opt stack 20
   930                           
   931                           ;CarCom.c: 84: if(Receive_available()>5){
   932                           
   933                           ;incstack = 0
   934  0007CC  ECC1  F007         	call	_Receive_available	;wreg free
   935  0007D0  BE1E               	btfsc	?_Receive_available+1,7,c
   936  0007D2  D07E               	goto	l2521
   937  0007D4  501E               	movf	?_Receive_available+1,w,c
   938  0007D6  E104               	bnz	u1540
   939  0007D8  0E06               	movlw	6
   940  0007DA  5C1D               	subwf	?_Receive_available,w,c
   941  0007DC  A0D8               	btfss	status,0,c
   942  0007DE  D078               	goto	l2521
   943  0007E0                     u1540:
   944                           
   945                           ;CarCom.c: 85: if(Receive_get() == 8){
   946  0007E0  ECF4  F007         	call	_Receive_get	;wreg free
   947  0007E4  0A08               	xorlw	8
   948  0007E6  A4D8               	btfss	status,2,c
   949  0007E8  D073               	goto	l2521
   950                           
   951                           ;CarCom.c: 86: int i = 0;
   952  0007EA  0E00               	movlw	0
   953  0007EC  0101               	movlb	1	; () banked
   954  0007EE  6FF4               	movwf	(receiveData@i+1)& (0+255),b
   955  0007F0  0E00               	movlw	0
   956  0007F2  6FF3               	movwf	receiveData@i& (0+255),b
   957                           
   958                           ;CarCom.c: 87: unsigned char Data = 0;
   959  0007F4  0E00               	movlw	0
   960  0007F6  0101               	movlb	1	; () banked
   961  0007F8  6FF5               	movwf	receiveData@Data& (0+255),b
   962  0007FA                     l2499:
   963                           
   964                           ; BSR set to: 1
   965                           ;CarCom.c: 89: Data = Receive_get();
   966  0007FA  ECF4  F007         	call	_Receive_get	;wreg free
   967  0007FE  0101               	movlb	1	; () banked
   968  000800  6FF5               	movwf	receiveData@Data& (0+255),b
   969                           
   970                           ; BSR set to: 1
   971                           ;CarCom.c: 90: ReciveArray[i] = Data;
   972  000802  0ED4               	movlw	low _ReciveArray
   973  000804  0101               	movlb	1	; () banked
   974  000806  25F3               	addwf	receiveData@i& (0+255),w,b
   975  000808  6ED9               	movwf	fsr2l,c
   976  00080A  0E01               	movlw	high _ReciveArray
   977  00080C  0101               	movlb	1	; () banked
   978  00080E  21F4               	addwfc	(receiveData@i+1)& (0+255),w,b
   979  000810  6EDA               	movwf	fsr2h,c
   980  000812  C1F5  FFDF         	movff	receiveData@Data,indf2
   981                           
   982                           ; BSR set to: 1
   983                           ;CarCom.c: 91: _delay((unsigned long)((100)*(16000000/4000000.0)));
   984  000816  0E85               	movlw	133
   985  000818                     u1597:
   986  000818  2EE8               	decfsz	wreg,f,c
   987  00081A  D7FE               	bra	u1597
   988  00081C  F000               	nop	
   989                           
   990                           ;CarCom.c: 92: i++;
   991  00081E  0101               	movlb	1	; () banked
   992  000820  4BF3               	infsnz	receiveData@i& (0+255),f,b
   993  000822  2BF4               	incf	(receiveData@i+1)& (0+255),f,b
   994                           
   995                           ; BSR set to: 1
   996                           ;CarCom.c: 93: }while(Data != 0x00);
   997  000824  0101               	movlb	1	; () banked
   998  000826  51F5               	movf	receiveData@Data& (0+255),w,b
   999  000828  0101               	movlb	1	; () banked
  1000  00082A  A4D8               	btfss	status,2,c
  1001  00082C  D7E6               	goto	l2499
  1002                           
  1003                           ; BSR set to: 1
  1004                           ;CarCom.c: 95: cobs_decode_result result;
  1005                           ;CarCom.c: 97: result = cobs_decode(ProcessArray, sizeof(ProcessArray), ReciveArray, i);
  1006                           
  1007                           ; BSR set to: 1
  1008  00082E  0EDA               	movlw	low _ProcessArray
  1009  000830  6E1B               	movwf	cobs_decode@dst_buf_ptr,c
  1010  000832  0E00               	movlw	high _ProcessArray
  1011  000834  6E1C               	movwf	cobs_decode@dst_buf_ptr+1,c
  1012  000836  0E00               	movlw	0
  1013  000838  6E1E               	movwf	cobs_decode@dst_buf_len+1,c
  1014  00083A  0E1E               	movlw	30
  1015  00083C  6E1D               	movwf	cobs_decode@dst_buf_len,c
  1016  00083E  0ED4               	movlw	low _ReciveArray
  1017  000840  6E1F               	movwf	cobs_decode@src_ptr,c
  1018  000842  0E01               	movlw	high _ReciveArray
  1019  000844  6E20               	movwf	cobs_decode@src_ptr+1,c
  1020  000846  C1F3  F021         	movff	receiveData@i,cobs_decode@src_len
  1021  00084A  C1F4  F022         	movff	receiveData@i+1,cobs_decode@src_len+1
  1022  00084E  EC52  F000         	call	_cobs_decode	;wreg free
  1023  000852  C01B  F1F6         	movff	?_cobs_decode,receiveData@result
  1024  000856  C01C  F1F7         	movff	?_cobs_decode+1,receiveData@result+1
  1025  00085A  C01D  F1F8         	movff	?_cobs_decode+2,receiveData@result+2
  1026                           
  1027                           ;CarCom.c: 99: unsigned char CS = CRC8(ProcessArray, result.out_len-1);
  1028  00085E  0EDA               	movlw	low _ProcessArray
  1029  000860  6E1B               	movwf	CRC8@data,c
  1030  000862  0E00               	movlw	high _ProcessArray
  1031  000864  6E1C               	movwf	CRC8@data+1,c
  1032  000866  0101               	movlb	1	; () banked
  1033  000868  05F6               	decf	receiveData@result& (0+255),w,b
  1034  00086A  6E1D               	movwf	CRC8@len,c
  1035  00086C  EC99  F006         	call	_CRC8	;wreg free
  1036  000870  0101               	movlb	1	; () banked
  1037  000872  6FF2               	movwf	receiveData@CS& (0+255),b
  1038                           
  1039                           ; BSR set to: 1
  1040                           ;CarCom.c: 101: if(ProcessArray[result.out_len-1] == CS){
  1041  000874  0EFF               	movlw	255
  1042  000876  0100               	movlb	0	; () banked
  1043  000878  6FC1               	movwf	??_receiveData& (0+255),b
  1044  00087A  0EFF               	movlw	255
  1045  00087C  0100               	movlb	0	; () banked
  1046  00087E  6FC2               	movwf	(??_receiveData+1)& (0+255),b
  1047  000880  C1F6  F0C3         	movff	receiveData@result,??_receiveData+2
  1048  000884  C1F7  F0C4         	movff	receiveData@result+1,??_receiveData+3
  1049  000888  0100               	movlb	0	; () banked
  1050  00088A  51C1               	movf	??_receiveData& (0+255),w,b
  1051  00088C  0100               	movlb	0	; () banked
  1052  00088E  27C3               	addwf	(??_receiveData+2)& (0+255),f,b
  1053  000890  0100               	movlb	0	; () banked
  1054  000892  51C2               	movf	(??_receiveData+1)& (0+255),w,b
  1055  000894  0100               	movlb	0	; () banked
  1056  000896  23C4               	addwfc	(??_receiveData+3)& (0+255),f,b
  1057  000898  0EDA               	movlw	low _ProcessArray
  1058  00089A  0100               	movlb	0	; () banked
  1059  00089C  25C3               	addwf	(??_receiveData+2)& (0+255),w,b
  1060  00089E  6ED9               	movwf	fsr2l,c
  1061  0008A0  0E00               	movlw	high _ProcessArray
  1062  0008A2  0100               	movlb	0	; () banked
  1063  0008A4  21C4               	addwfc	(??_receiveData+3)& (0+255),w,b
  1064  0008A6  6EDA               	movwf	fsr2h,c
  1065  0008A8  0101               	movlb	1	; () banked
  1066  0008AA  51F2               	movf	receiveData@CS& (0+255),w,b
  1067  0008AC  18DE               	xorwf	postinc2,w,c
  1068  0008AE  A4D8               	btfss	status,2,c
  1069  0008B0  D00F               	goto	l2521
  1070                           
  1071                           ; BSR set to: 1
  1072                           ;CarCom.c: 102: LATAbits.LATA3 ^= 1;
  1073  0008B2  7689               	btg	3977,3,c	;volatile
  1074                           
  1075                           ; BSR set to: 1
  1076                           ;CarCom.c: 103: ComController(ProcessArray,result.out_len);
  1077  0008B4  0EDA               	movlw	low _ProcessArray
  1078  0008B6  0100               	movlb	0	; () banked
  1079  0008B8  6FB8               	movwf	ComController@DTI& (0+255),b
  1080  0008BA  0E00               	movlw	high _ProcessArray
  1081  0008BC  0100               	movlb	0	; () banked
  1082  0008BE  6FB9               	movwf	(ComController@DTI+1)& (0+255),b
  1083  0008C0  C1F6  F0BA         	movff	receiveData@result,ComController@lenth
  1084  0008C4  C1F7  F0BB         	movff	receiveData@result+1,ComController@lenth+1
  1085  0008C8  EC6A  F004         	call	_ComController	;wreg free
  1086                           
  1087                           ;CarCom.c: 104: return 1;
  1088  0008CC  0E01               	movlw	1
  1089  0008CE  0012               	return	
  1090  0008D0                     l2521:
  1091                           
  1092                           ;CarCom.c: 114: }
  1093                           ;CarCom.c: 116: return 0;
  1094  0008D0  0E00               	movlw	0
  1095  0008D2  0012               	return	
  1096  0008D4                     __end_of_receiveData:
  1097                           	opt stack 0
  1098                           tblptru	equ	0xFF8
  1099                           tblptrh	equ	0xFF7
  1100                           tblptrl	equ	0xFF6
  1101                           tablat	equ	0xFF5
  1102                           postinc0	equ	0xFEE
  1103                           wreg	equ	0xFE8
  1104                           postdec1	equ	0xFE5
  1105                           fsr1l	equ	0xFE1
  1106                           indf2	equ	0xFDF
  1107                           postinc2	equ	0xFDE
  1108                           fsr2h	equ	0xFDA
  1109                           fsr2l	equ	0xFD9
  1110                           status	equ	0xFD8
  1111                           
  1112 ;; *************** function _cobs_decode *****************
  1113 ;; Defined at:
  1114 ;;		line 115 in file "COBS.c"
  1115 ;; Parameters:    Size  Location     Type
  1116 ;;  dst_buf_ptr     2   26[COMRAM] PTR unsigned char 
  1117 ;;		 -> ProcessArray(30), 
  1118 ;;  dst_buf_len     2   28[COMRAM] unsigned int 
  1119 ;;  src_ptr         2   30[COMRAM] PTR const unsigned char 
  1120 ;;		 -> ReciveArray(30), 
  1121 ;;  src_len         2   32[COMRAM] unsigned int 
  1122 ;; Auto vars:     Size  Location     Type
  1123 ;;  result          3   11[BANK0 ] struct .
  1124 ;;  dst_write_pt    2    8[BANK0 ] PTR unsigned char 
  1125 ;;		 -> ProcessArray(30), 
  1126 ;;  remaining_by    2    6[BANK0 ] unsigned int 
  1127 ;;  dst_buf_end_    2    2[BANK0 ] PTR unsigned char 
  1128 ;;		 -> ProcessArray(30), 
  1129 ;;  src_end_ptr     2    0[BANK0 ] PTR const unsigned char 
  1130 ;;		 -> ReciveArray(30), 
  1131 ;;  len_code        1   10[BANK0 ] unsigned char 
  1132 ;;  i               1    5[BANK0 ] unsigned char 
  1133 ;;  src_byte        1    4[BANK0 ] unsigned char 
  1134 ;; Return value:  Size  Location     Type
  1135 ;;                  3   26[COMRAM] struct .
  1136 ;; Registers used:
  1137 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1138 ;; Tracked objects:
  1139 ;;		On entry : 0/0
  1140 ;;		On exit  : 0/0
  1141 ;;		Unchanged: 0/0
  1142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1143 ;;      Params:         8       0       0       0       0       0       0
  1144 ;;      Locals:         0      14       0       0       0       0       0
  1145 ;;      Temps:          2       0       0       0       0       0       0
  1146 ;;      Totals:        10      14       0       0       0       0       0
  1147 ;;Total ram usage:       24 bytes
  1148 ;; Hardware stack levels used:    1
  1149 ;; Hardware stack levels required when called:    4
  1150 ;; This function calls:
  1151 ;;		Nothing
  1152 ;; This function is called by:
  1153 ;;		_receiveData
  1154 ;; This function uses a non-reentrant model
  1155 ;;
  1156                           
  1157                           	psect	text3
  1158  0000A4                     __ptext3:
  1159                           	opt stack 0
  1160  0000A4                     _cobs_decode:
  1161                           	opt stack 24
  1162                           
  1163                           ;COBS.c: 117: cobs_decode_result result = { 0, COBS_DECODE_OK };
  1164                           
  1165                           ;incstack = 0
  1166  0000A4  C036  F06B         	movff	cobs_decode@F192,cobs_decode@result
  1167  0000A8  C037  F06C         	movff	cobs_decode@F192+1,cobs_decode@result+1
  1168  0000AC  C038  F06D         	movff	cobs_decode@F192+2,cobs_decode@result+2
  1169                           
  1170                           ;COBS.c: 118: const uint8_t * src_end_ptr = src_ptr + src_len;
  1171  0000B0  5021               	movf	cobs_decode@src_len,w,c
  1172  0000B2  241F               	addwf	cobs_decode@src_ptr,w,c
  1173  0000B4  0100               	movlb	0	; () banked
  1174  0000B6  6F60               	movwf	cobs_decode@src_end_ptr& (0+255),b
  1175  0000B8  5022               	movf	cobs_decode@src_len+1,w,c
  1176  0000BA  2020               	addwfc	cobs_decode@src_ptr+1,w,c
  1177  0000BC  0100               	movlb	0	; () banked
  1178  0000BE  6F61               	movwf	(cobs_decode@src_end_ptr+1)& (0+255),b
  1179                           
  1180                           ;COBS.c: 119: uint8_t * dst_buf_end_ptr = dst_buf_ptr + dst_buf_len;
  1181  0000C0  501D               	movf	cobs_decode@dst_buf_len,w,c
  1182  0000C2  241B               	addwf	cobs_decode@dst_buf_ptr,w,c
  1183  0000C4  0100               	movlb	0	; () banked
  1184  0000C6  6F62               	movwf	cobs_decode@dst_buf_end_ptr& (0+255),b
  1185  0000C8  501E               	movf	cobs_decode@dst_buf_len+1,w,c
  1186  0000CA  201C               	addwfc	cobs_decode@dst_buf_ptr+1,w,c
  1187  0000CC  0100               	movlb	0	; () banked
  1188  0000CE  6F63               	movwf	(cobs_decode@dst_buf_end_ptr+1)& (0+255),b
  1189                           
  1190                           ;COBS.c: 120: uint8_t * dst_write_ptr = dst_buf_ptr;
  1191  0000D0  C01B  F068         	movff	cobs_decode@dst_buf_ptr,cobs_decode@dst_write_ptr
  1192  0000D4  C01C  F069         	movff	cobs_decode@dst_buf_ptr+1,cobs_decode@dst_write_ptr+1
  1193                           
  1194                           ;COBS.c: 121: size_t remaining_bytes;
  1195                           ;COBS.c: 122: uint8_t src_byte;
  1196                           ;COBS.c: 123: uint8_t i;
  1197                           ;COBS.c: 124: uint8_t len_code;
  1198                           ;COBS.c: 128: if ((dst_buf_ptr == (0)) || (src_ptr == (0)))
  1199  0000D8  501B               	movf	cobs_decode@dst_buf_ptr,w,c
  1200  0000DA  101C               	iorwf	cobs_decode@dst_buf_ptr+1,w,c
  1201  0000DC  B4D8               	btfsc	status,2,c
  1202  0000DE  D004               	goto	l2405
  1203                           
  1204                           ; BSR set to: 0
  1205  0000E0  501F               	movf	cobs_decode@src_ptr,w,c
  1206  0000E2  1020               	iorwf	cobs_decode@src_ptr+1,w,c
  1207  0000E4  A4D8               	btfss	status,2,c
  1208  0000E6  D00A               	goto	l2411
  1209  0000E8                     l2405:
  1210                           
  1211                           ; BSR set to: 0
  1212                           ;COBS.c: 129: {
  1213                           ;COBS.c: 130: result.status = COBS_DECODE_NULL_POINTER;
  1214  0000E8  0E01               	movlw	1
  1215  0000EA  0100               	movlb	0	; () banked
  1216  0000EC  6F6D               	movwf	(cobs_decode@result+2)& (0+255),b
  1217                           
  1218                           ; BSR set to: 0
  1219                           ;COBS.c: 131: return result;
  1220  0000EE  C06B  F01B         	movff	cobs_decode@result,?_cobs_decode
  1221  0000F2  C06C  F01C         	movff	cobs_decode@result+1,?_cobs_decode+1
  1222  0000F6  C06D  F01D         	movff	cobs_decode@result+2,?_cobs_decode+2
  1223                           
  1224                           ; BSR set to: 0
  1225  0000FA  0012               	return	
  1226  0000FC                     l2411:
  1227                           
  1228                           ; BSR set to: 0
  1229                           ;COBS.c: 132: }
  1230                           ;COBS.c: 134: if (src_len != 0)
  1231  0000FC  5021               	movf	cobs_decode@src_len,w,c
  1232  0000FE  1022               	iorwf	cobs_decode@src_len+1,w,c
  1233  000100  B4D8               	btfsc	status,2,c
  1234  000102  D096               	goto	l2475
  1235  000104                     l2413:
  1236                           
  1237                           ; BSR set to: 0
  1238                           ;COBS.c: 137: {
  1239                           ;COBS.c: 138: len_code = *src_ptr++;
  1240  000104  C01F  FFD9         	movff	cobs_decode@src_ptr,fsr2l
  1241  000108  C020  FFDA         	movff	cobs_decode@src_ptr+1,fsr2h
  1242  00010C  50DF               	movf	indf2,w,c
  1243  00010E  0100               	movlb	0	; () banked
  1244  000110  6F6A               	movwf	cobs_decode@len_code& (0+255),b
  1245                           
  1246                           ; BSR set to: 0
  1247  000112  4A1F               	infsnz	cobs_decode@src_ptr,f,c
  1248  000114  2A20               	incf	cobs_decode@src_ptr+1,f,c
  1249                           
  1250                           ; BSR set to: 0
  1251                           ;COBS.c: 139: if (len_code == 0)
  1252  000116  0100               	movlb	0	; () banked
  1253  000118  516A               	movf	cobs_decode@len_code& (0+255),w,b
  1254  00011A  0100               	movlb	0	; () banked
  1255  00011C  A4D8               	btfss	status,2,c
  1256  00011E  D003               	goto	l2421
  1257                           
  1258                           ; BSR set to: 0
  1259                           ;COBS.c: 140: {
  1260                           ;COBS.c: 141: result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
  1261  000120  0100               	movlb	0	; () banked
  1262  000122  856D               	bsf	(cobs_decode@result+2)& (0+255),2,b
  1263                           
  1264                           ;COBS.c: 142: break;
  1265  000124  D085               	goto	l2475
  1266  000126                     l2421:
  1267                           
  1268                           ; BSR set to: 0
  1269                           ;COBS.c: 143: }
  1270                           ;COBS.c: 144: len_code--;
  1271  000126  0100               	movlb	0	; () banked
  1272  000128  076A               	decf	cobs_decode@len_code& (0+255),f,b
  1273                           
  1274                           ; BSR set to: 0
  1275                           ;COBS.c: 147: remaining_bytes = src_end_ptr - src_ptr;
  1276  00012A  C01F  F023         	movff	cobs_decode@src_ptr,??_cobs_decode
  1277  00012E  C020  F024         	movff	cobs_decode@src_ptr+1,??_cobs_decode+1
  1278  000132  1E23               	comf	??_cobs_decode,f,c
  1279  000134  1E24               	comf	??_cobs_decode+1,f,c
  1280  000136  4A23               	infsnz	??_cobs_decode,f,c
  1281  000138  2A24               	incf	??_cobs_decode+1,f,c
  1282  00013A  0100               	movlb	0	; () banked
  1283  00013C  5160               	movf	cobs_decode@src_end_ptr& (0+255),w,b
  1284  00013E  2423               	addwf	??_cobs_decode,w,c
  1285  000140  0100               	movlb	0	; () banked
  1286  000142  6F66               	movwf	cobs_decode@remaining_bytes& (0+255),b
  1287  000144  0100               	movlb	0	; () banked
  1288  000146  5161               	movf	(cobs_decode@src_end_ptr+1)& (0+255),w,b
  1289  000148  2024               	addwfc	??_cobs_decode+1,w,c
  1290  00014A  0100               	movlb	0	; () banked
  1291  00014C  6F67               	movwf	(cobs_decode@remaining_bytes+1)& (0+255),b
  1292                           
  1293                           ; BSR set to: 0
  1294                           ;COBS.c: 148: if (len_code > remaining_bytes)
  1295  00014E  0100               	movlb	0	; () banked
  1296  000150  516A               	movf	cobs_decode@len_code& (0+255),w,b
  1297  000152  0100               	movlb	0	; () banked
  1298  000154  5D66               	subwf	cobs_decode@remaining_bytes& (0+255),w,b
  1299  000156  0E00               	movlw	0
  1300  000158  5967               	subwfb	(cobs_decode@remaining_bytes+1)& (0+255),w,b
  1301  00015A  B0D8               	btfsc	status,0,c
  1302  00015C  D004               	goto	l2431
  1303                           
  1304                           ; BSR set to: 0
  1305                           ;COBS.c: 149: {
  1306                           ;COBS.c: 150: result.status |= COBS_DECODE_INPUT_TOO_SHORT;
  1307  00015E  0100               	movlb	0	; () banked
  1308  000160  876D               	bsf	(cobs_decode@result+2)& (0+255),3,b
  1309                           
  1310                           ; BSR set to: 0
  1311                           ;COBS.c: 151: len_code = remaining_bytes;
  1312  000162  C066  F06A         	movff	cobs_decode@remaining_bytes,cobs_decode@len_code
  1313  000166                     l2431:
  1314                           
  1315                           ; BSR set to: 0
  1316                           ;COBS.c: 152: }
  1317                           ;COBS.c: 155: remaining_bytes = dst_buf_end_ptr - dst_write_ptr;
  1318  000166  C068  F023         	movff	cobs_decode@dst_write_ptr,??_cobs_decode
  1319  00016A  C069  F024         	movff	cobs_decode@dst_write_ptr+1,??_cobs_decode+1
  1320  00016E  1E23               	comf	??_cobs_decode,f,c
  1321  000170  1E24               	comf	??_cobs_decode+1,f,c
  1322  000172  4A23               	infsnz	??_cobs_decode,f,c
  1323  000174  2A24               	incf	??_cobs_decode+1,f,c
  1324  000176  0100               	movlb	0	; () banked
  1325  000178  5162               	movf	cobs_decode@dst_buf_end_ptr& (0+255),w,b
  1326  00017A  2423               	addwf	??_cobs_decode,w,c
  1327  00017C  0100               	movlb	0	; () banked
  1328  00017E  6F66               	movwf	cobs_decode@remaining_bytes& (0+255),b
  1329  000180  0100               	movlb	0	; () banked
  1330  000182  5163               	movf	(cobs_decode@dst_buf_end_ptr+1)& (0+255),w,b
  1331  000184  2024               	addwfc	??_cobs_decode+1,w,c
  1332  000186  0100               	movlb	0	; () banked
  1333  000188  6F67               	movwf	(cobs_decode@remaining_bytes+1)& (0+255),b
  1334                           
  1335                           ; BSR set to: 0
  1336                           ;COBS.c: 156: if (len_code > remaining_bytes)
  1337  00018A  0100               	movlb	0	; () banked
  1338  00018C  516A               	movf	cobs_decode@len_code& (0+255),w,b
  1339  00018E  0100               	movlb	0	; () banked
  1340  000190  5D66               	subwf	cobs_decode@remaining_bytes& (0+255),w,b
  1341  000192  0E00               	movlw	0
  1342  000194  5967               	subwfb	(cobs_decode@remaining_bytes+1)& (0+255),w,b
  1343  000196  B0D8               	btfsc	status,0,c
  1344  000198  D004               	goto	l2439
  1345                           
  1346                           ; BSR set to: 0
  1347                           ;COBS.c: 157: {
  1348                           ;COBS.c: 158: result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
  1349  00019A  0100               	movlb	0	; () banked
  1350  00019C  836D               	bsf	(cobs_decode@result+2)& (0+255),1,b
  1351                           
  1352                           ; BSR set to: 0
  1353                           ;COBS.c: 159: len_code = remaining_bytes;
  1354  00019E  C066  F06A         	movff	cobs_decode@remaining_bytes,cobs_decode@len_code
  1355  0001A2                     l2439:
  1356                           
  1357                           ; BSR set to: 0
  1358                           ;COBS.c: 160: }
  1359                           ;COBS.c: 162: for (i = len_code; i != 0; i--)
  1360  0001A2  C06A  F065         	movff	cobs_decode@len_code,cobs_decode@i
  1361  0001A6                     l2441:
  1362                           
  1363                           ; BSR set to: 0
  1364  0001A6  0100               	movlb	0	; () banked
  1365  0001A8  5165               	movf	cobs_decode@i& (0+255),w,b
  1366  0001AA  0100               	movlb	0	; () banked
  1367  0001AC  B4D8               	btfsc	status,2,c
  1368  0001AE  D01C               	goto	l2461
  1369                           
  1370                           ; BSR set to: 0
  1371                           ;COBS.c: 163: {
  1372                           ;COBS.c: 164: src_byte = *src_ptr++;
  1373                           
  1374                           ; BSR set to: 0
  1375                           
  1376                           ; BSR set to: 0
  1377  0001B0  C01F  FFD9         	movff	cobs_decode@src_ptr,fsr2l
  1378  0001B4  C020  FFDA         	movff	cobs_decode@src_ptr+1,fsr2h
  1379  0001B8  50DF               	movf	indf2,w,c
  1380  0001BA  0100               	movlb	0	; () banked
  1381  0001BC  6F64               	movwf	cobs_decode@src_byte& (0+255),b
  1382                           
  1383                           ; BSR set to: 0
  1384  0001BE  4A1F               	infsnz	cobs_decode@src_ptr,f,c
  1385  0001C0  2A20               	incf	cobs_decode@src_ptr+1,f,c
  1386                           
  1387                           ; BSR set to: 0
  1388                           ;COBS.c: 165: if (src_byte == 0)
  1389  0001C2  0100               	movlb	0	; () banked
  1390  0001C4  5164               	movf	cobs_decode@src_byte& (0+255),w,b
  1391  0001C6  0100               	movlb	0	; () banked
  1392  0001C8  A4D8               	btfss	status,2,c
  1393  0001CA  D002               	goto	l2453
  1394                           
  1395                           ; BSR set to: 0
  1396                           ;COBS.c: 166: {
  1397                           ;COBS.c: 167: result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
  1398  0001CC  0100               	movlb	0	; () banked
  1399  0001CE  856D               	bsf	(cobs_decode@result+2)& (0+255),2,b
  1400  0001D0                     l2453:
  1401                           
  1402                           ; BSR set to: 0
  1403                           ;COBS.c: 168: }
  1404                           ;COBS.c: 169: *dst_write_ptr++ = src_byte;
  1405  0001D0  C068  FFD9         	movff	cobs_decode@dst_write_ptr,fsr2l
  1406  0001D4  C069  FFDA         	movff	cobs_decode@dst_write_ptr+1,fsr2h
  1407  0001D8  C064  FFDF         	movff	cobs_decode@src_byte,indf2
  1408                           
  1409                           ; BSR set to: 0
  1410  0001DC  0100               	movlb	0	; () banked
  1411  0001DE  4B68               	infsnz	cobs_decode@dst_write_ptr& (0+255),f,b
  1412  0001E0  2B69               	incf	(cobs_decode@dst_write_ptr+1)& (0+255),f,b
  1413                           
  1414                           ; BSR set to: 0
  1415  0001E2  0100               	movlb	0	; () banked
  1416  0001E4  0765               	decf	cobs_decode@i& (0+255),f,b
  1417  0001E6  D7DF               	goto	l2441
  1418  0001E8                     l2461:
  1419                           
  1420                           ; BSR set to: 0
  1421                           ;COBS.c: 170: }
  1422                           ;COBS.c: 172: if (src_ptr >= src_end_ptr)
  1423  0001E8  0100               	movlb	0	; () banked
  1424  0001EA  5160               	movf	cobs_decode@src_end_ptr& (0+255),w,b
  1425  0001EC  5C1F               	subwf	cobs_decode@src_ptr,w,c
  1426  0001EE  0100               	movlb	0	; () banked
  1427  0001F0  5161               	movf	(cobs_decode@src_end_ptr+1)& (0+255),w,b
  1428  0001F2  5820               	subwfb	cobs_decode@src_ptr+1,w,c
  1429  0001F4  B0D8               	btfsc	status,0,c
  1430  0001F6  D01C               	goto	l2475
  1431                           
  1432                           ; BSR set to: 0
  1433                           ;COBS.c: 175: }
  1434                           ;COBS.c: 178: if (len_code != 0xFE)
  1435                           
  1436                           ; BSR set to: 0
  1437                           
  1438                           ; BSR set to: 0
  1439                           ;COBS.c: 173: {
  1440                           ;COBS.c: 174: break;
  1441  0001F8  0EFE               	movlw	254
  1442  0001FA  0100               	movlb	0	; () banked
  1443  0001FC  196A               	xorwf	cobs_decode@len_code& (0+255),w,b
  1444  0001FE  B4D8               	btfsc	status,2,c
  1445  000200  D781               	goto	l2413
  1446                           
  1447                           ; BSR set to: 0
  1448                           ;COBS.c: 179: {
  1449                           ;COBS.c: 180: if (dst_write_ptr >= dst_buf_end_ptr)
  1450  000202  0100               	movlb	0	; () banked
  1451  000204  5162               	movf	cobs_decode@dst_buf_end_ptr& (0+255),w,b
  1452  000206  0100               	movlb	0	; () banked
  1453  000208  5D68               	subwf	cobs_decode@dst_write_ptr& (0+255),w,b
  1454  00020A  0100               	movlb	0	; () banked
  1455  00020C  5163               	movf	(cobs_decode@dst_buf_end_ptr+1)& (0+255),w,b
  1456  00020E  0100               	movlb	0	; () banked
  1457  000210  5969               	subwfb	(cobs_decode@dst_write_ptr+1)& (0+255),w,b
  1458  000212  A0D8               	btfss	status,0,c
  1459  000214  D003               	goto	l2471
  1460                           
  1461                           ; BSR set to: 0
  1462                           ;COBS.c: 181: {
  1463                           ;COBS.c: 182: result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
  1464  000216  0100               	movlb	0	; () banked
  1465  000218  836D               	bsf	(cobs_decode@result+2)& (0+255),1,b
  1466                           
  1467                           ;COBS.c: 183: break;
  1468  00021A  D00A               	goto	l2475
  1469  00021C                     l2471:
  1470                           
  1471                           ; BSR set to: 0
  1472                           ;COBS.c: 184: }
  1473                           ;COBS.c: 185: *dst_write_ptr++ = 0;
  1474  00021C  C068  FFD9         	movff	cobs_decode@dst_write_ptr,fsr2l
  1475  000220  C069  FFDA         	movff	cobs_decode@dst_write_ptr+1,fsr2h
  1476  000224  0E00               	movlw	0
  1477  000226  6EDF               	movwf	indf2,c
  1478                           
  1479                           ; BSR set to: 0
  1480  000228  0100               	movlb	0	; () banked
  1481  00022A  4B68               	infsnz	cobs_decode@dst_write_ptr& (0+255),f,b
  1482  00022C  2B69               	incf	(cobs_decode@dst_write_ptr+1)& (0+255),f,b
  1483                           
  1484                           ; BSR set to: 0
  1485                           ;COBS.c: 186: }
  1486                           ;COBS.c: 187: }
  1487  00022E  D76A               	goto	l2413
  1488  000230                     l2475:
  1489                           
  1490                           ; BSR set to: 0
  1491                           ;COBS.c: 188: }
  1492                           ;COBS.c: 190: result.out_len = dst_write_ptr - dst_buf_ptr;
  1493  000230  C01B  F023         	movff	cobs_decode@dst_buf_ptr,??_cobs_decode
  1494  000234  C01C  F024         	movff	cobs_decode@dst_buf_ptr+1,??_cobs_decode+1
  1495  000238  1E23               	comf	??_cobs_decode,f,c
  1496  00023A  1E24               	comf	??_cobs_decode+1,f,c
  1497  00023C  4A23               	infsnz	??_cobs_decode,f,c
  1498  00023E  2A24               	incf	??_cobs_decode+1,f,c
  1499  000240  0100               	movlb	0	; () banked
  1500  000242  5168               	movf	cobs_decode@dst_write_ptr& (0+255),w,b
  1501  000244  2423               	addwf	??_cobs_decode,w,c
  1502  000246  0100               	movlb	0	; () banked
  1503  000248  6F6B               	movwf	cobs_decode@result& (0+255),b
  1504  00024A  0100               	movlb	0	; () banked
  1505  00024C  5169               	movf	(cobs_decode@dst_write_ptr+1)& (0+255),w,b
  1506  00024E  2024               	addwfc	??_cobs_decode+1,w,c
  1507  000250  0100               	movlb	0	; () banked
  1508  000252  6F6C               	movwf	(cobs_decode@result+1)& (0+255),b
  1509                           
  1510                           ; BSR set to: 0
  1511                           ;COBS.c: 192: return result;
  1512  000254  C06B  F01B         	movff	cobs_decode@result,?_cobs_decode
  1513  000258  C06C  F01C         	movff	cobs_decode@result+1,?_cobs_decode+1
  1514  00025C  C06D  F01D         	movff	cobs_decode@result+2,?_cobs_decode+2
  1515  000260  0012               	return	
  1516  000262                     __end_of_cobs_decode:
  1517                           	opt stack 0
  1518                           tblptru	equ	0xFF8
  1519                           tblptrh	equ	0xFF7
  1520                           tblptrl	equ	0xFF6
  1521                           tablat	equ	0xFF5
  1522                           postinc0	equ	0xFEE
  1523                           wreg	equ	0xFE8
  1524                           postdec1	equ	0xFE5
  1525                           fsr1l	equ	0xFE1
  1526                           indf2	equ	0xFDF
  1527                           postinc2	equ	0xFDE
  1528                           fsr2h	equ	0xFDA
  1529                           fsr2l	equ	0xFD9
  1530                           status	equ	0xFD8
  1531                           
  1532 ;; *************** function _Receive_get *****************
  1533 ;; Defined at:
  1534 ;;		line 125 in file "UART.c"
  1535 ;; Parameters:    Size  Location     Type
  1536 ;;		None
  1537 ;; Auto vars:     Size  Location     Type
  1538 ;;		None
  1539 ;; Return value:  Size  Location     Type
  1540 ;;                  1    wreg      unsigned char 
  1541 ;; Registers used:
  1542 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1543 ;; Tracked objects:
  1544 ;;		On entry : 0/0
  1545 ;;		On exit  : 0/0
  1546 ;;		Unchanged: 0/0
  1547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1548 ;;      Params:         0       0       0       0       0       0       0
  1549 ;;      Locals:         0       0       0       0       0       0       0
  1550 ;;      Temps:          0       0       0       0       0       0       0
  1551 ;;      Totals:         0       0       0       0       0       0       0
  1552 ;;Total ram usage:        0 bytes
  1553 ;; Hardware stack levels used:    1
  1554 ;; Hardware stack levels required when called:    6
  1555 ;; This function calls:
  1556 ;;		_UART_buff_get
  1557 ;; This function is called by:
  1558 ;;		_receiveData
  1559 ;;		_getch
  1560 ;; This function uses a non-reentrant model
  1561 ;;
  1562                           
  1563                           	psect	text4
  1564  000FE8                     __ptext4:
  1565                           	opt stack 0
  1566  000FE8                     _Receive_get:
  1567                           	opt stack 22
  1568                           
  1569                           ;UART.c: 126: return UART_buff_get(&input_buffer);
  1570                           
  1571                           ; BSR set to: 0
  1572                           ;incstack = 0
  1573  000FE8  0E6A               	movlw	low _input_buffer
  1574  000FEA  6E21               	movwf	UART_buff_get@_this,c
  1575  000FEC  0E01               	movlw	high _input_buffer
  1576  000FEE  6E22               	movwf	UART_buff_get@_this+1,c
  1577  000FF0  EC5C  F005         	call	_UART_buff_get	;wreg free
  1578  000FF4  0012               	return	
  1579  000FF6                     __end_of_Receive_get:
  1580                           	opt stack 0
  1581                           tblptru	equ	0xFF8
  1582                           tblptrh	equ	0xFF7
  1583                           tblptrl	equ	0xFF6
  1584                           tablat	equ	0xFF5
  1585                           postinc0	equ	0xFEE
  1586                           wreg	equ	0xFE8
  1587                           postdec1	equ	0xFE5
  1588                           fsr1l	equ	0xFE1
  1589                           indf2	equ	0xFDF
  1590                           postinc2	equ	0xFDE
  1591                           fsr2h	equ	0xFDA
  1592                           fsr2l	equ	0xFD9
  1593                           status	equ	0xFD8
  1594                           
  1595 ;; *************** function _Receive_available *****************
  1596 ;; Defined at:
  1597 ;;		line 121 in file "UART.c"
  1598 ;; Parameters:    Size  Location     Type
  1599 ;;		None
  1600 ;; Auto vars:     Size  Location     Type
  1601 ;;		None
  1602 ;; Return value:  Size  Location     Type
  1603 ;;                  2   28[COMRAM] int 
  1604 ;; Registers used:
  1605 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1606 ;; Tracked objects:
  1607 ;;		On entry : 0/0
  1608 ;;		On exit  : 0/0
  1609 ;;		Unchanged: 0/0
  1610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1611 ;;      Params:         2       0       0       0       0       0       0
  1612 ;;      Locals:         0       0       0       0       0       0       0
  1613 ;;      Temps:          0       0       0       0       0       0       0
  1614 ;;      Totals:         2       0       0       0       0       0       0
  1615 ;;Total ram usage:        2 bytes
  1616 ;; Hardware stack levels used:    1
  1617 ;; Hardware stack levels required when called:    5
  1618 ;; This function calls:
  1619 ;;		_UART_buff_size
  1620 ;; This function is called by:
  1621 ;;		_receiveData
  1622 ;; This function uses a non-reentrant model
  1623 ;;
  1624                           
  1625                           	psect	text5
  1626  000F82                     __ptext5:
  1627                           	opt stack 0
  1628  000F82                     _Receive_available:
  1629                           	opt stack 23
  1630                           
  1631                           ;UART.c: 122: return UART_buff_size(&input_buffer);
  1632                           
  1633                           ;incstack = 0
  1634  000F82  0E6A               	movlw	low _input_buffer
  1635  000F84  6E1B               	movwf	UART_buff_size@_this,c
  1636  000F86  0E01               	movlw	high _input_buffer
  1637  000F88  6E1C               	movwf	UART_buff_size@_this+1,c
  1638  000F8A  ECCC  F007         	call	_UART_buff_size	;wreg free
  1639  000F8E  C01B  F01D         	movff	?_UART_buff_size,?_Receive_available
  1640  000F92  C01C  F01E         	movff	?_UART_buff_size+1,?_Receive_available+1
  1641  000F96  0012               	return	
  1642  000F98                     __end_of_Receive_available:
  1643                           	opt stack 0
  1644                           tblptru	equ	0xFF8
  1645                           tblptrh	equ	0xFF7
  1646                           tblptrl	equ	0xFF6
  1647                           tablat	equ	0xFF5
  1648                           postinc0	equ	0xFEE
  1649                           wreg	equ	0xFE8
  1650                           postdec1	equ	0xFE5
  1651                           fsr1l	equ	0xFE1
  1652                           indf2	equ	0xFDF
  1653                           postinc2	equ	0xFDE
  1654                           fsr2h	equ	0xFDA
  1655                           fsr2l	equ	0xFD9
  1656                           status	equ	0xFD8
  1657                           
  1658 ;; *************** function _UART_buff_size *****************
  1659 ;; Defined at:
  1660 ;;		line 101 in file "UART.c"
  1661 ;; Parameters:    Size  Location     Type
  1662 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  1663 ;;		 -> output_buffer(106), input_buffer(106), 
  1664 ;; Auto vars:     Size  Location     Type
  1665 ;;		None
  1666 ;; Return value:  Size  Location     Type
  1667 ;;                  2   26[COMRAM] int 
  1668 ;; Registers used:
  1669 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1670 ;; Tracked objects:
  1671 ;;		On entry : 0/0
  1672 ;;		On exit  : 0/0
  1673 ;;		Unchanged: 0/0
  1674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1675 ;;      Params:         2       0       0       0       0       0       0
  1676 ;;      Locals:         0       0       0       0       0       0       0
  1677 ;;      Temps:          0       0       0       0       0       0       0
  1678 ;;      Totals:         2       0       0       0       0       0       0
  1679 ;;Total ram usage:        2 bytes
  1680 ;; Hardware stack levels used:    1
  1681 ;; Hardware stack levels required when called:    4
  1682 ;; This function calls:
  1683 ;;		Nothing
  1684 ;; This function is called by:
  1685 ;;		_Receive_available
  1686 ;; This function uses a non-reentrant model
  1687 ;;
  1688                           
  1689                           	psect	text6
  1690  000F98                     __ptext6:
  1691                           	opt stack 0
  1692  000F98                     _UART_buff_size:
  1693                           	opt stack 23
  1694                           
  1695                           ;UART.c: 102: return (_this->count);
  1696                           
  1697                           ;incstack = 0
  1698  000F98  EE20 F068          	lfsr	2,104
  1699  000F9C  501B               	movf	UART_buff_size@_this,w,c
  1700  000F9E  26D9               	addwf	fsr2l,f,c
  1701  000FA0  501C               	movf	UART_buff_size@_this+1,w,c
  1702  000FA2  22DA               	addwfc	fsr2h,f,c
  1703  000FA4  CFDE F01B          	movff	postinc2,?_UART_buff_size
  1704  000FA8  CFDD F01C          	movff	postdec2,?_UART_buff_size+1
  1705  000FAC  0012               	return	
  1706  000FAE                     __end_of_UART_buff_size:
  1707                           	opt stack 0
  1708                           tblptru	equ	0xFF8
  1709                           tblptrh	equ	0xFF7
  1710                           tblptrl	equ	0xFF6
  1711                           tablat	equ	0xFF5
  1712                           postinc0	equ	0xFEE
  1713                           wreg	equ	0xFE8
  1714                           postdec1	equ	0xFE5
  1715                           fsr1l	equ	0xFE1
  1716                           indf2	equ	0xFDF
  1717                           postinc2	equ	0xFDE
  1718                           postdec2	equ	0xFDD
  1719                           fsr2h	equ	0xFDA
  1720                           fsr2l	equ	0xFD9
  1721                           status	equ	0xFD8
  1722                           
  1723 ;; *************** function _ComController *****************
  1724 ;; Defined at:
  1725 ;;		line 119 in file "CarCom.c"
  1726 ;; Parameters:    Size  Location     Type
  1727 ;;  DTI             2   88[BANK0 ] PTR unsigned char 
  1728 ;;		 -> ProcessArray(30), 
  1729 ;;  lenth           2   90[BANK0 ] unsigned int 
  1730 ;; Auto vars:     Size  Location     Type
  1731 ;;  DataToSend      4   93[BANK0 ] unsigned char [4]
  1732 ;; Return value:  Size  Location     Type
  1733 ;;                  1    wreg      void 
  1734 ;; Registers used:
  1735 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1736 ;; Tracked objects:
  1737 ;;		On entry : 0/0
  1738 ;;		On exit  : 0/0
  1739 ;;		Unchanged: 0/0
  1740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1741 ;;      Params:         0       4       0       0       0       0       0
  1742 ;;      Locals:         0       4       0       0       0       0       0
  1743 ;;      Temps:          0       1       0       0       0       0       0
  1744 ;;      Totals:         0       9       0       0       0       0       0
  1745 ;;Total ram usage:        9 bytes
  1746 ;; Hardware stack levels used:    1
  1747 ;; Hardware stack levels required when called:    8
  1748 ;; This function calls:
  1749 ;;		_Delay
  1750 ;;		_GetDataDict
  1751 ;;		_sendData
  1752 ;; This function is called by:
  1753 ;;		_receiveData
  1754 ;; This function uses a non-reentrant model
  1755 ;;
  1756                           
  1757                           	psect	text7
  1758  0008D4                     __ptext7:
  1759                           	opt stack 0
  1760  0008D4                     _ComController:
  1761                           	opt stack 20
  1762                           
  1763                           ;CarCom.c: 120: if(DTI[1] == 1){
  1764                           
  1765                           ;incstack = 0
  1766  0008D4  0100               	movlb	0	; () banked
  1767  0008D6  EE20 F001          	lfsr	2,1
  1768  0008DA  51B8               	movf	ComController@DTI& (0+255),w,b
  1769  0008DC  26D9               	addwf	fsr2l,f,c
  1770  0008DE  51B9               	movf	(ComController@DTI+1)& (0+255),w,b
  1771  0008E0  22DA               	addwfc	fsr2h,f,c
  1772  0008E2  04DE               	decf	postinc2,w,c
  1773  0008E4  A4D8               	btfss	status,2,c
  1774  0008E6  0012               	return	
  1775                           
  1776                           ; BSR set to: 0
  1777                           ;CarCom.c: 121: unsigned char DataToSend[4];
  1778                           ;CarCom.c: 122: GetDataDict(DTI[2], DTI[3], DataToSend, DTI[4]);
  1779  0008E8  0100               	movlb	0	; () banked
  1780  0008EA  EE20 F003          	lfsr	2,3
  1781  0008EE  51B8               	movf	ComController@DTI& (0+255),w,b
  1782  0008F0  26D9               	addwf	fsr2l,f,c
  1783  0008F2  51B9               	movf	(ComController@DTI+1)& (0+255),w,b
  1784  0008F4  22DA               	addwfc	fsr2h,f,c
  1785  0008F6  50DF               	movf	indf2,w,c
  1786  0008F8  6E1B               	movwf	GetDataDict@DataTableIndex,c
  1787  0008FA  0EBD               	movlw	low ComController@DataToSend
  1788  0008FC  6E1C               	movwf	GetDataDict@DataArray,c
  1789  0008FE  0E00               	movlw	high ComController@DataToSend
  1790  000900  6E1D               	movwf	GetDataDict@DataArray+1,c
  1791  000902  0100               	movlb	0	; () banked
  1792  000904  EE20 F004          	lfsr	2,4
  1793  000908  51B8               	movf	ComController@DTI& (0+255),w,b
  1794  00090A  26D9               	addwf	fsr2l,f,c
  1795  00090C  51B9               	movf	(ComController@DTI+1)& (0+255),w,b
  1796  00090E  22DA               	addwfc	fsr2h,f,c
  1797  000910  50DF               	movf	indf2,w,c
  1798  000912  6E1E               	movwf	GetDataDict@numbofbytes,c
  1799  000914  0100               	movlb	0	; () banked
  1800  000916  EE20 F002          	lfsr	2,2
  1801  00091A  51B8               	movf	ComController@DTI& (0+255),w,b
  1802  00091C  26D9               	addwf	fsr2l,f,c
  1803  00091E  51B9               	movf	(ComController@DTI+1)& (0+255),w,b
  1804  000920  22DA               	addwfc	fsr2h,f,c
  1805  000922  50DF               	movf	indf2,w,c
  1806  000924  ECC4  F004         	call	_GetDataDict
  1807                           
  1808                           ;CarCom.c: 123: LATDbits.LATD4 = 1;
  1809  000928  888C               	bsf	3980,4,c	;volatile
  1810                           
  1811                           ;CarCom.c: 124: Delay(5);
  1812  00092A  0E00               	movlw	0
  1813  00092C  6E1C               	movwf	Delay@wait+1,c
  1814  00092E  0E05               	movlw	5
  1815  000930  6E1B               	movwf	Delay@wait,c
  1816  000932  ECDC  F006         	call	_Delay	;wreg free
  1817                           
  1818                           ;CarCom.c: 125: sendData(1, 2, 1, 1, DataToSend, DTI[4]);
  1819  000936  0E02               	movlw	2
  1820  000938  0100               	movlb	0	; () banked
  1821  00093A  6F6D               	movwf	sendData@ComandByte& (0+255),b
  1822  00093C  0E01               	movlw	1
  1823  00093E  0100               	movlb	0	; () banked
  1824  000940  6F6E               	movwf	sendData@DataTable& (0+255),b
  1825  000942  0E01               	movlw	1
  1826  000944  0100               	movlb	0	; () banked
  1827  000946  6F6F               	movwf	sendData@DataTableIndex& (0+255),b
  1828  000948  0EBD               	movlw	low ComController@DataToSend
  1829  00094A  0100               	movlb	0	; () banked
  1830  00094C  6F70               	movwf	sendData@DTS& (0+255),b
  1831  00094E  0E00               	movlw	high ComController@DataToSend
  1832  000950  0100               	movlb	0	; () banked
  1833  000952  6F71               	movwf	(sendData@DTS+1)& (0+255),b
  1834  000954  0100               	movlb	0	; () banked
  1835  000956  EE20 F004          	lfsr	2,4
  1836  00095A  51B8               	movf	ComController@DTI& (0+255),w,b
  1837  00095C  26D9               	addwf	fsr2l,f,c
  1838  00095E  51B9               	movf	(ComController@DTI+1)& (0+255),w,b
  1839  000960  22DA               	addwfc	fsr2h,f,c
  1840  000962  50DF               	movf	indf2,w,c
  1841  000964  0100               	movlb	0	; () banked
  1842  000966  6FBC               	movwf	??_ComController& (0+255),b
  1843  000968  0100               	movlb	0	; () banked
  1844  00096A  51BC               	movf	??_ComController& (0+255),w,b
  1845  00096C  0100               	movlb	0	; () banked
  1846  00096E  6F72               	movwf	sendData@lenth& (0+255),b
  1847  000970  6B73               	clrf	(sendData@lenth+1)& (0+255),b
  1848  000972  0E01               	movlw	1
  1849  000974  EC31  F001         	call	_sendData
  1850                           
  1851                           ;CarCom.c: 126: Delay(3);
  1852  000978  0E00               	movlw	0
  1853  00097A  6E1C               	movwf	Delay@wait+1,c
  1854  00097C  0E03               	movlw	3
  1855  00097E  6E1B               	movwf	Delay@wait,c
  1856  000980  ECDC  F006         	call	_Delay	;wreg free
  1857                           
  1858                           ;CarCom.c: 127: LATDbits.LATD4 = 0;
  1859  000984  988C               	bcf	3980,4,c	;volatile
  1860  000986  0012               	return	
  1861  000988                     __end_of_ComController:
  1862                           	opt stack 0
  1863                           tblptru	equ	0xFF8
  1864                           tblptrh	equ	0xFF7
  1865                           tblptrl	equ	0xFF6
  1866                           tablat	equ	0xFF5
  1867                           postinc0	equ	0xFEE
  1868                           wreg	equ	0xFE8
  1869                           postdec1	equ	0xFE5
  1870                           fsr1l	equ	0xFE1
  1871                           indf2	equ	0xFDF
  1872                           postinc2	equ	0xFDE
  1873                           postdec2	equ	0xFDD
  1874                           fsr2h	equ	0xFDA
  1875                           fsr2l	equ	0xFD9
  1876                           status	equ	0xFD8
  1877                           
  1878 ;; *************** function _sendData *****************
  1879 ;; Defined at:
  1880 ;;		line 40 in file "CarCom.c"
  1881 ;; Parameters:    Size  Location     Type
  1882 ;;  whereToSend     1    wreg     unsigned char 
  1883 ;;  ComandByte      1   13[BANK0 ] unsigned char 
  1884 ;;  DataTable       1   14[BANK0 ] unsigned char 
  1885 ;;  DataTableInd    1   15[BANK0 ] unsigned char 
  1886 ;;  DTS             2   16[BANK0 ] PTR unsigned char 
  1887 ;;		 -> ComController@DataToSend(4), 
  1888 ;;  lenth           2   18[BANK0 ] unsigned int 
  1889 ;; Auto vars:     Size  Location     Type
  1890 ;;  whereToSend     1   80[BANK0 ] unsigned char 
  1891 ;;  SendArray      30   50[BANK0 ] unsigned char [30]
  1892 ;;  COBSArray      30   20[BANK0 ] unsigned char [30]
  1893 ;;  result          3   82[BANK0 ] struct .
  1894 ;;  count           2   85[BANK0 ] int 
  1895 ;;  i               1   87[BANK0 ] unsigned char 
  1896 ;;  CS              1   81[BANK0 ] unsigned char 
  1897 ;; Return value:  Size  Location     Type
  1898 ;;                  1    wreg      void 
  1899 ;; Registers used:
  1900 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1901 ;; Tracked objects:
  1902 ;;		On entry : 0/0
  1903 ;;		On exit  : 0/0
  1904 ;;		Unchanged: 0/0
  1905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1906 ;;      Params:         0       7       0       0       0       0       0
  1907 ;;      Locals:         0      68       0       0       0       0       0
  1908 ;;      Temps:          4       0       0       0       0       0       0
  1909 ;;      Totals:         4      75       0       0       0       0       0
  1910 ;;Total ram usage:       79 bytes
  1911 ;; Hardware stack levels used:    1
  1912 ;; Hardware stack levels required when called:    7
  1913 ;; This function calls:
  1914 ;;		_CRC8
  1915 ;;		_Send_put
  1916 ;;		_cobs_encode
  1917 ;; This function is called by:
  1918 ;;		_ComController
  1919 ;; This function uses a non-reentrant model
  1920 ;;
  1921                           
  1922                           	psect	text8
  1923  000262                     __ptext8:
  1924                           	opt stack 0
  1925  000262                     _sendData:
  1926                           	opt stack 20
  1927                           
  1928                           ;incstack = 0
  1929                           ;sendData@whereToSend stored from wreg
  1930  000262  0100               	movlb	0	; () banked
  1931  000264  6FB0               	movwf	sendData@whereToSend& (0+255),b
  1932                           
  1933                           ;CarCom.c: 41: unsigned char SendArray[30];
  1934                           ;CarCom.c: 42: unsigned char COBSArray[30];
  1935                           ;CarCom.c: 44: cobs_encode_result result;
  1936                           ;CarCom.c: 46: SendArray[0] = 5+lenth;
  1937  000266  0100               	movlb	0	; () banked
  1938  000268  5172               	movf	sendData@lenth& (0+255),w,b
  1939  00026A  0F05               	addlw	5
  1940  00026C  0100               	movlb	0	; () banked
  1941  00026E  6F92               	movwf	sendData@SendArray& (0+255),b
  1942                           
  1943                           ; BSR set to: 0
  1944                           ;CarCom.c: 47: SendArray[1] = ComandByte;
  1945  000270  C06D  F093         	movff	sendData@ComandByte,sendData@SendArray+1
  1946                           
  1947                           ; BSR set to: 0
  1948                           ;CarCom.c: 48: SendArray[2] = DataTable;
  1949  000274  C06E  F094         	movff	sendData@DataTable,sendData@SendArray+2
  1950                           
  1951                           ; BSR set to: 0
  1952                           ;CarCom.c: 49: SendArray[3] = DataTableIndex;
  1953  000278  C06F  F095         	movff	sendData@DataTableIndex,sendData@SendArray+3
  1954                           
  1955                           ; BSR set to: 0
  1956                           ;CarCom.c: 50: SendArray[4] = lenth;
  1957  00027C  C072  F096         	movff	sendData@lenth,sendData@SendArray+4
  1958                           
  1959                           ; BSR set to: 0
  1960                           ;CarCom.c: 52: unsigned char i = 0;
  1961  000280  0E00               	movlw	0
  1962  000282  0100               	movlb	0	; () banked
  1963  000284  6FB7               	movwf	sendData@i& (0+255),b
  1964                           
  1965                           ; BSR set to: 0
  1966                           ;CarCom.c: 53: int count = 5;
  1967  000286  0E00               	movlw	0
  1968  000288  0100               	movlb	0	; () banked
  1969  00028A  6FB6               	movwf	(sendData@count+1)& (0+255),b
  1970  00028C  0E05               	movlw	5
  1971  00028E  6FB5               	movwf	sendData@count& (0+255),b
  1972  000290  D020               	goto	l2363
  1973  000292                     l2357:
  1974                           
  1975                           ; BSR set to: 0
  1976                           ;CarCom.c: 56: SendArray[i+5] = DTS[i];
  1977  000292  0100               	movlb	0	; () banked
  1978  000294  51B7               	movf	sendData@i& (0+255),w,b
  1979  000296  0D01               	mullw	1
  1980  000298  50F3               	movf	prodl,w,c
  1981  00029A  0100               	movlb	0	; () banked
  1982  00029C  2570               	addwf	sendData@DTS& (0+255),w,b
  1983  00029E  6ED9               	movwf	fsr2l,c
  1984  0002A0  50F4               	movf	prodh,w,c
  1985  0002A2  0100               	movlb	0	; () banked
  1986  0002A4  2171               	addwfc	(sendData@DTS+1)& (0+255),w,b
  1987  0002A6  6EDA               	movwf	fsr2h,c
  1988  0002A8  0100               	movlb	0	; () banked
  1989  0002AA  51B7               	movf	sendData@i& (0+255),w,b
  1990  0002AC  6E27               	movwf	??_sendData& (0+255),c
  1991  0002AE  6A28               	clrf	(??_sendData+1)& (0+255),c
  1992  0002B0  0E05               	movlw	5
  1993  0002B2  2627               	addwf	??_sendData,f,c
  1994  0002B4  0E00               	movlw	0
  1995  0002B6  2228               	addwfc	??_sendData+1,f,c
  1996  0002B8  0E92               	movlw	low sendData@SendArray
  1997  0002BA  2427               	addwf	??_sendData,w,c
  1998  0002BC  6EE1               	movwf	fsr1l,c
  1999  0002BE  0E00               	movlw	high sendData@SendArray
  2000  0002C0  2028               	addwfc	??_sendData+1,w,c
  2001  0002C2  6EE2               	movwf	fsr1h,c
  2002  0002C4  CFDF FFE7          	movff	indf2,indf1
  2003                           
  2004                           ; BSR set to: 0
  2005                           ;CarCom.c: 57: count++;
  2006  0002C8  0100               	movlb	0	; () banked
  2007  0002CA  4BB5               	infsnz	sendData@count& (0+255),f,b
  2008  0002CC  2BB6               	incf	(sendData@count+1)& (0+255),f,b
  2009                           
  2010                           ; BSR set to: 0
  2011  0002CE  0100               	movlb	0	; () banked
  2012  0002D0  2BB7               	incf	sendData@i& (0+255),f,b
  2013  0002D2                     l2363:
  2014                           
  2015                           ; BSR set to: 0
  2016  0002D2  0100               	movlb	0	; () banked
  2017  0002D4  51B7               	movf	sendData@i& (0+255),w,b
  2018  0002D6  6E27               	movwf	??_sendData& (0+255),c
  2019  0002D8  6A28               	clrf	(??_sendData+1)& (0+255),c
  2020  0002DA  0100               	movlb	0	; () banked
  2021  0002DC  5172               	movf	sendData@lenth& (0+255),w,b
  2022  0002DE  5C27               	subwf	??_sendData,w,c
  2023  0002E0  0100               	movlb	0	; () banked
  2024  0002E2  5173               	movf	(sendData@lenth+1)& (0+255),w,b
  2025  0002E4  5828               	subwfb	??_sendData+1,w,c
  2026  0002E6  A0D8               	btfss	status,0,c
  2027  0002E8  D7D4               	goto	l2357
  2028                           
  2029                           ; BSR set to: 0
  2030                           ;CarCom.c: 58: }
  2031                           ;CarCom.c: 60: unsigned char CS = CRC8(SendArray, count);
  2032                           
  2033                           ; BSR set to: 0
  2034  0002EA  0E92               	movlw	low sendData@SendArray
  2035  0002EC  6E1B               	movwf	CRC8@data,c
  2036  0002EE  0E00               	movlw	high sendData@SendArray
  2037  0002F0  6E1C               	movwf	CRC8@data+1,c
  2038  0002F2  C0B5  F01D         	movff	sendData@count,CRC8@len
  2039  0002F6  EC99  F006         	call	_CRC8	;wreg free
  2040  0002FA  0100               	movlb	0	; () banked
  2041  0002FC  6FB1               	movwf	sendData@CS& (0+255),b
  2042                           
  2043                           ; BSR set to: 0
  2044                           ;CarCom.c: 61: SendArray[count] = CS;
  2045  0002FE  0E92               	movlw	low sendData@SendArray
  2046  000300  0100               	movlb	0	; () banked
  2047  000302  25B5               	addwf	sendData@count& (0+255),w,b
  2048  000304  6ED9               	movwf	fsr2l,c
  2049  000306  0E00               	movlw	high sendData@SendArray
  2050  000308  0100               	movlb	0	; () banked
  2051  00030A  21B6               	addwfc	(sendData@count+1)& (0+255),w,b
  2052  00030C  6EDA               	movwf	fsr2h,c
  2053  00030E  C0B1  FFDF         	movff	sendData@CS,indf2
  2054                           
  2055                           ; BSR set to: 0
  2056                           ;CarCom.c: 62: count++;
  2057  000312  0100               	movlb	0	; () banked
  2058  000314  4BB5               	infsnz	sendData@count& (0+255),f,b
  2059  000316  2BB6               	incf	(sendData@count+1)& (0+255),f,b
  2060                           
  2061                           ; BSR set to: 0
  2062                           ;CarCom.c: 63: result = cobs_encode(COBSArray, sizeof(COBSArray), SendArray, count);
  2063  000318  0E74               	movlw	low sendData@COBSArray
  2064  00031A  6E1B               	movwf	cobs_encode@dst_buf_ptr,c
  2065  00031C  0E00               	movlw	high sendData@COBSArray
  2066  00031E  6E1C               	movwf	cobs_encode@dst_buf_ptr+1,c
  2067  000320  0E00               	movlw	0
  2068  000322  6E1E               	movwf	cobs_encode@dst_buf_len+1,c
  2069  000324  0E1E               	movlw	30
  2070  000326  6E1D               	movwf	cobs_encode@dst_buf_len,c
  2071  000328  0E92               	movlw	low sendData@SendArray
  2072  00032A  6E1F               	movwf	cobs_encode@src_ptr,c
  2073  00032C  0E00               	movlw	high sendData@SendArray
  2074  00032E  6E20               	movwf	cobs_encode@src_ptr+1,c
  2075  000330  C0B5  F021         	movff	sendData@count,cobs_encode@src_len
  2076  000334  C0B6  F022         	movff	sendData@count+1,cobs_encode@src_len+1
  2077  000338  EC00  F002         	call	_cobs_encode	;wreg free
  2078  00033C  C01B  F0B2         	movff	?_cobs_encode,sendData@result
  2079  000340  C01C  F0B3         	movff	?_cobs_encode+1,sendData@result+1
  2080  000344  C01D  F0B4         	movff	?_cobs_encode+2,sendData@result+2
  2081                           
  2082                           ;CarCom.c: 64: SendArray[0] = whereToSend;
  2083  000348  C0B0  F092         	movff	sendData@whereToSend,sendData@SendArray
  2084                           
  2085                           ;CarCom.c: 66: for(i = 1;i<result.out_len+1;i++){
  2086  00034C  0E01               	movlw	1
  2087  00034E  0100               	movlb	0	; () banked
  2088  000350  6FB7               	movwf	sendData@i& (0+255),b
  2089  000352  D01F               	goto	l2381
  2090  000354                     l2377:
  2091                           
  2092                           ; BSR set to: 0
  2093                           ;CarCom.c: 67: SendArray[i] = COBSArray[i-1];
  2094  000354  0EFF               	movlw	255
  2095  000356  6E27               	movwf	??_sendData& (0+255),c
  2096  000358  0EFF               	movlw	255
  2097  00035A  6E28               	movwf	(??_sendData+1)& (0+255),c
  2098  00035C  0100               	movlb	0	; () banked
  2099  00035E  51B7               	movf	sendData@i& (0+255),w,b
  2100  000360  6E29               	movwf	(??_sendData+2)& (0+255),c
  2101  000362  6A2A               	clrf	(??_sendData+3)& (0+255),c
  2102  000364  5027               	movf	??_sendData,w,c
  2103  000366  2629               	addwf	??_sendData+2,f,c
  2104  000368  5028               	movf	??_sendData+1,w,c
  2105  00036A  222A               	addwfc	??_sendData+3,f,c
  2106  00036C  0E74               	movlw	low sendData@COBSArray
  2107  00036E  2429               	addwf	??_sendData+2,w,c
  2108  000370  6ED9               	movwf	fsr2l,c
  2109  000372  0E00               	movlw	high sendData@COBSArray
  2110  000374  202A               	addwfc	??_sendData+3,w,c
  2111  000376  6EDA               	movwf	fsr2h,c
  2112  000378  0100               	movlb	0	; () banked
  2113  00037A  51B7               	movf	sendData@i& (0+255),w,b
  2114  00037C  0D01               	mullw	1
  2115  00037E  0E92               	movlw	low sendData@SendArray
  2116  000380  24F3               	addwf	prodl,w,c
  2117  000382  6EE1               	movwf	fsr1l,c
  2118  000384  0E00               	movlw	high sendData@SendArray
  2119  000386  20F4               	addwfc	prodh,w,c
  2120  000388  6EE2               	movwf	fsr1h,c
  2121  00038A  CFDF FFE7          	movff	indf2,indf1
  2122                           
  2123                           ; BSR set to: 0
  2124  00038E  0100               	movlb	0	; () banked
  2125  000390  2BB7               	incf	sendData@i& (0+255),f,b
  2126  000392                     l2381:
  2127                           
  2128                           ; BSR set to: 0
  2129  000392  0E01               	movlw	1
  2130  000394  0100               	movlb	0	; () banked
  2131  000396  25B2               	addwf	sendData@result& (0+255),w,b
  2132  000398  6E27               	movwf	??_sendData& (0+255),c
  2133  00039A  0E00               	movlw	0
  2134  00039C  0100               	movlb	0	; () banked
  2135  00039E  21B3               	addwfc	(sendData@result+1)& (0+255),w,b
  2136  0003A0  6E28               	movwf	(??_sendData+1)& (0+255),c
  2137  0003A2  0100               	movlb	0	; () banked
  2138  0003A4  51B7               	movf	sendData@i& (0+255),w,b
  2139  0003A6  6E29               	movwf	(??_sendData+2)& (0+255),c
  2140  0003A8  6A2A               	clrf	(??_sendData+3)& (0+255),c
  2141  0003AA  5027               	movf	??_sendData,w,c
  2142  0003AC  5C29               	subwf	??_sendData+2,w,c
  2143  0003AE  5028               	movf	??_sendData+1,w,c
  2144  0003B0  582A               	subwfb	??_sendData+3,w,c
  2145  0003B2  A0D8               	btfss	status,0,c
  2146  0003B4  D7CF               	goto	l2377
  2147                           
  2148                           ; BSR set to: 0
  2149                           ;CarCom.c: 68: }
  2150                           ;CarCom.c: 70: for(i = 0;i<result.out_len+2;i++){
  2151                           
  2152                           ; BSR set to: 0
  2153  0003B6  0E00               	movlw	0
  2154  0003B8  0100               	movlb	0	; () banked
  2155  0003BA  6FB7               	movwf	sendData@i& (0+255),b
  2156  0003BC  D00E               	goto	l2389
  2157  0003BE                     l2385:
  2158                           
  2159                           ; BSR set to: 0
  2160                           ;CarCom.c: 71: Send_put(SendArray[i]);
  2161  0003BE  0100               	movlb	0	; () banked
  2162  0003C0  51B7               	movf	sendData@i& (0+255),w,b
  2163  0003C2  0D01               	mullw	1
  2164  0003C4  0E92               	movlw	low sendData@SendArray
  2165  0003C6  24F3               	addwf	prodl,w,c
  2166  0003C8  6ED9               	movwf	fsr2l,c
  2167  0003CA  0E00               	movlw	high sendData@SendArray
  2168  0003CC  20F4               	addwfc	prodh,w,c
  2169  0003CE  6EDA               	movwf	fsr2h,c
  2170  0003D0  50DF               	movf	indf2,w,c
  2171  0003D2  EC0F  F007         	call	_Send_put
  2172  0003D6  0100               	movlb	0	; () banked
  2173  0003D8  2BB7               	incf	sendData@i& (0+255),f,b
  2174  0003DA                     l2389:
  2175                           
  2176                           ; BSR set to: 0
  2177  0003DA  0E02               	movlw	2
  2178  0003DC  0100               	movlb	0	; () banked
  2179  0003DE  25B2               	addwf	sendData@result& (0+255),w,b
  2180  0003E0  6E27               	movwf	??_sendData& (0+255),c
  2181  0003E2  0E00               	movlw	0
  2182  0003E4  0100               	movlb	0	; () banked
  2183  0003E6  21B3               	addwfc	(sendData@result+1)& (0+255),w,b
  2184  0003E8  6E28               	movwf	(??_sendData+1)& (0+255),c
  2185  0003EA  0100               	movlb	0	; () banked
  2186  0003EC  51B7               	movf	sendData@i& (0+255),w,b
  2187  0003EE  6E29               	movwf	(??_sendData+2)& (0+255),c
  2188  0003F0  6A2A               	clrf	(??_sendData+3)& (0+255),c
  2189  0003F2  5027               	movf	??_sendData,w,c
  2190  0003F4  5C29               	subwf	??_sendData+2,w,c
  2191  0003F6  5028               	movf	??_sendData+1,w,c
  2192  0003F8  582A               	subwfb	??_sendData+3,w,c
  2193  0003FA  B0D8               	btfsc	status,0,c
  2194  0003FC  0012               	return	
  2195  0003FE  D7DF               	goto	l2385
  2196  000400                     __end_of_sendData:
  2197                           	opt stack 0
  2198                           tblptru	equ	0xFF8
  2199                           tblptrh	equ	0xFF7
  2200                           tblptrl	equ	0xFF6
  2201                           tablat	equ	0xFF5
  2202                           prodh	equ	0xFF4
  2203                           prodl	equ	0xFF3
  2204                           postinc0	equ	0xFEE
  2205                           wreg	equ	0xFE8
  2206                           indf1	equ	0xFE7
  2207                           postdec1	equ	0xFE5
  2208                           fsr1h	equ	0xFE2
  2209                           fsr1l	equ	0xFE1
  2210                           indf2	equ	0xFDF
  2211                           postinc2	equ	0xFDE
  2212                           postdec2	equ	0xFDD
  2213                           fsr2h	equ	0xFDA
  2214                           fsr2l	equ	0xFD9
  2215                           status	equ	0xFD8
  2216                           
  2217 ;; *************** function _cobs_encode *****************
  2218 ;; Defined at:
  2219 ;;		line 29 in file "COBS.c"
  2220 ;; Parameters:    Size  Location     Type
  2221 ;;  dst_buf_ptr     2   26[COMRAM] PTR unsigned char 
  2222 ;;		 -> sendData@COBSArray(30), 
  2223 ;;  dst_buf_len     2   28[COMRAM] unsigned int 
  2224 ;;  src_ptr         2   30[COMRAM] PTR const unsigned char 
  2225 ;;		 -> sendData@SendArray(30), 
  2226 ;;  src_len         2   32[COMRAM] unsigned int 
  2227 ;; Auto vars:     Size  Location     Type
  2228 ;;  result          3   10[BANK0 ] struct .
  2229 ;;  dst_write_pt    2    8[BANK0 ] PTR unsigned char 
  2230 ;;		 -> sendData@COBSArray(30), 
  2231 ;;  dst_code_wri    2    6[BANK0 ] PTR unsigned char 
  2232 ;;		 -> sendData@COBSArray(30), 
  2233 ;;  dst_buf_end_    2    3[BANK0 ] PTR unsigned char 
  2234 ;;		 -> sendData@COBSArray(30), 
  2235 ;;  src_end_ptr     2    0[BANK0 ] PTR const unsigned char 
  2236 ;;		 -> sendData@SendArray(30), 
  2237 ;;  search_len      1    5[BANK0 ] unsigned char 
  2238 ;;  src_byte        1    2[BANK0 ] unsigned char 
  2239 ;; Return value:  Size  Location     Type
  2240 ;;                  3   26[COMRAM] struct .
  2241 ;; Registers used:
  2242 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2243 ;; Tracked objects:
  2244 ;;		On entry : 0/0
  2245 ;;		On exit  : 0/0
  2246 ;;		Unchanged: 0/0
  2247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2248 ;;      Params:         8       0       0       0       0       0       0
  2249 ;;      Locals:         0      13       0       0       0       0       0
  2250 ;;      Temps:          2       0       0       0       0       0       0
  2251 ;;      Totals:        10      13       0       0       0       0       0
  2252 ;;Total ram usage:       23 bytes
  2253 ;; Hardware stack levels used:    1
  2254 ;; Hardware stack levels required when called:    4
  2255 ;; This function calls:
  2256 ;;		Nothing
  2257 ;; This function is called by:
  2258 ;;		_sendData
  2259 ;; This function uses a non-reentrant model
  2260 ;;
  2261                           
  2262                           	psect	text9
  2263  000400                     __ptext9:
  2264                           	opt stack 0
  2265  000400                     _cobs_encode:
  2266                           	opt stack 22
  2267                           
  2268                           ;COBS.c: 31: cobs_encode_result result = { 0, COBS_ENCODE_OK };
  2269                           
  2270                           ; BSR set to: 0
  2271                           ;incstack = 0
  2272  000400  C039  F06A         	movff	cobs_encode@F180,cobs_encode@result
  2273  000404  C03A  F06B         	movff	cobs_encode@F180+1,cobs_encode@result+1
  2274  000408  C03B  F06C         	movff	cobs_encode@F180+2,cobs_encode@result+2
  2275                           
  2276                           ;COBS.c: 32: const uint8_t * src_end_ptr = src_ptr + src_len;
  2277  00040C  5021               	movf	cobs_encode@src_len,w,c
  2278  00040E  241F               	addwf	cobs_encode@src_ptr,w,c
  2279  000410  0100               	movlb	0	; () banked
  2280  000412  6F60               	movwf	cobs_encode@src_end_ptr& (0+255),b
  2281  000414  5022               	movf	cobs_encode@src_len+1,w,c
  2282  000416  2020               	addwfc	cobs_encode@src_ptr+1,w,c
  2283  000418  0100               	movlb	0	; () banked
  2284  00041A  6F61               	movwf	(cobs_encode@src_end_ptr+1)& (0+255),b
  2285                           
  2286                           ;COBS.c: 33: uint8_t * dst_buf_end_ptr = dst_buf_ptr + dst_buf_len;
  2287  00041C  501D               	movf	cobs_encode@dst_buf_len,w,c
  2288  00041E  241B               	addwf	cobs_encode@dst_buf_ptr,w,c
  2289  000420  0100               	movlb	0	; () banked
  2290  000422  6F63               	movwf	cobs_encode@dst_buf_end_ptr& (0+255),b
  2291  000424  501E               	movf	cobs_encode@dst_buf_len+1,w,c
  2292  000426  201C               	addwfc	cobs_encode@dst_buf_ptr+1,w,c
  2293  000428  0100               	movlb	0	; () banked
  2294  00042A  6F64               	movwf	(cobs_encode@dst_buf_end_ptr+1)& (0+255),b
  2295                           
  2296                           ;COBS.c: 34: uint8_t * dst_code_write_ptr = dst_buf_ptr;
  2297  00042C  C01B  F066         	movff	cobs_encode@dst_buf_ptr,cobs_encode@dst_code_write_ptr
  2298  000430  C01C  F067         	movff	cobs_encode@dst_buf_ptr+1,cobs_encode@dst_code_write_ptr+1
  2299                           
  2300                           ;COBS.c: 35: uint8_t * dst_write_ptr = dst_code_write_ptr + 1;
  2301  000434  0E01               	movlw	1
  2302  000436  0100               	movlb	0	; () banked
  2303  000438  2566               	addwf	cobs_encode@dst_code_write_ptr& (0+255),w,b
  2304  00043A  0100               	movlb	0	; () banked
  2305  00043C  6F68               	movwf	cobs_encode@dst_write_ptr& (0+255),b
  2306  00043E  0E00               	movlw	0
  2307  000440  0100               	movlb	0	; () banked
  2308  000442  2167               	addwfc	(cobs_encode@dst_code_write_ptr+1)& (0+255),w,b
  2309  000444  0100               	movlb	0	; () banked
  2310  000446  6F69               	movwf	(cobs_encode@dst_write_ptr+1)& (0+255),b
  2311                           
  2312                           ; BSR set to: 0
  2313                           ;COBS.c: 36: uint8_t src_byte = 0;
  2314  000448  0E00               	movlw	0
  2315  00044A  0100               	movlb	0	; () banked
  2316  00044C  6F62               	movwf	cobs_encode@src_byte& (0+255),b
  2317                           
  2318                           ; BSR set to: 0
  2319                           ;COBS.c: 37: uint8_t search_len = 1;
  2320  00044E  0E01               	movlw	1
  2321  000450  0100               	movlb	0	; () banked
  2322  000452  6F65               	movwf	cobs_encode@search_len& (0+255),b
  2323                           
  2324                           ;COBS.c: 41: if ((dst_buf_ptr == (0)) || (src_ptr == (0)))
  2325  000454  501B               	movf	cobs_encode@dst_buf_ptr,w,c
  2326  000456  101C               	iorwf	cobs_encode@dst_buf_ptr+1,w,c
  2327  000458  B4D8               	btfsc	status,2,c
  2328  00045A  D004               	goto	l2221
  2329                           
  2330                           ; BSR set to: 0
  2331  00045C  501F               	movf	cobs_encode@src_ptr,w,c
  2332  00045E  1020               	iorwf	cobs_encode@src_ptr+1,w,c
  2333  000460  A4D8               	btfss	status,2,c
  2334  000462  D00A               	goto	l2227
  2335  000464                     l2221:
  2336                           
  2337                           ; BSR set to: 0
  2338                           ;COBS.c: 42: {
  2339                           ;COBS.c: 43: result.status = COBS_ENCODE_NULL_POINTER;
  2340  000464  0E01               	movlw	1
  2341  000466  0100               	movlb	0	; () banked
  2342  000468  6F6C               	movwf	(cobs_encode@result+2)& (0+255),b
  2343                           
  2344                           ; BSR set to: 0
  2345                           ;COBS.c: 44: return result;
  2346  00046A  C06A  F01B         	movff	cobs_encode@result,?_cobs_encode
  2347  00046E  C06B  F01C         	movff	cobs_encode@result+1,?_cobs_encode+1
  2348  000472  C06C  F01D         	movff	cobs_encode@result+2,?_cobs_encode+2
  2349                           
  2350                           ; BSR set to: 0
  2351  000476  0012               	return	
  2352  000478                     l2227:
  2353                           
  2354                           ; BSR set to: 0
  2355                           ;COBS.c: 45: }
  2356                           ;COBS.c: 47: if (src_len != 0)
  2357  000478  5021               	movf	cobs_encode@src_len,w,c
  2358  00047A  1022               	iorwf	cobs_encode@src_len+1,w,c
  2359  00047C  B4D8               	btfsc	status,2,c
  2360  00047E  D05C               	goto	l2271
  2361  000480                     l2229:
  2362                           
  2363                           ; BSR set to: 0
  2364                           ;COBS.c: 51: {
  2365                           ;COBS.c: 53: if (dst_write_ptr >= dst_buf_end_ptr)
  2366  000480  0100               	movlb	0	; () banked
  2367  000482  5163               	movf	cobs_encode@dst_buf_end_ptr& (0+255),w,b
  2368  000484  0100               	movlb	0	; () banked
  2369  000486  5D68               	subwf	cobs_encode@dst_write_ptr& (0+255),w,b
  2370  000488  0100               	movlb	0	; () banked
  2371  00048A  5164               	movf	(cobs_encode@dst_buf_end_ptr+1)& (0+255),w,b
  2372  00048C  0100               	movlb	0	; () banked
  2373  00048E  5969               	subwfb	(cobs_encode@dst_write_ptr+1)& (0+255),w,b
  2374  000490  A0D8               	btfss	status,0,c
  2375  000492  D003               	goto	l2233
  2376                           
  2377                           ; BSR set to: 0
  2378                           ;COBS.c: 54: {
  2379                           ;COBS.c: 55: result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
  2380  000494  0100               	movlb	0	; () banked
  2381  000496  836C               	bsf	(cobs_encode@result+2)& (0+255),1,b
  2382                           
  2383                           ;COBS.c: 56: break;
  2384  000498  D04F               	goto	l2271
  2385  00049A                     l2233:
  2386                           
  2387                           ; BSR set to: 0
  2388                           ;COBS.c: 57: }
  2389                           ;COBS.c: 59: src_byte = *src_ptr++;
  2390  00049A  C01F  FFD9         	movff	cobs_encode@src_ptr,fsr2l
  2391  00049E  C020  FFDA         	movff	cobs_encode@src_ptr+1,fsr2h
  2392  0004A2  50DF               	movf	indf2,w,c
  2393  0004A4  0100               	movlb	0	; () banked
  2394  0004A6  6F62               	movwf	cobs_encode@src_byte& (0+255),b
  2395                           
  2396                           ; BSR set to: 0
  2397  0004A8  4A1F               	infsnz	cobs_encode@src_ptr,f,c
  2398  0004AA  2A20               	incf	cobs_encode@src_ptr+1,f,c
  2399                           
  2400                           ; BSR set to: 0
  2401                           ;COBS.c: 60: if (src_byte == 0)
  2402  0004AC  0100               	movlb	0	; () banked
  2403  0004AE  5162               	movf	cobs_encode@src_byte& (0+255),w,b
  2404  0004B0  0100               	movlb	0	; () banked
  2405  0004B2  A4D8               	btfss	status,2,c
  2406  0004B4  D019               	goto	l2251
  2407                           
  2408                           ; BSR set to: 0
  2409                           ;COBS.c: 61: {
  2410                           ;COBS.c: 63: *dst_code_write_ptr = search_len;
  2411  0004B6  C066  FFD9         	movff	cobs_encode@dst_code_write_ptr,fsr2l
  2412  0004BA  C067  FFDA         	movff	cobs_encode@dst_code_write_ptr+1,fsr2h
  2413  0004BE  C065  FFDF         	movff	cobs_encode@search_len,indf2
  2414                           
  2415                           ; BSR set to: 0
  2416                           ;COBS.c: 64: dst_code_write_ptr = dst_write_ptr++;
  2417  0004C2  C068  F066         	movff	cobs_encode@dst_write_ptr,cobs_encode@dst_code_write_ptr
  2418  0004C6  C069  F067         	movff	cobs_encode@dst_write_ptr+1,cobs_encode@dst_code_write_ptr+1
  2419                           
  2420                           ; BSR set to: 0
  2421  0004CA  0100               	movlb	0	; () banked
  2422  0004CC  4B68               	infsnz	cobs_encode@dst_write_ptr& (0+255),f,b
  2423  0004CE  2B69               	incf	(cobs_encode@dst_write_ptr+1)& (0+255),f,b
  2424                           
  2425                           ; BSR set to: 0
  2426                           ;COBS.c: 65: search_len = 1;
  2427  0004D0  0E01               	movlw	1
  2428  0004D2  0100               	movlb	0	; () banked
  2429  0004D4  6F65               	movwf	cobs_encode@search_len& (0+255),b
  2430                           
  2431                           ; BSR set to: 0
  2432                           ;COBS.c: 66: if (src_ptr >= src_end_ptr)
  2433  0004D6  0100               	movlb	0	; () banked
  2434  0004D8  5160               	movf	cobs_encode@src_end_ptr& (0+255),w,b
  2435  0004DA  5C1F               	subwf	cobs_encode@src_ptr,w,c
  2436  0004DC  0100               	movlb	0	; () banked
  2437  0004DE  5161               	movf	(cobs_encode@src_end_ptr+1)& (0+255),w,b
  2438  0004E0  5820               	subwfb	cobs_encode@src_ptr+1,w,c
  2439  0004E2  B0D8               	btfsc	status,0,c
  2440  0004E4  D029               	goto	l2271
  2441  0004E6  D7CC               	goto	l2229
  2442  0004E8                     l2251:
  2443                           
  2444                           ; BSR set to: 0
  2445                           ;COBS.c: 71: else
  2446                           ;COBS.c: 72: {
  2447                           ;COBS.c: 74: *dst_write_ptr++ = src_byte;
  2448  0004E8  C068  FFD9         	movff	cobs_encode@dst_write_ptr,fsr2l
  2449  0004EC  C069  FFDA         	movff	cobs_encode@dst_write_ptr+1,fsr2h
  2450  0004F0  C062  FFDF         	movff	cobs_encode@src_byte,indf2
  2451                           
  2452                           ; BSR set to: 0
  2453  0004F4  0100               	movlb	0	; () banked
  2454  0004F6  4B68               	infsnz	cobs_encode@dst_write_ptr& (0+255),f,b
  2455  0004F8  2B69               	incf	(cobs_encode@dst_write_ptr+1)& (0+255),f,b
  2456                           
  2457                           ; BSR set to: 0
  2458                           ;COBS.c: 75: search_len++;
  2459  0004FA  0100               	movlb	0	; () banked
  2460  0004FC  2B65               	incf	cobs_encode@search_len& (0+255),f,b
  2461                           
  2462                           ; BSR set to: 0
  2463                           ;COBS.c: 76: if (src_ptr >= src_end_ptr)
  2464  0004FE  0100               	movlb	0	; () banked
  2465  000500  5160               	movf	cobs_encode@src_end_ptr& (0+255),w,b
  2466  000502  5C1F               	subwf	cobs_encode@src_ptr,w,c
  2467  000504  0100               	movlb	0	; () banked
  2468  000506  5161               	movf	(cobs_encode@src_end_ptr+1)& (0+255),w,b
  2469  000508  5820               	subwfb	cobs_encode@src_ptr+1,w,c
  2470  00050A  B0D8               	btfsc	status,0,c
  2471  00050C  D015               	goto	l2271
  2472                           
  2473                           ; BSR set to: 0
  2474                           ;COBS.c: 79: }
  2475                           ;COBS.c: 80: if (search_len == 0xFF)
  2476                           
  2477                           ; BSR set to: 0
  2478                           
  2479                           ; BSR set to: 0
  2480                           ;COBS.c: 77: {
  2481                           ;COBS.c: 78: break;
  2482  00050E  0100               	movlb	0	; () banked
  2483  000510  2965               	incf	cobs_encode@search_len& (0+255),w,b
  2484  000512  A4D8               	btfss	status,2,c
  2485  000514  D7B5               	goto	l2229
  2486                           
  2487                           ; BSR set to: 0
  2488                           ;COBS.c: 81: {
  2489                           ;COBS.c: 84: *dst_code_write_ptr = search_len;
  2490  000516  C066  FFD9         	movff	cobs_encode@dst_code_write_ptr,fsr2l
  2491  00051A  C067  FFDA         	movff	cobs_encode@dst_code_write_ptr+1,fsr2h
  2492  00051E  C065  FFDF         	movff	cobs_encode@search_len,indf2
  2493                           
  2494                           ; BSR set to: 0
  2495                           ;COBS.c: 85: dst_code_write_ptr = dst_write_ptr++;
  2496  000522  C068  F066         	movff	cobs_encode@dst_write_ptr,cobs_encode@dst_code_write_ptr
  2497  000526  C069  F067         	movff	cobs_encode@dst_write_ptr+1,cobs_encode@dst_code_write_ptr+1
  2498                           
  2499                           ; BSR set to: 0
  2500  00052A  0100               	movlb	0	; () banked
  2501  00052C  4B68               	infsnz	cobs_encode@dst_write_ptr& (0+255),f,b
  2502  00052E  2B69               	incf	(cobs_encode@dst_write_ptr+1)& (0+255),f,b
  2503                           
  2504                           ; BSR set to: 0
  2505                           ;COBS.c: 86: search_len = 1;
  2506  000530  0E01               	movlw	1
  2507  000532  0100               	movlb	0	; () banked
  2508  000534  6F65               	movwf	cobs_encode@search_len& (0+255),b
  2509                           
  2510                           ; BSR set to: 0
  2511                           ;COBS.c: 87: }
  2512                           ;COBS.c: 88: }
  2513                           ;COBS.c: 89: }
  2514                           
  2515                           ; BSR set to: 0
  2516  000536  D7A4               	goto	l2229
  2517  000538                     l2271:
  2518                           
  2519                           ; BSR set to: 0
  2520                           ;COBS.c: 90: }
  2521                           ;COBS.c: 96: if (dst_code_write_ptr >= dst_buf_end_ptr)
  2522  000538  0100               	movlb	0	; () banked
  2523  00053A  5163               	movf	cobs_encode@dst_buf_end_ptr& (0+255),w,b
  2524  00053C  0100               	movlb	0	; () banked
  2525  00053E  5D66               	subwf	cobs_encode@dst_code_write_ptr& (0+255),w,b
  2526  000540  0100               	movlb	0	; () banked
  2527  000542  5164               	movf	(cobs_encode@dst_buf_end_ptr+1)& (0+255),w,b
  2528  000544  0100               	movlb	0	; () banked
  2529  000546  5967               	subwfb	(cobs_encode@dst_code_write_ptr+1)& (0+255),w,b
  2530  000548  A0D8               	btfss	status,0,c
  2531  00054A  D007               	goto	l2277
  2532                           
  2533                           ; BSR set to: 0
  2534                           ;COBS.c: 97: {
  2535                           ;COBS.c: 99: result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
  2536  00054C  0100               	movlb	0	; () banked
  2537  00054E  836C               	bsf	(cobs_encode@result+2)& (0+255),1,b
  2538                           
  2539                           ; BSR set to: 0
  2540                           ;COBS.c: 100: dst_write_ptr = dst_buf_end_ptr;
  2541  000550  C063  F068         	movff	cobs_encode@dst_buf_end_ptr,cobs_encode@dst_write_ptr
  2542  000554  C064  F069         	movff	cobs_encode@dst_buf_end_ptr+1,cobs_encode@dst_write_ptr+1
  2543                           
  2544                           ;COBS.c: 101: }
  2545  000558  D006               	goto	l2279
  2546  00055A                     l2277:
  2547                           
  2548                           ; BSR set to: 0
  2549                           ;COBS.c: 102: else
  2550                           ;COBS.c: 103: {
  2551                           ;COBS.c: 105: *dst_code_write_ptr = search_len;
  2552  00055A  C066  FFD9         	movff	cobs_encode@dst_code_write_ptr,fsr2l
  2553  00055E  C067  FFDA         	movff	cobs_encode@dst_code_write_ptr+1,fsr2h
  2554  000562  C065  FFDF         	movff	cobs_encode@search_len,indf2
  2555  000566                     l2279:
  2556                           
  2557                           ; BSR set to: 0
  2558                           ;COBS.c: 106: }
  2559                           ;COBS.c: 109: result.out_len = dst_write_ptr - dst_buf_ptr;
  2560  000566  C01B  F023         	movff	cobs_encode@dst_buf_ptr,??_cobs_encode
  2561  00056A  C01C  F024         	movff	cobs_encode@dst_buf_ptr+1,??_cobs_encode+1
  2562  00056E  1E23               	comf	??_cobs_encode,f,c
  2563  000570  1E24               	comf	??_cobs_encode+1,f,c
  2564  000572  4A23               	infsnz	??_cobs_encode,f,c
  2565  000574  2A24               	incf	??_cobs_encode+1,f,c
  2566  000576  0100               	movlb	0	; () banked
  2567  000578  5168               	movf	cobs_encode@dst_write_ptr& (0+255),w,b
  2568  00057A  2423               	addwf	??_cobs_encode,w,c
  2569  00057C  0100               	movlb	0	; () banked
  2570  00057E  6F6A               	movwf	cobs_encode@result& (0+255),b
  2571  000580  0100               	movlb	0	; () banked
  2572  000582  5169               	movf	(cobs_encode@dst_write_ptr+1)& (0+255),w,b
  2573  000584  2024               	addwfc	??_cobs_encode+1,w,c
  2574  000586  0100               	movlb	0	; () banked
  2575  000588  6F6B               	movwf	(cobs_encode@result+1)& (0+255),b
  2576                           
  2577                           ; BSR set to: 0
  2578                           ;COBS.c: 111: return result;
  2579  00058A  C06A  F01B         	movff	cobs_encode@result,?_cobs_encode
  2580  00058E  C06B  F01C         	movff	cobs_encode@result+1,?_cobs_encode+1
  2581  000592  C06C  F01D         	movff	cobs_encode@result+2,?_cobs_encode+2
  2582  000596  0012               	return	
  2583  000598                     __end_of_cobs_encode:
  2584                           	opt stack 0
  2585                           tblptru	equ	0xFF8
  2586                           tblptrh	equ	0xFF7
  2587                           tblptrl	equ	0xFF6
  2588                           tablat	equ	0xFF5
  2589                           prodh	equ	0xFF4
  2590                           prodl	equ	0xFF3
  2591                           postinc0	equ	0xFEE
  2592                           wreg	equ	0xFE8
  2593                           indf1	equ	0xFE7
  2594                           postdec1	equ	0xFE5
  2595                           fsr1h	equ	0xFE2
  2596                           fsr1l	equ	0xFE1
  2597                           indf2	equ	0xFDF
  2598                           postinc2	equ	0xFDE
  2599                           postdec2	equ	0xFDD
  2600                           fsr2h	equ	0xFDA
  2601                           fsr2l	equ	0xFD9
  2602                           status	equ	0xFD8
  2603                           
  2604 ;; *************** function _Send_put *****************
  2605 ;; Defined at:
  2606 ;;		line 129 in file "UART.c"
  2607 ;; Parameters:    Size  Location     Type
  2608 ;;  _data           1    wreg     unsigned char 
  2609 ;; Auto vars:     Size  Location     Type
  2610 ;;  _data           1   37[COMRAM] unsigned char 
  2611 ;; Return value:  Size  Location     Type
  2612 ;;                  1    wreg      void 
  2613 ;; Registers used:
  2614 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2615 ;; Tracked objects:
  2616 ;;		On entry : 0/0
  2617 ;;		On exit  : 0/0
  2618 ;;		Unchanged: 0/0
  2619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2620 ;;      Params:         0       0       0       0       0       0       0
  2621 ;;      Locals:         1       0       0       0       0       0       0
  2622 ;;      Temps:          0       0       0       0       0       0       0
  2623 ;;      Totals:         1       0       0       0       0       0       0
  2624 ;;Total ram usage:        1 bytes
  2625 ;; Hardware stack levels used:    1
  2626 ;; Hardware stack levels required when called:    6
  2627 ;; This function calls:
  2628 ;;		_UART_buff_get
  2629 ;;		_UART_buff_put
  2630 ;; This function is called by:
  2631 ;;		_sendData
  2632 ;;		_putch
  2633 ;; This function uses a non-reentrant model
  2634 ;;
  2635                           
  2636                           	psect	text10
  2637  000E1E                     __ptext10:
  2638                           	opt stack 0
  2639  000E1E                     _Send_put:
  2640                           	opt stack 20
  2641                           
  2642                           ; BSR set to: 0
  2643                           ;incstack = 0
  2644                           ;Send_put@_data stored from wreg
  2645  000E1E  6E26               	movwf	Send_put@_data,c
  2646                           
  2647                           ;UART.c: 130: UART_buff_put(&output_buffer, _data);
  2648  000E20  0E00               	movlw	low _output_buffer
  2649  000E22  6E21               	movwf	UART_buff_put@_this,c
  2650  000E24  0E01               	movlw	high _output_buffer
  2651  000E26  6E22               	movwf	UART_buff_put@_this+1,c
  2652  000E28  C026  F023         	movff	Send_put@_data,UART_buff_put@c
  2653  000E2C  ECCC  F002         	call	_UART_buff_put	;wreg free
  2654                           
  2655                           ;UART.c: 131: if (Transmit_stall == 1) {
  2656  000E30  0444               	decf	_Transmit_stall,w,c
  2657  000E32  A4D8               	btfss	status,2,c
  2658  000E34  0012               	return	
  2659                           
  2660                           ;UART.c: 132: Transmit_stall = 0;
  2661  000E36  0E00               	movlw	0
  2662  000E38  6E44               	movwf	_Transmit_stall,c
  2663                           
  2664                           ;UART.c: 133: TXREG1 = UART_buff_get(&output_buffer);
  2665  000E3A  0E00               	movlw	low _output_buffer
  2666  000E3C  6E21               	movwf	UART_buff_get@_this,c
  2667  000E3E  0E01               	movlw	high _output_buffer
  2668  000E40  6E22               	movwf	UART_buff_get@_this+1,c
  2669  000E42  EC5C  F005         	call	_UART_buff_get	;wreg free
  2670  000E46  6EAD               	movwf	4013,c	;volatile
  2671                           
  2672                           ;UART.c: 134: PIE1bits.TX1IE = 1;
  2673  000E48  889D               	bsf	3997,4,c	;volatile
  2674  000E4A  0012               	return	
  2675  000E4C                     __end_of_Send_put:
  2676                           	opt stack 0
  2677                           tblptru	equ	0xFF8
  2678                           tblptrh	equ	0xFF7
  2679                           tblptrl	equ	0xFF6
  2680                           tablat	equ	0xFF5
  2681                           prodh	equ	0xFF4
  2682                           prodl	equ	0xFF3
  2683                           postinc0	equ	0xFEE
  2684                           wreg	equ	0xFE8
  2685                           indf1	equ	0xFE7
  2686                           postdec1	equ	0xFE5
  2687                           fsr1h	equ	0xFE2
  2688                           fsr1l	equ	0xFE1
  2689                           indf2	equ	0xFDF
  2690                           postinc2	equ	0xFDE
  2691                           postdec2	equ	0xFDD
  2692                           fsr2h	equ	0xFDA
  2693                           fsr2l	equ	0xFD9
  2694                           status	equ	0xFD8
  2695                           
  2696 ;; *************** function _UART_buff_put *****************
  2697 ;; Defined at:
  2698 ;;		line 67 in file "UART.c"
  2699 ;; Parameters:    Size  Location     Type
  2700 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  2701 ;;		 -> output_buffer(106), input_buffer(106), 
  2702 ;;  c               1   34[COMRAM] const unsigned char 
  2703 ;; Auto vars:     Size  Location     Type
  2704 ;;		None
  2705 ;; Return value:  Size  Location     Type
  2706 ;;                  1    wreg      void 
  2707 ;; Registers used:
  2708 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2709 ;; Tracked objects:
  2710 ;;		On entry : 0/0
  2711 ;;		On exit  : 0/0
  2712 ;;		Unchanged: 0/0
  2713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2714 ;;      Params:         3       0       0       0       0       0       0
  2715 ;;      Locals:         0       0       0       0       0       0       0
  2716 ;;      Temps:          2       0       0       0       0       0       0
  2717 ;;      Totals:         5       0       0       0       0       0       0
  2718 ;;Total ram usage:        5 bytes
  2719 ;; Hardware stack levels used:    1
  2720 ;; Hardware stack levels required when called:    5
  2721 ;; This function calls:
  2722 ;;		_UART_buff_modulo_inc
  2723 ;; This function is called by:
  2724 ;;		_Send_put
  2725 ;; This function uses a non-reentrant model
  2726 ;;
  2727                           
  2728                           	psect	text11
  2729  000598                     __ptext11:
  2730                           	opt stack 0
  2731  000598                     _UART_buff_put:
  2732                           	opt stack 20
  2733                           
  2734                           ;UART.c: 68: if (_this->count < 100) {
  2735                           
  2736                           ;incstack = 0
  2737  000598  EE20 F068          	lfsr	2,104
  2738  00059C  5021               	movf	UART_buff_put@_this,w,c
  2739  00059E  26D9               	addwf	fsr2l,f,c
  2740  0005A0  5022               	movf	UART_buff_put@_this+1,w,c
  2741  0005A2  22DA               	addwfc	fsr2h,f,c
  2742  0005A4  0E01               	movlw	1
  2743  0005A6  BEDB               	btfsc	plusw2,7,c
  2744  0005A8  D007               	goto	l2177
  2745  0005AA  0E01               	movlw	1
  2746  0005AC  50DB               	movf	plusw2,w,c
  2747  0005AE  E13A               	bnz	l2183
  2748  0005B0  0E64               	movlw	100
  2749  0005B2  5CDE               	subwf	postinc2,w,c
  2750  0005B4  B0D8               	btfsc	status,0,c
  2751  0005B6  D036               	goto	l2183
  2752  0005B8                     l2177:
  2753                           
  2754                           ;UART.c: 69: _this->buf[_this->head] = c;
  2755  0005B8  EE20 F064          	lfsr	2,100
  2756  0005BC  5021               	movf	UART_buff_put@_this,w,c
  2757  0005BE  26D9               	addwf	fsr2l,f,c
  2758  0005C0  5022               	movf	UART_buff_put@_this+1,w,c
  2759  0005C2  22DA               	addwfc	fsr2h,f,c
  2760  0005C4  CFDE F024          	movff	postinc2,??_UART_buff_put
  2761  0005C8  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  2762  0005CC  5024               	movf	??_UART_buff_put,w,c
  2763  0005CE  2421               	addwf	UART_buff_put@_this,w,c
  2764  0005D0  6ED9               	movwf	fsr2l,c
  2765  0005D2  5025               	movf	??_UART_buff_put+1,w,c
  2766  0005D4  2022               	addwfc	UART_buff_put@_this+1,w,c
  2767  0005D6  6EDA               	movwf	fsr2h,c
  2768  0005D8  C023  FFDF         	movff	UART_buff_put@c,indf2
  2769                           
  2770                           ;UART.c: 70: _this->head = UART_buff_modulo_inc(_this->head, 100);
  2771  0005DC  EE20 F064          	lfsr	2,100
  2772  0005E0  5021               	movf	UART_buff_put@_this,w,c
  2773  0005E2  26D9               	addwf	fsr2l,f,c
  2774  0005E4  5022               	movf	UART_buff_put@_this+1,w,c
  2775  0005E6  22DA               	addwfc	fsr2h,f,c
  2776  0005E8  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  2777  0005EC  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  2778  0005F0  0E00               	movlw	0
  2779  0005F2  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  2780  0005F4  0E64               	movlw	100
  2781  0005F6  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  2782  0005F8  EC52  F007         	call	_UART_buff_modulo_inc	;wreg free
  2783  0005FC  EE20 F064          	lfsr	2,100
  2784  000600  5021               	movf	UART_buff_put@_this,w,c
  2785  000602  26D9               	addwf	fsr2l,f,c
  2786  000604  5022               	movf	UART_buff_put@_this+1,w,c
  2787  000606  22DA               	addwfc	fsr2h,f,c
  2788  000608  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  2789  00060C  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  2790                           
  2791                           ;UART.c: 71: ++_this->count;
  2792  000610  EE20 F068          	lfsr	2,104
  2793  000614  5021               	movf	UART_buff_put@_this,w,c
  2794  000616  26D9               	addwf	fsr2l,f,c
  2795  000618  5022               	movf	UART_buff_put@_this+1,w,c
  2796  00061A  22DA               	addwfc	fsr2h,f,c
  2797  00061C  2ADE               	incf	postinc2,f,c
  2798  00061E  0E00               	movlw	0
  2799  000620  22DD               	addwfc	postdec2,f,c
  2800                           
  2801                           ;UART.c: 72: } else {
  2802  000622  0012               	return	
  2803  000624                     l2183:
  2804                           
  2805                           ;UART.c: 73: _this->buf[_this->head] = c;
  2806  000624  EE20 F064          	lfsr	2,100
  2807  000628  5021               	movf	UART_buff_put@_this,w,c
  2808  00062A  26D9               	addwf	fsr2l,f,c
  2809  00062C  5022               	movf	UART_buff_put@_this+1,w,c
  2810  00062E  22DA               	addwfc	fsr2h,f,c
  2811  000630  CFDE F024          	movff	postinc2,??_UART_buff_put
  2812  000634  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  2813  000638  5024               	movf	??_UART_buff_put,w,c
  2814  00063A  2421               	addwf	UART_buff_put@_this,w,c
  2815  00063C  6ED9               	movwf	fsr2l,c
  2816  00063E  5025               	movf	??_UART_buff_put+1,w,c
  2817  000640  2022               	addwfc	UART_buff_put@_this+1,w,c
  2818  000642  6EDA               	movwf	fsr2h,c
  2819  000644  C023  FFDF         	movff	UART_buff_put@c,indf2
  2820                           
  2821                           ;UART.c: 74: _this->head = UART_buff_modulo_inc(_this->head, 100);
  2822  000648  EE20 F064          	lfsr	2,100
  2823  00064C  5021               	movf	UART_buff_put@_this,w,c
  2824  00064E  26D9               	addwf	fsr2l,f,c
  2825  000650  5022               	movf	UART_buff_put@_this+1,w,c
  2826  000652  22DA               	addwfc	fsr2h,f,c
  2827  000654  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  2828  000658  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  2829  00065C  0E00               	movlw	0
  2830  00065E  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  2831  000660  0E64               	movlw	100
  2832  000662  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  2833  000664  EC52  F007         	call	_UART_buff_modulo_inc	;wreg free
  2834  000668  EE20 F064          	lfsr	2,100
  2835  00066C  5021               	movf	UART_buff_put@_this,w,c
  2836  00066E  26D9               	addwf	fsr2l,f,c
  2837  000670  5022               	movf	UART_buff_put@_this+1,w,c
  2838  000672  22DA               	addwfc	fsr2h,f,c
  2839  000674  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  2840  000678  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  2841                           
  2842                           ;UART.c: 75: _this->tail = UART_buff_modulo_inc(_this->tail, 100);
  2843  00067C  EE20 F066          	lfsr	2,102
  2844  000680  5021               	movf	UART_buff_put@_this,w,c
  2845  000682  26D9               	addwf	fsr2l,f,c
  2846  000684  5022               	movf	UART_buff_put@_this+1,w,c
  2847  000686  22DA               	addwfc	fsr2h,f,c
  2848  000688  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  2849  00068C  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  2850  000690  0E00               	movlw	0
  2851  000692  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  2852  000694  0E64               	movlw	100
  2853  000696  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  2854  000698  EC52  F007         	call	_UART_buff_modulo_inc	;wreg free
  2855  00069C  EE20 F066          	lfsr	2,102
  2856  0006A0  5021               	movf	UART_buff_put@_this,w,c
  2857  0006A2  26D9               	addwf	fsr2l,f,c
  2858  0006A4  5022               	movf	UART_buff_put@_this+1,w,c
  2859  0006A6  22DA               	addwfc	fsr2h,f,c
  2860  0006A8  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  2861  0006AC  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  2862  0006B0  0012               	return	
  2863  0006B2                     __end_of_UART_buff_put:
  2864                           	opt stack 0
  2865                           tblptru	equ	0xFF8
  2866                           tblptrh	equ	0xFF7
  2867                           tblptrl	equ	0xFF6
  2868                           tablat	equ	0xFF5
  2869                           prodh	equ	0xFF4
  2870                           prodl	equ	0xFF3
  2871                           postinc0	equ	0xFEE
  2872                           wreg	equ	0xFE8
  2873                           indf1	equ	0xFE7
  2874                           postdec1	equ	0xFE5
  2875                           fsr1h	equ	0xFE2
  2876                           fsr1l	equ	0xFE1
  2877                           indf2	equ	0xFDF
  2878                           postinc2	equ	0xFDE
  2879                           postdec2	equ	0xFDD
  2880                           plusw2	equ	0xFDB
  2881                           fsr2h	equ	0xFDA
  2882                           fsr2l	equ	0xFD9
  2883                           status	equ	0xFD8
  2884                           
  2885 ;; *************** function _UART_buff_get *****************
  2886 ;; Defined at:
  2887 ;;		line 80 in file "UART.c"
  2888 ;; Parameters:    Size  Location     Type
  2889 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  2890 ;;		 -> output_buffer(106), input_buffer(106), 
  2891 ;; Auto vars:     Size  Location     Type
  2892 ;;  c               1   36[COMRAM] unsigned char 
  2893 ;; Return value:  Size  Location     Type
  2894 ;;                  1    wreg      unsigned char 
  2895 ;; Registers used:
  2896 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2897 ;; Tracked objects:
  2898 ;;		On entry : 0/0
  2899 ;;		On exit  : 0/0
  2900 ;;		Unchanged: 0/0
  2901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2902 ;;      Params:         2       0       0       0       0       0       0
  2903 ;;      Locals:         1       0       0       0       0       0       0
  2904 ;;      Temps:          2       0       0       0       0       0       0
  2905 ;;      Totals:         5       0       0       0       0       0       0
  2906 ;;Total ram usage:        5 bytes
  2907 ;; Hardware stack levels used:    1
  2908 ;; Hardware stack levels required when called:    5
  2909 ;; This function calls:
  2910 ;;		_UART_buff_modulo_inc
  2911 ;; This function is called by:
  2912 ;;		_Receive_get
  2913 ;;		_Send_put
  2914 ;; This function uses a non-reentrant model
  2915 ;;
  2916                           
  2917                           	psect	text12
  2918  000AB8                     __ptext12:
  2919                           	opt stack 0
  2920  000AB8                     _UART_buff_get:
  2921                           	opt stack 22
  2922                           
  2923                           ;UART.c: 81: unsigned char c;
  2924                           ;UART.c: 82: if (_this->count > 0) {
  2925                           
  2926                           ;incstack = 0
  2927  000AB8  EE20 F068          	lfsr	2,104
  2928  000ABC  5021               	movf	UART_buff_get@_this,w,c
  2929  000ABE  26D9               	addwf	fsr2l,f,c
  2930  000AC0  5022               	movf	UART_buff_get@_this+1,w,c
  2931  000AC2  22DA               	addwfc	fsr2h,f,c
  2932  000AC4  0E01               	movlw	1
  2933  000AC6  BEDB               	btfsc	plusw2,7,c
  2934  000AC8  D03C               	goto	l2197
  2935  000ACA  0E01               	movlw	1
  2936  000ACC  50DB               	movf	plusw2,w,c
  2937  000ACE  E103               	bnz	u1210
  2938  000AD0  04DE               	decf	postinc2,w,c
  2939  000AD2  A0D8               	btfss	status,0,c
  2940  000AD4  D036               	goto	l2197
  2941  000AD6                     u1210:
  2942                           
  2943                           ;UART.c: 83: c = _this->buf[_this->tail];
  2944  000AD6  EE20 F066          	lfsr	2,102
  2945  000ADA  5021               	movf	UART_buff_get@_this,w,c
  2946  000ADC  26D9               	addwf	fsr2l,f,c
  2947  000ADE  5022               	movf	UART_buff_get@_this+1,w,c
  2948  000AE0  22DA               	addwfc	fsr2h,f,c
  2949  000AE2  CFDE F023          	movff	postinc2,??_UART_buff_get
  2950  000AE6  CFDD F024          	movff	postdec2,??_UART_buff_get+1
  2951  000AEA  5023               	movf	??_UART_buff_get,w,c
  2952  000AEC  2421               	addwf	UART_buff_get@_this,w,c
  2953  000AEE  6ED9               	movwf	fsr2l,c
  2954  000AF0  5024               	movf	??_UART_buff_get+1,w,c
  2955  000AF2  2022               	addwfc	UART_buff_get@_this+1,w,c
  2956  000AF4  6EDA               	movwf	fsr2h,c
  2957  000AF6  50DF               	movf	indf2,w,c
  2958  000AF8  6E25               	movwf	UART_buff_get@c,c
  2959                           
  2960                           ;UART.c: 84: _this->tail = UART_buff_modulo_inc(_this->tail, 100);
  2961  000AFA  EE20 F066          	lfsr	2,102
  2962  000AFE  5021               	movf	UART_buff_get@_this,w,c
  2963  000B00  26D9               	addwf	fsr2l,f,c
  2964  000B02  5022               	movf	UART_buff_get@_this+1,w,c
  2965  000B04  22DA               	addwfc	fsr2h,f,c
  2966  000B06  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  2967  000B0A  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  2968  000B0E  0E00               	movlw	0
  2969  000B10  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  2970  000B12  0E64               	movlw	100
  2971  000B14  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  2972  000B16  EC52  F007         	call	_UART_buff_modulo_inc	;wreg free
  2973  000B1A  EE20 F066          	lfsr	2,102
  2974  000B1E  5021               	movf	UART_buff_get@_this,w,c
  2975  000B20  26D9               	addwf	fsr2l,f,c
  2976  000B22  5022               	movf	UART_buff_get@_this+1,w,c
  2977  000B24  22DA               	addwfc	fsr2h,f,c
  2978  000B26  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  2979  000B2A  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  2980                           
  2981                           ;UART.c: 85: --_this->count;
  2982  000B2E  EE20 F068          	lfsr	2,104
  2983  000B32  5021               	movf	UART_buff_get@_this,w,c
  2984  000B34  26D9               	addwf	fsr2l,f,c
  2985  000B36  5022               	movf	UART_buff_get@_this+1,w,c
  2986  000B38  22DA               	addwfc	fsr2h,f,c
  2987  000B3A  06DE               	decf	postinc2,f,c
  2988  000B3C  0E00               	movlw	0
  2989  000B3E  5ADD               	subwfb	postdec2,f,c
  2990                           
  2991                           ;UART.c: 86: } else {
  2992  000B40  D002               	goto	l85
  2993  000B42                     l2197:
  2994                           
  2995                           ;UART.c: 87: c = 0;
  2996  000B42  0E00               	movlw	0
  2997  000B44  6E25               	movwf	UART_buff_get@c,c
  2998  000B46                     l85:
  2999                           
  3000                           ;UART.c: 88: }
  3001                           ;UART.c: 89: return (c);
  3002  000B46  5025               	movf	UART_buff_get@c,w,c
  3003  000B48  0012               	return	
  3004  000B4A                     __end_of_UART_buff_get:
  3005                           	opt stack 0
  3006                           tblptru	equ	0xFF8
  3007                           tblptrh	equ	0xFF7
  3008                           tblptrl	equ	0xFF6
  3009                           tablat	equ	0xFF5
  3010                           prodh	equ	0xFF4
  3011                           prodl	equ	0xFF3
  3012                           postinc0	equ	0xFEE
  3013                           wreg	equ	0xFE8
  3014                           indf1	equ	0xFE7
  3015                           postdec1	equ	0xFE5
  3016                           fsr1h	equ	0xFE2
  3017                           fsr1l	equ	0xFE1
  3018                           indf2	equ	0xFDF
  3019                           postinc2	equ	0xFDE
  3020                           postdec2	equ	0xFDD
  3021                           plusw2	equ	0xFDB
  3022                           fsr2h	equ	0xFDA
  3023                           fsr2l	equ	0xFD9
  3024                           status	equ	0xFD8
  3025                           
  3026 ;; *************** function _UART_buff_modulo_inc *****************
  3027 ;; Defined at:
  3028 ;;		line 105 in file "UART.c"
  3029 ;; Parameters:    Size  Location     Type
  3030 ;;  value           2   26[COMRAM] const unsigned int 
  3031 ;;  modulus         2   28[COMRAM] const unsigned int 
  3032 ;; Auto vars:     Size  Location     Type
  3033 ;;  my_value        2   30[COMRAM] unsigned int 
  3034 ;; Return value:  Size  Location     Type
  3035 ;;                  2   26[COMRAM] unsigned int 
  3036 ;; Registers used:
  3037 ;;		wreg, status,2, status,0
  3038 ;; Tracked objects:
  3039 ;;		On entry : 0/0
  3040 ;;		On exit  : 0/0
  3041 ;;		Unchanged: 0/0
  3042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3043 ;;      Params:         4       0       0       0       0       0       0
  3044 ;;      Locals:         2       0       0       0       0       0       0
  3045 ;;      Temps:          0       0       0       0       0       0       0
  3046 ;;      Totals:         6       0       0       0       0       0       0
  3047 ;;Total ram usage:        6 bytes
  3048 ;; Hardware stack levels used:    1
  3049 ;; Hardware stack levels required when called:    4
  3050 ;; This function calls:
  3051 ;;		Nothing
  3052 ;; This function is called by:
  3053 ;;		_UART_buff_put
  3054 ;;		_UART_buff_get
  3055 ;; This function uses a non-reentrant model
  3056 ;;
  3057                           
  3058                           	psect	text13
  3059  000EA4                     __ptext13:
  3060                           	opt stack 0
  3061  000EA4                     _UART_buff_modulo_inc:
  3062                           	opt stack 22
  3063                           
  3064                           ;UART.c: 106: unsigned int my_value = value + 1;
  3065                           
  3066                           ;incstack = 0
  3067  000EA4  0E01               	movlw	1
  3068  000EA6  241B               	addwf	UART_buff_modulo_inc@value,w,c
  3069  000EA8  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  3070  000EAA  0E00               	movlw	0
  3071  000EAC  201C               	addwfc	UART_buff_modulo_inc@value+1,w,c
  3072  000EAE  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  3073                           
  3074                           ;UART.c: 107: if (my_value >= modulus) {
  3075  000EB0  501D               	movf	UART_buff_modulo_inc@modulus,w,c
  3076  000EB2  5C1F               	subwf	UART_buff_modulo_inc@my_value,w,c
  3077  000EB4  501E               	movf	UART_buff_modulo_inc@modulus+1,w,c
  3078  000EB6  5820               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  3079  000EB8  A0D8               	btfss	status,0,c
  3080  000EBA  D004               	goto	l2171
  3081                           
  3082                           ;UART.c: 108: my_value = 0;
  3083  000EBC  0E00               	movlw	0
  3084  000EBE  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  3085  000EC0  0E00               	movlw	0
  3086  000EC2  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  3087  000EC4                     l2171:
  3088                           
  3089                           ;UART.c: 109: }
  3090                           ;UART.c: 110: return (my_value);
  3091  000EC4  C01F  F01B         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  3092  000EC8  C020  F01C         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  3093  000ECC  0012               	return	
  3094  000ECE                     __end_of_UART_buff_modulo_inc:
  3095                           	opt stack 0
  3096                           tblptru	equ	0xFF8
  3097                           tblptrh	equ	0xFF7
  3098                           tblptrl	equ	0xFF6
  3099                           tablat	equ	0xFF5
  3100                           prodh	equ	0xFF4
  3101                           prodl	equ	0xFF3
  3102                           postinc0	equ	0xFEE
  3103                           wreg	equ	0xFE8
  3104                           indf1	equ	0xFE7
  3105                           postdec1	equ	0xFE5
  3106                           fsr1h	equ	0xFE2
  3107                           fsr1l	equ	0xFE1
  3108                           indf2	equ	0xFDF
  3109                           postinc2	equ	0xFDE
  3110                           postdec2	equ	0xFDD
  3111                           plusw2	equ	0xFDB
  3112                           fsr2h	equ	0xFDA
  3113                           fsr2l	equ	0xFD9
  3114                           status	equ	0xFD8
  3115                           
  3116 ;; *************** function _CRC8 *****************
  3117 ;; Defined at:
  3118 ;;		line 21 in file "CarCom.c"
  3119 ;; Parameters:    Size  Location     Type
  3120 ;;  data            2   26[COMRAM] PTR const unsigned char 
  3121 ;;		 -> ProcessArray(30), sendData@SendArray(30), 
  3122 ;;  len             1   28[COMRAM] unsigned char 
  3123 ;; Auto vars:     Size  Location     Type
  3124 ;;  sum             1   29[COMRAM] unsigned char 
  3125 ;;  tempI           1   31[COMRAM] unsigned char 
  3126 ;;  extract         1   30[COMRAM] unsigned char 
  3127 ;;  crc             1   32[COMRAM] unsigned char 
  3128 ;; Return value:  Size  Location     Type
  3129 ;;                  1    wreg      unsigned char 
  3130 ;; Registers used:
  3131 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3132 ;; Tracked objects:
  3133 ;;		On entry : 0/0
  3134 ;;		On exit  : 0/0
  3135 ;;		Unchanged: 0/0
  3136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3137 ;;      Params:         3       0       0       0       0       0       0
  3138 ;;      Locals:         4       0       0       0       0       0       0
  3139 ;;      Temps:          0       0       0       0       0       0       0
  3140 ;;      Totals:         7       0       0       0       0       0       0
  3141 ;;Total ram usage:        7 bytes
  3142 ;; Hardware stack levels used:    1
  3143 ;; Hardware stack levels required when called:    4
  3144 ;; This function calls:
  3145 ;;		Nothing
  3146 ;; This function is called by:
  3147 ;;		_sendData
  3148 ;;		_receiveData
  3149 ;; This function uses a non-reentrant model
  3150 ;;
  3151                           
  3152                           	psect	text14
  3153  000D32                     __ptext14:
  3154                           	opt stack 0
  3155  000D32                     _CRC8:
  3156                           	opt stack 22
  3157                           
  3158                           ;CarCom.c: 22: unsigned char crc = 0x00;
  3159                           
  3160                           ;incstack = 0
  3161  000D32  0E00               	movlw	0
  3162  000D34  6E21               	movwf	CRC8@crc,c
  3163                           
  3164                           ;CarCom.c: 23: while (len--) {
  3165  000D36  D01C               	goto	l2303
  3166  000D38                     l2287:
  3167                           
  3168                           ;CarCom.c: 24: unsigned char extract = *data++;
  3169  000D38  C01B  FFD9         	movff	CRC8@data,fsr2l
  3170  000D3C  C01C  FFDA         	movff	CRC8@data+1,fsr2h
  3171  000D40  50DF               	movf	indf2,w,c
  3172  000D42  6E1F               	movwf	CRC8@extract,c
  3173  000D44  4A1B               	infsnz	CRC8@data,f,c
  3174  000D46  2A1C               	incf	CRC8@data+1,f,c
  3175                           
  3176                           ;CarCom.c: 25: unsigned char tempI;
  3177                           ;CarCom.c: 26: for (tempI = 8; tempI; tempI--) {
  3178  000D48  0E08               	movlw	8
  3179  000D4A  6E20               	movwf	CRC8@tempI,c
  3180  000D4C  D00E               	goto	l2301
  3181  000D4E                     l2293:
  3182                           
  3183                           ;CarCom.c: 27: unsigned char sum = (crc ^ extract) & 0x01;
  3184  000D4E  5021               	movf	CRC8@crc,w,c
  3185  000D50  181F               	xorwf	CRC8@extract,w,c
  3186  000D52  0B01               	andlw	1
  3187  000D54  6E1E               	movwf	CRC8@sum,c
  3188                           
  3189                           ;CarCom.c: 28: crc >>= 1;
  3190  000D56  90D8               	bcf	status,0,c
  3191  000D58  3221               	rrcf	CRC8@crc,f,c
  3192                           
  3193                           ;CarCom.c: 29: if (sum) {
  3194  000D5A  501E               	movf	CRC8@sum,w,c
  3195  000D5C  B4D8               	btfsc	status,2,c
  3196  000D5E  D002               	goto	l384
  3197                           
  3198                           ;CarCom.c: 30: crc ^= 0x8C;
  3199  000D60  0E8C               	movlw	140
  3200  000D62  1A21               	xorwf	CRC8@crc,f,c
  3201  000D64                     l384:
  3202                           
  3203                           ;CarCom.c: 31: }
  3204                           ;CarCom.c: 32: extract >>= 1;
  3205  000D64  90D8               	bcf	status,0,c
  3206  000D66  321F               	rrcf	CRC8@extract,f,c
  3207  000D68  0620               	decf	CRC8@tempI,f,c
  3208  000D6A                     l2301:
  3209  000D6A  5020               	movf	CRC8@tempI,w,c
  3210  000D6C  A4D8               	btfss	status,2,c
  3211  000D6E  D7EF               	goto	l2293
  3212  000D70                     l2303:
  3213  000D70  061D               	decf	CRC8@len,f,c
  3214  000D72  281D               	incf	CRC8@len,w,c
  3215  000D74  A4D8               	btfss	status,2,c
  3216  000D76  D7E0               	goto	l2287
  3217                           
  3218                           ;CarCom.c: 33: }
  3219                           ;CarCom.c: 34: }
  3220                           ;CarCom.c: 35: return crc;
  3221  000D78  5021               	movf	CRC8@crc,w,c
  3222  000D7A  0012               	return	
  3223  000D7C                     __end_of_CRC8:
  3224                           	opt stack 0
  3225                           tblptru	equ	0xFF8
  3226                           tblptrh	equ	0xFF7
  3227                           tblptrl	equ	0xFF6
  3228                           tablat	equ	0xFF5
  3229                           prodh	equ	0xFF4
  3230                           prodl	equ	0xFF3
  3231                           postinc0	equ	0xFEE
  3232                           wreg	equ	0xFE8
  3233                           indf1	equ	0xFE7
  3234                           postdec1	equ	0xFE5
  3235                           fsr1h	equ	0xFE2
  3236                           fsr1l	equ	0xFE1
  3237                           indf2	equ	0xFDF
  3238                           postinc2	equ	0xFDE
  3239                           postdec2	equ	0xFDD
  3240                           plusw2	equ	0xFDB
  3241                           fsr2h	equ	0xFDA
  3242                           fsr2l	equ	0xFD9
  3243                           status	equ	0xFD8
  3244                           
  3245 ;; *************** function _GetDataDict *****************
  3246 ;; Defined at:
  3247 ;;		line 9 in file "CarDataDictionary.c"
  3248 ;; Parameters:    Size  Location     Type
  3249 ;;  DataTable       1    wreg     unsigned char 
  3250 ;;  DataTableInd    1   26[COMRAM] unsigned char 
  3251 ;;  DataArray       2   27[COMRAM] PTR unsigned char 
  3252 ;;		 -> ComController@DataToSend(4), 
  3253 ;;  numbofbytes     1   29[COMRAM] unsigned char 
  3254 ;; Auto vars:     Size  Location     Type
  3255 ;;  DataTable       1   31[COMRAM] unsigned char 
  3256 ;;  ReturnCounte    1   33[COMRAM] unsigned char 
  3257 ;;  DataCount       1   32[COMRAM] unsigned char 
  3258 ;;  Error           1   30[COMRAM] unsigned char 
  3259 ;; Return value:  Size  Location     Type
  3260 ;;                  1    wreg      unsigned char 
  3261 ;; Registers used:
  3262 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3263 ;; Tracked objects:
  3264 ;;		On entry : 0/0
  3265 ;;		On exit  : 0/0
  3266 ;;		Unchanged: 0/0
  3267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3268 ;;      Params:         4       0       0       0       0       0       0
  3269 ;;      Locals:         4       0       0       0       0       0       0
  3270 ;;      Temps:          0       0       0       0       0       0       0
  3271 ;;      Totals:         8       0       0       0       0       0       0
  3272 ;;Total ram usage:        8 bytes
  3273 ;; Hardware stack levels used:    1
  3274 ;; Hardware stack levels required when called:    4
  3275 ;; This function calls:
  3276 ;;		Nothing
  3277 ;; This function is called by:
  3278 ;;		_ComController
  3279 ;; This function uses a non-reentrant model
  3280 ;;
  3281                           
  3282                           	psect	text15
  3283  000988                     __ptext15:
  3284                           	opt stack 0
  3285  000988                     _GetDataDict:
  3286                           	opt stack 23
  3287                           
  3288                           ;incstack = 0
  3289                           ;GetDataDict@DataTable stored from wreg
  3290  000988  6E20               	movwf	GetDataDict@DataTable,c
  3291                           
  3292                           ;CarDataDictionary.c: 10: unsigned char Error = 0;
  3293  00098A  0E00               	movlw	0
  3294  00098C  6E1F               	movwf	GetDataDict@Error,c
  3295                           
  3296                           ;CarDataDictionary.c: 11: unsigned char DataCount = 0;
  3297  00098E  0E00               	movlw	0
  3298  000990  6E21               	movwf	GetDataDict@DataCount,c
  3299                           
  3300                           ;CarDataDictionary.c: 12: unsigned char ReturnCounter = 0;
  3301  000992  0E00               	movlw	0
  3302  000994  6E22               	movwf	GetDataDict@ReturnCounter,c
  3303                           
  3304                           ;CarDataDictionary.c: 13: switch(DataTable){
  3305  000996  D03C               	goto	l2341
  3306  000998                     l2321:
  3307                           
  3308                           ;CarDataDictionary.c: 15: DataCount = DataTableIndex + numbofbytes;
  3309  000998  501B               	movf	GetDataDict@DataTableIndex,w,c
  3310  00099A  241E               	addwf	GetDataDict@numbofbytes,w,c
  3311  00099C  6E21               	movwf	GetDataDict@DataCount,c
  3312  00099E  D014               	goto	l2329
  3313  0009A0                     l2323:
  3314                           
  3315                           ;CarDataDictionary.c: 17: DataArray[ReturnCounter] = DataTableArrayOne[DataTableIndex];
  3316  0009A0  501B               	movf	GetDataDict@DataTableIndex,w,c
  3317  0009A2  0D01               	mullw	1
  3318  0009A4  0EC6               	movlw	low _DataTableArrayOne
  3319  0009A6  24F3               	addwf	prodl,w,c
  3320  0009A8  6ED9               	movwf	fsr2l,c
  3321  0009AA  0E00               	movlw	high _DataTableArrayOne
  3322  0009AC  20F4               	addwfc	prodh,w,c
  3323  0009AE  6EDA               	movwf	fsr2h,c
  3324  0009B0  5022               	movf	GetDataDict@ReturnCounter,w,c
  3325  0009B2  0D01               	mullw	1
  3326  0009B4  50F3               	movf	prodl,w,c
  3327  0009B6  241C               	addwf	GetDataDict@DataArray,w,c
  3328  0009B8  6EE1               	movwf	fsr1l,c
  3329  0009BA  50F4               	movf	prodh,w,c
  3330  0009BC  201D               	addwfc	GetDataDict@DataArray+1,w,c
  3331  0009BE  6EE2               	movwf	fsr1h,c
  3332  0009C0  CFDF FFE7          	movff	indf2,indf1
  3333                           
  3334                           ;CarDataDictionary.c: 18: ReturnCounter++;
  3335  0009C4  2A22               	incf	GetDataDict@ReturnCounter,f,c
  3336  0009C6  2A1B               	incf	GetDataDict@DataTableIndex,f,c
  3337  0009C8                     l2329:
  3338  0009C8  5021               	movf	GetDataDict@DataCount,w,c
  3339  0009CA  5C1B               	subwf	GetDataDict@DataTableIndex,w,c
  3340  0009CC  B0D8               	btfsc	status,0,c
  3341  0009CE  0012               	return	
  3342  0009D0  D7E7               	goto	l2323
  3343  0009D2                     l2331:
  3344                           
  3345                           ;CarDataDictionary.c: 22: DataCount = DataTableIndex + numbofbytes;
  3346  0009D2  501B               	movf	GetDataDict@DataTableIndex,w,c
  3347  0009D4  241E               	addwf	GetDataDict@numbofbytes,w,c
  3348  0009D6  6E21               	movwf	GetDataDict@DataCount,c
  3349  0009D8  D014               	goto	l2339
  3350  0009DA                     l2333:
  3351                           
  3352                           ;CarDataDictionary.c: 24: DataArray[ReturnCounter] = DataTableArrayTwo[DataTableIndex];
  3353  0009DA  501B               	movf	GetDataDict@DataTableIndex,w,c
  3354  0009DC  0D01               	mullw	1
  3355  0009DE  0E33               	movlw	low _DataTableArrayTwo
  3356  0009E0  24F3               	addwf	prodl,w,c
  3357  0009E2  6ED9               	movwf	fsr2l,c
  3358  0009E4  0E00               	movlw	high _DataTableArrayTwo
  3359  0009E6  20F4               	addwfc	prodh,w,c
  3360  0009E8  6EDA               	movwf	fsr2h,c
  3361  0009EA  5022               	movf	GetDataDict@ReturnCounter,w,c
  3362  0009EC  0D01               	mullw	1
  3363  0009EE  50F3               	movf	prodl,w,c
  3364  0009F0  241C               	addwf	GetDataDict@DataArray,w,c
  3365  0009F2  6EE1               	movwf	fsr1l,c
  3366  0009F4  50F4               	movf	prodh,w,c
  3367  0009F6  201D               	addwfc	GetDataDict@DataArray+1,w,c
  3368  0009F8  6EE2               	movwf	fsr1h,c
  3369  0009FA  CFDF FFE7          	movff	indf2,indf1
  3370                           
  3371                           ;CarDataDictionary.c: 25: ReturnCounter++;
  3372  0009FE  2A22               	incf	GetDataDict@ReturnCounter,f,c
  3373  000A00  2A1B               	incf	GetDataDict@DataTableIndex,f,c
  3374  000A02                     l2339:
  3375  000A02  5021               	movf	GetDataDict@DataCount,w,c
  3376  000A04  5C1B               	subwf	GetDataDict@DataTableIndex,w,c
  3377  000A06  B0D8               	btfsc	status,0,c
  3378  000A08  0012               	return	
  3379  000A0A  D7E7               	goto	l2333
  3380  000A0C                     l334:
  3381                           
  3382                           ;CarDataDictionary.c: 29: Error = -1;
  3383  000A0C  681F               	setf	GetDataDict@Error,c
  3384                           
  3385                           ;CarDataDictionary.c: 30: }
  3386  000A0E  0012               	return	
  3387  000A10                     l2341:
  3388  000A10  5020               	movf	GetDataDict@DataTable,w,c
  3389                           
  3390                           ; Switch size 1, requested type "space"
  3391                           ; Number of cases is 2, Range of values is 0 to 1
  3392                           ; switch strategies available:
  3393                           ; Name         Instructions Cycles
  3394                           ; simple_byte            7     4 (average)
  3395                           ;	Chosen strategy is simple_byte
  3396  000A12  0A00               	xorlw	0	; case 0
  3397  000A14  B4D8               	btfsc	status,2,c
  3398  000A16  D7C0               	goto	l2321
  3399  000A18  0A01               	xorlw	1	; case 1
  3400  000A1A  B4D8               	btfsc	status,2,c
  3401  000A1C  D7DA               	goto	l2331
  3402  000A1E  D7F6               	goto	l334
  3403  000A20                     __end_of_GetDataDict:
  3404                           	opt stack 0
  3405                           tblptru	equ	0xFF8
  3406                           tblptrh	equ	0xFF7
  3407                           tblptrl	equ	0xFF6
  3408                           tablat	equ	0xFF5
  3409                           prodh	equ	0xFF4
  3410                           prodl	equ	0xFF3
  3411                           postinc0	equ	0xFEE
  3412                           wreg	equ	0xFE8
  3413                           indf1	equ	0xFE7
  3414                           postdec1	equ	0xFE5
  3415                           fsr1h	equ	0xFE2
  3416                           fsr1l	equ	0xFE1
  3417                           indf2	equ	0xFDF
  3418                           postinc2	equ	0xFDE
  3419                           postdec2	equ	0xFDD
  3420                           plusw2	equ	0xFDB
  3421                           fsr2h	equ	0xFDA
  3422                           fsr2l	equ	0xFD9
  3423                           status	equ	0xFD8
  3424                           
  3425 ;; *************** function _Delay *****************
  3426 ;; Defined at:
  3427 ;;		line 210 in file "Function.c"
  3428 ;; Parameters:    Size  Location     Type
  3429 ;;  wait            2   26[COMRAM] int 
  3430 ;; Auto vars:     Size  Location     Type
  3431 ;;  x               2   29[COMRAM] int 
  3432 ;; Return value:  Size  Location     Type
  3433 ;;                  1    wreg      void 
  3434 ;; Registers used:
  3435 ;;		wreg, status,2, status,0
  3436 ;; Tracked objects:
  3437 ;;		On entry : 0/0
  3438 ;;		On exit  : 0/0
  3439 ;;		Unchanged: 0/0
  3440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3441 ;;      Params:         2       0       0       0       0       0       0
  3442 ;;      Locals:         2       0       0       0       0       0       0
  3443 ;;      Temps:          1       0       0       0       0       0       0
  3444 ;;      Totals:         5       0       0       0       0       0       0
  3445 ;;Total ram usage:        5 bytes
  3446 ;; Hardware stack levels used:    1
  3447 ;; Hardware stack levels required when called:    4
  3448 ;; This function calls:
  3449 ;;		Nothing
  3450 ;; This function is called by:
  3451 ;;		_ComController
  3452 ;; This function uses a non-reentrant model
  3453 ;;
  3454                           
  3455                           	psect	text16
  3456  000DB8                     __ptext16:
  3457                           	opt stack 0
  3458  000DB8                     _Delay:
  3459                           	opt stack 23
  3460                           
  3461                           ;Function.c: 211: int x;
  3462                           ;Function.c: 212: for (x = 0; x < wait; x++) {
  3463                           
  3464                           ;incstack = 0
  3465  000DB8  0E00               	movlw	0
  3466  000DBA  6E1F               	movwf	Delay@x+1,c
  3467  000DBC  0E00               	movlw	0
  3468  000DBE  6E1E               	movwf	Delay@x,c
  3469  000DC0  D00A               	goto	l269
  3470  000DC2                     l2315:
  3471                           
  3472                           ;Function.c: 213: _delay((unsigned long)((1)*(16000000/4000.0)));
  3473  000DC2  0E06               	movlw	6
  3474  000DC4  6E1D               	movwf	??_Delay& (0+255),c
  3475  000DC6  0E30               	movlw	48
  3476  000DC8                     u1607:
  3477  000DC8  2EE8               	decfsz	wreg,f,c
  3478  000DCA  D7FE               	bra	u1607
  3479  000DCC  2E1D               	decfsz	??_Delay& (0+255),f,c
  3480  000DCE  D7FC               	bra	u1607
  3481  000DD0  D000               	nop2	
  3482  000DD2  4A1E               	infsnz	Delay@x,f,c
  3483  000DD4  2A1F               	incf	Delay@x+1,f,c
  3484  000DD6                     l269:
  3485  000DD6  501B               	movf	Delay@wait,w,c
  3486  000DD8  5C1E               	subwf	Delay@x,w,c
  3487  000DDA  501F               	movf	Delay@x+1,w,c
  3488  000DDC  0A80               	xorlw	128
  3489  000DDE  6E1D               	movwf	??_Delay& (0+255),c
  3490  000DE0  501C               	movf	Delay@wait+1,w,c
  3491  000DE2  0A80               	xorlw	128
  3492  000DE4  581D               	subwfb	??_Delay& (0+255),w,c
  3493  000DE6  B0D8               	btfsc	status,0,c
  3494  000DE8  0012               	return	
  3495  000DEA  D7EB               	goto	l2315
  3496  000DEC                     __end_of_Delay:
  3497                           	opt stack 0
  3498                           tblptru	equ	0xFF8
  3499                           tblptrh	equ	0xFF7
  3500                           tblptrl	equ	0xFF6
  3501                           tablat	equ	0xFF5
  3502                           prodh	equ	0xFF4
  3503                           prodl	equ	0xFF3
  3504                           postinc0	equ	0xFEE
  3505                           wreg	equ	0xFE8
  3506                           indf1	equ	0xFE7
  3507                           postdec1	equ	0xFE5
  3508                           fsr1h	equ	0xFE2
  3509                           fsr1l	equ	0xFE1
  3510                           indf2	equ	0xFDF
  3511                           postinc2	equ	0xFDE
  3512                           postdec2	equ	0xFDD
  3513                           plusw2	equ	0xFDB
  3514                           fsr2h	equ	0xFDA
  3515                           fsr2l	equ	0xFD9
  3516                           status	equ	0xFD8
  3517                           
  3518 ;; *************** function _Start *****************
  3519 ;; Defined at:
  3520 ;;		line 49 in file "Function.c"
  3521 ;; Parameters:    Size  Location     Type
  3522 ;;		None
  3523 ;; Auto vars:     Size  Location     Type
  3524 ;;  Data            5   36[COMRAM] unsigned char [5]
  3525 ;; Return value:  Size  Location     Type
  3526 ;;                  1    wreg      void 
  3527 ;; Registers used:
  3528 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3529 ;; Tracked objects:
  3530 ;;		On entry : 0/0
  3531 ;;		On exit  : 0/0
  3532 ;;		Unchanged: 0/0
  3533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3534 ;;      Params:         0       0       0       0       0       0       0
  3535 ;;      Locals:         5       0       0       0       0       0       0
  3536 ;;      Temps:          0       0       0       0       0       0       0
  3537 ;;      Totals:         5       0       0       0       0       0       0
  3538 ;;Total ram usage:        5 bytes
  3539 ;; Hardware stack levels used:    1
  3540 ;; Hardware stack levels required when called:    8
  3541 ;; This function calls:
  3542 ;;		_ComStart
  3543 ;;		_INTERRUPT_Initialize
  3544 ;;		_SetDataDict
  3545 ;;		_TMR0_Initialize
  3546 ;; This function is called by:
  3547 ;;		_main
  3548 ;; This function uses a non-reentrant model
  3549 ;;
  3550                           
  3551                           	psect	text17
  3552  000BDC                     __ptext17:
  3553                           	opt stack 0
  3554  000BDC                     _Start:
  3555                           	opt stack 22
  3556                           
  3557                           ;Function.c: 114: TRISCbits.TRISC5 = 1;
  3558                           
  3559                           ;incstack = 0
  3560  000BDC  8A94               	bsf	3988,5,c	;volatile
  3561                           
  3562                           ;Function.c: 115: TRISCbits.TRISC4 = 1;
  3563  000BDE  8894               	bsf	3988,4,c	;volatile
  3564                           
  3565                           ;Function.c: 116: TRISDbits.TRISD3 = 1;
  3566  000BE0  8695               	bsf	3989,3,c	;volatile
  3567                           
  3568                           ;Function.c: 117: TRISDbits.TRISD2 = 1;
  3569  000BE2  8495               	bsf	3989,2,c	;volatile
  3570                           
  3571                           ;Function.c: 118: TRISDbits.TRISD1 = 1;
  3572  000BE4  8295               	bsf	3989,1,c	;volatile
  3573                           
  3574                           ;Function.c: 119: TRISDbits.TRISD0 = 1;
  3575  000BE6  8095               	bsf	3989,0,c	;volatile
  3576                           
  3577                           ;Function.c: 120: TRISCbits.TRISC3 = 1;
  3578  000BE8  8694               	bsf	3988,3,c	;volatile
  3579                           
  3580                           ;Function.c: 121: TRISCbits.TRISC2 = 1;
  3581  000BEA  8494               	bsf	3988,2,c	;volatile
  3582                           
  3583                           ;Function.c: 122: TRISCbits.TRISC1 = 1;
  3584  000BEC  8294               	bsf	3988,1,c	;volatile
  3585                           
  3586                           ;Function.c: 123: TRISAbits.TRISA7 = 1;
  3587  000BEE  8E92               	bsf	3986,7,c	;volatile
  3588                           
  3589                           ;Function.c: 124: TRISCbits.TRISC0 = 1;
  3590  000BF0  8094               	bsf	3988,0,c	;volatile
  3591                           
  3592                           ;Function.c: 125: TRISAbits.TRISA4 = 1;
  3593  000BF2  8892               	bsf	3986,4,c	;volatile
  3594                           
  3595                           ;Function.c: 126: TRISAbits.TRISA6 = 1;
  3596  000BF4  8C92               	bsf	3986,6,c	;volatile
  3597                           
  3598                           ;Function.c: 128: ANSELCbits.ANSC2 = 1;
  3599  000BF6  010F               	movlb	15	; () banked
  3600  000BF8  853A               	bsf	58,2,b	;volatile
  3601                           
  3602                           ;Function.c: 131: TRISAbits.TRISA3 = 0;
  3603  000BFA  9692               	bcf	3986,3,c	;volatile
  3604                           
  3605                           ;Function.c: 132: TRISDbits.TRISD4 = 0;
  3606  000BFC  9895               	bcf	3989,4,c	;volatile
  3607                           
  3608                           ; BSR set to: 15
  3609                           ;Function.c: 137: ANSELA = 0;
  3610  000BFE  0E00               	movlw	0
  3611  000C00  010F               	movlb	15	; () banked
  3612  000C02  6F38               	movwf	56,b	;volatile
  3613                           
  3614                           ;Function.c: 138: ANSELB = 0;
  3615  000C04  0E00               	movlw	0
  3616  000C06  010F               	movlb	15	; () banked
  3617  000C08  6F39               	movwf	57,b	;volatile
  3618                           
  3619                           ;Function.c: 139: ANSELC = 0;
  3620  000C0A  0E00               	movlw	0
  3621  000C0C  010F               	movlb	15	; () banked
  3622  000C0E  6F3A               	movwf	58,b	;volatile
  3623                           
  3624                           ;Function.c: 140: ANSELD = 0;
  3625  000C10  0E00               	movlw	0
  3626  000C12  010F               	movlb	15	; () banked
  3627  000C14  6F3B               	movwf	59,b	;volatile
  3628                           
  3629                           ;Function.c: 141: ANSELE = 0;
  3630  000C16  0E00               	movlw	0
  3631  000C18  010F               	movlb	15	; () banked
  3632  000C1A  6F3C               	movwf	60,b	;volatile
  3633                           
  3634                           ;Function.c: 145: OSCCON = 0x72;
  3635  000C1C  0E72               	movlw	114
  3636  000C1E  6ED3               	movwf	4051,c	;volatile
  3637                           
  3638                           ;Function.c: 147: OSCCON2 = 0x04;
  3639  000C20  0E04               	movlw	4
  3640  000C22  6ED2               	movwf	4050,c	;volatile
  3641                           
  3642                           ;Function.c: 149: OSCTUNE = 0x00;
  3643  000C24  0E00               	movlw	0
  3644  000C26  6E9B               	movwf	3995,c	;volatile
  3645                           
  3646                           ; BSR set to: 15
  3647                           ;Function.c: 152: ComStart();
  3648  000C28  ECFE  F007         	call	_ComStart	;wreg free
  3649                           
  3650                           ;Function.c: 153: INTERRUPT_Initialize();
  3651  000C2C  ECA9  F007         	call	_INTERRUPT_Initialize	;wreg free
  3652                           
  3653                           ;Function.c: 154: TMR0_Initialize();
  3654  000C30  EC7C  F007         	call	_TMR0_Initialize	;wreg free
  3655                           
  3656                           ;Function.c: 156: unsigned char Data[5] = {4,2};
  3657  000C34  EE20  F0F8         	lfsr	2,Start@F7240
  3658  000C38  EE10  F025         	lfsr	1,Start@Data
  3659  000C3C  0E04               	movlw	4
  3660  000C3E                     u1051:
  3661  000C3E  CFDB FFE3          	movff	plusw2,plusw1
  3662  000C42  06E8               	decf	wreg,f,c
  3663  000C44  E2FC               	bc	u1051
  3664                           
  3665                           ;Function.c: 157: SetDataDict(0, 0,Data,2);
  3666  000C46  0E00               	movlw	0
  3667  000C48  6E1B               	movwf	SetDataDict@DataTableIndex,c
  3668  000C4A  0E25               	movlw	low Start@Data
  3669  000C4C  6E1C               	movwf	SetDataDict@DataArray,c
  3670  000C4E  0E00               	movlw	high Start@Data
  3671  000C50  6E1D               	movwf	SetDataDict@DataArray+1,c
  3672  000C52  0E02               	movlw	2
  3673  000C54  6E1E               	movwf	SetDataDict@numbofbytes,c
  3674  000C56  0E00               	movlw	0
  3675  000C58  EC10  F005         	call	_SetDataDict
  3676  000C5C  0012               	return		;funcret
  3677  000C5E                     __end_of_Start:
  3678                           	opt stack 0
  3679                           tblptru	equ	0xFF8
  3680                           tblptrh	equ	0xFF7
  3681                           tblptrl	equ	0xFF6
  3682                           tablat	equ	0xFF5
  3683                           prodh	equ	0xFF4
  3684                           prodl	equ	0xFF3
  3685                           postinc0	equ	0xFEE
  3686                           wreg	equ	0xFE8
  3687                           indf1	equ	0xFE7
  3688                           postdec1	equ	0xFE5
  3689                           plusw1	equ	0xFE3
  3690                           fsr1h	equ	0xFE2
  3691                           fsr1l	equ	0xFE1
  3692                           indf2	equ	0xFDF
  3693                           postinc2	equ	0xFDE
  3694                           postdec2	equ	0xFDD
  3695                           plusw2	equ	0xFDB
  3696                           fsr2h	equ	0xFDA
  3697                           fsr2l	equ	0xFD9
  3698                           status	equ	0xFD8
  3699                           
  3700 ;; *************** function _TMR0_Initialize *****************
  3701 ;; Defined at:
  3702 ;;		line 23 in file "tmr0.c"
  3703 ;; Parameters:    Size  Location     Type
  3704 ;;		None
  3705 ;; Auto vars:     Size  Location     Type
  3706 ;;		None
  3707 ;; Return value:  Size  Location     Type
  3708 ;;                  1    wreg      void 
  3709 ;; Registers used:
  3710 ;;		wreg, status,2, cstack
  3711 ;; Tracked objects:
  3712 ;;		On entry : 0/0
  3713 ;;		On exit  : 0/0
  3714 ;;		Unchanged: 0/0
  3715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3716 ;;      Params:         0       0       0       0       0       0       0
  3717 ;;      Locals:         0       0       0       0       0       0       0
  3718 ;;      Temps:          0       0       0       0       0       0       0
  3719 ;;      Totals:         0       0       0       0       0       0       0
  3720 ;;Total ram usage:        0 bytes
  3721 ;; Hardware stack levels used:    1
  3722 ;; Hardware stack levels required when called:    5
  3723 ;; This function calls:
  3724 ;;		_TMR0_StartTimer
  3725 ;; This function is called by:
  3726 ;;		_Start
  3727 ;; This function uses a non-reentrant model
  3728 ;;
  3729                           
  3730                           	psect	text18
  3731  000EF8                     __ptext18:
  3732                           	opt stack 0
  3733  000EF8                     _TMR0_Initialize:
  3734                           	opt stack 24
  3735                           
  3736                           ;tmr0.c: 27: T0CON = 0x94;
  3737                           
  3738                           ;incstack = 0
  3739  000EF8  0E94               	movlw	148
  3740  000EFA  6ED5               	movwf	4053,c	;volatile
  3741                           
  3742                           ;tmr0.c: 30: TMR0H = 0xCF;
  3743  000EFC  0ECF               	movlw	207
  3744  000EFE  6ED7               	movwf	4055,c	;volatile
  3745                           
  3746                           ;tmr0.c: 33: TMR0L = 0x2C;
  3747  000F00  0E2C               	movlw	44
  3748  000F02  6ED6               	movwf	4054,c	;volatile
  3749                           
  3750                           ;tmr0.c: 36: timer0ReloadVal16bit = 53036;
  3751  000F04  0ECF               	movlw	207
  3752  000F06  6E3D               	movwf	_timer0ReloadVal16bit+1,c	;volatile
  3753  000F08  0E2C               	movlw	44
  3754  000F0A  6E3C               	movwf	_timer0ReloadVal16bit,c	;volatile
  3755                           
  3756                           ;tmr0.c: 39: INTCONbits.TMR0IF = 0;
  3757  000F0C  94F2               	bcf	intcon,2,c	;volatile
  3758                           
  3759                           ;tmr0.c: 42: INTCONbits.TMR0IE = 1;
  3760  000F0E  8AF2               	bsf	intcon,5,c	;volatile
  3761                           
  3762                           ;tmr0.c: 45: TMR0_StartTimer();
  3763  000F10  EC06  F008         	call	_TMR0_StartTimer	;wreg free
  3764  000F14  0012               	return		;funcret
  3765  000F16                     __end_of_TMR0_Initialize:
  3766                           	opt stack 0
  3767                           tblptru	equ	0xFF8
  3768                           tblptrh	equ	0xFF7
  3769                           tblptrl	equ	0xFF6
  3770                           tablat	equ	0xFF5
  3771                           prodh	equ	0xFF4
  3772                           prodl	equ	0xFF3
  3773                           intcon	equ	0xFF2
  3774                           postinc0	equ	0xFEE
  3775                           wreg	equ	0xFE8
  3776                           indf1	equ	0xFE7
  3777                           postdec1	equ	0xFE5
  3778                           plusw1	equ	0xFE3
  3779                           fsr1h	equ	0xFE2
  3780                           fsr1l	equ	0xFE1
  3781                           indf2	equ	0xFDF
  3782                           postinc2	equ	0xFDE
  3783                           postdec2	equ	0xFDD
  3784                           plusw2	equ	0xFDB
  3785                           fsr2h	equ	0xFDA
  3786                           fsr2l	equ	0xFD9
  3787                           status	equ	0xFD8
  3788                           
  3789 ;; *************** function _TMR0_StartTimer *****************
  3790 ;; Defined at:
  3791 ;;		line 48 in file "tmr0.c"
  3792 ;; Parameters:    Size  Location     Type
  3793 ;;		None
  3794 ;; Auto vars:     Size  Location     Type
  3795 ;;		None
  3796 ;; Return value:  Size  Location     Type
  3797 ;;                  1    wreg      void 
  3798 ;; Registers used:
  3799 ;;		None
  3800 ;; Tracked objects:
  3801 ;;		On entry : 0/0
  3802 ;;		On exit  : 0/0
  3803 ;;		Unchanged: 0/0
  3804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3805 ;;      Params:         0       0       0       0       0       0       0
  3806 ;;      Locals:         0       0       0       0       0       0       0
  3807 ;;      Temps:          0       0       0       0       0       0       0
  3808 ;;      Totals:         0       0       0       0       0       0       0
  3809 ;;Total ram usage:        0 bytes
  3810 ;; Hardware stack levels used:    1
  3811 ;; Hardware stack levels required when called:    4
  3812 ;; This function calls:
  3813 ;;		Nothing
  3814 ;; This function is called by:
  3815 ;;		_TMR0_Initialize
  3816 ;; This function uses a non-reentrant model
  3817 ;;
  3818                           
  3819                           	psect	text19
  3820  00100C                     __ptext19:
  3821                           	opt stack 0
  3822  00100C                     _TMR0_StartTimer:
  3823                           	opt stack 24
  3824                           
  3825                           ;tmr0.c: 50: T0CONbits.TMR0ON = 1;
  3826                           
  3827                           ;incstack = 0
  3828  00100C  8ED5               	bsf	4053,7,c	;volatile
  3829  00100E  0012               	return		;funcret
  3830  001010                     __end_of_TMR0_StartTimer:
  3831                           	opt stack 0
  3832                           tblptru	equ	0xFF8
  3833                           tblptrh	equ	0xFF7
  3834                           tblptrl	equ	0xFF6
  3835                           tablat	equ	0xFF5
  3836                           prodh	equ	0xFF4
  3837                           prodl	equ	0xFF3
  3838                           intcon	equ	0xFF2
  3839                           postinc0	equ	0xFEE
  3840                           wreg	equ	0xFE8
  3841                           indf1	equ	0xFE7
  3842                           postdec1	equ	0xFE5
  3843                           plusw1	equ	0xFE3
  3844                           fsr1h	equ	0xFE2
  3845                           fsr1l	equ	0xFE1
  3846                           indf2	equ	0xFDF
  3847                           postinc2	equ	0xFDE
  3848                           postdec2	equ	0xFDD
  3849                           plusw2	equ	0xFDB
  3850                           fsr2h	equ	0xFDA
  3851                           fsr2l	equ	0xFD9
  3852                           status	equ	0xFD8
  3853                           
  3854 ;; *************** function _INTERRUPT_Initialize *****************
  3855 ;; Defined at:
  3856 ;;		line 160 in file "Function.c"
  3857 ;; Parameters:    Size  Location     Type
  3858 ;;		None
  3859 ;; Auto vars:     Size  Location     Type
  3860 ;;		None
  3861 ;; Return value:  Size  Location     Type
  3862 ;;                  1    wreg      void 
  3863 ;; Registers used:
  3864 ;;		None
  3865 ;; Tracked objects:
  3866 ;;		On entry : 0/0
  3867 ;;		On exit  : 0/0
  3868 ;;		Unchanged: 0/0
  3869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3870 ;;      Params:         0       0       0       0       0       0       0
  3871 ;;      Locals:         0       0       0       0       0       0       0
  3872 ;;      Temps:          0       0       0       0       0       0       0
  3873 ;;      Totals:         0       0       0       0       0       0       0
  3874 ;;Total ram usage:        0 bytes
  3875 ;; Hardware stack levels used:    1
  3876 ;; Hardware stack levels required when called:    4
  3877 ;; This function calls:
  3878 ;;		Nothing
  3879 ;; This function is called by:
  3880 ;;		_Start
  3881 ;; This function uses a non-reentrant model
  3882 ;;
  3883                           
  3884                           	psect	text20
  3885  000F52                     __ptext20:
  3886                           	opt stack 0
  3887  000F52                     _INTERRUPT_Initialize:
  3888                           	opt stack 25
  3889                           
  3890                           ;Function.c: 162: INTCONbits.PEIE = 1;
  3891                           
  3892                           ;incstack = 0
  3893  000F52  8CF2               	bsf	intcon,6,c	;volatile
  3894                           
  3895                           ;Function.c: 163: INTCONbits.GIE = 1;
  3896  000F54  8EF2               	bsf	intcon,7,c	;volatile
  3897                           
  3898                           ;Function.c: 165: RCONbits.IPEN = 0;
  3899  000F56  9ED0               	bcf	4048,7,c	;volatile
  3900                           
  3901                           ;Function.c: 170: IPR1bits.RC1IP = 0;
  3902  000F58  9A9F               	bcf	3999,5,c	;volatile
  3903                           
  3904                           ;Function.c: 172: IPR1bits.TX1IP = 0;
  3905  000F5A  989F               	bcf	3999,4,c	;volatile
  3906                           
  3907                           ;Function.c: 175: INTCONbits.TMR0IF = 0;
  3908  000F5C  94F2               	bcf	intcon,2,c	;volatile
  3909                           
  3910                           ;Function.c: 178: INTCONbits.TMR0IE = 1;
  3911  000F5E  8AF2               	bsf	intcon,5,c	;volatile
  3912                           
  3913                           ;Function.c: 180: IPR1bits.ADIP = 0;
  3914  000F60  9C9F               	bcf	3999,6,c	;volatile
  3915                           
  3916                           ;Function.c: 182: IPR1bits.SSP1IP = 0;
  3917  000F62  969F               	bcf	3999,3,c	;volatile
  3918                           
  3919                           ;Function.c: 184: IPR2bits.BCL1IP = 0;
  3920  000F64  96A2               	bcf	4002,3,c	;volatile
  3921                           
  3922                           ;Function.c: 185: IPR1bits.TMR2IP=0;
  3923  000F66  929F               	bcf	3999,1,c	;volatile
  3924  000F68  0012               	return		;funcret
  3925  000F6A                     __end_of_INTERRUPT_Initialize:
  3926                           	opt stack 0
  3927                           tblptru	equ	0xFF8
  3928                           tblptrh	equ	0xFF7
  3929                           tblptrl	equ	0xFF6
  3930                           tablat	equ	0xFF5
  3931                           prodh	equ	0xFF4
  3932                           prodl	equ	0xFF3
  3933                           intcon	equ	0xFF2
  3934                           postinc0	equ	0xFEE
  3935                           wreg	equ	0xFE8
  3936                           indf1	equ	0xFE7
  3937                           postdec1	equ	0xFE5
  3938                           plusw1	equ	0xFE3
  3939                           fsr1h	equ	0xFE2
  3940                           fsr1l	equ	0xFE1
  3941                           indf2	equ	0xFDF
  3942                           postinc2	equ	0xFDE
  3943                           postdec2	equ	0xFDD
  3944                           plusw2	equ	0xFDB
  3945                           fsr2h	equ	0xFDA
  3946                           fsr2l	equ	0xFD9
  3947                           status	equ	0xFD8
  3948                           
  3949 ;; *************** function _ComStart *****************
  3950 ;; Defined at:
  3951 ;;		line 12 in file "Communications.c"
  3952 ;; Parameters:    Size  Location     Type
  3953 ;;		None
  3954 ;; Auto vars:     Size  Location     Type
  3955 ;;		None
  3956 ;; Return value:  Size  Location     Type
  3957 ;;                  1    wreg      void 
  3958 ;; Registers used:
  3959 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3960 ;; Tracked objects:
  3961 ;;		On entry : 0/0
  3962 ;;		On exit  : 0/0
  3963 ;;		Unchanged: 0/0
  3964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3965 ;;      Params:         0       0       0       0       0       0       0
  3966 ;;      Locals:         0       0       0       0       0       0       0
  3967 ;;      Temps:          0       0       0       0       0       0       0
  3968 ;;      Totals:         0       0       0       0       0       0       0
  3969 ;;Total ram usage:        0 bytes
  3970 ;; Hardware stack levels used:    1
  3971 ;; Hardware stack levels required when called:    7
  3972 ;; This function calls:
  3973 ;;		_EUSART1_Initialize
  3974 ;; This function is called by:
  3975 ;;		_Start
  3976 ;; This function uses a non-reentrant model
  3977 ;;
  3978                           
  3979                           	psect	text21
  3980  000FFC                     __ptext21:
  3981                           	opt stack 0
  3982  000FFC                     _ComStart:
  3983                           	opt stack 22
  3984                           
  3985                           ;Communications.c: 13: EUSART1_Initialize();
  3986                           
  3987                           ;incstack = 0
  3988  000FFC  ECBE  F006         	call	_EUSART1_Initialize	;wreg free
  3989  001000  0012               	return		;funcret
  3990  001002                     __end_of_ComStart:
  3991                           	opt stack 0
  3992                           tblptru	equ	0xFF8
  3993                           tblptrh	equ	0xFF7
  3994                           tblptrl	equ	0xFF6
  3995                           tablat	equ	0xFF5
  3996                           prodh	equ	0xFF4
  3997                           prodl	equ	0xFF3
  3998                           intcon	equ	0xFF2
  3999                           postinc0	equ	0xFEE
  4000                           wreg	equ	0xFE8
  4001                           indf1	equ	0xFE7
  4002                           postdec1	equ	0xFE5
  4003                           plusw1	equ	0xFE3
  4004                           fsr1h	equ	0xFE2
  4005                           fsr1l	equ	0xFE1
  4006                           indf2	equ	0xFDF
  4007                           postinc2	equ	0xFDE
  4008                           postdec2	equ	0xFDD
  4009                           plusw2	equ	0xFDB
  4010                           fsr2h	equ	0xFDA
  4011                           fsr2l	equ	0xFD9
  4012                           status	equ	0xFD8
  4013                           
  4014 ;; *************** function _EUSART1_Initialize *****************
  4015 ;; Defined at:
  4016 ;;		line 20 in file "UART.c"
  4017 ;; Parameters:    Size  Location     Type
  4018 ;;		None
  4019 ;; Auto vars:     Size  Location     Type
  4020 ;;		None
  4021 ;; Return value:  Size  Location     Type
  4022 ;;                  1    wreg      void 
  4023 ;; Registers used:
  4024 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4025 ;; Tracked objects:
  4026 ;;		On entry : 0/0
  4027 ;;		On exit  : 0/0
  4028 ;;		Unchanged: 0/0
  4029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4030 ;;      Params:         0       0       0       0       0       0       0
  4031 ;;      Locals:         0       0       0       0       0       0       0
  4032 ;;      Temps:          0       0       0       0       0       0       0
  4033 ;;      Totals:         0       0       0       0       0       0       0
  4034 ;;Total ram usage:        0 bytes
  4035 ;; Hardware stack levels used:    1
  4036 ;; Hardware stack levels required when called:    6
  4037 ;; This function calls:
  4038 ;;		_UART_buff_init
  4039 ;; This function is called by:
  4040 ;;		_ComStart
  4041 ;; This function uses a non-reentrant model
  4042 ;;
  4043                           
  4044                           	psect	text22
  4045  000D7C                     __ptext22:
  4046                           	opt stack 0
  4047  000D7C                     _EUSART1_Initialize:
  4048                           	opt stack 22
  4049                           
  4050                           ;UART.c: 22: PIE1bits.RC1IE = 0;
  4051                           
  4052                           ;incstack = 0
  4053  000D7C  9A9D               	bcf	3997,5,c	;volatile
  4054                           
  4055                           ;UART.c: 23: PIE1bits.TX1IE = 0;
  4056  000D7E  989D               	bcf	3997,4,c	;volatile
  4057                           
  4058                           ;UART.c: 28: BAUD1CON = 0x48;
  4059  000D80  0E48               	movlw	72
  4060  000D82  6EB8               	movwf	4024,c	;volatile
  4061                           
  4062                           ;UART.c: 31: RC1STA = 0x98;
  4063  000D84  0E98               	movlw	152
  4064  000D86  6EAB               	movwf	4011,c	;volatile
  4065                           
  4066                           ;UART.c: 34: TX1STA = 0x26;
  4067  000D88  0E26               	movlw	38
  4068  000D8A  6EAC               	movwf	4012,c	;volatile
  4069                           
  4070                           ;UART.c: 37: SPBRG1 = (((16000000/38400)/4)-1);
  4071  000D8C  0E67               	movlw	103
  4072  000D8E  6EAF               	movwf	4015,c	;volatile
  4073                           
  4074                           ;UART.c: 40: SPBRGH1 = 0x00;
  4075  000D90  0E00               	movlw	0
  4076  000D92  6EB0               	movwf	4016,c	;volatile
  4077                           
  4078                           ;UART.c: 43: TXREG1 = 0x00;
  4079  000D94  0E00               	movlw	0
  4080  000D96  6EAD               	movwf	4013,c	;volatile
  4081                           
  4082                           ;UART.c: 46: RCREG1 = 0x00;
  4083  000D98  0E00               	movlw	0
  4084  000D9A  6EAE               	movwf	4014,c	;volatile
  4085                           
  4086                           ;UART.c: 48: UART_buff_init(&input_buffer);
  4087  000D9C  0E6A               	movlw	low _input_buffer
  4088  000D9E  6E23               	movwf	UART_buff_init@_this,c
  4089  000DA0  0E01               	movlw	high _input_buffer
  4090  000DA2  6E24               	movwf	UART_buff_init@_this+1,c
  4091  000DA4  EC8B  F007         	call	_UART_buff_init	;wreg free
  4092                           
  4093                           ;UART.c: 49: UART_buff_init(&output_buffer);
  4094  000DA8  0E00               	movlw	low _output_buffer
  4095  000DAA  6E23               	movwf	UART_buff_init@_this,c
  4096  000DAC  0E01               	movlw	high _output_buffer
  4097  000DAE  6E24               	movwf	UART_buff_init@_this+1,c
  4098  000DB0  EC8B  F007         	call	_UART_buff_init	;wreg free
  4099                           
  4100                           ;UART.c: 51: PIE1bits.RC1IE = 1;
  4101  000DB4  8A9D               	bsf	3997,5,c	;volatile
  4102  000DB6  0012               	return		;funcret
  4103  000DB8                     __end_of_EUSART1_Initialize:
  4104                           	opt stack 0
  4105                           tblptru	equ	0xFF8
  4106                           tblptrh	equ	0xFF7
  4107                           tblptrl	equ	0xFF6
  4108                           tablat	equ	0xFF5
  4109                           prodh	equ	0xFF4
  4110                           prodl	equ	0xFF3
  4111                           intcon	equ	0xFF2
  4112                           postinc0	equ	0xFEE
  4113                           wreg	equ	0xFE8
  4114                           indf1	equ	0xFE7
  4115                           postdec1	equ	0xFE5
  4116                           plusw1	equ	0xFE3
  4117                           fsr1h	equ	0xFE2
  4118                           fsr1l	equ	0xFE1
  4119                           indf2	equ	0xFDF
  4120                           postinc2	equ	0xFDE
  4121                           postdec2	equ	0xFDD
  4122                           plusw2	equ	0xFDB
  4123                           fsr2h	equ	0xFDA
  4124                           fsr2l	equ	0xFD9
  4125                           status	equ	0xFD8
  4126                           
  4127 ;; *************** function _UART_buff_init *****************
  4128 ;; Defined at:
  4129 ;;		line 55 in file "UART.c"
  4130 ;; Parameters:    Size  Location     Type
  4131 ;;  _this           2   34[COMRAM] PTR struct UART_ring_buf
  4132 ;;		 -> output_buffer(106), input_buffer(106), 
  4133 ;; Auto vars:     Size  Location     Type
  4134 ;;		None
  4135 ;; Return value:  Size  Location     Type
  4136 ;;                  1    wreg      void 
  4137 ;; Registers used:
  4138 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4139 ;; Tracked objects:
  4140 ;;		On entry : 0/0
  4141 ;;		On exit  : 0/0
  4142 ;;		Unchanged: 0/0
  4143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4144 ;;      Params:         2       0       0       0       0       0       0
  4145 ;;      Locals:         0       0       0       0       0       0       0
  4146 ;;      Temps:          0       0       0       0       0       0       0
  4147 ;;      Totals:         2       0       0       0       0       0       0
  4148 ;;Total ram usage:        2 bytes
  4149 ;; Hardware stack levels used:    1
  4150 ;; Hardware stack levels required when called:    5
  4151 ;; This function calls:
  4152 ;;		_memset
  4153 ;; This function is called by:
  4154 ;;		_EUSART1_Initialize
  4155 ;; This function uses a non-reentrant model
  4156 ;;
  4157                           
  4158                           	psect	text23
  4159  000F16                     __ptext23:
  4160                           	opt stack 0
  4161  000F16                     _UART_buff_init:
  4162                           	opt stack 22
  4163                           
  4164                           ;UART.c: 64: memset(_this, 0, sizeof (*_this));
  4165                           
  4166                           ;incstack = 0
  4167  000F16  C023  F01B         	movff	UART_buff_init@_this,memset@p1
  4168  000F1A  C024  F01C         	movff	UART_buff_init@_this+1,memset@p1+1
  4169  000F1E  0E00               	movlw	0
  4170  000F20  6E1E               	movwf	memset@c+1,c
  4171  000F22  0E00               	movlw	0
  4172  000F24  6E1D               	movwf	memset@c,c
  4173  000F26  0E00               	movlw	0
  4174  000F28  6E20               	movwf	memset@n+1,c
  4175  000F2A  0E6A               	movlw	106
  4176  000F2C  6E1F               	movwf	memset@n,c
  4177  000F2E  EC3C  F007         	call	_memset	;wreg free
  4178  000F32  0012               	return		;funcret
  4179  000F34                     __end_of_UART_buff_init:
  4180                           	opt stack 0
  4181                           tblptru	equ	0xFF8
  4182                           tblptrh	equ	0xFF7
  4183                           tblptrl	equ	0xFF6
  4184                           tablat	equ	0xFF5
  4185                           prodh	equ	0xFF4
  4186                           prodl	equ	0xFF3
  4187                           intcon	equ	0xFF2
  4188                           postinc0	equ	0xFEE
  4189                           wreg	equ	0xFE8
  4190                           indf1	equ	0xFE7
  4191                           postdec1	equ	0xFE5
  4192                           plusw1	equ	0xFE3
  4193                           fsr1h	equ	0xFE2
  4194                           fsr1l	equ	0xFE1
  4195                           indf2	equ	0xFDF
  4196                           postinc2	equ	0xFDE
  4197                           postdec2	equ	0xFDD
  4198                           plusw2	equ	0xFDB
  4199                           fsr2h	equ	0xFDA
  4200                           fsr2l	equ	0xFD9
  4201                           status	equ	0xFD8
  4202                           
  4203 ;; *************** function _memset *****************
  4204 ;; Defined at:
  4205 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\memset.c"
  4206 ;; Parameters:    Size  Location     Type
  4207 ;;  p1              2   26[COMRAM] PTR void 
  4208 ;;		 -> output_buffer(106), input_buffer(106), 
  4209 ;;  c               2   28[COMRAM] int 
  4210 ;;  n               2   30[COMRAM] unsigned int 
  4211 ;; Auto vars:     Size  Location     Type
  4212 ;;  p               2   32[COMRAM] PTR unsigned char 
  4213 ;;		 -> output_buffer(106), input_buffer(106), 
  4214 ;; Return value:  Size  Location     Type
  4215 ;;                  2   26[COMRAM] PTR void 
  4216 ;; Registers used:
  4217 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4218 ;; Tracked objects:
  4219 ;;		On entry : 0/0
  4220 ;;		On exit  : 0/0
  4221 ;;		Unchanged: 0/0
  4222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4223 ;;      Params:         6       0       0       0       0       0       0
  4224 ;;      Locals:         2       0       0       0       0       0       0
  4225 ;;      Temps:          0       0       0       0       0       0       0
  4226 ;;      Totals:         8       0       0       0       0       0       0
  4227 ;;Total ram usage:        8 bytes
  4228 ;; Hardware stack levels used:    1
  4229 ;; Hardware stack levels required when called:    4
  4230 ;; This function calls:
  4231 ;;		Nothing
  4232 ;; This function is called by:
  4233 ;;		_UART_buff_init
  4234 ;;		_UART_buff_flush
  4235 ;; This function uses a non-reentrant model
  4236 ;;
  4237                           
  4238                           	psect	text24
  4239  000E78                     __ptext24:
  4240                           	opt stack 0
  4241  000E78                     _memset:
  4242                           	opt stack 22
  4243                           
  4244                           ;incstack = 0
  4245  000E78  C01B  F021         	movff	memset@p1,memset@p
  4246  000E7C  C01C  F022         	movff	memset@p1+1,memset@p+1
  4247  000E80  D008               	goto	l1665
  4248  000E82                     l1661:
  4249  000E82  C021  FFD9         	movff	memset@p,fsr2l
  4250  000E86  C022  FFDA         	movff	memset@p+1,fsr2h
  4251  000E8A  C01D  FFDF         	movff	memset@c,indf2
  4252  000E8E  4A21               	infsnz	memset@p,f,c
  4253  000E90  2A22               	incf	memset@p+1,f,c
  4254  000E92                     l1665:
  4255  000E92  061F               	decf	memset@n,f,c
  4256  000E94  A0D8               	btfss	status,0,c
  4257  000E96  0620               	decf	memset@n+1,f,c
  4258  000E98  281F               	incf	memset@n,w,c
  4259  000E9A  E1F3               	bnz	l1661
  4260  000E9C  2820               	incf	memset@n+1,w,c
  4261  000E9E  B4D8               	btfsc	status,2,c
  4262  000EA0  0012               	return	
  4263  000EA2  D7EF               	goto	l1661
  4264  000EA4                     __end_of_memset:
  4265                           	opt stack 0
  4266                           tblptru	equ	0xFF8
  4267                           tblptrh	equ	0xFF7
  4268                           tblptrl	equ	0xFF6
  4269                           tablat	equ	0xFF5
  4270                           prodh	equ	0xFF4
  4271                           prodl	equ	0xFF3
  4272                           intcon	equ	0xFF2
  4273                           postinc0	equ	0xFEE
  4274                           wreg	equ	0xFE8
  4275                           indf1	equ	0xFE7
  4276                           postdec1	equ	0xFE5
  4277                           plusw1	equ	0xFE3
  4278                           fsr1h	equ	0xFE2
  4279                           fsr1l	equ	0xFE1
  4280                           indf2	equ	0xFDF
  4281                           postinc2	equ	0xFDE
  4282                           postdec2	equ	0xFDD
  4283                           plusw2	equ	0xFDB
  4284                           fsr2h	equ	0xFDA
  4285                           fsr2l	equ	0xFD9
  4286                           status	equ	0xFD8
  4287                           
  4288 ;; *************** function _SetTime *****************
  4289 ;; Defined at:
  4290 ;;		line 97 in file "tmr0.c"
  4291 ;; Parameters:    Size  Location     Type
  4292 ;;		None
  4293 ;; Auto vars:     Size  Location     Type
  4294 ;;		None
  4295 ;; Return value:  Size  Location     Type
  4296 ;;                  1    wreg      void 
  4297 ;; Registers used:
  4298 ;;		wreg, status,2
  4299 ;; Tracked objects:
  4300 ;;		On entry : 0/0
  4301 ;;		On exit  : 0/0
  4302 ;;		Unchanged: 0/0
  4303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4304 ;;      Params:         0       0       0       0       0       0       0
  4305 ;;      Locals:         0       0       0       0       0       0       0
  4306 ;;      Temps:          0       0       0       0       0       0       0
  4307 ;;      Totals:         0       0       0       0       0       0       0
  4308 ;;Total ram usage:        0 bytes
  4309 ;; Hardware stack levels used:    1
  4310 ;; Hardware stack levels required when called:    4
  4311 ;; This function calls:
  4312 ;;		Nothing
  4313 ;; This function is called by:
  4314 ;;		_main
  4315 ;; This function uses a non-reentrant model
  4316 ;;
  4317                           
  4318                           	psect	text25
  4319  000FC4                     __ptext25:
  4320                           	opt stack 0
  4321  000FC4                     _SetTime:
  4322                           	opt stack 26
  4323                           
  4324                           ;tmr0.c: 98: time = 0;
  4325                           
  4326                           ;incstack = 0
  4327  000FC4  0E00               	movlw	0
  4328  000FC6  6E2F               	movwf	_time,c
  4329  000FC8  0E00               	movlw	0
  4330  000FCA  6E30               	movwf	_time+1,c
  4331  000FCC  0E00               	movlw	0
  4332  000FCE  6E31               	movwf	_time+2,c
  4333  000FD0  0E00               	movlw	0
  4334  000FD2  6E32               	movwf	_time+3,c
  4335  000FD4  0012               	return		;funcret
  4336  000FD6                     __end_of_SetTime:
  4337                           	opt stack 0
  4338                           tblptru	equ	0xFF8
  4339                           tblptrh	equ	0xFF7
  4340                           tblptrl	equ	0xFF6
  4341                           tablat	equ	0xFF5
  4342                           prodh	equ	0xFF4
  4343                           prodl	equ	0xFF3
  4344                           intcon	equ	0xFF2
  4345                           postinc0	equ	0xFEE
  4346                           wreg	equ	0xFE8
  4347                           indf1	equ	0xFE7
  4348                           postdec1	equ	0xFE5
  4349                           plusw1	equ	0xFE3
  4350                           fsr1h	equ	0xFE2
  4351                           fsr1l	equ	0xFE1
  4352                           indf2	equ	0xFDF
  4353                           postinc2	equ	0xFDE
  4354                           postdec2	equ	0xFDD
  4355                           plusw2	equ	0xFDB
  4356                           fsr2h	equ	0xFDA
  4357                           fsr2l	equ	0xFD9
  4358                           status	equ	0xFD8
  4359                           
  4360 ;; *************** function _ReadFaults *****************
  4361 ;; Defined at:
  4362 ;;		line 13 in file "Function.c"
  4363 ;; Parameters:    Size  Location     Type
  4364 ;;		None
  4365 ;; Auto vars:     Size  Location     Type
  4366 ;;  Data            4   35[COMRAM] unsigned char [4]
  4367 ;; Return value:  Size  Location     Type
  4368 ;;                  1    wreg      void 
  4369 ;; Registers used:
  4370 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4371 ;; Tracked objects:
  4372 ;;		On entry : 0/0
  4373 ;;		On exit  : 0/0
  4374 ;;		Unchanged: 0/0
  4375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4376 ;;      Params:         0       0       0       0       0       0       0
  4377 ;;      Locals:         4       0       0       0       0       0       0
  4378 ;;      Temps:          1       0       0       0       0       0       0
  4379 ;;      Totals:         5       0       0       0       0       0       0
  4380 ;;Total ram usage:        5 bytes
  4381 ;; Hardware stack levels used:    1
  4382 ;; Hardware stack levels required when called:    5
  4383 ;; This function calls:
  4384 ;;		_SetDataDict
  4385 ;; This function is called by:
  4386 ;;		_main
  4387 ;; This function uses a non-reentrant model
  4388 ;;
  4389                           
  4390                           	psect	text26
  4391  000CD0                     __ptext26:
  4392                           	opt stack 0
  4393  000CD0                     _ReadFaults:
  4394                           	opt stack 25
  4395                           
  4396                           ;Function.c: 22: ByteHigh = PORTCbits.RC2;
  4397                           
  4398                           ;incstack = 0
  4399  000CD0  0E00               	movlw	0
  4400  000CD2  B482               	btfsc	3970,2,c	;volatile
  4401  000CD4  0E01               	movlw	1
  4402  000CD6  6E3F               	movwf	_ByteHigh,c
  4403                           
  4404                           ;Function.c: 23: ByteLow = ByteLow | ((PORTCbits.RC2 & 0x01) << 0);
  4405  000CD8  A482               	btfss	3970,2,c	;volatile
  4406  000CDA  D002               	goto	u1060
  4407  000CDC  0E01               	movlw	1
  4408  000CDE  D001               	goto	u1066
  4409  000CE0                     u1060:
  4410  000CE0  0E00               	movlw	0
  4411  000CE2                     u1066:
  4412  000CE2  103E               	iorwf	_ByteLow,w,c
  4413  000CE4  6E3E               	movwf	_ByteLow,c
  4414                           
  4415                           ;Function.c: 24: ByteLow = ByteLow | ((PORTAbits.RA7 & 0x01) << 1);
  4416  000CE6  AE80               	btfss	3968,7,c	;volatile
  4417  000CE8  D003               	goto	u1070
  4418  000CEA  6A23               	clrf	??_ReadFaults& (0+255),c
  4419  000CEC  2A23               	incf	??_ReadFaults& (0+255),f,c
  4420  000CEE  D001               	goto	u1078
  4421  000CF0                     u1070:
  4422  000CF0  6A23               	clrf	??_ReadFaults& (0+255),c
  4423  000CF2                     u1078:
  4424  000CF2  90D8               	bcf	status,0,c
  4425  000CF4  3423               	rlcf	??_ReadFaults,w,c
  4426  000CF6  103E               	iorwf	_ByteLow,w,c
  4427  000CF8  6E3E               	movwf	_ByteLow,c
  4428                           
  4429                           ;Function.c: 25: ByteLow = ByteLow | ((PORTCbits.RC0 & 0x01) << 2);
  4430  000CFA  A082               	btfss	3970,0,c	;volatile
  4431  000CFC  D003               	goto	u1080
  4432  000CFE  6A23               	clrf	??_ReadFaults& (0+255),c
  4433  000D00  2A23               	incf	??_ReadFaults& (0+255),f,c
  4434  000D02  D001               	goto	u1088
  4435  000D04                     u1080:
  4436  000D04  6A23               	clrf	??_ReadFaults& (0+255),c
  4437  000D06                     u1088:
  4438  000D06  90D8               	bcf	status,0,c
  4439  000D08  3623               	rlcf	??_ReadFaults,f,c
  4440  000D0A  90D8               	bcf	status,0,c
  4441  000D0C  3423               	rlcf	??_ReadFaults,w,c
  4442  000D0E  103E               	iorwf	_ByteLow,w,c
  4443  000D10  6E3E               	movwf	_ByteLow,c
  4444                           
  4445                           ;Function.c: 28: unsigned char Data[4];
  4446                           ;Function.c: 29: Data[0] = ByteHigh;
  4447  000D12  C03F  F024         	movff	_ByteHigh,ReadFaults@Data
  4448                           
  4449                           ;Function.c: 30: Data[1] = ByteLow;
  4450  000D16  C03E  F025         	movff	_ByteLow,ReadFaults@Data+1
  4451                           
  4452                           ;Function.c: 32: SetDataDict(1,0,Data,2);
  4453  000D1A  0E00               	movlw	0
  4454  000D1C  6E1B               	movwf	SetDataDict@DataTableIndex,c
  4455  000D1E  0E24               	movlw	low ReadFaults@Data
  4456  000D20  6E1C               	movwf	SetDataDict@DataArray,c
  4457  000D22  0E00               	movlw	high ReadFaults@Data
  4458  000D24  6E1D               	movwf	SetDataDict@DataArray+1,c
  4459  000D26  0E02               	movlw	2
  4460  000D28  6E1E               	movwf	SetDataDict@numbofbytes,c
  4461  000D2A  0E01               	movlw	1
  4462  000D2C  EC10  F005         	call	_SetDataDict
  4463  000D30  0012               	return		;funcret
  4464  000D32                     __end_of_ReadFaults:
  4465                           	opt stack 0
  4466                           tblptru	equ	0xFF8
  4467                           tblptrh	equ	0xFF7
  4468                           tblptrl	equ	0xFF6
  4469                           tablat	equ	0xFF5
  4470                           prodh	equ	0xFF4
  4471                           prodl	equ	0xFF3
  4472                           intcon	equ	0xFF2
  4473                           postinc0	equ	0xFEE
  4474                           wreg	equ	0xFE8
  4475                           indf1	equ	0xFE7
  4476                           postdec1	equ	0xFE5
  4477                           plusw1	equ	0xFE3
  4478                           fsr1h	equ	0xFE2
  4479                           fsr1l	equ	0xFE1
  4480                           indf2	equ	0xFDF
  4481                           postinc2	equ	0xFDE
  4482                           postdec2	equ	0xFDD
  4483                           plusw2	equ	0xFDB
  4484                           fsr2h	equ	0xFDA
  4485                           fsr2l	equ	0xFD9
  4486                           status	equ	0xFD8
  4487                           
  4488 ;; *************** function _SetDataDict *****************
  4489 ;; Defined at:
  4490 ;;		line 34 in file "CarDataDictionary.c"
  4491 ;; Parameters:    Size  Location     Type
  4492 ;;  DataTable       1    wreg     unsigned char 
  4493 ;;  DataTableInd    1   26[COMRAM] unsigned char 
  4494 ;;  DataArray       2   27[COMRAM] PTR unsigned char 
  4495 ;;		 -> Start@Data(5), ReadFaults@Data(4), 
  4496 ;;  numbofbytes     1   29[COMRAM] unsigned char 
  4497 ;; Auto vars:     Size  Location     Type
  4498 ;;  DataTable       1   31[COMRAM] unsigned char 
  4499 ;;  ReturnCounte    1   33[COMRAM] unsigned char 
  4500 ;;  DataCount       1   32[COMRAM] unsigned char 
  4501 ;;  Error           1   30[COMRAM] unsigned char 
  4502 ;; Return value:  Size  Location     Type
  4503 ;;                  1    wreg      unsigned char 
  4504 ;; Registers used:
  4505 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4506 ;; Tracked objects:
  4507 ;;		On entry : 0/0
  4508 ;;		On exit  : 0/0
  4509 ;;		Unchanged: 0/0
  4510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4511 ;;      Params:         4       0       0       0       0       0       0
  4512 ;;      Locals:         4       0       0       0       0       0       0
  4513 ;;      Temps:          0       0       0       0       0       0       0
  4514 ;;      Totals:         8       0       0       0       0       0       0
  4515 ;;Total ram usage:        8 bytes
  4516 ;; Hardware stack levels used:    1
  4517 ;; Hardware stack levels required when called:    4
  4518 ;; This function calls:
  4519 ;;		Nothing
  4520 ;; This function is called by:
  4521 ;;		_ReadFaults
  4522 ;;		_Start
  4523 ;; This function uses a non-reentrant model
  4524 ;;
  4525                           
  4526                           	psect	text27
  4527  000A20                     __ptext27:
  4528                           	opt stack 0
  4529  000A20                     _SetDataDict:
  4530                           	opt stack 25
  4531                           
  4532                           ;incstack = 0
  4533                           ;SetDataDict@DataTable stored from wreg
  4534  000A20  6E20               	movwf	SetDataDict@DataTable,c
  4535                           
  4536                           ;CarDataDictionary.c: 35: unsigned char Error = 0;
  4537  000A22  0E00               	movlw	0
  4538  000A24  6E1F               	movwf	SetDataDict@Error,c
  4539                           
  4540                           ;CarDataDictionary.c: 36: unsigned char DataCount = 0;
  4541  000A26  0E00               	movlw	0
  4542  000A28  6E21               	movwf	SetDataDict@DataCount,c
  4543                           
  4544                           ;CarDataDictionary.c: 37: unsigned char ReturnCounter = 0;
  4545  000A2A  0E00               	movlw	0
  4546  000A2C  6E22               	movwf	SetDataDict@ReturnCounter,c
  4547                           
  4548                           ;CarDataDictionary.c: 38: switch(DataTable){
  4549  000A2E  D03C               	goto	l2045
  4550  000A30                     l2025:
  4551                           
  4552                           ;CarDataDictionary.c: 40: DataCount = DataTableIndex + numbofbytes;
  4553  000A30  501B               	movf	SetDataDict@DataTableIndex,w,c
  4554  000A32  241E               	addwf	SetDataDict@numbofbytes,w,c
  4555  000A34  6E21               	movwf	SetDataDict@DataCount,c
  4556  000A36  D014               	goto	l2033
  4557  000A38                     l2027:
  4558                           
  4559                           ;CarDataDictionary.c: 42: DataTableArrayOne[DataTableIndex] = DataArray[ReturnCounter];
  4560  000A38  5022               	movf	SetDataDict@ReturnCounter,w,c
  4561  000A3A  0D01               	mullw	1
  4562  000A3C  50F3               	movf	prodl,w,c
  4563  000A3E  241C               	addwf	SetDataDict@DataArray,w,c
  4564  000A40  6ED9               	movwf	fsr2l,c
  4565  000A42  50F4               	movf	prodh,w,c
  4566  000A44  201D               	addwfc	SetDataDict@DataArray+1,w,c
  4567  000A46  6EDA               	movwf	fsr2h,c
  4568  000A48  501B               	movf	SetDataDict@DataTableIndex,w,c
  4569  000A4A  0D01               	mullw	1
  4570  000A4C  0EC6               	movlw	low _DataTableArrayOne
  4571  000A4E  24F3               	addwf	prodl,w,c
  4572  000A50  6EE1               	movwf	fsr1l,c
  4573  000A52  0E00               	movlw	high _DataTableArrayOne
  4574  000A54  20F4               	addwfc	prodh,w,c
  4575  000A56  6EE2               	movwf	fsr1h,c
  4576  000A58  CFDF FFE7          	movff	indf2,indf1
  4577                           
  4578                           ;CarDataDictionary.c: 43: ReturnCounter++;
  4579  000A5C  2A22               	incf	SetDataDict@ReturnCounter,f,c
  4580  000A5E  2A1B               	incf	SetDataDict@DataTableIndex,f,c
  4581  000A60                     l2033:
  4582  000A60  5021               	movf	SetDataDict@DataCount,w,c
  4583  000A62  5C1B               	subwf	SetDataDict@DataTableIndex,w,c
  4584  000A64  B0D8               	btfsc	status,0,c
  4585  000A66  0012               	return	
  4586  000A68  D7E7               	goto	l2027
  4587  000A6A                     l2035:
  4588                           
  4589                           ;CarDataDictionary.c: 47: DataCount = DataTableIndex + numbofbytes;
  4590  000A6A  501B               	movf	SetDataDict@DataTableIndex,w,c
  4591  000A6C  241E               	addwf	SetDataDict@numbofbytes,w,c
  4592  000A6E  6E21               	movwf	SetDataDict@DataCount,c
  4593  000A70  D014               	goto	l2043
  4594  000A72                     l2037:
  4595                           
  4596                           ;CarDataDictionary.c: 49: DataTableArrayTwo[DataTableIndex] = DataArray[ReturnCounter];
  4597  000A72  5022               	movf	SetDataDict@ReturnCounter,w,c
  4598  000A74  0D01               	mullw	1
  4599  000A76  50F3               	movf	prodl,w,c
  4600  000A78  241C               	addwf	SetDataDict@DataArray,w,c
  4601  000A7A  6ED9               	movwf	fsr2l,c
  4602  000A7C  50F4               	movf	prodh,w,c
  4603  000A7E  201D               	addwfc	SetDataDict@DataArray+1,w,c
  4604  000A80  6EDA               	movwf	fsr2h,c
  4605  000A82  501B               	movf	SetDataDict@DataTableIndex,w,c
  4606  000A84  0D01               	mullw	1
  4607  000A86  0E33               	movlw	low _DataTableArrayTwo
  4608  000A88  24F3               	addwf	prodl,w,c
  4609  000A8A  6EE1               	movwf	fsr1l,c
  4610  000A8C  0E00               	movlw	high _DataTableArrayTwo
  4611  000A8E  20F4               	addwfc	prodh,w,c
  4612  000A90  6EE2               	movwf	fsr1h,c
  4613  000A92  CFDF FFE7          	movff	indf2,indf1
  4614                           
  4615                           ;CarDataDictionary.c: 50: ReturnCounter++;
  4616  000A96  2A22               	incf	SetDataDict@ReturnCounter,f,c
  4617  000A98  2A1B               	incf	SetDataDict@DataTableIndex,f,c
  4618  000A9A                     l2043:
  4619  000A9A  5021               	movf	SetDataDict@DataCount,w,c
  4620  000A9C  5C1B               	subwf	SetDataDict@DataTableIndex,w,c
  4621  000A9E  B0D8               	btfsc	status,0,c
  4622  000AA0  0012               	return	
  4623  000AA2  D7E7               	goto	l2037
  4624  000AA4                     l348:
  4625                           
  4626                           ;CarDataDictionary.c: 54: Error = -1;
  4627  000AA4  681F               	setf	SetDataDict@Error,c
  4628                           
  4629                           ;CarDataDictionary.c: 55: }
  4630  000AA6  0012               	return	
  4631  000AA8                     l2045:
  4632  000AA8  5020               	movf	SetDataDict@DataTable,w,c
  4633                           
  4634                           ; Switch size 1, requested type "space"
  4635                           ; Number of cases is 2, Range of values is 0 to 1
  4636                           ; switch strategies available:
  4637                           ; Name         Instructions Cycles
  4638                           ; simple_byte            7     4 (average)
  4639                           ;	Chosen strategy is simple_byte
  4640  000AAA  0A00               	xorlw	0	; case 0
  4641  000AAC  B4D8               	btfsc	status,2,c
  4642  000AAE  D7C0               	goto	l2025
  4643  000AB0  0A01               	xorlw	1	; case 1
  4644  000AB2  B4D8               	btfsc	status,2,c
  4645  000AB4  D7DA               	goto	l2035
  4646  000AB6  D7F6               	goto	l348
  4647  000AB8                     __end_of_SetDataDict:
  4648                           	opt stack 0
  4649                           tblptru	equ	0xFF8
  4650                           tblptrh	equ	0xFF7
  4651                           tblptrl	equ	0xFF6
  4652                           tablat	equ	0xFF5
  4653                           prodh	equ	0xFF4
  4654                           prodl	equ	0xFF3
  4655                           intcon	equ	0xFF2
  4656                           postinc0	equ	0xFEE
  4657                           wreg	equ	0xFE8
  4658                           indf1	equ	0xFE7
  4659                           postdec1	equ	0xFE5
  4660                           plusw1	equ	0xFE3
  4661                           fsr1h	equ	0xFE2
  4662                           fsr1l	equ	0xFE1
  4663                           indf2	equ	0xFDF
  4664                           postinc2	equ	0xFDE
  4665                           postdec2	equ	0xFDD
  4666                           plusw2	equ	0xFDB
  4667                           fsr2h	equ	0xFDA
  4668                           fsr2l	equ	0xFD9
  4669                           status	equ	0xFD8
  4670                           
  4671 ;; *************** function _GetTime *****************
  4672 ;; Defined at:
  4673 ;;		line 93 in file "tmr0.c"
  4674 ;; Parameters:    Size  Location     Type
  4675 ;;		None
  4676 ;; Auto vars:     Size  Location     Type
  4677 ;;		None
  4678 ;; Return value:  Size  Location     Type
  4679 ;;                  4   26[COMRAM] long 
  4680 ;; Registers used:
  4681 ;;		None
  4682 ;; Tracked objects:
  4683 ;;		On entry : 0/0
  4684 ;;		On exit  : 0/0
  4685 ;;		Unchanged: 0/0
  4686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4687 ;;      Params:         4       0       0       0       0       0       0
  4688 ;;      Locals:         0       0       0       0       0       0       0
  4689 ;;      Temps:          0       0       0       0       0       0       0
  4690 ;;      Totals:         4       0       0       0       0       0       0
  4691 ;;Total ram usage:        4 bytes
  4692 ;; Hardware stack levels used:    1
  4693 ;; Hardware stack levels required when called:    4
  4694 ;; This function calls:
  4695 ;;		Nothing
  4696 ;; This function is called by:
  4697 ;;		_main
  4698 ;; This function uses a non-reentrant model
  4699 ;;
  4700                           
  4701                           	psect	text28
  4702  000FD6                     __ptext28:
  4703                           	opt stack 0
  4704  000FD6                     _GetTime:
  4705                           	opt stack 26
  4706                           
  4707                           ;tmr0.c: 94: return time;
  4708                           
  4709                           ;incstack = 0
  4710  000FD6  C02F  F01B         	movff	_time,?_GetTime
  4711  000FDA  C030  F01C         	movff	_time+1,?_GetTime+1
  4712  000FDE  C031  F01D         	movff	_time+2,?_GetTime+2
  4713  000FE2  C032  F01E         	movff	_time+3,?_GetTime+3
  4714  000FE6  0012               	return		;funcret
  4715  000FE8                     __end_of_GetTime:
  4716                           	opt stack 0
  4717                           tblptru	equ	0xFF8
  4718                           tblptrh	equ	0xFF7
  4719                           tblptrl	equ	0xFF6
  4720                           tablat	equ	0xFF5
  4721                           prodh	equ	0xFF4
  4722                           prodl	equ	0xFF3
  4723                           intcon	equ	0xFF2
  4724                           postinc0	equ	0xFEE
  4725                           wreg	equ	0xFE8
  4726                           indf1	equ	0xFE7
  4727                           postdec1	equ	0xFE5
  4728                           plusw1	equ	0xFE3
  4729                           fsr1h	equ	0xFE2
  4730                           fsr1l	equ	0xFE1
  4731                           indf2	equ	0xFDF
  4732                           postinc2	equ	0xFDE
  4733                           postdec2	equ	0xFDD
  4734                           plusw2	equ	0xFDB
  4735                           fsr2h	equ	0xFDA
  4736                           fsr2l	equ	0xFD9
  4737                           status	equ	0xFD8
  4738                           
  4739 ;; *************** function _INTERRUPT_InterruptManager *****************
  4740 ;; Defined at:
  4741 ;;		line 189 in file "Function.c"
  4742 ;; Parameters:    Size  Location     Type
  4743 ;;		None
  4744 ;; Auto vars:     Size  Location     Type
  4745 ;;		None
  4746 ;; Return value:  Size  Location     Type
  4747 ;;                  1    wreg      void 
  4748 ;; Registers used:
  4749 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4750 ;; Tracked objects:
  4751 ;;		On entry : 0/0
  4752 ;;		On exit  : 0/0
  4753 ;;		Unchanged: 0/0
  4754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4755 ;;      Params:         0       0       0       0       0       0       0
  4756 ;;      Locals:         0       0       0       0       0       0       0
  4757 ;;      Temps:         14       0       0       0       0       0       0
  4758 ;;      Totals:        14       0       0       0       0       0       0
  4759 ;;Total ram usage:       14 bytes
  4760 ;; Hardware stack levels used:    1
  4761 ;; Hardware stack levels required when called:    3
  4762 ;; This function calls:
  4763 ;;		_EUSART1_Receive_ISR
  4764 ;;		_EUSART1_Transmit_ISR
  4765 ;;		_TMR0_ISR
  4766 ;; This function is called by:
  4767 ;;		Interrupt level 2
  4768 ;; This function uses a non-reentrant model
  4769 ;;
  4770                           
  4771                           	psect	intcode
  4772  000008                     __pintcode:
  4773                           	opt stack 0
  4774  000008                     _INTERRUPT_InterruptManager:
  4775                           	opt stack 20
  4776                           
  4777                           ;incstack = 0
  4778  000008  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4779  00000A  CFFA F00D          	movff	pclath,??_INTERRUPT_InterruptManager
  4780  00000E  CFFB F00E          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  4781  000012  CFE9 F00F          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  4782  000016  CFEA F010          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  4783  00001A  CFE1 F011          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  4784  00001E  CFE2 F012          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  4785  000022  CFD9 F013          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  4786  000026  CFDA F014          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  4787  00002A  CFF3 F015          	movff	prodl,??_INTERRUPT_InterruptManager+8
  4788  00002E  CFF4 F016          	movff	prodh,??_INTERRUPT_InterruptManager+9
  4789  000032  CFF6 F017          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  4790  000036  CFF7 F018          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  4791  00003A  CFF8 F019          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  4792  00003E  CFF5 F01A          	movff	tablat,??_INTERRUPT_InterruptManager+13
  4793                           
  4794                           ;Function.c: 192: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  4795  000042  BA9D               	btfsc	3997,5,c	;volatile
  4796  000044  AA9E               	btfss	3998,5,c	;volatile
  4797  000046  D003               	goto	i2l260
  4798                           
  4799                           ;Function.c: 193: {
  4800                           ;Function.c: 194: EUSART1_Receive_ISR();
  4801  000048  EC9A  F007         	call	_EUSART1_Receive_ISR	;wreg free
  4802                           
  4803                           ;Function.c: 195: }
  4804  00004C  D00B               	goto	i2l266
  4805  00004E                     i2l260:
  4806                           
  4807                           ;Function.c: 196: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  4808  00004E  B89D               	btfsc	3997,4,c	;volatile
  4809  000050  A89E               	btfss	3998,4,c	;volatile
  4810  000052  D003               	goto	i2l262
  4811                           
  4812                           ;Function.c: 197: {
  4813                           ;Function.c: 198: EUSART1_Transmit_ISR();
  4814  000054  ECF6  F006         	call	_EUSART1_Transmit_ISR	;wreg free
  4815                           
  4816                           ;Function.c: 199: }
  4817  000058  D005               	goto	i2l266
  4818  00005A                     i2l262:
  4819                           
  4820                           ;Function.c: 200: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  4821  00005A  BAF2               	btfsc	intcon,5,c	;volatile
  4822  00005C  A4F2               	btfss	intcon,2,c	;volatile
  4823  00005E  D002               	goto	i2l266
  4824                           
  4825                           ;Function.c: 201: {
  4826                           ;Function.c: 202: TMR0_ISR();
  4827  000060  ECB5  F007         	call	_TMR0_ISR	;wreg free
  4828  000064                     i2l266:
  4829  000064  C01A  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  4830  000068  C019  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  4831  00006C  C018  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  4832  000070  C017  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  4833  000074  C016  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  4834  000078  C015  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  4835  00007C  C014  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  4836  000080  C013  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  4837  000084  C012  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  4838  000088  C011  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  4839  00008C  C010  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  4840  000090  C00F  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  4841  000094  C00E  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  4842  000098  C00D  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  4843  00009C  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4844  00009E  0011               	retfie		f
  4845  0000A0                     __end_of_INTERRUPT_InterruptManager:
  4846                           	opt stack 0
  4847                           pclatu	equ	0xFFB
  4848                           pclath	equ	0xFFA
  4849                           tblptru	equ	0xFF8
  4850                           tblptrh	equ	0xFF7
  4851                           tblptrl	equ	0xFF6
  4852                           tablat	equ	0xFF5
  4853                           prodh	equ	0xFF4
  4854                           prodl	equ	0xFF3
  4855                           intcon	equ	0xFF2
  4856                           postinc0	equ	0xFEE
  4857                           fsr0h	equ	0xFEA
  4858                           fsr0l	equ	0xFE9
  4859                           wreg	equ	0xFE8
  4860                           indf1	equ	0xFE7
  4861                           postdec1	equ	0xFE5
  4862                           plusw1	equ	0xFE3
  4863                           fsr1h	equ	0xFE2
  4864                           fsr1l	equ	0xFE1
  4865                           indf2	equ	0xFDF
  4866                           postinc2	equ	0xFDE
  4867                           postdec2	equ	0xFDD
  4868                           plusw2	equ	0xFDB
  4869                           fsr2h	equ	0xFDA
  4870                           fsr2l	equ	0xFD9
  4871                           status	equ	0xFD8
  4872                           
  4873 ;; *************** function _TMR0_ISR *****************
  4874 ;; Defined at:
  4875 ;;		line 82 in file "tmr0.c"
  4876 ;; Parameters:    Size  Location     Type
  4877 ;;		None
  4878 ;; Auto vars:     Size  Location     Type
  4879 ;;		None
  4880 ;; Return value:  Size  Location     Type
  4881 ;;                  1    wreg      void 
  4882 ;; Registers used:
  4883 ;;		wreg, status,2, status,0
  4884 ;; Tracked objects:
  4885 ;;		On entry : 0/0
  4886 ;;		On exit  : 0/0
  4887 ;;		Unchanged: 0/0
  4888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4889 ;;      Params:         0       0       0       0       0       0       0
  4890 ;;      Locals:         0       0       0       0       0       0       0
  4891 ;;      Temps:          0       0       0       0       0       0       0
  4892 ;;      Totals:         0       0       0       0       0       0       0
  4893 ;;Total ram usage:        0 bytes
  4894 ;; Hardware stack levels used:    1
  4895 ;; This function calls:
  4896 ;;		Nothing
  4897 ;; This function is called by:
  4898 ;;		_INTERRUPT_InterruptManager
  4899 ;; This function uses a non-reentrant model
  4900 ;;
  4901                           
  4902                           	psect	text30
  4903  000F6A                     __ptext30:
  4904                           	opt stack 0
  4905  000F6A                     _TMR0_ISR:
  4906                           	opt stack 22
  4907                           
  4908                           ;tmr0.c: 85: TMR0H = timer0ReloadVal16bit >> 8;
  4909                           
  4910                           ;incstack = 0
  4911  000F6A  503D               	movf	_timer0ReloadVal16bit+1,w,c	;volatile
  4912  000F6C  6ED7               	movwf	4055,c	;volatile
  4913                           
  4914                           ;tmr0.c: 86: TMR0L = (uint8_t) timer0ReloadVal16bit;
  4915  000F6E  C03C  FFD6         	movff	_timer0ReloadVal16bit,4054	;volatile
  4916                           
  4917                           ;tmr0.c: 88: time++;
  4918  000F72  0E01               	movlw	1
  4919  000F74  262F               	addwf	_time,f,c
  4920  000F76  0E00               	movlw	0
  4921  000F78  2230               	addwfc	_time+1,f,c
  4922  000F7A  2231               	addwfc	_time+2,f,c
  4923  000F7C  2232               	addwfc	_time+3,f,c
  4924                           
  4925                           ;tmr0.c: 90: INTCONbits.TMR0IF = 0;
  4926  000F7E  94F2               	bcf	intcon,2,c	;volatile
  4927  000F80  0012               	return		;funcret
  4928  000F82                     __end_of_TMR0_ISR:
  4929                           	opt stack 0
  4930                           pclatu	equ	0xFFB
  4931                           pclath	equ	0xFFA
  4932                           tblptru	equ	0xFF8
  4933                           tblptrh	equ	0xFF7
  4934                           tblptrl	equ	0xFF6
  4935                           tablat	equ	0xFF5
  4936                           prodh	equ	0xFF4
  4937                           prodl	equ	0xFF3
  4938                           intcon	equ	0xFF2
  4939                           postinc0	equ	0xFEE
  4940                           fsr0h	equ	0xFEA
  4941                           fsr0l	equ	0xFE9
  4942                           wreg	equ	0xFE8
  4943                           indf1	equ	0xFE7
  4944                           postdec1	equ	0xFE5
  4945                           plusw1	equ	0xFE3
  4946                           fsr1h	equ	0xFE2
  4947                           fsr1l	equ	0xFE1
  4948                           indf2	equ	0xFDF
  4949                           postinc2	equ	0xFDE
  4950                           postdec2	equ	0xFDD
  4951                           plusw2	equ	0xFDB
  4952                           fsr2h	equ	0xFDA
  4953                           fsr2l	equ	0xFD9
  4954                           status	equ	0xFD8
  4955                           
  4956 ;; *************** function _EUSART1_Transmit_ISR *****************
  4957 ;; Defined at:
  4958 ;;		line 149 in file "UART.c"
  4959 ;; Parameters:    Size  Location     Type
  4960 ;;		None
  4961 ;; Auto vars:     Size  Location     Type
  4962 ;;		None
  4963 ;; Return value:  Size  Location     Type
  4964 ;;                  1    wreg      void 
  4965 ;; Registers used:
  4966 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4967 ;; Tracked objects:
  4968 ;;		On entry : 0/0
  4969 ;;		On exit  : 0/0
  4970 ;;		Unchanged: 0/0
  4971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4972 ;;      Params:         0       0       0       0       0       0       0
  4973 ;;      Locals:         0       0       0       0       0       0       0
  4974 ;;      Temps:          0       0       0       0       0       0       0
  4975 ;;      Totals:         0       0       0       0       0       0       0
  4976 ;;Total ram usage:        0 bytes
  4977 ;; Hardware stack levels used:    1
  4978 ;; Hardware stack levels required when called:    2
  4979 ;; This function calls:
  4980 ;;		i2_UART_buff_get
  4981 ;;		i2_UART_buff_size
  4982 ;; This function is called by:
  4983 ;;		_INTERRUPT_InterruptManager
  4984 ;; This function uses a non-reentrant model
  4985 ;;
  4986                           
  4987                           	psect	text31
  4988  000DEC                     __ptext31:
  4989                           	opt stack 0
  4990  000DEC                     _EUSART1_Transmit_ISR:
  4991                           	opt stack 20
  4992                           
  4993                           ;UART.c: 151: if (UART_buff_size(&output_buffer) > 0) {
  4994                           
  4995                           ;incstack = 0
  4996  000DEC  0E00               	movlw	low _output_buffer
  4997  000DEE  6E01               	movwf	i2UART_buff_size@_this,c
  4998  000DF0  0E01               	movlw	high _output_buffer
  4999  000DF2  6E02               	movwf	i2UART_buff_size@_this+1,c
  5000  000DF4  ECD7  F007         	call	i2_UART_buff_size	;wreg free
  5001  000DF8  BE02               	btfsc	?i2_UART_buff_size+1,7,c
  5002  000DFA  D00D               	goto	i2l2125
  5003  000DFC  5002               	movf	?i2_UART_buff_size+1,w,c
  5004  000DFE  E103               	bnz	i2u110_40
  5005  000E00  0401               	decf	?i2_UART_buff_size,w,c
  5006  000E02  A0D8               	btfss	status,0,c
  5007  000E04  D008               	goto	i2l2125
  5008  000E06                     i2u110_40:
  5009                           
  5010                           ;UART.c: 152: TXREG1 = UART_buff_get(&output_buffer);
  5011  000E06  0E00               	movlw	low _output_buffer
  5012  000E08  6E07               	movwf	i2UART_buff_get@_this,c
  5013  000E0A  0E01               	movlw	high _output_buffer
  5014  000E0C  6E08               	movwf	i2UART_buff_get@_this+1,c
  5015  000E0E  ECA5  F005         	call	i2_UART_buff_get	;wreg free
  5016  000E12  6EAD               	movwf	4013,c	;volatile
  5017                           
  5018                           ;UART.c: 153: } else {
  5019  000E14  0012               	return	
  5020  000E16                     i2l2125:
  5021                           
  5022                           ;UART.c: 154: Transmit_stall = 1;
  5023  000E16  0E01               	movlw	1
  5024  000E18  6E44               	movwf	_Transmit_stall,c
  5025                           
  5026                           ;UART.c: 155: PIE1bits.TX1IE = 0;
  5027  000E1A  989D               	bcf	3997,4,c	;volatile
  5028  000E1C  0012               	return	
  5029  000E1E                     __end_of_EUSART1_Transmit_ISR:
  5030                           	opt stack 0
  5031                           pclatu	equ	0xFFB
  5032                           pclath	equ	0xFFA
  5033                           tblptru	equ	0xFF8
  5034                           tblptrh	equ	0xFF7
  5035                           tblptrl	equ	0xFF6
  5036                           tablat	equ	0xFF5
  5037                           prodh	equ	0xFF4
  5038                           prodl	equ	0xFF3
  5039                           intcon	equ	0xFF2
  5040                           postinc0	equ	0xFEE
  5041                           fsr0h	equ	0xFEA
  5042                           fsr0l	equ	0xFE9
  5043                           wreg	equ	0xFE8
  5044                           indf1	equ	0xFE7
  5045                           postdec1	equ	0xFE5
  5046                           plusw1	equ	0xFE3
  5047                           fsr1h	equ	0xFE2
  5048                           fsr1l	equ	0xFE1
  5049                           indf2	equ	0xFDF
  5050                           postinc2	equ	0xFDE
  5051                           postdec2	equ	0xFDD
  5052                           plusw2	equ	0xFDB
  5053                           fsr2h	equ	0xFDA
  5054                           fsr2l	equ	0xFD9
  5055                           status	equ	0xFD8
  5056                           
  5057 ;; *************** function i2_UART_buff_size *****************
  5058 ;; Defined at:
  5059 ;;		line 101 in file "UART.c"
  5060 ;; Parameters:    Size  Location     Type
  5061 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
  5062 ;;		 -> output_buffer(106), input_buffer(106), 
  5063 ;; Auto vars:     Size  Location     Type
  5064 ;;		None
  5065 ;; Return value:  Size  Location     Type
  5066 ;;                  2    0[COMRAM] int 
  5067 ;; Registers used:
  5068 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5069 ;; Tracked objects:
  5070 ;;		On entry : 0/0
  5071 ;;		On exit  : 0/0
  5072 ;;		Unchanged: 0/0
  5073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5074 ;;      Params:         2       0       0       0       0       0       0
  5075 ;;      Locals:         0       0       0       0       0       0       0
  5076 ;;      Temps:          0       0       0       0       0       0       0
  5077 ;;      Totals:         2       0       0       0       0       0       0
  5078 ;;Total ram usage:        2 bytes
  5079 ;; Hardware stack levels used:    1
  5080 ;; This function calls:
  5081 ;;		Nothing
  5082 ;; This function is called by:
  5083 ;;		_EUSART1_Transmit_ISR
  5084 ;; This function uses a non-reentrant model
  5085 ;;
  5086                           
  5087                           	psect	text32
  5088  000FAE                     __ptext32:
  5089                           	opt stack 0
  5090  000FAE                     i2_UART_buff_size:
  5091                           	opt stack 21
  5092                           
  5093                           ;UART.c: 102: return (_this->count);
  5094                           
  5095                           ;incstack = 0
  5096  000FAE  EE20 F068          	lfsr	2,104
  5097  000FB2  5001               	movf	i2UART_buff_size@_this,w,c
  5098  000FB4  26D9               	addwf	fsr2l,f,c
  5099  000FB6  5002               	movf	i2UART_buff_size@_this+1,w,c
  5100  000FB8  22DA               	addwfc	fsr2h,f,c
  5101  000FBA  CFDE F001          	movff	postinc2,?i2_UART_buff_size
  5102  000FBE  CFDD F002          	movff	postdec2,?i2_UART_buff_size+1
  5103  000FC2  0012               	return	
  5104  000FC4                     __end_ofi2_UART_buff_size:
  5105                           	opt stack 0
  5106                           pclatu	equ	0xFFB
  5107                           pclath	equ	0xFFA
  5108                           tblptru	equ	0xFF8
  5109                           tblptrh	equ	0xFF7
  5110                           tblptrl	equ	0xFF6
  5111                           tablat	equ	0xFF5
  5112                           prodh	equ	0xFF4
  5113                           prodl	equ	0xFF3
  5114                           intcon	equ	0xFF2
  5115                           postinc0	equ	0xFEE
  5116                           fsr0h	equ	0xFEA
  5117                           fsr0l	equ	0xFE9
  5118                           wreg	equ	0xFE8
  5119                           indf1	equ	0xFE7
  5120                           postdec1	equ	0xFE5
  5121                           plusw1	equ	0xFE3
  5122                           fsr1h	equ	0xFE2
  5123                           fsr1l	equ	0xFE1
  5124                           indf2	equ	0xFDF
  5125                           postinc2	equ	0xFDE
  5126                           postdec2	equ	0xFDD
  5127                           plusw2	equ	0xFDB
  5128                           fsr2h	equ	0xFDA
  5129                           fsr2l	equ	0xFD9
  5130                           status	equ	0xFD8
  5131                           
  5132 ;; *************** function i2_UART_buff_get *****************
  5133 ;; Defined at:
  5134 ;;		line 80 in file "UART.c"
  5135 ;; Parameters:    Size  Location     Type
  5136 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  5137 ;;		 -> output_buffer(106), input_buffer(106), 
  5138 ;; Auto vars:     Size  Location     Type
  5139 ;;  UART_buff_ge    1   10[COMRAM] unsigned char 
  5140 ;; Return value:  Size  Location     Type
  5141 ;;                  1    wreg      unsigned char 
  5142 ;; Registers used:
  5143 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5144 ;; Tracked objects:
  5145 ;;		On entry : 0/0
  5146 ;;		On exit  : 0/0
  5147 ;;		Unchanged: 0/0
  5148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5149 ;;      Params:         2       0       0       0       0       0       0
  5150 ;;      Locals:         1       0       0       0       0       0       0
  5151 ;;      Temps:          2       0       0       0       0       0       0
  5152 ;;      Totals:         5       0       0       0       0       0       0
  5153 ;;Total ram usage:        5 bytes
  5154 ;; Hardware stack levels used:    1
  5155 ;; Hardware stack levels required when called:    1
  5156 ;; This function calls:
  5157 ;;		i2_UART_buff_modulo_inc
  5158 ;; This function is called by:
  5159 ;;		_EUSART1_Transmit_ISR
  5160 ;; This function uses a non-reentrant model
  5161 ;;
  5162                           
  5163                           	psect	text33
  5164  000B4A                     __ptext33:
  5165                           	opt stack 0
  5166  000B4A                     i2_UART_buff_get:
  5167                           	opt stack 20
  5168                           
  5169                           ;UART.c: 81: unsigned char c;
  5170                           ;UART.c: 82: if (_this->count > 0) {
  5171                           
  5172                           ;incstack = 0
  5173  000B4A  EE20 F068          	lfsr	2,104
  5174  000B4E  5007               	movf	i2UART_buff_get@_this,w,c
  5175  000B50  26D9               	addwf	fsr2l,f,c
  5176  000B52  5008               	movf	i2UART_buff_get@_this+1,w,c
  5177  000B54  22DA               	addwfc	fsr2h,f,c
  5178  000B56  0E01               	movlw	1
  5179  000B58  BEDB               	btfsc	plusw2,7,c
  5180  000B5A  D03C               	goto	i2l2071
  5181  000B5C  0E01               	movlw	1
  5182  000B5E  50DB               	movf	plusw2,w,c
  5183  000B60  E103               	bnz	i2u104_40
  5184  000B62  04DE               	decf	postinc2,w,c
  5185  000B64  A0D8               	btfss	status,0,c
  5186  000B66  D036               	goto	i2l2071
  5187  000B68                     i2u104_40:
  5188                           
  5189                           ;UART.c: 83: c = _this->buf[_this->tail];
  5190  000B68  EE20 F066          	lfsr	2,102
  5191  000B6C  5007               	movf	i2UART_buff_get@_this,w,c
  5192  000B6E  26D9               	addwf	fsr2l,f,c
  5193  000B70  5008               	movf	i2UART_buff_get@_this+1,w,c
  5194  000B72  22DA               	addwfc	fsr2h,f,c
  5195  000B74  CFDE F009          	movff	postinc2,??i2_UART_buff_get
  5196  000B78  CFDD F00A          	movff	postdec2,??i2_UART_buff_get+1
  5197  000B7C  5009               	movf	??i2_UART_buff_get,w,c
  5198  000B7E  2407               	addwf	i2UART_buff_get@_this,w,c
  5199  000B80  6ED9               	movwf	fsr2l,c
  5200  000B82  500A               	movf	??i2_UART_buff_get+1,w,c
  5201  000B84  2008               	addwfc	i2UART_buff_get@_this+1,w,c
  5202  000B86  6EDA               	movwf	fsr2h,c
  5203  000B88  50DF               	movf	indf2,w,c
  5204  000B8A  6E0B               	movwf	i2UART_buff_get@c,c
  5205                           
  5206                           ;UART.c: 84: _this->tail = UART_buff_modulo_inc(_this->tail, 100);
  5207  000B8C  EE20 F066          	lfsr	2,102
  5208  000B90  5007               	movf	i2UART_buff_get@_this,w,c
  5209  000B92  26D9               	addwf	fsr2l,f,c
  5210  000B94  5008               	movf	i2UART_buff_get@_this+1,w,c
  5211  000B96  22DA               	addwfc	fsr2h,f,c
  5212  000B98  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  5213  000B9C  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  5214  000BA0  0E00               	movlw	0
  5215  000BA2  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  5216  000BA4  0E64               	movlw	100
  5217  000BA6  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  5218  000BA8  EC67  F007         	call	i2_UART_buff_modulo_inc	;wreg free
  5219  000BAC  EE20 F066          	lfsr	2,102
  5220  000BB0  5007               	movf	i2UART_buff_get@_this,w,c
  5221  000BB2  26D9               	addwf	fsr2l,f,c
  5222  000BB4  5008               	movf	i2UART_buff_get@_this+1,w,c
  5223  000BB6  22DA               	addwfc	fsr2h,f,c
  5224  000BB8  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  5225  000BBC  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  5226                           
  5227                           ;UART.c: 85: --_this->count;
  5228  000BC0  EE20 F068          	lfsr	2,104
  5229  000BC4  5007               	movf	i2UART_buff_get@_this,w,c
  5230  000BC6  26D9               	addwf	fsr2l,f,c
  5231  000BC8  5008               	movf	i2UART_buff_get@_this+1,w,c
  5232  000BCA  22DA               	addwfc	fsr2h,f,c
  5233  000BCC  06DE               	decf	postinc2,f,c
  5234  000BCE  0E00               	movlw	0
  5235  000BD0  5ADD               	subwfb	postdec2,f,c
  5236                           
  5237                           ;UART.c: 86: } else {
  5238  000BD2  D002               	goto	i2l85
  5239  000BD4                     i2l2071:
  5240                           
  5241                           ;UART.c: 87: c = 0;
  5242  000BD4  0E00               	movlw	0
  5243  000BD6  6E0B               	movwf	i2UART_buff_get@c,c
  5244  000BD8                     i2l85:
  5245                           
  5246                           ;UART.c: 88: }
  5247                           ;UART.c: 89: return (c);
  5248  000BD8  500B               	movf	i2UART_buff_get@c,w,c
  5249  000BDA  0012               	return	
  5250  000BDC                     __end_ofi2_UART_buff_get:
  5251                           	opt stack 0
  5252                           pclatu	equ	0xFFB
  5253                           pclath	equ	0xFFA
  5254                           tblptru	equ	0xFF8
  5255                           tblptrh	equ	0xFF7
  5256                           tblptrl	equ	0xFF6
  5257                           tablat	equ	0xFF5
  5258                           prodh	equ	0xFF4
  5259                           prodl	equ	0xFF3
  5260                           intcon	equ	0xFF2
  5261                           postinc0	equ	0xFEE
  5262                           fsr0h	equ	0xFEA
  5263                           fsr0l	equ	0xFE9
  5264                           wreg	equ	0xFE8
  5265                           indf1	equ	0xFE7
  5266                           postdec1	equ	0xFE5
  5267                           plusw1	equ	0xFE3
  5268                           fsr1h	equ	0xFE2
  5269                           fsr1l	equ	0xFE1
  5270                           indf2	equ	0xFDF
  5271                           postinc2	equ	0xFDE
  5272                           postdec2	equ	0xFDD
  5273                           plusw2	equ	0xFDB
  5274                           fsr2h	equ	0xFDA
  5275                           fsr2l	equ	0xFD9
  5276                           status	equ	0xFD8
  5277                           
  5278 ;; *************** function _EUSART1_Receive_ISR *****************
  5279 ;; Defined at:
  5280 ;;		line 138 in file "UART.c"
  5281 ;; Parameters:    Size  Location     Type
  5282 ;;		None
  5283 ;; Auto vars:     Size  Location     Type
  5284 ;;  data            1   11[COMRAM] unsigned char 
  5285 ;; Return value:  Size  Location     Type
  5286 ;;                  1    wreg      void 
  5287 ;; Registers used:
  5288 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5289 ;; Tracked objects:
  5290 ;;		On entry : 0/0
  5291 ;;		On exit  : 0/0
  5292 ;;		Unchanged: 0/0
  5293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5294 ;;      Params:         0       0       0       0       0       0       0
  5295 ;;      Locals:         1       0       0       0       0       0       0
  5296 ;;      Temps:          0       0       0       0       0       0       0
  5297 ;;      Totals:         1       0       0       0       0       0       0
  5298 ;;Total ram usage:        1 bytes
  5299 ;; Hardware stack levels used:    1
  5300 ;; Hardware stack levels required when called:    2
  5301 ;; This function calls:
  5302 ;;		i2_UART_buff_put
  5303 ;; This function is called by:
  5304 ;;		_INTERRUPT_InterruptManager
  5305 ;; This function uses a non-reentrant model
  5306 ;;
  5307                           
  5308                           	psect	text34
  5309  000F34                     __ptext34:
  5310                           	opt stack 0
  5311  000F34                     _EUSART1_Receive_ISR:
  5312                           	opt stack 20
  5313                           
  5314                           ;UART.c: 139: if (1 == RC1STAbits.OERR) {
  5315                           
  5316                           ;incstack = 0
  5317  000F34  A2AB               	btfss	4011,1,c	;volatile
  5318  000F36  D002               	goto	i2l116
  5319                           
  5320                           ;UART.c: 142: RC1STAbits.CREN = 0;
  5321  000F38  98AB               	bcf	4011,4,c	;volatile
  5322                           
  5323                           ;UART.c: 143: RC1STAbits.CREN = 1;
  5324  000F3A  88AB               	bsf	4011,4,c	;volatile
  5325  000F3C                     i2l116:
  5326                           
  5327                           ;UART.c: 144: }
  5328                           ;UART.c: 145: unsigned char data = RCREG1;
  5329  000F3C  CFAE F00C          	movff	4014,EUSART1_Receive_ISR@data	;volatile
  5330                           
  5331                           ;UART.c: 146: UART_buff_put(&input_buffer, data);
  5332  000F40  0E6A               	movlw	low _input_buffer
  5333  000F42  6E07               	movwf	i2UART_buff_put@_this,c
  5334  000F44  0E01               	movlw	high _input_buffer
  5335  000F46  6E08               	movwf	i2UART_buff_put@_this+1,c
  5336  000F48  C00C  F009         	movff	EUSART1_Receive_ISR@data,i2UART_buff_put@c
  5337  000F4C  EC59  F003         	call	i2_UART_buff_put	;wreg free
  5338  000F50  0012               	return		;funcret
  5339  000F52                     __end_of_EUSART1_Receive_ISR:
  5340                           	opt stack 0
  5341                           pclatu	equ	0xFFB
  5342                           pclath	equ	0xFFA
  5343                           tblptru	equ	0xFF8
  5344                           tblptrh	equ	0xFF7
  5345                           tblptrl	equ	0xFF6
  5346                           tablat	equ	0xFF5
  5347                           prodh	equ	0xFF4
  5348                           prodl	equ	0xFF3
  5349                           intcon	equ	0xFF2
  5350                           postinc0	equ	0xFEE
  5351                           fsr0h	equ	0xFEA
  5352                           fsr0l	equ	0xFE9
  5353                           wreg	equ	0xFE8
  5354                           indf1	equ	0xFE7
  5355                           postdec1	equ	0xFE5
  5356                           plusw1	equ	0xFE3
  5357                           fsr1h	equ	0xFE2
  5358                           fsr1l	equ	0xFE1
  5359                           indf2	equ	0xFDF
  5360                           postinc2	equ	0xFDE
  5361                           postdec2	equ	0xFDD
  5362                           plusw2	equ	0xFDB
  5363                           fsr2h	equ	0xFDA
  5364                           fsr2l	equ	0xFD9
  5365                           status	equ	0xFD8
  5366                           
  5367 ;; *************** function i2_UART_buff_put *****************
  5368 ;; Defined at:
  5369 ;;		line 67 in file "UART.c"
  5370 ;; Parameters:    Size  Location     Type
  5371 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  5372 ;;		 -> output_buffer(106), input_buffer(106), 
  5373 ;;  c               1    8[COMRAM] const unsigned char 
  5374 ;; Auto vars:     Size  Location     Type
  5375 ;;		None
  5376 ;; Return value:  Size  Location     Type
  5377 ;;                  1    wreg      void 
  5378 ;; Registers used:
  5379 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5380 ;; Tracked objects:
  5381 ;;		On entry : 0/0
  5382 ;;		On exit  : 0/0
  5383 ;;		Unchanged: 0/0
  5384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5385 ;;      Params:         3       0       0       0       0       0       0
  5386 ;;      Locals:         0       0       0       0       0       0       0
  5387 ;;      Temps:          2       0       0       0       0       0       0
  5388 ;;      Totals:         5       0       0       0       0       0       0
  5389 ;;Total ram usage:        5 bytes
  5390 ;; Hardware stack levels used:    1
  5391 ;; Hardware stack levels required when called:    1
  5392 ;; This function calls:
  5393 ;;		i2_UART_buff_modulo_inc
  5394 ;; This function is called by:
  5395 ;;		_EUSART1_Receive_ISR
  5396 ;; This function uses a non-reentrant model
  5397 ;;
  5398                           
  5399                           	psect	text35
  5400  0006B2                     __ptext35:
  5401                           	opt stack 0
  5402  0006B2                     i2_UART_buff_put:
  5403                           	opt stack 20
  5404                           
  5405                           ;UART.c: 68: if (_this->count < 100) {
  5406                           
  5407                           ;incstack = 0
  5408  0006B2  EE20 F068          	lfsr	2,104
  5409  0006B6  5007               	movf	i2UART_buff_put@_this,w,c
  5410  0006B8  26D9               	addwf	fsr2l,f,c
  5411  0006BA  5008               	movf	i2UART_buff_put@_this+1,w,c
  5412  0006BC  22DA               	addwfc	fsr2h,f,c
  5413  0006BE  0E01               	movlw	1
  5414  0006C0  BEDB               	btfsc	plusw2,7,c
  5415  0006C2  D007               	goto	i2l2051
  5416  0006C4  0E01               	movlw	1
  5417  0006C6  50DB               	movf	plusw2,w,c
  5418  0006C8  E13A               	bnz	i2l2057
  5419  0006CA  0E64               	movlw	100
  5420  0006CC  5CDE               	subwf	postinc2,w,c
  5421  0006CE  B0D8               	btfsc	status,0,c
  5422  0006D0  D036               	goto	i2l2057
  5423  0006D2                     i2l2051:
  5424                           
  5425                           ;UART.c: 69: _this->buf[_this->head] = c;
  5426  0006D2  EE20 F064          	lfsr	2,100
  5427  0006D6  5007               	movf	i2UART_buff_put@_this,w,c
  5428  0006D8  26D9               	addwf	fsr2l,f,c
  5429  0006DA  5008               	movf	i2UART_buff_put@_this+1,w,c
  5430  0006DC  22DA               	addwfc	fsr2h,f,c
  5431  0006DE  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  5432  0006E2  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  5433  0006E6  500A               	movf	??i2_UART_buff_put,w,c
  5434  0006E8  2407               	addwf	i2UART_buff_put@_this,w,c
  5435  0006EA  6ED9               	movwf	fsr2l,c
  5436  0006EC  500B               	movf	??i2_UART_buff_put+1,w,c
  5437  0006EE  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  5438  0006F0  6EDA               	movwf	fsr2h,c
  5439  0006F2  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  5440                           
  5441                           ;UART.c: 70: _this->head = UART_buff_modulo_inc(_this->head, 100);
  5442  0006F6  EE20 F064          	lfsr	2,100
  5443  0006FA  5007               	movf	i2UART_buff_put@_this,w,c
  5444  0006FC  26D9               	addwf	fsr2l,f,c
  5445  0006FE  5008               	movf	i2UART_buff_put@_this+1,w,c
  5446  000700  22DA               	addwfc	fsr2h,f,c
  5447  000702  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  5448  000706  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  5449  00070A  0E00               	movlw	0
  5450  00070C  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  5451  00070E  0E64               	movlw	100
  5452  000710  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  5453  000712  EC67  F007         	call	i2_UART_buff_modulo_inc	;wreg free
  5454  000716  EE20 F064          	lfsr	2,100
  5455  00071A  5007               	movf	i2UART_buff_put@_this,w,c
  5456  00071C  26D9               	addwf	fsr2l,f,c
  5457  00071E  5008               	movf	i2UART_buff_put@_this+1,w,c
  5458  000720  22DA               	addwfc	fsr2h,f,c
  5459  000722  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  5460  000726  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  5461                           
  5462                           ;UART.c: 71: ++_this->count;
  5463  00072A  EE20 F068          	lfsr	2,104
  5464  00072E  5007               	movf	i2UART_buff_put@_this,w,c
  5465  000730  26D9               	addwf	fsr2l,f,c
  5466  000732  5008               	movf	i2UART_buff_put@_this+1,w,c
  5467  000734  22DA               	addwfc	fsr2h,f,c
  5468  000736  2ADE               	incf	postinc2,f,c
  5469  000738  0E00               	movlw	0
  5470  00073A  22DD               	addwfc	postdec2,f,c
  5471                           
  5472                           ;UART.c: 72: } else {
  5473  00073C  0012               	return	
  5474  00073E                     i2l2057:
  5475                           
  5476                           ;UART.c: 73: _this->buf[_this->head] = c;
  5477  00073E  EE20 F064          	lfsr	2,100
  5478  000742  5007               	movf	i2UART_buff_put@_this,w,c
  5479  000744  26D9               	addwf	fsr2l,f,c
  5480  000746  5008               	movf	i2UART_buff_put@_this+1,w,c
  5481  000748  22DA               	addwfc	fsr2h,f,c
  5482  00074A  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  5483  00074E  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  5484  000752  500A               	movf	??i2_UART_buff_put,w,c
  5485  000754  2407               	addwf	i2UART_buff_put@_this,w,c
  5486  000756  6ED9               	movwf	fsr2l,c
  5487  000758  500B               	movf	??i2_UART_buff_put+1,w,c
  5488  00075A  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  5489  00075C  6EDA               	movwf	fsr2h,c
  5490  00075E  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  5491                           
  5492                           ;UART.c: 74: _this->head = UART_buff_modulo_inc(_this->head, 100);
  5493  000762  EE20 F064          	lfsr	2,100
  5494  000766  5007               	movf	i2UART_buff_put@_this,w,c
  5495  000768  26D9               	addwf	fsr2l,f,c
  5496  00076A  5008               	movf	i2UART_buff_put@_this+1,w,c
  5497  00076C  22DA               	addwfc	fsr2h,f,c
  5498  00076E  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  5499  000772  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  5500  000776  0E00               	movlw	0
  5501  000778  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  5502  00077A  0E64               	movlw	100
  5503  00077C  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  5504  00077E  EC67  F007         	call	i2_UART_buff_modulo_inc	;wreg free
  5505  000782  EE20 F064          	lfsr	2,100
  5506  000786  5007               	movf	i2UART_buff_put@_this,w,c
  5507  000788  26D9               	addwf	fsr2l,f,c
  5508  00078A  5008               	movf	i2UART_buff_put@_this+1,w,c
  5509  00078C  22DA               	addwfc	fsr2h,f,c
  5510  00078E  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  5511  000792  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  5512                           
  5513                           ;UART.c: 75: _this->tail = UART_buff_modulo_inc(_this->tail, 100);
  5514  000796  EE20 F066          	lfsr	2,102
  5515  00079A  5007               	movf	i2UART_buff_put@_this,w,c
  5516  00079C  26D9               	addwf	fsr2l,f,c
  5517  00079E  5008               	movf	i2UART_buff_put@_this+1,w,c
  5518  0007A0  22DA               	addwfc	fsr2h,f,c
  5519  0007A2  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  5520  0007A6  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  5521  0007AA  0E00               	movlw	0
  5522  0007AC  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  5523  0007AE  0E64               	movlw	100
  5524  0007B0  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  5525  0007B2  EC67  F007         	call	i2_UART_buff_modulo_inc	;wreg free
  5526  0007B6  EE20 F066          	lfsr	2,102
  5527  0007BA  5007               	movf	i2UART_buff_put@_this,w,c
  5528  0007BC  26D9               	addwf	fsr2l,f,c
  5529  0007BE  5008               	movf	i2UART_buff_put@_this+1,w,c
  5530  0007C0  22DA               	addwfc	fsr2h,f,c
  5531  0007C2  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  5532  0007C6  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  5533  0007CA  0012               	return	
  5534  0007CC                     __end_ofi2_UART_buff_put:
  5535                           	opt stack 0
  5536                           pclatu	equ	0xFFB
  5537                           pclath	equ	0xFFA
  5538                           tblptru	equ	0xFF8
  5539                           tblptrh	equ	0xFF7
  5540                           tblptrl	equ	0xFF6
  5541                           tablat	equ	0xFF5
  5542                           prodh	equ	0xFF4
  5543                           prodl	equ	0xFF3
  5544                           intcon	equ	0xFF2
  5545                           postinc0	equ	0xFEE
  5546                           fsr0h	equ	0xFEA
  5547                           fsr0l	equ	0xFE9
  5548                           wreg	equ	0xFE8
  5549                           indf1	equ	0xFE7
  5550                           postdec1	equ	0xFE5
  5551                           plusw1	equ	0xFE3
  5552                           fsr1h	equ	0xFE2
  5553                           fsr1l	equ	0xFE1
  5554                           indf2	equ	0xFDF
  5555                           postinc2	equ	0xFDE
  5556                           postdec2	equ	0xFDD
  5557                           plusw2	equ	0xFDB
  5558                           fsr2h	equ	0xFDA
  5559                           fsr2l	equ	0xFD9
  5560                           status	equ	0xFD8
  5561                           
  5562 ;; *************** function i2_UART_buff_modulo_inc *****************
  5563 ;; Defined at:
  5564 ;;		line 105 in file "UART.c"
  5565 ;; Parameters:    Size  Location     Type
  5566 ;;  value           2    0[COMRAM] const unsigned int 
  5567 ;;  modulus         2    2[COMRAM] const unsigned int 
  5568 ;; Auto vars:     Size  Location     Type
  5569 ;;  UART_buff_mo    2    4[COMRAM] unsigned int 
  5570 ;; Return value:  Size  Location     Type
  5571 ;;                  2    0[COMRAM] unsigned int 
  5572 ;; Registers used:
  5573 ;;		wreg, status,2, status,0
  5574 ;; Tracked objects:
  5575 ;;		On entry : 0/0
  5576 ;;		On exit  : 0/0
  5577 ;;		Unchanged: 0/0
  5578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5579 ;;      Params:         4       0       0       0       0       0       0
  5580 ;;      Locals:         2       0       0       0       0       0       0
  5581 ;;      Temps:          0       0       0       0       0       0       0
  5582 ;;      Totals:         6       0       0       0       0       0       0
  5583 ;;Total ram usage:        6 bytes
  5584 ;; Hardware stack levels used:    1
  5585 ;; This function calls:
  5586 ;;		Nothing
  5587 ;; This function is called by:
  5588 ;;		i2_UART_buff_put
  5589 ;;		i2_UART_buff_get
  5590 ;; This function uses a non-reentrant model
  5591 ;;
  5592                           
  5593                           	psect	text36
  5594  000ECE                     __ptext36:
  5595                           	opt stack 0
  5596  000ECE                     i2_UART_buff_modulo_inc:
  5597                           	opt stack 20
  5598                           
  5599                           ;UART.c: 106: unsigned int my_value = value + 1;
  5600                           
  5601                           ;incstack = 0
  5602  000ECE  0E01               	movlw	1
  5603  000ED0  2401               	addwf	i2UART_buff_modulo_inc@value,w,c
  5604  000ED2  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  5605  000ED4  0E00               	movlw	0
  5606  000ED6  2002               	addwfc	i2UART_buff_modulo_inc@value+1,w,c
  5607  000ED8  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  5608                           
  5609                           ;UART.c: 107: if (my_value >= modulus) {
  5610  000EDA  5003               	movf	i2UART_buff_modulo_inc@modulus,w,c
  5611  000EDC  5C05               	subwf	i2UART_buff_modulo_inc@my_value,w,c
  5612  000EDE  5004               	movf	i2UART_buff_modulo_inc@modulus+1,w,c
  5613  000EE0  5806               	subwfb	i2UART_buff_modulo_inc@my_value+1,w,c
  5614  000EE2  A0D8               	btfss	status,0,c
  5615  000EE4  D004               	goto	i2l1977
  5616                           
  5617                           ;UART.c: 108: my_value = 0;
  5618  000EE6  0E00               	movlw	0
  5619  000EE8  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  5620  000EEA  0E00               	movlw	0
  5621  000EEC  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  5622  000EEE                     i2l1977:
  5623                           
  5624                           ;UART.c: 109: }
  5625                           ;UART.c: 110: return (my_value);
  5626  000EEE  C005  F001         	movff	i2UART_buff_modulo_inc@my_value,?i2_UART_buff_modulo_inc
  5627  000EF2  C006  F002         	movff	i2UART_buff_modulo_inc@my_value+1,?i2_UART_buff_modulo_inc+1
  5628  000EF6  0012               	return	
  5629  000EF8                     __end_ofi2_UART_buff_modulo_inc:
  5630                           	opt stack 0
  5631  0000                     pclatu	equ	0xFFB
  5632                           pclath	equ	0xFFA
  5633                           tblptru	equ	0xFF8
  5634                           tblptrh	equ	0xFF7
  5635                           tblptrl	equ	0xFF6
  5636                           tablat	equ	0xFF5
  5637                           prodh	equ	0xFF4
  5638                           prodl	equ	0xFF3
  5639                           intcon	equ	0xFF2
  5640                           postinc0	equ	0xFEE
  5641                           fsr0h	equ	0xFEA
  5642                           fsr0l	equ	0xFE9
  5643                           wreg	equ	0xFE8
  5644                           indf1	equ	0xFE7
  5645                           postdec1	equ	0xFE5
  5646                           plusw1	equ	0xFE3
  5647                           fsr1h	equ	0xFE2
  5648                           fsr1l	equ	0xFE1
  5649                           indf2	equ	0xFDF
  5650                           postinc2	equ	0xFDE
  5651                           postdec2	equ	0xFDD
  5652                           plusw2	equ	0xFDB
  5653                           fsr2h	equ	0xFDA
  5654                           fsr2l	equ	0xFD9
  5655                           status	equ	0xFD8
  5656                           pclatu	equ	0xFFB
  5657                           pclath	equ	0xFFA
  5658                           tblptru	equ	0xFF8
  5659                           tblptrh	equ	0xFF7
  5660                           tblptrl	equ	0xFF6
  5661                           tablat	equ	0xFF5
  5662                           prodh	equ	0xFF4
  5663                           prodl	equ	0xFF3
  5664                           intcon	equ	0xFF2
  5665                           postinc0	equ	0xFEE
  5666                           fsr0h	equ	0xFEA
  5667                           fsr0l	equ	0xFE9
  5668                           wreg	equ	0xFE8
  5669                           indf1	equ	0xFE7
  5670                           postdec1	equ	0xFE5
  5671                           plusw1	equ	0xFE3
  5672                           fsr1h	equ	0xFE2
  5673                           fsr1l	equ	0xFE1
  5674                           indf2	equ	0xFDF
  5675                           postinc2	equ	0xFDE
  5676                           postdec2	equ	0xFDD
  5677                           plusw2	equ	0xFDB
  5678                           fsr2h	equ	0xFDA
  5679                           fsr2l	equ	0xFD9
  5680                           status	equ	0xFD8
  5681                           
  5682                           	psect	rparam
  5683  0000                     pclatu	equ	0xFFB
  5684                           pclath	equ	0xFFA
  5685                           tblptru	equ	0xFF8
  5686                           tblptrh	equ	0xFF7
  5687                           tblptrl	equ	0xFF6
  5688                           tablat	equ	0xFF5
  5689                           prodh	equ	0xFF4
  5690                           prodl	equ	0xFF3
  5691                           intcon	equ	0xFF2
  5692                           postinc0	equ	0xFEE
  5693                           fsr0h	equ	0xFEA
  5694                           fsr0l	equ	0xFE9
  5695                           wreg	equ	0xFE8
  5696                           indf1	equ	0xFE7
  5697                           postdec1	equ	0xFE5
  5698                           plusw1	equ	0xFE3
  5699                           fsr1h	equ	0xFE2
  5700                           fsr1l	equ	0xFE1
  5701                           indf2	equ	0xFDF
  5702                           postinc2	equ	0xFDE
  5703                           postdec2	equ	0xFDD
  5704                           plusw2	equ	0xFDB
  5705                           fsr2h	equ	0xFDA
  5706                           fsr2l	equ	0xFD9
  5707                           status	equ	0xFD8
  5708                           
  5709                           	psect	temp
  5710  000045                     btemp:
  5711                           	opt stack 0
  5712  000045                     	ds	1
  5713  0000                     int$flags	set	btemp
  5714                           pclatu	equ	0xFFB
  5715                           pclath	equ	0xFFA
  5716                           tblptru	equ	0xFF8
  5717                           tblptrh	equ	0xFF7
  5718                           tblptrl	equ	0xFF6
  5719                           tablat	equ	0xFF5
  5720                           prodh	equ	0xFF4
  5721                           prodl	equ	0xFF3
  5722                           intcon	equ	0xFF2
  5723                           postinc0	equ	0xFEE
  5724                           fsr0h	equ	0xFEA
  5725                           fsr0l	equ	0xFE9
  5726                           wreg	equ	0xFE8
  5727                           indf1	equ	0xFE7
  5728                           postdec1	equ	0xFE5
  5729                           plusw1	equ	0xFE3
  5730                           fsr1h	equ	0xFE2
  5731                           fsr1l	equ	0xFE1
  5732                           indf2	equ	0xFDF
  5733                           postinc2	equ	0xFDE
  5734                           postdec2	equ	0xFDD
  5735                           plusw2	equ	0xFDB
  5736                           fsr2h	equ	0xFDA
  5737                           fsr2l	equ	0xFD9
  5738                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        10
    BSS         313
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     42      68
    BANK0           160    102     157
    BANK1           256      7     249
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 106
		 -> output_buffer(BANK1[106]), input_buffer(BANK1[106]), 

    memset@p	PTR unsigned char  size(2) Largest target is 106
		 -> output_buffer(BANK1[106]), input_buffer(BANK1[106]), 

    ComController@DTI	PTR unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK0[30]), 

    sendData@DTS	PTR unsigned char  size(2) Largest target is 4
		 -> ComController@DataToSend(BANK0[4]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK0[30]), sendData@SendArray(BANK0[30]), 

    SetDataDict@DataArray	PTR unsigned char  size(2) Largest target is 5
		 -> Start@Data(COMRAM[5]), ReadFaults@Data(COMRAM[4]), 

    GetDataDict@DataArray	PTR unsigned char  size(2) Largest target is 4
		 -> ComController@DataToSend(BANK0[4]), 

    cobs_decode@dst_write_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK0[30]), 

    cobs_decode@dst_buf_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK0[30]), 

    cobs_decode@dst_buf_end_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK0[30]), 

    cobs_decode@src_ptr	PTR const unsigned char  size(2) Largest target is 30
		 -> ReciveArray(BANK1[30]), 

    cobs_decode@src_end_ptr	PTR const unsigned char  size(2) Largest target is 30
		 -> ReciveArray(BANK1[30]), 

    cobs_encode@dst_write_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> sendData@COBSArray(BANK0[30]), 

    cobs_encode@dst_code_write_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> sendData@COBSArray(BANK0[30]), 

    cobs_encode@dst_buf_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> sendData@COBSArray(BANK0[30]), 

    cobs_encode@dst_buf_end_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> sendData@COBSArray(BANK0[30]), 

    cobs_encode@src_ptr	PTR const unsigned char  size(2) Largest target is 30
		 -> sendData@SendArray(BANK0[30]), 

    cobs_encode@src_end_ptr	PTR const unsigned char  size(2) Largest target is 30
		 -> sendData@SendArray(BANK0[30]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 106
		 -> output_buffer(BANK1[106]), input_buffer(BANK1[106]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 106
		 -> output_buffer(BANK1[106]), input_buffer(BANK1[106]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 106
		 -> output_buffer(BANK1[106]), input_buffer(BANK1[106]), 

    sp__memset	PTR void  size(2) Largest target is 106
		 -> output_buffer(BANK1[106]), input_buffer(BANK1[106]), 

    UART_buff_init@_this	PTR struct UART_ring_buff size(2) Largest target is 106
		 -> output_buffer(BANK1[106]), input_buffer(BANK1[106]), 


Critical Paths under _main in COMRAM

    _Receive_get->_UART_buff_get
    _Receive_available->_UART_buff_size
    _ComController->_sendData
    _sendData->_Send_put
    _Send_put->_UART_buff_get
    _Send_put->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc
    _UART_buff_get->_UART_buff_modulo_inc
    _EUSART1_Initialize->_UART_buff_init
    _UART_buff_init->_memset
    _ReadFaults->_SetDataDict

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _EUSART1_Transmit_ISR->i2_UART_buff_get
    i2_UART_buff_get->i2_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->i2_UART_buff_put
    i2_UART_buff_put->i2_UART_buff_modulo_inc

Critical Paths under _main in BANK0

    _updateComms->_receiveData
    _receiveData->_ComController
    _ComController->_sendData
    _sendData->_cobs_encode

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _updateComms->_receiveData

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   14724
                            _GetTime
                         _ReadFaults
                            _SetTime
                              _Start
                        _updateComms
 ---------------------------------------------------------------------------------
 (1) _updateComms                                          0     0      0   12320
                        _receiveData
 ---------------------------------------------------------------------------------
 (2) _receiveData                                         12    12      0   12320
                                             97 BANK0      5     5      0
                                              0 BANK1      7     7      0
                               _CRC8
                      _ComController
                  _Receive_available
                        _Receive_get
                        _cobs_decode
 ---------------------------------------------------------------------------------
 (3) _cobs_decode                                         24    16      8    1783
                                             26 COMRAM    10     2      8
                                              0 BANK0     14    14      0
 ---------------------------------------------------------------------------------
 (3) _Receive_get                                          0     0      0    1308
                      _UART_buff_get
 ---------------------------------------------------------------------------------
 (3) _Receive_available                                    2     0      2     176
                                             28 COMRAM     2     0      2
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (4) _UART_buff_size                                       2     0      2     176
                                             26 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _ComController                                        9     5      4    8183
                                             88 BANK0      9     5      4
                              _Delay
                        _GetDataDict
                           _sendData
 ---------------------------------------------------------------------------------
 (4) _sendData                                            79    72      7    6751
                                             38 COMRAM     4     4      0
                                             13 BANK0     75    68      7
                               _CRC8
                           _Send_put
                        _cobs_encode
 ---------------------------------------------------------------------------------
 (5) _cobs_encode                                         23    15      8    1613
                                             26 COMRAM    10     2      8
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (5) _Send_put                                             1     1      0    2913
                                             37 COMRAM     1     1      0
                      _UART_buff_get
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (6) _UART_buff_put                                        5     2      3    1574
                                             32 COMRAM     5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (4) _UART_buff_get                                        5     3      2    1308
                                             32 COMRAM     5     3      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _UART_buff_modulo_inc                                 6     2      4     850
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _CRC8                                                 7     4      3     604
                                             26 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (4) _GetDataDict                                          8     4      4     772
                                             26 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (4) _Delay                                                5     3      2     248
                                             26 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _Start                                                5     5      0    1553
                                             36 COMRAM     5     5      0
                           _ComStart
               _INTERRUPT_Initialize
                        _SetDataDict
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ComStart                                             0     0      0     726
                 _EUSART1_Initialize
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0     726
                     _UART_buff_init
 ---------------------------------------------------------------------------------
 (4) _UART_buff_init                                       2     0      2     726
                                             34 COMRAM     2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               8     2      6     552
                                             26 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (1) _SetTime                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ReadFaults                                           5     5      0     851
                                             34 COMRAM     5     5      0
                        _SetDataDict
 ---------------------------------------------------------------------------------
 (2) _SetDataDict                                          8     4      4     802
                                             26 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _GetTime                                              4     0      4       0
                                             26 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                          14    14      0    1209
                                             12 COMRAM    14    14      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR0_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Transmit_ISR                                 0     0      0     528
                    i2_UART_buff_get
                   i2_UART_buff_size
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_size                                    2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_get                                     5     3      2     480
                                              6 COMRAM     5     3      2
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Receive_ISR                                  1     1      0     681
                                             11 COMRAM     1     1      0
                    i2_UART_buff_put
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_put                                     5     2      3     658
                                              6 COMRAM     5     2      3
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (11) i2_UART_buff_modulo_inc                              6     2      4     298
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GetTime
   _ReadFaults
     _SetDataDict
   _SetTime
   _Start
     _ComStart
       _EUSART1_Initialize
         _UART_buff_init
           _memset
     _INTERRUPT_Initialize
     _SetDataDict
     _TMR0_Initialize
       _TMR0_StartTimer
   _updateComms
     _receiveData
       _CRC8
       _ComController
         _Delay
         _GetDataDict
         _sendData
           _CRC8
           _Send_put
             _UART_buff_get
               _UART_buff_modulo_inc
             _UART_buff_put
               _UART_buff_modulo_inc
           _cobs_encode
       _Receive_available
         _UART_buff_size
       _Receive_get
         _UART_buff_get
           _UART_buff_modulo_inc
       _cobs_decode

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
     i2_UART_buff_put
       i2_UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     i2_UART_buff_get
       i2_UART_buff_modulo_inc
     i2_UART_buff_size
   _TMR0_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      7      F9       6       97.3%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     66      9D       4       98.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2A      44       1       72.3%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1DA       9        0.0%
DATA                 0      0     1DA      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Sat Aug 12 13:01:15 2017

                __end_of_GetDataDict 0A20               i2_UART_buff_modulo_inc 0ECE  
           cobs_encode@dst_write_ptr 0068                                   l36 0E52  
                                 l85 0B46             GetDataDict@ReturnCounter 0022  
                       __CFG_CP0$OFF 000000                         __CFG_CP1$OFF 000000  
                       __CFG_CP2$OFF 000000                         __CFG_CP3$OFF 000000  
                                l334 0A0C                                  l348 0AA4  
                                l269 0DD6                                  l384 0D64  
                       __CFG_CPB$OFF 000000                         __CFG_CPD$OFF 000000  
                                prod 000FF3                                  wreg 000FE8  
      i2UART_buff_modulo_inc@modulus 0003          _COBS_DECODE_DST_BUF_LEN_MAX 0040  
                       __CFG_LVP$OFF 000000            SetDataDict@DataTableIndex 001B  
                               l2033 0A60                                 l2025 0A30  
                               l2043 0A9A                                 l2035 0A6A  
                               l2027 0A38                                 l2037 0A72  
                               l2045 0AA8                                 l2301 0D6A  
                               l2221 0464                                 l2303 0D70  
                               l2321 0998                                 l2233 049A  
                               l2315 0DC2                                 l2331 09D2  
                               l2323 09A0                                 l2171 0EC4  
                               l2251 04E8                                 l2227 0478  
                               l2411 00FC                                 l2333 09DA  
                               l2341 0A10                                 l2229 0480  
                               l2421 0126                                 l2413 0104  
                               l2405 00E8                                 l2183 0624  
                               l2271 0538                                 l2431 0166  
                               l2329 09C8                                 l2177 05B8  
                               l2441 01A6                                 l2521 08D0  
                               l2339 0A02                                 l2363 02D2  
                               l1661 0E82                                 l2293 0D4E  
                               l2197 0B42                                 l2277 055A  
                               l2381 0392                                 l2357 0292  
                               l2453 01D0                                 l2461 01E8  
                               l2287 0D38                                 l2279 0566  
                               l2471 021C                                 l2439 01A2  
                               l1665 0E92                                 l2385 03BE  
                               l2377 0354                                 l2475 0230  
                               l2389 03DA                                 l2499 07FA  
              __end_of_ComController 0988                                 _CRC8 0D32  
                               u1210 0AD6                                 u1051 0C3E  
                               u1060 0CE0                                 u1070 0CF0  
                               u1080 0D04                                 u1066 0CE2  
                               u1078 0CF2                                 u1088 0D06  
                               u1540 07E0                                 u1607 0DC8  
                               u1580 0E6E                                 u1597 0818  
                               i2l85 0BD8                                 _main 0E4C  
                    _TMR0_StartTimer 100C                                 _time 002F  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                               fsr2h 000FDA                                 fsr0l 000FE9  
                               indf1 000FE7                                 indf2 000FDF  
                               fsr1l 000FE1                                 fsr2l 000FD9  
                               btemp 0045                        __CFG_BORV$190 000000  
                               prodh 000FF4                                 prodl 000FF3  
                               start 00A0                        __CFG_IESO$OFF 000000  
                    __end_of_GetTime 0FE8                         ___param_bank 000000  
     i2UART_buff_modulo_inc@my_value 0005                                ?_CRC8 001B  
                    __end_of_SetTime 0FD6              ComController@DataToSend 00BD  
            __end_of_TMR0_Initialize 0F16                                ?_main 0001  
                              _T0CON 000FD5                       __CFG_DEBUG$OFF 000000  
                              i2l116 0F3C                                i2l260 004E  
                              i2l262 005A                                i2l266 0064  
                              _TMR0H 000FD7                                _TMR0L 000FD6  
                              _Delay 0DB8                        __CFG_WRT0$OFF 000000  
                      __CFG_WRT1$OFF 000000                        __CFG_WRT2$OFF 000000  
                      __CFG_WRT3$OFF 000000                                _Count 002B  
               _EUSART1_Transmit_ISR 0DEC                       __CFG_EBTR0$OFF 000000  
                     __CFG_FCMEN$OFF 000000                       __CFG_EBTR1$OFF 000000  
                     __CFG_EBTR2$OFF 000000                       __CFG_EBTR3$OFF 000000  
                   __end_of_TMR0_ISR 0F82                                _Start 0BDC  
                      __CFG_WRTB$OFF 000000                        __CFG_WRTC$OFF 000000  
                      __CFG_WRTD$OFF 000000                       __CFG_EBTRB$OFF 000000  
                 __CFG_MCLRE$EXTMCLR 000000             SetDataDict@ReturnCounter 0022  
                              pclath 000FFA                                tablat 000FF5  
                      ??_Receive_get 0026                        receiveData@CS 01F2  
                              plusw1 000FE3                                plusw2 000FDB  
                              status 000FD8                          _GetDataDict 0988  
                      ??_SetDataDict 001F                       __CFG_HFOFST$ON 000000  
                       ?_receiveData 0001                       __CFG_PBADEN$ON 000000  
                       __end_of_CRC8 0D7C                     __end_of_ComStart 1002  
                         _ReadFaults 0CD0                      __initialization 0C5E  
         __end_of_EUSART1_Initialize 0DB8                         __end_of_main 0E78  
                             ??_CRC8 001E          ?_INTERRUPT_InterruptManager 0001  
                             ??_main 002B                        __activetblptr 000002  
                   __end_of_Send_put 0E4C            __size_ofi2_UART_buff_size 0016  
                             ?_Delay 001B                ?_EUSART1_Transmit_ISR 0001  
               GetDataDict@DataArray 001C                 GetDataDict@DataCount 0021  
               GetDataDict@DataTable 0020                               ?_Start 0001  
               SetDataDict@DataArray 001C                 SetDataDict@DataCount 0021  
               SetDataDict@DataTable 0020              __end_of_TMR0_StartTimer 1010  
               __size_of_cobs_decode 01BE                 __size_of_cobs_encode 0198  
                             _ANSELA 000F38                               _ANSELB 000F39  
                             _ANSELC 000F3A                               _ANSELD 000F3B  
                             _ANSELE 000F3C                      i2_UART_buff_get 0B4A  
                             _RC1STA 000FAB                               i2l2051 06D2  
                             i2l2125 0E16                               i2l2071 0BD4  
                    i2_UART_buff_put 06B2                               i2l2057 073E  
                     __CFG_WDTEN$OFF 000000                               Delay@x 001E  
        UART_buff_modulo_inc@modulus 001D                               i2l1977 0EEE  
                             _RCREG1 000FAE                               _OSCCON 000FD3  
                             _SPBRG1 000FAF                            ??_GetTime 001F  
                             _TX1STA 000FAC                               _TXREG1 000FAD  
                          ??_SetTime 001B                       __CFG_XINST$OFF 000000  
                __end_of_Receive_get 0FF6                        _output_buffer 0100  
                __end_of_SetDataDict 0AB8                            CRC8@tempI 0020  
                     __CFG_STVREN$ON 000000                     ?_TMR0_Initialize 0001  
                             _memset 0E78                               clear_0 0CA4  
                             clear_1 0CB0                               clear_2 0CBC  
                   __end_of_sendData 0400                         __pdataCOMRAM 0040  
                         Start@F7240 00F8               cobs_encode@dst_buf_len 001D  
             cobs_encode@dst_buf_ptr 001B                        Send_put@_data 0026  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8         __end_of_UART_buff_modulo_inc 0ECE  
      __size_of_INTERRUPT_Initialize 0018                           __accesstop 0060  
            __end_of__initialization 0CC2                        sendData@count 00B5  
                      sendData@lenth 0072                        ___rparam_used 000001  
            ?i2_UART_buff_modulo_inc 0001                         ?_updateComms 0001  
                      __end_of_Delay 0DEC                          ?_ReadFaults 0001  
                     __pcstackCOMRAM 0001                        __end_of_Start 0C5E  
                       __pidataBANK0 1007                            ?_TMR0_ISR 0001  
                 UART_buff_get@_this 0021                __end_of_UART_buff_get 0B4A  
             ??_EUSART1_Transmit_ISR 000C                __end_of_UART_buff_put 06B2  
                            ??_Delay 001D              __end_ofi2_UART_buff_get 0BDC  
            __end_ofi2_UART_buff_put 07CC          __end_of_EUSART1_Receive_ISR 0F52  
                            CRC8@crc 0021                              CRC8@len 001D  
                            ??_Start 0025                              CRC8@sum 001E  
                          ?_ComStart 0001                     ?_TMR0_StartTimer 0001  
                        sendData@DTS 0070               cobs_decode@dst_buf_len 001D  
                         __pbssBANK0 00C6                           __pbssBANK1 0100  
             cobs_decode@dst_buf_ptr 001B                      __CFG_PLLCFG$OFF 000000  
                        _Receive_get 0FE8       __end_ofi2_UART_buff_modulo_inc 0EF8  
                        _SetDataDict 0A20              __size_of_UART_buff_init 001E  
                        _ReciveArray 01D4              __size_of_UART_buff_size 0016  
                          ?_Send_put 0001                 __size_of_receiveData 0108  
                 __CFG_CCP2MX$PORTC1 000000                           ??_TMR0_ISR 0001  
                 __CFG_CCP3MX$PORTB5 000000             cobs_decode@dst_write_ptr 0068  
         cobs_decode@remaining_bytes 0066                              ?_memset 001B  
                 UART_buff_put@_this 0021                      cobs_decode@F192 0036  
                   i2_UART_buff_size 0FAE          i2UART_buff_modulo_inc@value 0001  
                            _OSCCON2 000FD2                    _Receive_available 0F82  
       UART_buff_modulo_inc@my_value 001F                    __CFG_PRICLKEN$OFF 000000  
                            _OSCTUNE 000F9B                              _SPBRGH1 000FB0  
                         ??_ComStart 0025                  sendData@whereToSend 00B0  
                __size_of_ReadFaults 0062                   ?_Receive_available 001D  
                            _GetTime 0FD6                         ?_GetDataDict 001B  
                   ComController@DTI 00B8                              _ByteLow 003E  
                ??_Receive_available 001F                            ?_sendData 006D  
                    __CFG_PWRTEN$OFF 000000                           ??_Send_put 0026  
                            __Hparam 0000                              _SetTime 0FC4  
                            __Lparam 0000               cobs_encode@src_end_ptr 0060  
               _UART_buff_modulo_inc 0EA4                              __pcinit 0C5E  
             __size_of_ComController 00B4                      __size_of_memset 002C  
                            __ramtop 0600                     i2UART_buff_get@c 000B  
                            __ptext0 0E4C                              __ptext1 0FF6  
                            __ptext2 07CC                              __ptext3 00A4  
                            __ptext4 0FE8                              __ptext5 0F82  
                            __ptext6 0F98                              __ptext7 08D4  
                            __ptext8 0262                              __ptext9 0400  
                          _T0CONbits 000FD5                     i2UART_buff_put@c 0009  
         cobs_encode@dst_buf_end_ptr 0063            __end_of_Receive_available 0F98  
                cobs_encode@src_byte 0062                   _EUSART1_Initialize 0D7C  
                   ?i2_UART_buff_get 0007                     ?i2_UART_buff_put 0007  
               end_of_initialization 0CC2                            Delay@wait 001B  
                ?_EUSART1_Initialize 0001                      cobs_encode@F180 0039  
                            memset@c 001D                              memset@n 001F  
                            memset@p 0021                        __Lmediumconst 0000  
                         ??_sendData 0027                      receiveData@Data 01F5  
              ?_UART_buff_modulo_inc 001B                 __size_of_updateComms 0006  
                            postdec1 000FE5                              postdec2 000FDD  
                            postinc0 000FEE                              postinc2 000FDE  
               ??_EUSART1_Initialize 0025                    cobs_decode@result 006B  
             cobs_decode@src_end_ptr 0060                            _PORTAbits 000F80  
                          _PORTCbits 000F82                        ??_cobs_decode 0023  
                      ??_cobs_encode 0023                            _TRISAbits 000F92  
                          _TRISCbits 000F94                            _TRISDbits 000F95  
                     sendData@result 00B2                        _ComController 08D4  
              i2UART_buff_size@_this 0001                       _UART_buff_init 0F16  
                     _UART_buff_size 0F98                         ??_ReadFaults 0023  
               _timer0ReloadVal16bit 003C         __end_of_INTERRUPT_Initialize 0F6A  
             GetDataDict@numbofbytes 001E                        __pidataCOMRAM 1002  
                  __size_of_TMR0_ISR 0018                       __end_of_memset 0EA4  
                       receiveData@i 01F3           __size_of_Receive_available 0016  
                start_initialization 0C5E             __size_of_TMR0_Initialize 001E  
             SetDataDict@numbofbytes 001E                   __end_of_ReadFaults 0D32  
                 ComController@lenth 00BA                       ?_ComController 00B8  
                __end_of_cobs_decode 0262                    __size_of_ComStart 0006  
             __end_of_UART_buff_init 0F34                       UART_buff_get@c 0025  
             __end_of_UART_buff_size 0FAE                  __end_of_cobs_encode 0598  
                       ?_Receive_get 0001                       UART_buff_put@c 0023  
                       ?_SetDataDict 001B             __end_ofi2_UART_buff_size 0FC4  
               __size_of_GetDataDict 0098               ??_UART_buff_modulo_inc 001F  
                           CRC8@data 001B                    __size_of_Send_put 002E  
                        __pdataBANK0 00F8                             ??_memset 0021  
                          Start@Data 0025                          __pbssCOMRAM 002B  
      __size_of_EUSART1_Transmit_ISR 0032                        __pcstackBANK0 0060  
                      __pcstackBANK1 01F2                  UART_buff_init@_this 0023  
                    ?_UART_buff_init 0023                      ?_UART_buff_size 001B  
       __size_of_EUSART1_Receive_ISR 001E                             ?_GetTime 001B  
                      ??_receiveData 00C1                           sendData@CS 00B1  
              cobs_encode@search_len 0065             __size_of_TMR0_StartTimer 0004  
             __size_of_UART_buff_get 0092               __size_of_UART_buff_put 011A  
                           ?_SetTime 0001                    __size_of_sendData 019E  
                          __pintcode 0008         ??_INTERRUPT_InterruptManager 000D  
               i2UART_buff_get@_this 0007                             _BAUD1CON 000FB8  
                     __size_of_Delay 0034                          _cobs_decode 00A4  
                        _cobs_encode 0400               sendData@DataTableIndex 006F  
                     __size_of_Start 0082                      ??_ComController 00BC  
        _COBS_ENCODE_DST_BUF_LEN_MAX 0042                 _INTERRUPT_Initialize 0F52  
                 cobs_encode@src_len 0021                   cobs_encode@src_ptr 001F  
                       _receiveArray 00D0                    ??_TMR0_Initialize 001B  
                           _LATAbits 000F89                             _LATDbits 000F8C  
                UART_buff_size@_this 001B                             _IPR1bits 000F9F  
                           _IPR2bits 000FA2                             _PIE1bits 000F9D  
                           i2u110_40 0E06                             i2u104_40 0B68  
__size_of_INTERRUPT_InterruptManager 0098                             _PIR1bits 000F9E  
                           _RCONbits 000FD0                     __CFG_WDTPS$32768 000000  
                __end_of_receiveData 08D4                             _TMR0_ISR 0F6A  
                       _input_buffer 016A           cobs_decode@dst_buf_end_ptr 0062  
               i2UART_buff_put@_this 0007                        _UART_buff_get 0AB8  
                      _UART_buff_put 0598                    sendData@COBSArray 0074  
      cobs_encode@dst_code_write_ptr 0066                             _ComStart 0FFC  
           ??i2_UART_buff_modulo_inc 0005                            copy_data0 0C72  
                          copy_data1 0C92                ?_INTERRUPT_Initialize 0001  
                 sendData@ComandByte 006D                             _ByteHigh 003F  
           __size_ofi2_UART_buff_get 0092             __size_ofi2_UART_buff_put 011A  
                   __size_of_GetTime 0012                       ReadFaults@Data 0024  
                      ??_updateComms 002B                 __size_of_Receive_get 000E  
                           __Hrparam 0000                             _Send_put 0E1E  
               __size_of_SetDataDict 0098                             __Lrparam 0000  
                 __CFG_BOREN$SBORDIS 000000                     __size_of_SetTime 0012  
                  __CFG_P2BMX$PORTD2 000000                    ??_TMR0_StartTimer 001B  
        __size_of_EUSART1_Initialize 003C                           _ANSELCbits 000F3A  
                     ?_UART_buff_get 0021                       ?_UART_buff_put 0021  
                        CRC8@extract 001F                     GetDataDict@Error 001F  
                   SetDataDict@Error 001F                            sendData@i 00B7  
                           __ptext10 0E1E                             __ptext11 0598  
                           __ptext20 0F52                             __ptext12 0AB8  
                           __ptext21 0FFC                             __ptext13 0EA4  
                           __ptext30 0F6A                             __ptext22 0D7C  
                           __ptext14 0D32                             __ptext31 0DEC  
                           __ptext23 0F16                             __ptext15 0988  
                           __ptext32 0FAE                             __ptext24 0E78  
                           __ptext16 0DB8                             __ptext33 0B4A  
                           __ptext25 0FC4                             __ptext17 0BDC  
                           __ptext34 0F34                             __ptext26 0CD0  
                           __ptext18 0EF8                             __ptext35 06B2  
                           __ptext27 0A20                             __ptext19 100C  
                           __ptext36 0ECE                             __ptext28 0FD6  
                      __size_of_CRC8 004A            GetDataDict@DataTableIndex 001B  
            EUSART1_Receive_ISR@data 000C                        __size_of_main 002C  
                  cobs_encode@result 006A                          _receiveData 07CC  
                     _Transmit_stall 0044                             _sendData 0262  
                  ?i2_UART_buff_size 0001                    sendData@DataTable 006E  
                         _RC1STAbits 000FAB                         _ProcessArray 00DA  
                 ??i2_UART_buff_size 0003                             int$flags 0045  
                __end_of_updateComms 0FFC   __end_of_INTERRUPT_InterruptManager 00A0  
         _INTERRUPT_InterruptManager 0008                  _EUSART1_Receive_ISR 0F34  
                  receiveData@result 01F6                           _INTCONbits 000FF2  
          UART_buff_modulo_inc@value 001B                     ??_UART_buff_init 0025  
                   ??_UART_buff_size 001D               ??_INTERRUPT_Initialize 001B  
                           memset@p1 001B      __size_ofi2_UART_buff_modulo_inc 002A  
                           intlevel2 0000                  cobs_decode@len_code 006A  
               ?_EUSART1_Receive_ISR 0001                        ??_GetDataDict 001F  
                       cobs_decode@i 0065         __end_of_EUSART1_Transmit_ISR 0E1E  
                  sendData@SendArray 0092                    ??i2_UART_buff_get 0009  
                  ??i2_UART_buff_put 000A                  cobs_decode@src_byte 0064  
      __size_of_UART_buff_modulo_inc 002A                    _DataTableArrayOne 00C6  
                    ??_UART_buff_get 0023                    _DataTableArrayTwo 0033  
                    ??_UART_buff_put 0024                      _TMR0_Initialize 0EF8  
                       ?_cobs_decode 001B                         ?_cobs_encode 001B  
                  __CFG_T3CMX$PORTC0 000000                   cobs_decode@src_len 0021  
                 cobs_decode@src_ptr 001F                ??_EUSART1_Receive_ISR 000C  
                  __CFG_FOSC$INTIO67 000000                          _updateComms 0FF6  
