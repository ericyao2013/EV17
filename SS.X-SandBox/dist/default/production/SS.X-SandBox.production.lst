

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Wed Apr 12 22:58:18 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK5,global,class=BANK5,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    58                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    59  0000                     
    60                           ; Version 1.40
    61                           ; Generated 01/12/2016 GMT
    62                           ; 
    63                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    64                           ; All rights reserved.
    65                           ; 
    66                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    67                           ; 
    68                           ; Redistribution and use in source and binary forms, with or without modification, are
    69                           ; permitted provided that the following conditions are met:
    70                           ; 
    71                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    72                           ;        conditions and the following disclaimer.
    73                           ; 
    74                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    75                           ;        of conditions and the following disclaimer in the documentation and/or other
    76                           ;        materials provided with the distribution.
    77                           ; 
    78                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    79                           ;        software without specific prior written permission.
    80                           ; 
    81                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    82                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    83                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    84                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    85                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    86                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    87                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    88                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    89                           ; 
    90                           ; 
    91                           ; Code-generator required, PIC18F45K22 Definitions
    92                           ; 
    93                           ; SFR Addresses
    94  0000                     
    95 ;; Function _Receive_peek is unused but had its address taken
    96  0000                     
    97                           	psect	idataCOMRAM
    98  000E28                     __pidataCOMRAM:
    99                           	opt stack 0
   100                           
   101                           ;initializer for _Transmit_stall
   102  000E28  01                 	db	1
   103                           
   104                           	psect	idataBANK0
   105  000E1E                     __pidataBANK0:
   106                           	opt stack 0
   107                           
   108                           ;initializer for _COBS_DECODE_DST_BUF_LEN_MAX
   109  000E1E  001E               	dw	30
   110                           
   111                           ;initializer for _COBS_ENCODE_DST_BUF_LEN_MAX
   112  000E20  001E               	dw	30
   113  0000                     _ANSELA	set	3896
   114  0000                     _ANSELB	set	3897
   115  0000                     _ANSELC	set	3898
   116  0000                     _ANSELD	set	3899
   117  0000                     _ANSELE	set	3900
   118  0000                     _BAUD1CON	set	4024
   119  0000                     _INTCONbits	set	4082
   120  0000                     _IPR1bits	set	3999
   121  0000                     _IPR2bits	set	4002
   122  0000                     _LATAbits	set	3977
   123  0000                     _LATDbits	set	3980
   124  0000                     _OSCCON	set	4051
   125  0000                     _OSCCON2	set	4050
   126  0000                     _OSCTUNE	set	3995
   127  0000                     _PIE1bits	set	3997
   128  0000                     _PIR1bits	set	3998
   129  0000                     _RC1STA	set	4011
   130  0000                     _RC1STAbits	set	4011
   131  0000                     _RCONbits	set	4048
   132  0000                     _RCREG1	set	4014
   133  0000                     _SPBRG1	set	4015
   134  0000                     _SPBRGH1	set	4016
   135  0000                     _T0CON	set	4053
   136  0000                     _T0CONbits	set	4053
   137  0000                     _TMR0H	set	4055
   138  0000                     _TMR0L	set	4054
   139  0000                     _TRISAbits	set	3986
   140  0000                     _TRISCbits	set	3988
   141  0000                     _TRISDbits	set	3989
   142  0000                     _TX1STA	set	4012
   143  0000                     _TXREG1	set	4013
   144                           
   145                           ; #config settings
   146  0000                     
   147                           	psect	cinit
   148  0009E2                     __pcinit:
   149                           	opt stack 0
   150  0009E2                     start_initialization:
   151                           	opt stack 0
   152  0009E2                     __initialization:
   153                           	opt stack 0
   154                           
   155                           ; Initialize objects allocated to BANK0 (4 bytes)
   156                           ; load TBLPTR registers with __pidataBANK0
   157  0009E2  0E1E               	movlw	low __pidataBANK0
   158  0009E4  6EF6               	movwf	tblptrl,c
   159  0009E6  0E0E               	movlw	high __pidataBANK0
   160  0009E8  6EF7               	movwf	tblptrh,c
   161  0009EA  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   162  0009EC  6EF8               	movwf	tblptru,c
   163  0009EE  EE00  F0C1         	lfsr	0,__pdataBANK0
   164  0009F2  EE10 F004          	lfsr	1,4
   165  0009F6                     copy_data0:
   166  0009F6  0009               	tblrd		*+
   167  0009F8  CFF5 FFEE          	movff	tablat,postinc0
   168  0009FC  50E5               	movf	postdec1,w,c
   169  0009FE  50E1               	movf	fsr1l,w,c
   170  000A00  E1FA               	bnz	copy_data0
   171                           
   172                           ; Initialize objects allocated to COMRAM (1 bytes)
   173                           ; load TBLPTR registers with __pidataCOMRAM
   174  000A02  0E28               	movlw	low __pidataCOMRAM
   175  000A04  6EF6               	movwf	tblptrl,c
   176  000A06  0E0E               	movlw	high __pidataCOMRAM
   177  000A08  6EF7               	movwf	tblptrh,c
   178  000A0A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   179  000A0C  6EF8               	movwf	tblptru,c
   180  000A0E  0009               	tblrd		*+	;fetch initializer
   181  000A10  CFF5 F044          	movff	tablat,__pdataCOMRAM
   182                           
   183                           ; Clear objects allocated to BANK4 (206 bytes)
   184  000A14  EE04  F000         	lfsr	0,__pbssBANK4
   185  000A18  0ECE               	movlw	206
   186  000A1A                     clear_0:
   187  000A1A  6AEE               	clrf	postinc0,c
   188  000A1C  06E8               	decf	wreg,f,c
   189  000A1E  E1FD               	bnz	clear_0
   190                           
   191                           ; Clear objects allocated to BANK3 (200 bytes)
   192  000A20  EE03  F000         	lfsr	0,__pbssBANK3
   193  000A24  0EC8               	movlw	200
   194  000A26                     clear_1:
   195  000A26  6AEE               	clrf	postinc0,c
   196  000A28  06E8               	decf	wreg,f,c
   197  000A2A  E1FD               	bnz	clear_1
   198                           
   199                           ; Clear objects allocated to BANK2 (206 bytes)
   200  000A2C  EE02  F000         	lfsr	0,__pbssBANK2
   201  000A30  0ECE               	movlw	206
   202  000A32                     clear_2:
   203  000A32  6AEE               	clrf	postinc0,c
   204  000A34  06E8               	decf	wreg,f,c
   205  000A36  E1FD               	bnz	clear_2
   206                           
   207                           ; Clear objects allocated to BANK1 (236 bytes)
   208  000A38  EE01  F000         	lfsr	0,__pbssBANK1
   209  000A3C  0EEC               	movlw	236
   210  000A3E                     clear_3:
   211  000A3E  6AEE               	clrf	postinc0,c
   212  000A40  06E8               	decf	wreg,f,c
   213  000A42  E1FD               	bnz	clear_3
   214                           
   215                           ; Clear objects allocated to BANK0 (71 bytes)
   216  000A44  EE00  F060         	lfsr	0,__pbssBANK0
   217  000A48  0E47               	movlw	71
   218  000A4A                     clear_4:
   219  000A4A  6AEE               	clrf	postinc0,c
   220  000A4C  06E8               	decf	wreg,f,c
   221  000A4E  E1FD               	bnz	clear_4
   222                           
   223                           ; Clear objects allocated to COMRAM (30 bytes)
   224  000A50  EE00  F026         	lfsr	0,__pbssCOMRAM
   225  000A54  0E1E               	movlw	30
   226  000A56                     clear_5:
   227  000A56  6AEE               	clrf	postinc0,c
   228  000A58  06E8               	decf	wreg,f,c
   229  000A5A  E1FD               	bnz	clear_5
   230  000A5C                     end_of_initialization:
   231                           	opt stack 0
   232  000A5C                     __end_of__initialization:
   233                           	opt stack 0
   234  000A5C  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   235  000A5E  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   236  000A60  0E00               	movlw	low (__Lmediumconst shr (0+16))
   237  000A62  6EF8               	movwf	tblptru,c
   238  000A64  0100               	movlb	0
   239  000A66  EFE7  F006         	goto	_main	;jump to C main() function
   240                           tblptru	equ	0xFF8
   241                           tblptrh	equ	0xFF7
   242                           tblptrl	equ	0xFF6
   243                           tablat	equ	0xFF5
   244                           postinc0	equ	0xFEE
   245                           wreg	equ	0xFE8
   246                           postdec1	equ	0xFE5
   247                           fsr1l	equ	0xFE1
   248                           
   249                           	psect	bssCOMRAM
   250  000026                     __pbssCOMRAM:
   251                           	opt stack 0
   252  000026                     _addressErrorCounter:
   253                           	opt stack 0
   254  000026                     	ds	2
   255  000028                     _alignErrorCounter:
   256                           	opt stack 0
   257  000028                     	ds	2
   258  00002A                     _crcErrorCounter:
   259                           	opt stack 0
   260  00002A                     	ds	2
   261  00002C                     _receiveArrayAddress:
   262                           	opt stack 0
   263  00002C                     	ds	2
   264  00002E                     _sendStructAddress:
   265                           	opt stack 0
   266  00002E                     	ds	2
   267  000030                     _serial_available:
   268                           	opt stack 0
   269  000030                     	ds	2
   270  000032                     _serial_peek:
   271                           	opt stack 0
   272  000032                     	ds	2
   273  000034                     _serial_read:
   274                           	opt stack 0
   275  000034                     	ds	2
   276  000036                     _serial_write:
   277                           	opt stack 0
   278  000036                     	ds	2
   279  000038                     _timer0ReloadVal16bit:
   280                           	opt stack 0
   281  000038                     	ds	2
   282  00003A                     _AKNAKsend:
   283                           	opt stack 0
   284  00003A                     	ds	1
   285  00003B                     _ByteHigh:
   286                           	opt stack 0
   287  00003B                     	ds	1
   288  00003C                     _ByteLow:
   289                           	opt stack 0
   290  00003C                     	ds	1
   291  00003D                     _calc_CS:
   292                           	opt stack 0
   293  00003D                     	ds	1
   294  00003E                     _maxDataAddress:
   295                           	opt stack 0
   296  00003E                     	ds	1
   297  00003F                     _moduleAddress:
   298                           	opt stack 0
   299  00003F                     	ds	1
   300  000040                     _returnAddress:
   301                           	opt stack 0
   302  000040                     	ds	1
   303  000041                     _rx_address:
   304                           	opt stack 0
   305  000041                     	ds	1
   306  000042                     _rx_array_inx:
   307                           	opt stack 0
   308  000042                     	ds	1
   309  000043                     _rx_len:
   310                           	opt stack 0
   311  000043                     	ds	1
   312                           tblptru	equ	0xFF8
   313                           tblptrh	equ	0xFF7
   314                           tblptrl	equ	0xFF6
   315                           tablat	equ	0xFF5
   316                           postinc0	equ	0xFEE
   317                           wreg	equ	0xFE8
   318                           postdec1	equ	0xFE5
   319                           fsr1l	equ	0xFE1
   320                           
   321                           	psect	dataCOMRAM
   322  000044                     __pdataCOMRAM:
   323                           	opt stack 0
   324  000044                     _Transmit_stall:
   325                           	opt stack 0
   326  000044                     	ds	1
   327                           tblptru	equ	0xFF8
   328                           tblptrh	equ	0xFF7
   329                           tblptrl	equ	0xFF6
   330                           tablat	equ	0xFF5
   331                           postinc0	equ	0xFEE
   332                           wreg	equ	0xFE8
   333                           postdec1	equ	0xFE5
   334                           fsr1l	equ	0xFE1
   335                           
   336                           	psect	bssBANK0
   337  000060                     __pbssBANK0:
   338                           	opt stack 0
   339  000060                     _time:
   340                           	opt stack 0
   341  000060                     	ds	4
   342  000064                     cobs_decode@F198:
   343                           	opt stack 0
   344  000064                     	ds	3
   345  000067                     cobs_encode@F186:
   346                           	opt stack 0
   347  000067                     	ds	3
   348  00006A                     _dataAdressErrorCounter:
   349                           	opt stack 0
   350  00006A                     	ds	2
   351  00006C                     _group:
   352                           	opt stack 0
   353  00006C                     	ds	2
   354  00006E                     _ProcessArray:
   355                           	opt stack 0
   356  00006E                     	ds	30
   357  00008C                     _crc_buffer:
   358                           	opt stack 0
   359  00008C                     	ds	17
   360  00009D                     _receiveArray:
   361                           	opt stack 0
   362  00009D                     	ds	10
   363                           tblptru	equ	0xFF8
   364                           tblptrh	equ	0xFF7
   365                           tblptrl	equ	0xFF6
   366                           tablat	equ	0xFF5
   367                           postinc0	equ	0xFEE
   368                           wreg	equ	0xFE8
   369                           postdec1	equ	0xFE5
   370                           fsr1l	equ	0xFE1
   371                           
   372                           	psect	dataBANK0
   373  0000C1                     __pdataBANK0:
   374                           	opt stack 0
   375  0000C1                     _COBS_DECODE_DST_BUF_LEN_MAX:
   376                           	opt stack 0
   377  0000C1                     	ds	2
   378  0000C3                     _COBS_ENCODE_DST_BUF_LEN_MAX:
   379                           	opt stack 0
   380  0000C3                     	ds	2
   381                           tblptru	equ	0xFF8
   382                           tblptrh	equ	0xFF7
   383                           tblptrl	equ	0xFF6
   384                           tablat	equ	0xFF5
   385                           postinc0	equ	0xFEE
   386                           wreg	equ	0xFE8
   387                           postdec1	equ	0xFE5
   388                           fsr1l	equ	0xFE1
   389                           
   390                           	psect	bssBANK1
   391  000100                     __pbssBANK1:
   392                           	opt stack 0
   393  000100                     _input_buffer:
   394                           	opt stack 0
   395  000100                     	ds	206
   396  0001CE                     _ReciveArray:
   397                           	opt stack 0
   398  0001CE                     	ds	30
   399                           tblptru	equ	0xFF8
   400                           tblptrh	equ	0xFF7
   401                           tblptrl	equ	0xFF6
   402                           tablat	equ	0xFF5
   403                           postinc0	equ	0xFEE
   404                           wreg	equ	0xFE8
   405                           postdec1	equ	0xFE5
   406                           fsr1l	equ	0xFE1
   407                           
   408                           	psect	bssBANK2
   409  000200                     __pbssBANK2:
   410                           	opt stack 0
   411  000200                     _output_buffer:
   412                           	opt stack 0
   413  000200                     	ds	206
   414                           tblptru	equ	0xFF8
   415                           tblptrh	equ	0xFF7
   416                           tblptrl	equ	0xFF6
   417                           tablat	equ	0xFF5
   418                           postinc0	equ	0xFEE
   419                           wreg	equ	0xFE8
   420                           postdec1	equ	0xFE5
   421                           fsr1l	equ	0xFE1
   422                           
   423                           	psect	bssBANK3
   424  000300                     __pbssBANK3:
   425                           	opt stack 0
   426  000300                     _rx_buffer:
   427                           	opt stack 0
   428  000300                     	ds	200
   429                           tblptru	equ	0xFF8
   430                           tblptrh	equ	0xFF7
   431                           tblptrl	equ	0xFF6
   432                           tablat	equ	0xFF5
   433                           postinc0	equ	0xFEE
   434                           wreg	equ	0xFE8
   435                           postdec1	equ	0xFE5
   436                           fsr1l	equ	0xFE1
   437                           
   438                           	psect	bssBANK4
   439  000400                     __pbssBANK4:
   440                           	opt stack 0
   441  000400                     _ring_buffer:
   442                           	opt stack 0
   443  000400                     	ds	206
   444                           tblptru	equ	0xFF8
   445                           tblptrh	equ	0xFF7
   446                           tblptrl	equ	0xFF6
   447                           tablat	equ	0xFF5
   448                           postinc0	equ	0xFEE
   449                           wreg	equ	0xFE8
   450                           postdec1	equ	0xFE5
   451                           fsr1l	equ	0xFE1
   452                           
   453                           	psect	cstackBANK5
   454  000500                     __pcstackBANK5:
   455                           	opt stack 0
   456  000500                     sendData@COBSArray:
   457                           	opt stack 0
   458                           
   459                           ; 30 bytes @ 0x0
   460  000500                     	ds	30
   461  00051E                     sendData@SendArray:
   462                           	opt stack 0
   463                           
   464                           ; 30 bytes @ 0x1E
   465  00051E                     	ds	30
   466  00053C                     sendData@whereToSend:
   467                           	opt stack 0
   468                           
   469                           ; 1 bytes @ 0x3C
   470  00053C                     	ds	1
   471  00053D                     sendData@DataLenth:
   472                           	opt stack 0
   473                           
   474                           ; 1 bytes @ 0x3D
   475  00053D                     	ds	1
   476  00053E                     sendData@CS:
   477                           	opt stack 0
   478                           
   479                           ; 1 bytes @ 0x3E
   480  00053E                     	ds	1
   481  00053F                     sendData@result:
   482                           	opt stack 0
   483                           
   484                           ; 3 bytes @ 0x3F
   485  00053F                     	ds	3
   486  000542                     sendData@i:
   487                           	opt stack 0
   488                           
   489                           ; 2 bytes @ 0x42
   490  000542                     	ds	2
   491  000544                     sendData@count:
   492                           	opt stack 0
   493                           
   494                           ; 2 bytes @ 0x44
   495  000544                     	ds	2
   496                           tblptru	equ	0xFF8
   497                           tblptrh	equ	0xFF7
   498                           tblptrl	equ	0xFF6
   499                           tablat	equ	0xFF5
   500                           postinc0	equ	0xFEE
   501                           wreg	equ	0xFE8
   502                           postdec1	equ	0xFE5
   503                           fsr1l	equ	0xFE1
   504                           
   505                           	psect	cstackBANK0
   506  0000A7                     __pcstackBANK0:
   507                           	opt stack 0
   508  0000A7                     Send_put@_data:
   509                           	opt stack 0
   510  0000A7                     begin@ptr:
   511                           	opt stack 0
   512  0000A7                     cobs_encode@src_end_ptr:
   513                           	opt stack 0
   514  0000A7                     cobs_decode@src_end_ptr:
   515                           	opt stack 0
   516                           
   517                           ; 2 bytes @ 0x0
   518  0000A7                     	ds	2
   519  0000A9                     begin@maxSize:
   520                           	opt stack 0
   521  0000A9                     cobs_encode@src_byte:
   522                           	opt stack 0
   523  0000A9                     cobs_decode@dst_buf_end_ptr:
   524                           	opt stack 0
   525                           
   526                           ; 2 bytes @ 0x2
   527  0000A9                     	ds	1
   528  0000AA                     begin@givenAddress:
   529                           	opt stack 0
   530  0000AA                     cobs_encode@dst_buf_end_ptr:
   531                           	opt stack 0
   532                           
   533                           ; 2 bytes @ 0x3
   534  0000AA                     	ds	1
   535  0000AB                     begin@error:
   536                           	opt stack 0
   537  0000AB                     cobs_decode@src_byte:
   538                           	opt stack 0
   539                           
   540                           ; 1 bytes @ 0x4
   541  0000AB                     	ds	1
   542  0000AC                     cobs_encode@search_len:
   543                           	opt stack 0
   544  0000AC                     cobs_decode@i:
   545                           	opt stack 0
   546  0000AC                     begin@stufftosend:
   547                           	opt stack 0
   548                           
   549                           ; 2 bytes @ 0x5
   550  0000AC                     	ds	1
   551  0000AD                     cobs_encode@dst_code_write_ptr:
   552                           	opt stack 0
   553  0000AD                     cobs_decode@remaining_bytes:
   554                           	opt stack 0
   555                           
   556                           ; 2 bytes @ 0x6
   557  0000AD                     	ds	1
   558  0000AE                     begin@stufftoreceive:
   559                           	opt stack 0
   560                           
   561                           ; 2 bytes @ 0x7
   562  0000AE                     	ds	1
   563  0000AF                     cobs_encode@dst_write_ptr:
   564                           	opt stack 0
   565  0000AF                     cobs_decode@dst_write_ptr:
   566                           	opt stack 0
   567                           
   568                           ; 2 bytes @ 0x8
   569  0000AF                     	ds	1
   570  0000B0                     begin@stuffavailable:
   571                           	opt stack 0
   572                           
   573                           ; 2 bytes @ 0x9
   574  0000B0                     	ds	1
   575  0000B1                     cobs_decode@len_code:
   576                           	opt stack 0
   577  0000B1                     cobs_encode@result:
   578                           	opt stack 0
   579                           
   580                           ; 3 bytes @ 0xA
   581  0000B1                     	ds	1
   582  0000B2                     begin@stuffpeek:
   583                           	opt stack 0
   584  0000B2                     cobs_decode@result:
   585                           	opt stack 0
   586                           
   587                           ; 3 bytes @ 0xB
   588  0000B2                     	ds	2
   589  0000B4                     sendData@ComandByte:
   590                           	opt stack 0
   591                           
   592                           ; 1 bytes @ 0xD
   593  0000B4                     	ds	1
   594  0000B5                     ??_receiveData:
   595  0000B5                     sendData@DataTable:
   596                           	opt stack 0
   597                           
   598                           ; 1 bytes @ 0xE
   599  0000B5                     	ds	1
   600  0000B6                     sendData@DataTableIndex:
   601                           	opt stack 0
   602                           
   603                           ; 1 bytes @ 0xF
   604  0000B6                     	ds	1
   605  0000B7                     ??_sendData:
   606                           
   607                           ; 1 bytes @ 0x10
   608  0000B7                     	ds	3
   609  0000BA                     receiveData@CS:
   610                           	opt stack 0
   611                           
   612                           ; 1 bytes @ 0x13
   613  0000BA                     	ds	1
   614  0000BB                     receiveData@result:
   615                           	opt stack 0
   616                           
   617                           ; 3 bytes @ 0x14
   618  0000BB                     	ds	3
   619  0000BE                     receiveData@i:
   620                           	opt stack 0
   621                           
   622                           ; 2 bytes @ 0x17
   623  0000BE                     	ds	2
   624  0000C0                     receiveData@Data:
   625                           	opt stack 0
   626                           
   627                           ; 1 bytes @ 0x19
   628  0000C0                     	ds	1
   629                           tblptru	equ	0xFF8
   630                           tblptrh	equ	0xFF7
   631                           tblptrl	equ	0xFF6
   632                           tablat	equ	0xFF5
   633                           postinc0	equ	0xFEE
   634                           wreg	equ	0xFE8
   635                           postdec1	equ	0xFE5
   636                           fsr1l	equ	0xFE1
   637                           
   638                           	psect	cstackCOMRAM
   639  000001                     __pcstackCOMRAM:
   640                           	opt stack 0
   641  000001                     ?i2_UART_buff_size:
   642                           	opt stack 0
   643  000001                     ?i2_UART_buff_modulo_inc:
   644                           	opt stack 0
   645  000001                     i2UART_buff_size@_this:
   646                           	opt stack 0
   647  000001                     i2UART_buff_modulo_inc@value:
   648                           	opt stack 0
   649                           
   650                           ; 2 bytes @ 0x0
   651  000001                     	ds	2
   652  000003                     i2UART_buff_modulo_inc@modulus:
   653                           	opt stack 0
   654                           
   655                           ; 2 bytes @ 0x2
   656  000003                     	ds	2
   657  000005                     i2UART_buff_modulo_inc@my_value:
   658                           	opt stack 0
   659                           
   660                           ; 2 bytes @ 0x4
   661  000005                     	ds	2
   662  000007                     i2UART_buff_put@_this:
   663                           	opt stack 0
   664  000007                     i2UART_buff_get@_this:
   665                           	opt stack 0
   666                           
   667                           ; 2 bytes @ 0x6
   668  000007                     	ds	2
   669  000009                     ??i2_UART_buff_get:
   670  000009                     i2UART_buff_put@c:
   671                           	opt stack 0
   672                           
   673                           ; 1 bytes @ 0x8
   674  000009                     	ds	1
   675  00000A                     ??i2_UART_buff_put:
   676                           
   677                           ; 1 bytes @ 0x9
   678  00000A                     	ds	1
   679  00000B                     i2UART_buff_get@c:
   680                           	opt stack 0
   681                           
   682                           ; 1 bytes @ 0xA
   683  00000B                     	ds	1
   684  00000C                     EUSART1_Receive_ISR@data:
   685                           	opt stack 0
   686                           
   687                           ; 1 bytes @ 0xB
   688  00000C                     	ds	1
   689  00000D                     ??_INTERRUPT_InterruptManager:
   690                           
   691                           ; 1 bytes @ 0xC
   692  00000D                     	ds	14
   693  00001B                     ?_UART_buff_modulo_inc:
   694                           	opt stack 0
   695  00001B                     ?_UART_buff_size:
   696                           	opt stack 0
   697  00001B                     ?_cobs_encode:
   698                           	opt stack 0
   699  00001B                     ?_cobs_decode:
   700                           	opt stack 0
   701  00001B                     GetFaults@num:
   702                           	opt stack 0
   703  00001B                     CRC8@data:
   704                           	opt stack 0
   705  00001B                     UART_buff_size@_this:
   706                           	opt stack 0
   707  00001B                     UART_buff_modulo_inc@value:
   708                           	opt stack 0
   709  00001B                     Delay@wait:
   710                           	opt stack 0
   711  00001B                     cobs_encode@dst_buf_ptr:
   712                           	opt stack 0
   713  00001B                     cobs_decode@dst_buf_ptr:
   714                           	opt stack 0
   715  00001B                     memset@p1:
   716                           	opt stack 0
   717                           
   718                           ; 2 bytes @ 0x1A
   719  00001B                     	ds	2
   720  00001D                     ??_Delay:
   721  00001D                     ?_Receive_available:
   722                           	opt stack 0
   723  00001D                     CRC8@len:
   724                           	opt stack 0
   725  00001D                     UART_buff_modulo_inc@modulus:
   726                           	opt stack 0
   727  00001D                     cobs_encode@dst_buf_len:
   728                           	opt stack 0
   729  00001D                     cobs_decode@dst_buf_len:
   730                           	opt stack 0
   731  00001D                     memset@c:
   732                           	opt stack 0
   733                           
   734                           ; 2 bytes @ 0x1C
   735  00001D                     	ds	1
   736  00001E                     CRC8@sum:
   737                           	opt stack 0
   738  00001E                     Delay@x:
   739                           	opt stack 0
   740                           
   741                           ; 2 bytes @ 0x1D
   742  00001E                     	ds	1
   743  00001F                     CRC8@extract:
   744                           	opt stack 0
   745  00001F                     UART_buff_modulo_inc@my_value:
   746                           	opt stack 0
   747  00001F                     cobs_encode@src_ptr:
   748                           	opt stack 0
   749  00001F                     cobs_decode@src_ptr:
   750                           	opt stack 0
   751  00001F                     memset@n:
   752                           	opt stack 0
   753                           
   754                           ; 2 bytes @ 0x1E
   755  00001F                     	ds	1
   756  000020                     CRC8@tempI:
   757                           	opt stack 0
   758                           
   759                           ; 1 bytes @ 0x1F
   760  000020                     	ds	1
   761  000021                     CRC8@crc:
   762                           	opt stack 0
   763  000021                     UART_buff_put@_this:
   764                           	opt stack 0
   765  000021                     UART_buff_get@_this:
   766                           	opt stack 0
   767  000021                     cobs_encode@src_len:
   768                           	opt stack 0
   769  000021                     cobs_decode@src_len:
   770                           	opt stack 0
   771  000021                     memset@p:
   772                           	opt stack 0
   773                           
   774                           ; 2 bytes @ 0x20
   775  000021                     	ds	2
   776  000023                     ??_cobs_encode:
   777  000023                     ??_cobs_decode:
   778  000023                     ??_UART_buff_get:
   779  000023                     UART_buff_put@c:
   780                           	opt stack 0
   781  000023                     UART_buff_init@_this:
   782                           	opt stack 0
   783                           
   784                           ; 2 bytes @ 0x22
   785  000023                     	ds	1
   786  000024                     ??_UART_buff_put:
   787                           
   788                           ; 1 bytes @ 0x23
   789  000024                     	ds	1
   790  000025                     UART_buff_get@c:
   791                           	opt stack 0
   792                           
   793                           ; 1 bytes @ 0x24
   794  000025                     	ds	1
   795  000026                     tblptru	equ	0xFF8
   796                           tblptrh	equ	0xFF7
   797                           tblptrl	equ	0xFF6
   798                           tablat	equ	0xFF5
   799                           postinc0	equ	0xFEE
   800                           wreg	equ	0xFE8
   801                           postdec1	equ	0xFE5
   802                           fsr1l	equ	0xFE1
   803                           
   804                           ; 1 bytes @ 0x25
   805 ;;
   806 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   807 ;;
   808 ;; *************** function _main *****************
   809 ;; Defined at:
   810 ;;		line 23 in file "Main.c"
   811 ;; Parameters:    Size  Location     Type
   812 ;;		None
   813 ;; Auto vars:     Size  Location     Type
   814 ;;		None
   815 ;; Return value:  Size  Location     Type
   816 ;;                  1    wreg      void 
   817 ;; Registers used:
   818 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   819 ;; Tracked objects:
   820 ;;		On entry : 0/0
   821 ;;		On exit  : 0/0
   822 ;;		Unchanged: 0/0
   823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   824 ;;      Params:         0       0       0       0       0       0       0
   825 ;;      Locals:         0       0       0       0       0       0       0
   826 ;;      Temps:          0       0       0       0       0       0       0
   827 ;;      Totals:         0       0       0       0       0       0       0
   828 ;;Total ram usage:        0 bytes
   829 ;; Hardware stack levels required when called:   10
   830 ;; This function calls:
   831 ;;		_ReadFaults
   832 ;;		_SetTime
   833 ;;		_Start
   834 ;;		_updateComms
   835 ;; This function is called by:
   836 ;;		Startup code after reset
   837 ;; This function uses a non-reentrant model
   838 ;;
   839                           
   840                           	psect	text0
   841  000DCE                     __ptext0:
   842                           	opt stack 0
   843  000DCE                     _main:
   844                           	opt stack 21
   845                           
   846                           ;Main.c: 24: Start();
   847                           
   848                           ;incstack = 0
   849  000DCE  EC61  F005         	call	_Start	;wreg free
   850                           
   851                           ;Main.c: 25: LATDbits.LATD4 = 0;
   852  000DD2  988C               	bcf	3980,4,c	;volatile
   853  000DD4                     l2680:
   854                           
   855                           ;Main.c: 27: updateComms();
   856  000DD4  ECFB  F006         	call	_updateComms	;wreg free
   857                           
   858                           ;Main.c: 30: ReadFaults();
   859  000DD8  EC0A  F007         	call	_ReadFaults	;wreg free
   860                           
   861                           ;Main.c: 31: SetTime();
   862  000DDC  ECF1  F006         	call	_SetTime	;wreg free
   863  000DE0  D7F9               	goto	l2680
   864  000DE2                     __end_of_main:
   865                           	opt stack 0
   866                           tblptru	equ	0xFF8
   867                           tblptrh	equ	0xFF7
   868                           tblptrl	equ	0xFF6
   869                           tablat	equ	0xFF5
   870                           postinc0	equ	0xFEE
   871                           wreg	equ	0xFE8
   872                           postdec1	equ	0xFE5
   873                           fsr1l	equ	0xFE1
   874                           
   875 ;; *************** function _updateComms *****************
   876 ;; Defined at:
   877 ;;		line 17 in file "Communications.c"
   878 ;; Parameters:    Size  Location     Type
   879 ;;		None
   880 ;; Auto vars:     Size  Location     Type
   881 ;;		None
   882 ;; Return value:  Size  Location     Type
   883 ;;                  1    wreg      void 
   884 ;; Registers used:
   885 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   886 ;; Tracked objects:
   887 ;;		On entry : 0/0
   888 ;;		On exit  : 0/0
   889 ;;		Unchanged: 0/0
   890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   891 ;;      Params:         0       0       0       0       0       0       0
   892 ;;      Locals:         0       0       0       0       0       0       0
   893 ;;      Temps:          0       0       0       0       0       0       0
   894 ;;      Totals:         0       0       0       0       0       0       0
   895 ;;Total ram usage:        0 bytes
   896 ;; Hardware stack levels used:    1
   897 ;; Hardware stack levels required when called:    9
   898 ;; This function calls:
   899 ;;		_receiveData
   900 ;;		_respondECU
   901 ;; This function is called by:
   902 ;;		_main
   903 ;; This function uses a non-reentrant model
   904 ;;
   905                           
   906                           	psect	text1
   907  000DF6                     __ptext1:
   908                           	opt stack 0
   909  000DF6                     _updateComms:
   910                           	opt stack 21
   911                           
   912                           ;Communications.c: 18: if (receiveData()) {
   913                           
   914                           ;incstack = 0
   915  000DF6  ECE7  F003         	call	_receiveData	;wreg free
   916  000DFA  0900               	iorlw	0
   917  000DFC  B4D8               	btfsc	status,2,c
   918  000DFE  0012               	return	
   919                           
   920                           ;Communications.c: 19: respondECU();
   921  000E00  ECCF  F005         	call	_respondECU	;wreg free
   922  000E04  0012               	return	
   923  000E06                     __end_of_updateComms:
   924                           	opt stack 0
   925                           tblptru	equ	0xFF8
   926                           tblptrh	equ	0xFF7
   927                           tblptrl	equ	0xFF6
   928                           tablat	equ	0xFF5
   929                           postinc0	equ	0xFEE
   930                           wreg	equ	0xFE8
   931                           postdec1	equ	0xFE5
   932                           fsr1l	equ	0xFE1
   933                           status	equ	0xFD8
   934                           
   935 ;; *************** function _respondECU *****************
   936 ;; Defined at:
   937 ;;		line 23 in file "Communications.c"
   938 ;; Parameters:    Size  Location     Type
   939 ;;		None
   940 ;; Auto vars:     Size  Location     Type
   941 ;;		None
   942 ;; Return value:  Size  Location     Type
   943 ;;                  1    wreg      void 
   944 ;; Registers used:
   945 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   946 ;; Tracked objects:
   947 ;;		On entry : 0/0
   948 ;;		On exit  : 0/0
   949 ;;		Unchanged: 0/0
   950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   951 ;;      Params:         0       0       0       0       0       0       0
   952 ;;      Locals:         0       0       0       0       0       0       0
   953 ;;      Temps:          0       0       0       0       0       0       0
   954 ;;      Totals:         0       0       0       0       0       0       0
   955 ;;Total ram usage:        0 bytes
   956 ;; Hardware stack levels used:    1
   957 ;; Hardware stack levels required when called:    8
   958 ;; This function calls:
   959 ;;		_Delay
   960 ;;		_sendData
   961 ;; This function is called by:
   962 ;;		_updateComms
   963 ;; This function uses a non-reentrant model
   964 ;;
   965                           
   966                           	psect	text2
   967  000B9E                     __ptext2:
   968                           	opt stack 0
   969  000B9E                     _respondECU:
   970                           	opt stack 21
   971                           
   972                           ;Communications.c: 24: LATDbits.LATD4 = 1;
   973                           
   974                           ;incstack = 0
   975  000B9E  888C               	bsf	3980,4,c	;volatile
   976                           
   977                           ;Communications.c: 25: Delay(5);
   978  000BA0  0E00               	movlw	0
   979  000BA2  6E1C               	movwf	Delay@wait+1,c
   980  000BA4  0E05               	movlw	5
   981  000BA6  6E1B               	movwf	Delay@wait,c
   982  000BA8  ECEA  F005         	call	_Delay	;wreg free
   983                           
   984                           ;Communications.c: 26: sendData(1, 1, 1, 1);
   985  000BAC  0E01               	movlw	1
   986  000BAE  0100               	movlb	0	; () banked
   987  000BB0  6FB4               	movwf	sendData@ComandByte& (0+255),b
   988  000BB2  0E01               	movlw	1
   989  000BB4  0100               	movlb	0	; () banked
   990  000BB6  6FB5               	movwf	sendData@DataTable& (0+255),b
   991  000BB8  0E01               	movlw	1
   992  000BBA  0100               	movlb	0	; () banked
   993  000BBC  6FB6               	movwf	sendData@DataTableIndex& (0+255),b
   994  000BBE  0E01               	movlw	1
   995  000BC0  EC31  F001         	call	_sendData
   996                           
   997                           ;Communications.c: 27: Delay(3);
   998  000BC4  0E00               	movlw	0
   999  000BC6  6E1C               	movwf	Delay@wait+1,c
  1000  000BC8  0E03               	movlw	3
  1001  000BCA  6E1B               	movwf	Delay@wait,c
  1002  000BCC  ECEA  F005         	call	_Delay	;wreg free
  1003                           
  1004                           ;Communications.c: 28: LATDbits.LATD4 = 0;
  1005  000BD0  988C               	bcf	3980,4,c	;volatile
  1006  000BD2  0012               	return		;funcret
  1007  000BD4                     __end_of_respondECU:
  1008                           	opt stack 0
  1009                           tblptru	equ	0xFF8
  1010                           tblptrh	equ	0xFF7
  1011                           tblptrl	equ	0xFF6
  1012                           tablat	equ	0xFF5
  1013                           postinc0	equ	0xFEE
  1014                           wreg	equ	0xFE8
  1015                           postdec1	equ	0xFE5
  1016                           fsr1l	equ	0xFE1
  1017                           status	equ	0xFD8
  1018                           
  1019 ;; *************** function _sendData *****************
  1020 ;; Defined at:
  1021 ;;		line 111 in file "FastTransfer.c"
  1022 ;; Parameters:    Size  Location     Type
  1023 ;;  whereToSend     1    wreg     unsigned char 
  1024 ;;  ComandByte      1   13[BANK0 ] unsigned char 
  1025 ;;  DataTable       1   14[BANK0 ] unsigned char 
  1026 ;;  DataTableInd    1   15[BANK0 ] unsigned char 
  1027 ;; Auto vars:     Size  Location     Type
  1028 ;;  whereToSend     1   60[BANK5 ] unsigned char 
  1029 ;;  SendArray      30   30[BANK5 ] unsigned char [30]
  1030 ;;  COBSArray      30    0[BANK5 ] unsigned char [30]
  1031 ;;  result          3   63[BANK5 ] struct .
  1032 ;;  count           2   68[BANK5 ] int 
  1033 ;;  i               2   66[BANK5 ] int 
  1034 ;;  CS              1   62[BANK5 ] unsigned char 
  1035 ;;  DataLenth       1   61[BANK5 ] unsigned char 
  1036 ;; Return value:  Size  Location     Type
  1037 ;;                  1    wreg      void 
  1038 ;; Registers used:
  1039 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1040 ;; Tracked objects:
  1041 ;;		On entry : 0/0
  1042 ;;		On exit  : 0/0
  1043 ;;		Unchanged: 0/0
  1044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1045 ;;      Params:         0       3       0       0       0       0       0
  1046 ;;      Locals:         0       0       0       0       0       0      70
  1047 ;;      Temps:          0       4       0       0       0       0       0
  1048 ;;      Totals:         0       7       0       0       0       0      70
  1049 ;;Total ram usage:       77 bytes
  1050 ;; Hardware stack levels used:    1
  1051 ;; Hardware stack levels required when called:    7
  1052 ;; This function calls:
  1053 ;;		_CRC8
  1054 ;;		_GetFaults
  1055 ;;		_Send_put
  1056 ;;		_cobs_encode
  1057 ;; This function is called by:
  1058 ;;		_respondECU
  1059 ;; This function uses a non-reentrant model
  1060 ;;
  1061                           
  1062                           	psect	text3
  1063  000262                     __ptext3:
  1064                           	opt stack 0
  1065  000262                     _sendData:
  1066                           	opt stack 21
  1067                           
  1068                           ;incstack = 0
  1069                           ;sendData@whereToSend stored from wreg
  1070  000262  0105               	movlb	5	; () banked
  1071  000264  6F3C               	movwf	sendData@whereToSend& (0+255),b
  1072                           
  1073                           ;FastTransfer.c: 116: unsigned char SendArray[30];
  1074                           ;FastTransfer.c: 117: unsigned char COBSArray[30];
  1075                           ;FastTransfer.c: 119: unsigned char DataLenth = 1;
  1076  000266  0E01               	movlw	1
  1077  000268  0105               	movlb	5	; () banked
  1078  00026A  6F3D               	movwf	sendData@DataLenth& (0+255),b
  1079                           
  1080                           ;FastTransfer.c: 121: cobs_encode_result result;
  1081                           ;FastTransfer.c: 125: SendArray[0] = 4+1;
  1082  00026C  0E05               	movlw	5
  1083  00026E  0105               	movlb	5	; () banked
  1084  000270  6F1E               	movwf	sendData@SendArray& (0+255),b
  1085                           
  1086                           ; BSR set to: 5
  1087                           ;FastTransfer.c: 126: SendArray[1] = ComandByte;
  1088  000272  C0B4  F51F         	movff	sendData@ComandByte,sendData@SendArray+1
  1089                           
  1090                           ; BSR set to: 5
  1091                           ;FastTransfer.c: 127: SendArray[2] = DataTable;
  1092  000276  C0B5  F520         	movff	sendData@DataTable,sendData@SendArray+2
  1093                           
  1094                           ; BSR set to: 5
  1095                           ;FastTransfer.c: 128: SendArray[3] = DataTableIndex;
  1096  00027A  C0B6  F521         	movff	sendData@DataTableIndex,sendData@SendArray+3
  1097                           
  1098                           ; BSR set to: 5
  1099                           ;FastTransfer.c: 129: SendArray[4] = DataLenth;
  1100  00027E  C53D  F522         	movff	sendData@DataLenth,sendData@SendArray+4
  1101                           
  1102                           ;FastTransfer.c: 134: int i;
  1103                           ;FastTransfer.c: 135: int count = 5;
  1104  000282  0E00               	movlw	0
  1105  000284  0105               	movlb	5	; () banked
  1106  000286  6F45               	movwf	(sendData@count+1)& (0+255),b
  1107  000288  0E05               	movlw	5
  1108  00028A  6F44               	movwf	sendData@count& (0+255),b
  1109                           
  1110                           ; BSR set to: 5
  1111                           ;FastTransfer.c: 136: i = count;
  1112  00028C  C544  F542         	movff	sendData@count,sendData@i
  1113  000290  C545  F543         	movff	sendData@count+1,sendData@i+1
  1114                           
  1115                           ; BSR set to: 5
  1116                           ;FastTransfer.c: 138: SendArray[count] = GetFaults(0);
  1117  000294  0E1E               	movlw	low sendData@SendArray
  1118  000296  0105               	movlb	5	; () banked
  1119  000298  2544               	addwf	sendData@count& (0+255),w,b
  1120  00029A  6ED9               	movwf	fsr2l,c
  1121  00029C  0E05               	movlw	high sendData@SendArray
  1122  00029E  0105               	movlb	5	; () banked
  1123  0002A0  2145               	addwfc	(sendData@count+1)& (0+255),w,b
  1124  0002A2  6EDA               	movwf	fsr2h,c
  1125  0002A4  0E00               	movlw	0
  1126  0002A6  ECBB  F006         	call	_GetFaults
  1127  0002AA  6EDF               	movwf	indf2,c
  1128                           
  1129                           ;FastTransfer.c: 139: count++;
  1130  0002AC  0105               	movlb	5	; () banked
  1131  0002AE  4B44               	infsnz	sendData@count& (0+255),f,b
  1132  0002B0  2B45               	incf	(sendData@count+1)& (0+255),f,b
  1133                           
  1134                           ; BSR set to: 5
  1135                           ;FastTransfer.c: 140: SendArray[count] = GetFaults(1);
  1136  0002B2  0E1E               	movlw	low sendData@SendArray
  1137  0002B4  0105               	movlb	5	; () banked
  1138  0002B6  2544               	addwf	sendData@count& (0+255),w,b
  1139  0002B8  6ED9               	movwf	fsr2l,c
  1140  0002BA  0E05               	movlw	high sendData@SendArray
  1141  0002BC  0105               	movlb	5	; () banked
  1142  0002BE  2145               	addwfc	(sendData@count+1)& (0+255),w,b
  1143  0002C0  6EDA               	movwf	fsr2h,c
  1144  0002C2  0E01               	movlw	1
  1145  0002C4  ECBB  F006         	call	_GetFaults
  1146  0002C8  6EDF               	movwf	indf2,c
  1147                           
  1148                           ;FastTransfer.c: 143: unsigned char CS = CRC8(SendArray, count+1);
  1149  0002CA  0E1E               	movlw	low sendData@SendArray
  1150  0002CC  6E1B               	movwf	CRC8@data,c
  1151  0002CE  0E05               	movlw	high sendData@SendArray
  1152  0002D0  6E1C               	movwf	CRC8@data+1,c
  1153  0002D2  0105               	movlb	5	; () banked
  1154  0002D4  2944               	incf	sendData@count& (0+255),w,b
  1155  0002D6  6E1D               	movwf	CRC8@len,c
  1156  0002D8  EC8C  F005         	call	_CRC8	;wreg free
  1157  0002DC  0105               	movlb	5	; () banked
  1158  0002DE  6F3E               	movwf	sendData@CS& (0+255),b
  1159                           
  1160                           ; BSR set to: 5
  1161                           ;FastTransfer.c: 147: SendArray[count++] = (CS);
  1162  0002E0  0E1E               	movlw	low sendData@SendArray
  1163  0002E2  0105               	movlb	5	; () banked
  1164  0002E4  2544               	addwf	sendData@count& (0+255),w,b
  1165  0002E6  6ED9               	movwf	fsr2l,c
  1166  0002E8  0E05               	movlw	high sendData@SendArray
  1167  0002EA  0105               	movlb	5	; () banked
  1168  0002EC  2145               	addwfc	(sendData@count+1)& (0+255),w,b
  1169  0002EE  6EDA               	movwf	fsr2h,c
  1170  0002F0  C53E  FFDF         	movff	sendData@CS,indf2
  1171                           
  1172                           ; BSR set to: 5
  1173  0002F4  0105               	movlb	5	; () banked
  1174  0002F6  4B44               	infsnz	sendData@count& (0+255),f,b
  1175  0002F8  2B45               	incf	(sendData@count+1)& (0+255),f,b
  1176                           
  1177                           ; BSR set to: 5
  1178                           ;FastTransfer.c: 149: result = cobs_encode(COBSArray, sizeof(COBSArray), SendArray, coun
      +                          t);
  1179  0002FA  0E00               	movlw	low sendData@COBSArray
  1180  0002FC  6E1B               	movwf	cobs_encode@dst_buf_ptr,c
  1181  0002FE  0E05               	movlw	high sendData@COBSArray
  1182  000300  6E1C               	movwf	cobs_encode@dst_buf_ptr+1,c
  1183  000302  0E00               	movlw	0
  1184  000304  6E1E               	movwf	cobs_encode@dst_buf_len+1,c
  1185  000306  0E1E               	movlw	30
  1186  000308  6E1D               	movwf	cobs_encode@dst_buf_len,c
  1187  00030A  0E1E               	movlw	low sendData@SendArray
  1188  00030C  6E1F               	movwf	cobs_encode@src_ptr,c
  1189  00030E  0E05               	movlw	high sendData@SendArray
  1190  000310  6E20               	movwf	cobs_encode@src_ptr+1,c
  1191  000312  C544  F021         	movff	sendData@count,cobs_encode@src_len
  1192  000316  C545  F022         	movff	sendData@count+1,cobs_encode@src_len+1
  1193  00031A  EC01  F002         	call	_cobs_encode	;wreg free
  1194  00031E  C01B  F53F         	movff	?_cobs_encode,sendData@result
  1195  000322  C01C  F540         	movff	?_cobs_encode+1,sendData@result+1
  1196  000326  C01D  F541         	movff	?_cobs_encode+2,sendData@result+2
  1197                           
  1198                           ;FastTransfer.c: 151: SendArray[0] = whereToSend;
  1199  00032A  C53C  F51E         	movff	sendData@whereToSend,sendData@SendArray
  1200                           
  1201                           ;FastTransfer.c: 153: for(i = 1;i<result.out_len+1;i++){
  1202  00032E  0E00               	movlw	0
  1203  000330  0105               	movlb	5	; () banked
  1204  000332  6F43               	movwf	(sendData@i+1)& (0+255),b
  1205  000334  0E01               	movlw	1
  1206  000336  6F42               	movwf	sendData@i& (0+255),b
  1207  000338  D027               	goto	l2484
  1208  00033A                     l2480:
  1209                           
  1210                           ; BSR set to: 5
  1211                           ;FastTransfer.c: 154: SendArray[i] = COBSArray[i-1];
  1212  00033A  0EFF               	movlw	255
  1213  00033C  0100               	movlb	0	; () banked
  1214  00033E  6FB7               	movwf	??_sendData& (0+255),b
  1215  000340  0EFF               	movlw	255
  1216  000342  0100               	movlb	0	; () banked
  1217  000344  6FB8               	movwf	(??_sendData+1)& (0+255),b
  1218  000346  C542  F0B9         	movff	sendData@i,??_sendData+2
  1219  00034A  C543  F0BA         	movff	sendData@i+1,??_sendData+3
  1220  00034E  0100               	movlb	0	; () banked
  1221  000350  51B7               	movf	??_sendData& (0+255),w,b
  1222  000352  0100               	movlb	0	; () banked
  1223  000354  27B9               	addwf	(??_sendData+2)& (0+255),f,b
  1224  000356  0100               	movlb	0	; () banked
  1225  000358  51B8               	movf	(??_sendData+1)& (0+255),w,b
  1226  00035A  0100               	movlb	0	; () banked
  1227  00035C  23BA               	addwfc	(??_sendData+3)& (0+255),f,b
  1228  00035E  0E00               	movlw	low sendData@COBSArray
  1229  000360  0100               	movlb	0	; () banked
  1230  000362  25B9               	addwf	(??_sendData+2)& (0+255),w,b
  1231  000364  6ED9               	movwf	fsr2l,c
  1232  000366  0E05               	movlw	high sendData@COBSArray
  1233  000368  0100               	movlb	0	; () banked
  1234  00036A  21BA               	addwfc	(??_sendData+3)& (0+255),w,b
  1235  00036C  6EDA               	movwf	fsr2h,c
  1236  00036E  0E1E               	movlw	low sendData@SendArray
  1237  000370  0105               	movlb	5	; () banked
  1238  000372  2542               	addwf	sendData@i& (0+255),w,b
  1239  000374  6EE1               	movwf	fsr1l,c
  1240  000376  0E05               	movlw	high sendData@SendArray
  1241  000378  0105               	movlb	5	; () banked
  1242  00037A  2143               	addwfc	(sendData@i+1)& (0+255),w,b
  1243  00037C  6EE2               	movwf	fsr1h,c
  1244  00037E  CFDF FFE7          	movff	indf2,indf1
  1245                           
  1246                           ; BSR set to: 5
  1247  000382  0105               	movlb	5	; () banked
  1248  000384  4B42               	infsnz	sendData@i& (0+255),f,b
  1249  000386  2B43               	incf	(sendData@i+1)& (0+255),f,b
  1250  000388                     l2484:
  1251                           
  1252                           ; BSR set to: 5
  1253  000388  0E01               	movlw	1
  1254  00038A  0105               	movlb	5	; () banked
  1255  00038C  253F               	addwf	sendData@result& (0+255),w,b
  1256  00038E  0100               	movlb	0	; () banked
  1257  000390  6FB7               	movwf	??_sendData& (0+255),b
  1258  000392  0E00               	movlw	0
  1259  000394  0105               	movlb	5	; () banked
  1260  000396  2140               	addwfc	(sendData@result+1)& (0+255),w,b
  1261  000398  0100               	movlb	0	; () banked
  1262  00039A  6FB8               	movwf	(??_sendData+1)& (0+255),b
  1263  00039C  0100               	movlb	0	; () banked
  1264  00039E  51B7               	movf	??_sendData& (0+255),w,b
  1265  0003A0  0105               	movlb	5	; () banked
  1266  0003A2  5D42               	subwf	sendData@i& (0+255),w,b
  1267  0003A4  0100               	movlb	0	; () banked
  1268  0003A6  51B8               	movf	(??_sendData+1)& (0+255),w,b
  1269  0003A8  0105               	movlb	5	; () banked
  1270  0003AA  5943               	subwfb	(sendData@i+1)& (0+255),w,b
  1271  0003AC  A0D8               	btfss	status,0,c
  1272  0003AE  D7C5               	goto	l2480
  1273                           
  1274                           ; BSR set to: 5
  1275                           ;FastTransfer.c: 155: }
  1276                           ;FastTransfer.c: 157: for(i = 0;i<result.out_len+2;i++){
  1277                           
  1278                           ; BSR set to: 5
  1279  0003B0  0E00               	movlw	0
  1280  0003B2  0105               	movlb	5	; () banked
  1281  0003B4  6F43               	movwf	(sendData@i+1)& (0+255),b
  1282  0003B6  0E00               	movlw	0
  1283  0003B8  6F42               	movwf	sendData@i& (0+255),b
  1284  0003BA  D00E               	goto	l2492
  1285  0003BC                     l2488:
  1286                           
  1287                           ; BSR set to: 5
  1288                           ;FastTransfer.c: 158: Send_put(SendArray[i]);
  1289  0003BC  0E1E               	movlw	low sendData@SendArray
  1290  0003BE  0105               	movlb	5	; () banked
  1291  0003C0  2542               	addwf	sendData@i& (0+255),w,b
  1292  0003C2  6ED9               	movwf	fsr2l,c
  1293  0003C4  0E05               	movlw	high sendData@SendArray
  1294  0003C6  0105               	movlb	5	; () banked
  1295  0003C8  2143               	addwfc	(sendData@i+1)& (0+255),w,b
  1296  0003CA  6EDA               	movwf	fsr2h,c
  1297  0003CC  50DF               	movf	indf2,w,c
  1298  0003CE  EC1D  F006         	call	_Send_put
  1299  0003D2  0105               	movlb	5	; () banked
  1300  0003D4  4B42               	infsnz	sendData@i& (0+255),f,b
  1301  0003D6  2B43               	incf	(sendData@i+1)& (0+255),f,b
  1302  0003D8                     l2492:
  1303                           
  1304                           ; BSR set to: 5
  1305  0003D8  0E02               	movlw	2
  1306  0003DA  0105               	movlb	5	; () banked
  1307  0003DC  253F               	addwf	sendData@result& (0+255),w,b
  1308  0003DE  0100               	movlb	0	; () banked
  1309  0003E0  6FB7               	movwf	??_sendData& (0+255),b
  1310  0003E2  0E00               	movlw	0
  1311  0003E4  0105               	movlb	5	; () banked
  1312  0003E6  2140               	addwfc	(sendData@result+1)& (0+255),w,b
  1313  0003E8  0100               	movlb	0	; () banked
  1314  0003EA  6FB8               	movwf	(??_sendData+1)& (0+255),b
  1315  0003EC  0100               	movlb	0	; () banked
  1316  0003EE  51B7               	movf	??_sendData& (0+255),w,b
  1317  0003F0  0105               	movlb	5	; () banked
  1318  0003F2  5D42               	subwf	sendData@i& (0+255),w,b
  1319  0003F4  0100               	movlb	0	; () banked
  1320  0003F6  51B8               	movf	(??_sendData+1)& (0+255),w,b
  1321  0003F8  0105               	movlb	5	; () banked
  1322  0003FA  5943               	subwfb	(sendData@i+1)& (0+255),w,b
  1323  0003FC  B0D8               	btfsc	status,0,c
  1324  0003FE  0012               	return	
  1325  000400  D7DD               	goto	l2488
  1326  000402                     __end_of_sendData:
  1327                           	opt stack 0
  1328                           tblptru	equ	0xFF8
  1329                           tblptrh	equ	0xFF7
  1330                           tblptrl	equ	0xFF6
  1331                           tablat	equ	0xFF5
  1332                           postinc0	equ	0xFEE
  1333                           wreg	equ	0xFE8
  1334                           indf1	equ	0xFE7
  1335                           postdec1	equ	0xFE5
  1336                           fsr1h	equ	0xFE2
  1337                           fsr1l	equ	0xFE1
  1338                           indf2	equ	0xFDF
  1339                           fsr2h	equ	0xFDA
  1340                           fsr2l	equ	0xFD9
  1341                           status	equ	0xFD8
  1342                           
  1343 ;; *************** function _cobs_encode *****************
  1344 ;; Defined at:
  1345 ;;		line 29 in file "COBS.c"
  1346 ;; Parameters:    Size  Location     Type
  1347 ;;  dst_buf_ptr     2   26[COMRAM] PTR unsigned char 
  1348 ;;		 -> sendData@COBSArray(30), 
  1349 ;;  dst_buf_len     2   28[COMRAM] unsigned int 
  1350 ;;  src_ptr         2   30[COMRAM] PTR const unsigned char 
  1351 ;;		 -> sendData@SendArray(30), 
  1352 ;;  src_len         2   32[COMRAM] unsigned int 
  1353 ;; Auto vars:     Size  Location     Type
  1354 ;;  result          3   10[BANK0 ] struct .
  1355 ;;  dst_write_pt    2    8[BANK0 ] PTR unsigned char 
  1356 ;;		 -> sendData@COBSArray(30), 
  1357 ;;  dst_code_wri    2    6[BANK0 ] PTR unsigned char 
  1358 ;;		 -> sendData@COBSArray(30), 
  1359 ;;  dst_buf_end_    2    3[BANK0 ] PTR unsigned char 
  1360 ;;		 -> sendData@COBSArray(30), 
  1361 ;;  src_end_ptr     2    0[BANK0 ] PTR const unsigned char 
  1362 ;;		 -> sendData@SendArray(30), 
  1363 ;;  search_len      1    5[BANK0 ] unsigned char 
  1364 ;;  src_byte        1    2[BANK0 ] unsigned char 
  1365 ;; Return value:  Size  Location     Type
  1366 ;;                  3   26[COMRAM] struct .
  1367 ;; Registers used:
  1368 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1369 ;; Tracked objects:
  1370 ;;		On entry : 0/0
  1371 ;;		On exit  : 0/0
  1372 ;;		Unchanged: 0/0
  1373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1374 ;;      Params:         8       0       0       0       0       0       0
  1375 ;;      Locals:         0      13       0       0       0       0       0
  1376 ;;      Temps:          2       0       0       0       0       0       0
  1377 ;;      Totals:        10      13       0       0       0       0       0
  1378 ;;Total ram usage:       23 bytes
  1379 ;; Hardware stack levels used:    1
  1380 ;; Hardware stack levels required when called:    4
  1381 ;; This function calls:
  1382 ;;		Nothing
  1383 ;; This function is called by:
  1384 ;;		_sendData
  1385 ;; This function uses a non-reentrant model
  1386 ;;
  1387                           
  1388                           	psect	text4
  1389  000402                     __ptext4:
  1390                           	opt stack 0
  1391  000402                     _cobs_encode:
  1392                           	opt stack 23
  1393                           
  1394                           ;COBS.c: 31: cobs_encode_result result = { 0, COBS_ENCODE_OK };
  1395                           
  1396                           ; BSR set to: 5
  1397                           ;incstack = 0
  1398  000402  C067  F0B1         	movff	cobs_encode@F186,cobs_encode@result
  1399  000406  C068  F0B2         	movff	cobs_encode@F186+1,cobs_encode@result+1
  1400  00040A  C069  F0B3         	movff	cobs_encode@F186+2,cobs_encode@result+2
  1401                           
  1402                           ;COBS.c: 32: const uint8_t * src_end_ptr = src_ptr + src_len;
  1403  00040E  5021               	movf	cobs_encode@src_len,w,c
  1404  000410  241F               	addwf	cobs_encode@src_ptr,w,c
  1405  000412  0100               	movlb	0	; () banked
  1406  000414  6FA7               	movwf	cobs_encode@src_end_ptr& (0+255),b
  1407  000416  5022               	movf	cobs_encode@src_len+1,w,c
  1408  000418  2020               	addwfc	cobs_encode@src_ptr+1,w,c
  1409  00041A  0100               	movlb	0	; () banked
  1410  00041C  6FA8               	movwf	(cobs_encode@src_end_ptr+1)& (0+255),b
  1411                           
  1412                           ;COBS.c: 33: uint8_t * dst_buf_end_ptr = dst_buf_ptr + dst_buf_len;
  1413  00041E  501D               	movf	cobs_encode@dst_buf_len,w,c
  1414  000420  241B               	addwf	cobs_encode@dst_buf_ptr,w,c
  1415  000422  0100               	movlb	0	; () banked
  1416  000424  6FAA               	movwf	cobs_encode@dst_buf_end_ptr& (0+255),b
  1417  000426  501E               	movf	cobs_encode@dst_buf_len+1,w,c
  1418  000428  201C               	addwfc	cobs_encode@dst_buf_ptr+1,w,c
  1419  00042A  0100               	movlb	0	; () banked
  1420  00042C  6FAB               	movwf	(cobs_encode@dst_buf_end_ptr+1)& (0+255),b
  1421                           
  1422                           ;COBS.c: 34: uint8_t * dst_code_write_ptr = dst_buf_ptr;
  1423  00042E  C01B  F0AD         	movff	cobs_encode@dst_buf_ptr,cobs_encode@dst_code_write_ptr
  1424  000432  C01C  F0AE         	movff	cobs_encode@dst_buf_ptr+1,cobs_encode@dst_code_write_ptr+1
  1425                           
  1426                           ;COBS.c: 35: uint8_t * dst_write_ptr = dst_code_write_ptr + 1;
  1427  000436  0E01               	movlw	1
  1428  000438  0100               	movlb	0	; () banked
  1429  00043A  25AD               	addwf	cobs_encode@dst_code_write_ptr& (0+255),w,b
  1430  00043C  0100               	movlb	0	; () banked
  1431  00043E  6FAF               	movwf	cobs_encode@dst_write_ptr& (0+255),b
  1432  000440  0E00               	movlw	0
  1433  000442  0100               	movlb	0	; () banked
  1434  000444  21AE               	addwfc	(cobs_encode@dst_code_write_ptr+1)& (0+255),w,b
  1435  000446  0100               	movlb	0	; () banked
  1436  000448  6FB0               	movwf	(cobs_encode@dst_write_ptr+1)& (0+255),b
  1437                           
  1438                           ; BSR set to: 0
  1439                           ;COBS.c: 36: uint8_t src_byte = 0;
  1440  00044A  0E00               	movlw	0
  1441  00044C  0100               	movlb	0	; () banked
  1442  00044E  6FA9               	movwf	cobs_encode@src_byte& (0+255),b
  1443                           
  1444                           ; BSR set to: 0
  1445                           ;COBS.c: 37: uint8_t search_len = 1;
  1446  000450  0E01               	movlw	1
  1447  000452  0100               	movlb	0	; () banked
  1448  000454  6FAC               	movwf	cobs_encode@search_len& (0+255),b
  1449                           
  1450                           ;COBS.c: 41: if ((dst_buf_ptr == (0)) || (src_ptr == (0)))
  1451  000456  501B               	movf	cobs_encode@dst_buf_ptr,w,c
  1452  000458  101C               	iorwf	cobs_encode@dst_buf_ptr+1,w,c
  1453  00045A  B4D8               	btfsc	status,2,c
  1454  00045C  D004               	goto	l2372
  1455                           
  1456                           ; BSR set to: 0
  1457  00045E  501F               	movf	cobs_encode@src_ptr,w,c
  1458  000460  1020               	iorwf	cobs_encode@src_ptr+1,w,c
  1459  000462  A4D8               	btfss	status,2,c
  1460  000464  D00A               	goto	l2378
  1461  000466                     l2372:
  1462                           
  1463                           ; BSR set to: 0
  1464                           ;COBS.c: 42: {
  1465                           ;COBS.c: 43: result.status = COBS_ENCODE_NULL_POINTER;
  1466  000466  0E01               	movlw	1
  1467  000468  0100               	movlb	0	; () banked
  1468  00046A  6FB3               	movwf	(cobs_encode@result+2)& (0+255),b
  1469                           
  1470                           ; BSR set to: 0
  1471                           ;COBS.c: 44: return result;
  1472  00046C  C0B1  F01B         	movff	cobs_encode@result,?_cobs_encode
  1473  000470  C0B2  F01C         	movff	cobs_encode@result+1,?_cobs_encode+1
  1474  000474  C0B3  F01D         	movff	cobs_encode@result+2,?_cobs_encode+2
  1475                           
  1476                           ; BSR set to: 0
  1477  000478  0012               	return	
  1478  00047A                     l2378:
  1479                           
  1480                           ; BSR set to: 0
  1481                           ;COBS.c: 45: }
  1482                           ;COBS.c: 47: if (src_len != 0)
  1483  00047A  5021               	movf	cobs_encode@src_len,w,c
  1484  00047C  1022               	iorwf	cobs_encode@src_len+1,w,c
  1485  00047E  B4D8               	btfsc	status,2,c
  1486  000480  D05C               	goto	l2422
  1487  000482                     l2380:
  1488                           
  1489                           ; BSR set to: 0
  1490                           ;COBS.c: 51: {
  1491                           ;COBS.c: 53: if (dst_write_ptr >= dst_buf_end_ptr)
  1492  000482  0100               	movlb	0	; () banked
  1493  000484  51AA               	movf	cobs_encode@dst_buf_end_ptr& (0+255),w,b
  1494  000486  0100               	movlb	0	; () banked
  1495  000488  5DAF               	subwf	cobs_encode@dst_write_ptr& (0+255),w,b
  1496  00048A  0100               	movlb	0	; () banked
  1497  00048C  51AB               	movf	(cobs_encode@dst_buf_end_ptr+1)& (0+255),w,b
  1498  00048E  0100               	movlb	0	; () banked
  1499  000490  59B0               	subwfb	(cobs_encode@dst_write_ptr+1)& (0+255),w,b
  1500  000492  A0D8               	btfss	status,0,c
  1501  000494  D003               	goto	l2384
  1502                           
  1503                           ; BSR set to: 0
  1504                           ;COBS.c: 54: {
  1505                           ;COBS.c: 55: result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
  1506  000496  0100               	movlb	0	; () banked
  1507  000498  83B3               	bsf	(cobs_encode@result+2)& (0+255),1,b
  1508                           
  1509                           ;COBS.c: 56: break;
  1510  00049A  D04F               	goto	l2422
  1511  00049C                     l2384:
  1512                           
  1513                           ; BSR set to: 0
  1514                           ;COBS.c: 57: }
  1515                           ;COBS.c: 59: src_byte = *src_ptr++;
  1516  00049C  C01F  FFD9         	movff	cobs_encode@src_ptr,fsr2l
  1517  0004A0  C020  FFDA         	movff	cobs_encode@src_ptr+1,fsr2h
  1518  0004A4  50DF               	movf	indf2,w,c
  1519  0004A6  0100               	movlb	0	; () banked
  1520  0004A8  6FA9               	movwf	cobs_encode@src_byte& (0+255),b
  1521                           
  1522                           ; BSR set to: 0
  1523  0004AA  4A1F               	infsnz	cobs_encode@src_ptr,f,c
  1524  0004AC  2A20               	incf	cobs_encode@src_ptr+1,f,c
  1525                           
  1526                           ; BSR set to: 0
  1527                           ;COBS.c: 60: if (src_byte == 0)
  1528  0004AE  0100               	movlb	0	; () banked
  1529  0004B0  51A9               	movf	cobs_encode@src_byte& (0+255),w,b
  1530  0004B2  0100               	movlb	0	; () banked
  1531  0004B4  A4D8               	btfss	status,2,c
  1532  0004B6  D019               	goto	l2402
  1533                           
  1534                           ; BSR set to: 0
  1535                           ;COBS.c: 61: {
  1536                           ;COBS.c: 63: *dst_code_write_ptr = search_len;
  1537  0004B8  C0AD  FFD9         	movff	cobs_encode@dst_code_write_ptr,fsr2l
  1538  0004BC  C0AE  FFDA         	movff	cobs_encode@dst_code_write_ptr+1,fsr2h
  1539  0004C0  C0AC  FFDF         	movff	cobs_encode@search_len,indf2
  1540                           
  1541                           ; BSR set to: 0
  1542                           ;COBS.c: 64: dst_code_write_ptr = dst_write_ptr++;
  1543  0004C4  C0AF  F0AD         	movff	cobs_encode@dst_write_ptr,cobs_encode@dst_code_write_ptr
  1544  0004C8  C0B0  F0AE         	movff	cobs_encode@dst_write_ptr+1,cobs_encode@dst_code_write_ptr+1
  1545                           
  1546                           ; BSR set to: 0
  1547  0004CC  0100               	movlb	0	; () banked
  1548  0004CE  4BAF               	infsnz	cobs_encode@dst_write_ptr& (0+255),f,b
  1549  0004D0  2BB0               	incf	(cobs_encode@dst_write_ptr+1)& (0+255),f,b
  1550                           
  1551                           ; BSR set to: 0
  1552                           ;COBS.c: 65: search_len = 1;
  1553  0004D2  0E01               	movlw	1
  1554  0004D4  0100               	movlb	0	; () banked
  1555  0004D6  6FAC               	movwf	cobs_encode@search_len& (0+255),b
  1556                           
  1557                           ; BSR set to: 0
  1558                           ;COBS.c: 66: if (src_ptr >= src_end_ptr)
  1559  0004D8  0100               	movlb	0	; () banked
  1560  0004DA  51A7               	movf	cobs_encode@src_end_ptr& (0+255),w,b
  1561  0004DC  5C1F               	subwf	cobs_encode@src_ptr,w,c
  1562  0004DE  0100               	movlb	0	; () banked
  1563  0004E0  51A8               	movf	(cobs_encode@src_end_ptr+1)& (0+255),w,b
  1564  0004E2  5820               	subwfb	cobs_encode@src_ptr+1,w,c
  1565  0004E4  B0D8               	btfsc	status,0,c
  1566  0004E6  D029               	goto	l2422
  1567  0004E8  D7CC               	goto	l2380
  1568  0004EA                     l2402:
  1569                           
  1570                           ; BSR set to: 0
  1571                           ;COBS.c: 71: else
  1572                           ;COBS.c: 72: {
  1573                           ;COBS.c: 74: *dst_write_ptr++ = src_byte;
  1574  0004EA  C0AF  FFD9         	movff	cobs_encode@dst_write_ptr,fsr2l
  1575  0004EE  C0B0  FFDA         	movff	cobs_encode@dst_write_ptr+1,fsr2h
  1576  0004F2  C0A9  FFDF         	movff	cobs_encode@src_byte,indf2
  1577                           
  1578                           ; BSR set to: 0
  1579  0004F6  0100               	movlb	0	; () banked
  1580  0004F8  4BAF               	infsnz	cobs_encode@dst_write_ptr& (0+255),f,b
  1581  0004FA  2BB0               	incf	(cobs_encode@dst_write_ptr+1)& (0+255),f,b
  1582                           
  1583                           ; BSR set to: 0
  1584                           ;COBS.c: 75: search_len++;
  1585  0004FC  0100               	movlb	0	; () banked
  1586  0004FE  2BAC               	incf	cobs_encode@search_len& (0+255),f,b
  1587                           
  1588                           ; BSR set to: 0
  1589                           ;COBS.c: 76: if (src_ptr >= src_end_ptr)
  1590  000500  0100               	movlb	0	; () banked
  1591  000502  51A7               	movf	cobs_encode@src_end_ptr& (0+255),w,b
  1592  000504  5C1F               	subwf	cobs_encode@src_ptr,w,c
  1593  000506  0100               	movlb	0	; () banked
  1594  000508  51A8               	movf	(cobs_encode@src_end_ptr+1)& (0+255),w,b
  1595  00050A  5820               	subwfb	cobs_encode@src_ptr+1,w,c
  1596  00050C  B0D8               	btfsc	status,0,c
  1597  00050E  D015               	goto	l2422
  1598                           
  1599                           ; BSR set to: 0
  1600                           ;COBS.c: 79: }
  1601                           ;COBS.c: 80: if (search_len == 0xFF)
  1602                           
  1603                           ; BSR set to: 0
  1604                           
  1605                           ; BSR set to: 0
  1606                           ;COBS.c: 77: {
  1607                           ;COBS.c: 78: break;
  1608  000510  0100               	movlb	0	; () banked
  1609  000512  29AC               	incf	cobs_encode@search_len& (0+255),w,b
  1610  000514  A4D8               	btfss	status,2,c
  1611  000516  D7B5               	goto	l2380
  1612                           
  1613                           ; BSR set to: 0
  1614                           ;COBS.c: 81: {
  1615                           ;COBS.c: 84: *dst_code_write_ptr = search_len;
  1616  000518  C0AD  FFD9         	movff	cobs_encode@dst_code_write_ptr,fsr2l
  1617  00051C  C0AE  FFDA         	movff	cobs_encode@dst_code_write_ptr+1,fsr2h
  1618  000520  C0AC  FFDF         	movff	cobs_encode@search_len,indf2
  1619                           
  1620                           ; BSR set to: 0
  1621                           ;COBS.c: 85: dst_code_write_ptr = dst_write_ptr++;
  1622  000524  C0AF  F0AD         	movff	cobs_encode@dst_write_ptr,cobs_encode@dst_code_write_ptr
  1623  000528  C0B0  F0AE         	movff	cobs_encode@dst_write_ptr+1,cobs_encode@dst_code_write_ptr+1
  1624                           
  1625                           ; BSR set to: 0
  1626  00052C  0100               	movlb	0	; () banked
  1627  00052E  4BAF               	infsnz	cobs_encode@dst_write_ptr& (0+255),f,b
  1628  000530  2BB0               	incf	(cobs_encode@dst_write_ptr+1)& (0+255),f,b
  1629                           
  1630                           ; BSR set to: 0
  1631                           ;COBS.c: 86: search_len = 1;
  1632  000532  0E01               	movlw	1
  1633  000534  0100               	movlb	0	; () banked
  1634  000536  6FAC               	movwf	cobs_encode@search_len& (0+255),b
  1635                           
  1636                           ; BSR set to: 0
  1637                           ;COBS.c: 87: }
  1638                           ;COBS.c: 88: }
  1639                           ;COBS.c: 89: }
  1640                           
  1641                           ; BSR set to: 0
  1642  000538  D7A4               	goto	l2380
  1643  00053A                     l2422:
  1644                           
  1645                           ; BSR set to: 0
  1646                           ;COBS.c: 90: }
  1647                           ;COBS.c: 96: if (dst_code_write_ptr >= dst_buf_end_ptr)
  1648  00053A  0100               	movlb	0	; () banked
  1649  00053C  51AA               	movf	cobs_encode@dst_buf_end_ptr& (0+255),w,b
  1650  00053E  0100               	movlb	0	; () banked
  1651  000540  5DAD               	subwf	cobs_encode@dst_code_write_ptr& (0+255),w,b
  1652  000542  0100               	movlb	0	; () banked
  1653  000544  51AB               	movf	(cobs_encode@dst_buf_end_ptr+1)& (0+255),w,b
  1654  000546  0100               	movlb	0	; () banked
  1655  000548  59AE               	subwfb	(cobs_encode@dst_code_write_ptr+1)& (0+255),w,b
  1656  00054A  A0D8               	btfss	status,0,c
  1657  00054C  D007               	goto	l2428
  1658                           
  1659                           ; BSR set to: 0
  1660                           ;COBS.c: 97: {
  1661                           ;COBS.c: 99: result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
  1662  00054E  0100               	movlb	0	; () banked
  1663  000550  83B3               	bsf	(cobs_encode@result+2)& (0+255),1,b
  1664                           
  1665                           ; BSR set to: 0
  1666                           ;COBS.c: 100: dst_write_ptr = dst_buf_end_ptr;
  1667  000552  C0AA  F0AF         	movff	cobs_encode@dst_buf_end_ptr,cobs_encode@dst_write_ptr
  1668  000556  C0AB  F0B0         	movff	cobs_encode@dst_buf_end_ptr+1,cobs_encode@dst_write_ptr+1
  1669                           
  1670                           ;COBS.c: 101: }
  1671  00055A  D006               	goto	l2430
  1672  00055C                     l2428:
  1673                           
  1674                           ; BSR set to: 0
  1675                           ;COBS.c: 102: else
  1676                           ;COBS.c: 103: {
  1677                           ;COBS.c: 105: *dst_code_write_ptr = search_len;
  1678  00055C  C0AD  FFD9         	movff	cobs_encode@dst_code_write_ptr,fsr2l
  1679  000560  C0AE  FFDA         	movff	cobs_encode@dst_code_write_ptr+1,fsr2h
  1680  000564  C0AC  FFDF         	movff	cobs_encode@search_len,indf2
  1681  000568                     l2430:
  1682                           
  1683                           ; BSR set to: 0
  1684                           ;COBS.c: 106: }
  1685                           ;COBS.c: 109: result.out_len = dst_write_ptr - dst_buf_ptr;
  1686  000568  C01B  F023         	movff	cobs_encode@dst_buf_ptr,??_cobs_encode
  1687  00056C  C01C  F024         	movff	cobs_encode@dst_buf_ptr+1,??_cobs_encode+1
  1688  000570  1E23               	comf	??_cobs_encode,f,c
  1689  000572  1E24               	comf	??_cobs_encode+1,f,c
  1690  000574  4A23               	infsnz	??_cobs_encode,f,c
  1691  000576  2A24               	incf	??_cobs_encode+1,f,c
  1692  000578  0100               	movlb	0	; () banked
  1693  00057A  51AF               	movf	cobs_encode@dst_write_ptr& (0+255),w,b
  1694  00057C  2423               	addwf	??_cobs_encode,w,c
  1695  00057E  0100               	movlb	0	; () banked
  1696  000580  6FB1               	movwf	cobs_encode@result& (0+255),b
  1697  000582  0100               	movlb	0	; () banked
  1698  000584  51B0               	movf	(cobs_encode@dst_write_ptr+1)& (0+255),w,b
  1699  000586  2024               	addwfc	??_cobs_encode+1,w,c
  1700  000588  0100               	movlb	0	; () banked
  1701  00058A  6FB2               	movwf	(cobs_encode@result+1)& (0+255),b
  1702                           
  1703                           ; BSR set to: 0
  1704                           ;COBS.c: 111: return result;
  1705  00058C  C0B1  F01B         	movff	cobs_encode@result,?_cobs_encode
  1706  000590  C0B2  F01C         	movff	cobs_encode@result+1,?_cobs_encode+1
  1707  000594  C0B3  F01D         	movff	cobs_encode@result+2,?_cobs_encode+2
  1708  000598  0012               	return	
  1709  00059A                     __end_of_cobs_encode:
  1710                           	opt stack 0
  1711                           tblptru	equ	0xFF8
  1712                           tblptrh	equ	0xFF7
  1713                           tblptrl	equ	0xFF6
  1714                           tablat	equ	0xFF5
  1715                           postinc0	equ	0xFEE
  1716                           wreg	equ	0xFE8
  1717                           indf1	equ	0xFE7
  1718                           postdec1	equ	0xFE5
  1719                           fsr1h	equ	0xFE2
  1720                           fsr1l	equ	0xFE1
  1721                           indf2	equ	0xFDF
  1722                           fsr2h	equ	0xFDA
  1723                           fsr2l	equ	0xFD9
  1724                           status	equ	0xFD8
  1725                           
  1726 ;; *************** function _Send_put *****************
  1727 ;; Defined at:
  1728 ;;		line 129 in file "UART.c"
  1729 ;; Parameters:    Size  Location     Type
  1730 ;;  _data           1    wreg     unsigned char 
  1731 ;; Auto vars:     Size  Location     Type
  1732 ;;  _data           1    0[BANK0 ] unsigned char 
  1733 ;; Return value:  Size  Location     Type
  1734 ;;                  1    wreg      void 
  1735 ;; Registers used:
  1736 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1737 ;; Tracked objects:
  1738 ;;		On entry : 0/0
  1739 ;;		On exit  : 0/0
  1740 ;;		Unchanged: 0/0
  1741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1742 ;;      Params:         0       0       0       0       0       0       0
  1743 ;;      Locals:         0       1       0       0       0       0       0
  1744 ;;      Temps:          0       0       0       0       0       0       0
  1745 ;;      Totals:         0       1       0       0       0       0       0
  1746 ;;Total ram usage:        1 bytes
  1747 ;; Hardware stack levels used:    1
  1748 ;; Hardware stack levels required when called:    6
  1749 ;; This function calls:
  1750 ;;		_UART_buff_get
  1751 ;;		_UART_buff_put
  1752 ;; This function is called by:
  1753 ;;		_ComStart
  1754 ;;		_sendData
  1755 ;;		_putch
  1756 ;; This function uses a non-reentrant model
  1757 ;;
  1758                           
  1759                           	psect	text5
  1760  000C3A                     __ptext5:
  1761                           	opt stack 0
  1762  000C3A                     _Send_put:
  1763                           	opt stack 21
  1764                           
  1765                           ; BSR set to: 0
  1766                           ;incstack = 0
  1767                           ;Send_put@_data stored from wreg
  1768  000C3A  0100               	movlb	0	; () banked
  1769  000C3C  6FA7               	movwf	Send_put@_data& (0+255),b
  1770                           
  1771                           ;UART.c: 130: UART_buff_put(&output_buffer, _data);
  1772  000C3E  0E00               	movlw	low _output_buffer
  1773  000C40  6E21               	movwf	UART_buff_put@_this,c
  1774  000C42  0E02               	movlw	high _output_buffer
  1775  000C44  6E22               	movwf	UART_buff_put@_this+1,c
  1776  000C46  C0A7  F023         	movff	Send_put@_data,UART_buff_put@c
  1777  000C4A  ECCD  F002         	call	_UART_buff_put	;wreg free
  1778                           
  1779                           ;UART.c: 131: if (Transmit_stall == 1) {
  1780  000C4E  0444               	decf	_Transmit_stall,w,c
  1781  000C50  A4D8               	btfss	status,2,c
  1782  000C52  0012               	return	
  1783                           
  1784                           ;UART.c: 132: Transmit_stall = 0;
  1785  000C54  0E00               	movlw	0
  1786  000C56  6E44               	movwf	_Transmit_stall,c
  1787                           
  1788                           ;UART.c: 133: TXREG1 = UART_buff_get(&output_buffer);
  1789  000C58  0E00               	movlw	low _output_buffer
  1790  000C5A  6E21               	movwf	UART_buff_get@_this,c
  1791  000C5C  0E02               	movlw	high _output_buffer
  1792  000C5E  6E22               	movwf	UART_buff_get@_this+1,c
  1793  000C60  EC5F  F004         	call	_UART_buff_get	;wreg free
  1794  000C64  6EAD               	movwf	4013,c	;volatile
  1795                           
  1796                           ;UART.c: 134: PIE1bits.TX1IE = 1;
  1797  000C66  889D               	bsf	3997,4,c	;volatile
  1798  000C68  0012               	return	
  1799  000C6A                     __end_of_Send_put:
  1800                           	opt stack 0
  1801                           tblptru	equ	0xFF8
  1802                           tblptrh	equ	0xFF7
  1803                           tblptrl	equ	0xFF6
  1804                           tablat	equ	0xFF5
  1805                           postinc0	equ	0xFEE
  1806                           wreg	equ	0xFE8
  1807                           indf1	equ	0xFE7
  1808                           postdec1	equ	0xFE5
  1809                           fsr1h	equ	0xFE2
  1810                           fsr1l	equ	0xFE1
  1811                           indf2	equ	0xFDF
  1812                           fsr2h	equ	0xFDA
  1813                           fsr2l	equ	0xFD9
  1814                           status	equ	0xFD8
  1815                           
  1816 ;; *************** function _UART_buff_put *****************
  1817 ;; Defined at:
  1818 ;;		line 67 in file "UART.c"
  1819 ;; Parameters:    Size  Location     Type
  1820 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  1821 ;;		 -> output_buffer(206), input_buffer(206), 
  1822 ;;  c               1   34[COMRAM] const unsigned char 
  1823 ;; Auto vars:     Size  Location     Type
  1824 ;;		None
  1825 ;; Return value:  Size  Location     Type
  1826 ;;                  1    wreg      void 
  1827 ;; Registers used:
  1828 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1829 ;; Tracked objects:
  1830 ;;		On entry : 0/0
  1831 ;;		On exit  : 0/0
  1832 ;;		Unchanged: 0/0
  1833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1834 ;;      Params:         3       0       0       0       0       0       0
  1835 ;;      Locals:         0       0       0       0       0       0       0
  1836 ;;      Temps:          2       0       0       0       0       0       0
  1837 ;;      Totals:         5       0       0       0       0       0       0
  1838 ;;Total ram usage:        5 bytes
  1839 ;; Hardware stack levels used:    1
  1840 ;; Hardware stack levels required when called:    5
  1841 ;; This function calls:
  1842 ;;		_UART_buff_modulo_inc
  1843 ;; This function is called by:
  1844 ;;		_Send_put
  1845 ;; This function uses a non-reentrant model
  1846 ;;
  1847                           
  1848                           	psect	text6
  1849  00059A                     __ptext6:
  1850                           	opt stack 0
  1851  00059A                     _UART_buff_put:
  1852                           	opt stack 21
  1853                           
  1854                           ;UART.c: 68: if (_this->count < 200) {
  1855                           
  1856                           ;incstack = 0
  1857  00059A  EE20 F0CC          	lfsr	2,204
  1858  00059E  5021               	movf	UART_buff_put@_this,w,c
  1859  0005A0  26D9               	addwf	fsr2l,f,c
  1860  0005A2  5022               	movf	UART_buff_put@_this+1,w,c
  1861  0005A4  22DA               	addwfc	fsr2h,f,c
  1862  0005A6  0E01               	movlw	1
  1863  0005A8  BEDB               	btfsc	plusw2,7,c
  1864  0005AA  D007               	goto	l2306
  1865  0005AC  0E01               	movlw	1
  1866  0005AE  50DB               	movf	plusw2,w,c
  1867  0005B0  E13A               	bnz	l2312
  1868  0005B2  0EC8               	movlw	200
  1869  0005B4  5CDE               	subwf	postinc2,w,c
  1870  0005B6  B0D8               	btfsc	status,0,c
  1871  0005B8  D036               	goto	l2312
  1872  0005BA                     l2306:
  1873                           
  1874                           ;UART.c: 69: _this->buf[_this->head] = c;
  1875  0005BA  EE20 F0C8          	lfsr	2,200
  1876  0005BE  5021               	movf	UART_buff_put@_this,w,c
  1877  0005C0  26D9               	addwf	fsr2l,f,c
  1878  0005C2  5022               	movf	UART_buff_put@_this+1,w,c
  1879  0005C4  22DA               	addwfc	fsr2h,f,c
  1880  0005C6  CFDE F024          	movff	postinc2,??_UART_buff_put
  1881  0005CA  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  1882  0005CE  5024               	movf	??_UART_buff_put,w,c
  1883  0005D0  2421               	addwf	UART_buff_put@_this,w,c
  1884  0005D2  6ED9               	movwf	fsr2l,c
  1885  0005D4  5025               	movf	??_UART_buff_put+1,w,c
  1886  0005D6  2022               	addwfc	UART_buff_put@_this+1,w,c
  1887  0005D8  6EDA               	movwf	fsr2h,c
  1888  0005DA  C023  FFDF         	movff	UART_buff_put@c,indf2
  1889                           
  1890                           ;UART.c: 70: _this->head = UART_buff_modulo_inc(_this->head, 200);
  1891  0005DE  EE20 F0C8          	lfsr	2,200
  1892  0005E2  5021               	movf	UART_buff_put@_this,w,c
  1893  0005E4  26D9               	addwf	fsr2l,f,c
  1894  0005E6  5022               	movf	UART_buff_put@_this+1,w,c
  1895  0005E8  22DA               	addwfc	fsr2h,f,c
  1896  0005EA  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  1897  0005EE  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  1898  0005F2  0E00               	movlw	0
  1899  0005F4  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  1900  0005F6  0EC8               	movlw	200
  1901  0005F8  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  1902  0005FA  EC4B  F006         	call	_UART_buff_modulo_inc	;wreg free
  1903  0005FE  EE20 F0C8          	lfsr	2,200
  1904  000602  5021               	movf	UART_buff_put@_this,w,c
  1905  000604  26D9               	addwf	fsr2l,f,c
  1906  000606  5022               	movf	UART_buff_put@_this+1,w,c
  1907  000608  22DA               	addwfc	fsr2h,f,c
  1908  00060A  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  1909  00060E  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  1910                           
  1911                           ;UART.c: 71: ++_this->count;
  1912  000612  EE20 F0CC          	lfsr	2,204
  1913  000616  5021               	movf	UART_buff_put@_this,w,c
  1914  000618  26D9               	addwf	fsr2l,f,c
  1915  00061A  5022               	movf	UART_buff_put@_this+1,w,c
  1916  00061C  22DA               	addwfc	fsr2h,f,c
  1917  00061E  2ADE               	incf	postinc2,f,c
  1918  000620  0E00               	movlw	0
  1919  000622  22DD               	addwfc	postdec2,f,c
  1920                           
  1921                           ;UART.c: 72: } else {
  1922  000624  0012               	return	
  1923  000626                     l2312:
  1924                           
  1925                           ;UART.c: 73: _this->buf[_this->head] = c;
  1926  000626  EE20 F0C8          	lfsr	2,200
  1927  00062A  5021               	movf	UART_buff_put@_this,w,c
  1928  00062C  26D9               	addwf	fsr2l,f,c
  1929  00062E  5022               	movf	UART_buff_put@_this+1,w,c
  1930  000630  22DA               	addwfc	fsr2h,f,c
  1931  000632  CFDE F024          	movff	postinc2,??_UART_buff_put
  1932  000636  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  1933  00063A  5024               	movf	??_UART_buff_put,w,c
  1934  00063C  2421               	addwf	UART_buff_put@_this,w,c
  1935  00063E  6ED9               	movwf	fsr2l,c
  1936  000640  5025               	movf	??_UART_buff_put+1,w,c
  1937  000642  2022               	addwfc	UART_buff_put@_this+1,w,c
  1938  000644  6EDA               	movwf	fsr2h,c
  1939  000646  C023  FFDF         	movff	UART_buff_put@c,indf2
  1940                           
  1941                           ;UART.c: 74: _this->head = UART_buff_modulo_inc(_this->head, 200);
  1942  00064A  EE20 F0C8          	lfsr	2,200
  1943  00064E  5021               	movf	UART_buff_put@_this,w,c
  1944  000650  26D9               	addwf	fsr2l,f,c
  1945  000652  5022               	movf	UART_buff_put@_this+1,w,c
  1946  000654  22DA               	addwfc	fsr2h,f,c
  1947  000656  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  1948  00065A  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  1949  00065E  0E00               	movlw	0
  1950  000660  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  1951  000662  0EC8               	movlw	200
  1952  000664  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  1953  000666  EC4B  F006         	call	_UART_buff_modulo_inc	;wreg free
  1954  00066A  EE20 F0C8          	lfsr	2,200
  1955  00066E  5021               	movf	UART_buff_put@_this,w,c
  1956  000670  26D9               	addwf	fsr2l,f,c
  1957  000672  5022               	movf	UART_buff_put@_this+1,w,c
  1958  000674  22DA               	addwfc	fsr2h,f,c
  1959  000676  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  1960  00067A  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  1961                           
  1962                           ;UART.c: 75: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  1963  00067E  EE20 F0CA          	lfsr	2,202
  1964  000682  5021               	movf	UART_buff_put@_this,w,c
  1965  000684  26D9               	addwf	fsr2l,f,c
  1966  000686  5022               	movf	UART_buff_put@_this+1,w,c
  1967  000688  22DA               	addwfc	fsr2h,f,c
  1968  00068A  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  1969  00068E  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  1970  000692  0E00               	movlw	0
  1971  000694  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  1972  000696  0EC8               	movlw	200
  1973  000698  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  1974  00069A  EC4B  F006         	call	_UART_buff_modulo_inc	;wreg free
  1975  00069E  EE20 F0CA          	lfsr	2,202
  1976  0006A2  5021               	movf	UART_buff_put@_this,w,c
  1977  0006A4  26D9               	addwf	fsr2l,f,c
  1978  0006A6  5022               	movf	UART_buff_put@_this+1,w,c
  1979  0006A8  22DA               	addwfc	fsr2h,f,c
  1980  0006AA  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  1981  0006AE  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  1982  0006B2  0012               	return	
  1983  0006B4                     __end_of_UART_buff_put:
  1984                           	opt stack 0
  1985                           tblptru	equ	0xFF8
  1986                           tblptrh	equ	0xFF7
  1987                           tblptrl	equ	0xFF6
  1988                           tablat	equ	0xFF5
  1989                           postinc0	equ	0xFEE
  1990                           wreg	equ	0xFE8
  1991                           indf1	equ	0xFE7
  1992                           postdec1	equ	0xFE5
  1993                           fsr1h	equ	0xFE2
  1994                           fsr1l	equ	0xFE1
  1995                           indf2	equ	0xFDF
  1996                           postinc2	equ	0xFDE
  1997                           postdec2	equ	0xFDD
  1998                           plusw2	equ	0xFDB
  1999                           fsr2h	equ	0xFDA
  2000                           fsr2l	equ	0xFD9
  2001                           status	equ	0xFD8
  2002                           
  2003 ;; *************** function _GetFaults *****************
  2004 ;; Defined at:
  2005 ;;		line 41 in file "Function.c"
  2006 ;; Parameters:    Size  Location     Type
  2007 ;;  num             1    wreg     unsigned char 
  2008 ;; Auto vars:     Size  Location     Type
  2009 ;;  num             1   26[COMRAM] unsigned char 
  2010 ;; Return value:  Size  Location     Type
  2011 ;;                  1    wreg      unsigned char 
  2012 ;; Registers used:
  2013 ;;		wreg, status,2, status,0
  2014 ;; Tracked objects:
  2015 ;;		On entry : 0/0
  2016 ;;		On exit  : 0/0
  2017 ;;		Unchanged: 0/0
  2018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2019 ;;      Params:         0       0       0       0       0       0       0
  2020 ;;      Locals:         1       0       0       0       0       0       0
  2021 ;;      Temps:          0       0       0       0       0       0       0
  2022 ;;      Totals:         1       0       0       0       0       0       0
  2023 ;;Total ram usage:        1 bytes
  2024 ;; Hardware stack levels used:    1
  2025 ;; Hardware stack levels required when called:    4
  2026 ;; This function calls:
  2027 ;;		Nothing
  2028 ;; This function is called by:
  2029 ;;		_sendData
  2030 ;; This function uses a non-reentrant model
  2031 ;;
  2032                           
  2033                           	psect	text7
  2034  000D76                     __ptext7:
  2035                           	opt stack 0
  2036  000D76                     _GetFaults:
  2037                           	opt stack 23
  2038                           
  2039                           ;incstack = 0
  2040                           ;GetFaults@num stored from wreg
  2041  000D76  6E1B               	movwf	GetFaults@num,c
  2042                           
  2043                           ;Function.c: 42: if(num == 1){
  2044  000D78  041B               	decf	GetFaults@num,w,c
  2045  000D7A  A4D8               	btfss	status,2,c
  2046  000D7C  D002               	goto	l2358
  2047                           
  2048                           ;Function.c: 43: return ByteHigh;
  2049  000D7E  503B               	movf	_ByteHigh,w,c
  2050  000D80  0012               	return	
  2051  000D82                     l2358:
  2052                           
  2053                           ;Function.c: 44: }
  2054                           ;Function.c: 45: if(num == 0){
  2055  000D82  501B               	movf	GetFaults@num,w,c
  2056  000D84  A4D8               	btfss	status,2,c
  2057  000D86  0012               	return	
  2058                           
  2059                           ;Function.c: 46: return ByteLow;
  2060  000D88  503C               	movf	_ByteLow,w,c
  2061  000D8A  0012               	return	
  2062  000D8C                     __end_of_GetFaults:
  2063                           	opt stack 0
  2064                           tblptru	equ	0xFF8
  2065                           tblptrh	equ	0xFF7
  2066                           tblptrl	equ	0xFF6
  2067                           tablat	equ	0xFF5
  2068                           postinc0	equ	0xFEE
  2069                           wreg	equ	0xFE8
  2070                           indf1	equ	0xFE7
  2071                           postdec1	equ	0xFE5
  2072                           fsr1h	equ	0xFE2
  2073                           fsr1l	equ	0xFE1
  2074                           indf2	equ	0xFDF
  2075                           postinc2	equ	0xFDE
  2076                           postdec2	equ	0xFDD
  2077                           plusw2	equ	0xFDB
  2078                           fsr2h	equ	0xFDA
  2079                           fsr2l	equ	0xFD9
  2080                           status	equ	0xFD8
  2081                           
  2082 ;; *************** function _Delay *****************
  2083 ;; Defined at:
  2084 ;;		line 206 in file "Function.c"
  2085 ;; Parameters:    Size  Location     Type
  2086 ;;  wait            2   26[COMRAM] int 
  2087 ;; Auto vars:     Size  Location     Type
  2088 ;;  x               2   29[COMRAM] int 
  2089 ;; Return value:  Size  Location     Type
  2090 ;;                  1    wreg      void 
  2091 ;; Registers used:
  2092 ;;		wreg, status,2, status,0
  2093 ;; Tracked objects:
  2094 ;;		On entry : 0/0
  2095 ;;		On exit  : 0/0
  2096 ;;		Unchanged: 0/0
  2097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2098 ;;      Params:         2       0       0       0       0       0       0
  2099 ;;      Locals:         2       0       0       0       0       0       0
  2100 ;;      Temps:          1       0       0       0       0       0       0
  2101 ;;      Totals:         5       0       0       0       0       0       0
  2102 ;;Total ram usage:        5 bytes
  2103 ;; Hardware stack levels used:    1
  2104 ;; Hardware stack levels required when called:    4
  2105 ;; This function calls:
  2106 ;;		Nothing
  2107 ;; This function is called by:
  2108 ;;		_respondECU
  2109 ;; This function uses a non-reentrant model
  2110 ;;
  2111                           
  2112                           	psect	text8
  2113  000BD4                     __ptext8:
  2114                           	opt stack 0
  2115  000BD4                     _Delay:
  2116                           	opt stack 24
  2117                           
  2118                           ;Function.c: 207: int x;
  2119                           ;Function.c: 208: for (x = 0; x < wait; x++) {
  2120                           
  2121                           ;incstack = 0
  2122  000BD4  0E00               	movlw	0
  2123  000BD6  6E1F               	movwf	Delay@x+1,c
  2124  000BD8  0E00               	movlw	0
  2125  000BDA  6E1E               	movwf	Delay@x,c
  2126  000BDC  D00A               	goto	l446
  2127  000BDE                     l1912:
  2128                           
  2129                           ;Function.c: 209: _delay((unsigned long)((1)*(16000000/4000.0)));
  2130  000BDE  0E06               	movlw	6
  2131  000BE0  6E1D               	movwf	??_Delay& (0+255),c
  2132  000BE2  0E30               	movlw	48
  2133  000BE4                     u1817:
  2134  000BE4  2EE8               	decfsz	wreg,f,c
  2135  000BE6  D7FE               	bra	u1817
  2136  000BE8  2E1D               	decfsz	??_Delay& (0+255),f,c
  2137  000BEA  D7FC               	bra	u1817
  2138  000BEC  D000               	nop2	
  2139  000BEE  4A1E               	infsnz	Delay@x,f,c
  2140  000BF0  2A1F               	incf	Delay@x+1,f,c
  2141  000BF2                     l446:
  2142  000BF2  501B               	movf	Delay@wait,w,c
  2143  000BF4  5C1E               	subwf	Delay@x,w,c
  2144  000BF6  501F               	movf	Delay@x+1,w,c
  2145  000BF8  0A80               	xorlw	128
  2146  000BFA  6E1D               	movwf	??_Delay& (0+255),c
  2147  000BFC  501C               	movf	Delay@wait+1,w,c
  2148  000BFE  0A80               	xorlw	128
  2149  000C00  581D               	subwfb	??_Delay& (0+255),w,c
  2150  000C02  B0D8               	btfsc	status,0,c
  2151  000C04  0012               	return	
  2152  000C06  D7EB               	goto	l1912
  2153  000C08                     __end_of_Delay:
  2154                           	opt stack 0
  2155                           tblptru	equ	0xFF8
  2156                           tblptrh	equ	0xFF7
  2157                           tblptrl	equ	0xFF6
  2158                           tablat	equ	0xFF5
  2159                           postinc0	equ	0xFEE
  2160                           wreg	equ	0xFE8
  2161                           indf1	equ	0xFE7
  2162                           postdec1	equ	0xFE5
  2163                           fsr1h	equ	0xFE2
  2164                           fsr1l	equ	0xFE1
  2165                           indf2	equ	0xFDF
  2166                           postinc2	equ	0xFDE
  2167                           postdec2	equ	0xFDD
  2168                           plusw2	equ	0xFDB
  2169                           fsr2h	equ	0xFDA
  2170                           fsr2l	equ	0xFD9
  2171                           status	equ	0xFD8
  2172                           
  2173 ;; *************** function _receiveData *****************
  2174 ;; Defined at:
  2175 ;;		line 168 in file "FastTransfer.c"
  2176 ;; Parameters:    Size  Location     Type
  2177 ;;		None
  2178 ;; Auto vars:     Size  Location     Type
  2179 ;;  result          3   20[BANK0 ] struct .
  2180 ;;  i               2   23[BANK0 ] int 
  2181 ;;  Data            1   25[BANK0 ] unsigned char 
  2182 ;;  CS              1   19[BANK0 ] unsigned char 
  2183 ;; Return value:  Size  Location     Type
  2184 ;;                  1    wreg      unsigned char 
  2185 ;; Registers used:
  2186 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2187 ;; Tracked objects:
  2188 ;;		On entry : 0/0
  2189 ;;		On exit  : 0/0
  2190 ;;		Unchanged: 0/0
  2191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2192 ;;      Params:         0       0       0       0       0       0       0
  2193 ;;      Locals:         0       7       0       0       0       0       0
  2194 ;;      Temps:          0       5       0       0       0       0       0
  2195 ;;      Totals:         0      12       0       0       0       0       0
  2196 ;;Total ram usage:       12 bytes
  2197 ;; Hardware stack levels used:    1
  2198 ;; Hardware stack levels required when called:    7
  2199 ;; This function calls:
  2200 ;;		_CRC8
  2201 ;;		_Receive_available
  2202 ;;		_Receive_get
  2203 ;;		_cobs_decode
  2204 ;; This function is called by:
  2205 ;;		_updateComms
  2206 ;; This function uses a non-reentrant model
  2207 ;;
  2208                           
  2209                           	psect	text9
  2210  0007CE                     __ptext9:
  2211                           	opt stack 0
  2212  0007CE                     _receiveData:
  2213                           	opt stack 22
  2214                           
  2215                           ;FastTransfer.c: 170: if(Receive_available()>5){
  2216                           
  2217                           ;incstack = 0
  2218  0007CE  ECC6  F006         	call	_Receive_available	;wreg free
  2219  0007D2  BE1E               	btfsc	?_Receive_available+1,7,c
  2220  0007D4  D072               	goto	l2614
  2221  0007D6  501E               	movf	?_Receive_available+1,w,c
  2222  0007D8  E104               	bnz	u1690
  2223  0007DA  0E06               	movlw	6
  2224  0007DC  5C1D               	subwf	?_Receive_available,w,c
  2225  0007DE  A0D8               	btfss	status,0,c
  2226  0007E0  D06C               	goto	l2614
  2227  0007E2                     u1690:
  2228                           
  2229                           ;FastTransfer.c: 171: if(Receive_get() == 8){
  2230  0007E2  EC03  F007         	call	_Receive_get	;wreg free
  2231  0007E6  0A08               	xorlw	8
  2232  0007E8  A4D8               	btfss	status,2,c
  2233  0007EA  D067               	goto	l2614
  2234                           
  2235                           ;FastTransfer.c: 172: int i = 0;
  2236  0007EC  0E00               	movlw	0
  2237  0007EE  0100               	movlb	0	; () banked
  2238  0007F0  6FBF               	movwf	(receiveData@i+1)& (0+255),b
  2239  0007F2  0E00               	movlw	0
  2240  0007F4  6FBE               	movwf	receiveData@i& (0+255),b
  2241                           
  2242                           ;FastTransfer.c: 173: char Data = 0;
  2243  0007F6  0E00               	movlw	0
  2244  0007F8  0100               	movlb	0	; () banked
  2245  0007FA  6FC0               	movwf	receiveData@Data& (0+255),b
  2246  0007FC                     l2594:
  2247                           
  2248                           ; BSR set to: 0
  2249                           ;FastTransfer.c: 175: Data = Receive_get();
  2250  0007FC  EC03  F007         	call	_Receive_get	;wreg free
  2251  000800  0100               	movlb	0	; () banked
  2252  000802  6FC0               	movwf	receiveData@Data& (0+255),b
  2253                           
  2254                           ; BSR set to: 0
  2255                           ;FastTransfer.c: 176: ReciveArray[i] = Data;
  2256  000804  0ECE               	movlw	low _ReciveArray
  2257  000806  0100               	movlb	0	; () banked
  2258  000808  25BE               	addwf	receiveData@i& (0+255),w,b
  2259  00080A  6ED9               	movwf	fsr2l,c
  2260  00080C  0E01               	movlw	high _ReciveArray
  2261  00080E  0100               	movlb	0	; () banked
  2262  000810  21BF               	addwfc	(receiveData@i+1)& (0+255),w,b
  2263  000812  6EDA               	movwf	fsr2h,c
  2264  000814  C0C0  FFDF         	movff	receiveData@Data,indf2
  2265                           
  2266                           ; BSR set to: 0
  2267                           ;FastTransfer.c: 177: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2268  000818  0E85               	movlw	133
  2269  00081A                     u1827:
  2270  00081A  2EE8               	decfsz	wreg,f,c
  2271  00081C  D7FE               	bra	u1827
  2272  00081E  F000               	nop	
  2273                           
  2274                           ;FastTransfer.c: 178: i++;
  2275  000820  0100               	movlb	0	; () banked
  2276  000822  4BBE               	infsnz	receiveData@i& (0+255),f,b
  2277  000824  2BBF               	incf	(receiveData@i+1)& (0+255),f,b
  2278                           
  2279                           ; BSR set to: 0
  2280                           ;FastTransfer.c: 179: }while(Data != 0x00);
  2281  000826  0100               	movlb	0	; () banked
  2282  000828  51C0               	movf	receiveData@Data& (0+255),w,b
  2283  00082A  0100               	movlb	0	; () banked
  2284  00082C  A4D8               	btfss	status,2,c
  2285  00082E  D7E6               	goto	l2594
  2286                           
  2287                           ; BSR set to: 0
  2288                           ;FastTransfer.c: 181: cobs_decode_result result;
  2289                           ;FastTransfer.c: 183: result = cobs_decode(ProcessArray, sizeof(ProcessArray), ReciveArr
      +                          ay, i);
  2290                           
  2291                           ; BSR set to: 0
  2292  000830  0E6E               	movlw	low _ProcessArray
  2293  000832  6E1B               	movwf	cobs_decode@dst_buf_ptr,c
  2294  000834  0E00               	movlw	high _ProcessArray
  2295  000836  6E1C               	movwf	cobs_decode@dst_buf_ptr+1,c
  2296  000838  0E00               	movlw	0
  2297  00083A  6E1E               	movwf	cobs_decode@dst_buf_len+1,c
  2298  00083C  0E1E               	movlw	30
  2299  00083E  6E1D               	movwf	cobs_decode@dst_buf_len,c
  2300  000840  0ECE               	movlw	low _ReciveArray
  2301  000842  6E1F               	movwf	cobs_decode@src_ptr,c
  2302  000844  0E01               	movlw	high _ReciveArray
  2303  000846  6E20               	movwf	cobs_decode@src_ptr+1,c
  2304  000848  C0BE  F021         	movff	receiveData@i,cobs_decode@src_len
  2305  00084C  C0BF  F022         	movff	receiveData@i+1,cobs_decode@src_len+1
  2306  000850  EC52  F000         	call	_cobs_decode	;wreg free
  2307  000854  C01B  F0BB         	movff	?_cobs_decode,receiveData@result
  2308  000858  C01C  F0BC         	movff	?_cobs_decode+1,receiveData@result+1
  2309  00085C  C01D  F0BD         	movff	?_cobs_decode+2,receiveData@result+2
  2310                           
  2311                           ;FastTransfer.c: 185: char CS = CRC8(ProcessArray, result.out_len-1);
  2312  000860  0E6E               	movlw	low _ProcessArray
  2313  000862  6E1B               	movwf	CRC8@data,c
  2314  000864  0E00               	movlw	high _ProcessArray
  2315  000866  6E1C               	movwf	CRC8@data+1,c
  2316  000868  0100               	movlb	0	; () banked
  2317  00086A  05BB               	decf	receiveData@result& (0+255),w,b
  2318  00086C  6E1D               	movwf	CRC8@len,c
  2319  00086E  EC8C  F005         	call	_CRC8	;wreg free
  2320  000872  0100               	movlb	0	; () banked
  2321  000874  6FBA               	movwf	receiveData@CS& (0+255),b
  2322                           
  2323                           ; BSR set to: 0
  2324                           ;FastTransfer.c: 187: if(ProcessArray[result.out_len-1] == CS){
  2325  000876  0EFF               	movlw	255
  2326  000878  0100               	movlb	0	; () banked
  2327  00087A  6FB5               	movwf	??_receiveData& (0+255),b
  2328  00087C  0EFF               	movlw	255
  2329  00087E  0100               	movlb	0	; () banked
  2330  000880  6FB6               	movwf	(??_receiveData+1)& (0+255),b
  2331  000882  C0BB  F0B7         	movff	receiveData@result,??_receiveData+2
  2332  000886  C0BC  F0B8         	movff	receiveData@result+1,??_receiveData+3
  2333  00088A  0100               	movlb	0	; () banked
  2334  00088C  51B5               	movf	??_receiveData& (0+255),w,b
  2335  00088E  0100               	movlb	0	; () banked
  2336  000890  27B7               	addwf	(??_receiveData+2)& (0+255),f,b
  2337  000892  0100               	movlb	0	; () banked
  2338  000894  51B6               	movf	(??_receiveData+1)& (0+255),w,b
  2339  000896  0100               	movlb	0	; () banked
  2340  000898  23B8               	addwfc	(??_receiveData+3)& (0+255),f,b
  2341  00089A  0E6E               	movlw	low _ProcessArray
  2342  00089C  0100               	movlb	0	; () banked
  2343  00089E  25B7               	addwf	(??_receiveData+2)& (0+255),w,b
  2344  0008A0  6ED9               	movwf	fsr2l,c
  2345  0008A2  0E00               	movlw	high _ProcessArray
  2346  0008A4  0100               	movlb	0	; () banked
  2347  0008A6  21B8               	addwfc	(??_receiveData+3)& (0+255),w,b
  2348  0008A8  6EDA               	movwf	fsr2h,c
  2349  0008AA  0100               	movlb	0	; () banked
  2350  0008AC  51BA               	movf	receiveData@CS& (0+255),w,b
  2351  0008AE  18DE               	xorwf	postinc2,w,c
  2352  0008B0  A4D8               	btfss	status,2,c
  2353  0008B2  D003               	goto	l2614
  2354                           
  2355                           ; BSR set to: 0
  2356                           ;FastTransfer.c: 188: LATAbits.LATA3 ^= 1;
  2357  0008B4  7689               	btg	3977,3,c	;volatile
  2358                           
  2359                           ; BSR set to: 0
  2360                           ;FastTransfer.c: 189: return 1;
  2361  0008B6  0E01               	movlw	1
  2362                           
  2363                           ; BSR set to: 0
  2364  0008B8  0012               	return	
  2365  0008BA                     l2614:
  2366                           
  2367                           ;FastTransfer.c: 198: }
  2368                           ;FastTransfer.c: 200: return 0;
  2369  0008BA  0E00               	movlw	0
  2370  0008BC  0012               	return	
  2371  0008BE                     __end_of_receiveData:
  2372                           	opt stack 0
  2373                           tblptru	equ	0xFF8
  2374                           tblptrh	equ	0xFF7
  2375                           tblptrl	equ	0xFF6
  2376                           tablat	equ	0xFF5
  2377                           postinc0	equ	0xFEE
  2378                           wreg	equ	0xFE8
  2379                           indf1	equ	0xFE7
  2380                           postdec1	equ	0xFE5
  2381                           fsr1h	equ	0xFE2
  2382                           fsr1l	equ	0xFE1
  2383                           indf2	equ	0xFDF
  2384                           postinc2	equ	0xFDE
  2385                           postdec2	equ	0xFDD
  2386                           plusw2	equ	0xFDB
  2387                           fsr2h	equ	0xFDA
  2388                           fsr2l	equ	0xFD9
  2389                           status	equ	0xFD8
  2390                           
  2391 ;; *************** function _cobs_decode *****************
  2392 ;; Defined at:
  2393 ;;		line 115 in file "COBS.c"
  2394 ;; Parameters:    Size  Location     Type
  2395 ;;  dst_buf_ptr     2   26[COMRAM] PTR unsigned char 
  2396 ;;		 -> ProcessArray(30), 
  2397 ;;  dst_buf_len     2   28[COMRAM] unsigned int 
  2398 ;;  src_ptr         2   30[COMRAM] PTR const unsigned char 
  2399 ;;		 -> ReciveArray(30), 
  2400 ;;  src_len         2   32[COMRAM] unsigned int 
  2401 ;; Auto vars:     Size  Location     Type
  2402 ;;  result          3   11[BANK0 ] struct .
  2403 ;;  dst_write_pt    2    8[BANK0 ] PTR unsigned char 
  2404 ;;		 -> ProcessArray(30), 
  2405 ;;  remaining_by    2    6[BANK0 ] unsigned int 
  2406 ;;  dst_buf_end_    2    2[BANK0 ] PTR unsigned char 
  2407 ;;		 -> ProcessArray(30), 
  2408 ;;  src_end_ptr     2    0[BANK0 ] PTR const unsigned char 
  2409 ;;		 -> ReciveArray(30), 
  2410 ;;  len_code        1   10[BANK0 ] unsigned char 
  2411 ;;  i               1    5[BANK0 ] unsigned char 
  2412 ;;  src_byte        1    4[BANK0 ] unsigned char 
  2413 ;; Return value:  Size  Location     Type
  2414 ;;                  3   26[COMRAM] struct .
  2415 ;; Registers used:
  2416 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2417 ;; Tracked objects:
  2418 ;;		On entry : 0/0
  2419 ;;		On exit  : 0/0
  2420 ;;		Unchanged: 0/0
  2421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2422 ;;      Params:         8       0       0       0       0       0       0
  2423 ;;      Locals:         0      14       0       0       0       0       0
  2424 ;;      Temps:          2       0       0       0       0       0       0
  2425 ;;      Totals:        10      14       0       0       0       0       0
  2426 ;;Total ram usage:       24 bytes
  2427 ;; Hardware stack levels used:    1
  2428 ;; Hardware stack levels required when called:    4
  2429 ;; This function calls:
  2430 ;;		Nothing
  2431 ;; This function is called by:
  2432 ;;		_receiveData
  2433 ;; This function uses a non-reentrant model
  2434 ;;
  2435                           
  2436                           	psect	text10
  2437  0000A4                     __ptext10:
  2438                           	opt stack 0
  2439  0000A4                     _cobs_decode:
  2440                           	opt stack 24
  2441                           
  2442                           ;COBS.c: 117: cobs_decode_result result = { 0, COBS_DECODE_OK };
  2443                           
  2444                           ;incstack = 0
  2445  0000A4  C064  F0B2         	movff	cobs_decode@F198,cobs_decode@result
  2446  0000A8  C065  F0B3         	movff	cobs_decode@F198+1,cobs_decode@result+1
  2447  0000AC  C066  F0B4         	movff	cobs_decode@F198+2,cobs_decode@result+2
  2448                           
  2449                           ;COBS.c: 118: const uint8_t * src_end_ptr = src_ptr + src_len;
  2450  0000B0  5021               	movf	cobs_decode@src_len,w,c
  2451  0000B2  241F               	addwf	cobs_decode@src_ptr,w,c
  2452  0000B4  0100               	movlb	0	; () banked
  2453  0000B6  6FA7               	movwf	cobs_decode@src_end_ptr& (0+255),b
  2454  0000B8  5022               	movf	cobs_decode@src_len+1,w,c
  2455  0000BA  2020               	addwfc	cobs_decode@src_ptr+1,w,c
  2456  0000BC  0100               	movlb	0	; () banked
  2457  0000BE  6FA8               	movwf	(cobs_decode@src_end_ptr+1)& (0+255),b
  2458                           
  2459                           ;COBS.c: 119: uint8_t * dst_buf_end_ptr = dst_buf_ptr + dst_buf_len;
  2460  0000C0  501D               	movf	cobs_decode@dst_buf_len,w,c
  2461  0000C2  241B               	addwf	cobs_decode@dst_buf_ptr,w,c
  2462  0000C4  0100               	movlb	0	; () banked
  2463  0000C6  6FA9               	movwf	cobs_decode@dst_buf_end_ptr& (0+255),b
  2464  0000C8  501E               	movf	cobs_decode@dst_buf_len+1,w,c
  2465  0000CA  201C               	addwfc	cobs_decode@dst_buf_ptr+1,w,c
  2466  0000CC  0100               	movlb	0	; () banked
  2467  0000CE  6FAA               	movwf	(cobs_decode@dst_buf_end_ptr+1)& (0+255),b
  2468                           
  2469                           ;COBS.c: 120: uint8_t * dst_write_ptr = dst_buf_ptr;
  2470  0000D0  C01B  F0AF         	movff	cobs_decode@dst_buf_ptr,cobs_decode@dst_write_ptr
  2471  0000D4  C01C  F0B0         	movff	cobs_decode@dst_buf_ptr+1,cobs_decode@dst_write_ptr+1
  2472                           
  2473                           ;COBS.c: 121: size_t remaining_bytes;
  2474                           ;COBS.c: 122: uint8_t src_byte;
  2475                           ;COBS.c: 123: uint8_t i;
  2476                           ;COBS.c: 124: uint8_t len_code;
  2477                           ;COBS.c: 128: if ((dst_buf_ptr == (0)) || (src_ptr == (0)))
  2478  0000D8  501B               	movf	cobs_decode@dst_buf_ptr,w,c
  2479  0000DA  101C               	iorwf	cobs_decode@dst_buf_ptr+1,w,c
  2480  0000DC  B4D8               	btfsc	status,2,c
  2481  0000DE  D004               	goto	l2508
  2482                           
  2483                           ; BSR set to: 0
  2484  0000E0  501F               	movf	cobs_decode@src_ptr,w,c
  2485  0000E2  1020               	iorwf	cobs_decode@src_ptr+1,w,c
  2486  0000E4  A4D8               	btfss	status,2,c
  2487  0000E6  D00A               	goto	l2514
  2488  0000E8                     l2508:
  2489                           
  2490                           ; BSR set to: 0
  2491                           ;COBS.c: 129: {
  2492                           ;COBS.c: 130: result.status = COBS_DECODE_NULL_POINTER;
  2493  0000E8  0E01               	movlw	1
  2494  0000EA  0100               	movlb	0	; () banked
  2495  0000EC  6FB4               	movwf	(cobs_decode@result+2)& (0+255),b
  2496                           
  2497                           ; BSR set to: 0
  2498                           ;COBS.c: 131: return result;
  2499  0000EE  C0B2  F01B         	movff	cobs_decode@result,?_cobs_decode
  2500  0000F2  C0B3  F01C         	movff	cobs_decode@result+1,?_cobs_decode+1
  2501  0000F6  C0B4  F01D         	movff	cobs_decode@result+2,?_cobs_decode+2
  2502                           
  2503                           ; BSR set to: 0
  2504  0000FA  0012               	return	
  2505  0000FC                     l2514:
  2506                           
  2507                           ; BSR set to: 0
  2508                           ;COBS.c: 132: }
  2509                           ;COBS.c: 134: if (src_len != 0)
  2510  0000FC  5021               	movf	cobs_decode@src_len,w,c
  2511  0000FE  1022               	iorwf	cobs_decode@src_len+1,w,c
  2512  000100  B4D8               	btfsc	status,2,c
  2513  000102  D096               	goto	l2578
  2514  000104                     l2516:
  2515                           
  2516                           ; BSR set to: 0
  2517                           ;COBS.c: 137: {
  2518                           ;COBS.c: 138: len_code = *src_ptr++;
  2519  000104  C01F  FFD9         	movff	cobs_decode@src_ptr,fsr2l
  2520  000108  C020  FFDA         	movff	cobs_decode@src_ptr+1,fsr2h
  2521  00010C  50DF               	movf	indf2,w,c
  2522  00010E  0100               	movlb	0	; () banked
  2523  000110  6FB1               	movwf	cobs_decode@len_code& (0+255),b
  2524                           
  2525                           ; BSR set to: 0
  2526  000112  4A1F               	infsnz	cobs_decode@src_ptr,f,c
  2527  000114  2A20               	incf	cobs_decode@src_ptr+1,f,c
  2528                           
  2529                           ; BSR set to: 0
  2530                           ;COBS.c: 139: if (len_code == 0)
  2531  000116  0100               	movlb	0	; () banked
  2532  000118  51B1               	movf	cobs_decode@len_code& (0+255),w,b
  2533  00011A  0100               	movlb	0	; () banked
  2534  00011C  A4D8               	btfss	status,2,c
  2535  00011E  D003               	goto	l2524
  2536                           
  2537                           ; BSR set to: 0
  2538                           ;COBS.c: 140: {
  2539                           ;COBS.c: 141: result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
  2540  000120  0100               	movlb	0	; () banked
  2541  000122  85B4               	bsf	(cobs_decode@result+2)& (0+255),2,b
  2542                           
  2543                           ;COBS.c: 142: break;
  2544  000124  D085               	goto	l2578
  2545  000126                     l2524:
  2546                           
  2547                           ; BSR set to: 0
  2548                           ;COBS.c: 143: }
  2549                           ;COBS.c: 144: len_code--;
  2550  000126  0100               	movlb	0	; () banked
  2551  000128  07B1               	decf	cobs_decode@len_code& (0+255),f,b
  2552                           
  2553                           ; BSR set to: 0
  2554                           ;COBS.c: 147: remaining_bytes = src_end_ptr - src_ptr;
  2555  00012A  C01F  F023         	movff	cobs_decode@src_ptr,??_cobs_decode
  2556  00012E  C020  F024         	movff	cobs_decode@src_ptr+1,??_cobs_decode+1
  2557  000132  1E23               	comf	??_cobs_decode,f,c
  2558  000134  1E24               	comf	??_cobs_decode+1,f,c
  2559  000136  4A23               	infsnz	??_cobs_decode,f,c
  2560  000138  2A24               	incf	??_cobs_decode+1,f,c
  2561  00013A  0100               	movlb	0	; () banked
  2562  00013C  51A7               	movf	cobs_decode@src_end_ptr& (0+255),w,b
  2563  00013E  2423               	addwf	??_cobs_decode,w,c
  2564  000140  0100               	movlb	0	; () banked
  2565  000142  6FAD               	movwf	cobs_decode@remaining_bytes& (0+255),b
  2566  000144  0100               	movlb	0	; () banked
  2567  000146  51A8               	movf	(cobs_decode@src_end_ptr+1)& (0+255),w,b
  2568  000148  2024               	addwfc	??_cobs_decode+1,w,c
  2569  00014A  0100               	movlb	0	; () banked
  2570  00014C  6FAE               	movwf	(cobs_decode@remaining_bytes+1)& (0+255),b
  2571                           
  2572                           ; BSR set to: 0
  2573                           ;COBS.c: 148: if (len_code > remaining_bytes)
  2574  00014E  0100               	movlb	0	; () banked
  2575  000150  51B1               	movf	cobs_decode@len_code& (0+255),w,b
  2576  000152  0100               	movlb	0	; () banked
  2577  000154  5DAD               	subwf	cobs_decode@remaining_bytes& (0+255),w,b
  2578  000156  0E00               	movlw	0
  2579  000158  59AE               	subwfb	(cobs_decode@remaining_bytes+1)& (0+255),w,b
  2580  00015A  B0D8               	btfsc	status,0,c
  2581  00015C  D004               	goto	l2534
  2582                           
  2583                           ; BSR set to: 0
  2584                           ;COBS.c: 149: {
  2585                           ;COBS.c: 150: result.status |= COBS_DECODE_INPUT_TOO_SHORT;
  2586  00015E  0100               	movlb	0	; () banked
  2587  000160  87B4               	bsf	(cobs_decode@result+2)& (0+255),3,b
  2588                           
  2589                           ; BSR set to: 0
  2590                           ;COBS.c: 151: len_code = remaining_bytes;
  2591  000162  C0AD  F0B1         	movff	cobs_decode@remaining_bytes,cobs_decode@len_code
  2592  000166                     l2534:
  2593                           
  2594                           ; BSR set to: 0
  2595                           ;COBS.c: 152: }
  2596                           ;COBS.c: 155: remaining_bytes = dst_buf_end_ptr - dst_write_ptr;
  2597  000166  C0AF  F023         	movff	cobs_decode@dst_write_ptr,??_cobs_decode
  2598  00016A  C0B0  F024         	movff	cobs_decode@dst_write_ptr+1,??_cobs_decode+1
  2599  00016E  1E23               	comf	??_cobs_decode,f,c
  2600  000170  1E24               	comf	??_cobs_decode+1,f,c
  2601  000172  4A23               	infsnz	??_cobs_decode,f,c
  2602  000174  2A24               	incf	??_cobs_decode+1,f,c
  2603  000176  0100               	movlb	0	; () banked
  2604  000178  51A9               	movf	cobs_decode@dst_buf_end_ptr& (0+255),w,b
  2605  00017A  2423               	addwf	??_cobs_decode,w,c
  2606  00017C  0100               	movlb	0	; () banked
  2607  00017E  6FAD               	movwf	cobs_decode@remaining_bytes& (0+255),b
  2608  000180  0100               	movlb	0	; () banked
  2609  000182  51AA               	movf	(cobs_decode@dst_buf_end_ptr+1)& (0+255),w,b
  2610  000184  2024               	addwfc	??_cobs_decode+1,w,c
  2611  000186  0100               	movlb	0	; () banked
  2612  000188  6FAE               	movwf	(cobs_decode@remaining_bytes+1)& (0+255),b
  2613                           
  2614                           ; BSR set to: 0
  2615                           ;COBS.c: 156: if (len_code > remaining_bytes)
  2616  00018A  0100               	movlb	0	; () banked
  2617  00018C  51B1               	movf	cobs_decode@len_code& (0+255),w,b
  2618  00018E  0100               	movlb	0	; () banked
  2619  000190  5DAD               	subwf	cobs_decode@remaining_bytes& (0+255),w,b
  2620  000192  0E00               	movlw	0
  2621  000194  59AE               	subwfb	(cobs_decode@remaining_bytes+1)& (0+255),w,b
  2622  000196  B0D8               	btfsc	status,0,c
  2623  000198  D004               	goto	l2542
  2624                           
  2625                           ; BSR set to: 0
  2626                           ;COBS.c: 157: {
  2627                           ;COBS.c: 158: result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
  2628  00019A  0100               	movlb	0	; () banked
  2629  00019C  83B4               	bsf	(cobs_decode@result+2)& (0+255),1,b
  2630                           
  2631                           ; BSR set to: 0
  2632                           ;COBS.c: 159: len_code = remaining_bytes;
  2633  00019E  C0AD  F0B1         	movff	cobs_decode@remaining_bytes,cobs_decode@len_code
  2634  0001A2                     l2542:
  2635                           
  2636                           ; BSR set to: 0
  2637                           ;COBS.c: 160: }
  2638                           ;COBS.c: 162: for (i = len_code; i != 0; i--)
  2639  0001A2  C0B1  F0AC         	movff	cobs_decode@len_code,cobs_decode@i
  2640  0001A6                     l2544:
  2641                           
  2642                           ; BSR set to: 0
  2643  0001A6  0100               	movlb	0	; () banked
  2644  0001A8  51AC               	movf	cobs_decode@i& (0+255),w,b
  2645  0001AA  0100               	movlb	0	; () banked
  2646  0001AC  B4D8               	btfsc	status,2,c
  2647  0001AE  D01C               	goto	l2564
  2648                           
  2649                           ; BSR set to: 0
  2650                           ;COBS.c: 163: {
  2651                           ;COBS.c: 164: src_byte = *src_ptr++;
  2652                           
  2653                           ; BSR set to: 0
  2654                           
  2655                           ; BSR set to: 0
  2656  0001B0  C01F  FFD9         	movff	cobs_decode@src_ptr,fsr2l
  2657  0001B4  C020  FFDA         	movff	cobs_decode@src_ptr+1,fsr2h
  2658  0001B8  50DF               	movf	indf2,w,c
  2659  0001BA  0100               	movlb	0	; () banked
  2660  0001BC  6FAB               	movwf	cobs_decode@src_byte& (0+255),b
  2661                           
  2662                           ; BSR set to: 0
  2663  0001BE  4A1F               	infsnz	cobs_decode@src_ptr,f,c
  2664  0001C0  2A20               	incf	cobs_decode@src_ptr+1,f,c
  2665                           
  2666                           ; BSR set to: 0
  2667                           ;COBS.c: 165: if (src_byte == 0)
  2668  0001C2  0100               	movlb	0	; () banked
  2669  0001C4  51AB               	movf	cobs_decode@src_byte& (0+255),w,b
  2670  0001C6  0100               	movlb	0	; () banked
  2671  0001C8  A4D8               	btfss	status,2,c
  2672  0001CA  D002               	goto	l2556
  2673                           
  2674                           ; BSR set to: 0
  2675                           ;COBS.c: 166: {
  2676                           ;COBS.c: 167: result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
  2677  0001CC  0100               	movlb	0	; () banked
  2678  0001CE  85B4               	bsf	(cobs_decode@result+2)& (0+255),2,b
  2679  0001D0                     l2556:
  2680                           
  2681                           ; BSR set to: 0
  2682                           ;COBS.c: 168: }
  2683                           ;COBS.c: 169: *dst_write_ptr++ = src_byte;
  2684  0001D0  C0AF  FFD9         	movff	cobs_decode@dst_write_ptr,fsr2l
  2685  0001D4  C0B0  FFDA         	movff	cobs_decode@dst_write_ptr+1,fsr2h
  2686  0001D8  C0AB  FFDF         	movff	cobs_decode@src_byte,indf2
  2687                           
  2688                           ; BSR set to: 0
  2689  0001DC  0100               	movlb	0	; () banked
  2690  0001DE  4BAF               	infsnz	cobs_decode@dst_write_ptr& (0+255),f,b
  2691  0001E0  2BB0               	incf	(cobs_decode@dst_write_ptr+1)& (0+255),f,b
  2692                           
  2693                           ; BSR set to: 0
  2694  0001E2  0100               	movlb	0	; () banked
  2695  0001E4  07AC               	decf	cobs_decode@i& (0+255),f,b
  2696  0001E6  D7DF               	goto	l2544
  2697  0001E8                     l2564:
  2698                           
  2699                           ; BSR set to: 0
  2700                           ;COBS.c: 170: }
  2701                           ;COBS.c: 172: if (src_ptr >= src_end_ptr)
  2702  0001E8  0100               	movlb	0	; () banked
  2703  0001EA  51A7               	movf	cobs_decode@src_end_ptr& (0+255),w,b
  2704  0001EC  5C1F               	subwf	cobs_decode@src_ptr,w,c
  2705  0001EE  0100               	movlb	0	; () banked
  2706  0001F0  51A8               	movf	(cobs_decode@src_end_ptr+1)& (0+255),w,b
  2707  0001F2  5820               	subwfb	cobs_decode@src_ptr+1,w,c
  2708  0001F4  B0D8               	btfsc	status,0,c
  2709  0001F6  D01C               	goto	l2578
  2710                           
  2711                           ; BSR set to: 0
  2712                           ;COBS.c: 175: }
  2713                           ;COBS.c: 178: if (len_code != 0xFE)
  2714                           
  2715                           ; BSR set to: 0
  2716                           
  2717                           ; BSR set to: 0
  2718                           ;COBS.c: 173: {
  2719                           ;COBS.c: 174: break;
  2720  0001F8  0EFE               	movlw	254
  2721  0001FA  0100               	movlb	0	; () banked
  2722  0001FC  19B1               	xorwf	cobs_decode@len_code& (0+255),w,b
  2723  0001FE  B4D8               	btfsc	status,2,c
  2724  000200  D781               	goto	l2516
  2725                           
  2726                           ; BSR set to: 0
  2727                           ;COBS.c: 179: {
  2728                           ;COBS.c: 180: if (dst_write_ptr >= dst_buf_end_ptr)
  2729  000202  0100               	movlb	0	; () banked
  2730  000204  51A9               	movf	cobs_decode@dst_buf_end_ptr& (0+255),w,b
  2731  000206  0100               	movlb	0	; () banked
  2732  000208  5DAF               	subwf	cobs_decode@dst_write_ptr& (0+255),w,b
  2733  00020A  0100               	movlb	0	; () banked
  2734  00020C  51AA               	movf	(cobs_decode@dst_buf_end_ptr+1)& (0+255),w,b
  2735  00020E  0100               	movlb	0	; () banked
  2736  000210  59B0               	subwfb	(cobs_decode@dst_write_ptr+1)& (0+255),w,b
  2737  000212  A0D8               	btfss	status,0,c
  2738  000214  D003               	goto	l2574
  2739                           
  2740                           ; BSR set to: 0
  2741                           ;COBS.c: 181: {
  2742                           ;COBS.c: 182: result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
  2743  000216  0100               	movlb	0	; () banked
  2744  000218  83B4               	bsf	(cobs_decode@result+2)& (0+255),1,b
  2745                           
  2746                           ;COBS.c: 183: break;
  2747  00021A  D00A               	goto	l2578
  2748  00021C                     l2574:
  2749                           
  2750                           ; BSR set to: 0
  2751                           ;COBS.c: 184: }
  2752                           ;COBS.c: 185: *dst_write_ptr++ = 0;
  2753  00021C  C0AF  FFD9         	movff	cobs_decode@dst_write_ptr,fsr2l
  2754  000220  C0B0  FFDA         	movff	cobs_decode@dst_write_ptr+1,fsr2h
  2755  000224  0E00               	movlw	0
  2756  000226  6EDF               	movwf	indf2,c
  2757                           
  2758                           ; BSR set to: 0
  2759  000228  0100               	movlb	0	; () banked
  2760  00022A  4BAF               	infsnz	cobs_decode@dst_write_ptr& (0+255),f,b
  2761  00022C  2BB0               	incf	(cobs_decode@dst_write_ptr+1)& (0+255),f,b
  2762                           
  2763                           ; BSR set to: 0
  2764                           ;COBS.c: 186: }
  2765                           ;COBS.c: 187: }
  2766  00022E  D76A               	goto	l2516
  2767  000230                     l2578:
  2768                           
  2769                           ; BSR set to: 0
  2770                           ;COBS.c: 188: }
  2771                           ;COBS.c: 190: result.out_len = dst_write_ptr - dst_buf_ptr;
  2772  000230  C01B  F023         	movff	cobs_decode@dst_buf_ptr,??_cobs_decode
  2773  000234  C01C  F024         	movff	cobs_decode@dst_buf_ptr+1,??_cobs_decode+1
  2774  000238  1E23               	comf	??_cobs_decode,f,c
  2775  00023A  1E24               	comf	??_cobs_decode+1,f,c
  2776  00023C  4A23               	infsnz	??_cobs_decode,f,c
  2777  00023E  2A24               	incf	??_cobs_decode+1,f,c
  2778  000240  0100               	movlb	0	; () banked
  2779  000242  51AF               	movf	cobs_decode@dst_write_ptr& (0+255),w,b
  2780  000244  2423               	addwf	??_cobs_decode,w,c
  2781  000246  0100               	movlb	0	; () banked
  2782  000248  6FB2               	movwf	cobs_decode@result& (0+255),b
  2783  00024A  0100               	movlb	0	; () banked
  2784  00024C  51B0               	movf	(cobs_decode@dst_write_ptr+1)& (0+255),w,b
  2785  00024E  2024               	addwfc	??_cobs_decode+1,w,c
  2786  000250  0100               	movlb	0	; () banked
  2787  000252  6FB3               	movwf	(cobs_decode@result+1)& (0+255),b
  2788                           
  2789                           ; BSR set to: 0
  2790                           ;COBS.c: 192: return result;
  2791  000254  C0B2  F01B         	movff	cobs_decode@result,?_cobs_decode
  2792  000258  C0B3  F01C         	movff	cobs_decode@result+1,?_cobs_decode+1
  2793  00025C  C0B4  F01D         	movff	cobs_decode@result+2,?_cobs_decode+2
  2794  000260  0012               	return	
  2795  000262                     __end_of_cobs_decode:
  2796                           	opt stack 0
  2797                           tblptru	equ	0xFF8
  2798                           tblptrh	equ	0xFF7
  2799                           tblptrl	equ	0xFF6
  2800                           tablat	equ	0xFF5
  2801                           postinc0	equ	0xFEE
  2802                           wreg	equ	0xFE8
  2803                           indf1	equ	0xFE7
  2804                           postdec1	equ	0xFE5
  2805                           fsr1h	equ	0xFE2
  2806                           fsr1l	equ	0xFE1
  2807                           indf2	equ	0xFDF
  2808                           postinc2	equ	0xFDE
  2809                           postdec2	equ	0xFDD
  2810                           plusw2	equ	0xFDB
  2811                           fsr2h	equ	0xFDA
  2812                           fsr2l	equ	0xFD9
  2813                           status	equ	0xFD8
  2814                           
  2815 ;; *************** function _Receive_get *****************
  2816 ;; Defined at:
  2817 ;;		line 125 in file "UART.c"
  2818 ;; Parameters:    Size  Location     Type
  2819 ;;		None
  2820 ;; Auto vars:     Size  Location     Type
  2821 ;;		None
  2822 ;; Return value:  Size  Location     Type
  2823 ;;                  1    wreg      unsigned char 
  2824 ;; Registers used:
  2825 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2826 ;; Tracked objects:
  2827 ;;		On entry : 0/0
  2828 ;;		On exit  : 0/0
  2829 ;;		Unchanged: 0/0
  2830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2831 ;;      Params:         0       0       0       0       0       0       0
  2832 ;;      Locals:         0       0       0       0       0       0       0
  2833 ;;      Temps:          0       0       0       0       0       0       0
  2834 ;;      Totals:         0       0       0       0       0       0       0
  2835 ;;Total ram usage:        0 bytes
  2836 ;; Hardware stack levels used:    1
  2837 ;; Hardware stack levels required when called:    6
  2838 ;; This function calls:
  2839 ;;		_UART_buff_get
  2840 ;; This function is called by:
  2841 ;;		_ComStart
  2842 ;;		_receiveData
  2843 ;;		_getch
  2844 ;; This function uses a non-reentrant model
  2845 ;;
  2846                           
  2847                           	psect	text11
  2848  000E06                     __ptext11:
  2849                           	opt stack 0
  2850  000E06                     _Receive_get:
  2851                           	opt stack 22
  2852                           
  2853                           ;UART.c: 126: return UART_buff_get(&input_buffer);
  2854                           
  2855                           ; BSR set to: 0
  2856                           ;incstack = 0
  2857  000E06  0E00               	movlw	low _input_buffer
  2858  000E08  6E21               	movwf	UART_buff_get@_this,c
  2859  000E0A  0E01               	movlw	high _input_buffer
  2860  000E0C  6E22               	movwf	UART_buff_get@_this+1,c
  2861  000E0E  EC5F  F004         	call	_UART_buff_get	;wreg free
  2862  000E12  0012               	return	
  2863  000E14                     __end_of_Receive_get:
  2864                           	opt stack 0
  2865                           tblptru	equ	0xFF8
  2866                           tblptrh	equ	0xFF7
  2867                           tblptrl	equ	0xFF6
  2868                           tablat	equ	0xFF5
  2869                           postinc0	equ	0xFEE
  2870                           wreg	equ	0xFE8
  2871                           indf1	equ	0xFE7
  2872                           postdec1	equ	0xFE5
  2873                           fsr1h	equ	0xFE2
  2874                           fsr1l	equ	0xFE1
  2875                           indf2	equ	0xFDF
  2876                           postinc2	equ	0xFDE
  2877                           postdec2	equ	0xFDD
  2878                           plusw2	equ	0xFDB
  2879                           fsr2h	equ	0xFDA
  2880                           fsr2l	equ	0xFD9
  2881                           status	equ	0xFD8
  2882                           
  2883 ;; *************** function _UART_buff_get *****************
  2884 ;; Defined at:
  2885 ;;		line 80 in file "UART.c"
  2886 ;; Parameters:    Size  Location     Type
  2887 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  2888 ;;		 -> output_buffer(206), input_buffer(206), 
  2889 ;; Auto vars:     Size  Location     Type
  2890 ;;  c               1   36[COMRAM] unsigned char 
  2891 ;; Return value:  Size  Location     Type
  2892 ;;                  1    wreg      unsigned char 
  2893 ;; Registers used:
  2894 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2895 ;; Tracked objects:
  2896 ;;		On entry : 0/0
  2897 ;;		On exit  : 0/0
  2898 ;;		Unchanged: 0/0
  2899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2900 ;;      Params:         2       0       0       0       0       0       0
  2901 ;;      Locals:         1       0       0       0       0       0       0
  2902 ;;      Temps:          2       0       0       0       0       0       0
  2903 ;;      Totals:         5       0       0       0       0       0       0
  2904 ;;Total ram usage:        5 bytes
  2905 ;; Hardware stack levels used:    1
  2906 ;; Hardware stack levels required when called:    5
  2907 ;; This function calls:
  2908 ;;		_UART_buff_modulo_inc
  2909 ;; This function is called by:
  2910 ;;		_Receive_get
  2911 ;;		_Send_put
  2912 ;; This function uses a non-reentrant model
  2913 ;;
  2914                           
  2915                           	psect	text12
  2916  0008BE                     __ptext12:
  2917                           	opt stack 0
  2918  0008BE                     _UART_buff_get:
  2919                           	opt stack 21
  2920                           
  2921                           ;UART.c: 81: unsigned char c;
  2922                           ;UART.c: 82: if (_this->count > 0) {
  2923                           
  2924                           ;incstack = 0
  2925  0008BE  EE20 F0CC          	lfsr	2,204
  2926  0008C2  5021               	movf	UART_buff_get@_this,w,c
  2927  0008C4  26D9               	addwf	fsr2l,f,c
  2928  0008C6  5022               	movf	UART_buff_get@_this+1,w,c
  2929  0008C8  22DA               	addwfc	fsr2h,f,c
  2930  0008CA  0E01               	movlw	1
  2931  0008CC  BEDB               	btfsc	plusw2,7,c
  2932  0008CE  D03C               	goto	l2326
  2933  0008D0  0E01               	movlw	1
  2934  0008D2  50DB               	movf	plusw2,w,c
  2935  0008D4  E103               	bnz	u1390
  2936  0008D6  04DE               	decf	postinc2,w,c
  2937  0008D8  A0D8               	btfss	status,0,c
  2938  0008DA  D036               	goto	l2326
  2939  0008DC                     u1390:
  2940                           
  2941                           ;UART.c: 83: c = _this->buf[_this->tail];
  2942  0008DC  EE20 F0CA          	lfsr	2,202
  2943  0008E0  5021               	movf	UART_buff_get@_this,w,c
  2944  0008E2  26D9               	addwf	fsr2l,f,c
  2945  0008E4  5022               	movf	UART_buff_get@_this+1,w,c
  2946  0008E6  22DA               	addwfc	fsr2h,f,c
  2947  0008E8  CFDE F023          	movff	postinc2,??_UART_buff_get
  2948  0008EC  CFDD F024          	movff	postdec2,??_UART_buff_get+1
  2949  0008F0  5023               	movf	??_UART_buff_get,w,c
  2950  0008F2  2421               	addwf	UART_buff_get@_this,w,c
  2951  0008F4  6ED9               	movwf	fsr2l,c
  2952  0008F6  5024               	movf	??_UART_buff_get+1,w,c
  2953  0008F8  2022               	addwfc	UART_buff_get@_this+1,w,c
  2954  0008FA  6EDA               	movwf	fsr2h,c
  2955  0008FC  50DF               	movf	indf2,w,c
  2956  0008FE  6E25               	movwf	UART_buff_get@c,c
  2957                           
  2958                           ;UART.c: 84: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  2959  000900  EE20 F0CA          	lfsr	2,202
  2960  000904  5021               	movf	UART_buff_get@_this,w,c
  2961  000906  26D9               	addwf	fsr2l,f,c
  2962  000908  5022               	movf	UART_buff_get@_this+1,w,c
  2963  00090A  22DA               	addwfc	fsr2h,f,c
  2964  00090C  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  2965  000910  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  2966  000914  0E00               	movlw	0
  2967  000916  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  2968  000918  0EC8               	movlw	200
  2969  00091A  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  2970  00091C  EC4B  F006         	call	_UART_buff_modulo_inc	;wreg free
  2971  000920  EE20 F0CA          	lfsr	2,202
  2972  000924  5021               	movf	UART_buff_get@_this,w,c
  2973  000926  26D9               	addwf	fsr2l,f,c
  2974  000928  5022               	movf	UART_buff_get@_this+1,w,c
  2975  00092A  22DA               	addwfc	fsr2h,f,c
  2976  00092C  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  2977  000930  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  2978                           
  2979                           ;UART.c: 85: --_this->count;
  2980  000934  EE20 F0CC          	lfsr	2,204
  2981  000938  5021               	movf	UART_buff_get@_this,w,c
  2982  00093A  26D9               	addwf	fsr2l,f,c
  2983  00093C  5022               	movf	UART_buff_get@_this+1,w,c
  2984  00093E  22DA               	addwfc	fsr2h,f,c
  2985  000940  06DE               	decf	postinc2,f,c
  2986  000942  0E00               	movlw	0
  2987  000944  5ADD               	subwfb	postdec2,f,c
  2988                           
  2989                           ;UART.c: 86: } else {
  2990  000946  D002               	goto	l276
  2991  000948                     l2326:
  2992                           
  2993                           ;UART.c: 87: c = 0;
  2994  000948  0E00               	movlw	0
  2995  00094A  6E25               	movwf	UART_buff_get@c,c
  2996  00094C                     l276:
  2997                           
  2998                           ;UART.c: 88: }
  2999                           ;UART.c: 89: return (c);
  3000  00094C  5025               	movf	UART_buff_get@c,w,c
  3001  00094E  0012               	return	
  3002  000950                     __end_of_UART_buff_get:
  3003                           	opt stack 0
  3004                           tblptru	equ	0xFF8
  3005                           tblptrh	equ	0xFF7
  3006                           tblptrl	equ	0xFF6
  3007                           tablat	equ	0xFF5
  3008                           postinc0	equ	0xFEE
  3009                           wreg	equ	0xFE8
  3010                           indf1	equ	0xFE7
  3011                           postdec1	equ	0xFE5
  3012                           fsr1h	equ	0xFE2
  3013                           fsr1l	equ	0xFE1
  3014                           indf2	equ	0xFDF
  3015                           postinc2	equ	0xFDE
  3016                           postdec2	equ	0xFDD
  3017                           plusw2	equ	0xFDB
  3018                           fsr2h	equ	0xFDA
  3019                           fsr2l	equ	0xFD9
  3020                           status	equ	0xFD8
  3021                           
  3022 ;; *************** function _UART_buff_modulo_inc *****************
  3023 ;; Defined at:
  3024 ;;		line 105 in file "UART.c"
  3025 ;; Parameters:    Size  Location     Type
  3026 ;;  value           2   26[COMRAM] const unsigned int 
  3027 ;;  modulus         2   28[COMRAM] const unsigned int 
  3028 ;; Auto vars:     Size  Location     Type
  3029 ;;  my_value        2   30[COMRAM] unsigned int 
  3030 ;; Return value:  Size  Location     Type
  3031 ;;                  2   26[COMRAM] unsigned int 
  3032 ;; Registers used:
  3033 ;;		wreg, status,2, status,0
  3034 ;; Tracked objects:
  3035 ;;		On entry : 0/0
  3036 ;;		On exit  : 0/0
  3037 ;;		Unchanged: 0/0
  3038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3039 ;;      Params:         4       0       0       0       0       0       0
  3040 ;;      Locals:         2       0       0       0       0       0       0
  3041 ;;      Temps:          0       0       0       0       0       0       0
  3042 ;;      Totals:         6       0       0       0       0       0       0
  3043 ;;Total ram usage:        6 bytes
  3044 ;; Hardware stack levels used:    1
  3045 ;; Hardware stack levels required when called:    4
  3046 ;; This function calls:
  3047 ;;		Nothing
  3048 ;; This function is called by:
  3049 ;;		_UART_buff_put
  3050 ;;		_UART_buff_get
  3051 ;; This function uses a non-reentrant model
  3052 ;;
  3053                           
  3054                           	psect	text13
  3055  000C96                     __ptext13:
  3056                           	opt stack 0
  3057  000C96                     _UART_buff_modulo_inc:
  3058                           	opt stack 21
  3059                           
  3060                           ;UART.c: 106: unsigned int my_value = value + 1;
  3061                           
  3062                           ;incstack = 0
  3063  000C96  0E01               	movlw	1
  3064  000C98  241B               	addwf	UART_buff_modulo_inc@value,w,c
  3065  000C9A  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  3066  000C9C  0E00               	movlw	0
  3067  000C9E  201C               	addwfc	UART_buff_modulo_inc@value+1,w,c
  3068  000CA0  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  3069                           
  3070                           ;UART.c: 107: if (my_value >= modulus) {
  3071  000CA2  501D               	movf	UART_buff_modulo_inc@modulus,w,c
  3072  000CA4  5C1F               	subwf	UART_buff_modulo_inc@my_value,w,c
  3073  000CA6  501E               	movf	UART_buff_modulo_inc@modulus+1,w,c
  3074  000CA8  5820               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  3075  000CAA  A0D8               	btfss	status,0,c
  3076  000CAC  D004               	goto	l2300
  3077                           
  3078                           ;UART.c: 108: my_value = 0;
  3079  000CAE  0E00               	movlw	0
  3080  000CB0  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  3081  000CB2  0E00               	movlw	0
  3082  000CB4  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  3083  000CB6                     l2300:
  3084                           
  3085                           ;UART.c: 109: }
  3086                           ;UART.c: 110: return (my_value);
  3087  000CB6  C01F  F01B         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  3088  000CBA  C020  F01C         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  3089  000CBE  0012               	return	
  3090  000CC0                     __end_of_UART_buff_modulo_inc:
  3091                           	opt stack 0
  3092                           tblptru	equ	0xFF8
  3093                           tblptrh	equ	0xFF7
  3094                           tblptrl	equ	0xFF6
  3095                           tablat	equ	0xFF5
  3096                           postinc0	equ	0xFEE
  3097                           wreg	equ	0xFE8
  3098                           indf1	equ	0xFE7
  3099                           postdec1	equ	0xFE5
  3100                           fsr1h	equ	0xFE2
  3101                           fsr1l	equ	0xFE1
  3102                           indf2	equ	0xFDF
  3103                           postinc2	equ	0xFDE
  3104                           postdec2	equ	0xFDD
  3105                           plusw2	equ	0xFDB
  3106                           fsr2h	equ	0xFDA
  3107                           fsr2l	equ	0xFD9
  3108                           status	equ	0xFD8
  3109                           
  3110 ;; *************** function _Receive_available *****************
  3111 ;; Defined at:
  3112 ;;		line 121 in file "UART.c"
  3113 ;; Parameters:    Size  Location     Type
  3114 ;;		None
  3115 ;; Auto vars:     Size  Location     Type
  3116 ;;		None
  3117 ;; Return value:  Size  Location     Type
  3118 ;;                  2   28[COMRAM] int 
  3119 ;; Registers used:
  3120 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3121 ;; Tracked objects:
  3122 ;;		On entry : 0/0
  3123 ;;		On exit  : 0/0
  3124 ;;		Unchanged: 0/0
  3125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3126 ;;      Params:         2       0       0       0       0       0       0
  3127 ;;      Locals:         0       0       0       0       0       0       0
  3128 ;;      Temps:          0       0       0       0       0       0       0
  3129 ;;      Totals:         2       0       0       0       0       0       0
  3130 ;;Total ram usage:        2 bytes
  3131 ;; Hardware stack levels used:    1
  3132 ;; Hardware stack levels required when called:    5
  3133 ;; This function calls:
  3134 ;;		_UART_buff_size
  3135 ;; This function is called by:
  3136 ;;		_ComStart
  3137 ;;		_receiveData
  3138 ;; This function uses a non-reentrant model
  3139 ;;
  3140                           
  3141                           	psect	text14
  3142  000D8C                     __ptext14:
  3143                           	opt stack 0
  3144  000D8C                     _Receive_available:
  3145                           	opt stack 23
  3146                           
  3147                           ;UART.c: 122: return UART_buff_size(&input_buffer);
  3148                           
  3149                           ;incstack = 0
  3150  000D8C  0E00               	movlw	low _input_buffer
  3151  000D8E  6E1B               	movwf	UART_buff_size@_this,c
  3152  000D90  0E01               	movlw	high _input_buffer
  3153  000D92  6E1C               	movwf	UART_buff_size@_this+1,c
  3154  000D94  ECD1  F006         	call	_UART_buff_size	;wreg free
  3155  000D98  C01B  F01D         	movff	?_UART_buff_size,?_Receive_available
  3156  000D9C  C01C  F01E         	movff	?_UART_buff_size+1,?_Receive_available+1
  3157  000DA0  0012               	return	
  3158  000DA2                     __end_of_Receive_available:
  3159                           	opt stack 0
  3160                           tblptru	equ	0xFF8
  3161                           tblptrh	equ	0xFF7
  3162                           tblptrl	equ	0xFF6
  3163                           tablat	equ	0xFF5
  3164                           postinc0	equ	0xFEE
  3165                           wreg	equ	0xFE8
  3166                           indf1	equ	0xFE7
  3167                           postdec1	equ	0xFE5
  3168                           fsr1h	equ	0xFE2
  3169                           fsr1l	equ	0xFE1
  3170                           indf2	equ	0xFDF
  3171                           postinc2	equ	0xFDE
  3172                           postdec2	equ	0xFDD
  3173                           plusw2	equ	0xFDB
  3174                           fsr2h	equ	0xFDA
  3175                           fsr2l	equ	0xFD9
  3176                           status	equ	0xFD8
  3177                           
  3178 ;; *************** function _UART_buff_size *****************
  3179 ;; Defined at:
  3180 ;;		line 101 in file "UART.c"
  3181 ;; Parameters:    Size  Location     Type
  3182 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  3183 ;;		 -> output_buffer(206), input_buffer(206), 
  3184 ;; Auto vars:     Size  Location     Type
  3185 ;;		None
  3186 ;; Return value:  Size  Location     Type
  3187 ;;                  2   26[COMRAM] int 
  3188 ;; Registers used:
  3189 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3190 ;; Tracked objects:
  3191 ;;		On entry : 0/0
  3192 ;;		On exit  : 0/0
  3193 ;;		Unchanged: 0/0
  3194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3195 ;;      Params:         2       0       0       0       0       0       0
  3196 ;;      Locals:         0       0       0       0       0       0       0
  3197 ;;      Temps:          0       0       0       0       0       0       0
  3198 ;;      Totals:         2       0       0       0       0       0       0
  3199 ;;Total ram usage:        2 bytes
  3200 ;; Hardware stack levels used:    1
  3201 ;; Hardware stack levels required when called:    4
  3202 ;; This function calls:
  3203 ;;		Nothing
  3204 ;; This function is called by:
  3205 ;;		_Receive_available
  3206 ;; This function uses a non-reentrant model
  3207 ;;
  3208                           
  3209                           	psect	text15
  3210  000DA2                     __ptext15:
  3211                           	opt stack 0
  3212  000DA2                     _UART_buff_size:
  3213                           	opt stack 23
  3214                           
  3215                           ;UART.c: 102: return (_this->count);
  3216                           
  3217                           ;incstack = 0
  3218  000DA2  EE20 F0CC          	lfsr	2,204
  3219  000DA6  501B               	movf	UART_buff_size@_this,w,c
  3220  000DA8  26D9               	addwf	fsr2l,f,c
  3221  000DAA  501C               	movf	UART_buff_size@_this+1,w,c
  3222  000DAC  22DA               	addwfc	fsr2h,f,c
  3223  000DAE  CFDE F01B          	movff	postinc2,?_UART_buff_size
  3224  000DB2  CFDD F01C          	movff	postdec2,?_UART_buff_size+1
  3225  000DB6  0012               	return	
  3226  000DB8                     __end_of_UART_buff_size:
  3227                           	opt stack 0
  3228                           tblptru	equ	0xFF8
  3229                           tblptrh	equ	0xFF7
  3230                           tblptrl	equ	0xFF6
  3231                           tablat	equ	0xFF5
  3232                           postinc0	equ	0xFEE
  3233                           wreg	equ	0xFE8
  3234                           indf1	equ	0xFE7
  3235                           postdec1	equ	0xFE5
  3236                           fsr1h	equ	0xFE2
  3237                           fsr1l	equ	0xFE1
  3238                           indf2	equ	0xFDF
  3239                           postinc2	equ	0xFDE
  3240                           postdec2	equ	0xFDD
  3241                           plusw2	equ	0xFDB
  3242                           fsr2h	equ	0xFDA
  3243                           fsr2l	equ	0xFD9
  3244                           status	equ	0xFD8
  3245                           
  3246 ;; *************** function _CRC8 *****************
  3247 ;; Defined at:
  3248 ;;		line 92 in file "FastTransfer.c"
  3249 ;; Parameters:    Size  Location     Type
  3250 ;;  data            2   26[COMRAM] PTR const unsigned char 
  3251 ;;		 -> CRCcheck@arrayHolder(3), ProcessArray(30), sendData@SendArray(30), 
  3252 ;;  len             1   28[COMRAM] unsigned char 
  3253 ;; Auto vars:     Size  Location     Type
  3254 ;;  sum             1   29[COMRAM] unsigned char 
  3255 ;;  tempI           1   31[COMRAM] unsigned char 
  3256 ;;  extract         1   30[COMRAM] unsigned char 
  3257 ;;  crc             1   32[COMRAM] unsigned char 
  3258 ;; Return value:  Size  Location     Type
  3259 ;;                  1    wreg      unsigned char 
  3260 ;; Registers used:
  3261 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3262 ;; Tracked objects:
  3263 ;;		On entry : 0/0
  3264 ;;		On exit  : 0/0
  3265 ;;		Unchanged: 0/0
  3266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3267 ;;      Params:         3       0       0       0       0       0       0
  3268 ;;      Locals:         4       0       0       0       0       0       0
  3269 ;;      Temps:          0       0       0       0       0       0       0
  3270 ;;      Totals:         7       0       0       0       0       0       0
  3271 ;;Total ram usage:        7 bytes
  3272 ;; Hardware stack levels used:    1
  3273 ;; Hardware stack levels required when called:    4
  3274 ;; This function calls:
  3275 ;;		Nothing
  3276 ;; This function is called by:
  3277 ;;		_sendData
  3278 ;;		_receiveData
  3279 ;;		_CRCcheck
  3280 ;; This function uses a non-reentrant model
  3281 ;;
  3282                           
  3283                           	psect	text16
  3284  000B18                     __ptext16:
  3285                           	opt stack 0
  3286  000B18                     _CRC8:
  3287                           	opt stack 23
  3288                           
  3289                           ;FastTransfer.c: 93: unsigned char crc = 0x00;
  3290                           
  3291                           ;incstack = 0
  3292  000B18  0E00               	movlw	0
  3293  000B1A  6E21               	movwf	CRC8@crc,c
  3294                           
  3295                           ;FastTransfer.c: 94: while (len--) {
  3296  000B1C  D01C               	goto	l2348
  3297  000B1E                     l2332:
  3298                           
  3299                           ;FastTransfer.c: 95: unsigned char extract = *data++;
  3300  000B1E  C01B  FFD9         	movff	CRC8@data,fsr2l
  3301  000B22  C01C  FFDA         	movff	CRC8@data+1,fsr2h
  3302  000B26  50DF               	movf	indf2,w,c
  3303  000B28  6E1F               	movwf	CRC8@extract,c
  3304  000B2A  4A1B               	infsnz	CRC8@data,f,c
  3305  000B2C  2A1C               	incf	CRC8@data+1,f,c
  3306                           
  3307                           ;FastTransfer.c: 96: unsigned char tempI;
  3308                           ;FastTransfer.c: 97: for (tempI = 8; tempI; tempI--) {
  3309  000B2E  0E08               	movlw	8
  3310  000B30  6E20               	movwf	CRC8@tempI,c
  3311  000B32  D00E               	goto	l2346
  3312  000B34                     l2338:
  3313                           
  3314                           ;FastTransfer.c: 98: unsigned char sum = (crc ^ extract) & 0x01;
  3315  000B34  5021               	movf	CRC8@crc,w,c
  3316  000B36  181F               	xorwf	CRC8@extract,w,c
  3317  000B38  0B01               	andlw	1
  3318  000B3A  6E1E               	movwf	CRC8@sum,c
  3319                           
  3320                           ;FastTransfer.c: 99: crc >>= 1;
  3321  000B3C  90D8               	bcf	status,0,c
  3322  000B3E  3221               	rrcf	CRC8@crc,f,c
  3323                           
  3324                           ;FastTransfer.c: 100: if (sum) {
  3325  000B40  501E               	movf	CRC8@sum,w,c
  3326  000B42  B4D8               	btfsc	status,2,c
  3327  000B44  D002               	goto	l122
  3328                           
  3329                           ;FastTransfer.c: 101: crc ^= 0x8C;
  3330  000B46  0E8C               	movlw	140
  3331  000B48  1A21               	xorwf	CRC8@crc,f,c
  3332  000B4A                     l122:
  3333                           
  3334                           ;FastTransfer.c: 102: }
  3335                           ;FastTransfer.c: 103: extract >>= 1;
  3336  000B4A  90D8               	bcf	status,0,c
  3337  000B4C  321F               	rrcf	CRC8@extract,f,c
  3338  000B4E  0620               	decf	CRC8@tempI,f,c
  3339  000B50                     l2346:
  3340  000B50  5020               	movf	CRC8@tempI,w,c
  3341  000B52  A4D8               	btfss	status,2,c
  3342  000B54  D7EF               	goto	l2338
  3343  000B56                     l2348:
  3344  000B56  061D               	decf	CRC8@len,f,c
  3345  000B58  281D               	incf	CRC8@len,w,c
  3346  000B5A  A4D8               	btfss	status,2,c
  3347  000B5C  D7E0               	goto	l2332
  3348                           
  3349                           ;FastTransfer.c: 104: }
  3350                           ;FastTransfer.c: 105: }
  3351                           ;FastTransfer.c: 106: return crc;
  3352  000B5E  5021               	movf	CRC8@crc,w,c
  3353  000B60  0012               	return	
  3354  000B62                     __end_of_CRC8:
  3355                           	opt stack 0
  3356                           tblptru	equ	0xFF8
  3357                           tblptrh	equ	0xFF7
  3358                           tblptrl	equ	0xFF6
  3359                           tablat	equ	0xFF5
  3360                           postinc0	equ	0xFEE
  3361                           wreg	equ	0xFE8
  3362                           indf1	equ	0xFE7
  3363                           postdec1	equ	0xFE5
  3364                           fsr1h	equ	0xFE2
  3365                           fsr1l	equ	0xFE1
  3366                           indf2	equ	0xFDF
  3367                           postinc2	equ	0xFDE
  3368                           postdec2	equ	0xFDD
  3369                           plusw2	equ	0xFDB
  3370                           fsr2h	equ	0xFDA
  3371                           fsr2l	equ	0xFD9
  3372                           status	equ	0xFD8
  3373                           
  3374 ;; *************** function _Start *****************
  3375 ;; Defined at:
  3376 ;;		line 50 in file "Function.c"
  3377 ;; Parameters:    Size  Location     Type
  3378 ;;		None
  3379 ;; Auto vars:     Size  Location     Type
  3380 ;;		None
  3381 ;; Return value:  Size  Location     Type
  3382 ;;                  1    wreg      void 
  3383 ;; Registers used:
  3384 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3385 ;; Tracked objects:
  3386 ;;		On entry : 0/0
  3387 ;;		On exit  : 0/0
  3388 ;;		Unchanged: 0/0
  3389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3390 ;;      Params:         0       0       0       0       0       0       0
  3391 ;;      Locals:         0       0       0       0       0       0       0
  3392 ;;      Temps:          0       0       0       0       0       0       0
  3393 ;;      Totals:         0       0       0       0       0       0       0
  3394 ;;Total ram usage:        0 bytes
  3395 ;; Hardware stack levels used:    1
  3396 ;; Hardware stack levels required when called:    8
  3397 ;; This function calls:
  3398 ;;		_ComStart
  3399 ;;		_INTERRUPT_Initialize
  3400 ;;		_TMR0_Initialize
  3401 ;; This function is called by:
  3402 ;;		_main
  3403 ;; This function uses a non-reentrant model
  3404 ;;
  3405                           
  3406                           	psect	text17
  3407  000AC2                     __ptext17:
  3408                           	opt stack 0
  3409  000AC2                     _Start:
  3410                           	opt stack 22
  3411                           
  3412                           ;Function.c: 115: TRISCbits.TRISC5 = 1;
  3413                           
  3414                           ;incstack = 0
  3415  000AC2  8A94               	bsf	3988,5,c	;volatile
  3416                           
  3417                           ;Function.c: 116: TRISCbits.TRISC4 = 1;
  3418  000AC4  8894               	bsf	3988,4,c	;volatile
  3419                           
  3420                           ;Function.c: 117: TRISDbits.TRISD3 = 1;
  3421  000AC6  8695               	bsf	3989,3,c	;volatile
  3422                           
  3423                           ;Function.c: 118: TRISDbits.TRISD2 = 1;
  3424  000AC8  8495               	bsf	3989,2,c	;volatile
  3425                           
  3426                           ;Function.c: 119: TRISDbits.TRISD1 = 1;
  3427  000ACA  8295               	bsf	3989,1,c	;volatile
  3428                           
  3429                           ;Function.c: 120: TRISDbits.TRISD0 = 1;
  3430  000ACC  8095               	bsf	3989,0,c	;volatile
  3431                           
  3432                           ;Function.c: 121: TRISCbits.TRISC3 = 1;
  3433  000ACE  8694               	bsf	3988,3,c	;volatile
  3434                           
  3435                           ;Function.c: 122: TRISCbits.TRISC2 = 1;
  3436  000AD0  8494               	bsf	3988,2,c	;volatile
  3437                           
  3438                           ;Function.c: 123: TRISCbits.TRISC1 = 1;
  3439  000AD2  8294               	bsf	3988,1,c	;volatile
  3440                           
  3441                           ;Function.c: 124: TRISAbits.TRISA7 = 1;
  3442  000AD4  8E92               	bsf	3986,7,c	;volatile
  3443                           
  3444                           ;Function.c: 125: TRISCbits.TRISC0 = 1;
  3445  000AD6  8094               	bsf	3988,0,c	;volatile
  3446                           
  3447                           ;Function.c: 126: TRISAbits.TRISA4 = 1;
  3448  000AD8  8892               	bsf	3986,4,c	;volatile
  3449                           
  3450                           ;Function.c: 127: TRISAbits.TRISA6 = 1;
  3451  000ADA  8C92               	bsf	3986,6,c	;volatile
  3452                           
  3453                           ;Function.c: 130: TRISAbits.TRISA3 = 0;
  3454  000ADC  9692               	bcf	3986,3,c	;volatile
  3455                           
  3456                           ;Function.c: 131: TRISDbits.TRISD4 = 0;
  3457  000ADE  9895               	bcf	3989,4,c	;volatile
  3458                           
  3459                           ;Function.c: 136: ANSELA = 0;
  3460  000AE0  0E00               	movlw	0
  3461  000AE2  010F               	movlb	15	; () banked
  3462  000AE4  6F38               	movwf	56,b	;volatile
  3463                           
  3464                           ;Function.c: 137: ANSELB = 0;
  3465  000AE6  0E00               	movlw	0
  3466  000AE8  010F               	movlb	15	; () banked
  3467  000AEA  6F39               	movwf	57,b	;volatile
  3468                           
  3469                           ;Function.c: 138: ANSELC = 0;
  3470  000AEC  0E00               	movlw	0
  3471  000AEE  010F               	movlb	15	; () banked
  3472  000AF0  6F3A               	movwf	58,b	;volatile
  3473                           
  3474                           ;Function.c: 139: ANSELD = 0;
  3475  000AF2  0E00               	movlw	0
  3476  000AF4  010F               	movlb	15	; () banked
  3477  000AF6  6F3B               	movwf	59,b	;volatile
  3478                           
  3479                           ;Function.c: 140: ANSELE = 0;
  3480  000AF8  0E00               	movlw	0
  3481  000AFA  010F               	movlb	15	; () banked
  3482  000AFC  6F3C               	movwf	60,b	;volatile
  3483                           
  3484                           ;Function.c: 144: OSCCON = 0x72;
  3485  000AFE  0E72               	movlw	114
  3486  000B00  6ED3               	movwf	4051,c	;volatile
  3487                           
  3488                           ;Function.c: 146: OSCCON2 = 0x04;
  3489  000B02  0E04               	movlw	4
  3490  000B04  6ED2               	movwf	4050,c	;volatile
  3491                           
  3492                           ;Function.c: 148: OSCTUNE = 0x00;
  3493  000B06  0E00               	movlw	0
  3494  000B08  6E9B               	movwf	3995,c	;volatile
  3495                           
  3496                           ; BSR set to: 15
  3497                           ;Function.c: 151: ComStart();
  3498  000B0A  EC35  F005         	call	_ComStart	;wreg free
  3499                           
  3500                           ;Function.c: 152: INTERRUPT_Initialize();
  3501  000B0E  ECAF  F006         	call	_INTERRUPT_Initialize	;wreg free
  3502                           
  3503                           ;Function.c: 153: TMR0_Initialize();
  3504  000B12  EC75  F006         	call	_TMR0_Initialize	;wreg free
  3505  000B16  0012               	return		;funcret
  3506  000B18                     __end_of_Start:
  3507                           	opt stack 0
  3508                           tblptru	equ	0xFF8
  3509                           tblptrh	equ	0xFF7
  3510                           tblptrl	equ	0xFF6
  3511                           tablat	equ	0xFF5
  3512                           postinc0	equ	0xFEE
  3513                           wreg	equ	0xFE8
  3514                           indf1	equ	0xFE7
  3515                           postdec1	equ	0xFE5
  3516                           fsr1h	equ	0xFE2
  3517                           fsr1l	equ	0xFE1
  3518                           indf2	equ	0xFDF
  3519                           postinc2	equ	0xFDE
  3520                           postdec2	equ	0xFDD
  3521                           plusw2	equ	0xFDB
  3522                           fsr2h	equ	0xFDA
  3523                           fsr2l	equ	0xFD9
  3524                           status	equ	0xFD8
  3525                           
  3526 ;; *************** function _TMR0_Initialize *****************
  3527 ;; Defined at:
  3528 ;;		line 23 in file "tmr0.c"
  3529 ;; Parameters:    Size  Location     Type
  3530 ;;		None
  3531 ;; Auto vars:     Size  Location     Type
  3532 ;;		None
  3533 ;; Return value:  Size  Location     Type
  3534 ;;                  1    wreg      void 
  3535 ;; Registers used:
  3536 ;;		wreg, status,2, cstack
  3537 ;; Tracked objects:
  3538 ;;		On entry : 0/0
  3539 ;;		On exit  : 0/0
  3540 ;;		Unchanged: 0/0
  3541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3542 ;;      Params:         0       0       0       0       0       0       0
  3543 ;;      Locals:         0       0       0       0       0       0       0
  3544 ;;      Temps:          0       0       0       0       0       0       0
  3545 ;;      Totals:         0       0       0       0       0       0       0
  3546 ;;Total ram usage:        0 bytes
  3547 ;; Hardware stack levels used:    1
  3548 ;; Hardware stack levels required when called:    5
  3549 ;; This function calls:
  3550 ;;		_TMR0_StartTimer
  3551 ;; This function is called by:
  3552 ;;		_Start
  3553 ;; This function uses a non-reentrant model
  3554 ;;
  3555                           
  3556                           	psect	text18
  3557  000CEA                     __ptext18:
  3558                           	opt stack 0
  3559  000CEA                     _TMR0_Initialize:
  3560                           	opt stack 24
  3561                           
  3562                           ;tmr0.c: 27: T0CON = 0x94;
  3563                           
  3564                           ;incstack = 0
  3565  000CEA  0E94               	movlw	148
  3566  000CEC  6ED5               	movwf	4053,c	;volatile
  3567                           
  3568                           ;tmr0.c: 30: TMR0H = 0xCF;
  3569  000CEE  0ECF               	movlw	207
  3570  000CF0  6ED7               	movwf	4055,c	;volatile
  3571                           
  3572                           ;tmr0.c: 33: TMR0L = 0x2C;
  3573  000CF2  0E2C               	movlw	44
  3574  000CF4  6ED6               	movwf	4054,c	;volatile
  3575                           
  3576                           ;tmr0.c: 36: timer0ReloadVal16bit = 53036;
  3577  000CF6  0ECF               	movlw	207
  3578  000CF8  6E39               	movwf	_timer0ReloadVal16bit+1,c	;volatile
  3579  000CFA  0E2C               	movlw	44
  3580  000CFC  6E38               	movwf	_timer0ReloadVal16bit,c	;volatile
  3581                           
  3582                           ;tmr0.c: 39: INTCONbits.TMR0IF = 0;
  3583  000CFE  94F2               	bcf	intcon,2,c	;volatile
  3584                           
  3585                           ;tmr0.c: 42: INTCONbits.TMR0IE = 1;
  3586  000D00  8AF2               	bsf	intcon,5,c	;volatile
  3587                           
  3588                           ;tmr0.c: 45: TMR0_StartTimer();
  3589  000D02  EC11  F007         	call	_TMR0_StartTimer	;wreg free
  3590  000D06  0012               	return		;funcret
  3591  000D08                     __end_of_TMR0_Initialize:
  3592                           	opt stack 0
  3593                           tblptru	equ	0xFF8
  3594                           tblptrh	equ	0xFF7
  3595                           tblptrl	equ	0xFF6
  3596                           tablat	equ	0xFF5
  3597                           intcon	equ	0xFF2
  3598                           postinc0	equ	0xFEE
  3599                           wreg	equ	0xFE8
  3600                           indf1	equ	0xFE7
  3601                           postdec1	equ	0xFE5
  3602                           fsr1h	equ	0xFE2
  3603                           fsr1l	equ	0xFE1
  3604                           indf2	equ	0xFDF
  3605                           postinc2	equ	0xFDE
  3606                           postdec2	equ	0xFDD
  3607                           plusw2	equ	0xFDB
  3608                           fsr2h	equ	0xFDA
  3609                           fsr2l	equ	0xFD9
  3610                           status	equ	0xFD8
  3611                           
  3612 ;; *************** function _TMR0_StartTimer *****************
  3613 ;; Defined at:
  3614 ;;		line 48 in file "tmr0.c"
  3615 ;; Parameters:    Size  Location     Type
  3616 ;;		None
  3617 ;; Auto vars:     Size  Location     Type
  3618 ;;		None
  3619 ;; Return value:  Size  Location     Type
  3620 ;;                  1    wreg      void 
  3621 ;; Registers used:
  3622 ;;		None
  3623 ;; Tracked objects:
  3624 ;;		On entry : 0/0
  3625 ;;		On exit  : 0/0
  3626 ;;		Unchanged: 0/0
  3627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3628 ;;      Params:         0       0       0       0       0       0       0
  3629 ;;      Locals:         0       0       0       0       0       0       0
  3630 ;;      Temps:          0       0       0       0       0       0       0
  3631 ;;      Totals:         0       0       0       0       0       0       0
  3632 ;;Total ram usage:        0 bytes
  3633 ;; Hardware stack levels used:    1
  3634 ;; Hardware stack levels required when called:    4
  3635 ;; This function calls:
  3636 ;;		Nothing
  3637 ;; This function is called by:
  3638 ;;		_TMR0_Initialize
  3639 ;; This function uses a non-reentrant model
  3640 ;;
  3641                           
  3642                           	psect	text19
  3643  000E22                     __ptext19:
  3644                           	opt stack 0
  3645  000E22                     _TMR0_StartTimer:
  3646                           	opt stack 24
  3647                           
  3648                           ;tmr0.c: 50: T0CONbits.TMR0ON = 1;
  3649                           
  3650                           ;incstack = 0
  3651  000E22  8ED5               	bsf	4053,7,c	;volatile
  3652  000E24  0012               	return		;funcret
  3653  000E26                     __end_of_TMR0_StartTimer:
  3654                           	opt stack 0
  3655                           tblptru	equ	0xFF8
  3656                           tblptrh	equ	0xFF7
  3657                           tblptrl	equ	0xFF6
  3658                           tablat	equ	0xFF5
  3659                           intcon	equ	0xFF2
  3660                           postinc0	equ	0xFEE
  3661                           wreg	equ	0xFE8
  3662                           indf1	equ	0xFE7
  3663                           postdec1	equ	0xFE5
  3664                           fsr1h	equ	0xFE2
  3665                           fsr1l	equ	0xFE1
  3666                           indf2	equ	0xFDF
  3667                           postinc2	equ	0xFDE
  3668                           postdec2	equ	0xFDD
  3669                           plusw2	equ	0xFDB
  3670                           fsr2h	equ	0xFDA
  3671                           fsr2l	equ	0xFD9
  3672                           status	equ	0xFD8
  3673                           
  3674 ;; *************** function _INTERRUPT_Initialize *****************
  3675 ;; Defined at:
  3676 ;;		line 156 in file "Function.c"
  3677 ;; Parameters:    Size  Location     Type
  3678 ;;		None
  3679 ;; Auto vars:     Size  Location     Type
  3680 ;;		None
  3681 ;; Return value:  Size  Location     Type
  3682 ;;                  1    wreg      void 
  3683 ;; Registers used:
  3684 ;;		None
  3685 ;; Tracked objects:
  3686 ;;		On entry : 0/0
  3687 ;;		On exit  : 0/0
  3688 ;;		Unchanged: 0/0
  3689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3690 ;;      Params:         0       0       0       0       0       0       0
  3691 ;;      Locals:         0       0       0       0       0       0       0
  3692 ;;      Temps:          0       0       0       0       0       0       0
  3693 ;;      Totals:         0       0       0       0       0       0       0
  3694 ;;Total ram usage:        0 bytes
  3695 ;; Hardware stack levels used:    1
  3696 ;; Hardware stack levels required when called:    4
  3697 ;; This function calls:
  3698 ;;		Nothing
  3699 ;; This function is called by:
  3700 ;;		_Start
  3701 ;; This function uses a non-reentrant model
  3702 ;;
  3703                           
  3704                           	psect	text20
  3705  000D5E                     __ptext20:
  3706                           	opt stack 0
  3707  000D5E                     _INTERRUPT_Initialize:
  3708                           	opt stack 25
  3709                           
  3710                           ;Function.c: 158: INTCONbits.PEIE = 1;
  3711                           
  3712                           ;incstack = 0
  3713  000D5E  8CF2               	bsf	intcon,6,c	;volatile
  3714                           
  3715                           ;Function.c: 159: INTCONbits.GIE = 1;
  3716  000D60  8EF2               	bsf	intcon,7,c	;volatile
  3717                           
  3718                           ;Function.c: 161: RCONbits.IPEN = 0;
  3719  000D62  9ED0               	bcf	4048,7,c	;volatile
  3720                           
  3721                           ;Function.c: 166: IPR1bits.RC1IP = 0;
  3722  000D64  9A9F               	bcf	3999,5,c	;volatile
  3723                           
  3724                           ;Function.c: 168: IPR1bits.TX1IP = 0;
  3725  000D66  989F               	bcf	3999,4,c	;volatile
  3726                           
  3727                           ;Function.c: 171: INTCONbits.TMR0IF = 0;
  3728  000D68  94F2               	bcf	intcon,2,c	;volatile
  3729                           
  3730                           ;Function.c: 174: INTCONbits.TMR0IE = 1;
  3731  000D6A  8AF2               	bsf	intcon,5,c	;volatile
  3732                           
  3733                           ;Function.c: 176: IPR1bits.ADIP = 0;
  3734  000D6C  9C9F               	bcf	3999,6,c	;volatile
  3735                           
  3736                           ;Function.c: 178: IPR1bits.SSP1IP = 0;
  3737  000D6E  969F               	bcf	3999,3,c	;volatile
  3738                           
  3739                           ;Function.c: 180: IPR2bits.BCL1IP = 0;
  3740  000D70  96A2               	bcf	4002,3,c	;volatile
  3741                           
  3742                           ;Function.c: 181: IPR1bits.TMR2IP=0;
  3743  000D72  929F               	bcf	3999,1,c	;volatile
  3744  000D74  0012               	return		;funcret
  3745  000D76                     __end_of_INTERRUPT_Initialize:
  3746                           	opt stack 0
  3747                           tblptru	equ	0xFF8
  3748                           tblptrh	equ	0xFF7
  3749                           tblptrl	equ	0xFF6
  3750                           tablat	equ	0xFF5
  3751                           intcon	equ	0xFF2
  3752                           postinc0	equ	0xFEE
  3753                           wreg	equ	0xFE8
  3754                           indf1	equ	0xFE7
  3755                           postdec1	equ	0xFE5
  3756                           fsr1h	equ	0xFE2
  3757                           fsr1l	equ	0xFE1
  3758                           indf2	equ	0xFDF
  3759                           postinc2	equ	0xFDE
  3760                           postdec2	equ	0xFDD
  3761                           plusw2	equ	0xFDB
  3762                           fsr2h	equ	0xFDA
  3763                           fsr2l	equ	0xFD9
  3764                           status	equ	0xFD8
  3765                           
  3766 ;; *************** function _ComStart *****************
  3767 ;; Defined at:
  3768 ;;		line 12 in file "Communications.c"
  3769 ;; Parameters:    Size  Location     Type
  3770 ;;		None
  3771 ;; Auto vars:     Size  Location     Type
  3772 ;;		None
  3773 ;; Return value:  Size  Location     Type
  3774 ;;                  1    wreg      void 
  3775 ;; Registers used:
  3776 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3777 ;; Tracked objects:
  3778 ;;		On entry : 0/0
  3779 ;;		On exit  : 0/0
  3780 ;;		Unchanged: 0/0
  3781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3782 ;;      Params:         0       0       0       0       0       0       0
  3783 ;;      Locals:         0       0       0       0       0       0       0
  3784 ;;      Temps:          0       0       0       0       0       0       0
  3785 ;;      Totals:         0       0       0       0       0       0       0
  3786 ;;Total ram usage:        0 bytes
  3787 ;; Hardware stack levels used:    1
  3788 ;; Hardware stack levels required when called:    7
  3789 ;; This function calls:
  3790 ;;		_EUSART1_Initialize
  3791 ;;		_begin
  3792 ;; This function is called by:
  3793 ;;		_Start
  3794 ;; This function uses a non-reentrant model
  3795 ;;
  3796                           
  3797                           	psect	text21
  3798  000A6A                     __ptext21:
  3799                           	opt stack 0
  3800  000A6A                     _ComStart:
  3801                           	opt stack 22
  3802                           
  3803                           ;Communications.c: 13: EUSART1_Initialize();
  3804                           
  3805                           ;incstack = 0
  3806  000A6A  ECB1  F005         	call	_EUSART1_Initialize	;wreg free
  3807                           
  3808                           ;Communications.c: 14: begin(receiveArray, sizeof (receiveArray), 8, 0, Send_put, Receiv
      +                          e_get, Receive_available, Receive_peek);
  3809  000A6E  0E9D               	movlw	low _receiveArray
  3810  000A70  0100               	movlb	0	; () banked
  3811  000A72  6FA7               	movwf	begin@ptr& (0+255),b
  3812  000A74  0E00               	movlw	high _receiveArray
  3813  000A76  0100               	movlb	0	; () banked
  3814  000A78  6FA8               	movwf	(begin@ptr+1)& (0+255),b
  3815  000A7A  0E0A               	movlw	10
  3816  000A7C  0100               	movlb	0	; () banked
  3817  000A7E  6FA9               	movwf	begin@maxSize& (0+255),b
  3818  000A80  0E08               	movlw	8
  3819  000A82  0100               	movlb	0	; () banked
  3820  000A84  6FAA               	movwf	begin@givenAddress& (0+255),b
  3821  000A86  0E00               	movlw	0
  3822  000A88  0100               	movlb	0	; () banked
  3823  000A8A  6FAB               	movwf	begin@error& (0+255),b
  3824  000A8C  0E3A               	movlw	low _Send_put
  3825  000A8E  0100               	movlb	0	; () banked
  3826  000A90  6FAC               	movwf	begin@stufftosend& (0+255),b
  3827  000A92  0E0C               	movlw	high _Send_put
  3828  000A94  0100               	movlb	0	; () banked
  3829  000A96  6FAD               	movwf	(begin@stufftosend+1)& (0+255),b
  3830  000A98  0E06               	movlw	low _Receive_get
  3831  000A9A  0100               	movlb	0	; () banked
  3832  000A9C  6FAE               	movwf	begin@stufftoreceive& (0+255),b
  3833  000A9E  0E0E               	movlw	high _Receive_get
  3834  000AA0  0100               	movlb	0	; () banked
  3835  000AA2  6FAF               	movwf	(begin@stufftoreceive+1)& (0+255),b
  3836  000AA4  0E8C               	movlw	low _Receive_available
  3837  000AA6  0100               	movlb	0	; () banked
  3838  000AA8  6FB0               	movwf	begin@stuffavailable& (0+255),b
  3839  000AAA  0E0D               	movlw	high _Receive_available
  3840  000AAC  0100               	movlb	0	; () banked
  3841  000AAE  6FB1               	movwf	(begin@stuffavailable+1)& (0+255),b
  3842  000AB0  0E00               	movlw	0
  3843  000AB2  0100               	movlb	0	; () banked
  3844  000AB4  6FB2               	movwf	begin@stuffpeek& (0+255),b
  3845  000AB6  0E00               	movlw	0
  3846  000AB8  0100               	movlb	0	; () banked
  3847  000ABA  6FB3               	movwf	(begin@stuffpeek+1)& (0+255),b
  3848  000ABC  EC13  F007         	call	_begin	;wreg free
  3849  000AC0  0012               	return		;funcret
  3850  000AC2                     __end_of_ComStart:
  3851                           	opt stack 0
  3852                           tblptru	equ	0xFF8
  3853                           tblptrh	equ	0xFF7
  3854                           tblptrl	equ	0xFF6
  3855                           tablat	equ	0xFF5
  3856                           intcon	equ	0xFF2
  3857                           postinc0	equ	0xFEE
  3858                           wreg	equ	0xFE8
  3859                           indf1	equ	0xFE7
  3860                           postdec1	equ	0xFE5
  3861                           fsr1h	equ	0xFE2
  3862                           fsr1l	equ	0xFE1
  3863                           indf2	equ	0xFDF
  3864                           postinc2	equ	0xFDE
  3865                           postdec2	equ	0xFDD
  3866                           plusw2	equ	0xFDB
  3867                           fsr2h	equ	0xFDA
  3868                           fsr2l	equ	0xFD9
  3869                           status	equ	0xFD8
  3870                           
  3871 ;; *************** function _begin *****************
  3872 ;; Defined at:
  3873 ;;		line 76 in file "FastTransfer.c"
  3874 ;; Parameters:    Size  Location     Type
  3875 ;;  ptr             2    0[BANK0 ] PTR volatile int 
  3876 ;;		 -> receiveArray(10), 
  3877 ;;  maxSize         1    2[BANK0 ] unsigned char 
  3878 ;;  givenAddress    1    3[BANK0 ] unsigned char 
  3879 ;;  error           1    4[BANK0 ] unsigned char 
  3880 ;;  stufftosend     2    5[BANK0 ] PTR FTN(unsigned char ,)
  3881 ;;		 -> Send_put(1), 
  3882 ;;  stufftorecei    2    7[BANK0 ] PTR FTN()unsigned char 
  3883 ;;		 -> Receive_get(1), 
  3884 ;;  stuffavailab    2    9[BANK0 ] PTR FTN()int 
  3885 ;;		 -> Receive_available(2), 
  3886 ;;  stuffpeek       2   11[BANK0 ] PTR FTN()unsigned char 
  3887 ;;		 -> Receive_peek(1), 
  3888 ;; Auto vars:     Size  Location     Type
  3889 ;;		None
  3890 ;; Return value:  Size  Location     Type
  3891 ;;                  1    wreg      void 
  3892 ;; Registers used:
  3893 ;;		None
  3894 ;; Tracked objects:
  3895 ;;		On entry : 0/0
  3896 ;;		On exit  : 0/0
  3897 ;;		Unchanged: 0/0
  3898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3899 ;;      Params:         0      13       0       0       0       0       0
  3900 ;;      Locals:         0       0       0       0       0       0       0
  3901 ;;      Temps:          0       0       0       0       0       0       0
  3902 ;;      Totals:         0      13       0       0       0       0       0
  3903 ;;Total ram usage:       13 bytes
  3904 ;; Hardware stack levels used:    1
  3905 ;; Hardware stack levels required when called:    4
  3906 ;; This function calls:
  3907 ;;		Nothing
  3908 ;; This function is called by:
  3909 ;;		_ComStart
  3910 ;; This function uses a non-reentrant model
  3911 ;;
  3912                           
  3913                           	psect	text22
  3914  000E26                     __ptext22:
  3915                           	opt stack 0
  3916  000E26                     _begin:
  3917                           	opt stack 24
  3918                           
  3919                           ;incstack = 0
  3920  000E26  0012               	return		;funcret
  3921  000E28                     __end_of_begin:
  3922                           	opt stack 0
  3923                           tblptru	equ	0xFF8
  3924                           tblptrh	equ	0xFF7
  3925                           tblptrl	equ	0xFF6
  3926                           tablat	equ	0xFF5
  3927                           intcon	equ	0xFF2
  3928                           postinc0	equ	0xFEE
  3929                           wreg	equ	0xFE8
  3930                           indf1	equ	0xFE7
  3931                           postdec1	equ	0xFE5
  3932                           fsr1h	equ	0xFE2
  3933                           fsr1l	equ	0xFE1
  3934                           indf2	equ	0xFDF
  3935                           postinc2	equ	0xFDE
  3936                           postdec2	equ	0xFDD
  3937                           plusw2	equ	0xFDB
  3938                           fsr2h	equ	0xFDA
  3939                           fsr2l	equ	0xFD9
  3940                           status	equ	0xFD8
  3941                           
  3942 ;; *************** function _EUSART1_Initialize *****************
  3943 ;; Defined at:
  3944 ;;		line 20 in file "UART.c"
  3945 ;; Parameters:    Size  Location     Type
  3946 ;;		None
  3947 ;; Auto vars:     Size  Location     Type
  3948 ;;		None
  3949 ;; Return value:  Size  Location     Type
  3950 ;;                  1    wreg      void 
  3951 ;; Registers used:
  3952 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3953 ;; Tracked objects:
  3954 ;;		On entry : 0/0
  3955 ;;		On exit  : 0/0
  3956 ;;		Unchanged: 0/0
  3957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3958 ;;      Params:         0       0       0       0       0       0       0
  3959 ;;      Locals:         0       0       0       0       0       0       0
  3960 ;;      Temps:          0       0       0       0       0       0       0
  3961 ;;      Totals:         0       0       0       0       0       0       0
  3962 ;;Total ram usage:        0 bytes
  3963 ;; Hardware stack levels used:    1
  3964 ;; Hardware stack levels required when called:    6
  3965 ;; This function calls:
  3966 ;;		_UART_buff_init
  3967 ;; This function is called by:
  3968 ;;		_ComStart
  3969 ;; This function uses a non-reentrant model
  3970 ;;
  3971                           
  3972                           	psect	text23
  3973  000B62                     __ptext23:
  3974                           	opt stack 0
  3975  000B62                     _EUSART1_Initialize:
  3976                           	opt stack 22
  3977                           
  3978                           ;UART.c: 22: PIE1bits.RC1IE = 0;
  3979                           
  3980                           ;incstack = 0
  3981  000B62  9A9D               	bcf	3997,5,c	;volatile
  3982                           
  3983                           ;UART.c: 23: PIE1bits.TX1IE = 0;
  3984  000B64  989D               	bcf	3997,4,c	;volatile
  3985                           
  3986                           ;UART.c: 28: BAUD1CON = 0x48;
  3987  000B66  0E48               	movlw	72
  3988  000B68  6EB8               	movwf	4024,c	;volatile
  3989                           
  3990                           ;UART.c: 31: RC1STA = 0x98;
  3991  000B6A  0E98               	movlw	152
  3992  000B6C  6EAB               	movwf	4011,c	;volatile
  3993                           
  3994                           ;UART.c: 34: TX1STA = 0x26;
  3995  000B6E  0E26               	movlw	38
  3996  000B70  6EAC               	movwf	4012,c	;volatile
  3997                           
  3998                           ;UART.c: 37: SPBRG1 = (((16000000/38400)/4)-1);
  3999  000B72  0E67               	movlw	103
  4000  000B74  6EAF               	movwf	4015,c	;volatile
  4001                           
  4002                           ;UART.c: 40: SPBRGH1 = 0x00;
  4003  000B76  0E00               	movlw	0
  4004  000B78  6EB0               	movwf	4016,c	;volatile
  4005                           
  4006                           ;UART.c: 43: TXREG1 = 0x00;
  4007  000B7A  0E00               	movlw	0
  4008  000B7C  6EAD               	movwf	4013,c	;volatile
  4009                           
  4010                           ;UART.c: 46: RCREG1 = 0x00;
  4011  000B7E  0E00               	movlw	0
  4012  000B80  6EAE               	movwf	4014,c	;volatile
  4013                           
  4014                           ;UART.c: 48: UART_buff_init(&input_buffer);
  4015  000B82  0E00               	movlw	low _input_buffer
  4016  000B84  6E23               	movwf	UART_buff_init@_this,c
  4017  000B86  0E01               	movlw	high _input_buffer
  4018  000B88  6E24               	movwf	UART_buff_init@_this+1,c
  4019  000B8A  EC84  F006         	call	_UART_buff_init	;wreg free
  4020                           
  4021                           ;UART.c: 49: UART_buff_init(&output_buffer);
  4022  000B8E  0E00               	movlw	low _output_buffer
  4023  000B90  6E23               	movwf	UART_buff_init@_this,c
  4024  000B92  0E02               	movlw	high _output_buffer
  4025  000B94  6E24               	movwf	UART_buff_init@_this+1,c
  4026  000B96  EC84  F006         	call	_UART_buff_init	;wreg free
  4027                           
  4028                           ;UART.c: 51: PIE1bits.RC1IE = 1;
  4029  000B9A  8A9D               	bsf	3997,5,c	;volatile
  4030  000B9C  0012               	return		;funcret
  4031  000B9E                     __end_of_EUSART1_Initialize:
  4032                           	opt stack 0
  4033                           tblptru	equ	0xFF8
  4034                           tblptrh	equ	0xFF7
  4035                           tblptrl	equ	0xFF6
  4036                           tablat	equ	0xFF5
  4037                           intcon	equ	0xFF2
  4038                           postinc0	equ	0xFEE
  4039                           wreg	equ	0xFE8
  4040                           indf1	equ	0xFE7
  4041                           postdec1	equ	0xFE5
  4042                           fsr1h	equ	0xFE2
  4043                           fsr1l	equ	0xFE1
  4044                           indf2	equ	0xFDF
  4045                           postinc2	equ	0xFDE
  4046                           postdec2	equ	0xFDD
  4047                           plusw2	equ	0xFDB
  4048                           fsr2h	equ	0xFDA
  4049                           fsr2l	equ	0xFD9
  4050                           status	equ	0xFD8
  4051                           
  4052 ;; *************** function _UART_buff_init *****************
  4053 ;; Defined at:
  4054 ;;		line 55 in file "UART.c"
  4055 ;; Parameters:    Size  Location     Type
  4056 ;;  _this           2   34[COMRAM] PTR struct UART_ring_buf
  4057 ;;		 -> output_buffer(206), input_buffer(206), 
  4058 ;; Auto vars:     Size  Location     Type
  4059 ;;		None
  4060 ;; Return value:  Size  Location     Type
  4061 ;;                  1    wreg      void 
  4062 ;; Registers used:
  4063 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4064 ;; Tracked objects:
  4065 ;;		On entry : 0/0
  4066 ;;		On exit  : 0/0
  4067 ;;		Unchanged: 0/0
  4068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4069 ;;      Params:         2       0       0       0       0       0       0
  4070 ;;      Locals:         0       0       0       0       0       0       0
  4071 ;;      Temps:          0       0       0       0       0       0       0
  4072 ;;      Totals:         2       0       0       0       0       0       0
  4073 ;;Total ram usage:        2 bytes
  4074 ;; Hardware stack levels used:    1
  4075 ;; Hardware stack levels required when called:    5
  4076 ;; This function calls:
  4077 ;;		_memset
  4078 ;; This function is called by:
  4079 ;;		_EUSART1_Initialize
  4080 ;; This function uses a non-reentrant model
  4081 ;;
  4082                           
  4083                           	psect	text24
  4084  000D08                     __ptext24:
  4085                           	opt stack 0
  4086  000D08                     _UART_buff_init:
  4087                           	opt stack 22
  4088                           
  4089                           ;UART.c: 64: memset(_this, 0, sizeof (*_this));
  4090                           
  4091                           ;incstack = 0
  4092  000D08  C023  F01B         	movff	UART_buff_init@_this,memset@p1
  4093  000D0C  C024  F01C         	movff	UART_buff_init@_this+1,memset@p1+1
  4094  000D10  0E00               	movlw	0
  4095  000D12  6E1E               	movwf	memset@c+1,c
  4096  000D14  0E00               	movlw	0
  4097  000D16  6E1D               	movwf	memset@c,c
  4098  000D18  0E00               	movlw	0
  4099  000D1A  6E20               	movwf	memset@n+1,c
  4100  000D1C  0ECE               	movlw	206
  4101  000D1E  6E1F               	movwf	memset@n,c
  4102  000D20  EC35  F006         	call	_memset	;wreg free
  4103  000D24  0012               	return		;funcret
  4104  000D26                     __end_of_UART_buff_init:
  4105                           	opt stack 0
  4106                           tblptru	equ	0xFF8
  4107                           tblptrh	equ	0xFF7
  4108                           tblptrl	equ	0xFF6
  4109                           tablat	equ	0xFF5
  4110                           intcon	equ	0xFF2
  4111                           postinc0	equ	0xFEE
  4112                           wreg	equ	0xFE8
  4113                           indf1	equ	0xFE7
  4114                           postdec1	equ	0xFE5
  4115                           fsr1h	equ	0xFE2
  4116                           fsr1l	equ	0xFE1
  4117                           indf2	equ	0xFDF
  4118                           postinc2	equ	0xFDE
  4119                           postdec2	equ	0xFDD
  4120                           plusw2	equ	0xFDB
  4121                           fsr2h	equ	0xFDA
  4122                           fsr2l	equ	0xFD9
  4123                           status	equ	0xFD8
  4124                           
  4125 ;; *************** function _memset *****************
  4126 ;; Defined at:
  4127 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\memset.c"
  4128 ;; Parameters:    Size  Location     Type
  4129 ;;  p1              2   26[COMRAM] PTR void 
  4130 ;;		 -> output_buffer(206), input_buffer(206), 
  4131 ;;  c               2   28[COMRAM] int 
  4132 ;;  n               2   30[COMRAM] unsigned int 
  4133 ;; Auto vars:     Size  Location     Type
  4134 ;;  p               2   32[COMRAM] PTR unsigned char 
  4135 ;;		 -> output_buffer(206), input_buffer(206), 
  4136 ;; Return value:  Size  Location     Type
  4137 ;;                  2   26[COMRAM] PTR void 
  4138 ;; Registers used:
  4139 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4140 ;; Tracked objects:
  4141 ;;		On entry : 0/0
  4142 ;;		On exit  : 0/0
  4143 ;;		Unchanged: 0/0
  4144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4145 ;;      Params:         6       0       0       0       0       0       0
  4146 ;;      Locals:         2       0       0       0       0       0       0
  4147 ;;      Temps:          0       0       0       0       0       0       0
  4148 ;;      Totals:         8       0       0       0       0       0       0
  4149 ;;Total ram usage:        8 bytes
  4150 ;; Hardware stack levels used:    1
  4151 ;; Hardware stack levels required when called:    4
  4152 ;; This function calls:
  4153 ;;		Nothing
  4154 ;; This function is called by:
  4155 ;;		_UART_buff_init
  4156 ;;		_FastTransfer_buffer_flush
  4157 ;;		_UART_buff_flush
  4158 ;; This function uses a non-reentrant model
  4159 ;;
  4160                           
  4161                           	psect	text25
  4162  000C6A                     __ptext25:
  4163                           	opt stack 0
  4164  000C6A                     _memset:
  4165                           	opt stack 22
  4166                           
  4167                           ;incstack = 0
  4168  000C6A  C01B  F021         	movff	memset@p1,memset@p
  4169  000C6E  C01C  F022         	movff	memset@p1+1,memset@p+1
  4170  000C72  D008               	goto	l1750
  4171  000C74                     l1746:
  4172  000C74  C021  FFD9         	movff	memset@p,fsr2l
  4173  000C78  C022  FFDA         	movff	memset@p+1,fsr2h
  4174  000C7C  C01D  FFDF         	movff	memset@c,indf2
  4175  000C80  4A21               	infsnz	memset@p,f,c
  4176  000C82  2A22               	incf	memset@p+1,f,c
  4177  000C84                     l1750:
  4178  000C84  061F               	decf	memset@n,f,c
  4179  000C86  A0D8               	btfss	status,0,c
  4180  000C88  0620               	decf	memset@n+1,f,c
  4181  000C8A  281F               	incf	memset@n,w,c
  4182  000C8C  E1F3               	bnz	l1746
  4183  000C8E  2820               	incf	memset@n+1,w,c
  4184  000C90  B4D8               	btfsc	status,2,c
  4185  000C92  0012               	return	
  4186  000C94  D7EF               	goto	l1746
  4187  000C96                     __end_of_memset:
  4188                           	opt stack 0
  4189                           tblptru	equ	0xFF8
  4190                           tblptrh	equ	0xFF7
  4191                           tblptrl	equ	0xFF6
  4192                           tablat	equ	0xFF5
  4193                           intcon	equ	0xFF2
  4194                           postinc0	equ	0xFEE
  4195                           wreg	equ	0xFE8
  4196                           indf1	equ	0xFE7
  4197                           postdec1	equ	0xFE5
  4198                           fsr1h	equ	0xFE2
  4199                           fsr1l	equ	0xFE1
  4200                           indf2	equ	0xFDF
  4201                           postinc2	equ	0xFDE
  4202                           postdec2	equ	0xFDD
  4203                           plusw2	equ	0xFDB
  4204                           fsr2h	equ	0xFDA
  4205                           fsr2l	equ	0xFD9
  4206                           status	equ	0xFD8
  4207                           
  4208 ;; *************** function _SetTime *****************
  4209 ;; Defined at:
  4210 ;;		line 97 in file "tmr0.c"
  4211 ;; Parameters:    Size  Location     Type
  4212 ;;		None
  4213 ;; Auto vars:     Size  Location     Type
  4214 ;;		None
  4215 ;; Return value:  Size  Location     Type
  4216 ;;                  1    wreg      void 
  4217 ;; Registers used:
  4218 ;;		wreg, status,2
  4219 ;; Tracked objects:
  4220 ;;		On entry : 0/0
  4221 ;;		On exit  : 0/0
  4222 ;;		Unchanged: 0/0
  4223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4224 ;;      Params:         0       0       0       0       0       0       0
  4225 ;;      Locals:         0       0       0       0       0       0       0
  4226 ;;      Temps:          0       0       0       0       0       0       0
  4227 ;;      Totals:         0       0       0       0       0       0       0
  4228 ;;Total ram usage:        0 bytes
  4229 ;; Hardware stack levels used:    1
  4230 ;; Hardware stack levels required when called:    4
  4231 ;; This function calls:
  4232 ;;		Nothing
  4233 ;; This function is called by:
  4234 ;;		_main
  4235 ;; This function uses a non-reentrant model
  4236 ;;
  4237                           
  4238                           	psect	text26
  4239  000DE2                     __ptext26:
  4240                           	opt stack 0
  4241  000DE2                     _SetTime:
  4242                           	opt stack 26
  4243                           
  4244                           ;tmr0.c: 98: time = 0;
  4245                           
  4246                           ;incstack = 0
  4247  000DE2  0E00               	movlw	0
  4248  000DE4  0100               	movlb	0	; () banked
  4249  000DE6  6F60               	movwf	_time& (0+255),b
  4250  000DE8  0E00               	movlw	0
  4251  000DEA  6F61               	movwf	(_time+1)& (0+255),b
  4252  000DEC  0E00               	movlw	0
  4253  000DEE  6F62               	movwf	(_time+2)& (0+255),b
  4254  000DF0  0E00               	movlw	0
  4255  000DF2  6F63               	movwf	(_time+3)& (0+255),b
  4256                           
  4257                           ; BSR set to: 0
  4258  000DF4  0012               	return		;funcret
  4259  000DF6                     __end_of_SetTime:
  4260                           	opt stack 0
  4261                           tblptru	equ	0xFF8
  4262                           tblptrh	equ	0xFF7
  4263                           tblptrl	equ	0xFF6
  4264                           tablat	equ	0xFF5
  4265                           intcon	equ	0xFF2
  4266                           postinc0	equ	0xFEE
  4267                           wreg	equ	0xFE8
  4268                           indf1	equ	0xFE7
  4269                           postdec1	equ	0xFE5
  4270                           fsr1h	equ	0xFE2
  4271                           fsr1l	equ	0xFE1
  4272                           indf2	equ	0xFDF
  4273                           postinc2	equ	0xFDE
  4274                           postdec2	equ	0xFDD
  4275                           plusw2	equ	0xFDB
  4276                           fsr2h	equ	0xFDA
  4277                           fsr2l	equ	0xFD9
  4278                           status	equ	0xFD8
  4279                           
  4280 ;; *************** function _ReadFaults *****************
  4281 ;; Defined at:
  4282 ;;		line 9 in file "Function.c"
  4283 ;; Parameters:    Size  Location     Type
  4284 ;;		None
  4285 ;; Auto vars:     Size  Location     Type
  4286 ;;		None
  4287 ;; Return value:  Size  Location     Type
  4288 ;;                  1    wreg      void 
  4289 ;; Registers used:
  4290 ;;		wreg, status,2
  4291 ;; Tracked objects:
  4292 ;;		On entry : 0/0
  4293 ;;		On exit  : 0/0
  4294 ;;		Unchanged: 0/0
  4295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4296 ;;      Params:         0       0       0       0       0       0       0
  4297 ;;      Locals:         0       0       0       0       0       0       0
  4298 ;;      Temps:          0       0       0       0       0       0       0
  4299 ;;      Totals:         0       0       0       0       0       0       0
  4300 ;;Total ram usage:        0 bytes
  4301 ;; Hardware stack levels used:    1
  4302 ;; Hardware stack levels required when called:    4
  4303 ;; This function calls:
  4304 ;;		Nothing
  4305 ;; This function is called by:
  4306 ;;		_main
  4307 ;; This function uses a non-reentrant model
  4308 ;;
  4309                           
  4310                           	psect	text27
  4311  000E14                     __ptext27:
  4312                           	opt stack 0
  4313  000E14                     _ReadFaults:
  4314                           	opt stack 26
  4315                           
  4316                           ;Function.c: 11: ByteHigh = 0xAA;
  4317                           
  4318                           ; BSR set to: 0
  4319                           ;incstack = 0
  4320  000E14  0EAA               	movlw	170
  4321  000E16  6E3B               	movwf	_ByteHigh,c
  4322                           
  4323                           ;Function.c: 14: ByteLow = 0xBB;
  4324  000E18  0EBB               	movlw	187
  4325  000E1A  6E3C               	movwf	_ByteLow,c
  4326  000E1C  0012               	return		;funcret
  4327  000E1E                     __end_of_ReadFaults:
  4328                           	opt stack 0
  4329                           tblptru	equ	0xFF8
  4330                           tblptrh	equ	0xFF7
  4331                           tblptrl	equ	0xFF6
  4332                           tablat	equ	0xFF5
  4333                           intcon	equ	0xFF2
  4334                           postinc0	equ	0xFEE
  4335                           wreg	equ	0xFE8
  4336                           indf1	equ	0xFE7
  4337                           postdec1	equ	0xFE5
  4338                           fsr1h	equ	0xFE2
  4339                           fsr1l	equ	0xFE1
  4340                           indf2	equ	0xFDF
  4341                           postinc2	equ	0xFDE
  4342                           postdec2	equ	0xFDD
  4343                           plusw2	equ	0xFDB
  4344                           fsr2h	equ	0xFDA
  4345                           fsr2l	equ	0xFD9
  4346                           status	equ	0xFD8
  4347                           
  4348 ;; *************** function _INTERRUPT_InterruptManager *****************
  4349 ;; Defined at:
  4350 ;;		line 185 in file "Function.c"
  4351 ;; Parameters:    Size  Location     Type
  4352 ;;		None
  4353 ;; Auto vars:     Size  Location     Type
  4354 ;;		None
  4355 ;; Return value:  Size  Location     Type
  4356 ;;                  1    wreg      void 
  4357 ;; Registers used:
  4358 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4359 ;; Tracked objects:
  4360 ;;		On entry : 0/0
  4361 ;;		On exit  : 0/0
  4362 ;;		Unchanged: 0/0
  4363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4364 ;;      Params:         0       0       0       0       0       0       0
  4365 ;;      Locals:         0       0       0       0       0       0       0
  4366 ;;      Temps:         14       0       0       0       0       0       0
  4367 ;;      Totals:        14       0       0       0       0       0       0
  4368 ;;Total ram usage:       14 bytes
  4369 ;; Hardware stack levels used:    1
  4370 ;; Hardware stack levels required when called:    3
  4371 ;; This function calls:
  4372 ;;		_EUSART1_Receive_ISR
  4373 ;;		_EUSART1_Transmit_ISR
  4374 ;;		_TMR0_ISR
  4375 ;; This function is called by:
  4376 ;;		Interrupt level 2
  4377 ;; This function uses a non-reentrant model
  4378 ;;
  4379                           
  4380                           	psect	intcode
  4381  000008                     __pintcode:
  4382                           	opt stack 0
  4383  000008                     _INTERRUPT_InterruptManager:
  4384                           	opt stack 21
  4385                           
  4386                           ;incstack = 0
  4387  000008  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4388  00000A  CFFA F00D          	movff	pclath,??_INTERRUPT_InterruptManager
  4389  00000E  CFFB F00E          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  4390  000012  CFE9 F00F          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  4391  000016  CFEA F010          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  4392  00001A  CFE1 F011          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  4393  00001E  CFE2 F012          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  4394  000022  CFD9 F013          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  4395  000026  CFDA F014          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  4396  00002A  CFF3 F015          	movff	prodl,??_INTERRUPT_InterruptManager+8
  4397  00002E  CFF4 F016          	movff	prodh,??_INTERRUPT_InterruptManager+9
  4398  000032  CFF6 F017          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  4399  000036  CFF7 F018          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  4400  00003A  CFF8 F019          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  4401  00003E  CFF5 F01A          	movff	tablat,??_INTERRUPT_InterruptManager+13
  4402                           
  4403                           ;Function.c: 188: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  4404  000042  BA9D               	btfsc	3997,5,c	;volatile
  4405  000044  AA9E               	btfss	3998,5,c	;volatile
  4406  000046  D003               	goto	i2l437
  4407                           
  4408                           ;Function.c: 189: {
  4409                           ;Function.c: 190: EUSART1_Receive_ISR();
  4410  000048  EC93  F006         	call	_EUSART1_Receive_ISR	;wreg free
  4411                           
  4412                           ;Function.c: 191: }
  4413  00004C  D00B               	goto	i2l443
  4414  00004E                     i2l437:
  4415                           
  4416                           ;Function.c: 192: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  4417  00004E  B89D               	btfsc	3997,4,c	;volatile
  4418  000050  A89E               	btfss	3998,4,c	;volatile
  4419  000052  D003               	goto	i2l439
  4420                           
  4421                           ;Function.c: 193: {
  4422                           ;Function.c: 194: EUSART1_Transmit_ISR();
  4423  000054  EC04  F006         	call	_EUSART1_Transmit_ISR	;wreg free
  4424                           
  4425                           ;Function.c: 195: }
  4426  000058  D005               	goto	i2l443
  4427  00005A                     i2l439:
  4428                           
  4429                           ;Function.c: 196: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  4430  00005A  BAF2               	btfsc	intcon,5,c	;volatile
  4431  00005C  A4F2               	btfss	intcon,2,c	;volatile
  4432  00005E  D002               	goto	i2l443
  4433                           
  4434                           ;Function.c: 197: {
  4435                           ;Function.c: 198: TMR0_ISR();
  4436  000060  ECA2  F006         	call	_TMR0_ISR	;wreg free
  4437  000064                     i2l443:
  4438  000064  C01A  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  4439  000068  C019  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  4440  00006C  C018  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  4441  000070  C017  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  4442  000074  C016  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  4443  000078  C015  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  4444  00007C  C014  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  4445  000080  C013  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  4446  000084  C012  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  4447  000088  C011  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  4448  00008C  C010  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  4449  000090  C00F  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  4450  000094  C00E  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  4451  000098  C00D  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  4452  00009C  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4453  00009E  0011               	retfie		f
  4454  0000A0                     __end_of_INTERRUPT_InterruptManager:
  4455                           	opt stack 0
  4456                           pclatu	equ	0xFFB
  4457                           pclath	equ	0xFFA
  4458                           tblptru	equ	0xFF8
  4459                           tblptrh	equ	0xFF7
  4460                           tblptrl	equ	0xFF6
  4461                           tablat	equ	0xFF5
  4462                           prodh	equ	0xFF4
  4463                           prodl	equ	0xFF3
  4464                           intcon	equ	0xFF2
  4465                           postinc0	equ	0xFEE
  4466                           fsr0h	equ	0xFEA
  4467                           fsr0l	equ	0xFE9
  4468                           wreg	equ	0xFE8
  4469                           indf1	equ	0xFE7
  4470                           postdec1	equ	0xFE5
  4471                           fsr1h	equ	0xFE2
  4472                           fsr1l	equ	0xFE1
  4473                           indf2	equ	0xFDF
  4474                           postinc2	equ	0xFDE
  4475                           postdec2	equ	0xFDD
  4476                           plusw2	equ	0xFDB
  4477                           fsr2h	equ	0xFDA
  4478                           fsr2l	equ	0xFD9
  4479                           status	equ	0xFD8
  4480                           
  4481 ;; *************** function _TMR0_ISR *****************
  4482 ;; Defined at:
  4483 ;;		line 82 in file "tmr0.c"
  4484 ;; Parameters:    Size  Location     Type
  4485 ;;		None
  4486 ;; Auto vars:     Size  Location     Type
  4487 ;;		None
  4488 ;; Return value:  Size  Location     Type
  4489 ;;                  1    wreg      void 
  4490 ;; Registers used:
  4491 ;;		wreg, status,2, status,0
  4492 ;; Tracked objects:
  4493 ;;		On entry : 0/0
  4494 ;;		On exit  : 0/0
  4495 ;;		Unchanged: 0/0
  4496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4497 ;;      Params:         0       0       0       0       0       0       0
  4498 ;;      Locals:         0       0       0       0       0       0       0
  4499 ;;      Temps:          0       0       0       0       0       0       0
  4500 ;;      Totals:         0       0       0       0       0       0       0
  4501 ;;Total ram usage:        0 bytes
  4502 ;; Hardware stack levels used:    1
  4503 ;; This function calls:
  4504 ;;		Nothing
  4505 ;; This function is called by:
  4506 ;;		_INTERRUPT_InterruptManager
  4507 ;; This function uses a non-reentrant model
  4508 ;;
  4509                           
  4510                           	psect	text29
  4511  000D44                     __ptext29:
  4512                           	opt stack 0
  4513  000D44                     _TMR0_ISR:
  4514                           	opt stack 23
  4515                           
  4516                           ;tmr0.c: 85: TMR0H = timer0ReloadVal16bit >> 8;
  4517                           
  4518                           ;incstack = 0
  4519  000D44  5039               	movf	_timer0ReloadVal16bit+1,w,c	;volatile
  4520  000D46  6ED7               	movwf	4055,c	;volatile
  4521                           
  4522                           ;tmr0.c: 86: TMR0L = (uint8_t) timer0ReloadVal16bit;
  4523  000D48  C038  FFD6         	movff	_timer0ReloadVal16bit,4054	;volatile
  4524                           
  4525                           ;tmr0.c: 88: time++;
  4526  000D4C  0E01               	movlw	1
  4527  000D4E  0100               	movlb	0	; () banked
  4528  000D50  2760               	addwf	_time& (0+255),f,b
  4529  000D52  0E00               	movlw	0
  4530  000D54  2361               	addwfc	(_time+1)& (0+255),f,b
  4531  000D56  2362               	addwfc	(_time+2)& (0+255),f,b
  4532  000D58  2363               	addwfc	(_time+3)& (0+255),f,b
  4533                           
  4534                           ; BSR set to: 0
  4535                           ;tmr0.c: 90: INTCONbits.TMR0IF = 0;
  4536  000D5A  94F2               	bcf	intcon,2,c	;volatile
  4537                           
  4538                           ; BSR set to: 0
  4539  000D5C  0012               	return		;funcret
  4540  000D5E                     __end_of_TMR0_ISR:
  4541                           	opt stack 0
  4542                           pclatu	equ	0xFFB
  4543                           pclath	equ	0xFFA
  4544                           tblptru	equ	0xFF8
  4545                           tblptrh	equ	0xFF7
  4546                           tblptrl	equ	0xFF6
  4547                           tablat	equ	0xFF5
  4548                           prodh	equ	0xFF4
  4549                           prodl	equ	0xFF3
  4550                           intcon	equ	0xFF2
  4551                           postinc0	equ	0xFEE
  4552                           fsr0h	equ	0xFEA
  4553                           fsr0l	equ	0xFE9
  4554                           wreg	equ	0xFE8
  4555                           indf1	equ	0xFE7
  4556                           postdec1	equ	0xFE5
  4557                           fsr1h	equ	0xFE2
  4558                           fsr1l	equ	0xFE1
  4559                           indf2	equ	0xFDF
  4560                           postinc2	equ	0xFDE
  4561                           postdec2	equ	0xFDD
  4562                           plusw2	equ	0xFDB
  4563                           fsr2h	equ	0xFDA
  4564                           fsr2l	equ	0xFD9
  4565                           status	equ	0xFD8
  4566                           
  4567 ;; *************** function _EUSART1_Transmit_ISR *****************
  4568 ;; Defined at:
  4569 ;;		line 149 in file "UART.c"
  4570 ;; Parameters:    Size  Location     Type
  4571 ;;		None
  4572 ;; Auto vars:     Size  Location     Type
  4573 ;;		None
  4574 ;; Return value:  Size  Location     Type
  4575 ;;                  1    wreg      void 
  4576 ;; Registers used:
  4577 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4578 ;; Tracked objects:
  4579 ;;		On entry : 0/0
  4580 ;;		On exit  : 0/0
  4581 ;;		Unchanged: 0/0
  4582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4583 ;;      Params:         0       0       0       0       0       0       0
  4584 ;;      Locals:         0       0       0       0       0       0       0
  4585 ;;      Temps:          0       0       0       0       0       0       0
  4586 ;;      Totals:         0       0       0       0       0       0       0
  4587 ;;Total ram usage:        0 bytes
  4588 ;; Hardware stack levels used:    1
  4589 ;; Hardware stack levels required when called:    2
  4590 ;; This function calls:
  4591 ;;		i2_UART_buff_get
  4592 ;;		i2_UART_buff_size
  4593 ;; This function is called by:
  4594 ;;		_INTERRUPT_InterruptManager
  4595 ;; This function uses a non-reentrant model
  4596 ;;
  4597                           
  4598                           	psect	text30
  4599  000C08                     __ptext30:
  4600                           	opt stack 0
  4601  000C08                     _EUSART1_Transmit_ISR:
  4602                           	opt stack 21
  4603                           
  4604                           ;UART.c: 151: if (UART_buff_size(&output_buffer) > 0) {
  4605                           
  4606                           ; BSR set to: 0
  4607                           ;incstack = 0
  4608  000C08  0E00               	movlw	low _output_buffer
  4609  000C0A  6E01               	movwf	i2UART_buff_size@_this,c
  4610  000C0C  0E02               	movlw	high _output_buffer
  4611  000C0E  6E02               	movwf	i2UART_buff_size@_this+1,c
  4612  000C10  ECDC  F006         	call	i2_UART_buff_size	;wreg free
  4613  000C14  BE02               	btfsc	?i2_UART_buff_size+1,7,c
  4614  000C16  D00D               	goto	i2l2196
  4615  000C18  5002               	movf	?i2_UART_buff_size+1,w,c
  4616  000C1A  E103               	bnz	i2u118_40
  4617  000C1C  0401               	decf	?i2_UART_buff_size,w,c
  4618  000C1E  A0D8               	btfss	status,0,c
  4619  000C20  D008               	goto	i2l2196
  4620  000C22                     i2u118_40:
  4621                           
  4622                           ;UART.c: 152: TXREG1 = UART_buff_get(&output_buffer);
  4623  000C22  0E00               	movlw	low _output_buffer
  4624  000C24  6E07               	movwf	i2UART_buff_get@_this,c
  4625  000C26  0E02               	movlw	high _output_buffer
  4626  000C28  6E08               	movwf	i2UART_buff_get@_this+1,c
  4627  000C2A  ECA8  F004         	call	i2_UART_buff_get	;wreg free
  4628  000C2E  6EAD               	movwf	4013,c	;volatile
  4629                           
  4630                           ;UART.c: 153: } else {
  4631  000C30  0012               	return	
  4632  000C32                     i2l2196:
  4633                           
  4634                           ;UART.c: 154: Transmit_stall = 1;
  4635  000C32  0E01               	movlw	1
  4636  000C34  6E44               	movwf	_Transmit_stall,c
  4637                           
  4638                           ;UART.c: 155: PIE1bits.TX1IE = 0;
  4639  000C36  989D               	bcf	3997,4,c	;volatile
  4640  000C38  0012               	return	
  4641  000C3A                     __end_of_EUSART1_Transmit_ISR:
  4642                           	opt stack 0
  4643                           pclatu	equ	0xFFB
  4644                           pclath	equ	0xFFA
  4645                           tblptru	equ	0xFF8
  4646                           tblptrh	equ	0xFF7
  4647                           tblptrl	equ	0xFF6
  4648                           tablat	equ	0xFF5
  4649                           prodh	equ	0xFF4
  4650                           prodl	equ	0xFF3
  4651                           intcon	equ	0xFF2
  4652                           postinc0	equ	0xFEE
  4653                           fsr0h	equ	0xFEA
  4654                           fsr0l	equ	0xFE9
  4655                           wreg	equ	0xFE8
  4656                           indf1	equ	0xFE7
  4657                           postdec1	equ	0xFE5
  4658                           fsr1h	equ	0xFE2
  4659                           fsr1l	equ	0xFE1
  4660                           indf2	equ	0xFDF
  4661                           postinc2	equ	0xFDE
  4662                           postdec2	equ	0xFDD
  4663                           plusw2	equ	0xFDB
  4664                           fsr2h	equ	0xFDA
  4665                           fsr2l	equ	0xFD9
  4666                           status	equ	0xFD8
  4667                           
  4668 ;; *************** function i2_UART_buff_size *****************
  4669 ;; Defined at:
  4670 ;;		line 101 in file "UART.c"
  4671 ;; Parameters:    Size  Location     Type
  4672 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
  4673 ;;		 -> output_buffer(206), input_buffer(206), 
  4674 ;; Auto vars:     Size  Location     Type
  4675 ;;		None
  4676 ;; Return value:  Size  Location     Type
  4677 ;;                  2    0[COMRAM] int 
  4678 ;; Registers used:
  4679 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4680 ;; Tracked objects:
  4681 ;;		On entry : 0/0
  4682 ;;		On exit  : 0/0
  4683 ;;		Unchanged: 0/0
  4684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4685 ;;      Params:         2       0       0       0       0       0       0
  4686 ;;      Locals:         0       0       0       0       0       0       0
  4687 ;;      Temps:          0       0       0       0       0       0       0
  4688 ;;      Totals:         2       0       0       0       0       0       0
  4689 ;;Total ram usage:        2 bytes
  4690 ;; Hardware stack levels used:    1
  4691 ;; This function calls:
  4692 ;;		Nothing
  4693 ;; This function is called by:
  4694 ;;		_EUSART1_Transmit_ISR
  4695 ;; This function uses a non-reentrant model
  4696 ;;
  4697                           
  4698                           	psect	text31
  4699  000DB8                     __ptext31:
  4700                           	opt stack 0
  4701  000DB8                     i2_UART_buff_size:
  4702                           	opt stack 22
  4703                           
  4704                           ;UART.c: 102: return (_this->count);
  4705                           
  4706                           ;incstack = 0
  4707  000DB8  EE20 F0CC          	lfsr	2,204
  4708  000DBC  5001               	movf	i2UART_buff_size@_this,w,c
  4709  000DBE  26D9               	addwf	fsr2l,f,c
  4710  000DC0  5002               	movf	i2UART_buff_size@_this+1,w,c
  4711  000DC2  22DA               	addwfc	fsr2h,f,c
  4712  000DC4  CFDE F001          	movff	postinc2,?i2_UART_buff_size
  4713  000DC8  CFDD F002          	movff	postdec2,?i2_UART_buff_size+1
  4714  000DCC  0012               	return	
  4715  000DCE                     __end_ofi2_UART_buff_size:
  4716                           	opt stack 0
  4717                           pclatu	equ	0xFFB
  4718                           pclath	equ	0xFFA
  4719                           tblptru	equ	0xFF8
  4720                           tblptrh	equ	0xFF7
  4721                           tblptrl	equ	0xFF6
  4722                           tablat	equ	0xFF5
  4723                           prodh	equ	0xFF4
  4724                           prodl	equ	0xFF3
  4725                           intcon	equ	0xFF2
  4726                           postinc0	equ	0xFEE
  4727                           fsr0h	equ	0xFEA
  4728                           fsr0l	equ	0xFE9
  4729                           wreg	equ	0xFE8
  4730                           indf1	equ	0xFE7
  4731                           postdec1	equ	0xFE5
  4732                           fsr1h	equ	0xFE2
  4733                           fsr1l	equ	0xFE1
  4734                           indf2	equ	0xFDF
  4735                           postinc2	equ	0xFDE
  4736                           postdec2	equ	0xFDD
  4737                           plusw2	equ	0xFDB
  4738                           fsr2h	equ	0xFDA
  4739                           fsr2l	equ	0xFD9
  4740                           status	equ	0xFD8
  4741                           
  4742 ;; *************** function i2_UART_buff_get *****************
  4743 ;; Defined at:
  4744 ;;		line 80 in file "UART.c"
  4745 ;; Parameters:    Size  Location     Type
  4746 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  4747 ;;		 -> output_buffer(206), input_buffer(206), 
  4748 ;; Auto vars:     Size  Location     Type
  4749 ;;  UART_buff_ge    1   10[COMRAM] unsigned char 
  4750 ;; Return value:  Size  Location     Type
  4751 ;;                  1    wreg      unsigned char 
  4752 ;; Registers used:
  4753 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4754 ;; Tracked objects:
  4755 ;;		On entry : 0/0
  4756 ;;		On exit  : 0/0
  4757 ;;		Unchanged: 0/0
  4758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4759 ;;      Params:         2       0       0       0       0       0       0
  4760 ;;      Locals:         1       0       0       0       0       0       0
  4761 ;;      Temps:          2       0       0       0       0       0       0
  4762 ;;      Totals:         5       0       0       0       0       0       0
  4763 ;;Total ram usage:        5 bytes
  4764 ;; Hardware stack levels used:    1
  4765 ;; Hardware stack levels required when called:    1
  4766 ;; This function calls:
  4767 ;;		i2_UART_buff_modulo_inc
  4768 ;; This function is called by:
  4769 ;;		_EUSART1_Transmit_ISR
  4770 ;; This function uses a non-reentrant model
  4771 ;;
  4772                           
  4773                           	psect	text32
  4774  000950                     __ptext32:
  4775                           	opt stack 0
  4776  000950                     i2_UART_buff_get:
  4777                           	opt stack 21
  4778                           
  4779                           ;UART.c: 81: unsigned char c;
  4780                           ;UART.c: 82: if (_this->count > 0) {
  4781                           
  4782                           ;incstack = 0
  4783  000950  EE20 F0CC          	lfsr	2,204
  4784  000954  5007               	movf	i2UART_buff_get@_this,w,c
  4785  000956  26D9               	addwf	fsr2l,f,c
  4786  000958  5008               	movf	i2UART_buff_get@_this+1,w,c
  4787  00095A  22DA               	addwfc	fsr2h,f,c
  4788  00095C  0E01               	movlw	1
  4789  00095E  BEDB               	btfsc	plusw2,7,c
  4790  000960  D03C               	goto	i2l2124
  4791  000962  0E01               	movlw	1
  4792  000964  50DB               	movf	plusw2,w,c
  4793  000966  E103               	bnz	i2u110_40
  4794  000968  04DE               	decf	postinc2,w,c
  4795  00096A  A0D8               	btfss	status,0,c
  4796  00096C  D036               	goto	i2l2124
  4797  00096E                     i2u110_40:
  4798                           
  4799                           ;UART.c: 83: c = _this->buf[_this->tail];
  4800  00096E  EE20 F0CA          	lfsr	2,202
  4801  000972  5007               	movf	i2UART_buff_get@_this,w,c
  4802  000974  26D9               	addwf	fsr2l,f,c
  4803  000976  5008               	movf	i2UART_buff_get@_this+1,w,c
  4804  000978  22DA               	addwfc	fsr2h,f,c
  4805  00097A  CFDE F009          	movff	postinc2,??i2_UART_buff_get
  4806  00097E  CFDD F00A          	movff	postdec2,??i2_UART_buff_get+1
  4807  000982  5009               	movf	??i2_UART_buff_get,w,c
  4808  000984  2407               	addwf	i2UART_buff_get@_this,w,c
  4809  000986  6ED9               	movwf	fsr2l,c
  4810  000988  500A               	movf	??i2_UART_buff_get+1,w,c
  4811  00098A  2008               	addwfc	i2UART_buff_get@_this+1,w,c
  4812  00098C  6EDA               	movwf	fsr2h,c
  4813  00098E  50DF               	movf	indf2,w,c
  4814  000990  6E0B               	movwf	i2UART_buff_get@c,c
  4815                           
  4816                           ;UART.c: 84: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  4817  000992  EE20 F0CA          	lfsr	2,202
  4818  000996  5007               	movf	i2UART_buff_get@_this,w,c
  4819  000998  26D9               	addwf	fsr2l,f,c
  4820  00099A  5008               	movf	i2UART_buff_get@_this+1,w,c
  4821  00099C  22DA               	addwfc	fsr2h,f,c
  4822  00099E  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  4823  0009A2  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  4824  0009A6  0E00               	movlw	0
  4825  0009A8  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  4826  0009AA  0EC8               	movlw	200
  4827  0009AC  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  4828  0009AE  EC60  F006         	call	i2_UART_buff_modulo_inc	;wreg free
  4829  0009B2  EE20 F0CA          	lfsr	2,202
  4830  0009B6  5007               	movf	i2UART_buff_get@_this,w,c
  4831  0009B8  26D9               	addwf	fsr2l,f,c
  4832  0009BA  5008               	movf	i2UART_buff_get@_this+1,w,c
  4833  0009BC  22DA               	addwfc	fsr2h,f,c
  4834  0009BE  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  4835  0009C2  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  4836                           
  4837                           ;UART.c: 85: --_this->count;
  4838  0009C6  EE20 F0CC          	lfsr	2,204
  4839  0009CA  5007               	movf	i2UART_buff_get@_this,w,c
  4840  0009CC  26D9               	addwf	fsr2l,f,c
  4841  0009CE  5008               	movf	i2UART_buff_get@_this+1,w,c
  4842  0009D0  22DA               	addwfc	fsr2h,f,c
  4843  0009D2  06DE               	decf	postinc2,f,c
  4844  0009D4  0E00               	movlw	0
  4845  0009D6  5ADD               	subwfb	postdec2,f,c
  4846                           
  4847                           ;UART.c: 86: } else {
  4848  0009D8  D002               	goto	i2l276
  4849  0009DA                     i2l2124:
  4850                           
  4851                           ;UART.c: 87: c = 0;
  4852  0009DA  0E00               	movlw	0
  4853  0009DC  6E0B               	movwf	i2UART_buff_get@c,c
  4854  0009DE                     i2l276:
  4855                           
  4856                           ;UART.c: 88: }
  4857                           ;UART.c: 89: return (c);
  4858  0009DE  500B               	movf	i2UART_buff_get@c,w,c
  4859  0009E0  0012               	return	
  4860  0009E2                     __end_ofi2_UART_buff_get:
  4861                           	opt stack 0
  4862                           pclatu	equ	0xFFB
  4863                           pclath	equ	0xFFA
  4864                           tblptru	equ	0xFF8
  4865                           tblptrh	equ	0xFF7
  4866                           tblptrl	equ	0xFF6
  4867                           tablat	equ	0xFF5
  4868                           prodh	equ	0xFF4
  4869                           prodl	equ	0xFF3
  4870                           intcon	equ	0xFF2
  4871                           postinc0	equ	0xFEE
  4872                           fsr0h	equ	0xFEA
  4873                           fsr0l	equ	0xFE9
  4874                           wreg	equ	0xFE8
  4875                           indf1	equ	0xFE7
  4876                           postdec1	equ	0xFE5
  4877                           fsr1h	equ	0xFE2
  4878                           fsr1l	equ	0xFE1
  4879                           indf2	equ	0xFDF
  4880                           postinc2	equ	0xFDE
  4881                           postdec2	equ	0xFDD
  4882                           plusw2	equ	0xFDB
  4883                           fsr2h	equ	0xFDA
  4884                           fsr2l	equ	0xFD9
  4885                           status	equ	0xFD8
  4886                           
  4887 ;; *************** function _EUSART1_Receive_ISR *****************
  4888 ;; Defined at:
  4889 ;;		line 138 in file "UART.c"
  4890 ;; Parameters:    Size  Location     Type
  4891 ;;		None
  4892 ;; Auto vars:     Size  Location     Type
  4893 ;;  data            1   11[COMRAM] unsigned char 
  4894 ;; Return value:  Size  Location     Type
  4895 ;;                  1    wreg      void 
  4896 ;; Registers used:
  4897 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4898 ;; Tracked objects:
  4899 ;;		On entry : 0/0
  4900 ;;		On exit  : 0/0
  4901 ;;		Unchanged: 0/0
  4902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4903 ;;      Params:         0       0       0       0       0       0       0
  4904 ;;      Locals:         1       0       0       0       0       0       0
  4905 ;;      Temps:          0       0       0       0       0       0       0
  4906 ;;      Totals:         1       0       0       0       0       0       0
  4907 ;;Total ram usage:        1 bytes
  4908 ;; Hardware stack levels used:    1
  4909 ;; Hardware stack levels required when called:    2
  4910 ;; This function calls:
  4911 ;;		i2_UART_buff_put
  4912 ;; This function is called by:
  4913 ;;		_INTERRUPT_InterruptManager
  4914 ;; This function uses a non-reentrant model
  4915 ;;
  4916                           
  4917                           	psect	text33
  4918  000D26                     __ptext33:
  4919                           	opt stack 0
  4920  000D26                     _EUSART1_Receive_ISR:
  4921                           	opt stack 21
  4922                           
  4923                           ;UART.c: 139: if (1 == RC1STAbits.OERR) {
  4924                           
  4925                           ;incstack = 0
  4926  000D26  A2AB               	btfss	4011,1,c	;volatile
  4927  000D28  D002               	goto	i2l307
  4928                           
  4929                           ;UART.c: 142: RC1STAbits.CREN = 0;
  4930  000D2A  98AB               	bcf	4011,4,c	;volatile
  4931                           
  4932                           ;UART.c: 143: RC1STAbits.CREN = 1;
  4933  000D2C  88AB               	bsf	4011,4,c	;volatile
  4934  000D2E                     i2l307:
  4935                           
  4936                           ;UART.c: 144: }
  4937                           ;UART.c: 145: unsigned char data = RCREG1;
  4938  000D2E  CFAE F00C          	movff	4014,EUSART1_Receive_ISR@data	;volatile
  4939                           
  4940                           ;UART.c: 146: UART_buff_put(&input_buffer, data);
  4941  000D32  0E00               	movlw	low _input_buffer
  4942  000D34  6E07               	movwf	i2UART_buff_put@_this,c
  4943  000D36  0E01               	movlw	high _input_buffer
  4944  000D38  6E08               	movwf	i2UART_buff_put@_this+1,c
  4945  000D3A  C00C  F009         	movff	EUSART1_Receive_ISR@data,i2UART_buff_put@c
  4946  000D3E  EC5A  F003         	call	i2_UART_buff_put	;wreg free
  4947  000D42  0012               	return		;funcret
  4948  000D44                     __end_of_EUSART1_Receive_ISR:
  4949                           	opt stack 0
  4950                           pclatu	equ	0xFFB
  4951                           pclath	equ	0xFFA
  4952                           tblptru	equ	0xFF8
  4953                           tblptrh	equ	0xFF7
  4954                           tblptrl	equ	0xFF6
  4955                           tablat	equ	0xFF5
  4956                           prodh	equ	0xFF4
  4957                           prodl	equ	0xFF3
  4958                           intcon	equ	0xFF2
  4959                           postinc0	equ	0xFEE
  4960                           fsr0h	equ	0xFEA
  4961                           fsr0l	equ	0xFE9
  4962                           wreg	equ	0xFE8
  4963                           indf1	equ	0xFE7
  4964                           postdec1	equ	0xFE5
  4965                           fsr1h	equ	0xFE2
  4966                           fsr1l	equ	0xFE1
  4967                           indf2	equ	0xFDF
  4968                           postinc2	equ	0xFDE
  4969                           postdec2	equ	0xFDD
  4970                           plusw2	equ	0xFDB
  4971                           fsr2h	equ	0xFDA
  4972                           fsr2l	equ	0xFD9
  4973                           status	equ	0xFD8
  4974                           
  4975 ;; *************** function i2_UART_buff_put *****************
  4976 ;; Defined at:
  4977 ;;		line 67 in file "UART.c"
  4978 ;; Parameters:    Size  Location     Type
  4979 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  4980 ;;		 -> output_buffer(206), input_buffer(206), 
  4981 ;;  c               1    8[COMRAM] const unsigned char 
  4982 ;; Auto vars:     Size  Location     Type
  4983 ;;		None
  4984 ;; Return value:  Size  Location     Type
  4985 ;;                  1    wreg      void 
  4986 ;; Registers used:
  4987 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4988 ;; Tracked objects:
  4989 ;;		On entry : 0/0
  4990 ;;		On exit  : 0/0
  4991 ;;		Unchanged: 0/0
  4992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4993 ;;      Params:         3       0       0       0       0       0       0
  4994 ;;      Locals:         0       0       0       0       0       0       0
  4995 ;;      Temps:          2       0       0       0       0       0       0
  4996 ;;      Totals:         5       0       0       0       0       0       0
  4997 ;;Total ram usage:        5 bytes
  4998 ;; Hardware stack levels used:    1
  4999 ;; Hardware stack levels required when called:    1
  5000 ;; This function calls:
  5001 ;;		i2_UART_buff_modulo_inc
  5002 ;; This function is called by:
  5003 ;;		_EUSART1_Receive_ISR
  5004 ;; This function uses a non-reentrant model
  5005 ;;
  5006                           
  5007                           	psect	text34
  5008  0006B4                     __ptext34:
  5009                           	opt stack 0
  5010  0006B4                     i2_UART_buff_put:
  5011                           	opt stack 21
  5012                           
  5013                           ;UART.c: 68: if (_this->count < 200) {
  5014                           
  5015                           ;incstack = 0
  5016  0006B4  EE20 F0CC          	lfsr	2,204
  5017  0006B8  5007               	movf	i2UART_buff_put@_this,w,c
  5018  0006BA  26D9               	addwf	fsr2l,f,c
  5019  0006BC  5008               	movf	i2UART_buff_put@_this+1,w,c
  5020  0006BE  22DA               	addwfc	fsr2h,f,c
  5021  0006C0  0E01               	movlw	1
  5022  0006C2  BEDB               	btfsc	plusw2,7,c
  5023  0006C4  D007               	goto	i2l2104
  5024  0006C6  0E01               	movlw	1
  5025  0006C8  50DB               	movf	plusw2,w,c
  5026  0006CA  E13A               	bnz	i2l2110
  5027  0006CC  0EC8               	movlw	200
  5028  0006CE  5CDE               	subwf	postinc2,w,c
  5029  0006D0  B0D8               	btfsc	status,0,c
  5030  0006D2  D036               	goto	i2l2110
  5031  0006D4                     i2l2104:
  5032                           
  5033                           ;UART.c: 69: _this->buf[_this->head] = c;
  5034  0006D4  EE20 F0C8          	lfsr	2,200
  5035  0006D8  5007               	movf	i2UART_buff_put@_this,w,c
  5036  0006DA  26D9               	addwf	fsr2l,f,c
  5037  0006DC  5008               	movf	i2UART_buff_put@_this+1,w,c
  5038  0006DE  22DA               	addwfc	fsr2h,f,c
  5039  0006E0  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  5040  0006E4  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  5041  0006E8  500A               	movf	??i2_UART_buff_put,w,c
  5042  0006EA  2407               	addwf	i2UART_buff_put@_this,w,c
  5043  0006EC  6ED9               	movwf	fsr2l,c
  5044  0006EE  500B               	movf	??i2_UART_buff_put+1,w,c
  5045  0006F0  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  5046  0006F2  6EDA               	movwf	fsr2h,c
  5047  0006F4  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  5048                           
  5049                           ;UART.c: 70: _this->head = UART_buff_modulo_inc(_this->head, 200);
  5050  0006F8  EE20 F0C8          	lfsr	2,200
  5051  0006FC  5007               	movf	i2UART_buff_put@_this,w,c
  5052  0006FE  26D9               	addwf	fsr2l,f,c
  5053  000700  5008               	movf	i2UART_buff_put@_this+1,w,c
  5054  000702  22DA               	addwfc	fsr2h,f,c
  5055  000704  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  5056  000708  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  5057  00070C  0E00               	movlw	0
  5058  00070E  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  5059  000710  0EC8               	movlw	200
  5060  000712  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  5061  000714  EC60  F006         	call	i2_UART_buff_modulo_inc	;wreg free
  5062  000718  EE20 F0C8          	lfsr	2,200
  5063  00071C  5007               	movf	i2UART_buff_put@_this,w,c
  5064  00071E  26D9               	addwf	fsr2l,f,c
  5065  000720  5008               	movf	i2UART_buff_put@_this+1,w,c
  5066  000722  22DA               	addwfc	fsr2h,f,c
  5067  000724  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  5068  000728  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  5069                           
  5070                           ;UART.c: 71: ++_this->count;
  5071  00072C  EE20 F0CC          	lfsr	2,204
  5072  000730  5007               	movf	i2UART_buff_put@_this,w,c
  5073  000732  26D9               	addwf	fsr2l,f,c
  5074  000734  5008               	movf	i2UART_buff_put@_this+1,w,c
  5075  000736  22DA               	addwfc	fsr2h,f,c
  5076  000738  2ADE               	incf	postinc2,f,c
  5077  00073A  0E00               	movlw	0
  5078  00073C  22DD               	addwfc	postdec2,f,c
  5079                           
  5080                           ;UART.c: 72: } else {
  5081  00073E  0012               	return	
  5082  000740                     i2l2110:
  5083                           
  5084                           ;UART.c: 73: _this->buf[_this->head] = c;
  5085  000740  EE20 F0C8          	lfsr	2,200
  5086  000744  5007               	movf	i2UART_buff_put@_this,w,c
  5087  000746  26D9               	addwf	fsr2l,f,c
  5088  000748  5008               	movf	i2UART_buff_put@_this+1,w,c
  5089  00074A  22DA               	addwfc	fsr2h,f,c
  5090  00074C  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  5091  000750  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  5092  000754  500A               	movf	??i2_UART_buff_put,w,c
  5093  000756  2407               	addwf	i2UART_buff_put@_this,w,c
  5094  000758  6ED9               	movwf	fsr2l,c
  5095  00075A  500B               	movf	??i2_UART_buff_put+1,w,c
  5096  00075C  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  5097  00075E  6EDA               	movwf	fsr2h,c
  5098  000760  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  5099                           
  5100                           ;UART.c: 74: _this->head = UART_buff_modulo_inc(_this->head, 200);
  5101  000764  EE20 F0C8          	lfsr	2,200
  5102  000768  5007               	movf	i2UART_buff_put@_this,w,c
  5103  00076A  26D9               	addwf	fsr2l,f,c
  5104  00076C  5008               	movf	i2UART_buff_put@_this+1,w,c
  5105  00076E  22DA               	addwfc	fsr2h,f,c
  5106  000770  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  5107  000774  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  5108  000778  0E00               	movlw	0
  5109  00077A  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  5110  00077C  0EC8               	movlw	200
  5111  00077E  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  5112  000780  EC60  F006         	call	i2_UART_buff_modulo_inc	;wreg free
  5113  000784  EE20 F0C8          	lfsr	2,200
  5114  000788  5007               	movf	i2UART_buff_put@_this,w,c
  5115  00078A  26D9               	addwf	fsr2l,f,c
  5116  00078C  5008               	movf	i2UART_buff_put@_this+1,w,c
  5117  00078E  22DA               	addwfc	fsr2h,f,c
  5118  000790  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  5119  000794  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  5120                           
  5121                           ;UART.c: 75: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  5122  000798  EE20 F0CA          	lfsr	2,202
  5123  00079C  5007               	movf	i2UART_buff_put@_this,w,c
  5124  00079E  26D9               	addwf	fsr2l,f,c
  5125  0007A0  5008               	movf	i2UART_buff_put@_this+1,w,c
  5126  0007A2  22DA               	addwfc	fsr2h,f,c
  5127  0007A4  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  5128  0007A8  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  5129  0007AC  0E00               	movlw	0
  5130  0007AE  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  5131  0007B0  0EC8               	movlw	200
  5132  0007B2  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  5133  0007B4  EC60  F006         	call	i2_UART_buff_modulo_inc	;wreg free
  5134  0007B8  EE20 F0CA          	lfsr	2,202
  5135  0007BC  5007               	movf	i2UART_buff_put@_this,w,c
  5136  0007BE  26D9               	addwf	fsr2l,f,c
  5137  0007C0  5008               	movf	i2UART_buff_put@_this+1,w,c
  5138  0007C2  22DA               	addwfc	fsr2h,f,c
  5139  0007C4  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  5140  0007C8  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  5141  0007CC  0012               	return	
  5142  0007CE                     __end_ofi2_UART_buff_put:
  5143                           	opt stack 0
  5144                           pclatu	equ	0xFFB
  5145                           pclath	equ	0xFFA
  5146                           tblptru	equ	0xFF8
  5147                           tblptrh	equ	0xFF7
  5148                           tblptrl	equ	0xFF6
  5149                           tablat	equ	0xFF5
  5150                           prodh	equ	0xFF4
  5151                           prodl	equ	0xFF3
  5152                           intcon	equ	0xFF2
  5153                           postinc0	equ	0xFEE
  5154                           fsr0h	equ	0xFEA
  5155                           fsr0l	equ	0xFE9
  5156                           wreg	equ	0xFE8
  5157                           indf1	equ	0xFE7
  5158                           postdec1	equ	0xFE5
  5159                           fsr1h	equ	0xFE2
  5160                           fsr1l	equ	0xFE1
  5161                           indf2	equ	0xFDF
  5162                           postinc2	equ	0xFDE
  5163                           postdec2	equ	0xFDD
  5164                           plusw2	equ	0xFDB
  5165                           fsr2h	equ	0xFDA
  5166                           fsr2l	equ	0xFD9
  5167                           status	equ	0xFD8
  5168                           
  5169 ;; *************** function i2_UART_buff_modulo_inc *****************
  5170 ;; Defined at:
  5171 ;;		line 105 in file "UART.c"
  5172 ;; Parameters:    Size  Location     Type
  5173 ;;  value           2    0[COMRAM] const unsigned int 
  5174 ;;  modulus         2    2[COMRAM] const unsigned int 
  5175 ;; Auto vars:     Size  Location     Type
  5176 ;;  UART_buff_mo    2    4[COMRAM] unsigned int 
  5177 ;; Return value:  Size  Location     Type
  5178 ;;                  2    0[COMRAM] unsigned int 
  5179 ;; Registers used:
  5180 ;;		wreg, status,2, status,0
  5181 ;; Tracked objects:
  5182 ;;		On entry : 0/0
  5183 ;;		On exit  : 0/0
  5184 ;;		Unchanged: 0/0
  5185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5186 ;;      Params:         4       0       0       0       0       0       0
  5187 ;;      Locals:         2       0       0       0       0       0       0
  5188 ;;      Temps:          0       0       0       0       0       0       0
  5189 ;;      Totals:         6       0       0       0       0       0       0
  5190 ;;Total ram usage:        6 bytes
  5191 ;; Hardware stack levels used:    1
  5192 ;; This function calls:
  5193 ;;		Nothing
  5194 ;; This function is called by:
  5195 ;;		i2_UART_buff_put
  5196 ;;		i2_UART_buff_get
  5197 ;; This function uses a non-reentrant model
  5198 ;;
  5199                           
  5200                           	psect	text35
  5201  000CC0                     __ptext35:
  5202                           	opt stack 0
  5203  000CC0                     i2_UART_buff_modulo_inc:
  5204                           	opt stack 21
  5205                           
  5206                           ;UART.c: 106: unsigned int my_value = value + 1;
  5207                           
  5208                           ;incstack = 0
  5209  000CC0  0E01               	movlw	1
  5210  000CC2  2401               	addwf	i2UART_buff_modulo_inc@value,w,c
  5211  000CC4  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  5212  000CC6  0E00               	movlw	0
  5213  000CC8  2002               	addwfc	i2UART_buff_modulo_inc@value+1,w,c
  5214  000CCA  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  5215                           
  5216                           ;UART.c: 107: if (my_value >= modulus) {
  5217  000CCC  5003               	movf	i2UART_buff_modulo_inc@modulus,w,c
  5218  000CCE  5C05               	subwf	i2UART_buff_modulo_inc@my_value,w,c
  5219  000CD0  5004               	movf	i2UART_buff_modulo_inc@modulus+1,w,c
  5220  000CD2  5806               	subwfb	i2UART_buff_modulo_inc@my_value+1,w,c
  5221  000CD4  A0D8               	btfss	status,0,c
  5222  000CD6  D004               	goto	i2l2054
  5223                           
  5224                           ;UART.c: 108: my_value = 0;
  5225  000CD8  0E00               	movlw	0
  5226  000CDA  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  5227  000CDC  0E00               	movlw	0
  5228  000CDE  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  5229  000CE0                     i2l2054:
  5230                           
  5231                           ;UART.c: 109: }
  5232                           ;UART.c: 110: return (my_value);
  5233  000CE0  C005  F001         	movff	i2UART_buff_modulo_inc@my_value,?i2_UART_buff_modulo_inc
  5234  000CE4  C006  F002         	movff	i2UART_buff_modulo_inc@my_value+1,?i2_UART_buff_modulo_inc+1
  5235  000CE8  0012               	return	
  5236  000CEA                     __end_ofi2_UART_buff_modulo_inc:
  5237                           	opt stack 0
  5238  0000                     pclatu	equ	0xFFB
  5239                           pclath	equ	0xFFA
  5240                           tblptru	equ	0xFF8
  5241                           tblptrh	equ	0xFF7
  5242                           tblptrl	equ	0xFF6
  5243                           tablat	equ	0xFF5
  5244                           prodh	equ	0xFF4
  5245                           prodl	equ	0xFF3
  5246                           intcon	equ	0xFF2
  5247                           postinc0	equ	0xFEE
  5248                           fsr0h	equ	0xFEA
  5249                           fsr0l	equ	0xFE9
  5250                           wreg	equ	0xFE8
  5251                           indf1	equ	0xFE7
  5252                           postdec1	equ	0xFE5
  5253                           fsr1h	equ	0xFE2
  5254                           fsr1l	equ	0xFE1
  5255                           indf2	equ	0xFDF
  5256                           postinc2	equ	0xFDE
  5257                           postdec2	equ	0xFDD
  5258                           plusw2	equ	0xFDB
  5259                           fsr2h	equ	0xFDA
  5260                           fsr2l	equ	0xFD9
  5261                           status	equ	0xFD8
  5262                           pclatu	equ	0xFFB
  5263                           pclath	equ	0xFFA
  5264                           tblptru	equ	0xFF8
  5265                           tblptrh	equ	0xFF7
  5266                           tblptrl	equ	0xFF6
  5267                           tablat	equ	0xFF5
  5268                           prodh	equ	0xFF4
  5269                           prodl	equ	0xFF3
  5270                           intcon	equ	0xFF2
  5271                           postinc0	equ	0xFEE
  5272                           fsr0h	equ	0xFEA
  5273                           fsr0l	equ	0xFE9
  5274                           wreg	equ	0xFE8
  5275                           indf1	equ	0xFE7
  5276                           postdec1	equ	0xFE5
  5277                           fsr1h	equ	0xFE2
  5278                           fsr1l	equ	0xFE1
  5279                           indf2	equ	0xFDF
  5280                           postinc2	equ	0xFDE
  5281                           postdec2	equ	0xFDD
  5282                           plusw2	equ	0xFDB
  5283                           fsr2h	equ	0xFDA
  5284                           fsr2l	equ	0xFD9
  5285                           status	equ	0xFD8
  5286                           
  5287                           	psect	text36
  5288  000000                     __ptext36:
  5289                           	opt stack 0
  5290                           pclatu	equ	0xFFB
  5291                           pclath	equ	0xFFA
  5292                           tblptru	equ	0xFF8
  5293                           tblptrh	equ	0xFF7
  5294                           tblptrl	equ	0xFF6
  5295                           tablat	equ	0xFF5
  5296                           prodh	equ	0xFF4
  5297                           prodl	equ	0xFF3
  5298                           intcon	equ	0xFF2
  5299                           postinc0	equ	0xFEE
  5300                           fsr0h	equ	0xFEA
  5301                           fsr0l	equ	0xFE9
  5302                           wreg	equ	0xFE8
  5303                           indf1	equ	0xFE7
  5304                           postdec1	equ	0xFE5
  5305                           fsr1h	equ	0xFE2
  5306                           fsr1l	equ	0xFE1
  5307                           indf2	equ	0xFDF
  5308                           postinc2	equ	0xFDE
  5309                           postdec2	equ	0xFDD
  5310                           plusw2	equ	0xFDB
  5311                           fsr2h	equ	0xFDA
  5312                           fsr2l	equ	0xFD9
  5313                           status	equ	0xFD8
  5314                           
  5315                           	psect	rparam
  5316  0000                     pclatu	equ	0xFFB
  5317                           pclath	equ	0xFFA
  5318                           tblptru	equ	0xFF8
  5319                           tblptrh	equ	0xFF7
  5320                           tblptrl	equ	0xFF6
  5321                           tablat	equ	0xFF5
  5322                           prodh	equ	0xFF4
  5323                           prodl	equ	0xFF3
  5324                           intcon	equ	0xFF2
  5325                           postinc0	equ	0xFEE
  5326                           fsr0h	equ	0xFEA
  5327                           fsr0l	equ	0xFE9
  5328                           wreg	equ	0xFE8
  5329                           indf1	equ	0xFE7
  5330                           postdec1	equ	0xFE5
  5331                           fsr1h	equ	0xFE2
  5332                           fsr1l	equ	0xFE1
  5333                           indf2	equ	0xFDF
  5334                           postinc2	equ	0xFDE
  5335                           postdec2	equ	0xFDD
  5336                           plusw2	equ	0xFDB
  5337                           fsr2h	equ	0xFDA
  5338                           fsr2l	equ	0xFD9
  5339                           status	equ	0xFD8
  5340                           
  5341                           	psect	temp
  5342  000045                     btemp:
  5343                           	opt stack 0
  5344  000045                     	ds	1
  5345  0000                     int$flags	set	btemp
  5346                           pclatu	equ	0xFFB
  5347                           pclath	equ	0xFFA
  5348                           tblptru	equ	0xFF8
  5349                           tblptrh	equ	0xFF7
  5350                           tblptrl	equ	0xFF6
  5351                           tablat	equ	0xFF5
  5352                           prodh	equ	0xFF4
  5353                           prodl	equ	0xFF3
  5354                           intcon	equ	0xFF2
  5355                           postinc0	equ	0xFEE
  5356                           fsr0h	equ	0xFEA
  5357                           fsr0l	equ	0xFE9
  5358                           wreg	equ	0xFE8
  5359                           indf1	equ	0xFE7
  5360                           postdec1	equ	0xFE5
  5361                           fsr1h	equ	0xFE2
  5362                           fsr1l	equ	0xFE1
  5363                           indf2	equ	0xFDF
  5364                           postinc2	equ	0xFDE
  5365                           postdec2	equ	0xFDD
  5366                           plusw2	equ	0xFDB
  5367                           fsr2h	equ	0xFDA
  5368                           fsr2l	equ	0xFD9
  5369                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        5
    BSS         949
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     37      68
    BANK0           160     26     101
    BANK1           256      0     236
    BANK2           256      0     206
    BANK3           256      0     200
    BANK4           256      0     206
    BANK5           256     70      70

Pointer List with Targets:

    begin@stuffpeek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_peek(), 

    begin@stuffavailable	PTR FTN()int  size(2) Largest target is 2
		 -> Receive_available(), 

    begin@stufftoreceive	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_get(), 

    begin@stufftosend	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Send_put(), 

    begin@ptr	PTR volatile int  size(2) Largest target is 10
		 -> receiveArray(BANK0[10]), 

    sendStructAddress	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    receiveArrayAddress	PTR volatile int  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    serial_peek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), 

    serial_write	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    memset@p1	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK2[206]), input_buffer(BANK1[206]), 

    memset@p	PTR unsigned char  size(2) Largest target is 206
		 -> output_buffer(BANK2[206]), input_buffer(BANK1[206]), 

    cobs_decode@dst_write_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK0[30]), 

    cobs_decode@dst_buf_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK0[30]), 

    cobs_decode@dst_buf_end_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK0[30]), 

    cobs_decode@src_ptr	PTR const unsigned char  size(2) Largest target is 30
		 -> ReciveArray(BANK1[30]), 

    cobs_decode@src_end_ptr	PTR const unsigned char  size(2) Largest target is 30
		 -> ReciveArray(BANK1[30]), 

    cobs_encode@dst_write_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> sendData@COBSArray(BANK5[30]), 

    cobs_encode@dst_code_write_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> sendData@COBSArray(BANK5[30]), 

    cobs_encode@dst_buf_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> sendData@COBSArray(BANK5[30]), 

    cobs_encode@dst_buf_end_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> sendData@COBSArray(BANK5[30]), 

    cobs_encode@src_ptr	PTR const unsigned char  size(2) Largest target is 30
		 -> sendData@SendArray(BANK5[30]), 

    cobs_encode@src_end_ptr	PTR const unsigned char  size(2) Largest target is 30
		 -> sendData@SendArray(BANK5[30]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK2[206]), input_buffer(BANK1[206]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK2[206]), input_buffer(BANK1[206]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK2[206]), input_buffer(BANK1[206]), 

    UART_buff_init@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK2[206]), input_buffer(BANK1[206]), 

    serial_read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), 

    serial_available	PTR FTN()int  size(2) Largest target is 1
		 -> Absolute function(), 

    sp__memset	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK2[206]), input_buffer(BANK1[206]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 30
		 -> CRCcheck@arrayHolder(COMRAM[3]), ProcessArray(BANK0[30]), sendData@SendArray(BANK5[30]), 


Critical Paths under _main in COMRAM

    _Send_put->_UART_buff_get
    _Send_put->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc
    _Receive_get->_UART_buff_get
    _UART_buff_get->_UART_buff_modulo_inc
    _Receive_available->_UART_buff_size
    _EUSART1_Initialize->_UART_buff_init
    _UART_buff_init->_memset

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _EUSART1_Transmit_ISR->i2_UART_buff_get
    i2_UART_buff_get->i2_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->i2_UART_buff_put
    i2_UART_buff_put->i2_UART_buff_modulo_inc

Critical Paths under _main in BANK0

    _updateComms->_receiveData
    _respondECU->_sendData
    _sendData->_cobs_encode
    _receiveData->_cobs_decode
    _ComStart->_begin

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    _respondECU->_sendData

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   11888
                         _ReadFaults
                            _SetTime
                              _Start
                        _updateComms
 ---------------------------------------------------------------------------------
 (1) _updateComms                                          0     0      0   10450
                        _receiveData
                         _respondECU
 ---------------------------------------------------------------------------------
 (2) _respondECU                                           0     0      0    6463
                              _Delay
                           _sendData
 ---------------------------------------------------------------------------------
 (3) _sendData                                            77    74      3    6289
                                             13 BANK0      7     4      3
                                              0 BANK5     70    70      0
                               _CRC8
                          _GetFaults
                           _Send_put
                        _cobs_encode
 ---------------------------------------------------------------------------------
 (4) _cobs_encode                                         23    15      8    1561
                                             26 COMRAM    10     2      8
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (4) _Send_put                                             1     1      0    2614
                                              0 BANK0      1     1      0
                      _UART_buff_get
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (5) _UART_buff_put                                        5     2      3    1418
                                             32 COMRAM     5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (4) _GetFaults                                            1     1      0      62
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Delay                                                5     3      2     174
                                             26 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _receiveData                                         12    12      0    3987
                                             14 BANK0     12    12      0
                               _CRC8
                  _Receive_available
                        _Receive_get
                        _cobs_decode
 ---------------------------------------------------------------------------------
 (3) _cobs_decode                                         24    16      8    1731
                                             26 COMRAM    10     2      8
                                              0 BANK0     14    14      0
 ---------------------------------------------------------------------------------
 (3) _Receive_get                                          0     0      0    1165
                      _UART_buff_get
 ---------------------------------------------------------------------------------
 (5) _UART_buff_get                                        5     3      2    1165
                                             32 COMRAM     5     3      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (6) _UART_buff_modulo_inc                                 6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _Receive_available                                    2     0      2     150
                                             28 COMRAM     2     0      2
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (4) _UART_buff_size                                       2     0      2     150
                                             26 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _CRC8                                                 7     4      3     706
                                             26 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (1) _Start                                                0     0      0    1438
                           _ComStart
               _INTERRUPT_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ComStart                                             0     0      0    1438
                 _EUSART1_Initialize
                              _begin
 ---------------------------------------------------------------------------------
 (3) _begin                                               13     0     13     616
                                              0 BANK0     13     0     13
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0     822
                     _UART_buff_init
 ---------------------------------------------------------------------------------
 (4) _UART_buff_init                                       2     0      2     822
                                             34 COMRAM     2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               8     2      6     672
                                             26 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (1) _SetTime                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ReadFaults                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                          14    14      0    1209
                                             12 COMRAM    14    14      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR0_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Transmit_ISR                                 0     0      0     528
                    i2_UART_buff_get
                   i2_UART_buff_size
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_size                                     2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_get                                      5     3      2     480
                                              6 COMRAM     5     3      2
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Receive_ISR                                  1     1      0     681
                                             11 COMRAM     1     1      0
                    i2_UART_buff_put
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_put                                      5     2      3     658
                                              6 COMRAM     5     2      3
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_modulo_inc                              6     2      4     298
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ReadFaults
   _SetTime
   _Start
     _ComStart
       _EUSART1_Initialize
         _UART_buff_init
           _memset
       _begin
     _INTERRUPT_Initialize
     _TMR0_Initialize
       _TMR0_StartTimer
   _updateComms
     _receiveData
       _CRC8
       _Receive_available
         _UART_buff_size
       _Receive_get
         _UART_buff_get
           _UART_buff_modulo_inc
       _cobs_decode
     _respondECU
       _Delay
       _sendData
         _CRC8
         _GetFaults
         _Send_put
           _UART_buff_get
             _UART_buff_modulo_inc
           _UART_buff_put
             _UART_buff_modulo_inc
         _cobs_encode

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
     i2_UART_buff_put
       i2_UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     i2_UART_buff_get
       i2_UART_buff_modulo_inc
     i2_UART_buff_size
   _TMR0_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100     46      46      15       27.3%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      CE      13       80.5%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      C8      11       78.1%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      CE       8       80.5%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      EC       6       92.2%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     1A      65       4       63.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     25      44       1       72.3%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     43F       9        0.0%
DATA                 0      0     43F      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Wed Apr 12 22:58:18 2017

             i2_UART_buff_modulo_inc 0CC0             cobs_encode@dst_write_ptr 00AF  
                       _rx_array_inx 0042                         __CFG_CP0$OFF 000000  
                       __CFG_CP1$OFF 000000                         __CFG_CP2$OFF 000000  
                       __CFG_CP3$OFF 000000                                  l122 0B4A  
                                l276 094C                                  l446 0BF2  
                       __CFG_CPB$OFF 000000                         __CFG_CPD$OFF 000000  
                                wreg 000FE8        i2UART_buff_modulo_inc@modulus 0003  
        _COBS_DECODE_DST_BUF_LEN_MAX 00C1                         __CFG_LVP$OFF 000000  
                               l2300 0CB6                                 l2312 0626  
                               l2306 05BA                                 l2402 04EA  
                               l2332 0B1E                                 l2326 0948  
                               l2430 0568                                 l2422 053A  
                               l2338 0B34                                 l2346 0B50  
                               l2514 00FC                                 l2348 0B56  
                               l2524 0126                                 l2516 0104  
                               l2508 00E8                                 l2428 055C  
                               l2380 0482                                 l2372 0466  
                               l1750 0C84                                 l2542 01A2  
                               l2534 0166                                 l2614 08BA  
                               l2358 0D82                                 l2544 01A6  
                               l1912 0BDE                                 l2384 049C  
                               l2480 033A                                 l1746 0C74  
                               l2378 047A                                 l2556 01D0  
                               l2564 01E8                                 l2492 03D8  
                               l2484 0388                                 l2574 021C  
                               l2488 03BC                                 l2680 0DD4  
                               l2578 0230                                 l2594 07FC  
                               _CRC8 0B18                                 u1390 08DC  
                               u1817 0BE4                                 u1690 07E2  
                               u1827 081A                                 _main 0DCE  
                    _TMR0_StartTimer 0E22                                 _time 0060  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                               fsr2h 000FDA                                 fsr0l 000FE9  
                               indf1 000FE7                                 indf2 000FDF  
                               fsr1l 000FE1                                 fsr2l 000FD9  
                               btemp 0045                        __CFG_BORV$190 000000  
                               prodh 000FF4                                 prodl 000FF3  
                               start 00A0                        __CFG_IESO$OFF 000000  
                       ___param_bank 000000       i2UART_buff_modulo_inc@my_value 0005  
                              ?_CRC8 001B                      __end_of_SetTime 0DF6  
            __end_of_TMR0_Initialize 0D08                                ?_main 0001  
                              _T0CON 000FD5                       __CFG_DEBUG$OFF 000000  
                              i2l307 0D2E                                i2l443 0064  
                              i2l276 09DE                                i2l437 004E  
                              i2l439 005A                                _TMR0H 000FD7  
                              _TMR0L 000FD6                                _Delay 0BD4  
                      __CFG_WRT0$OFF 000000                        __CFG_WRT1$OFF 000000  
                      __CFG_WRT2$OFF 000000                        __CFG_WRT3$OFF 000000  
               _EUSART1_Transmit_ISR 0C08                       __CFG_EBTR0$OFF 000000  
                     __CFG_FCMEN$OFF 000000                       __CFG_EBTR1$OFF 000000  
                     __CFG_EBTR2$OFF 000000                       __CFG_EBTR3$OFF 000000  
                   __end_of_TMR0_ISR 0D5E                                _Start 0AC2  
                      __CFG_WRTB$OFF 000000                        __CFG_WRTC$OFF 000000  
                      __CFG_WRTD$OFF 000000                                _begin 0E26  
                     __CFG_EBTRB$OFF 000000                                _group 006C  
                 __CFG_MCLRE$EXTMCLR 000000                                pclath 000FFA  
                              tablat 000FF5                        ??_Receive_get 0026  
                      receiveData@CS 00BA                                plusw2 000FDB  
                     begin@stuffpeek 00B2                                status 000FD8  
                     __CFG_HFOFST$ON 000000                         ?_receiveData 0001  
                     __CFG_PBADEN$ON 000000                         __end_of_CRC8 0B62  
                   __end_of_ComStart 0AC2                           _ReadFaults 0E14  
                    __initialization 09E2           __end_of_EUSART1_Initialize 0B9E  
                       __end_of_main 0DE2                               ??_CRC8 001E  
        ?_INTERRUPT_InterruptManager 0001                   __size_of_GetFaults 0016  
                             ??_main 0026                        __activetblptr 000002  
                   __end_of_Send_put 0C6A            __size_ofi2_UART_buff_size 0016  
                             ?_Delay 001B                ?_EUSART1_Transmit_ISR 0001  
                             ?_Start 0001                               ?_begin 00A7  
            __end_of_TMR0_StartTimer 0E26                 __size_of_cobs_decode 01BE  
               __size_of_cobs_encode 0198                               _ANSELA 000F38  
                             _ANSELB 000F39                               _ANSELC 000F3A  
                             _ANSELD 000F3B                               _ANSELE 000F3C  
                    i2_UART_buff_get 0950                               _RC1STA 000FAB  
                             i2l2110 0740                               i2l2104 06D4  
                             i2l2124 09DA                               i2l2054 0CE0  
                    i2_UART_buff_put 06B4                               i2l2196 0C32  
                     __CFG_WDTEN$OFF 000000                               Delay@x 001E  
        UART_buff_modulo_inc@modulus 001D                               _RCREG1 000FAE  
                             _OSCCON 000FD3                               _SPBRG1 000FAF  
                             _TX1STA 000FAC                               _TXREG1 000FAD  
                          ??_SetTime 001B                       __CFG_XINST$OFF 000000  
                __end_of_Receive_get 0E14                        _output_buffer 0200  
                          CRC8@tempI 0020                       __CFG_STVREN$ON 000000  
                   ?_TMR0_Initialize 0001                               _memset 0C6A  
                             clear_0 0A1A                               clear_1 0A26  
                             clear_2 0A32                               clear_3 0A3E  
                             clear_4 0A4A                               clear_5 0A56  
                             _rx_len 0043                     __end_of_sendData 0402  
                       __pdataCOMRAM 0044               cobs_encode@dst_buf_len 001D  
             cobs_encode@dst_buf_ptr 001B                        Send_put@_data 00A7  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8         __end_of_UART_buff_modulo_inc 0CC0  
      __size_of_INTERRUPT_Initialize 0018                           __accesstop 0060  
            __end_of__initialization 0A5C                        sendData@count 0544  
                  __end_of_GetFaults 0D8C                        ___rparam_used 000001  
            ?i2_UART_buff_modulo_inc 0001                         ?_updateComms 0001  
                      __end_of_Delay 0C08                          ?_ReadFaults 0001  
                     __pcstackCOMRAM 0001                        __end_of_Start 0B18  
                       __pidataBANK0 0E1E                        __end_of_begin 0E28  
                          ?_TMR0_ISR 0001                   UART_buff_get@_this 0021  
              __end_of_UART_buff_get 0950               ??_EUSART1_Transmit_ISR 000C  
              __end_of_UART_buff_put 06B4                              ??_Delay 001D  
            __end_ofi2_UART_buff_get 09E2              __end_ofi2_UART_buff_put 07CE  
        __end_of_EUSART1_Receive_ISR 0D44                              CRC8@crc 0021  
                            CRC8@len 001D                              ??_Start 0025  
                            CRC8@sum 001E                            ?_ComStart 0001  
                            ??_begin 001B                     ?_TMR0_StartTimer 0001  
                _addressErrorCounter 0026               cobs_decode@dst_buf_len 001D  
                         __pbssBANK0 0060                           __pbssBANK1 0100  
                         __pbssBANK2 0200                           __pbssBANK3 0300  
                         __pbssBANK4 0400               cobs_decode@dst_buf_ptr 001B  
                    __CFG_PLLCFG$OFF 000000                          _Receive_get 0E06  
     __end_ofi2_UART_buff_modulo_inc 0CEA                    begin@givenAddress 00AA  
            __size_of_UART_buff_init 001E                          _ReciveArray 01CE  
            __size_of_UART_buff_size 0016                            ?_Send_put 0001  
               __size_of_receiveData 00F0                   __CFG_CCP2MX$PORTC1 000000  
                         ??_TMR0_ISR 0001                   __CFG_CCP3MX$PORTB5 000000  
           cobs_decode@dst_write_ptr 00AF           cobs_decode@remaining_bytes 00AD  
                            ?_memset 001B                           _crc_buffer 008C  
                 UART_buff_put@_this 0021                      cobs_decode@F198 0064  
                   i2_UART_buff_size 0DB8          i2UART_buff_modulo_inc@value 0001  
                            _OSCCON2 000FD2                    _Receive_available 0D8C  
       UART_buff_modulo_inc@my_value 001F                    __CFG_PRICLKEN$OFF 000000  
                            _OSCTUNE 000F9B                              _SPBRGH1 000FB0  
                         ??_ComStart 0025                  sendData@whereToSend 053C  
                _receiveArrayAddress 002C                  __size_of_ReadFaults 000A  
                 ?_Receive_available 001D                           begin@error 00AB  
                            _ByteLow 003C                  ??_Receive_available 001F  
                          ?_sendData 00B4                    _alignErrorCounter 0028  
                    __CFG_PWRTEN$OFF 000000                           ??_Send_put 0026  
                            __Hparam 0000                              _SetTime 0DE2  
                            __Lparam 0000               cobs_encode@src_end_ptr 00A7  
                          _AKNAKsend 003A                 _UART_buff_modulo_inc 0C96  
                            _calc_CS 003D                              __pcinit 09E2  
                    __size_of_memset 002C                              __ramtop 0600  
                   i2UART_buff_get@c 000B                              __ptext0 0DCE  
                            __ptext1 0DF6                              __ptext2 0B9E  
                            __ptext3 0262                              __ptext4 0402  
                            __ptext5 0C3A                              __ptext6 059A  
                            __ptext7 0D76                              __ptext8 0BD4  
                            __ptext9 07CE                            _T0CONbits 000FD5  
                   i2UART_buff_put@c 0009           cobs_encode@dst_buf_end_ptr 00AA  
          __end_of_Receive_available 0DA2                  cobs_encode@src_byte 00A9  
                 _EUSART1_Initialize 0B62                     ?i2_UART_buff_get 0007  
                   ?i2_UART_buff_put 0007                 end_of_initialization 0A5C  
                          Delay@wait 001B                  ?_EUSART1_Initialize 0001  
                    cobs_encode@F186 0067                              memset@c 001D  
                            memset@n 001F                              memset@p 0021  
                      __Lmediumconst 0000                           ??_sendData 00B7  
                    receiveData@Data 00C0                ?_UART_buff_modulo_inc 001B  
               __size_of_updateComms 0010                              postdec1 000FE5  
                            postdec2 000FDD                              postinc0 000FEE  
                            postinc2 000FDE                           _respondECU 0B9E  
                   begin@stufftosend 00AC                 ??_EUSART1_Initialize 0025  
                  cobs_decode@result 00B2               cobs_decode@src_end_ptr 00A7  
             _dataAdressErrorCounter 006A                           _rx_address 0041  
                      ??_cobs_decode 0023                        ??_cobs_encode 0023  
                          _TRISAbits 000F92                            _TRISCbits 000F94  
                          _TRISDbits 000F95                       sendData@result 053F  
                       begin@maxSize 00A9                i2UART_buff_size@_this 0001  
                     _UART_buff_init 0D08                       _UART_buff_size 0DA2  
                       ??_ReadFaults 001B                            _GetFaults 0D76  
                      _moduleAddress 003F                 _timer0ReloadVal16bit 0038  
       __end_of_INTERRUPT_Initialize 0D76                      _crcErrorCounter 002A  
                      __pidataCOMRAM 0E28                    __size_of_TMR0_ISR 001A  
                     __end_of_memset 0C96                         receiveData@i 00BE  
         __size_of_Receive_available 0016                  start_initialization 09E2  
           __size_of_TMR0_Initialize 001E                   __end_of_ReadFaults 0E1E  
                __end_of_cobs_decode 0262                    __size_of_ComStart 0058  
             __end_of_UART_buff_init 0D26                       UART_buff_get@c 0025  
             __end_of_UART_buff_size 0DB8                  __end_of_cobs_encode 059A  
                       ?_Receive_get 0001                       UART_buff_put@c 0023  
           __end_ofi2_UART_buff_size 0DCE               ??_UART_buff_modulo_inc 001F  
                         ?_GetFaults 0001                             CRC8@data 001B  
                  __size_of_Send_put 0030                          ?_respondECU 0001  
                        __pdataBANK0 00C1                             ??_memset 0021  
                        __pbssCOMRAM 0026        __size_of_EUSART1_Transmit_ISR 0032  
                      __pcstackBANK0 00A7                        __pcstackBANK5 0500  
                       _Receive_peek 000000                  UART_buff_init@_this 0023  
                    ?_UART_buff_init 0023                      ?_UART_buff_size 001B  
       __size_of_EUSART1_Receive_ISR 001E                        ??_receiveData 00B5  
                         sendData@CS 053E                cobs_encode@search_len 00AC  
           __size_of_TMR0_StartTimer 0004               __size_of_UART_buff_get 0092  
             __size_of_UART_buff_put 011A                             ?_SetTime 0001  
                  __size_of_sendData 01A0                         GetFaults@num 001B  
                          __pintcode 0008         ??_INTERRUPT_InterruptManager 000D  
               i2UART_buff_get@_this 0007                             _BAUD1CON 000FB8  
                     __size_of_Delay 0034                          _cobs_decode 00A4  
                        _cobs_encode 0402               sendData@DataTableIndex 00B6  
                     __size_of_Start 0056                       __size_of_begin 0002  
        _COBS_ENCODE_DST_BUF_LEN_MAX 00C3                  __size_of_respondECU 0036  
               _INTERRUPT_Initialize 0D5E                   cobs_encode@src_len 0021  
                 cobs_encode@src_ptr 001F                         _receiveArray 009D  
                  ??_TMR0_Initialize 001B                             _LATAbits 000F89  
                           _LATDbits 000F8C                  UART_buff_size@_this 001B  
                           _IPR1bits 000F9F                             _IPR2bits 000FA2  
                           _PIE1bits 000F9D                             i2u110_40 096E  
                           i2u118_40 0C22  __size_of_INTERRUPT_InterruptManager 0098  
                           _PIR1bits 000F9E                          ??_GetFaults 001B  
                begin@stuffavailable 00B0                             _RCONbits 000FD0  
                   __CFG_WDTPS$32768 000000                  __end_of_receiveData 08BE  
                           _TMR0_ISR 0D44                         _input_buffer 0100  
                          _rx_buffer 0300           cobs_decode@dst_buf_end_ptr 00A9  
               i2UART_buff_put@_this 0007                        _UART_buff_get 08BE  
                      _UART_buff_put 059A                    sendData@COBSArray 0500  
      cobs_encode@dst_code_write_ptr 00AD                             _ComStart 0A6A  
           ??i2_UART_buff_modulo_inc 0005                            copy_data0 09F6  
              ?_INTERRUPT_Initialize 0001                   sendData@ComandByte 00B4  
                  _sendStructAddress 002E                             _ByteHigh 003B  
           __size_ofi2_UART_buff_get 0092             __size_ofi2_UART_buff_put 011A  
                      ??_updateComms 0026                 __size_of_Receive_get 000E  
                           __Hrparam 0000                             _Send_put 0C3A  
                           __Lrparam 0000                   __CFG_BOREN$SBORDIS 000000  
                   __size_of_SetTime 0014                    __CFG_P2BMX$PORTD2 000000  
                  ??_TMR0_StartTimer 001B          __size_of_EUSART1_Initialize 003C  
                begin@stufftoreceive 00AE                       ?_UART_buff_get 0021  
                     ?_UART_buff_put 0021                          CRC8@extract 001F  
                          sendData@i 0542                             __ptext10 00A4  
                           __ptext11 0E06                             __ptext20 0D5E  
                           __ptext12 08BE                             __ptext21 0A6A  
                           __ptext13 0C96                             __ptext30 0C08  
                           __ptext22 0E26                             __ptext14 0D8C  
                           __ptext31 0DB8                             __ptext23 0B62  
                           __ptext15 0DA2                             __ptext32 0950  
                           __ptext24 0D08                             __ptext16 0B18  
                           __ptext33 0D26                             __ptext25 0C6A  
                           __ptext17 0AC2                             __ptext34 06B4  
                           __ptext26 0DE2                             __ptext18 0CEA  
                           __ptext35 0CC0                             __ptext27 0E14  
                           __ptext19 0E22                             __ptext36 0000  
                           __ptext29 0D44                        __size_of_CRC8 004A  
                           begin@ptr 00A7              EUSART1_Receive_ISR@data 000C  
                      _returnAddress 0040                        __size_of_main 0014  
                  cobs_encode@result 00B1                          _receiveData 07CE  
                     _Transmit_stall 0044                             _sendData 0262  
                  ?i2_UART_buff_size 0001                    sendData@DataLenth 053D  
                  sendData@DataTable 00B5                           _RC1STAbits 000FAB  
                       ??_respondECU 0026                         _ProcessArray 006E  
                 ??i2_UART_buff_size 0003                             int$flags 0045  
                       _serial_write 0036                  __end_of_updateComms 0E06  
 __end_of_INTERRUPT_InterruptManager 00A0           _INTERRUPT_InterruptManager 0008  
                _EUSART1_Receive_ISR 0D26                    receiveData@result 00BB  
                         _INTCONbits 000FF2            UART_buff_modulo_inc@value 001B  
                   ??_UART_buff_init 0025                     ??_UART_buff_size 001D  
             ??_INTERRUPT_Initialize 001B                             memset@p1 001B  
                   _serial_available 0030      __size_ofi2_UART_buff_modulo_inc 002A  
                           intlevel2 0000                  cobs_decode@len_code 00B1  
                 __end_of_respondECU 0BD4                 ?_EUSART1_Receive_ISR 0001  
                       cobs_decode@i 00AC         __end_of_EUSART1_Transmit_ISR 0C3A  
                        _ring_buffer 0400                    sendData@SendArray 051E  
                  ??i2_UART_buff_get 0009                          _serial_peek 0032  
                        _serial_read 0034                    ??i2_UART_buff_put 000A  
                cobs_decode@src_byte 00AB        __size_of_UART_buff_modulo_inc 002A  
                    ??_UART_buff_get 0023                      ??_UART_buff_put 0024  
                    _TMR0_Initialize 0CEA                         ?_cobs_decode 001B  
                       ?_cobs_encode 001B                    __CFG_T3CMX$PORTC0 000000  
                     _maxDataAddress 003E                   cobs_decode@src_len 0021  
                 cobs_decode@src_ptr 001F                ??_EUSART1_Receive_ISR 000C  
                  __CFG_FOSC$INTIO67 000000                          _updateComms 0DF6  
