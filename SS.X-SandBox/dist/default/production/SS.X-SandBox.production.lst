

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Fri Aug 11 22:01:06 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    54                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    55                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    56  0000                     
    57                           ; Version 1.42
    58                           ; Generated 13/04/2017 GMT
    59                           ; 
    60                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    61                           ; All rights reserved.
    62                           ; 
    63                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    64                           ; 
    65                           ; Redistribution and use in source and binary forms, with or without modification, are
    66                           ; permitted provided that the following conditions are met:
    67                           ; 
    68                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    69                           ;        conditions and the following disclaimer.
    70                           ; 
    71                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    72                           ;        of conditions and the following disclaimer in the documentation and/or other
    73                           ;        materials provided with the distribution.
    74                           ; 
    75                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    76                           ;        software without specific prior written permission.
    77                           ; 
    78                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    79                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    80                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    81                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    82                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    83                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    84                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    85                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    86                           ; 
    87                           ; 
    88                           ; Code-generator required, PIC18F45K22 Definitions
    89                           ; 
    90                           ; SFR Addresses
    91  0000                     
    92                           	psect	idataCOMRAM
    93  000FBE                     __pidataCOMRAM:
    94                           	opt stack 0
    95                           
    96                           ;initializer for _COBS_DECODE_DST_BUF_LEN_MAX
    97  000FBE  001E               	dw	30
    98                           
    99                           ;initializer for _COBS_ENCODE_DST_BUF_LEN_MAX
   100  000FC0  001E               	dw	30
   101                           
   102                           ;initializer for _Transmit_stall
   103  000FC2  01                 	db	1
   104                           
   105                           	psect	idataBANK0
   106  000FC3                     __pidataBANK0:
   107                           	opt stack 0
   108                           
   109                           ;initializer for Start@F7240
   110  000FC3  04                 	db	4
   111  000FC4  02                 	db	2
   112  000FC5  00                 	db	0
   113  000FC6  00                 	db	0
   114  000FC7  00                 	db	0
   115  0000                     _ANSELE	set	3900
   116  0000                     _ANSELD	set	3899
   117  0000                     _ANSELC	set	3898
   118  0000                     _ANSELB	set	3897
   119  0000                     _ANSELA	set	3896
   120  0000                     _ANSELCbits	set	3898
   121  0000                     _PIR1bits	set	3998
   122  0000                     _IPR2bits	set	4002
   123  0000                     _IPR1bits	set	3999
   124  0000                     _RCONbits	set	4048
   125  0000                     _OSCTUNE	set	3995
   126  0000                     _OSCCON2	set	4050
   127  0000                     _OSCCON	set	4051
   128  0000                     _TRISAbits	set	3986
   129  0000                     _TRISDbits	set	3989
   130  0000                     _TRISCbits	set	3988
   131  0000                     _PORTAbits	set	3968
   132  0000                     _PORTCbits	set	3970
   133  0000                     _T0CONbits	set	4053
   134  0000                     _INTCONbits	set	4082
   135  0000                     _TMR0L	set	4054
   136  0000                     _TMR0H	set	4055
   137  0000                     _T0CON	set	4053
   138  0000                     _RC1STAbits	set	4011
   139  0000                     _RCREG1	set	4014
   140  0000                     _TXREG1	set	4013
   141  0000                     _SPBRGH1	set	4016
   142  0000                     _SPBRG1	set	4015
   143  0000                     _TX1STA	set	4012
   144  0000                     _RC1STA	set	4011
   145  0000                     _BAUD1CON	set	4024
   146  0000                     _PIE1bits	set	3997
   147  0000                     _LATDbits	set	3980
   148  0000                     _LATAbits	set	3977
   149                           
   150                           ; #config settings
   151  0000                     
   152                           	psect	cinit
   153  000C12                     __pcinit:
   154                           	opt stack 0
   155  000C12                     start_initialization:
   156                           	opt stack 0
   157  000C12                     __initialization:
   158                           	opt stack 0
   159                           
   160                           ; Initialize objects allocated to BANK0 (5 bytes)
   161                           ; load TBLPTR registers with __pidataBANK0
   162  000C12  0EC3               	movlw	low __pidataBANK0
   163  000C14  6EF6               	movwf	tblptrl,c
   164  000C16  0E0F               	movlw	high __pidataBANK0
   165  000C18  6EF7               	movwf	tblptrh,c
   166  000C1A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   167  000C1C  6EF8               	movwf	tblptru,c
   168  000C1E  EE00  F0FA         	lfsr	0,__pdataBANK0
   169  000C22  EE10 F005          	lfsr	1,5
   170  000C26                     copy_data0:
   171  000C26  0009               	tblrd		*+
   172  000C28  CFF5 FFEE          	movff	tablat,postinc0
   173  000C2C  50E5               	movf	postdec1,w,c
   174  000C2E  50E1               	movf	fsr1l,w,c
   175  000C30  E1FA               	bnz	copy_data0
   176                           
   177                           ; Initialize objects allocated to COMRAM (5 bytes)
   178                           ; load TBLPTR registers with __pidataCOMRAM
   179  000C32  0EBE               	movlw	low __pidataCOMRAM
   180  000C34  6EF6               	movwf	tblptrl,c
   181  000C36  0E0F               	movlw	high __pidataCOMRAM
   182  000C38  6EF7               	movwf	tblptrh,c
   183  000C3A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   184  000C3C  6EF8               	movwf	tblptru,c
   185  000C3E  EE00  F040         	lfsr	0,__pdataCOMRAM
   186  000C42  EE10 F005          	lfsr	1,5
   187  000C46                     copy_data1:
   188  000C46  0009               	tblrd		*+
   189  000C48  CFF5 FFEE          	movff	tablat,postinc0
   190  000C4C  50E5               	movf	postdec1,w,c
   191  000C4E  50E1               	movf	fsr1l,w,c
   192  000C50  E1FA               	bnz	copy_data1
   193                           
   194                           ; Clear objects allocated to BANK1 (242 bytes)
   195  000C52  EE01  F000         	lfsr	0,__pbssBANK1
   196  000C56  0EF2               	movlw	242
   197  000C58                     clear_0:
   198  000C58  6AEE               	clrf	postinc0,c
   199  000C5A  06E8               	decf	wreg,f,c
   200  000C5C  E1FD               	bnz	clear_0
   201                           
   202                           ; Clear objects allocated to BANK0 (50 bytes)
   203  000C5E  EE00  F0C8         	lfsr	0,__pbssBANK0
   204  000C62  0E32               	movlw	50
   205  000C64                     clear_1:
   206  000C64  6AEE               	clrf	postinc0,c
   207  000C66  06E8               	decf	wreg,f,c
   208  000C68  E1FD               	bnz	clear_1
   209                           
   210                           ; Clear objects allocated to COMRAM (21 bytes)
   211  000C6A  EE00  F02B         	lfsr	0,__pbssCOMRAM
   212  000C6E  0E15               	movlw	21
   213  000C70                     clear_2:
   214  000C70  6AEE               	clrf	postinc0,c
   215  000C72  06E8               	decf	wreg,f,c
   216  000C74  E1FD               	bnz	clear_2
   217  000C76                     end_of_initialization:
   218                           	opt stack 0
   219  000C76                     __end_of__initialization:
   220                           	opt stack 0
   221  000C76  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   222  000C78  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   223  000C7A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   224  000C7C  6EF8               	movwf	tblptru,c
   225  000C7E  0100               	movlb	0
   226  000C80  EF00  F007         	goto	_main	;jump to C main() function
   227                           tblptru	equ	0xFF8
   228                           tblptrh	equ	0xFF7
   229                           tblptrl	equ	0xFF6
   230                           tablat	equ	0xFF5
   231                           postinc0	equ	0xFEE
   232                           wreg	equ	0xFE8
   233                           postdec1	equ	0xFE5
   234                           fsr1l	equ	0xFE1
   235                           
   236                           	psect	bssCOMRAM
   237  00002B                     __pbssCOMRAM:
   238                           	opt stack 0
   239  00002B                     _Count:
   240                           	opt stack 0
   241  00002B                     	ds	4
   242  00002F                     _time:
   243                           	opt stack 0
   244  00002F                     	ds	4
   245  000033                     _DataTableArrayTwo:
   246                           	opt stack 0
   247  000033                     	ds	3
   248  000036                     cobs_decode@F192:
   249                           	opt stack 0
   250  000036                     	ds	3
   251  000039                     cobs_encode@F180:
   252                           	opt stack 0
   253  000039                     	ds	3
   254  00003C                     _timer0ReloadVal16bit:
   255                           	opt stack 0
   256  00003C                     	ds	2
   257  00003E                     _ByteLow:
   258                           	opt stack 0
   259  00003E                     	ds	1
   260  00003F                     _ByteHigh:
   261                           	opt stack 0
   262  00003F                     	ds	1
   263                           tblptru	equ	0xFF8
   264                           tblptrh	equ	0xFF7
   265                           tblptrl	equ	0xFF6
   266                           tablat	equ	0xFF5
   267                           postinc0	equ	0xFEE
   268                           wreg	equ	0xFE8
   269                           postdec1	equ	0xFE5
   270                           fsr1l	equ	0xFE1
   271                           
   272                           	psect	dataCOMRAM
   273  000040                     __pdataCOMRAM:
   274                           	opt stack 0
   275  000040                     _COBS_DECODE_DST_BUF_LEN_MAX:
   276                           	opt stack 0
   277  000040                     	ds	2
   278  000042                     _COBS_ENCODE_DST_BUF_LEN_MAX:
   279                           	opt stack 0
   280  000042                     	ds	2
   281  000044                     _Transmit_stall:
   282                           	opt stack 0
   283  000044                     	ds	1
   284                           tblptru	equ	0xFF8
   285                           tblptrh	equ	0xFF7
   286                           tblptrl	equ	0xFF6
   287                           tablat	equ	0xFF5
   288                           postinc0	equ	0xFEE
   289                           wreg	equ	0xFE8
   290                           postdec1	equ	0xFE5
   291                           fsr1l	equ	0xFE1
   292                           
   293                           	psect	bssBANK0
   294  0000C8                     __pbssBANK0:
   295                           	opt stack 0
   296  0000C8                     _DataTableArrayOne:
   297                           	opt stack 0
   298  0000C8                     	ds	10
   299  0000D2                     _receiveArray:
   300                           	opt stack 0
   301  0000D2                     	ds	10
   302  0000DC                     _ProcessArray:
   303                           	opt stack 0
   304  0000DC                     	ds	30
   305                           tblptru	equ	0xFF8
   306                           tblptrh	equ	0xFF7
   307                           tblptrl	equ	0xFF6
   308                           tablat	equ	0xFF5
   309                           postinc0	equ	0xFEE
   310                           wreg	equ	0xFE8
   311                           postdec1	equ	0xFE5
   312                           fsr1l	equ	0xFE1
   313                           
   314                           	psect	dataBANK0
   315  0000FA                     __pdataBANK0:
   316                           	opt stack 0
   317  0000FA                     Start@F7240:
   318                           	opt stack 0
   319  0000FA                     	ds	5
   320                           tblptru	equ	0xFF8
   321                           tblptrh	equ	0xFF7
   322                           tblptrl	equ	0xFF6
   323                           tablat	equ	0xFF5
   324                           postinc0	equ	0xFEE
   325                           wreg	equ	0xFE8
   326                           postdec1	equ	0xFE5
   327                           fsr1l	equ	0xFE1
   328                           
   329                           	psect	bssBANK1
   330  000100                     __pbssBANK1:
   331                           	opt stack 0
   332  000100                     _output_buffer:
   333                           	opt stack 0
   334  000100                     	ds	106
   335  00016A                     _input_buffer:
   336                           	opt stack 0
   337  00016A                     	ds	106
   338  0001D4                     _ReciveArray:
   339                           	opt stack 0
   340  0001D4                     	ds	30
   341                           tblptru	equ	0xFF8
   342                           tblptrh	equ	0xFF7
   343                           tblptrl	equ	0xFF6
   344                           tablat	equ	0xFF5
   345                           postinc0	equ	0xFEE
   346                           wreg	equ	0xFE8
   347                           postdec1	equ	0xFE5
   348                           fsr1l	equ	0xFE1
   349                           
   350                           	psect	cstackBANK1
   351  0001F2                     __pcstackBANK1:
   352                           	opt stack 0
   353  0001F2                     receiveData@CS:
   354                           	opt stack 0
   355                           
   356                           ; 1 bytes @ 0x0
   357  0001F2                     	ds	1
   358  0001F3                     receiveData@i:
   359                           	opt stack 0
   360                           
   361                           ; 2 bytes @ 0x1
   362  0001F3                     	ds	2
   363  0001F5                     receiveData@Data:
   364                           	opt stack 0
   365                           
   366                           ; 1 bytes @ 0x3
   367  0001F5                     	ds	1
   368  0001F6                     receiveData@result:
   369                           	opt stack 0
   370                           
   371                           ; 3 bytes @ 0x4
   372  0001F6                     	ds	3
   373                           tblptru	equ	0xFF8
   374                           tblptrh	equ	0xFF7
   375                           tblptrl	equ	0xFF6
   376                           tablat	equ	0xFF5
   377                           postinc0	equ	0xFEE
   378                           wreg	equ	0xFE8
   379                           postdec1	equ	0xFE5
   380                           fsr1l	equ	0xFE1
   381                           
   382                           	psect	cstackBANK0
   383  000060                     __pcstackBANK0:
   384                           	opt stack 0
   385  000060                     cobs_encode@src_end_ptr:
   386                           	opt stack 0
   387  000060                     cobs_decode@src_end_ptr:
   388                           	opt stack 0
   389                           
   390                           ; 2 bytes @ 0x0
   391  000060                     	ds	2
   392  000062                     cobs_encode@src_byte:
   393                           	opt stack 0
   394  000062                     cobs_decode@dst_buf_end_ptr:
   395                           	opt stack 0
   396                           
   397                           ; 2 bytes @ 0x2
   398  000062                     	ds	1
   399  000063                     cobs_encode@dst_buf_end_ptr:
   400                           	opt stack 0
   401                           
   402                           ; 2 bytes @ 0x3
   403  000063                     	ds	1
   404  000064                     cobs_decode@src_byte:
   405                           	opt stack 0
   406                           
   407                           ; 1 bytes @ 0x4
   408  000064                     	ds	1
   409  000065                     cobs_encode@search_len:
   410                           	opt stack 0
   411  000065                     cobs_decode@i:
   412                           	opt stack 0
   413                           
   414                           ; 1 bytes @ 0x5
   415  000065                     	ds	1
   416  000066                     cobs_encode@dst_code_write_ptr:
   417                           	opt stack 0
   418  000066                     cobs_decode@remaining_bytes:
   419                           	opt stack 0
   420                           
   421                           ; 2 bytes @ 0x6
   422  000066                     	ds	2
   423  000068                     cobs_encode@dst_write_ptr:
   424                           	opt stack 0
   425  000068                     cobs_decode@dst_write_ptr:
   426                           	opt stack 0
   427                           
   428                           ; 2 bytes @ 0x8
   429  000068                     	ds	2
   430  00006A                     cobs_decode@len_code:
   431                           	opt stack 0
   432  00006A                     cobs_encode@result:
   433                           	opt stack 0
   434                           
   435                           ; 3 bytes @ 0xA
   436  00006A                     	ds	1
   437  00006B                     cobs_decode@result:
   438                           	opt stack 0
   439                           
   440                           ; 3 bytes @ 0xB
   441  00006B                     	ds	2
   442  00006D                     sendData@ComandByte:
   443                           	opt stack 0
   444                           
   445                           ; 1 bytes @ 0xD
   446  00006D                     	ds	1
   447  00006E                     sendData@DataTable:
   448                           	opt stack 0
   449                           
   450                           ; 1 bytes @ 0xE
   451  00006E                     	ds	1
   452  00006F                     sendData@DataTableIndex:
   453                           	opt stack 0
   454                           
   455                           ; 1 bytes @ 0xF
   456  00006F                     	ds	1
   457  000070                     sendData@DTS:
   458                           	opt stack 0
   459                           
   460                           ; 2 bytes @ 0x10
   461  000070                     	ds	2
   462  000072                     sendData@lenth:
   463                           	opt stack 0
   464                           
   465                           ; 2 bytes @ 0x12
   466  000072                     	ds	2
   467  000074                     sendData@COBSArray:
   468                           	opt stack 0
   469                           
   470                           ; 30 bytes @ 0x14
   471  000074                     	ds	30
   472  000092                     sendData@SendArray:
   473                           	opt stack 0
   474                           
   475                           ; 30 bytes @ 0x32
   476  000092                     	ds	30
   477  0000B0                     sendData@DataLenth:
   478                           	opt stack 0
   479                           
   480                           ; 1 bytes @ 0x50
   481  0000B0                     	ds	1
   482  0000B1                     sendData@whereToSend:
   483                           	opt stack 0
   484                           
   485                           ; 1 bytes @ 0x51
   486  0000B1                     	ds	1
   487  0000B2                     sendData@count:
   488                           	opt stack 0
   489                           
   490                           ; 2 bytes @ 0x52
   491  0000B2                     	ds	2
   492  0000B4                     sendData@CS:
   493                           	opt stack 0
   494                           
   495                           ; 1 bytes @ 0x54
   496  0000B4                     	ds	1
   497  0000B5                     sendData@result:
   498                           	opt stack 0
   499                           
   500                           ; 3 bytes @ 0x55
   501  0000B5                     	ds	3
   502  0000B8                     sendData@i:
   503                           	opt stack 0
   504                           
   505                           ; 2 bytes @ 0x58
   506  0000B8                     	ds	2
   507  0000BA                     ComController@DTI:
   508                           	opt stack 0
   509                           
   510                           ; 2 bytes @ 0x5A
   511  0000BA                     	ds	2
   512  0000BC                     ComController@lenth:
   513                           	opt stack 0
   514                           
   515                           ; 2 bytes @ 0x5C
   516  0000BC                     	ds	2
   517  0000BE                     ??_ComController:
   518                           
   519                           ; 1 bytes @ 0x5E
   520  0000BE                     	ds	1
   521  0000BF                     ComController@DataToSend:
   522                           	opt stack 0
   523                           
   524                           ; 4 bytes @ 0x5F
   525  0000BF                     	ds	4
   526  0000C3                     ??_receiveData:
   527                           
   528                           ; 1 bytes @ 0x63
   529  0000C3                     	ds	5
   530                           tblptru	equ	0xFF8
   531                           tblptrh	equ	0xFF7
   532                           tblptrl	equ	0xFF6
   533                           tablat	equ	0xFF5
   534                           postinc0	equ	0xFEE
   535                           wreg	equ	0xFE8
   536                           postdec1	equ	0xFE5
   537                           fsr1l	equ	0xFE1
   538                           
   539                           	psect	cstackCOMRAM
   540  000001                     __pcstackCOMRAM:
   541                           	opt stack 0
   542  000001                     ?i2_UART_buff_size:
   543                           	opt stack 0
   544  000001                     ?i2_UART_buff_modulo_inc:
   545                           	opt stack 0
   546  000001                     i2UART_buff_size@_this:
   547                           	opt stack 0
   548  000001                     i2UART_buff_modulo_inc@value:
   549                           	opt stack 0
   550                           
   551                           ; 2 bytes @ 0x0
   552  000001                     	ds	2
   553  000003                     i2UART_buff_modulo_inc@modulus:
   554                           	opt stack 0
   555                           
   556                           ; 2 bytes @ 0x2
   557  000003                     	ds	2
   558  000005                     i2UART_buff_modulo_inc@my_value:
   559                           	opt stack 0
   560                           
   561                           ; 2 bytes @ 0x4
   562  000005                     	ds	2
   563  000007                     i2UART_buff_put@_this:
   564                           	opt stack 0
   565  000007                     i2UART_buff_get@_this:
   566                           	opt stack 0
   567                           
   568                           ; 2 bytes @ 0x6
   569  000007                     	ds	2
   570  000009                     ??i2_UART_buff_get:
   571  000009                     i2UART_buff_put@c:
   572                           	opt stack 0
   573                           
   574                           ; 1 bytes @ 0x8
   575  000009                     	ds	1
   576  00000A                     ??i2_UART_buff_put:
   577                           
   578                           ; 1 bytes @ 0x9
   579  00000A                     	ds	1
   580  00000B                     i2UART_buff_get@c:
   581                           	opt stack 0
   582                           
   583                           ; 1 bytes @ 0xA
   584  00000B                     	ds	1
   585  00000C                     EUSART1_Receive_ISR@data:
   586                           	opt stack 0
   587                           
   588                           ; 1 bytes @ 0xB
   589  00000C                     	ds	1
   590  00000D                     ??_INTERRUPT_InterruptManager:
   591                           
   592                           ; 1 bytes @ 0xC
   593  00000D                     	ds	14
   594  00001B                     ?_UART_buff_modulo_inc:
   595                           	opt stack 0
   596  00001B                     ?_UART_buff_size:
   597                           	opt stack 0
   598  00001B                     ?_cobs_encode:
   599                           	opt stack 0
   600  00001B                     ?_cobs_decode:
   601                           	opt stack 0
   602  00001B                     ?_GetTime:
   603                           	opt stack 0
   604  00001B                     GetDataDict@DataTableIndex:
   605                           	opt stack 0
   606  00001B                     SetDataDict@DataTableIndex:
   607                           	opt stack 0
   608  00001B                     UART_buff_size@_this:
   609                           	opt stack 0
   610  00001B                     UART_buff_modulo_inc@value:
   611                           	opt stack 0
   612  00001B                     Delay@wait:
   613                           	opt stack 0
   614  00001B                     cobs_encode@dst_buf_ptr:
   615                           	opt stack 0
   616  00001B                     cobs_decode@dst_buf_ptr:
   617                           	opt stack 0
   618  00001B                     CRC8@data:
   619                           	opt stack 0
   620  00001B                     memset@p1:
   621                           	opt stack 0
   622                           
   623                           ; 2 bytes @ 0x1A
   624  00001B                     	ds	1
   625  00001C                     GetDataDict@DataArray:
   626                           	opt stack 0
   627  00001C                     SetDataDict@DataArray:
   628                           	opt stack 0
   629                           
   630                           ; 2 bytes @ 0x1B
   631  00001C                     	ds	1
   632  00001D                     ??_Delay:
   633  00001D                     ?_Receive_available:
   634                           	opt stack 0
   635  00001D                     CRC8@len:
   636                           	opt stack 0
   637  00001D                     UART_buff_modulo_inc@modulus:
   638                           	opt stack 0
   639  00001D                     cobs_encode@dst_buf_len:
   640                           	opt stack 0
   641  00001D                     cobs_decode@dst_buf_len:
   642                           	opt stack 0
   643  00001D                     memset@c:
   644                           	opt stack 0
   645                           
   646                           ; 2 bytes @ 0x1C
   647  00001D                     	ds	1
   648  00001E                     GetDataDict@numbofbytes:
   649                           	opt stack 0
   650  00001E                     SetDataDict@numbofbytes:
   651                           	opt stack 0
   652  00001E                     CRC8@sum:
   653                           	opt stack 0
   654  00001E                     Delay@x:
   655                           	opt stack 0
   656                           
   657                           ; 2 bytes @ 0x1D
   658  00001E                     	ds	1
   659  00001F                     GetDataDict@Error:
   660                           	opt stack 0
   661  00001F                     SetDataDict@Error:
   662                           	opt stack 0
   663  00001F                     CRC8@extract:
   664                           	opt stack 0
   665  00001F                     UART_buff_modulo_inc@my_value:
   666                           	opt stack 0
   667  00001F                     cobs_encode@src_ptr:
   668                           	opt stack 0
   669  00001F                     cobs_decode@src_ptr:
   670                           	opt stack 0
   671  00001F                     memset@n:
   672                           	opt stack 0
   673                           
   674                           ; 2 bytes @ 0x1E
   675  00001F                     	ds	1
   676  000020                     GetDataDict@DataTable:
   677                           	opt stack 0
   678  000020                     SetDataDict@DataTable:
   679                           	opt stack 0
   680  000020                     CRC8@tempI:
   681                           	opt stack 0
   682                           
   683                           ; 1 bytes @ 0x1F
   684  000020                     	ds	1
   685  000021                     GetDataDict@DataCount:
   686                           	opt stack 0
   687  000021                     SetDataDict@DataCount:
   688                           	opt stack 0
   689  000021                     CRC8@crc:
   690                           	opt stack 0
   691  000021                     UART_buff_put@_this:
   692                           	opt stack 0
   693  000021                     UART_buff_get@_this:
   694                           	opt stack 0
   695  000021                     cobs_encode@src_len:
   696                           	opt stack 0
   697  000021                     cobs_decode@src_len:
   698                           	opt stack 0
   699  000021                     memset@p:
   700                           	opt stack 0
   701                           
   702                           ; 2 bytes @ 0x20
   703  000021                     	ds	1
   704  000022                     GetDataDict@ReturnCounter:
   705                           	opt stack 0
   706  000022                     SetDataDict@ReturnCounter:
   707                           	opt stack 0
   708                           
   709                           ; 1 bytes @ 0x21
   710  000022                     	ds	1
   711  000023                     ??_ReadFaults:
   712  000023                     ??_UART_buff_get:
   713  000023                     ??_cobs_encode:
   714  000023                     ??_cobs_decode:
   715  000023                     UART_buff_put@c:
   716                           	opt stack 0
   717  000023                     UART_buff_init@_this:
   718                           	opt stack 0
   719                           
   720                           ; 2 bytes @ 0x22
   721  000023                     	ds	1
   722  000024                     ??_UART_buff_put:
   723  000024                     ReadFaults@Data:
   724                           	opt stack 0
   725                           
   726                           ; 4 bytes @ 0x23
   727  000024                     	ds	1
   728  000025                     UART_buff_get@c:
   729                           	opt stack 0
   730  000025                     Start@Data:
   731                           	opt stack 0
   732                           
   733                           ; 5 bytes @ 0x24
   734  000025                     	ds	1
   735  000026                     Send_put@_data:
   736                           	opt stack 0
   737                           
   738                           ; 1 bytes @ 0x25
   739  000026                     	ds	1
   740  000027                     ??_sendData:
   741                           
   742                           ; 1 bytes @ 0x26
   743  000027                     	ds	4
   744  00002B                     tblptru	equ	0xFF8
   745                           tblptrh	equ	0xFF7
   746                           tblptrl	equ	0xFF6
   747                           tablat	equ	0xFF5
   748                           postinc0	equ	0xFEE
   749                           wreg	equ	0xFE8
   750                           postdec1	equ	0xFE5
   751                           fsr1l	equ	0xFE1
   752                           
   753                           ; 1 bytes @ 0x2A
   754 ;;
   755 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   756 ;;
   757 ;; *************** function _main *****************
   758 ;; Defined at:
   759 ;;		line 24 in file "Main.c"
   760 ;; Parameters:    Size  Location     Type
   761 ;;		None
   762 ;; Auto vars:     Size  Location     Type
   763 ;;		None
   764 ;; Return value:  Size  Location     Type
   765 ;;                  1    wreg      void 
   766 ;; Registers used:
   767 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   768 ;; Tracked objects:
   769 ;;		On entry : 0/0
   770 ;;		On exit  : 0/0
   771 ;;		Unchanged: 0/0
   772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   773 ;;      Params:         0       0       0       0       0       0       0
   774 ;;      Locals:         0       0       0       0       0       0       0
   775 ;;      Temps:          0       0       0       0       0       0       0
   776 ;;      Totals:         0       0       0       0       0       0       0
   777 ;;Total ram usage:        0 bytes
   778 ;; Hardware stack levels required when called:   11
   779 ;; This function calls:
   780 ;;		_GetTime
   781 ;;		_ReadFaults
   782 ;;		_SetTime
   783 ;;		_Start
   784 ;;		_updateComms
   785 ;; This function is called by:
   786 ;;		Startup code after reset
   787 ;; This function uses a non-reentrant model
   788 ;;
   789                           
   790                           	psect	text0
   791  000E00                     __ptext0:
   792                           	opt stack 0
   793  000E00                     _main:
   794                           	opt stack 20
   795                           
   796                           ;Main.c: 25: Start();
   797                           
   798                           ;incstack = 0
   799  000E00  ECC8  F005         	call	_Start	;wreg free
   800                           
   801                           ;Main.c: 26: LATDbits.LATD4 = 0;
   802  000E04  988C               	bcf	3980,4,c	;volatile
   803  000E06                     l45:
   804                           
   805                           ;Main.c: 28: updateComms();
   806  000E06  ECCE  F007         	call	_updateComms	;wreg free
   807                           
   808                           ;Main.c: 31: if(GetTime() > 5){
   809  000E0A  ECC5  F007         	call	_GetTime	;wreg free
   810  000E0E  BE1E               	btfsc	?_GetTime+3,7,c
   811  000E10  D7FA               	goto	l45
   812  000E12  501E               	movf	?_GetTime+3,w,c
   813  000E14  101D               	iorwf	?_GetTime+2,w,c
   814  000E16  101C               	iorwf	?_GetTime+1,w,c
   815  000E18  E104               	bnz	u1580
   816  000E1A  0E06               	movlw	6
   817  000E1C  5C1B               	subwf	?_GetTime,w,c
   818  000E1E  A0D8               	btfss	status,0,c
   819  000E20  D7F2               	goto	l45
   820  000E22                     u1580:
   821                           
   822                           ;Main.c: 32: ReadFaults();
   823  000E22  EC42  F006         	call	_ReadFaults	;wreg free
   824                           
   825                           ;Main.c: 33: SetTime();
   826  000E26  ECBC  F007         	call	_SetTime	;wreg free
   827  000E2A  D7ED               	goto	l45
   828  000E2C                     __end_of_main:
   829                           	opt stack 0
   830                           tblptru	equ	0xFF8
   831                           tblptrh	equ	0xFF7
   832                           tblptrl	equ	0xFF6
   833                           tablat	equ	0xFF5
   834                           postinc0	equ	0xFEE
   835                           wreg	equ	0xFE8
   836                           postdec1	equ	0xFE5
   837                           fsr1l	equ	0xFE1
   838                           status	equ	0xFD8
   839                           
   840 ;; *************** function _updateComms *****************
   841 ;; Defined at:
   842 ;;		line 16 in file "Communications.c"
   843 ;; Parameters:    Size  Location     Type
   844 ;;		None
   845 ;; Auto vars:     Size  Location     Type
   846 ;;		None
   847 ;; Return value:  Size  Location     Type
   848 ;;                  1    wreg      void 
   849 ;; Registers used:
   850 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   851 ;; Tracked objects:
   852 ;;		On entry : 0/0
   853 ;;		On exit  : 0/0
   854 ;;		Unchanged: 0/0
   855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   856 ;;      Params:         0       0       0       0       0       0       0
   857 ;;      Locals:         0       0       0       0       0       0       0
   858 ;;      Temps:          0       0       0       0       0       0       0
   859 ;;      Totals:         0       0       0       0       0       0       0
   860 ;;Total ram usage:        0 bytes
   861 ;; Hardware stack levels used:    1
   862 ;; Hardware stack levels required when called:   10
   863 ;; This function calls:
   864 ;;		_receiveData
   865 ;; This function is called by:
   866 ;;		_main
   867 ;; This function uses a non-reentrant model
   868 ;;
   869                           
   870                           	psect	text1
   871  000F9C                     __ptext1:
   872                           	opt stack 0
   873  000F9C                     _updateComms:
   874                           	opt stack 20
   875                           
   876                           ;Communications.c: 17: if (receiveData()) {
   877                           
   878                           ;incstack = 0
   879  000F9C  ECC1  F003         	call	_receiveData	;wreg free
   880  000FA0  0900               	iorlw	0
   881  000FA2  B4D8               	btfsc	status,2,c
   882  000FA4  0012               	return	
   883                           
   884                           ;Communications.c: 18: LATAbits.LATA3 ^= 1;
   885  000FA6  7689               	btg	3977,3,c	;volatile
   886  000FA8  0012               	return	
   887  000FAA                     __end_of_updateComms:
   888                           	opt stack 0
   889                           tblptru	equ	0xFF8
   890                           tblptrh	equ	0xFF7
   891                           tblptrl	equ	0xFF6
   892                           tablat	equ	0xFF5
   893                           postinc0	equ	0xFEE
   894                           wreg	equ	0xFE8
   895                           postdec1	equ	0xFE5
   896                           fsr1l	equ	0xFE1
   897                           status	equ	0xFD8
   898                           
   899 ;; *************** function _receiveData *****************
   900 ;; Defined at:
   901 ;;		line 95 in file "CarCom.c"
   902 ;; Parameters:    Size  Location     Type
   903 ;;		None
   904 ;; Auto vars:     Size  Location     Type
   905 ;;  result          3    4[BANK1 ] struct .
   906 ;;  i               2    1[BANK1 ] int 
   907 ;;  Data            1    3[BANK1 ] unsigned char 
   908 ;;  CS              1    0[BANK1 ] unsigned char 
   909 ;; Return value:  Size  Location     Type
   910 ;;                  1    wreg      unsigned char 
   911 ;; Registers used:
   912 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   913 ;; Tracked objects:
   914 ;;		On entry : 0/0
   915 ;;		On exit  : 0/0
   916 ;;		Unchanged: 0/0
   917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   918 ;;      Params:         0       0       0       0       0       0       0
   919 ;;      Locals:         0       0       7       0       0       0       0
   920 ;;      Temps:          0       5       0       0       0       0       0
   921 ;;      Totals:         0       5       7       0       0       0       0
   922 ;;Total ram usage:       12 bytes
   923 ;; Hardware stack levels used:    1
   924 ;; Hardware stack levels required when called:    9
   925 ;; This function calls:
   926 ;;		_CRC8
   927 ;;		_ComController
   928 ;;		_Receive_available
   929 ;;		_Receive_get
   930 ;;		_cobs_decode
   931 ;; This function is called by:
   932 ;;		_updateComms
   933 ;; This function uses a non-reentrant model
   934 ;;
   935                           
   936                           	psect	text2
   937  000782                     __ptext2:
   938                           	opt stack 0
   939  000782                     _receiveData:
   940                           	opt stack 20
   941                           
   942                           ;CarCom.c: 97: if(Receive_available()>5){
   943                           
   944                           ;incstack = 0
   945  000782  EC9B  F007         	call	_Receive_available	;wreg free
   946  000786  BE1E               	btfsc	?_Receive_available+1,7,c
   947  000788  D07D               	goto	l2517
   948  00078A  501E               	movf	?_Receive_available+1,w,c
   949  00078C  E104               	bnz	u1530
   950  00078E  0E06               	movlw	6
   951  000790  5C1D               	subwf	?_Receive_available,w,c
   952  000792  A0D8               	btfss	status,0,c
   953  000794  D077               	goto	l2517
   954  000796                     u1530:
   955                           
   956                           ;CarCom.c: 98: if(Receive_get() == 8){
   957  000796  ECD5  F007         	call	_Receive_get	;wreg free
   958  00079A  0A08               	xorlw	8
   959  00079C  A4D8               	btfss	status,2,c
   960  00079E  D072               	goto	l2517
   961                           
   962                           ;CarCom.c: 99: int i = 0;
   963  0007A0  0E00               	movlw	0
   964  0007A2  0101               	movlb	1	; () banked
   965  0007A4  6FF4               	movwf	(receiveData@i+1)& (0+255),b
   966  0007A6  0E00               	movlw	0
   967  0007A8  6FF3               	movwf	receiveData@i& (0+255),b
   968                           
   969                           ;CarCom.c: 100: char Data = 0;
   970  0007AA  0E00               	movlw	0
   971  0007AC  0101               	movlb	1	; () banked
   972  0007AE  6FF5               	movwf	receiveData@Data& (0+255),b
   973  0007B0                     l2497:
   974                           
   975                           ; BSR set to: 1
   976                           ;CarCom.c: 102: Data = Receive_get();
   977  0007B0  ECD5  F007         	call	_Receive_get	;wreg free
   978  0007B4  0101               	movlb	1	; () banked
   979  0007B6  6FF5               	movwf	receiveData@Data& (0+255),b
   980                           
   981                           ; BSR set to: 1
   982                           ;CarCom.c: 103: ReciveArray[i] = Data;
   983  0007B8  0ED4               	movlw	low _ReciveArray
   984  0007BA  0101               	movlb	1	; () banked
   985  0007BC  25F3               	addwf	receiveData@i& (0+255),w,b
   986  0007BE  6ED9               	movwf	fsr2l,c
   987  0007C0  0E01               	movlw	high _ReciveArray
   988  0007C2  0101               	movlb	1	; () banked
   989  0007C4  21F4               	addwfc	(receiveData@i+1)& (0+255),w,b
   990  0007C6  6EDA               	movwf	fsr2h,c
   991  0007C8  C1F5  FFDF         	movff	receiveData@Data,indf2
   992                           
   993                           ; BSR set to: 1
   994                           ;CarCom.c: 104: _delay((unsigned long)((100)*(16000000/4000000.0)));
   995  0007CC  0E85               	movlw	133
   996  0007CE                     u1597:
   997  0007CE  2EE8               	decfsz	wreg,f,c
   998  0007D0  D7FE               	bra	u1597
   999  0007D2  F000               	nop	
  1000                           
  1001                           ;CarCom.c: 105: i++;
  1002  0007D4  0101               	movlb	1	; () banked
  1003  0007D6  4BF3               	infsnz	receiveData@i& (0+255),f,b
  1004  0007D8  2BF4               	incf	(receiveData@i+1)& (0+255),f,b
  1005                           
  1006                           ; BSR set to: 1
  1007                           ;CarCom.c: 106: }while(Data != 0x00);
  1008  0007DA  0101               	movlb	1	; () banked
  1009  0007DC  51F5               	movf	receiveData@Data& (0+255),w,b
  1010  0007DE  0101               	movlb	1	; () banked
  1011  0007E0  A4D8               	btfss	status,2,c
  1012  0007E2  D7E6               	goto	l2497
  1013                           
  1014                           ; BSR set to: 1
  1015                           ;CarCom.c: 108: cobs_decode_result result;
  1016                           ;CarCom.c: 110: result = cobs_decode(ProcessArray, sizeof(ProcessArray), ReciveArray, i)
      +                          ;
  1017                           
  1018                           ; BSR set to: 1
  1019  0007E4  0EDC               	movlw	low _ProcessArray
  1020  0007E6  6E1B               	movwf	cobs_decode@dst_buf_ptr,c
  1021  0007E8  0E00               	movlw	high _ProcessArray
  1022  0007EA  6E1C               	movwf	cobs_decode@dst_buf_ptr+1,c
  1023  0007EC  0E00               	movlw	0
  1024  0007EE  6E1E               	movwf	cobs_decode@dst_buf_len+1,c
  1025  0007F0  0E1E               	movlw	30
  1026  0007F2  6E1D               	movwf	cobs_decode@dst_buf_len,c
  1027  0007F4  0ED4               	movlw	low _ReciveArray
  1028  0007F6  6E1F               	movwf	cobs_decode@src_ptr,c
  1029  0007F8  0E01               	movlw	high _ReciveArray
  1030  0007FA  6E20               	movwf	cobs_decode@src_ptr+1,c
  1031  0007FC  C1F3  F021         	movff	receiveData@i,cobs_decode@src_len
  1032  000800  C1F4  F022         	movff	receiveData@i+1,cobs_decode@src_len+1
  1033  000804  EC52  F000         	call	_cobs_decode	;wreg free
  1034  000808  C01B  F1F6         	movff	?_cobs_decode,receiveData@result
  1035  00080C  C01C  F1F7         	movff	?_cobs_decode+1,receiveData@result+1
  1036  000810  C01D  F1F8         	movff	?_cobs_decode+2,receiveData@result+2
  1037                           
  1038                           ;CarCom.c: 112: char CS = CRC8(ProcessArray, result.out_len-1);
  1039  000814  0EDC               	movlw	low _ProcessArray
  1040  000816  6E1B               	movwf	CRC8@data,c
  1041  000818  0E00               	movlw	high _ProcessArray
  1042  00081A  6E1C               	movwf	CRC8@data+1,c
  1043  00081C  0101               	movlb	1	; () banked
  1044  00081E  05F6               	decf	receiveData@result& (0+255),w,b
  1045  000820  6E1D               	movwf	CRC8@len,c
  1046  000822  EC73  F006         	call	_CRC8	;wreg free
  1047  000826  0101               	movlb	1	; () banked
  1048  000828  6FF2               	movwf	receiveData@CS& (0+255),b
  1049                           
  1050                           ; BSR set to: 1
  1051                           ;CarCom.c: 114: if(ProcessArray[result.out_len-1] == CS){
  1052  00082A  0EFF               	movlw	255
  1053  00082C  0100               	movlb	0	; () banked
  1054  00082E  6FC3               	movwf	??_receiveData& (0+255),b
  1055  000830  0EFF               	movlw	255
  1056  000832  0100               	movlb	0	; () banked
  1057  000834  6FC4               	movwf	(??_receiveData+1)& (0+255),b
  1058  000836  C1F6  F0C5         	movff	receiveData@result,??_receiveData+2
  1059  00083A  C1F7  F0C6         	movff	receiveData@result+1,??_receiveData+3
  1060  00083E  0100               	movlb	0	; () banked
  1061  000840  51C3               	movf	??_receiveData& (0+255),w,b
  1062  000842  0100               	movlb	0	; () banked
  1063  000844  27C5               	addwf	(??_receiveData+2)& (0+255),f,b
  1064  000846  0100               	movlb	0	; () banked
  1065  000848  51C4               	movf	(??_receiveData+1)& (0+255),w,b
  1066  00084A  0100               	movlb	0	; () banked
  1067  00084C  23C6               	addwfc	(??_receiveData+3)& (0+255),f,b
  1068  00084E  0EDC               	movlw	low _ProcessArray
  1069  000850  0100               	movlb	0	; () banked
  1070  000852  25C5               	addwf	(??_receiveData+2)& (0+255),w,b
  1071  000854  6ED9               	movwf	fsr2l,c
  1072  000856  0E00               	movlw	high _ProcessArray
  1073  000858  0100               	movlb	0	; () banked
  1074  00085A  21C6               	addwfc	(??_receiveData+3)& (0+255),w,b
  1075  00085C  6EDA               	movwf	fsr2h,c
  1076  00085E  0101               	movlb	1	; () banked
  1077  000860  51F2               	movf	receiveData@CS& (0+255),w,b
  1078  000862  18DE               	xorwf	postinc2,w,c
  1079  000864  A4D8               	btfss	status,2,c
  1080  000866  D00E               	goto	l2517
  1081                           
  1082                           ; BSR set to: 1
  1083                           ;CarCom.c: 115: ComController(ProcessArray,result.out_len);
  1084  000868  0EDC               	movlw	low _ProcessArray
  1085  00086A  0100               	movlb	0	; () banked
  1086  00086C  6FBA               	movwf	ComController@DTI& (0+255),b
  1087  00086E  0E00               	movlw	high _ProcessArray
  1088  000870  0100               	movlb	0	; () banked
  1089  000872  6FBB               	movwf	(ComController@DTI+1)& (0+255),b
  1090  000874  C1F6  F0BC         	movff	receiveData@result,ComController@lenth
  1091  000878  C1F7  F0BD         	movff	receiveData@result+1,ComController@lenth+1
  1092  00087C  EC44  F004         	call	_ComController	;wreg free
  1093                           
  1094                           ;CarCom.c: 116: return 1;
  1095  000880  0E01               	movlw	1
  1096  000882  0012               	return	
  1097  000884                     l2517:
  1098                           
  1099                           ;CarCom.c: 125: }
  1100                           ;CarCom.c: 127: return 0;
  1101  000884  0E00               	movlw	0
  1102  000886  0012               	return	
  1103  000888                     __end_of_receiveData:
  1104                           	opt stack 0
  1105                           tblptru	equ	0xFF8
  1106                           tblptrh	equ	0xFF7
  1107                           tblptrl	equ	0xFF6
  1108                           tablat	equ	0xFF5
  1109                           postinc0	equ	0xFEE
  1110                           wreg	equ	0xFE8
  1111                           postdec1	equ	0xFE5
  1112                           fsr1l	equ	0xFE1
  1113                           indf2	equ	0xFDF
  1114                           postinc2	equ	0xFDE
  1115                           fsr2h	equ	0xFDA
  1116                           fsr2l	equ	0xFD9
  1117                           status	equ	0xFD8
  1118                           
  1119 ;; *************** function _cobs_decode *****************
  1120 ;; Defined at:
  1121 ;;		line 115 in file "COBS.c"
  1122 ;; Parameters:    Size  Location     Type
  1123 ;;  dst_buf_ptr     2   26[COMRAM] PTR unsigned char 
  1124 ;;		 -> ProcessArray(30), 
  1125 ;;  dst_buf_len     2   28[COMRAM] unsigned int 
  1126 ;;  src_ptr         2   30[COMRAM] PTR const unsigned char 
  1127 ;;		 -> ReciveArray(30), 
  1128 ;;  src_len         2   32[COMRAM] unsigned int 
  1129 ;; Auto vars:     Size  Location     Type
  1130 ;;  result          3   11[BANK0 ] struct .
  1131 ;;  dst_write_pt    2    8[BANK0 ] PTR unsigned char 
  1132 ;;		 -> ProcessArray(30), 
  1133 ;;  remaining_by    2    6[BANK0 ] unsigned int 
  1134 ;;  dst_buf_end_    2    2[BANK0 ] PTR unsigned char 
  1135 ;;		 -> ProcessArray(30), 
  1136 ;;  src_end_ptr     2    0[BANK0 ] PTR const unsigned char 
  1137 ;;		 -> ReciveArray(30), 
  1138 ;;  len_code        1   10[BANK0 ] unsigned char 
  1139 ;;  i               1    5[BANK0 ] unsigned char 
  1140 ;;  src_byte        1    4[BANK0 ] unsigned char 
  1141 ;; Return value:  Size  Location     Type
  1142 ;;                  3   26[COMRAM] struct .
  1143 ;; Registers used:
  1144 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1145 ;; Tracked objects:
  1146 ;;		On entry : 0/0
  1147 ;;		On exit  : 0/0
  1148 ;;		Unchanged: 0/0
  1149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1150 ;;      Params:         8       0       0       0       0       0       0
  1151 ;;      Locals:         0      14       0       0       0       0       0
  1152 ;;      Temps:          2       0       0       0       0       0       0
  1153 ;;      Totals:        10      14       0       0       0       0       0
  1154 ;;Total ram usage:       24 bytes
  1155 ;; Hardware stack levels used:    1
  1156 ;; Hardware stack levels required when called:    4
  1157 ;; This function calls:
  1158 ;;		Nothing
  1159 ;; This function is called by:
  1160 ;;		_receiveData
  1161 ;; This function uses a non-reentrant model
  1162 ;;
  1163                           
  1164                           	psect	text3
  1165  0000A4                     __ptext3:
  1166                           	opt stack 0
  1167  0000A4                     _cobs_decode:
  1168                           	opt stack 24
  1169                           
  1170                           ;COBS.c: 117: cobs_decode_result result = { 0, COBS_DECODE_OK };
  1171                           
  1172                           ;incstack = 0
  1173  0000A4  C036  F06B         	movff	cobs_decode@F192,cobs_decode@result
  1174  0000A8  C037  F06C         	movff	cobs_decode@F192+1,cobs_decode@result+1
  1175  0000AC  C038  F06D         	movff	cobs_decode@F192+2,cobs_decode@result+2
  1176                           
  1177                           ;COBS.c: 118: const uint8_t * src_end_ptr = src_ptr + src_len;
  1178  0000B0  5021               	movf	cobs_decode@src_len,w,c
  1179  0000B2  241F               	addwf	cobs_decode@src_ptr,w,c
  1180  0000B4  0100               	movlb	0	; () banked
  1181  0000B6  6F60               	movwf	cobs_decode@src_end_ptr& (0+255),b
  1182  0000B8  5022               	movf	cobs_decode@src_len+1,w,c
  1183  0000BA  2020               	addwfc	cobs_decode@src_ptr+1,w,c
  1184  0000BC  0100               	movlb	0	; () banked
  1185  0000BE  6F61               	movwf	(cobs_decode@src_end_ptr+1)& (0+255),b
  1186                           
  1187                           ;COBS.c: 119: uint8_t * dst_buf_end_ptr = dst_buf_ptr + dst_buf_len;
  1188  0000C0  501D               	movf	cobs_decode@dst_buf_len,w,c
  1189  0000C2  241B               	addwf	cobs_decode@dst_buf_ptr,w,c
  1190  0000C4  0100               	movlb	0	; () banked
  1191  0000C6  6F62               	movwf	cobs_decode@dst_buf_end_ptr& (0+255),b
  1192  0000C8  501E               	movf	cobs_decode@dst_buf_len+1,w,c
  1193  0000CA  201C               	addwfc	cobs_decode@dst_buf_ptr+1,w,c
  1194  0000CC  0100               	movlb	0	; () banked
  1195  0000CE  6F63               	movwf	(cobs_decode@dst_buf_end_ptr+1)& (0+255),b
  1196                           
  1197                           ;COBS.c: 120: uint8_t * dst_write_ptr = dst_buf_ptr;
  1198  0000D0  C01B  F068         	movff	cobs_decode@dst_buf_ptr,cobs_decode@dst_write_ptr
  1199  0000D4  C01C  F069         	movff	cobs_decode@dst_buf_ptr+1,cobs_decode@dst_write_ptr+1
  1200                           
  1201                           ;COBS.c: 121: size_t remaining_bytes;
  1202                           ;COBS.c: 122: uint8_t src_byte;
  1203                           ;COBS.c: 123: uint8_t i;
  1204                           ;COBS.c: 124: uint8_t len_code;
  1205                           ;COBS.c: 128: if ((dst_buf_ptr == (0)) || (src_ptr == (0)))
  1206  0000D8  501B               	movf	cobs_decode@dst_buf_ptr,w,c
  1207  0000DA  101C               	iorwf	cobs_decode@dst_buf_ptr+1,w,c
  1208  0000DC  B4D8               	btfsc	status,2,c
  1209  0000DE  D004               	goto	l2401
  1210                           
  1211                           ; BSR set to: 0
  1212  0000E0  501F               	movf	cobs_decode@src_ptr,w,c
  1213  0000E2  1020               	iorwf	cobs_decode@src_ptr+1,w,c
  1214  0000E4  A4D8               	btfss	status,2,c
  1215  0000E6  D00A               	goto	l2407
  1216  0000E8                     l2401:
  1217                           
  1218                           ; BSR set to: 0
  1219                           ;COBS.c: 129: {
  1220                           ;COBS.c: 130: result.status = COBS_DECODE_NULL_POINTER;
  1221  0000E8  0E01               	movlw	1
  1222  0000EA  0100               	movlb	0	; () banked
  1223  0000EC  6F6D               	movwf	(cobs_decode@result+2)& (0+255),b
  1224                           
  1225                           ; BSR set to: 0
  1226                           ;COBS.c: 131: return result;
  1227  0000EE  C06B  F01B         	movff	cobs_decode@result,?_cobs_decode
  1228  0000F2  C06C  F01C         	movff	cobs_decode@result+1,?_cobs_decode+1
  1229  0000F6  C06D  F01D         	movff	cobs_decode@result+2,?_cobs_decode+2
  1230                           
  1231                           ; BSR set to: 0
  1232  0000FA  0012               	return	
  1233  0000FC                     l2407:
  1234                           
  1235                           ; BSR set to: 0
  1236                           ;COBS.c: 132: }
  1237                           ;COBS.c: 134: if (src_len != 0)
  1238  0000FC  5021               	movf	cobs_decode@src_len,w,c
  1239  0000FE  1022               	iorwf	cobs_decode@src_len+1,w,c
  1240  000100  B4D8               	btfsc	status,2,c
  1241  000102  D096               	goto	l2471
  1242  000104                     l2409:
  1243                           
  1244                           ; BSR set to: 0
  1245                           ;COBS.c: 137: {
  1246                           ;COBS.c: 138: len_code = *src_ptr++;
  1247  000104  C01F  FFD9         	movff	cobs_decode@src_ptr,fsr2l
  1248  000108  C020  FFDA         	movff	cobs_decode@src_ptr+1,fsr2h
  1249  00010C  50DF               	movf	indf2,w,c
  1250  00010E  0100               	movlb	0	; () banked
  1251  000110  6F6A               	movwf	cobs_decode@len_code& (0+255),b
  1252                           
  1253                           ; BSR set to: 0
  1254  000112  4A1F               	infsnz	cobs_decode@src_ptr,f,c
  1255  000114  2A20               	incf	cobs_decode@src_ptr+1,f,c
  1256                           
  1257                           ; BSR set to: 0
  1258                           ;COBS.c: 139: if (len_code == 0)
  1259  000116  0100               	movlb	0	; () banked
  1260  000118  516A               	movf	cobs_decode@len_code& (0+255),w,b
  1261  00011A  0100               	movlb	0	; () banked
  1262  00011C  A4D8               	btfss	status,2,c
  1263  00011E  D003               	goto	l2417
  1264                           
  1265                           ; BSR set to: 0
  1266                           ;COBS.c: 140: {
  1267                           ;COBS.c: 141: result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
  1268  000120  0100               	movlb	0	; () banked
  1269  000122  856D               	bsf	(cobs_decode@result+2)& (0+255),2,b
  1270                           
  1271                           ;COBS.c: 142: break;
  1272  000124  D085               	goto	l2471
  1273  000126                     l2417:
  1274                           
  1275                           ; BSR set to: 0
  1276                           ;COBS.c: 143: }
  1277                           ;COBS.c: 144: len_code--;
  1278  000126  0100               	movlb	0	; () banked
  1279  000128  076A               	decf	cobs_decode@len_code& (0+255),f,b
  1280                           
  1281                           ; BSR set to: 0
  1282                           ;COBS.c: 147: remaining_bytes = src_end_ptr - src_ptr;
  1283  00012A  C01F  F023         	movff	cobs_decode@src_ptr,??_cobs_decode
  1284  00012E  C020  F024         	movff	cobs_decode@src_ptr+1,??_cobs_decode+1
  1285  000132  1E23               	comf	??_cobs_decode,f,c
  1286  000134  1E24               	comf	??_cobs_decode+1,f,c
  1287  000136  4A23               	infsnz	??_cobs_decode,f,c
  1288  000138  2A24               	incf	??_cobs_decode+1,f,c
  1289  00013A  0100               	movlb	0	; () banked
  1290  00013C  5160               	movf	cobs_decode@src_end_ptr& (0+255),w,b
  1291  00013E  2423               	addwf	??_cobs_decode,w,c
  1292  000140  0100               	movlb	0	; () banked
  1293  000142  6F66               	movwf	cobs_decode@remaining_bytes& (0+255),b
  1294  000144  0100               	movlb	0	; () banked
  1295  000146  5161               	movf	(cobs_decode@src_end_ptr+1)& (0+255),w,b
  1296  000148  2024               	addwfc	??_cobs_decode+1,w,c
  1297  00014A  0100               	movlb	0	; () banked
  1298  00014C  6F67               	movwf	(cobs_decode@remaining_bytes+1)& (0+255),b
  1299                           
  1300                           ; BSR set to: 0
  1301                           ;COBS.c: 148: if (len_code > remaining_bytes)
  1302  00014E  0100               	movlb	0	; () banked
  1303  000150  516A               	movf	cobs_decode@len_code& (0+255),w,b
  1304  000152  0100               	movlb	0	; () banked
  1305  000154  5D66               	subwf	cobs_decode@remaining_bytes& (0+255),w,b
  1306  000156  0E00               	movlw	0
  1307  000158  5967               	subwfb	(cobs_decode@remaining_bytes+1)& (0+255),w,b
  1308  00015A  B0D8               	btfsc	status,0,c
  1309  00015C  D004               	goto	l2427
  1310                           
  1311                           ; BSR set to: 0
  1312                           ;COBS.c: 149: {
  1313                           ;COBS.c: 150: result.status |= COBS_DECODE_INPUT_TOO_SHORT;
  1314  00015E  0100               	movlb	0	; () banked
  1315  000160  876D               	bsf	(cobs_decode@result+2)& (0+255),3,b
  1316                           
  1317                           ; BSR set to: 0
  1318                           ;COBS.c: 151: len_code = remaining_bytes;
  1319  000162  C066  F06A         	movff	cobs_decode@remaining_bytes,cobs_decode@len_code
  1320  000166                     l2427:
  1321                           
  1322                           ; BSR set to: 0
  1323                           ;COBS.c: 152: }
  1324                           ;COBS.c: 155: remaining_bytes = dst_buf_end_ptr - dst_write_ptr;
  1325  000166  C068  F023         	movff	cobs_decode@dst_write_ptr,??_cobs_decode
  1326  00016A  C069  F024         	movff	cobs_decode@dst_write_ptr+1,??_cobs_decode+1
  1327  00016E  1E23               	comf	??_cobs_decode,f,c
  1328  000170  1E24               	comf	??_cobs_decode+1,f,c
  1329  000172  4A23               	infsnz	??_cobs_decode,f,c
  1330  000174  2A24               	incf	??_cobs_decode+1,f,c
  1331  000176  0100               	movlb	0	; () banked
  1332  000178  5162               	movf	cobs_decode@dst_buf_end_ptr& (0+255),w,b
  1333  00017A  2423               	addwf	??_cobs_decode,w,c
  1334  00017C  0100               	movlb	0	; () banked
  1335  00017E  6F66               	movwf	cobs_decode@remaining_bytes& (0+255),b
  1336  000180  0100               	movlb	0	; () banked
  1337  000182  5163               	movf	(cobs_decode@dst_buf_end_ptr+1)& (0+255),w,b
  1338  000184  2024               	addwfc	??_cobs_decode+1,w,c
  1339  000186  0100               	movlb	0	; () banked
  1340  000188  6F67               	movwf	(cobs_decode@remaining_bytes+1)& (0+255),b
  1341                           
  1342                           ; BSR set to: 0
  1343                           ;COBS.c: 156: if (len_code > remaining_bytes)
  1344  00018A  0100               	movlb	0	; () banked
  1345  00018C  516A               	movf	cobs_decode@len_code& (0+255),w,b
  1346  00018E  0100               	movlb	0	; () banked
  1347  000190  5D66               	subwf	cobs_decode@remaining_bytes& (0+255),w,b
  1348  000192  0E00               	movlw	0
  1349  000194  5967               	subwfb	(cobs_decode@remaining_bytes+1)& (0+255),w,b
  1350  000196  B0D8               	btfsc	status,0,c
  1351  000198  D004               	goto	l2435
  1352                           
  1353                           ; BSR set to: 0
  1354                           ;COBS.c: 157: {
  1355                           ;COBS.c: 158: result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
  1356  00019A  0100               	movlb	0	; () banked
  1357  00019C  836D               	bsf	(cobs_decode@result+2)& (0+255),1,b
  1358                           
  1359                           ; BSR set to: 0
  1360                           ;COBS.c: 159: len_code = remaining_bytes;
  1361  00019E  C066  F06A         	movff	cobs_decode@remaining_bytes,cobs_decode@len_code
  1362  0001A2                     l2435:
  1363                           
  1364                           ; BSR set to: 0
  1365                           ;COBS.c: 160: }
  1366                           ;COBS.c: 162: for (i = len_code; i != 0; i--)
  1367  0001A2  C06A  F065         	movff	cobs_decode@len_code,cobs_decode@i
  1368  0001A6                     l2437:
  1369                           
  1370                           ; BSR set to: 0
  1371  0001A6  0100               	movlb	0	; () banked
  1372  0001A8  5165               	movf	cobs_decode@i& (0+255),w,b
  1373  0001AA  0100               	movlb	0	; () banked
  1374  0001AC  B4D8               	btfsc	status,2,c
  1375  0001AE  D01C               	goto	l2457
  1376                           
  1377                           ; BSR set to: 0
  1378                           ;COBS.c: 163: {
  1379                           ;COBS.c: 164: src_byte = *src_ptr++;
  1380                           
  1381                           ; BSR set to: 0
  1382                           
  1383                           ; BSR set to: 0
  1384  0001B0  C01F  FFD9         	movff	cobs_decode@src_ptr,fsr2l
  1385  0001B4  C020  FFDA         	movff	cobs_decode@src_ptr+1,fsr2h
  1386  0001B8  50DF               	movf	indf2,w,c
  1387  0001BA  0100               	movlb	0	; () banked
  1388  0001BC  6F64               	movwf	cobs_decode@src_byte& (0+255),b
  1389                           
  1390                           ; BSR set to: 0
  1391  0001BE  4A1F               	infsnz	cobs_decode@src_ptr,f,c
  1392  0001C0  2A20               	incf	cobs_decode@src_ptr+1,f,c
  1393                           
  1394                           ; BSR set to: 0
  1395                           ;COBS.c: 165: if (src_byte == 0)
  1396  0001C2  0100               	movlb	0	; () banked
  1397  0001C4  5164               	movf	cobs_decode@src_byte& (0+255),w,b
  1398  0001C6  0100               	movlb	0	; () banked
  1399  0001C8  A4D8               	btfss	status,2,c
  1400  0001CA  D002               	goto	l2449
  1401                           
  1402                           ; BSR set to: 0
  1403                           ;COBS.c: 166: {
  1404                           ;COBS.c: 167: result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
  1405  0001CC  0100               	movlb	0	; () banked
  1406  0001CE  856D               	bsf	(cobs_decode@result+2)& (0+255),2,b
  1407  0001D0                     l2449:
  1408                           
  1409                           ; BSR set to: 0
  1410                           ;COBS.c: 168: }
  1411                           ;COBS.c: 169: *dst_write_ptr++ = src_byte;
  1412  0001D0  C068  FFD9         	movff	cobs_decode@dst_write_ptr,fsr2l
  1413  0001D4  C069  FFDA         	movff	cobs_decode@dst_write_ptr+1,fsr2h
  1414  0001D8  C064  FFDF         	movff	cobs_decode@src_byte,indf2
  1415                           
  1416                           ; BSR set to: 0
  1417  0001DC  0100               	movlb	0	; () banked
  1418  0001DE  4B68               	infsnz	cobs_decode@dst_write_ptr& (0+255),f,b
  1419  0001E0  2B69               	incf	(cobs_decode@dst_write_ptr+1)& (0+255),f,b
  1420                           
  1421                           ; BSR set to: 0
  1422  0001E2  0100               	movlb	0	; () banked
  1423  0001E4  0765               	decf	cobs_decode@i& (0+255),f,b
  1424  0001E6  D7DF               	goto	l2437
  1425  0001E8                     l2457:
  1426                           
  1427                           ; BSR set to: 0
  1428                           ;COBS.c: 170: }
  1429                           ;COBS.c: 172: if (src_ptr >= src_end_ptr)
  1430  0001E8  0100               	movlb	0	; () banked
  1431  0001EA  5160               	movf	cobs_decode@src_end_ptr& (0+255),w,b
  1432  0001EC  5C1F               	subwf	cobs_decode@src_ptr,w,c
  1433  0001EE  0100               	movlb	0	; () banked
  1434  0001F0  5161               	movf	(cobs_decode@src_end_ptr+1)& (0+255),w,b
  1435  0001F2  5820               	subwfb	cobs_decode@src_ptr+1,w,c
  1436  0001F4  B0D8               	btfsc	status,0,c
  1437  0001F6  D01C               	goto	l2471
  1438                           
  1439                           ; BSR set to: 0
  1440                           ;COBS.c: 175: }
  1441                           ;COBS.c: 178: if (len_code != 0xFE)
  1442                           
  1443                           ; BSR set to: 0
  1444                           
  1445                           ; BSR set to: 0
  1446                           ;COBS.c: 173: {
  1447                           ;COBS.c: 174: break;
  1448  0001F8  0EFE               	movlw	254
  1449  0001FA  0100               	movlb	0	; () banked
  1450  0001FC  196A               	xorwf	cobs_decode@len_code& (0+255),w,b
  1451  0001FE  B4D8               	btfsc	status,2,c
  1452  000200  D781               	goto	l2409
  1453                           
  1454                           ; BSR set to: 0
  1455                           ;COBS.c: 179: {
  1456                           ;COBS.c: 180: if (dst_write_ptr >= dst_buf_end_ptr)
  1457  000202  0100               	movlb	0	; () banked
  1458  000204  5162               	movf	cobs_decode@dst_buf_end_ptr& (0+255),w,b
  1459  000206  0100               	movlb	0	; () banked
  1460  000208  5D68               	subwf	cobs_decode@dst_write_ptr& (0+255),w,b
  1461  00020A  0100               	movlb	0	; () banked
  1462  00020C  5163               	movf	(cobs_decode@dst_buf_end_ptr+1)& (0+255),w,b
  1463  00020E  0100               	movlb	0	; () banked
  1464  000210  5969               	subwfb	(cobs_decode@dst_write_ptr+1)& (0+255),w,b
  1465  000212  A0D8               	btfss	status,0,c
  1466  000214  D003               	goto	l2467
  1467                           
  1468                           ; BSR set to: 0
  1469                           ;COBS.c: 181: {
  1470                           ;COBS.c: 182: result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
  1471  000216  0100               	movlb	0	; () banked
  1472  000218  836D               	bsf	(cobs_decode@result+2)& (0+255),1,b
  1473                           
  1474                           ;COBS.c: 183: break;
  1475  00021A  D00A               	goto	l2471
  1476  00021C                     l2467:
  1477                           
  1478                           ; BSR set to: 0
  1479                           ;COBS.c: 184: }
  1480                           ;COBS.c: 185: *dst_write_ptr++ = 0;
  1481  00021C  C068  FFD9         	movff	cobs_decode@dst_write_ptr,fsr2l
  1482  000220  C069  FFDA         	movff	cobs_decode@dst_write_ptr+1,fsr2h
  1483  000224  0E00               	movlw	0
  1484  000226  6EDF               	movwf	indf2,c
  1485                           
  1486                           ; BSR set to: 0
  1487  000228  0100               	movlb	0	; () banked
  1488  00022A  4B68               	infsnz	cobs_decode@dst_write_ptr& (0+255),f,b
  1489  00022C  2B69               	incf	(cobs_decode@dst_write_ptr+1)& (0+255),f,b
  1490                           
  1491                           ; BSR set to: 0
  1492                           ;COBS.c: 186: }
  1493                           ;COBS.c: 187: }
  1494  00022E  D76A               	goto	l2409
  1495  000230                     l2471:
  1496                           
  1497                           ; BSR set to: 0
  1498                           ;COBS.c: 188: }
  1499                           ;COBS.c: 190: result.out_len = dst_write_ptr - dst_buf_ptr;
  1500  000230  C01B  F023         	movff	cobs_decode@dst_buf_ptr,??_cobs_decode
  1501  000234  C01C  F024         	movff	cobs_decode@dst_buf_ptr+1,??_cobs_decode+1
  1502  000238  1E23               	comf	??_cobs_decode,f,c
  1503  00023A  1E24               	comf	??_cobs_decode+1,f,c
  1504  00023C  4A23               	infsnz	??_cobs_decode,f,c
  1505  00023E  2A24               	incf	??_cobs_decode+1,f,c
  1506  000240  0100               	movlb	0	; () banked
  1507  000242  5168               	movf	cobs_decode@dst_write_ptr& (0+255),w,b
  1508  000244  2423               	addwf	??_cobs_decode,w,c
  1509  000246  0100               	movlb	0	; () banked
  1510  000248  6F6B               	movwf	cobs_decode@result& (0+255),b
  1511  00024A  0100               	movlb	0	; () banked
  1512  00024C  5169               	movf	(cobs_decode@dst_write_ptr+1)& (0+255),w,b
  1513  00024E  2024               	addwfc	??_cobs_decode+1,w,c
  1514  000250  0100               	movlb	0	; () banked
  1515  000252  6F6C               	movwf	(cobs_decode@result+1)& (0+255),b
  1516                           
  1517                           ; BSR set to: 0
  1518                           ;COBS.c: 192: return result;
  1519  000254  C06B  F01B         	movff	cobs_decode@result,?_cobs_decode
  1520  000258  C06C  F01C         	movff	cobs_decode@result+1,?_cobs_decode+1
  1521  00025C  C06D  F01D         	movff	cobs_decode@result+2,?_cobs_decode+2
  1522  000260  0012               	return	
  1523  000262                     __end_of_cobs_decode:
  1524                           	opt stack 0
  1525                           tblptru	equ	0xFF8
  1526                           tblptrh	equ	0xFF7
  1527                           tblptrl	equ	0xFF6
  1528                           tablat	equ	0xFF5
  1529                           postinc0	equ	0xFEE
  1530                           wreg	equ	0xFE8
  1531                           postdec1	equ	0xFE5
  1532                           fsr1l	equ	0xFE1
  1533                           indf2	equ	0xFDF
  1534                           postinc2	equ	0xFDE
  1535                           fsr2h	equ	0xFDA
  1536                           fsr2l	equ	0xFD9
  1537                           status	equ	0xFD8
  1538                           
  1539 ;; *************** function _Receive_get *****************
  1540 ;; Defined at:
  1541 ;;		line 125 in file "UART.c"
  1542 ;; Parameters:    Size  Location     Type
  1543 ;;		None
  1544 ;; Auto vars:     Size  Location     Type
  1545 ;;		None
  1546 ;; Return value:  Size  Location     Type
  1547 ;;                  1    wreg      unsigned char 
  1548 ;; Registers used:
  1549 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1550 ;; Tracked objects:
  1551 ;;		On entry : 0/0
  1552 ;;		On exit  : 0/0
  1553 ;;		Unchanged: 0/0
  1554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1555 ;;      Params:         0       0       0       0       0       0       0
  1556 ;;      Locals:         0       0       0       0       0       0       0
  1557 ;;      Temps:          0       0       0       0       0       0       0
  1558 ;;      Totals:         0       0       0       0       0       0       0
  1559 ;;Total ram usage:        0 bytes
  1560 ;; Hardware stack levels used:    1
  1561 ;; Hardware stack levels required when called:    6
  1562 ;; This function calls:
  1563 ;;		_UART_buff_get
  1564 ;; This function is called by:
  1565 ;;		_receiveData
  1566 ;;		_getch
  1567 ;; This function uses a non-reentrant model
  1568 ;;
  1569                           
  1570                           	psect	text4
  1571  000FAA                     __ptext4:
  1572                           	opt stack 0
  1573  000FAA                     _Receive_get:
  1574                           	opt stack 22
  1575                           
  1576                           ;UART.c: 126: return UART_buff_get(&input_buffer);
  1577                           
  1578                           ; BSR set to: 0
  1579                           ;incstack = 0
  1580  000FAA  0E6A               	movlw	low _input_buffer
  1581  000FAC  6E21               	movwf	UART_buff_get@_this,c
  1582  000FAE  0E01               	movlw	high _input_buffer
  1583  000FB0  6E22               	movwf	UART_buff_get@_this+1,c
  1584  000FB2  EC36  F005         	call	_UART_buff_get	;wreg free
  1585  000FB6  0012               	return	
  1586  000FB8                     __end_of_Receive_get:
  1587                           	opt stack 0
  1588                           tblptru	equ	0xFF8
  1589                           tblptrh	equ	0xFF7
  1590                           tblptrl	equ	0xFF6
  1591                           tablat	equ	0xFF5
  1592                           postinc0	equ	0xFEE
  1593                           wreg	equ	0xFE8
  1594                           postdec1	equ	0xFE5
  1595                           fsr1l	equ	0xFE1
  1596                           indf2	equ	0xFDF
  1597                           postinc2	equ	0xFDE
  1598                           fsr2h	equ	0xFDA
  1599                           fsr2l	equ	0xFD9
  1600                           status	equ	0xFD8
  1601                           
  1602 ;; *************** function _Receive_available *****************
  1603 ;; Defined at:
  1604 ;;		line 121 in file "UART.c"
  1605 ;; Parameters:    Size  Location     Type
  1606 ;;		None
  1607 ;; Auto vars:     Size  Location     Type
  1608 ;;		None
  1609 ;; Return value:  Size  Location     Type
  1610 ;;                  2   28[COMRAM] int 
  1611 ;; Registers used:
  1612 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1613 ;; Tracked objects:
  1614 ;;		On entry : 0/0
  1615 ;;		On exit  : 0/0
  1616 ;;		Unchanged: 0/0
  1617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1618 ;;      Params:         2       0       0       0       0       0       0
  1619 ;;      Locals:         0       0       0       0       0       0       0
  1620 ;;      Temps:          0       0       0       0       0       0       0
  1621 ;;      Totals:         2       0       0       0       0       0       0
  1622 ;;Total ram usage:        2 bytes
  1623 ;; Hardware stack levels used:    1
  1624 ;; Hardware stack levels required when called:    5
  1625 ;; This function calls:
  1626 ;;		_UART_buff_size
  1627 ;; This function is called by:
  1628 ;;		_receiveData
  1629 ;; This function uses a non-reentrant model
  1630 ;;
  1631                           
  1632                           	psect	text5
  1633  000F36                     __ptext5:
  1634                           	opt stack 0
  1635  000F36                     _Receive_available:
  1636                           	opt stack 23
  1637                           
  1638                           ;UART.c: 122: return UART_buff_size(&input_buffer);
  1639                           
  1640                           ;incstack = 0
  1641  000F36  0E6A               	movlw	low _input_buffer
  1642  000F38  6E1B               	movwf	UART_buff_size@_this,c
  1643  000F3A  0E01               	movlw	high _input_buffer
  1644  000F3C  6E1C               	movwf	UART_buff_size@_this+1,c
  1645  000F3E  ECA6  F007         	call	_UART_buff_size	;wreg free
  1646  000F42  C01B  F01D         	movff	?_UART_buff_size,?_Receive_available
  1647  000F46  C01C  F01E         	movff	?_UART_buff_size+1,?_Receive_available+1
  1648  000F4A  0012               	return	
  1649  000F4C                     __end_of_Receive_available:
  1650                           	opt stack 0
  1651                           tblptru	equ	0xFF8
  1652                           tblptrh	equ	0xFF7
  1653                           tblptrl	equ	0xFF6
  1654                           tablat	equ	0xFF5
  1655                           postinc0	equ	0xFEE
  1656                           wreg	equ	0xFE8
  1657                           postdec1	equ	0xFE5
  1658                           fsr1l	equ	0xFE1
  1659                           indf2	equ	0xFDF
  1660                           postinc2	equ	0xFDE
  1661                           fsr2h	equ	0xFDA
  1662                           fsr2l	equ	0xFD9
  1663                           status	equ	0xFD8
  1664                           
  1665 ;; *************** function _UART_buff_size *****************
  1666 ;; Defined at:
  1667 ;;		line 101 in file "UART.c"
  1668 ;; Parameters:    Size  Location     Type
  1669 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  1670 ;;		 -> output_buffer(106), input_buffer(106), 
  1671 ;; Auto vars:     Size  Location     Type
  1672 ;;		None
  1673 ;; Return value:  Size  Location     Type
  1674 ;;                  2   26[COMRAM] int 
  1675 ;; Registers used:
  1676 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1677 ;; Tracked objects:
  1678 ;;		On entry : 0/0
  1679 ;;		On exit  : 0/0
  1680 ;;		Unchanged: 0/0
  1681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1682 ;;      Params:         2       0       0       0       0       0       0
  1683 ;;      Locals:         0       0       0       0       0       0       0
  1684 ;;      Temps:          0       0       0       0       0       0       0
  1685 ;;      Totals:         2       0       0       0       0       0       0
  1686 ;;Total ram usage:        2 bytes
  1687 ;; Hardware stack levels used:    1
  1688 ;; Hardware stack levels required when called:    4
  1689 ;; This function calls:
  1690 ;;		Nothing
  1691 ;; This function is called by:
  1692 ;;		_Receive_available
  1693 ;; This function uses a non-reentrant model
  1694 ;;
  1695                           
  1696                           	psect	text6
  1697  000F4C                     __ptext6:
  1698                           	opt stack 0
  1699  000F4C                     _UART_buff_size:
  1700                           	opt stack 23
  1701                           
  1702                           ;UART.c: 102: return (_this->count);
  1703                           
  1704                           ;incstack = 0
  1705  000F4C  EE20 F068          	lfsr	2,104
  1706  000F50  501B               	movf	UART_buff_size@_this,w,c
  1707  000F52  26D9               	addwf	fsr2l,f,c
  1708  000F54  501C               	movf	UART_buff_size@_this+1,w,c
  1709  000F56  22DA               	addwfc	fsr2h,f,c
  1710  000F58  CFDE F01B          	movff	postinc2,?_UART_buff_size
  1711  000F5C  CFDD F01C          	movff	postdec2,?_UART_buff_size+1
  1712  000F60  0012               	return	
  1713  000F62                     __end_of_UART_buff_size:
  1714                           	opt stack 0
  1715                           tblptru	equ	0xFF8
  1716                           tblptrh	equ	0xFF7
  1717                           tblptrl	equ	0xFF6
  1718                           tablat	equ	0xFF5
  1719                           postinc0	equ	0xFEE
  1720                           wreg	equ	0xFE8
  1721                           postdec1	equ	0xFE5
  1722                           fsr1l	equ	0xFE1
  1723                           indf2	equ	0xFDF
  1724                           postinc2	equ	0xFDE
  1725                           postdec2	equ	0xFDD
  1726                           fsr2h	equ	0xFDA
  1727                           fsr2l	equ	0xFD9
  1728                           status	equ	0xFD8
  1729                           
  1730 ;; *************** function _ComController *****************
  1731 ;; Defined at:
  1732 ;;		line 132 in file "CarCom.c"
  1733 ;; Parameters:    Size  Location     Type
  1734 ;;  DTI             2   90[BANK0 ] PTR unsigned char 
  1735 ;;		 -> ProcessArray(30), 
  1736 ;;  lenth           2   92[BANK0 ] unsigned int 
  1737 ;; Auto vars:     Size  Location     Type
  1738 ;;  DataToSend      4   95[BANK0 ] unsigned char [4]
  1739 ;; Return value:  Size  Location     Type
  1740 ;;                  1    wreg      void 
  1741 ;; Registers used:
  1742 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1743 ;; Tracked objects:
  1744 ;;		On entry : 0/0
  1745 ;;		On exit  : 0/0
  1746 ;;		Unchanged: 0/0
  1747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1748 ;;      Params:         0       4       0       0       0       0       0
  1749 ;;      Locals:         0       4       0       0       0       0       0
  1750 ;;      Temps:          0       1       0       0       0       0       0
  1751 ;;      Totals:         0       9       0       0       0       0       0
  1752 ;;Total ram usage:        9 bytes
  1753 ;; Hardware stack levels used:    1
  1754 ;; Hardware stack levels required when called:    8
  1755 ;; This function calls:
  1756 ;;		_Delay
  1757 ;;		_GetDataDict
  1758 ;;		_sendData
  1759 ;; This function is called by:
  1760 ;;		_receiveData
  1761 ;; This function uses a non-reentrant model
  1762 ;;
  1763                           
  1764                           	psect	text7
  1765  000888                     __ptext7:
  1766                           	opt stack 0
  1767  000888                     _ComController:
  1768                           	opt stack 20
  1769                           
  1770                           ;CarCom.c: 133: if(DTI[1] == 1){
  1771                           
  1772                           ;incstack = 0
  1773  000888  0100               	movlb	0	; () banked
  1774  00088A  EE20 F001          	lfsr	2,1
  1775  00088E  51BA               	movf	ComController@DTI& (0+255),w,b
  1776  000890  26D9               	addwf	fsr2l,f,c
  1777  000892  51BB               	movf	(ComController@DTI+1)& (0+255),w,b
  1778  000894  22DA               	addwfc	fsr2h,f,c
  1779  000896  04DE               	decf	postinc2,w,c
  1780  000898  A4D8               	btfss	status,2,c
  1781  00089A  0012               	return	
  1782                           
  1783                           ; BSR set to: 0
  1784                           ;CarCom.c: 134: unsigned char DataToSend[4];
  1785                           ;CarCom.c: 135: GetDataDict(DTI[2], DTI[3], DataToSend, DTI[4]);
  1786  00089C  0100               	movlb	0	; () banked
  1787  00089E  EE20 F003          	lfsr	2,3
  1788  0008A2  51BA               	movf	ComController@DTI& (0+255),w,b
  1789  0008A4  26D9               	addwf	fsr2l,f,c
  1790  0008A6  51BB               	movf	(ComController@DTI+1)& (0+255),w,b
  1791  0008A8  22DA               	addwfc	fsr2h,f,c
  1792  0008AA  50DF               	movf	indf2,w,c
  1793  0008AC  6E1B               	movwf	GetDataDict@DataTableIndex,c
  1794  0008AE  0EBF               	movlw	low ComController@DataToSend
  1795  0008B0  6E1C               	movwf	GetDataDict@DataArray,c
  1796  0008B2  0E00               	movlw	high ComController@DataToSend
  1797  0008B4  6E1D               	movwf	GetDataDict@DataArray+1,c
  1798  0008B6  0100               	movlb	0	; () banked
  1799  0008B8  EE20 F004          	lfsr	2,4
  1800  0008BC  51BA               	movf	ComController@DTI& (0+255),w,b
  1801  0008BE  26D9               	addwf	fsr2l,f,c
  1802  0008C0  51BB               	movf	(ComController@DTI+1)& (0+255),w,b
  1803  0008C2  22DA               	addwfc	fsr2h,f,c
  1804  0008C4  50DF               	movf	indf2,w,c
  1805  0008C6  6E1E               	movwf	GetDataDict@numbofbytes,c
  1806  0008C8  0100               	movlb	0	; () banked
  1807  0008CA  EE20 F002          	lfsr	2,2
  1808  0008CE  51BA               	movf	ComController@DTI& (0+255),w,b
  1809  0008D0  26D9               	addwf	fsr2l,f,c
  1810  0008D2  51BB               	movf	(ComController@DTI+1)& (0+255),w,b
  1811  0008D4  22DA               	addwfc	fsr2h,f,c
  1812  0008D6  50DF               	movf	indf2,w,c
  1813  0008D8  EC9E  F004         	call	_GetDataDict
  1814                           
  1815                           ;CarCom.c: 136: LATDbits.LATD4 = 1;
  1816  0008DC  888C               	bsf	3980,4,c	;volatile
  1817                           
  1818                           ;CarCom.c: 137: Delay(5);
  1819  0008DE  0E00               	movlw	0
  1820  0008E0  6E1C               	movwf	Delay@wait+1,c
  1821  0008E2  0E05               	movlw	5
  1822  0008E4  6E1B               	movwf	Delay@wait,c
  1823  0008E6  ECB6  F006         	call	_Delay	;wreg free
  1824                           
  1825                           ;CarCom.c: 138: sendData(1, 1, 1, 1, DataToSend, DTI[4]);
  1826  0008EA  0E01               	movlw	1
  1827  0008EC  0100               	movlb	0	; () banked
  1828  0008EE  6F6D               	movwf	sendData@ComandByte& (0+255),b
  1829  0008F0  0E01               	movlw	1
  1830  0008F2  0100               	movlb	0	; () banked
  1831  0008F4  6F6E               	movwf	sendData@DataTable& (0+255),b
  1832  0008F6  0E01               	movlw	1
  1833  0008F8  0100               	movlb	0	; () banked
  1834  0008FA  6F6F               	movwf	sendData@DataTableIndex& (0+255),b
  1835  0008FC  0EBF               	movlw	low ComController@DataToSend
  1836  0008FE  0100               	movlb	0	; () banked
  1837  000900  6F70               	movwf	sendData@DTS& (0+255),b
  1838  000902  0E00               	movlw	high ComController@DataToSend
  1839  000904  0100               	movlb	0	; () banked
  1840  000906  6F71               	movwf	(sendData@DTS+1)& (0+255),b
  1841  000908  0100               	movlb	0	; () banked
  1842  00090A  EE20 F004          	lfsr	2,4
  1843  00090E  51BA               	movf	ComController@DTI& (0+255),w,b
  1844  000910  26D9               	addwf	fsr2l,f,c
  1845  000912  51BB               	movf	(ComController@DTI+1)& (0+255),w,b
  1846  000914  22DA               	addwfc	fsr2h,f,c
  1847  000916  50DF               	movf	indf2,w,c
  1848  000918  0100               	movlb	0	; () banked
  1849  00091A  6FBE               	movwf	??_ComController& (0+255),b
  1850  00091C  0100               	movlb	0	; () banked
  1851  00091E  51BE               	movf	??_ComController& (0+255),w,b
  1852  000920  0100               	movlb	0	; () banked
  1853  000922  6F72               	movwf	sendData@lenth& (0+255),b
  1854  000924  6B73               	clrf	(sendData@lenth+1)& (0+255),b
  1855  000926  0E01               	movlw	1
  1856  000928  ECFD  F001         	call	_sendData
  1857                           
  1858                           ;CarCom.c: 139: Delay(3);
  1859  00092C  0E00               	movlw	0
  1860  00092E  6E1C               	movwf	Delay@wait+1,c
  1861  000930  0E03               	movlw	3
  1862  000932  6E1B               	movwf	Delay@wait,c
  1863  000934  ECB6  F006         	call	_Delay	;wreg free
  1864                           
  1865                           ;CarCom.c: 140: LATDbits.LATD4 = 0;
  1866  000938  988C               	bcf	3980,4,c	;volatile
  1867  00093A  0012               	return	
  1868  00093C                     __end_of_ComController:
  1869                           	opt stack 0
  1870                           tblptru	equ	0xFF8
  1871                           tblptrh	equ	0xFF7
  1872                           tblptrl	equ	0xFF6
  1873                           tablat	equ	0xFF5
  1874                           postinc0	equ	0xFEE
  1875                           wreg	equ	0xFE8
  1876                           postdec1	equ	0xFE5
  1877                           fsr1l	equ	0xFE1
  1878                           indf2	equ	0xFDF
  1879                           postinc2	equ	0xFDE
  1880                           postdec2	equ	0xFDD
  1881                           fsr2h	equ	0xFDA
  1882                           fsr2l	equ	0xFD9
  1883                           status	equ	0xFD8
  1884                           
  1885 ;; *************** function _sendData *****************
  1886 ;; Defined at:
  1887 ;;		line 40 in file "CarCom.c"
  1888 ;; Parameters:    Size  Location     Type
  1889 ;;  whereToSend     1    wreg     unsigned char 
  1890 ;;  ComandByte      1   13[BANK0 ] unsigned char 
  1891 ;;  DataTable       1   14[BANK0 ] unsigned char 
  1892 ;;  DataTableInd    1   15[BANK0 ] unsigned char 
  1893 ;;  DTS             2   16[BANK0 ] PTR unsigned char 
  1894 ;;		 -> ComController@DataToSend(4), 
  1895 ;;  lenth           2   18[BANK0 ] unsigned int 
  1896 ;; Auto vars:     Size  Location     Type
  1897 ;;  whereToSend     1   81[BANK0 ] unsigned char 
  1898 ;;  SendArray      30   50[BANK0 ] unsigned char [30]
  1899 ;;  COBSArray      30   20[BANK0 ] unsigned char [30]
  1900 ;;  result          3   85[BANK0 ] struct .
  1901 ;;  i               2   88[BANK0 ] unsigned int 
  1902 ;;  count           2   82[BANK0 ] int 
  1903 ;;  CS              1   84[BANK0 ] unsigned char 
  1904 ;;  DataLenth       1   80[BANK0 ] unsigned char 
  1905 ;; Return value:  Size  Location     Type
  1906 ;;                  1    wreg      void 
  1907 ;; Registers used:
  1908 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1909 ;; Tracked objects:
  1910 ;;		On entry : 0/0
  1911 ;;		On exit  : 0/0
  1912 ;;		Unchanged: 0/0
  1913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1914 ;;      Params:         0       7       0       0       0       0       0
  1915 ;;      Locals:         0      70       0       0       0       0       0
  1916 ;;      Temps:          4       0       0       0       0       0       0
  1917 ;;      Totals:         4      77       0       0       0       0       0
  1918 ;;Total ram usage:       81 bytes
  1919 ;; Hardware stack levels used:    1
  1920 ;; Hardware stack levels required when called:    7
  1921 ;; This function calls:
  1922 ;;		_CRC8
  1923 ;;		_Send_put
  1924 ;;		_cobs_encode
  1925 ;; This function is called by:
  1926 ;;		_ComController
  1927 ;; This function uses a non-reentrant model
  1928 ;;
  1929                           
  1930                           	psect	text8
  1931  0003FA                     __ptext8:
  1932                           	opt stack 0
  1933  0003FA                     _sendData:
  1934                           	opt stack 20
  1935                           
  1936                           ;incstack = 0
  1937                           ;sendData@whereToSend stored from wreg
  1938  0003FA  0100               	movlb	0	; () banked
  1939  0003FC  6FB1               	movwf	sendData@whereToSend& (0+255),b
  1940                           
  1941                           ;CarCom.c: 45: unsigned char SendArray[30];
  1942                           ;CarCom.c: 46: unsigned char COBSArray[30];
  1943                           ;CarCom.c: 48: unsigned char DataLenth = 1;
  1944  0003FE  0E01               	movlw	1
  1945  000400  0100               	movlb	0	; () banked
  1946  000402  6FB0               	movwf	sendData@DataLenth& (0+255),b
  1947                           
  1948                           ;CarCom.c: 50: cobs_encode_result result;
  1949                           ;CarCom.c: 52: SendArray[0] = 4+1;
  1950  000404  0E05               	movlw	5
  1951  000406  0100               	movlb	0	; () banked
  1952  000408  6F92               	movwf	sendData@SendArray& (0+255),b
  1953                           
  1954                           ; BSR set to: 0
  1955                           ;CarCom.c: 53: SendArray[1] = ComandByte;
  1956  00040A  C06D  F093         	movff	sendData@ComandByte,sendData@SendArray+1
  1957                           
  1958                           ; BSR set to: 0
  1959                           ;CarCom.c: 54: SendArray[2] = DataTable;
  1960  00040E  C06E  F094         	movff	sendData@DataTable,sendData@SendArray+2
  1961                           
  1962                           ; BSR set to: 0
  1963                           ;CarCom.c: 55: SendArray[3] = DataTableIndex;
  1964  000412  C06F  F095         	movff	sendData@DataTableIndex,sendData@SendArray+3
  1965                           
  1966                           ; BSR set to: 0
  1967                           ;CarCom.c: 56: SendArray[4] = lenth;
  1968  000416  C072  F096         	movff	sendData@lenth,sendData@SendArray+4
  1969                           
  1970                           ;CarCom.c: 61: unsigned int i;
  1971                           ;CarCom.c: 62: int count = 5;
  1972  00041A  0E00               	movlw	0
  1973  00041C  0100               	movlb	0	; () banked
  1974  00041E  6FB3               	movwf	(sendData@count+1)& (0+255),b
  1975  000420  0E05               	movlw	5
  1976  000422  6FB2               	movwf	sendData@count& (0+255),b
  1977                           
  1978                           ; BSR set to: 0
  1979                           ;CarCom.c: 63: i = count;
  1980  000424  C0B2  F0B8         	movff	sendData@count,sendData@i
  1981  000428  C0B3  F0B9         	movff	sendData@count+1,sendData@i+1
  1982                           
  1983                           ; BSR set to: 0
  1984                           ;CarCom.c: 65: SendArray[5] = DTS[0];
  1985  00042C  C070  FFD9         	movff	sendData@DTS,fsr2l
  1986  000430  C071  FFDA         	movff	sendData@DTS+1,fsr2h
  1987  000434  50DF               	movf	indf2,w,c
  1988  000436  0100               	movlb	0	; () banked
  1989  000438  6F97               	movwf	(sendData@SendArray+5)& (0+255),b
  1990                           
  1991                           ; BSR set to: 0
  1992                           ;CarCom.c: 67: SendArray[6] = DTS[1];
  1993  00043A  0100               	movlb	0	; () banked
  1994  00043C  EE20 F001          	lfsr	2,1
  1995  000440  5170               	movf	sendData@DTS& (0+255),w,b
  1996  000442  26D9               	addwf	fsr2l,f,c
  1997  000444  5171               	movf	(sendData@DTS+1)& (0+255),w,b
  1998  000446  22DA               	addwfc	fsr2h,f,c
  1999  000448  50DF               	movf	indf2,w,c
  2000  00044A  0100               	movlb	0	; () banked
  2001  00044C  6F98               	movwf	(sendData@SendArray+6)& (0+255),b
  2002                           
  2003                           ; BSR set to: 0
  2004                           ;CarCom.c: 70: unsigned char CS = CRC8(SendArray, 7);
  2005  00044E  0E92               	movlw	low sendData@SendArray
  2006  000450  6E1B               	movwf	CRC8@data,c
  2007  000452  0E00               	movlw	high sendData@SendArray
  2008  000454  6E1C               	movwf	CRC8@data+1,c
  2009  000456  0E07               	movlw	7
  2010  000458  6E1D               	movwf	CRC8@len,c
  2011  00045A  EC73  F006         	call	_CRC8	;wreg free
  2012  00045E  0100               	movlb	0	; () banked
  2013  000460  6FB4               	movwf	sendData@CS& (0+255),b
  2014                           
  2015                           ; BSR set to: 0
  2016                           ;CarCom.c: 74: SendArray[7] = CS;
  2017  000462  C0B4  F099         	movff	sendData@CS,sendData@SendArray+7
  2018                           
  2019                           ; BSR set to: 0
  2020                           ;CarCom.c: 76: result = cobs_encode(COBSArray, sizeof(COBSArray), SendArray, 8);
  2021  000466  0E74               	movlw	low sendData@COBSArray
  2022  000468  6E1B               	movwf	cobs_encode@dst_buf_ptr,c
  2023  00046A  0E00               	movlw	high sendData@COBSArray
  2024  00046C  6E1C               	movwf	cobs_encode@dst_buf_ptr+1,c
  2025  00046E  0E00               	movlw	0
  2026  000470  6E1E               	movwf	cobs_encode@dst_buf_len+1,c
  2027  000472  0E1E               	movlw	30
  2028  000474  6E1D               	movwf	cobs_encode@dst_buf_len,c
  2029  000476  0E92               	movlw	low sendData@SendArray
  2030  000478  6E1F               	movwf	cobs_encode@src_ptr,c
  2031  00047A  0E00               	movlw	high sendData@SendArray
  2032  00047C  6E20               	movwf	cobs_encode@src_ptr+1,c
  2033  00047E  0E00               	movlw	0
  2034  000480  6E22               	movwf	cobs_encode@src_len+1,c
  2035  000482  0E08               	movlw	8
  2036  000484  6E21               	movwf	cobs_encode@src_len,c
  2037  000486  EC31  F001         	call	_cobs_encode	;wreg free
  2038  00048A  C01B  F0B5         	movff	?_cobs_encode,sendData@result
  2039  00048E  C01C  F0B6         	movff	?_cobs_encode+1,sendData@result+1
  2040  000492  C01D  F0B7         	movff	?_cobs_encode+2,sendData@result+2
  2041                           
  2042                           ;CarCom.c: 78: SendArray[0] = whereToSend;
  2043  000496  C0B1  F092         	movff	sendData@whereToSend,sendData@SendArray
  2044                           
  2045                           ;CarCom.c: 80: for(i = 1;i<result.out_len+1;i++){
  2046  00049A  0E00               	movlw	0
  2047  00049C  0100               	movlb	0	; () banked
  2048  00049E  6FB9               	movwf	(sendData@i+1)& (0+255),b
  2049  0004A0  0E01               	movlw	1
  2050  0004A2  6FB8               	movwf	sendData@i& (0+255),b
  2051  0004A4  D01F               	goto	l2377
  2052  0004A6                     l2373:
  2053                           
  2054                           ; BSR set to: 0
  2055                           ;CarCom.c: 81: SendArray[i] = COBSArray[i-1];
  2056  0004A6  0EFF               	movlw	255
  2057  0004A8  6E27               	movwf	??_sendData& (0+255),c
  2058  0004AA  0EFF               	movlw	255
  2059  0004AC  6E28               	movwf	(??_sendData+1)& (0+255),c
  2060  0004AE  C0B8  F029         	movff	sendData@i,??_sendData+2
  2061  0004B2  C0B9  F02A         	movff	sendData@i+1,??_sendData+3
  2062  0004B6  5027               	movf	??_sendData,w,c
  2063  0004B8  2629               	addwf	??_sendData+2,f,c
  2064  0004BA  5028               	movf	??_sendData+1,w,c
  2065  0004BC  222A               	addwfc	??_sendData+3,f,c
  2066  0004BE  0E74               	movlw	low sendData@COBSArray
  2067  0004C0  2429               	addwf	??_sendData+2,w,c
  2068  0004C2  6ED9               	movwf	fsr2l,c
  2069  0004C4  0E00               	movlw	high sendData@COBSArray
  2070  0004C6  202A               	addwfc	??_sendData+3,w,c
  2071  0004C8  6EDA               	movwf	fsr2h,c
  2072  0004CA  0E92               	movlw	low sendData@SendArray
  2073  0004CC  0100               	movlb	0	; () banked
  2074  0004CE  25B8               	addwf	sendData@i& (0+255),w,b
  2075  0004D0  6EE1               	movwf	fsr1l,c
  2076  0004D2  0E00               	movlw	high sendData@SendArray
  2077  0004D4  0100               	movlb	0	; () banked
  2078  0004D6  21B9               	addwfc	(sendData@i+1)& (0+255),w,b
  2079  0004D8  6EE2               	movwf	fsr1h,c
  2080  0004DA  CFDF FFE7          	movff	indf2,indf1
  2081                           
  2082                           ; BSR set to: 0
  2083  0004DE  0100               	movlb	0	; () banked
  2084  0004E0  4BB8               	infsnz	sendData@i& (0+255),f,b
  2085  0004E2  2BB9               	incf	(sendData@i+1)& (0+255),f,b
  2086  0004E4                     l2377:
  2087                           
  2088                           ; BSR set to: 0
  2089  0004E4  0E01               	movlw	1
  2090  0004E6  0100               	movlb	0	; () banked
  2091  0004E8  25B5               	addwf	sendData@result& (0+255),w,b
  2092  0004EA  6E27               	movwf	??_sendData& (0+255),c
  2093  0004EC  0E00               	movlw	0
  2094  0004EE  0100               	movlb	0	; () banked
  2095  0004F0  21B6               	addwfc	(sendData@result+1)& (0+255),w,b
  2096  0004F2  6E28               	movwf	(??_sendData+1)& (0+255),c
  2097  0004F4  5027               	movf	??_sendData,w,c
  2098  0004F6  0100               	movlb	0	; () banked
  2099  0004F8  5DB8               	subwf	sendData@i& (0+255),w,b
  2100  0004FA  5028               	movf	??_sendData+1,w,c
  2101  0004FC  0100               	movlb	0	; () banked
  2102  0004FE  59B9               	subwfb	(sendData@i+1)& (0+255),w,b
  2103  000500  A0D8               	btfss	status,0,c
  2104  000502  D7D1               	goto	l2373
  2105                           
  2106                           ; BSR set to: 0
  2107                           ;CarCom.c: 82: }
  2108                           ;CarCom.c: 84: for(i = 0;i<result.out_len+2;i++){
  2109                           
  2110                           ; BSR set to: 0
  2111  000504  0E00               	movlw	0
  2112  000506  0100               	movlb	0	; () banked
  2113  000508  6FB9               	movwf	(sendData@i+1)& (0+255),b
  2114  00050A  0E00               	movlw	0
  2115  00050C  6FB8               	movwf	sendData@i& (0+255),b
  2116  00050E  D00E               	goto	l2385
  2117  000510                     l2381:
  2118                           
  2119                           ; BSR set to: 0
  2120                           ;CarCom.c: 85: Send_put(SendArray[i]);
  2121  000510  0E92               	movlw	low sendData@SendArray
  2122  000512  0100               	movlb	0	; () banked
  2123  000514  25B8               	addwf	sendData@i& (0+255),w,b
  2124  000516  6ED9               	movwf	fsr2l,c
  2125  000518  0E00               	movlw	high sendData@SendArray
  2126  00051A  0100               	movlb	0	; () banked
  2127  00051C  21B9               	addwfc	(sendData@i+1)& (0+255),w,b
  2128  00051E  6EDA               	movwf	fsr2h,c
  2129  000520  50DF               	movf	indf2,w,c
  2130  000522  ECE9  F006         	call	_Send_put
  2131  000526  0100               	movlb	0	; () banked
  2132  000528  4BB8               	infsnz	sendData@i& (0+255),f,b
  2133  00052A  2BB9               	incf	(sendData@i+1)& (0+255),f,b
  2134  00052C                     l2385:
  2135                           
  2136                           ; BSR set to: 0
  2137  00052C  0E02               	movlw	2
  2138  00052E  0100               	movlb	0	; () banked
  2139  000530  25B5               	addwf	sendData@result& (0+255),w,b
  2140  000532  6E27               	movwf	??_sendData& (0+255),c
  2141  000534  0E00               	movlw	0
  2142  000536  0100               	movlb	0	; () banked
  2143  000538  21B6               	addwfc	(sendData@result+1)& (0+255),w,b
  2144  00053A  6E28               	movwf	(??_sendData+1)& (0+255),c
  2145  00053C  5027               	movf	??_sendData,w,c
  2146  00053E  0100               	movlb	0	; () banked
  2147  000540  5DB8               	subwf	sendData@i& (0+255),w,b
  2148  000542  5028               	movf	??_sendData+1,w,c
  2149  000544  0100               	movlb	0	; () banked
  2150  000546  59B9               	subwfb	(sendData@i+1)& (0+255),w,b
  2151  000548  B0D8               	btfsc	status,0,c
  2152  00054A  0012               	return	
  2153  00054C  D7E1               	goto	l2381
  2154  00054E                     __end_of_sendData:
  2155                           	opt stack 0
  2156                           tblptru	equ	0xFF8
  2157                           tblptrh	equ	0xFF7
  2158                           tblptrl	equ	0xFF6
  2159                           tablat	equ	0xFF5
  2160                           postinc0	equ	0xFEE
  2161                           wreg	equ	0xFE8
  2162                           indf1	equ	0xFE7
  2163                           postdec1	equ	0xFE5
  2164                           fsr1h	equ	0xFE2
  2165                           fsr1l	equ	0xFE1
  2166                           indf2	equ	0xFDF
  2167                           postinc2	equ	0xFDE
  2168                           postdec2	equ	0xFDD
  2169                           fsr2h	equ	0xFDA
  2170                           fsr2l	equ	0xFD9
  2171                           status	equ	0xFD8
  2172                           
  2173 ;; *************** function _cobs_encode *****************
  2174 ;; Defined at:
  2175 ;;		line 29 in file "COBS.c"
  2176 ;; Parameters:    Size  Location     Type
  2177 ;;  dst_buf_ptr     2   26[COMRAM] PTR unsigned char 
  2178 ;;		 -> sendData@COBSArray(30), 
  2179 ;;  dst_buf_len     2   28[COMRAM] unsigned int 
  2180 ;;  src_ptr         2   30[COMRAM] PTR const unsigned char 
  2181 ;;		 -> sendData@SendArray(30), 
  2182 ;;  src_len         2   32[COMRAM] unsigned int 
  2183 ;; Auto vars:     Size  Location     Type
  2184 ;;  result          3   10[BANK0 ] struct .
  2185 ;;  dst_write_pt    2    8[BANK0 ] PTR unsigned char 
  2186 ;;		 -> sendData@COBSArray(30), 
  2187 ;;  dst_code_wri    2    6[BANK0 ] PTR unsigned char 
  2188 ;;		 -> sendData@COBSArray(30), 
  2189 ;;  dst_buf_end_    2    3[BANK0 ] PTR unsigned char 
  2190 ;;		 -> sendData@COBSArray(30), 
  2191 ;;  src_end_ptr     2    0[BANK0 ] PTR const unsigned char 
  2192 ;;		 -> sendData@SendArray(30), 
  2193 ;;  search_len      1    5[BANK0 ] unsigned char 
  2194 ;;  src_byte        1    2[BANK0 ] unsigned char 
  2195 ;; Return value:  Size  Location     Type
  2196 ;;                  3   26[COMRAM] struct .
  2197 ;; Registers used:
  2198 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2199 ;; Tracked objects:
  2200 ;;		On entry : 0/0
  2201 ;;		On exit  : 0/0
  2202 ;;		Unchanged: 0/0
  2203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2204 ;;      Params:         8       0       0       0       0       0       0
  2205 ;;      Locals:         0      13       0       0       0       0       0
  2206 ;;      Temps:          2       0       0       0       0       0       0
  2207 ;;      Totals:        10      13       0       0       0       0       0
  2208 ;;Total ram usage:       23 bytes
  2209 ;; Hardware stack levels used:    1
  2210 ;; Hardware stack levels required when called:    4
  2211 ;; This function calls:
  2212 ;;		Nothing
  2213 ;; This function is called by:
  2214 ;;		_sendData
  2215 ;; This function uses a non-reentrant model
  2216 ;;
  2217                           
  2218                           	psect	text9
  2219  000262                     __ptext9:
  2220                           	opt stack 0
  2221  000262                     _cobs_encode:
  2222                           	opt stack 22
  2223                           
  2224                           ;COBS.c: 31: cobs_encode_result result = { 0, COBS_ENCODE_OK };
  2225                           
  2226                           ; BSR set to: 0
  2227                           ;incstack = 0
  2228  000262  C039  F06A         	movff	cobs_encode@F180,cobs_encode@result
  2229  000266  C03A  F06B         	movff	cobs_encode@F180+1,cobs_encode@result+1
  2230  00026A  C03B  F06C         	movff	cobs_encode@F180+2,cobs_encode@result+2
  2231                           
  2232                           ;COBS.c: 32: const uint8_t * src_end_ptr = src_ptr + src_len;
  2233  00026E  5021               	movf	cobs_encode@src_len,w,c
  2234  000270  241F               	addwf	cobs_encode@src_ptr,w,c
  2235  000272  0100               	movlb	0	; () banked
  2236  000274  6F60               	movwf	cobs_encode@src_end_ptr& (0+255),b
  2237  000276  5022               	movf	cobs_encode@src_len+1,w,c
  2238  000278  2020               	addwfc	cobs_encode@src_ptr+1,w,c
  2239  00027A  0100               	movlb	0	; () banked
  2240  00027C  6F61               	movwf	(cobs_encode@src_end_ptr+1)& (0+255),b
  2241                           
  2242                           ;COBS.c: 33: uint8_t * dst_buf_end_ptr = dst_buf_ptr + dst_buf_len;
  2243  00027E  501D               	movf	cobs_encode@dst_buf_len,w,c
  2244  000280  241B               	addwf	cobs_encode@dst_buf_ptr,w,c
  2245  000282  0100               	movlb	0	; () banked
  2246  000284  6F63               	movwf	cobs_encode@dst_buf_end_ptr& (0+255),b
  2247  000286  501E               	movf	cobs_encode@dst_buf_len+1,w,c
  2248  000288  201C               	addwfc	cobs_encode@dst_buf_ptr+1,w,c
  2249  00028A  0100               	movlb	0	; () banked
  2250  00028C  6F64               	movwf	(cobs_encode@dst_buf_end_ptr+1)& (0+255),b
  2251                           
  2252                           ;COBS.c: 34: uint8_t * dst_code_write_ptr = dst_buf_ptr;
  2253  00028E  C01B  F066         	movff	cobs_encode@dst_buf_ptr,cobs_encode@dst_code_write_ptr
  2254  000292  C01C  F067         	movff	cobs_encode@dst_buf_ptr+1,cobs_encode@dst_code_write_ptr+1
  2255                           
  2256                           ;COBS.c: 35: uint8_t * dst_write_ptr = dst_code_write_ptr + 1;
  2257  000296  0E01               	movlw	1
  2258  000298  0100               	movlb	0	; () banked
  2259  00029A  2566               	addwf	cobs_encode@dst_code_write_ptr& (0+255),w,b
  2260  00029C  0100               	movlb	0	; () banked
  2261  00029E  6F68               	movwf	cobs_encode@dst_write_ptr& (0+255),b
  2262  0002A0  0E00               	movlw	0
  2263  0002A2  0100               	movlb	0	; () banked
  2264  0002A4  2167               	addwfc	(cobs_encode@dst_code_write_ptr+1)& (0+255),w,b
  2265  0002A6  0100               	movlb	0	; () banked
  2266  0002A8  6F69               	movwf	(cobs_encode@dst_write_ptr+1)& (0+255),b
  2267                           
  2268                           ; BSR set to: 0
  2269                           ;COBS.c: 36: uint8_t src_byte = 0;
  2270  0002AA  0E00               	movlw	0
  2271  0002AC  0100               	movlb	0	; () banked
  2272  0002AE  6F62               	movwf	cobs_encode@src_byte& (0+255),b
  2273                           
  2274                           ; BSR set to: 0
  2275                           ;COBS.c: 37: uint8_t search_len = 1;
  2276  0002B0  0E01               	movlw	1
  2277  0002B2  0100               	movlb	0	; () banked
  2278  0002B4  6F65               	movwf	cobs_encode@search_len& (0+255),b
  2279                           
  2280                           ;COBS.c: 41: if ((dst_buf_ptr == (0)) || (src_ptr == (0)))
  2281  0002B6  501B               	movf	cobs_encode@dst_buf_ptr,w,c
  2282  0002B8  101C               	iorwf	cobs_encode@dst_buf_ptr+1,w,c
  2283  0002BA  B4D8               	btfsc	status,2,c
  2284  0002BC  D004               	goto	l2225
  2285                           
  2286                           ; BSR set to: 0
  2287  0002BE  501F               	movf	cobs_encode@src_ptr,w,c
  2288  0002C0  1020               	iorwf	cobs_encode@src_ptr+1,w,c
  2289  0002C2  A4D8               	btfss	status,2,c
  2290  0002C4  D00A               	goto	l2231
  2291  0002C6                     l2225:
  2292                           
  2293                           ; BSR set to: 0
  2294                           ;COBS.c: 42: {
  2295                           ;COBS.c: 43: result.status = COBS_ENCODE_NULL_POINTER;
  2296  0002C6  0E01               	movlw	1
  2297  0002C8  0100               	movlb	0	; () banked
  2298  0002CA  6F6C               	movwf	(cobs_encode@result+2)& (0+255),b
  2299                           
  2300                           ; BSR set to: 0
  2301                           ;COBS.c: 44: return result;
  2302  0002CC  C06A  F01B         	movff	cobs_encode@result,?_cobs_encode
  2303  0002D0  C06B  F01C         	movff	cobs_encode@result+1,?_cobs_encode+1
  2304  0002D4  C06C  F01D         	movff	cobs_encode@result+2,?_cobs_encode+2
  2305                           
  2306                           ; BSR set to: 0
  2307  0002D8  0012               	return	
  2308  0002DA                     l2231:
  2309                           
  2310                           ; BSR set to: 0
  2311                           ;COBS.c: 45: }
  2312                           ;COBS.c: 47: if (src_len != 0)
  2313  0002DA  5021               	movf	cobs_encode@src_len,w,c
  2314  0002DC  1022               	iorwf	cobs_encode@src_len+1,w,c
  2315  0002DE  B4D8               	btfsc	status,2,c
  2316  0002E0  D05C               	goto	l2275
  2317  0002E2                     l2233:
  2318                           
  2319                           ; BSR set to: 0
  2320                           ;COBS.c: 51: {
  2321                           ;COBS.c: 53: if (dst_write_ptr >= dst_buf_end_ptr)
  2322  0002E2  0100               	movlb	0	; () banked
  2323  0002E4  5163               	movf	cobs_encode@dst_buf_end_ptr& (0+255),w,b
  2324  0002E6  0100               	movlb	0	; () banked
  2325  0002E8  5D68               	subwf	cobs_encode@dst_write_ptr& (0+255),w,b
  2326  0002EA  0100               	movlb	0	; () banked
  2327  0002EC  5164               	movf	(cobs_encode@dst_buf_end_ptr+1)& (0+255),w,b
  2328  0002EE  0100               	movlb	0	; () banked
  2329  0002F0  5969               	subwfb	(cobs_encode@dst_write_ptr+1)& (0+255),w,b
  2330  0002F2  A0D8               	btfss	status,0,c
  2331  0002F4  D003               	goto	l2237
  2332                           
  2333                           ; BSR set to: 0
  2334                           ;COBS.c: 54: {
  2335                           ;COBS.c: 55: result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
  2336  0002F6  0100               	movlb	0	; () banked
  2337  0002F8  836C               	bsf	(cobs_encode@result+2)& (0+255),1,b
  2338                           
  2339                           ;COBS.c: 56: break;
  2340  0002FA  D04F               	goto	l2275
  2341  0002FC                     l2237:
  2342                           
  2343                           ; BSR set to: 0
  2344                           ;COBS.c: 57: }
  2345                           ;COBS.c: 59: src_byte = *src_ptr++;
  2346  0002FC  C01F  FFD9         	movff	cobs_encode@src_ptr,fsr2l
  2347  000300  C020  FFDA         	movff	cobs_encode@src_ptr+1,fsr2h
  2348  000304  50DF               	movf	indf2,w,c
  2349  000306  0100               	movlb	0	; () banked
  2350  000308  6F62               	movwf	cobs_encode@src_byte& (0+255),b
  2351                           
  2352                           ; BSR set to: 0
  2353  00030A  4A1F               	infsnz	cobs_encode@src_ptr,f,c
  2354  00030C  2A20               	incf	cobs_encode@src_ptr+1,f,c
  2355                           
  2356                           ; BSR set to: 0
  2357                           ;COBS.c: 60: if (src_byte == 0)
  2358  00030E  0100               	movlb	0	; () banked
  2359  000310  5162               	movf	cobs_encode@src_byte& (0+255),w,b
  2360  000312  0100               	movlb	0	; () banked
  2361  000314  A4D8               	btfss	status,2,c
  2362  000316  D019               	goto	l2255
  2363                           
  2364                           ; BSR set to: 0
  2365                           ;COBS.c: 61: {
  2366                           ;COBS.c: 63: *dst_code_write_ptr = search_len;
  2367  000318  C066  FFD9         	movff	cobs_encode@dst_code_write_ptr,fsr2l
  2368  00031C  C067  FFDA         	movff	cobs_encode@dst_code_write_ptr+1,fsr2h
  2369  000320  C065  FFDF         	movff	cobs_encode@search_len,indf2
  2370                           
  2371                           ; BSR set to: 0
  2372                           ;COBS.c: 64: dst_code_write_ptr = dst_write_ptr++;
  2373  000324  C068  F066         	movff	cobs_encode@dst_write_ptr,cobs_encode@dst_code_write_ptr
  2374  000328  C069  F067         	movff	cobs_encode@dst_write_ptr+1,cobs_encode@dst_code_write_ptr+1
  2375                           
  2376                           ; BSR set to: 0
  2377  00032C  0100               	movlb	0	; () banked
  2378  00032E  4B68               	infsnz	cobs_encode@dst_write_ptr& (0+255),f,b
  2379  000330  2B69               	incf	(cobs_encode@dst_write_ptr+1)& (0+255),f,b
  2380                           
  2381                           ; BSR set to: 0
  2382                           ;COBS.c: 65: search_len = 1;
  2383  000332  0E01               	movlw	1
  2384  000334  0100               	movlb	0	; () banked
  2385  000336  6F65               	movwf	cobs_encode@search_len& (0+255),b
  2386                           
  2387                           ; BSR set to: 0
  2388                           ;COBS.c: 66: if (src_ptr >= src_end_ptr)
  2389  000338  0100               	movlb	0	; () banked
  2390  00033A  5160               	movf	cobs_encode@src_end_ptr& (0+255),w,b
  2391  00033C  5C1F               	subwf	cobs_encode@src_ptr,w,c
  2392  00033E  0100               	movlb	0	; () banked
  2393  000340  5161               	movf	(cobs_encode@src_end_ptr+1)& (0+255),w,b
  2394  000342  5820               	subwfb	cobs_encode@src_ptr+1,w,c
  2395  000344  B0D8               	btfsc	status,0,c
  2396  000346  D029               	goto	l2275
  2397  000348  D7CC               	goto	l2233
  2398  00034A                     l2255:
  2399                           
  2400                           ; BSR set to: 0
  2401                           ;COBS.c: 71: else
  2402                           ;COBS.c: 72: {
  2403                           ;COBS.c: 74: *dst_write_ptr++ = src_byte;
  2404  00034A  C068  FFD9         	movff	cobs_encode@dst_write_ptr,fsr2l
  2405  00034E  C069  FFDA         	movff	cobs_encode@dst_write_ptr+1,fsr2h
  2406  000352  C062  FFDF         	movff	cobs_encode@src_byte,indf2
  2407                           
  2408                           ; BSR set to: 0
  2409  000356  0100               	movlb	0	; () banked
  2410  000358  4B68               	infsnz	cobs_encode@dst_write_ptr& (0+255),f,b
  2411  00035A  2B69               	incf	(cobs_encode@dst_write_ptr+1)& (0+255),f,b
  2412                           
  2413                           ; BSR set to: 0
  2414                           ;COBS.c: 75: search_len++;
  2415  00035C  0100               	movlb	0	; () banked
  2416  00035E  2B65               	incf	cobs_encode@search_len& (0+255),f,b
  2417                           
  2418                           ; BSR set to: 0
  2419                           ;COBS.c: 76: if (src_ptr >= src_end_ptr)
  2420  000360  0100               	movlb	0	; () banked
  2421  000362  5160               	movf	cobs_encode@src_end_ptr& (0+255),w,b
  2422  000364  5C1F               	subwf	cobs_encode@src_ptr,w,c
  2423  000366  0100               	movlb	0	; () banked
  2424  000368  5161               	movf	(cobs_encode@src_end_ptr+1)& (0+255),w,b
  2425  00036A  5820               	subwfb	cobs_encode@src_ptr+1,w,c
  2426  00036C  B0D8               	btfsc	status,0,c
  2427  00036E  D015               	goto	l2275
  2428                           
  2429                           ; BSR set to: 0
  2430                           ;COBS.c: 79: }
  2431                           ;COBS.c: 80: if (search_len == 0xFF)
  2432                           
  2433                           ; BSR set to: 0
  2434                           
  2435                           ; BSR set to: 0
  2436                           ;COBS.c: 77: {
  2437                           ;COBS.c: 78: break;
  2438  000370  0100               	movlb	0	; () banked
  2439  000372  2965               	incf	cobs_encode@search_len& (0+255),w,b
  2440  000374  A4D8               	btfss	status,2,c
  2441  000376  D7B5               	goto	l2233
  2442                           
  2443                           ; BSR set to: 0
  2444                           ;COBS.c: 81: {
  2445                           ;COBS.c: 84: *dst_code_write_ptr = search_len;
  2446  000378  C066  FFD9         	movff	cobs_encode@dst_code_write_ptr,fsr2l
  2447  00037C  C067  FFDA         	movff	cobs_encode@dst_code_write_ptr+1,fsr2h
  2448  000380  C065  FFDF         	movff	cobs_encode@search_len,indf2
  2449                           
  2450                           ; BSR set to: 0
  2451                           ;COBS.c: 85: dst_code_write_ptr = dst_write_ptr++;
  2452  000384  C068  F066         	movff	cobs_encode@dst_write_ptr,cobs_encode@dst_code_write_ptr
  2453  000388  C069  F067         	movff	cobs_encode@dst_write_ptr+1,cobs_encode@dst_code_write_ptr+1
  2454                           
  2455                           ; BSR set to: 0
  2456  00038C  0100               	movlb	0	; () banked
  2457  00038E  4B68               	infsnz	cobs_encode@dst_write_ptr& (0+255),f,b
  2458  000390  2B69               	incf	(cobs_encode@dst_write_ptr+1)& (0+255),f,b
  2459                           
  2460                           ; BSR set to: 0
  2461                           ;COBS.c: 86: search_len = 1;
  2462  000392  0E01               	movlw	1
  2463  000394  0100               	movlb	0	; () banked
  2464  000396  6F65               	movwf	cobs_encode@search_len& (0+255),b
  2465                           
  2466                           ; BSR set to: 0
  2467                           ;COBS.c: 87: }
  2468                           ;COBS.c: 88: }
  2469                           ;COBS.c: 89: }
  2470                           
  2471                           ; BSR set to: 0
  2472  000398  D7A4               	goto	l2233
  2473  00039A                     l2275:
  2474                           
  2475                           ; BSR set to: 0
  2476                           ;COBS.c: 90: }
  2477                           ;COBS.c: 96: if (dst_code_write_ptr >= dst_buf_end_ptr)
  2478  00039A  0100               	movlb	0	; () banked
  2479  00039C  5163               	movf	cobs_encode@dst_buf_end_ptr& (0+255),w,b
  2480  00039E  0100               	movlb	0	; () banked
  2481  0003A0  5D66               	subwf	cobs_encode@dst_code_write_ptr& (0+255),w,b
  2482  0003A2  0100               	movlb	0	; () banked
  2483  0003A4  5164               	movf	(cobs_encode@dst_buf_end_ptr+1)& (0+255),w,b
  2484  0003A6  0100               	movlb	0	; () banked
  2485  0003A8  5967               	subwfb	(cobs_encode@dst_code_write_ptr+1)& (0+255),w,b
  2486  0003AA  A0D8               	btfss	status,0,c
  2487  0003AC  D007               	goto	l2281
  2488                           
  2489                           ; BSR set to: 0
  2490                           ;COBS.c: 97: {
  2491                           ;COBS.c: 99: result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
  2492  0003AE  0100               	movlb	0	; () banked
  2493  0003B0  836C               	bsf	(cobs_encode@result+2)& (0+255),1,b
  2494                           
  2495                           ; BSR set to: 0
  2496                           ;COBS.c: 100: dst_write_ptr = dst_buf_end_ptr;
  2497  0003B2  C063  F068         	movff	cobs_encode@dst_buf_end_ptr,cobs_encode@dst_write_ptr
  2498  0003B6  C064  F069         	movff	cobs_encode@dst_buf_end_ptr+1,cobs_encode@dst_write_ptr+1
  2499                           
  2500                           ;COBS.c: 101: }
  2501  0003BA  D006               	goto	l2283
  2502  0003BC                     l2281:
  2503                           
  2504                           ; BSR set to: 0
  2505                           ;COBS.c: 102: else
  2506                           ;COBS.c: 103: {
  2507                           ;COBS.c: 105: *dst_code_write_ptr = search_len;
  2508  0003BC  C066  FFD9         	movff	cobs_encode@dst_code_write_ptr,fsr2l
  2509  0003C0  C067  FFDA         	movff	cobs_encode@dst_code_write_ptr+1,fsr2h
  2510  0003C4  C065  FFDF         	movff	cobs_encode@search_len,indf2
  2511  0003C8                     l2283:
  2512                           
  2513                           ; BSR set to: 0
  2514                           ;COBS.c: 106: }
  2515                           ;COBS.c: 109: result.out_len = dst_write_ptr - dst_buf_ptr;
  2516  0003C8  C01B  F023         	movff	cobs_encode@dst_buf_ptr,??_cobs_encode
  2517  0003CC  C01C  F024         	movff	cobs_encode@dst_buf_ptr+1,??_cobs_encode+1
  2518  0003D0  1E23               	comf	??_cobs_encode,f,c
  2519  0003D2  1E24               	comf	??_cobs_encode+1,f,c
  2520  0003D4  4A23               	infsnz	??_cobs_encode,f,c
  2521  0003D6  2A24               	incf	??_cobs_encode+1,f,c
  2522  0003D8  0100               	movlb	0	; () banked
  2523  0003DA  5168               	movf	cobs_encode@dst_write_ptr& (0+255),w,b
  2524  0003DC  2423               	addwf	??_cobs_encode,w,c
  2525  0003DE  0100               	movlb	0	; () banked
  2526  0003E0  6F6A               	movwf	cobs_encode@result& (0+255),b
  2527  0003E2  0100               	movlb	0	; () banked
  2528  0003E4  5169               	movf	(cobs_encode@dst_write_ptr+1)& (0+255),w,b
  2529  0003E6  2024               	addwfc	??_cobs_encode+1,w,c
  2530  0003E8  0100               	movlb	0	; () banked
  2531  0003EA  6F6B               	movwf	(cobs_encode@result+1)& (0+255),b
  2532                           
  2533                           ; BSR set to: 0
  2534                           ;COBS.c: 111: return result;
  2535  0003EC  C06A  F01B         	movff	cobs_encode@result,?_cobs_encode
  2536  0003F0  C06B  F01C         	movff	cobs_encode@result+1,?_cobs_encode+1
  2537  0003F4  C06C  F01D         	movff	cobs_encode@result+2,?_cobs_encode+2
  2538  0003F8  0012               	return	
  2539  0003FA                     __end_of_cobs_encode:
  2540                           	opt stack 0
  2541                           tblptru	equ	0xFF8
  2542                           tblptrh	equ	0xFF7
  2543                           tblptrl	equ	0xFF6
  2544                           tablat	equ	0xFF5
  2545                           postinc0	equ	0xFEE
  2546                           wreg	equ	0xFE8
  2547                           indf1	equ	0xFE7
  2548                           postdec1	equ	0xFE5
  2549                           fsr1h	equ	0xFE2
  2550                           fsr1l	equ	0xFE1
  2551                           indf2	equ	0xFDF
  2552                           postinc2	equ	0xFDE
  2553                           postdec2	equ	0xFDD
  2554                           fsr2h	equ	0xFDA
  2555                           fsr2l	equ	0xFD9
  2556                           status	equ	0xFD8
  2557                           
  2558 ;; *************** function _Send_put *****************
  2559 ;; Defined at:
  2560 ;;		line 129 in file "UART.c"
  2561 ;; Parameters:    Size  Location     Type
  2562 ;;  _data           1    wreg     unsigned char 
  2563 ;; Auto vars:     Size  Location     Type
  2564 ;;  _data           1   37[COMRAM] unsigned char 
  2565 ;; Return value:  Size  Location     Type
  2566 ;;                  1    wreg      void 
  2567 ;; Registers used:
  2568 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2569 ;; Tracked objects:
  2570 ;;		On entry : 0/0
  2571 ;;		On exit  : 0/0
  2572 ;;		Unchanged: 0/0
  2573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2574 ;;      Params:         0       0       0       0       0       0       0
  2575 ;;      Locals:         1       0       0       0       0       0       0
  2576 ;;      Temps:          0       0       0       0       0       0       0
  2577 ;;      Totals:         1       0       0       0       0       0       0
  2578 ;;Total ram usage:        1 bytes
  2579 ;; Hardware stack levels used:    1
  2580 ;; Hardware stack levels required when called:    6
  2581 ;; This function calls:
  2582 ;;		_UART_buff_get
  2583 ;;		_UART_buff_put
  2584 ;; This function is called by:
  2585 ;;		_sendData
  2586 ;;		_putch
  2587 ;; This function uses a non-reentrant model
  2588 ;;
  2589                           
  2590                           	psect	text10
  2591  000DD2                     __ptext10:
  2592                           	opt stack 0
  2593  000DD2                     _Send_put:
  2594                           	opt stack 20
  2595                           
  2596                           ; BSR set to: 0
  2597                           ;incstack = 0
  2598                           ;Send_put@_data stored from wreg
  2599  000DD2  6E26               	movwf	Send_put@_data,c
  2600                           
  2601                           ;UART.c: 130: UART_buff_put(&output_buffer, _data);
  2602  000DD4  0E00               	movlw	low _output_buffer
  2603  000DD6  6E21               	movwf	UART_buff_put@_this,c
  2604  000DD8  0E01               	movlw	high _output_buffer
  2605  000DDA  6E22               	movwf	UART_buff_put@_this+1,c
  2606  000DDC  C026  F023         	movff	Send_put@_data,UART_buff_put@c
  2607  000DE0  ECA7  F002         	call	_UART_buff_put	;wreg free
  2608                           
  2609                           ;UART.c: 131: if (Transmit_stall == 1) {
  2610  000DE4  0444               	decf	_Transmit_stall,w,c
  2611  000DE6  A4D8               	btfss	status,2,c
  2612  000DE8  0012               	return	
  2613                           
  2614                           ;UART.c: 132: Transmit_stall = 0;
  2615  000DEA  0E00               	movlw	0
  2616  000DEC  6E44               	movwf	_Transmit_stall,c
  2617                           
  2618                           ;UART.c: 133: TXREG1 = UART_buff_get(&output_buffer);
  2619  000DEE  0E00               	movlw	low _output_buffer
  2620  000DF0  6E21               	movwf	UART_buff_get@_this,c
  2621  000DF2  0E01               	movlw	high _output_buffer
  2622  000DF4  6E22               	movwf	UART_buff_get@_this+1,c
  2623  000DF6  EC36  F005         	call	_UART_buff_get	;wreg free
  2624  000DFA  6EAD               	movwf	4013,c	;volatile
  2625                           
  2626                           ;UART.c: 134: PIE1bits.TX1IE = 1;
  2627  000DFC  889D               	bsf	3997,4,c	;volatile
  2628  000DFE  0012               	return	
  2629  000E00                     __end_of_Send_put:
  2630                           	opt stack 0
  2631                           tblptru	equ	0xFF8
  2632                           tblptrh	equ	0xFF7
  2633                           tblptrl	equ	0xFF6
  2634                           tablat	equ	0xFF5
  2635                           postinc0	equ	0xFEE
  2636                           wreg	equ	0xFE8
  2637                           indf1	equ	0xFE7
  2638                           postdec1	equ	0xFE5
  2639                           fsr1h	equ	0xFE2
  2640                           fsr1l	equ	0xFE1
  2641                           indf2	equ	0xFDF
  2642                           postinc2	equ	0xFDE
  2643                           postdec2	equ	0xFDD
  2644                           fsr2h	equ	0xFDA
  2645                           fsr2l	equ	0xFD9
  2646                           status	equ	0xFD8
  2647                           
  2648 ;; *************** function _UART_buff_put *****************
  2649 ;; Defined at:
  2650 ;;		line 67 in file "UART.c"
  2651 ;; Parameters:    Size  Location     Type
  2652 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  2653 ;;		 -> output_buffer(106), input_buffer(106), 
  2654 ;;  c               1   34[COMRAM] const unsigned char 
  2655 ;; Auto vars:     Size  Location     Type
  2656 ;;		None
  2657 ;; Return value:  Size  Location     Type
  2658 ;;                  1    wreg      void 
  2659 ;; Registers used:
  2660 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2661 ;; Tracked objects:
  2662 ;;		On entry : 0/0
  2663 ;;		On exit  : 0/0
  2664 ;;		Unchanged: 0/0
  2665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2666 ;;      Params:         3       0       0       0       0       0       0
  2667 ;;      Locals:         0       0       0       0       0       0       0
  2668 ;;      Temps:          2       0       0       0       0       0       0
  2669 ;;      Totals:         5       0       0       0       0       0       0
  2670 ;;Total ram usage:        5 bytes
  2671 ;; Hardware stack levels used:    1
  2672 ;; Hardware stack levels required when called:    5
  2673 ;; This function calls:
  2674 ;;		_UART_buff_modulo_inc
  2675 ;; This function is called by:
  2676 ;;		_Send_put
  2677 ;; This function uses a non-reentrant model
  2678 ;;
  2679                           
  2680                           	psect	text11
  2681  00054E                     __ptext11:
  2682                           	opt stack 0
  2683  00054E                     _UART_buff_put:
  2684                           	opt stack 20
  2685                           
  2686                           ;UART.c: 68: if (_this->count < 100) {
  2687                           
  2688                           ;incstack = 0
  2689  00054E  EE20 F068          	lfsr	2,104
  2690  000552  5021               	movf	UART_buff_put@_this,w,c
  2691  000554  26D9               	addwf	fsr2l,f,c
  2692  000556  5022               	movf	UART_buff_put@_this+1,w,c
  2693  000558  22DA               	addwfc	fsr2h,f,c
  2694  00055A  0E01               	movlw	1
  2695  00055C  BEDB               	btfsc	plusw2,7,c
  2696  00055E  D007               	goto	l2181
  2697  000560  0E01               	movlw	1
  2698  000562  50DB               	movf	plusw2,w,c
  2699  000564  E13A               	bnz	l2187
  2700  000566  0E64               	movlw	100
  2701  000568  5CDE               	subwf	postinc2,w,c
  2702  00056A  B0D8               	btfsc	status,0,c
  2703  00056C  D036               	goto	l2187
  2704  00056E                     l2181:
  2705                           
  2706                           ;UART.c: 69: _this->buf[_this->head] = c;
  2707  00056E  EE20 F064          	lfsr	2,100
  2708  000572  5021               	movf	UART_buff_put@_this,w,c
  2709  000574  26D9               	addwf	fsr2l,f,c
  2710  000576  5022               	movf	UART_buff_put@_this+1,w,c
  2711  000578  22DA               	addwfc	fsr2h,f,c
  2712  00057A  CFDE F024          	movff	postinc2,??_UART_buff_put
  2713  00057E  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  2714  000582  5024               	movf	??_UART_buff_put,w,c
  2715  000584  2421               	addwf	UART_buff_put@_this,w,c
  2716  000586  6ED9               	movwf	fsr2l,c
  2717  000588  5025               	movf	??_UART_buff_put+1,w,c
  2718  00058A  2022               	addwfc	UART_buff_put@_this+1,w,c
  2719  00058C  6EDA               	movwf	fsr2h,c
  2720  00058E  C023  FFDF         	movff	UART_buff_put@c,indf2
  2721                           
  2722                           ;UART.c: 70: _this->head = UART_buff_modulo_inc(_this->head, 100);
  2723  000592  EE20 F064          	lfsr	2,100
  2724  000596  5021               	movf	UART_buff_put@_this,w,c
  2725  000598  26D9               	addwf	fsr2l,f,c
  2726  00059A  5022               	movf	UART_buff_put@_this+1,w,c
  2727  00059C  22DA               	addwfc	fsr2h,f,c
  2728  00059E  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  2729  0005A2  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  2730  0005A6  0E00               	movlw	0
  2731  0005A8  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  2732  0005AA  0E64               	movlw	100
  2733  0005AC  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  2734  0005AE  EC2C  F007         	call	_UART_buff_modulo_inc	;wreg free
  2735  0005B2  EE20 F064          	lfsr	2,100
  2736  0005B6  5021               	movf	UART_buff_put@_this,w,c
  2737  0005B8  26D9               	addwf	fsr2l,f,c
  2738  0005BA  5022               	movf	UART_buff_put@_this+1,w,c
  2739  0005BC  22DA               	addwfc	fsr2h,f,c
  2740  0005BE  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  2741  0005C2  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  2742                           
  2743                           ;UART.c: 71: ++_this->count;
  2744  0005C6  EE20 F068          	lfsr	2,104
  2745  0005CA  5021               	movf	UART_buff_put@_this,w,c
  2746  0005CC  26D9               	addwf	fsr2l,f,c
  2747  0005CE  5022               	movf	UART_buff_put@_this+1,w,c
  2748  0005D0  22DA               	addwfc	fsr2h,f,c
  2749  0005D2  2ADE               	incf	postinc2,f,c
  2750  0005D4  0E00               	movlw	0
  2751  0005D6  22DD               	addwfc	postdec2,f,c
  2752                           
  2753                           ;UART.c: 72: } else {
  2754  0005D8  0012               	return	
  2755  0005DA                     l2187:
  2756                           
  2757                           ;UART.c: 73: _this->buf[_this->head] = c;
  2758  0005DA  EE20 F064          	lfsr	2,100
  2759  0005DE  5021               	movf	UART_buff_put@_this,w,c
  2760  0005E0  26D9               	addwf	fsr2l,f,c
  2761  0005E2  5022               	movf	UART_buff_put@_this+1,w,c
  2762  0005E4  22DA               	addwfc	fsr2h,f,c
  2763  0005E6  CFDE F024          	movff	postinc2,??_UART_buff_put
  2764  0005EA  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  2765  0005EE  5024               	movf	??_UART_buff_put,w,c
  2766  0005F0  2421               	addwf	UART_buff_put@_this,w,c
  2767  0005F2  6ED9               	movwf	fsr2l,c
  2768  0005F4  5025               	movf	??_UART_buff_put+1,w,c
  2769  0005F6  2022               	addwfc	UART_buff_put@_this+1,w,c
  2770  0005F8  6EDA               	movwf	fsr2h,c
  2771  0005FA  C023  FFDF         	movff	UART_buff_put@c,indf2
  2772                           
  2773                           ;UART.c: 74: _this->head = UART_buff_modulo_inc(_this->head, 100);
  2774  0005FE  EE20 F064          	lfsr	2,100
  2775  000602  5021               	movf	UART_buff_put@_this,w,c
  2776  000604  26D9               	addwf	fsr2l,f,c
  2777  000606  5022               	movf	UART_buff_put@_this+1,w,c
  2778  000608  22DA               	addwfc	fsr2h,f,c
  2779  00060A  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  2780  00060E  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  2781  000612  0E00               	movlw	0
  2782  000614  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  2783  000616  0E64               	movlw	100
  2784  000618  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  2785  00061A  EC2C  F007         	call	_UART_buff_modulo_inc	;wreg free
  2786  00061E  EE20 F064          	lfsr	2,100
  2787  000622  5021               	movf	UART_buff_put@_this,w,c
  2788  000624  26D9               	addwf	fsr2l,f,c
  2789  000626  5022               	movf	UART_buff_put@_this+1,w,c
  2790  000628  22DA               	addwfc	fsr2h,f,c
  2791  00062A  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  2792  00062E  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  2793                           
  2794                           ;UART.c: 75: _this->tail = UART_buff_modulo_inc(_this->tail, 100);
  2795  000632  EE20 F066          	lfsr	2,102
  2796  000636  5021               	movf	UART_buff_put@_this,w,c
  2797  000638  26D9               	addwf	fsr2l,f,c
  2798  00063A  5022               	movf	UART_buff_put@_this+1,w,c
  2799  00063C  22DA               	addwfc	fsr2h,f,c
  2800  00063E  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  2801  000642  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  2802  000646  0E00               	movlw	0
  2803  000648  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  2804  00064A  0E64               	movlw	100
  2805  00064C  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  2806  00064E  EC2C  F007         	call	_UART_buff_modulo_inc	;wreg free
  2807  000652  EE20 F066          	lfsr	2,102
  2808  000656  5021               	movf	UART_buff_put@_this,w,c
  2809  000658  26D9               	addwf	fsr2l,f,c
  2810  00065A  5022               	movf	UART_buff_put@_this+1,w,c
  2811  00065C  22DA               	addwfc	fsr2h,f,c
  2812  00065E  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  2813  000662  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  2814  000666  0012               	return	
  2815  000668                     __end_of_UART_buff_put:
  2816                           	opt stack 0
  2817                           tblptru	equ	0xFF8
  2818                           tblptrh	equ	0xFF7
  2819                           tblptrl	equ	0xFF6
  2820                           tablat	equ	0xFF5
  2821                           postinc0	equ	0xFEE
  2822                           wreg	equ	0xFE8
  2823                           indf1	equ	0xFE7
  2824                           postdec1	equ	0xFE5
  2825                           fsr1h	equ	0xFE2
  2826                           fsr1l	equ	0xFE1
  2827                           indf2	equ	0xFDF
  2828                           postinc2	equ	0xFDE
  2829                           postdec2	equ	0xFDD
  2830                           plusw2	equ	0xFDB
  2831                           fsr2h	equ	0xFDA
  2832                           fsr2l	equ	0xFD9
  2833                           status	equ	0xFD8
  2834                           
  2835 ;; *************** function _UART_buff_get *****************
  2836 ;; Defined at:
  2837 ;;		line 80 in file "UART.c"
  2838 ;; Parameters:    Size  Location     Type
  2839 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  2840 ;;		 -> output_buffer(106), input_buffer(106), 
  2841 ;; Auto vars:     Size  Location     Type
  2842 ;;  c               1   36[COMRAM] unsigned char 
  2843 ;; Return value:  Size  Location     Type
  2844 ;;                  1    wreg      unsigned char 
  2845 ;; Registers used:
  2846 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2847 ;; Tracked objects:
  2848 ;;		On entry : 0/0
  2849 ;;		On exit  : 0/0
  2850 ;;		Unchanged: 0/0
  2851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2852 ;;      Params:         2       0       0       0       0       0       0
  2853 ;;      Locals:         1       0       0       0       0       0       0
  2854 ;;      Temps:          2       0       0       0       0       0       0
  2855 ;;      Totals:         5       0       0       0       0       0       0
  2856 ;;Total ram usage:        5 bytes
  2857 ;; Hardware stack levels used:    1
  2858 ;; Hardware stack levels required when called:    5
  2859 ;; This function calls:
  2860 ;;		_UART_buff_modulo_inc
  2861 ;; This function is called by:
  2862 ;;		_Receive_get
  2863 ;;		_Send_put
  2864 ;; This function uses a non-reentrant model
  2865 ;;
  2866                           
  2867                           	psect	text12
  2868  000A6C                     __ptext12:
  2869                           	opt stack 0
  2870  000A6C                     _UART_buff_get:
  2871                           	opt stack 22
  2872                           
  2873                           ;UART.c: 81: unsigned char c;
  2874                           ;UART.c: 82: if (_this->count > 0) {
  2875                           
  2876                           ;incstack = 0
  2877  000A6C  EE20 F068          	lfsr	2,104
  2878  000A70  5021               	movf	UART_buff_get@_this,w,c
  2879  000A72  26D9               	addwf	fsr2l,f,c
  2880  000A74  5022               	movf	UART_buff_get@_this+1,w,c
  2881  000A76  22DA               	addwfc	fsr2h,f,c
  2882  000A78  0E01               	movlw	1
  2883  000A7A  BEDB               	btfsc	plusw2,7,c
  2884  000A7C  D03C               	goto	l2201
  2885  000A7E  0E01               	movlw	1
  2886  000A80  50DB               	movf	plusw2,w,c
  2887  000A82  E103               	bnz	u1210
  2888  000A84  04DE               	decf	postinc2,w,c
  2889  000A86  A0D8               	btfss	status,0,c
  2890  000A88  D036               	goto	l2201
  2891  000A8A                     u1210:
  2892                           
  2893                           ;UART.c: 83: c = _this->buf[_this->tail];
  2894  000A8A  EE20 F066          	lfsr	2,102
  2895  000A8E  5021               	movf	UART_buff_get@_this,w,c
  2896  000A90  26D9               	addwf	fsr2l,f,c
  2897  000A92  5022               	movf	UART_buff_get@_this+1,w,c
  2898  000A94  22DA               	addwfc	fsr2h,f,c
  2899  000A96  CFDE F023          	movff	postinc2,??_UART_buff_get
  2900  000A9A  CFDD F024          	movff	postdec2,??_UART_buff_get+1
  2901  000A9E  5023               	movf	??_UART_buff_get,w,c
  2902  000AA0  2421               	addwf	UART_buff_get@_this,w,c
  2903  000AA2  6ED9               	movwf	fsr2l,c
  2904  000AA4  5024               	movf	??_UART_buff_get+1,w,c
  2905  000AA6  2022               	addwfc	UART_buff_get@_this+1,w,c
  2906  000AA8  6EDA               	movwf	fsr2h,c
  2907  000AAA  50DF               	movf	indf2,w,c
  2908  000AAC  6E25               	movwf	UART_buff_get@c,c
  2909                           
  2910                           ;UART.c: 84: _this->tail = UART_buff_modulo_inc(_this->tail, 100);
  2911  000AAE  EE20 F066          	lfsr	2,102
  2912  000AB2  5021               	movf	UART_buff_get@_this,w,c
  2913  000AB4  26D9               	addwf	fsr2l,f,c
  2914  000AB6  5022               	movf	UART_buff_get@_this+1,w,c
  2915  000AB8  22DA               	addwfc	fsr2h,f,c
  2916  000ABA  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  2917  000ABE  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  2918  000AC2  0E00               	movlw	0
  2919  000AC4  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  2920  000AC6  0E64               	movlw	100
  2921  000AC8  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  2922  000ACA  EC2C  F007         	call	_UART_buff_modulo_inc	;wreg free
  2923  000ACE  EE20 F066          	lfsr	2,102
  2924  000AD2  5021               	movf	UART_buff_get@_this,w,c
  2925  000AD4  26D9               	addwf	fsr2l,f,c
  2926  000AD6  5022               	movf	UART_buff_get@_this+1,w,c
  2927  000AD8  22DA               	addwfc	fsr2h,f,c
  2928  000ADA  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  2929  000ADE  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  2930                           
  2931                           ;UART.c: 85: --_this->count;
  2932  000AE2  EE20 F068          	lfsr	2,104
  2933  000AE6  5021               	movf	UART_buff_get@_this,w,c
  2934  000AE8  26D9               	addwf	fsr2l,f,c
  2935  000AEA  5022               	movf	UART_buff_get@_this+1,w,c
  2936  000AEC  22DA               	addwfc	fsr2h,f,c
  2937  000AEE  06DE               	decf	postinc2,f,c
  2938  000AF0  0E00               	movlw	0
  2939  000AF2  5ADD               	subwfb	postdec2,f,c
  2940                           
  2941                           ;UART.c: 86: } else {
  2942  000AF4  D002               	goto	l94
  2943  000AF6                     l2201:
  2944                           
  2945                           ;UART.c: 87: c = 0;
  2946  000AF6  0E00               	movlw	0
  2947  000AF8  6E25               	movwf	UART_buff_get@c,c
  2948  000AFA                     l94:
  2949                           
  2950                           ;UART.c: 88: }
  2951                           ;UART.c: 89: return (c);
  2952  000AFA  5025               	movf	UART_buff_get@c,w,c
  2953  000AFC  0012               	return	
  2954  000AFE                     __end_of_UART_buff_get:
  2955                           	opt stack 0
  2956                           tblptru	equ	0xFF8
  2957                           tblptrh	equ	0xFF7
  2958                           tblptrl	equ	0xFF6
  2959                           tablat	equ	0xFF5
  2960                           postinc0	equ	0xFEE
  2961                           wreg	equ	0xFE8
  2962                           indf1	equ	0xFE7
  2963                           postdec1	equ	0xFE5
  2964                           fsr1h	equ	0xFE2
  2965                           fsr1l	equ	0xFE1
  2966                           indf2	equ	0xFDF
  2967                           postinc2	equ	0xFDE
  2968                           postdec2	equ	0xFDD
  2969                           plusw2	equ	0xFDB
  2970                           fsr2h	equ	0xFDA
  2971                           fsr2l	equ	0xFD9
  2972                           status	equ	0xFD8
  2973                           
  2974 ;; *************** function _UART_buff_modulo_inc *****************
  2975 ;; Defined at:
  2976 ;;		line 105 in file "UART.c"
  2977 ;; Parameters:    Size  Location     Type
  2978 ;;  value           2   26[COMRAM] const unsigned int 
  2979 ;;  modulus         2   28[COMRAM] const unsigned int 
  2980 ;; Auto vars:     Size  Location     Type
  2981 ;;  my_value        2   30[COMRAM] unsigned int 
  2982 ;; Return value:  Size  Location     Type
  2983 ;;                  2   26[COMRAM] unsigned int 
  2984 ;; Registers used:
  2985 ;;		wreg, status,2, status,0
  2986 ;; Tracked objects:
  2987 ;;		On entry : 0/0
  2988 ;;		On exit  : 0/0
  2989 ;;		Unchanged: 0/0
  2990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2991 ;;      Params:         4       0       0       0       0       0       0
  2992 ;;      Locals:         2       0       0       0       0       0       0
  2993 ;;      Temps:          0       0       0       0       0       0       0
  2994 ;;      Totals:         6       0       0       0       0       0       0
  2995 ;;Total ram usage:        6 bytes
  2996 ;; Hardware stack levels used:    1
  2997 ;; Hardware stack levels required when called:    4
  2998 ;; This function calls:
  2999 ;;		Nothing
  3000 ;; This function is called by:
  3001 ;;		_UART_buff_put
  3002 ;;		_UART_buff_get
  3003 ;; This function uses a non-reentrant model
  3004 ;;
  3005                           
  3006                           	psect	text13
  3007  000E58                     __ptext13:
  3008                           	opt stack 0
  3009  000E58                     _UART_buff_modulo_inc:
  3010                           	opt stack 22
  3011                           
  3012                           ;UART.c: 106: unsigned int my_value = value + 1;
  3013                           
  3014                           ;incstack = 0
  3015  000E58  0E01               	movlw	1
  3016  000E5A  241B               	addwf	UART_buff_modulo_inc@value,w,c
  3017  000E5C  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  3018  000E5E  0E00               	movlw	0
  3019  000E60  201C               	addwfc	UART_buff_modulo_inc@value+1,w,c
  3020  000E62  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  3021                           
  3022                           ;UART.c: 107: if (my_value >= modulus) {
  3023  000E64  501D               	movf	UART_buff_modulo_inc@modulus,w,c
  3024  000E66  5C1F               	subwf	UART_buff_modulo_inc@my_value,w,c
  3025  000E68  501E               	movf	UART_buff_modulo_inc@modulus+1,w,c
  3026  000E6A  5820               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  3027  000E6C  A0D8               	btfss	status,0,c
  3028  000E6E  D004               	goto	l2175
  3029                           
  3030                           ;UART.c: 108: my_value = 0;
  3031  000E70  0E00               	movlw	0
  3032  000E72  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  3033  000E74  0E00               	movlw	0
  3034  000E76  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  3035  000E78                     l2175:
  3036                           
  3037                           ;UART.c: 109: }
  3038                           ;UART.c: 110: return (my_value);
  3039  000E78  C01F  F01B         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  3040  000E7C  C020  F01C         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  3041  000E80  0012               	return	
  3042  000E82                     __end_of_UART_buff_modulo_inc:
  3043                           	opt stack 0
  3044                           tblptru	equ	0xFF8
  3045                           tblptrh	equ	0xFF7
  3046                           tblptrl	equ	0xFF6
  3047                           tablat	equ	0xFF5
  3048                           postinc0	equ	0xFEE
  3049                           wreg	equ	0xFE8
  3050                           indf1	equ	0xFE7
  3051                           postdec1	equ	0xFE5
  3052                           fsr1h	equ	0xFE2
  3053                           fsr1l	equ	0xFE1
  3054                           indf2	equ	0xFDF
  3055                           postinc2	equ	0xFDE
  3056                           postdec2	equ	0xFDD
  3057                           plusw2	equ	0xFDB
  3058                           fsr2h	equ	0xFDA
  3059                           fsr2l	equ	0xFD9
  3060                           status	equ	0xFD8
  3061                           
  3062 ;; *************** function _CRC8 *****************
  3063 ;; Defined at:
  3064 ;;		line 21 in file "CarCom.c"
  3065 ;; Parameters:    Size  Location     Type
  3066 ;;  data            2   26[COMRAM] PTR const unsigned char 
  3067 ;;		 -> ProcessArray(30), sendData@SendArray(30), 
  3068 ;;  len             1   28[COMRAM] unsigned char 
  3069 ;; Auto vars:     Size  Location     Type
  3070 ;;  sum             1   29[COMRAM] unsigned char 
  3071 ;;  tempI           1   31[COMRAM] unsigned char 
  3072 ;;  extract         1   30[COMRAM] unsigned char 
  3073 ;;  crc             1   32[COMRAM] unsigned char 
  3074 ;; Return value:  Size  Location     Type
  3075 ;;                  1    wreg      unsigned char 
  3076 ;; Registers used:
  3077 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3078 ;; Tracked objects:
  3079 ;;		On entry : 0/0
  3080 ;;		On exit  : 0/0
  3081 ;;		Unchanged: 0/0
  3082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3083 ;;      Params:         3       0       0       0       0       0       0
  3084 ;;      Locals:         4       0       0       0       0       0       0
  3085 ;;      Temps:          0       0       0       0       0       0       0
  3086 ;;      Totals:         7       0       0       0       0       0       0
  3087 ;;Total ram usage:        7 bytes
  3088 ;; Hardware stack levels used:    1
  3089 ;; Hardware stack levels required when called:    4
  3090 ;; This function calls:
  3091 ;;		Nothing
  3092 ;; This function is called by:
  3093 ;;		_sendData
  3094 ;;		_receiveData
  3095 ;; This function uses a non-reentrant model
  3096 ;;
  3097                           
  3098                           	psect	text14
  3099  000CE6                     __ptext14:
  3100                           	opt stack 0
  3101  000CE6                     _CRC8:
  3102                           	opt stack 22
  3103                           
  3104                           ;CarCom.c: 22: unsigned char crc = 0x00;
  3105                           
  3106                           ;incstack = 0
  3107  000CE6  0E00               	movlw	0
  3108  000CE8  6E21               	movwf	CRC8@crc,c
  3109                           
  3110                           ;CarCom.c: 23: while (len--) {
  3111  000CEA  D01C               	goto	l2307
  3112  000CEC                     l2291:
  3113                           
  3114                           ;CarCom.c: 24: unsigned char extract = *data++;
  3115  000CEC  C01B  FFD9         	movff	CRC8@data,fsr2l
  3116  000CF0  C01C  FFDA         	movff	CRC8@data+1,fsr2h
  3117  000CF4  50DF               	movf	indf2,w,c
  3118  000CF6  6E1F               	movwf	CRC8@extract,c
  3119  000CF8  4A1B               	infsnz	CRC8@data,f,c
  3120  000CFA  2A1C               	incf	CRC8@data+1,f,c
  3121                           
  3122                           ;CarCom.c: 25: unsigned char tempI;
  3123                           ;CarCom.c: 26: for (tempI = 8; tempI; tempI--) {
  3124  000CFC  0E08               	movlw	8
  3125  000CFE  6E20               	movwf	CRC8@tempI,c
  3126  000D00  D00E               	goto	l2305
  3127  000D02                     l2297:
  3128                           
  3129                           ;CarCom.c: 27: unsigned char sum = (crc ^ extract) & 0x01;
  3130  000D02  5021               	movf	CRC8@crc,w,c
  3131  000D04  181F               	xorwf	CRC8@extract,w,c
  3132  000D06  0B01               	andlw	1
  3133  000D08  6E1E               	movwf	CRC8@sum,c
  3134                           
  3135                           ;CarCom.c: 28: crc >>= 1;
  3136  000D0A  90D8               	bcf	status,0,c
  3137  000D0C  3221               	rrcf	CRC8@crc,f,c
  3138                           
  3139                           ;CarCom.c: 29: if (sum) {
  3140  000D0E  501E               	movf	CRC8@sum,w,c
  3141  000D10  B4D8               	btfsc	status,2,c
  3142  000D12  D002               	goto	l391
  3143                           
  3144                           ;CarCom.c: 30: crc ^= 0x8C;
  3145  000D14  0E8C               	movlw	140
  3146  000D16  1A21               	xorwf	CRC8@crc,f,c
  3147  000D18                     l391:
  3148                           
  3149                           ;CarCom.c: 31: }
  3150                           ;CarCom.c: 32: extract >>= 1;
  3151  000D18  90D8               	bcf	status,0,c
  3152  000D1A  321F               	rrcf	CRC8@extract,f,c
  3153  000D1C  0620               	decf	CRC8@tempI,f,c
  3154  000D1E                     l2305:
  3155  000D1E  5020               	movf	CRC8@tempI,w,c
  3156  000D20  A4D8               	btfss	status,2,c
  3157  000D22  D7EF               	goto	l2297
  3158  000D24                     l2307:
  3159  000D24  061D               	decf	CRC8@len,f,c
  3160  000D26  281D               	incf	CRC8@len,w,c
  3161  000D28  A4D8               	btfss	status,2,c
  3162  000D2A  D7E0               	goto	l2291
  3163                           
  3164                           ;CarCom.c: 33: }
  3165                           ;CarCom.c: 34: }
  3166                           ;CarCom.c: 35: return crc;
  3167  000D2C  5021               	movf	CRC8@crc,w,c
  3168  000D2E  0012               	return	
  3169  000D30                     __end_of_CRC8:
  3170                           	opt stack 0
  3171                           tblptru	equ	0xFF8
  3172                           tblptrh	equ	0xFF7
  3173                           tblptrl	equ	0xFF6
  3174                           tablat	equ	0xFF5
  3175                           postinc0	equ	0xFEE
  3176                           wreg	equ	0xFE8
  3177                           indf1	equ	0xFE7
  3178                           postdec1	equ	0xFE5
  3179                           fsr1h	equ	0xFE2
  3180                           fsr1l	equ	0xFE1
  3181                           indf2	equ	0xFDF
  3182                           postinc2	equ	0xFDE
  3183                           postdec2	equ	0xFDD
  3184                           plusw2	equ	0xFDB
  3185                           fsr2h	equ	0xFDA
  3186                           fsr2l	equ	0xFD9
  3187                           status	equ	0xFD8
  3188                           
  3189 ;; *************** function _GetDataDict *****************
  3190 ;; Defined at:
  3191 ;;		line 9 in file "CarDataDictionary.c"
  3192 ;; Parameters:    Size  Location     Type
  3193 ;;  DataTable       1    wreg     unsigned char 
  3194 ;;  DataTableInd    1   26[COMRAM] unsigned char 
  3195 ;;  DataArray       2   27[COMRAM] PTR unsigned char 
  3196 ;;		 -> ComController@DataToSend(4), 
  3197 ;;  numbofbytes     1   29[COMRAM] unsigned char 
  3198 ;; Auto vars:     Size  Location     Type
  3199 ;;  DataTable       1   31[COMRAM] unsigned char 
  3200 ;;  ReturnCounte    1   33[COMRAM] unsigned char 
  3201 ;;  DataCount       1   32[COMRAM] unsigned char 
  3202 ;;  Error           1   30[COMRAM] unsigned char 
  3203 ;; Return value:  Size  Location     Type
  3204 ;;                  1    wreg      unsigned char 
  3205 ;; Registers used:
  3206 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3207 ;; Tracked objects:
  3208 ;;		On entry : 0/0
  3209 ;;		On exit  : 0/0
  3210 ;;		Unchanged: 0/0
  3211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3212 ;;      Params:         4       0       0       0       0       0       0
  3213 ;;      Locals:         4       0       0       0       0       0       0
  3214 ;;      Temps:          0       0       0       0       0       0       0
  3215 ;;      Totals:         8       0       0       0       0       0       0
  3216 ;;Total ram usage:        8 bytes
  3217 ;; Hardware stack levels used:    1
  3218 ;; Hardware stack levels required when called:    4
  3219 ;; This function calls:
  3220 ;;		Nothing
  3221 ;; This function is called by:
  3222 ;;		_ComController
  3223 ;; This function uses a non-reentrant model
  3224 ;;
  3225                           
  3226                           	psect	text15
  3227  00093C                     __ptext15:
  3228                           	opt stack 0
  3229  00093C                     _GetDataDict:
  3230                           	opt stack 23
  3231                           
  3232                           ;incstack = 0
  3233                           ;GetDataDict@DataTable stored from wreg
  3234  00093C  6E20               	movwf	GetDataDict@DataTable,c
  3235                           
  3236                           ;CarDataDictionary.c: 10: unsigned char Error = 0;
  3237  00093E  0E00               	movlw	0
  3238  000940  6E1F               	movwf	GetDataDict@Error,c
  3239                           
  3240                           ;CarDataDictionary.c: 11: unsigned char DataCount = 0;
  3241  000942  0E00               	movlw	0
  3242  000944  6E21               	movwf	GetDataDict@DataCount,c
  3243                           
  3244                           ;CarDataDictionary.c: 12: unsigned char ReturnCounter = 0;
  3245  000946  0E00               	movlw	0
  3246  000948  6E22               	movwf	GetDataDict@ReturnCounter,c
  3247                           
  3248                           ;CarDataDictionary.c: 13: switch(DataTable){
  3249  00094A  D03C               	goto	l2345
  3250  00094C                     l2325:
  3251                           
  3252                           ;CarDataDictionary.c: 15: DataCount = DataTableIndex + numbofbytes;
  3253  00094C  501B               	movf	GetDataDict@DataTableIndex,w,c
  3254  00094E  241E               	addwf	GetDataDict@numbofbytes,w,c
  3255  000950  6E21               	movwf	GetDataDict@DataCount,c
  3256  000952  D014               	goto	l2333
  3257  000954                     l2327:
  3258                           
  3259                           ;CarDataDictionary.c: 17: DataArray[ReturnCounter] = DataTableArrayOne[DataTableIndex];
  3260  000954  501B               	movf	GetDataDict@DataTableIndex,w,c
  3261  000956  0D01               	mullw	1
  3262  000958  0EC8               	movlw	low _DataTableArrayOne
  3263  00095A  24F3               	addwf	prodl,w,c
  3264  00095C  6ED9               	movwf	fsr2l,c
  3265  00095E  0E00               	movlw	high _DataTableArrayOne
  3266  000960  20F4               	addwfc	prodh,w,c
  3267  000962  6EDA               	movwf	fsr2h,c
  3268  000964  5022               	movf	GetDataDict@ReturnCounter,w,c
  3269  000966  0D01               	mullw	1
  3270  000968  50F3               	movf	prodl,w,c
  3271  00096A  241C               	addwf	GetDataDict@DataArray,w,c
  3272  00096C  6EE1               	movwf	fsr1l,c
  3273  00096E  50F4               	movf	prodh,w,c
  3274  000970  201D               	addwfc	GetDataDict@DataArray+1,w,c
  3275  000972  6EE2               	movwf	fsr1h,c
  3276  000974  CFDF FFE7          	movff	indf2,indf1
  3277                           
  3278                           ;CarDataDictionary.c: 18: ReturnCounter++;
  3279  000978  2A22               	incf	GetDataDict@ReturnCounter,f,c
  3280  00097A  2A1B               	incf	GetDataDict@DataTableIndex,f,c
  3281  00097C                     l2333:
  3282  00097C  5021               	movf	GetDataDict@DataCount,w,c
  3283  00097E  5C1B               	subwf	GetDataDict@DataTableIndex,w,c
  3284  000980  B0D8               	btfsc	status,0,c
  3285  000982  0012               	return	
  3286  000984  D7E7               	goto	l2327
  3287  000986                     l2335:
  3288                           
  3289                           ;CarDataDictionary.c: 22: DataCount = DataTableIndex + numbofbytes;
  3290  000986  501B               	movf	GetDataDict@DataTableIndex,w,c
  3291  000988  241E               	addwf	GetDataDict@numbofbytes,w,c
  3292  00098A  6E21               	movwf	GetDataDict@DataCount,c
  3293  00098C  D014               	goto	l2343
  3294  00098E                     l2337:
  3295                           
  3296                           ;CarDataDictionary.c: 24: DataArray[ReturnCounter] = DataTableArrayTwo[DataTableIndex];
  3297  00098E  501B               	movf	GetDataDict@DataTableIndex,w,c
  3298  000990  0D01               	mullw	1
  3299  000992  0E33               	movlw	low _DataTableArrayTwo
  3300  000994  24F3               	addwf	prodl,w,c
  3301  000996  6ED9               	movwf	fsr2l,c
  3302  000998  0E00               	movlw	high _DataTableArrayTwo
  3303  00099A  20F4               	addwfc	prodh,w,c
  3304  00099C  6EDA               	movwf	fsr2h,c
  3305  00099E  5022               	movf	GetDataDict@ReturnCounter,w,c
  3306  0009A0  0D01               	mullw	1
  3307  0009A2  50F3               	movf	prodl,w,c
  3308  0009A4  241C               	addwf	GetDataDict@DataArray,w,c
  3309  0009A6  6EE1               	movwf	fsr1l,c
  3310  0009A8  50F4               	movf	prodh,w,c
  3311  0009AA  201D               	addwfc	GetDataDict@DataArray+1,w,c
  3312  0009AC  6EE2               	movwf	fsr1h,c
  3313  0009AE  CFDF FFE7          	movff	indf2,indf1
  3314                           
  3315                           ;CarDataDictionary.c: 25: ReturnCounter++;
  3316  0009B2  2A22               	incf	GetDataDict@ReturnCounter,f,c
  3317  0009B4  2A1B               	incf	GetDataDict@DataTableIndex,f,c
  3318  0009B6                     l2343:
  3319  0009B6  5021               	movf	GetDataDict@DataCount,w,c
  3320  0009B8  5C1B               	subwf	GetDataDict@DataTableIndex,w,c
  3321  0009BA  B0D8               	btfsc	status,0,c
  3322  0009BC  0012               	return	
  3323  0009BE  D7E7               	goto	l2337
  3324  0009C0                     l343:
  3325                           
  3326                           ;CarDataDictionary.c: 29: Error = -1;
  3327  0009C0  681F               	setf	GetDataDict@Error,c
  3328                           
  3329                           ;CarDataDictionary.c: 30: }
  3330  0009C2  0012               	return	
  3331  0009C4                     l2345:
  3332  0009C4  5020               	movf	GetDataDict@DataTable,w,c
  3333                           
  3334                           ; Switch size 1, requested type "space"
  3335                           ; Number of cases is 2, Range of values is 0 to 1
  3336                           ; switch strategies available:
  3337                           ; Name         Instructions Cycles
  3338                           ; simple_byte            7     4 (average)
  3339                           ;	Chosen strategy is simple_byte
  3340  0009C6  0A00               	xorlw	0	; case 0
  3341  0009C8  B4D8               	btfsc	status,2,c
  3342  0009CA  D7C0               	goto	l2325
  3343  0009CC  0A01               	xorlw	1	; case 1
  3344  0009CE  B4D8               	btfsc	status,2,c
  3345  0009D0  D7DA               	goto	l2335
  3346  0009D2  D7F6               	goto	l343
  3347  0009D4                     __end_of_GetDataDict:
  3348                           	opt stack 0
  3349                           tblptru	equ	0xFF8
  3350                           tblptrh	equ	0xFF7
  3351                           tblptrl	equ	0xFF6
  3352                           tablat	equ	0xFF5
  3353                           prodh	equ	0xFF4
  3354                           prodl	equ	0xFF3
  3355                           postinc0	equ	0xFEE
  3356                           wreg	equ	0xFE8
  3357                           indf1	equ	0xFE7
  3358                           postdec1	equ	0xFE5
  3359                           fsr1h	equ	0xFE2
  3360                           fsr1l	equ	0xFE1
  3361                           indf2	equ	0xFDF
  3362                           postinc2	equ	0xFDE
  3363                           postdec2	equ	0xFDD
  3364                           plusw2	equ	0xFDB
  3365                           fsr2h	equ	0xFDA
  3366                           fsr2l	equ	0xFD9
  3367                           status	equ	0xFD8
  3368                           
  3369 ;; *************** function _Delay *****************
  3370 ;; Defined at:
  3371 ;;		line 210 in file "Function.c"
  3372 ;; Parameters:    Size  Location     Type
  3373 ;;  wait            2   26[COMRAM] int 
  3374 ;; Auto vars:     Size  Location     Type
  3375 ;;  x               2   29[COMRAM] int 
  3376 ;; Return value:  Size  Location     Type
  3377 ;;                  1    wreg      void 
  3378 ;; Registers used:
  3379 ;;		wreg, status,2, status,0
  3380 ;; Tracked objects:
  3381 ;;		On entry : 0/0
  3382 ;;		On exit  : 0/0
  3383 ;;		Unchanged: 0/0
  3384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3385 ;;      Params:         2       0       0       0       0       0       0
  3386 ;;      Locals:         2       0       0       0       0       0       0
  3387 ;;      Temps:          1       0       0       0       0       0       0
  3388 ;;      Totals:         5       0       0       0       0       0       0
  3389 ;;Total ram usage:        5 bytes
  3390 ;; Hardware stack levels used:    1
  3391 ;; Hardware stack levels required when called:    4
  3392 ;; This function calls:
  3393 ;;		Nothing
  3394 ;; This function is called by:
  3395 ;;		_ComController
  3396 ;;		_respondECU
  3397 ;; This function uses a non-reentrant model
  3398 ;;
  3399                           
  3400                           	psect	text16
  3401  000D6C                     __ptext16:
  3402                           	opt stack 0
  3403  000D6C                     _Delay:
  3404                           	opt stack 23
  3405                           
  3406                           ;Function.c: 211: int x;
  3407                           ;Function.c: 212: for (x = 0; x < wait; x++) {
  3408                           
  3409                           ;incstack = 0
  3410  000D6C  0E00               	movlw	0
  3411  000D6E  6E1F               	movwf	Delay@x+1,c
  3412  000D70  0E00               	movlw	0
  3413  000D72  6E1E               	movwf	Delay@x,c
  3414  000D74  D00A               	goto	l278
  3415  000D76                     l2315:
  3416                           
  3417                           ;Function.c: 213: _delay((unsigned long)((1)*(16000000/4000.0)));
  3418  000D76  0E06               	movlw	6
  3419  000D78  6E1D               	movwf	??_Delay& (0+255),c
  3420  000D7A  0E30               	movlw	48
  3421  000D7C                     u1607:
  3422  000D7C  2EE8               	decfsz	wreg,f,c
  3423  000D7E  D7FE               	bra	u1607
  3424  000D80  2E1D               	decfsz	??_Delay& (0+255),f,c
  3425  000D82  D7FC               	bra	u1607
  3426  000D84  D000               	nop2	
  3427  000D86  4A1E               	infsnz	Delay@x,f,c
  3428  000D88  2A1F               	incf	Delay@x+1,f,c
  3429  000D8A                     l278:
  3430  000D8A  501B               	movf	Delay@wait,w,c
  3431  000D8C  5C1E               	subwf	Delay@x,w,c
  3432  000D8E  501F               	movf	Delay@x+1,w,c
  3433  000D90  0A80               	xorlw	128
  3434  000D92  6E1D               	movwf	??_Delay& (0+255),c
  3435  000D94  501C               	movf	Delay@wait+1,w,c
  3436  000D96  0A80               	xorlw	128
  3437  000D98  581D               	subwfb	??_Delay& (0+255),w,c
  3438  000D9A  B0D8               	btfsc	status,0,c
  3439  000D9C  0012               	return	
  3440  000D9E  D7EB               	goto	l2315
  3441  000DA0                     __end_of_Delay:
  3442                           	opt stack 0
  3443                           tblptru	equ	0xFF8
  3444                           tblptrh	equ	0xFF7
  3445                           tblptrl	equ	0xFF6
  3446                           tablat	equ	0xFF5
  3447                           prodh	equ	0xFF4
  3448                           prodl	equ	0xFF3
  3449                           postinc0	equ	0xFEE
  3450                           wreg	equ	0xFE8
  3451                           indf1	equ	0xFE7
  3452                           postdec1	equ	0xFE5
  3453                           fsr1h	equ	0xFE2
  3454                           fsr1l	equ	0xFE1
  3455                           indf2	equ	0xFDF
  3456                           postinc2	equ	0xFDE
  3457                           postdec2	equ	0xFDD
  3458                           plusw2	equ	0xFDB
  3459                           fsr2h	equ	0xFDA
  3460                           fsr2l	equ	0xFD9
  3461                           status	equ	0xFD8
  3462                           
  3463 ;; *************** function _Start *****************
  3464 ;; Defined at:
  3465 ;;		line 49 in file "Function.c"
  3466 ;; Parameters:    Size  Location     Type
  3467 ;;		None
  3468 ;; Auto vars:     Size  Location     Type
  3469 ;;  Data            5   36[COMRAM] unsigned char [5]
  3470 ;; Return value:  Size  Location     Type
  3471 ;;                  1    wreg      void 
  3472 ;; Registers used:
  3473 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3474 ;; Tracked objects:
  3475 ;;		On entry : 0/0
  3476 ;;		On exit  : 0/0
  3477 ;;		Unchanged: 0/0
  3478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3479 ;;      Params:         0       0       0       0       0       0       0
  3480 ;;      Locals:         5       0       0       0       0       0       0
  3481 ;;      Temps:          0       0       0       0       0       0       0
  3482 ;;      Totals:         5       0       0       0       0       0       0
  3483 ;;Total ram usage:        5 bytes
  3484 ;; Hardware stack levels used:    1
  3485 ;; Hardware stack levels required when called:    8
  3486 ;; This function calls:
  3487 ;;		_ComStart
  3488 ;;		_INTERRUPT_Initialize
  3489 ;;		_SetDataDict
  3490 ;;		_TMR0_Initialize
  3491 ;; This function is called by:
  3492 ;;		_main
  3493 ;; This function uses a non-reentrant model
  3494 ;;
  3495                           
  3496                           	psect	text17
  3497  000B90                     __ptext17:
  3498                           	opt stack 0
  3499  000B90                     _Start:
  3500                           	opt stack 22
  3501                           
  3502                           ;Function.c: 114: TRISCbits.TRISC5 = 1;
  3503                           
  3504                           ;incstack = 0
  3505  000B90  8A94               	bsf	3988,5,c	;volatile
  3506                           
  3507                           ;Function.c: 115: TRISCbits.TRISC4 = 1;
  3508  000B92  8894               	bsf	3988,4,c	;volatile
  3509                           
  3510                           ;Function.c: 116: TRISDbits.TRISD3 = 1;
  3511  000B94  8695               	bsf	3989,3,c	;volatile
  3512                           
  3513                           ;Function.c: 117: TRISDbits.TRISD2 = 1;
  3514  000B96  8495               	bsf	3989,2,c	;volatile
  3515                           
  3516                           ;Function.c: 118: TRISDbits.TRISD1 = 1;
  3517  000B98  8295               	bsf	3989,1,c	;volatile
  3518                           
  3519                           ;Function.c: 119: TRISDbits.TRISD0 = 1;
  3520  000B9A  8095               	bsf	3989,0,c	;volatile
  3521                           
  3522                           ;Function.c: 120: TRISCbits.TRISC3 = 1;
  3523  000B9C  8694               	bsf	3988,3,c	;volatile
  3524                           
  3525                           ;Function.c: 121: TRISCbits.TRISC2 = 1;
  3526  000B9E  8494               	bsf	3988,2,c	;volatile
  3527                           
  3528                           ;Function.c: 122: TRISCbits.TRISC1 = 1;
  3529  000BA0  8294               	bsf	3988,1,c	;volatile
  3530                           
  3531                           ;Function.c: 123: TRISAbits.TRISA7 = 1;
  3532  000BA2  8E92               	bsf	3986,7,c	;volatile
  3533                           
  3534                           ;Function.c: 124: TRISCbits.TRISC0 = 1;
  3535  000BA4  8094               	bsf	3988,0,c	;volatile
  3536                           
  3537                           ;Function.c: 125: TRISAbits.TRISA4 = 1;
  3538  000BA6  8892               	bsf	3986,4,c	;volatile
  3539                           
  3540                           ;Function.c: 126: TRISAbits.TRISA6 = 1;
  3541  000BA8  8C92               	bsf	3986,6,c	;volatile
  3542                           
  3543                           ;Function.c: 128: ANSELCbits.ANSC2 = 1;
  3544  000BAA  010F               	movlb	15	; () banked
  3545  000BAC  853A               	bsf	58,2,b	;volatile
  3546                           
  3547                           ;Function.c: 131: TRISAbits.TRISA3 = 0;
  3548  000BAE  9692               	bcf	3986,3,c	;volatile
  3549                           
  3550                           ;Function.c: 132: TRISDbits.TRISD4 = 0;
  3551  000BB0  9895               	bcf	3989,4,c	;volatile
  3552                           
  3553                           ; BSR set to: 15
  3554                           ;Function.c: 137: ANSELA = 0;
  3555  000BB2  0E00               	movlw	0
  3556  000BB4  010F               	movlb	15	; () banked
  3557  000BB6  6F38               	movwf	56,b	;volatile
  3558                           
  3559                           ;Function.c: 138: ANSELB = 0;
  3560  000BB8  0E00               	movlw	0
  3561  000BBA  010F               	movlb	15	; () banked
  3562  000BBC  6F39               	movwf	57,b	;volatile
  3563                           
  3564                           ;Function.c: 139: ANSELC = 0;
  3565  000BBE  0E00               	movlw	0
  3566  000BC0  010F               	movlb	15	; () banked
  3567  000BC2  6F3A               	movwf	58,b	;volatile
  3568                           
  3569                           ;Function.c: 140: ANSELD = 0;
  3570  000BC4  0E00               	movlw	0
  3571  000BC6  010F               	movlb	15	; () banked
  3572  000BC8  6F3B               	movwf	59,b	;volatile
  3573                           
  3574                           ;Function.c: 141: ANSELE = 0;
  3575  000BCA  0E00               	movlw	0
  3576  000BCC  010F               	movlb	15	; () banked
  3577  000BCE  6F3C               	movwf	60,b	;volatile
  3578                           
  3579                           ;Function.c: 145: OSCCON = 0x72;
  3580  000BD0  0E72               	movlw	114
  3581  000BD2  6ED3               	movwf	4051,c	;volatile
  3582                           
  3583                           ;Function.c: 147: OSCCON2 = 0x04;
  3584  000BD4  0E04               	movlw	4
  3585  000BD6  6ED2               	movwf	4050,c	;volatile
  3586                           
  3587                           ;Function.c: 149: OSCTUNE = 0x00;
  3588  000BD8  0E00               	movlw	0
  3589  000BDA  6E9B               	movwf	3995,c	;volatile
  3590                           
  3591                           ; BSR set to: 15
  3592                           ;Function.c: 152: ComStart();
  3593  000BDC  ECDC  F007         	call	_ComStart	;wreg free
  3594                           
  3595                           ;Function.c: 153: INTERRUPT_Initialize();
  3596  000BE0  EC83  F007         	call	_INTERRUPT_Initialize	;wreg free
  3597                           
  3598                           ;Function.c: 154: TMR0_Initialize();
  3599  000BE4  EC56  F007         	call	_TMR0_Initialize	;wreg free
  3600                           
  3601                           ;Function.c: 156: unsigned char Data[5] = {4,2};
  3602  000BE8  EE20  F0FA         	lfsr	2,Start@F7240
  3603  000BEC  EE10  F025         	lfsr	1,Start@Data
  3604  000BF0  0E04               	movlw	4
  3605  000BF2                     u1051:
  3606  000BF2  CFDB FFE3          	movff	plusw2,plusw1
  3607  000BF6  06E8               	decf	wreg,f,c
  3608  000BF8  E2FC               	bc	u1051
  3609                           
  3610                           ;Function.c: 157: SetDataDict(0, 0,Data,2);
  3611  000BFA  0E00               	movlw	0
  3612  000BFC  6E1B               	movwf	SetDataDict@DataTableIndex,c
  3613  000BFE  0E25               	movlw	low Start@Data
  3614  000C00  6E1C               	movwf	SetDataDict@DataArray,c
  3615  000C02  0E00               	movlw	high Start@Data
  3616  000C04  6E1D               	movwf	SetDataDict@DataArray+1,c
  3617  000C06  0E02               	movlw	2
  3618  000C08  6E1E               	movwf	SetDataDict@numbofbytes,c
  3619  000C0A  0E00               	movlw	0
  3620  000C0C  ECEA  F004         	call	_SetDataDict
  3621  000C10  0012               	return		;funcret
  3622  000C12                     __end_of_Start:
  3623                           	opt stack 0
  3624                           tblptru	equ	0xFF8
  3625                           tblptrh	equ	0xFF7
  3626                           tblptrl	equ	0xFF6
  3627                           tablat	equ	0xFF5
  3628                           prodh	equ	0xFF4
  3629                           prodl	equ	0xFF3
  3630                           postinc0	equ	0xFEE
  3631                           wreg	equ	0xFE8
  3632                           indf1	equ	0xFE7
  3633                           postdec1	equ	0xFE5
  3634                           plusw1	equ	0xFE3
  3635                           fsr1h	equ	0xFE2
  3636                           fsr1l	equ	0xFE1
  3637                           indf2	equ	0xFDF
  3638                           postinc2	equ	0xFDE
  3639                           postdec2	equ	0xFDD
  3640                           plusw2	equ	0xFDB
  3641                           fsr2h	equ	0xFDA
  3642                           fsr2l	equ	0xFD9
  3643                           status	equ	0xFD8
  3644                           
  3645 ;; *************** function _TMR0_Initialize *****************
  3646 ;; Defined at:
  3647 ;;		line 23 in file "tmr0.c"
  3648 ;; Parameters:    Size  Location     Type
  3649 ;;		None
  3650 ;; Auto vars:     Size  Location     Type
  3651 ;;		None
  3652 ;; Return value:  Size  Location     Type
  3653 ;;                  1    wreg      void 
  3654 ;; Registers used:
  3655 ;;		wreg, status,2, cstack
  3656 ;; Tracked objects:
  3657 ;;		On entry : 0/0
  3658 ;;		On exit  : 0/0
  3659 ;;		Unchanged: 0/0
  3660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3661 ;;      Params:         0       0       0       0       0       0       0
  3662 ;;      Locals:         0       0       0       0       0       0       0
  3663 ;;      Temps:          0       0       0       0       0       0       0
  3664 ;;      Totals:         0       0       0       0       0       0       0
  3665 ;;Total ram usage:        0 bytes
  3666 ;; Hardware stack levels used:    1
  3667 ;; Hardware stack levels required when called:    5
  3668 ;; This function calls:
  3669 ;;		_TMR0_StartTimer
  3670 ;; This function is called by:
  3671 ;;		_Start
  3672 ;; This function uses a non-reentrant model
  3673 ;;
  3674                           
  3675                           	psect	text18
  3676  000EAC                     __ptext18:
  3677                           	opt stack 0
  3678  000EAC                     _TMR0_Initialize:
  3679                           	opt stack 24
  3680                           
  3681                           ;tmr0.c: 27: T0CON = 0x94;
  3682                           
  3683                           ;incstack = 0
  3684  000EAC  0E94               	movlw	148
  3685  000EAE  6ED5               	movwf	4053,c	;volatile
  3686                           
  3687                           ;tmr0.c: 30: TMR0H = 0xCF;
  3688  000EB0  0ECF               	movlw	207
  3689  000EB2  6ED7               	movwf	4055,c	;volatile
  3690                           
  3691                           ;tmr0.c: 33: TMR0L = 0x2C;
  3692  000EB4  0E2C               	movlw	44
  3693  000EB6  6ED6               	movwf	4054,c	;volatile
  3694                           
  3695                           ;tmr0.c: 36: timer0ReloadVal16bit = 53036;
  3696  000EB8  0ECF               	movlw	207
  3697  000EBA  6E3D               	movwf	_timer0ReloadVal16bit+1,c	;volatile
  3698  000EBC  0E2C               	movlw	44
  3699  000EBE  6E3C               	movwf	_timer0ReloadVal16bit,c	;volatile
  3700                           
  3701                           ;tmr0.c: 39: INTCONbits.TMR0IF = 0;
  3702  000EC0  94F2               	bcf	intcon,2,c	;volatile
  3703                           
  3704                           ;tmr0.c: 42: INTCONbits.TMR0IE = 1;
  3705  000EC2  8AF2               	bsf	intcon,5,c	;volatile
  3706                           
  3707                           ;tmr0.c: 45: TMR0_StartTimer();
  3708  000EC4  ECE4  F007         	call	_TMR0_StartTimer	;wreg free
  3709  000EC8  0012               	return		;funcret
  3710  000ECA                     __end_of_TMR0_Initialize:
  3711                           	opt stack 0
  3712                           tblptru	equ	0xFF8
  3713                           tblptrh	equ	0xFF7
  3714                           tblptrl	equ	0xFF6
  3715                           tablat	equ	0xFF5
  3716                           prodh	equ	0xFF4
  3717                           prodl	equ	0xFF3
  3718                           intcon	equ	0xFF2
  3719                           postinc0	equ	0xFEE
  3720                           wreg	equ	0xFE8
  3721                           indf1	equ	0xFE7
  3722                           postdec1	equ	0xFE5
  3723                           plusw1	equ	0xFE3
  3724                           fsr1h	equ	0xFE2
  3725                           fsr1l	equ	0xFE1
  3726                           indf2	equ	0xFDF
  3727                           postinc2	equ	0xFDE
  3728                           postdec2	equ	0xFDD
  3729                           plusw2	equ	0xFDB
  3730                           fsr2h	equ	0xFDA
  3731                           fsr2l	equ	0xFD9
  3732                           status	equ	0xFD8
  3733                           
  3734 ;; *************** function _TMR0_StartTimer *****************
  3735 ;; Defined at:
  3736 ;;		line 48 in file "tmr0.c"
  3737 ;; Parameters:    Size  Location     Type
  3738 ;;		None
  3739 ;; Auto vars:     Size  Location     Type
  3740 ;;		None
  3741 ;; Return value:  Size  Location     Type
  3742 ;;                  1    wreg      void 
  3743 ;; Registers used:
  3744 ;;		None
  3745 ;; Tracked objects:
  3746 ;;		On entry : 0/0
  3747 ;;		On exit  : 0/0
  3748 ;;		Unchanged: 0/0
  3749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3750 ;;      Params:         0       0       0       0       0       0       0
  3751 ;;      Locals:         0       0       0       0       0       0       0
  3752 ;;      Temps:          0       0       0       0       0       0       0
  3753 ;;      Totals:         0       0       0       0       0       0       0
  3754 ;;Total ram usage:        0 bytes
  3755 ;; Hardware stack levels used:    1
  3756 ;; Hardware stack levels required when called:    4
  3757 ;; This function calls:
  3758 ;;		Nothing
  3759 ;; This function is called by:
  3760 ;;		_TMR0_Initialize
  3761 ;; This function uses a non-reentrant model
  3762 ;;
  3763                           
  3764                           	psect	text19
  3765  000FC8                     __ptext19:
  3766                           	opt stack 0
  3767  000FC8                     _TMR0_StartTimer:
  3768                           	opt stack 24
  3769                           
  3770                           ;tmr0.c: 50: T0CONbits.TMR0ON = 1;
  3771                           
  3772                           ;incstack = 0
  3773  000FC8  8ED5               	bsf	4053,7,c	;volatile
  3774  000FCA  0012               	return		;funcret
  3775  000FCC                     __end_of_TMR0_StartTimer:
  3776                           	opt stack 0
  3777                           tblptru	equ	0xFF8
  3778                           tblptrh	equ	0xFF7
  3779                           tblptrl	equ	0xFF6
  3780                           tablat	equ	0xFF5
  3781                           prodh	equ	0xFF4
  3782                           prodl	equ	0xFF3
  3783                           intcon	equ	0xFF2
  3784                           postinc0	equ	0xFEE
  3785                           wreg	equ	0xFE8
  3786                           indf1	equ	0xFE7
  3787                           postdec1	equ	0xFE5
  3788                           plusw1	equ	0xFE3
  3789                           fsr1h	equ	0xFE2
  3790                           fsr1l	equ	0xFE1
  3791                           indf2	equ	0xFDF
  3792                           postinc2	equ	0xFDE
  3793                           postdec2	equ	0xFDD
  3794                           plusw2	equ	0xFDB
  3795                           fsr2h	equ	0xFDA
  3796                           fsr2l	equ	0xFD9
  3797                           status	equ	0xFD8
  3798                           
  3799 ;; *************** function _INTERRUPT_Initialize *****************
  3800 ;; Defined at:
  3801 ;;		line 160 in file "Function.c"
  3802 ;; Parameters:    Size  Location     Type
  3803 ;;		None
  3804 ;; Auto vars:     Size  Location     Type
  3805 ;;		None
  3806 ;; Return value:  Size  Location     Type
  3807 ;;                  1    wreg      void 
  3808 ;; Registers used:
  3809 ;;		None
  3810 ;; Tracked objects:
  3811 ;;		On entry : 0/0
  3812 ;;		On exit  : 0/0
  3813 ;;		Unchanged: 0/0
  3814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3815 ;;      Params:         0       0       0       0       0       0       0
  3816 ;;      Locals:         0       0       0       0       0       0       0
  3817 ;;      Temps:          0       0       0       0       0       0       0
  3818 ;;      Totals:         0       0       0       0       0       0       0
  3819 ;;Total ram usage:        0 bytes
  3820 ;; Hardware stack levels used:    1
  3821 ;; Hardware stack levels required when called:    4
  3822 ;; This function calls:
  3823 ;;		Nothing
  3824 ;; This function is called by:
  3825 ;;		_Start
  3826 ;; This function uses a non-reentrant model
  3827 ;;
  3828                           
  3829                           	psect	text20
  3830  000F06                     __ptext20:
  3831                           	opt stack 0
  3832  000F06                     _INTERRUPT_Initialize:
  3833                           	opt stack 25
  3834                           
  3835                           ;Function.c: 162: INTCONbits.PEIE = 1;
  3836                           
  3837                           ;incstack = 0
  3838  000F06  8CF2               	bsf	intcon,6,c	;volatile
  3839                           
  3840                           ;Function.c: 163: INTCONbits.GIE = 1;
  3841  000F08  8EF2               	bsf	intcon,7,c	;volatile
  3842                           
  3843                           ;Function.c: 165: RCONbits.IPEN = 0;
  3844  000F0A  9ED0               	bcf	4048,7,c	;volatile
  3845                           
  3846                           ;Function.c: 170: IPR1bits.RC1IP = 0;
  3847  000F0C  9A9F               	bcf	3999,5,c	;volatile
  3848                           
  3849                           ;Function.c: 172: IPR1bits.TX1IP = 0;
  3850  000F0E  989F               	bcf	3999,4,c	;volatile
  3851                           
  3852                           ;Function.c: 175: INTCONbits.TMR0IF = 0;
  3853  000F10  94F2               	bcf	intcon,2,c	;volatile
  3854                           
  3855                           ;Function.c: 178: INTCONbits.TMR0IE = 1;
  3856  000F12  8AF2               	bsf	intcon,5,c	;volatile
  3857                           
  3858                           ;Function.c: 180: IPR1bits.ADIP = 0;
  3859  000F14  9C9F               	bcf	3999,6,c	;volatile
  3860                           
  3861                           ;Function.c: 182: IPR1bits.SSP1IP = 0;
  3862  000F16  969F               	bcf	3999,3,c	;volatile
  3863                           
  3864                           ;Function.c: 184: IPR2bits.BCL1IP = 0;
  3865  000F18  96A2               	bcf	4002,3,c	;volatile
  3866                           
  3867                           ;Function.c: 185: IPR1bits.TMR2IP=0;
  3868  000F1A  929F               	bcf	3999,1,c	;volatile
  3869  000F1C  0012               	return		;funcret
  3870  000F1E                     __end_of_INTERRUPT_Initialize:
  3871                           	opt stack 0
  3872                           tblptru	equ	0xFF8
  3873                           tblptrh	equ	0xFF7
  3874                           tblptrl	equ	0xFF6
  3875                           tablat	equ	0xFF5
  3876                           prodh	equ	0xFF4
  3877                           prodl	equ	0xFF3
  3878                           intcon	equ	0xFF2
  3879                           postinc0	equ	0xFEE
  3880                           wreg	equ	0xFE8
  3881                           indf1	equ	0xFE7
  3882                           postdec1	equ	0xFE5
  3883                           plusw1	equ	0xFE3
  3884                           fsr1h	equ	0xFE2
  3885                           fsr1l	equ	0xFE1
  3886                           indf2	equ	0xFDF
  3887                           postinc2	equ	0xFDE
  3888                           postdec2	equ	0xFDD
  3889                           plusw2	equ	0xFDB
  3890                           fsr2h	equ	0xFDA
  3891                           fsr2l	equ	0xFD9
  3892                           status	equ	0xFD8
  3893                           
  3894 ;; *************** function _ComStart *****************
  3895 ;; Defined at:
  3896 ;;		line 12 in file "Communications.c"
  3897 ;; Parameters:    Size  Location     Type
  3898 ;;		None
  3899 ;; Auto vars:     Size  Location     Type
  3900 ;;		None
  3901 ;; Return value:  Size  Location     Type
  3902 ;;                  1    wreg      void 
  3903 ;; Registers used:
  3904 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3905 ;; Tracked objects:
  3906 ;;		On entry : 0/0
  3907 ;;		On exit  : 0/0
  3908 ;;		Unchanged: 0/0
  3909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3910 ;;      Params:         0       0       0       0       0       0       0
  3911 ;;      Locals:         0       0       0       0       0       0       0
  3912 ;;      Temps:          0       0       0       0       0       0       0
  3913 ;;      Totals:         0       0       0       0       0       0       0
  3914 ;;Total ram usage:        0 bytes
  3915 ;; Hardware stack levels used:    1
  3916 ;; Hardware stack levels required when called:    7
  3917 ;; This function calls:
  3918 ;;		_EUSART1_Initialize
  3919 ;; This function is called by:
  3920 ;;		_Start
  3921 ;; This function uses a non-reentrant model
  3922 ;;
  3923                           
  3924                           	psect	text21
  3925  000FB8                     __ptext21:
  3926                           	opt stack 0
  3927  000FB8                     _ComStart:
  3928                           	opt stack 22
  3929                           
  3930                           ;Communications.c: 13: EUSART1_Initialize();
  3931                           
  3932                           ;incstack = 0
  3933  000FB8  EC98  F006         	call	_EUSART1_Initialize	;wreg free
  3934  000FBC  0012               	return		;funcret
  3935  000FBE                     __end_of_ComStart:
  3936                           	opt stack 0
  3937                           tblptru	equ	0xFF8
  3938                           tblptrh	equ	0xFF7
  3939                           tblptrl	equ	0xFF6
  3940                           tablat	equ	0xFF5
  3941                           prodh	equ	0xFF4
  3942                           prodl	equ	0xFF3
  3943                           intcon	equ	0xFF2
  3944                           postinc0	equ	0xFEE
  3945                           wreg	equ	0xFE8
  3946                           indf1	equ	0xFE7
  3947                           postdec1	equ	0xFE5
  3948                           plusw1	equ	0xFE3
  3949                           fsr1h	equ	0xFE2
  3950                           fsr1l	equ	0xFE1
  3951                           indf2	equ	0xFDF
  3952                           postinc2	equ	0xFDE
  3953                           postdec2	equ	0xFDD
  3954                           plusw2	equ	0xFDB
  3955                           fsr2h	equ	0xFDA
  3956                           fsr2l	equ	0xFD9
  3957                           status	equ	0xFD8
  3958                           
  3959 ;; *************** function _EUSART1_Initialize *****************
  3960 ;; Defined at:
  3961 ;;		line 20 in file "UART.c"
  3962 ;; Parameters:    Size  Location     Type
  3963 ;;		None
  3964 ;; Auto vars:     Size  Location     Type
  3965 ;;		None
  3966 ;; Return value:  Size  Location     Type
  3967 ;;                  1    wreg      void 
  3968 ;; Registers used:
  3969 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3970 ;; Tracked objects:
  3971 ;;		On entry : 0/0
  3972 ;;		On exit  : 0/0
  3973 ;;		Unchanged: 0/0
  3974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3975 ;;      Params:         0       0       0       0       0       0       0
  3976 ;;      Locals:         0       0       0       0       0       0       0
  3977 ;;      Temps:          0       0       0       0       0       0       0
  3978 ;;      Totals:         0       0       0       0       0       0       0
  3979 ;;Total ram usage:        0 bytes
  3980 ;; Hardware stack levels used:    1
  3981 ;; Hardware stack levels required when called:    6
  3982 ;; This function calls:
  3983 ;;		_UART_buff_init
  3984 ;; This function is called by:
  3985 ;;		_ComStart
  3986 ;; This function uses a non-reentrant model
  3987 ;;
  3988                           
  3989                           	psect	text22
  3990  000D30                     __ptext22:
  3991                           	opt stack 0
  3992  000D30                     _EUSART1_Initialize:
  3993                           	opt stack 22
  3994                           
  3995                           ;UART.c: 22: PIE1bits.RC1IE = 0;
  3996                           
  3997                           ;incstack = 0
  3998  000D30  9A9D               	bcf	3997,5,c	;volatile
  3999                           
  4000                           ;UART.c: 23: PIE1bits.TX1IE = 0;
  4001  000D32  989D               	bcf	3997,4,c	;volatile
  4002                           
  4003                           ;UART.c: 28: BAUD1CON = 0x48;
  4004  000D34  0E48               	movlw	72
  4005  000D36  6EB8               	movwf	4024,c	;volatile
  4006                           
  4007                           ;UART.c: 31: RC1STA = 0x98;
  4008  000D38  0E98               	movlw	152
  4009  000D3A  6EAB               	movwf	4011,c	;volatile
  4010                           
  4011                           ;UART.c: 34: TX1STA = 0x26;
  4012  000D3C  0E26               	movlw	38
  4013  000D3E  6EAC               	movwf	4012,c	;volatile
  4014                           
  4015                           ;UART.c: 37: SPBRG1 = (((16000000/38400)/4)-1);
  4016  000D40  0E67               	movlw	103
  4017  000D42  6EAF               	movwf	4015,c	;volatile
  4018                           
  4019                           ;UART.c: 40: SPBRGH1 = 0x00;
  4020  000D44  0E00               	movlw	0
  4021  000D46  6EB0               	movwf	4016,c	;volatile
  4022                           
  4023                           ;UART.c: 43: TXREG1 = 0x00;
  4024  000D48  0E00               	movlw	0
  4025  000D4A  6EAD               	movwf	4013,c	;volatile
  4026                           
  4027                           ;UART.c: 46: RCREG1 = 0x00;
  4028  000D4C  0E00               	movlw	0
  4029  000D4E  6EAE               	movwf	4014,c	;volatile
  4030                           
  4031                           ;UART.c: 48: UART_buff_init(&input_buffer);
  4032  000D50  0E6A               	movlw	low _input_buffer
  4033  000D52  6E23               	movwf	UART_buff_init@_this,c
  4034  000D54  0E01               	movlw	high _input_buffer
  4035  000D56  6E24               	movwf	UART_buff_init@_this+1,c
  4036  000D58  EC65  F007         	call	_UART_buff_init	;wreg free
  4037                           
  4038                           ;UART.c: 49: UART_buff_init(&output_buffer);
  4039  000D5C  0E00               	movlw	low _output_buffer
  4040  000D5E  6E23               	movwf	UART_buff_init@_this,c
  4041  000D60  0E01               	movlw	high _output_buffer
  4042  000D62  6E24               	movwf	UART_buff_init@_this+1,c
  4043  000D64  EC65  F007         	call	_UART_buff_init	;wreg free
  4044                           
  4045                           ;UART.c: 51: PIE1bits.RC1IE = 1;
  4046  000D68  8A9D               	bsf	3997,5,c	;volatile
  4047  000D6A  0012               	return		;funcret
  4048  000D6C                     __end_of_EUSART1_Initialize:
  4049                           	opt stack 0
  4050                           tblptru	equ	0xFF8
  4051                           tblptrh	equ	0xFF7
  4052                           tblptrl	equ	0xFF6
  4053                           tablat	equ	0xFF5
  4054                           prodh	equ	0xFF4
  4055                           prodl	equ	0xFF3
  4056                           intcon	equ	0xFF2
  4057                           postinc0	equ	0xFEE
  4058                           wreg	equ	0xFE8
  4059                           indf1	equ	0xFE7
  4060                           postdec1	equ	0xFE5
  4061                           plusw1	equ	0xFE3
  4062                           fsr1h	equ	0xFE2
  4063                           fsr1l	equ	0xFE1
  4064                           indf2	equ	0xFDF
  4065                           postinc2	equ	0xFDE
  4066                           postdec2	equ	0xFDD
  4067                           plusw2	equ	0xFDB
  4068                           fsr2h	equ	0xFDA
  4069                           fsr2l	equ	0xFD9
  4070                           status	equ	0xFD8
  4071                           
  4072 ;; *************** function _UART_buff_init *****************
  4073 ;; Defined at:
  4074 ;;		line 55 in file "UART.c"
  4075 ;; Parameters:    Size  Location     Type
  4076 ;;  _this           2   34[COMRAM] PTR struct UART_ring_buf
  4077 ;;		 -> output_buffer(106), input_buffer(106), 
  4078 ;; Auto vars:     Size  Location     Type
  4079 ;;		None
  4080 ;; Return value:  Size  Location     Type
  4081 ;;                  1    wreg      void 
  4082 ;; Registers used:
  4083 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4084 ;; Tracked objects:
  4085 ;;		On entry : 0/0
  4086 ;;		On exit  : 0/0
  4087 ;;		Unchanged: 0/0
  4088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4089 ;;      Params:         2       0       0       0       0       0       0
  4090 ;;      Locals:         0       0       0       0       0       0       0
  4091 ;;      Temps:          0       0       0       0       0       0       0
  4092 ;;      Totals:         2       0       0       0       0       0       0
  4093 ;;Total ram usage:        2 bytes
  4094 ;; Hardware stack levels used:    1
  4095 ;; Hardware stack levels required when called:    5
  4096 ;; This function calls:
  4097 ;;		_memset
  4098 ;; This function is called by:
  4099 ;;		_EUSART1_Initialize
  4100 ;; This function uses a non-reentrant model
  4101 ;;
  4102                           
  4103                           	psect	text23
  4104  000ECA                     __ptext23:
  4105                           	opt stack 0
  4106  000ECA                     _UART_buff_init:
  4107                           	opt stack 22
  4108                           
  4109                           ;UART.c: 64: memset(_this, 0, sizeof (*_this));
  4110                           
  4111                           ;incstack = 0
  4112  000ECA  C023  F01B         	movff	UART_buff_init@_this,memset@p1
  4113  000ECE  C024  F01C         	movff	UART_buff_init@_this+1,memset@p1+1
  4114  000ED2  0E00               	movlw	0
  4115  000ED4  6E1E               	movwf	memset@c+1,c
  4116  000ED6  0E00               	movlw	0
  4117  000ED8  6E1D               	movwf	memset@c,c
  4118  000EDA  0E00               	movlw	0
  4119  000EDC  6E20               	movwf	memset@n+1,c
  4120  000EDE  0E6A               	movlw	106
  4121  000EE0  6E1F               	movwf	memset@n,c
  4122  000EE2  EC16  F007         	call	_memset	;wreg free
  4123  000EE6  0012               	return		;funcret
  4124  000EE8                     __end_of_UART_buff_init:
  4125                           	opt stack 0
  4126                           tblptru	equ	0xFF8
  4127                           tblptrh	equ	0xFF7
  4128                           tblptrl	equ	0xFF6
  4129                           tablat	equ	0xFF5
  4130                           prodh	equ	0xFF4
  4131                           prodl	equ	0xFF3
  4132                           intcon	equ	0xFF2
  4133                           postinc0	equ	0xFEE
  4134                           wreg	equ	0xFE8
  4135                           indf1	equ	0xFE7
  4136                           postdec1	equ	0xFE5
  4137                           plusw1	equ	0xFE3
  4138                           fsr1h	equ	0xFE2
  4139                           fsr1l	equ	0xFE1
  4140                           indf2	equ	0xFDF
  4141                           postinc2	equ	0xFDE
  4142                           postdec2	equ	0xFDD
  4143                           plusw2	equ	0xFDB
  4144                           fsr2h	equ	0xFDA
  4145                           fsr2l	equ	0xFD9
  4146                           status	equ	0xFD8
  4147                           
  4148 ;; *************** function _memset *****************
  4149 ;; Defined at:
  4150 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\memset.c"
  4151 ;; Parameters:    Size  Location     Type
  4152 ;;  p1              2   26[COMRAM] PTR void 
  4153 ;;		 -> output_buffer(106), input_buffer(106), 
  4154 ;;  c               2   28[COMRAM] int 
  4155 ;;  n               2   30[COMRAM] unsigned int 
  4156 ;; Auto vars:     Size  Location     Type
  4157 ;;  p               2   32[COMRAM] PTR unsigned char 
  4158 ;;		 -> output_buffer(106), input_buffer(106), 
  4159 ;; Return value:  Size  Location     Type
  4160 ;;                  2   26[COMRAM] PTR void 
  4161 ;; Registers used:
  4162 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4163 ;; Tracked objects:
  4164 ;;		On entry : 0/0
  4165 ;;		On exit  : 0/0
  4166 ;;		Unchanged: 0/0
  4167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4168 ;;      Params:         6       0       0       0       0       0       0
  4169 ;;      Locals:         2       0       0       0       0       0       0
  4170 ;;      Temps:          0       0       0       0       0       0       0
  4171 ;;      Totals:         8       0       0       0       0       0       0
  4172 ;;Total ram usage:        8 bytes
  4173 ;; Hardware stack levels used:    1
  4174 ;; Hardware stack levels required when called:    4
  4175 ;; This function calls:
  4176 ;;		Nothing
  4177 ;; This function is called by:
  4178 ;;		_UART_buff_init
  4179 ;;		_UART_buff_flush
  4180 ;; This function uses a non-reentrant model
  4181 ;;
  4182                           
  4183                           	psect	text24
  4184  000E2C                     __ptext24:
  4185                           	opt stack 0
  4186  000E2C                     _memset:
  4187                           	opt stack 22
  4188                           
  4189                           ;incstack = 0
  4190  000E2C  C01B  F021         	movff	memset@p1,memset@p
  4191  000E30  C01C  F022         	movff	memset@p1+1,memset@p+1
  4192  000E34  D008               	goto	l1669
  4193  000E36                     l1665:
  4194  000E36  C021  FFD9         	movff	memset@p,fsr2l
  4195  000E3A  C022  FFDA         	movff	memset@p+1,fsr2h
  4196  000E3E  C01D  FFDF         	movff	memset@c,indf2
  4197  000E42  4A21               	infsnz	memset@p,f,c
  4198  000E44  2A22               	incf	memset@p+1,f,c
  4199  000E46                     l1669:
  4200  000E46  061F               	decf	memset@n,f,c
  4201  000E48  A0D8               	btfss	status,0,c
  4202  000E4A  0620               	decf	memset@n+1,f,c
  4203  000E4C  281F               	incf	memset@n,w,c
  4204  000E4E  E1F3               	bnz	l1665
  4205  000E50  2820               	incf	memset@n+1,w,c
  4206  000E52  B4D8               	btfsc	status,2,c
  4207  000E54  0012               	return	
  4208  000E56  D7EF               	goto	l1665
  4209  000E58                     __end_of_memset:
  4210                           	opt stack 0
  4211                           tblptru	equ	0xFF8
  4212                           tblptrh	equ	0xFF7
  4213                           tblptrl	equ	0xFF6
  4214                           tablat	equ	0xFF5
  4215                           prodh	equ	0xFF4
  4216                           prodl	equ	0xFF3
  4217                           intcon	equ	0xFF2
  4218                           postinc0	equ	0xFEE
  4219                           wreg	equ	0xFE8
  4220                           indf1	equ	0xFE7
  4221                           postdec1	equ	0xFE5
  4222                           plusw1	equ	0xFE3
  4223                           fsr1h	equ	0xFE2
  4224                           fsr1l	equ	0xFE1
  4225                           indf2	equ	0xFDF
  4226                           postinc2	equ	0xFDE
  4227                           postdec2	equ	0xFDD
  4228                           plusw2	equ	0xFDB
  4229                           fsr2h	equ	0xFDA
  4230                           fsr2l	equ	0xFD9
  4231                           status	equ	0xFD8
  4232                           
  4233 ;; *************** function _SetTime *****************
  4234 ;; Defined at:
  4235 ;;		line 97 in file "tmr0.c"
  4236 ;; Parameters:    Size  Location     Type
  4237 ;;		None
  4238 ;; Auto vars:     Size  Location     Type
  4239 ;;		None
  4240 ;; Return value:  Size  Location     Type
  4241 ;;                  1    wreg      void 
  4242 ;; Registers used:
  4243 ;;		wreg, status,2
  4244 ;; Tracked objects:
  4245 ;;		On entry : 0/0
  4246 ;;		On exit  : 0/0
  4247 ;;		Unchanged: 0/0
  4248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4249 ;;      Params:         0       0       0       0       0       0       0
  4250 ;;      Locals:         0       0       0       0       0       0       0
  4251 ;;      Temps:          0       0       0       0       0       0       0
  4252 ;;      Totals:         0       0       0       0       0       0       0
  4253 ;;Total ram usage:        0 bytes
  4254 ;; Hardware stack levels used:    1
  4255 ;; Hardware stack levels required when called:    4
  4256 ;; This function calls:
  4257 ;;		Nothing
  4258 ;; This function is called by:
  4259 ;;		_main
  4260 ;; This function uses a non-reentrant model
  4261 ;;
  4262                           
  4263                           	psect	text25
  4264  000F78                     __ptext25:
  4265                           	opt stack 0
  4266  000F78                     _SetTime:
  4267                           	opt stack 26
  4268                           
  4269                           ;tmr0.c: 98: time = 0;
  4270                           
  4271                           ;incstack = 0
  4272  000F78  0E00               	movlw	0
  4273  000F7A  6E2F               	movwf	_time,c
  4274  000F7C  0E00               	movlw	0
  4275  000F7E  6E30               	movwf	_time+1,c
  4276  000F80  0E00               	movlw	0
  4277  000F82  6E31               	movwf	_time+2,c
  4278  000F84  0E00               	movlw	0
  4279  000F86  6E32               	movwf	_time+3,c
  4280  000F88  0012               	return		;funcret
  4281  000F8A                     __end_of_SetTime:
  4282                           	opt stack 0
  4283                           tblptru	equ	0xFF8
  4284                           tblptrh	equ	0xFF7
  4285                           tblptrl	equ	0xFF6
  4286                           tablat	equ	0xFF5
  4287                           prodh	equ	0xFF4
  4288                           prodl	equ	0xFF3
  4289                           intcon	equ	0xFF2
  4290                           postinc0	equ	0xFEE
  4291                           wreg	equ	0xFE8
  4292                           indf1	equ	0xFE7
  4293                           postdec1	equ	0xFE5
  4294                           plusw1	equ	0xFE3
  4295                           fsr1h	equ	0xFE2
  4296                           fsr1l	equ	0xFE1
  4297                           indf2	equ	0xFDF
  4298                           postinc2	equ	0xFDE
  4299                           postdec2	equ	0xFDD
  4300                           plusw2	equ	0xFDB
  4301                           fsr2h	equ	0xFDA
  4302                           fsr2l	equ	0xFD9
  4303                           status	equ	0xFD8
  4304                           
  4305 ;; *************** function _ReadFaults *****************
  4306 ;; Defined at:
  4307 ;;		line 13 in file "Function.c"
  4308 ;; Parameters:    Size  Location     Type
  4309 ;;		None
  4310 ;; Auto vars:     Size  Location     Type
  4311 ;;  Data            4   35[COMRAM] unsigned char [4]
  4312 ;; Return value:  Size  Location     Type
  4313 ;;                  1    wreg      void 
  4314 ;; Registers used:
  4315 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4316 ;; Tracked objects:
  4317 ;;		On entry : 0/0
  4318 ;;		On exit  : 0/0
  4319 ;;		Unchanged: 0/0
  4320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4321 ;;      Params:         0       0       0       0       0       0       0
  4322 ;;      Locals:         4       0       0       0       0       0       0
  4323 ;;      Temps:          1       0       0       0       0       0       0
  4324 ;;      Totals:         5       0       0       0       0       0       0
  4325 ;;Total ram usage:        5 bytes
  4326 ;; Hardware stack levels used:    1
  4327 ;; Hardware stack levels required when called:    5
  4328 ;; This function calls:
  4329 ;;		_SetDataDict
  4330 ;; This function is called by:
  4331 ;;		_main
  4332 ;; This function uses a non-reentrant model
  4333 ;;
  4334                           
  4335                           	psect	text26
  4336  000C84                     __ptext26:
  4337                           	opt stack 0
  4338  000C84                     _ReadFaults:
  4339                           	opt stack 25
  4340                           
  4341                           ;Function.c: 22: ByteHigh = PORTCbits.RC2;
  4342                           
  4343                           ;incstack = 0
  4344  000C84  0E00               	movlw	0
  4345  000C86  B482               	btfsc	3970,2,c	;volatile
  4346  000C88  0E01               	movlw	1
  4347  000C8A  6E3F               	movwf	_ByteHigh,c
  4348                           
  4349                           ;Function.c: 23: ByteLow = ByteLow | ((PORTCbits.RC2 & 0x01) << 0);
  4350  000C8C  A482               	btfss	3970,2,c	;volatile
  4351  000C8E  D002               	goto	u1060
  4352  000C90  0E01               	movlw	1
  4353  000C92  D001               	goto	u1066
  4354  000C94                     u1060:
  4355  000C94  0E00               	movlw	0
  4356  000C96                     u1066:
  4357  000C96  103E               	iorwf	_ByteLow,w,c
  4358  000C98  6E3E               	movwf	_ByteLow,c
  4359                           
  4360                           ;Function.c: 24: ByteLow = ByteLow | ((PORTAbits.RA7 & 0x01) << 1);
  4361  000C9A  AE80               	btfss	3968,7,c	;volatile
  4362  000C9C  D003               	goto	u1070
  4363  000C9E  6A23               	clrf	??_ReadFaults& (0+255),c
  4364  000CA0  2A23               	incf	??_ReadFaults& (0+255),f,c
  4365  000CA2  D001               	goto	u1078
  4366  000CA4                     u1070:
  4367  000CA4  6A23               	clrf	??_ReadFaults& (0+255),c
  4368  000CA6                     u1078:
  4369  000CA6  90D8               	bcf	status,0,c
  4370  000CA8  3423               	rlcf	??_ReadFaults,w,c
  4371  000CAA  103E               	iorwf	_ByteLow,w,c
  4372  000CAC  6E3E               	movwf	_ByteLow,c
  4373                           
  4374                           ;Function.c: 25: ByteLow = ByteLow | ((PORTCbits.RC0 & 0x01) << 2);
  4375  000CAE  A082               	btfss	3970,0,c	;volatile
  4376  000CB0  D003               	goto	u1080
  4377  000CB2  6A23               	clrf	??_ReadFaults& (0+255),c
  4378  000CB4  2A23               	incf	??_ReadFaults& (0+255),f,c
  4379  000CB6  D001               	goto	u1088
  4380  000CB8                     u1080:
  4381  000CB8  6A23               	clrf	??_ReadFaults& (0+255),c
  4382  000CBA                     u1088:
  4383  000CBA  90D8               	bcf	status,0,c
  4384  000CBC  3623               	rlcf	??_ReadFaults,f,c
  4385  000CBE  90D8               	bcf	status,0,c
  4386  000CC0  3423               	rlcf	??_ReadFaults,w,c
  4387  000CC2  103E               	iorwf	_ByteLow,w,c
  4388  000CC4  6E3E               	movwf	_ByteLow,c
  4389                           
  4390                           ;Function.c: 28: unsigned char Data[4];
  4391                           ;Function.c: 29: Data[0] = ByteHigh;
  4392  000CC6  C03F  F024         	movff	_ByteHigh,ReadFaults@Data
  4393                           
  4394                           ;Function.c: 30: Data[1] = ByteLow;
  4395  000CCA  C03E  F025         	movff	_ByteLow,ReadFaults@Data+1
  4396                           
  4397                           ;Function.c: 32: SetDataDict(1,0,Data,2);
  4398  000CCE  0E00               	movlw	0
  4399  000CD0  6E1B               	movwf	SetDataDict@DataTableIndex,c
  4400  000CD2  0E24               	movlw	low ReadFaults@Data
  4401  000CD4  6E1C               	movwf	SetDataDict@DataArray,c
  4402  000CD6  0E00               	movlw	high ReadFaults@Data
  4403  000CD8  6E1D               	movwf	SetDataDict@DataArray+1,c
  4404  000CDA  0E02               	movlw	2
  4405  000CDC  6E1E               	movwf	SetDataDict@numbofbytes,c
  4406  000CDE  0E01               	movlw	1
  4407  000CE0  ECEA  F004         	call	_SetDataDict
  4408  000CE4  0012               	return		;funcret
  4409  000CE6                     __end_of_ReadFaults:
  4410                           	opt stack 0
  4411                           tblptru	equ	0xFF8
  4412                           tblptrh	equ	0xFF7
  4413                           tblptrl	equ	0xFF6
  4414                           tablat	equ	0xFF5
  4415                           prodh	equ	0xFF4
  4416                           prodl	equ	0xFF3
  4417                           intcon	equ	0xFF2
  4418                           postinc0	equ	0xFEE
  4419                           wreg	equ	0xFE8
  4420                           indf1	equ	0xFE7
  4421                           postdec1	equ	0xFE5
  4422                           plusw1	equ	0xFE3
  4423                           fsr1h	equ	0xFE2
  4424                           fsr1l	equ	0xFE1
  4425                           indf2	equ	0xFDF
  4426                           postinc2	equ	0xFDE
  4427                           postdec2	equ	0xFDD
  4428                           plusw2	equ	0xFDB
  4429                           fsr2h	equ	0xFDA
  4430                           fsr2l	equ	0xFD9
  4431                           status	equ	0xFD8
  4432                           
  4433 ;; *************** function _SetDataDict *****************
  4434 ;; Defined at:
  4435 ;;		line 34 in file "CarDataDictionary.c"
  4436 ;; Parameters:    Size  Location     Type
  4437 ;;  DataTable       1    wreg     unsigned char 
  4438 ;;  DataTableInd    1   26[COMRAM] unsigned char 
  4439 ;;  DataArray       2   27[COMRAM] PTR unsigned char 
  4440 ;;		 -> Start@Data(5), ReadFaults@Data(4), 
  4441 ;;  numbofbytes     1   29[COMRAM] unsigned char 
  4442 ;; Auto vars:     Size  Location     Type
  4443 ;;  DataTable       1   31[COMRAM] unsigned char 
  4444 ;;  ReturnCounte    1   33[COMRAM] unsigned char 
  4445 ;;  DataCount       1   32[COMRAM] unsigned char 
  4446 ;;  Error           1   30[COMRAM] unsigned char 
  4447 ;; Return value:  Size  Location     Type
  4448 ;;                  1    wreg      unsigned char 
  4449 ;; Registers used:
  4450 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4451 ;; Tracked objects:
  4452 ;;		On entry : 0/0
  4453 ;;		On exit  : 0/0
  4454 ;;		Unchanged: 0/0
  4455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4456 ;;      Params:         4       0       0       0       0       0       0
  4457 ;;      Locals:         4       0       0       0       0       0       0
  4458 ;;      Temps:          0       0       0       0       0       0       0
  4459 ;;      Totals:         8       0       0       0       0       0       0
  4460 ;;Total ram usage:        8 bytes
  4461 ;; Hardware stack levels used:    1
  4462 ;; Hardware stack levels required when called:    4
  4463 ;; This function calls:
  4464 ;;		Nothing
  4465 ;; This function is called by:
  4466 ;;		_ReadFaults
  4467 ;;		_Start
  4468 ;; This function uses a non-reentrant model
  4469 ;;
  4470                           
  4471                           	psect	text27
  4472  0009D4                     __ptext27:
  4473                           	opt stack 0
  4474  0009D4                     _SetDataDict:
  4475                           	opt stack 25
  4476                           
  4477                           ;incstack = 0
  4478                           ;SetDataDict@DataTable stored from wreg
  4479  0009D4  6E20               	movwf	SetDataDict@DataTable,c
  4480                           
  4481                           ;CarDataDictionary.c: 35: unsigned char Error = 0;
  4482  0009D6  0E00               	movlw	0
  4483  0009D8  6E1F               	movwf	SetDataDict@Error,c
  4484                           
  4485                           ;CarDataDictionary.c: 36: unsigned char DataCount = 0;
  4486  0009DA  0E00               	movlw	0
  4487  0009DC  6E21               	movwf	SetDataDict@DataCount,c
  4488                           
  4489                           ;CarDataDictionary.c: 37: unsigned char ReturnCounter = 0;
  4490  0009DE  0E00               	movlw	0
  4491  0009E0  6E22               	movwf	SetDataDict@ReturnCounter,c
  4492                           
  4493                           ;CarDataDictionary.c: 38: switch(DataTable){
  4494  0009E2  D03C               	goto	l2041
  4495  0009E4                     l2021:
  4496                           
  4497                           ;CarDataDictionary.c: 40: DataCount = DataTableIndex + numbofbytes;
  4498  0009E4  501B               	movf	SetDataDict@DataTableIndex,w,c
  4499  0009E6  241E               	addwf	SetDataDict@numbofbytes,w,c
  4500  0009E8  6E21               	movwf	SetDataDict@DataCount,c
  4501  0009EA  D014               	goto	l2029
  4502  0009EC                     l2023:
  4503                           
  4504                           ;CarDataDictionary.c: 42: DataTableArrayOne[DataTableIndex] = DataArray[ReturnCounter];
  4505  0009EC  5022               	movf	SetDataDict@ReturnCounter,w,c
  4506  0009EE  0D01               	mullw	1
  4507  0009F0  50F3               	movf	prodl,w,c
  4508  0009F2  241C               	addwf	SetDataDict@DataArray,w,c
  4509  0009F4  6ED9               	movwf	fsr2l,c
  4510  0009F6  50F4               	movf	prodh,w,c
  4511  0009F8  201D               	addwfc	SetDataDict@DataArray+1,w,c
  4512  0009FA  6EDA               	movwf	fsr2h,c
  4513  0009FC  501B               	movf	SetDataDict@DataTableIndex,w,c
  4514  0009FE  0D01               	mullw	1
  4515  000A00  0EC8               	movlw	low _DataTableArrayOne
  4516  000A02  24F3               	addwf	prodl,w,c
  4517  000A04  6EE1               	movwf	fsr1l,c
  4518  000A06  0E00               	movlw	high _DataTableArrayOne
  4519  000A08  20F4               	addwfc	prodh,w,c
  4520  000A0A  6EE2               	movwf	fsr1h,c
  4521  000A0C  CFDF FFE7          	movff	indf2,indf1
  4522                           
  4523                           ;CarDataDictionary.c: 43: ReturnCounter++;
  4524  000A10  2A22               	incf	SetDataDict@ReturnCounter,f,c
  4525  000A12  2A1B               	incf	SetDataDict@DataTableIndex,f,c
  4526  000A14                     l2029:
  4527  000A14  5021               	movf	SetDataDict@DataCount,w,c
  4528  000A16  5C1B               	subwf	SetDataDict@DataTableIndex,w,c
  4529  000A18  B0D8               	btfsc	status,0,c
  4530  000A1A  0012               	return	
  4531  000A1C  D7E7               	goto	l2023
  4532  000A1E                     l2031:
  4533                           
  4534                           ;CarDataDictionary.c: 47: DataCount = DataTableIndex + numbofbytes;
  4535  000A1E  501B               	movf	SetDataDict@DataTableIndex,w,c
  4536  000A20  241E               	addwf	SetDataDict@numbofbytes,w,c
  4537  000A22  6E21               	movwf	SetDataDict@DataCount,c
  4538  000A24  D014               	goto	l2039
  4539  000A26                     l2033:
  4540                           
  4541                           ;CarDataDictionary.c: 49: DataTableArrayTwo[DataTableIndex] = DataArray[ReturnCounter];
  4542  000A26  5022               	movf	SetDataDict@ReturnCounter,w,c
  4543  000A28  0D01               	mullw	1
  4544  000A2A  50F3               	movf	prodl,w,c
  4545  000A2C  241C               	addwf	SetDataDict@DataArray,w,c
  4546  000A2E  6ED9               	movwf	fsr2l,c
  4547  000A30  50F4               	movf	prodh,w,c
  4548  000A32  201D               	addwfc	SetDataDict@DataArray+1,w,c
  4549  000A34  6EDA               	movwf	fsr2h,c
  4550  000A36  501B               	movf	SetDataDict@DataTableIndex,w,c
  4551  000A38  0D01               	mullw	1
  4552  000A3A  0E33               	movlw	low _DataTableArrayTwo
  4553  000A3C  24F3               	addwf	prodl,w,c
  4554  000A3E  6EE1               	movwf	fsr1l,c
  4555  000A40  0E00               	movlw	high _DataTableArrayTwo
  4556  000A42  20F4               	addwfc	prodh,w,c
  4557  000A44  6EE2               	movwf	fsr1h,c
  4558  000A46  CFDF FFE7          	movff	indf2,indf1
  4559                           
  4560                           ;CarDataDictionary.c: 50: ReturnCounter++;
  4561  000A4A  2A22               	incf	SetDataDict@ReturnCounter,f,c
  4562  000A4C  2A1B               	incf	SetDataDict@DataTableIndex,f,c
  4563  000A4E                     l2039:
  4564  000A4E  5021               	movf	SetDataDict@DataCount,w,c
  4565  000A50  5C1B               	subwf	SetDataDict@DataTableIndex,w,c
  4566  000A52  B0D8               	btfsc	status,0,c
  4567  000A54  0012               	return	
  4568  000A56  D7E7               	goto	l2033
  4569  000A58                     l357:
  4570                           
  4571                           ;CarDataDictionary.c: 54: Error = -1;
  4572  000A58  681F               	setf	SetDataDict@Error,c
  4573                           
  4574                           ;CarDataDictionary.c: 55: }
  4575  000A5A  0012               	return	
  4576  000A5C                     l2041:
  4577  000A5C  5020               	movf	SetDataDict@DataTable,w,c
  4578                           
  4579                           ; Switch size 1, requested type "space"
  4580                           ; Number of cases is 2, Range of values is 0 to 1
  4581                           ; switch strategies available:
  4582                           ; Name         Instructions Cycles
  4583                           ; simple_byte            7     4 (average)
  4584                           ;	Chosen strategy is simple_byte
  4585  000A5E  0A00               	xorlw	0	; case 0
  4586  000A60  B4D8               	btfsc	status,2,c
  4587  000A62  D7C0               	goto	l2021
  4588  000A64  0A01               	xorlw	1	; case 1
  4589  000A66  B4D8               	btfsc	status,2,c
  4590  000A68  D7DA               	goto	l2031
  4591  000A6A  D7F6               	goto	l357
  4592  000A6C                     __end_of_SetDataDict:
  4593                           	opt stack 0
  4594                           tblptru	equ	0xFF8
  4595                           tblptrh	equ	0xFF7
  4596                           tblptrl	equ	0xFF6
  4597                           tablat	equ	0xFF5
  4598                           prodh	equ	0xFF4
  4599                           prodl	equ	0xFF3
  4600                           intcon	equ	0xFF2
  4601                           postinc0	equ	0xFEE
  4602                           wreg	equ	0xFE8
  4603                           indf1	equ	0xFE7
  4604                           postdec1	equ	0xFE5
  4605                           plusw1	equ	0xFE3
  4606                           fsr1h	equ	0xFE2
  4607                           fsr1l	equ	0xFE1
  4608                           indf2	equ	0xFDF
  4609                           postinc2	equ	0xFDE
  4610                           postdec2	equ	0xFDD
  4611                           plusw2	equ	0xFDB
  4612                           fsr2h	equ	0xFDA
  4613                           fsr2l	equ	0xFD9
  4614                           status	equ	0xFD8
  4615                           
  4616 ;; *************** function _GetTime *****************
  4617 ;; Defined at:
  4618 ;;		line 93 in file "tmr0.c"
  4619 ;; Parameters:    Size  Location     Type
  4620 ;;		None
  4621 ;; Auto vars:     Size  Location     Type
  4622 ;;		None
  4623 ;; Return value:  Size  Location     Type
  4624 ;;                  4   26[COMRAM] long 
  4625 ;; Registers used:
  4626 ;;		None
  4627 ;; Tracked objects:
  4628 ;;		On entry : 0/0
  4629 ;;		On exit  : 0/0
  4630 ;;		Unchanged: 0/0
  4631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4632 ;;      Params:         4       0       0       0       0       0       0
  4633 ;;      Locals:         0       0       0       0       0       0       0
  4634 ;;      Temps:          0       0       0       0       0       0       0
  4635 ;;      Totals:         4       0       0       0       0       0       0
  4636 ;;Total ram usage:        4 bytes
  4637 ;; Hardware stack levels used:    1
  4638 ;; Hardware stack levels required when called:    4
  4639 ;; This function calls:
  4640 ;;		Nothing
  4641 ;; This function is called by:
  4642 ;;		_main
  4643 ;; This function uses a non-reentrant model
  4644 ;;
  4645                           
  4646                           	psect	text28
  4647  000F8A                     __ptext28:
  4648                           	opt stack 0
  4649  000F8A                     _GetTime:
  4650                           	opt stack 26
  4651                           
  4652                           ;tmr0.c: 94: return time;
  4653                           
  4654                           ;incstack = 0
  4655  000F8A  C02F  F01B         	movff	_time,?_GetTime
  4656  000F8E  C030  F01C         	movff	_time+1,?_GetTime+1
  4657  000F92  C031  F01D         	movff	_time+2,?_GetTime+2
  4658  000F96  C032  F01E         	movff	_time+3,?_GetTime+3
  4659  000F9A  0012               	return		;funcret
  4660  000F9C                     __end_of_GetTime:
  4661                           	opt stack 0
  4662                           tblptru	equ	0xFF8
  4663                           tblptrh	equ	0xFF7
  4664                           tblptrl	equ	0xFF6
  4665                           tablat	equ	0xFF5
  4666                           prodh	equ	0xFF4
  4667                           prodl	equ	0xFF3
  4668                           intcon	equ	0xFF2
  4669                           postinc0	equ	0xFEE
  4670                           wreg	equ	0xFE8
  4671                           indf1	equ	0xFE7
  4672                           postdec1	equ	0xFE5
  4673                           plusw1	equ	0xFE3
  4674                           fsr1h	equ	0xFE2
  4675                           fsr1l	equ	0xFE1
  4676                           indf2	equ	0xFDF
  4677                           postinc2	equ	0xFDE
  4678                           postdec2	equ	0xFDD
  4679                           plusw2	equ	0xFDB
  4680                           fsr2h	equ	0xFDA
  4681                           fsr2l	equ	0xFD9
  4682                           status	equ	0xFD8
  4683                           
  4684 ;; *************** function _INTERRUPT_InterruptManager *****************
  4685 ;; Defined at:
  4686 ;;		line 189 in file "Function.c"
  4687 ;; Parameters:    Size  Location     Type
  4688 ;;		None
  4689 ;; Auto vars:     Size  Location     Type
  4690 ;;		None
  4691 ;; Return value:  Size  Location     Type
  4692 ;;                  1    wreg      void 
  4693 ;; Registers used:
  4694 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4695 ;; Tracked objects:
  4696 ;;		On entry : 0/0
  4697 ;;		On exit  : 0/0
  4698 ;;		Unchanged: 0/0
  4699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4700 ;;      Params:         0       0       0       0       0       0       0
  4701 ;;      Locals:         0       0       0       0       0       0       0
  4702 ;;      Temps:         14       0       0       0       0       0       0
  4703 ;;      Totals:        14       0       0       0       0       0       0
  4704 ;;Total ram usage:       14 bytes
  4705 ;; Hardware stack levels used:    1
  4706 ;; Hardware stack levels required when called:    3
  4707 ;; This function calls:
  4708 ;;		_EUSART1_Receive_ISR
  4709 ;;		_EUSART1_Transmit_ISR
  4710 ;;		_TMR0_ISR
  4711 ;; This function is called by:
  4712 ;;		Interrupt level 2
  4713 ;; This function uses a non-reentrant model
  4714 ;;
  4715                           
  4716                           	psect	intcode
  4717  000008                     __pintcode:
  4718                           	opt stack 0
  4719  000008                     _INTERRUPT_InterruptManager:
  4720                           	opt stack 20
  4721                           
  4722                           ;incstack = 0
  4723  000008  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4724  00000A  CFFA F00D          	movff	pclath,??_INTERRUPT_InterruptManager
  4725  00000E  CFFB F00E          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  4726  000012  CFE9 F00F          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  4727  000016  CFEA F010          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  4728  00001A  CFE1 F011          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  4729  00001E  CFE2 F012          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  4730  000022  CFD9 F013          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  4731  000026  CFDA F014          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  4732  00002A  CFF3 F015          	movff	prodl,??_INTERRUPT_InterruptManager+8
  4733  00002E  CFF4 F016          	movff	prodh,??_INTERRUPT_InterruptManager+9
  4734  000032  CFF6 F017          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  4735  000036  CFF7 F018          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  4736  00003A  CFF8 F019          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  4737  00003E  CFF5 F01A          	movff	tablat,??_INTERRUPT_InterruptManager+13
  4738                           
  4739                           ;Function.c: 192: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  4740  000042  BA9D               	btfsc	3997,5,c	;volatile
  4741  000044  AA9E               	btfss	3998,5,c	;volatile
  4742  000046  D003               	goto	i2l269
  4743                           
  4744                           ;Function.c: 193: {
  4745                           ;Function.c: 194: EUSART1_Receive_ISR();
  4746  000048  EC74  F007         	call	_EUSART1_Receive_ISR	;wreg free
  4747                           
  4748                           ;Function.c: 195: }
  4749  00004C  D00B               	goto	i2l275
  4750  00004E                     i2l269:
  4751                           
  4752                           ;Function.c: 196: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  4753  00004E  B89D               	btfsc	3997,4,c	;volatile
  4754  000050  A89E               	btfss	3998,4,c	;volatile
  4755  000052  D003               	goto	i2l271
  4756                           
  4757                           ;Function.c: 197: {
  4758                           ;Function.c: 198: EUSART1_Transmit_ISR();
  4759  000054  ECD0  F006         	call	_EUSART1_Transmit_ISR	;wreg free
  4760                           
  4761                           ;Function.c: 199: }
  4762  000058  D005               	goto	i2l275
  4763  00005A                     i2l271:
  4764                           
  4765                           ;Function.c: 200: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  4766  00005A  BAF2               	btfsc	intcon,5,c	;volatile
  4767  00005C  A4F2               	btfss	intcon,2,c	;volatile
  4768  00005E  D002               	goto	i2l275
  4769                           
  4770                           ;Function.c: 201: {
  4771                           ;Function.c: 202: TMR0_ISR();
  4772  000060  EC8F  F007         	call	_TMR0_ISR	;wreg free
  4773  000064                     i2l275:
  4774  000064  C01A  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  4775  000068  C019  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  4776  00006C  C018  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  4777  000070  C017  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  4778  000074  C016  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  4779  000078  C015  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  4780  00007C  C014  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  4781  000080  C013  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  4782  000084  C012  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  4783  000088  C011  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  4784  00008C  C010  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  4785  000090  C00F  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  4786  000094  C00E  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  4787  000098  C00D  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  4788  00009C  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4789  00009E  0011               	retfie		f
  4790  0000A0                     __end_of_INTERRUPT_InterruptManager:
  4791                           	opt stack 0
  4792                           pclatu	equ	0xFFB
  4793                           pclath	equ	0xFFA
  4794                           tblptru	equ	0xFF8
  4795                           tblptrh	equ	0xFF7
  4796                           tblptrl	equ	0xFF6
  4797                           tablat	equ	0xFF5
  4798                           prodh	equ	0xFF4
  4799                           prodl	equ	0xFF3
  4800                           intcon	equ	0xFF2
  4801                           postinc0	equ	0xFEE
  4802                           fsr0h	equ	0xFEA
  4803                           fsr0l	equ	0xFE9
  4804                           wreg	equ	0xFE8
  4805                           indf1	equ	0xFE7
  4806                           postdec1	equ	0xFE5
  4807                           plusw1	equ	0xFE3
  4808                           fsr1h	equ	0xFE2
  4809                           fsr1l	equ	0xFE1
  4810                           indf2	equ	0xFDF
  4811                           postinc2	equ	0xFDE
  4812                           postdec2	equ	0xFDD
  4813                           plusw2	equ	0xFDB
  4814                           fsr2h	equ	0xFDA
  4815                           fsr2l	equ	0xFD9
  4816                           status	equ	0xFD8
  4817                           
  4818 ;; *************** function _TMR0_ISR *****************
  4819 ;; Defined at:
  4820 ;;		line 82 in file "tmr0.c"
  4821 ;; Parameters:    Size  Location     Type
  4822 ;;		None
  4823 ;; Auto vars:     Size  Location     Type
  4824 ;;		None
  4825 ;; Return value:  Size  Location     Type
  4826 ;;                  1    wreg      void 
  4827 ;; Registers used:
  4828 ;;		wreg, status,2, status,0
  4829 ;; Tracked objects:
  4830 ;;		On entry : 0/0
  4831 ;;		On exit  : 0/0
  4832 ;;		Unchanged: 0/0
  4833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4834 ;;      Params:         0       0       0       0       0       0       0
  4835 ;;      Locals:         0       0       0       0       0       0       0
  4836 ;;      Temps:          0       0       0       0       0       0       0
  4837 ;;      Totals:         0       0       0       0       0       0       0
  4838 ;;Total ram usage:        0 bytes
  4839 ;; Hardware stack levels used:    1
  4840 ;; This function calls:
  4841 ;;		Nothing
  4842 ;; This function is called by:
  4843 ;;		_INTERRUPT_InterruptManager
  4844 ;; This function uses a non-reentrant model
  4845 ;;
  4846                           
  4847                           	psect	text30
  4848  000F1E                     __ptext30:
  4849                           	opt stack 0
  4850  000F1E                     _TMR0_ISR:
  4851                           	opt stack 22
  4852                           
  4853                           ;tmr0.c: 85: TMR0H = timer0ReloadVal16bit >> 8;
  4854                           
  4855                           ;incstack = 0
  4856  000F1E  503D               	movf	_timer0ReloadVal16bit+1,w,c	;volatile
  4857  000F20  6ED7               	movwf	4055,c	;volatile
  4858                           
  4859                           ;tmr0.c: 86: TMR0L = (uint8_t) timer0ReloadVal16bit;
  4860  000F22  C03C  FFD6         	movff	_timer0ReloadVal16bit,4054	;volatile
  4861                           
  4862                           ;tmr0.c: 88: time++;
  4863  000F26  0E01               	movlw	1
  4864  000F28  262F               	addwf	_time,f,c
  4865  000F2A  0E00               	movlw	0
  4866  000F2C  2230               	addwfc	_time+1,f,c
  4867  000F2E  2231               	addwfc	_time+2,f,c
  4868  000F30  2232               	addwfc	_time+3,f,c
  4869                           
  4870                           ;tmr0.c: 90: INTCONbits.TMR0IF = 0;
  4871  000F32  94F2               	bcf	intcon,2,c	;volatile
  4872  000F34  0012               	return		;funcret
  4873  000F36                     __end_of_TMR0_ISR:
  4874                           	opt stack 0
  4875                           pclatu	equ	0xFFB
  4876                           pclath	equ	0xFFA
  4877                           tblptru	equ	0xFF8
  4878                           tblptrh	equ	0xFF7
  4879                           tblptrl	equ	0xFF6
  4880                           tablat	equ	0xFF5
  4881                           prodh	equ	0xFF4
  4882                           prodl	equ	0xFF3
  4883                           intcon	equ	0xFF2
  4884                           postinc0	equ	0xFEE
  4885                           fsr0h	equ	0xFEA
  4886                           fsr0l	equ	0xFE9
  4887                           wreg	equ	0xFE8
  4888                           indf1	equ	0xFE7
  4889                           postdec1	equ	0xFE5
  4890                           plusw1	equ	0xFE3
  4891                           fsr1h	equ	0xFE2
  4892                           fsr1l	equ	0xFE1
  4893                           indf2	equ	0xFDF
  4894                           postinc2	equ	0xFDE
  4895                           postdec2	equ	0xFDD
  4896                           plusw2	equ	0xFDB
  4897                           fsr2h	equ	0xFDA
  4898                           fsr2l	equ	0xFD9
  4899                           status	equ	0xFD8
  4900                           
  4901 ;; *************** function _EUSART1_Transmit_ISR *****************
  4902 ;; Defined at:
  4903 ;;		line 149 in file "UART.c"
  4904 ;; Parameters:    Size  Location     Type
  4905 ;;		None
  4906 ;; Auto vars:     Size  Location     Type
  4907 ;;		None
  4908 ;; Return value:  Size  Location     Type
  4909 ;;                  1    wreg      void 
  4910 ;; Registers used:
  4911 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4912 ;; Tracked objects:
  4913 ;;		On entry : 0/0
  4914 ;;		On exit  : 0/0
  4915 ;;		Unchanged: 0/0
  4916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4917 ;;      Params:         0       0       0       0       0       0       0
  4918 ;;      Locals:         0       0       0       0       0       0       0
  4919 ;;      Temps:          0       0       0       0       0       0       0
  4920 ;;      Totals:         0       0       0       0       0       0       0
  4921 ;;Total ram usage:        0 bytes
  4922 ;; Hardware stack levels used:    1
  4923 ;; Hardware stack levels required when called:    2
  4924 ;; This function calls:
  4925 ;;		i2_UART_buff_get
  4926 ;;		i2_UART_buff_size
  4927 ;; This function is called by:
  4928 ;;		_INTERRUPT_InterruptManager
  4929 ;; This function uses a non-reentrant model
  4930 ;;
  4931                           
  4932                           	psect	text31
  4933  000DA0                     __ptext31:
  4934                           	opt stack 0
  4935  000DA0                     _EUSART1_Transmit_ISR:
  4936                           	opt stack 20
  4937                           
  4938                           ;UART.c: 151: if (UART_buff_size(&output_buffer) > 0) {
  4939                           
  4940                           ;incstack = 0
  4941  000DA0  0E00               	movlw	low _output_buffer
  4942  000DA2  6E01               	movwf	i2UART_buff_size@_this,c
  4943  000DA4  0E01               	movlw	high _output_buffer
  4944  000DA6  6E02               	movwf	i2UART_buff_size@_this+1,c
  4945  000DA8  ECB1  F007         	call	i2_UART_buff_size	;wreg free
  4946  000DAC  BE02               	btfsc	?i2_UART_buff_size+1,7,c
  4947  000DAE  D00D               	goto	i2l2123
  4948  000DB0  5002               	movf	?i2_UART_buff_size+1,w,c
  4949  000DB2  E103               	bnz	i2u110_40
  4950  000DB4  0401               	decf	?i2_UART_buff_size,w,c
  4951  000DB6  A0D8               	btfss	status,0,c
  4952  000DB8  D008               	goto	i2l2123
  4953  000DBA                     i2u110_40:
  4954                           
  4955                           ;UART.c: 152: TXREG1 = UART_buff_get(&output_buffer);
  4956  000DBA  0E00               	movlw	low _output_buffer
  4957  000DBC  6E07               	movwf	i2UART_buff_get@_this,c
  4958  000DBE  0E01               	movlw	high _output_buffer
  4959  000DC0  6E08               	movwf	i2UART_buff_get@_this+1,c
  4960  000DC2  EC7F  F005         	call	i2_UART_buff_get	;wreg free
  4961  000DC6  6EAD               	movwf	4013,c	;volatile
  4962                           
  4963                           ;UART.c: 153: } else {
  4964  000DC8  0012               	return	
  4965  000DCA                     i2l2123:
  4966                           
  4967                           ;UART.c: 154: Transmit_stall = 1;
  4968  000DCA  0E01               	movlw	1
  4969  000DCC  6E44               	movwf	_Transmit_stall,c
  4970                           
  4971                           ;UART.c: 155: PIE1bits.TX1IE = 0;
  4972  000DCE  989D               	bcf	3997,4,c	;volatile
  4973  000DD0  0012               	return	
  4974  000DD2                     __end_of_EUSART1_Transmit_ISR:
  4975                           	opt stack 0
  4976                           pclatu	equ	0xFFB
  4977                           pclath	equ	0xFFA
  4978                           tblptru	equ	0xFF8
  4979                           tblptrh	equ	0xFF7
  4980                           tblptrl	equ	0xFF6
  4981                           tablat	equ	0xFF5
  4982                           prodh	equ	0xFF4
  4983                           prodl	equ	0xFF3
  4984                           intcon	equ	0xFF2
  4985                           postinc0	equ	0xFEE
  4986                           fsr0h	equ	0xFEA
  4987                           fsr0l	equ	0xFE9
  4988                           wreg	equ	0xFE8
  4989                           indf1	equ	0xFE7
  4990                           postdec1	equ	0xFE5
  4991                           plusw1	equ	0xFE3
  4992                           fsr1h	equ	0xFE2
  4993                           fsr1l	equ	0xFE1
  4994                           indf2	equ	0xFDF
  4995                           postinc2	equ	0xFDE
  4996                           postdec2	equ	0xFDD
  4997                           plusw2	equ	0xFDB
  4998                           fsr2h	equ	0xFDA
  4999                           fsr2l	equ	0xFD9
  5000                           status	equ	0xFD8
  5001                           
  5002 ;; *************** function i2_UART_buff_size *****************
  5003 ;; Defined at:
  5004 ;;		line 101 in file "UART.c"
  5005 ;; Parameters:    Size  Location     Type
  5006 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
  5007 ;;		 -> output_buffer(106), input_buffer(106), 
  5008 ;; Auto vars:     Size  Location     Type
  5009 ;;		None
  5010 ;; Return value:  Size  Location     Type
  5011 ;;                  2    0[COMRAM] int 
  5012 ;; Registers used:
  5013 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5014 ;; Tracked objects:
  5015 ;;		On entry : 0/0
  5016 ;;		On exit  : 0/0
  5017 ;;		Unchanged: 0/0
  5018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5019 ;;      Params:         2       0       0       0       0       0       0
  5020 ;;      Locals:         0       0       0       0       0       0       0
  5021 ;;      Temps:          0       0       0       0       0       0       0
  5022 ;;      Totals:         2       0       0       0       0       0       0
  5023 ;;Total ram usage:        2 bytes
  5024 ;; Hardware stack levels used:    1
  5025 ;; This function calls:
  5026 ;;		Nothing
  5027 ;; This function is called by:
  5028 ;;		_EUSART1_Transmit_ISR
  5029 ;; This function uses a non-reentrant model
  5030 ;;
  5031                           
  5032                           	psect	text32
  5033  000F62                     __ptext32:
  5034                           	opt stack 0
  5035  000F62                     i2_UART_buff_size:
  5036                           	opt stack 21
  5037                           
  5038                           ;UART.c: 102: return (_this->count);
  5039                           
  5040                           ;incstack = 0
  5041  000F62  EE20 F068          	lfsr	2,104
  5042  000F66  5001               	movf	i2UART_buff_size@_this,w,c
  5043  000F68  26D9               	addwf	fsr2l,f,c
  5044  000F6A  5002               	movf	i2UART_buff_size@_this+1,w,c
  5045  000F6C  22DA               	addwfc	fsr2h,f,c
  5046  000F6E  CFDE F001          	movff	postinc2,?i2_UART_buff_size
  5047  000F72  CFDD F002          	movff	postdec2,?i2_UART_buff_size+1
  5048  000F76  0012               	return	
  5049  000F78                     __end_ofi2_UART_buff_size:
  5050                           	opt stack 0
  5051                           pclatu	equ	0xFFB
  5052                           pclath	equ	0xFFA
  5053                           tblptru	equ	0xFF8
  5054                           tblptrh	equ	0xFF7
  5055                           tblptrl	equ	0xFF6
  5056                           tablat	equ	0xFF5
  5057                           prodh	equ	0xFF4
  5058                           prodl	equ	0xFF3
  5059                           intcon	equ	0xFF2
  5060                           postinc0	equ	0xFEE
  5061                           fsr0h	equ	0xFEA
  5062                           fsr0l	equ	0xFE9
  5063                           wreg	equ	0xFE8
  5064                           indf1	equ	0xFE7
  5065                           postdec1	equ	0xFE5
  5066                           plusw1	equ	0xFE3
  5067                           fsr1h	equ	0xFE2
  5068                           fsr1l	equ	0xFE1
  5069                           indf2	equ	0xFDF
  5070                           postinc2	equ	0xFDE
  5071                           postdec2	equ	0xFDD
  5072                           plusw2	equ	0xFDB
  5073                           fsr2h	equ	0xFDA
  5074                           fsr2l	equ	0xFD9
  5075                           status	equ	0xFD8
  5076                           
  5077 ;; *************** function i2_UART_buff_get *****************
  5078 ;; Defined at:
  5079 ;;		line 80 in file "UART.c"
  5080 ;; Parameters:    Size  Location     Type
  5081 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  5082 ;;		 -> output_buffer(106), input_buffer(106), 
  5083 ;; Auto vars:     Size  Location     Type
  5084 ;;  UART_buff_ge    1   10[COMRAM] unsigned char 
  5085 ;; Return value:  Size  Location     Type
  5086 ;;                  1    wreg      unsigned char 
  5087 ;; Registers used:
  5088 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5089 ;; Tracked objects:
  5090 ;;		On entry : 0/0
  5091 ;;		On exit  : 0/0
  5092 ;;		Unchanged: 0/0
  5093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5094 ;;      Params:         2       0       0       0       0       0       0
  5095 ;;      Locals:         1       0       0       0       0       0       0
  5096 ;;      Temps:          2       0       0       0       0       0       0
  5097 ;;      Totals:         5       0       0       0       0       0       0
  5098 ;;Total ram usage:        5 bytes
  5099 ;; Hardware stack levels used:    1
  5100 ;; Hardware stack levels required when called:    1
  5101 ;; This function calls:
  5102 ;;		i2_UART_buff_modulo_inc
  5103 ;; This function is called by:
  5104 ;;		_EUSART1_Transmit_ISR
  5105 ;; This function uses a non-reentrant model
  5106 ;;
  5107                           
  5108                           	psect	text33
  5109  000AFE                     __ptext33:
  5110                           	opt stack 0
  5111  000AFE                     i2_UART_buff_get:
  5112                           	opt stack 20
  5113                           
  5114                           ;UART.c: 81: unsigned char c;
  5115                           ;UART.c: 82: if (_this->count > 0) {
  5116                           
  5117                           ;incstack = 0
  5118  000AFE  EE20 F068          	lfsr	2,104
  5119  000B02  5007               	movf	i2UART_buff_get@_this,w,c
  5120  000B04  26D9               	addwf	fsr2l,f,c
  5121  000B06  5008               	movf	i2UART_buff_get@_this+1,w,c
  5122  000B08  22DA               	addwfc	fsr2h,f,c
  5123  000B0A  0E01               	movlw	1
  5124  000B0C  BEDB               	btfsc	plusw2,7,c
  5125  000B0E  D03C               	goto	i2l2067
  5126  000B10  0E01               	movlw	1
  5127  000B12  50DB               	movf	plusw2,w,c
  5128  000B14  E103               	bnz	i2u103_40
  5129  000B16  04DE               	decf	postinc2,w,c
  5130  000B18  A0D8               	btfss	status,0,c
  5131  000B1A  D036               	goto	i2l2067
  5132  000B1C                     i2u103_40:
  5133                           
  5134                           ;UART.c: 83: c = _this->buf[_this->tail];
  5135  000B1C  EE20 F066          	lfsr	2,102
  5136  000B20  5007               	movf	i2UART_buff_get@_this,w,c
  5137  000B22  26D9               	addwf	fsr2l,f,c
  5138  000B24  5008               	movf	i2UART_buff_get@_this+1,w,c
  5139  000B26  22DA               	addwfc	fsr2h,f,c
  5140  000B28  CFDE F009          	movff	postinc2,??i2_UART_buff_get
  5141  000B2C  CFDD F00A          	movff	postdec2,??i2_UART_buff_get+1
  5142  000B30  5009               	movf	??i2_UART_buff_get,w,c
  5143  000B32  2407               	addwf	i2UART_buff_get@_this,w,c
  5144  000B34  6ED9               	movwf	fsr2l,c
  5145  000B36  500A               	movf	??i2_UART_buff_get+1,w,c
  5146  000B38  2008               	addwfc	i2UART_buff_get@_this+1,w,c
  5147  000B3A  6EDA               	movwf	fsr2h,c
  5148  000B3C  50DF               	movf	indf2,w,c
  5149  000B3E  6E0B               	movwf	i2UART_buff_get@c,c
  5150                           
  5151                           ;UART.c: 84: _this->tail = UART_buff_modulo_inc(_this->tail, 100);
  5152  000B40  EE20 F066          	lfsr	2,102
  5153  000B44  5007               	movf	i2UART_buff_get@_this,w,c
  5154  000B46  26D9               	addwf	fsr2l,f,c
  5155  000B48  5008               	movf	i2UART_buff_get@_this+1,w,c
  5156  000B4A  22DA               	addwfc	fsr2h,f,c
  5157  000B4C  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  5158  000B50  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  5159  000B54  0E00               	movlw	0
  5160  000B56  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  5161  000B58  0E64               	movlw	100
  5162  000B5A  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  5163  000B5C  EC41  F007         	call	i2_UART_buff_modulo_inc	;wreg free
  5164  000B60  EE20 F066          	lfsr	2,102
  5165  000B64  5007               	movf	i2UART_buff_get@_this,w,c
  5166  000B66  26D9               	addwf	fsr2l,f,c
  5167  000B68  5008               	movf	i2UART_buff_get@_this+1,w,c
  5168  000B6A  22DA               	addwfc	fsr2h,f,c
  5169  000B6C  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  5170  000B70  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  5171                           
  5172                           ;UART.c: 85: --_this->count;
  5173  000B74  EE20 F068          	lfsr	2,104
  5174  000B78  5007               	movf	i2UART_buff_get@_this,w,c
  5175  000B7A  26D9               	addwf	fsr2l,f,c
  5176  000B7C  5008               	movf	i2UART_buff_get@_this+1,w,c
  5177  000B7E  22DA               	addwfc	fsr2h,f,c
  5178  000B80  06DE               	decf	postinc2,f,c
  5179  000B82  0E00               	movlw	0
  5180  000B84  5ADD               	subwfb	postdec2,f,c
  5181                           
  5182                           ;UART.c: 86: } else {
  5183  000B86  D002               	goto	i2l94
  5184  000B88                     i2l2067:
  5185                           
  5186                           ;UART.c: 87: c = 0;
  5187  000B88  0E00               	movlw	0
  5188  000B8A  6E0B               	movwf	i2UART_buff_get@c,c
  5189  000B8C                     i2l94:
  5190                           
  5191                           ;UART.c: 88: }
  5192                           ;UART.c: 89: return (c);
  5193  000B8C  500B               	movf	i2UART_buff_get@c,w,c
  5194  000B8E  0012               	return	
  5195  000B90                     __end_ofi2_UART_buff_get:
  5196                           	opt stack 0
  5197                           pclatu	equ	0xFFB
  5198                           pclath	equ	0xFFA
  5199                           tblptru	equ	0xFF8
  5200                           tblptrh	equ	0xFF7
  5201                           tblptrl	equ	0xFF6
  5202                           tablat	equ	0xFF5
  5203                           prodh	equ	0xFF4
  5204                           prodl	equ	0xFF3
  5205                           intcon	equ	0xFF2
  5206                           postinc0	equ	0xFEE
  5207                           fsr0h	equ	0xFEA
  5208                           fsr0l	equ	0xFE9
  5209                           wreg	equ	0xFE8
  5210                           indf1	equ	0xFE7
  5211                           postdec1	equ	0xFE5
  5212                           plusw1	equ	0xFE3
  5213                           fsr1h	equ	0xFE2
  5214                           fsr1l	equ	0xFE1
  5215                           indf2	equ	0xFDF
  5216                           postinc2	equ	0xFDE
  5217                           postdec2	equ	0xFDD
  5218                           plusw2	equ	0xFDB
  5219                           fsr2h	equ	0xFDA
  5220                           fsr2l	equ	0xFD9
  5221                           status	equ	0xFD8
  5222                           
  5223 ;; *************** function _EUSART1_Receive_ISR *****************
  5224 ;; Defined at:
  5225 ;;		line 138 in file "UART.c"
  5226 ;; Parameters:    Size  Location     Type
  5227 ;;		None
  5228 ;; Auto vars:     Size  Location     Type
  5229 ;;  data            1   11[COMRAM] unsigned char 
  5230 ;; Return value:  Size  Location     Type
  5231 ;;                  1    wreg      void 
  5232 ;; Registers used:
  5233 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5234 ;; Tracked objects:
  5235 ;;		On entry : 0/0
  5236 ;;		On exit  : 0/0
  5237 ;;		Unchanged: 0/0
  5238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5239 ;;      Params:         0       0       0       0       0       0       0
  5240 ;;      Locals:         1       0       0       0       0       0       0
  5241 ;;      Temps:          0       0       0       0       0       0       0
  5242 ;;      Totals:         1       0       0       0       0       0       0
  5243 ;;Total ram usage:        1 bytes
  5244 ;; Hardware stack levels used:    1
  5245 ;; Hardware stack levels required when called:    2
  5246 ;; This function calls:
  5247 ;;		i2_UART_buff_put
  5248 ;; This function is called by:
  5249 ;;		_INTERRUPT_InterruptManager
  5250 ;; This function uses a non-reentrant model
  5251 ;;
  5252                           
  5253                           	psect	text34
  5254  000EE8                     __ptext34:
  5255                           	opt stack 0
  5256  000EE8                     _EUSART1_Receive_ISR:
  5257                           	opt stack 20
  5258                           
  5259                           ;UART.c: 139: if (1 == RC1STAbits.OERR) {
  5260                           
  5261                           ;incstack = 0
  5262  000EE8  A2AB               	btfss	4011,1,c	;volatile
  5263  000EEA  D002               	goto	i2l125
  5264                           
  5265                           ;UART.c: 142: RC1STAbits.CREN = 0;
  5266  000EEC  98AB               	bcf	4011,4,c	;volatile
  5267                           
  5268                           ;UART.c: 143: RC1STAbits.CREN = 1;
  5269  000EEE  88AB               	bsf	4011,4,c	;volatile
  5270  000EF0                     i2l125:
  5271                           
  5272                           ;UART.c: 144: }
  5273                           ;UART.c: 145: unsigned char data = RCREG1;
  5274  000EF0  CFAE F00C          	movff	4014,EUSART1_Receive_ISR@data	;volatile
  5275                           
  5276                           ;UART.c: 146: UART_buff_put(&input_buffer, data);
  5277  000EF4  0E6A               	movlw	low _input_buffer
  5278  000EF6  6E07               	movwf	i2UART_buff_put@_this,c
  5279  000EF8  0E01               	movlw	high _input_buffer
  5280  000EFA  6E08               	movwf	i2UART_buff_put@_this+1,c
  5281  000EFC  C00C  F009         	movff	EUSART1_Receive_ISR@data,i2UART_buff_put@c
  5282  000F00  EC34  F003         	call	i2_UART_buff_put	;wreg free
  5283  000F04  0012               	return		;funcret
  5284  000F06                     __end_of_EUSART1_Receive_ISR:
  5285                           	opt stack 0
  5286                           pclatu	equ	0xFFB
  5287                           pclath	equ	0xFFA
  5288                           tblptru	equ	0xFF8
  5289                           tblptrh	equ	0xFF7
  5290                           tblptrl	equ	0xFF6
  5291                           tablat	equ	0xFF5
  5292                           prodh	equ	0xFF4
  5293                           prodl	equ	0xFF3
  5294                           intcon	equ	0xFF2
  5295                           postinc0	equ	0xFEE
  5296                           fsr0h	equ	0xFEA
  5297                           fsr0l	equ	0xFE9
  5298                           wreg	equ	0xFE8
  5299                           indf1	equ	0xFE7
  5300                           postdec1	equ	0xFE5
  5301                           plusw1	equ	0xFE3
  5302                           fsr1h	equ	0xFE2
  5303                           fsr1l	equ	0xFE1
  5304                           indf2	equ	0xFDF
  5305                           postinc2	equ	0xFDE
  5306                           postdec2	equ	0xFDD
  5307                           plusw2	equ	0xFDB
  5308                           fsr2h	equ	0xFDA
  5309                           fsr2l	equ	0xFD9
  5310                           status	equ	0xFD8
  5311                           
  5312 ;; *************** function i2_UART_buff_put *****************
  5313 ;; Defined at:
  5314 ;;		line 67 in file "UART.c"
  5315 ;; Parameters:    Size  Location     Type
  5316 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  5317 ;;		 -> output_buffer(106), input_buffer(106), 
  5318 ;;  c               1    8[COMRAM] const unsigned char 
  5319 ;; Auto vars:     Size  Location     Type
  5320 ;;		None
  5321 ;; Return value:  Size  Location     Type
  5322 ;;                  1    wreg      void 
  5323 ;; Registers used:
  5324 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5325 ;; Tracked objects:
  5326 ;;		On entry : 0/0
  5327 ;;		On exit  : 0/0
  5328 ;;		Unchanged: 0/0
  5329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5330 ;;      Params:         3       0       0       0       0       0       0
  5331 ;;      Locals:         0       0       0       0       0       0       0
  5332 ;;      Temps:          2       0       0       0       0       0       0
  5333 ;;      Totals:         5       0       0       0       0       0       0
  5334 ;;Total ram usage:        5 bytes
  5335 ;; Hardware stack levels used:    1
  5336 ;; Hardware stack levels required when called:    1
  5337 ;; This function calls:
  5338 ;;		i2_UART_buff_modulo_inc
  5339 ;; This function is called by:
  5340 ;;		_EUSART1_Receive_ISR
  5341 ;; This function uses a non-reentrant model
  5342 ;;
  5343                           
  5344                           	psect	text35
  5345  000668                     __ptext35:
  5346                           	opt stack 0
  5347  000668                     i2_UART_buff_put:
  5348                           	opt stack 20
  5349                           
  5350                           ;UART.c: 68: if (_this->count < 100) {
  5351                           
  5352                           ;incstack = 0
  5353  000668  EE20 F068          	lfsr	2,104
  5354  00066C  5007               	movf	i2UART_buff_put@_this,w,c
  5355  00066E  26D9               	addwf	fsr2l,f,c
  5356  000670  5008               	movf	i2UART_buff_put@_this+1,w,c
  5357  000672  22DA               	addwfc	fsr2h,f,c
  5358  000674  0E01               	movlw	1
  5359  000676  BEDB               	btfsc	plusw2,7,c
  5360  000678  D007               	goto	i2l2047
  5361  00067A  0E01               	movlw	1
  5362  00067C  50DB               	movf	plusw2,w,c
  5363  00067E  E13A               	bnz	i2l2053
  5364  000680  0E64               	movlw	100
  5365  000682  5CDE               	subwf	postinc2,w,c
  5366  000684  B0D8               	btfsc	status,0,c
  5367  000686  D036               	goto	i2l2053
  5368  000688                     i2l2047:
  5369                           
  5370                           ;UART.c: 69: _this->buf[_this->head] = c;
  5371  000688  EE20 F064          	lfsr	2,100
  5372  00068C  5007               	movf	i2UART_buff_put@_this,w,c
  5373  00068E  26D9               	addwf	fsr2l,f,c
  5374  000690  5008               	movf	i2UART_buff_put@_this+1,w,c
  5375  000692  22DA               	addwfc	fsr2h,f,c
  5376  000694  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  5377  000698  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  5378  00069C  500A               	movf	??i2_UART_buff_put,w,c
  5379  00069E  2407               	addwf	i2UART_buff_put@_this,w,c
  5380  0006A0  6ED9               	movwf	fsr2l,c
  5381  0006A2  500B               	movf	??i2_UART_buff_put+1,w,c
  5382  0006A4  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  5383  0006A6  6EDA               	movwf	fsr2h,c
  5384  0006A8  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  5385                           
  5386                           ;UART.c: 70: _this->head = UART_buff_modulo_inc(_this->head, 100);
  5387  0006AC  EE20 F064          	lfsr	2,100
  5388  0006B0  5007               	movf	i2UART_buff_put@_this,w,c
  5389  0006B2  26D9               	addwf	fsr2l,f,c
  5390  0006B4  5008               	movf	i2UART_buff_put@_this+1,w,c
  5391  0006B6  22DA               	addwfc	fsr2h,f,c
  5392  0006B8  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  5393  0006BC  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  5394  0006C0  0E00               	movlw	0
  5395  0006C2  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  5396  0006C4  0E64               	movlw	100
  5397  0006C6  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  5398  0006C8  EC41  F007         	call	i2_UART_buff_modulo_inc	;wreg free
  5399  0006CC  EE20 F064          	lfsr	2,100
  5400  0006D0  5007               	movf	i2UART_buff_put@_this,w,c
  5401  0006D2  26D9               	addwf	fsr2l,f,c
  5402  0006D4  5008               	movf	i2UART_buff_put@_this+1,w,c
  5403  0006D6  22DA               	addwfc	fsr2h,f,c
  5404  0006D8  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  5405  0006DC  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  5406                           
  5407                           ;UART.c: 71: ++_this->count;
  5408  0006E0  EE20 F068          	lfsr	2,104
  5409  0006E4  5007               	movf	i2UART_buff_put@_this,w,c
  5410  0006E6  26D9               	addwf	fsr2l,f,c
  5411  0006E8  5008               	movf	i2UART_buff_put@_this+1,w,c
  5412  0006EA  22DA               	addwfc	fsr2h,f,c
  5413  0006EC  2ADE               	incf	postinc2,f,c
  5414  0006EE  0E00               	movlw	0
  5415  0006F0  22DD               	addwfc	postdec2,f,c
  5416                           
  5417                           ;UART.c: 72: } else {
  5418  0006F2  0012               	return	
  5419  0006F4                     i2l2053:
  5420                           
  5421                           ;UART.c: 73: _this->buf[_this->head] = c;
  5422  0006F4  EE20 F064          	lfsr	2,100
  5423  0006F8  5007               	movf	i2UART_buff_put@_this,w,c
  5424  0006FA  26D9               	addwf	fsr2l,f,c
  5425  0006FC  5008               	movf	i2UART_buff_put@_this+1,w,c
  5426  0006FE  22DA               	addwfc	fsr2h,f,c
  5427  000700  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  5428  000704  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  5429  000708  500A               	movf	??i2_UART_buff_put,w,c
  5430  00070A  2407               	addwf	i2UART_buff_put@_this,w,c
  5431  00070C  6ED9               	movwf	fsr2l,c
  5432  00070E  500B               	movf	??i2_UART_buff_put+1,w,c
  5433  000710  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  5434  000712  6EDA               	movwf	fsr2h,c
  5435  000714  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  5436                           
  5437                           ;UART.c: 74: _this->head = UART_buff_modulo_inc(_this->head, 100);
  5438  000718  EE20 F064          	lfsr	2,100
  5439  00071C  5007               	movf	i2UART_buff_put@_this,w,c
  5440  00071E  26D9               	addwf	fsr2l,f,c
  5441  000720  5008               	movf	i2UART_buff_put@_this+1,w,c
  5442  000722  22DA               	addwfc	fsr2h,f,c
  5443  000724  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  5444  000728  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  5445  00072C  0E00               	movlw	0
  5446  00072E  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  5447  000730  0E64               	movlw	100
  5448  000732  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  5449  000734  EC41  F007         	call	i2_UART_buff_modulo_inc	;wreg free
  5450  000738  EE20 F064          	lfsr	2,100
  5451  00073C  5007               	movf	i2UART_buff_put@_this,w,c
  5452  00073E  26D9               	addwf	fsr2l,f,c
  5453  000740  5008               	movf	i2UART_buff_put@_this+1,w,c
  5454  000742  22DA               	addwfc	fsr2h,f,c
  5455  000744  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  5456  000748  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  5457                           
  5458                           ;UART.c: 75: _this->tail = UART_buff_modulo_inc(_this->tail, 100);
  5459  00074C  EE20 F066          	lfsr	2,102
  5460  000750  5007               	movf	i2UART_buff_put@_this,w,c
  5461  000752  26D9               	addwf	fsr2l,f,c
  5462  000754  5008               	movf	i2UART_buff_put@_this+1,w,c
  5463  000756  22DA               	addwfc	fsr2h,f,c
  5464  000758  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  5465  00075C  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  5466  000760  0E00               	movlw	0
  5467  000762  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  5468  000764  0E64               	movlw	100
  5469  000766  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  5470  000768  EC41  F007         	call	i2_UART_buff_modulo_inc	;wreg free
  5471  00076C  EE20 F066          	lfsr	2,102
  5472  000770  5007               	movf	i2UART_buff_put@_this,w,c
  5473  000772  26D9               	addwf	fsr2l,f,c
  5474  000774  5008               	movf	i2UART_buff_put@_this+1,w,c
  5475  000776  22DA               	addwfc	fsr2h,f,c
  5476  000778  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  5477  00077C  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  5478  000780  0012               	return	
  5479  000782                     __end_ofi2_UART_buff_put:
  5480                           	opt stack 0
  5481                           pclatu	equ	0xFFB
  5482                           pclath	equ	0xFFA
  5483                           tblptru	equ	0xFF8
  5484                           tblptrh	equ	0xFF7
  5485                           tblptrl	equ	0xFF6
  5486                           tablat	equ	0xFF5
  5487                           prodh	equ	0xFF4
  5488                           prodl	equ	0xFF3
  5489                           intcon	equ	0xFF2
  5490                           postinc0	equ	0xFEE
  5491                           fsr0h	equ	0xFEA
  5492                           fsr0l	equ	0xFE9
  5493                           wreg	equ	0xFE8
  5494                           indf1	equ	0xFE7
  5495                           postdec1	equ	0xFE5
  5496                           plusw1	equ	0xFE3
  5497                           fsr1h	equ	0xFE2
  5498                           fsr1l	equ	0xFE1
  5499                           indf2	equ	0xFDF
  5500                           postinc2	equ	0xFDE
  5501                           postdec2	equ	0xFDD
  5502                           plusw2	equ	0xFDB
  5503                           fsr2h	equ	0xFDA
  5504                           fsr2l	equ	0xFD9
  5505                           status	equ	0xFD8
  5506                           
  5507 ;; *************** function i2_UART_buff_modulo_inc *****************
  5508 ;; Defined at:
  5509 ;;		line 105 in file "UART.c"
  5510 ;; Parameters:    Size  Location     Type
  5511 ;;  value           2    0[COMRAM] const unsigned int 
  5512 ;;  modulus         2    2[COMRAM] const unsigned int 
  5513 ;; Auto vars:     Size  Location     Type
  5514 ;;  UART_buff_mo    2    4[COMRAM] unsigned int 
  5515 ;; Return value:  Size  Location     Type
  5516 ;;                  2    0[COMRAM] unsigned int 
  5517 ;; Registers used:
  5518 ;;		wreg, status,2, status,0
  5519 ;; Tracked objects:
  5520 ;;		On entry : 0/0
  5521 ;;		On exit  : 0/0
  5522 ;;		Unchanged: 0/0
  5523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5524 ;;      Params:         4       0       0       0       0       0       0
  5525 ;;      Locals:         2       0       0       0       0       0       0
  5526 ;;      Temps:          0       0       0       0       0       0       0
  5527 ;;      Totals:         6       0       0       0       0       0       0
  5528 ;;Total ram usage:        6 bytes
  5529 ;; Hardware stack levels used:    1
  5530 ;; This function calls:
  5531 ;;		Nothing
  5532 ;; This function is called by:
  5533 ;;		i2_UART_buff_put
  5534 ;;		i2_UART_buff_get
  5535 ;; This function uses a non-reentrant model
  5536 ;;
  5537                           
  5538                           	psect	text36
  5539  000E82                     __ptext36:
  5540                           	opt stack 0
  5541  000E82                     i2_UART_buff_modulo_inc:
  5542                           	opt stack 20
  5543                           
  5544                           ;UART.c: 106: unsigned int my_value = value + 1;
  5545                           
  5546                           ;incstack = 0
  5547  000E82  0E01               	movlw	1
  5548  000E84  2401               	addwf	i2UART_buff_modulo_inc@value,w,c
  5549  000E86  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  5550  000E88  0E00               	movlw	0
  5551  000E8A  2002               	addwfc	i2UART_buff_modulo_inc@value+1,w,c
  5552  000E8C  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  5553                           
  5554                           ;UART.c: 107: if (my_value >= modulus) {
  5555  000E8E  5003               	movf	i2UART_buff_modulo_inc@modulus,w,c
  5556  000E90  5C05               	subwf	i2UART_buff_modulo_inc@my_value,w,c
  5557  000E92  5004               	movf	i2UART_buff_modulo_inc@modulus+1,w,c
  5558  000E94  5806               	subwfb	i2UART_buff_modulo_inc@my_value+1,w,c
  5559  000E96  A0D8               	btfss	status,0,c
  5560  000E98  D004               	goto	i2l1975
  5561                           
  5562                           ;UART.c: 108: my_value = 0;
  5563  000E9A  0E00               	movlw	0
  5564  000E9C  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  5565  000E9E  0E00               	movlw	0
  5566  000EA0  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  5567  000EA2                     i2l1975:
  5568                           
  5569                           ;UART.c: 109: }
  5570                           ;UART.c: 110: return (my_value);
  5571  000EA2  C005  F001         	movff	i2UART_buff_modulo_inc@my_value,?i2_UART_buff_modulo_inc
  5572  000EA6  C006  F002         	movff	i2UART_buff_modulo_inc@my_value+1,?i2_UART_buff_modulo_inc+1
  5573  000EAA  0012               	return	
  5574  000EAC                     __end_ofi2_UART_buff_modulo_inc:
  5575                           	opt stack 0
  5576  0000                     pclatu	equ	0xFFB
  5577                           pclath	equ	0xFFA
  5578                           tblptru	equ	0xFF8
  5579                           tblptrh	equ	0xFF7
  5580                           tblptrl	equ	0xFF6
  5581                           tablat	equ	0xFF5
  5582                           prodh	equ	0xFF4
  5583                           prodl	equ	0xFF3
  5584                           intcon	equ	0xFF2
  5585                           postinc0	equ	0xFEE
  5586                           fsr0h	equ	0xFEA
  5587                           fsr0l	equ	0xFE9
  5588                           wreg	equ	0xFE8
  5589                           indf1	equ	0xFE7
  5590                           postdec1	equ	0xFE5
  5591                           plusw1	equ	0xFE3
  5592                           fsr1h	equ	0xFE2
  5593                           fsr1l	equ	0xFE1
  5594                           indf2	equ	0xFDF
  5595                           postinc2	equ	0xFDE
  5596                           postdec2	equ	0xFDD
  5597                           plusw2	equ	0xFDB
  5598                           fsr2h	equ	0xFDA
  5599                           fsr2l	equ	0xFD9
  5600                           status	equ	0xFD8
  5601                           pclatu	equ	0xFFB
  5602                           pclath	equ	0xFFA
  5603                           tblptru	equ	0xFF8
  5604                           tblptrh	equ	0xFF7
  5605                           tblptrl	equ	0xFF6
  5606                           tablat	equ	0xFF5
  5607                           prodh	equ	0xFF4
  5608                           prodl	equ	0xFF3
  5609                           intcon	equ	0xFF2
  5610                           postinc0	equ	0xFEE
  5611                           fsr0h	equ	0xFEA
  5612                           fsr0l	equ	0xFE9
  5613                           wreg	equ	0xFE8
  5614                           indf1	equ	0xFE7
  5615                           postdec1	equ	0xFE5
  5616                           plusw1	equ	0xFE3
  5617                           fsr1h	equ	0xFE2
  5618                           fsr1l	equ	0xFE1
  5619                           indf2	equ	0xFDF
  5620                           postinc2	equ	0xFDE
  5621                           postdec2	equ	0xFDD
  5622                           plusw2	equ	0xFDB
  5623                           fsr2h	equ	0xFDA
  5624                           fsr2l	equ	0xFD9
  5625                           status	equ	0xFD8
  5626                           
  5627                           	psect	rparam
  5628  0000                     pclatu	equ	0xFFB
  5629                           pclath	equ	0xFFA
  5630                           tblptru	equ	0xFF8
  5631                           tblptrh	equ	0xFF7
  5632                           tblptrl	equ	0xFF6
  5633                           tablat	equ	0xFF5
  5634                           prodh	equ	0xFF4
  5635                           prodl	equ	0xFF3
  5636                           intcon	equ	0xFF2
  5637                           postinc0	equ	0xFEE
  5638                           fsr0h	equ	0xFEA
  5639                           fsr0l	equ	0xFE9
  5640                           wreg	equ	0xFE8
  5641                           indf1	equ	0xFE7
  5642                           postdec1	equ	0xFE5
  5643                           plusw1	equ	0xFE3
  5644                           fsr1h	equ	0xFE2
  5645                           fsr1l	equ	0xFE1
  5646                           indf2	equ	0xFDF
  5647                           postinc2	equ	0xFDE
  5648                           postdec2	equ	0xFDD
  5649                           plusw2	equ	0xFDB
  5650                           fsr2h	equ	0xFDA
  5651                           fsr2l	equ	0xFD9
  5652                           status	equ	0xFD8
  5653                           
  5654                           	psect	temp
  5655  000045                     btemp:
  5656                           	opt stack 0
  5657  000045                     	ds	1
  5658  0000                     int$flags	set	btemp
  5659                           pclatu	equ	0xFFB
  5660                           pclath	equ	0xFFA
  5661                           tblptru	equ	0xFF8
  5662                           tblptrh	equ	0xFF7
  5663                           tblptrl	equ	0xFF6
  5664                           tablat	equ	0xFF5
  5665                           prodh	equ	0xFF4
  5666                           prodl	equ	0xFF3
  5667                           intcon	equ	0xFF2
  5668                           postinc0	equ	0xFEE
  5669                           fsr0h	equ	0xFEA
  5670                           fsr0l	equ	0xFE9
  5671                           wreg	equ	0xFE8
  5672                           indf1	equ	0xFE7
  5673                           postdec1	equ	0xFE5
  5674                           plusw1	equ	0xFE3
  5675                           fsr1h	equ	0xFE2
  5676                           fsr1l	equ	0xFE1
  5677                           indf2	equ	0xFDF
  5678                           postinc2	equ	0xFDE
  5679                           postdec2	equ	0xFDD
  5680                           plusw2	equ	0xFDB
  5681                           fsr2h	equ	0xFDA
  5682                           fsr2l	equ	0xFD9
  5683                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        10
    BSS         313
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     42      68
    BANK0           160    104     159
    BANK1           256      7     249
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 106
		 -> output_buffer(BANK1[106]), input_buffer(BANK1[106]), 

    memset@p	PTR unsigned char  size(2) Largest target is 106
		 -> output_buffer(BANK1[106]), input_buffer(BANK1[106]), 

    ComController@DTI	PTR unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK0[30]), 

    sendData@DTS	PTR unsigned char  size(2) Largest target is 4
		 -> ComController@DataToSend(BANK0[4]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK0[30]), sendData@SendArray(BANK0[30]), 

    SetDataDict@DataArray	PTR unsigned char  size(2) Largest target is 5
		 -> Start@Data(COMRAM[5]), ReadFaults@Data(COMRAM[4]), 

    GetDataDict@DataArray	PTR unsigned char  size(2) Largest target is 4
		 -> ComController@DataToSend(BANK0[4]), 

    cobs_decode@dst_write_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK0[30]), 

    cobs_decode@dst_buf_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK0[30]), 

    cobs_decode@dst_buf_end_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK0[30]), 

    cobs_decode@src_ptr	PTR const unsigned char  size(2) Largest target is 30
		 -> ReciveArray(BANK1[30]), 

    cobs_decode@src_end_ptr	PTR const unsigned char  size(2) Largest target is 30
		 -> ReciveArray(BANK1[30]), 

    cobs_encode@dst_write_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> sendData@COBSArray(BANK0[30]), 

    cobs_encode@dst_code_write_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> sendData@COBSArray(BANK0[30]), 

    cobs_encode@dst_buf_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> sendData@COBSArray(BANK0[30]), 

    cobs_encode@dst_buf_end_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> sendData@COBSArray(BANK0[30]), 

    cobs_encode@src_ptr	PTR const unsigned char  size(2) Largest target is 30
		 -> sendData@SendArray(BANK0[30]), 

    cobs_encode@src_end_ptr	PTR const unsigned char  size(2) Largest target is 30
		 -> sendData@SendArray(BANK0[30]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 106
		 -> output_buffer(BANK1[106]), input_buffer(BANK1[106]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 106
		 -> output_buffer(BANK1[106]), input_buffer(BANK1[106]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 106
		 -> output_buffer(BANK1[106]), input_buffer(BANK1[106]), 

    sp__memset	PTR void  size(2) Largest target is 106
		 -> output_buffer(BANK1[106]), input_buffer(BANK1[106]), 

    UART_buff_init@_this	PTR struct UART_ring_buff size(2) Largest target is 106
		 -> output_buffer(BANK1[106]), input_buffer(BANK1[106]), 


Critical Paths under _main in COMRAM

    _Receive_get->_UART_buff_get
    _Receive_available->_UART_buff_size
    _ComController->_sendData
    _sendData->_Send_put
    _Send_put->_UART_buff_get
    _Send_put->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc
    _UART_buff_get->_UART_buff_modulo_inc
    _EUSART1_Initialize->_UART_buff_init
    _UART_buff_init->_memset
    _ReadFaults->_SetDataDict

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _EUSART1_Transmit_ISR->i2_UART_buff_get
    i2_UART_buff_get->i2_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->i2_UART_buff_put
    i2_UART_buff_put->i2_UART_buff_modulo_inc

Critical Paths under _main in BANK0

    _updateComms->_receiveData
    _receiveData->_ComController
    _ComController->_sendData
    _sendData->_cobs_encode

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _updateComms->_receiveData

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   14752
                            _GetTime
                         _ReadFaults
                            _SetTime
                              _Start
                        _updateComms
 ---------------------------------------------------------------------------------
 (1) _updateComms                                          0     0      0   12348
                        _receiveData
 ---------------------------------------------------------------------------------
 (2) _receiveData                                         12    12      0   12348
                                             99 BANK0      5     5      0
                                              0 BANK1      7     7      0
                               _CRC8
                      _ComController
                  _Receive_available
                        _Receive_get
                        _cobs_decode
 ---------------------------------------------------------------------------------
 (3) _cobs_decode                                         24    16      8    1783
                                             26 COMRAM    10     2      8
                                              0 BANK0     14    14      0
 ---------------------------------------------------------------------------------
 (3) _Receive_get                                          0     0      0    1308
                      _UART_buff_get
 ---------------------------------------------------------------------------------
 (3) _Receive_available                                    2     0      2     176
                                             28 COMRAM     2     0      2
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (4) _UART_buff_size                                       2     0      2     176
                                             26 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _ComController                                        9     5      4    8211
                                             90 BANK0      9     5      4
                              _Delay
                        _GetDataDict
                           _sendData
 ---------------------------------------------------------------------------------
 (4) _sendData                                            81    74      7    6596
                                             38 COMRAM     4     4      0
                                             13 BANK0     77    70      7
                               _CRC8
                           _Send_put
                        _cobs_encode
 ---------------------------------------------------------------------------------
 (5) _cobs_encode                                         23    15      8    1613
                                             26 COMRAM    10     2      8
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (5) _Send_put                                             1     1      0    2913
                                             37 COMRAM     1     1      0
                      _UART_buff_get
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (6) _UART_buff_put                                        5     2      3    1574
                                             32 COMRAM     5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (4) _UART_buff_get                                        5     3      2    1308
                                             32 COMRAM     5     3      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _UART_buff_modulo_inc                                 6     2      4     850
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _CRC8                                                 7     4      3     604
                                             26 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (4) _GetDataDict                                          8     4      4     772
                                             26 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (4) _Delay                                                5     3      2     428
                                             26 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _Start                                                5     5      0    1553
                                             36 COMRAM     5     5      0
                           _ComStart
               _INTERRUPT_Initialize
                        _SetDataDict
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ComStart                                             0     0      0     726
                 _EUSART1_Initialize
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0     726
                     _UART_buff_init
 ---------------------------------------------------------------------------------
 (4) _UART_buff_init                                       2     0      2     726
                                             34 COMRAM     2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               8     2      6     552
                                             26 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (1) _SetTime                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ReadFaults                                           5     5      0     851
                                             34 COMRAM     5     5      0
                        _SetDataDict
 ---------------------------------------------------------------------------------
 (2) _SetDataDict                                          8     4      4     802
                                             26 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _GetTime                                              4     0      4       0
                                             26 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                          14    14      0    1209
                                             12 COMRAM    14    14      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR0_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Transmit_ISR                                 0     0      0     528
                    i2_UART_buff_get
                   i2_UART_buff_size
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_size                                    2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_get                                     5     3      2     480
                                              6 COMRAM     5     3      2
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Receive_ISR                                  1     1      0     681
                                             11 COMRAM     1     1      0
                    i2_UART_buff_put
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_put                                     5     2      3     658
                                              6 COMRAM     5     2      3
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (11) i2_UART_buff_modulo_inc                              6     2      4     298
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GetTime
   _ReadFaults
     _SetDataDict
   _SetTime
   _Start
     _ComStart
       _EUSART1_Initialize
         _UART_buff_init
           _memset
     _INTERRUPT_Initialize
     _SetDataDict
     _TMR0_Initialize
       _TMR0_StartTimer
   _updateComms
     _receiveData
       _CRC8
       _ComController
         _Delay
         _GetDataDict
         _sendData
           _CRC8
           _Send_put
             _UART_buff_get
               _UART_buff_modulo_inc
             _UART_buff_put
               _UART_buff_modulo_inc
           _cobs_encode
       _Receive_available
         _UART_buff_size
       _Receive_get
         _UART_buff_get
           _UART_buff_modulo_inc
       _cobs_decode

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
     i2_UART_buff_put
       i2_UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     i2_UART_buff_get
       i2_UART_buff_modulo_inc
     i2_UART_buff_size
   _TMR0_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      7      F9       6       97.3%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     68      9F       4       99.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2A      44       1       72.3%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1DC       9        0.0%
DATA                 0      0     1DC      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Fri Aug 11 22:01:06 2017

                __end_of_GetDataDict 09D4               i2_UART_buff_modulo_inc 0E82  
           cobs_encode@dst_write_ptr 0068                                   l45 0E06  
                                 l94 0AFA             GetDataDict@ReturnCounter 0022  
                       __CFG_CP0$OFF 000000                         __CFG_CP1$OFF 000000  
                       __CFG_CP2$OFF 000000                         __CFG_CP3$OFF 000000  
                                l343 09C0                                  l357 0A58  
                                l278 0D8A                                  l391 0D18  
                       __CFG_CPB$OFF 000000                         __CFG_CPD$OFF 000000  
                                prod 000FF3                                  wreg 000FE8  
      i2UART_buff_modulo_inc@modulus 0003          _COBS_DECODE_DST_BUF_LEN_MAX 0040  
                       __CFG_LVP$OFF 000000            SetDataDict@DataTableIndex 001B  
                               l2021 09E4                                 l2031 0A1E  
                               l2023 09EC                                 l2033 0A26  
                               l2041 0A5C                                 l2201 0AF6  
                               l2029 0A14                                 l2039 0A4E  
                               l2231 02DA                                 l2305 0D1E  
                               l2233 02E2                                 l2225 02C6  
                               l2401 00E8                                 l2315 0D76  
                               l2307 0D24                                 l2333 097C  
                               l2325 094C                                 l2181 056E  
                               l2237 02FC                                 l2343 09B6  
                               l2335 0986                                 l2327 0954  
                               l2175 0E78                                 l2255 034A  
                               l2407 00FC                                 l2337 098E  
                               l2345 09C4                                 l2281 03BC  
                               l2417 0126                                 l2409 0104  
                               l2291 0CEC                                 l2187 05DA  
                               l2283 03C8                                 l2275 039A  
                               l2435 01A2                                 l2427 0166  
                               l2381 0510                                 l2373 04A6  
                               l2437 01A6                                 l2517 0884  
                               l2471 0230                                 l1665 0E36  
                               l2297 0D02                                 l2385 052C  
                               l2377 04E4                                 l2449 01D0  
                               l2457 01E8                                 l2467 021C  
                               l1669 0E46                                 l2497 07B0  
              __end_of_ComController 093C                                 _CRC8 0CE6  
                               u1210 0A8A                                 u1051 0BF2  
                               u1060 0C94                                 u1070 0CA4  
                               u1080 0CB8                                 u1066 0C96  
                               u1078 0CA6                                 u1088 0CBA  
                               u1530 0796                                 u1607 0D7C  
                               u1580 0E22                                 u1597 07CE  
                               i2l94 0B8C                                 _main 0E00  
                    _TMR0_StartTimer 0FC8                                 _time 002F  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                               fsr2h 000FDA                                 fsr0l 000FE9  
                               indf1 000FE7                                 indf2 000FDF  
                               fsr1l 000FE1                                 fsr2l 000FD9  
                               btemp 0045                        __CFG_BORV$190 000000  
                               prodh 000FF4                                 prodl 000FF3  
                               start 00A0                        __CFG_IESO$OFF 000000  
                    __end_of_GetTime 0F9C                         ___param_bank 000000  
     i2UART_buff_modulo_inc@my_value 0005                                ?_CRC8 001B  
                    __end_of_SetTime 0F8A              ComController@DataToSend 00BF  
            __end_of_TMR0_Initialize 0ECA                                ?_main 0001  
                              _T0CON 000FD5                       __CFG_DEBUG$OFF 000000  
                              i2l125 0EF0                                i2l271 005A  
                              i2l275 0064                                i2l269 004E  
                              _TMR0H 000FD7                                _TMR0L 000FD6  
                              _Delay 0D6C                        __CFG_WRT0$OFF 000000  
                      __CFG_WRT1$OFF 000000                        __CFG_WRT2$OFF 000000  
                      __CFG_WRT3$OFF 000000                                _Count 002B  
               _EUSART1_Transmit_ISR 0DA0                       __CFG_EBTR0$OFF 000000  
                     __CFG_FCMEN$OFF 000000                       __CFG_EBTR1$OFF 000000  
                     __CFG_EBTR2$OFF 000000                       __CFG_EBTR3$OFF 000000  
                   __end_of_TMR0_ISR 0F36                                _Start 0B90  
                      __CFG_WRTB$OFF 000000                        __CFG_WRTC$OFF 000000  
                      __CFG_WRTD$OFF 000000                       __CFG_EBTRB$OFF 000000  
                 __CFG_MCLRE$EXTMCLR 000000             SetDataDict@ReturnCounter 0022  
                              pclath 000FFA                                tablat 000FF5  
                      ??_Receive_get 0026                        receiveData@CS 01F2  
                              plusw1 000FE3                                plusw2 000FDB  
                              status 000FD8                          _GetDataDict 093C  
                      ??_SetDataDict 001F                       __CFG_HFOFST$ON 000000  
                       ?_receiveData 0001                       __CFG_PBADEN$ON 000000  
                       __end_of_CRC8 0D30                     __end_of_ComStart 0FBE  
                         _ReadFaults 0C84                      __initialization 0C12  
         __end_of_EUSART1_Initialize 0D6C                         __end_of_main 0E2C  
                             ??_CRC8 001E          ?_INTERRUPT_InterruptManager 0001  
                             ??_main 002B                        __activetblptr 000002  
                   __end_of_Send_put 0E00            __size_ofi2_UART_buff_size 0016  
                             ?_Delay 001B                ?_EUSART1_Transmit_ISR 0001  
               GetDataDict@DataArray 001C                 GetDataDict@DataCount 0021  
               GetDataDict@DataTable 0020                               ?_Start 0001  
               SetDataDict@DataArray 001C                 SetDataDict@DataCount 0021  
               SetDataDict@DataTable 0020              __end_of_TMR0_StartTimer 0FCC  
               __size_of_cobs_decode 01BE                 __size_of_cobs_encode 0198  
                             _ANSELA 000F38                               _ANSELB 000F39  
                             _ANSELC 000F3A                               _ANSELD 000F3B  
                             _ANSELE 000F3C                      i2_UART_buff_get 0AFE  
                             _RC1STA 000FAB                               i2l2123 0DCA  
                             i2l2053 06F4                               i2l2047 0688  
                    i2_UART_buff_put 0668                               i2l2067 0B88  
                     __CFG_WDTEN$OFF 000000                               Delay@x 001E  
        UART_buff_modulo_inc@modulus 001D                               i2l1975 0EA2  
                             _RCREG1 000FAE                               _OSCCON 000FD3  
                             _SPBRG1 000FAF                            ??_GetTime 001F  
                             _TX1STA 000FAC                               _TXREG1 000FAD  
                          ??_SetTime 001B                       __CFG_XINST$OFF 000000  
                __end_of_Receive_get 0FB8                        _output_buffer 0100  
                __end_of_SetDataDict 0A6C                            CRC8@tempI 0020  
                     __CFG_STVREN$ON 000000                     ?_TMR0_Initialize 0001  
                             _memset 0E2C                               clear_0 0C58  
                             clear_1 0C64                               clear_2 0C70  
                   __end_of_sendData 054E                         __pdataCOMRAM 0040  
                         Start@F7240 00FA               cobs_encode@dst_buf_len 001D  
             cobs_encode@dst_buf_ptr 001B                        Send_put@_data 0026  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8         __end_of_UART_buff_modulo_inc 0E82  
      __size_of_INTERRUPT_Initialize 0018                           __accesstop 0060  
            __end_of__initialization 0C76                        sendData@count 00B2  
                      sendData@lenth 0072                        ___rparam_used 000001  
            ?i2_UART_buff_modulo_inc 0001                         ?_updateComms 0001  
                      __end_of_Delay 0DA0                          ?_ReadFaults 0001  
                     __pcstackCOMRAM 0001                        __end_of_Start 0C12  
                       __pidataBANK0 0FC3                            ?_TMR0_ISR 0001  
                 UART_buff_get@_this 0021                __end_of_UART_buff_get 0AFE  
             ??_EUSART1_Transmit_ISR 000C                __end_of_UART_buff_put 0668  
                            ??_Delay 001D              __end_ofi2_UART_buff_get 0B90  
            __end_ofi2_UART_buff_put 0782          __end_of_EUSART1_Receive_ISR 0F06  
                            CRC8@crc 0021                              CRC8@len 001D  
                            ??_Start 0025                              CRC8@sum 001E  
                          ?_ComStart 0001                     ?_TMR0_StartTimer 0001  
                        sendData@DTS 0070               cobs_decode@dst_buf_len 001D  
                         __pbssBANK0 00C8                           __pbssBANK1 0100  
             cobs_decode@dst_buf_ptr 001B                      __CFG_PLLCFG$OFF 000000  
                        _Receive_get 0FAA       __end_ofi2_UART_buff_modulo_inc 0EAC  
                        _SetDataDict 09D4              __size_of_UART_buff_init 001E  
                        _ReciveArray 01D4              __size_of_UART_buff_size 0016  
                          ?_Send_put 0001                 __size_of_receiveData 0106  
                 __CFG_CCP2MX$PORTC1 000000                           ??_TMR0_ISR 0001  
                 __CFG_CCP3MX$PORTB5 000000             cobs_decode@dst_write_ptr 0068  
         cobs_decode@remaining_bytes 0066                              ?_memset 001B  
                 UART_buff_put@_this 0021                      cobs_decode@F192 0036  
                   i2_UART_buff_size 0F62          i2UART_buff_modulo_inc@value 0001  
                            _OSCCON2 000FD2                    _Receive_available 0F36  
       UART_buff_modulo_inc@my_value 001F                    __CFG_PRICLKEN$OFF 000000  
                            _OSCTUNE 000F9B                              _SPBRGH1 000FB0  
                         ??_ComStart 0025                  sendData@whereToSend 00B1  
                __size_of_ReadFaults 0062                   ?_Receive_available 001D  
                            _GetTime 0F8A                         ?_GetDataDict 001B  
                   ComController@DTI 00BA                              _ByteLow 003E  
                ??_Receive_available 001F                            ?_sendData 006D  
                    __CFG_PWRTEN$OFF 000000                           ??_Send_put 0026  
                            __Hparam 0000                              _SetTime 0F78  
                            __Lparam 0000               cobs_encode@src_end_ptr 0060  
               _UART_buff_modulo_inc 0E58                              __pcinit 0C12  
             __size_of_ComController 00B4                      __size_of_memset 002C  
                            __ramtop 0600                     i2UART_buff_get@c 000B  
                            __ptext0 0E00                              __ptext1 0F9C  
                            __ptext2 0782                              __ptext3 00A4  
                            __ptext4 0FAA                              __ptext5 0F36  
                            __ptext6 0F4C                              __ptext7 0888  
                            __ptext8 03FA                              __ptext9 0262  
                          _T0CONbits 000FD5                     i2UART_buff_put@c 0009  
         cobs_encode@dst_buf_end_ptr 0063            __end_of_Receive_available 0F4C  
                cobs_encode@src_byte 0062                   _EUSART1_Initialize 0D30  
                   ?i2_UART_buff_get 0007                     ?i2_UART_buff_put 0007  
               end_of_initialization 0C76                            Delay@wait 001B  
                ?_EUSART1_Initialize 0001                      cobs_encode@F180 0039  
                            memset@c 001D                              memset@n 001F  
                            memset@p 0021                        __Lmediumconst 0000  
                         ??_sendData 0027                      receiveData@Data 01F5  
              ?_UART_buff_modulo_inc 001B                 __size_of_updateComms 000E  
                            postdec1 000FE5                              postdec2 000FDD  
                            postinc0 000FEE                              postinc2 000FDE  
               ??_EUSART1_Initialize 0025                    cobs_decode@result 006B  
             cobs_decode@src_end_ptr 0060                            _PORTAbits 000F80  
                          _PORTCbits 000F82                        ??_cobs_decode 0023  
                      ??_cobs_encode 0023                            _TRISAbits 000F92  
                          _TRISCbits 000F94                            _TRISDbits 000F95  
                     sendData@result 00B5                        _ComController 0888  
              i2UART_buff_size@_this 0001                       _UART_buff_init 0ECA  
                     _UART_buff_size 0F4C                         ??_ReadFaults 0023  
               _timer0ReloadVal16bit 003C         __end_of_INTERRUPT_Initialize 0F1E  
             GetDataDict@numbofbytes 001E                        __pidataCOMRAM 0FBE  
                  __size_of_TMR0_ISR 0018                       __end_of_memset 0E58  
                       receiveData@i 01F3           __size_of_Receive_available 0016  
                start_initialization 0C12             __size_of_TMR0_Initialize 001E  
             SetDataDict@numbofbytes 001E                   __end_of_ReadFaults 0CE6  
                 ComController@lenth 00BC                       ?_ComController 00BA  
                __end_of_cobs_decode 0262                    __size_of_ComStart 0006  
             __end_of_UART_buff_init 0EE8                       UART_buff_get@c 0025  
             __end_of_UART_buff_size 0F62                  __end_of_cobs_encode 03FA  
                       ?_Receive_get 0001                       UART_buff_put@c 0023  
                       ?_SetDataDict 001B             __end_ofi2_UART_buff_size 0F78  
               __size_of_GetDataDict 0098               ??_UART_buff_modulo_inc 001F  
                           CRC8@data 001B                    __size_of_Send_put 002E  
                        __pdataBANK0 00FA                             ??_memset 0021  
                          Start@Data 0025                          __pbssCOMRAM 002B  
      __size_of_EUSART1_Transmit_ISR 0032                        __pcstackBANK0 0060  
                      __pcstackBANK1 01F2                  UART_buff_init@_this 0023  
                    ?_UART_buff_init 0023                      ?_UART_buff_size 001B  
       __size_of_EUSART1_Receive_ISR 001E                             ?_GetTime 001B  
                      ??_receiveData 00C3                           sendData@CS 00B4  
              cobs_encode@search_len 0065             __size_of_TMR0_StartTimer 0004  
             __size_of_UART_buff_get 0092               __size_of_UART_buff_put 011A  
                           ?_SetTime 0001                    __size_of_sendData 0154  
                          __pintcode 0008         ??_INTERRUPT_InterruptManager 000D  
               i2UART_buff_get@_this 0007                             _BAUD1CON 000FB8  
                     __size_of_Delay 0034                          _cobs_decode 00A4  
                        _cobs_encode 0262               sendData@DataTableIndex 006F  
                     __size_of_Start 0082                      ??_ComController 00BE  
        _COBS_ENCODE_DST_BUF_LEN_MAX 0042                 _INTERRUPT_Initialize 0F06  
                 cobs_encode@src_len 0021                   cobs_encode@src_ptr 001F  
                       _receiveArray 00D2                    ??_TMR0_Initialize 001B  
                           _LATAbits 000F89                             _LATDbits 000F8C  
                UART_buff_size@_this 001B                             _IPR1bits 000F9F  
                           _IPR2bits 000FA2                             _PIE1bits 000F9D  
                           i2u110_40 0DBA                             i2u103_40 0B1C  
__size_of_INTERRUPT_InterruptManager 0098                             _PIR1bits 000F9E  
                           _RCONbits 000FD0                     __CFG_WDTPS$32768 000000  
                __end_of_receiveData 0888                             _TMR0_ISR 0F1E  
                       _input_buffer 016A           cobs_decode@dst_buf_end_ptr 0062  
               i2UART_buff_put@_this 0007                        _UART_buff_get 0A6C  
                      _UART_buff_put 054E                    sendData@COBSArray 0074  
      cobs_encode@dst_code_write_ptr 0066                             _ComStart 0FB8  
           ??i2_UART_buff_modulo_inc 0005                            copy_data0 0C26  
                          copy_data1 0C46                ?_INTERRUPT_Initialize 0001  
                 sendData@ComandByte 006D                             _ByteHigh 003F  
           __size_ofi2_UART_buff_get 0092             __size_ofi2_UART_buff_put 011A  
                   __size_of_GetTime 0012                       ReadFaults@Data 0024  
                      ??_updateComms 002B                 __size_of_Receive_get 000E  
                           __Hrparam 0000                             _Send_put 0DD2  
               __size_of_SetDataDict 0098                             __Lrparam 0000  
                 __CFG_BOREN$SBORDIS 000000                     __size_of_SetTime 0012  
                  __CFG_P2BMX$PORTD2 000000                    ??_TMR0_StartTimer 001B  
        __size_of_EUSART1_Initialize 003C                           _ANSELCbits 000F3A  
                     ?_UART_buff_get 0021                       ?_UART_buff_put 0021  
                        CRC8@extract 001F                     GetDataDict@Error 001F  
                   SetDataDict@Error 001F                            sendData@i 00B8  
                           __ptext10 0DD2                             __ptext11 054E  
                           __ptext20 0F06                             __ptext12 0A6C  
                           __ptext21 0FB8                             __ptext13 0E58  
                           __ptext30 0F1E                             __ptext22 0D30  
                           __ptext14 0CE6                             __ptext31 0DA0  
                           __ptext23 0ECA                             __ptext15 093C  
                           __ptext32 0F62                             __ptext24 0E2C  
                           __ptext16 0D6C                             __ptext33 0AFE  
                           __ptext25 0F78                             __ptext17 0B90  
                           __ptext34 0EE8                             __ptext26 0C84  
                           __ptext18 0EAC                             __ptext35 0668  
                           __ptext27 09D4                             __ptext19 0FC8  
                           __ptext36 0E82                             __ptext28 0F8A  
                      __size_of_CRC8 004A            GetDataDict@DataTableIndex 001B  
            EUSART1_Receive_ISR@data 000C                        __size_of_main 002C  
                  cobs_encode@result 006A                          _receiveData 0782  
                     _Transmit_stall 0044                             _sendData 03FA  
                  ?i2_UART_buff_size 0001                    sendData@DataLenth 00B0  
                  sendData@DataTable 006E                           _RC1STAbits 000FAB  
                       _ProcessArray 00DC                   ??i2_UART_buff_size 0003  
                           int$flags 0045                  __end_of_updateComms 0FAA  
 __end_of_INTERRUPT_InterruptManager 00A0           _INTERRUPT_InterruptManager 0008  
                _EUSART1_Receive_ISR 0EE8                    receiveData@result 01F6  
                         _INTCONbits 000FF2            UART_buff_modulo_inc@value 001B  
                   ??_UART_buff_init 0025                     ??_UART_buff_size 001D  
             ??_INTERRUPT_Initialize 001B                             memset@p1 001B  
    __size_ofi2_UART_buff_modulo_inc 002A                             intlevel2 0000  
                cobs_decode@len_code 006A                 ?_EUSART1_Receive_ISR 0001  
                      ??_GetDataDict 001F                         cobs_decode@i 0065  
       __end_of_EUSART1_Transmit_ISR 0DD2                    sendData@SendArray 0092  
                  ??i2_UART_buff_get 0009                    ??i2_UART_buff_put 000A  
                cobs_decode@src_byte 0064        __size_of_UART_buff_modulo_inc 002A  
                  _DataTableArrayOne 00C8                      ??_UART_buff_get 0023  
                  _DataTableArrayTwo 0033                      ??_UART_buff_put 0024  
                    _TMR0_Initialize 0EAC                         ?_cobs_decode 001B  
                       ?_cobs_encode 001B                    __CFG_T3CMX$PORTC0 000000  
                 cobs_decode@src_len 0021                   cobs_decode@src_ptr 001F  
              ??_EUSART1_Receive_ISR 000C                    __CFG_FOSC$INTIO67 000000  
                        _updateComms 0F9C  
