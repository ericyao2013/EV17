

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Fri Aug 11 15:36:27 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK5,global,class=BANK5,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    58                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    59  0000                     
    60                           ; Version 1.42
    61                           ; Generated 13/04/2017 GMT
    62                           ; 
    63                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    64                           ; All rights reserved.
    65                           ; 
    66                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    67                           ; 
    68                           ; Redistribution and use in source and binary forms, with or without modification, are
    69                           ; permitted provided that the following conditions are met:
    70                           ; 
    71                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    72                           ;        conditions and the following disclaimer.
    73                           ; 
    74                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    75                           ;        of conditions and the following disclaimer in the documentation and/or other
    76                           ;        materials provided with the distribution.
    77                           ; 
    78                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    79                           ;        software without specific prior written permission.
    80                           ; 
    81                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    82                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    83                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    84                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    85                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    86                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    87                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    88                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    89                           ; 
    90                           ; 
    91                           ; Code-generator required, PIC18F45K22 Definitions
    92                           ; 
    93                           ; SFR Addresses
    94  0000                     
    95 ;; Function _Receive_peek is unused but had its address taken
    96  0000                     
    97                           	psect	idataCOMRAM
    98  000EC0                     __pidataCOMRAM:
    99                           	opt stack 0
   100                           
   101                           ;initializer for _Transmit_stall
   102  000EC0  01                 	db	1
   103                           
   104                           	psect	idataBANK0
   105  000EB6                     __pidataBANK0:
   106                           	opt stack 0
   107                           
   108                           ;initializer for _COBS_DECODE_DST_BUF_LEN_MAX
   109  000EB6  001E               	dw	30
   110                           
   111                           ;initializer for _COBS_ENCODE_DST_BUF_LEN_MAX
   112  000EB8  001E               	dw	30
   113  0000                     _ANSELE	set	3900
   114  0000                     _ANSELD	set	3899
   115  0000                     _ANSELC	set	3898
   116  0000                     _ANSELB	set	3897
   117  0000                     _ANSELA	set	3896
   118  0000                     _PIR1bits	set	3998
   119  0000                     _IPR2bits	set	4002
   120  0000                     _IPR1bits	set	3999
   121  0000                     _RCONbits	set	4048
   122  0000                     _OSCTUNE	set	3995
   123  0000                     _OSCCON2	set	4050
   124  0000                     _OSCCON	set	4051
   125  0000                     _TRISAbits	set	3986
   126  0000                     _TRISDbits	set	3989
   127  0000                     _TRISCbits	set	3988
   128  0000                     _PORTAbits	set	3968
   129  0000                     _PORTDbits	set	3971
   130  0000                     _PORTCbits	set	3970
   131  0000                     _T0CONbits	set	4053
   132  0000                     _INTCONbits	set	4082
   133  0000                     _TMR0L	set	4054
   134  0000                     _TMR0H	set	4055
   135  0000                     _T0CON	set	4053
   136  0000                     _RC1STAbits	set	4011
   137  0000                     _RCREG1	set	4014
   138  0000                     _TXREG1	set	4013
   139  0000                     _SPBRGH1	set	4016
   140  0000                     _SPBRG1	set	4015
   141  0000                     _TX1STA	set	4012
   142  0000                     _RC1STA	set	4011
   143  0000                     _BAUD1CON	set	4024
   144  0000                     _PIE1bits	set	3997
   145  0000                     _LATAbits	set	3977
   146  0000                     _LATDbits	set	3980
   147                           
   148                           ; #config settings
   149  0000                     
   150                           	psect	cinit
   151  000A84                     __pcinit:
   152                           	opt stack 0
   153  000A84                     start_initialization:
   154                           	opt stack 0
   155  000A84                     __initialization:
   156                           	opt stack 0
   157                           
   158                           ; Initialize objects allocated to BANK0 (4 bytes)
   159                           ; load TBLPTR registers with __pidataBANK0
   160  000A84  0EB6               	movlw	low __pidataBANK0
   161  000A86  6EF6               	movwf	tblptrl,c
   162  000A88  0E0E               	movlw	high __pidataBANK0
   163  000A8A  6EF7               	movwf	tblptrh,c
   164  000A8C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   165  000A8E  6EF8               	movwf	tblptru,c
   166  000A90  EE00  F0C1         	lfsr	0,__pdataBANK0
   167  000A94  EE10 F004          	lfsr	1,4
   168  000A98                     copy_data0:
   169  000A98  0009               	tblrd		*+
   170  000A9A  CFF5 FFEE          	movff	tablat,postinc0
   171  000A9E  50E5               	movf	postdec1,w,c
   172  000AA0  50E1               	movf	fsr1l,w,c
   173  000AA2  E1FA               	bnz	copy_data0
   174                           
   175                           ; Initialize objects allocated to COMRAM (1 bytes)
   176                           ; load TBLPTR registers with __pidataCOMRAM
   177  000AA4  0EC0               	movlw	low __pidataCOMRAM
   178  000AA6  6EF6               	movwf	tblptrl,c
   179  000AA8  0E0E               	movlw	high __pidataCOMRAM
   180  000AAA  6EF7               	movwf	tblptrh,c
   181  000AAC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   182  000AAE  6EF8               	movwf	tblptru,c
   183  000AB0  0009               	tblrd		*+	;fetch initializer
   184  000AB2  CFF5 F044          	movff	tablat,__pdataCOMRAM
   185                           
   186                           ; Clear objects allocated to BANK4 (206 bytes)
   187  000AB6  EE04  F000         	lfsr	0,__pbssBANK4
   188  000ABA  0ECE               	movlw	206
   189  000ABC                     clear_0:
   190  000ABC  6AEE               	clrf	postinc0,c
   191  000ABE  06E8               	decf	wreg,f,c
   192  000AC0  E1FD               	bnz	clear_0
   193                           
   194                           ; Clear objects allocated to BANK3 (200 bytes)
   195  000AC2  EE03  F000         	lfsr	0,__pbssBANK3
   196  000AC6  0EC8               	movlw	200
   197  000AC8                     clear_1:
   198  000AC8  6AEE               	clrf	postinc0,c
   199  000ACA  06E8               	decf	wreg,f,c
   200  000ACC  E1FD               	bnz	clear_1
   201                           
   202                           ; Clear objects allocated to BANK2 (206 bytes)
   203  000ACE  EE02  F000         	lfsr	0,__pbssBANK2
   204  000AD2  0ECE               	movlw	206
   205  000AD4                     clear_2:
   206  000AD4  6AEE               	clrf	postinc0,c
   207  000AD6  06E8               	decf	wreg,f,c
   208  000AD8  E1FD               	bnz	clear_2
   209                           
   210                           ; Clear objects allocated to BANK1 (236 bytes)
   211  000ADA  EE01  F000         	lfsr	0,__pbssBANK1
   212  000ADE  0EEC               	movlw	236
   213  000AE0                     clear_3:
   214  000AE0  6AEE               	clrf	postinc0,c
   215  000AE2  06E8               	decf	wreg,f,c
   216  000AE4  E1FD               	bnz	clear_3
   217                           
   218                           ; Clear objects allocated to BANK0 (71 bytes)
   219  000AE6  EE00  F060         	lfsr	0,__pbssBANK0
   220  000AEA  0E47               	movlw	71
   221  000AEC                     clear_4:
   222  000AEC  6AEE               	clrf	postinc0,c
   223  000AEE  06E8               	decf	wreg,f,c
   224  000AF0  E1FD               	bnz	clear_4
   225                           
   226                           ; Clear objects allocated to COMRAM (30 bytes)
   227  000AF2  EE00  F026         	lfsr	0,__pbssCOMRAM
   228  000AF6  0E1E               	movlw	30
   229  000AF8                     clear_5:
   230  000AF8  6AEE               	clrf	postinc0,c
   231  000AFA  06E8               	decf	wreg,f,c
   232  000AFC  E1FD               	bnz	clear_5
   233  000AFE                     end_of_initialization:
   234                           	opt stack 0
   235  000AFE                     __end_of__initialization:
   236                           	opt stack 0
   237  000AFE  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   238  000B00  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   239  000B02  0E00               	movlw	low (__Lmediumconst shr (0+16))
   240  000B04  6EF8               	movwf	tblptru,c
   241  000B06  0100               	movlb	0
   242  000B08  EF38  F007         	goto	_main	;jump to C main() function
   243                           tblptru	equ	0xFF8
   244                           tblptrh	equ	0xFF7
   245                           tblptrl	equ	0xFF6
   246                           tablat	equ	0xFF5
   247                           postinc0	equ	0xFEE
   248                           wreg	equ	0xFE8
   249                           postdec1	equ	0xFE5
   250                           fsr1l	equ	0xFE1
   251                           
   252                           	psect	bssCOMRAM
   253  000026                     __pbssCOMRAM:
   254                           	opt stack 0
   255  000026                     _timer0ReloadVal16bit:
   256                           	opt stack 0
   257  000026                     	ds	2
   258  000028                     _addressErrorCounter:
   259                           	opt stack 0
   260  000028                     	ds	2
   261  00002A                     _crcErrorCounter:
   262                           	opt stack 0
   263  00002A                     	ds	2
   264  00002C                     _alignErrorCounter:
   265                           	opt stack 0
   266  00002C                     	ds	2
   267  00002E                     _sendStructAddress:
   268                           	opt stack 0
   269  00002E                     	ds	2
   270  000030                     _receiveArrayAddress:
   271                           	opt stack 0
   272  000030                     	ds	2
   273  000032                     _serial_peek:
   274                           	opt stack 0
   275  000032                     	ds	2
   276  000034                     _serial_available:
   277                           	opt stack 0
   278  000034                     	ds	2
   279  000036                     _serial_read:
   280                           	opt stack 0
   281  000036                     	ds	2
   282  000038                     _serial_write:
   283                           	opt stack 0
   284  000038                     	ds	2
   285  00003A                     _ByteLow:
   286                           	opt stack 0
   287  00003A                     	ds	1
   288  00003B                     _ByteHigh:
   289                           	opt stack 0
   290  00003B                     	ds	1
   291  00003C                     _rx_address:
   292                           	opt stack 0
   293  00003C                     	ds	1
   294  00003D                     _AKNAKsend:
   295                           	opt stack 0
   296  00003D                     	ds	1
   297  00003E                     _maxDataAddress:
   298                           	opt stack 0
   299  00003E                     	ds	1
   300  00003F                     _returnAddress:
   301                           	opt stack 0
   302  00003F                     	ds	1
   303  000040                     _moduleAddress:
   304                           	opt stack 0
   305  000040                     	ds	1
   306  000041                     _calc_CS:
   307                           	opt stack 0
   308  000041                     	ds	1
   309  000042                     _rx_len:
   310                           	opt stack 0
   311  000042                     	ds	1
   312  000043                     _rx_array_inx:
   313                           	opt stack 0
   314  000043                     	ds	1
   315                           tblptru	equ	0xFF8
   316                           tblptrh	equ	0xFF7
   317                           tblptrl	equ	0xFF6
   318                           tablat	equ	0xFF5
   319                           postinc0	equ	0xFEE
   320                           wreg	equ	0xFE8
   321                           postdec1	equ	0xFE5
   322                           fsr1l	equ	0xFE1
   323                           
   324                           	psect	dataCOMRAM
   325  000044                     __pdataCOMRAM:
   326                           	opt stack 0
   327  000044                     _Transmit_stall:
   328                           	opt stack 0
   329  000044                     	ds	1
   330                           tblptru	equ	0xFF8
   331                           tblptrh	equ	0xFF7
   332                           tblptrl	equ	0xFF6
   333                           tablat	equ	0xFF5
   334                           postinc0	equ	0xFEE
   335                           wreg	equ	0xFE8
   336                           postdec1	equ	0xFE5
   337                           fsr1l	equ	0xFE1
   338                           
   339                           	psect	bssBANK0
   340  000060                     __pbssBANK0:
   341                           	opt stack 0
   342  000060                     _time:
   343                           	opt stack 0
   344  000060                     	ds	4
   345  000064                     cobs_decode@F192:
   346                           	opt stack 0
   347  000064                     	ds	3
   348  000067                     cobs_encode@F180:
   349                           	opt stack 0
   350  000067                     	ds	3
   351  00006A                     _group:
   352                           	opt stack 0
   353  00006A                     	ds	2
   354  00006C                     _dataAdressErrorCounter:
   355                           	opt stack 0
   356  00006C                     	ds	2
   357  00006E                     _ProcessArray:
   358                           	opt stack 0
   359  00006E                     	ds	30
   360  00008C                     _crc_buffer:
   361                           	opt stack 0
   362  00008C                     	ds	17
   363  00009D                     _receiveArray:
   364                           	opt stack 0
   365  00009D                     	ds	10
   366                           tblptru	equ	0xFF8
   367                           tblptrh	equ	0xFF7
   368                           tblptrl	equ	0xFF6
   369                           tablat	equ	0xFF5
   370                           postinc0	equ	0xFEE
   371                           wreg	equ	0xFE8
   372                           postdec1	equ	0xFE5
   373                           fsr1l	equ	0xFE1
   374                           
   375                           	psect	dataBANK0
   376  0000C1                     __pdataBANK0:
   377                           	opt stack 0
   378  0000C1                     _COBS_DECODE_DST_BUF_LEN_MAX:
   379                           	opt stack 0
   380  0000C1                     	ds	2
   381  0000C3                     _COBS_ENCODE_DST_BUF_LEN_MAX:
   382                           	opt stack 0
   383  0000C3                     	ds	2
   384                           tblptru	equ	0xFF8
   385                           tblptrh	equ	0xFF7
   386                           tblptrl	equ	0xFF6
   387                           tablat	equ	0xFF5
   388                           postinc0	equ	0xFEE
   389                           wreg	equ	0xFE8
   390                           postdec1	equ	0xFE5
   391                           fsr1l	equ	0xFE1
   392                           
   393                           	psect	bssBANK1
   394  000100                     __pbssBANK1:
   395                           	opt stack 0
   396  000100                     _input_buffer:
   397                           	opt stack 0
   398  000100                     	ds	206
   399  0001CE                     _ReciveArray:
   400                           	opt stack 0
   401  0001CE                     	ds	30
   402                           tblptru	equ	0xFF8
   403                           tblptrh	equ	0xFF7
   404                           tblptrl	equ	0xFF6
   405                           tablat	equ	0xFF5
   406                           postinc0	equ	0xFEE
   407                           wreg	equ	0xFE8
   408                           postdec1	equ	0xFE5
   409                           fsr1l	equ	0xFE1
   410                           
   411                           	psect	bssBANK2
   412  000200                     __pbssBANK2:
   413                           	opt stack 0
   414  000200                     _output_buffer:
   415                           	opt stack 0
   416  000200                     	ds	206
   417                           tblptru	equ	0xFF8
   418                           tblptrh	equ	0xFF7
   419                           tblptrl	equ	0xFF6
   420                           tablat	equ	0xFF5
   421                           postinc0	equ	0xFEE
   422                           wreg	equ	0xFE8
   423                           postdec1	equ	0xFE5
   424                           fsr1l	equ	0xFE1
   425                           
   426                           	psect	bssBANK3
   427  000300                     __pbssBANK3:
   428                           	opt stack 0
   429  000300                     _rx_buffer:
   430                           	opt stack 0
   431  000300                     	ds	200
   432                           tblptru	equ	0xFF8
   433                           tblptrh	equ	0xFF7
   434                           tblptrl	equ	0xFF6
   435                           tablat	equ	0xFF5
   436                           postinc0	equ	0xFEE
   437                           wreg	equ	0xFE8
   438                           postdec1	equ	0xFE5
   439                           fsr1l	equ	0xFE1
   440                           
   441                           	psect	bssBANK4
   442  000400                     __pbssBANK4:
   443                           	opt stack 0
   444  000400                     _ring_buffer:
   445                           	opt stack 0
   446  000400                     	ds	206
   447                           tblptru	equ	0xFF8
   448                           tblptrh	equ	0xFF7
   449                           tblptrl	equ	0xFF6
   450                           tablat	equ	0xFF5
   451                           postinc0	equ	0xFEE
   452                           wreg	equ	0xFE8
   453                           postdec1	equ	0xFE5
   454                           fsr1l	equ	0xFE1
   455                           
   456                           	psect	cstackBANK5
   457  000500                     __pcstackBANK5:
   458                           	opt stack 0
   459  000500                     sendData@COBSArray:
   460                           	opt stack 0
   461                           
   462                           ; 30 bytes @ 0x0
   463  000500                     	ds	30
   464  00051E                     sendData@SendArray:
   465                           	opt stack 0
   466                           
   467                           ; 30 bytes @ 0x1E
   468  00051E                     	ds	30
   469  00053C                     sendData@whereToSend:
   470                           	opt stack 0
   471                           
   472                           ; 1 bytes @ 0x3C
   473  00053C                     	ds	1
   474  00053D                     sendData@count:
   475                           	opt stack 0
   476                           
   477                           ; 2 bytes @ 0x3D
   478  00053D                     	ds	2
   479  00053F                     sendData@DataLenth:
   480                           	opt stack 0
   481                           
   482                           ; 1 bytes @ 0x3F
   483  00053F                     	ds	1
   484  000540                     sendData@CS:
   485                           	opt stack 0
   486                           
   487                           ; 1 bytes @ 0x40
   488  000540                     	ds	1
   489  000541                     sendData@result:
   490                           	opt stack 0
   491                           
   492                           ; 3 bytes @ 0x41
   493  000541                     	ds	3
   494  000544                     sendData@i:
   495                           	opt stack 0
   496                           
   497                           ; 2 bytes @ 0x44
   498  000544                     	ds	2
   499                           tblptru	equ	0xFF8
   500                           tblptrh	equ	0xFF7
   501                           tblptrl	equ	0xFF6
   502                           tablat	equ	0xFF5
   503                           postinc0	equ	0xFEE
   504                           wreg	equ	0xFE8
   505                           postdec1	equ	0xFE5
   506                           fsr1l	equ	0xFE1
   507                           
   508                           	psect	cstackBANK0
   509  0000A7                     __pcstackBANK0:
   510                           	opt stack 0
   511  0000A7                     Send_put@_data:
   512                           	opt stack 0
   513  0000A7                     begin@ptr:
   514                           	opt stack 0
   515  0000A7                     cobs_encode@src_end_ptr:
   516                           	opt stack 0
   517  0000A7                     cobs_decode@src_end_ptr:
   518                           	opt stack 0
   519                           
   520                           ; 2 bytes @ 0x0
   521  0000A7                     	ds	2
   522  0000A9                     begin@maxSize:
   523                           	opt stack 0
   524  0000A9                     cobs_encode@src_byte:
   525                           	opt stack 0
   526  0000A9                     cobs_decode@dst_buf_end_ptr:
   527                           	opt stack 0
   528                           
   529                           ; 2 bytes @ 0x2
   530  0000A9                     	ds	1
   531  0000AA                     begin@givenAddress:
   532                           	opt stack 0
   533  0000AA                     cobs_encode@dst_buf_end_ptr:
   534                           	opt stack 0
   535                           
   536                           ; 2 bytes @ 0x3
   537  0000AA                     	ds	1
   538  0000AB                     begin@error:
   539                           	opt stack 0
   540  0000AB                     cobs_decode@src_byte:
   541                           	opt stack 0
   542                           
   543                           ; 1 bytes @ 0x4
   544  0000AB                     	ds	1
   545  0000AC                     cobs_encode@search_len:
   546                           	opt stack 0
   547  0000AC                     cobs_decode@i:
   548                           	opt stack 0
   549  0000AC                     begin@stufftosend:
   550                           	opt stack 0
   551                           
   552                           ; 2 bytes @ 0x5
   553  0000AC                     	ds	1
   554  0000AD                     cobs_encode@dst_code_write_ptr:
   555                           	opt stack 0
   556  0000AD                     cobs_decode@remaining_bytes:
   557                           	opt stack 0
   558                           
   559                           ; 2 bytes @ 0x6
   560  0000AD                     	ds	1
   561  0000AE                     begin@stufftoreceive:
   562                           	opt stack 0
   563                           
   564                           ; 2 bytes @ 0x7
   565  0000AE                     	ds	1
   566  0000AF                     cobs_encode@dst_write_ptr:
   567                           	opt stack 0
   568  0000AF                     cobs_decode@dst_write_ptr:
   569                           	opt stack 0
   570                           
   571                           ; 2 bytes @ 0x8
   572  0000AF                     	ds	1
   573  0000B0                     begin@stuffavailable:
   574                           	opt stack 0
   575                           
   576                           ; 2 bytes @ 0x9
   577  0000B0                     	ds	1
   578  0000B1                     cobs_decode@len_code:
   579                           	opt stack 0
   580  0000B1                     cobs_encode@result:
   581                           	opt stack 0
   582                           
   583                           ; 3 bytes @ 0xA
   584  0000B1                     	ds	1
   585  0000B2                     begin@stuffpeek:
   586                           	opt stack 0
   587  0000B2                     cobs_decode@result:
   588                           	opt stack 0
   589                           
   590                           ; 3 bytes @ 0xB
   591  0000B2                     	ds	2
   592  0000B4                     sendData@ComandByte:
   593                           	opt stack 0
   594                           
   595                           ; 1 bytes @ 0xD
   596  0000B4                     	ds	1
   597  0000B5                     ??_receiveData:
   598  0000B5                     sendData@DataTable:
   599                           	opt stack 0
   600                           
   601                           ; 1 bytes @ 0xE
   602  0000B5                     	ds	1
   603  0000B6                     sendData@DataTableIndex:
   604                           	opt stack 0
   605                           
   606                           ; 1 bytes @ 0xF
   607  0000B6                     	ds	1
   608  0000B7                     ??_sendData:
   609                           
   610                           ; 1 bytes @ 0x10
   611  0000B7                     	ds	3
   612  0000BA                     receiveData@CS:
   613                           	opt stack 0
   614                           
   615                           ; 1 bytes @ 0x13
   616  0000BA                     	ds	1
   617  0000BB                     receiveData@result:
   618                           	opt stack 0
   619                           
   620                           ; 3 bytes @ 0x14
   621  0000BB                     	ds	3
   622  0000BE                     receiveData@i:
   623                           	opt stack 0
   624                           
   625                           ; 2 bytes @ 0x17
   626  0000BE                     	ds	2
   627  0000C0                     receiveData@Data:
   628                           	opt stack 0
   629                           
   630                           ; 1 bytes @ 0x19
   631  0000C0                     	ds	1
   632                           tblptru	equ	0xFF8
   633                           tblptrh	equ	0xFF7
   634                           tblptrl	equ	0xFF6
   635                           tablat	equ	0xFF5
   636                           postinc0	equ	0xFEE
   637                           wreg	equ	0xFE8
   638                           postdec1	equ	0xFE5
   639                           fsr1l	equ	0xFE1
   640                           
   641                           	psect	cstackCOMRAM
   642  000001                     __pcstackCOMRAM:
   643                           	opt stack 0
   644  000001                     ?i2_UART_buff_size:
   645                           	opt stack 0
   646  000001                     ?i2_UART_buff_modulo_inc:
   647                           	opt stack 0
   648  000001                     i2UART_buff_size@_this:
   649                           	opt stack 0
   650  000001                     i2UART_buff_modulo_inc@value:
   651                           	opt stack 0
   652                           
   653                           ; 2 bytes @ 0x0
   654  000001                     	ds	2
   655  000003                     i2UART_buff_modulo_inc@modulus:
   656                           	opt stack 0
   657                           
   658                           ; 2 bytes @ 0x2
   659  000003                     	ds	2
   660  000005                     i2UART_buff_modulo_inc@my_value:
   661                           	opt stack 0
   662                           
   663                           ; 2 bytes @ 0x4
   664  000005                     	ds	2
   665  000007                     i2UART_buff_put@_this:
   666                           	opt stack 0
   667  000007                     i2UART_buff_get@_this:
   668                           	opt stack 0
   669                           
   670                           ; 2 bytes @ 0x6
   671  000007                     	ds	2
   672  000009                     ??i2_UART_buff_get:
   673  000009                     i2UART_buff_put@c:
   674                           	opt stack 0
   675                           
   676                           ; 1 bytes @ 0x8
   677  000009                     	ds	1
   678  00000A                     ??i2_UART_buff_put:
   679                           
   680                           ; 1 bytes @ 0x9
   681  00000A                     	ds	1
   682  00000B                     i2UART_buff_get@c:
   683                           	opt stack 0
   684                           
   685                           ; 1 bytes @ 0xA
   686  00000B                     	ds	1
   687  00000C                     EUSART1_Receive_ISR@data:
   688                           	opt stack 0
   689                           
   690                           ; 1 bytes @ 0xB
   691  00000C                     	ds	1
   692  00000D                     ??_INTERRUPT_InterruptManager:
   693                           
   694                           ; 1 bytes @ 0xC
   695  00000D                     	ds	14
   696  00001B                     ??_ReadFaults:
   697  00001B                     ?_UART_buff_modulo_inc:
   698                           	opt stack 0
   699  00001B                     ?_UART_buff_size:
   700                           	opt stack 0
   701  00001B                     ?_cobs_encode:
   702                           	opt stack 0
   703  00001B                     ?_cobs_decode:
   704                           	opt stack 0
   705  00001B                     GetFaults@num:
   706                           	opt stack 0
   707  00001B                     CRC8@data:
   708                           	opt stack 0
   709  00001B                     UART_buff_size@_this:
   710                           	opt stack 0
   711  00001B                     UART_buff_modulo_inc@value:
   712                           	opt stack 0
   713  00001B                     Delay@wait:
   714                           	opt stack 0
   715  00001B                     cobs_encode@dst_buf_ptr:
   716                           	opt stack 0
   717  00001B                     cobs_decode@dst_buf_ptr:
   718                           	opt stack 0
   719  00001B                     memset@p1:
   720                           	opt stack 0
   721                           
   722                           ; 2 bytes @ 0x1A
   723  00001B                     	ds	2
   724  00001D                     ??_Delay:
   725  00001D                     ?_Receive_available:
   726                           	opt stack 0
   727  00001D                     CRC8@len:
   728                           	opt stack 0
   729  00001D                     UART_buff_modulo_inc@modulus:
   730                           	opt stack 0
   731  00001D                     cobs_encode@dst_buf_len:
   732                           	opt stack 0
   733  00001D                     cobs_decode@dst_buf_len:
   734                           	opt stack 0
   735  00001D                     memset@c:
   736                           	opt stack 0
   737                           
   738                           ; 2 bytes @ 0x1C
   739  00001D                     	ds	1
   740  00001E                     CRC8@sum:
   741                           	opt stack 0
   742  00001E                     Delay@x:
   743                           	opt stack 0
   744                           
   745                           ; 2 bytes @ 0x1D
   746  00001E                     	ds	1
   747  00001F                     CRC8@extract:
   748                           	opt stack 0
   749  00001F                     UART_buff_modulo_inc@my_value:
   750                           	opt stack 0
   751  00001F                     cobs_encode@src_ptr:
   752                           	opt stack 0
   753  00001F                     cobs_decode@src_ptr:
   754                           	opt stack 0
   755  00001F                     memset@n:
   756                           	opt stack 0
   757                           
   758                           ; 2 bytes @ 0x1E
   759  00001F                     	ds	1
   760  000020                     CRC8@tempI:
   761                           	opt stack 0
   762                           
   763                           ; 1 bytes @ 0x1F
   764  000020                     	ds	1
   765  000021                     CRC8@crc:
   766                           	opt stack 0
   767  000021                     UART_buff_put@_this:
   768                           	opt stack 0
   769  000021                     UART_buff_get@_this:
   770                           	opt stack 0
   771  000021                     cobs_encode@src_len:
   772                           	opt stack 0
   773  000021                     cobs_decode@src_len:
   774                           	opt stack 0
   775  000021                     memset@p:
   776                           	opt stack 0
   777                           
   778                           ; 2 bytes @ 0x20
   779  000021                     	ds	2
   780  000023                     ??_cobs_encode:
   781  000023                     ??_cobs_decode:
   782  000023                     ??_UART_buff_get:
   783  000023                     UART_buff_put@c:
   784                           	opt stack 0
   785  000023                     UART_buff_init@_this:
   786                           	opt stack 0
   787                           
   788                           ; 2 bytes @ 0x22
   789  000023                     	ds	1
   790  000024                     ??_UART_buff_put:
   791                           
   792                           ; 1 bytes @ 0x23
   793  000024                     	ds	1
   794  000025                     UART_buff_get@c:
   795                           	opt stack 0
   796                           
   797                           ; 1 bytes @ 0x24
   798  000025                     	ds	1
   799  000026                     tblptru	equ	0xFF8
   800                           tblptrh	equ	0xFF7
   801                           tblptrl	equ	0xFF6
   802                           tablat	equ	0xFF5
   803                           postinc0	equ	0xFEE
   804                           wreg	equ	0xFE8
   805                           postdec1	equ	0xFE5
   806                           fsr1l	equ	0xFE1
   807                           
   808                           ; 1 bytes @ 0x25
   809 ;;
   810 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   811 ;;
   812 ;; *************** function _main *****************
   813 ;; Defined at:
   814 ;;		line 23 in file "Main.c"
   815 ;; Parameters:    Size  Location     Type
   816 ;;		None
   817 ;; Auto vars:     Size  Location     Type
   818 ;;		None
   819 ;; Return value:  Size  Location     Type
   820 ;;                  1    wreg      void 
   821 ;; Registers used:
   822 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   823 ;; Tracked objects:
   824 ;;		On entry : 0/0
   825 ;;		On exit  : 0/0
   826 ;;		Unchanged: 0/0
   827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   828 ;;      Params:         0       0       0       0       0       0       0
   829 ;;      Locals:         0       0       0       0       0       0       0
   830 ;;      Temps:          0       0       0       0       0       0       0
   831 ;;      Totals:         0       0       0       0       0       0       0
   832 ;;Total ram usage:        0 bytes
   833 ;; Hardware stack levels required when called:   10
   834 ;; This function calls:
   835 ;;		_ReadFaults
   836 ;;		_SetTime
   837 ;;		_Start
   838 ;;		_updateComms
   839 ;; This function is called by:
   840 ;;		Startup code after reset
   841 ;; This function uses a non-reentrant model
   842 ;;
   843                           
   844                           	psect	text0
   845  000E70                     __ptext0:
   846                           	opt stack 0
   847  000E70                     _main:
   848                           	opt stack 21
   849                           
   850                           ;Main.c: 24: Start();
   851                           
   852                           ;incstack = 0
   853  000E70  ECB2  F005         	call	_Start	;wreg free
   854                           
   855                           ;Main.c: 25: LATDbits.LATD4 = 0;
   856  000E74  988C               	bcf	3980,4,c	;volatile
   857  000E76                     l2686:
   858                           
   859                           ;Main.c: 27: updateComms();
   860  000E76  EC4C  F007         	call	_updateComms	;wreg free
   861                           
   862                           ;Main.c: 30: ReadFaults();
   863  000E7A  EC42  F004         	call	_ReadFaults	;wreg free
   864                           
   865                           ;Main.c: 31: SetTime();
   866  000E7E  EC42  F007         	call	_SetTime	;wreg free
   867  000E82  D7F9               	goto	l2686
   868  000E84                     __end_of_main:
   869                           	opt stack 0
   870                           tblptru	equ	0xFF8
   871                           tblptrh	equ	0xFF7
   872                           tblptrl	equ	0xFF6
   873                           tablat	equ	0xFF5
   874                           postinc0	equ	0xFEE
   875                           wreg	equ	0xFE8
   876                           postdec1	equ	0xFE5
   877                           fsr1l	equ	0xFE1
   878                           
   879 ;; *************** function _updateComms *****************
   880 ;; Defined at:
   881 ;;		line 17 in file "Communications.c"
   882 ;; Parameters:    Size  Location     Type
   883 ;;		None
   884 ;; Auto vars:     Size  Location     Type
   885 ;;		None
   886 ;; Return value:  Size  Location     Type
   887 ;;                  1    wreg      void 
   888 ;; Registers used:
   889 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   890 ;; Tracked objects:
   891 ;;		On entry : 0/0
   892 ;;		On exit  : 0/0
   893 ;;		Unchanged: 0/0
   894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   895 ;;      Params:         0       0       0       0       0       0       0
   896 ;;      Locals:         0       0       0       0       0       0       0
   897 ;;      Temps:          0       0       0       0       0       0       0
   898 ;;      Totals:         0       0       0       0       0       0       0
   899 ;;Total ram usage:        0 bytes
   900 ;; Hardware stack levels used:    1
   901 ;; Hardware stack levels required when called:    9
   902 ;; This function calls:
   903 ;;		_receiveData
   904 ;;		_respondECU
   905 ;; This function is called by:
   906 ;;		_main
   907 ;; This function uses a non-reentrant model
   908 ;;
   909                           
   910                           	psect	text1
   911  000E98                     __ptext1:
   912                           	opt stack 0
   913  000E98                     _updateComms:
   914                           	opt stack 21
   915                           
   916                           ;Communications.c: 18: if (receiveData()) {
   917                           
   918                           ;incstack = 0
   919  000E98  ECCA  F003         	call	_receiveData	;wreg free
   920  000E9C  0900               	iorlw	0
   921  000E9E  B4D8               	btfsc	status,2,c
   922  000EA0  0012               	return	
   923                           
   924                           ;Communications.c: 19: respondECU();
   925  000EA2  EC20  F006         	call	_respondECU	;wreg free
   926  000EA6  0012               	return	
   927  000EA8                     __end_of_updateComms:
   928                           	opt stack 0
   929                           tblptru	equ	0xFF8
   930                           tblptrh	equ	0xFF7
   931                           tblptrl	equ	0xFF6
   932                           tablat	equ	0xFF5
   933                           postinc0	equ	0xFEE
   934                           wreg	equ	0xFE8
   935                           postdec1	equ	0xFE5
   936                           fsr1l	equ	0xFE1
   937                           status	equ	0xFD8
   938                           
   939 ;; *************** function _respondECU *****************
   940 ;; Defined at:
   941 ;;		line 23 in file "Communications.c"
   942 ;; Parameters:    Size  Location     Type
   943 ;;		None
   944 ;; Auto vars:     Size  Location     Type
   945 ;;		None
   946 ;; Return value:  Size  Location     Type
   947 ;;                  1    wreg      void 
   948 ;; Registers used:
   949 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   950 ;; Tracked objects:
   951 ;;		On entry : 0/0
   952 ;;		On exit  : 0/0
   953 ;;		Unchanged: 0/0
   954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   955 ;;      Params:         0       0       0       0       0       0       0
   956 ;;      Locals:         0       0       0       0       0       0       0
   957 ;;      Temps:          0       0       0       0       0       0       0
   958 ;;      Totals:         0       0       0       0       0       0       0
   959 ;;Total ram usage:        0 bytes
   960 ;; Hardware stack levels used:    1
   961 ;; Hardware stack levels required when called:    8
   962 ;; This function calls:
   963 ;;		_Delay
   964 ;;		_sendData
   965 ;; This function is called by:
   966 ;;		_updateComms
   967 ;; This function uses a non-reentrant model
   968 ;;
   969                           
   970                           	psect	text2
   971  000C40                     __ptext2:
   972                           	opt stack 0
   973  000C40                     _respondECU:
   974                           	opt stack 21
   975                           
   976                           ;Communications.c: 24: LATDbits.LATD4 = 1;
   977                           
   978                           ;incstack = 0
   979  000C40  888C               	bsf	3980,4,c	;volatile
   980                           
   981                           ;Communications.c: 25: Delay(5);
   982  000C42  0E00               	movlw	0
   983  000C44  6E1C               	movwf	Delay@wait+1,c
   984  000C46  0E05               	movlw	5
   985  000C48  6E1B               	movwf	Delay@wait,c
   986  000C4A  EC3B  F006         	call	_Delay	;wreg free
   987                           
   988                           ;Communications.c: 26: sendData(1, 1, 1, 1);
   989  000C4E  0E01               	movlw	1
   990  000C50  0100               	movlb	0	; () banked
   991  000C52  6FB4               	movwf	sendData@ComandByte& (0+255),b
   992  000C54  0E01               	movlw	1
   993  000C56  0100               	movlb	0	; () banked
   994  000C58  6FB5               	movwf	sendData@DataTable& (0+255),b
   995  000C5A  0E01               	movlw	1
   996  000C5C  0100               	movlb	0	; () banked
   997  000C5E  6FB6               	movwf	sendData@DataTableIndex& (0+255),b
   998  000C60  0E01               	movlw	1
   999  000C62  ECFD  F001         	call	_sendData
  1000                           
  1001                           ;Communications.c: 27: Delay(3);
  1002  000C66  0E00               	movlw	0
  1003  000C68  6E1C               	movwf	Delay@wait+1,c
  1004  000C6A  0E03               	movlw	3
  1005  000C6C  6E1B               	movwf	Delay@wait,c
  1006  000C6E  EC3B  F006         	call	_Delay	;wreg free
  1007                           
  1008                           ;Communications.c: 28: LATDbits.LATD4 = 0;
  1009  000C72  988C               	bcf	3980,4,c	;volatile
  1010  000C74  0012               	return		;funcret
  1011  000C76                     __end_of_respondECU:
  1012                           	opt stack 0
  1013                           tblptru	equ	0xFF8
  1014                           tblptrh	equ	0xFF7
  1015                           tblptrl	equ	0xFF6
  1016                           tablat	equ	0xFF5
  1017                           postinc0	equ	0xFEE
  1018                           wreg	equ	0xFE8
  1019                           postdec1	equ	0xFE5
  1020                           fsr1l	equ	0xFE1
  1021                           status	equ	0xFD8
  1022                           
  1023 ;; *************** function _sendData *****************
  1024 ;; Defined at:
  1025 ;;		line 111 in file "FastTransfer.c"
  1026 ;; Parameters:    Size  Location     Type
  1027 ;;  whereToSend     1    wreg     unsigned char 
  1028 ;;  ComandByte      1   13[BANK0 ] unsigned char 
  1029 ;;  DataTable       1   14[BANK0 ] unsigned char 
  1030 ;;  DataTableInd    1   15[BANK0 ] unsigned char 
  1031 ;; Auto vars:     Size  Location     Type
  1032 ;;  whereToSend     1   60[BANK5 ] unsigned char 
  1033 ;;  SendArray      30   30[BANK5 ] unsigned char [30]
  1034 ;;  COBSArray      30    0[BANK5 ] unsigned char [30]
  1035 ;;  result          3   65[BANK5 ] struct .
  1036 ;;  i               2   68[BANK5 ] int 
  1037 ;;  count           2   61[BANK5 ] int 
  1038 ;;  CS              1   64[BANK5 ] unsigned char 
  1039 ;;  DataLenth       1   63[BANK5 ] unsigned char 
  1040 ;; Return value:  Size  Location     Type
  1041 ;;                  1    wreg      void 
  1042 ;; Registers used:
  1043 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1044 ;; Tracked objects:
  1045 ;;		On entry : 0/0
  1046 ;;		On exit  : 0/0
  1047 ;;		Unchanged: 0/0
  1048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1049 ;;      Params:         0       3       0       0       0       0       0
  1050 ;;      Locals:         0       0       0       0       0       0      70
  1051 ;;      Temps:          0       4       0       0       0       0       0
  1052 ;;      Totals:         0       7       0       0       0       0      70
  1053 ;;Total ram usage:       77 bytes
  1054 ;; Hardware stack levels used:    1
  1055 ;; Hardware stack levels required when called:    7
  1056 ;; This function calls:
  1057 ;;		_CRC8
  1058 ;;		_GetFaults
  1059 ;;		_Send_put
  1060 ;;		_cobs_encode
  1061 ;; This function is called by:
  1062 ;;		_respondECU
  1063 ;; This function uses a non-reentrant model
  1064 ;;
  1065                           
  1066                           	psect	text3
  1067  0003FA                     __ptext3:
  1068                           	opt stack 0
  1069  0003FA                     _sendData:
  1070                           	opt stack 21
  1071                           
  1072                           ;incstack = 0
  1073                           ;sendData@whereToSend stored from wreg
  1074  0003FA  0105               	movlb	5	; () banked
  1075  0003FC  6F3C               	movwf	sendData@whereToSend& (0+255),b
  1076                           
  1077                           ;FastTransfer.c: 116: unsigned char SendArray[30];
  1078                           ;FastTransfer.c: 117: unsigned char COBSArray[30];
  1079                           ;FastTransfer.c: 119: unsigned char DataLenth = 1;
  1080  0003FE  0E01               	movlw	1
  1081  000400  0105               	movlb	5	; () banked
  1082  000402  6F3F               	movwf	sendData@DataLenth& (0+255),b
  1083                           
  1084                           ;FastTransfer.c: 121: cobs_encode_result result;
  1085                           ;FastTransfer.c: 125: SendArray[0] = 4+1;
  1086  000404  0E05               	movlw	5
  1087  000406  0105               	movlb	5	; () banked
  1088  000408  6F1E               	movwf	sendData@SendArray& (0+255),b
  1089                           
  1090                           ; BSR set to: 5
  1091                           ;FastTransfer.c: 126: SendArray[1] = ComandByte;
  1092  00040A  C0B4  F51F         	movff	sendData@ComandByte,sendData@SendArray+1
  1093                           
  1094                           ; BSR set to: 5
  1095                           ;FastTransfer.c: 127: SendArray[2] = DataTable;
  1096  00040E  C0B5  F520         	movff	sendData@DataTable,sendData@SendArray+2
  1097                           
  1098                           ; BSR set to: 5
  1099                           ;FastTransfer.c: 128: SendArray[3] = DataTableIndex;
  1100  000412  C0B6  F521         	movff	sendData@DataTableIndex,sendData@SendArray+3
  1101                           
  1102                           ; BSR set to: 5
  1103                           ;FastTransfer.c: 129: SendArray[4] = DataLenth;
  1104  000416  C53F  F522         	movff	sendData@DataLenth,sendData@SendArray+4
  1105                           
  1106                           ;FastTransfer.c: 134: int i;
  1107                           ;FastTransfer.c: 135: int count = 5;
  1108  00041A  0E00               	movlw	0
  1109  00041C  0105               	movlb	5	; () banked
  1110  00041E  6F3E               	movwf	(sendData@count+1)& (0+255),b
  1111  000420  0E05               	movlw	5
  1112  000422  6F3D               	movwf	sendData@count& (0+255),b
  1113                           
  1114                           ; BSR set to: 5
  1115                           ;FastTransfer.c: 136: i = count;
  1116  000424  C53D  F544         	movff	sendData@count,sendData@i
  1117  000428  C53E  F545         	movff	sendData@count+1,sendData@i+1
  1118                           
  1119                           ; BSR set to: 5
  1120                           ;FastTransfer.c: 138: SendArray[5] = GetFaults(0);
  1121  00042C  0E00               	movlw	0
  1122  00042E  EC0C  F007         	call	_GetFaults
  1123  000432  0105               	movlb	5	; () banked
  1124  000434  6F23               	movwf	(sendData@SendArray+5)& (0+255),b
  1125                           
  1126                           ; BSR set to: 5
  1127                           ;FastTransfer.c: 140: SendArray[6] = GetFaults(1);
  1128  000436  0E01               	movlw	1
  1129  000438  EC0C  F007         	call	_GetFaults
  1130  00043C  0105               	movlb	5	; () banked
  1131  00043E  6F24               	movwf	(sendData@SendArray+6)& (0+255),b
  1132                           
  1133                           ; BSR set to: 5
  1134                           ;FastTransfer.c: 143: unsigned char CS = CRC8(SendArray, 7);
  1135  000440  0E1E               	movlw	low sendData@SendArray
  1136  000442  6E1B               	movwf	CRC8@data,c
  1137  000444  0E05               	movlw	high sendData@SendArray
  1138  000446  6E1C               	movwf	CRC8@data+1,c
  1139  000448  0E07               	movlw	7
  1140  00044A  6E1D               	movwf	CRC8@len,c
  1141  00044C  ECDD  F005         	call	_CRC8	;wreg free
  1142  000450  0105               	movlb	5	; () banked
  1143  000452  6F40               	movwf	sendData@CS& (0+255),b
  1144                           
  1145                           ; BSR set to: 5
  1146                           ;FastTransfer.c: 147: SendArray[7] = CS;
  1147  000454  C540  F525         	movff	sendData@CS,sendData@SendArray+7
  1148                           
  1149                           ; BSR set to: 5
  1150                           ;FastTransfer.c: 149: result = cobs_encode(COBSArray, sizeof(COBSArray), SendArray, 8);
  1151  000458  0E00               	movlw	low sendData@COBSArray
  1152  00045A  6E1B               	movwf	cobs_encode@dst_buf_ptr,c
  1153  00045C  0E05               	movlw	high sendData@COBSArray
  1154  00045E  6E1C               	movwf	cobs_encode@dst_buf_ptr+1,c
  1155  000460  0E00               	movlw	0
  1156  000462  6E1E               	movwf	cobs_encode@dst_buf_len+1,c
  1157  000464  0E1E               	movlw	30
  1158  000466  6E1D               	movwf	cobs_encode@dst_buf_len,c
  1159  000468  0E1E               	movlw	low sendData@SendArray
  1160  00046A  6E1F               	movwf	cobs_encode@src_ptr,c
  1161  00046C  0E05               	movlw	high sendData@SendArray
  1162  00046E  6E20               	movwf	cobs_encode@src_ptr+1,c
  1163  000470  0E00               	movlw	0
  1164  000472  6E22               	movwf	cobs_encode@src_len+1,c
  1165  000474  0E08               	movlw	8
  1166  000476  6E21               	movwf	cobs_encode@src_len,c
  1167  000478  EC31  F001         	call	_cobs_encode	;wreg free
  1168  00047C  C01B  F541         	movff	?_cobs_encode,sendData@result
  1169  000480  C01C  F542         	movff	?_cobs_encode+1,sendData@result+1
  1170  000484  C01D  F543         	movff	?_cobs_encode+2,sendData@result+2
  1171                           
  1172                           ;FastTransfer.c: 151: SendArray[0] = whereToSend;
  1173  000488  C53C  F51E         	movff	sendData@whereToSend,sendData@SendArray
  1174                           
  1175                           ;FastTransfer.c: 153: for(i = 1;i<result.out_len+1;i++){
  1176  00048C  0E00               	movlw	0
  1177  00048E  0105               	movlb	5	; () banked
  1178  000490  6F45               	movwf	(sendData@i+1)& (0+255),b
  1179  000492  0E01               	movlw	1
  1180  000494  6F44               	movwf	sendData@i& (0+255),b
  1181  000496  D027               	goto	l2490
  1182  000498                     l2486:
  1183                           
  1184                           ; BSR set to: 5
  1185                           ;FastTransfer.c: 154: SendArray[i] = COBSArray[i-1];
  1186  000498  0EFF               	movlw	255
  1187  00049A  0100               	movlb	0	; () banked
  1188  00049C  6FB7               	movwf	??_sendData& (0+255),b
  1189  00049E  0EFF               	movlw	255
  1190  0004A0  0100               	movlb	0	; () banked
  1191  0004A2  6FB8               	movwf	(??_sendData+1)& (0+255),b
  1192  0004A4  C544  F0B9         	movff	sendData@i,??_sendData+2
  1193  0004A8  C545  F0BA         	movff	sendData@i+1,??_sendData+3
  1194  0004AC  0100               	movlb	0	; () banked
  1195  0004AE  51B7               	movf	??_sendData& (0+255),w,b
  1196  0004B0  0100               	movlb	0	; () banked
  1197  0004B2  27B9               	addwf	(??_sendData+2)& (0+255),f,b
  1198  0004B4  0100               	movlb	0	; () banked
  1199  0004B6  51B8               	movf	(??_sendData+1)& (0+255),w,b
  1200  0004B8  0100               	movlb	0	; () banked
  1201  0004BA  23BA               	addwfc	(??_sendData+3)& (0+255),f,b
  1202  0004BC  0E00               	movlw	low sendData@COBSArray
  1203  0004BE  0100               	movlb	0	; () banked
  1204  0004C0  25B9               	addwf	(??_sendData+2)& (0+255),w,b
  1205  0004C2  6ED9               	movwf	fsr2l,c
  1206  0004C4  0E05               	movlw	high sendData@COBSArray
  1207  0004C6  0100               	movlb	0	; () banked
  1208  0004C8  21BA               	addwfc	(??_sendData+3)& (0+255),w,b
  1209  0004CA  6EDA               	movwf	fsr2h,c
  1210  0004CC  0E1E               	movlw	low sendData@SendArray
  1211  0004CE  0105               	movlb	5	; () banked
  1212  0004D0  2544               	addwf	sendData@i& (0+255),w,b
  1213  0004D2  6EE1               	movwf	fsr1l,c
  1214  0004D4  0E05               	movlw	high sendData@SendArray
  1215  0004D6  0105               	movlb	5	; () banked
  1216  0004D8  2145               	addwfc	(sendData@i+1)& (0+255),w,b
  1217  0004DA  6EE2               	movwf	fsr1h,c
  1218  0004DC  CFDF FFE7          	movff	indf2,indf1
  1219                           
  1220                           ; BSR set to: 5
  1221  0004E0  0105               	movlb	5	; () banked
  1222  0004E2  4B44               	infsnz	sendData@i& (0+255),f,b
  1223  0004E4  2B45               	incf	(sendData@i+1)& (0+255),f,b
  1224  0004E6                     l2490:
  1225                           
  1226                           ; BSR set to: 5
  1227  0004E6  0E01               	movlw	1
  1228  0004E8  0105               	movlb	5	; () banked
  1229  0004EA  2541               	addwf	sendData@result& (0+255),w,b
  1230  0004EC  0100               	movlb	0	; () banked
  1231  0004EE  6FB7               	movwf	??_sendData& (0+255),b
  1232  0004F0  0E00               	movlw	0
  1233  0004F2  0105               	movlb	5	; () banked
  1234  0004F4  2142               	addwfc	(sendData@result+1)& (0+255),w,b
  1235  0004F6  0100               	movlb	0	; () banked
  1236  0004F8  6FB8               	movwf	(??_sendData+1)& (0+255),b
  1237  0004FA  0100               	movlb	0	; () banked
  1238  0004FC  51B7               	movf	??_sendData& (0+255),w,b
  1239  0004FE  0105               	movlb	5	; () banked
  1240  000500  5D44               	subwf	sendData@i& (0+255),w,b
  1241  000502  0100               	movlb	0	; () banked
  1242  000504  51B8               	movf	(??_sendData+1)& (0+255),w,b
  1243  000506  0105               	movlb	5	; () banked
  1244  000508  5945               	subwfb	(sendData@i+1)& (0+255),w,b
  1245  00050A  A0D8               	btfss	status,0,c
  1246  00050C  D7C5               	goto	l2486
  1247                           
  1248                           ; BSR set to: 5
  1249                           ;FastTransfer.c: 155: }
  1250                           ;FastTransfer.c: 157: for(i = 0;i<result.out_len+2;i++){
  1251                           
  1252                           ; BSR set to: 5
  1253  00050E  0E00               	movlw	0
  1254  000510  0105               	movlb	5	; () banked
  1255  000512  6F45               	movwf	(sendData@i+1)& (0+255),b
  1256  000514  0E00               	movlw	0
  1257  000516  6F44               	movwf	sendData@i& (0+255),b
  1258  000518  D00E               	goto	l2498
  1259  00051A                     l2494:
  1260                           
  1261                           ; BSR set to: 5
  1262                           ;FastTransfer.c: 158: Send_put(SendArray[i]);
  1263  00051A  0E1E               	movlw	low sendData@SendArray
  1264  00051C  0105               	movlb	5	; () banked
  1265  00051E  2544               	addwf	sendData@i& (0+255),w,b
  1266  000520  6ED9               	movwf	fsr2l,c
  1267  000522  0E05               	movlw	high sendData@SendArray
  1268  000524  0105               	movlb	5	; () banked
  1269  000526  2145               	addwfc	(sendData@i+1)& (0+255),w,b
  1270  000528  6EDA               	movwf	fsr2h,c
  1271  00052A  50DF               	movf	indf2,w,c
  1272  00052C  EC6E  F006         	call	_Send_put
  1273  000530  0105               	movlb	5	; () banked
  1274  000532  4B44               	infsnz	sendData@i& (0+255),f,b
  1275  000534  2B45               	incf	(sendData@i+1)& (0+255),f,b
  1276  000536                     l2498:
  1277                           
  1278                           ; BSR set to: 5
  1279  000536  0E02               	movlw	2
  1280  000538  0105               	movlb	5	; () banked
  1281  00053A  2541               	addwf	sendData@result& (0+255),w,b
  1282  00053C  0100               	movlb	0	; () banked
  1283  00053E  6FB7               	movwf	??_sendData& (0+255),b
  1284  000540  0E00               	movlw	0
  1285  000542  0105               	movlb	5	; () banked
  1286  000544  2142               	addwfc	(sendData@result+1)& (0+255),w,b
  1287  000546  0100               	movlb	0	; () banked
  1288  000548  6FB8               	movwf	(??_sendData+1)& (0+255),b
  1289  00054A  0100               	movlb	0	; () banked
  1290  00054C  51B7               	movf	??_sendData& (0+255),w,b
  1291  00054E  0105               	movlb	5	; () banked
  1292  000550  5D44               	subwf	sendData@i& (0+255),w,b
  1293  000552  0100               	movlb	0	; () banked
  1294  000554  51B8               	movf	(??_sendData+1)& (0+255),w,b
  1295  000556  0105               	movlb	5	; () banked
  1296  000558  5945               	subwfb	(sendData@i+1)& (0+255),w,b
  1297  00055A  B0D8               	btfsc	status,0,c
  1298  00055C  0012               	return	
  1299  00055E  D7DD               	goto	l2494
  1300  000560                     __end_of_sendData:
  1301                           	opt stack 0
  1302                           tblptru	equ	0xFF8
  1303                           tblptrh	equ	0xFF7
  1304                           tblptrl	equ	0xFF6
  1305                           tablat	equ	0xFF5
  1306                           postinc0	equ	0xFEE
  1307                           wreg	equ	0xFE8
  1308                           indf1	equ	0xFE7
  1309                           postdec1	equ	0xFE5
  1310                           fsr1h	equ	0xFE2
  1311                           fsr1l	equ	0xFE1
  1312                           indf2	equ	0xFDF
  1313                           fsr2h	equ	0xFDA
  1314                           fsr2l	equ	0xFD9
  1315                           status	equ	0xFD8
  1316                           
  1317 ;; *************** function _cobs_encode *****************
  1318 ;; Defined at:
  1319 ;;		line 29 in file "COBS.c"
  1320 ;; Parameters:    Size  Location     Type
  1321 ;;  dst_buf_ptr     2   26[COMRAM] PTR unsigned char 
  1322 ;;		 -> sendData@COBSArray(30), 
  1323 ;;  dst_buf_len     2   28[COMRAM] unsigned int 
  1324 ;;  src_ptr         2   30[COMRAM] PTR const unsigned char 
  1325 ;;		 -> sendData@SendArray(30), 
  1326 ;;  src_len         2   32[COMRAM] unsigned int 
  1327 ;; Auto vars:     Size  Location     Type
  1328 ;;  result          3   10[BANK0 ] struct .
  1329 ;;  dst_write_pt    2    8[BANK0 ] PTR unsigned char 
  1330 ;;		 -> sendData@COBSArray(30), 
  1331 ;;  dst_code_wri    2    6[BANK0 ] PTR unsigned char 
  1332 ;;		 -> sendData@COBSArray(30), 
  1333 ;;  dst_buf_end_    2    3[BANK0 ] PTR unsigned char 
  1334 ;;		 -> sendData@COBSArray(30), 
  1335 ;;  src_end_ptr     2    0[BANK0 ] PTR const unsigned char 
  1336 ;;		 -> sendData@SendArray(30), 
  1337 ;;  search_len      1    5[BANK0 ] unsigned char 
  1338 ;;  src_byte        1    2[BANK0 ] unsigned char 
  1339 ;; Return value:  Size  Location     Type
  1340 ;;                  3   26[COMRAM] struct .
  1341 ;; Registers used:
  1342 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1343 ;; Tracked objects:
  1344 ;;		On entry : 0/0
  1345 ;;		On exit  : 0/0
  1346 ;;		Unchanged: 0/0
  1347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1348 ;;      Params:         8       0       0       0       0       0       0
  1349 ;;      Locals:         0      13       0       0       0       0       0
  1350 ;;      Temps:          2       0       0       0       0       0       0
  1351 ;;      Totals:        10      13       0       0       0       0       0
  1352 ;;Total ram usage:       23 bytes
  1353 ;; Hardware stack levels used:    1
  1354 ;; Hardware stack levels required when called:    4
  1355 ;; This function calls:
  1356 ;;		Nothing
  1357 ;; This function is called by:
  1358 ;;		_sendData
  1359 ;; This function uses a non-reentrant model
  1360 ;;
  1361                           
  1362                           	psect	text4
  1363  000262                     __ptext4:
  1364                           	opt stack 0
  1365  000262                     _cobs_encode:
  1366                           	opt stack 23
  1367                           
  1368                           ;COBS.c: 31: cobs_encode_result result = { 0, COBS_ENCODE_OK };
  1369                           
  1370                           ; BSR set to: 5
  1371                           ;incstack = 0
  1372  000262  C067  F0B1         	movff	cobs_encode@F180,cobs_encode@result
  1373  000266  C068  F0B2         	movff	cobs_encode@F180+1,cobs_encode@result+1
  1374  00026A  C069  F0B3         	movff	cobs_encode@F180+2,cobs_encode@result+2
  1375                           
  1376                           ;COBS.c: 32: const uint8_t * src_end_ptr = src_ptr + src_len;
  1377  00026E  5021               	movf	cobs_encode@src_len,w,c
  1378  000270  241F               	addwf	cobs_encode@src_ptr,w,c
  1379  000272  0100               	movlb	0	; () banked
  1380  000274  6FA7               	movwf	cobs_encode@src_end_ptr& (0+255),b
  1381  000276  5022               	movf	cobs_encode@src_len+1,w,c
  1382  000278  2020               	addwfc	cobs_encode@src_ptr+1,w,c
  1383  00027A  0100               	movlb	0	; () banked
  1384  00027C  6FA8               	movwf	(cobs_encode@src_end_ptr+1)& (0+255),b
  1385                           
  1386                           ;COBS.c: 33: uint8_t * dst_buf_end_ptr = dst_buf_ptr + dst_buf_len;
  1387  00027E  501D               	movf	cobs_encode@dst_buf_len,w,c
  1388  000280  241B               	addwf	cobs_encode@dst_buf_ptr,w,c
  1389  000282  0100               	movlb	0	; () banked
  1390  000284  6FAA               	movwf	cobs_encode@dst_buf_end_ptr& (0+255),b
  1391  000286  501E               	movf	cobs_encode@dst_buf_len+1,w,c
  1392  000288  201C               	addwfc	cobs_encode@dst_buf_ptr+1,w,c
  1393  00028A  0100               	movlb	0	; () banked
  1394  00028C  6FAB               	movwf	(cobs_encode@dst_buf_end_ptr+1)& (0+255),b
  1395                           
  1396                           ;COBS.c: 34: uint8_t * dst_code_write_ptr = dst_buf_ptr;
  1397  00028E  C01B  F0AD         	movff	cobs_encode@dst_buf_ptr,cobs_encode@dst_code_write_ptr
  1398  000292  C01C  F0AE         	movff	cobs_encode@dst_buf_ptr+1,cobs_encode@dst_code_write_ptr+1
  1399                           
  1400                           ;COBS.c: 35: uint8_t * dst_write_ptr = dst_code_write_ptr + 1;
  1401  000296  0E01               	movlw	1
  1402  000298  0100               	movlb	0	; () banked
  1403  00029A  25AD               	addwf	cobs_encode@dst_code_write_ptr& (0+255),w,b
  1404  00029C  0100               	movlb	0	; () banked
  1405  00029E  6FAF               	movwf	cobs_encode@dst_write_ptr& (0+255),b
  1406  0002A0  0E00               	movlw	0
  1407  0002A2  0100               	movlb	0	; () banked
  1408  0002A4  21AE               	addwfc	(cobs_encode@dst_code_write_ptr+1)& (0+255),w,b
  1409  0002A6  0100               	movlb	0	; () banked
  1410  0002A8  6FB0               	movwf	(cobs_encode@dst_write_ptr+1)& (0+255),b
  1411                           
  1412                           ; BSR set to: 0
  1413                           ;COBS.c: 36: uint8_t src_byte = 0;
  1414  0002AA  0E00               	movlw	0
  1415  0002AC  0100               	movlb	0	; () banked
  1416  0002AE  6FA9               	movwf	cobs_encode@src_byte& (0+255),b
  1417                           
  1418                           ; BSR set to: 0
  1419                           ;COBS.c: 37: uint8_t search_len = 1;
  1420  0002B0  0E01               	movlw	1
  1421  0002B2  0100               	movlb	0	; () banked
  1422  0002B4  6FAC               	movwf	cobs_encode@search_len& (0+255),b
  1423                           
  1424                           ;COBS.c: 41: if ((dst_buf_ptr == (0)) || (src_ptr == (0)))
  1425  0002B6  501B               	movf	cobs_encode@dst_buf_ptr,w,c
  1426  0002B8  101C               	iorwf	cobs_encode@dst_buf_ptr+1,w,c
  1427  0002BA  B4D8               	btfsc	status,2,c
  1428  0002BC  D004               	goto	l2382
  1429                           
  1430                           ; BSR set to: 0
  1431  0002BE  501F               	movf	cobs_encode@src_ptr,w,c
  1432  0002C0  1020               	iorwf	cobs_encode@src_ptr+1,w,c
  1433  0002C2  A4D8               	btfss	status,2,c
  1434  0002C4  D00A               	goto	l2388
  1435  0002C6                     l2382:
  1436                           
  1437                           ; BSR set to: 0
  1438                           ;COBS.c: 42: {
  1439                           ;COBS.c: 43: result.status = COBS_ENCODE_NULL_POINTER;
  1440  0002C6  0E01               	movlw	1
  1441  0002C8  0100               	movlb	0	; () banked
  1442  0002CA  6FB3               	movwf	(cobs_encode@result+2)& (0+255),b
  1443                           
  1444                           ; BSR set to: 0
  1445                           ;COBS.c: 44: return result;
  1446  0002CC  C0B1  F01B         	movff	cobs_encode@result,?_cobs_encode
  1447  0002D0  C0B2  F01C         	movff	cobs_encode@result+1,?_cobs_encode+1
  1448  0002D4  C0B3  F01D         	movff	cobs_encode@result+2,?_cobs_encode+2
  1449                           
  1450                           ; BSR set to: 0
  1451  0002D8  0012               	return	
  1452  0002DA                     l2388:
  1453                           
  1454                           ; BSR set to: 0
  1455                           ;COBS.c: 45: }
  1456                           ;COBS.c: 47: if (src_len != 0)
  1457  0002DA  5021               	movf	cobs_encode@src_len,w,c
  1458  0002DC  1022               	iorwf	cobs_encode@src_len+1,w,c
  1459  0002DE  B4D8               	btfsc	status,2,c
  1460  0002E0  D05C               	goto	l2432
  1461  0002E2                     l2390:
  1462                           
  1463                           ; BSR set to: 0
  1464                           ;COBS.c: 51: {
  1465                           ;COBS.c: 53: if (dst_write_ptr >= dst_buf_end_ptr)
  1466  0002E2  0100               	movlb	0	; () banked
  1467  0002E4  51AA               	movf	cobs_encode@dst_buf_end_ptr& (0+255),w,b
  1468  0002E6  0100               	movlb	0	; () banked
  1469  0002E8  5DAF               	subwf	cobs_encode@dst_write_ptr& (0+255),w,b
  1470  0002EA  0100               	movlb	0	; () banked
  1471  0002EC  51AB               	movf	(cobs_encode@dst_buf_end_ptr+1)& (0+255),w,b
  1472  0002EE  0100               	movlb	0	; () banked
  1473  0002F0  59B0               	subwfb	(cobs_encode@dst_write_ptr+1)& (0+255),w,b
  1474  0002F2  A0D8               	btfss	status,0,c
  1475  0002F4  D003               	goto	l2394
  1476                           
  1477                           ; BSR set to: 0
  1478                           ;COBS.c: 54: {
  1479                           ;COBS.c: 55: result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
  1480  0002F6  0100               	movlb	0	; () banked
  1481  0002F8  83B3               	bsf	(cobs_encode@result+2)& (0+255),1,b
  1482                           
  1483                           ;COBS.c: 56: break;
  1484  0002FA  D04F               	goto	l2432
  1485  0002FC                     l2394:
  1486                           
  1487                           ; BSR set to: 0
  1488                           ;COBS.c: 57: }
  1489                           ;COBS.c: 59: src_byte = *src_ptr++;
  1490  0002FC  C01F  FFD9         	movff	cobs_encode@src_ptr,fsr2l
  1491  000300  C020  FFDA         	movff	cobs_encode@src_ptr+1,fsr2h
  1492  000304  50DF               	movf	indf2,w,c
  1493  000306  0100               	movlb	0	; () banked
  1494  000308  6FA9               	movwf	cobs_encode@src_byte& (0+255),b
  1495                           
  1496                           ; BSR set to: 0
  1497  00030A  4A1F               	infsnz	cobs_encode@src_ptr,f,c
  1498  00030C  2A20               	incf	cobs_encode@src_ptr+1,f,c
  1499                           
  1500                           ; BSR set to: 0
  1501                           ;COBS.c: 60: if (src_byte == 0)
  1502  00030E  0100               	movlb	0	; () banked
  1503  000310  51A9               	movf	cobs_encode@src_byte& (0+255),w,b
  1504  000312  0100               	movlb	0	; () banked
  1505  000314  A4D8               	btfss	status,2,c
  1506  000316  D019               	goto	l2412
  1507                           
  1508                           ; BSR set to: 0
  1509                           ;COBS.c: 61: {
  1510                           ;COBS.c: 63: *dst_code_write_ptr = search_len;
  1511  000318  C0AD  FFD9         	movff	cobs_encode@dst_code_write_ptr,fsr2l
  1512  00031C  C0AE  FFDA         	movff	cobs_encode@dst_code_write_ptr+1,fsr2h
  1513  000320  C0AC  FFDF         	movff	cobs_encode@search_len,indf2
  1514                           
  1515                           ; BSR set to: 0
  1516                           ;COBS.c: 64: dst_code_write_ptr = dst_write_ptr++;
  1517  000324  C0AF  F0AD         	movff	cobs_encode@dst_write_ptr,cobs_encode@dst_code_write_ptr
  1518  000328  C0B0  F0AE         	movff	cobs_encode@dst_write_ptr+1,cobs_encode@dst_code_write_ptr+1
  1519                           
  1520                           ; BSR set to: 0
  1521  00032C  0100               	movlb	0	; () banked
  1522  00032E  4BAF               	infsnz	cobs_encode@dst_write_ptr& (0+255),f,b
  1523  000330  2BB0               	incf	(cobs_encode@dst_write_ptr+1)& (0+255),f,b
  1524                           
  1525                           ; BSR set to: 0
  1526                           ;COBS.c: 65: search_len = 1;
  1527  000332  0E01               	movlw	1
  1528  000334  0100               	movlb	0	; () banked
  1529  000336  6FAC               	movwf	cobs_encode@search_len& (0+255),b
  1530                           
  1531                           ; BSR set to: 0
  1532                           ;COBS.c: 66: if (src_ptr >= src_end_ptr)
  1533  000338  0100               	movlb	0	; () banked
  1534  00033A  51A7               	movf	cobs_encode@src_end_ptr& (0+255),w,b
  1535  00033C  5C1F               	subwf	cobs_encode@src_ptr,w,c
  1536  00033E  0100               	movlb	0	; () banked
  1537  000340  51A8               	movf	(cobs_encode@src_end_ptr+1)& (0+255),w,b
  1538  000342  5820               	subwfb	cobs_encode@src_ptr+1,w,c
  1539  000344  B0D8               	btfsc	status,0,c
  1540  000346  D029               	goto	l2432
  1541  000348  D7CC               	goto	l2390
  1542  00034A                     l2412:
  1543                           
  1544                           ; BSR set to: 0
  1545                           ;COBS.c: 71: else
  1546                           ;COBS.c: 72: {
  1547                           ;COBS.c: 74: *dst_write_ptr++ = src_byte;
  1548  00034A  C0AF  FFD9         	movff	cobs_encode@dst_write_ptr,fsr2l
  1549  00034E  C0B0  FFDA         	movff	cobs_encode@dst_write_ptr+1,fsr2h
  1550  000352  C0A9  FFDF         	movff	cobs_encode@src_byte,indf2
  1551                           
  1552                           ; BSR set to: 0
  1553  000356  0100               	movlb	0	; () banked
  1554  000358  4BAF               	infsnz	cobs_encode@dst_write_ptr& (0+255),f,b
  1555  00035A  2BB0               	incf	(cobs_encode@dst_write_ptr+1)& (0+255),f,b
  1556                           
  1557                           ; BSR set to: 0
  1558                           ;COBS.c: 75: search_len++;
  1559  00035C  0100               	movlb	0	; () banked
  1560  00035E  2BAC               	incf	cobs_encode@search_len& (0+255),f,b
  1561                           
  1562                           ; BSR set to: 0
  1563                           ;COBS.c: 76: if (src_ptr >= src_end_ptr)
  1564  000360  0100               	movlb	0	; () banked
  1565  000362  51A7               	movf	cobs_encode@src_end_ptr& (0+255),w,b
  1566  000364  5C1F               	subwf	cobs_encode@src_ptr,w,c
  1567  000366  0100               	movlb	0	; () banked
  1568  000368  51A8               	movf	(cobs_encode@src_end_ptr+1)& (0+255),w,b
  1569  00036A  5820               	subwfb	cobs_encode@src_ptr+1,w,c
  1570  00036C  B0D8               	btfsc	status,0,c
  1571  00036E  D015               	goto	l2432
  1572                           
  1573                           ; BSR set to: 0
  1574                           ;COBS.c: 79: }
  1575                           ;COBS.c: 80: if (search_len == 0xFF)
  1576                           
  1577                           ; BSR set to: 0
  1578                           
  1579                           ; BSR set to: 0
  1580                           ;COBS.c: 77: {
  1581                           ;COBS.c: 78: break;
  1582  000370  0100               	movlb	0	; () banked
  1583  000372  29AC               	incf	cobs_encode@search_len& (0+255),w,b
  1584  000374  A4D8               	btfss	status,2,c
  1585  000376  D7B5               	goto	l2390
  1586                           
  1587                           ; BSR set to: 0
  1588                           ;COBS.c: 81: {
  1589                           ;COBS.c: 84: *dst_code_write_ptr = search_len;
  1590  000378  C0AD  FFD9         	movff	cobs_encode@dst_code_write_ptr,fsr2l
  1591  00037C  C0AE  FFDA         	movff	cobs_encode@dst_code_write_ptr+1,fsr2h
  1592  000380  C0AC  FFDF         	movff	cobs_encode@search_len,indf2
  1593                           
  1594                           ; BSR set to: 0
  1595                           ;COBS.c: 85: dst_code_write_ptr = dst_write_ptr++;
  1596  000384  C0AF  F0AD         	movff	cobs_encode@dst_write_ptr,cobs_encode@dst_code_write_ptr
  1597  000388  C0B0  F0AE         	movff	cobs_encode@dst_write_ptr+1,cobs_encode@dst_code_write_ptr+1
  1598                           
  1599                           ; BSR set to: 0
  1600  00038C  0100               	movlb	0	; () banked
  1601  00038E  4BAF               	infsnz	cobs_encode@dst_write_ptr& (0+255),f,b
  1602  000390  2BB0               	incf	(cobs_encode@dst_write_ptr+1)& (0+255),f,b
  1603                           
  1604                           ; BSR set to: 0
  1605                           ;COBS.c: 86: search_len = 1;
  1606  000392  0E01               	movlw	1
  1607  000394  0100               	movlb	0	; () banked
  1608  000396  6FAC               	movwf	cobs_encode@search_len& (0+255),b
  1609                           
  1610                           ; BSR set to: 0
  1611                           ;COBS.c: 87: }
  1612                           ;COBS.c: 88: }
  1613                           ;COBS.c: 89: }
  1614                           
  1615                           ; BSR set to: 0
  1616  000398  D7A4               	goto	l2390
  1617  00039A                     l2432:
  1618                           
  1619                           ; BSR set to: 0
  1620                           ;COBS.c: 90: }
  1621                           ;COBS.c: 96: if (dst_code_write_ptr >= dst_buf_end_ptr)
  1622  00039A  0100               	movlb	0	; () banked
  1623  00039C  51AA               	movf	cobs_encode@dst_buf_end_ptr& (0+255),w,b
  1624  00039E  0100               	movlb	0	; () banked
  1625  0003A0  5DAD               	subwf	cobs_encode@dst_code_write_ptr& (0+255),w,b
  1626  0003A2  0100               	movlb	0	; () banked
  1627  0003A4  51AB               	movf	(cobs_encode@dst_buf_end_ptr+1)& (0+255),w,b
  1628  0003A6  0100               	movlb	0	; () banked
  1629  0003A8  59AE               	subwfb	(cobs_encode@dst_code_write_ptr+1)& (0+255),w,b
  1630  0003AA  A0D8               	btfss	status,0,c
  1631  0003AC  D007               	goto	l2438
  1632                           
  1633                           ; BSR set to: 0
  1634                           ;COBS.c: 97: {
  1635                           ;COBS.c: 99: result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
  1636  0003AE  0100               	movlb	0	; () banked
  1637  0003B0  83B3               	bsf	(cobs_encode@result+2)& (0+255),1,b
  1638                           
  1639                           ; BSR set to: 0
  1640                           ;COBS.c: 100: dst_write_ptr = dst_buf_end_ptr;
  1641  0003B2  C0AA  F0AF         	movff	cobs_encode@dst_buf_end_ptr,cobs_encode@dst_write_ptr
  1642  0003B6  C0AB  F0B0         	movff	cobs_encode@dst_buf_end_ptr+1,cobs_encode@dst_write_ptr+1
  1643                           
  1644                           ;COBS.c: 101: }
  1645  0003BA  D006               	goto	l2440
  1646  0003BC                     l2438:
  1647                           
  1648                           ; BSR set to: 0
  1649                           ;COBS.c: 102: else
  1650                           ;COBS.c: 103: {
  1651                           ;COBS.c: 105: *dst_code_write_ptr = search_len;
  1652  0003BC  C0AD  FFD9         	movff	cobs_encode@dst_code_write_ptr,fsr2l
  1653  0003C0  C0AE  FFDA         	movff	cobs_encode@dst_code_write_ptr+1,fsr2h
  1654  0003C4  C0AC  FFDF         	movff	cobs_encode@search_len,indf2
  1655  0003C8                     l2440:
  1656                           
  1657                           ; BSR set to: 0
  1658                           ;COBS.c: 106: }
  1659                           ;COBS.c: 109: result.out_len = dst_write_ptr - dst_buf_ptr;
  1660  0003C8  C01B  F023         	movff	cobs_encode@dst_buf_ptr,??_cobs_encode
  1661  0003CC  C01C  F024         	movff	cobs_encode@dst_buf_ptr+1,??_cobs_encode+1
  1662  0003D0  1E23               	comf	??_cobs_encode,f,c
  1663  0003D2  1E24               	comf	??_cobs_encode+1,f,c
  1664  0003D4  4A23               	infsnz	??_cobs_encode,f,c
  1665  0003D6  2A24               	incf	??_cobs_encode+1,f,c
  1666  0003D8  0100               	movlb	0	; () banked
  1667  0003DA  51AF               	movf	cobs_encode@dst_write_ptr& (0+255),w,b
  1668  0003DC  2423               	addwf	??_cobs_encode,w,c
  1669  0003DE  0100               	movlb	0	; () banked
  1670  0003E0  6FB1               	movwf	cobs_encode@result& (0+255),b
  1671  0003E2  0100               	movlb	0	; () banked
  1672  0003E4  51B0               	movf	(cobs_encode@dst_write_ptr+1)& (0+255),w,b
  1673  0003E6  2024               	addwfc	??_cobs_encode+1,w,c
  1674  0003E8  0100               	movlb	0	; () banked
  1675  0003EA  6FB2               	movwf	(cobs_encode@result+1)& (0+255),b
  1676                           
  1677                           ; BSR set to: 0
  1678                           ;COBS.c: 111: return result;
  1679  0003EC  C0B1  F01B         	movff	cobs_encode@result,?_cobs_encode
  1680  0003F0  C0B2  F01C         	movff	cobs_encode@result+1,?_cobs_encode+1
  1681  0003F4  C0B3  F01D         	movff	cobs_encode@result+2,?_cobs_encode+2
  1682  0003F8  0012               	return	
  1683  0003FA                     __end_of_cobs_encode:
  1684                           	opt stack 0
  1685                           tblptru	equ	0xFF8
  1686                           tblptrh	equ	0xFF7
  1687                           tblptrl	equ	0xFF6
  1688                           tablat	equ	0xFF5
  1689                           postinc0	equ	0xFEE
  1690                           wreg	equ	0xFE8
  1691                           indf1	equ	0xFE7
  1692                           postdec1	equ	0xFE5
  1693                           fsr1h	equ	0xFE2
  1694                           fsr1l	equ	0xFE1
  1695                           indf2	equ	0xFDF
  1696                           fsr2h	equ	0xFDA
  1697                           fsr2l	equ	0xFD9
  1698                           status	equ	0xFD8
  1699                           
  1700 ;; *************** function _Send_put *****************
  1701 ;; Defined at:
  1702 ;;		line 129 in file "UART.c"
  1703 ;; Parameters:    Size  Location     Type
  1704 ;;  _data           1    wreg     unsigned char 
  1705 ;; Auto vars:     Size  Location     Type
  1706 ;;  _data           1    0[BANK0 ] unsigned char 
  1707 ;; Return value:  Size  Location     Type
  1708 ;;                  1    wreg      void 
  1709 ;; Registers used:
  1710 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1711 ;; Tracked objects:
  1712 ;;		On entry : 0/0
  1713 ;;		On exit  : 0/0
  1714 ;;		Unchanged: 0/0
  1715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1716 ;;      Params:         0       0       0       0       0       0       0
  1717 ;;      Locals:         0       1       0       0       0       0       0
  1718 ;;      Temps:          0       0       0       0       0       0       0
  1719 ;;      Totals:         0       1       0       0       0       0       0
  1720 ;;Total ram usage:        1 bytes
  1721 ;; Hardware stack levels used:    1
  1722 ;; Hardware stack levels required when called:    6
  1723 ;; This function calls:
  1724 ;;		_UART_buff_get
  1725 ;;		_UART_buff_put
  1726 ;; This function is called by:
  1727 ;;		_ComStart
  1728 ;;		_sendData
  1729 ;;		_putch
  1730 ;; This function uses a non-reentrant model
  1731 ;;
  1732                           
  1733                           	psect	text5
  1734  000CDC                     __ptext5:
  1735                           	opt stack 0
  1736  000CDC                     _Send_put:
  1737                           	opt stack 21
  1738                           
  1739                           ; BSR set to: 0
  1740                           ;incstack = 0
  1741                           ;Send_put@_data stored from wreg
  1742  000CDC  0100               	movlb	0	; () banked
  1743  000CDE  6FA7               	movwf	Send_put@_data& (0+255),b
  1744                           
  1745                           ;UART.c: 130: UART_buff_put(&output_buffer, _data);
  1746  000CE0  0E00               	movlw	low _output_buffer
  1747  000CE2  6E21               	movwf	UART_buff_put@_this,c
  1748  000CE4  0E02               	movlw	high _output_buffer
  1749  000CE6  6E22               	movwf	UART_buff_put@_this+1,c
  1750  000CE8  C0A7  F023         	movff	Send_put@_data,UART_buff_put@c
  1751  000CEC  ECB0  F002         	call	_UART_buff_put	;wreg free
  1752                           
  1753                           ;UART.c: 131: if (Transmit_stall == 1) {
  1754  000CF0  0444               	decf	_Transmit_stall,w,c
  1755  000CF2  A4D8               	btfss	status,2,c
  1756  000CF4  0012               	return	
  1757                           
  1758                           ;UART.c: 132: Transmit_stall = 0;
  1759  000CF6  0E00               	movlw	0
  1760  000CF8  6E44               	movwf	_Transmit_stall,c
  1761                           
  1762                           ;UART.c: 133: TXREG1 = UART_buff_get(&output_buffer);
  1763  000CFA  0E00               	movlw	low _output_buffer
  1764  000CFC  6E21               	movwf	UART_buff_get@_this,c
  1765  000CFE  0E02               	movlw	high _output_buffer
  1766  000D00  6E22               	movwf	UART_buff_get@_this+1,c
  1767  000D02  ECB0  F004         	call	_UART_buff_get	;wreg free
  1768  000D06  6EAD               	movwf	4013,c	;volatile
  1769                           
  1770                           ;UART.c: 134: PIE1bits.TX1IE = 1;
  1771  000D08  889D               	bsf	3997,4,c	;volatile
  1772  000D0A  0012               	return	
  1773  000D0C                     __end_of_Send_put:
  1774                           	opt stack 0
  1775                           tblptru	equ	0xFF8
  1776                           tblptrh	equ	0xFF7
  1777                           tblptrl	equ	0xFF6
  1778                           tablat	equ	0xFF5
  1779                           postinc0	equ	0xFEE
  1780                           wreg	equ	0xFE8
  1781                           indf1	equ	0xFE7
  1782                           postdec1	equ	0xFE5
  1783                           fsr1h	equ	0xFE2
  1784                           fsr1l	equ	0xFE1
  1785                           indf2	equ	0xFDF
  1786                           fsr2h	equ	0xFDA
  1787                           fsr2l	equ	0xFD9
  1788                           status	equ	0xFD8
  1789                           
  1790 ;; *************** function _UART_buff_put *****************
  1791 ;; Defined at:
  1792 ;;		line 67 in file "UART.c"
  1793 ;; Parameters:    Size  Location     Type
  1794 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  1795 ;;		 -> output_buffer(206), input_buffer(206), 
  1796 ;;  c               1   34[COMRAM] const unsigned char 
  1797 ;; Auto vars:     Size  Location     Type
  1798 ;;		None
  1799 ;; Return value:  Size  Location     Type
  1800 ;;                  1    wreg      void 
  1801 ;; Registers used:
  1802 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1803 ;; Tracked objects:
  1804 ;;		On entry : 0/0
  1805 ;;		On exit  : 0/0
  1806 ;;		Unchanged: 0/0
  1807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1808 ;;      Params:         3       0       0       0       0       0       0
  1809 ;;      Locals:         0       0       0       0       0       0       0
  1810 ;;      Temps:          2       0       0       0       0       0       0
  1811 ;;      Totals:         5       0       0       0       0       0       0
  1812 ;;Total ram usage:        5 bytes
  1813 ;; Hardware stack levels used:    1
  1814 ;; Hardware stack levels required when called:    5
  1815 ;; This function calls:
  1816 ;;		_UART_buff_modulo_inc
  1817 ;; This function is called by:
  1818 ;;		_Send_put
  1819 ;; This function uses a non-reentrant model
  1820 ;;
  1821                           
  1822                           	psect	text6
  1823  000560                     __ptext6:
  1824                           	opt stack 0
  1825  000560                     _UART_buff_put:
  1826                           	opt stack 21
  1827                           
  1828                           ;UART.c: 68: if (_this->count < 200) {
  1829                           
  1830                           ;incstack = 0
  1831  000560  EE20 F0CC          	lfsr	2,204
  1832  000564  5021               	movf	UART_buff_put@_this,w,c
  1833  000566  26D9               	addwf	fsr2l,f,c
  1834  000568  5022               	movf	UART_buff_put@_this+1,w,c
  1835  00056A  22DA               	addwfc	fsr2h,f,c
  1836  00056C  0E01               	movlw	1
  1837  00056E  BEDB               	btfsc	plusw2,7,c
  1838  000570  D007               	goto	l2316
  1839  000572  0E01               	movlw	1
  1840  000574  50DB               	movf	plusw2,w,c
  1841  000576  E13A               	bnz	l2322
  1842  000578  0EC8               	movlw	200
  1843  00057A  5CDE               	subwf	postinc2,w,c
  1844  00057C  B0D8               	btfsc	status,0,c
  1845  00057E  D036               	goto	l2322
  1846  000580                     l2316:
  1847                           
  1848                           ;UART.c: 69: _this->buf[_this->head] = c;
  1849  000580  EE20 F0C8          	lfsr	2,200
  1850  000584  5021               	movf	UART_buff_put@_this,w,c
  1851  000586  26D9               	addwf	fsr2l,f,c
  1852  000588  5022               	movf	UART_buff_put@_this+1,w,c
  1853  00058A  22DA               	addwfc	fsr2h,f,c
  1854  00058C  CFDE F024          	movff	postinc2,??_UART_buff_put
  1855  000590  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  1856  000594  5024               	movf	??_UART_buff_put,w,c
  1857  000596  2421               	addwf	UART_buff_put@_this,w,c
  1858  000598  6ED9               	movwf	fsr2l,c
  1859  00059A  5025               	movf	??_UART_buff_put+1,w,c
  1860  00059C  2022               	addwfc	UART_buff_put@_this+1,w,c
  1861  00059E  6EDA               	movwf	fsr2h,c
  1862  0005A0  C023  FFDF         	movff	UART_buff_put@c,indf2
  1863                           
  1864                           ;UART.c: 70: _this->head = UART_buff_modulo_inc(_this->head, 200);
  1865  0005A4  EE20 F0C8          	lfsr	2,200
  1866  0005A8  5021               	movf	UART_buff_put@_this,w,c
  1867  0005AA  26D9               	addwf	fsr2l,f,c
  1868  0005AC  5022               	movf	UART_buff_put@_this+1,w,c
  1869  0005AE  22DA               	addwfc	fsr2h,f,c
  1870  0005B0  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  1871  0005B4  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  1872  0005B8  0E00               	movlw	0
  1873  0005BA  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  1874  0005BC  0EC8               	movlw	200
  1875  0005BE  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  1876  0005C0  EC9C  F006         	call	_UART_buff_modulo_inc	;wreg free
  1877  0005C4  EE20 F0C8          	lfsr	2,200
  1878  0005C8  5021               	movf	UART_buff_put@_this,w,c
  1879  0005CA  26D9               	addwf	fsr2l,f,c
  1880  0005CC  5022               	movf	UART_buff_put@_this+1,w,c
  1881  0005CE  22DA               	addwfc	fsr2h,f,c
  1882  0005D0  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  1883  0005D4  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  1884                           
  1885                           ;UART.c: 71: ++_this->count;
  1886  0005D8  EE20 F0CC          	lfsr	2,204
  1887  0005DC  5021               	movf	UART_buff_put@_this,w,c
  1888  0005DE  26D9               	addwf	fsr2l,f,c
  1889  0005E0  5022               	movf	UART_buff_put@_this+1,w,c
  1890  0005E2  22DA               	addwfc	fsr2h,f,c
  1891  0005E4  2ADE               	incf	postinc2,f,c
  1892  0005E6  0E00               	movlw	0
  1893  0005E8  22DD               	addwfc	postdec2,f,c
  1894                           
  1895                           ;UART.c: 72: } else {
  1896  0005EA  0012               	return	
  1897  0005EC                     l2322:
  1898                           
  1899                           ;UART.c: 73: _this->buf[_this->head] = c;
  1900  0005EC  EE20 F0C8          	lfsr	2,200
  1901  0005F0  5021               	movf	UART_buff_put@_this,w,c
  1902  0005F2  26D9               	addwf	fsr2l,f,c
  1903  0005F4  5022               	movf	UART_buff_put@_this+1,w,c
  1904  0005F6  22DA               	addwfc	fsr2h,f,c
  1905  0005F8  CFDE F024          	movff	postinc2,??_UART_buff_put
  1906  0005FC  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  1907  000600  5024               	movf	??_UART_buff_put,w,c
  1908  000602  2421               	addwf	UART_buff_put@_this,w,c
  1909  000604  6ED9               	movwf	fsr2l,c
  1910  000606  5025               	movf	??_UART_buff_put+1,w,c
  1911  000608  2022               	addwfc	UART_buff_put@_this+1,w,c
  1912  00060A  6EDA               	movwf	fsr2h,c
  1913  00060C  C023  FFDF         	movff	UART_buff_put@c,indf2
  1914                           
  1915                           ;UART.c: 74: _this->head = UART_buff_modulo_inc(_this->head, 200);
  1916  000610  EE20 F0C8          	lfsr	2,200
  1917  000614  5021               	movf	UART_buff_put@_this,w,c
  1918  000616  26D9               	addwf	fsr2l,f,c
  1919  000618  5022               	movf	UART_buff_put@_this+1,w,c
  1920  00061A  22DA               	addwfc	fsr2h,f,c
  1921  00061C  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  1922  000620  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  1923  000624  0E00               	movlw	0
  1924  000626  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  1925  000628  0EC8               	movlw	200
  1926  00062A  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  1927  00062C  EC9C  F006         	call	_UART_buff_modulo_inc	;wreg free
  1928  000630  EE20 F0C8          	lfsr	2,200
  1929  000634  5021               	movf	UART_buff_put@_this,w,c
  1930  000636  26D9               	addwf	fsr2l,f,c
  1931  000638  5022               	movf	UART_buff_put@_this+1,w,c
  1932  00063A  22DA               	addwfc	fsr2h,f,c
  1933  00063C  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  1934  000640  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  1935                           
  1936                           ;UART.c: 75: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  1937  000644  EE20 F0CA          	lfsr	2,202
  1938  000648  5021               	movf	UART_buff_put@_this,w,c
  1939  00064A  26D9               	addwf	fsr2l,f,c
  1940  00064C  5022               	movf	UART_buff_put@_this+1,w,c
  1941  00064E  22DA               	addwfc	fsr2h,f,c
  1942  000650  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  1943  000654  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  1944  000658  0E00               	movlw	0
  1945  00065A  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  1946  00065C  0EC8               	movlw	200
  1947  00065E  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  1948  000660  EC9C  F006         	call	_UART_buff_modulo_inc	;wreg free
  1949  000664  EE20 F0CA          	lfsr	2,202
  1950  000668  5021               	movf	UART_buff_put@_this,w,c
  1951  00066A  26D9               	addwf	fsr2l,f,c
  1952  00066C  5022               	movf	UART_buff_put@_this+1,w,c
  1953  00066E  22DA               	addwfc	fsr2h,f,c
  1954  000670  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  1955  000674  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  1956  000678  0012               	return	
  1957  00067A                     __end_of_UART_buff_put:
  1958                           	opt stack 0
  1959                           tblptru	equ	0xFF8
  1960                           tblptrh	equ	0xFF7
  1961                           tblptrl	equ	0xFF6
  1962                           tablat	equ	0xFF5
  1963                           postinc0	equ	0xFEE
  1964                           wreg	equ	0xFE8
  1965                           indf1	equ	0xFE7
  1966                           postdec1	equ	0xFE5
  1967                           fsr1h	equ	0xFE2
  1968                           fsr1l	equ	0xFE1
  1969                           indf2	equ	0xFDF
  1970                           postinc2	equ	0xFDE
  1971                           postdec2	equ	0xFDD
  1972                           plusw2	equ	0xFDB
  1973                           fsr2h	equ	0xFDA
  1974                           fsr2l	equ	0xFD9
  1975                           status	equ	0xFD8
  1976                           
  1977 ;; *************** function _GetFaults *****************
  1978 ;; Defined at:
  1979 ;;		line 38 in file "Function.c"
  1980 ;; Parameters:    Size  Location     Type
  1981 ;;  num             1    wreg     unsigned char 
  1982 ;; Auto vars:     Size  Location     Type
  1983 ;;  num             1   26[COMRAM] unsigned char 
  1984 ;; Return value:  Size  Location     Type
  1985 ;;                  1    wreg      unsigned char 
  1986 ;; Registers used:
  1987 ;;		wreg, status,2, status,0
  1988 ;; Tracked objects:
  1989 ;;		On entry : 0/0
  1990 ;;		On exit  : 0/0
  1991 ;;		Unchanged: 0/0
  1992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1993 ;;      Params:         0       0       0       0       0       0       0
  1994 ;;      Locals:         1       0       0       0       0       0       0
  1995 ;;      Temps:          0       0       0       0       0       0       0
  1996 ;;      Totals:         1       0       0       0       0       0       0
  1997 ;;Total ram usage:        1 bytes
  1998 ;; Hardware stack levels used:    1
  1999 ;; Hardware stack levels required when called:    4
  2000 ;; This function calls:
  2001 ;;		Nothing
  2002 ;; This function is called by:
  2003 ;;		_sendData
  2004 ;; This function uses a non-reentrant model
  2005 ;;
  2006                           
  2007                           	psect	text7
  2008  000E18                     __ptext7:
  2009                           	opt stack 0
  2010  000E18                     _GetFaults:
  2011                           	opt stack 23
  2012                           
  2013                           ;incstack = 0
  2014                           ;GetFaults@num stored from wreg
  2015  000E18  6E1B               	movwf	GetFaults@num,c
  2016                           
  2017                           ;Function.c: 39: if(num == 1){
  2018  000E1A  041B               	decf	GetFaults@num,w,c
  2019  000E1C  A4D8               	btfss	status,2,c
  2020  000E1E  D002               	goto	l2368
  2021                           
  2022                           ;Function.c: 40: return ByteHigh;
  2023  000E20  503B               	movf	_ByteHigh,w,c
  2024  000E22  0012               	return	
  2025  000E24                     l2368:
  2026                           
  2027                           ;Function.c: 41: }
  2028                           ;Function.c: 42: if(num == 0){
  2029  000E24  501B               	movf	GetFaults@num,w,c
  2030  000E26  A4D8               	btfss	status,2,c
  2031  000E28  0012               	return	
  2032                           
  2033                           ;Function.c: 43: return ByteLow;
  2034  000E2A  503A               	movf	_ByteLow,w,c
  2035  000E2C  0012               	return	
  2036  000E2E                     __end_of_GetFaults:
  2037                           	opt stack 0
  2038                           tblptru	equ	0xFF8
  2039                           tblptrh	equ	0xFF7
  2040                           tblptrl	equ	0xFF6
  2041                           tablat	equ	0xFF5
  2042                           postinc0	equ	0xFEE
  2043                           wreg	equ	0xFE8
  2044                           indf1	equ	0xFE7
  2045                           postdec1	equ	0xFE5
  2046                           fsr1h	equ	0xFE2
  2047                           fsr1l	equ	0xFE1
  2048                           indf2	equ	0xFDF
  2049                           postinc2	equ	0xFDE
  2050                           postdec2	equ	0xFDD
  2051                           plusw2	equ	0xFDB
  2052                           fsr2h	equ	0xFDA
  2053                           fsr2l	equ	0xFD9
  2054                           status	equ	0xFD8
  2055                           
  2056 ;; *************** function _Delay *****************
  2057 ;; Defined at:
  2058 ;;		line 203 in file "Function.c"
  2059 ;; Parameters:    Size  Location     Type
  2060 ;;  wait            2   26[COMRAM] int 
  2061 ;; Auto vars:     Size  Location     Type
  2062 ;;  x               2   29[COMRAM] int 
  2063 ;; Return value:  Size  Location     Type
  2064 ;;                  1    wreg      void 
  2065 ;; Registers used:
  2066 ;;		wreg, status,2, status,0
  2067 ;; Tracked objects:
  2068 ;;		On entry : 0/0
  2069 ;;		On exit  : 0/0
  2070 ;;		Unchanged: 0/0
  2071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2072 ;;      Params:         2       0       0       0       0       0       0
  2073 ;;      Locals:         2       0       0       0       0       0       0
  2074 ;;      Temps:          1       0       0       0       0       0       0
  2075 ;;      Totals:         5       0       0       0       0       0       0
  2076 ;;Total ram usage:        5 bytes
  2077 ;; Hardware stack levels used:    1
  2078 ;; Hardware stack levels required when called:    4
  2079 ;; This function calls:
  2080 ;;		Nothing
  2081 ;; This function is called by:
  2082 ;;		_respondECU
  2083 ;; This function uses a non-reentrant model
  2084 ;;
  2085                           
  2086                           	psect	text8
  2087  000C76                     __ptext8:
  2088                           	opt stack 0
  2089  000C76                     _Delay:
  2090                           	opt stack 24
  2091                           
  2092                           ;Function.c: 204: int x;
  2093                           ;Function.c: 205: for (x = 0; x < wait; x++) {
  2094                           
  2095                           ;incstack = 0
  2096  000C76  0E00               	movlw	0
  2097  000C78  6E1F               	movwf	Delay@x+1,c
  2098  000C7A  0E00               	movlw	0
  2099  000C7C  6E1E               	movwf	Delay@x,c
  2100  000C7E  D00A               	goto	l456
  2101  000C80                     l1926:
  2102                           
  2103                           ;Function.c: 206: _delay((unsigned long)((1)*(16000000/4000.0)));
  2104  000C80  0E06               	movlw	6
  2105  000C82  6E1D               	movwf	??_Delay& (0+255),c
  2106  000C84  0E30               	movlw	48
  2107  000C86                     u1957:
  2108  000C86  2EE8               	decfsz	wreg,f,c
  2109  000C88  D7FE               	bra	u1957
  2110  000C8A  2E1D               	decfsz	??_Delay& (0+255),f,c
  2111  000C8C  D7FC               	bra	u1957
  2112  000C8E  D000               	nop2	
  2113  000C90  4A1E               	infsnz	Delay@x,f,c
  2114  000C92  2A1F               	incf	Delay@x+1,f,c
  2115  000C94                     l456:
  2116  000C94  501B               	movf	Delay@wait,w,c
  2117  000C96  5C1E               	subwf	Delay@x,w,c
  2118  000C98  501F               	movf	Delay@x+1,w,c
  2119  000C9A  0A80               	xorlw	128
  2120  000C9C  6E1D               	movwf	??_Delay& (0+255),c
  2121  000C9E  501C               	movf	Delay@wait+1,w,c
  2122  000CA0  0A80               	xorlw	128
  2123  000CA2  581D               	subwfb	??_Delay& (0+255),w,c
  2124  000CA4  B0D8               	btfsc	status,0,c
  2125  000CA6  0012               	return	
  2126  000CA8  D7EB               	goto	l1926
  2127  000CAA                     __end_of_Delay:
  2128                           	opt stack 0
  2129                           tblptru	equ	0xFF8
  2130                           tblptrh	equ	0xFF7
  2131                           tblptrl	equ	0xFF6
  2132                           tablat	equ	0xFF5
  2133                           postinc0	equ	0xFEE
  2134                           wreg	equ	0xFE8
  2135                           indf1	equ	0xFE7
  2136                           postdec1	equ	0xFE5
  2137                           fsr1h	equ	0xFE2
  2138                           fsr1l	equ	0xFE1
  2139                           indf2	equ	0xFDF
  2140                           postinc2	equ	0xFDE
  2141                           postdec2	equ	0xFDD
  2142                           plusw2	equ	0xFDB
  2143                           fsr2h	equ	0xFDA
  2144                           fsr2l	equ	0xFD9
  2145                           status	equ	0xFD8
  2146                           
  2147 ;; *************** function _receiveData *****************
  2148 ;; Defined at:
  2149 ;;		line 168 in file "FastTransfer.c"
  2150 ;; Parameters:    Size  Location     Type
  2151 ;;		None
  2152 ;; Auto vars:     Size  Location     Type
  2153 ;;  result          3   20[BANK0 ] struct .
  2154 ;;  i               2   23[BANK0 ] int 
  2155 ;;  Data            1   25[BANK0 ] unsigned char 
  2156 ;;  CS              1   19[BANK0 ] unsigned char 
  2157 ;; Return value:  Size  Location     Type
  2158 ;;                  1    wreg      unsigned char 
  2159 ;; Registers used:
  2160 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2161 ;; Tracked objects:
  2162 ;;		On entry : 0/0
  2163 ;;		On exit  : 0/0
  2164 ;;		Unchanged: 0/0
  2165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2166 ;;      Params:         0       0       0       0       0       0       0
  2167 ;;      Locals:         0       7       0       0       0       0       0
  2168 ;;      Temps:          0       5       0       0       0       0       0
  2169 ;;      Totals:         0      12       0       0       0       0       0
  2170 ;;Total ram usage:       12 bytes
  2171 ;; Hardware stack levels used:    1
  2172 ;; Hardware stack levels required when called:    7
  2173 ;; This function calls:
  2174 ;;		_CRC8
  2175 ;;		_Receive_available
  2176 ;;		_Receive_get
  2177 ;;		_cobs_decode
  2178 ;; This function is called by:
  2179 ;;		_updateComms
  2180 ;; This function uses a non-reentrant model
  2181 ;;
  2182                           
  2183                           	psect	text9
  2184  000794                     __ptext9:
  2185                           	opt stack 0
  2186  000794                     _receiveData:
  2187                           	opt stack 22
  2188                           
  2189                           ;FastTransfer.c: 170: if(Receive_available()>5){
  2190                           
  2191                           ;incstack = 0
  2192  000794  EC17  F007         	call	_Receive_available	;wreg free
  2193  000798  BE1E               	btfsc	?_Receive_available+1,7,c
  2194  00079A  D072               	goto	l2620
  2195  00079C  501E               	movf	?_Receive_available+1,w,c
  2196  00079E  E104               	bnz	u1830
  2197  0007A0  0E06               	movlw	6
  2198  0007A2  5C1D               	subwf	?_Receive_available,w,c
  2199  0007A4  A0D8               	btfss	status,0,c
  2200  0007A6  D06C               	goto	l2620
  2201  0007A8                     u1830:
  2202                           
  2203                           ;FastTransfer.c: 171: if(Receive_get() == 8){
  2204  0007A8  EC54  F007         	call	_Receive_get	;wreg free
  2205  0007AC  0A08               	xorlw	8
  2206  0007AE  A4D8               	btfss	status,2,c
  2207  0007B0  D067               	goto	l2620
  2208                           
  2209                           ;FastTransfer.c: 172: int i = 0;
  2210  0007B2  0E00               	movlw	0
  2211  0007B4  0100               	movlb	0	; () banked
  2212  0007B6  6FBF               	movwf	(receiveData@i+1)& (0+255),b
  2213  0007B8  0E00               	movlw	0
  2214  0007BA  6FBE               	movwf	receiveData@i& (0+255),b
  2215                           
  2216                           ;FastTransfer.c: 173: char Data = 0;
  2217  0007BC  0E00               	movlw	0
  2218  0007BE  0100               	movlb	0	; () banked
  2219  0007C0  6FC0               	movwf	receiveData@Data& (0+255),b
  2220  0007C2                     l2600:
  2221                           
  2222                           ; BSR set to: 0
  2223                           ;FastTransfer.c: 175: Data = Receive_get();
  2224  0007C2  EC54  F007         	call	_Receive_get	;wreg free
  2225  0007C6  0100               	movlb	0	; () banked
  2226  0007C8  6FC0               	movwf	receiveData@Data& (0+255),b
  2227                           
  2228                           ; BSR set to: 0
  2229                           ;FastTransfer.c: 176: ReciveArray[i] = Data;
  2230  0007CA  0ECE               	movlw	low _ReciveArray
  2231  0007CC  0100               	movlb	0	; () banked
  2232  0007CE  25BE               	addwf	receiveData@i& (0+255),w,b
  2233  0007D0  6ED9               	movwf	fsr2l,c
  2234  0007D2  0E01               	movlw	high _ReciveArray
  2235  0007D4  0100               	movlb	0	; () banked
  2236  0007D6  21BF               	addwfc	(receiveData@i+1)& (0+255),w,b
  2237  0007D8  6EDA               	movwf	fsr2h,c
  2238  0007DA  C0C0  FFDF         	movff	receiveData@Data,indf2
  2239                           
  2240                           ; BSR set to: 0
  2241                           ;FastTransfer.c: 177: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2242  0007DE  0E85               	movlw	133
  2243  0007E0                     u1967:
  2244  0007E0  2EE8               	decfsz	wreg,f,c
  2245  0007E2  D7FE               	bra	u1967
  2246  0007E4  F000               	nop	
  2247                           
  2248                           ;FastTransfer.c: 178: i++;
  2249  0007E6  0100               	movlb	0	; () banked
  2250  0007E8  4BBE               	infsnz	receiveData@i& (0+255),f,b
  2251  0007EA  2BBF               	incf	(receiveData@i+1)& (0+255),f,b
  2252                           
  2253                           ; BSR set to: 0
  2254                           ;FastTransfer.c: 179: }while(Data != 0x00);
  2255  0007EC  0100               	movlb	0	; () banked
  2256  0007EE  51C0               	movf	receiveData@Data& (0+255),w,b
  2257  0007F0  0100               	movlb	0	; () banked
  2258  0007F2  A4D8               	btfss	status,2,c
  2259  0007F4  D7E6               	goto	l2600
  2260                           
  2261                           ; BSR set to: 0
  2262                           ;FastTransfer.c: 181: cobs_decode_result result;
  2263                           ;FastTransfer.c: 183: result = cobs_decode(ProcessArray, sizeof(ProcessArray), ReciveArr
      +                          ay, i);
  2264                           
  2265                           ; BSR set to: 0
  2266  0007F6  0E6E               	movlw	low _ProcessArray
  2267  0007F8  6E1B               	movwf	cobs_decode@dst_buf_ptr,c
  2268  0007FA  0E00               	movlw	high _ProcessArray
  2269  0007FC  6E1C               	movwf	cobs_decode@dst_buf_ptr+1,c
  2270  0007FE  0E00               	movlw	0
  2271  000800  6E1E               	movwf	cobs_decode@dst_buf_len+1,c
  2272  000802  0E1E               	movlw	30
  2273  000804  6E1D               	movwf	cobs_decode@dst_buf_len,c
  2274  000806  0ECE               	movlw	low _ReciveArray
  2275  000808  6E1F               	movwf	cobs_decode@src_ptr,c
  2276  00080A  0E01               	movlw	high _ReciveArray
  2277  00080C  6E20               	movwf	cobs_decode@src_ptr+1,c
  2278  00080E  C0BE  F021         	movff	receiveData@i,cobs_decode@src_len
  2279  000812  C0BF  F022         	movff	receiveData@i+1,cobs_decode@src_len+1
  2280  000816  EC52  F000         	call	_cobs_decode	;wreg free
  2281  00081A  C01B  F0BB         	movff	?_cobs_decode,receiveData@result
  2282  00081E  C01C  F0BC         	movff	?_cobs_decode+1,receiveData@result+1
  2283  000822  C01D  F0BD         	movff	?_cobs_decode+2,receiveData@result+2
  2284                           
  2285                           ;FastTransfer.c: 185: char CS = CRC8(ProcessArray, result.out_len-1);
  2286  000826  0E6E               	movlw	low _ProcessArray
  2287  000828  6E1B               	movwf	CRC8@data,c
  2288  00082A  0E00               	movlw	high _ProcessArray
  2289  00082C  6E1C               	movwf	CRC8@data+1,c
  2290  00082E  0100               	movlb	0	; () banked
  2291  000830  05BB               	decf	receiveData@result& (0+255),w,b
  2292  000832  6E1D               	movwf	CRC8@len,c
  2293  000834  ECDD  F005         	call	_CRC8	;wreg free
  2294  000838  0100               	movlb	0	; () banked
  2295  00083A  6FBA               	movwf	receiveData@CS& (0+255),b
  2296                           
  2297                           ; BSR set to: 0
  2298                           ;FastTransfer.c: 187: if(ProcessArray[result.out_len-1] == CS){
  2299  00083C  0EFF               	movlw	255
  2300  00083E  0100               	movlb	0	; () banked
  2301  000840  6FB5               	movwf	??_receiveData& (0+255),b
  2302  000842  0EFF               	movlw	255
  2303  000844  0100               	movlb	0	; () banked
  2304  000846  6FB6               	movwf	(??_receiveData+1)& (0+255),b
  2305  000848  C0BB  F0B7         	movff	receiveData@result,??_receiveData+2
  2306  00084C  C0BC  F0B8         	movff	receiveData@result+1,??_receiveData+3
  2307  000850  0100               	movlb	0	; () banked
  2308  000852  51B5               	movf	??_receiveData& (0+255),w,b
  2309  000854  0100               	movlb	0	; () banked
  2310  000856  27B7               	addwf	(??_receiveData+2)& (0+255),f,b
  2311  000858  0100               	movlb	0	; () banked
  2312  00085A  51B6               	movf	(??_receiveData+1)& (0+255),w,b
  2313  00085C  0100               	movlb	0	; () banked
  2314  00085E  23B8               	addwfc	(??_receiveData+3)& (0+255),f,b
  2315  000860  0E6E               	movlw	low _ProcessArray
  2316  000862  0100               	movlb	0	; () banked
  2317  000864  25B7               	addwf	(??_receiveData+2)& (0+255),w,b
  2318  000866  6ED9               	movwf	fsr2l,c
  2319  000868  0E00               	movlw	high _ProcessArray
  2320  00086A  0100               	movlb	0	; () banked
  2321  00086C  21B8               	addwfc	(??_receiveData+3)& (0+255),w,b
  2322  00086E  6EDA               	movwf	fsr2h,c
  2323  000870  0100               	movlb	0	; () banked
  2324  000872  51BA               	movf	receiveData@CS& (0+255),w,b
  2325  000874  18DE               	xorwf	postinc2,w,c
  2326  000876  A4D8               	btfss	status,2,c
  2327  000878  D003               	goto	l2620
  2328                           
  2329                           ; BSR set to: 0
  2330                           ;FastTransfer.c: 188: LATAbits.LATA3 ^= 1;
  2331  00087A  7689               	btg	3977,3,c	;volatile
  2332                           
  2333                           ; BSR set to: 0
  2334                           ;FastTransfer.c: 189: return 1;
  2335  00087C  0E01               	movlw	1
  2336                           
  2337                           ; BSR set to: 0
  2338  00087E  0012               	return	
  2339  000880                     l2620:
  2340                           
  2341                           ;FastTransfer.c: 198: }
  2342                           ;FastTransfer.c: 200: return 0;
  2343  000880  0E00               	movlw	0
  2344  000882  0012               	return	
  2345  000884                     __end_of_receiveData:
  2346                           	opt stack 0
  2347                           tblptru	equ	0xFF8
  2348                           tblptrh	equ	0xFF7
  2349                           tblptrl	equ	0xFF6
  2350                           tablat	equ	0xFF5
  2351                           postinc0	equ	0xFEE
  2352                           wreg	equ	0xFE8
  2353                           indf1	equ	0xFE7
  2354                           postdec1	equ	0xFE5
  2355                           fsr1h	equ	0xFE2
  2356                           fsr1l	equ	0xFE1
  2357                           indf2	equ	0xFDF
  2358                           postinc2	equ	0xFDE
  2359                           postdec2	equ	0xFDD
  2360                           plusw2	equ	0xFDB
  2361                           fsr2h	equ	0xFDA
  2362                           fsr2l	equ	0xFD9
  2363                           status	equ	0xFD8
  2364                           
  2365 ;; *************** function _cobs_decode *****************
  2366 ;; Defined at:
  2367 ;;		line 115 in file "COBS.c"
  2368 ;; Parameters:    Size  Location     Type
  2369 ;;  dst_buf_ptr     2   26[COMRAM] PTR unsigned char 
  2370 ;;		 -> ProcessArray(30), 
  2371 ;;  dst_buf_len     2   28[COMRAM] unsigned int 
  2372 ;;  src_ptr         2   30[COMRAM] PTR const unsigned char 
  2373 ;;		 -> ReciveArray(30), 
  2374 ;;  src_len         2   32[COMRAM] unsigned int 
  2375 ;; Auto vars:     Size  Location     Type
  2376 ;;  result          3   11[BANK0 ] struct .
  2377 ;;  dst_write_pt    2    8[BANK0 ] PTR unsigned char 
  2378 ;;		 -> ProcessArray(30), 
  2379 ;;  remaining_by    2    6[BANK0 ] unsigned int 
  2380 ;;  dst_buf_end_    2    2[BANK0 ] PTR unsigned char 
  2381 ;;		 -> ProcessArray(30), 
  2382 ;;  src_end_ptr     2    0[BANK0 ] PTR const unsigned char 
  2383 ;;		 -> ReciveArray(30), 
  2384 ;;  len_code        1   10[BANK0 ] unsigned char 
  2385 ;;  i               1    5[BANK0 ] unsigned char 
  2386 ;;  src_byte        1    4[BANK0 ] unsigned char 
  2387 ;; Return value:  Size  Location     Type
  2388 ;;                  3   26[COMRAM] struct .
  2389 ;; Registers used:
  2390 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2391 ;; Tracked objects:
  2392 ;;		On entry : 0/0
  2393 ;;		On exit  : 0/0
  2394 ;;		Unchanged: 0/0
  2395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2396 ;;      Params:         8       0       0       0       0       0       0
  2397 ;;      Locals:         0      14       0       0       0       0       0
  2398 ;;      Temps:          2       0       0       0       0       0       0
  2399 ;;      Totals:        10      14       0       0       0       0       0
  2400 ;;Total ram usage:       24 bytes
  2401 ;; Hardware stack levels used:    1
  2402 ;; Hardware stack levels required when called:    4
  2403 ;; This function calls:
  2404 ;;		Nothing
  2405 ;; This function is called by:
  2406 ;;		_receiveData
  2407 ;; This function uses a non-reentrant model
  2408 ;;
  2409                           
  2410                           	psect	text10
  2411  0000A4                     __ptext10:
  2412                           	opt stack 0
  2413  0000A4                     _cobs_decode:
  2414                           	opt stack 24
  2415                           
  2416                           ;COBS.c: 117: cobs_decode_result result = { 0, COBS_DECODE_OK };
  2417                           
  2418                           ;incstack = 0
  2419  0000A4  C064  F0B2         	movff	cobs_decode@F192,cobs_decode@result
  2420  0000A8  C065  F0B3         	movff	cobs_decode@F192+1,cobs_decode@result+1
  2421  0000AC  C066  F0B4         	movff	cobs_decode@F192+2,cobs_decode@result+2
  2422                           
  2423                           ;COBS.c: 118: const uint8_t * src_end_ptr = src_ptr + src_len;
  2424  0000B0  5021               	movf	cobs_decode@src_len,w,c
  2425  0000B2  241F               	addwf	cobs_decode@src_ptr,w,c
  2426  0000B4  0100               	movlb	0	; () banked
  2427  0000B6  6FA7               	movwf	cobs_decode@src_end_ptr& (0+255),b
  2428  0000B8  5022               	movf	cobs_decode@src_len+1,w,c
  2429  0000BA  2020               	addwfc	cobs_decode@src_ptr+1,w,c
  2430  0000BC  0100               	movlb	0	; () banked
  2431  0000BE  6FA8               	movwf	(cobs_decode@src_end_ptr+1)& (0+255),b
  2432                           
  2433                           ;COBS.c: 119: uint8_t * dst_buf_end_ptr = dst_buf_ptr + dst_buf_len;
  2434  0000C0  501D               	movf	cobs_decode@dst_buf_len,w,c
  2435  0000C2  241B               	addwf	cobs_decode@dst_buf_ptr,w,c
  2436  0000C4  0100               	movlb	0	; () banked
  2437  0000C6  6FA9               	movwf	cobs_decode@dst_buf_end_ptr& (0+255),b
  2438  0000C8  501E               	movf	cobs_decode@dst_buf_len+1,w,c
  2439  0000CA  201C               	addwfc	cobs_decode@dst_buf_ptr+1,w,c
  2440  0000CC  0100               	movlb	0	; () banked
  2441  0000CE  6FAA               	movwf	(cobs_decode@dst_buf_end_ptr+1)& (0+255),b
  2442                           
  2443                           ;COBS.c: 120: uint8_t * dst_write_ptr = dst_buf_ptr;
  2444  0000D0  C01B  F0AF         	movff	cobs_decode@dst_buf_ptr,cobs_decode@dst_write_ptr
  2445  0000D4  C01C  F0B0         	movff	cobs_decode@dst_buf_ptr+1,cobs_decode@dst_write_ptr+1
  2446                           
  2447                           ;COBS.c: 121: size_t remaining_bytes;
  2448                           ;COBS.c: 122: uint8_t src_byte;
  2449                           ;COBS.c: 123: uint8_t i;
  2450                           ;COBS.c: 124: uint8_t len_code;
  2451                           ;COBS.c: 128: if ((dst_buf_ptr == (0)) || (src_ptr == (0)))
  2452  0000D8  501B               	movf	cobs_decode@dst_buf_ptr,w,c
  2453  0000DA  101C               	iorwf	cobs_decode@dst_buf_ptr+1,w,c
  2454  0000DC  B4D8               	btfsc	status,2,c
  2455  0000DE  D004               	goto	l2514
  2456                           
  2457                           ; BSR set to: 0
  2458  0000E0  501F               	movf	cobs_decode@src_ptr,w,c
  2459  0000E2  1020               	iorwf	cobs_decode@src_ptr+1,w,c
  2460  0000E4  A4D8               	btfss	status,2,c
  2461  0000E6  D00A               	goto	l2520
  2462  0000E8                     l2514:
  2463                           
  2464                           ; BSR set to: 0
  2465                           ;COBS.c: 129: {
  2466                           ;COBS.c: 130: result.status = COBS_DECODE_NULL_POINTER;
  2467  0000E8  0E01               	movlw	1
  2468  0000EA  0100               	movlb	0	; () banked
  2469  0000EC  6FB4               	movwf	(cobs_decode@result+2)& (0+255),b
  2470                           
  2471                           ; BSR set to: 0
  2472                           ;COBS.c: 131: return result;
  2473  0000EE  C0B2  F01B         	movff	cobs_decode@result,?_cobs_decode
  2474  0000F2  C0B3  F01C         	movff	cobs_decode@result+1,?_cobs_decode+1
  2475  0000F6  C0B4  F01D         	movff	cobs_decode@result+2,?_cobs_decode+2
  2476                           
  2477                           ; BSR set to: 0
  2478  0000FA  0012               	return	
  2479  0000FC                     l2520:
  2480                           
  2481                           ; BSR set to: 0
  2482                           ;COBS.c: 132: }
  2483                           ;COBS.c: 134: if (src_len != 0)
  2484  0000FC  5021               	movf	cobs_decode@src_len,w,c
  2485  0000FE  1022               	iorwf	cobs_decode@src_len+1,w,c
  2486  000100  B4D8               	btfsc	status,2,c
  2487  000102  D096               	goto	l2584
  2488  000104                     l2522:
  2489                           
  2490                           ; BSR set to: 0
  2491                           ;COBS.c: 137: {
  2492                           ;COBS.c: 138: len_code = *src_ptr++;
  2493  000104  C01F  FFD9         	movff	cobs_decode@src_ptr,fsr2l
  2494  000108  C020  FFDA         	movff	cobs_decode@src_ptr+1,fsr2h
  2495  00010C  50DF               	movf	indf2,w,c
  2496  00010E  0100               	movlb	0	; () banked
  2497  000110  6FB1               	movwf	cobs_decode@len_code& (0+255),b
  2498                           
  2499                           ; BSR set to: 0
  2500  000112  4A1F               	infsnz	cobs_decode@src_ptr,f,c
  2501  000114  2A20               	incf	cobs_decode@src_ptr+1,f,c
  2502                           
  2503                           ; BSR set to: 0
  2504                           ;COBS.c: 139: if (len_code == 0)
  2505  000116  0100               	movlb	0	; () banked
  2506  000118  51B1               	movf	cobs_decode@len_code& (0+255),w,b
  2507  00011A  0100               	movlb	0	; () banked
  2508  00011C  A4D8               	btfss	status,2,c
  2509  00011E  D003               	goto	l2530
  2510                           
  2511                           ; BSR set to: 0
  2512                           ;COBS.c: 140: {
  2513                           ;COBS.c: 141: result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
  2514  000120  0100               	movlb	0	; () banked
  2515  000122  85B4               	bsf	(cobs_decode@result+2)& (0+255),2,b
  2516                           
  2517                           ;COBS.c: 142: break;
  2518  000124  D085               	goto	l2584
  2519  000126                     l2530:
  2520                           
  2521                           ; BSR set to: 0
  2522                           ;COBS.c: 143: }
  2523                           ;COBS.c: 144: len_code--;
  2524  000126  0100               	movlb	0	; () banked
  2525  000128  07B1               	decf	cobs_decode@len_code& (0+255),f,b
  2526                           
  2527                           ; BSR set to: 0
  2528                           ;COBS.c: 147: remaining_bytes = src_end_ptr - src_ptr;
  2529  00012A  C01F  F023         	movff	cobs_decode@src_ptr,??_cobs_decode
  2530  00012E  C020  F024         	movff	cobs_decode@src_ptr+1,??_cobs_decode+1
  2531  000132  1E23               	comf	??_cobs_decode,f,c
  2532  000134  1E24               	comf	??_cobs_decode+1,f,c
  2533  000136  4A23               	infsnz	??_cobs_decode,f,c
  2534  000138  2A24               	incf	??_cobs_decode+1,f,c
  2535  00013A  0100               	movlb	0	; () banked
  2536  00013C  51A7               	movf	cobs_decode@src_end_ptr& (0+255),w,b
  2537  00013E  2423               	addwf	??_cobs_decode,w,c
  2538  000140  0100               	movlb	0	; () banked
  2539  000142  6FAD               	movwf	cobs_decode@remaining_bytes& (0+255),b
  2540  000144  0100               	movlb	0	; () banked
  2541  000146  51A8               	movf	(cobs_decode@src_end_ptr+1)& (0+255),w,b
  2542  000148  2024               	addwfc	??_cobs_decode+1,w,c
  2543  00014A  0100               	movlb	0	; () banked
  2544  00014C  6FAE               	movwf	(cobs_decode@remaining_bytes+1)& (0+255),b
  2545                           
  2546                           ; BSR set to: 0
  2547                           ;COBS.c: 148: if (len_code > remaining_bytes)
  2548  00014E  0100               	movlb	0	; () banked
  2549  000150  51B1               	movf	cobs_decode@len_code& (0+255),w,b
  2550  000152  0100               	movlb	0	; () banked
  2551  000154  5DAD               	subwf	cobs_decode@remaining_bytes& (0+255),w,b
  2552  000156  0E00               	movlw	0
  2553  000158  59AE               	subwfb	(cobs_decode@remaining_bytes+1)& (0+255),w,b
  2554  00015A  B0D8               	btfsc	status,0,c
  2555  00015C  D004               	goto	l2540
  2556                           
  2557                           ; BSR set to: 0
  2558                           ;COBS.c: 149: {
  2559                           ;COBS.c: 150: result.status |= COBS_DECODE_INPUT_TOO_SHORT;
  2560  00015E  0100               	movlb	0	; () banked
  2561  000160  87B4               	bsf	(cobs_decode@result+2)& (0+255),3,b
  2562                           
  2563                           ; BSR set to: 0
  2564                           ;COBS.c: 151: len_code = remaining_bytes;
  2565  000162  C0AD  F0B1         	movff	cobs_decode@remaining_bytes,cobs_decode@len_code
  2566  000166                     l2540:
  2567                           
  2568                           ; BSR set to: 0
  2569                           ;COBS.c: 152: }
  2570                           ;COBS.c: 155: remaining_bytes = dst_buf_end_ptr - dst_write_ptr;
  2571  000166  C0AF  F023         	movff	cobs_decode@dst_write_ptr,??_cobs_decode
  2572  00016A  C0B0  F024         	movff	cobs_decode@dst_write_ptr+1,??_cobs_decode+1
  2573  00016E  1E23               	comf	??_cobs_decode,f,c
  2574  000170  1E24               	comf	??_cobs_decode+1,f,c
  2575  000172  4A23               	infsnz	??_cobs_decode,f,c
  2576  000174  2A24               	incf	??_cobs_decode+1,f,c
  2577  000176  0100               	movlb	0	; () banked
  2578  000178  51A9               	movf	cobs_decode@dst_buf_end_ptr& (0+255),w,b
  2579  00017A  2423               	addwf	??_cobs_decode,w,c
  2580  00017C  0100               	movlb	0	; () banked
  2581  00017E  6FAD               	movwf	cobs_decode@remaining_bytes& (0+255),b
  2582  000180  0100               	movlb	0	; () banked
  2583  000182  51AA               	movf	(cobs_decode@dst_buf_end_ptr+1)& (0+255),w,b
  2584  000184  2024               	addwfc	??_cobs_decode+1,w,c
  2585  000186  0100               	movlb	0	; () banked
  2586  000188  6FAE               	movwf	(cobs_decode@remaining_bytes+1)& (0+255),b
  2587                           
  2588                           ; BSR set to: 0
  2589                           ;COBS.c: 156: if (len_code > remaining_bytes)
  2590  00018A  0100               	movlb	0	; () banked
  2591  00018C  51B1               	movf	cobs_decode@len_code& (0+255),w,b
  2592  00018E  0100               	movlb	0	; () banked
  2593  000190  5DAD               	subwf	cobs_decode@remaining_bytes& (0+255),w,b
  2594  000192  0E00               	movlw	0
  2595  000194  59AE               	subwfb	(cobs_decode@remaining_bytes+1)& (0+255),w,b
  2596  000196  B0D8               	btfsc	status,0,c
  2597  000198  D004               	goto	l2548
  2598                           
  2599                           ; BSR set to: 0
  2600                           ;COBS.c: 157: {
  2601                           ;COBS.c: 158: result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
  2602  00019A  0100               	movlb	0	; () banked
  2603  00019C  83B4               	bsf	(cobs_decode@result+2)& (0+255),1,b
  2604                           
  2605                           ; BSR set to: 0
  2606                           ;COBS.c: 159: len_code = remaining_bytes;
  2607  00019E  C0AD  F0B1         	movff	cobs_decode@remaining_bytes,cobs_decode@len_code
  2608  0001A2                     l2548:
  2609                           
  2610                           ; BSR set to: 0
  2611                           ;COBS.c: 160: }
  2612                           ;COBS.c: 162: for (i = len_code; i != 0; i--)
  2613  0001A2  C0B1  F0AC         	movff	cobs_decode@len_code,cobs_decode@i
  2614  0001A6                     l2550:
  2615                           
  2616                           ; BSR set to: 0
  2617  0001A6  0100               	movlb	0	; () banked
  2618  0001A8  51AC               	movf	cobs_decode@i& (0+255),w,b
  2619  0001AA  0100               	movlb	0	; () banked
  2620  0001AC  B4D8               	btfsc	status,2,c
  2621  0001AE  D01C               	goto	l2570
  2622                           
  2623                           ; BSR set to: 0
  2624                           ;COBS.c: 163: {
  2625                           ;COBS.c: 164: src_byte = *src_ptr++;
  2626                           
  2627                           ; BSR set to: 0
  2628                           
  2629                           ; BSR set to: 0
  2630  0001B0  C01F  FFD9         	movff	cobs_decode@src_ptr,fsr2l
  2631  0001B4  C020  FFDA         	movff	cobs_decode@src_ptr+1,fsr2h
  2632  0001B8  50DF               	movf	indf2,w,c
  2633  0001BA  0100               	movlb	0	; () banked
  2634  0001BC  6FAB               	movwf	cobs_decode@src_byte& (0+255),b
  2635                           
  2636                           ; BSR set to: 0
  2637  0001BE  4A1F               	infsnz	cobs_decode@src_ptr,f,c
  2638  0001C0  2A20               	incf	cobs_decode@src_ptr+1,f,c
  2639                           
  2640                           ; BSR set to: 0
  2641                           ;COBS.c: 165: if (src_byte == 0)
  2642  0001C2  0100               	movlb	0	; () banked
  2643  0001C4  51AB               	movf	cobs_decode@src_byte& (0+255),w,b
  2644  0001C6  0100               	movlb	0	; () banked
  2645  0001C8  A4D8               	btfss	status,2,c
  2646  0001CA  D002               	goto	l2562
  2647                           
  2648                           ; BSR set to: 0
  2649                           ;COBS.c: 166: {
  2650                           ;COBS.c: 167: result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
  2651  0001CC  0100               	movlb	0	; () banked
  2652  0001CE  85B4               	bsf	(cobs_decode@result+2)& (0+255),2,b
  2653  0001D0                     l2562:
  2654                           
  2655                           ; BSR set to: 0
  2656                           ;COBS.c: 168: }
  2657                           ;COBS.c: 169: *dst_write_ptr++ = src_byte;
  2658  0001D0  C0AF  FFD9         	movff	cobs_decode@dst_write_ptr,fsr2l
  2659  0001D4  C0B0  FFDA         	movff	cobs_decode@dst_write_ptr+1,fsr2h
  2660  0001D8  C0AB  FFDF         	movff	cobs_decode@src_byte,indf2
  2661                           
  2662                           ; BSR set to: 0
  2663  0001DC  0100               	movlb	0	; () banked
  2664  0001DE  4BAF               	infsnz	cobs_decode@dst_write_ptr& (0+255),f,b
  2665  0001E0  2BB0               	incf	(cobs_decode@dst_write_ptr+1)& (0+255),f,b
  2666                           
  2667                           ; BSR set to: 0
  2668  0001E2  0100               	movlb	0	; () banked
  2669  0001E4  07AC               	decf	cobs_decode@i& (0+255),f,b
  2670  0001E6  D7DF               	goto	l2550
  2671  0001E8                     l2570:
  2672                           
  2673                           ; BSR set to: 0
  2674                           ;COBS.c: 170: }
  2675                           ;COBS.c: 172: if (src_ptr >= src_end_ptr)
  2676  0001E8  0100               	movlb	0	; () banked
  2677  0001EA  51A7               	movf	cobs_decode@src_end_ptr& (0+255),w,b
  2678  0001EC  5C1F               	subwf	cobs_decode@src_ptr,w,c
  2679  0001EE  0100               	movlb	0	; () banked
  2680  0001F0  51A8               	movf	(cobs_decode@src_end_ptr+1)& (0+255),w,b
  2681  0001F2  5820               	subwfb	cobs_decode@src_ptr+1,w,c
  2682  0001F4  B0D8               	btfsc	status,0,c
  2683  0001F6  D01C               	goto	l2584
  2684                           
  2685                           ; BSR set to: 0
  2686                           ;COBS.c: 175: }
  2687                           ;COBS.c: 178: if (len_code != 0xFE)
  2688                           
  2689                           ; BSR set to: 0
  2690                           
  2691                           ; BSR set to: 0
  2692                           ;COBS.c: 173: {
  2693                           ;COBS.c: 174: break;
  2694  0001F8  0EFE               	movlw	254
  2695  0001FA  0100               	movlb	0	; () banked
  2696  0001FC  19B1               	xorwf	cobs_decode@len_code& (0+255),w,b
  2697  0001FE  B4D8               	btfsc	status,2,c
  2698  000200  D781               	goto	l2522
  2699                           
  2700                           ; BSR set to: 0
  2701                           ;COBS.c: 179: {
  2702                           ;COBS.c: 180: if (dst_write_ptr >= dst_buf_end_ptr)
  2703  000202  0100               	movlb	0	; () banked
  2704  000204  51A9               	movf	cobs_decode@dst_buf_end_ptr& (0+255),w,b
  2705  000206  0100               	movlb	0	; () banked
  2706  000208  5DAF               	subwf	cobs_decode@dst_write_ptr& (0+255),w,b
  2707  00020A  0100               	movlb	0	; () banked
  2708  00020C  51AA               	movf	(cobs_decode@dst_buf_end_ptr+1)& (0+255),w,b
  2709  00020E  0100               	movlb	0	; () banked
  2710  000210  59B0               	subwfb	(cobs_decode@dst_write_ptr+1)& (0+255),w,b
  2711  000212  A0D8               	btfss	status,0,c
  2712  000214  D003               	goto	l2580
  2713                           
  2714                           ; BSR set to: 0
  2715                           ;COBS.c: 181: {
  2716                           ;COBS.c: 182: result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
  2717  000216  0100               	movlb	0	; () banked
  2718  000218  83B4               	bsf	(cobs_decode@result+2)& (0+255),1,b
  2719                           
  2720                           ;COBS.c: 183: break;
  2721  00021A  D00A               	goto	l2584
  2722  00021C                     l2580:
  2723                           
  2724                           ; BSR set to: 0
  2725                           ;COBS.c: 184: }
  2726                           ;COBS.c: 185: *dst_write_ptr++ = 0;
  2727  00021C  C0AF  FFD9         	movff	cobs_decode@dst_write_ptr,fsr2l
  2728  000220  C0B0  FFDA         	movff	cobs_decode@dst_write_ptr+1,fsr2h
  2729  000224  0E00               	movlw	0
  2730  000226  6EDF               	movwf	indf2,c
  2731                           
  2732                           ; BSR set to: 0
  2733  000228  0100               	movlb	0	; () banked
  2734  00022A  4BAF               	infsnz	cobs_decode@dst_write_ptr& (0+255),f,b
  2735  00022C  2BB0               	incf	(cobs_decode@dst_write_ptr+1)& (0+255),f,b
  2736                           
  2737                           ; BSR set to: 0
  2738                           ;COBS.c: 186: }
  2739                           ;COBS.c: 187: }
  2740  00022E  D76A               	goto	l2522
  2741  000230                     l2584:
  2742                           
  2743                           ; BSR set to: 0
  2744                           ;COBS.c: 188: }
  2745                           ;COBS.c: 190: result.out_len = dst_write_ptr - dst_buf_ptr;
  2746  000230  C01B  F023         	movff	cobs_decode@dst_buf_ptr,??_cobs_decode
  2747  000234  C01C  F024         	movff	cobs_decode@dst_buf_ptr+1,??_cobs_decode+1
  2748  000238  1E23               	comf	??_cobs_decode,f,c
  2749  00023A  1E24               	comf	??_cobs_decode+1,f,c
  2750  00023C  4A23               	infsnz	??_cobs_decode,f,c
  2751  00023E  2A24               	incf	??_cobs_decode+1,f,c
  2752  000240  0100               	movlb	0	; () banked
  2753  000242  51AF               	movf	cobs_decode@dst_write_ptr& (0+255),w,b
  2754  000244  2423               	addwf	??_cobs_decode,w,c
  2755  000246  0100               	movlb	0	; () banked
  2756  000248  6FB2               	movwf	cobs_decode@result& (0+255),b
  2757  00024A  0100               	movlb	0	; () banked
  2758  00024C  51B0               	movf	(cobs_decode@dst_write_ptr+1)& (0+255),w,b
  2759  00024E  2024               	addwfc	??_cobs_decode+1,w,c
  2760  000250  0100               	movlb	0	; () banked
  2761  000252  6FB3               	movwf	(cobs_decode@result+1)& (0+255),b
  2762                           
  2763                           ; BSR set to: 0
  2764                           ;COBS.c: 192: return result;
  2765  000254  C0B2  F01B         	movff	cobs_decode@result,?_cobs_decode
  2766  000258  C0B3  F01C         	movff	cobs_decode@result+1,?_cobs_decode+1
  2767  00025C  C0B4  F01D         	movff	cobs_decode@result+2,?_cobs_decode+2
  2768  000260  0012               	return	
  2769  000262                     __end_of_cobs_decode:
  2770                           	opt stack 0
  2771                           tblptru	equ	0xFF8
  2772                           tblptrh	equ	0xFF7
  2773                           tblptrl	equ	0xFF6
  2774                           tablat	equ	0xFF5
  2775                           postinc0	equ	0xFEE
  2776                           wreg	equ	0xFE8
  2777                           indf1	equ	0xFE7
  2778                           postdec1	equ	0xFE5
  2779                           fsr1h	equ	0xFE2
  2780                           fsr1l	equ	0xFE1
  2781                           indf2	equ	0xFDF
  2782                           postinc2	equ	0xFDE
  2783                           postdec2	equ	0xFDD
  2784                           plusw2	equ	0xFDB
  2785                           fsr2h	equ	0xFDA
  2786                           fsr2l	equ	0xFD9
  2787                           status	equ	0xFD8
  2788                           
  2789 ;; *************** function _Receive_get *****************
  2790 ;; Defined at:
  2791 ;;		line 125 in file "UART.c"
  2792 ;; Parameters:    Size  Location     Type
  2793 ;;		None
  2794 ;; Auto vars:     Size  Location     Type
  2795 ;;		None
  2796 ;; Return value:  Size  Location     Type
  2797 ;;                  1    wreg      unsigned char 
  2798 ;; Registers used:
  2799 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2800 ;; Tracked objects:
  2801 ;;		On entry : 0/0
  2802 ;;		On exit  : 0/0
  2803 ;;		Unchanged: 0/0
  2804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2805 ;;      Params:         0       0       0       0       0       0       0
  2806 ;;      Locals:         0       0       0       0       0       0       0
  2807 ;;      Temps:          0       0       0       0       0       0       0
  2808 ;;      Totals:         0       0       0       0       0       0       0
  2809 ;;Total ram usage:        0 bytes
  2810 ;; Hardware stack levels used:    1
  2811 ;; Hardware stack levels required when called:    6
  2812 ;; This function calls:
  2813 ;;		_UART_buff_get
  2814 ;; This function is called by:
  2815 ;;		_ComStart
  2816 ;;		_receiveData
  2817 ;;		_getch
  2818 ;; This function uses a non-reentrant model
  2819 ;;
  2820                           
  2821                           	psect	text11
  2822  000EA8                     __ptext11:
  2823                           	opt stack 0
  2824  000EA8                     _Receive_get:
  2825                           	opt stack 22
  2826                           
  2827                           ;UART.c: 126: return UART_buff_get(&input_buffer);
  2828                           
  2829                           ; BSR set to: 0
  2830                           ;incstack = 0
  2831  000EA8  0E00               	movlw	low _input_buffer
  2832  000EAA  6E21               	movwf	UART_buff_get@_this,c
  2833  000EAC  0E01               	movlw	high _input_buffer
  2834  000EAE  6E22               	movwf	UART_buff_get@_this+1,c
  2835  000EB0  ECB0  F004         	call	_UART_buff_get	;wreg free
  2836  000EB4  0012               	return	
  2837  000EB6                     __end_of_Receive_get:
  2838                           	opt stack 0
  2839                           tblptru	equ	0xFF8
  2840                           tblptrh	equ	0xFF7
  2841                           tblptrl	equ	0xFF6
  2842                           tablat	equ	0xFF5
  2843                           postinc0	equ	0xFEE
  2844                           wreg	equ	0xFE8
  2845                           indf1	equ	0xFE7
  2846                           postdec1	equ	0xFE5
  2847                           fsr1h	equ	0xFE2
  2848                           fsr1l	equ	0xFE1
  2849                           indf2	equ	0xFDF
  2850                           postinc2	equ	0xFDE
  2851                           postdec2	equ	0xFDD
  2852                           plusw2	equ	0xFDB
  2853                           fsr2h	equ	0xFDA
  2854                           fsr2l	equ	0xFD9
  2855                           status	equ	0xFD8
  2856                           
  2857 ;; *************** function _UART_buff_get *****************
  2858 ;; Defined at:
  2859 ;;		line 80 in file "UART.c"
  2860 ;; Parameters:    Size  Location     Type
  2861 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  2862 ;;		 -> output_buffer(206), input_buffer(206), 
  2863 ;; Auto vars:     Size  Location     Type
  2864 ;;  c               1   36[COMRAM] unsigned char 
  2865 ;; Return value:  Size  Location     Type
  2866 ;;                  1    wreg      unsigned char 
  2867 ;; Registers used:
  2868 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2869 ;; Tracked objects:
  2870 ;;		On entry : 0/0
  2871 ;;		On exit  : 0/0
  2872 ;;		Unchanged: 0/0
  2873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2874 ;;      Params:         2       0       0       0       0       0       0
  2875 ;;      Locals:         1       0       0       0       0       0       0
  2876 ;;      Temps:          2       0       0       0       0       0       0
  2877 ;;      Totals:         5       0       0       0       0       0       0
  2878 ;;Total ram usage:        5 bytes
  2879 ;; Hardware stack levels used:    1
  2880 ;; Hardware stack levels required when called:    5
  2881 ;; This function calls:
  2882 ;;		_UART_buff_modulo_inc
  2883 ;; This function is called by:
  2884 ;;		_Receive_get
  2885 ;;		_Send_put
  2886 ;; This function uses a non-reentrant model
  2887 ;;
  2888                           
  2889                           	psect	text12
  2890  000960                     __ptext12:
  2891                           	opt stack 0
  2892  000960                     _UART_buff_get:
  2893                           	opt stack 21
  2894                           
  2895                           ;UART.c: 81: unsigned char c;
  2896                           ;UART.c: 82: if (_this->count > 0) {
  2897                           
  2898                           ;incstack = 0
  2899  000960  EE20 F0CC          	lfsr	2,204
  2900  000964  5021               	movf	UART_buff_get@_this,w,c
  2901  000966  26D9               	addwf	fsr2l,f,c
  2902  000968  5022               	movf	UART_buff_get@_this+1,w,c
  2903  00096A  22DA               	addwfc	fsr2h,f,c
  2904  00096C  0E01               	movlw	1
  2905  00096E  BEDB               	btfsc	plusw2,7,c
  2906  000970  D03C               	goto	l2336
  2907  000972  0E01               	movlw	1
  2908  000974  50DB               	movf	plusw2,w,c
  2909  000976  E103               	bnz	u1530
  2910  000978  04DE               	decf	postinc2,w,c
  2911  00097A  A0D8               	btfss	status,0,c
  2912  00097C  D036               	goto	l2336
  2913  00097E                     u1530:
  2914                           
  2915                           ;UART.c: 83: c = _this->buf[_this->tail];
  2916  00097E  EE20 F0CA          	lfsr	2,202
  2917  000982  5021               	movf	UART_buff_get@_this,w,c
  2918  000984  26D9               	addwf	fsr2l,f,c
  2919  000986  5022               	movf	UART_buff_get@_this+1,w,c
  2920  000988  22DA               	addwfc	fsr2h,f,c
  2921  00098A  CFDE F023          	movff	postinc2,??_UART_buff_get
  2922  00098E  CFDD F024          	movff	postdec2,??_UART_buff_get+1
  2923  000992  5023               	movf	??_UART_buff_get,w,c
  2924  000994  2421               	addwf	UART_buff_get@_this,w,c
  2925  000996  6ED9               	movwf	fsr2l,c
  2926  000998  5024               	movf	??_UART_buff_get+1,w,c
  2927  00099A  2022               	addwfc	UART_buff_get@_this+1,w,c
  2928  00099C  6EDA               	movwf	fsr2h,c
  2929  00099E  50DF               	movf	indf2,w,c
  2930  0009A0  6E25               	movwf	UART_buff_get@c,c
  2931                           
  2932                           ;UART.c: 84: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  2933  0009A2  EE20 F0CA          	lfsr	2,202
  2934  0009A6  5021               	movf	UART_buff_get@_this,w,c
  2935  0009A8  26D9               	addwf	fsr2l,f,c
  2936  0009AA  5022               	movf	UART_buff_get@_this+1,w,c
  2937  0009AC  22DA               	addwfc	fsr2h,f,c
  2938  0009AE  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  2939  0009B2  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  2940  0009B6  0E00               	movlw	0
  2941  0009B8  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  2942  0009BA  0EC8               	movlw	200
  2943  0009BC  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  2944  0009BE  EC9C  F006         	call	_UART_buff_modulo_inc	;wreg free
  2945  0009C2  EE20 F0CA          	lfsr	2,202
  2946  0009C6  5021               	movf	UART_buff_get@_this,w,c
  2947  0009C8  26D9               	addwf	fsr2l,f,c
  2948  0009CA  5022               	movf	UART_buff_get@_this+1,w,c
  2949  0009CC  22DA               	addwfc	fsr2h,f,c
  2950  0009CE  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  2951  0009D2  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  2952                           
  2953                           ;UART.c: 85: --_this->count;
  2954  0009D6  EE20 F0CC          	lfsr	2,204
  2955  0009DA  5021               	movf	UART_buff_get@_this,w,c
  2956  0009DC  26D9               	addwf	fsr2l,f,c
  2957  0009DE  5022               	movf	UART_buff_get@_this+1,w,c
  2958  0009E0  22DA               	addwfc	fsr2h,f,c
  2959  0009E2  06DE               	decf	postinc2,f,c
  2960  0009E4  0E00               	movlw	0
  2961  0009E6  5ADD               	subwfb	postdec2,f,c
  2962                           
  2963                           ;UART.c: 86: } else {
  2964  0009E8  D002               	goto	l278
  2965  0009EA                     l2336:
  2966                           
  2967                           ;UART.c: 87: c = 0;
  2968  0009EA  0E00               	movlw	0
  2969  0009EC  6E25               	movwf	UART_buff_get@c,c
  2970  0009EE                     l278:
  2971                           
  2972                           ;UART.c: 88: }
  2973                           ;UART.c: 89: return (c);
  2974  0009EE  5025               	movf	UART_buff_get@c,w,c
  2975  0009F0  0012               	return	
  2976  0009F2                     __end_of_UART_buff_get:
  2977                           	opt stack 0
  2978                           tblptru	equ	0xFF8
  2979                           tblptrh	equ	0xFF7
  2980                           tblptrl	equ	0xFF6
  2981                           tablat	equ	0xFF5
  2982                           postinc0	equ	0xFEE
  2983                           wreg	equ	0xFE8
  2984                           indf1	equ	0xFE7
  2985                           postdec1	equ	0xFE5
  2986                           fsr1h	equ	0xFE2
  2987                           fsr1l	equ	0xFE1
  2988                           indf2	equ	0xFDF
  2989                           postinc2	equ	0xFDE
  2990                           postdec2	equ	0xFDD
  2991                           plusw2	equ	0xFDB
  2992                           fsr2h	equ	0xFDA
  2993                           fsr2l	equ	0xFD9
  2994                           status	equ	0xFD8
  2995                           
  2996 ;; *************** function _UART_buff_modulo_inc *****************
  2997 ;; Defined at:
  2998 ;;		line 105 in file "UART.c"
  2999 ;; Parameters:    Size  Location     Type
  3000 ;;  value           2   26[COMRAM] const unsigned int 
  3001 ;;  modulus         2   28[COMRAM] const unsigned int 
  3002 ;; Auto vars:     Size  Location     Type
  3003 ;;  my_value        2   30[COMRAM] unsigned int 
  3004 ;; Return value:  Size  Location     Type
  3005 ;;                  2   26[COMRAM] unsigned int 
  3006 ;; Registers used:
  3007 ;;		wreg, status,2, status,0
  3008 ;; Tracked objects:
  3009 ;;		On entry : 0/0
  3010 ;;		On exit  : 0/0
  3011 ;;		Unchanged: 0/0
  3012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3013 ;;      Params:         4       0       0       0       0       0       0
  3014 ;;      Locals:         2       0       0       0       0       0       0
  3015 ;;      Temps:          0       0       0       0       0       0       0
  3016 ;;      Totals:         6       0       0       0       0       0       0
  3017 ;;Total ram usage:        6 bytes
  3018 ;; Hardware stack levels used:    1
  3019 ;; Hardware stack levels required when called:    4
  3020 ;; This function calls:
  3021 ;;		Nothing
  3022 ;; This function is called by:
  3023 ;;		_UART_buff_put
  3024 ;;		_UART_buff_get
  3025 ;; This function uses a non-reentrant model
  3026 ;;
  3027                           
  3028                           	psect	text13
  3029  000D38                     __ptext13:
  3030                           	opt stack 0
  3031  000D38                     _UART_buff_modulo_inc:
  3032                           	opt stack 21
  3033                           
  3034                           ;UART.c: 106: unsigned int my_value = value + 1;
  3035                           
  3036                           ;incstack = 0
  3037  000D38  0E01               	movlw	1
  3038  000D3A  241B               	addwf	UART_buff_modulo_inc@value,w,c
  3039  000D3C  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  3040  000D3E  0E00               	movlw	0
  3041  000D40  201C               	addwfc	UART_buff_modulo_inc@value+1,w,c
  3042  000D42  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  3043                           
  3044                           ;UART.c: 107: if (my_value >= modulus) {
  3045  000D44  501D               	movf	UART_buff_modulo_inc@modulus,w,c
  3046  000D46  5C1F               	subwf	UART_buff_modulo_inc@my_value,w,c
  3047  000D48  501E               	movf	UART_buff_modulo_inc@modulus+1,w,c
  3048  000D4A  5820               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  3049  000D4C  A0D8               	btfss	status,0,c
  3050  000D4E  D004               	goto	l2310
  3051                           
  3052                           ;UART.c: 108: my_value = 0;
  3053  000D50  0E00               	movlw	0
  3054  000D52  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  3055  000D54  0E00               	movlw	0
  3056  000D56  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  3057  000D58                     l2310:
  3058                           
  3059                           ;UART.c: 109: }
  3060                           ;UART.c: 110: return (my_value);
  3061  000D58  C01F  F01B         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  3062  000D5C  C020  F01C         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  3063  000D60  0012               	return	
  3064  000D62                     __end_of_UART_buff_modulo_inc:
  3065                           	opt stack 0
  3066                           tblptru	equ	0xFF8
  3067                           tblptrh	equ	0xFF7
  3068                           tblptrl	equ	0xFF6
  3069                           tablat	equ	0xFF5
  3070                           postinc0	equ	0xFEE
  3071                           wreg	equ	0xFE8
  3072                           indf1	equ	0xFE7
  3073                           postdec1	equ	0xFE5
  3074                           fsr1h	equ	0xFE2
  3075                           fsr1l	equ	0xFE1
  3076                           indf2	equ	0xFDF
  3077                           postinc2	equ	0xFDE
  3078                           postdec2	equ	0xFDD
  3079                           plusw2	equ	0xFDB
  3080                           fsr2h	equ	0xFDA
  3081                           fsr2l	equ	0xFD9
  3082                           status	equ	0xFD8
  3083                           
  3084 ;; *************** function _Receive_available *****************
  3085 ;; Defined at:
  3086 ;;		line 121 in file "UART.c"
  3087 ;; Parameters:    Size  Location     Type
  3088 ;;		None
  3089 ;; Auto vars:     Size  Location     Type
  3090 ;;		None
  3091 ;; Return value:  Size  Location     Type
  3092 ;;                  2   28[COMRAM] int 
  3093 ;; Registers used:
  3094 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3095 ;; Tracked objects:
  3096 ;;		On entry : 0/0
  3097 ;;		On exit  : 0/0
  3098 ;;		Unchanged: 0/0
  3099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3100 ;;      Params:         2       0       0       0       0       0       0
  3101 ;;      Locals:         0       0       0       0       0       0       0
  3102 ;;      Temps:          0       0       0       0       0       0       0
  3103 ;;      Totals:         2       0       0       0       0       0       0
  3104 ;;Total ram usage:        2 bytes
  3105 ;; Hardware stack levels used:    1
  3106 ;; Hardware stack levels required when called:    5
  3107 ;; This function calls:
  3108 ;;		_UART_buff_size
  3109 ;; This function is called by:
  3110 ;;		_ComStart
  3111 ;;		_receiveData
  3112 ;; This function uses a non-reentrant model
  3113 ;;
  3114                           
  3115                           	psect	text14
  3116  000E2E                     __ptext14:
  3117                           	opt stack 0
  3118  000E2E                     _Receive_available:
  3119                           	opt stack 23
  3120                           
  3121                           ;UART.c: 122: return UART_buff_size(&input_buffer);
  3122                           
  3123                           ;incstack = 0
  3124  000E2E  0E00               	movlw	low _input_buffer
  3125  000E30  6E1B               	movwf	UART_buff_size@_this,c
  3126  000E32  0E01               	movlw	high _input_buffer
  3127  000E34  6E1C               	movwf	UART_buff_size@_this+1,c
  3128  000E36  EC22  F007         	call	_UART_buff_size	;wreg free
  3129  000E3A  C01B  F01D         	movff	?_UART_buff_size,?_Receive_available
  3130  000E3E  C01C  F01E         	movff	?_UART_buff_size+1,?_Receive_available+1
  3131  000E42  0012               	return	
  3132  000E44                     __end_of_Receive_available:
  3133                           	opt stack 0
  3134                           tblptru	equ	0xFF8
  3135                           tblptrh	equ	0xFF7
  3136                           tblptrl	equ	0xFF6
  3137                           tablat	equ	0xFF5
  3138                           postinc0	equ	0xFEE
  3139                           wreg	equ	0xFE8
  3140                           indf1	equ	0xFE7
  3141                           postdec1	equ	0xFE5
  3142                           fsr1h	equ	0xFE2
  3143                           fsr1l	equ	0xFE1
  3144                           indf2	equ	0xFDF
  3145                           postinc2	equ	0xFDE
  3146                           postdec2	equ	0xFDD
  3147                           plusw2	equ	0xFDB
  3148                           fsr2h	equ	0xFDA
  3149                           fsr2l	equ	0xFD9
  3150                           status	equ	0xFD8
  3151                           
  3152 ;; *************** function _UART_buff_size *****************
  3153 ;; Defined at:
  3154 ;;		line 101 in file "UART.c"
  3155 ;; Parameters:    Size  Location     Type
  3156 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  3157 ;;		 -> output_buffer(206), input_buffer(206), 
  3158 ;; Auto vars:     Size  Location     Type
  3159 ;;		None
  3160 ;; Return value:  Size  Location     Type
  3161 ;;                  2   26[COMRAM] int 
  3162 ;; Registers used:
  3163 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3164 ;; Tracked objects:
  3165 ;;		On entry : 0/0
  3166 ;;		On exit  : 0/0
  3167 ;;		Unchanged: 0/0
  3168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3169 ;;      Params:         2       0       0       0       0       0       0
  3170 ;;      Locals:         0       0       0       0       0       0       0
  3171 ;;      Temps:          0       0       0       0       0       0       0
  3172 ;;      Totals:         2       0       0       0       0       0       0
  3173 ;;Total ram usage:        2 bytes
  3174 ;; Hardware stack levels used:    1
  3175 ;; Hardware stack levels required when called:    4
  3176 ;; This function calls:
  3177 ;;		Nothing
  3178 ;; This function is called by:
  3179 ;;		_Receive_available
  3180 ;; This function uses a non-reentrant model
  3181 ;;
  3182                           
  3183                           	psect	text15
  3184  000E44                     __ptext15:
  3185                           	opt stack 0
  3186  000E44                     _UART_buff_size:
  3187                           	opt stack 23
  3188                           
  3189                           ;UART.c: 102: return (_this->count);
  3190                           
  3191                           ;incstack = 0
  3192  000E44  EE20 F0CC          	lfsr	2,204
  3193  000E48  501B               	movf	UART_buff_size@_this,w,c
  3194  000E4A  26D9               	addwf	fsr2l,f,c
  3195  000E4C  501C               	movf	UART_buff_size@_this+1,w,c
  3196  000E4E  22DA               	addwfc	fsr2h,f,c
  3197  000E50  CFDE F01B          	movff	postinc2,?_UART_buff_size
  3198  000E54  CFDD F01C          	movff	postdec2,?_UART_buff_size+1
  3199  000E58  0012               	return	
  3200  000E5A                     __end_of_UART_buff_size:
  3201                           	opt stack 0
  3202                           tblptru	equ	0xFF8
  3203                           tblptrh	equ	0xFF7
  3204                           tblptrl	equ	0xFF6
  3205                           tablat	equ	0xFF5
  3206                           postinc0	equ	0xFEE
  3207                           wreg	equ	0xFE8
  3208                           indf1	equ	0xFE7
  3209                           postdec1	equ	0xFE5
  3210                           fsr1h	equ	0xFE2
  3211                           fsr1l	equ	0xFE1
  3212                           indf2	equ	0xFDF
  3213                           postinc2	equ	0xFDE
  3214                           postdec2	equ	0xFDD
  3215                           plusw2	equ	0xFDB
  3216                           fsr2h	equ	0xFDA
  3217                           fsr2l	equ	0xFD9
  3218                           status	equ	0xFD8
  3219                           
  3220 ;; *************** function _CRC8 *****************
  3221 ;; Defined at:
  3222 ;;		line 92 in file "FastTransfer.c"
  3223 ;; Parameters:    Size  Location     Type
  3224 ;;  data            2   26[COMRAM] PTR const unsigned char 
  3225 ;;		 -> CRCcheck@arrayHolder(3), ProcessArray(30), sendData@SendArray(30), 
  3226 ;;  len             1   28[COMRAM] unsigned char 
  3227 ;; Auto vars:     Size  Location     Type
  3228 ;;  sum             1   29[COMRAM] unsigned char 
  3229 ;;  tempI           1   31[COMRAM] unsigned char 
  3230 ;;  extract         1   30[COMRAM] unsigned char 
  3231 ;;  crc             1   32[COMRAM] unsigned char 
  3232 ;; Return value:  Size  Location     Type
  3233 ;;                  1    wreg      unsigned char 
  3234 ;; Registers used:
  3235 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3236 ;; Tracked objects:
  3237 ;;		On entry : 0/0
  3238 ;;		On exit  : 0/0
  3239 ;;		Unchanged: 0/0
  3240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3241 ;;      Params:         3       0       0       0       0       0       0
  3242 ;;      Locals:         4       0       0       0       0       0       0
  3243 ;;      Temps:          0       0       0       0       0       0       0
  3244 ;;      Totals:         7       0       0       0       0       0       0
  3245 ;;Total ram usage:        7 bytes
  3246 ;; Hardware stack levels used:    1
  3247 ;; Hardware stack levels required when called:    4
  3248 ;; This function calls:
  3249 ;;		Nothing
  3250 ;; This function is called by:
  3251 ;;		_sendData
  3252 ;;		_receiveData
  3253 ;;		_CRCcheck
  3254 ;; This function uses a non-reentrant model
  3255 ;;
  3256                           
  3257                           	psect	text16
  3258  000BBA                     __ptext16:
  3259                           	opt stack 0
  3260  000BBA                     _CRC8:
  3261                           	opt stack 23
  3262                           
  3263                           ;FastTransfer.c: 93: unsigned char crc = 0x00;
  3264                           
  3265                           ;incstack = 0
  3266  000BBA  0E00               	movlw	0
  3267  000BBC  6E21               	movwf	CRC8@crc,c
  3268                           
  3269                           ;FastTransfer.c: 94: while (len--) {
  3270  000BBE  D01C               	goto	l2358
  3271  000BC0                     l2342:
  3272                           
  3273                           ;FastTransfer.c: 95: unsigned char extract = *data++;
  3274  000BC0  C01B  FFD9         	movff	CRC8@data,fsr2l
  3275  000BC4  C01C  FFDA         	movff	CRC8@data+1,fsr2h
  3276  000BC8  50DF               	movf	indf2,w,c
  3277  000BCA  6E1F               	movwf	CRC8@extract,c
  3278  000BCC  4A1B               	infsnz	CRC8@data,f,c
  3279  000BCE  2A1C               	incf	CRC8@data+1,f,c
  3280                           
  3281                           ;FastTransfer.c: 96: unsigned char tempI;
  3282                           ;FastTransfer.c: 97: for (tempI = 8; tempI; tempI--) {
  3283  000BD0  0E08               	movlw	8
  3284  000BD2  6E20               	movwf	CRC8@tempI,c
  3285  000BD4  D00E               	goto	l2356
  3286  000BD6                     l2348:
  3287                           
  3288                           ;FastTransfer.c: 98: unsigned char sum = (crc ^ extract) & 0x01;
  3289  000BD6  5021               	movf	CRC8@crc,w,c
  3290  000BD8  181F               	xorwf	CRC8@extract,w,c
  3291  000BDA  0B01               	andlw	1
  3292  000BDC  6E1E               	movwf	CRC8@sum,c
  3293                           
  3294                           ;FastTransfer.c: 99: crc >>= 1;
  3295  000BDE  90D8               	bcf	status,0,c
  3296  000BE0  3221               	rrcf	CRC8@crc,f,c
  3297                           
  3298                           ;FastTransfer.c: 100: if (sum) {
  3299  000BE2  501E               	movf	CRC8@sum,w,c
  3300  000BE4  B4D8               	btfsc	status,2,c
  3301  000BE6  D002               	goto	l122
  3302                           
  3303                           ;FastTransfer.c: 101: crc ^= 0x8C;
  3304  000BE8  0E8C               	movlw	140
  3305  000BEA  1A21               	xorwf	CRC8@crc,f,c
  3306  000BEC                     l122:
  3307                           
  3308                           ;FastTransfer.c: 102: }
  3309                           ;FastTransfer.c: 103: extract >>= 1;
  3310  000BEC  90D8               	bcf	status,0,c
  3311  000BEE  321F               	rrcf	CRC8@extract,f,c
  3312  000BF0  0620               	decf	CRC8@tempI,f,c
  3313  000BF2                     l2356:
  3314  000BF2  5020               	movf	CRC8@tempI,w,c
  3315  000BF4  A4D8               	btfss	status,2,c
  3316  000BF6  D7EF               	goto	l2348
  3317  000BF8                     l2358:
  3318  000BF8  061D               	decf	CRC8@len,f,c
  3319  000BFA  281D               	incf	CRC8@len,w,c
  3320  000BFC  A4D8               	btfss	status,2,c
  3321  000BFE  D7E0               	goto	l2342
  3322                           
  3323                           ;FastTransfer.c: 104: }
  3324                           ;FastTransfer.c: 105: }
  3325                           ;FastTransfer.c: 106: return crc;
  3326  000C00  5021               	movf	CRC8@crc,w,c
  3327  000C02  0012               	return	
  3328  000C04                     __end_of_CRC8:
  3329                           	opt stack 0
  3330                           tblptru	equ	0xFF8
  3331                           tblptrh	equ	0xFF7
  3332                           tblptrl	equ	0xFF6
  3333                           tablat	equ	0xFF5
  3334                           postinc0	equ	0xFEE
  3335                           wreg	equ	0xFE8
  3336                           indf1	equ	0xFE7
  3337                           postdec1	equ	0xFE5
  3338                           fsr1h	equ	0xFE2
  3339                           fsr1l	equ	0xFE1
  3340                           indf2	equ	0xFDF
  3341                           postinc2	equ	0xFDE
  3342                           postdec2	equ	0xFDD
  3343                           plusw2	equ	0xFDB
  3344                           fsr2h	equ	0xFDA
  3345                           fsr2l	equ	0xFD9
  3346                           status	equ	0xFD8
  3347                           
  3348 ;; *************** function _Start *****************
  3349 ;; Defined at:
  3350 ;;		line 47 in file "Function.c"
  3351 ;; Parameters:    Size  Location     Type
  3352 ;;		None
  3353 ;; Auto vars:     Size  Location     Type
  3354 ;;		None
  3355 ;; Return value:  Size  Location     Type
  3356 ;;                  1    wreg      void 
  3357 ;; Registers used:
  3358 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3359 ;; Tracked objects:
  3360 ;;		On entry : 0/0
  3361 ;;		On exit  : 0/0
  3362 ;;		Unchanged: 0/0
  3363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3364 ;;      Params:         0       0       0       0       0       0       0
  3365 ;;      Locals:         0       0       0       0       0       0       0
  3366 ;;      Temps:          0       0       0       0       0       0       0
  3367 ;;      Totals:         0       0       0       0       0       0       0
  3368 ;;Total ram usage:        0 bytes
  3369 ;; Hardware stack levels used:    1
  3370 ;; Hardware stack levels required when called:    8
  3371 ;; This function calls:
  3372 ;;		_ComStart
  3373 ;;		_INTERRUPT_Initialize
  3374 ;;		_TMR0_Initialize
  3375 ;; This function is called by:
  3376 ;;		_main
  3377 ;; This function uses a non-reentrant model
  3378 ;;
  3379                           
  3380                           	psect	text17
  3381  000B64                     __ptext17:
  3382                           	opt stack 0
  3383  000B64                     _Start:
  3384                           	opt stack 22
  3385                           
  3386                           ;Function.c: 112: TRISCbits.TRISC5 = 1;
  3387                           
  3388                           ;incstack = 0
  3389  000B64  8A94               	bsf	3988,5,c	;volatile
  3390                           
  3391                           ;Function.c: 113: TRISCbits.TRISC4 = 1;
  3392  000B66  8894               	bsf	3988,4,c	;volatile
  3393                           
  3394                           ;Function.c: 114: TRISDbits.TRISD3 = 1;
  3395  000B68  8695               	bsf	3989,3,c	;volatile
  3396                           
  3397                           ;Function.c: 115: TRISDbits.TRISD2 = 1;
  3398  000B6A  8495               	bsf	3989,2,c	;volatile
  3399                           
  3400                           ;Function.c: 116: TRISDbits.TRISD1 = 1;
  3401  000B6C  8295               	bsf	3989,1,c	;volatile
  3402                           
  3403                           ;Function.c: 117: TRISDbits.TRISD0 = 1;
  3404  000B6E  8095               	bsf	3989,0,c	;volatile
  3405                           
  3406                           ;Function.c: 118: TRISCbits.TRISC3 = 1;
  3407  000B70  8694               	bsf	3988,3,c	;volatile
  3408                           
  3409                           ;Function.c: 119: TRISCbits.TRISC2 = 1;
  3410  000B72  8494               	bsf	3988,2,c	;volatile
  3411                           
  3412                           ;Function.c: 120: TRISCbits.TRISC1 = 1;
  3413  000B74  8294               	bsf	3988,1,c	;volatile
  3414                           
  3415                           ;Function.c: 121: TRISAbits.TRISA7 = 1;
  3416  000B76  8E92               	bsf	3986,7,c	;volatile
  3417                           
  3418                           ;Function.c: 122: TRISCbits.TRISC0 = 1;
  3419  000B78  8094               	bsf	3988,0,c	;volatile
  3420                           
  3421                           ;Function.c: 123: TRISAbits.TRISA4 = 1;
  3422  000B7A  8892               	bsf	3986,4,c	;volatile
  3423                           
  3424                           ;Function.c: 124: TRISAbits.TRISA6 = 1;
  3425  000B7C  8C92               	bsf	3986,6,c	;volatile
  3426                           
  3427                           ;Function.c: 127: TRISAbits.TRISA3 = 0;
  3428  000B7E  9692               	bcf	3986,3,c	;volatile
  3429                           
  3430                           ;Function.c: 128: TRISDbits.TRISD4 = 0;
  3431  000B80  9895               	bcf	3989,4,c	;volatile
  3432                           
  3433                           ;Function.c: 133: ANSELA = 0;
  3434  000B82  0E00               	movlw	0
  3435  000B84  010F               	movlb	15	; () banked
  3436  000B86  6F38               	movwf	56,b	;volatile
  3437                           
  3438                           ;Function.c: 134: ANSELB = 0;
  3439  000B88  0E00               	movlw	0
  3440  000B8A  010F               	movlb	15	; () banked
  3441  000B8C  6F39               	movwf	57,b	;volatile
  3442                           
  3443                           ;Function.c: 135: ANSELC = 0;
  3444  000B8E  0E00               	movlw	0
  3445  000B90  010F               	movlb	15	; () banked
  3446  000B92  6F3A               	movwf	58,b	;volatile
  3447                           
  3448                           ;Function.c: 136: ANSELD = 0;
  3449  000B94  0E00               	movlw	0
  3450  000B96  010F               	movlb	15	; () banked
  3451  000B98  6F3B               	movwf	59,b	;volatile
  3452                           
  3453                           ;Function.c: 137: ANSELE = 0;
  3454  000B9A  0E00               	movlw	0
  3455  000B9C  010F               	movlb	15	; () banked
  3456  000B9E  6F3C               	movwf	60,b	;volatile
  3457                           
  3458                           ;Function.c: 141: OSCCON = 0x72;
  3459  000BA0  0E72               	movlw	114
  3460  000BA2  6ED3               	movwf	4051,c	;volatile
  3461                           
  3462                           ;Function.c: 143: OSCCON2 = 0x04;
  3463  000BA4  0E04               	movlw	4
  3464  000BA6  6ED2               	movwf	4050,c	;volatile
  3465                           
  3466                           ;Function.c: 145: OSCTUNE = 0x00;
  3467  000BA8  0E00               	movlw	0
  3468  000BAA  6E9B               	movwf	3995,c	;volatile
  3469                           
  3470                           ; BSR set to: 15
  3471                           ;Function.c: 148: ComStart();
  3472  000BAC  EC86  F005         	call	_ComStart	;wreg free
  3473                           
  3474                           ;Function.c: 149: INTERRUPT_Initialize();
  3475  000BB0  EC00  F007         	call	_INTERRUPT_Initialize	;wreg free
  3476                           
  3477                           ;Function.c: 150: TMR0_Initialize();
  3478  000BB4  ECC6  F006         	call	_TMR0_Initialize	;wreg free
  3479  000BB8  0012               	return		;funcret
  3480  000BBA                     __end_of_Start:
  3481                           	opt stack 0
  3482                           tblptru	equ	0xFF8
  3483                           tblptrh	equ	0xFF7
  3484                           tblptrl	equ	0xFF6
  3485                           tablat	equ	0xFF5
  3486                           postinc0	equ	0xFEE
  3487                           wreg	equ	0xFE8
  3488                           indf1	equ	0xFE7
  3489                           postdec1	equ	0xFE5
  3490                           fsr1h	equ	0xFE2
  3491                           fsr1l	equ	0xFE1
  3492                           indf2	equ	0xFDF
  3493                           postinc2	equ	0xFDE
  3494                           postdec2	equ	0xFDD
  3495                           plusw2	equ	0xFDB
  3496                           fsr2h	equ	0xFDA
  3497                           fsr2l	equ	0xFD9
  3498                           status	equ	0xFD8
  3499                           
  3500 ;; *************** function _TMR0_Initialize *****************
  3501 ;; Defined at:
  3502 ;;		line 23 in file "tmr0.c"
  3503 ;; Parameters:    Size  Location     Type
  3504 ;;		None
  3505 ;; Auto vars:     Size  Location     Type
  3506 ;;		None
  3507 ;; Return value:  Size  Location     Type
  3508 ;;                  1    wreg      void 
  3509 ;; Registers used:
  3510 ;;		wreg, status,2, cstack
  3511 ;; Tracked objects:
  3512 ;;		On entry : 0/0
  3513 ;;		On exit  : 0/0
  3514 ;;		Unchanged: 0/0
  3515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3516 ;;      Params:         0       0       0       0       0       0       0
  3517 ;;      Locals:         0       0       0       0       0       0       0
  3518 ;;      Temps:          0       0       0       0       0       0       0
  3519 ;;      Totals:         0       0       0       0       0       0       0
  3520 ;;Total ram usage:        0 bytes
  3521 ;; Hardware stack levels used:    1
  3522 ;; Hardware stack levels required when called:    5
  3523 ;; This function calls:
  3524 ;;		_TMR0_StartTimer
  3525 ;; This function is called by:
  3526 ;;		_Start
  3527 ;; This function uses a non-reentrant model
  3528 ;;
  3529                           
  3530                           	psect	text18
  3531  000D8C                     __ptext18:
  3532                           	opt stack 0
  3533  000D8C                     _TMR0_Initialize:
  3534                           	opt stack 24
  3535                           
  3536                           ;tmr0.c: 27: T0CON = 0x94;
  3537                           
  3538                           ;incstack = 0
  3539  000D8C  0E94               	movlw	148
  3540  000D8E  6ED5               	movwf	4053,c	;volatile
  3541                           
  3542                           ;tmr0.c: 30: TMR0H = 0xCF;
  3543  000D90  0ECF               	movlw	207
  3544  000D92  6ED7               	movwf	4055,c	;volatile
  3545                           
  3546                           ;tmr0.c: 33: TMR0L = 0x2C;
  3547  000D94  0E2C               	movlw	44
  3548  000D96  6ED6               	movwf	4054,c	;volatile
  3549                           
  3550                           ;tmr0.c: 36: timer0ReloadVal16bit = 53036;
  3551  000D98  0ECF               	movlw	207
  3552  000D9A  6E27               	movwf	_timer0ReloadVal16bit+1,c	;volatile
  3553  000D9C  0E2C               	movlw	44
  3554  000D9E  6E26               	movwf	_timer0ReloadVal16bit,c	;volatile
  3555                           
  3556                           ;tmr0.c: 39: INTCONbits.TMR0IF = 0;
  3557  000DA0  94F2               	bcf	intcon,2,c	;volatile
  3558                           
  3559                           ;tmr0.c: 42: INTCONbits.TMR0IE = 1;
  3560  000DA2  8AF2               	bsf	intcon,5,c	;volatile
  3561                           
  3562                           ;tmr0.c: 45: TMR0_StartTimer();
  3563  000DA4  EC5D  F007         	call	_TMR0_StartTimer	;wreg free
  3564  000DA8  0012               	return		;funcret
  3565  000DAA                     __end_of_TMR0_Initialize:
  3566                           	opt stack 0
  3567                           tblptru	equ	0xFF8
  3568                           tblptrh	equ	0xFF7
  3569                           tblptrl	equ	0xFF6
  3570                           tablat	equ	0xFF5
  3571                           intcon	equ	0xFF2
  3572                           postinc0	equ	0xFEE
  3573                           wreg	equ	0xFE8
  3574                           indf1	equ	0xFE7
  3575                           postdec1	equ	0xFE5
  3576                           fsr1h	equ	0xFE2
  3577                           fsr1l	equ	0xFE1
  3578                           indf2	equ	0xFDF
  3579                           postinc2	equ	0xFDE
  3580                           postdec2	equ	0xFDD
  3581                           plusw2	equ	0xFDB
  3582                           fsr2h	equ	0xFDA
  3583                           fsr2l	equ	0xFD9
  3584                           status	equ	0xFD8
  3585                           
  3586 ;; *************** function _TMR0_StartTimer *****************
  3587 ;; Defined at:
  3588 ;;		line 48 in file "tmr0.c"
  3589 ;; Parameters:    Size  Location     Type
  3590 ;;		None
  3591 ;; Auto vars:     Size  Location     Type
  3592 ;;		None
  3593 ;; Return value:  Size  Location     Type
  3594 ;;                  1    wreg      void 
  3595 ;; Registers used:
  3596 ;;		None
  3597 ;; Tracked objects:
  3598 ;;		On entry : 0/0
  3599 ;;		On exit  : 0/0
  3600 ;;		Unchanged: 0/0
  3601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3602 ;;      Params:         0       0       0       0       0       0       0
  3603 ;;      Locals:         0       0       0       0       0       0       0
  3604 ;;      Temps:          0       0       0       0       0       0       0
  3605 ;;      Totals:         0       0       0       0       0       0       0
  3606 ;;Total ram usage:        0 bytes
  3607 ;; Hardware stack levels used:    1
  3608 ;; Hardware stack levels required when called:    4
  3609 ;; This function calls:
  3610 ;;		Nothing
  3611 ;; This function is called by:
  3612 ;;		_TMR0_Initialize
  3613 ;; This function uses a non-reentrant model
  3614 ;;
  3615                           
  3616                           	psect	text19
  3617  000EBA                     __ptext19:
  3618                           	opt stack 0
  3619  000EBA                     _TMR0_StartTimer:
  3620                           	opt stack 24
  3621                           
  3622                           ;tmr0.c: 50: T0CONbits.TMR0ON = 1;
  3623                           
  3624                           ;incstack = 0
  3625  000EBA  8ED5               	bsf	4053,7,c	;volatile
  3626  000EBC  0012               	return		;funcret
  3627  000EBE                     __end_of_TMR0_StartTimer:
  3628                           	opt stack 0
  3629                           tblptru	equ	0xFF8
  3630                           tblptrh	equ	0xFF7
  3631                           tblptrl	equ	0xFF6
  3632                           tablat	equ	0xFF5
  3633                           intcon	equ	0xFF2
  3634                           postinc0	equ	0xFEE
  3635                           wreg	equ	0xFE8
  3636                           indf1	equ	0xFE7
  3637                           postdec1	equ	0xFE5
  3638                           fsr1h	equ	0xFE2
  3639                           fsr1l	equ	0xFE1
  3640                           indf2	equ	0xFDF
  3641                           postinc2	equ	0xFDE
  3642                           postdec2	equ	0xFDD
  3643                           plusw2	equ	0xFDB
  3644                           fsr2h	equ	0xFDA
  3645                           fsr2l	equ	0xFD9
  3646                           status	equ	0xFD8
  3647                           
  3648 ;; *************** function _INTERRUPT_Initialize *****************
  3649 ;; Defined at:
  3650 ;;		line 153 in file "Function.c"
  3651 ;; Parameters:    Size  Location     Type
  3652 ;;		None
  3653 ;; Auto vars:     Size  Location     Type
  3654 ;;		None
  3655 ;; Return value:  Size  Location     Type
  3656 ;;                  1    wreg      void 
  3657 ;; Registers used:
  3658 ;;		None
  3659 ;; Tracked objects:
  3660 ;;		On entry : 0/0
  3661 ;;		On exit  : 0/0
  3662 ;;		Unchanged: 0/0
  3663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3664 ;;      Params:         0       0       0       0       0       0       0
  3665 ;;      Locals:         0       0       0       0       0       0       0
  3666 ;;      Temps:          0       0       0       0       0       0       0
  3667 ;;      Totals:         0       0       0       0       0       0       0
  3668 ;;Total ram usage:        0 bytes
  3669 ;; Hardware stack levels used:    1
  3670 ;; Hardware stack levels required when called:    4
  3671 ;; This function calls:
  3672 ;;		Nothing
  3673 ;; This function is called by:
  3674 ;;		_Start
  3675 ;; This function uses a non-reentrant model
  3676 ;;
  3677                           
  3678                           	psect	text20
  3679  000E00                     __ptext20:
  3680                           	opt stack 0
  3681  000E00                     _INTERRUPT_Initialize:
  3682                           	opt stack 25
  3683                           
  3684                           ;Function.c: 155: INTCONbits.PEIE = 1;
  3685                           
  3686                           ;incstack = 0
  3687  000E00  8CF2               	bsf	intcon,6,c	;volatile
  3688                           
  3689                           ;Function.c: 156: INTCONbits.GIE = 1;
  3690  000E02  8EF2               	bsf	intcon,7,c	;volatile
  3691                           
  3692                           ;Function.c: 158: RCONbits.IPEN = 0;
  3693  000E04  9ED0               	bcf	4048,7,c	;volatile
  3694                           
  3695                           ;Function.c: 163: IPR1bits.RC1IP = 0;
  3696  000E06  9A9F               	bcf	3999,5,c	;volatile
  3697                           
  3698                           ;Function.c: 165: IPR1bits.TX1IP = 0;
  3699  000E08  989F               	bcf	3999,4,c	;volatile
  3700                           
  3701                           ;Function.c: 168: INTCONbits.TMR0IF = 0;
  3702  000E0A  94F2               	bcf	intcon,2,c	;volatile
  3703                           
  3704                           ;Function.c: 171: INTCONbits.TMR0IE = 1;
  3705  000E0C  8AF2               	bsf	intcon,5,c	;volatile
  3706                           
  3707                           ;Function.c: 173: IPR1bits.ADIP = 0;
  3708  000E0E  9C9F               	bcf	3999,6,c	;volatile
  3709                           
  3710                           ;Function.c: 175: IPR1bits.SSP1IP = 0;
  3711  000E10  969F               	bcf	3999,3,c	;volatile
  3712                           
  3713                           ;Function.c: 177: IPR2bits.BCL1IP = 0;
  3714  000E12  96A2               	bcf	4002,3,c	;volatile
  3715                           
  3716                           ;Function.c: 178: IPR1bits.TMR2IP=0;
  3717  000E14  929F               	bcf	3999,1,c	;volatile
  3718  000E16  0012               	return		;funcret
  3719  000E18                     __end_of_INTERRUPT_Initialize:
  3720                           	opt stack 0
  3721                           tblptru	equ	0xFF8
  3722                           tblptrh	equ	0xFF7
  3723                           tblptrl	equ	0xFF6
  3724                           tablat	equ	0xFF5
  3725                           intcon	equ	0xFF2
  3726                           postinc0	equ	0xFEE
  3727                           wreg	equ	0xFE8
  3728                           indf1	equ	0xFE7
  3729                           postdec1	equ	0xFE5
  3730                           fsr1h	equ	0xFE2
  3731                           fsr1l	equ	0xFE1
  3732                           indf2	equ	0xFDF
  3733                           postinc2	equ	0xFDE
  3734                           postdec2	equ	0xFDD
  3735                           plusw2	equ	0xFDB
  3736                           fsr2h	equ	0xFDA
  3737                           fsr2l	equ	0xFD9
  3738                           status	equ	0xFD8
  3739                           
  3740 ;; *************** function _ComStart *****************
  3741 ;; Defined at:
  3742 ;;		line 12 in file "Communications.c"
  3743 ;; Parameters:    Size  Location     Type
  3744 ;;		None
  3745 ;; Auto vars:     Size  Location     Type
  3746 ;;		None
  3747 ;; Return value:  Size  Location     Type
  3748 ;;                  1    wreg      void 
  3749 ;; Registers used:
  3750 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3751 ;; Tracked objects:
  3752 ;;		On entry : 0/0
  3753 ;;		On exit  : 0/0
  3754 ;;		Unchanged: 0/0
  3755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3756 ;;      Params:         0       0       0       0       0       0       0
  3757 ;;      Locals:         0       0       0       0       0       0       0
  3758 ;;      Temps:          0       0       0       0       0       0       0
  3759 ;;      Totals:         0       0       0       0       0       0       0
  3760 ;;Total ram usage:        0 bytes
  3761 ;; Hardware stack levels used:    1
  3762 ;; Hardware stack levels required when called:    7
  3763 ;; This function calls:
  3764 ;;		_EUSART1_Initialize
  3765 ;;		_begin
  3766 ;; This function is called by:
  3767 ;;		_Start
  3768 ;; This function uses a non-reentrant model
  3769 ;;
  3770                           
  3771                           	psect	text21
  3772  000B0C                     __ptext21:
  3773                           	opt stack 0
  3774  000B0C                     _ComStart:
  3775                           	opt stack 22
  3776                           
  3777                           ;Communications.c: 13: EUSART1_Initialize();
  3778                           
  3779                           ;incstack = 0
  3780  000B0C  EC02  F006         	call	_EUSART1_Initialize	;wreg free
  3781                           
  3782                           ;Communications.c: 14: begin(receiveArray, sizeof (receiveArray), 8, 0, Send_put, Receiv
      +                          e_get, Receive_available, Receive_peek);
  3783  000B10  0E9D               	movlw	low _receiveArray
  3784  000B12  0100               	movlb	0	; () banked
  3785  000B14  6FA7               	movwf	begin@ptr& (0+255),b
  3786  000B16  0E00               	movlw	high _receiveArray
  3787  000B18  0100               	movlb	0	; () banked
  3788  000B1A  6FA8               	movwf	(begin@ptr+1)& (0+255),b
  3789  000B1C  0E0A               	movlw	10
  3790  000B1E  0100               	movlb	0	; () banked
  3791  000B20  6FA9               	movwf	begin@maxSize& (0+255),b
  3792  000B22  0E08               	movlw	8
  3793  000B24  0100               	movlb	0	; () banked
  3794  000B26  6FAA               	movwf	begin@givenAddress& (0+255),b
  3795  000B28  0E00               	movlw	0
  3796  000B2A  0100               	movlb	0	; () banked
  3797  000B2C  6FAB               	movwf	begin@error& (0+255),b
  3798  000B2E  0EDC               	movlw	low _Send_put
  3799  000B30  0100               	movlb	0	; () banked
  3800  000B32  6FAC               	movwf	begin@stufftosend& (0+255),b
  3801  000B34  0E0C               	movlw	high _Send_put
  3802  000B36  0100               	movlb	0	; () banked
  3803  000B38  6FAD               	movwf	(begin@stufftosend+1)& (0+255),b
  3804  000B3A  0EA8               	movlw	low _Receive_get
  3805  000B3C  0100               	movlb	0	; () banked
  3806  000B3E  6FAE               	movwf	begin@stufftoreceive& (0+255),b
  3807  000B40  0E0E               	movlw	high _Receive_get
  3808  000B42  0100               	movlb	0	; () banked
  3809  000B44  6FAF               	movwf	(begin@stufftoreceive+1)& (0+255),b
  3810  000B46  0E2E               	movlw	low _Receive_available
  3811  000B48  0100               	movlb	0	; () banked
  3812  000B4A  6FB0               	movwf	begin@stuffavailable& (0+255),b
  3813  000B4C  0E0E               	movlw	high _Receive_available
  3814  000B4E  0100               	movlb	0	; () banked
  3815  000B50  6FB1               	movwf	(begin@stuffavailable+1)& (0+255),b
  3816  000B52  0E00               	movlw	0
  3817  000B54  0100               	movlb	0	; () banked
  3818  000B56  6FB2               	movwf	begin@stuffpeek& (0+255),b
  3819  000B58  0E00               	movlw	0
  3820  000B5A  0100               	movlb	0	; () banked
  3821  000B5C  6FB3               	movwf	(begin@stuffpeek+1)& (0+255),b
  3822  000B5E  EC5F  F007         	call	_begin	;wreg free
  3823  000B62  0012               	return		;funcret
  3824  000B64                     __end_of_ComStart:
  3825                           	opt stack 0
  3826                           tblptru	equ	0xFF8
  3827                           tblptrh	equ	0xFF7
  3828                           tblptrl	equ	0xFF6
  3829                           tablat	equ	0xFF5
  3830                           intcon	equ	0xFF2
  3831                           postinc0	equ	0xFEE
  3832                           wreg	equ	0xFE8
  3833                           indf1	equ	0xFE7
  3834                           postdec1	equ	0xFE5
  3835                           fsr1h	equ	0xFE2
  3836                           fsr1l	equ	0xFE1
  3837                           indf2	equ	0xFDF
  3838                           postinc2	equ	0xFDE
  3839                           postdec2	equ	0xFDD
  3840                           plusw2	equ	0xFDB
  3841                           fsr2h	equ	0xFDA
  3842                           fsr2l	equ	0xFD9
  3843                           status	equ	0xFD8
  3844                           
  3845 ;; *************** function _begin *****************
  3846 ;; Defined at:
  3847 ;;		line 76 in file "FastTransfer.c"
  3848 ;; Parameters:    Size  Location     Type
  3849 ;;  ptr             2    0[BANK0 ] PTR volatile int 
  3850 ;;		 -> receiveArray(10), 
  3851 ;;  maxSize         1    2[BANK0 ] unsigned char 
  3852 ;;  givenAddress    1    3[BANK0 ] unsigned char 
  3853 ;;  error           1    4[BANK0 ] unsigned char 
  3854 ;;  stufftosend     2    5[BANK0 ] PTR FTN(unsigned char ,)
  3855 ;;		 -> Send_put(1), 
  3856 ;;  stufftorecei    2    7[BANK0 ] PTR FTN()unsigned char 
  3857 ;;		 -> Receive_get(1), 
  3858 ;;  stuffavailab    2    9[BANK0 ] PTR FTN()int 
  3859 ;;		 -> Receive_available(2), 
  3860 ;;  stuffpeek       2   11[BANK0 ] PTR FTN()unsigned char 
  3861 ;;		 -> Receive_peek(1), 
  3862 ;; Auto vars:     Size  Location     Type
  3863 ;;		None
  3864 ;; Return value:  Size  Location     Type
  3865 ;;                  1    wreg      void 
  3866 ;; Registers used:
  3867 ;;		None
  3868 ;; Tracked objects:
  3869 ;;		On entry : 0/0
  3870 ;;		On exit  : 0/0
  3871 ;;		Unchanged: 0/0
  3872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3873 ;;      Params:         0      13       0       0       0       0       0
  3874 ;;      Locals:         0       0       0       0       0       0       0
  3875 ;;      Temps:          0       0       0       0       0       0       0
  3876 ;;      Totals:         0      13       0       0       0       0       0
  3877 ;;Total ram usage:       13 bytes
  3878 ;; Hardware stack levels used:    1
  3879 ;; Hardware stack levels required when called:    4
  3880 ;; This function calls:
  3881 ;;		Nothing
  3882 ;; This function is called by:
  3883 ;;		_ComStart
  3884 ;; This function uses a non-reentrant model
  3885 ;;
  3886                           
  3887                           	psect	text22
  3888  000EBE                     __ptext22:
  3889                           	opt stack 0
  3890  000EBE                     _begin:
  3891                           	opt stack 24
  3892                           
  3893                           ;incstack = 0
  3894  000EBE  0012               	return		;funcret
  3895  000EC0                     __end_of_begin:
  3896                           	opt stack 0
  3897                           tblptru	equ	0xFF8
  3898                           tblptrh	equ	0xFF7
  3899                           tblptrl	equ	0xFF6
  3900                           tablat	equ	0xFF5
  3901                           intcon	equ	0xFF2
  3902                           postinc0	equ	0xFEE
  3903                           wreg	equ	0xFE8
  3904                           indf1	equ	0xFE7
  3905                           postdec1	equ	0xFE5
  3906                           fsr1h	equ	0xFE2
  3907                           fsr1l	equ	0xFE1
  3908                           indf2	equ	0xFDF
  3909                           postinc2	equ	0xFDE
  3910                           postdec2	equ	0xFDD
  3911                           plusw2	equ	0xFDB
  3912                           fsr2h	equ	0xFDA
  3913                           fsr2l	equ	0xFD9
  3914                           status	equ	0xFD8
  3915                           
  3916 ;; *************** function _EUSART1_Initialize *****************
  3917 ;; Defined at:
  3918 ;;		line 20 in file "UART.c"
  3919 ;; Parameters:    Size  Location     Type
  3920 ;;		None
  3921 ;; Auto vars:     Size  Location     Type
  3922 ;;		None
  3923 ;; Return value:  Size  Location     Type
  3924 ;;                  1    wreg      void 
  3925 ;; Registers used:
  3926 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3927 ;; Tracked objects:
  3928 ;;		On entry : 0/0
  3929 ;;		On exit  : 0/0
  3930 ;;		Unchanged: 0/0
  3931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3932 ;;      Params:         0       0       0       0       0       0       0
  3933 ;;      Locals:         0       0       0       0       0       0       0
  3934 ;;      Temps:          0       0       0       0       0       0       0
  3935 ;;      Totals:         0       0       0       0       0       0       0
  3936 ;;Total ram usage:        0 bytes
  3937 ;; Hardware stack levels used:    1
  3938 ;; Hardware stack levels required when called:    6
  3939 ;; This function calls:
  3940 ;;		_UART_buff_init
  3941 ;; This function is called by:
  3942 ;;		_ComStart
  3943 ;; This function uses a non-reentrant model
  3944 ;;
  3945                           
  3946                           	psect	text23
  3947  000C04                     __ptext23:
  3948                           	opt stack 0
  3949  000C04                     _EUSART1_Initialize:
  3950                           	opt stack 22
  3951                           
  3952                           ;UART.c: 22: PIE1bits.RC1IE = 0;
  3953                           
  3954                           ;incstack = 0
  3955  000C04  9A9D               	bcf	3997,5,c	;volatile
  3956                           
  3957                           ;UART.c: 23: PIE1bits.TX1IE = 0;
  3958  000C06  989D               	bcf	3997,4,c	;volatile
  3959                           
  3960                           ;UART.c: 28: BAUD1CON = 0x48;
  3961  000C08  0E48               	movlw	72
  3962  000C0A  6EB8               	movwf	4024,c	;volatile
  3963                           
  3964                           ;UART.c: 31: RC1STA = 0x98;
  3965  000C0C  0E98               	movlw	152
  3966  000C0E  6EAB               	movwf	4011,c	;volatile
  3967                           
  3968                           ;UART.c: 34: TX1STA = 0x26;
  3969  000C10  0E26               	movlw	38
  3970  000C12  6EAC               	movwf	4012,c	;volatile
  3971                           
  3972                           ;UART.c: 37: SPBRG1 = (((16000000/38400)/4)-1);
  3973  000C14  0E67               	movlw	103
  3974  000C16  6EAF               	movwf	4015,c	;volatile
  3975                           
  3976                           ;UART.c: 40: SPBRGH1 = 0x00;
  3977  000C18  0E00               	movlw	0
  3978  000C1A  6EB0               	movwf	4016,c	;volatile
  3979                           
  3980                           ;UART.c: 43: TXREG1 = 0x00;
  3981  000C1C  0E00               	movlw	0
  3982  000C1E  6EAD               	movwf	4013,c	;volatile
  3983                           
  3984                           ;UART.c: 46: RCREG1 = 0x00;
  3985  000C20  0E00               	movlw	0
  3986  000C22  6EAE               	movwf	4014,c	;volatile
  3987                           
  3988                           ;UART.c: 48: UART_buff_init(&input_buffer);
  3989  000C24  0E00               	movlw	low _input_buffer
  3990  000C26  6E23               	movwf	UART_buff_init@_this,c
  3991  000C28  0E01               	movlw	high _input_buffer
  3992  000C2A  6E24               	movwf	UART_buff_init@_this+1,c
  3993  000C2C  ECD5  F006         	call	_UART_buff_init	;wreg free
  3994                           
  3995                           ;UART.c: 49: UART_buff_init(&output_buffer);
  3996  000C30  0E00               	movlw	low _output_buffer
  3997  000C32  6E23               	movwf	UART_buff_init@_this,c
  3998  000C34  0E02               	movlw	high _output_buffer
  3999  000C36  6E24               	movwf	UART_buff_init@_this+1,c
  4000  000C38  ECD5  F006         	call	_UART_buff_init	;wreg free
  4001                           
  4002                           ;UART.c: 51: PIE1bits.RC1IE = 1;
  4003  000C3C  8A9D               	bsf	3997,5,c	;volatile
  4004  000C3E  0012               	return		;funcret
  4005  000C40                     __end_of_EUSART1_Initialize:
  4006                           	opt stack 0
  4007                           tblptru	equ	0xFF8
  4008                           tblptrh	equ	0xFF7
  4009                           tblptrl	equ	0xFF6
  4010                           tablat	equ	0xFF5
  4011                           intcon	equ	0xFF2
  4012                           postinc0	equ	0xFEE
  4013                           wreg	equ	0xFE8
  4014                           indf1	equ	0xFE7
  4015                           postdec1	equ	0xFE5
  4016                           fsr1h	equ	0xFE2
  4017                           fsr1l	equ	0xFE1
  4018                           indf2	equ	0xFDF
  4019                           postinc2	equ	0xFDE
  4020                           postdec2	equ	0xFDD
  4021                           plusw2	equ	0xFDB
  4022                           fsr2h	equ	0xFDA
  4023                           fsr2l	equ	0xFD9
  4024                           status	equ	0xFD8
  4025                           
  4026 ;; *************** function _UART_buff_init *****************
  4027 ;; Defined at:
  4028 ;;		line 55 in file "UART.c"
  4029 ;; Parameters:    Size  Location     Type
  4030 ;;  _this           2   34[COMRAM] PTR struct UART_ring_buf
  4031 ;;		 -> output_buffer(206), input_buffer(206), 
  4032 ;; Auto vars:     Size  Location     Type
  4033 ;;		None
  4034 ;; Return value:  Size  Location     Type
  4035 ;;                  1    wreg      void 
  4036 ;; Registers used:
  4037 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4038 ;; Tracked objects:
  4039 ;;		On entry : 0/0
  4040 ;;		On exit  : 0/0
  4041 ;;		Unchanged: 0/0
  4042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4043 ;;      Params:         2       0       0       0       0       0       0
  4044 ;;      Locals:         0       0       0       0       0       0       0
  4045 ;;      Temps:          0       0       0       0       0       0       0
  4046 ;;      Totals:         2       0       0       0       0       0       0
  4047 ;;Total ram usage:        2 bytes
  4048 ;; Hardware stack levels used:    1
  4049 ;; Hardware stack levels required when called:    5
  4050 ;; This function calls:
  4051 ;;		_memset
  4052 ;; This function is called by:
  4053 ;;		_EUSART1_Initialize
  4054 ;; This function uses a non-reentrant model
  4055 ;;
  4056                           
  4057                           	psect	text24
  4058  000DAA                     __ptext24:
  4059                           	opt stack 0
  4060  000DAA                     _UART_buff_init:
  4061                           	opt stack 22
  4062                           
  4063                           ;UART.c: 64: memset(_this, 0, sizeof (*_this));
  4064                           
  4065                           ;incstack = 0
  4066  000DAA  C023  F01B         	movff	UART_buff_init@_this,memset@p1
  4067  000DAE  C024  F01C         	movff	UART_buff_init@_this+1,memset@p1+1
  4068  000DB2  0E00               	movlw	0
  4069  000DB4  6E1E               	movwf	memset@c+1,c
  4070  000DB6  0E00               	movlw	0
  4071  000DB8  6E1D               	movwf	memset@c,c
  4072  000DBA  0E00               	movlw	0
  4073  000DBC  6E20               	movwf	memset@n+1,c
  4074  000DBE  0ECE               	movlw	206
  4075  000DC0  6E1F               	movwf	memset@n,c
  4076  000DC2  EC86  F006         	call	_memset	;wreg free
  4077  000DC6  0012               	return		;funcret
  4078  000DC8                     __end_of_UART_buff_init:
  4079                           	opt stack 0
  4080                           tblptru	equ	0xFF8
  4081                           tblptrh	equ	0xFF7
  4082                           tblptrl	equ	0xFF6
  4083                           tablat	equ	0xFF5
  4084                           intcon	equ	0xFF2
  4085                           postinc0	equ	0xFEE
  4086                           wreg	equ	0xFE8
  4087                           indf1	equ	0xFE7
  4088                           postdec1	equ	0xFE5
  4089                           fsr1h	equ	0xFE2
  4090                           fsr1l	equ	0xFE1
  4091                           indf2	equ	0xFDF
  4092                           postinc2	equ	0xFDE
  4093                           postdec2	equ	0xFDD
  4094                           plusw2	equ	0xFDB
  4095                           fsr2h	equ	0xFDA
  4096                           fsr2l	equ	0xFD9
  4097                           status	equ	0xFD8
  4098                           
  4099 ;; *************** function _memset *****************
  4100 ;; Defined at:
  4101 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\memset.c"
  4102 ;; Parameters:    Size  Location     Type
  4103 ;;  p1              2   26[COMRAM] PTR void 
  4104 ;;		 -> output_buffer(206), input_buffer(206), 
  4105 ;;  c               2   28[COMRAM] int 
  4106 ;;  n               2   30[COMRAM] unsigned int 
  4107 ;; Auto vars:     Size  Location     Type
  4108 ;;  p               2   32[COMRAM] PTR unsigned char 
  4109 ;;		 -> output_buffer(206), input_buffer(206), 
  4110 ;; Return value:  Size  Location     Type
  4111 ;;                  2   26[COMRAM] PTR void 
  4112 ;; Registers used:
  4113 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4114 ;; Tracked objects:
  4115 ;;		On entry : 0/0
  4116 ;;		On exit  : 0/0
  4117 ;;		Unchanged: 0/0
  4118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4119 ;;      Params:         6       0       0       0       0       0       0
  4120 ;;      Locals:         2       0       0       0       0       0       0
  4121 ;;      Temps:          0       0       0       0       0       0       0
  4122 ;;      Totals:         8       0       0       0       0       0       0
  4123 ;;Total ram usage:        8 bytes
  4124 ;; Hardware stack levels used:    1
  4125 ;; Hardware stack levels required when called:    4
  4126 ;; This function calls:
  4127 ;;		Nothing
  4128 ;; This function is called by:
  4129 ;;		_UART_buff_init
  4130 ;;		_FastTransfer_buffer_flush
  4131 ;;		_UART_buff_flush
  4132 ;; This function uses a non-reentrant model
  4133 ;;
  4134                           
  4135                           	psect	text25
  4136  000D0C                     __ptext25:
  4137                           	opt stack 0
  4138  000D0C                     _memset:
  4139                           	opt stack 22
  4140                           
  4141                           ;incstack = 0
  4142  000D0C  C01B  F021         	movff	memset@p1,memset@p
  4143  000D10  C01C  F022         	movff	memset@p1+1,memset@p+1
  4144  000D14  D008               	goto	l1764
  4145  000D16                     l1760:
  4146  000D16  C021  FFD9         	movff	memset@p,fsr2l
  4147  000D1A  C022  FFDA         	movff	memset@p+1,fsr2h
  4148  000D1E  C01D  FFDF         	movff	memset@c,indf2
  4149  000D22  4A21               	infsnz	memset@p,f,c
  4150  000D24  2A22               	incf	memset@p+1,f,c
  4151  000D26                     l1764:
  4152  000D26  061F               	decf	memset@n,f,c
  4153  000D28  A0D8               	btfss	status,0,c
  4154  000D2A  0620               	decf	memset@n+1,f,c
  4155  000D2C  281F               	incf	memset@n,w,c
  4156  000D2E  E1F3               	bnz	l1760
  4157  000D30  2820               	incf	memset@n+1,w,c
  4158  000D32  B4D8               	btfsc	status,2,c
  4159  000D34  0012               	return	
  4160  000D36  D7EF               	goto	l1760
  4161  000D38                     __end_of_memset:
  4162                           	opt stack 0
  4163                           tblptru	equ	0xFF8
  4164                           tblptrh	equ	0xFF7
  4165                           tblptrl	equ	0xFF6
  4166                           tablat	equ	0xFF5
  4167                           intcon	equ	0xFF2
  4168                           postinc0	equ	0xFEE
  4169                           wreg	equ	0xFE8
  4170                           indf1	equ	0xFE7
  4171                           postdec1	equ	0xFE5
  4172                           fsr1h	equ	0xFE2
  4173                           fsr1l	equ	0xFE1
  4174                           indf2	equ	0xFDF
  4175                           postinc2	equ	0xFDE
  4176                           postdec2	equ	0xFDD
  4177                           plusw2	equ	0xFDB
  4178                           fsr2h	equ	0xFDA
  4179                           fsr2l	equ	0xFD9
  4180                           status	equ	0xFD8
  4181                           
  4182 ;; *************** function _SetTime *****************
  4183 ;; Defined at:
  4184 ;;		line 97 in file "tmr0.c"
  4185 ;; Parameters:    Size  Location     Type
  4186 ;;		None
  4187 ;; Auto vars:     Size  Location     Type
  4188 ;;		None
  4189 ;; Return value:  Size  Location     Type
  4190 ;;                  1    wreg      void 
  4191 ;; Registers used:
  4192 ;;		wreg, status,2
  4193 ;; Tracked objects:
  4194 ;;		On entry : 0/0
  4195 ;;		On exit  : 0/0
  4196 ;;		Unchanged: 0/0
  4197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4198 ;;      Params:         0       0       0       0       0       0       0
  4199 ;;      Locals:         0       0       0       0       0       0       0
  4200 ;;      Temps:          0       0       0       0       0       0       0
  4201 ;;      Totals:         0       0       0       0       0       0       0
  4202 ;;Total ram usage:        0 bytes
  4203 ;; Hardware stack levels used:    1
  4204 ;; Hardware stack levels required when called:    4
  4205 ;; This function calls:
  4206 ;;		Nothing
  4207 ;; This function is called by:
  4208 ;;		_main
  4209 ;; This function uses a non-reentrant model
  4210 ;;
  4211                           
  4212                           	psect	text26
  4213  000E84                     __ptext26:
  4214                           	opt stack 0
  4215  000E84                     _SetTime:
  4216                           	opt stack 26
  4217                           
  4218                           ;tmr0.c: 98: time = 0;
  4219                           
  4220                           ;incstack = 0
  4221  000E84  0E00               	movlw	0
  4222  000E86  0100               	movlb	0	; () banked
  4223  000E88  6F60               	movwf	_time& (0+255),b
  4224  000E8A  0E00               	movlw	0
  4225  000E8C  6F61               	movwf	(_time+1)& (0+255),b
  4226  000E8E  0E00               	movlw	0
  4227  000E90  6F62               	movwf	(_time+2)& (0+255),b
  4228  000E92  0E00               	movlw	0
  4229  000E94  6F63               	movwf	(_time+3)& (0+255),b
  4230                           
  4231                           ; BSR set to: 0
  4232  000E96  0012               	return		;funcret
  4233  000E98                     __end_of_SetTime:
  4234                           	opt stack 0
  4235                           tblptru	equ	0xFF8
  4236                           tblptrh	equ	0xFF7
  4237                           tblptrl	equ	0xFF6
  4238                           tablat	equ	0xFF5
  4239                           intcon	equ	0xFF2
  4240                           postinc0	equ	0xFEE
  4241                           wreg	equ	0xFE8
  4242                           indf1	equ	0xFE7
  4243                           postdec1	equ	0xFE5
  4244                           fsr1h	equ	0xFE2
  4245                           fsr1l	equ	0xFE1
  4246                           indf2	equ	0xFDF
  4247                           postinc2	equ	0xFDE
  4248                           postdec2	equ	0xFDD
  4249                           plusw2	equ	0xFDB
  4250                           fsr2h	equ	0xFDA
  4251                           fsr2l	equ	0xFD9
  4252                           status	equ	0xFD8
  4253                           
  4254 ;; *************** function _ReadFaults *****************
  4255 ;; Defined at:
  4256 ;;		line 11 in file "Function.c"
  4257 ;; Parameters:    Size  Location     Type
  4258 ;;		None
  4259 ;; Auto vars:     Size  Location     Type
  4260 ;;		None
  4261 ;; Return value:  Size  Location     Type
  4262 ;;                  1    wreg      void 
  4263 ;; Registers used:
  4264 ;;		wreg, status,2, status,0
  4265 ;; Tracked objects:
  4266 ;;		On entry : 0/0
  4267 ;;		On exit  : 0/0
  4268 ;;		Unchanged: 0/0
  4269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4270 ;;      Params:         0       0       0       0       0       0       0
  4271 ;;      Locals:         0       0       0       0       0       0       0
  4272 ;;      Temps:          1       0       0       0       0       0       0
  4273 ;;      Totals:         1       0       0       0       0       0       0
  4274 ;;Total ram usage:        1 bytes
  4275 ;; Hardware stack levels used:    1
  4276 ;; Hardware stack levels required when called:    4
  4277 ;; This function calls:
  4278 ;;		Nothing
  4279 ;; This function is called by:
  4280 ;;		_main
  4281 ;; This function uses a non-reentrant model
  4282 ;;
  4283                           
  4284                           	psect	text27
  4285  000884                     __ptext27:
  4286                           	opt stack 0
  4287  000884                     _ReadFaults:
  4288                           	opt stack 26
  4289                           
  4290                           ;Function.c: 13: ByteHigh = ByteHigh | ((PORTCbits.RC2 & 0x01) << 0);
  4291                           
  4292                           ; BSR set to: 0
  4293                           ;incstack = 0
  4294  000884  A482               	btfss	3970,2,c	;volatile
  4295  000886  D002               	goto	u480
  4296  000888  0E01               	movlw	1
  4297  00088A  D001               	goto	u486
  4298  00088C                     u480:
  4299  00088C  0E00               	movlw	0
  4300  00088E                     u486:
  4301  00088E  103B               	iorwf	_ByteHigh,w,c
  4302  000890  6E3B               	movwf	_ByteHigh,c
  4303                           
  4304                           ;Function.c: 14: ByteHigh = ByteHigh | ((PORTCbits.RC4 & 0x01) << 1);
  4305  000892  A882               	btfss	3970,4,c	;volatile
  4306  000894  D003               	goto	u490
  4307  000896  6A1B               	clrf	??_ReadFaults& (0+255),c
  4308  000898  2A1B               	incf	??_ReadFaults& (0+255),f,c
  4309  00089A  D001               	goto	u498
  4310  00089C                     u490:
  4311  00089C  6A1B               	clrf	??_ReadFaults& (0+255),c
  4312  00089E                     u498:
  4313  00089E  90D8               	bcf	status,0,c
  4314  0008A0  341B               	rlcf	??_ReadFaults,w,c
  4315  0008A2  103B               	iorwf	_ByteHigh,w,c
  4316  0008A4  6E3B               	movwf	_ByteHigh,c
  4317                           
  4318                           ;Function.c: 15: ByteHigh = ByteHigh | ((PORTDbits.RD3 & 0x01) << 2);
  4319  0008A6  A683               	btfss	3971,3,c	;volatile
  4320  0008A8  D003               	goto	u500
  4321  0008AA  6A1B               	clrf	??_ReadFaults& (0+255),c
  4322  0008AC  2A1B               	incf	??_ReadFaults& (0+255),f,c
  4323  0008AE  D001               	goto	u508
  4324  0008B0                     u500:
  4325  0008B0  6A1B               	clrf	??_ReadFaults& (0+255),c
  4326  0008B2                     u508:
  4327  0008B2  90D8               	bcf	status,0,c
  4328  0008B4  361B               	rlcf	??_ReadFaults,f,c
  4329  0008B6  90D8               	bcf	status,0,c
  4330  0008B8  341B               	rlcf	??_ReadFaults,w,c
  4331  0008BA  103B               	iorwf	_ByteHigh,w,c
  4332  0008BC  6E3B               	movwf	_ByteHigh,c
  4333                           
  4334                           ;Function.c: 16: ByteHigh = ByteHigh | ((PORTDbits.RD2 & 0x01) << 3);
  4335  0008BE  A483               	btfss	3971,2,c	;volatile
  4336  0008C0  D003               	goto	u510
  4337  0008C2  6A1B               	clrf	??_ReadFaults& (0+255),c
  4338  0008C4  2A1B               	incf	??_ReadFaults& (0+255),f,c
  4339  0008C6  D001               	goto	u518
  4340  0008C8                     u510:
  4341  0008C8  6A1B               	clrf	??_ReadFaults& (0+255),c
  4342  0008CA                     u518:
  4343  0008CA  90D8               	bcf	status,0,c
  4344  0008CC  361B               	rlcf	??_ReadFaults,f,c
  4345  0008CE  90D8               	bcf	status,0,c
  4346  0008D0  361B               	rlcf	??_ReadFaults,f,c
  4347  0008D2  90D8               	bcf	status,0,c
  4348  0008D4  341B               	rlcf	??_ReadFaults,w,c
  4349  0008D6  103B               	iorwf	_ByteHigh,w,c
  4350  0008D8  6E3B               	movwf	_ByteHigh,c
  4351                           
  4352                           ;Function.c: 17: ByteHigh = ByteHigh | ((PORTDbits.RD1 & 0x01) << 4);
  4353  0008DA  A283               	btfss	3971,1,c	;volatile
  4354  0008DC  D003               	goto	u520
  4355  0008DE  6A1B               	clrf	??_ReadFaults& (0+255),c
  4356  0008E0  2A1B               	incf	??_ReadFaults& (0+255),f,c
  4357  0008E2  D001               	goto	u528
  4358  0008E4                     u520:
  4359  0008E4  6A1B               	clrf	??_ReadFaults& (0+255),c
  4360  0008E6                     u528:
  4361  0008E6  381B               	swapf	??_ReadFaults,w,c
  4362  0008E8  0BF0               	andlw	240
  4363  0008EA  103B               	iorwf	_ByteHigh,w,c
  4364  0008EC  6E3B               	movwf	_ByteHigh,c
  4365                           
  4366                           ;Function.c: 18: ByteHigh = ByteHigh | ((PORTDbits.RD0 & 0x01) << 5);
  4367  0008EE  A083               	btfss	3971,0,c	;volatile
  4368  0008F0  D003               	goto	u530
  4369  0008F2  0E20               	movlw	32
  4370  0008F4  6E1B               	movwf	??_ReadFaults& (0+255),c
  4371  0008F6  D001               	goto	u545
  4372  0008F8                     u530:
  4373  0008F8  6A1B               	clrf	??_ReadFaults& (0+255),c
  4374  0008FA                     u545:
  4375  0008FA  501B               	movf	??_ReadFaults,w,c
  4376  0008FC  103B               	iorwf	_ByteHigh,w,c
  4377  0008FE  6E3B               	movwf	_ByteHigh,c
  4378                           
  4379                           ;Function.c: 19: ByteHigh = ByteHigh | ((PORTCbits.RC3 & 0x01) << 6);
  4380  000900  A682               	btfss	3970,3,c	;volatile
  4381  000902  D003               	goto	u550
  4382  000904  0E40               	movlw	64
  4383  000906  6E1B               	movwf	??_ReadFaults& (0+255),c
  4384  000908  D001               	goto	u565
  4385  00090A                     u550:
  4386  00090A  6A1B               	clrf	??_ReadFaults& (0+255),c
  4387  00090C                     u565:
  4388  00090C  501B               	movf	??_ReadFaults,w,c
  4389  00090E  103B               	iorwf	_ByteHigh,w,c
  4390  000910  6E3B               	movwf	_ByteHigh,c
  4391                           
  4392                           ;Function.c: 20: ByteHigh = ByteHigh | ((PORTCbits.RC5 & 0x01) << 7);
  4393  000912  AA82               	btfss	3970,5,c	;volatile
  4394  000914  D003               	goto	u570
  4395  000916  0E80               	movlw	128
  4396  000918  6E1B               	movwf	??_ReadFaults& (0+255),c
  4397  00091A  D001               	goto	u585
  4398  00091C                     u570:
  4399  00091C  6A1B               	clrf	??_ReadFaults& (0+255),c
  4400  00091E                     u585:
  4401  00091E  501B               	movf	??_ReadFaults,w,c
  4402  000920  103B               	iorwf	_ByteHigh,w,c
  4403  000922  6E3B               	movwf	_ByteHigh,c
  4404                           
  4405                           ;Function.c: 21: ByteLow = ByteLow | ((PORTCbits.RC2 & 0x01) << 0);
  4406  000924  A482               	btfss	3970,2,c	;volatile
  4407  000926  D002               	goto	u590
  4408  000928  0E01               	movlw	1
  4409  00092A  D001               	goto	u596
  4410  00092C                     u590:
  4411  00092C  0E00               	movlw	0
  4412  00092E                     u596:
  4413  00092E  103A               	iorwf	_ByteLow,w,c
  4414  000930  6E3A               	movwf	_ByteLow,c
  4415                           
  4416                           ;Function.c: 22: ByteLow = ByteLow | ((PORTAbits.RA7 & 0x01) << 1);
  4417  000932  AE80               	btfss	3968,7,c	;volatile
  4418  000934  D003               	goto	u600
  4419  000936  6A1B               	clrf	??_ReadFaults& (0+255),c
  4420  000938  2A1B               	incf	??_ReadFaults& (0+255),f,c
  4421  00093A  D001               	goto	u608
  4422  00093C                     u600:
  4423  00093C  6A1B               	clrf	??_ReadFaults& (0+255),c
  4424  00093E                     u608:
  4425  00093E  90D8               	bcf	status,0,c
  4426  000940  341B               	rlcf	??_ReadFaults,w,c
  4427  000942  103A               	iorwf	_ByteLow,w,c
  4428  000944  6E3A               	movwf	_ByteLow,c
  4429                           
  4430                           ;Function.c: 23: ByteLow = ByteLow | ((PORTCbits.RC0 & 0x01) << 2);
  4431  000946  A082               	btfss	3970,0,c	;volatile
  4432  000948  D003               	goto	u610
  4433  00094A  6A1B               	clrf	??_ReadFaults& (0+255),c
  4434  00094C  2A1B               	incf	??_ReadFaults& (0+255),f,c
  4435  00094E  D001               	goto	u618
  4436  000950                     u610:
  4437  000950  6A1B               	clrf	??_ReadFaults& (0+255),c
  4438  000952                     u618:
  4439  000952  90D8               	bcf	status,0,c
  4440  000954  361B               	rlcf	??_ReadFaults,f,c
  4441  000956  90D8               	bcf	status,0,c
  4442  000958  341B               	rlcf	??_ReadFaults,w,c
  4443  00095A  103A               	iorwf	_ByteLow,w,c
  4444  00095C  6E3A               	movwf	_ByteLow,c
  4445  00095E  0012               	return		;funcret
  4446  000960                     __end_of_ReadFaults:
  4447                           	opt stack 0
  4448                           tblptru	equ	0xFF8
  4449                           tblptrh	equ	0xFF7
  4450                           tblptrl	equ	0xFF6
  4451                           tablat	equ	0xFF5
  4452                           intcon	equ	0xFF2
  4453                           postinc0	equ	0xFEE
  4454                           wreg	equ	0xFE8
  4455                           indf1	equ	0xFE7
  4456                           postdec1	equ	0xFE5
  4457                           fsr1h	equ	0xFE2
  4458                           fsr1l	equ	0xFE1
  4459                           indf2	equ	0xFDF
  4460                           postinc2	equ	0xFDE
  4461                           postdec2	equ	0xFDD
  4462                           plusw2	equ	0xFDB
  4463                           fsr2h	equ	0xFDA
  4464                           fsr2l	equ	0xFD9
  4465                           status	equ	0xFD8
  4466                           
  4467 ;; *************** function _INTERRUPT_InterruptManager *****************
  4468 ;; Defined at:
  4469 ;;		line 182 in file "Function.c"
  4470 ;; Parameters:    Size  Location     Type
  4471 ;;		None
  4472 ;; Auto vars:     Size  Location     Type
  4473 ;;		None
  4474 ;; Return value:  Size  Location     Type
  4475 ;;                  1    wreg      void 
  4476 ;; Registers used:
  4477 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4478 ;; Tracked objects:
  4479 ;;		On entry : 0/0
  4480 ;;		On exit  : 0/0
  4481 ;;		Unchanged: 0/0
  4482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4483 ;;      Params:         0       0       0       0       0       0       0
  4484 ;;      Locals:         0       0       0       0       0       0       0
  4485 ;;      Temps:         14       0       0       0       0       0       0
  4486 ;;      Totals:        14       0       0       0       0       0       0
  4487 ;;Total ram usage:       14 bytes
  4488 ;; Hardware stack levels used:    1
  4489 ;; Hardware stack levels required when called:    3
  4490 ;; This function calls:
  4491 ;;		_EUSART1_Receive_ISR
  4492 ;;		_EUSART1_Transmit_ISR
  4493 ;;		_TMR0_ISR
  4494 ;; This function is called by:
  4495 ;;		Interrupt level 2
  4496 ;; This function uses a non-reentrant model
  4497 ;;
  4498                           
  4499                           	psect	intcode
  4500  000008                     __pintcode:
  4501                           	opt stack 0
  4502  000008                     _INTERRUPT_InterruptManager:
  4503                           	opt stack 21
  4504                           
  4505                           ;incstack = 0
  4506  000008  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4507  00000A  CFFA F00D          	movff	pclath,??_INTERRUPT_InterruptManager
  4508  00000E  CFFB F00E          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  4509  000012  CFE9 F00F          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  4510  000016  CFEA F010          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  4511  00001A  CFE1 F011          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  4512  00001E  CFE2 F012          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  4513  000022  CFD9 F013          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  4514  000026  CFDA F014          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  4515  00002A  CFF3 F015          	movff	prodl,??_INTERRUPT_InterruptManager+8
  4516  00002E  CFF4 F016          	movff	prodh,??_INTERRUPT_InterruptManager+9
  4517  000032  CFF6 F017          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  4518  000036  CFF7 F018          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  4519  00003A  CFF8 F019          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  4520  00003E  CFF5 F01A          	movff	tablat,??_INTERRUPT_InterruptManager+13
  4521                           
  4522                           ;Function.c: 185: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  4523  000042  BA9D               	btfsc	3997,5,c	;volatile
  4524  000044  AA9E               	btfss	3998,5,c	;volatile
  4525  000046  D003               	goto	i2l447
  4526                           
  4527                           ;Function.c: 186: {
  4528                           ;Function.c: 187: EUSART1_Receive_ISR();
  4529  000048  ECE4  F006         	call	_EUSART1_Receive_ISR	;wreg free
  4530                           
  4531                           ;Function.c: 188: }
  4532  00004C  D00B               	goto	i2l453
  4533  00004E                     i2l447:
  4534                           
  4535                           ;Function.c: 189: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  4536  00004E  B89D               	btfsc	3997,4,c	;volatile
  4537  000050  A89E               	btfss	3998,4,c	;volatile
  4538  000052  D003               	goto	i2l449
  4539                           
  4540                           ;Function.c: 190: {
  4541                           ;Function.c: 191: EUSART1_Transmit_ISR();
  4542  000054  EC55  F006         	call	_EUSART1_Transmit_ISR	;wreg free
  4543                           
  4544                           ;Function.c: 192: }
  4545  000058  D005               	goto	i2l453
  4546  00005A                     i2l449:
  4547                           
  4548                           ;Function.c: 193: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  4549  00005A  BAF2               	btfsc	intcon,5,c	;volatile
  4550  00005C  A4F2               	btfss	intcon,2,c	;volatile
  4551  00005E  D002               	goto	i2l453
  4552                           
  4553                           ;Function.c: 194: {
  4554                           ;Function.c: 195: TMR0_ISR();
  4555  000060  ECF3  F006         	call	_TMR0_ISR	;wreg free
  4556  000064                     i2l453:
  4557  000064  C01A  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  4558  000068  C019  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  4559  00006C  C018  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  4560  000070  C017  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  4561  000074  C016  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  4562  000078  C015  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  4563  00007C  C014  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  4564  000080  C013  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  4565  000084  C012  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  4566  000088  C011  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  4567  00008C  C010  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  4568  000090  C00F  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  4569  000094  C00E  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  4570  000098  C00D  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  4571  00009C  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4572  00009E  0011               	retfie		f
  4573  0000A0                     __end_of_INTERRUPT_InterruptManager:
  4574                           	opt stack 0
  4575                           pclatu	equ	0xFFB
  4576                           pclath	equ	0xFFA
  4577                           tblptru	equ	0xFF8
  4578                           tblptrh	equ	0xFF7
  4579                           tblptrl	equ	0xFF6
  4580                           tablat	equ	0xFF5
  4581                           prodh	equ	0xFF4
  4582                           prodl	equ	0xFF3
  4583                           intcon	equ	0xFF2
  4584                           postinc0	equ	0xFEE
  4585                           fsr0h	equ	0xFEA
  4586                           fsr0l	equ	0xFE9
  4587                           wreg	equ	0xFE8
  4588                           indf1	equ	0xFE7
  4589                           postdec1	equ	0xFE5
  4590                           fsr1h	equ	0xFE2
  4591                           fsr1l	equ	0xFE1
  4592                           indf2	equ	0xFDF
  4593                           postinc2	equ	0xFDE
  4594                           postdec2	equ	0xFDD
  4595                           plusw2	equ	0xFDB
  4596                           fsr2h	equ	0xFDA
  4597                           fsr2l	equ	0xFD9
  4598                           status	equ	0xFD8
  4599                           
  4600 ;; *************** function _TMR0_ISR *****************
  4601 ;; Defined at:
  4602 ;;		line 82 in file "tmr0.c"
  4603 ;; Parameters:    Size  Location     Type
  4604 ;;		None
  4605 ;; Auto vars:     Size  Location     Type
  4606 ;;		None
  4607 ;; Return value:  Size  Location     Type
  4608 ;;                  1    wreg      void 
  4609 ;; Registers used:
  4610 ;;		wreg, status,2, status,0
  4611 ;; Tracked objects:
  4612 ;;		On entry : 0/0
  4613 ;;		On exit  : 0/0
  4614 ;;		Unchanged: 0/0
  4615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4616 ;;      Params:         0       0       0       0       0       0       0
  4617 ;;      Locals:         0       0       0       0       0       0       0
  4618 ;;      Temps:          0       0       0       0       0       0       0
  4619 ;;      Totals:         0       0       0       0       0       0       0
  4620 ;;Total ram usage:        0 bytes
  4621 ;; Hardware stack levels used:    1
  4622 ;; This function calls:
  4623 ;;		Nothing
  4624 ;; This function is called by:
  4625 ;;		_INTERRUPT_InterruptManager
  4626 ;; This function uses a non-reentrant model
  4627 ;;
  4628                           
  4629                           	psect	text29
  4630  000DE6                     __ptext29:
  4631                           	opt stack 0
  4632  000DE6                     _TMR0_ISR:
  4633                           	opt stack 23
  4634                           
  4635                           ;tmr0.c: 85: TMR0H = timer0ReloadVal16bit >> 8;
  4636                           
  4637                           ;incstack = 0
  4638  000DE6  5027               	movf	_timer0ReloadVal16bit+1,w,c	;volatile
  4639  000DE8  6ED7               	movwf	4055,c	;volatile
  4640                           
  4641                           ;tmr0.c: 86: TMR0L = (uint8_t) timer0ReloadVal16bit;
  4642  000DEA  C026  FFD6         	movff	_timer0ReloadVal16bit,4054	;volatile
  4643                           
  4644                           ;tmr0.c: 88: time++;
  4645  000DEE  0E01               	movlw	1
  4646  000DF0  0100               	movlb	0	; () banked
  4647  000DF2  2760               	addwf	_time& (0+255),f,b
  4648  000DF4  0E00               	movlw	0
  4649  000DF6  2361               	addwfc	(_time+1)& (0+255),f,b
  4650  000DF8  2362               	addwfc	(_time+2)& (0+255),f,b
  4651  000DFA  2363               	addwfc	(_time+3)& (0+255),f,b
  4652                           
  4653                           ; BSR set to: 0
  4654                           ;tmr0.c: 90: INTCONbits.TMR0IF = 0;
  4655  000DFC  94F2               	bcf	intcon,2,c	;volatile
  4656                           
  4657                           ; BSR set to: 0
  4658  000DFE  0012               	return		;funcret
  4659  000E00                     __end_of_TMR0_ISR:
  4660                           	opt stack 0
  4661                           pclatu	equ	0xFFB
  4662                           pclath	equ	0xFFA
  4663                           tblptru	equ	0xFF8
  4664                           tblptrh	equ	0xFF7
  4665                           tblptrl	equ	0xFF6
  4666                           tablat	equ	0xFF5
  4667                           prodh	equ	0xFF4
  4668                           prodl	equ	0xFF3
  4669                           intcon	equ	0xFF2
  4670                           postinc0	equ	0xFEE
  4671                           fsr0h	equ	0xFEA
  4672                           fsr0l	equ	0xFE9
  4673                           wreg	equ	0xFE8
  4674                           indf1	equ	0xFE7
  4675                           postdec1	equ	0xFE5
  4676                           fsr1h	equ	0xFE2
  4677                           fsr1l	equ	0xFE1
  4678                           indf2	equ	0xFDF
  4679                           postinc2	equ	0xFDE
  4680                           postdec2	equ	0xFDD
  4681                           plusw2	equ	0xFDB
  4682                           fsr2h	equ	0xFDA
  4683                           fsr2l	equ	0xFD9
  4684                           status	equ	0xFD8
  4685                           
  4686 ;; *************** function _EUSART1_Transmit_ISR *****************
  4687 ;; Defined at:
  4688 ;;		line 149 in file "UART.c"
  4689 ;; Parameters:    Size  Location     Type
  4690 ;;		None
  4691 ;; Auto vars:     Size  Location     Type
  4692 ;;		None
  4693 ;; Return value:  Size  Location     Type
  4694 ;;                  1    wreg      void 
  4695 ;; Registers used:
  4696 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4697 ;; Tracked objects:
  4698 ;;		On entry : 0/0
  4699 ;;		On exit  : 0/0
  4700 ;;		Unchanged: 0/0
  4701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4702 ;;      Params:         0       0       0       0       0       0       0
  4703 ;;      Locals:         0       0       0       0       0       0       0
  4704 ;;      Temps:          0       0       0       0       0       0       0
  4705 ;;      Totals:         0       0       0       0       0       0       0
  4706 ;;Total ram usage:        0 bytes
  4707 ;; Hardware stack levels used:    1
  4708 ;; Hardware stack levels required when called:    2
  4709 ;; This function calls:
  4710 ;;		i2_UART_buff_get
  4711 ;;		i2_UART_buff_size
  4712 ;; This function is called by:
  4713 ;;		_INTERRUPT_InterruptManager
  4714 ;; This function uses a non-reentrant model
  4715 ;;
  4716                           
  4717                           	psect	text30
  4718  000CAA                     __ptext30:
  4719                           	opt stack 0
  4720  000CAA                     _EUSART1_Transmit_ISR:
  4721                           	opt stack 21
  4722                           
  4723                           ;UART.c: 151: if (UART_buff_size(&output_buffer) > 0) {
  4724                           
  4725                           ; BSR set to: 0
  4726                           ;incstack = 0
  4727  000CAA  0E00               	movlw	low _output_buffer
  4728  000CAC  6E01               	movwf	i2UART_buff_size@_this,c
  4729  000CAE  0E02               	movlw	high _output_buffer
  4730  000CB0  6E02               	movwf	i2UART_buff_size@_this+1,c
  4731  000CB2  EC2D  F007         	call	i2_UART_buff_size	;wreg free
  4732  000CB6  BE02               	btfsc	?i2_UART_buff_size+1,7,c
  4733  000CB8  D00D               	goto	i2l2206
  4734  000CBA  5002               	movf	?i2_UART_buff_size+1,w,c
  4735  000CBC  E103               	bnz	i2u132_40
  4736  000CBE  0401               	decf	?i2_UART_buff_size,w,c
  4737  000CC0  A0D8               	btfss	status,0,c
  4738  000CC2  D008               	goto	i2l2206
  4739  000CC4                     i2u132_40:
  4740                           
  4741                           ;UART.c: 152: TXREG1 = UART_buff_get(&output_buffer);
  4742  000CC4  0E00               	movlw	low _output_buffer
  4743  000CC6  6E07               	movwf	i2UART_buff_get@_this,c
  4744  000CC8  0E02               	movlw	high _output_buffer
  4745  000CCA  6E08               	movwf	i2UART_buff_get@_this+1,c
  4746  000CCC  ECF9  F004         	call	i2_UART_buff_get	;wreg free
  4747  000CD0  6EAD               	movwf	4013,c	;volatile
  4748                           
  4749                           ;UART.c: 153: } else {
  4750  000CD2  0012               	return	
  4751  000CD4                     i2l2206:
  4752                           
  4753                           ;UART.c: 154: Transmit_stall = 1;
  4754  000CD4  0E01               	movlw	1
  4755  000CD6  6E44               	movwf	_Transmit_stall,c
  4756                           
  4757                           ;UART.c: 155: PIE1bits.TX1IE = 0;
  4758  000CD8  989D               	bcf	3997,4,c	;volatile
  4759  000CDA  0012               	return	
  4760  000CDC                     __end_of_EUSART1_Transmit_ISR:
  4761                           	opt stack 0
  4762                           pclatu	equ	0xFFB
  4763                           pclath	equ	0xFFA
  4764                           tblptru	equ	0xFF8
  4765                           tblptrh	equ	0xFF7
  4766                           tblptrl	equ	0xFF6
  4767                           tablat	equ	0xFF5
  4768                           prodh	equ	0xFF4
  4769                           prodl	equ	0xFF3
  4770                           intcon	equ	0xFF2
  4771                           postinc0	equ	0xFEE
  4772                           fsr0h	equ	0xFEA
  4773                           fsr0l	equ	0xFE9
  4774                           wreg	equ	0xFE8
  4775                           indf1	equ	0xFE7
  4776                           postdec1	equ	0xFE5
  4777                           fsr1h	equ	0xFE2
  4778                           fsr1l	equ	0xFE1
  4779                           indf2	equ	0xFDF
  4780                           postinc2	equ	0xFDE
  4781                           postdec2	equ	0xFDD
  4782                           plusw2	equ	0xFDB
  4783                           fsr2h	equ	0xFDA
  4784                           fsr2l	equ	0xFD9
  4785                           status	equ	0xFD8
  4786                           
  4787 ;; *************** function i2_UART_buff_size *****************
  4788 ;; Defined at:
  4789 ;;		line 101 in file "UART.c"
  4790 ;; Parameters:    Size  Location     Type
  4791 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
  4792 ;;		 -> output_buffer(206), input_buffer(206), 
  4793 ;; Auto vars:     Size  Location     Type
  4794 ;;		None
  4795 ;; Return value:  Size  Location     Type
  4796 ;;                  2    0[COMRAM] int 
  4797 ;; Registers used:
  4798 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4799 ;; Tracked objects:
  4800 ;;		On entry : 0/0
  4801 ;;		On exit  : 0/0
  4802 ;;		Unchanged: 0/0
  4803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4804 ;;      Params:         2       0       0       0       0       0       0
  4805 ;;      Locals:         0       0       0       0       0       0       0
  4806 ;;      Temps:          0       0       0       0       0       0       0
  4807 ;;      Totals:         2       0       0       0       0       0       0
  4808 ;;Total ram usage:        2 bytes
  4809 ;; Hardware stack levels used:    1
  4810 ;; This function calls:
  4811 ;;		Nothing
  4812 ;; This function is called by:
  4813 ;;		_EUSART1_Transmit_ISR
  4814 ;; This function uses a non-reentrant model
  4815 ;;
  4816                           
  4817                           	psect	text31
  4818  000E5A                     __ptext31:
  4819                           	opt stack 0
  4820  000E5A                     i2_UART_buff_size:
  4821                           	opt stack 22
  4822                           
  4823                           ;UART.c: 102: return (_this->count);
  4824                           
  4825                           ;incstack = 0
  4826  000E5A  EE20 F0CC          	lfsr	2,204
  4827  000E5E  5001               	movf	i2UART_buff_size@_this,w,c
  4828  000E60  26D9               	addwf	fsr2l,f,c
  4829  000E62  5002               	movf	i2UART_buff_size@_this+1,w,c
  4830  000E64  22DA               	addwfc	fsr2h,f,c
  4831  000E66  CFDE F001          	movff	postinc2,?i2_UART_buff_size
  4832  000E6A  CFDD F002          	movff	postdec2,?i2_UART_buff_size+1
  4833  000E6E  0012               	return	
  4834  000E70                     __end_ofi2_UART_buff_size:
  4835                           	opt stack 0
  4836                           pclatu	equ	0xFFB
  4837                           pclath	equ	0xFFA
  4838                           tblptru	equ	0xFF8
  4839                           tblptrh	equ	0xFF7
  4840                           tblptrl	equ	0xFF6
  4841                           tablat	equ	0xFF5
  4842                           prodh	equ	0xFF4
  4843                           prodl	equ	0xFF3
  4844                           intcon	equ	0xFF2
  4845                           postinc0	equ	0xFEE
  4846                           fsr0h	equ	0xFEA
  4847                           fsr0l	equ	0xFE9
  4848                           wreg	equ	0xFE8
  4849                           indf1	equ	0xFE7
  4850                           postdec1	equ	0xFE5
  4851                           fsr1h	equ	0xFE2
  4852                           fsr1l	equ	0xFE1
  4853                           indf2	equ	0xFDF
  4854                           postinc2	equ	0xFDE
  4855                           postdec2	equ	0xFDD
  4856                           plusw2	equ	0xFDB
  4857                           fsr2h	equ	0xFDA
  4858                           fsr2l	equ	0xFD9
  4859                           status	equ	0xFD8
  4860                           
  4861 ;; *************** function i2_UART_buff_get *****************
  4862 ;; Defined at:
  4863 ;;		line 80 in file "UART.c"
  4864 ;; Parameters:    Size  Location     Type
  4865 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  4866 ;;		 -> output_buffer(206), input_buffer(206), 
  4867 ;; Auto vars:     Size  Location     Type
  4868 ;;  UART_buff_ge    1   10[COMRAM] unsigned char 
  4869 ;; Return value:  Size  Location     Type
  4870 ;;                  1    wreg      unsigned char 
  4871 ;; Registers used:
  4872 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4873 ;; Tracked objects:
  4874 ;;		On entry : 0/0
  4875 ;;		On exit  : 0/0
  4876 ;;		Unchanged: 0/0
  4877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4878 ;;      Params:         2       0       0       0       0       0       0
  4879 ;;      Locals:         1       0       0       0       0       0       0
  4880 ;;      Temps:          2       0       0       0       0       0       0
  4881 ;;      Totals:         5       0       0       0       0       0       0
  4882 ;;Total ram usage:        5 bytes
  4883 ;; Hardware stack levels used:    1
  4884 ;; Hardware stack levels required when called:    1
  4885 ;; This function calls:
  4886 ;;		i2_UART_buff_modulo_inc
  4887 ;; This function is called by:
  4888 ;;		_EUSART1_Transmit_ISR
  4889 ;; This function uses a non-reentrant model
  4890 ;;
  4891                           
  4892                           	psect	text32
  4893  0009F2                     __ptext32:
  4894                           	opt stack 0
  4895  0009F2                     i2_UART_buff_get:
  4896                           	opt stack 21
  4897                           
  4898                           ;UART.c: 81: unsigned char c;
  4899                           ;UART.c: 82: if (_this->count > 0) {
  4900                           
  4901                           ;incstack = 0
  4902  0009F2  EE20 F0CC          	lfsr	2,204
  4903  0009F6  5007               	movf	i2UART_buff_get@_this,w,c
  4904  0009F8  26D9               	addwf	fsr2l,f,c
  4905  0009FA  5008               	movf	i2UART_buff_get@_this+1,w,c
  4906  0009FC  22DA               	addwfc	fsr2h,f,c
  4907  0009FE  0E01               	movlw	1
  4908  000A00  BEDB               	btfsc	plusw2,7,c
  4909  000A02  D03C               	goto	i2l2134
  4910  000A04  0E01               	movlw	1
  4911  000A06  50DB               	movf	plusw2,w,c
  4912  000A08  E103               	bnz	i2u124_40
  4913  000A0A  04DE               	decf	postinc2,w,c
  4914  000A0C  A0D8               	btfss	status,0,c
  4915  000A0E  D036               	goto	i2l2134
  4916  000A10                     i2u124_40:
  4917                           
  4918                           ;UART.c: 83: c = _this->buf[_this->tail];
  4919  000A10  EE20 F0CA          	lfsr	2,202
  4920  000A14  5007               	movf	i2UART_buff_get@_this,w,c
  4921  000A16  26D9               	addwf	fsr2l,f,c
  4922  000A18  5008               	movf	i2UART_buff_get@_this+1,w,c
  4923  000A1A  22DA               	addwfc	fsr2h,f,c
  4924  000A1C  CFDE F009          	movff	postinc2,??i2_UART_buff_get
  4925  000A20  CFDD F00A          	movff	postdec2,??i2_UART_buff_get+1
  4926  000A24  5009               	movf	??i2_UART_buff_get,w,c
  4927  000A26  2407               	addwf	i2UART_buff_get@_this,w,c
  4928  000A28  6ED9               	movwf	fsr2l,c
  4929  000A2A  500A               	movf	??i2_UART_buff_get+1,w,c
  4930  000A2C  2008               	addwfc	i2UART_buff_get@_this+1,w,c
  4931  000A2E  6EDA               	movwf	fsr2h,c
  4932  000A30  50DF               	movf	indf2,w,c
  4933  000A32  6E0B               	movwf	i2UART_buff_get@c,c
  4934                           
  4935                           ;UART.c: 84: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  4936  000A34  EE20 F0CA          	lfsr	2,202
  4937  000A38  5007               	movf	i2UART_buff_get@_this,w,c
  4938  000A3A  26D9               	addwf	fsr2l,f,c
  4939  000A3C  5008               	movf	i2UART_buff_get@_this+1,w,c
  4940  000A3E  22DA               	addwfc	fsr2h,f,c
  4941  000A40  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  4942  000A44  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  4943  000A48  0E00               	movlw	0
  4944  000A4A  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  4945  000A4C  0EC8               	movlw	200
  4946  000A4E  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  4947  000A50  ECB1  F006         	call	i2_UART_buff_modulo_inc	;wreg free
  4948  000A54  EE20 F0CA          	lfsr	2,202
  4949  000A58  5007               	movf	i2UART_buff_get@_this,w,c
  4950  000A5A  26D9               	addwf	fsr2l,f,c
  4951  000A5C  5008               	movf	i2UART_buff_get@_this+1,w,c
  4952  000A5E  22DA               	addwfc	fsr2h,f,c
  4953  000A60  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  4954  000A64  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  4955                           
  4956                           ;UART.c: 85: --_this->count;
  4957  000A68  EE20 F0CC          	lfsr	2,204
  4958  000A6C  5007               	movf	i2UART_buff_get@_this,w,c
  4959  000A6E  26D9               	addwf	fsr2l,f,c
  4960  000A70  5008               	movf	i2UART_buff_get@_this+1,w,c
  4961  000A72  22DA               	addwfc	fsr2h,f,c
  4962  000A74  06DE               	decf	postinc2,f,c
  4963  000A76  0E00               	movlw	0
  4964  000A78  5ADD               	subwfb	postdec2,f,c
  4965                           
  4966                           ;UART.c: 86: } else {
  4967  000A7A  D002               	goto	i2l278
  4968  000A7C                     i2l2134:
  4969                           
  4970                           ;UART.c: 87: c = 0;
  4971  000A7C  0E00               	movlw	0
  4972  000A7E  6E0B               	movwf	i2UART_buff_get@c,c
  4973  000A80                     i2l278:
  4974                           
  4975                           ;UART.c: 88: }
  4976                           ;UART.c: 89: return (c);
  4977  000A80  500B               	movf	i2UART_buff_get@c,w,c
  4978  000A82  0012               	return	
  4979  000A84                     __end_ofi2_UART_buff_get:
  4980                           	opt stack 0
  4981                           pclatu	equ	0xFFB
  4982                           pclath	equ	0xFFA
  4983                           tblptru	equ	0xFF8
  4984                           tblptrh	equ	0xFF7
  4985                           tblptrl	equ	0xFF6
  4986                           tablat	equ	0xFF5
  4987                           prodh	equ	0xFF4
  4988                           prodl	equ	0xFF3
  4989                           intcon	equ	0xFF2
  4990                           postinc0	equ	0xFEE
  4991                           fsr0h	equ	0xFEA
  4992                           fsr0l	equ	0xFE9
  4993                           wreg	equ	0xFE8
  4994                           indf1	equ	0xFE7
  4995                           postdec1	equ	0xFE5
  4996                           fsr1h	equ	0xFE2
  4997                           fsr1l	equ	0xFE1
  4998                           indf2	equ	0xFDF
  4999                           postinc2	equ	0xFDE
  5000                           postdec2	equ	0xFDD
  5001                           plusw2	equ	0xFDB
  5002                           fsr2h	equ	0xFDA
  5003                           fsr2l	equ	0xFD9
  5004                           status	equ	0xFD8
  5005                           
  5006 ;; *************** function _EUSART1_Receive_ISR *****************
  5007 ;; Defined at:
  5008 ;;		line 138 in file "UART.c"
  5009 ;; Parameters:    Size  Location     Type
  5010 ;;		None
  5011 ;; Auto vars:     Size  Location     Type
  5012 ;;  data            1   11[COMRAM] unsigned char 
  5013 ;; Return value:  Size  Location     Type
  5014 ;;                  1    wreg      void 
  5015 ;; Registers used:
  5016 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5017 ;; Tracked objects:
  5018 ;;		On entry : 0/0
  5019 ;;		On exit  : 0/0
  5020 ;;		Unchanged: 0/0
  5021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5022 ;;      Params:         0       0       0       0       0       0       0
  5023 ;;      Locals:         1       0       0       0       0       0       0
  5024 ;;      Temps:          0       0       0       0       0       0       0
  5025 ;;      Totals:         1       0       0       0       0       0       0
  5026 ;;Total ram usage:        1 bytes
  5027 ;; Hardware stack levels used:    1
  5028 ;; Hardware stack levels required when called:    2
  5029 ;; This function calls:
  5030 ;;		i2_UART_buff_put
  5031 ;; This function is called by:
  5032 ;;		_INTERRUPT_InterruptManager
  5033 ;; This function uses a non-reentrant model
  5034 ;;
  5035                           
  5036                           	psect	text33
  5037  000DC8                     __ptext33:
  5038                           	opt stack 0
  5039  000DC8                     _EUSART1_Receive_ISR:
  5040                           	opt stack 21
  5041                           
  5042                           ;UART.c: 139: if (1 == RC1STAbits.OERR) {
  5043                           
  5044                           ;incstack = 0
  5045  000DC8  A2AB               	btfss	4011,1,c	;volatile
  5046  000DCA  D002               	goto	i2l309
  5047                           
  5048                           ;UART.c: 142: RC1STAbits.CREN = 0;
  5049  000DCC  98AB               	bcf	4011,4,c	;volatile
  5050                           
  5051                           ;UART.c: 143: RC1STAbits.CREN = 1;
  5052  000DCE  88AB               	bsf	4011,4,c	;volatile
  5053  000DD0                     i2l309:
  5054                           
  5055                           ;UART.c: 144: }
  5056                           ;UART.c: 145: unsigned char data = RCREG1;
  5057  000DD0  CFAE F00C          	movff	4014,EUSART1_Receive_ISR@data	;volatile
  5058                           
  5059                           ;UART.c: 146: UART_buff_put(&input_buffer, data);
  5060  000DD4  0E00               	movlw	low _input_buffer
  5061  000DD6  6E07               	movwf	i2UART_buff_put@_this,c
  5062  000DD8  0E01               	movlw	high _input_buffer
  5063  000DDA  6E08               	movwf	i2UART_buff_put@_this+1,c
  5064  000DDC  C00C  F009         	movff	EUSART1_Receive_ISR@data,i2UART_buff_put@c
  5065  000DE0  EC3D  F003         	call	i2_UART_buff_put	;wreg free
  5066  000DE4  0012               	return		;funcret
  5067  000DE6                     __end_of_EUSART1_Receive_ISR:
  5068                           	opt stack 0
  5069                           pclatu	equ	0xFFB
  5070                           pclath	equ	0xFFA
  5071                           tblptru	equ	0xFF8
  5072                           tblptrh	equ	0xFF7
  5073                           tblptrl	equ	0xFF6
  5074                           tablat	equ	0xFF5
  5075                           prodh	equ	0xFF4
  5076                           prodl	equ	0xFF3
  5077                           intcon	equ	0xFF2
  5078                           postinc0	equ	0xFEE
  5079                           fsr0h	equ	0xFEA
  5080                           fsr0l	equ	0xFE9
  5081                           wreg	equ	0xFE8
  5082                           indf1	equ	0xFE7
  5083                           postdec1	equ	0xFE5
  5084                           fsr1h	equ	0xFE2
  5085                           fsr1l	equ	0xFE1
  5086                           indf2	equ	0xFDF
  5087                           postinc2	equ	0xFDE
  5088                           postdec2	equ	0xFDD
  5089                           plusw2	equ	0xFDB
  5090                           fsr2h	equ	0xFDA
  5091                           fsr2l	equ	0xFD9
  5092                           status	equ	0xFD8
  5093                           
  5094 ;; *************** function i2_UART_buff_put *****************
  5095 ;; Defined at:
  5096 ;;		line 67 in file "UART.c"
  5097 ;; Parameters:    Size  Location     Type
  5098 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  5099 ;;		 -> output_buffer(206), input_buffer(206), 
  5100 ;;  c               1    8[COMRAM] const unsigned char 
  5101 ;; Auto vars:     Size  Location     Type
  5102 ;;		None
  5103 ;; Return value:  Size  Location     Type
  5104 ;;                  1    wreg      void 
  5105 ;; Registers used:
  5106 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5107 ;; Tracked objects:
  5108 ;;		On entry : 0/0
  5109 ;;		On exit  : 0/0
  5110 ;;		Unchanged: 0/0
  5111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5112 ;;      Params:         3       0       0       0       0       0       0
  5113 ;;      Locals:         0       0       0       0       0       0       0
  5114 ;;      Temps:          2       0       0       0       0       0       0
  5115 ;;      Totals:         5       0       0       0       0       0       0
  5116 ;;Total ram usage:        5 bytes
  5117 ;; Hardware stack levels used:    1
  5118 ;; Hardware stack levels required when called:    1
  5119 ;; This function calls:
  5120 ;;		i2_UART_buff_modulo_inc
  5121 ;; This function is called by:
  5122 ;;		_EUSART1_Receive_ISR
  5123 ;; This function uses a non-reentrant model
  5124 ;;
  5125                           
  5126                           	psect	text34
  5127  00067A                     __ptext34:
  5128                           	opt stack 0
  5129  00067A                     i2_UART_buff_put:
  5130                           	opt stack 21
  5131                           
  5132                           ;UART.c: 68: if (_this->count < 200) {
  5133                           
  5134                           ;incstack = 0
  5135  00067A  EE20 F0CC          	lfsr	2,204
  5136  00067E  5007               	movf	i2UART_buff_put@_this,w,c
  5137  000680  26D9               	addwf	fsr2l,f,c
  5138  000682  5008               	movf	i2UART_buff_put@_this+1,w,c
  5139  000684  22DA               	addwfc	fsr2h,f,c
  5140  000686  0E01               	movlw	1
  5141  000688  BEDB               	btfsc	plusw2,7,c
  5142  00068A  D007               	goto	i2l2114
  5143  00068C  0E01               	movlw	1
  5144  00068E  50DB               	movf	plusw2,w,c
  5145  000690  E13A               	bnz	i2l2120
  5146  000692  0EC8               	movlw	200
  5147  000694  5CDE               	subwf	postinc2,w,c
  5148  000696  B0D8               	btfsc	status,0,c
  5149  000698  D036               	goto	i2l2120
  5150  00069A                     i2l2114:
  5151                           
  5152                           ;UART.c: 69: _this->buf[_this->head] = c;
  5153  00069A  EE20 F0C8          	lfsr	2,200
  5154  00069E  5007               	movf	i2UART_buff_put@_this,w,c
  5155  0006A0  26D9               	addwf	fsr2l,f,c
  5156  0006A2  5008               	movf	i2UART_buff_put@_this+1,w,c
  5157  0006A4  22DA               	addwfc	fsr2h,f,c
  5158  0006A6  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  5159  0006AA  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  5160  0006AE  500A               	movf	??i2_UART_buff_put,w,c
  5161  0006B0  2407               	addwf	i2UART_buff_put@_this,w,c
  5162  0006B2  6ED9               	movwf	fsr2l,c
  5163  0006B4  500B               	movf	??i2_UART_buff_put+1,w,c
  5164  0006B6  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  5165  0006B8  6EDA               	movwf	fsr2h,c
  5166  0006BA  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  5167                           
  5168                           ;UART.c: 70: _this->head = UART_buff_modulo_inc(_this->head, 200);
  5169  0006BE  EE20 F0C8          	lfsr	2,200
  5170  0006C2  5007               	movf	i2UART_buff_put@_this,w,c
  5171  0006C4  26D9               	addwf	fsr2l,f,c
  5172  0006C6  5008               	movf	i2UART_buff_put@_this+1,w,c
  5173  0006C8  22DA               	addwfc	fsr2h,f,c
  5174  0006CA  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  5175  0006CE  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  5176  0006D2  0E00               	movlw	0
  5177  0006D4  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  5178  0006D6  0EC8               	movlw	200
  5179  0006D8  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  5180  0006DA  ECB1  F006         	call	i2_UART_buff_modulo_inc	;wreg free
  5181  0006DE  EE20 F0C8          	lfsr	2,200
  5182  0006E2  5007               	movf	i2UART_buff_put@_this,w,c
  5183  0006E4  26D9               	addwf	fsr2l,f,c
  5184  0006E6  5008               	movf	i2UART_buff_put@_this+1,w,c
  5185  0006E8  22DA               	addwfc	fsr2h,f,c
  5186  0006EA  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  5187  0006EE  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  5188                           
  5189                           ;UART.c: 71: ++_this->count;
  5190  0006F2  EE20 F0CC          	lfsr	2,204
  5191  0006F6  5007               	movf	i2UART_buff_put@_this,w,c
  5192  0006F8  26D9               	addwf	fsr2l,f,c
  5193  0006FA  5008               	movf	i2UART_buff_put@_this+1,w,c
  5194  0006FC  22DA               	addwfc	fsr2h,f,c
  5195  0006FE  2ADE               	incf	postinc2,f,c
  5196  000700  0E00               	movlw	0
  5197  000702  22DD               	addwfc	postdec2,f,c
  5198                           
  5199                           ;UART.c: 72: } else {
  5200  000704  0012               	return	
  5201  000706                     i2l2120:
  5202                           
  5203                           ;UART.c: 73: _this->buf[_this->head] = c;
  5204  000706  EE20 F0C8          	lfsr	2,200
  5205  00070A  5007               	movf	i2UART_buff_put@_this,w,c
  5206  00070C  26D9               	addwf	fsr2l,f,c
  5207  00070E  5008               	movf	i2UART_buff_put@_this+1,w,c
  5208  000710  22DA               	addwfc	fsr2h,f,c
  5209  000712  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  5210  000716  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  5211  00071A  500A               	movf	??i2_UART_buff_put,w,c
  5212  00071C  2407               	addwf	i2UART_buff_put@_this,w,c
  5213  00071E  6ED9               	movwf	fsr2l,c
  5214  000720  500B               	movf	??i2_UART_buff_put+1,w,c
  5215  000722  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  5216  000724  6EDA               	movwf	fsr2h,c
  5217  000726  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  5218                           
  5219                           ;UART.c: 74: _this->head = UART_buff_modulo_inc(_this->head, 200);
  5220  00072A  EE20 F0C8          	lfsr	2,200
  5221  00072E  5007               	movf	i2UART_buff_put@_this,w,c
  5222  000730  26D9               	addwf	fsr2l,f,c
  5223  000732  5008               	movf	i2UART_buff_put@_this+1,w,c
  5224  000734  22DA               	addwfc	fsr2h,f,c
  5225  000736  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  5226  00073A  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  5227  00073E  0E00               	movlw	0
  5228  000740  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  5229  000742  0EC8               	movlw	200
  5230  000744  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  5231  000746  ECB1  F006         	call	i2_UART_buff_modulo_inc	;wreg free
  5232  00074A  EE20 F0C8          	lfsr	2,200
  5233  00074E  5007               	movf	i2UART_buff_put@_this,w,c
  5234  000750  26D9               	addwf	fsr2l,f,c
  5235  000752  5008               	movf	i2UART_buff_put@_this+1,w,c
  5236  000754  22DA               	addwfc	fsr2h,f,c
  5237  000756  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  5238  00075A  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  5239                           
  5240                           ;UART.c: 75: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  5241  00075E  EE20 F0CA          	lfsr	2,202
  5242  000762  5007               	movf	i2UART_buff_put@_this,w,c
  5243  000764  26D9               	addwf	fsr2l,f,c
  5244  000766  5008               	movf	i2UART_buff_put@_this+1,w,c
  5245  000768  22DA               	addwfc	fsr2h,f,c
  5246  00076A  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  5247  00076E  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  5248  000772  0E00               	movlw	0
  5249  000774  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  5250  000776  0EC8               	movlw	200
  5251  000778  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  5252  00077A  ECB1  F006         	call	i2_UART_buff_modulo_inc	;wreg free
  5253  00077E  EE20 F0CA          	lfsr	2,202
  5254  000782  5007               	movf	i2UART_buff_put@_this,w,c
  5255  000784  26D9               	addwf	fsr2l,f,c
  5256  000786  5008               	movf	i2UART_buff_put@_this+1,w,c
  5257  000788  22DA               	addwfc	fsr2h,f,c
  5258  00078A  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  5259  00078E  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  5260  000792  0012               	return	
  5261  000794                     __end_ofi2_UART_buff_put:
  5262                           	opt stack 0
  5263                           pclatu	equ	0xFFB
  5264                           pclath	equ	0xFFA
  5265                           tblptru	equ	0xFF8
  5266                           tblptrh	equ	0xFF7
  5267                           tblptrl	equ	0xFF6
  5268                           tablat	equ	0xFF5
  5269                           prodh	equ	0xFF4
  5270                           prodl	equ	0xFF3
  5271                           intcon	equ	0xFF2
  5272                           postinc0	equ	0xFEE
  5273                           fsr0h	equ	0xFEA
  5274                           fsr0l	equ	0xFE9
  5275                           wreg	equ	0xFE8
  5276                           indf1	equ	0xFE7
  5277                           postdec1	equ	0xFE5
  5278                           fsr1h	equ	0xFE2
  5279                           fsr1l	equ	0xFE1
  5280                           indf2	equ	0xFDF
  5281                           postinc2	equ	0xFDE
  5282                           postdec2	equ	0xFDD
  5283                           plusw2	equ	0xFDB
  5284                           fsr2h	equ	0xFDA
  5285                           fsr2l	equ	0xFD9
  5286                           status	equ	0xFD8
  5287                           
  5288 ;; *************** function i2_UART_buff_modulo_inc *****************
  5289 ;; Defined at:
  5290 ;;		line 105 in file "UART.c"
  5291 ;; Parameters:    Size  Location     Type
  5292 ;;  value           2    0[COMRAM] const unsigned int 
  5293 ;;  modulus         2    2[COMRAM] const unsigned int 
  5294 ;; Auto vars:     Size  Location     Type
  5295 ;;  UART_buff_mo    2    4[COMRAM] unsigned int 
  5296 ;; Return value:  Size  Location     Type
  5297 ;;                  2    0[COMRAM] unsigned int 
  5298 ;; Registers used:
  5299 ;;		wreg, status,2, status,0
  5300 ;; Tracked objects:
  5301 ;;		On entry : 0/0
  5302 ;;		On exit  : 0/0
  5303 ;;		Unchanged: 0/0
  5304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5305 ;;      Params:         4       0       0       0       0       0       0
  5306 ;;      Locals:         2       0       0       0       0       0       0
  5307 ;;      Temps:          0       0       0       0       0       0       0
  5308 ;;      Totals:         6       0       0       0       0       0       0
  5309 ;;Total ram usage:        6 bytes
  5310 ;; Hardware stack levels used:    1
  5311 ;; This function calls:
  5312 ;;		Nothing
  5313 ;; This function is called by:
  5314 ;;		i2_UART_buff_put
  5315 ;;		i2_UART_buff_get
  5316 ;; This function uses a non-reentrant model
  5317 ;;
  5318                           
  5319                           	psect	text35
  5320  000D62                     __ptext35:
  5321                           	opt stack 0
  5322  000D62                     i2_UART_buff_modulo_inc:
  5323                           	opt stack 21
  5324                           
  5325                           ;UART.c: 106: unsigned int my_value = value + 1;
  5326                           
  5327                           ;incstack = 0
  5328  000D62  0E01               	movlw	1
  5329  000D64  2401               	addwf	i2UART_buff_modulo_inc@value,w,c
  5330  000D66  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  5331  000D68  0E00               	movlw	0
  5332  000D6A  2002               	addwfc	i2UART_buff_modulo_inc@value+1,w,c
  5333  000D6C  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  5334                           
  5335                           ;UART.c: 107: if (my_value >= modulus) {
  5336  000D6E  5003               	movf	i2UART_buff_modulo_inc@modulus,w,c
  5337  000D70  5C05               	subwf	i2UART_buff_modulo_inc@my_value,w,c
  5338  000D72  5004               	movf	i2UART_buff_modulo_inc@modulus+1,w,c
  5339  000D74  5806               	subwfb	i2UART_buff_modulo_inc@my_value+1,w,c
  5340  000D76  A0D8               	btfss	status,0,c
  5341  000D78  D004               	goto	i2l2064
  5342                           
  5343                           ;UART.c: 108: my_value = 0;
  5344  000D7A  0E00               	movlw	0
  5345  000D7C  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  5346  000D7E  0E00               	movlw	0
  5347  000D80  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  5348  000D82                     i2l2064:
  5349                           
  5350                           ;UART.c: 109: }
  5351                           ;UART.c: 110: return (my_value);
  5352  000D82  C005  F001         	movff	i2UART_buff_modulo_inc@my_value,?i2_UART_buff_modulo_inc
  5353  000D86  C006  F002         	movff	i2UART_buff_modulo_inc@my_value+1,?i2_UART_buff_modulo_inc+1
  5354  000D8A  0012               	return	
  5355  000D8C                     __end_ofi2_UART_buff_modulo_inc:
  5356                           	opt stack 0
  5357  0000                     pclatu	equ	0xFFB
  5358                           pclath	equ	0xFFA
  5359                           tblptru	equ	0xFF8
  5360                           tblptrh	equ	0xFF7
  5361                           tblptrl	equ	0xFF6
  5362                           tablat	equ	0xFF5
  5363                           prodh	equ	0xFF4
  5364                           prodl	equ	0xFF3
  5365                           intcon	equ	0xFF2
  5366                           postinc0	equ	0xFEE
  5367                           fsr0h	equ	0xFEA
  5368                           fsr0l	equ	0xFE9
  5369                           wreg	equ	0xFE8
  5370                           indf1	equ	0xFE7
  5371                           postdec1	equ	0xFE5
  5372                           fsr1h	equ	0xFE2
  5373                           fsr1l	equ	0xFE1
  5374                           indf2	equ	0xFDF
  5375                           postinc2	equ	0xFDE
  5376                           postdec2	equ	0xFDD
  5377                           plusw2	equ	0xFDB
  5378                           fsr2h	equ	0xFDA
  5379                           fsr2l	equ	0xFD9
  5380                           status	equ	0xFD8
  5381                           pclatu	equ	0xFFB
  5382                           pclath	equ	0xFFA
  5383                           tblptru	equ	0xFF8
  5384                           tblptrh	equ	0xFF7
  5385                           tblptrl	equ	0xFF6
  5386                           tablat	equ	0xFF5
  5387                           prodh	equ	0xFF4
  5388                           prodl	equ	0xFF3
  5389                           intcon	equ	0xFF2
  5390                           postinc0	equ	0xFEE
  5391                           fsr0h	equ	0xFEA
  5392                           fsr0l	equ	0xFE9
  5393                           wreg	equ	0xFE8
  5394                           indf1	equ	0xFE7
  5395                           postdec1	equ	0xFE5
  5396                           fsr1h	equ	0xFE2
  5397                           fsr1l	equ	0xFE1
  5398                           indf2	equ	0xFDF
  5399                           postinc2	equ	0xFDE
  5400                           postdec2	equ	0xFDD
  5401                           plusw2	equ	0xFDB
  5402                           fsr2h	equ	0xFDA
  5403                           fsr2l	equ	0xFD9
  5404                           status	equ	0xFD8
  5405                           
  5406                           	psect	text36
  5407  000000                     __ptext36:
  5408                           	opt stack 0
  5409                           pclatu	equ	0xFFB
  5410                           pclath	equ	0xFFA
  5411                           tblptru	equ	0xFF8
  5412                           tblptrh	equ	0xFF7
  5413                           tblptrl	equ	0xFF6
  5414                           tablat	equ	0xFF5
  5415                           prodh	equ	0xFF4
  5416                           prodl	equ	0xFF3
  5417                           intcon	equ	0xFF2
  5418                           postinc0	equ	0xFEE
  5419                           fsr0h	equ	0xFEA
  5420                           fsr0l	equ	0xFE9
  5421                           wreg	equ	0xFE8
  5422                           indf1	equ	0xFE7
  5423                           postdec1	equ	0xFE5
  5424                           fsr1h	equ	0xFE2
  5425                           fsr1l	equ	0xFE1
  5426                           indf2	equ	0xFDF
  5427                           postinc2	equ	0xFDE
  5428                           postdec2	equ	0xFDD
  5429                           plusw2	equ	0xFDB
  5430                           fsr2h	equ	0xFDA
  5431                           fsr2l	equ	0xFD9
  5432                           status	equ	0xFD8
  5433                           
  5434                           	psect	rparam
  5435  0000                     pclatu	equ	0xFFB
  5436                           pclath	equ	0xFFA
  5437                           tblptru	equ	0xFF8
  5438                           tblptrh	equ	0xFF7
  5439                           tblptrl	equ	0xFF6
  5440                           tablat	equ	0xFF5
  5441                           prodh	equ	0xFF4
  5442                           prodl	equ	0xFF3
  5443                           intcon	equ	0xFF2
  5444                           postinc0	equ	0xFEE
  5445                           fsr0h	equ	0xFEA
  5446                           fsr0l	equ	0xFE9
  5447                           wreg	equ	0xFE8
  5448                           indf1	equ	0xFE7
  5449                           postdec1	equ	0xFE5
  5450                           fsr1h	equ	0xFE2
  5451                           fsr1l	equ	0xFE1
  5452                           indf2	equ	0xFDF
  5453                           postinc2	equ	0xFDE
  5454                           postdec2	equ	0xFDD
  5455                           plusw2	equ	0xFDB
  5456                           fsr2h	equ	0xFDA
  5457                           fsr2l	equ	0xFD9
  5458                           status	equ	0xFD8
  5459                           
  5460                           	psect	temp
  5461  000045                     btemp:
  5462                           	opt stack 0
  5463  000045                     	ds	1
  5464  0000                     int$flags	set	btemp
  5465                           pclatu	equ	0xFFB
  5466                           pclath	equ	0xFFA
  5467                           tblptru	equ	0xFF8
  5468                           tblptrh	equ	0xFF7
  5469                           tblptrl	equ	0xFF6
  5470                           tablat	equ	0xFF5
  5471                           prodh	equ	0xFF4
  5472                           prodl	equ	0xFF3
  5473                           intcon	equ	0xFF2
  5474                           postinc0	equ	0xFEE
  5475                           fsr0h	equ	0xFEA
  5476                           fsr0l	equ	0xFE9
  5477                           wreg	equ	0xFE8
  5478                           indf1	equ	0xFE7
  5479                           postdec1	equ	0xFE5
  5480                           fsr1h	equ	0xFE2
  5481                           fsr1l	equ	0xFE1
  5482                           indf2	equ	0xFDF
  5483                           postinc2	equ	0xFDE
  5484                           postdec2	equ	0xFDD
  5485                           plusw2	equ	0xFDB
  5486                           fsr2h	equ	0xFDA
  5487                           fsr2l	equ	0xFD9
  5488                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        5
    BSS         949
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     37      68
    BANK0           160     26     101
    BANK1           256      0     236
    BANK2           256      0     206
    BANK3           256      0     200
    BANK4           256      0     206
    BANK5           256     70      70

Pointer List with Targets:

    begin@stuffpeek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_peek(), 

    begin@stuffavailable	PTR FTN()int  size(2) Largest target is 2
		 -> Receive_available(), 

    begin@stufftoreceive	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_get(), 

    begin@stufftosend	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Send_put(), 

    begin@ptr	PTR volatile int  size(2) Largest target is 10
		 -> receiveArray(BANK0[10]), 

    sendStructAddress	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    receiveArrayAddress	PTR volatile int  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    serial_peek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), 

    serial_write	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    memset@p1	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK2[206]), input_buffer(BANK1[206]), 

    memset@p	PTR unsigned char  size(2) Largest target is 206
		 -> output_buffer(BANK2[206]), input_buffer(BANK1[206]), 

    cobs_decode@dst_write_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK0[30]), 

    cobs_decode@dst_buf_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK0[30]), 

    cobs_decode@dst_buf_end_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK0[30]), 

    cobs_decode@src_ptr	PTR const unsigned char  size(2) Largest target is 30
		 -> ReciveArray(BANK1[30]), 

    cobs_decode@src_end_ptr	PTR const unsigned char  size(2) Largest target is 30
		 -> ReciveArray(BANK1[30]), 

    cobs_encode@dst_write_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> sendData@COBSArray(BANK5[30]), 

    cobs_encode@dst_code_write_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> sendData@COBSArray(BANK5[30]), 

    cobs_encode@dst_buf_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> sendData@COBSArray(BANK5[30]), 

    cobs_encode@dst_buf_end_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> sendData@COBSArray(BANK5[30]), 

    cobs_encode@src_ptr	PTR const unsigned char  size(2) Largest target is 30
		 -> sendData@SendArray(BANK5[30]), 

    cobs_encode@src_end_ptr	PTR const unsigned char  size(2) Largest target is 30
		 -> sendData@SendArray(BANK5[30]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK2[206]), input_buffer(BANK1[206]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK2[206]), input_buffer(BANK1[206]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK2[206]), input_buffer(BANK1[206]), 

    UART_buff_init@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK2[206]), input_buffer(BANK1[206]), 

    serial_read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), 

    serial_available	PTR FTN()int  size(2) Largest target is 1
		 -> Absolute function(), 

    sp__memset	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK2[206]), input_buffer(BANK1[206]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 30
		 -> CRCcheck@arrayHolder(COMRAM[3]), ProcessArray(BANK0[30]), sendData@SendArray(BANK5[30]), 


Critical Paths under _main in COMRAM

    _Send_put->_UART_buff_get
    _Send_put->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc
    _Receive_get->_UART_buff_get
    _UART_buff_get->_UART_buff_modulo_inc
    _Receive_available->_UART_buff_size
    _EUSART1_Initialize->_UART_buff_init
    _UART_buff_init->_memset

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _EUSART1_Transmit_ISR->i2_UART_buff_get
    i2_UART_buff_get->i2_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->i2_UART_buff_put
    i2_UART_buff_put->i2_UART_buff_modulo_inc

Critical Paths under _main in BANK0

    _updateComms->_receiveData
    _respondECU->_sendData
    _sendData->_cobs_encode
    _receiveData->_cobs_decode
    _ComStart->_begin

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    _respondECU->_sendData

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   12754
                         _ReadFaults
                            _SetTime
                              _Start
                        _updateComms
 ---------------------------------------------------------------------------------
 (1) _updateComms                                          0     0      0   11080
                        _receiveData
                         _respondECU
 ---------------------------------------------------------------------------------
 (2) _respondECU                                           0     0      0    6794
                              _Delay
                           _sendData
 ---------------------------------------------------------------------------------
 (3) _sendData                                            77    74      3    6596
                                             13 BANK0      7     4      3
                                              0 BANK5     70    70      0
                               _CRC8
                          _GetFaults
                           _Send_put
                        _cobs_encode
 ---------------------------------------------------------------------------------
 (4) _cobs_encode                                         23    15      8    1613
                                             26 COMRAM    10     2      8
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (4) _Send_put                                             1     1      0    2913
                                              0 BANK0      1     1      0
                      _UART_buff_get
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (5) _UART_buff_put                                        5     2      3    1574
                                             32 COMRAM     5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (4) _GetFaults                                            1     1      0      62
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Delay                                                5     3      2     198
                                             26 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _receiveData                                         12    12      0    4286
                                             14 BANK0     12    12      0
                               _CRC8
                  _Receive_available
                        _Receive_get
                        _cobs_decode
 ---------------------------------------------------------------------------------
 (3) _cobs_decode                                         24    16      8    1783
                                             26 COMRAM    10     2      8
                                              0 BANK0     14    14      0
 ---------------------------------------------------------------------------------
 (3) _Receive_get                                          0     0      0    1308
                      _UART_buff_get
 ---------------------------------------------------------------------------------
 (5) _UART_buff_get                                        5     3      2    1308
                                             32 COMRAM     5     3      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (6) _UART_buff_modulo_inc                                 6     2      4     850
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _Receive_available                                    2     0      2     176
                                             28 COMRAM     2     0      2
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (4) _UART_buff_size                                       2     0      2     176
                                             26 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _CRC8                                                 7     4      3     784
                                             26 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (1) _Start                                                0     0      0    1674
                           _ComStart
               _INTERRUPT_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ComStart                                             0     0      0    1674
                 _EUSART1_Initialize
                              _begin
 ---------------------------------------------------------------------------------
 (3) _begin                                               13     0     13     720
                                              0 BANK0     13     0     13
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0     954
                     _UART_buff_init
 ---------------------------------------------------------------------------------
 (4) _UART_buff_init                                       2     0      2     954
                                             34 COMRAM     2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               8     2      6     780
                                             26 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (1) _SetTime                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ReadFaults                                           1     1      0       0
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                          14    14      0    1209
                                             12 COMRAM    14    14      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR0_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Transmit_ISR                                 0     0      0     528
                    i2_UART_buff_get
                   i2_UART_buff_size
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_size                                     2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_get                                      5     3      2     480
                                              6 COMRAM     5     3      2
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Receive_ISR                                  1     1      0     681
                                             11 COMRAM     1     1      0
                    i2_UART_buff_put
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_put                                      5     2      3     658
                                              6 COMRAM     5     2      3
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_modulo_inc                              6     2      4     298
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ReadFaults
   _SetTime
   _Start
     _ComStart
       _EUSART1_Initialize
         _UART_buff_init
           _memset
       _begin
     _INTERRUPT_Initialize
     _TMR0_Initialize
       _TMR0_StartTimer
   _updateComms
     _receiveData
       _CRC8
       _Receive_available
         _UART_buff_size
       _Receive_get
         _UART_buff_get
           _UART_buff_modulo_inc
       _cobs_decode
     _respondECU
       _Delay
       _sendData
         _CRC8
         _GetFaults
         _Send_put
           _UART_buff_get
             _UART_buff_modulo_inc
           _UART_buff_put
             _UART_buff_modulo_inc
         _cobs_encode

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
     i2_UART_buff_put
       i2_UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     i2_UART_buff_get
       i2_UART_buff_modulo_inc
     i2_UART_buff_size
   _TMR0_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100     46      46      15       27.3%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      CE      13       80.5%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      C8      11       78.1%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      CE       8       80.5%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      EC       6       92.2%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     1A      65       4       63.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     25      44       1       72.3%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     43F       9        0.0%
DATA                 0      0     43F      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Fri Aug 11 15:36:27 2017

             i2_UART_buff_modulo_inc 0D62             cobs_encode@dst_write_ptr 00AF  
                       _rx_array_inx 0043                         __CFG_CP0$OFF 000000  
                       __CFG_CP1$OFF 000000                         __CFG_CP2$OFF 000000  
                       __CFG_CP3$OFF 000000                                  l122 0BEC  
                                l278 09EE                                  l456 0C94  
                       __CFG_CPB$OFF 000000                                  u500 08B0  
                                u510 08C8                                  u600 093C  
                                u520 08E4                                  u610 0950  
                                u530 08F8                         __CFG_CPD$OFF 000000  
                                u508 08B2                                  u550 090A  
                                u518 08CA                                  u608 093E  
                                u528 08E6                                  u480 088C  
                                u545 08FA                                  u618 0952  
                                u570 091C                                  u490 089C  
                                u565 090C                                  u590 092C  
                                u486 088E                                  u585 091E  
                                u498 089E                                  u596 092E  
                                wreg 000FE8        i2UART_buff_modulo_inc@modulus 0003  
        _COBS_DECODE_DST_BUF_LEN_MAX 00C1                         __CFG_LVP$OFF 000000  
                               l2310 0D58                                 l2322 05EC  
                               l2316 0580                                 l2412 034A  
                               l2342 0BC0                                 l2336 09EA  
                               l2520 00FC                                 l2600 07C2  
                               l2440 03C8                                 l2432 039A  
                               l2530 0126                                 l2522 0104  
                               l2514 00E8                                 l2348 0BD6  
                               l2356 0BF2                                 l2540 0166  
                               l2620 0880                                 l2358 0BF8  
                               l2550 01A6                                 l2438 03BC  
                               l2390 02E2                                 l2382 02C6  
                               l1760 0D16                                 l2368 0E24  
                               l2562 01D0                                 l2570 01E8  
                               l2394 02FC                                 l2490 04E6  
                               l1764 0D26                                 l2580 021C  
                               l2548 01A2                                 l2388 02DA  
                               l1926 0C80                                 l2494 051A  
                               l2486 0498                                 l2584 0230  
                               l2498 0536                                 l2686 0E76  
                               _CRC8 0BBA                                 u1530 097E  
                               u1830 07A8                                 u1957 0C86  
                               u1967 07E0                                 _main 0E70  
                    _TMR0_StartTimer 0EBA                                 _time 0060  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                               fsr2h 000FDA                                 fsr0l 000FE9  
                               indf1 000FE7                                 indf2 000FDF  
                               fsr1l 000FE1                                 fsr2l 000FD9  
                               btemp 0045                        __CFG_BORV$190 000000  
                               prodh 000FF4                                 prodl 000FF3  
                               start 00A0                        __CFG_IESO$OFF 000000  
                       ___param_bank 000000       i2UART_buff_modulo_inc@my_value 0005  
                              ?_CRC8 001B                      __end_of_SetTime 0E98  
            __end_of_TMR0_Initialize 0DAA                                ?_main 0001  
                              _T0CON 000FD5                       __CFG_DEBUG$OFF 000000  
                              i2l309 0DD0                                i2l453 0064  
                              i2l278 0A80                                i2l447 004E  
                              i2l449 005A                                _TMR0H 000FD7  
                              _TMR0L 000FD6                                _Delay 0C76  
                      __CFG_WRT0$OFF 000000                        __CFG_WRT1$OFF 000000  
                      __CFG_WRT2$OFF 000000                        __CFG_WRT3$OFF 000000  
               _EUSART1_Transmit_ISR 0CAA                       __CFG_EBTR0$OFF 000000  
                     __CFG_FCMEN$OFF 000000                       __CFG_EBTR1$OFF 000000  
                     __CFG_EBTR2$OFF 000000                       __CFG_EBTR3$OFF 000000  
                   __end_of_TMR0_ISR 0E00                                _Start 0B64  
                      __CFG_WRTB$OFF 000000                        __CFG_WRTC$OFF 000000  
                      __CFG_WRTD$OFF 000000                                _begin 0EBE  
                     __CFG_EBTRB$OFF 000000                                _group 006A  
                 __CFG_MCLRE$EXTMCLR 000000                                pclath 000FFA  
                              tablat 000FF5                        ??_Receive_get 0026  
                      receiveData@CS 00BA                                plusw2 000FDB  
                     begin@stuffpeek 00B2                                status 000FD8  
                     __CFG_HFOFST$ON 000000                         ?_receiveData 0001  
                     __CFG_PBADEN$ON 000000                         __end_of_CRC8 0C04  
                   __end_of_ComStart 0B64                           _ReadFaults 0884  
                    __initialization 0A84           __end_of_EUSART1_Initialize 0C40  
                       __end_of_main 0E84                               ??_CRC8 001E  
        ?_INTERRUPT_InterruptManager 0001                   __size_of_GetFaults 0016  
                             ??_main 0026                        __activetblptr 000002  
                   __end_of_Send_put 0D0C            __size_ofi2_UART_buff_size 0016  
                             ?_Delay 001B                ?_EUSART1_Transmit_ISR 0001  
                             ?_Start 0001                               ?_begin 00A7  
            __end_of_TMR0_StartTimer 0EBE                 __size_of_cobs_decode 01BE  
               __size_of_cobs_encode 0198                               _ANSELA 000F38  
                             _ANSELB 000F39                               _ANSELC 000F3A  
                             _ANSELD 000F3B                               _ANSELE 000F3C  
                    i2_UART_buff_get 09F2                               _RC1STA 000FAB  
                             i2l2120 0706                               i2l2114 069A  
                             i2l2134 0A7C                               i2l2206 0CD4  
                             i2l2064 0D82                      i2_UART_buff_put 067A  
                     __CFG_WDTEN$OFF 000000                               Delay@x 001E  
        UART_buff_modulo_inc@modulus 001D                               _RCREG1 000FAE  
                             _OSCCON 000FD3                               _SPBRG1 000FAF  
                             _TX1STA 000FAC                               _TXREG1 000FAD  
                          ??_SetTime 001B                       __CFG_XINST$OFF 000000  
                __end_of_Receive_get 0EB6                        _output_buffer 0200  
                          CRC8@tempI 0020                       __CFG_STVREN$ON 000000  
                   ?_TMR0_Initialize 0001                               _memset 0D0C  
                             clear_0 0ABC                               clear_1 0AC8  
                             clear_2 0AD4                               clear_3 0AE0  
                             clear_4 0AEC                               clear_5 0AF8  
                             _rx_len 0042                     __end_of_sendData 0560  
                       __pdataCOMRAM 0044               cobs_encode@dst_buf_len 001D  
             cobs_encode@dst_buf_ptr 001B                        Send_put@_data 00A7  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8         __end_of_UART_buff_modulo_inc 0D62  
      __size_of_INTERRUPT_Initialize 0018                           __accesstop 0060  
            __end_of__initialization 0AFE                        sendData@count 053D  
                  __end_of_GetFaults 0E2E                        ___rparam_used 000001  
            ?i2_UART_buff_modulo_inc 0001                         ?_updateComms 0001  
                      __end_of_Delay 0CAA                          ?_ReadFaults 0001  
                     __pcstackCOMRAM 0001                        __end_of_Start 0BBA  
                       __pidataBANK0 0EB6                        __end_of_begin 0EC0  
                          ?_TMR0_ISR 0001                   UART_buff_get@_this 0021  
              __end_of_UART_buff_get 09F2               ??_EUSART1_Transmit_ISR 000C  
              __end_of_UART_buff_put 067A                              ??_Delay 001D  
            __end_ofi2_UART_buff_get 0A84              __end_ofi2_UART_buff_put 0794  
        __end_of_EUSART1_Receive_ISR 0DE6                              CRC8@crc 0021  
                            CRC8@len 001D                              ??_Start 0025  
                            CRC8@sum 001E                            ?_ComStart 0001  
                            ??_begin 001B                     ?_TMR0_StartTimer 0001  
                _addressErrorCounter 0028               cobs_decode@dst_buf_len 001D  
                         __pbssBANK0 0060                           __pbssBANK1 0100  
                         __pbssBANK2 0200                           __pbssBANK3 0300  
                         __pbssBANK4 0400               cobs_decode@dst_buf_ptr 001B  
                    __CFG_PLLCFG$OFF 000000                          _Receive_get 0EA8  
     __end_ofi2_UART_buff_modulo_inc 0D8C                    begin@givenAddress 00AA  
            __size_of_UART_buff_init 001E                          _ReciveArray 01CE  
            __size_of_UART_buff_size 0016                            ?_Send_put 0001  
               __size_of_receiveData 00F0                   __CFG_CCP2MX$PORTC1 000000  
                         ??_TMR0_ISR 0001                   __CFG_CCP3MX$PORTB5 000000  
           cobs_decode@dst_write_ptr 00AF           cobs_decode@remaining_bytes 00AD  
                            ?_memset 001B                           _crc_buffer 008C  
                 UART_buff_put@_this 0021                      cobs_decode@F192 0064  
                   i2_UART_buff_size 0E5A          i2UART_buff_modulo_inc@value 0001  
                            _OSCCON2 000FD2                    _Receive_available 0E2E  
       UART_buff_modulo_inc@my_value 001F                    __CFG_PRICLKEN$OFF 000000  
                            _OSCTUNE 000F9B                              _SPBRGH1 000FB0  
                         ??_ComStart 0025                  sendData@whereToSend 053C  
                _receiveArrayAddress 0030                  __size_of_ReadFaults 00DC  
                 ?_Receive_available 001D                           begin@error 00AB  
                            _ByteLow 003A                  ??_Receive_available 001F  
                          ?_sendData 00B4                    _alignErrorCounter 002C  
                    __CFG_PWRTEN$OFF 000000                           ??_Send_put 0026  
                            __Hparam 0000                              _SetTime 0E84  
                            __Lparam 0000               cobs_encode@src_end_ptr 00A7  
                          _AKNAKsend 003D                 _UART_buff_modulo_inc 0D38  
                            _calc_CS 0041                              __pcinit 0A84  
                    __size_of_memset 002C                              __ramtop 0600  
                   i2UART_buff_get@c 000B                              __ptext0 0E70  
                            __ptext1 0E98                              __ptext2 0C40  
                            __ptext3 03FA                              __ptext4 0262  
                            __ptext5 0CDC                              __ptext6 0560  
                            __ptext7 0E18                              __ptext8 0C76  
                            __ptext9 0794                            _T0CONbits 000FD5  
                   i2UART_buff_put@c 0009           cobs_encode@dst_buf_end_ptr 00AA  
          __end_of_Receive_available 0E44                  cobs_encode@src_byte 00A9  
                 _EUSART1_Initialize 0C04                     ?i2_UART_buff_get 0007  
                   ?i2_UART_buff_put 0007                 end_of_initialization 0AFE  
                          Delay@wait 001B                  ?_EUSART1_Initialize 0001  
                    cobs_encode@F180 0067                              memset@c 001D  
                            memset@n 001F                              memset@p 0021  
                      __Lmediumconst 0000                           ??_sendData 00B7  
                    receiveData@Data 00C0                ?_UART_buff_modulo_inc 001B  
               __size_of_updateComms 0010                              postdec1 000FE5  
                            postdec2 000FDD                              postinc0 000FEE  
                            postinc2 000FDE                           _respondECU 0C40  
                   begin@stufftosend 00AC                 ??_EUSART1_Initialize 0025  
                  cobs_decode@result 00B2               cobs_decode@src_end_ptr 00A7  
                          _PORTAbits 000F80                            _PORTCbits 000F82  
                          _PORTDbits 000F83               _dataAdressErrorCounter 006C  
                         _rx_address 003C                        ??_cobs_decode 0023  
                      ??_cobs_encode 0023                            _TRISAbits 000F92  
                          _TRISCbits 000F94                            _TRISDbits 000F95  
                     sendData@result 0541                         begin@maxSize 00A9  
              i2UART_buff_size@_this 0001                       _UART_buff_init 0DAA  
                     _UART_buff_size 0E44                         ??_ReadFaults 001B  
                          _GetFaults 0E18                        _moduleAddress 0040  
               _timer0ReloadVal16bit 0026         __end_of_INTERRUPT_Initialize 0E18  
                    _crcErrorCounter 002A                        __pidataCOMRAM 0EC0  
                  __size_of_TMR0_ISR 001A                       __end_of_memset 0D38  
                       receiveData@i 00BE           __size_of_Receive_available 0016  
                start_initialization 0A84             __size_of_TMR0_Initialize 001E  
                 __end_of_ReadFaults 0960                  __end_of_cobs_decode 0262  
                  __size_of_ComStart 0058               __end_of_UART_buff_init 0DC8  
                     UART_buff_get@c 0025               __end_of_UART_buff_size 0E5A  
                __end_of_cobs_encode 03FA                         ?_Receive_get 0001  
                     UART_buff_put@c 0023             __end_ofi2_UART_buff_size 0E70  
             ??_UART_buff_modulo_inc 001F                           ?_GetFaults 0001  
                           CRC8@data 001B                    __size_of_Send_put 0030  
                        ?_respondECU 0001                          __pdataBANK0 00C1  
                           ??_memset 0021                          __pbssCOMRAM 0026  
      __size_of_EUSART1_Transmit_ISR 0032                        __pcstackBANK0 00A7  
                      __pcstackBANK5 0500                         _Receive_peek 000000  
                UART_buff_init@_this 0023                      ?_UART_buff_init 0023  
                    ?_UART_buff_size 001B         __size_of_EUSART1_Receive_ISR 001E  
                      ??_receiveData 00B5                           sendData@CS 0540  
              cobs_encode@search_len 00AC             __size_of_TMR0_StartTimer 0004  
             __size_of_UART_buff_get 0092               __size_of_UART_buff_put 011A  
                           ?_SetTime 0001                    __size_of_sendData 0166  
                       GetFaults@num 001B                            __pintcode 0008  
       ??_INTERRUPT_InterruptManager 000D                 i2UART_buff_get@_this 0007  
                           _BAUD1CON 000FB8                       __size_of_Delay 0034  
                        _cobs_decode 00A4                          _cobs_encode 0262  
             sendData@DataTableIndex 00B6                       __size_of_Start 0056  
                     __size_of_begin 0002          _COBS_ENCODE_DST_BUF_LEN_MAX 00C3  
                __size_of_respondECU 0036                 _INTERRUPT_Initialize 0E00  
                 cobs_encode@src_len 0021                   cobs_encode@src_ptr 001F  
                       _receiveArray 009D                    ??_TMR0_Initialize 001B  
                           _LATAbits 000F89                             _LATDbits 000F8C  
                UART_buff_size@_this 001B                             _IPR1bits 000F9F  
                           _IPR2bits 000FA2                             _PIE1bits 000F9D  
                           i2u124_40 0A10                             i2u132_40 0CC4  
__size_of_INTERRUPT_InterruptManager 0098                             _PIR1bits 000F9E  
                        ??_GetFaults 001B                  begin@stuffavailable 00B0  
                           _RCONbits 000FD0                     __CFG_WDTPS$32768 000000  
                __end_of_receiveData 0884                             _TMR0_ISR 0DE6  
                       _input_buffer 0100                            _rx_buffer 0300  
         cobs_decode@dst_buf_end_ptr 00A9                 i2UART_buff_put@_this 0007  
                      _UART_buff_get 0960                        _UART_buff_put 0560  
                  sendData@COBSArray 0500        cobs_encode@dst_code_write_ptr 00AD  
                           _ComStart 0B0C             ??i2_UART_buff_modulo_inc 0005  
                          copy_data0 0A98                ?_INTERRUPT_Initialize 0001  
                 sendData@ComandByte 00B4                    _sendStructAddress 002E  
                           _ByteHigh 003B             __size_ofi2_UART_buff_get 0092  
           __size_ofi2_UART_buff_put 011A                        ??_updateComms 0026  
               __size_of_Receive_get 000E                             __Hrparam 0000  
                           _Send_put 0CDC                             __Lrparam 0000  
                 __CFG_BOREN$SBORDIS 000000                     __size_of_SetTime 0014  
                  __CFG_P2BMX$PORTD2 000000                    ??_TMR0_StartTimer 001B  
        __size_of_EUSART1_Initialize 003C                  begin@stufftoreceive 00AE  
                     ?_UART_buff_get 0021                       ?_UART_buff_put 0021  
                        CRC8@extract 001F                            sendData@i 0544  
                           __ptext10 00A4                             __ptext11 0EA8  
                           __ptext20 0E00                             __ptext12 0960  
                           __ptext21 0B0C                             __ptext13 0D38  
                           __ptext30 0CAA                             __ptext22 0EBE  
                           __ptext14 0E2E                             __ptext31 0E5A  
                           __ptext23 0C04                             __ptext15 0E44  
                           __ptext32 09F2                             __ptext24 0DAA  
                           __ptext16 0BBA                             __ptext33 0DC8  
                           __ptext25 0D0C                             __ptext17 0B64  
                           __ptext34 067A                             __ptext26 0E84  
                           __ptext18 0D8C                             __ptext35 0D62  
                           __ptext27 0884                             __ptext19 0EBA  
                           __ptext36 0000                             __ptext29 0DE6  
                      __size_of_CRC8 004A                             begin@ptr 00A7  
            EUSART1_Receive_ISR@data 000C                        _returnAddress 003F  
                      __size_of_main 0014                    cobs_encode@result 00B1  
                        _receiveData 0794                       _Transmit_stall 0044  
                           _sendData 03FA                    ?i2_UART_buff_size 0001  
                  sendData@DataLenth 053F                    sendData@DataTable 00B5  
                         _RC1STAbits 000FAB                         ??_respondECU 0026  
                       _ProcessArray 006E                   ??i2_UART_buff_size 0003  
                           int$flags 0045                         _serial_write 0038  
                __end_of_updateComms 0EA8   __end_of_INTERRUPT_InterruptManager 00A0  
         _INTERRUPT_InterruptManager 0008                  _EUSART1_Receive_ISR 0DC8  
                  receiveData@result 00BB                           _INTCONbits 000FF2  
          UART_buff_modulo_inc@value 001B                     ??_UART_buff_init 0025  
                   ??_UART_buff_size 001D               ??_INTERRUPT_Initialize 001B  
                           memset@p1 001B                     _serial_available 0034  
    __size_ofi2_UART_buff_modulo_inc 002A                             intlevel2 0000  
                cobs_decode@len_code 00B1                   __end_of_respondECU 0C76  
               ?_EUSART1_Receive_ISR 0001                         cobs_decode@i 00AC  
       __end_of_EUSART1_Transmit_ISR 0CDC                          _ring_buffer 0400  
                  sendData@SendArray 051E                    ??i2_UART_buff_get 0009  
                        _serial_peek 0032                          _serial_read 0036  
                  ??i2_UART_buff_put 000A                  cobs_decode@src_byte 00AB  
      __size_of_UART_buff_modulo_inc 002A                      ??_UART_buff_get 0023  
                    ??_UART_buff_put 0024                      _TMR0_Initialize 0D8C  
                       ?_cobs_decode 001B                         ?_cobs_encode 001B  
                  __CFG_T3CMX$PORTC0 000000                       _maxDataAddress 003E  
                 cobs_decode@src_len 0021                   cobs_decode@src_ptr 001F  
              ??_EUSART1_Receive_ISR 000C                    __CFG_FOSC$INTIO67 000000  
                        _updateComms 0E98  
