
# 1 "COBS.c"

# 4 "C:\Program Files (x86)\Microchip\xc8\v1.40\include\__size_t.h"
typedef unsigned size_t;

# 7 "C:\Program Files (x86)\Microchip\xc8\v1.40\include\stdlib.h"
typedef unsigned short wchar_t;

# 15
typedef struct {
int rem;
int quot;
} div_t;
typedef struct {
unsigned rem;
unsigned quot;
} udiv_t;
typedef struct {
long quot;
long rem;
} ldiv_t;
typedef struct {
unsigned long quot;
unsigned long rem;
} uldiv_t;

# 53
extern double atof(const char *);
extern double strtod(const char *, const char **);
extern int atoi(const char *);
extern unsigned xtoi(const char *);
extern long atol(const char *);
extern long strtol(const char *, char **, int);

extern int rand(void);
extern void srand(unsigned int);
extern void * calloc(size_t, size_t);
extern div_t div(int numer, int denom);
extern udiv_t udiv(unsigned numer, unsigned denom);
extern ldiv_t ldiv(long numer, long denom);
extern uldiv_t uldiv(unsigned long numer,unsigned long denom);
extern unsigned long _lrotl(unsigned long value, unsigned int shift);
extern unsigned long _lrotr(unsigned long value, unsigned int shift);
extern unsigned int _rotl(unsigned int value, unsigned int shift);
extern unsigned int _rotr(unsigned int value, unsigned int shift);




extern void * malloc(size_t);
extern void free(void *);
extern void * realloc(void *, size_t);


# 13 "C:\Program Files (x86)\Microchip\xc8\v1.40\include\xc8debug.h"
#pragma intrinsic(__builtin_software_breakpoint)
extern void __builtin_software_breakpoint(void);

# 86 "C:\Program Files (x86)\Microchip\xc8\v1.40\include\stdlib.h"
extern int atexit(void (*)(void));
extern char * getenv(const char *);
extern char ** environ;
extern int system(char *);
extern void qsort(void *, size_t, size_t, int (*)(const void *, const void *));
extern void * bsearch(const void *, void *, size_t, size_t, int(*)(const void *, const void *));
extern int abs(int);
extern long labs(long);

extern char * itoa(char * buf, int val, int base);
extern char * utoa(char * buf, unsigned val, int base);




extern char * ltoa(char * buf, long val, int base);
extern char * ultoa(char * buf, unsigned long val, int base);

extern char * ftoa(float f, int * status);

# 13 "C:\Program Files (x86)\Microchip\xc8\v1.40\include\stdint.h"
typedef signed char int8_t;

# 20
typedef signed int int16_t;

# 28
typedef signed short long int int24_t;

# 36
typedef signed long int int32_t;

# 43
typedef unsigned char uint8_t;

# 49
typedef unsigned int uint16_t;

# 56
typedef unsigned short long int uint24_t;

# 63
typedef unsigned long int uint32_t;

# 71
typedef signed char int_least8_t;

# 78
typedef signed int int_least16_t;

# 90
typedef signed short long int int_least24_t;

# 98
typedef signed long int int_least32_t;

# 105
typedef unsigned char uint_least8_t;

# 111
typedef unsigned int uint_least16_t;

# 121
typedef unsigned short long int uint_least24_t;

# 128
typedef unsigned long int uint_least32_t;

# 137
typedef signed char int_fast8_t;

# 144
typedef signed int int_fast16_t;

# 156
typedef signed short long int int_fast24_t;

# 164
typedef signed long int int_fast32_t;

# 171
typedef unsigned char uint_fast8_t;

# 177
typedef unsigned int uint_fast16_t;

# 187
typedef unsigned short long int uint_fast24_t;

# 194
typedef unsigned long int uint_fast32_t;

# 200
typedef int32_t intmax_t;




typedef uint32_t uintmax_t;




typedef int16_t intptr_t;




typedef uint16_t uintptr_t;

# 33 "cobs.h"
typedef enum
{
COBS_ENCODE_OK = 0x00,
COBS_ENCODE_NULL_POINTER = 0x01,
COBS_ENCODE_OUT_BUFFER_OVERFLOW = 0x02
} cobs_encode_status;

typedef struct
{
size_t out_len;
cobs_encode_status status;
} cobs_encode_result;


typedef enum
{
COBS_DECODE_OK = 0x00,
COBS_DECODE_NULL_POINTER = 0x01,
COBS_DECODE_OUT_BUFFER_OVERFLOW = 0x02,
COBS_DECODE_ZERO_BYTE_IN_INPUT = 0x04,
COBS_DECODE_INPUT_TOO_SHORT = 0x08
} cobs_decode_status;

typedef struct
{
size_t out_len;
cobs_decode_status status;
} cobs_decode_result;

# 71
cobs_encode_result cobs_encode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len);
cobs_decode_result cobs_decode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len);

# 29 "COBS.c"
cobs_encode_result cobs_encode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
cobs_encode_result result = { 0, COBS_ENCODE_OK };
const uint8_t * src_end_ptr = src_ptr + src_len;
uint8_t * dst_buf_end_ptr = dst_buf_ptr + dst_buf_len;
uint8_t * dst_code_write_ptr = dst_buf_ptr;
uint8_t * dst_write_ptr = dst_code_write_ptr + 1;
uint8_t src_byte = 0;
uint8_t search_len = 1;



if ((dst_buf_ptr == (0)) || (src_ptr == (0)))
{
result.status = COBS_ENCODE_NULL_POINTER;
return result;
}

if (src_len != 0)
{

for (;;)
{

if (dst_write_ptr >= dst_buf_end_ptr)
{
result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
break;
}

src_byte = *src_ptr++;
if (src_byte == 0)
{

*dst_code_write_ptr = search_len;
dst_code_write_ptr = dst_write_ptr++;
search_len = 1;
if (src_ptr >= src_end_ptr)
{
break;
}
}
else
{

*dst_write_ptr++ = src_byte;
search_len++;
if (src_ptr >= src_end_ptr)
{
break;
}
if (search_len == 0xFF)
{

# 84
*dst_code_write_ptr = search_len;
dst_code_write_ptr = dst_write_ptr++;
search_len = 1;
}
}
}
}

# 96
if (dst_code_write_ptr >= dst_buf_end_ptr)
{

result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
dst_write_ptr = dst_buf_end_ptr;
}
else
{

*dst_code_write_ptr = search_len;
}


result.out_len = dst_write_ptr - dst_buf_ptr;

return result;
}


cobs_decode_result cobs_decode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
cobs_decode_result result = { 0, COBS_DECODE_OK };
const uint8_t * src_end_ptr = src_ptr + src_len;
uint8_t * dst_buf_end_ptr = dst_buf_ptr + dst_buf_len;
uint8_t * dst_write_ptr = dst_buf_ptr;
size_t remaining_bytes;
uint8_t src_byte;
uint8_t i;
uint8_t len_code;



if ((dst_buf_ptr == (0)) || (src_ptr == (0)))
{
result.status = COBS_DECODE_NULL_POINTER;
return result;
}

if (src_len != 0)
{
for (;;)
{
len_code = *src_ptr++;
if (len_code == 0)
{
result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
break;
}
len_code--;


remaining_bytes = src_end_ptr - src_ptr;
if (len_code > remaining_bytes)
{
result.status |= COBS_DECODE_INPUT_TOO_SHORT;
len_code = remaining_bytes;
}


remaining_bytes = dst_buf_end_ptr - dst_write_ptr;
if (len_code > remaining_bytes)
{
result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
len_code = remaining_bytes;
}

for (i = len_code; i != 0; i--)
{
src_byte = *src_ptr++;
if (src_byte == 0)
{
result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
}
*dst_write_ptr++ = src_byte;
}

if (src_ptr >= src_end_ptr)
{
break;
}


if (len_code != 0xFE)
{
if (dst_write_ptr >= dst_buf_end_ptr)
{
result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
break;
}
*dst_write_ptr++ = 0;
}
}
}

result.out_len = dst_write_ptr - dst_buf_ptr;

return result;
}
