

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Fri Sep 16 21:02:18 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    72                           	psect	text52,global,reloc=2,class=CODE,delta=1
    73                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    74                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    75  0000                     
    76 ;; Function _putch is unused but had its address taken
    77  0000                     
    78                           	psect	idataCOMRAM
    79  001948                     __pidataCOMRAM:
    80                           	opt stack 0
    81                           
    82                           ;initializer for _Transmit_stall
    83  001948  01                 	db	1
    84                           
    85                           	psect	mediumconst
    86  007DE6                     __pmediumconst:
    87                           	opt stack 0
    88  007DE6  00                 	db	0
    89  007DE7                     _FONTLOOKUP:
    90                           	opt stack 0
    91  007DE7  00                 	db	0
    92  007DE8  00                 	db	0
    93  007DE9  00                 	db	0
    94  007DEA  00                 	db	0
    95  007DEB  00                 	db	0
    96  007DEC  00                 	db	0
    97  007DED  00                 	db	0
    98  007DEE  5F                 	db	95
    99  007DEF  00                 	db	0
   100  007DF0  00                 	db	0
   101  007DF1  00                 	db	0
   102  007DF2  07                 	db	7
   103  007DF3  00                 	db	0
   104  007DF4  07                 	db	7
   105  007DF5  00                 	db	0
   106  007DF6  14                 	db	20
   107  007DF7  7F                 	db	127
   108  007DF8  14                 	db	20
   109  007DF9  7F                 	db	127
   110  007DFA  14                 	db	20
   111  007DFB  24                 	db	36
   112  007DFC  2A                 	db	42
   113  007DFD  7F                 	db	127
   114  007DFE  2A                 	db	42
   115  007DFF  12                 	db	18
   116  007E00  23                 	db	35
   117  007E01  13                 	db	19
   118  007E02  08                 	db	8
   119  007E03  64                 	db	100
   120  007E04  62                 	db	98
   121  007E05  36                 	db	54
   122  007E06  49                 	db	73
   123  007E07  55                 	db	85
   124  007E08  22                 	db	34
   125  007E09  50                 	db	80
   126  007E0A  00                 	db	0
   127  007E0B  05                 	db	5
   128  007E0C  03                 	db	3
   129  007E0D  00                 	db	0
   130  007E0E  00                 	db	0
   131  007E0F  00                 	db	0
   132  007E10  1C                 	db	28
   133  007E11  22                 	db	34
   134  007E12  41                 	db	65
   135  007E13  00                 	db	0
   136  007E14  00                 	db	0
   137  007E15  41                 	db	65
   138  007E16  22                 	db	34
   139  007E17  1C                 	db	28
   140  007E18  00                 	db	0
   141  007E19  14                 	db	20
   142  007E1A  08                 	db	8
   143  007E1B  3E                 	db	62
   144  007E1C  08                 	db	8
   145  007E1D  14                 	db	20
   146  007E1E  08                 	db	8
   147  007E1F  08                 	db	8
   148  007E20  3E                 	db	62
   149  007E21  08                 	db	8
   150  007E22  08                 	db	8
   151  007E23  00                 	db	0
   152  007E24  50                 	db	80
   153  007E25  30                 	db	48
   154  007E26  00                 	db	0
   155  007E27  00                 	db	0
   156  007E28  08                 	db	8
   157  007E29  08                 	db	8
   158  007E2A  08                 	db	8
   159  007E2B  08                 	db	8
   160  007E2C  08                 	db	8
   161  007E2D  00                 	db	0
   162  007E2E  60                 	db	96
   163  007E2F  60                 	db	96
   164  007E30  00                 	db	0
   165  007E31  00                 	db	0
   166  007E32  20                 	db	32
   167  007E33  10                 	db	16
   168  007E34  08                 	db	8
   169  007E35  04                 	db	4
   170  007E36  02                 	db	2
   171  007E37  3E                 	db	62
   172  007E38  51                 	db	81
   173  007E39  49                 	db	73
   174  007E3A  45                 	db	69
   175  007E3B  3E                 	db	62
   176  007E3C  00                 	db	0
   177  007E3D  42                 	db	66
   178  007E3E  7F                 	db	127
   179  007E3F  40                 	db	64
   180  007E40  00                 	db	0
   181  007E41  42                 	db	66
   182  007E42  61                 	db	97
   183  007E43  51                 	db	81
   184  007E44  49                 	db	73
   185  007E45  46                 	db	70
   186  007E46  21                 	db	33
   187  007E47  41                 	db	65
   188  007E48  45                 	db	69
   189  007E49  4B                 	db	75
   190  007E4A  31                 	db	49
   191  007E4B  18                 	db	24
   192  007E4C  14                 	db	20
   193  007E4D  12                 	db	18
   194  007E4E  7F                 	db	127
   195  007E4F  10                 	db	16
   196  007E50  27                 	db	39
   197  007E51  45                 	db	69
   198  007E52  45                 	db	69
   199  007E53  45                 	db	69
   200  007E54  39                 	db	57
   201  007E55  3C                 	db	60
   202  007E56  4A                 	db	74
   203  007E57  49                 	db	73
   204  007E58  49                 	db	73
   205  007E59  30                 	db	48
   206  007E5A  01                 	db	1
   207  007E5B  71                 	db	113
   208  007E5C  09                 	db	9
   209  007E5D  05                 	db	5
   210  007E5E  03                 	db	3
   211  007E5F  36                 	db	54
   212  007E60  49                 	db	73
   213  007E61  49                 	db	73
   214  007E62  49                 	db	73
   215  007E63  36                 	db	54
   216  007E64  06                 	db	6
   217  007E65  49                 	db	73
   218  007E66  49                 	db	73
   219  007E67  29                 	db	41
   220  007E68  1E                 	db	30
   221  007E69  00                 	db	0
   222  007E6A  36                 	db	54
   223  007E6B  36                 	db	54
   224  007E6C  00                 	db	0
   225  007E6D  00                 	db	0
   226  007E6E  00                 	db	0
   227  007E6F  56                 	db	86
   228  007E70  36                 	db	54
   229  007E71  00                 	db	0
   230  007E72  00                 	db	0
   231  007E73  08                 	db	8
   232  007E74  14                 	db	20
   233  007E75  22                 	db	34
   234  007E76  41                 	db	65
   235  007E77  00                 	db	0
   236  007E78  14                 	db	20
   237  007E79  14                 	db	20
   238  007E7A  14                 	db	20
   239  007E7B  14                 	db	20
   240  007E7C  14                 	db	20
   241  007E7D  00                 	db	0
   242  007E7E  41                 	db	65
   243  007E7F  22                 	db	34
   244  007E80  14                 	db	20
   245  007E81  08                 	db	8
   246  007E82  02                 	db	2
   247  007E83  01                 	db	1
   248  007E84  51                 	db	81
   249  007E85  09                 	db	9
   250  007E86  06                 	db	6
   251  007E87  32                 	db	50
   252  007E88  49                 	db	73
   253  007E89  79                 	db	121
   254  007E8A  41                 	db	65
   255  007E8B  3E                 	db	62
   256  007E8C  7E                 	db	126
   257  007E8D  11                 	db	17
   258  007E8E  11                 	db	17
   259  007E8F  11                 	db	17
   260  007E90  7E                 	db	126
   261  007E91  7F                 	db	127
   262  007E92  49                 	db	73
   263  007E93  49                 	db	73
   264  007E94  49                 	db	73
   265  007E95  36                 	db	54
   266  007E96  3E                 	db	62
   267  007E97  41                 	db	65
   268  007E98  41                 	db	65
   269  007E99  41                 	db	65
   270  007E9A  22                 	db	34
   271  007E9B  7F                 	db	127
   272  007E9C  41                 	db	65
   273  007E9D  41                 	db	65
   274  007E9E  22                 	db	34
   275  007E9F  1C                 	db	28
   276  007EA0  7F                 	db	127
   277  007EA1  49                 	db	73
   278  007EA2  49                 	db	73
   279  007EA3  49                 	db	73
   280  007EA4  41                 	db	65
   281  007EA5  7F                 	db	127
   282  007EA6  09                 	db	9
   283  007EA7  09                 	db	9
   284  007EA8  09                 	db	9
   285  007EA9  01                 	db	1
   286  007EAA  3E                 	db	62
   287  007EAB  41                 	db	65
   288  007EAC  49                 	db	73
   289  007EAD  49                 	db	73
   290  007EAE  7A                 	db	122
   291  007EAF  7F                 	db	127
   292  007EB0  08                 	db	8
   293  007EB1  08                 	db	8
   294  007EB2  08                 	db	8
   295  007EB3  7F                 	db	127
   296  007EB4  00                 	db	0
   297  007EB5  41                 	db	65
   298  007EB6  7F                 	db	127
   299  007EB7  41                 	db	65
   300  007EB8  00                 	db	0
   301  007EB9  20                 	db	32
   302  007EBA  40                 	db	64
   303  007EBB  41                 	db	65
   304  007EBC  3F                 	db	63
   305  007EBD  01                 	db	1
   306  007EBE  7F                 	db	127
   307  007EBF  08                 	db	8
   308  007EC0  14                 	db	20
   309  007EC1  22                 	db	34
   310  007EC2  41                 	db	65
   311  007EC3  7F                 	db	127
   312  007EC4  40                 	db	64
   313  007EC5  40                 	db	64
   314  007EC6  40                 	db	64
   315  007EC7  40                 	db	64
   316  007EC8  7F                 	db	127
   317  007EC9  02                 	db	2
   318  007ECA  0C                 	db	12
   319  007ECB  02                 	db	2
   320  007ECC  7F                 	db	127
   321  007ECD  7F                 	db	127
   322  007ECE  04                 	db	4
   323  007ECF  08                 	db	8
   324  007ED0  10                 	db	16
   325  007ED1  7F                 	db	127
   326  007ED2  3E                 	db	62
   327  007ED3  41                 	db	65
   328  007ED4  41                 	db	65
   329  007ED5  41                 	db	65
   330  007ED6  3E                 	db	62
   331  007ED7  7F                 	db	127
   332  007ED8  09                 	db	9
   333  007ED9  09                 	db	9
   334  007EDA  09                 	db	9
   335  007EDB  06                 	db	6
   336  007EDC  3E                 	db	62
   337  007EDD  41                 	db	65
   338  007EDE  51                 	db	81
   339  007EDF  21                 	db	33
   340  007EE0  5E                 	db	94
   341  007EE1  7F                 	db	127
   342  007EE2  09                 	db	9
   343  007EE3  19                 	db	25
   344  007EE4  29                 	db	41
   345  007EE5  46                 	db	70
   346  007EE6  46                 	db	70
   347  007EE7  49                 	db	73
   348  007EE8  49                 	db	73
   349  007EE9  49                 	db	73
   350  007EEA  31                 	db	49
   351  007EEB  01                 	db	1
   352  007EEC  01                 	db	1
   353  007EED  7F                 	db	127
   354  007EEE  01                 	db	1
   355  007EEF  01                 	db	1
   356  007EF0  3F                 	db	63
   357  007EF1  40                 	db	64
   358  007EF2  40                 	db	64
   359  007EF3  40                 	db	64
   360  007EF4  3F                 	db	63
   361  007EF5  1F                 	db	31
   362  007EF6  20                 	db	32
   363  007EF7  40                 	db	64
   364  007EF8  20                 	db	32
   365  007EF9  1F                 	db	31
   366  007EFA  3F                 	db	63
   367  007EFB  40                 	db	64
   368  007EFC  38                 	db	56
   369  007EFD  40                 	db	64
   370  007EFE  3F                 	db	63
   371  007EFF  63                 	db	99
   372  007F00  14                 	db	20
   373  007F01  08                 	db	8
   374  007F02  14                 	db	20
   375  007F03  63                 	db	99
   376  007F04  07                 	db	7
   377  007F05  08                 	db	8
   378  007F06  70                 	db	112
   379  007F07  08                 	db	8
   380  007F08  07                 	db	7
   381  007F09  61                 	db	97
   382  007F0A  51                 	db	81
   383  007F0B  49                 	db	73
   384  007F0C  45                 	db	69
   385  007F0D  43                 	db	67
   386  007F0E  00                 	db	0
   387  007F0F  7F                 	db	127
   388  007F10  41                 	db	65
   389  007F11  41                 	db	65
   390  007F12  00                 	db	0
   391  007F13  02                 	db	2
   392  007F14  04                 	db	4
   393  007F15  08                 	db	8
   394  007F16  10                 	db	16
   395  007F17  20                 	db	32
   396  007F18  00                 	db	0
   397  007F19  41                 	db	65
   398  007F1A  41                 	db	65
   399  007F1B  7F                 	db	127
   400  007F1C  00                 	db	0
   401  007F1D  04                 	db	4
   402  007F1E  02                 	db	2
   403  007F1F  01                 	db	1
   404  007F20  02                 	db	2
   405  007F21  04                 	db	4
   406  007F22  40                 	db	64
   407  007F23  40                 	db	64
   408  007F24  40                 	db	64
   409  007F25  40                 	db	64
   410  007F26  40                 	db	64
   411  007F27  00                 	db	0
   412  007F28  01                 	db	1
   413  007F29  02                 	db	2
   414  007F2A  04                 	db	4
   415  007F2B  00                 	db	0
   416  007F2C  20                 	db	32
   417  007F2D  54                 	db	84
   418  007F2E  54                 	db	84
   419  007F2F  54                 	db	84
   420  007F30  78                 	db	120
   421  007F31  7F                 	db	127
   422  007F32  48                 	db	72
   423  007F33  44                 	db	68
   424  007F34  44                 	db	68
   425  007F35  38                 	db	56
   426  007F36  38                 	db	56
   427  007F37  44                 	db	68
   428  007F38  44                 	db	68
   429  007F39  44                 	db	68
   430  007F3A  20                 	db	32
   431  007F3B  38                 	db	56
   432  007F3C  44                 	db	68
   433  007F3D  44                 	db	68
   434  007F3E  48                 	db	72
   435  007F3F  7F                 	db	127
   436  007F40  38                 	db	56
   437  007F41  54                 	db	84
   438  007F42  54                 	db	84
   439  007F43  54                 	db	84
   440  007F44  18                 	db	24
   441  007F45  08                 	db	8
   442  007F46  7E                 	db	126
   443  007F47  09                 	db	9
   444  007F48  01                 	db	1
   445  007F49  02                 	db	2
   446  007F4A  0C                 	db	12
   447  007F4B  52                 	db	82
   448  007F4C  52                 	db	82
   449  007F4D  52                 	db	82
   450  007F4E  3E                 	db	62
   451  007F4F  7F                 	db	127
   452  007F50  08                 	db	8
   453  007F51  04                 	db	4
   454  007F52  04                 	db	4
   455  007F53  78                 	db	120
   456  007F54  00                 	db	0
   457  007F55  44                 	db	68
   458  007F56  7D                 	db	125
   459  007F57  40                 	db	64
   460  007F58  00                 	db	0
   461  007F59  20                 	db	32
   462  007F5A  40                 	db	64
   463  007F5B  44                 	db	68
   464  007F5C  3D                 	db	61
   465  007F5D  00                 	db	0
   466  007F5E  7F                 	db	127
   467  007F5F  10                 	db	16
   468  007F60  28                 	db	40
   469  007F61  44                 	db	68
   470  007F62  00                 	db	0
   471  007F63  00                 	db	0
   472  007F64  41                 	db	65
   473  007F65  7F                 	db	127
   474  007F66  40                 	db	64
   475  007F67  00                 	db	0
   476  007F68  7C                 	db	124
   477  007F69  04                 	db	4
   478  007F6A  18                 	db	24
   479  007F6B  04                 	db	4
   480  007F6C  78                 	db	120
   481  007F6D  7C                 	db	124
   482  007F6E  08                 	db	8
   483  007F6F  04                 	db	4
   484  007F70  04                 	db	4
   485  007F71  78                 	db	120
   486  007F72  38                 	db	56
   487  007F73  44                 	db	68
   488  007F74  44                 	db	68
   489  007F75  44                 	db	68
   490  007F76  38                 	db	56
   491  007F77  7C                 	db	124
   492  007F78  14                 	db	20
   493  007F79  14                 	db	20
   494  007F7A  14                 	db	20
   495  007F7B  08                 	db	8
   496  007F7C  08                 	db	8
   497  007F7D  14                 	db	20
   498  007F7E  14                 	db	20
   499  007F7F  18                 	db	24
   500  007F80  7C                 	db	124
   501  007F81  7C                 	db	124
   502  007F82  08                 	db	8
   503  007F83  04                 	db	4
   504  007F84  04                 	db	4
   505  007F85  08                 	db	8
   506  007F86  48                 	db	72
   507  007F87  54                 	db	84
   508  007F88  54                 	db	84
   509  007F89  54                 	db	84
   510  007F8A  20                 	db	32
   511  007F8B  04                 	db	4
   512  007F8C  3F                 	db	63
   513  007F8D  44                 	db	68
   514  007F8E  40                 	db	64
   515  007F8F  20                 	db	32
   516  007F90  3C                 	db	60
   517  007F91  40                 	db	64
   518  007F92  40                 	db	64
   519  007F93  20                 	db	32
   520  007F94  7C                 	db	124
   521  007F95  1C                 	db	28
   522  007F96  20                 	db	32
   523  007F97  40                 	db	64
   524  007F98  20                 	db	32
   525  007F99  1C                 	db	28
   526  007F9A  3C                 	db	60
   527  007F9B  40                 	db	64
   528  007F9C  30                 	db	48
   529  007F9D  40                 	db	64
   530  007F9E  3C                 	db	60
   531  007F9F  44                 	db	68
   532  007FA0  28                 	db	40
   533  007FA1  10                 	db	16
   534  007FA2  28                 	db	40
   535  007FA3  44                 	db	68
   536  007FA4  0C                 	db	12
   537  007FA5  50                 	db	80
   538  007FA6  50                 	db	80
   539  007FA7  50                 	db	80
   540  007FA8  3C                 	db	60
   541  007FA9  44                 	db	68
   542  007FAA  64                 	db	100
   543  007FAB  54                 	db	84
   544  007FAC  4C                 	db	76
   545  007FAD  44                 	db	68
   546  007FAE  00                 	db	0
   547  007FAF  08                 	db	8
   548  007FB0  36                 	db	54
   549  007FB1  41                 	db	65
   550  007FB2  00                 	db	0
   551  007FB3  00                 	db	0
   552  007FB4  00                 	db	0
   553  007FB5  7F                 	db	127
   554  007FB6  00                 	db	0
   555  007FB7  00                 	db	0
   556  007FB8  00                 	db	0
   557  007FB9  41                 	db	65
   558  007FBA  36                 	db	54
   559  007FBB  08                 	db	8
   560  007FBC  00                 	db	0
   561  007FBD  10                 	db	16
   562  007FBE  08                 	db	8
   563  007FBF  08                 	db	8
   564  007FC0  10                 	db	16
   565  007FC1  08                 	db	8
   566  007FC2  78                 	db	120
   567  007FC3  46                 	db	70
   568  007FC4  41                 	db	65
   569  007FC5  46                 	db	70
   570  007FC6  78                 	db	120
   571  007FC7                     __end_of_FONTLOOKUP:
   572                           	opt stack 0
   573  007FC7                     _dpowers:
   574                           	opt stack 0
   575  007FC7  0001               	dw	1
   576  007FC9  000A               	dw	10
   577  007FCB  0064               	dw	100
   578  007FCD  03E8               	dw	1000
   579  007FCF  2710               	dw	10000
   580  007FD1                     __end_of_dpowers:
   581                           	opt stack 0
   582  007FD1  43                 	db	67	;'C'
   583  007FD2  61                 	db	97	;'a'
   584  007FD3  72                 	db	114	;'r'
   585  007FD4  20                 	db	32
   586  007FD5  43                 	db	67	;'C'
   587  007FD6  68                 	db	104	;'h'
   588  007FD7  61                 	db	97	;'a'
   589  007FD8  72                 	db	114	;'r'
   590  007FD9  67                 	db	103	;'g'
   591  007FDA  65                 	db	101	;'e'
   592  007FDB  72                 	db	114	;'r'
   593  007FDC  00                 	db	0
   594  007FDD                     STR_9:
   595  007FDD  25                 	db	37
   596  007FDE  30                 	db	48	;'0'
   597  007FDF  33                 	db	51	;'3'
   598  007FE0  64                 	db	100	;'d'
   599  007FE1  2C                 	db	44
   600  007FE2  45                 	db	69	;'E'
   601  007FE3  0A                 	db	10
   602  007FE4  00                 	db	0
   603  007FE5  28                 	db	40
   604  007FE6  6E                 	db	110	;'n'
   605  007FE7  75                 	db	117	;'u'
   606  007FE8  6C                 	db	108	;'l'
   607  007FE9  6C                 	db	108	;'l'
   608  007FEA  29                 	db	41
   609  007FEB  00                 	db	0
   610  007FEC  4E                 	db	78	;'N'
   611  007FED  6F                 	db	111	;'o'
   612  007FEE  20                 	db	32
   613  007FEF  42                 	db	66	;'B'
   614  007FF0  4D                 	db	77	;'M'
   615  007FF1  4D                 	db	77	;'M'
   616  007FF2  00                 	db	0
   617  007FF3                     STR_5:
   618  007FF3  25                 	db	37
   619  007FF4  30                 	db	48	;'0'
   620  007FF5  33                 	db	51	;'3'
   621  007FF6  64                 	db	100	;'d'
   622  007FF7  2C                 	db	44
   623  007FF8  00                 	db	0
   624  007FF9                     STR_3:
   625  007FF9  4D                 	db	77	;'M'
   626  007FFA  2C                 	db	44
   627  007FFB  00                 	db	0
   628  007FFC                     STR_4:
   629  007FFC  25                 	db	37
   630  007FFD  73                 	db	115	;'s'
   631  007FFE  00                 	db	0
   632  0000                     
   633                           ; #config settings
   634  007FFF  00                 	db	0	; dummy byte at the end
   635  0000                     
   636                           	psect	nvCOMRAM
   637  00003A                     __pnvCOMRAM:
   638                           	opt stack 0
   639  00003A                     _serial_available:
   640                           	opt stack 0
   641  00003A                     	ds	2
   642  00003C                     _serial_read:
   643                           	opt stack 0
   644  00003C                     	ds	2
   645  00003E                     _serial_write:
   646                           	opt stack 0
   647  00003E                     	ds	2
   648  000040                     _timer0ReloadVal16bit:
   649                           	opt stack 0
   650  000040                     	ds	2
   651  000042                     _eusart1TxBufferRemaining:
   652                           	opt stack 0
   653  000042                     	ds	1
   654  000043                     _moduleAddress:
   655                           	opt stack 0
   656  000043                     	ds	1
   657                           
   658                           	psect	nvBANK0
   659  0000ED                     __pnvBANK0:
   660                           	opt stack 0
   661  0000ED                     _receiveArrayAddress:
   662                           	opt stack 0
   663  0000ED                     	ds	2
   664  0000EF                     _sendStructAddress:
   665                           	opt stack 0
   666  0000EF                     	ds	2
   667  0000F1                     _serial_peek:
   668                           	opt stack 0
   669  0000F1                     	ds	2
   670  0000F3                     _AKNAKsend:
   671                           	opt stack 0
   672  0000F3                     	ds	1
   673  0000F4                     _maxDataAddress:
   674                           	opt stack 0
   675  0000F4                     	ds	1
   676  0000                     _ANSELA	set	3896
   677  0000                     _ANSELB	set	3897
   678  0000                     _ANSELC	set	3898
   679  0000                     _ANSELD	set	3899
   680  0000                     _ANSELE	set	3900
   681  0000                     _ANSA3	set	31171
   682  0000                     _ANSB0	set	31176
   683  0000                     _ANSB1	set	31177
   684  0000                     _BAUD1CON	set	4024
   685  0000                     _BAUD2CON	set	3952
   686  0000                     _INTCON2bits	set	4081
   687  0000                     _INTCONbits	set	4082
   688  0000                     _IPR1bits	set	3999
   689  0000                     _IPR3bits	set	4005
   690  0000                     _LATA	set	3977
   691  0000                     _LATB	set	3978
   692  0000                     _LATBbits	set	3978
   693  0000                     _LATC	set	3979
   694  0000                     _LATD	set	3980
   695  0000                     _LATDbits	set	3980
   696  0000                     _LATE	set	3981
   697  0000                     _OSCCON	set	4051
   698  0000                     _OSCCON2	set	4050
   699  0000                     _OSCTUNE	set	3995
   700  0000                     _PIE1bits	set	3997
   701  0000                     _PIE3bits	set	4003
   702  0000                     _PIR1bits	set	3998
   703  0000                     _PIR3bits	set	4004
   704  0000                     _RC1STA	set	4011
   705  0000                     _RC1STAbits	set	4011
   706  0000                     _RC2STA	set	3953
   707  0000                     _RC2STAbits	set	3953
   708  0000                     _RCONbits	set	4048
   709  0000                     _RCREG1	set	4014
   710  0000                     _RCREG2	set	3956
   711  0000                     _SPBRG1	set	4015
   712  0000                     _SPBRG2	set	3957
   713  0000                     _SPBRGH1	set	4016
   714  0000                     _SPBRGH2	set	3958
   715  0000                     _SSP1ADD	set	4040
   716  0000                     _SSP1BUF	set	4041
   717  0000                     _SSP1CON1	set	4038
   718  0000                     _SSP1CON1bits	set	4038
   719  0000                     _SSP1STAT	set	4039
   720  0000                     _SSP1STATbits	set	4039
   721  0000                     _T0CON	set	4053
   722  0000                     _T0CONbits	set	4053
   723  0000                     _TMR0H	set	4055
   724  0000                     _TMR0L	set	4054
   725  0000                     _TRISA	set	3986
   726  0000                     _TRISAbits	set	3986
   727  0000                     _TRISB	set	3987
   728  0000                     _TRISBbits	set	3987
   729  0000                     _TRISC	set	3988
   730  0000                     _TRISCbits	set	3988
   731  0000                     _TRISD	set	3989
   732  0000                     _TRISDbits	set	3989
   733  0000                     _TRISE	set	3990
   734  0000                     _TX1STA	set	4012
   735  0000                     _TX2STA	set	3954
   736  0000                     _TXREG1	set	4013
   737  0000                     _TXREG2	set	3955
   738  0000                     _WPUB	set	3937
   739  0000                     _LATA3	set	31819
   740  0000                     _LATA7	set	31823
   741  0000                     _LATB0	set	31824
   742  0000                     _LATB1	set	31825
   743  0000                     _LATB3	set	31827
   744  0000                     _LATB4	set	31828
   745  0000                     _LATB5	set	31829
   746  0000                     _LATC0	set	31832
   747  0000                     _LATC1	set	31833
   748  0000                     _LATD0	set	31840
   749  0000                     _LATD3	set	31843
   750  0000                     _TRISB0	set	31896
   751  0000                     _TRISB1	set	31897
   752  0000                     _TRISD0	set	31912
   753  0000                     _TRISD2	set	31914
   754  0000                     _TRISD3	set	31915
   755                           
   756                           	psect	cinit
   757  001292                     __pcinit:
   758                           	opt stack 0
   759  001292                     start_initialization:
   760                           	opt stack 0
   761  001292                     __initialization:
   762                           	opt stack 0
   763                           
   764                           ; Clear objects allocated to BANK4 (206 bytes)
   765  001292  EE04  F000         	lfsr	0,__pbssBANK4
   766  001296  0ECE               	movlw	206
   767  001298                     clear_0:
   768  001298  6AEE               	clrf	postinc0,c
   769  00129A  06E8               	decf	wreg,f,c
   770  00129C  E1FD               	bnz	clear_0
   771                           
   772                           ; Clear objects allocated to BANK3 (206 bytes)
   773  00129E  EE03  F000         	lfsr	0,__pbssBANK3
   774  0012A2  0ECE               	movlw	206
   775  0012A4                     clear_1:
   776  0012A4  6AEE               	clrf	postinc0,c
   777  0012A6  06E8               	decf	wreg,f,c
   778  0012A8  E1FD               	bnz	clear_1
   779                           
   780                           ; Clear objects allocated to BANK2 (200 bytes)
   781  0012AA  EE02  F000         	lfsr	0,__pbssBANK2
   782  0012AE  0EC8               	movlw	200
   783  0012B0                     clear_2:
   784  0012B0  6AEE               	clrf	postinc0,c
   785  0012B2  06E8               	decf	wreg,f,c
   786  0012B4  E1FD               	bnz	clear_2
   787                           
   788                           ; Clear objects allocated to BANK1 (256 bytes)
   789  0012B6  EE01  F000         	lfsr	0,__pbssBANK1
   790  0012BA  EE11 F000          	lfsr	1,256
   791  0012BE                     clear_3:
   792  0012BE  6AEE               	clrf	postinc0,c
   793  0012C0  50E5               	movf	postdec1,w,c
   794  0012C2  50E1               	movf	fsr1l,w,c
   795  0012C4  E1FC               	bnz	clear_3
   796  0012C6  50E2               	movf	fsr1h,w,c
   797  0012C8  E1FA               	bnz	clear_3
   798                           
   799                           ; Clear objects allocated to BANK0 (114 bytes)
   800  0012CA  EE00  F060         	lfsr	0,__pbssBANK0
   801  0012CE  0E72               	movlw	114
   802  0012D0                     clear_4:
   803  0012D0  6AEE               	clrf	postinc0,c
   804  0012D2  06E8               	decf	wreg,f,c
   805  0012D4  E1FD               	bnz	clear_4
   806                           
   807                           ; Clear objects allocated to COMRAM (20 bytes)
   808  0012D6  EE00  F026         	lfsr	0,__pbssCOMRAM
   809  0012DA  0E14               	movlw	20
   810  0012DC                     clear_5:
   811  0012DC  6AEE               	clrf	postinc0,c
   812  0012DE  06E8               	decf	wreg,f,c
   813  0012E0  E1FD               	bnz	clear_5
   814                           
   815                           ; Initialize objects allocated to COMRAM (1 bytes)
   816                           ; load TBLPTR registers with __pidataCOMRAM
   817  0012E2  0E48               	movlw	low __pidataCOMRAM
   818  0012E4  6EF6               	movwf	tblptrl,c
   819  0012E6  0E19               	movlw	high __pidataCOMRAM
   820  0012E8  6EF7               	movwf	tblptrh,c
   821  0012EA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   822  0012EC  6EF8               	movwf	tblptru,c
   823  0012EE  0009               	tblrd		*+	;fetch initializer
   824  0012F0  CFF5 F044          	movff	tablat,__pdataCOMRAM
   825  0012F4                     end_of_initialization:
   826                           	opt stack 0
   827  0012F4                     __end_of__initialization:
   828                           	opt stack 0
   829  0012F4  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   830  0012F6  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   831  0012F8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   832  0012FA  6EF8               	movwf	tblptru,c
   833  0012FC  0100               	movlb	0
   834  0012FE  EFEC  F00B         	goto	_main	;jump to C main() function
   835                           tblptru	equ	0xFF8
   836                           tblptrh	equ	0xFF7
   837                           tblptrl	equ	0xFF6
   838                           tablat	equ	0xFF5
   839                           postinc0	equ	0xFEE
   840                           wreg	equ	0xFE8
   841                           postdec1	equ	0xFE5
   842                           fsr1h	equ	0xFE2
   843                           fsr1l	equ	0xFE1
   844                           
   845                           	psect	bssCOMRAM
   846  000026                     __pbssCOMRAM:
   847                           	opt stack 0
   848  000026                     _time:
   849                           	opt stack 0
   850  000026                     	ds	4
   851  00002A                     _Start:
   852                           	opt stack 0
   853  00002A                     	ds	2
   854  00002C                     _group:
   855                           	opt stack 0
   856  00002C                     	ds	2
   857  00002E                     _PowerOn:
   858                           	opt stack 0
   859  00002E                     	ds	1
   860  00002F                     _calc_CS:
   861                           	opt stack 0
   862  00002F                     	ds	1
   863  000030                     _eusart1RxCount:
   864                           	opt stack 0
   865  000030                     	ds	1
   866  000031                     _eusart1RxHead:
   867                           	opt stack 0
   868  000031                     	ds	1
   869  000032                     _eusart1RxTail:
   870                           	opt stack 0
   871  000032                     	ds	1
   872  000033                     _eusart1TxHead:
   873                           	opt stack 0
   874  000033                     	ds	1
   875  000034                     _eusart1TxTail:
   876                           	opt stack 0
   877  000034                     	ds	1
   878  000035                     _i:
   879                           	opt stack 0
   880  000035                     	ds	1
   881  000036                     _returnAddress:
   882                           	opt stack 0
   883  000036                     	ds	1
   884  000037                     _rx_address:
   885                           	opt stack 0
   886  000037                     	ds	1
   887  000038                     _rx_array_inx:
   888                           	opt stack 0
   889  000038                     	ds	1
   890  000039                     _rx_len:
   891                           	opt stack 0
   892  000039                     	ds	1
   893                           tblptru	equ	0xFF8
   894                           tblptrh	equ	0xFF7
   895                           tblptrl	equ	0xFF6
   896                           tablat	equ	0xFF5
   897                           postinc0	equ	0xFEE
   898                           wreg	equ	0xFE8
   899                           postdec1	equ	0xFE5
   900                           fsr1h	equ	0xFE2
   901                           fsr1l	equ	0xFE1
   902                           
   903                           	psect	dataCOMRAM
   904  000044                     __pdataCOMRAM:
   905                           	opt stack 0
   906  000044                     _Transmit_stall:
   907                           	opt stack 0
   908  000044                     	ds	1
   909                           tblptru	equ	0xFF8
   910                           tblptrh	equ	0xFF7
   911                           tblptrl	equ	0xFF6
   912                           tablat	equ	0xFF5
   913                           postinc0	equ	0xFEE
   914                           wreg	equ	0xFE8
   915                           postdec1	equ	0xFE5
   916                           fsr1h	equ	0xFE2
   917                           fsr1l	equ	0xFE1
   918                           
   919                           	psect	bssBANK0
   920  000060                     __pbssBANK0:
   921                           	opt stack 0
   922  000060                     _ddata:
   923                           	opt stack 0
   924  000060                     	ds	11
   925  00006B                     _eusart1RxBuffer:
   926                           	opt stack 0
   927  00006B                     	ds	8
   928  000073                     _eusart1TxBuffer:
   929                           	opt stack 0
   930  000073                     	ds	8
   931  00007B                     _LEDtime:
   932                           	opt stack 0
   933  00007B                     	ds	4
   934  00007F                     _lastLEDTime:
   935                           	opt stack 0
   936  00007F                     	ds	4
   937  000083                     _talkTime:
   938                           	opt stack 0
   939  000083                     	ds	4
   940  000087                     _Charge:
   941                           	opt stack 0
   942  000087                     	ds	2
   943  000089                     _Current:
   944                           	opt stack 0
   945  000089                     	ds	2
   946  00008B                     _Duty:
   947                           	opt stack 0
   948  00008B                     	ds	2
   949  00008D                     _HeatsinkTemp:
   950                           	opt stack 0
   951  00008D                     	ds	2
   952  00008F                     _VoltOut:
   953                           	opt stack 0
   954  00008F                     	ds	2
   955  000091                     _addressErrorCounter:
   956                           	opt stack 0
   957  000091                     	ds	2
   958  000093                     _alignErrorCounter:
   959                           	opt stack 0
   960  000093                     	ds	2
   961  000095                     _crcErrorCounter:
   962                           	opt stack 0
   963  000095                     	ds	2
   964  000097                     _dataAdressErrorCounter:
   965                           	opt stack 0
   966  000097                     	ds	2
   967  000099                     _ChargerData:
   968                           	opt stack 0
   969  000099                     	ds	40
   970  0000C1                     _crc_buffer:
   971                           	opt stack 0
   972  0000C1                     	ds	17
   973                           tblptru	equ	0xFF8
   974                           tblptrh	equ	0xFF7
   975                           tblptrl	equ	0xFF6
   976                           tablat	equ	0xFF5
   977                           postinc0	equ	0xFEE
   978                           wreg	equ	0xFE8
   979                           postdec1	equ	0xFE5
   980                           fsr1h	equ	0xFE2
   981                           fsr1l	equ	0xFE1
   982                           
   983                           	psect	bssBANK1
   984  000100                     __pbssBANK1:
   985                           	opt stack 0
   986  000100                     _ring_buffer:
   987                           	opt stack 0
   988  000100                     	ds	206
   989  0001CE                     _receiveArray:
   990                           	opt stack 0
   991  0001CE                     	ds	50
   992                           tblptru	equ	0xFF8
   993                           tblptrh	equ	0xFF7
   994                           tblptrl	equ	0xFF6
   995                           tablat	equ	0xFF5
   996                           postinc0	equ	0xFEE
   997                           wreg	equ	0xFE8
   998                           postdec1	equ	0xFE5
   999                           fsr1h	equ	0xFE2
  1000                           fsr1l	equ	0xFE1
  1001                           
  1002                           	psect	bssBANK2
  1003  000200                     __pbssBANK2:
  1004                           	opt stack 0
  1005  000200                     _rx_buffer:
  1006                           	opt stack 0
  1007  000200                     	ds	200
  1008                           tblptru	equ	0xFF8
  1009                           tblptrh	equ	0xFF7
  1010                           tblptrl	equ	0xFF6
  1011                           tablat	equ	0xFF5
  1012                           postinc0	equ	0xFEE
  1013                           wreg	equ	0xFE8
  1014                           postdec1	equ	0xFE5
  1015                           fsr1h	equ	0xFE2
  1016                           fsr1l	equ	0xFE1
  1017                           
  1018                           	psect	bssBANK3
  1019  000300                     __pbssBANK3:
  1020                           	opt stack 0
  1021  000300                     _input_buffer:
  1022                           	opt stack 0
  1023  000300                     	ds	206
  1024                           tblptru	equ	0xFF8
  1025                           tblptrh	equ	0xFF7
  1026                           tblptrl	equ	0xFF6
  1027                           tablat	equ	0xFF5
  1028                           postinc0	equ	0xFEE
  1029                           wreg	equ	0xFE8
  1030                           postdec1	equ	0xFE5
  1031                           fsr1h	equ	0xFE2
  1032                           fsr1l	equ	0xFE1
  1033                           
  1034                           	psect	bssBANK4
  1035  000400                     __pbssBANK4:
  1036                           	opt stack 0
  1037  000400                     _output_buffer:
  1038                           	opt stack 0
  1039  000400                     	ds	206
  1040                           tblptru	equ	0xFF8
  1041                           tblptrh	equ	0xFF7
  1042                           tblptrl	equ	0xFF6
  1043                           tablat	equ	0xFF5
  1044                           postinc0	equ	0xFEE
  1045                           wreg	equ	0xFE8
  1046                           postdec1	equ	0xFE5
  1047                           fsr1h	equ	0xFE2
  1048                           fsr1l	equ	0xFE1
  1049                           
  1050                           	psect	cstackBANK0
  1051  0000D2                     __pcstackBANK0:
  1052                           	opt stack 0
  1053  0000D2                     ??_FastTransfer_buffer_put:
  1054  0000D2                     Send_put@_data:
  1055                           	opt stack 0
  1056  0000D2                     begin@ptr:
  1057                           	opt stack 0
  1058  0000D2                     FastTransfer_buffer_flush@_this:
  1059                           	opt stack 0
  1060  0000D2                     crcBufS_get@wantedTime:
  1061                           	opt stack 0
  1062                           
  1063                           ; 2 bytes @ 0x0
  1064  0000D2                     	ds	2
  1065  0000D4                     begin@maxSize:
  1066                           	opt stack 0
  1067  0000D4                     CRCcheck@SentCRC:
  1068                           	opt stack 0
  1069  0000D4                     ToSend@what:
  1070                           	opt stack 0
  1071  0000D4                     FastTransfer_buffer_flush@clearBuffer:
  1072                           	opt stack 0
  1073                           
  1074                           ; 2 bytes @ 0x2
  1075  0000D4                     	ds	1
  1076  0000D5                     begin@givenAddress:
  1077                           	opt stack 0
  1078  0000D5                     CRCcheck@calculatedCRC:
  1079                           	opt stack 0
  1080                           
  1081                           ; 1 bytes @ 0x3
  1082  0000D5                     	ds	1
  1083  0000D6                     ??_sendData:
  1084  0000D6                     begin@error:
  1085                           	opt stack 0
  1086  0000D6                     ToSend@where:
  1087                           	opt stack 0
  1088  0000D6                     CRCcheck@arrayHolder:
  1089                           	opt stack 0
  1090                           
  1091                           ; 3 bytes @ 0x4
  1092  0000D6                     	ds	1
  1093  0000D7                     sendData@whereToSend:
  1094                           	opt stack 0
  1095  0000D7                     begin@stufftosend:
  1096                           	opt stack 0
  1097                           
  1098                           ; 2 bytes @ 0x5
  1099  0000D7                     	ds	1
  1100  0000D8                     sendData@CS:
  1101                           	opt stack 0
  1102                           
  1103                           ; 1 bytes @ 0x6
  1104  0000D8                     	ds	1
  1105  0000D9                     begin@stufftoreceive:
  1106                           	opt stack 0
  1107  0000D9                     sendData@i:
  1108                           	opt stack 0
  1109  0000D9                     CRCcheck@rt:
  1110                           	opt stack 0
  1111                           
  1112                           ; 2 bytes @ 0x7
  1113  0000D9                     	ds	2
  1114  0000DB                     ??_receiveData:
  1115  0000DB                     begin@stuffavailable:
  1116                           	opt stack 0
  1117                           
  1118                           ; 2 bytes @ 0x9
  1119  0000DB                     	ds	2
  1120  0000DD                     begin@stuffpeek:
  1121                           	opt stack 0
  1122                           
  1123                           ; 2 bytes @ 0xB
  1124  0000DD                     	ds	4
  1125  0000E1                     receiveData@holder:
  1126                           	opt stack 0
  1127                           
  1128                           ; 3 bytes @ 0xF
  1129  0000E1                     	ds	3
  1130  0000E4                     receiveData@holder_1756:
  1131                           	opt stack 0
  1132                           
  1133                           ; 3 bytes @ 0x12
  1134  0000E4                     	ds	3
  1135  0000E7                     receiveData@crcHolder:
  1136                           	opt stack 0
  1137                           
  1138                           ; 1 bytes @ 0x15
  1139  0000E7                     	ds	1
  1140  0000E8                     receiveData@crcHolder_1757:
  1141                           	opt stack 0
  1142                           
  1143                           ; 1 bytes @ 0x16
  1144  0000E8                     	ds	1
  1145  0000E9                     receiveData@u:
  1146                           	opt stack 0
  1147                           
  1148                           ; 2 bytes @ 0x17
  1149  0000E9                     	ds	2
  1150  0000EB                     receiveData@r:
  1151                           	opt stack 0
  1152                           
  1153                           ; 2 bytes @ 0x19
  1154  0000EB                     	ds	2
  1155                           tblptru	equ	0xFF8
  1156                           tblptrh	equ	0xFF7
  1157                           tblptrl	equ	0xFF6
  1158                           tablat	equ	0xFF5
  1159                           postinc0	equ	0xFEE
  1160                           wreg	equ	0xFE8
  1161                           postdec1	equ	0xFE5
  1162                           fsr1h	equ	0xFE2
  1163                           fsr1l	equ	0xFE1
  1164                           
  1165                           	psect	cstackCOMRAM
  1166  000001                     __pcstackCOMRAM:
  1167                           	opt stack 0
  1168  000001                     ?i2_UART_buff_size:
  1169                           	opt stack 0
  1170  000001                     ?i2_UART_buff_modulo_inc:
  1171                           	opt stack 0
  1172  000001                     i2UART_buff_size@_this:
  1173                           	opt stack 0
  1174  000001                     i2UART_buff_modulo_inc@value:
  1175                           	opt stack 0
  1176                           
  1177                           ; 2 bytes @ 0x0
  1178  000001                     	ds	2
  1179  000003                     i2UART_buff_modulo_inc@modulus:
  1180                           	opt stack 0
  1181                           
  1182                           ; 2 bytes @ 0x2
  1183  000003                     	ds	2
  1184  000005                     i2UART_buff_modulo_inc@my_value:
  1185                           	opt stack 0
  1186                           
  1187                           ; 2 bytes @ 0x4
  1188  000005                     	ds	2
  1189  000007                     i2UART_buff_put@_this:
  1190                           	opt stack 0
  1191  000007                     i2UART_buff_get@_this:
  1192                           	opt stack 0
  1193                           
  1194                           ; 2 bytes @ 0x6
  1195  000007                     	ds	2
  1196  000009                     ??i2_UART_buff_get:
  1197  000009                     i2UART_buff_put@c:
  1198                           	opt stack 0
  1199                           
  1200                           ; 1 bytes @ 0x8
  1201  000009                     	ds	1
  1202  00000A                     ??i2_UART_buff_put:
  1203                           
  1204                           ; 1 bytes @ 0x9
  1205  00000A                     	ds	1
  1206  00000B                     i2UART_buff_get@c:
  1207                           	opt stack 0
  1208                           
  1209                           ; 1 bytes @ 0xA
  1210  00000B                     	ds	1
  1211  00000C                     EUSART2_Receive_ISR@data:
  1212                           	opt stack 0
  1213                           
  1214                           ; 1 bytes @ 0xB
  1215  00000C                     	ds	1
  1216  00000D                     ??_INTERRUPT_InterruptManager:
  1217                           
  1218                           ; 1 bytes @ 0xC
  1219  00000D                     	ds	14
  1220  00001B                     ??_TMR0_Initialize:
  1221  00001B                     ??_updateTimers:
  1222  00001B                     ?_FastTransfer_buffer_modulo_inc:
  1223                           	opt stack 0
  1224  00001B                     ?_UART_buff_modulo_inc:
  1225                           	opt stack 0
  1226  00001B                     ?_time_get:
  1227                           	opt stack 0
  1228  00001B                     ?_UART_buff_size:
  1229                           	opt stack 0
  1230  00001B                     ?___awdiv:
  1231                           	opt stack 0
  1232  00001B                     time_Set@value:
  1233                           	opt stack 0
  1234  00001B                     CRC8@data:
  1235                           	opt stack 0
  1236  00001B                     FastTransfer_buffer_modulo_inc@value:
  1237                           	opt stack 0
  1238  00001B                     crcBufS_put@_this:
  1239                           	opt stack 0
  1240  00001B                     crcBufS_status_put@_this:
  1241                           	opt stack 0
  1242  00001B                     crcBufS_get@_this:
  1243                           	opt stack 0
  1244  00001B                     UART_buff_size@_this:
  1245                           	opt stack 0
  1246  00001B                     UART_buff_modulo_inc@value:
  1247                           	opt stack 0
  1248  00001B                     UART_buff_peek@_this:
  1249                           	opt stack 0
  1250  00001B                     Delay@wait:
  1251                           	opt stack 0
  1252  00001B                     ___awdiv@dividend:
  1253                           	opt stack 0
  1254  00001B                     memset@p1:
  1255                           	opt stack 0
  1256                           
  1257                           ; 2 bytes @ 0x1A
  1258  00001B                     	ds	2
  1259  00001D                     ??_Delay:
  1260  00001D                     ??_UART_buff_peek:
  1261  00001D                     ?_Receive_available:
  1262                           	opt stack 0
  1263  00001D                     time_get@WhatTime:
  1264                           	opt stack 0
  1265  00001D                     time_Set@WhatTime:
  1266                           	opt stack 0
  1267  00001D                     CRC8@len:
  1268                           	opt stack 0
  1269  00001D                     crcBufS_put@address:
  1270                           	opt stack 0
  1271  00001D                     crcBufS_status_put@time:
  1272                           	opt stack 0
  1273  00001D                     crcBufS_get@time:
  1274                           	opt stack 0
  1275  00001D                     FastTransfer_buffer_modulo_inc@modulus:
  1276                           	opt stack 0
  1277  00001D                     UART_buff_modulo_inc@modulus:
  1278                           	opt stack 0
  1279  00001D                     ___awdiv@divisor:
  1280                           	opt stack 0
  1281  00001D                     memset@c:
  1282                           	opt stack 0
  1283                           
  1284                           ; 2 bytes @ 0x1C
  1285  00001D                     	ds	1
  1286  00001E                     CRC8@sum:
  1287                           	opt stack 0
  1288  00001E                     crcBufS_put@oldCRC:
  1289                           	opt stack 0
  1290  00001E                     crcBufS_status_put@status:
  1291                           	opt stack 0
  1292  00001E                     crcBufS_get@space:
  1293                           	opt stack 0
  1294  00001E                     Delay@i:
  1295                           	opt stack 0
  1296                           
  1297                           ; 2 bytes @ 0x1D
  1298  00001E                     	ds	1
  1299  00001F                     ??_crcBufS_get:
  1300  00001F                     ??_crcBufS_status_put:
  1301  00001F                     CRC8@extract:
  1302                           	opt stack 0
  1303  00001F                     crcBufS_put@status:
  1304                           	opt stack 0
  1305  00001F                     ___awdiv@counter:
  1306                           	opt stack 0
  1307  00001F                     FastTransfer_buffer_modulo_inc@my_value:
  1308                           	opt stack 0
  1309  00001F                     UART_buff_modulo_inc@my_value:
  1310                           	opt stack 0
  1311  00001F                     memset@n:
  1312                           	opt stack 0
  1313                           
  1314                           ; 2 bytes @ 0x1E
  1315  00001F                     	ds	1
  1316  000020                     ??_crcBufS_put:
  1317  000020                     CRC8@tempI:
  1318                           	opt stack 0
  1319  000020                     ___awdiv@sign:
  1320                           	opt stack 0
  1321                           
  1322                           ; 1 bytes @ 0x1F
  1323  000020                     	ds	1
  1324  000021                     CRC8@crc:
  1325                           	opt stack 0
  1326  000021                     FastTransfer_buffer_put@_this:
  1327                           	opt stack 0
  1328  000021                     UART_buff_put@_this:
  1329                           	opt stack 0
  1330  000021                     UART_buff_get@_this:
  1331                           	opt stack 0
  1332  000021                     ___awdiv@quotient:
  1333                           	opt stack 0
  1334  000021                     memset@p:
  1335                           	opt stack 0
  1336                           
  1337                           ; 2 bytes @ 0x20
  1338  000021                     	ds	2
  1339  000023                     ??_UART_buff_get:
  1340  000023                     FastTransfer_buffer_put@towhere:
  1341                           	opt stack 0
  1342  000023                     UART_buff_put@c:
  1343                           	opt stack 0
  1344  000023                     crcBufS_status_put@wantedTime:
  1345                           	opt stack 0
  1346  000023                     UART_buff_init@_this:
  1347                           	opt stack 0
  1348                           
  1349                           ; 2 bytes @ 0x22
  1350  000023                     	ds	1
  1351  000024                     ??_UART_buff_put:
  1352  000024                     FastTransfer_buffer_put@towhat:
  1353                           	opt stack 0
  1354                           
  1355                           ; 2 bytes @ 0x23
  1356  000024                     	ds	1
  1357  000025                     UART_buff_get@c:
  1358                           	opt stack 0
  1359                           
  1360                           ; 1 bytes @ 0x24
  1361  000025                     	ds	1
  1362  000026                     tblptru	equ	0xFF8
  1363                           tblptrh	equ	0xFF7
  1364                           tblptrl	equ	0xFF6
  1365                           tablat	equ	0xFF5
  1366                           postinc0	equ	0xFEE
  1367                           wreg	equ	0xFE8
  1368                           postdec1	equ	0xFE5
  1369                           fsr1h	equ	0xFE2
  1370                           fsr1l	equ	0xFE1
  1371                           
  1372                           ; 1 bytes @ 0x25
  1373 ;;
  1374 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1375 ;;
  1376 ;; *************** function _main *****************
  1377 ;; Defined at:
  1378 ;;		line 16 in file "main.c"
  1379 ;; Parameters:    Size  Location     Type
  1380 ;;		None
  1381 ;; Auto vars:     Size  Location     Type
  1382 ;;		None
  1383 ;; Return value:  Size  Location     Type
  1384 ;;                  1    wreg      void 
  1385 ;; Registers used:
  1386 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  1387 ;; Tracked objects:
  1388 ;;		On entry : 0/0
  1389 ;;		On exit  : 0/0
  1390 ;;		Unchanged: 0/0
  1391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1392 ;;      Params:         0       0       0       0       0       0       0
  1393 ;;      Locals:         0       0       0       0       0       0       0
  1394 ;;      Temps:          0       0       0       0       0       0       0
  1395 ;;      Totals:         0       0       0       0       0       0       0
  1396 ;;Total ram usage:        0 bytes
  1397 ;; Hardware stack levels required when called:   11
  1398 ;; This function calls:
  1399 ;;		_SYSTEM_Initialize
  1400 ;;		_SetBMM
  1401 ;;		_ledDebug
  1402 ;;		_updateTimers
  1403 ;; This function is called by:
  1404 ;;		Startup code after reset
  1405 ;; This function uses a non-reentrant model
  1406 ;;
  1407                           
  1408                           	psect	text0
  1409  0017D8                     __ptext0:
  1410                           	opt stack 0
  1411  0017D8                     _main:
  1412                           	opt stack 20
  1413                           
  1414                           ;main.c: 18: SYSTEM_Initialize();
  1415                           
  1416                           ;incstack = 0
  1417  0017D8  EC39  F00C         	call	_SYSTEM_Initialize	;wreg free
  1418                           
  1419                           ;main.c: 37: (INTCONbits.GIE = 1);
  1420  0017DC  8EF2               	bsf	intcon,7,c	;volatile
  1421                           
  1422                           ;main.c: 40: (INTCONbits.PEIE = 1);
  1423  0017DE  8CF2               	bsf	intcon,6,c	;volatile
  1424                           
  1425                           ;main.c: 55: do { LATC1 = 1; } while(0);
  1426  0017E0  828B               	bsf	3979,1,c	;volatile
  1427                           
  1428                           ;main.c: 60: do { ANSA3 = 0; } while(0);
  1429  0017E2  010F               	movlb	15	; () banked
  1430  0017E4  9738               	bcf	56,3,b	;volatile
  1431  0017E6                     l4481:
  1432  0017E6  EC6A  F00A         	call	_SetBMM	;wreg free
  1433  0017EA  0900               	iorlw	0
  1434  0017EC  A4D8               	btfss	status,2,c
  1435  0017EE  D7FB               	goto	l4481
  1436  0017F0                     l4483:
  1437                           
  1438                           ;main.c: 72: updateTimers();
  1439  0017F0  ECB7  F009         	call	_updateTimers	;wreg free
  1440                           
  1441                           ;main.c: 73: ledDebug();
  1442  0017F4  EC2B  F00B         	call	_ledDebug	;wreg free
  1443  0017F8  D7FB               	goto	l4483
  1444  0017FA                     __end_of_main:
  1445                           	opt stack 0
  1446                           tblptru	equ	0xFF8
  1447                           tblptrh	equ	0xFF7
  1448                           tblptrl	equ	0xFF6
  1449                           tablat	equ	0xFF5
  1450                           intcon	equ	0xFF2
  1451                           postinc0	equ	0xFEE
  1452                           wreg	equ	0xFE8
  1453                           postdec1	equ	0xFE5
  1454                           fsr1h	equ	0xFE2
  1455                           fsr1l	equ	0xFE1
  1456                           status	equ	0xFD8
  1457                           
  1458 ;; *************** function _updateTimers *****************
  1459 ;; Defined at:
  1460 ;;		line 148 in file "mcc_generated_files/tmr0.c"
  1461 ;; Parameters:    Size  Location     Type
  1462 ;;		None
  1463 ;; Auto vars:     Size  Location     Type
  1464 ;;		None
  1465 ;; Return value:  Size  Location     Type
  1466 ;;                  1    wreg      void 
  1467 ;; Registers used:
  1468 ;;		wreg, status,2, status,0
  1469 ;; Tracked objects:
  1470 ;;		On entry : 0/0
  1471 ;;		On exit  : 0/0
  1472 ;;		Unchanged: 0/0
  1473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1474 ;;      Params:         0       0       0       0       0       0       0
  1475 ;;      Locals:         0       0       0       0       0       0       0
  1476 ;;      Temps:          8       0       0       0       0       0       0
  1477 ;;      Totals:         8       0       0       0       0       0       0
  1478 ;;Total ram usage:        8 bytes
  1479 ;; Hardware stack levels used:    1
  1480 ;; Hardware stack levels required when called:    4
  1481 ;; This function calls:
  1482 ;;		Nothing
  1483 ;; This function is called by:
  1484 ;;		_main
  1485 ;; This function uses a non-reentrant model
  1486 ;;
  1487                           
  1488                           	psect	text1
  1489  00136E                     __ptext1:
  1490                           	opt stack 0
  1491  00136E                     _updateTimers:
  1492                           	opt stack 26
  1493                           
  1494                           ;tmr0.c: 149: LEDtime += (time - lastLEDTime);
  1495                           
  1496                           ;incstack = 0
  1497  00136E  C07F  F01B         	movff	_lastLEDTime,??_updateTimers
  1498  001372  C080  F01C         	movff	_lastLEDTime+1,??_updateTimers+1
  1499  001376  C081  F01D         	movff	_lastLEDTime+2,??_updateTimers+2
  1500  00137A  C082  F01E         	movff	_lastLEDTime+3,??_updateTimers+3
  1501  00137E  1E1B               	comf	??_updateTimers,f,c
  1502  001380  1E1C               	comf	??_updateTimers+1,f,c
  1503  001382  1E1D               	comf	??_updateTimers+2,f,c
  1504  001384  1E1E               	comf	??_updateTimers+3,f,c
  1505  001386  2A1B               	incf	??_updateTimers,f,c
  1506  001388  0E00               	movlw	0
  1507  00138A  221C               	addwfc	??_updateTimers+1,f,c
  1508  00138C  221D               	addwfc	??_updateTimers+2,f,c
  1509  00138E  221E               	addwfc	??_updateTimers+3,f,c
  1510  001390  5026               	movf	_time,w,c
  1511  001392  241B               	addwf	??_updateTimers,w,c
  1512  001394  6E1F               	movwf	(??_updateTimers+4)& (0+255),c
  1513  001396  5027               	movf	_time+1,w,c
  1514  001398  201C               	addwfc	??_updateTimers+1,w,c
  1515  00139A  6E20               	movwf	(??_updateTimers+5)& (0+255),c
  1516  00139C  5028               	movf	_time+2,w,c
  1517  00139E  201D               	addwfc	??_updateTimers+2,w,c
  1518  0013A0  6E21               	movwf	(??_updateTimers+6)& (0+255),c
  1519  0013A2  5029               	movf	_time+3,w,c
  1520  0013A4  201E               	addwfc	??_updateTimers+3,w,c
  1521  0013A6  6E22               	movwf	(??_updateTimers+7)& (0+255),c
  1522  0013A8  501F               	movf	??_updateTimers+4,w,c
  1523  0013AA  0100               	movlb	0	; () banked
  1524  0013AC  277B               	addwf	_LEDtime& (0+255),f,b
  1525  0013AE  5020               	movf	??_updateTimers+5,w,c
  1526  0013B0  0100               	movlb	0	; () banked
  1527  0013B2  237C               	addwfc	(_LEDtime+1)& (0+255),f,b
  1528  0013B4  5021               	movf	??_updateTimers+6,w,c
  1529  0013B6  0100               	movlb	0	; () banked
  1530  0013B8  237D               	addwfc	(_LEDtime+2)& (0+255),f,b
  1531  0013BA  5022               	movf	??_updateTimers+7,w,c
  1532  0013BC  0100               	movlb	0	; () banked
  1533  0013BE  237E               	addwfc	(_LEDtime+3)& (0+255),f,b
  1534                           
  1535                           ; BSR set to: 0
  1536                           ;tmr0.c: 150: lastLEDTime = time;
  1537  0013C0  C026  F07F         	movff	_time,_lastLEDTime
  1538  0013C4  C027  F080         	movff	_time+1,_lastLEDTime+1
  1539  0013C8  C028  F081         	movff	_time+2,_lastLEDTime+2
  1540  0013CC  C029  F082         	movff	_time+3,_lastLEDTime+3
  1541                           
  1542                           ; BSR set to: 0
  1543  0013D0  0012               	return		;funcret
  1544  0013D2                     __end_of_updateTimers:
  1545                           	opt stack 0
  1546                           tblptru	equ	0xFF8
  1547                           tblptrh	equ	0xFF7
  1548                           tblptrl	equ	0xFF6
  1549                           tablat	equ	0xFF5
  1550                           intcon	equ	0xFF2
  1551                           postinc0	equ	0xFEE
  1552                           wreg	equ	0xFE8
  1553                           postdec1	equ	0xFE5
  1554                           fsr1h	equ	0xFE2
  1555                           fsr1l	equ	0xFE1
  1556                           status	equ	0xFD8
  1557                           
  1558 ;; *************** function _ledDebug *****************
  1559 ;; Defined at:
  1560 ;;		line 96 in file "Functions.c"
  1561 ;; Parameters:    Size  Location     Type
  1562 ;;		None
  1563 ;; Auto vars:     Size  Location     Type
  1564 ;;		None
  1565 ;; Return value:  Size  Location     Type
  1566 ;;                  1    wreg      void 
  1567 ;; Registers used:
  1568 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  1569 ;; Tracked objects:
  1570 ;;		On entry : 0/0
  1571 ;;		On exit  : 0/0
  1572 ;;		Unchanged: 0/0
  1573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1574 ;;      Params:         0       0       0       0       0       0       0
  1575 ;;      Locals:         0       0       0       0       0       0       0
  1576 ;;      Temps:          0       0       0       0       0       0       0
  1577 ;;      Totals:         0       0       0       0       0       0       0
  1578 ;;Total ram usage:        0 bytes
  1579 ;; Hardware stack levels used:    1
  1580 ;; Hardware stack levels required when called:   10
  1581 ;; This function calls:
  1582 ;;		_respondChargerAsECU
  1583 ;;		_time_Set
  1584 ;;		_time_get
  1585 ;;		_updateComms
  1586 ;; This function is called by:
  1587 ;;		_main
  1588 ;; This function uses a non-reentrant model
  1589 ;;
  1590                           
  1591                           	psect	text2
  1592  001656                     __ptext2:
  1593                           	opt stack 0
  1594  001656                     _ledDebug:
  1595                           	opt stack 20
  1596                           
  1597                           ;Functions.c: 97: if (time_get(1) > 4) {
  1598                           
  1599                           ; BSR set to: 0
  1600                           ;incstack = 0
  1601  001656  0E01               	movlw	1
  1602  001658  EC7E  F00C         	call	_time_get
  1603  00165C  BE1C               	btfsc	?_time_get+1,7,c
  1604  00165E  0012               	return	
  1605  001660  501C               	movf	?_time_get+1,w,c
  1606  001662  E104               	bnz	u4760
  1607  001664  0E05               	movlw	5
  1608  001666  5C1B               	subwf	?_time_get,w,c
  1609  001668  A0D8               	btfss	status,0,c
  1610  00166A  0012               	return	
  1611  00166C                     u4760:
  1612                           
  1613                           ;Functions.c: 99: updateComms();
  1614  00166C  EC52  F00C         	call	_updateComms	;wreg free
  1615                           
  1616                           ;Functions.c: 100: time_Set(1, 0);
  1617  001670  0E00               	movlw	0
  1618  001672  6E1C               	movwf	time_Set@value+1,c
  1619  001674  0E00               	movlw	0
  1620  001676  6E1B               	movwf	time_Set@value,c
  1621  001678  0E01               	movlw	1
  1622  00167A  ECFD  F00B         	call	_time_Set
  1623                           
  1624                           ;Functions.c: 101: respondChargerAsECU();
  1625  00167E  ECAA  F00A         	call	_respondChargerAsECU	;wreg free
  1626  001682  0012               	return	
  1627  001684                     __end_of_ledDebug:
  1628                           	opt stack 0
  1629                           tblptru	equ	0xFF8
  1630                           tblptrh	equ	0xFF7
  1631                           tblptrl	equ	0xFF6
  1632                           tablat	equ	0xFF5
  1633                           intcon	equ	0xFF2
  1634                           postinc0	equ	0xFEE
  1635                           wreg	equ	0xFE8
  1636                           postdec1	equ	0xFE5
  1637                           fsr1h	equ	0xFE2
  1638                           fsr1l	equ	0xFE1
  1639                           status	equ	0xFD8
  1640                           
  1641 ;; *************** function _updateComms *****************
  1642 ;; Defined at:
  1643 ;;		line 21 in file "Communications.c"
  1644 ;; Parameters:    Size  Location     Type
  1645 ;;		None
  1646 ;; Auto vars:     Size  Location     Type
  1647 ;;		None
  1648 ;; Return value:  Size  Location     Type
  1649 ;;                  1    wreg      void 
  1650 ;; Registers used:
  1651 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  1652 ;; Tracked objects:
  1653 ;;		On entry : 0/0
  1654 ;;		On exit  : 0/0
  1655 ;;		Unchanged: 0/0
  1656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1657 ;;      Params:         0       0       0       0       0       0       0
  1658 ;;      Locals:         0       0       0       0       0       0       0
  1659 ;;      Temps:          0       0       0       0       0       0       0
  1660 ;;      Totals:         0       0       0       0       0       0       0
  1661 ;;Total ram usage:        0 bytes
  1662 ;; Hardware stack levels used:    1
  1663 ;; Hardware stack levels required when called:    9
  1664 ;; This function calls:
  1665 ;;		_receiveData
  1666 ;; This function is called by:
  1667 ;;		_ledDebug
  1668 ;; This function uses a non-reentrant model
  1669 ;;
  1670                           
  1671                           	psect	text3
  1672  0018A4                     __ptext3:
  1673                           	opt stack 0
  1674  0018A4                     _updateComms:
  1675                           	opt stack 20
  1676                           
  1677                           ;Communications.c: 22: if (receiveData()) {
  1678                           
  1679                           ;incstack = 0
  1680  0018A4  EC5E  F000         	call	_receiveData	;wreg free
  1681  0018A8  0900               	iorlw	0
  1682  0018AA  B4D8               	btfsc	status,2,c
  1683  0018AC  0012               	return	
  1684                           
  1685                           ;Communications.c: 23: do { LATA3 = ~LATA3; } while(0);
  1686  0018AE  B689               	btfsc	3977,3,c	;volatile
  1687  0018B0  D002               	goto	u4730
  1688  0018B2  8689               	bsf	3977,3,c	;volatile
  1689  0018B4  0012               	return	
  1690  0018B6                     u4730:
  1691  0018B6  9689               	bcf	3977,3,c	;volatile
  1692  0018B8  0012               	return	
  1693  0018BA                     __end_of_updateComms:
  1694                           	opt stack 0
  1695                           tblptru	equ	0xFF8
  1696                           tblptrh	equ	0xFF7
  1697                           tblptrl	equ	0xFF6
  1698                           tablat	equ	0xFF5
  1699                           intcon	equ	0xFF2
  1700                           postinc0	equ	0xFEE
  1701                           wreg	equ	0xFE8
  1702                           postdec1	equ	0xFE5
  1703                           fsr1h	equ	0xFE2
  1704                           fsr1l	equ	0xFE1
  1705                           status	equ	0xFD8
  1706                           
  1707 ;; *************** function _time_get *****************
  1708 ;; Defined at:
  1709 ;;		line 153 in file "mcc_generated_files/tmr0.c"
  1710 ;; Parameters:    Size  Location     Type
  1711 ;;  WhatTime        1    wreg     unsigned char 
  1712 ;; Auto vars:     Size  Location     Type
  1713 ;;  WhatTime        1   28[COMRAM] unsigned char 
  1714 ;; Return value:  Size  Location     Type
  1715 ;;                  2   26[COMRAM] int 
  1716 ;; Registers used:
  1717 ;;		wreg, status,2, status,0
  1718 ;; Tracked objects:
  1719 ;;		On entry : 0/0
  1720 ;;		On exit  : 0/0
  1721 ;;		Unchanged: 0/0
  1722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1723 ;;      Params:         2       0       0       0       0       0       0
  1724 ;;      Locals:         1       0       0       0       0       0       0
  1725 ;;      Temps:          0       0       0       0       0       0       0
  1726 ;;      Totals:         3       0       0       0       0       0       0
  1727 ;;Total ram usage:        3 bytes
  1728 ;; Hardware stack levels used:    1
  1729 ;; Hardware stack levels required when called:    4
  1730 ;; This function calls:
  1731 ;;		Nothing
  1732 ;; This function is called by:
  1733 ;;		_ledDebug
  1734 ;; This function uses a non-reentrant model
  1735 ;;
  1736                           
  1737                           	psect	text4
  1738  0018FC                     __ptext4:
  1739                           	opt stack 0
  1740  0018FC                     _time_get:
  1741                           	opt stack 25
  1742                           
  1743                           ;incstack = 0
  1744                           ;time_get@WhatTime stored from wreg
  1745  0018FC  6E1D               	movwf	time_get@WhatTime,c
  1746                           
  1747                           ;tmr0.c: 154: if(WhatTime == 1){
  1748  0018FE  041D               	decf	time_get@WhatTime,w,c
  1749  001900  A4D8               	btfss	status,2,c
  1750  001902  0012               	return	
  1751                           
  1752                           ;tmr0.c: 155: return LEDtime;
  1753  001904  C07B  F01B         	movff	_LEDtime,?_time_get
  1754  001908  C07C  F01C         	movff	_LEDtime+1,?_time_get+1
  1755  00190C  0012               	return	
  1756  00190E                     __end_of_time_get:
  1757                           	opt stack 0
  1758                           tblptru	equ	0xFF8
  1759                           tblptrh	equ	0xFF7
  1760                           tblptrl	equ	0xFF6
  1761                           tablat	equ	0xFF5
  1762                           intcon	equ	0xFF2
  1763                           postinc0	equ	0xFEE
  1764                           wreg	equ	0xFE8
  1765                           postdec1	equ	0xFE5
  1766                           fsr1h	equ	0xFE2
  1767                           fsr1l	equ	0xFE1
  1768                           status	equ	0xFD8
  1769                           
  1770 ;; *************** function _time_Set *****************
  1771 ;; Defined at:
  1772 ;;		line 159 in file "mcc_generated_files/tmr0.c"
  1773 ;; Parameters:    Size  Location     Type
  1774 ;;  WhatTime        1    wreg     unsigned char 
  1775 ;;  value           2   26[COMRAM] int 
  1776 ;; Auto vars:     Size  Location     Type
  1777 ;;  WhatTime        1   28[COMRAM] unsigned char 
  1778 ;; Return value:  Size  Location     Type
  1779 ;;                  1    wreg      void 
  1780 ;; Registers used:
  1781 ;;		wreg, status,2, status,0
  1782 ;; Tracked objects:
  1783 ;;		On entry : 0/0
  1784 ;;		On exit  : 0/0
  1785 ;;		Unchanged: 0/0
  1786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1787 ;;      Params:         2       0       0       0       0       0       0
  1788 ;;      Locals:         1       0       0       0       0       0       0
  1789 ;;      Temps:          0       0       0       0       0       0       0
  1790 ;;      Totals:         3       0       0       0       0       0       0
  1791 ;;Total ram usage:        3 bytes
  1792 ;; Hardware stack levels used:    1
  1793 ;; Hardware stack levels required when called:    4
  1794 ;; This function calls:
  1795 ;;		Nothing
  1796 ;; This function is called by:
  1797 ;;		_ledDebug
  1798 ;; This function uses a non-reentrant model
  1799 ;;
  1800                           
  1801                           	psect	text5
  1802  0017FA                     __ptext5:
  1803                           	opt stack 0
  1804  0017FA                     _time_Set:
  1805                           	opt stack 25
  1806                           
  1807                           ;incstack = 0
  1808                           ;time_Set@WhatTime stored from wreg
  1809  0017FA  6E1D               	movwf	time_Set@WhatTime,c
  1810                           
  1811                           ;tmr0.c: 160: if(WhatTime == 1){
  1812  0017FC  041D               	decf	time_Set@WhatTime,w,c
  1813  0017FE  A4D8               	btfss	status,2,c
  1814  001800  0012               	return	
  1815                           
  1816                           ;tmr0.c: 161: LEDtime = value;
  1817  001802  C01B  F07B         	movff	time_Set@value,_LEDtime
  1818  001806  C01C  F07C         	movff	time_Set@value+1,_LEDtime+1
  1819  00180A  0100               	movlb	0	; () banked
  1820  00180C  0E00               	movlw	0
  1821  00180E  BF7C               	btfsc	(_LEDtime+1)& (0+255),7,b
  1822  001810  0EFF               	movlw	-1
  1823  001812  6F7D               	movwf	(_LEDtime+2)& (0+255),b
  1824  001814  6F7E               	movwf	(_LEDtime+3)& (0+255),b
  1825  001816  0012               	return	
  1826  001818                     __end_of_time_Set:
  1827                           	opt stack 0
  1828                           tblptru	equ	0xFF8
  1829                           tblptrh	equ	0xFF7
  1830                           tblptrl	equ	0xFF6
  1831                           tablat	equ	0xFF5
  1832                           intcon	equ	0xFF2
  1833                           postinc0	equ	0xFEE
  1834                           wreg	equ	0xFE8
  1835                           postdec1	equ	0xFE5
  1836                           fsr1h	equ	0xFE2
  1837                           fsr1l	equ	0xFE1
  1838                           status	equ	0xFD8
  1839                           
  1840 ;; *************** function _respondChargerAsECU *****************
  1841 ;; Defined at:
  1842 ;;		line 37 in file "Communications.c"
  1843 ;; Parameters:    Size  Location     Type
  1844 ;;		None
  1845 ;; Auto vars:     Size  Location     Type
  1846 ;;		None
  1847 ;; Return value:  Size  Location     Type
  1848 ;;                  1    wreg      void 
  1849 ;; Registers used:
  1850 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
  1851 ;; Tracked objects:
  1852 ;;		On entry : 0/0
  1853 ;;		On exit  : 0/0
  1854 ;;		Unchanged: 0/0
  1855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1856 ;;      Params:         0       0       0       0       0       0       0
  1857 ;;      Locals:         0       0       0       0       0       0       0
  1858 ;;      Temps:          0       0       0       0       0       0       0
  1859 ;;      Totals:         0       0       0       0       0       0       0
  1860 ;;Total ram usage:        0 bytes
  1861 ;; Hardware stack levels used:    1
  1862 ;; Hardware stack levels required when called:    8
  1863 ;; This function calls:
  1864 ;;		_Delay
  1865 ;;		_ToSend
  1866 ;;		_sendData
  1867 ;; This function is called by:
  1868 ;;		_ledDebug
  1869 ;; This function uses a non-reentrant model
  1870 ;;
  1871                           
  1872                           	psect	text6
  1873  001554                     __ptext6:
  1874                           	opt stack 0
  1875  001554                     _respondChargerAsECU:
  1876                           	opt stack 21
  1877                           
  1878                           ;Communications.c: 38: LATDbits.LATD4 = 1;
  1879                           
  1880                           ;incstack = 0
  1881  001554  888C               	bsf	3980,4,c	;volatile
  1882                           
  1883                           ;Communications.c: 40: ToSend(0, 1);
  1884  001556  0E00               	movlw	0
  1885  001558  0100               	movlb	0	; () banked
  1886  00155A  6FD5               	movwf	(ToSend@what+1)& (0+255),b
  1887  00155C  0E01               	movlw	1
  1888  00155E  6FD4               	movwf	ToSend@what& (0+255),b
  1889  001560  0E00               	movlw	0
  1890  001562  EC0C  F00C         	call	_ToSend
  1891                           
  1892                           ;Communications.c: 41: ToSend(1, 3);
  1893  001566  0E00               	movlw	0
  1894  001568  0100               	movlb	0	; () banked
  1895  00156A  6FD5               	movwf	(ToSend@what+1)& (0+255),b
  1896  00156C  0E03               	movlw	3
  1897  00156E  6FD4               	movwf	ToSend@what& (0+255),b
  1898  001570  0E01               	movlw	1
  1899  001572  EC0C  F00C         	call	_ToSend
  1900                           
  1901                           ;Communications.c: 43: sendData(6);
  1902  001576  0E06               	movlw	6
  1903  001578  EC24  F005         	call	_sendData
  1904                           
  1905                           ;Communications.c: 44: Delay(3);
  1906  00157C  0E00               	movlw	0
  1907  00157E  6E1C               	movwf	Delay@wait+1,c
  1908  001580  0E03               	movlw	3
  1909  001582  6E1B               	movwf	Delay@wait,c
  1910  001584  ECC6  F00A         	call	_Delay	;wreg free
  1911                           
  1912                           ;Communications.c: 45: LATDbits.LATD4 = 0;
  1913  001588  988C               	bcf	3980,4,c	;volatile
  1914  00158A  0012               	return		;funcret
  1915  00158C                     __end_of_respondChargerAsECU:
  1916                           	opt stack 0
  1917                           tblptru	equ	0xFF8
  1918                           tblptrh	equ	0xFF7
  1919                           tblptrl	equ	0xFF6
  1920                           tablat	equ	0xFF5
  1921                           intcon	equ	0xFF2
  1922                           postinc0	equ	0xFEE
  1923                           wreg	equ	0xFE8
  1924                           postdec1	equ	0xFE5
  1925                           fsr1h	equ	0xFE2
  1926                           fsr1l	equ	0xFE1
  1927                           status	equ	0xFD8
  1928                           
  1929 ;; *************** function _SetBMM *****************
  1930 ;; Defined at:
  1931 ;;		line 55 in file "Communications.c"
  1932 ;; Parameters:    Size  Location     Type
  1933 ;;		None
  1934 ;; Auto vars:     Size  Location     Type
  1935 ;;		None
  1936 ;; Return value:  Size  Location     Type
  1937 ;;                  1    wreg      unsigned char 
  1938 ;; Registers used:
  1939 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  1940 ;; Tracked objects:
  1941 ;;		On entry : 0/0
  1942 ;;		On exit  : 0/0
  1943 ;;		Unchanged: 0/0
  1944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1945 ;;      Params:         0       0       0       0       0       0       0
  1946 ;;      Locals:         0       0       0       0       0       0       0
  1947 ;;      Temps:          0       0       0       0       0       0       0
  1948 ;;      Totals:         0       0       0       0       0       0       0
  1949 ;;Total ram usage:        0 bytes
  1950 ;; Hardware stack levels used:    1
  1951 ;; Hardware stack levels required when called:    9
  1952 ;; This function calls:
  1953 ;;		_Delay
  1954 ;;		_ToSend
  1955 ;;		_receiveData
  1956 ;;		_sendData
  1957 ;; This function is called by:
  1958 ;;		_main
  1959 ;; This function uses a non-reentrant model
  1960 ;;
  1961                           
  1962                           	psect	text7
  1963  0014D4                     __ptext7:
  1964                           	opt stack 0
  1965  0014D4                     _SetBMM:
  1966                           	opt stack 21
  1967                           
  1968                           ;Communications.c: 56: LATDbits.LATD4 = 1;
  1969                           
  1970                           ;incstack = 0
  1971  0014D4  888C               	bsf	3980,4,c	;volatile
  1972                           
  1973                           ;Communications.c: 58: ToSend(1, 7);
  1974  0014D6  0E00               	movlw	0
  1975  0014D8  0100               	movlb	0	; () banked
  1976  0014DA  6FD5               	movwf	(ToSend@what+1)& (0+255),b
  1977  0014DC  0E07               	movlw	7
  1978  0014DE  6FD4               	movwf	ToSend@what& (0+255),b
  1979  0014E0  0E01               	movlw	1
  1980  0014E2  EC0C  F00C         	call	_ToSend
  1981                           
  1982                           ;Communications.c: 60: sendData(6);
  1983  0014E6  0E06               	movlw	6
  1984  0014E8  EC24  F005         	call	_sendData
  1985                           
  1986                           ;Communications.c: 61: Delay(3);
  1987  0014EC  0E00               	movlw	0
  1988  0014EE  6E1C               	movwf	Delay@wait+1,c
  1989  0014F0  0E03               	movlw	3
  1990  0014F2  6E1B               	movwf	Delay@wait,c
  1991  0014F4  ECC6  F00A         	call	_Delay	;wreg free
  1992                           
  1993                           ;Communications.c: 62: LATDbits.LATD4 = 0;
  1994  0014F8  988C               	bcf	3980,4,c	;volatile
  1995                           
  1996                           ;Communications.c: 63: Delay(1000);
  1997  0014FA  0E03               	movlw	3
  1998  0014FC  6E1C               	movwf	Delay@wait+1,c
  1999  0014FE  0EE8               	movlw	232
  2000  001500  6E1B               	movwf	Delay@wait,c
  2001  001502  ECC6  F00A         	call	_Delay	;wreg free
  2002                           
  2003                           ;Communications.c: 64: if (receiveData()){
  2004  001506  EC5E  F000         	call	_receiveData	;wreg free
  2005  00150A  0900               	iorlw	0
  2006  00150C  B4D8               	btfsc	status,2,c
  2007  00150E  D002               	goto	l4459
  2008                           
  2009                           ;Communications.c: 66: return 0;
  2010  001510  0E00               	movlw	0
  2011                           
  2012                           ;Communications.c: 67: }
  2013  001512  0012               	return	
  2014  001514                     l4459:
  2015                           
  2016                           ;Communications.c: 68: else return 1;
  2017  001514  0E01               	movlw	1
  2018  001516  0012               	return	
  2019  001518                     __end_of_SetBMM:
  2020                           	opt stack 0
  2021                           tblptru	equ	0xFF8
  2022                           tblptrh	equ	0xFF7
  2023                           tblptrl	equ	0xFF6
  2024                           tablat	equ	0xFF5
  2025                           intcon	equ	0xFF2
  2026                           postinc0	equ	0xFEE
  2027                           wreg	equ	0xFE8
  2028                           postdec1	equ	0xFE5
  2029                           fsr1h	equ	0xFE2
  2030                           fsr1l	equ	0xFE1
  2031                           status	equ	0xFD8
  2032                           
  2033 ;; *************** function _sendData *****************
  2034 ;; Defined at:
  2035 ;;		line 108 in file "FastTransfer.c"
  2036 ;; Parameters:    Size  Location     Type
  2037 ;;  whereToSend     1    wreg     unsigned char 
  2038 ;; Auto vars:     Size  Location     Type
  2039 ;;  whereToSend     1    5[BANK0 ] unsigned char 
  2040 ;;  i               2    7[BANK0 ] int 
  2041 ;;  CS              1    6[BANK0 ] unsigned char 
  2042 ;; Return value:  Size  Location     Type
  2043 ;;                  1    wreg      void 
  2044 ;; Registers used:
  2045 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
  2046 ;; Tracked objects:
  2047 ;;		On entry : 0/0
  2048 ;;		On exit  : 0/0
  2049 ;;		Unchanged: 0/0
  2050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2051 ;;      Params:         0       0       0       0       0       0       0
  2052 ;;      Locals:         0       4       0       0       0       0       0
  2053 ;;      Temps:          0       1       0       0       0       0       0
  2054 ;;      Totals:         0       5       0       0       0       0       0
  2055 ;;Total ram usage:        5 bytes
  2056 ;; Hardware stack levels used:    1
  2057 ;; Hardware stack levels required when called:    7
  2058 ;; This function calls:
  2059 ;;		Absolute function
  2060 ;;		_CRC8
  2061 ;;		_FastTransfer_buffer_flush
  2062 ;;		_Send_put
  2063 ;;		_crcBufS_put
  2064 ;; This function is called by:
  2065 ;;		_respondChargerAsECU
  2066 ;;		_SetBMM
  2067 ;; This function uses a non-reentrant model
  2068 ;;
  2069                           
  2070                           	psect	text8
  2071  000A48                     __ptext8:
  2072                           	opt stack 0
  2073  000A48                     _sendData:
  2074                           	opt stack 21
  2075                           
  2076                           ;incstack = 0
  2077                           ;sendData@whereToSend stored from wreg
  2078  000A48  0100               	movlb	0	; () banked
  2079  000A4A  6FD7               	movwf	sendData@whereToSend& (0+255),b
  2080                           
  2081                           ;FastTransfer.c: 111: unsigned char CS = CRC8(sendStructAddress, ring_buffer.count);
  2082  000A4C  C0EF  F01B         	movff	_sendStructAddress,CRC8@data
  2083  000A50  C0F0  F01C         	movff	_sendStructAddress+1,CRC8@data+1
  2084  000A54  C1CC  F01D         	movff	_ring_buffer+204,CRC8@len
  2085  000A58  EC45  F00A         	call	_CRC8	;wreg free
  2086  000A5C  0100               	movlb	0	; () banked
  2087  000A5E  6FD8               	movwf	sendData@CS& (0+255),b
  2088                           
  2089                           ; BSR set to: 0
  2090                           ;FastTransfer.c: 113: serial_write(0x06);
  2091  000A60  D801               	call	u4648
  2092  000A62  D00B               	goto	l4391
  2093  000A64                     u4648:
  2094  000A64  0005               	push	
  2095  000A66  6EFA               	movwf	pclath,c
  2096  000A68  503E               	movf	_serial_write,w,c
  2097  000A6A  6EFD               	movwf	tosl,c
  2098  000A6C  503F               	movf	_serial_write+1,w,c
  2099  000A6E  6EFE               	movwf	tosh,c
  2100  000A70  50F8               	movf	tblptru,w,c
  2101  000A72  6EFF               	movwf	tosu,c
  2102  000A74  50FA               	movf	pclath,w,c
  2103  000A76  0E06               	movlw	6
  2104  000A78  0012               	return		;indir
  2105  000A7A                     l4391:
  2106                           
  2107                           ;FastTransfer.c: 114: serial_write(0x85);
  2108  000A7A  D801               	call	u4658
  2109  000A7C  D00B               	goto	l4393
  2110  000A7E                     u4658:
  2111  000A7E  0005               	push	
  2112  000A80  6EFA               	movwf	pclath,c
  2113  000A82  503E               	movf	_serial_write,w,c
  2114  000A84  6EFD               	movwf	tosl,c
  2115  000A86  503F               	movf	_serial_write+1,w,c
  2116  000A88  6EFE               	movwf	tosh,c
  2117  000A8A  50F8               	movf	tblptru,w,c
  2118  000A8C  6EFF               	movwf	tosu,c
  2119  000A8E  50FA               	movf	pclath,w,c
  2120  000A90  0E85               	movlw	133
  2121  000A92  0012               	return		;indir
  2122  000A94                     l4393:
  2123                           
  2124                           ;FastTransfer.c: 115: serial_write(whereToSend);
  2125  000A94  D801               	call	u4668
  2126  000A96  D00C               	goto	l4395
  2127  000A98                     u4668:
  2128  000A98  0005               	push	
  2129  000A9A  6EFA               	movwf	pclath,c
  2130  000A9C  503E               	movf	_serial_write,w,c
  2131  000A9E  6EFD               	movwf	tosl,c
  2132  000AA0  503F               	movf	_serial_write+1,w,c
  2133  000AA2  6EFE               	movwf	tosh,c
  2134  000AA4  50F8               	movf	tblptru,w,c
  2135  000AA6  6EFF               	movwf	tosu,c
  2136  000AA8  50FA               	movf	pclath,w,c
  2137  000AAA  0100               	movlb	0	; () banked
  2138  000AAC  51D7               	movf	sendData@whereToSend& (0+255),w,b
  2139  000AAE  0012               	return		;indir
  2140  000AB0                     l4395:
  2141                           
  2142                           ;FastTransfer.c: 116: serial_write(moduleAddress);
  2143  000AB0  D801               	call	u4678
  2144  000AB2  D00B               	goto	l4397
  2145  000AB4                     u4678:
  2146  000AB4  0005               	push	
  2147  000AB6  6EFA               	movwf	pclath,c
  2148  000AB8  503E               	movf	_serial_write,w,c
  2149  000ABA  6EFD               	movwf	tosl,c
  2150  000ABC  503F               	movf	_serial_write+1,w,c
  2151  000ABE  6EFE               	movwf	tosh,c
  2152  000AC0  50F8               	movf	tblptru,w,c
  2153  000AC2  6EFF               	movwf	tosu,c
  2154  000AC4  50FA               	movf	pclath,w,c
  2155  000AC6  5043               	movf	_moduleAddress,w,c
  2156  000AC8  0012               	return		;indir
  2157  000ACA                     l4397:
  2158                           
  2159                           ;FastTransfer.c: 117: serial_write(ring_buffer.count);
  2160  000ACA  D801               	call	u4688
  2161  000ACC  D00C               	goto	l4399
  2162  000ACE                     u4688:
  2163  000ACE  0005               	push	
  2164  000AD0  6EFA               	movwf	pclath,c
  2165  000AD2  503E               	movf	_serial_write,w,c
  2166  000AD4  6EFD               	movwf	tosl,c
  2167  000AD6  503F               	movf	_serial_write+1,w,c
  2168  000AD8  6EFE               	movwf	tosh,c
  2169  000ADA  50F8               	movf	tblptru,w,c
  2170  000ADC  6EFF               	movwf	tosu,c
  2171  000ADE  50FA               	movf	pclath,w,c
  2172  000AE0  0101               	movlb	1	; () banked
  2173  000AE2  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
  2174  000AE4  0012               	return		;indir
  2175  000AE6                     l4399:
  2176                           
  2177                           ;FastTransfer.c: 121: int i;
  2178                           ;FastTransfer.c: 122: for (i = 0; i < ring_buffer.count; i++) {
  2179  000AE6  0E00               	movlw	0
  2180  000AE8  0100               	movlb	0	; () banked
  2181  000AEA  6FDA               	movwf	(sendData@i+1)& (0+255),b
  2182  000AEC  0E00               	movlw	0
  2183  000AEE  6FD9               	movwf	sendData@i& (0+255),b
  2184  000AF0  D01A               	goto	l4405
  2185  000AF2                     l4401:
  2186                           
  2187                           ; BSR set to: 0
  2188                           ;FastTransfer.c: 123: serial_write(*(sendStructAddress + i));
  2189  000AF2  D801               	call	u4698
  2190  000AF4  D015               	goto	l4403
  2191  000AF6                     u4698:
  2192  000AF6  0005               	push	
  2193  000AF8  6EFA               	movwf	pclath,c
  2194  000AFA  503E               	movf	_serial_write,w,c
  2195  000AFC  6EFD               	movwf	tosl,c
  2196  000AFE  503F               	movf	_serial_write+1,w,c
  2197  000B00  6EFE               	movwf	tosh,c
  2198  000B02  50F8               	movf	tblptru,w,c
  2199  000B04  6EFF               	movwf	tosu,c
  2200  000B06  50FA               	movf	pclath,w,c
  2201  000B08  0100               	movlb	0	; () banked
  2202  000B0A  51D9               	movf	sendData@i& (0+255),w,b
  2203  000B0C  0100               	movlb	0	; () banked
  2204  000B0E  25EF               	addwf	_sendStructAddress& (0+255),w,b
  2205  000B10  6ED9               	movwf	fsr2l,c
  2206  000B12  0100               	movlb	0	; () banked
  2207  000B14  51DA               	movf	(sendData@i+1)& (0+255),w,b
  2208  000B16  0100               	movlb	0	; () banked
  2209  000B18  21F0               	addwfc	(_sendStructAddress+1)& (0+255),w,b
  2210  000B1A  6EDA               	movwf	fsr2h,c
  2211  000B1C  50DF               	movf	indf2,w,c
  2212  000B1E  0012               	return		;indir
  2213  000B20                     l4403:
  2214  000B20  0100               	movlb	0	; () banked
  2215  000B22  4BD9               	infsnz	sendData@i& (0+255),f,b
  2216  000B24  2BDA               	incf	(sendData@i+1)& (0+255),f,b
  2217  000B26                     l4405:
  2218                           
  2219                           ; BSR set to: 0
  2220  000B26  0101               	movlb	1	; () banked
  2221  000B28  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
  2222  000B2A  0100               	movlb	0	; () banked
  2223  000B2C  5DD9               	subwf	sendData@i& (0+255),w,b
  2224  000B2E  0100               	movlb	0	; () banked
  2225  000B30  51DA               	movf	(sendData@i+1)& (0+255),w,b
  2226  000B32  0A80               	xorlw	128
  2227  000B34  0100               	movlb	0	; () banked
  2228  000B36  6FD6               	movwf	??_sendData& (0+255),b
  2229  000B38  0101               	movlb	1	; () banked
  2230  000B3A  51CD               	movf	(_ring_buffer+205)& (0+255),w,b
  2231  000B3C  0A80               	xorlw	128
  2232  000B3E  0100               	movlb	0	; () banked
  2233  000B40  59D6               	subwfb	??_sendData& (0+255),w,b
  2234  000B42  A0D8               	btfss	status,0,c
  2235  000B44  D7D6               	goto	l4401
  2236                           
  2237                           ; BSR set to: 0
  2238                           ;FastTransfer.c: 124: }
  2239                           ;FastTransfer.c: 127: serial_write(CS);
  2240                           
  2241                           ; BSR set to: 0
  2242  000B46  D801               	call	u4718
  2243  000B48  D00C               	goto	l4409
  2244  000B4A                     u4718:
  2245  000B4A  0005               	push	
  2246  000B4C  6EFA               	movwf	pclath,c
  2247  000B4E  503E               	movf	_serial_write,w,c
  2248  000B50  6EFD               	movwf	tosl,c
  2249  000B52  503F               	movf	_serial_write+1,w,c
  2250  000B54  6EFE               	movwf	tosh,c
  2251  000B56  50F8               	movf	tblptru,w,c
  2252  000B58  6EFF               	movwf	tosu,c
  2253  000B5A  50FA               	movf	pclath,w,c
  2254  000B5C  0100               	movlb	0	; () banked
  2255  000B5E  51D8               	movf	sendData@CS& (0+255),w,b
  2256  000B60  0012               	return		;indir
  2257  000B62                     l4409:
  2258                           
  2259                           ;FastTransfer.c: 130: crcBufS_put(&crc_buffer, whereToSend, CS, 0);
  2260  000B62  0EC1               	movlw	low _crc_buffer
  2261  000B64  6E1B               	movwf	crcBufS_put@_this,c
  2262  000B66  0E00               	movlw	high _crc_buffer
  2263  000B68  6E1C               	movwf	crcBufS_put@_this+1,c
  2264  000B6A  C0D7  F01D         	movff	sendData@whereToSend,crcBufS_put@address
  2265  000B6E  C0D8  F01E         	movff	sendData@CS,crcBufS_put@oldCRC
  2266  000B72  0E00               	movlw	0
  2267  000B74  6E1F               	movwf	crcBufS_put@status,c
  2268  000B76  EC5E  F007         	call	_crcBufS_put
  2269                           
  2270                           ;FastTransfer.c: 133: FastTransfer_buffer_flush(&ring_buffer, 1);
  2271  000B7A  0E00               	movlw	low _ring_buffer
  2272  000B7C  0100               	movlb	0	; () banked
  2273  000B7E  6FD2               	movwf	FastTransfer_buffer_flush@_this& (0+255),b
  2274  000B80  0E01               	movlw	high _ring_buffer
  2275  000B82  0100               	movlb	0	; () banked
  2276  000B84  6FD3               	movwf	(FastTransfer_buffer_flush@_this+1)& (0+255),b
  2277  000B86  0E00               	movlw	0
  2278  000B88  0100               	movlb	0	; () banked
  2279  000B8A  6FD5               	movwf	(FastTransfer_buffer_flush@clearBuffer+1)& (0+255),b
  2280  000B8C  0E01               	movlw	1
  2281  000B8E  6FD4               	movwf	FastTransfer_buffer_flush@clearBuffer& (0+255),b
  2282  000B90  EC81  F009         	call	_FastTransfer_buffer_flush	;wreg free
  2283  000B94  0012               	return		;funcret
  2284  000B96                     __end_of_sendData:
  2285                           	opt stack 0
  2286                           tosu	equ	0xFFF
  2287                           tosh	equ	0xFFE
  2288                           tosl	equ	0xFFD
  2289                           pclath	equ	0xFFA
  2290                           tblptru	equ	0xFF8
  2291                           tblptrh	equ	0xFF7
  2292                           tblptrl	equ	0xFF6
  2293                           tablat	equ	0xFF5
  2294                           intcon	equ	0xFF2
  2295                           postinc0	equ	0xFEE
  2296                           wreg	equ	0xFE8
  2297                           postdec1	equ	0xFE5
  2298                           fsr1h	equ	0xFE2
  2299                           fsr1l	equ	0xFE1
  2300                           indf2	equ	0xFDF
  2301                           fsr2h	equ	0xFDA
  2302                           fsr2l	equ	0xFD9
  2303                           status	equ	0xFD8
  2304                           
  2305 ;; *************** function _crcBufS_put *****************
  2306 ;; Defined at:
  2307 ;;		line 376 in file "FastTransfer.c"
  2308 ;; Parameters:    Size  Location     Type
  2309 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  2310 ;;		 -> crc_buffer(17), 
  2311 ;;  address         1   28[COMRAM] unsigned char 
  2312 ;;  oldCRC          1   29[COMRAM] unsigned char 
  2313 ;;  status          1   30[COMRAM] unsigned char 
  2314 ;; Auto vars:     Size  Location     Type
  2315 ;;		None
  2316 ;; Return value:  Size  Location     Type
  2317 ;;                  1    wreg      void 
  2318 ;; Registers used:
  2319 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2320 ;; Tracked objects:
  2321 ;;		On entry : 0/0
  2322 ;;		On exit  : 0/0
  2323 ;;		Unchanged: 0/0
  2324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2325 ;;      Params:         5       0       0       0       0       0       0
  2326 ;;      Locals:         0       0       0       0       0       0       0
  2327 ;;      Temps:          2       0       0       0       0       0       0
  2328 ;;      Totals:         7       0       0       0       0       0       0
  2329 ;;Total ram usage:        7 bytes
  2330 ;; Hardware stack levels used:    1
  2331 ;; Hardware stack levels required when called:    4
  2332 ;; This function calls:
  2333 ;;		Nothing
  2334 ;; This function is called by:
  2335 ;;		_sendData
  2336 ;; This function uses a non-reentrant model
  2337 ;;
  2338                           
  2339                           	psect	text9
  2340  000EBC                     __ptext9:
  2341                           	opt stack 0
  2342  000EBC                     _crcBufS_put:
  2343                           	opt stack 23
  2344                           
  2345                           ;FastTransfer.c: 377: _this->buf[_this->head] = address;
  2346                           
  2347                           ;incstack = 0
  2348  000EBC  EE20 F00F          	lfsr	2,15
  2349  000EC0  501B               	movf	crcBufS_put@_this,w,c
  2350  000EC2  26D9               	addwf	fsr2l,f,c
  2351  000EC4  501C               	movf	crcBufS_put@_this+1,w,c
  2352  000EC6  22DA               	addwfc	fsr2h,f,c
  2353  000EC8  CFDE F020          	movff	postinc2,??_crcBufS_put
  2354  000ECC  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  2355  000ED0  5020               	movf	??_crcBufS_put,w,c
  2356  000ED2  241B               	addwf	crcBufS_put@_this,w,c
  2357  000ED4  6ED9               	movwf	fsr2l,c
  2358  000ED6  5021               	movf	??_crcBufS_put+1,w,c
  2359  000ED8  201C               	addwfc	crcBufS_put@_this+1,w,c
  2360  000EDA  6EDA               	movwf	fsr2h,c
  2361  000EDC  C01D  FFDF         	movff	crcBufS_put@address,indf2
  2362                           
  2363                           ;FastTransfer.c: 378: _this->head++;
  2364  000EE0  EE20 F00F          	lfsr	2,15
  2365  000EE4  501B               	movf	crcBufS_put@_this,w,c
  2366  000EE6  26D9               	addwf	fsr2l,f,c
  2367  000EE8  501C               	movf	crcBufS_put@_this+1,w,c
  2368  000EEA  22DA               	addwfc	fsr2h,f,c
  2369  000EEC  2ADE               	incf	postinc2,f,c
  2370  000EEE  0E00               	movlw	0
  2371  000EF0  22DD               	addwfc	postdec2,f,c
  2372                           
  2373                           ;FastTransfer.c: 379: _this->buf[_this->head] = oldCRC;
  2374  000EF2  EE20 F00F          	lfsr	2,15
  2375  000EF6  501B               	movf	crcBufS_put@_this,w,c
  2376  000EF8  26D9               	addwf	fsr2l,f,c
  2377  000EFA  501C               	movf	crcBufS_put@_this+1,w,c
  2378  000EFC  22DA               	addwfc	fsr2h,f,c
  2379  000EFE  CFDE F020          	movff	postinc2,??_crcBufS_put
  2380  000F02  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  2381  000F06  5020               	movf	??_crcBufS_put,w,c
  2382  000F08  241B               	addwf	crcBufS_put@_this,w,c
  2383  000F0A  6ED9               	movwf	fsr2l,c
  2384  000F0C  5021               	movf	??_crcBufS_put+1,w,c
  2385  000F0E  201C               	addwfc	crcBufS_put@_this+1,w,c
  2386  000F10  6EDA               	movwf	fsr2h,c
  2387  000F12  C01E  FFDF         	movff	crcBufS_put@oldCRC,indf2
  2388                           
  2389                           ;FastTransfer.c: 380: _this->head++;
  2390  000F16  EE20 F00F          	lfsr	2,15
  2391  000F1A  501B               	movf	crcBufS_put@_this,w,c
  2392  000F1C  26D9               	addwf	fsr2l,f,c
  2393  000F1E  501C               	movf	crcBufS_put@_this+1,w,c
  2394  000F20  22DA               	addwfc	fsr2h,f,c
  2395  000F22  2ADE               	incf	postinc2,f,c
  2396  000F24  0E00               	movlw	0
  2397  000F26  22DD               	addwfc	postdec2,f,c
  2398                           
  2399                           ;FastTransfer.c: 381: _this->buf[_this->head] = status;
  2400  000F28  EE20 F00F          	lfsr	2,15
  2401  000F2C  501B               	movf	crcBufS_put@_this,w,c
  2402  000F2E  26D9               	addwf	fsr2l,f,c
  2403  000F30  501C               	movf	crcBufS_put@_this+1,w,c
  2404  000F32  22DA               	addwfc	fsr2h,f,c
  2405  000F34  CFDE F020          	movff	postinc2,??_crcBufS_put
  2406  000F38  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  2407  000F3C  5020               	movf	??_crcBufS_put,w,c
  2408  000F3E  241B               	addwf	crcBufS_put@_this,w,c
  2409  000F40  6ED9               	movwf	fsr2l,c
  2410  000F42  5021               	movf	??_crcBufS_put+1,w,c
  2411  000F44  201C               	addwfc	crcBufS_put@_this+1,w,c
  2412  000F46  6EDA               	movwf	fsr2h,c
  2413  000F48  C01F  FFDF         	movff	crcBufS_put@status,indf2
  2414                           
  2415                           ;FastTransfer.c: 382: _this->head++;
  2416  000F4C  EE20 F00F          	lfsr	2,15
  2417  000F50  501B               	movf	crcBufS_put@_this,w,c
  2418  000F52  26D9               	addwf	fsr2l,f,c
  2419  000F54  501C               	movf	crcBufS_put@_this+1,w,c
  2420  000F56  22DA               	addwfc	fsr2h,f,c
  2421  000F58  2ADE               	incf	postinc2,f,c
  2422  000F5A  0E00               	movlw	0
  2423  000F5C  22DD               	addwfc	postdec2,f,c
  2424                           
  2425                           ;FastTransfer.c: 383: if (_this->head >= (5 * 3)) {
  2426  000F5E  EE20 F00F          	lfsr	2,15
  2427  000F62  501B               	movf	crcBufS_put@_this,w,c
  2428  000F64  26D9               	addwf	fsr2l,f,c
  2429  000F66  501C               	movf	crcBufS_put@_this+1,w,c
  2430  000F68  22DA               	addwfc	fsr2h,f,c
  2431  000F6A  0E01               	movlw	1
  2432  000F6C  BEDB               	btfsc	plusw2,7,c
  2433  000F6E  0012               	return	
  2434  000F70  0E01               	movlw	1
  2435  000F72  50DB               	movf	plusw2,w,c
  2436  000F74  E104               	bnz	u3980
  2437  000F76  0E0F               	movlw	15
  2438  000F78  5CDE               	subwf	postinc2,w,c
  2439  000F7A  A0D8               	btfss	status,0,c
  2440  000F7C  0012               	return	
  2441  000F7E                     u3980:
  2442                           
  2443                           ;FastTransfer.c: 384: _this->head = 0;
  2444  000F7E  EE20 F00F          	lfsr	2,15
  2445  000F82  501B               	movf	crcBufS_put@_this,w,c
  2446  000F84  26D9               	addwf	fsr2l,f,c
  2447  000F86  501C               	movf	crcBufS_put@_this+1,w,c
  2448  000F88  22DA               	addwfc	fsr2h,f,c
  2449  000F8A  0E00               	movlw	0
  2450  000F8C  6EDE               	movwf	postinc2,c
  2451  000F8E  0E00               	movlw	0
  2452  000F90  6EDD               	movwf	postdec2,c
  2453  000F92  0012               	return	
  2454  000F94                     __end_of_crcBufS_put:
  2455                           	opt stack 0
  2456                           tosu	equ	0xFFF
  2457                           tosh	equ	0xFFE
  2458                           tosl	equ	0xFFD
  2459                           pclath	equ	0xFFA
  2460                           tblptru	equ	0xFF8
  2461                           tblptrh	equ	0xFF7
  2462                           tblptrl	equ	0xFF6
  2463                           tablat	equ	0xFF5
  2464                           intcon	equ	0xFF2
  2465                           postinc0	equ	0xFEE
  2466                           wreg	equ	0xFE8
  2467                           postdec1	equ	0xFE5
  2468                           fsr1h	equ	0xFE2
  2469                           fsr1l	equ	0xFE1
  2470                           indf2	equ	0xFDF
  2471                           postinc2	equ	0xFDE
  2472                           postdec2	equ	0xFDD
  2473                           plusw2	equ	0xFDB
  2474                           fsr2h	equ	0xFDA
  2475                           fsr2l	equ	0xFD9
  2476                           status	equ	0xFD8
  2477                           
  2478 ;; *************** function _FastTransfer_buffer_flush *****************
  2479 ;; Defined at:
  2480 ;;		line 316 in file "FastTransfer.c"
  2481 ;; Parameters:    Size  Location     Type
  2482 ;;  _this           2    0[BANK0 ] PTR struct ringBufS
  2483 ;;		 -> ring_buffer(206), 
  2484 ;;  clearBuffer     2    2[BANK0 ] const int 
  2485 ;; Auto vars:     Size  Location     Type
  2486 ;;		None
  2487 ;; Return value:  Size  Location     Type
  2488 ;;                  1    wreg      void 
  2489 ;; Registers used:
  2490 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2491 ;; Tracked objects:
  2492 ;;		On entry : 0/0
  2493 ;;		On exit  : 0/0
  2494 ;;		Unchanged: 0/0
  2495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2496 ;;      Params:         0       4       0       0       0       0       0
  2497 ;;      Locals:         0       0       0       0       0       0       0
  2498 ;;      Temps:          0       0       0       0       0       0       0
  2499 ;;      Totals:         0       4       0       0       0       0       0
  2500 ;;Total ram usage:        4 bytes
  2501 ;; Hardware stack levels used:    1
  2502 ;; Hardware stack levels required when called:    5
  2503 ;; This function calls:
  2504 ;;		_memset
  2505 ;; This function is called by:
  2506 ;;		_sendData
  2507 ;; This function uses a non-reentrant model
  2508 ;;
  2509                           
  2510                           	psect	text10
  2511  001302                     __ptext10:
  2512                           	opt stack 0
  2513  001302                     _FastTransfer_buffer_flush:
  2514                           	opt stack 22
  2515                           
  2516                           ;FastTransfer.c: 317: _this->count = 0;
  2517                           
  2518                           ;incstack = 0
  2519  001302  0100               	movlb	0	; () banked
  2520  001304  EE20 F0CC          	lfsr	2,204
  2521  001308  51D2               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  2522  00130A  26D9               	addwf	fsr2l,f,c
  2523  00130C  51D3               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  2524  00130E  22DA               	addwfc	fsr2h,f,c
  2525  001310  0E00               	movlw	0
  2526  001312  6EDE               	movwf	postinc2,c
  2527  001314  0E00               	movlw	0
  2528  001316  6EDD               	movwf	postdec2,c
  2529                           
  2530                           ;FastTransfer.c: 318: _this->head = 0;
  2531  001318  0100               	movlb	0	; () banked
  2532  00131A  EE20 F0C8          	lfsr	2,200
  2533  00131E  51D2               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  2534  001320  26D9               	addwf	fsr2l,f,c
  2535  001322  51D3               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  2536  001324  22DA               	addwfc	fsr2h,f,c
  2537  001326  0E00               	movlw	0
  2538  001328  6EDE               	movwf	postinc2,c
  2539  00132A  0E00               	movlw	0
  2540  00132C  6EDD               	movwf	postdec2,c
  2541                           
  2542                           ;FastTransfer.c: 319: _this->tail = 0;
  2543  00132E  0100               	movlb	0	; () banked
  2544  001330  EE20 F0CA          	lfsr	2,202
  2545  001334  51D2               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  2546  001336  26D9               	addwf	fsr2l,f,c
  2547  001338  51D3               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  2548  00133A  22DA               	addwfc	fsr2h,f,c
  2549  00133C  0E00               	movlw	0
  2550  00133E  6EDE               	movwf	postinc2,c
  2551  001340  0E00               	movlw	0
  2552  001342  6EDD               	movwf	postdec2,c
  2553                           
  2554                           ; BSR set to: 0
  2555                           ;FastTransfer.c: 320: if (clearBuffer) {
  2556  001344  0100               	movlb	0	; () banked
  2557  001346  51D4               	movf	FastTransfer_buffer_flush@clearBuffer& (0+255),w,b
  2558  001348  0100               	movlb	0	; () banked
  2559  00134A  11D5               	iorwf	(FastTransfer_buffer_flush@clearBuffer+1)& (0+255),w,b
  2560  00134C  B4D8               	btfsc	status,2,c
  2561  00134E  0012               	return	
  2562                           
  2563                           ; BSR set to: 0
  2564                           ;FastTransfer.c: 321: memset(_this->buf, 0, sizeof (_this->buf));
  2565  001350  C0D2  F01B         	movff	FastTransfer_buffer_flush@_this,memset@p1
  2566  001354  C0D3  F01C         	movff	FastTransfer_buffer_flush@_this+1,memset@p1+1
  2567  001358  0E00               	movlw	0
  2568  00135A  6E1E               	movwf	memset@c+1,c
  2569  00135C  0E00               	movlw	0
  2570  00135E  6E1D               	movwf	memset@c,c
  2571  001360  0E00               	movlw	0
  2572  001362  6E20               	movwf	memset@n+1,c
  2573  001364  0EC8               	movlw	200
  2574  001366  6E1F               	movwf	memset@n,c
  2575  001368  EC6F  F00B         	call	_memset	;wreg free
  2576  00136C  0012               	return	
  2577  00136E                     __end_of_FastTransfer_buffer_flush:
  2578                           	opt stack 0
  2579                           tosu	equ	0xFFF
  2580                           tosh	equ	0xFFE
  2581                           tosl	equ	0xFFD
  2582                           pclath	equ	0xFFA
  2583                           tblptru	equ	0xFF8
  2584                           tblptrh	equ	0xFF7
  2585                           tblptrl	equ	0xFF6
  2586                           tablat	equ	0xFF5
  2587                           intcon	equ	0xFF2
  2588                           postinc0	equ	0xFEE
  2589                           wreg	equ	0xFE8
  2590                           postdec1	equ	0xFE5
  2591                           fsr1h	equ	0xFE2
  2592                           fsr1l	equ	0xFE1
  2593                           indf2	equ	0xFDF
  2594                           postinc2	equ	0xFDE
  2595                           postdec2	equ	0xFDD
  2596                           plusw2	equ	0xFDB
  2597                           fsr2h	equ	0xFDA
  2598                           fsr2l	equ	0xFD9
  2599                           status	equ	0xFD8
  2600                           
  2601 ;; *************** function _receiveData *****************
  2602 ;; Defined at:
  2603 ;;		line 137 in file "FastTransfer.c"
  2604 ;; Parameters:    Size  Location     Type
  2605 ;;		None
  2606 ;; Auto vars:     Size  Location     Type
  2607 ;;  holder          3   18[BANK0 ] unsigned char [3]
  2608 ;;  crcHolder       1   22[BANK0 ] unsigned char 
  2609 ;;  holder          3   15[BANK0 ] unsigned char [3]
  2610 ;;  crcHolder       1   21[BANK0 ] unsigned char 
  2611 ;;  u               2   23[BANK0 ] int 
  2612 ;;  r               2   25[BANK0 ] int 
  2613 ;; Return value:  Size  Location     Type
  2614 ;;                  1    wreg      unsigned char 
  2615 ;; Registers used:
  2616 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  2617 ;; Tracked objects:
  2618 ;;		On entry : 0/0
  2619 ;;		On exit  : 0/0
  2620 ;;		Unchanged: 0/0
  2621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2622 ;;      Params:         0       0       0       0       0       0       0
  2623 ;;      Locals:         0      12       0       0       0       0       0
  2624 ;;      Temps:          0       6       0       0       0       0       0
  2625 ;;      Totals:         0      18       0       0       0       0       0
  2626 ;;Total ram usage:       18 bytes
  2627 ;; Hardware stack levels used:    1
  2628 ;; Hardware stack levels required when called:    8
  2629 ;; This function calls:
  2630 ;;		Absolute function
  2631 ;;		_CRC8
  2632 ;;		_CRCcheck
  2633 ;;		_Receive_available
  2634 ;;		_Receive_get
  2635 ;;		_Receive_peek
  2636 ;;		_Send_put
  2637 ;; This function is called by:
  2638 ;;		_updateComms
  2639 ;;		_SetBMM
  2640 ;; This function uses a non-reentrant model
  2641 ;;
  2642                           
  2643                           	psect	text11
  2644  0000BC                     __ptext11:
  2645                           	opt stack 0
  2646  0000BC                     _receiveData:
  2647                           	opt stack 20
  2648                           
  2649                           ;FastTransfer.c: 140: if (rx_len == 0) {
  2650                           
  2651                           ;incstack = 0
  2652  0000BC  5039               	movf	_rx_len,w,c
  2653  0000BE  A4D8               	btfss	status,2,c
  2654  0000C0  D0AC               	goto	l4257
  2655                           
  2656                           ;FastTransfer.c: 142: if (serial_available() > 4) {
  2657  0000C2  D801               	call	u4168
  2658  0000C4  D00A               	goto	u4169
  2659  0000C6                     u4168:
  2660  0000C6  0005               	push	
  2661  0000C8  6EFA               	movwf	pclath,c
  2662  0000CA  503A               	movf	_serial_available,w,c
  2663  0000CC  6EFD               	movwf	tosl,c
  2664  0000CE  503B               	movf	_serial_available+1,w,c
  2665  0000D0  6EFE               	movwf	tosh,c
  2666  0000D2  50F8               	movf	tblptru,w,c
  2667  0000D4  6EFF               	movwf	tosu,c
  2668  0000D6  50FA               	movf	pclath,w,c
  2669  0000D8  0012               	return		;indir
  2670  0000DA                     u4169:
  2671  0000DA  BE1E               	btfsc	?_Receive_available+1,7,c
  2672  0000DC  D09E               	goto	l4257
  2673  0000DE  501E               	movf	?_Receive_available+1,w,c
  2674  0000E0  E11E               	bnz	l4233
  2675  0000E2  0E05               	movlw	5
  2676  0000E4  5C1D               	subwf	?_Receive_available,w,c
  2677  0000E6  B0D8               	btfsc	status,0,c
  2678  0000E8  D01A               	goto	l4233
  2679  0000EA  D097               	goto	l4257
  2680  0000EC                     l4225:
  2681                           
  2682                           ;FastTransfer.c: 148: alignErrorCounter++;
  2683  0000EC  0100               	movlb	0	; () banked
  2684  0000EE  4B93               	infsnz	_alignErrorCounter& (0+255),f,b
  2685  0000F0  2B94               	incf	(_alignErrorCounter+1)& (0+255),f,b
  2686                           
  2687                           ; BSR set to: 0
  2688                           ;FastTransfer.c: 149: if (serial_available() < 5)
  2689  0000F2  D801               	call	u4188
  2690  0000F4  D00A               	goto	u4189
  2691  0000F6                     u4188:
  2692  0000F6  0005               	push	
  2693  0000F8  6EFA               	movwf	pclath,c
  2694  0000FA  503A               	movf	_serial_available,w,c
  2695  0000FC  6EFD               	movwf	tosl,c
  2696  0000FE  503B               	movf	_serial_available+1,w,c
  2697  000100  6EFE               	movwf	tosh,c
  2698  000102  50F8               	movf	tblptru,w,c
  2699  000104  6EFF               	movwf	tosu,c
  2700  000106  50FA               	movf	pclath,w,c
  2701  000108  0012               	return		;indir
  2702  00010A                     u4189:
  2703  00010A  BE1E               	btfsc	?_Receive_available+1,7,c
  2704  00010C  D006               	goto	l4229
  2705  00010E  501E               	movf	?_Receive_available+1,w,c
  2706  000110  E106               	bnz	l4233
  2707  000112  0E05               	movlw	5
  2708  000114  5C1D               	subwf	?_Receive_available,w,c
  2709  000116  B0D8               	btfsc	status,0,c
  2710  000118  D002               	goto	l4233
  2711  00011A                     l4229:
  2712                           
  2713                           ;FastTransfer.c: 150: return 0;
  2714  00011A  0E00               	movlw	0
  2715  00011C  0012               	return	
  2716  00011E                     l4233:
  2717  00011E  D801               	call	u4208
  2718  000120  D00A               	goto	u4209
  2719  000122                     u4208:
  2720  000122  0005               	push	
  2721  000124  6EFA               	movwf	pclath,c
  2722  000126  503C               	movf	_serial_read,w,c
  2723  000128  6EFD               	movwf	tosl,c
  2724  00012A  503D               	movf	_serial_read+1,w,c
  2725  00012C  6EFE               	movwf	tosh,c
  2726  00012E  50F8               	movf	tblptru,w,c
  2727  000130  6EFF               	movwf	tosu,c
  2728  000132  50FA               	movf	pclath,w,c
  2729  000134  0012               	return		;indir
  2730  000136                     u4209:
  2731  000136  0A06               	xorlw	6
  2732  000138  A4D8               	btfss	status,2,c
  2733  00013A  D7D8               	goto	l4225
  2734                           
  2735                           ;FastTransfer.c: 151: }
  2736                           ;FastTransfer.c: 152: if (serial_read() == 0x85) {
  2737  00013C  D801               	call	u4228
  2738  00013E  D00A               	goto	u4229
  2739  000140                     u4228:
  2740  000140  0005               	push	
  2741  000142  6EFA               	movwf	pclath,c
  2742  000144  503C               	movf	_serial_read,w,c
  2743  000146  6EFD               	movwf	tosl,c
  2744  000148  503D               	movf	_serial_read+1,w,c
  2745  00014A  6EFE               	movwf	tosh,c
  2746  00014C  50F8               	movf	tblptru,w,c
  2747  00014E  6EFF               	movwf	tosu,c
  2748  000150  50FA               	movf	pclath,w,c
  2749  000152  0012               	return		;indir
  2750  000154                     u4229:
  2751  000154  0A85               	xorlw	133
  2752  000156  A4D8               	btfss	status,2,c
  2753  000158  D060               	goto	l4257
  2754                           
  2755                           ;FastTransfer.c: 153: rx_address = serial_read();
  2756  00015A  D801               	call	u4248
  2757  00015C  D00A               	goto	u4249
  2758  00015E                     u4248:
  2759  00015E  0005               	push	
  2760  000160  6EFA               	movwf	pclath,c
  2761  000162  503C               	movf	_serial_read,w,c
  2762  000164  6EFD               	movwf	tosl,c
  2763  000166  503D               	movf	_serial_read+1,w,c
  2764  000168  6EFE               	movwf	tosh,c
  2765  00016A  50F8               	movf	tblptru,w,c
  2766  00016C  6EFF               	movwf	tosu,c
  2767  00016E  50FA               	movf	pclath,w,c
  2768  000170  0012               	return		;indir
  2769  000172                     u4249:
  2770  000172  6E37               	movwf	_rx_address,c
  2771                           
  2772                           ;FastTransfer.c: 154: returnAddress = serial_read();
  2773  000174  D801               	call	u4258
  2774  000176  D00A               	goto	u4259
  2775  000178                     u4258:
  2776  000178  0005               	push	
  2777  00017A  6EFA               	movwf	pclath,c
  2778  00017C  503C               	movf	_serial_read,w,c
  2779  00017E  6EFD               	movwf	tosl,c
  2780  000180  503D               	movf	_serial_read+1,w,c
  2781  000182  6EFE               	movwf	tosh,c
  2782  000184  50F8               	movf	tblptru,w,c
  2783  000186  6EFF               	movwf	tosu,c
  2784  000188  50FA               	movf	pclath,w,c
  2785  00018A  0012               	return		;indir
  2786  00018C                     u4259:
  2787  00018C  6E36               	movwf	_returnAddress,c
  2788                           
  2789                           ;FastTransfer.c: 155: rx_len = serial_read();
  2790  00018E  D801               	call	u4268
  2791  000190  D00A               	goto	u4269
  2792  000192                     u4268:
  2793  000192  0005               	push	
  2794  000194  6EFA               	movwf	pclath,c
  2795  000196  503C               	movf	_serial_read,w,c
  2796  000198  6EFD               	movwf	tosl,c
  2797  00019A  503D               	movf	_serial_read+1,w,c
  2798  00019C  6EFE               	movwf	tosh,c
  2799  00019E  50F8               	movf	tblptru,w,c
  2800  0001A0  6EFF               	movwf	tosu,c
  2801  0001A2  50FA               	movf	pclath,w,c
  2802  0001A4  0012               	return		;indir
  2803  0001A6                     u4269:
  2804  0001A6  6E39               	movwf	_rx_len,c
  2805                           
  2806                           ;FastTransfer.c: 157: if (rx_address != moduleAddress) {
  2807  0001A8  5043               	movf	_moduleAddress,w,c
  2808  0001AA  1837               	xorwf	_rx_address,w,c
  2809  0001AC  B4D8               	btfsc	status,2,c
  2810  0001AE  D035               	goto	l4257
  2811                           
  2812                           ;FastTransfer.c: 158: addressErrorCounter++;
  2813  0001B0  0100               	movlb	0	; () banked
  2814  0001B2  4B91               	infsnz	_addressErrorCounter& (0+255),f,b
  2815  0001B4  2B92               	incf	(_addressErrorCounter+1)& (0+255),f,b
  2816                           
  2817                           ; BSR set to: 0
  2818                           ;FastTransfer.c: 161: int u;
  2819                           ;FastTransfer.c: 162: for (u = 0; u <= (rx_len + 1); u++) {
  2820  0001B6  0E00               	movlw	0
  2821  0001B8  0100               	movlb	0	; () banked
  2822  0001BA  6FEA               	movwf	(receiveData@u+1)& (0+255),b
  2823  0001BC  0E00               	movlw	0
  2824  0001BE  6FE9               	movwf	receiveData@u& (0+255),b
  2825  0001C0  D00F               	goto	l4249
  2826  0001C2                     l4245:
  2827                           
  2828                           ; BSR set to: 0
  2829                           ;FastTransfer.c: 163: serial_read();
  2830  0001C2  D801               	call	u4288
  2831  0001C4  D00A               	goto	l4247
  2832  0001C6                     u4288:
  2833  0001C6  0005               	push	
  2834  0001C8  6EFA               	movwf	pclath,c
  2835  0001CA  503C               	movf	_serial_read,w,c
  2836  0001CC  6EFD               	movwf	tosl,c
  2837  0001CE  503D               	movf	_serial_read+1,w,c
  2838  0001D0  6EFE               	movwf	tosh,c
  2839  0001D2  50F8               	movf	tblptru,w,c
  2840  0001D4  6EFF               	movwf	tosu,c
  2841  0001D6  50FA               	movf	pclath,w,c
  2842  0001D8  0012               	return		;indir
  2843  0001DA                     l4247:
  2844  0001DA  0100               	movlb	0	; () banked
  2845  0001DC  4BE9               	infsnz	receiveData@u& (0+255),f,b
  2846  0001DE  2BEA               	incf	(receiveData@u+1)& (0+255),f,b
  2847  0001E0                     l4249:
  2848                           
  2849                           ; BSR set to: 0
  2850  0001E0  5039               	movf	_rx_len,w,c
  2851  0001E2  0100               	movlb	0	; () banked
  2852  0001E4  6FDB               	movwf	??_receiveData& (0+255),b
  2853  0001E6  6BDC               	clrf	(??_receiveData+1)& (0+255),b
  2854  0001E8  0E01               	movlw	1
  2855  0001EA  0100               	movlb	0	; () banked
  2856  0001EC  27DB               	addwf	??_receiveData& (0+255),f,b
  2857  0001EE  0E00               	movlw	0
  2858  0001F0  23DC               	addwfc	(??_receiveData+1)& (0+255),f,b
  2859  0001F2  0100               	movlb	0	; () banked
  2860  0001F4  51E9               	movf	receiveData@u& (0+255),w,b
  2861  0001F6  0100               	movlb	0	; () banked
  2862  0001F8  5DDB               	subwf	??_receiveData& (0+255),w,b
  2863  0001FA  0100               	movlb	0	; () banked
  2864  0001FC  51DC               	movf	(??_receiveData+1)& (0+255),w,b
  2865  0001FE  0A80               	xorlw	128
  2866  000200  0100               	movlb	0	; () banked
  2867  000202  6FDD               	movwf	(??_receiveData+2)& (0+255),b
  2868  000204  0100               	movlb	0	; () banked
  2869  000206  51EA               	movf	(receiveData@u+1)& (0+255),w,b
  2870  000208  0A80               	xorlw	128
  2871  00020A  0100               	movlb	0	; () banked
  2872  00020C  59DD               	subwfb	(??_receiveData+2)& (0+255),w,b
  2873  00020E  B0D8               	btfsc	status,0,c
  2874  000210  D7D8               	goto	l4245
  2875                           
  2876                           ; BSR set to: 0
  2877                           ;FastTransfer.c: 164: }
  2878                           ;FastTransfer.c: 165: rx_len = 0;
  2879                           
  2880                           ; BSR set to: 0
  2881  000212  0E00               	movlw	0
  2882  000214  6E39               	movwf	_rx_len,c
  2883                           
  2884                           ; BSR set to: 0
  2885                           ;FastTransfer.c: 166: return 0;
  2886  000216  0E00               	movlw	0
  2887                           
  2888                           ; BSR set to: 0
  2889  000218  0012               	return	
  2890  00021A                     l4257:
  2891                           
  2892                           ;FastTransfer.c: 167: }
  2893                           ;FastTransfer.c: 169: }
  2894                           ;FastTransfer.c: 170: }
  2895                           ;FastTransfer.c: 171: }
  2896                           ;FastTransfer.c: 174: if (rx_len != 0) {
  2897  00021A  5039               	movf	_rx_len,w,c
  2898  00021C  B4D8               	btfsc	status,2,c
  2899  00021E  D2A9               	goto	l4381
  2900                           
  2901                           ;FastTransfer.c: 177: if (rx_array_inx == 0) {
  2902  000220  5038               	movf	_rx_array_inx,w,c
  2903  000222  A4D8               	btfss	status,2,c
  2904  000224  D044               	goto	l4281
  2905  000226                     l4263:
  2906  000226  D801               	call	u4328
  2907  000228  D00A               	goto	u4329
  2908  00022A                     u4328:
  2909  00022A  0005               	push	
  2910  00022C  6EFA               	movwf	pclath,c
  2911  00022E  503A               	movf	_serial_available,w,c
  2912  000230  6EFD               	movwf	tosl,c
  2913  000232  503B               	movf	_serial_available+1,w,c
  2914  000234  6EFE               	movwf	tosh,c
  2915  000236  50F8               	movf	tblptru,w,c
  2916  000238  6EFF               	movwf	tosu,c
  2917  00023A  50FA               	movf	pclath,w,c
  2918  00023C  0012               	return		;indir
  2919  00023E                     u4329:
  2920  00023E  BE1E               	btfsc	?_Receive_available+1,7,c
  2921  000240  D7F2               	goto	l4263
  2922  000242  501E               	movf	?_Receive_available+1,w,c
  2923  000244  E103               	bnz	l4265
  2924  000246  041D               	decf	?_Receive_available,w,c
  2925  000248  A0D8               	btfss	status,0,c
  2926  00024A  D7ED               	goto	l4263
  2927  00024C                     l4265:
  2928                           
  2929                           ;FastTransfer.c: 179: if (255 == serial_peek()) {
  2930  00024C  D801               	call	u4348
  2931  00024E  D00B               	goto	u4349
  2932  000250                     u4348:
  2933  000250  0005               	push	
  2934  000252  0100               	movlb	0	; () banked
  2935  000254  6EFA               	movwf	pclath,c
  2936  000256  51F1               	movf	_serial_peek& (0+255),w,b
  2937  000258  6EFD               	movwf	tosl,c
  2938  00025A  51F2               	movf	(_serial_peek+1)& (0+255),w,b
  2939  00025C  6EFE               	movwf	tosh,c
  2940  00025E  50F8               	movf	tblptru,w,c
  2941  000260  6EFF               	movwf	tosu,c
  2942  000262  50FA               	movf	pclath,w,c
  2943  000264  0012               	return		;indir
  2944  000266                     u4349:
  2945  000266  0AFF               	xorlw	255
  2946  000268  A4D8               	btfss	status,2,c
  2947  00026A  D021               	goto	l4281
  2948                           
  2949                           ;FastTransfer.c: 180: CRCcheck();
  2950  00026C  EC75  F004         	call	_CRCcheck	;wreg free
  2951                           
  2952                           ;FastTransfer.c: 181: rx_len = 0;
  2953  000270  0E00               	movlw	0
  2954  000272  6E39               	movwf	_rx_len,c
  2955                           
  2956                           ;FastTransfer.c: 182: rx_array_inx = 0;
  2957  000274  0E00               	movlw	0
  2958  000276  6E38               	movwf	_rx_array_inx,c
  2959                           
  2960                           ;FastTransfer.c: 183: return 0;
  2961  000278  0E00               	movlw	0
  2962  00027A  0012               	return	
  2963  00027C                     l4277:
  2964                           
  2965                           ;FastTransfer.c: 189: rx_buffer[rx_array_inx++] = serial_read();
  2966  00027C  D801               	call	u4368
  2967  00027E  D00A               	goto	u4369
  2968  000280                     u4368:
  2969  000280  0005               	push	
  2970  000282  6EFA               	movwf	pclath,c
  2971  000284  503C               	movf	_serial_read,w,c
  2972  000286  6EFD               	movwf	tosl,c
  2973  000288  503D               	movf	_serial_read+1,w,c
  2974  00028A  6EFE               	movwf	tosh,c
  2975  00028C  50F8               	movf	tblptru,w,c
  2976  00028E  6EFF               	movwf	tosu,c
  2977  000290  50FA               	movf	pclath,w,c
  2978  000292  0012               	return		;indir
  2979  000294                     u4369:
  2980  000294  0100               	movlb	0	; () banked
  2981  000296  6FDB               	movwf	??_receiveData& (0+255),b
  2982  000298  5038               	movf	_rx_array_inx,w,c
  2983  00029A  0D01               	mullw	1
  2984  00029C  0E00               	movlw	low _rx_buffer
  2985  00029E  24F3               	addwf	prodl,w,c
  2986  0002A0  6ED9               	movwf	fsr2l,c
  2987  0002A2  0E02               	movlw	high _rx_buffer
  2988  0002A4  20F4               	addwfc	prodh,w,c
  2989  0002A6  6EDA               	movwf	fsr2h,c
  2990  0002A8  C0DB  FFDF         	movff	??_receiveData,indf2
  2991                           
  2992                           ; BSR set to: 0
  2993  0002AC  2A38               	incf	_rx_array_inx,f,c
  2994  0002AE                     l4281:
  2995  0002AE  D801               	call	u4378
  2996  0002B0  D00A               	goto	u4379
  2997  0002B2                     u4378:
  2998  0002B2  0005               	push	
  2999  0002B4  6EFA               	movwf	pclath,c
  3000  0002B6  503A               	movf	_serial_available,w,c
  3001  0002B8  6EFD               	movwf	tosl,c
  3002  0002BA  503B               	movf	_serial_available+1,w,c
  3003  0002BC  6EFE               	movwf	tosh,c
  3004  0002BE  50F8               	movf	tblptru,w,c
  3005  0002C0  6EFF               	movwf	tosu,c
  3006  0002C2  50FA               	movf	pclath,w,c
  3007  0002C4  0012               	return		;indir
  3008  0002C6                     u4379:
  3009  0002C6  501D               	movf	?_Receive_available,w,c
  3010  0002C8  101E               	iorwf	?_Receive_available+1,w,c
  3011  0002CA  B4D8               	btfsc	status,2,c
  3012  0002CC  D004               	goto	l4285
  3013  0002CE  5038               	movf	_rx_array_inx,w,c
  3014  0002D0  5C39               	subwf	_rx_len,w,c
  3015  0002D2  B0D8               	btfsc	status,0,c
  3016  0002D4  D7D3               	goto	l4277
  3017  0002D6                     l4285:
  3018                           
  3019                           ;FastTransfer.c: 190: }
  3020                           ;FastTransfer.c: 192: if (rx_len == (rx_array_inx - 1)) {
  3021  0002D6  5039               	movf	_rx_len,w,c
  3022  0002D8  0100               	movlb	0	; () banked
  3023  0002DA  6FDB               	movwf	??_receiveData& (0+255),b
  3024  0002DC  6BDC               	clrf	(??_receiveData+1)& (0+255),b
  3025  0002DE  0EFF               	movlw	255
  3026  0002E0  0100               	movlb	0	; () banked
  3027  0002E2  6FDD               	movwf	(??_receiveData+2)& (0+255),b
  3028  0002E4  0EFF               	movlw	255
  3029  0002E6  0100               	movlb	0	; () banked
  3030  0002E8  6FDE               	movwf	(??_receiveData+3)& (0+255),b
  3031  0002EA  5038               	movf	_rx_array_inx,w,c
  3032  0002EC  0100               	movlb	0	; () banked
  3033  0002EE  6FDF               	movwf	(??_receiveData+4)& (0+255),b
  3034  0002F0  6BE0               	clrf	(??_receiveData+5)& (0+255),b
  3035  0002F2  0100               	movlb	0	; () banked
  3036  0002F4  51DD               	movf	(??_receiveData+2)& (0+255),w,b
  3037  0002F6  0100               	movlb	0	; () banked
  3038  0002F8  27DF               	addwf	(??_receiveData+4)& (0+255),f,b
  3039  0002FA  0100               	movlb	0	; () banked
  3040  0002FC  51DE               	movf	(??_receiveData+3)& (0+255),w,b
  3041  0002FE  0100               	movlb	0	; () banked
  3042  000300  23E0               	addwfc	(??_receiveData+5)& (0+255),f,b
  3043  000302  0100               	movlb	0	; () banked
  3044  000304  51DB               	movf	??_receiveData& (0+255),w,b
  3045  000306  0100               	movlb	0	; () banked
  3046  000308  19DF               	xorwf	(??_receiveData+4)& (0+255),w,b
  3047  00030A  E105               	bnz	u4401
  3048  00030C  0100               	movlb	0	; () banked
  3049  00030E  51DC               	movf	(??_receiveData+1)& (0+255),w,b
  3050  000310  0100               	movlb	0	; () banked
  3051  000312  19E0               	xorwf	(??_receiveData+5)& (0+255),w,b
  3052  000314  A4D8               	btfss	status,2,c
  3053  000316                     u4401:
  3054  000316  D22D               	goto	l4381
  3055                           
  3056                           ; BSR set to: 0
  3057                           ;FastTransfer.c: 195: calc_CS = CRC8(rx_buffer, rx_len);
  3058  000318  0E00               	movlw	low _rx_buffer
  3059  00031A  6E1B               	movwf	CRC8@data,c
  3060  00031C  0E02               	movlw	high _rx_buffer
  3061  00031E  6E1C               	movwf	CRC8@data+1,c
  3062  000320  C039  F01D         	movff	_rx_len,CRC8@len
  3063  000324  EC45  F00A         	call	_CRC8	;wreg free
  3064  000328  6E2F               	movwf	_calc_CS,c
  3065                           
  3066                           ;FastTransfer.c: 199: if (calc_CS == rx_buffer[rx_array_inx - 1]) {
  3067  00032A  0EFF               	movlw	255
  3068  00032C  0100               	movlb	0	; () banked
  3069  00032E  6FDB               	movwf	??_receiveData& (0+255),b
  3070  000330  0EFF               	movlw	255
  3071  000332  0100               	movlb	0	; () banked
  3072  000334  6FDC               	movwf	(??_receiveData+1)& (0+255),b
  3073  000336  5038               	movf	_rx_array_inx,w,c
  3074  000338  0100               	movlb	0	; () banked
  3075  00033A  6FDD               	movwf	(??_receiveData+2)& (0+255),b
  3076  00033C  6BDE               	clrf	(??_receiveData+3)& (0+255),b
  3077  00033E  0100               	movlb	0	; () banked
  3078  000340  51DB               	movf	??_receiveData& (0+255),w,b
  3079  000342  0100               	movlb	0	; () banked
  3080  000344  27DD               	addwf	(??_receiveData+2)& (0+255),f,b
  3081  000346  0100               	movlb	0	; () banked
  3082  000348  51DC               	movf	(??_receiveData+1)& (0+255),w,b
  3083  00034A  0100               	movlb	0	; () banked
  3084  00034C  23DE               	addwfc	(??_receiveData+3)& (0+255),f,b
  3085  00034E  0E00               	movlw	low _rx_buffer
  3086  000350  0100               	movlb	0	; () banked
  3087  000352  25DD               	addwf	(??_receiveData+2)& (0+255),w,b
  3088  000354  6ED9               	movwf	fsr2l,c
  3089  000356  0E02               	movlw	high _rx_buffer
  3090  000358  0100               	movlb	0	; () banked
  3091  00035A  21DE               	addwfc	(??_receiveData+3)& (0+255),w,b
  3092  00035C  6EDA               	movwf	fsr2h,c
  3093  00035E  502F               	movf	_calc_CS,w,c
  3094  000360  18DE               	xorwf	postinc2,w,c
  3095  000362  A4D8               	btfss	status,2,c
  3096  000364  D13D               	goto	l4343
  3097                           
  3098                           ; BSR set to: 0
  3099                           ;FastTransfer.c: 202: int r;
  3100                           ;FastTransfer.c: 203: for (r = 0; r < rx_len; r = r + 3) {
  3101  000366  0E00               	movlw	0
  3102  000368  0100               	movlb	0	; () banked
  3103  00036A  6FEC               	movwf	(receiveData@r+1)& (0+255),b
  3104  00036C  0E00               	movlw	0
  3105  00036E  6FEB               	movwf	receiveData@r& (0+255),b
  3106  000370  D05D               	goto	l4303
  3107  000372                     l4293:
  3108                           
  3109                           ; BSR set to: 0
  3110                           ;FastTransfer.c: 204: if (rx_buffer[r] < maxDataAddress) {
  3111  000372  0E00               	movlw	low _rx_buffer
  3112  000374  0100               	movlb	0	; () banked
  3113  000376  25EB               	addwf	receiveData@r& (0+255),w,b
  3114  000378  6ED9               	movwf	fsr2l,c
  3115  00037A  0E02               	movlw	high _rx_buffer
  3116  00037C  0100               	movlb	0	; () banked
  3117  00037E  21EC               	addwfc	(receiveData@r+1)& (0+255),w,b
  3118  000380  6EDA               	movwf	fsr2h,c
  3119  000382  0100               	movlb	0	; () banked
  3120  000384  51F4               	movf	_maxDataAddress& (0+255),w,b
  3121  000386  5CDE               	subwf	postinc2,w,c
  3122  000388  B0D8               	btfsc	status,0,c
  3123  00038A  D043               	goto	l4299
  3124                           
  3125                           ; BSR set to: 0
  3126                           ;FastTransfer.c: 205: group.parts[0] = rx_buffer[r + 1];
  3127  00038C  0E01               	movlw	1
  3128  00038E  0100               	movlb	0	; () banked
  3129  000390  25EB               	addwf	receiveData@r& (0+255),w,b
  3130  000392  0100               	movlb	0	; () banked
  3131  000394  6FDB               	movwf	??_receiveData& (0+255),b
  3132  000396  0E00               	movlw	0
  3133  000398  0100               	movlb	0	; () banked
  3134  00039A  21EC               	addwfc	(receiveData@r+1)& (0+255),w,b
  3135  00039C  0100               	movlb	0	; () banked
  3136  00039E  6FDC               	movwf	(??_receiveData+1)& (0+255),b
  3137  0003A0  0E00               	movlw	low _rx_buffer
  3138  0003A2  0100               	movlb	0	; () banked
  3139  0003A4  25DB               	addwf	??_receiveData& (0+255),w,b
  3140  0003A6  6ED9               	movwf	fsr2l,c
  3141  0003A8  0E02               	movlw	high _rx_buffer
  3142  0003AA  0100               	movlb	0	; () banked
  3143  0003AC  21DC               	addwfc	(??_receiveData+1)& (0+255),w,b
  3144  0003AE  6EDA               	movwf	fsr2h,c
  3145  0003B0  50DF               	movf	indf2,w,c
  3146  0003B2  6E2C               	movwf	_group,c
  3147                           
  3148                           ;FastTransfer.c: 206: group.parts[1] = rx_buffer[r + 2];
  3149  0003B4  0E02               	movlw	2
  3150  0003B6  0100               	movlb	0	; () banked
  3151  0003B8  25EB               	addwf	receiveData@r& (0+255),w,b
  3152  0003BA  0100               	movlb	0	; () banked
  3153  0003BC  6FDB               	movwf	??_receiveData& (0+255),b
  3154  0003BE  0E00               	movlw	0
  3155  0003C0  0100               	movlb	0	; () banked
  3156  0003C2  21EC               	addwfc	(receiveData@r+1)& (0+255),w,b
  3157  0003C4  0100               	movlb	0	; () banked
  3158  0003C6  6FDC               	movwf	(??_receiveData+1)& (0+255),b
  3159  0003C8  0E00               	movlw	low _rx_buffer
  3160  0003CA  0100               	movlb	0	; () banked
  3161  0003CC  25DB               	addwf	??_receiveData& (0+255),w,b
  3162  0003CE  6ED9               	movwf	fsr2l,c
  3163  0003D0  0E02               	movlw	high _rx_buffer
  3164  0003D2  0100               	movlb	0	; () banked
  3165  0003D4  21DC               	addwfc	(??_receiveData+1)& (0+255),w,b
  3166  0003D6  6EDA               	movwf	fsr2h,c
  3167  0003D8  50DF               	movf	indf2,w,c
  3168  0003DA  6E2D               	movwf	_group+1,c
  3169                           
  3170                           ; BSR set to: 0
  3171                           ;FastTransfer.c: 207: receiveArrayAddress[(rx_buffer[r])] = group.integer;
  3172  0003DC  0E00               	movlw	low _rx_buffer
  3173  0003DE  0100               	movlb	0	; () banked
  3174  0003E0  25EB               	addwf	receiveData@r& (0+255),w,b
  3175  0003E2  6ED9               	movwf	fsr2l,c
  3176  0003E4  0E02               	movlw	high _rx_buffer
  3177  0003E6  0100               	movlb	0	; () banked
  3178  0003E8  21EC               	addwfc	(receiveData@r+1)& (0+255),w,b
  3179  0003EA  6EDA               	movwf	fsr2h,c
  3180  0003EC  50DF               	movf	indf2,w,c
  3181  0003EE  0100               	movlb	0	; () banked
  3182  0003F0  6FDB               	movwf	??_receiveData& (0+255),b
  3183  0003F2  0100               	movlb	0	; () banked
  3184  0003F4  51DB               	movf	??_receiveData& (0+255),w,b
  3185  0003F6  0D02               	mullw	2
  3186  0003F8  50F3               	movf	prodl,w,c
  3187  0003FA  0100               	movlb	0	; () banked
  3188  0003FC  25ED               	addwf	_receiveArrayAddress& (0+255),w,b
  3189  0003FE  6ED9               	movwf	fsr2l,c
  3190  000400  50F4               	movf	prodh,w,c
  3191  000402  0100               	movlb	0	; () banked
  3192  000404  21EE               	addwfc	(_receiveArrayAddress+1)& (0+255),w,b
  3193  000406  6EDA               	movwf	fsr2h,c
  3194  000408  C02C  FFDE         	movff	_group,postinc2
  3195  00040C  C02D  FFDD         	movff	_group+1,postdec2
  3196                           
  3197                           ;FastTransfer.c: 208: } else {
  3198  000410  D003               	goto	l4301
  3199  000412                     l4299:
  3200                           
  3201                           ; BSR set to: 0
  3202                           ;FastTransfer.c: 209: dataAdressErrorCounter++;
  3203  000412  0100               	movlb	0	; () banked
  3204  000414  4B97               	infsnz	_dataAdressErrorCounter& (0+255),f,b
  3205  000416  2B98               	incf	(_dataAdressErrorCounter+1)& (0+255),f,b
  3206  000418                     l4301:
  3207                           
  3208                           ; BSR set to: 0
  3209  000418  0E03               	movlw	3
  3210  00041A  0100               	movlb	0	; () banked
  3211  00041C  25EB               	addwf	receiveData@r& (0+255),w,b
  3212  00041E  0100               	movlb	0	; () banked
  3213  000420  6FEB               	movwf	receiveData@r& (0+255),b
  3214  000422  0E00               	movlw	0
  3215  000424  0100               	movlb	0	; () banked
  3216  000426  21EC               	addwfc	(receiveData@r+1)& (0+255),w,b
  3217  000428  0100               	movlb	0	; () banked
  3218  00042A  6FEC               	movwf	(receiveData@r+1)& (0+255),b
  3219  00042C                     l4303:
  3220                           
  3221                           ; BSR set to: 0
  3222  00042C  5039               	movf	_rx_len,w,c
  3223  00042E  0100               	movlb	0	; () banked
  3224  000430  6FDB               	movwf	??_receiveData& (0+255),b
  3225  000432  6BDC               	clrf	(??_receiveData+1)& (0+255),b
  3226  000434  0100               	movlb	0	; () banked
  3227  000436  51DB               	movf	??_receiveData& (0+255),w,b
  3228  000438  0100               	movlb	0	; () banked
  3229  00043A  5DEB               	subwf	receiveData@r& (0+255),w,b
  3230  00043C  0100               	movlb	0	; () banked
  3231  00043E  51EC               	movf	(receiveData@r+1)& (0+255),w,b
  3232  000440  0A80               	xorlw	128
  3233  000442  0100               	movlb	0	; () banked
  3234  000444  6FDD               	movwf	(??_receiveData+2)& (0+255),b
  3235  000446  0100               	movlb	0	; () banked
  3236  000448  51DC               	movf	(??_receiveData+1)& (0+255),w,b
  3237  00044A  0A80               	xorlw	128
  3238  00044C  0100               	movlb	0	; () banked
  3239  00044E  59DD               	subwfb	(??_receiveData+2)& (0+255),w,b
  3240  000450  A0D8               	btfss	status,0,c
  3241  000452  D78F               	goto	l4293
  3242                           
  3243                           ; BSR set to: 0
  3244                           ;FastTransfer.c: 210: }
  3245                           ;FastTransfer.c: 211: }
  3246                           ;FastTransfer.c: 214: if (AKNAKsend) {
  3247                           
  3248                           ; BSR set to: 0
  3249  000454  0100               	movlb	0	; () banked
  3250  000456  51F3               	movf	_AKNAKsend& (0+255),w,b
  3251  000458  B4D8               	btfsc	status,2,c
  3252  00045A  D0BC               	goto	l4333
  3253                           
  3254                           ; BSR set to: 0
  3255                           ;FastTransfer.c: 215: unsigned char holder[3];
  3256                           ;FastTransfer.c: 216: holder[0] = 255;
  3257  00045C  0100               	movlb	0	; () banked
  3258  00045E  69E1               	setf	receiveData@holder& (0+255),b
  3259                           
  3260                           ; BSR set to: 0
  3261                           ;FastTransfer.c: 217: holder[1] = 1;
  3262  000460  0E01               	movlw	1
  3263  000462  0100               	movlb	0	; () banked
  3264  000464  6FE2               	movwf	(receiveData@holder+1)& (0+255),b
  3265                           
  3266                           ; BSR set to: 0
  3267                           ;FastTransfer.c: 218: holder[2] = rx_buffer[rx_array_inx - 1];
  3268  000466  0EFF               	movlw	255
  3269  000468  0100               	movlb	0	; () banked
  3270  00046A  6FDB               	movwf	??_receiveData& (0+255),b
  3271  00046C  0EFF               	movlw	255
  3272  00046E  0100               	movlb	0	; () banked
  3273  000470  6FDC               	movwf	(??_receiveData+1)& (0+255),b
  3274  000472  5038               	movf	_rx_array_inx,w,c
  3275  000474  0100               	movlb	0	; () banked
  3276  000476  6FDD               	movwf	(??_receiveData+2)& (0+255),b
  3277  000478  6BDE               	clrf	(??_receiveData+3)& (0+255),b
  3278  00047A  0100               	movlb	0	; () banked
  3279  00047C  51DB               	movf	??_receiveData& (0+255),w,b
  3280  00047E  0100               	movlb	0	; () banked
  3281  000480  27DD               	addwf	(??_receiveData+2)& (0+255),f,b
  3282  000482  0100               	movlb	0	; () banked
  3283  000484  51DC               	movf	(??_receiveData+1)& (0+255),w,b
  3284  000486  0100               	movlb	0	; () banked
  3285  000488  23DE               	addwfc	(??_receiveData+3)& (0+255),f,b
  3286  00048A  0E00               	movlw	low _rx_buffer
  3287  00048C  0100               	movlb	0	; () banked
  3288  00048E  25DD               	addwf	(??_receiveData+2)& (0+255),w,b
  3289  000490  6ED9               	movwf	fsr2l,c
  3290  000492  0E02               	movlw	high _rx_buffer
  3291  000494  0100               	movlb	0	; () banked
  3292  000496  21DE               	addwfc	(??_receiveData+3)& (0+255),w,b
  3293  000498  6EDA               	movwf	fsr2h,c
  3294  00049A  50DF               	movf	indf2,w,c
  3295  00049C  0100               	movlb	0	; () banked
  3296  00049E  6FE3               	movwf	(receiveData@holder+2)& (0+255),b
  3297                           
  3298                           ; BSR set to: 0
  3299                           ;FastTransfer.c: 219: unsigned char crcHolder = CRC8(holder, 3);
  3300  0004A0  0EE1               	movlw	low receiveData@holder
  3301  0004A2  6E1B               	movwf	CRC8@data,c
  3302  0004A4  0E00               	movlw	high receiveData@holder
  3303  0004A6  6E1C               	movwf	CRC8@data+1,c
  3304  0004A8  0E03               	movlw	3
  3305  0004AA  6E1D               	movwf	CRC8@len,c
  3306  0004AC  EC45  F00A         	call	_CRC8	;wreg free
  3307  0004B0  0100               	movlb	0	; () banked
  3308  0004B2  6FE7               	movwf	receiveData@crcHolder& (0+255),b
  3309                           
  3310                           ; BSR set to: 0
  3311                           ;FastTransfer.c: 220: serial_write(0x06);
  3312  0004B4  D801               	call	u4458
  3313  0004B6  D00B               	goto	l4317
  3314  0004B8                     u4458:
  3315  0004B8  0005               	push	
  3316  0004BA  6EFA               	movwf	pclath,c
  3317  0004BC  503E               	movf	_serial_write,w,c
  3318  0004BE  6EFD               	movwf	tosl,c
  3319  0004C0  503F               	movf	_serial_write+1,w,c
  3320  0004C2  6EFE               	movwf	tosh,c
  3321  0004C4  50F8               	movf	tblptru,w,c
  3322  0004C6  6EFF               	movwf	tosu,c
  3323  0004C8  50FA               	movf	pclath,w,c
  3324  0004CA  0E06               	movlw	6
  3325  0004CC  0012               	return		;indir
  3326  0004CE                     l4317:
  3327                           
  3328                           ;FastTransfer.c: 221: serial_write(0x85);
  3329  0004CE  D801               	call	u4468
  3330  0004D0  D00B               	goto	l4319
  3331  0004D2                     u4468:
  3332  0004D2  0005               	push	
  3333  0004D4  6EFA               	movwf	pclath,c
  3334  0004D6  503E               	movf	_serial_write,w,c
  3335  0004D8  6EFD               	movwf	tosl,c
  3336  0004DA  503F               	movf	_serial_write+1,w,c
  3337  0004DC  6EFE               	movwf	tosh,c
  3338  0004DE  50F8               	movf	tblptru,w,c
  3339  0004E0  6EFF               	movwf	tosu,c
  3340  0004E2  50FA               	movf	pclath,w,c
  3341  0004E4  0E85               	movlw	133
  3342  0004E6  0012               	return		;indir
  3343  0004E8                     l4319:
  3344                           
  3345                           ;FastTransfer.c: 222: serial_write(returnAddress);
  3346  0004E8  D801               	call	u4478
  3347  0004EA  D00B               	goto	l4321
  3348  0004EC                     u4478:
  3349  0004EC  0005               	push	
  3350  0004EE  6EFA               	movwf	pclath,c
  3351  0004F0  503E               	movf	_serial_write,w,c
  3352  0004F2  6EFD               	movwf	tosl,c
  3353  0004F4  503F               	movf	_serial_write+1,w,c
  3354  0004F6  6EFE               	movwf	tosh,c
  3355  0004F8  50F8               	movf	tblptru,w,c
  3356  0004FA  6EFF               	movwf	tosu,c
  3357  0004FC  50FA               	movf	pclath,w,c
  3358  0004FE  5036               	movf	_returnAddress,w,c
  3359  000500  0012               	return		;indir
  3360  000502                     l4321:
  3361                           
  3362                           ;FastTransfer.c: 223: serial_write(moduleAddress);
  3363  000502  D801               	call	u4488
  3364  000504  D00B               	goto	l4323
  3365  000506                     u4488:
  3366  000506  0005               	push	
  3367  000508  6EFA               	movwf	pclath,c
  3368  00050A  503E               	movf	_serial_write,w,c
  3369  00050C  6EFD               	movwf	tosl,c
  3370  00050E  503F               	movf	_serial_write+1,w,c
  3371  000510  6EFE               	movwf	tosh,c
  3372  000512  50F8               	movf	tblptru,w,c
  3373  000514  6EFF               	movwf	tosu,c
  3374  000516  50FA               	movf	pclath,w,c
  3375  000518  5043               	movf	_moduleAddress,w,c
  3376  00051A  0012               	return		;indir
  3377  00051C                     l4323:
  3378                           
  3379                           ;FastTransfer.c: 224: serial_write(3);
  3380  00051C  D801               	call	u4498
  3381  00051E  D00B               	goto	l4325
  3382  000520                     u4498:
  3383  000520  0005               	push	
  3384  000522  6EFA               	movwf	pclath,c
  3385  000524  503E               	movf	_serial_write,w,c
  3386  000526  6EFD               	movwf	tosl,c
  3387  000528  503F               	movf	_serial_write+1,w,c
  3388  00052A  6EFE               	movwf	tosh,c
  3389  00052C  50F8               	movf	tblptru,w,c
  3390  00052E  6EFF               	movwf	tosu,c
  3391  000530  50FA               	movf	pclath,w,c
  3392  000532  0E03               	movlw	3
  3393  000534  0012               	return		;indir
  3394  000536                     l4325:
  3395                           
  3396                           ;FastTransfer.c: 225: serial_write(255);
  3397  000536  D801               	call	u4508
  3398  000538  D00B               	goto	l4327
  3399  00053A                     u4508:
  3400  00053A  0005               	push	
  3401  00053C  6EFA               	movwf	pclath,c
  3402  00053E  503E               	movf	_serial_write,w,c
  3403  000540  6EFD               	movwf	tosl,c
  3404  000542  503F               	movf	_serial_write+1,w,c
  3405  000544  6EFE               	movwf	tosh,c
  3406  000546  50F8               	movf	tblptru,w,c
  3407  000548  6EFF               	movwf	tosu,c
  3408  00054A  50FA               	movf	pclath,w,c
  3409  00054C  0EFF               	movlw	255
  3410  00054E  0012               	return		;indir
  3411  000550                     l4327:
  3412                           
  3413                           ;FastTransfer.c: 226: serial_write(1);
  3414  000550  D801               	call	u4518
  3415  000552  D00B               	goto	l4329
  3416  000554                     u4518:
  3417  000554  0005               	push	
  3418  000556  6EFA               	movwf	pclath,c
  3419  000558  503E               	movf	_serial_write,w,c
  3420  00055A  6EFD               	movwf	tosl,c
  3421  00055C  503F               	movf	_serial_write+1,w,c
  3422  00055E  6EFE               	movwf	tosh,c
  3423  000560  50F8               	movf	tblptru,w,c
  3424  000562  6EFF               	movwf	tosu,c
  3425  000564  50FA               	movf	pclath,w,c
  3426  000566  0E01               	movlw	1
  3427  000568  0012               	return		;indir
  3428  00056A                     l4329:
  3429                           
  3430                           ;FastTransfer.c: 227: serial_write(rx_buffer[rx_array_inx - 1]);
  3431  00056A  D801               	call	u4528
  3432  00056C  D025               	goto	l4331
  3433  00056E                     u4528:
  3434  00056E  0005               	push	
  3435  000570  6EFA               	movwf	pclath,c
  3436  000572  503E               	movf	_serial_write,w,c
  3437  000574  6EFD               	movwf	tosl,c
  3438  000576  503F               	movf	_serial_write+1,w,c
  3439  000578  6EFE               	movwf	tosh,c
  3440  00057A  50F8               	movf	tblptru,w,c
  3441  00057C  6EFF               	movwf	tosu,c
  3442  00057E  50FA               	movf	pclath,w,c
  3443  000580  0EFF               	movlw	255
  3444  000582  0100               	movlb	0	; () banked
  3445  000584  6FDB               	movwf	??_receiveData& (0+255),b
  3446  000586  0EFF               	movlw	255
  3447  000588  0100               	movlb	0	; () banked
  3448  00058A  6FDC               	movwf	(??_receiveData+1)& (0+255),b
  3449  00058C  5038               	movf	_rx_array_inx,w,c
  3450  00058E  0100               	movlb	0	; () banked
  3451  000590  6FDD               	movwf	(??_receiveData+2)& (0+255),b
  3452  000592  6BDE               	clrf	(??_receiveData+3)& (0+255),b
  3453  000594  0100               	movlb	0	; () banked
  3454  000596  51DB               	movf	??_receiveData& (0+255),w,b
  3455  000598  0100               	movlb	0	; () banked
  3456  00059A  27DD               	addwf	(??_receiveData+2)& (0+255),f,b
  3457  00059C  0100               	movlb	0	; () banked
  3458  00059E  51DC               	movf	(??_receiveData+1)& (0+255),w,b
  3459  0005A0  0100               	movlb	0	; () banked
  3460  0005A2  23DE               	addwfc	(??_receiveData+3)& (0+255),f,b
  3461  0005A4  0E00               	movlw	low _rx_buffer
  3462  0005A6  0100               	movlb	0	; () banked
  3463  0005A8  25DD               	addwf	(??_receiveData+2)& (0+255),w,b
  3464  0005AA  6ED9               	movwf	fsr2l,c
  3465  0005AC  0E02               	movlw	high _rx_buffer
  3466  0005AE  0100               	movlb	0	; () banked
  3467  0005B0  21DE               	addwfc	(??_receiveData+3)& (0+255),w,b
  3468  0005B2  6EDA               	movwf	fsr2h,c
  3469  0005B4  50DF               	movf	indf2,w,c
  3470  0005B6  0012               	return		;indir
  3471  0005B8                     l4331:
  3472                           
  3473                           ;FastTransfer.c: 228: serial_write(crcHolder);
  3474  0005B8  D801               	call	u4538
  3475  0005BA  D00C               	goto	l4333
  3476  0005BC                     u4538:
  3477  0005BC  0005               	push	
  3478  0005BE  6EFA               	movwf	pclath,c
  3479  0005C0  503E               	movf	_serial_write,w,c
  3480  0005C2  6EFD               	movwf	tosl,c
  3481  0005C4  503F               	movf	_serial_write+1,w,c
  3482  0005C6  6EFE               	movwf	tosh,c
  3483  0005C8  50F8               	movf	tblptru,w,c
  3484  0005CA  6EFF               	movwf	tosu,c
  3485  0005CC  50FA               	movf	pclath,w,c
  3486  0005CE  0100               	movlb	0	; () banked
  3487  0005D0  51E7               	movf	receiveData@crcHolder& (0+255),w,b
  3488  0005D2  0012               	return		;indir
  3489  0005D4                     l4333:
  3490                           
  3491                           ;FastTransfer.c: 229: }
  3492                           ;FastTransfer.c: 233: rx_len = 0;
  3493  0005D4  0E00               	movlw	0
  3494  0005D6  6E39               	movwf	_rx_len,c
  3495                           
  3496                           ;FastTransfer.c: 234: rx_array_inx = 0;
  3497  0005D8  0E00               	movlw	0
  3498  0005DA  6E38               	movwf	_rx_array_inx,c
  3499                           
  3500                           ;FastTransfer.c: 235: return 1;
  3501  0005DC  0E01               	movlw	1
  3502  0005DE  0012               	return	
  3503  0005E0                     l4343:
  3504                           
  3505                           ;FastTransfer.c: 237: crcErrorCounter++;
  3506  0005E0  0100               	movlb	0	; () banked
  3507  0005E2  4B95               	infsnz	_crcErrorCounter& (0+255),f,b
  3508  0005E4  2B96               	incf	(_crcErrorCounter+1)& (0+255),f,b
  3509                           
  3510                           ; BSR set to: 0
  3511                           ;FastTransfer.c: 239: if (AKNAKsend) {
  3512  0005E6  0100               	movlb	0	; () banked
  3513  0005E8  51F3               	movf	_AKNAKsend& (0+255),w,b
  3514  0005EA  B4D8               	btfsc	status,2,c
  3515  0005EC  D0BC               	goto	l4373
  3516                           
  3517                           ; BSR set to: 0
  3518                           ;FastTransfer.c: 240: unsigned char holder[3];
  3519                           ;FastTransfer.c: 241: holder[0] = 255;
  3520  0005EE  0100               	movlb	0	; () banked
  3521  0005F0  69E4               	setf	receiveData@holder_1756& (0+255),b
  3522                           
  3523                           ; BSR set to: 0
  3524                           ;FastTransfer.c: 242: holder[1] = 2;
  3525  0005F2  0E02               	movlw	2
  3526  0005F4  0100               	movlb	0	; () banked
  3527  0005F6  6FE5               	movwf	(receiveData@holder_1756+1)& (0+255),b
  3528                           
  3529                           ; BSR set to: 0
  3530                           ;FastTransfer.c: 243: holder[2] = rx_buffer[rx_array_inx - 1];
  3531  0005F8  0EFF               	movlw	255
  3532  0005FA  0100               	movlb	0	; () banked
  3533  0005FC  6FDB               	movwf	??_receiveData& (0+255),b
  3534  0005FE  0EFF               	movlw	255
  3535  000600  0100               	movlb	0	; () banked
  3536  000602  6FDC               	movwf	(??_receiveData+1)& (0+255),b
  3537  000604  5038               	movf	_rx_array_inx,w,c
  3538  000606  0100               	movlb	0	; () banked
  3539  000608  6FDD               	movwf	(??_receiveData+2)& (0+255),b
  3540  00060A  6BDE               	clrf	(??_receiveData+3)& (0+255),b
  3541  00060C  0100               	movlb	0	; () banked
  3542  00060E  51DB               	movf	??_receiveData& (0+255),w,b
  3543  000610  0100               	movlb	0	; () banked
  3544  000612  27DD               	addwf	(??_receiveData+2)& (0+255),f,b
  3545  000614  0100               	movlb	0	; () banked
  3546  000616  51DC               	movf	(??_receiveData+1)& (0+255),w,b
  3547  000618  0100               	movlb	0	; () banked
  3548  00061A  23DE               	addwfc	(??_receiveData+3)& (0+255),f,b
  3549  00061C  0E00               	movlw	low _rx_buffer
  3550  00061E  0100               	movlb	0	; () banked
  3551  000620  25DD               	addwf	(??_receiveData+2)& (0+255),w,b
  3552  000622  6ED9               	movwf	fsr2l,c
  3553  000624  0E02               	movlw	high _rx_buffer
  3554  000626  0100               	movlb	0	; () banked
  3555  000628  21DE               	addwfc	(??_receiveData+3)& (0+255),w,b
  3556  00062A  6EDA               	movwf	fsr2h,c
  3557  00062C  50DF               	movf	indf2,w,c
  3558  00062E  0100               	movlb	0	; () banked
  3559  000630  6FE6               	movwf	(receiveData@holder_1756+2)& (0+255),b
  3560                           
  3561                           ; BSR set to: 0
  3562                           ;FastTransfer.c: 244: unsigned char crcHolder = CRC8(holder, 3);
  3563  000632  0EE4               	movlw	low receiveData@holder_1756
  3564  000634  6E1B               	movwf	CRC8@data,c
  3565  000636  0E00               	movlw	high receiveData@holder_1756
  3566  000638  6E1C               	movwf	CRC8@data+1,c
  3567  00063A  0E03               	movlw	3
  3568  00063C  6E1D               	movwf	CRC8@len,c
  3569  00063E  EC45  F00A         	call	_CRC8
  3570  000642  0100               	movlb	0	; () banked
  3571  000644  6FE8               	movwf	receiveData@crcHolder_1757& (0+255),b
  3572                           
  3573                           ; BSR set to: 0
  3574                           ;FastTransfer.c: 245: serial_write(0x06);
  3575  000646  D801               	call	u4558
  3576  000648  D00B               	goto	l4357
  3577  00064A                     u4558:
  3578  00064A  0005               	push	
  3579  00064C  6EFA               	movwf	pclath,c
  3580  00064E  503E               	movf	_serial_write,w,c
  3581  000650  6EFD               	movwf	tosl,c
  3582  000652  503F               	movf	_serial_write+1,w,c
  3583  000654  6EFE               	movwf	tosh,c
  3584  000656  50F8               	movf	tblptru,w,c
  3585  000658  6EFF               	movwf	tosu,c
  3586  00065A  50FA               	movf	pclath,w,c
  3587  00065C  0E06               	movlw	6
  3588  00065E  0012               	return		;indir
  3589  000660                     l4357:
  3590                           
  3591                           ;FastTransfer.c: 246: serial_write(0x85);
  3592  000660  D801               	call	u4568
  3593  000662  D00B               	goto	l4359
  3594  000664                     u4568:
  3595  000664  0005               	push	
  3596  000666  6EFA               	movwf	pclath,c
  3597  000668  503E               	movf	_serial_write,w,c
  3598  00066A  6EFD               	movwf	tosl,c
  3599  00066C  503F               	movf	_serial_write+1,w,c
  3600  00066E  6EFE               	movwf	tosh,c
  3601  000670  50F8               	movf	tblptru,w,c
  3602  000672  6EFF               	movwf	tosu,c
  3603  000674  50FA               	movf	pclath,w,c
  3604  000676  0E85               	movlw	133
  3605  000678  0012               	return		;indir
  3606  00067A                     l4359:
  3607                           
  3608                           ;FastTransfer.c: 247: serial_write(returnAddress);
  3609  00067A  D801               	call	u4578
  3610  00067C  D00B               	goto	l4361
  3611  00067E                     u4578:
  3612  00067E  0005               	push	
  3613  000680  6EFA               	movwf	pclath,c
  3614  000682  503E               	movf	_serial_write,w,c
  3615  000684  6EFD               	movwf	tosl,c
  3616  000686  503F               	movf	_serial_write+1,w,c
  3617  000688  6EFE               	movwf	tosh,c
  3618  00068A  50F8               	movf	tblptru,w,c
  3619  00068C  6EFF               	movwf	tosu,c
  3620  00068E  50FA               	movf	pclath,w,c
  3621  000690  5036               	movf	_returnAddress,w,c
  3622  000692  0012               	return		;indir
  3623  000694                     l4361:
  3624                           
  3625                           ;FastTransfer.c: 248: serial_write(moduleAddress);
  3626  000694  D801               	call	u4588
  3627  000696  D00B               	goto	l4363
  3628  000698                     u4588:
  3629  000698  0005               	push	
  3630  00069A  6EFA               	movwf	pclath,c
  3631  00069C  503E               	movf	_serial_write,w,c
  3632  00069E  6EFD               	movwf	tosl,c
  3633  0006A0  503F               	movf	_serial_write+1,w,c
  3634  0006A2  6EFE               	movwf	tosh,c
  3635  0006A4  50F8               	movf	tblptru,w,c
  3636  0006A6  6EFF               	movwf	tosu,c
  3637  0006A8  50FA               	movf	pclath,w,c
  3638  0006AA  5043               	movf	_moduleAddress,w,c
  3639  0006AC  0012               	return		;indir
  3640  0006AE                     l4363:
  3641                           
  3642                           ;FastTransfer.c: 249: serial_write(3);
  3643  0006AE  D801               	call	u4598
  3644  0006B0  D00B               	goto	l4365
  3645  0006B2                     u4598:
  3646  0006B2  0005               	push	
  3647  0006B4  6EFA               	movwf	pclath,c
  3648  0006B6  503E               	movf	_serial_write,w,c
  3649  0006B8  6EFD               	movwf	tosl,c
  3650  0006BA  503F               	movf	_serial_write+1,w,c
  3651  0006BC  6EFE               	movwf	tosh,c
  3652  0006BE  50F8               	movf	tblptru,w,c
  3653  0006C0  6EFF               	movwf	tosu,c
  3654  0006C2  50FA               	movf	pclath,w,c
  3655  0006C4  0E03               	movlw	3
  3656  0006C6  0012               	return		;indir
  3657  0006C8                     l4365:
  3658                           
  3659                           ;FastTransfer.c: 250: serial_write(255);
  3660  0006C8  D801               	call	u4608
  3661  0006CA  D00B               	goto	l4367
  3662  0006CC                     u4608:
  3663  0006CC  0005               	push	
  3664  0006CE  6EFA               	movwf	pclath,c
  3665  0006D0  503E               	movf	_serial_write,w,c
  3666  0006D2  6EFD               	movwf	tosl,c
  3667  0006D4  503F               	movf	_serial_write+1,w,c
  3668  0006D6  6EFE               	movwf	tosh,c
  3669  0006D8  50F8               	movf	tblptru,w,c
  3670  0006DA  6EFF               	movwf	tosu,c
  3671  0006DC  50FA               	movf	pclath,w,c
  3672  0006DE  0EFF               	movlw	255
  3673  0006E0  0012               	return		;indir
  3674  0006E2                     l4367:
  3675                           
  3676                           ;FastTransfer.c: 251: serial_write(2);
  3677  0006E2  D801               	call	u4618
  3678  0006E4  D00B               	goto	l4369
  3679  0006E6                     u4618:
  3680  0006E6  0005               	push	
  3681  0006E8  6EFA               	movwf	pclath,c
  3682  0006EA  503E               	movf	_serial_write,w,c
  3683  0006EC  6EFD               	movwf	tosl,c
  3684  0006EE  503F               	movf	_serial_write+1,w,c
  3685  0006F0  6EFE               	movwf	tosh,c
  3686  0006F2  50F8               	movf	tblptru,w,c
  3687  0006F4  6EFF               	movwf	tosu,c
  3688  0006F6  50FA               	movf	pclath,w,c
  3689  0006F8  0E02               	movlw	2
  3690  0006FA  0012               	return		;indir
  3691  0006FC                     l4369:
  3692                           
  3693                           ;FastTransfer.c: 252: serial_write(rx_buffer[rx_array_inx - 1]);
  3694  0006FC  D801               	call	u4628
  3695  0006FE  D025               	goto	l4371
  3696  000700                     u4628:
  3697  000700  0005               	push	
  3698  000702  6EFA               	movwf	pclath,c
  3699  000704  503E               	movf	_serial_write,w,c
  3700  000706  6EFD               	movwf	tosl,c
  3701  000708  503F               	movf	_serial_write+1,w,c
  3702  00070A  6EFE               	movwf	tosh,c
  3703  00070C  50F8               	movf	tblptru,w,c
  3704  00070E  6EFF               	movwf	tosu,c
  3705  000710  50FA               	movf	pclath,w,c
  3706  000712  0EFF               	movlw	255
  3707  000714  0100               	movlb	0	; () banked
  3708  000716  6FDB               	movwf	??_receiveData& (0+255),b
  3709  000718  0EFF               	movlw	255
  3710  00071A  0100               	movlb	0	; () banked
  3711  00071C  6FDC               	movwf	(??_receiveData+1)& (0+255),b
  3712  00071E  5038               	movf	_rx_array_inx,w,c
  3713  000720  0100               	movlb	0	; () banked
  3714  000722  6FDD               	movwf	(??_receiveData+2)& (0+255),b
  3715  000724  6BDE               	clrf	(??_receiveData+3)& (0+255),b
  3716  000726  0100               	movlb	0	; () banked
  3717  000728  51DB               	movf	??_receiveData& (0+255),w,b
  3718  00072A  0100               	movlb	0	; () banked
  3719  00072C  27DD               	addwf	(??_receiveData+2)& (0+255),f,b
  3720  00072E  0100               	movlb	0	; () banked
  3721  000730  51DC               	movf	(??_receiveData+1)& (0+255),w,b
  3722  000732  0100               	movlb	0	; () banked
  3723  000734  23DE               	addwfc	(??_receiveData+3)& (0+255),f,b
  3724  000736  0E00               	movlw	low _rx_buffer
  3725  000738  0100               	movlb	0	; () banked
  3726  00073A  25DD               	addwf	(??_receiveData+2)& (0+255),w,b
  3727  00073C  6ED9               	movwf	fsr2l,c
  3728  00073E  0E02               	movlw	high _rx_buffer
  3729  000740  0100               	movlb	0	; () banked
  3730  000742  21DE               	addwfc	(??_receiveData+3)& (0+255),w,b
  3731  000744  6EDA               	movwf	fsr2h,c
  3732  000746  50DF               	movf	indf2,w,c
  3733  000748  0012               	return		;indir
  3734  00074A                     l4371:
  3735                           
  3736                           ;FastTransfer.c: 253: serial_write(crcHolder);
  3737  00074A  D801               	call	u4638
  3738  00074C  D00C               	goto	l4373
  3739  00074E                     u4638:
  3740  00074E  0005               	push	
  3741  000750  6EFA               	movwf	pclath,c
  3742  000752  503E               	movf	_serial_write,w,c
  3743  000754  6EFD               	movwf	tosl,c
  3744  000756  503F               	movf	_serial_write+1,w,c
  3745  000758  6EFE               	movwf	tosh,c
  3746  00075A  50F8               	movf	tblptru,w,c
  3747  00075C  6EFF               	movwf	tosu,c
  3748  00075E  50FA               	movf	pclath,w,c
  3749  000760  0100               	movlb	0	; () banked
  3750  000762  51E8               	movf	receiveData@crcHolder_1757& (0+255),w,b
  3751  000764  0012               	return		;indir
  3752  000766                     l4373:
  3753                           
  3754                           ;FastTransfer.c: 254: }
  3755                           ;FastTransfer.c: 257: rx_len = 0;
  3756  000766  0E00               	movlw	0
  3757  000768  6E39               	movwf	_rx_len,c
  3758                           
  3759                           ;FastTransfer.c: 258: rx_array_inx = 0;
  3760  00076A  0E00               	movlw	0
  3761  00076C  6E38               	movwf	_rx_array_inx,c
  3762                           
  3763                           ;FastTransfer.c: 259: return 0;
  3764  00076E  0E00               	movlw	0
  3765  000770  0012               	return	
  3766  000772                     l4381:
  3767                           
  3768                           ;FastTransfer.c: 260: }
  3769                           ;FastTransfer.c: 261: }
  3770                           ;FastTransfer.c: 262: }
  3771                           ;FastTransfer.c: 265: return 0;
  3772  000772  0E00               	movlw	0
  3773  000774  0012               	return	
  3774  000776                     __end_of_receiveData:
  3775                           	opt stack 0
  3776                           tosu	equ	0xFFF
  3777                           tosh	equ	0xFFE
  3778                           tosl	equ	0xFFD
  3779                           pclath	equ	0xFFA
  3780                           tblptru	equ	0xFF8
  3781                           tblptrh	equ	0xFF7
  3782                           tblptrl	equ	0xFF6
  3783                           tablat	equ	0xFF5
  3784                           prodh	equ	0xFF4
  3785                           prodl	equ	0xFF3
  3786                           intcon	equ	0xFF2
  3787                           postinc0	equ	0xFEE
  3788                           wreg	equ	0xFE8
  3789                           postdec1	equ	0xFE5
  3790                           fsr1h	equ	0xFE2
  3791                           fsr1l	equ	0xFE1
  3792                           indf2	equ	0xFDF
  3793                           postinc2	equ	0xFDE
  3794                           postdec2	equ	0xFDD
  3795                           plusw2	equ	0xFDB
  3796                           fsr2h	equ	0xFDA
  3797                           fsr2l	equ	0xFD9
  3798                           status	equ	0xFD8
  3799                           
  3800 ;; *************** function _Send_put *****************
  3801 ;; Defined at:
  3802 ;;		line 132 in file "UART.c"
  3803 ;; Parameters:    Size  Location     Type
  3804 ;;  _data           1    wreg     unsigned char 
  3805 ;; Auto vars:     Size  Location     Type
  3806 ;;  _data           1    0[BANK0 ] unsigned char 
  3807 ;; Return value:  Size  Location     Type
  3808 ;;                  1    wreg      void 
  3809 ;; Registers used:
  3810 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3811 ;; Tracked objects:
  3812 ;;		On entry : 0/0
  3813 ;;		On exit  : 0/0
  3814 ;;		Unchanged: 0/0
  3815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3816 ;;      Params:         0       0       0       0       0       0       0
  3817 ;;      Locals:         0       1       0       0       0       0       0
  3818 ;;      Temps:          0       0       0       0       0       0       0
  3819 ;;      Totals:         0       1       0       0       0       0       0
  3820 ;;Total ram usage:        1 bytes
  3821 ;; Hardware stack levels used:    1
  3822 ;; Hardware stack levels required when called:    6
  3823 ;; This function calls:
  3824 ;;		_UART_buff_get
  3825 ;;		_UART_buff_put
  3826 ;; This function is called by:
  3827 ;;		_CommsStart
  3828 ;;		_receiveData
  3829 ;;		_sendData
  3830 ;; This function uses a non-reentrant model
  3831 ;;
  3832                           
  3833                           	psect	text12
  3834  001626                     __ptext12:
  3835                           	opt stack 0
  3836  001626                     _Send_put:
  3837                           	opt stack 21
  3838                           
  3839                           ;incstack = 0
  3840                           ;Send_put@_data stored from wreg
  3841  001626  0100               	movlb	0	; () banked
  3842  001628  6FD2               	movwf	Send_put@_data& (0+255),b
  3843                           
  3844                           ;UART.c: 133: UART_buff_put(&output_buffer, _data);
  3845  00162A  0E00               	movlw	low _output_buffer
  3846  00162C  6E21               	movwf	UART_buff_put@_this,c
  3847  00162E  0E04               	movlw	high _output_buffer
  3848  001630  6E22               	movwf	UART_buff_put@_this+1,c
  3849  001632  C0D2  F023         	movff	Send_put@_data,UART_buff_put@c
  3850  001636  ECCB  F005         	call	_UART_buff_put
  3851                           
  3852                           ;UART.c: 134: if (Transmit_stall == 1) {
  3853  00163A  0444               	decf	_Transmit_stall,w,c
  3854  00163C  A4D8               	btfss	status,2,c
  3855  00163E  0012               	return	
  3856                           
  3857                           ;UART.c: 135: Transmit_stall = 0;
  3858  001640  0E00               	movlw	0
  3859  001642  6E44               	movwf	_Transmit_stall,c
  3860                           
  3861                           ;UART.c: 136: TXREG2 = UART_buff_get(&output_buffer);
  3862  001644  0E00               	movlw	low _output_buffer
  3863  001646  6E21               	movwf	UART_buff_get@_this,c
  3864  001648  0E04               	movlw	high _output_buffer
  3865  00164A  6E22               	movwf	UART_buff_get@_this+1,c
  3866  00164C  EC35  F008         	call	_UART_buff_get	;wreg free
  3867  001650  6E73               	movwf	3955,c	;volatile
  3868                           
  3869                           ;UART.c: 137: PIE3bits.TX2IE = 1;
  3870  001652  88A3               	bsf	4003,4,c	;volatile
  3871  001654  0012               	return	
  3872  001656                     __end_of_Send_put:
  3873                           	opt stack 0
  3874                           tosu	equ	0xFFF
  3875                           tosh	equ	0xFFE
  3876                           tosl	equ	0xFFD
  3877                           pclath	equ	0xFFA
  3878                           tblptru	equ	0xFF8
  3879                           tblptrh	equ	0xFF7
  3880                           tblptrl	equ	0xFF6
  3881                           tablat	equ	0xFF5
  3882                           prodh	equ	0xFF4
  3883                           prodl	equ	0xFF3
  3884                           intcon	equ	0xFF2
  3885                           postinc0	equ	0xFEE
  3886                           wreg	equ	0xFE8
  3887                           postdec1	equ	0xFE5
  3888                           fsr1h	equ	0xFE2
  3889                           fsr1l	equ	0xFE1
  3890                           indf2	equ	0xFDF
  3891                           postinc2	equ	0xFDE
  3892                           postdec2	equ	0xFDD
  3893                           plusw2	equ	0xFDB
  3894                           fsr2h	equ	0xFDA
  3895                           fsr2l	equ	0xFD9
  3896                           status	equ	0xFD8
  3897                           
  3898 ;; *************** function _UART_buff_put *****************
  3899 ;; Defined at:
  3900 ;;		line 70 in file "UART.c"
  3901 ;; Parameters:    Size  Location     Type
  3902 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  3903 ;;		 -> output_buffer(206), input_buffer(206), 
  3904 ;;  c               1   34[COMRAM] const unsigned char 
  3905 ;; Auto vars:     Size  Location     Type
  3906 ;;		None
  3907 ;; Return value:  Size  Location     Type
  3908 ;;                  1    wreg      void 
  3909 ;; Registers used:
  3910 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3911 ;; Tracked objects:
  3912 ;;		On entry : 0/0
  3913 ;;		On exit  : 0/0
  3914 ;;		Unchanged: 0/0
  3915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3916 ;;      Params:         3       0       0       0       0       0       0
  3917 ;;      Locals:         0       0       0       0       0       0       0
  3918 ;;      Temps:          2       0       0       0       0       0       0
  3919 ;;      Totals:         5       0       0       0       0       0       0
  3920 ;;Total ram usage:        5 bytes
  3921 ;; Hardware stack levels used:    1
  3922 ;; Hardware stack levels required when called:    5
  3923 ;; This function calls:
  3924 ;;		_UART_buff_modulo_inc
  3925 ;; This function is called by:
  3926 ;;		_Send_put
  3927 ;; This function uses a non-reentrant model
  3928 ;;
  3929                           
  3930                           	psect	text13
  3931  000B96                     __ptext13:
  3932                           	opt stack 0
  3933  000B96                     _UART_buff_put:
  3934                           	opt stack 21
  3935                           
  3936                           ;UART.c: 71: if (_this->count < 200) {
  3937                           
  3938                           ;incstack = 0
  3939  000B96  EE20 F0CC          	lfsr	2,204
  3940  000B9A  5021               	movf	UART_buff_put@_this,w,c
  3941  000B9C  26D9               	addwf	fsr2l,f,c
  3942  000B9E  5022               	movf	UART_buff_put@_this+1,w,c
  3943  000BA0  22DA               	addwfc	fsr2h,f,c
  3944  000BA2  0E01               	movlw	1
  3945  000BA4  BEDB               	btfsc	plusw2,7,c
  3946  000BA6  D007               	goto	l4093
  3947  000BA8  0E01               	movlw	1
  3948  000BAA  50DB               	movf	plusw2,w,c
  3949  000BAC  E13A               	bnz	l4099
  3950  000BAE  0EC8               	movlw	200
  3951  000BB0  5CDE               	subwf	postinc2,w,c
  3952  000BB2  B0D8               	btfsc	status,0,c
  3953  000BB4  D036               	goto	l4099
  3954  000BB6                     l4093:
  3955                           
  3956                           ;UART.c: 72: _this->buf[_this->head] = c;
  3957  000BB6  EE20 F0C8          	lfsr	2,200
  3958  000BBA  5021               	movf	UART_buff_put@_this,w,c
  3959  000BBC  26D9               	addwf	fsr2l,f,c
  3960  000BBE  5022               	movf	UART_buff_put@_this+1,w,c
  3961  000BC0  22DA               	addwfc	fsr2h,f,c
  3962  000BC2  CFDE F024          	movff	postinc2,??_UART_buff_put
  3963  000BC6  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  3964  000BCA  5024               	movf	??_UART_buff_put,w,c
  3965  000BCC  2421               	addwf	UART_buff_put@_this,w,c
  3966  000BCE  6ED9               	movwf	fsr2l,c
  3967  000BD0  5025               	movf	??_UART_buff_put+1,w,c
  3968  000BD2  2022               	addwfc	UART_buff_put@_this+1,w,c
  3969  000BD4  6EDA               	movwf	fsr2h,c
  3970  000BD6  C023  FFDF         	movff	UART_buff_put@c,indf2
  3971                           
  3972                           ;UART.c: 73: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3973  000BDA  EE20 F0C8          	lfsr	2,200
  3974  000BDE  5021               	movf	UART_buff_put@_this,w,c
  3975  000BE0  26D9               	addwf	fsr2l,f,c
  3976  000BE2  5022               	movf	UART_buff_put@_this+1,w,c
  3977  000BE4  22DA               	addwfc	fsr2h,f,c
  3978  000BE6  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3979  000BEA  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3980  000BEE  0E00               	movlw	0
  3981  000BF0  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3982  000BF2  0EC8               	movlw	200
  3983  000BF4  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3984  000BF6  EC9B  F00B         	call	_UART_buff_modulo_inc	;wreg free
  3985  000BFA  EE20 F0C8          	lfsr	2,200
  3986  000BFE  5021               	movf	UART_buff_put@_this,w,c
  3987  000C00  26D9               	addwf	fsr2l,f,c
  3988  000C02  5022               	movf	UART_buff_put@_this+1,w,c
  3989  000C04  22DA               	addwfc	fsr2h,f,c
  3990  000C06  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3991  000C0A  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3992                           
  3993                           ;UART.c: 74: ++_this->count;
  3994  000C0E  EE20 F0CC          	lfsr	2,204
  3995  000C12  5021               	movf	UART_buff_put@_this,w,c
  3996  000C14  26D9               	addwf	fsr2l,f,c
  3997  000C16  5022               	movf	UART_buff_put@_this+1,w,c
  3998  000C18  22DA               	addwfc	fsr2h,f,c
  3999  000C1A  2ADE               	incf	postinc2,f,c
  4000  000C1C  0E00               	movlw	0
  4001  000C1E  22DD               	addwfc	postdec2,f,c
  4002                           
  4003                           ;UART.c: 75: } else {
  4004  000C20  0012               	return	
  4005  000C22                     l4099:
  4006                           
  4007                           ;UART.c: 76: _this->buf[_this->head] = c;
  4008  000C22  EE20 F0C8          	lfsr	2,200
  4009  000C26  5021               	movf	UART_buff_put@_this,w,c
  4010  000C28  26D9               	addwf	fsr2l,f,c
  4011  000C2A  5022               	movf	UART_buff_put@_this+1,w,c
  4012  000C2C  22DA               	addwfc	fsr2h,f,c
  4013  000C2E  CFDE F024          	movff	postinc2,??_UART_buff_put
  4014  000C32  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  4015  000C36  5024               	movf	??_UART_buff_put,w,c
  4016  000C38  2421               	addwf	UART_buff_put@_this,w,c
  4017  000C3A  6ED9               	movwf	fsr2l,c
  4018  000C3C  5025               	movf	??_UART_buff_put+1,w,c
  4019  000C3E  2022               	addwfc	UART_buff_put@_this+1,w,c
  4020  000C40  6EDA               	movwf	fsr2h,c
  4021  000C42  C023  FFDF         	movff	UART_buff_put@c,indf2
  4022                           
  4023                           ;UART.c: 77: _this->head = UART_buff_modulo_inc(_this->head, 200);
  4024  000C46  EE20 F0C8          	lfsr	2,200
  4025  000C4A  5021               	movf	UART_buff_put@_this,w,c
  4026  000C4C  26D9               	addwf	fsr2l,f,c
  4027  000C4E  5022               	movf	UART_buff_put@_this+1,w,c
  4028  000C50  22DA               	addwfc	fsr2h,f,c
  4029  000C52  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  4030  000C56  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  4031  000C5A  0E00               	movlw	0
  4032  000C5C  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  4033  000C5E  0EC8               	movlw	200
  4034  000C60  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  4035  000C62  EC9B  F00B         	call	_UART_buff_modulo_inc	;wreg free
  4036  000C66  EE20 F0C8          	lfsr	2,200
  4037  000C6A  5021               	movf	UART_buff_put@_this,w,c
  4038  000C6C  26D9               	addwf	fsr2l,f,c
  4039  000C6E  5022               	movf	UART_buff_put@_this+1,w,c
  4040  000C70  22DA               	addwfc	fsr2h,f,c
  4041  000C72  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  4042  000C76  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  4043                           
  4044                           ;UART.c: 78: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  4045  000C7A  EE20 F0CA          	lfsr	2,202
  4046  000C7E  5021               	movf	UART_buff_put@_this,w,c
  4047  000C80  26D9               	addwf	fsr2l,f,c
  4048  000C82  5022               	movf	UART_buff_put@_this+1,w,c
  4049  000C84  22DA               	addwfc	fsr2h,f,c
  4050  000C86  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  4051  000C8A  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  4052  000C8E  0E00               	movlw	0
  4053  000C90  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  4054  000C92  0EC8               	movlw	200
  4055  000C94  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  4056  000C96  EC9B  F00B         	call	_UART_buff_modulo_inc	;wreg free
  4057  000C9A  EE20 F0CA          	lfsr	2,202
  4058  000C9E  5021               	movf	UART_buff_put@_this,w,c
  4059  000CA0  26D9               	addwf	fsr2l,f,c
  4060  000CA2  5022               	movf	UART_buff_put@_this+1,w,c
  4061  000CA4  22DA               	addwfc	fsr2h,f,c
  4062  000CA6  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  4063  000CAA  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  4064  000CAE  0012               	return	
  4065  000CB0                     __end_of_UART_buff_put:
  4066                           	opt stack 0
  4067                           tosu	equ	0xFFF
  4068                           tosh	equ	0xFFE
  4069                           tosl	equ	0xFFD
  4070                           pclath	equ	0xFFA
  4071                           tblptru	equ	0xFF8
  4072                           tblptrh	equ	0xFF7
  4073                           tblptrl	equ	0xFF6
  4074                           tablat	equ	0xFF5
  4075                           prodh	equ	0xFF4
  4076                           prodl	equ	0xFF3
  4077                           intcon	equ	0xFF2
  4078                           postinc0	equ	0xFEE
  4079                           wreg	equ	0xFE8
  4080                           postdec1	equ	0xFE5
  4081                           fsr1h	equ	0xFE2
  4082                           fsr1l	equ	0xFE1
  4083                           indf2	equ	0xFDF
  4084                           postinc2	equ	0xFDE
  4085                           postdec2	equ	0xFDD
  4086                           plusw2	equ	0xFDB
  4087                           fsr2h	equ	0xFDA
  4088                           fsr2l	equ	0xFD9
  4089                           status	equ	0xFD8
  4090                           
  4091 ;; *************** function _Receive_peek *****************
  4092 ;; Defined at:
  4093 ;;		line 120 in file "UART.c"
  4094 ;; Parameters:    Size  Location     Type
  4095 ;;		None
  4096 ;; Auto vars:     Size  Location     Type
  4097 ;;		None
  4098 ;; Return value:  Size  Location     Type
  4099 ;;                  1    wreg      unsigned char 
  4100 ;; Registers used:
  4101 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4102 ;; Tracked objects:
  4103 ;;		On entry : 0/0
  4104 ;;		On exit  : 0/0
  4105 ;;		Unchanged: 0/0
  4106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4107 ;;      Params:         0       0       0       0       0       0       0
  4108 ;;      Locals:         0       0       0       0       0       0       0
  4109 ;;      Temps:          0       0       0       0       0       0       0
  4110 ;;      Totals:         0       0       0       0       0       0       0
  4111 ;;Total ram usage:        0 bytes
  4112 ;; Hardware stack levels used:    1
  4113 ;; Hardware stack levels required when called:    5
  4114 ;; This function calls:
  4115 ;;		_UART_buff_peek
  4116 ;; This function is called by:
  4117 ;;		_CommsStart
  4118 ;;		_receiveData
  4119 ;; This function uses a non-reentrant model
  4120 ;;
  4121                           
  4122                           	psect	text14
  4123  00190E                     __ptext14:
  4124                           	opt stack 0
  4125  00190E                     _Receive_peek:
  4126                           	opt stack 22
  4127                           
  4128                           ;UART.c: 121: return UART_buff_peek(&input_buffer);
  4129                           
  4130                           ;incstack = 0
  4131  00190E  0E00               	movlw	low _input_buffer
  4132  001910  6E1B               	movwf	UART_buff_peek@_this,c
  4133  001912  0E03               	movlw	high _input_buffer
  4134  001914  6E1C               	movwf	UART_buff_peek@_this+1,c
  4135  001916  ECDA  F00B         	call	_UART_buff_peek	;wreg free
  4136  00191A  0012               	return	
  4137  00191C                     __end_of_Receive_peek:
  4138                           	opt stack 0
  4139                           tosu	equ	0xFFF
  4140                           tosh	equ	0xFFE
  4141                           tosl	equ	0xFFD
  4142                           pclath	equ	0xFFA
  4143                           tblptru	equ	0xFF8
  4144                           tblptrh	equ	0xFF7
  4145                           tblptrl	equ	0xFF6
  4146                           tablat	equ	0xFF5
  4147                           prodh	equ	0xFF4
  4148                           prodl	equ	0xFF3
  4149                           intcon	equ	0xFF2
  4150                           postinc0	equ	0xFEE
  4151                           wreg	equ	0xFE8
  4152                           postdec1	equ	0xFE5
  4153                           fsr1h	equ	0xFE2
  4154                           fsr1l	equ	0xFE1
  4155                           indf2	equ	0xFDF
  4156                           postinc2	equ	0xFDE
  4157                           postdec2	equ	0xFDD
  4158                           plusw2	equ	0xFDB
  4159                           fsr2h	equ	0xFDA
  4160                           fsr2l	equ	0xFD9
  4161                           status	equ	0xFD8
  4162                           
  4163 ;; *************** function _UART_buff_peek *****************
  4164 ;; Defined at:
  4165 ;;		line 116 in file "UART.c"
  4166 ;; Parameters:    Size  Location     Type
  4167 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  4168 ;;		 -> input_buffer(206), 
  4169 ;; Auto vars:     Size  Location     Type
  4170 ;;		None
  4171 ;; Return value:  Size  Location     Type
  4172 ;;                  1    wreg      unsigned char 
  4173 ;; Registers used:
  4174 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4175 ;; Tracked objects:
  4176 ;;		On entry : 0/0
  4177 ;;		On exit  : 0/0
  4178 ;;		Unchanged: 0/0
  4179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4180 ;;      Params:         2       0       0       0       0       0       0
  4181 ;;      Locals:         0       0       0       0       0       0       0
  4182 ;;      Temps:          2       0       0       0       0       0       0
  4183 ;;      Totals:         4       0       0       0       0       0       0
  4184 ;;Total ram usage:        4 bytes
  4185 ;; Hardware stack levels used:    1
  4186 ;; Hardware stack levels required when called:    4
  4187 ;; This function calls:
  4188 ;;		Nothing
  4189 ;; This function is called by:
  4190 ;;		_Receive_peek
  4191 ;; This function uses a non-reentrant model
  4192 ;;
  4193                           
  4194                           	psect	text15
  4195  0017B4                     __ptext15:
  4196                           	opt stack 0
  4197  0017B4                     _UART_buff_peek:
  4198                           	opt stack 22
  4199                           
  4200                           ;UART.c: 117: return _this->buf[_this->tail];
  4201                           
  4202                           ;incstack = 0
  4203  0017B4  EE20 F0CA          	lfsr	2,202
  4204  0017B8  501B               	movf	UART_buff_peek@_this,w,c
  4205  0017BA  26D9               	addwf	fsr2l,f,c
  4206  0017BC  501C               	movf	UART_buff_peek@_this+1,w,c
  4207  0017BE  22DA               	addwfc	fsr2h,f,c
  4208  0017C0  CFDE F01D          	movff	postinc2,??_UART_buff_peek
  4209  0017C4  CFDD F01E          	movff	postdec2,??_UART_buff_peek+1
  4210  0017C8  501D               	movf	??_UART_buff_peek,w,c
  4211  0017CA  241B               	addwf	UART_buff_peek@_this,w,c
  4212  0017CC  6ED9               	movwf	fsr2l,c
  4213  0017CE  501E               	movf	??_UART_buff_peek+1,w,c
  4214  0017D0  201C               	addwfc	UART_buff_peek@_this+1,w,c
  4215  0017D2  6EDA               	movwf	fsr2h,c
  4216  0017D4  50DF               	movf	indf2,w,c
  4217  0017D6  0012               	return	
  4218  0017D8                     __end_of_UART_buff_peek:
  4219                           	opt stack 0
  4220                           tosu	equ	0xFFF
  4221                           tosh	equ	0xFFE
  4222                           tosl	equ	0xFFD
  4223                           pclath	equ	0xFFA
  4224                           tblptru	equ	0xFF8
  4225                           tblptrh	equ	0xFF7
  4226                           tblptrl	equ	0xFF6
  4227                           tablat	equ	0xFF5
  4228                           prodh	equ	0xFF4
  4229                           prodl	equ	0xFF3
  4230                           intcon	equ	0xFF2
  4231                           postinc0	equ	0xFEE
  4232                           wreg	equ	0xFE8
  4233                           postdec1	equ	0xFE5
  4234                           fsr1h	equ	0xFE2
  4235                           fsr1l	equ	0xFE1
  4236                           indf2	equ	0xFDF
  4237                           postinc2	equ	0xFDE
  4238                           postdec2	equ	0xFDD
  4239                           plusw2	equ	0xFDB
  4240                           fsr2h	equ	0xFDA
  4241                           fsr2l	equ	0xFD9
  4242                           status	equ	0xFD8
  4243                           
  4244 ;; *************** function _CRCcheck *****************
  4245 ;; Defined at:
  4246 ;;		line 428 in file "FastTransfer.c"
  4247 ;; Parameters:    Size  Location     Type
  4248 ;;		None
  4249 ;; Auto vars:     Size  Location     Type
  4250 ;;  rt              2    7[BANK0 ] int 
  4251 ;;  arrayHolder     3    4[BANK0 ] unsigned char [3]
  4252 ;;  calculatedCR    1    3[BANK0 ] unsigned char 
  4253 ;;  SentCRC         1    2[BANK0 ] unsigned char 
  4254 ;; Return value:  Size  Location     Type
  4255 ;;                  1    wreg      void 
  4256 ;; Registers used:
  4257 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  4258 ;; Tracked objects:
  4259 ;;		On entry : 0/0
  4260 ;;		On exit  : 0/0
  4261 ;;		Unchanged: 0/0
  4262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4263 ;;      Params:         0       0       0       0       0       0       0
  4264 ;;      Locals:         0       7       0       0       0       0       0
  4265 ;;      Temps:          0       0       0       0       0       0       0
  4266 ;;      Totals:         0       7       0       0       0       0       0
  4267 ;;Total ram usage:        7 bytes
  4268 ;; Hardware stack levels used:    1
  4269 ;; Hardware stack levels required when called:    7
  4270 ;; This function calls:
  4271 ;;		Absolute function
  4272 ;;		_CRC8
  4273 ;;		_Receive_available
  4274 ;;		_Receive_get
  4275 ;;		_crcBufS_get
  4276 ;;		_crcBufS_status_put
  4277 ;; This function is called by:
  4278 ;;		_receiveData
  4279 ;; This function uses a non-reentrant model
  4280 ;;
  4281                           
  4282                           	psect	text16
  4283  0008EA                     __ptext16:
  4284                           	opt stack 0
  4285  0008EA                     _CRCcheck:
  4286                           	opt stack 20
  4287  0008EA                     l4129:
  4288  0008EA  D801               	call	u4008
  4289  0008EC  D00A               	goto	u4009
  4290  0008EE                     u4008:
  4291  0008EE  0005               	push	
  4292  0008F0  6EFA               	movwf	pclath,c
  4293  0008F2  503A               	movf	_serial_available,w,c
  4294  0008F4  6EFD               	movwf	tosl,c
  4295  0008F6  503B               	movf	_serial_available+1,w,c
  4296  0008F8  6EFE               	movwf	tosh,c
  4297  0008FA  50F8               	movf	tblptru,w,c
  4298  0008FC  6EFF               	movwf	tosu,c
  4299  0008FE  50FA               	movf	pclath,w,c
  4300  000900  0012               	return		;indir
  4301  000902                     u4009:
  4302  000902  BE1E               	btfsc	?_Receive_available+1,7,c
  4303  000904  D7F2               	goto	l4129
  4304  000906  501E               	movf	?_Receive_available+1,w,c
  4305  000908  E104               	bnz	l4131
  4306  00090A  0E04               	movlw	4
  4307  00090C  5C1D               	subwf	?_Receive_available,w,c
  4308  00090E  A0D8               	btfss	status,0,c
  4309  000910  D7EC               	goto	l4129
  4310  000912                     l4131:
  4311                           
  4312                           ;FastTransfer.c: 432: unsigned char arrayHolder[3];
  4313                           ;FastTransfer.c: 433: arrayHolder[0] = serial_read();
  4314  000912  D801               	call	u4028
  4315  000914  D00A               	goto	u4029
  4316  000916                     u4028:
  4317  000916  0005               	push	
  4318  000918  6EFA               	movwf	pclath,c
  4319  00091A  503C               	movf	_serial_read,w,c
  4320  00091C  6EFD               	movwf	tosl,c
  4321  00091E  503D               	movf	_serial_read+1,w,c
  4322  000920  6EFE               	movwf	tosh,c
  4323  000922  50F8               	movf	tblptru,w,c
  4324  000924  6EFF               	movwf	tosu,c
  4325  000926  50FA               	movf	pclath,w,c
  4326  000928  0012               	return		;indir
  4327  00092A                     u4029:
  4328  00092A  0100               	movlb	0	; () banked
  4329  00092C  6FD6               	movwf	CRCcheck@arrayHolder& (0+255),b
  4330                           
  4331                           ;FastTransfer.c: 434: arrayHolder[1] = serial_read();
  4332  00092E  D801               	call	u4038
  4333  000930  D00A               	goto	u4039
  4334  000932                     u4038:
  4335  000932  0005               	push	
  4336  000934  6EFA               	movwf	pclath,c
  4337  000936  503C               	movf	_serial_read,w,c
  4338  000938  6EFD               	movwf	tosl,c
  4339  00093A  503D               	movf	_serial_read+1,w,c
  4340  00093C  6EFE               	movwf	tosh,c
  4341  00093E  50F8               	movf	tblptru,w,c
  4342  000940  6EFF               	movwf	tosu,c
  4343  000942  50FA               	movf	pclath,w,c
  4344  000944  0012               	return		;indir
  4345  000946                     u4039:
  4346  000946  0100               	movlb	0	; () banked
  4347  000948  6FD7               	movwf	(CRCcheck@arrayHolder+1)& (0+255),b
  4348                           
  4349                           ;FastTransfer.c: 435: arrayHolder[2] = serial_read();
  4350  00094A  D801               	call	u4048
  4351  00094C  D00A               	goto	u4049
  4352  00094E                     u4048:
  4353  00094E  0005               	push	
  4354  000950  6EFA               	movwf	pclath,c
  4355  000952  503C               	movf	_serial_read,w,c
  4356  000954  6EFD               	movwf	tosl,c
  4357  000956  503D               	movf	_serial_read+1,w,c
  4358  000958  6EFE               	movwf	tosh,c
  4359  00095A  50F8               	movf	tblptru,w,c
  4360  00095C  6EFF               	movwf	tosu,c
  4361  00095E  50FA               	movf	pclath,w,c
  4362  000960  0012               	return		;indir
  4363  000962                     u4049:
  4364  000962  0100               	movlb	0	; () banked
  4365  000964  6FD8               	movwf	(CRCcheck@arrayHolder+2)& (0+255),b
  4366                           
  4367                           ;FastTransfer.c: 436: unsigned char SentCRC = serial_read();
  4368  000966  D801               	call	u4058
  4369  000968  D00A               	goto	u4059
  4370  00096A                     u4058:
  4371  00096A  0005               	push	
  4372  00096C  6EFA               	movwf	pclath,c
  4373  00096E  503C               	movf	_serial_read,w,c
  4374  000970  6EFD               	movwf	tosl,c
  4375  000972  503D               	movf	_serial_read+1,w,c
  4376  000974  6EFE               	movwf	tosh,c
  4377  000976  50F8               	movf	tblptru,w,c
  4378  000978  6EFF               	movwf	tosu,c
  4379  00097A  50FA               	movf	pclath,w,c
  4380  00097C  0012               	return		;indir
  4381  00097E                     u4059:
  4382  00097E  0100               	movlb	0	; () banked
  4383  000980  6FD4               	movwf	CRCcheck@SentCRC& (0+255),b
  4384                           
  4385                           ; BSR set to: 0
  4386                           ;FastTransfer.c: 437: unsigned char calculatedCRC = CRC8(arrayHolder, 3);
  4387  000982  0ED6               	movlw	low CRCcheck@arrayHolder
  4388  000984  6E1B               	movwf	CRC8@data,c
  4389  000986  0E00               	movlw	high CRCcheck@arrayHolder
  4390  000988  6E1C               	movwf	CRC8@data+1,c
  4391  00098A  0E03               	movlw	3
  4392  00098C  6E1D               	movwf	CRC8@len,c
  4393  00098E  EC45  F00A         	call	_CRC8	;wreg free
  4394  000992  0100               	movlb	0	; () banked
  4395  000994  6FD5               	movwf	CRCcheck@calculatedCRC& (0+255),b
  4396                           
  4397                           ; BSR set to: 0
  4398                           ;FastTransfer.c: 440: if (SentCRC == calculatedCRC) {
  4399  000996  0100               	movlb	0	; () banked
  4400  000998  51D5               	movf	CRCcheck@calculatedCRC& (0+255),w,b
  4401  00099A  0100               	movlb	0	; () banked
  4402  00099C  19D4               	xorwf	CRCcheck@SentCRC& (0+255),w,b
  4403  00099E  A4D8               	btfss	status,2,c
  4404  0009A0  D04E               	goto	l4161
  4405                           
  4406                           ; BSR set to: 0
  4407                           ;FastTransfer.c: 442: int rt;
  4408                           ;FastTransfer.c: 443: for (rt = 0; rt < 5; rt++) {
  4409  0009A2  0E00               	movlw	0
  4410  0009A4  0100               	movlb	0	; () banked
  4411  0009A6  6FDA               	movwf	(CRCcheck@rt+1)& (0+255),b
  4412  0009A8  0E00               	movlw	0
  4413  0009AA  6FD9               	movwf	CRCcheck@rt& (0+255),b
  4414  0009AC                     l4139:
  4415                           
  4416                           ; BSR set to: 0
  4417  0009AC  0100               	movlb	0	; () banked
  4418  0009AE  BFDA               	btfsc	(CRCcheck@rt+1)& (0+255),7,b
  4419  0009B0  D008               	goto	l4143
  4420  0009B2  0100               	movlb	0	; () banked
  4421  0009B4  51DA               	movf	(CRCcheck@rt+1)& (0+255),w,b
  4422  0009B6  E147               	bnz	l569
  4423  0009B8  0E05               	movlw	5
  4424  0009BA  0100               	movlb	0	; () banked
  4425  0009BC  5DD9               	subwf	CRCcheck@rt& (0+255),w,b
  4426  0009BE  B0D8               	btfsc	status,0,c
  4427  0009C0  0012               	return	
  4428  0009C2                     l4143:
  4429                           
  4430                           ; BSR set to: 0
  4431                           ;FastTransfer.c: 444: if (returnAddress == crcBufS_get(&crc_buffer, rt, 0)) {
  4432  0009C2  0EC1               	movlw	low _crc_buffer
  4433  0009C4  6E1B               	movwf	crcBufS_get@_this,c
  4434  0009C6  0E00               	movlw	high _crc_buffer
  4435  0009C8  6E1C               	movwf	crcBufS_get@_this+1,c
  4436  0009CA  C0D9  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  4437  0009CE  0E00               	movlw	0
  4438  0009D0  6E1E               	movwf	crcBufS_get@space,c
  4439  0009D2  ECE5  F006         	call	_crcBufS_get	;wreg free
  4440  0009D6  1836               	xorwf	_returnAddress,w,c
  4441  0009D8  A4D8               	btfss	status,2,c
  4442  0009DA  D02D               	goto	l4157
  4443                           
  4444                           ;FastTransfer.c: 445: if (arrayHolder[2] == crcBufS_get(&crc_buffer, rt, 1)) {
  4445  0009DC  0EC1               	movlw	low _crc_buffer
  4446  0009DE  6E1B               	movwf	crcBufS_get@_this,c
  4447  0009E0  0E00               	movlw	high _crc_buffer
  4448  0009E2  6E1C               	movwf	crcBufS_get@_this+1,c
  4449  0009E4  C0D9  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  4450  0009E8  0E01               	movlw	1
  4451  0009EA  6E1E               	movwf	crcBufS_get@space,c
  4452  0009EC  ECE5  F006         	call	_crcBufS_get	;wreg free
  4453  0009F0  0100               	movlb	0	; () banked
  4454  0009F2  19D8               	xorwf	(CRCcheck@arrayHolder+2)& (0+255),w,b
  4455  0009F4  A4D8               	btfss	status,2,c
  4456  0009F6  D01F               	goto	l4157
  4457                           
  4458                           ; BSR set to: 0
  4459                           ;FastTransfer.c: 446: if (arrayHolder[1] == 1) {
  4460  0009F8  0100               	movlb	0	; () banked
  4461  0009FA  05D7               	decf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  4462  0009FC  A4D8               	btfss	status,2,c
  4463  0009FE  D00B               	goto	l4153
  4464                           
  4465                           ; BSR set to: 0
  4466                           ;FastTransfer.c: 447: crcBufS_status_put(&crc_buffer, rt, 1);
  4467  000A00  0EC1               	movlw	low _crc_buffer
  4468  000A02  6E1B               	movwf	crcBufS_status_put@_this,c
  4469  000A04  0E00               	movlw	high _crc_buffer
  4470  000A06  6E1C               	movwf	crcBufS_status_put@_this+1,c
  4471  000A08  C0D9  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  4472  000A0C  0E01               	movlw	1
  4473  000A0E  6E1E               	movwf	crcBufS_status_put@status,c
  4474  000A10  ECCA  F007         	call	_crcBufS_status_put	;wreg free
  4475                           
  4476                           ;FastTransfer.c: 448: break;
  4477  000A14  0012               	return	
  4478  000A16                     l4153:
  4479  000A16  0E02               	movlw	2
  4480  000A18  0100               	movlb	0	; () banked
  4481  000A1A  19D7               	xorwf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  4482  000A1C  A4D8               	btfss	status,2,c
  4483  000A1E  D00B               	goto	l4157
  4484                           
  4485                           ; BSR set to: 0
  4486                           ;FastTransfer.c: 450: crcBufS_status_put(&crc_buffer, rt, 2);
  4487  000A20  0EC1               	movlw	low _crc_buffer
  4488  000A22  6E1B               	movwf	crcBufS_status_put@_this,c
  4489  000A24  0E00               	movlw	high _crc_buffer
  4490  000A26  6E1C               	movwf	crcBufS_status_put@_this+1,c
  4491  000A28  C0D9  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  4492  000A2C  0E02               	movlw	2
  4493  000A2E  6E1E               	movwf	crcBufS_status_put@status,c
  4494  000A30  ECCA  F007         	call	_crcBufS_status_put	;wreg free
  4495                           
  4496                           ;FastTransfer.c: 451: break;
  4497  000A34  0012               	return	
  4498  000A36                     l4157:
  4499  000A36  0100               	movlb	0	; () banked
  4500  000A38  4BD9               	infsnz	CRCcheck@rt& (0+255),f,b
  4501  000A3A  2BDA               	incf	(CRCcheck@rt+1)& (0+255),f,b
  4502  000A3C  D7B7               	goto	l4139
  4503  000A3E                     l4161:
  4504                           
  4505                           ; BSR set to: 0
  4506                           ;FastTransfer.c: 457: crcErrorCounter++;
  4507  000A3E  0100               	movlb	0	; () banked
  4508  000A40  4B95               	infsnz	_crcErrorCounter& (0+255),f,b
  4509  000A42  2B96               	incf	(_crcErrorCounter+1)& (0+255),f,b
  4510  000A44  0012               	return	
  4511  000A46                     l569:
  4512  000A46  0012               	return		;funcret
  4513  000A48                     __end_of_CRCcheck:
  4514                           	opt stack 0
  4515                           tosu	equ	0xFFF
  4516                           tosh	equ	0xFFE
  4517                           tosl	equ	0xFFD
  4518                           pclath	equ	0xFFA
  4519                           tblptru	equ	0xFF8
  4520                           tblptrh	equ	0xFF7
  4521                           tblptrl	equ	0xFF6
  4522                           tablat	equ	0xFF5
  4523                           prodh	equ	0xFF4
  4524                           prodl	equ	0xFF3
  4525                           intcon	equ	0xFF2
  4526                           postinc0	equ	0xFEE
  4527                           wreg	equ	0xFE8
  4528                           postdec1	equ	0xFE5
  4529                           fsr1h	equ	0xFE2
  4530                           fsr1l	equ	0xFE1
  4531                           indf2	equ	0xFDF
  4532                           postinc2	equ	0xFDE
  4533                           postdec2	equ	0xFDD
  4534                           plusw2	equ	0xFDB
  4535                           fsr2h	equ	0xFDA
  4536                           fsr2l	equ	0xFD9
  4537                           status	equ	0xFD8
  4538                           
  4539 ;; *************** function _crcBufS_status_put *****************
  4540 ;; Defined at:
  4541 ;;		line 391 in file "FastTransfer.c"
  4542 ;; Parameters:    Size  Location     Type
  4543 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  4544 ;;		 -> crc_buffer(17), 
  4545 ;;  time            1   28[COMRAM] unsigned char 
  4546 ;;  status          1   29[COMRAM] unsigned char 
  4547 ;; Auto vars:     Size  Location     Type
  4548 ;;  wantedTime      2   34[COMRAM] int 
  4549 ;; Return value:  Size  Location     Type
  4550 ;;                  1    wreg      void 
  4551 ;; Registers used:
  4552 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4553 ;; Tracked objects:
  4554 ;;		On entry : 0/0
  4555 ;;		On exit  : 0/0
  4556 ;;		Unchanged: 0/0
  4557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4558 ;;      Params:         4       0       0       0       0       0       0
  4559 ;;      Locals:         2       0       0       0       0       0       0
  4560 ;;      Temps:          4       0       0       0       0       0       0
  4561 ;;      Totals:        10       0       0       0       0       0       0
  4562 ;;Total ram usage:       10 bytes
  4563 ;; Hardware stack levels used:    1
  4564 ;; Hardware stack levels required when called:    4
  4565 ;; This function calls:
  4566 ;;		Nothing
  4567 ;; This function is called by:
  4568 ;;		_CRCcheck
  4569 ;; This function uses a non-reentrant model
  4570 ;;
  4571                           
  4572                           	psect	text17
  4573  000F94                     __ptext17:
  4574                           	opt stack 0
  4575  000F94                     _crcBufS_status_put:
  4576                           	opt stack 22
  4577                           
  4578                           ;FastTransfer.c: 392: if (time >= 5) {
  4579                           
  4580                           ;incstack = 0
  4581  000F94  0E04               	movlw	4
  4582  000F96  641D               	cpfsgt	crcBufS_status_put@time,c
  4583  000F98  D002               	goto	l4081
  4584                           
  4585                           ;FastTransfer.c: 393: time = 5 - 1;
  4586  000F9A  0E04               	movlw	4
  4587  000F9C  6E1D               	movwf	crcBufS_status_put@time,c
  4588  000F9E                     l4081:
  4589                           
  4590                           ;FastTransfer.c: 394: }
  4591                           ;FastTransfer.c: 395: time = time + 1;
  4592  000F9E  281D               	incf	crcBufS_status_put@time,w,c
  4593  000FA0  6E1D               	movwf	crcBufS_status_put@time,c
  4594                           
  4595                           ;FastTransfer.c: 396: int wantedTime = time * 3;
  4596  000FA2  501D               	movf	crcBufS_status_put@time,w,c
  4597  000FA4  0D03               	mullw	3
  4598  000FA6  CFF3 F023          	movff	prodl,crcBufS_status_put@wantedTime
  4599  000FAA  CFF4 F024          	movff	prodh,crcBufS_status_put@wantedTime+1
  4600                           
  4601                           ;FastTransfer.c: 397: if (wantedTime > _this->head) {
  4602  000FAE  EE20 F00F          	lfsr	2,15
  4603  000FB2  501B               	movf	crcBufS_status_put@_this,w,c
  4604  000FB4  26D9               	addwf	fsr2l,f,c
  4605  000FB6  501C               	movf	crcBufS_status_put@_this+1,w,c
  4606  000FB8  22DA               	addwfc	fsr2h,f,c
  4607  000FBA  5023               	movf	crcBufS_status_put@wantedTime,w,c
  4608  000FBC  5CDE               	subwf	postinc2,w,c
  4609  000FBE  50DE               	movf	postinc2,w,c
  4610  000FC0  0A80               	xorlw	128
  4611  000FC2  6E21               	movwf	(??_crcBufS_status_put+2)& (0+255),c
  4612  000FC4  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  4613  000FC6  0A80               	xorlw	128
  4614  000FC8  5821               	subwfb	(??_crcBufS_status_put+2)& (0+255),w,c
  4615  000FCA  B0D8               	btfsc	status,0,c
  4616  000FCC  D02B               	goto	l4089
  4617                           
  4618                           ;FastTransfer.c: 398: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  4619  000FCE  EE20 F00F          	lfsr	2,15
  4620  000FD2  501B               	movf	crcBufS_status_put@_this,w,c
  4621  000FD4  26D9               	addwf	fsr2l,f,c
  4622  000FD6  501C               	movf	crcBufS_status_put@_this+1,w,c
  4623  000FD8  22DA               	addwfc	fsr2h,f,c
  4624  000FDA  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  4625  000FDE  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  4626  000FE2  1E1F               	comf	??_crcBufS_status_put,f,c
  4627  000FE4  1E20               	comf	??_crcBufS_status_put+1,f,c
  4628  000FE6  4A1F               	infsnz	??_crcBufS_status_put,f,c
  4629  000FE8  2A20               	incf	??_crcBufS_status_put+1,f,c
  4630  000FEA  5023               	movf	crcBufS_status_put@wantedTime,w,c
  4631  000FEC  261F               	addwf	??_crcBufS_status_put,f,c
  4632  000FEE  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  4633  000FF0  2220               	addwfc	??_crcBufS_status_put+1,f,c
  4634  000FF2  1E1F               	comf	??_crcBufS_status_put,f,c
  4635  000FF4  1E20               	comf	??_crcBufS_status_put+1,f,c
  4636  000FF6  4A1F               	infsnz	??_crcBufS_status_put,f,c
  4637  000FF8  2A20               	incf	??_crcBufS_status_put+1,f,c
  4638  000FFA  0E0F               	movlw	15
  4639  000FFC  241F               	addwf	??_crcBufS_status_put,w,c
  4640  000FFE  6E23               	movwf	crcBufS_status_put@wantedTime,c
  4641  001000  0E00               	movlw	0
  4642  001002  2020               	addwfc	??_crcBufS_status_put+1,w,c
  4643  001004  6E24               	movwf	crcBufS_status_put@wantedTime+1,c
  4644                           
  4645                           ;FastTransfer.c: 399: _this->buf[(wantedTime + 2)] = status;
  4646  001006  0E02               	movlw	2
  4647  001008  2423               	addwf	crcBufS_status_put@wantedTime,w,c
  4648  00100A  6E1F               	movwf	??_crcBufS_status_put& (0+255),c
  4649  00100C  0E00               	movlw	0
  4650  00100E  2024               	addwfc	crcBufS_status_put@wantedTime+1,w,c
  4651  001010  6E20               	movwf	(??_crcBufS_status_put+1)& (0+255),c
  4652  001012  501F               	movf	??_crcBufS_status_put,w,c
  4653  001014  241B               	addwf	crcBufS_status_put@_this,w,c
  4654  001016  6ED9               	movwf	fsr2l,c
  4655  001018  5020               	movf	??_crcBufS_status_put+1,w,c
  4656  00101A  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  4657  00101C  6EDA               	movwf	fsr2h,c
  4658  00101E  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  4659                           
  4660                           ;FastTransfer.c: 400: } else {
  4661  001022  0012               	return	
  4662  001024                     l4089:
  4663                           
  4664                           ;FastTransfer.c: 401: _this->buf[(_this->head - wantedTime) + 2] = status;
  4665  001024  EE20 F00F          	lfsr	2,15
  4666  001028  501B               	movf	crcBufS_status_put@_this,w,c
  4667  00102A  26D9               	addwf	fsr2l,f,c
  4668  00102C  501C               	movf	crcBufS_status_put@_this+1,w,c
  4669  00102E  22DA               	addwfc	fsr2h,f,c
  4670  001030  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  4671  001034  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  4672  001038  C023  F021         	movff	crcBufS_status_put@wantedTime,??_crcBufS_status_put+2
  4673  00103C  C024  F022         	movff	crcBufS_status_put@wantedTime+1,??_crcBufS_status_put+3
  4674  001040  1E21               	comf	??_crcBufS_status_put+2,f,c
  4675  001042  1E22               	comf	??_crcBufS_status_put+3,f,c
  4676  001044  4A21               	infsnz	??_crcBufS_status_put+2,f,c
  4677  001046  2A22               	incf	??_crcBufS_status_put+3,f,c
  4678  001048  501F               	movf	??_crcBufS_status_put,w,c
  4679  00104A  2621               	addwf	??_crcBufS_status_put+2,f,c
  4680  00104C  5020               	movf	??_crcBufS_status_put+1,w,c
  4681  00104E  2222               	addwfc	??_crcBufS_status_put+3,f,c
  4682  001050  0E02               	movlw	2
  4683  001052  2621               	addwf	??_crcBufS_status_put+2,f,c
  4684  001054  0E00               	movlw	0
  4685  001056  2222               	addwfc	??_crcBufS_status_put+3,f,c
  4686  001058  5021               	movf	??_crcBufS_status_put+2,w,c
  4687  00105A  241B               	addwf	crcBufS_status_put@_this,w,c
  4688  00105C  6ED9               	movwf	fsr2l,c
  4689  00105E  5022               	movf	??_crcBufS_status_put+3,w,c
  4690  001060  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  4691  001062  6EDA               	movwf	fsr2h,c
  4692  001064  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  4693  001068  0012               	return	
  4694  00106A                     __end_of_crcBufS_status_put:
  4695                           	opt stack 0
  4696                           tosu	equ	0xFFF
  4697                           tosh	equ	0xFFE
  4698                           tosl	equ	0xFFD
  4699                           pclath	equ	0xFFA
  4700                           tblptru	equ	0xFF8
  4701                           tblptrh	equ	0xFF7
  4702                           tblptrl	equ	0xFF6
  4703                           tablat	equ	0xFF5
  4704                           prodh	equ	0xFF4
  4705                           prodl	equ	0xFF3
  4706                           intcon	equ	0xFF2
  4707                           postinc0	equ	0xFEE
  4708                           wreg	equ	0xFE8
  4709                           postdec1	equ	0xFE5
  4710                           fsr1h	equ	0xFE2
  4711                           fsr1l	equ	0xFE1
  4712                           indf2	equ	0xFDF
  4713                           postinc2	equ	0xFDE
  4714                           postdec2	equ	0xFDD
  4715                           plusw2	equ	0xFDB
  4716                           fsr2h	equ	0xFDA
  4717                           fsr2l	equ	0xFD9
  4718                           status	equ	0xFD8
  4719                           
  4720 ;; *************** function _crcBufS_get *****************
  4721 ;; Defined at:
  4722 ;;		line 408 in file "FastTransfer.c"
  4723 ;; Parameters:    Size  Location     Type
  4724 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  4725 ;;		 -> crc_buffer(17), 
  4726 ;;  time            1   28[COMRAM] unsigned char 
  4727 ;;  space           1   29[COMRAM] unsigned char 
  4728 ;; Auto vars:     Size  Location     Type
  4729 ;;  wantedTime      2    0[BANK0 ] int 
  4730 ;; Return value:  Size  Location     Type
  4731 ;;                  1    wreg      unsigned char 
  4732 ;; Registers used:
  4733 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4734 ;; Tracked objects:
  4735 ;;		On entry : 0/0
  4736 ;;		On exit  : 0/0
  4737 ;;		Unchanged: 0/0
  4738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4739 ;;      Params:         4       0       0       0       0       0       0
  4740 ;;      Locals:         0       2       0       0       0       0       0
  4741 ;;      Temps:          6       0       0       0       0       0       0
  4742 ;;      Totals:        10       2       0       0       0       0       0
  4743 ;;Total ram usage:       12 bytes
  4744 ;; Hardware stack levels used:    1
  4745 ;; Hardware stack levels required when called:    4
  4746 ;; This function calls:
  4747 ;;		Nothing
  4748 ;; This function is called by:
  4749 ;;		_CRCcheck
  4750 ;;		_AKNAK
  4751 ;; This function uses a non-reentrant model
  4752 ;;
  4753                           
  4754                           	psect	text18
  4755  000DCA                     __ptext18:
  4756                           	opt stack 0
  4757  000DCA                     _crcBufS_get:
  4758                           	opt stack 22
  4759                           
  4760                           ;FastTransfer.c: 409: if (time >= 5) {
  4761                           
  4762                           ;incstack = 0
  4763  000DCA  0E04               	movlw	4
  4764  000DCC  641D               	cpfsgt	crcBufS_get@time,c
  4765  000DCE  D002               	goto	l4057
  4766                           
  4767                           ;FastTransfer.c: 410: time = 5 - 1;
  4768  000DD0  0E04               	movlw	4
  4769  000DD2  6E1D               	movwf	crcBufS_get@time,c
  4770  000DD4                     l4057:
  4771                           
  4772                           ;FastTransfer.c: 411: }
  4773                           ;FastTransfer.c: 412: if (space >= 3) {
  4774  000DD4  0E02               	movlw	2
  4775  000DD6  641E               	cpfsgt	crcBufS_get@space,c
  4776  000DD8  D002               	goto	l4061
  4777                           
  4778                           ;FastTransfer.c: 413: space = 3 - 1;
  4779  000DDA  0E02               	movlw	2
  4780  000DDC  6E1E               	movwf	crcBufS_get@space,c
  4781  000DDE                     l4061:
  4782                           
  4783                           ;FastTransfer.c: 414: }
  4784                           ;FastTransfer.c: 415: time = time + 1;
  4785  000DDE  281D               	incf	crcBufS_get@time,w,c
  4786  000DE0  6E1D               	movwf	crcBufS_get@time,c
  4787                           
  4788                           ;FastTransfer.c: 416: int wantedTime = time * 3;
  4789  000DE2  501D               	movf	crcBufS_get@time,w,c
  4790  000DE4  0D03               	mullw	3
  4791  000DE6  CFF3 F0D2          	movff	prodl,crcBufS_get@wantedTime
  4792  000DEA  CFF4 F0D3          	movff	prodh,crcBufS_get@wantedTime+1
  4793                           
  4794                           ;FastTransfer.c: 417: if (wantedTime > _this->head) {
  4795  000DEE  EE20 F00F          	lfsr	2,15
  4796  000DF2  501B               	movf	crcBufS_get@_this,w,c
  4797  000DF4  26D9               	addwf	fsr2l,f,c
  4798  000DF6  501C               	movf	crcBufS_get@_this+1,w,c
  4799  000DF8  22DA               	addwfc	fsr2h,f,c
  4800  000DFA  0100               	movlb	0	; () banked
  4801  000DFC  51D2               	movf	crcBufS_get@wantedTime& (0+255),w,b
  4802  000DFE  5CDE               	subwf	postinc2,w,c
  4803  000E00  50DE               	movf	postinc2,w,c
  4804  000E02  0A80               	xorlw	128
  4805  000E04  6E21               	movwf	(??_crcBufS_get+2)& (0+255),c
  4806  000E06  0100               	movlb	0	; () banked
  4807  000E08  51D3               	movf	(crcBufS_get@wantedTime+1)& (0+255),w,b
  4808  000E0A  0A80               	xorlw	128
  4809  000E0C  5821               	subwfb	(??_crcBufS_get+2)& (0+255),w,c
  4810  000E0E  B0D8               	btfsc	status,0,c
  4811  000E10  D030               	goto	l4073
  4812                           
  4813                           ; BSR set to: 0
  4814                           ;FastTransfer.c: 418: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  4815  000E12  EE20 F00F          	lfsr	2,15
  4816  000E16  501B               	movf	crcBufS_get@_this,w,c
  4817  000E18  26D9               	addwf	fsr2l,f,c
  4818  000E1A  501C               	movf	crcBufS_get@_this+1,w,c
  4819  000E1C  22DA               	addwfc	fsr2h,f,c
  4820  000E1E  CFDE F01F          	movff	postinc2,??_crcBufS_get
  4821  000E22  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  4822  000E26  1E1F               	comf	??_crcBufS_get,f,c
  4823  000E28  1E20               	comf	??_crcBufS_get+1,f,c
  4824  000E2A  4A1F               	infsnz	??_crcBufS_get,f,c
  4825  000E2C  2A20               	incf	??_crcBufS_get+1,f,c
  4826  000E2E  0100               	movlb	0	; () banked
  4827  000E30  51D2               	movf	crcBufS_get@wantedTime& (0+255),w,b
  4828  000E32  261F               	addwf	??_crcBufS_get,f,c
  4829  000E34  0100               	movlb	0	; () banked
  4830  000E36  51D3               	movf	(crcBufS_get@wantedTime+1)& (0+255),w,b
  4831  000E38  2220               	addwfc	??_crcBufS_get+1,f,c
  4832  000E3A  1E1F               	comf	??_crcBufS_get,f,c
  4833  000E3C  1E20               	comf	??_crcBufS_get+1,f,c
  4834  000E3E  4A1F               	infsnz	??_crcBufS_get,f,c
  4835  000E40  2A20               	incf	??_crcBufS_get+1,f,c
  4836  000E42  0E0F               	movlw	15
  4837  000E44  241F               	addwf	??_crcBufS_get,w,c
  4838  000E46  0100               	movlb	0	; () banked
  4839  000E48  6FD2               	movwf	crcBufS_get@wantedTime& (0+255),b
  4840  000E4A  0E00               	movlw	0
  4841  000E4C  2020               	addwfc	??_crcBufS_get+1,w,c
  4842  000E4E  0100               	movlb	0	; () banked
  4843  000E50  6FD3               	movwf	(crcBufS_get@wantedTime+1)& (0+255),b
  4844                           
  4845                           ;FastTransfer.c: 419: return (_this->buf[(wantedTime + space)]);
  4846  000E52  501E               	movf	crcBufS_get@space,w,c
  4847  000E54  0100               	movlb	0	; () banked
  4848  000E56  25D2               	addwf	crcBufS_get@wantedTime& (0+255),w,b
  4849  000E58  6E1F               	movwf	??_crcBufS_get& (0+255),c
  4850  000E5A  0E00               	movlw	0
  4851  000E5C  0100               	movlb	0	; () banked
  4852  000E5E  21D3               	addwfc	(crcBufS_get@wantedTime+1)& (0+255),w,b
  4853  000E60  6E20               	movwf	(??_crcBufS_get+1)& (0+255),c
  4854  000E62  501F               	movf	??_crcBufS_get,w,c
  4855  000E64  241B               	addwf	crcBufS_get@_this,w,c
  4856  000E66  6ED9               	movwf	fsr2l,c
  4857  000E68  5020               	movf	??_crcBufS_get+1,w,c
  4858  000E6A  201C               	addwfc	crcBufS_get@_this+1,w,c
  4859  000E6C  6EDA               	movwf	fsr2h,c
  4860  000E6E  50DF               	movf	indf2,w,c
  4861                           
  4862                           ; BSR set to: 0
  4863                           ;FastTransfer.c: 420: } else {
  4864                           
  4865                           ; BSR set to: 0
  4866  000E70  0012               	return	
  4867  000E72                     l4073:
  4868                           
  4869                           ; BSR set to: 0
  4870                           ;FastTransfer.c: 421: return (_this->buf[(_this->head - wantedTime) + space]);
  4871  000E72  EE20 F00F          	lfsr	2,15
  4872  000E76  501B               	movf	crcBufS_get@_this,w,c
  4873  000E78  26D9               	addwf	fsr2l,f,c
  4874  000E7A  501C               	movf	crcBufS_get@_this+1,w,c
  4875  000E7C  22DA               	addwfc	fsr2h,f,c
  4876  000E7E  CFDE F01F          	movff	postinc2,??_crcBufS_get
  4877  000E82  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  4878  000E86  C0D2  F021         	movff	crcBufS_get@wantedTime,??_crcBufS_get+2
  4879  000E8A  C0D3  F022         	movff	crcBufS_get@wantedTime+1,??_crcBufS_get+3
  4880  000E8E  1E21               	comf	??_crcBufS_get+2,f,c
  4881  000E90  1E22               	comf	??_crcBufS_get+3,f,c
  4882  000E92  4A21               	infsnz	??_crcBufS_get+2,f,c
  4883  000E94  2A22               	incf	??_crcBufS_get+3,f,c
  4884  000E96  501E               	movf	crcBufS_get@space,w,c
  4885  000E98  6E23               	movwf	(??_crcBufS_get+4)& (0+255),c
  4886  000E9A  6A24               	clrf	(??_crcBufS_get+5)& (0+255),c
  4887  000E9C  5021               	movf	??_crcBufS_get+2,w,c
  4888  000E9E  2623               	addwf	??_crcBufS_get+4,f,c
  4889  000EA0  5022               	movf	??_crcBufS_get+3,w,c
  4890  000EA2  2224               	addwfc	??_crcBufS_get+5,f,c
  4891  000EA4  501F               	movf	??_crcBufS_get,w,c
  4892  000EA6  2623               	addwf	??_crcBufS_get+4,f,c
  4893  000EA8  5020               	movf	??_crcBufS_get+1,w,c
  4894  000EAA  2224               	addwfc	??_crcBufS_get+5,f,c
  4895  000EAC  5023               	movf	??_crcBufS_get+4,w,c
  4896  000EAE  241B               	addwf	crcBufS_get@_this,w,c
  4897  000EB0  6ED9               	movwf	fsr2l,c
  4898  000EB2  5024               	movf	??_crcBufS_get+5,w,c
  4899  000EB4  201C               	addwfc	crcBufS_get@_this+1,w,c
  4900  000EB6  6EDA               	movwf	fsr2h,c
  4901  000EB8  50DF               	movf	indf2,w,c
  4902                           
  4903                           ; BSR set to: 0
  4904  000EBA  0012               	return	
  4905  000EBC                     __end_of_crcBufS_get:
  4906                           	opt stack 0
  4907                           tosu	equ	0xFFF
  4908                           tosh	equ	0xFFE
  4909                           tosl	equ	0xFFD
  4910                           pclath	equ	0xFFA
  4911                           tblptru	equ	0xFF8
  4912                           tblptrh	equ	0xFF7
  4913                           tblptrl	equ	0xFF6
  4914                           tablat	equ	0xFF5
  4915                           prodh	equ	0xFF4
  4916                           prodl	equ	0xFF3
  4917                           intcon	equ	0xFF2
  4918                           postinc0	equ	0xFEE
  4919                           wreg	equ	0xFE8
  4920                           postdec1	equ	0xFE5
  4921                           fsr1h	equ	0xFE2
  4922                           fsr1l	equ	0xFE1
  4923                           indf2	equ	0xFDF
  4924                           postinc2	equ	0xFDE
  4925                           postdec2	equ	0xFDD
  4926                           plusw2	equ	0xFDB
  4927                           fsr2h	equ	0xFDA
  4928                           fsr2l	equ	0xFD9
  4929                           status	equ	0xFD8
  4930                           
  4931 ;; *************** function _Receive_get *****************
  4932 ;; Defined at:
  4933 ;;		line 128 in file "UART.c"
  4934 ;; Parameters:    Size  Location     Type
  4935 ;;		None
  4936 ;; Auto vars:     Size  Location     Type
  4937 ;;		None
  4938 ;; Return value:  Size  Location     Type
  4939 ;;                  1    wreg      unsigned char 
  4940 ;; Registers used:
  4941 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4942 ;; Tracked objects:
  4943 ;;		On entry : 0/0
  4944 ;;		On exit  : 0/0
  4945 ;;		Unchanged: 0/0
  4946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4947 ;;      Params:         0       0       0       0       0       0       0
  4948 ;;      Locals:         0       0       0       0       0       0       0
  4949 ;;      Temps:          0       0       0       0       0       0       0
  4950 ;;      Totals:         0       0       0       0       0       0       0
  4951 ;;Total ram usage:        0 bytes
  4952 ;; Hardware stack levels used:    1
  4953 ;; Hardware stack levels required when called:    6
  4954 ;; This function calls:
  4955 ;;		_UART_buff_get
  4956 ;; This function is called by:
  4957 ;;		_CommsStart
  4958 ;;		_ReadCharger
  4959 ;;		_CRCcheck
  4960 ;;		_receiveData
  4961 ;; This function uses a non-reentrant model
  4962 ;;
  4963                           
  4964                           	psect	text19
  4965  00191C                     __ptext19:
  4966                           	opt stack 0
  4967  00191C                     _Receive_get:
  4968                           	opt stack 21
  4969                           
  4970                           ;UART.c: 129: return UART_buff_get(&input_buffer);
  4971                           
  4972                           ; BSR set to: 0
  4973                           ;incstack = 0
  4974  00191C  0E00               	movlw	low _input_buffer
  4975  00191E  6E21               	movwf	UART_buff_get@_this,c
  4976  001920  0E03               	movlw	high _input_buffer
  4977  001922  6E22               	movwf	UART_buff_get@_this+1,c
  4978  001924  EC35  F008         	call	_UART_buff_get	;wreg free
  4979  001928  0012               	return	
  4980  00192A                     __end_of_Receive_get:
  4981                           	opt stack 0
  4982                           tosu	equ	0xFFF
  4983                           tosh	equ	0xFFE
  4984                           tosl	equ	0xFFD
  4985                           pclath	equ	0xFFA
  4986                           tblptru	equ	0xFF8
  4987                           tblptrh	equ	0xFF7
  4988                           tblptrl	equ	0xFF6
  4989                           tablat	equ	0xFF5
  4990                           prodh	equ	0xFF4
  4991                           prodl	equ	0xFF3
  4992                           intcon	equ	0xFF2
  4993                           postinc0	equ	0xFEE
  4994                           wreg	equ	0xFE8
  4995                           postdec1	equ	0xFE5
  4996                           fsr1h	equ	0xFE2
  4997                           fsr1l	equ	0xFE1
  4998                           indf2	equ	0xFDF
  4999                           postinc2	equ	0xFDE
  5000                           postdec2	equ	0xFDD
  5001                           plusw2	equ	0xFDB
  5002                           fsr2h	equ	0xFDA
  5003                           fsr2l	equ	0xFD9
  5004                           status	equ	0xFD8
  5005                           
  5006 ;; *************** function _UART_buff_get *****************
  5007 ;; Defined at:
  5008 ;;		line 83 in file "UART.c"
  5009 ;; Parameters:    Size  Location     Type
  5010 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  5011 ;;		 -> output_buffer(206), input_buffer(206), 
  5012 ;; Auto vars:     Size  Location     Type
  5013 ;;  c               1   36[COMRAM] unsigned char 
  5014 ;; Return value:  Size  Location     Type
  5015 ;;                  1    wreg      unsigned char 
  5016 ;; Registers used:
  5017 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5018 ;; Tracked objects:
  5019 ;;		On entry : 0/0
  5020 ;;		On exit  : 0/0
  5021 ;;		Unchanged: 0/0
  5022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5023 ;;      Params:         2       0       0       0       0       0       0
  5024 ;;      Locals:         1       0       0       0       0       0       0
  5025 ;;      Temps:          2       0       0       0       0       0       0
  5026 ;;      Totals:         5       0       0       0       0       0       0
  5027 ;;Total ram usage:        5 bytes
  5028 ;; Hardware stack levels used:    1
  5029 ;; Hardware stack levels required when called:    5
  5030 ;; This function calls:
  5031 ;;		_UART_buff_modulo_inc
  5032 ;; This function is called by:
  5033 ;;		_Receive_get
  5034 ;;		_Send_put
  5035 ;; This function uses a non-reentrant model
  5036 ;;
  5037                           
  5038                           	psect	text20
  5039  00106A                     __ptext20:
  5040                           	opt stack 0
  5041  00106A                     _UART_buff_get:
  5042                           	opt stack 21
  5043                           
  5044                           ;UART.c: 84: unsigned char c;
  5045                           ;UART.c: 85: if (_this->count > 0) {
  5046                           
  5047                           ;incstack = 0
  5048  00106A  EE20 F0CC          	lfsr	2,204
  5049  00106E  5021               	movf	UART_buff_get@_this,w,c
  5050  001070  26D9               	addwf	fsr2l,f,c
  5051  001072  5022               	movf	UART_buff_get@_this+1,w,c
  5052  001074  22DA               	addwfc	fsr2h,f,c
  5053  001076  0E01               	movlw	1
  5054  001078  BEDB               	btfsc	plusw2,7,c
  5055  00107A  D03C               	goto	l4005
  5056  00107C  0E01               	movlw	1
  5057  00107E  50DB               	movf	plusw2,w,c
  5058  001080  E103               	bnz	u3860
  5059  001082  04DE               	decf	postinc2,w,c
  5060  001084  A0D8               	btfss	status,0,c
  5061  001086  D036               	goto	l4005
  5062  001088                     u3860:
  5063                           
  5064                           ;UART.c: 86: c = _this->buf[_this->tail];
  5065  001088  EE20 F0CA          	lfsr	2,202
  5066  00108C  5021               	movf	UART_buff_get@_this,w,c
  5067  00108E  26D9               	addwf	fsr2l,f,c
  5068  001090  5022               	movf	UART_buff_get@_this+1,w,c
  5069  001092  22DA               	addwfc	fsr2h,f,c
  5070  001094  CFDE F023          	movff	postinc2,??_UART_buff_get
  5071  001098  CFDD F024          	movff	postdec2,??_UART_buff_get+1
  5072  00109C  5023               	movf	??_UART_buff_get,w,c
  5073  00109E  2421               	addwf	UART_buff_get@_this,w,c
  5074  0010A0  6ED9               	movwf	fsr2l,c
  5075  0010A2  5024               	movf	??_UART_buff_get+1,w,c
  5076  0010A4  2022               	addwfc	UART_buff_get@_this+1,w,c
  5077  0010A6  6EDA               	movwf	fsr2h,c
  5078  0010A8  50DF               	movf	indf2,w,c
  5079  0010AA  6E25               	movwf	UART_buff_get@c,c
  5080                           
  5081                           ;UART.c: 87: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  5082  0010AC  EE20 F0CA          	lfsr	2,202
  5083  0010B0  5021               	movf	UART_buff_get@_this,w,c
  5084  0010B2  26D9               	addwf	fsr2l,f,c
  5085  0010B4  5022               	movf	UART_buff_get@_this+1,w,c
  5086  0010B6  22DA               	addwfc	fsr2h,f,c
  5087  0010B8  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  5088  0010BC  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  5089  0010C0  0E00               	movlw	0
  5090  0010C2  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  5091  0010C4  0EC8               	movlw	200
  5092  0010C6  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  5093  0010C8  EC9B  F00B         	call	_UART_buff_modulo_inc	;wreg free
  5094  0010CC  EE20 F0CA          	lfsr	2,202
  5095  0010D0  5021               	movf	UART_buff_get@_this,w,c
  5096  0010D2  26D9               	addwf	fsr2l,f,c
  5097  0010D4  5022               	movf	UART_buff_get@_this+1,w,c
  5098  0010D6  22DA               	addwfc	fsr2h,f,c
  5099  0010D8  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  5100  0010DC  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  5101                           
  5102                           ;UART.c: 88: --_this->count;
  5103  0010E0  EE20 F0CC          	lfsr	2,204
  5104  0010E4  5021               	movf	UART_buff_get@_this,w,c
  5105  0010E6  26D9               	addwf	fsr2l,f,c
  5106  0010E8  5022               	movf	UART_buff_get@_this+1,w,c
  5107  0010EA  22DA               	addwfc	fsr2h,f,c
  5108  0010EC  06DE               	decf	postinc2,f,c
  5109  0010EE  0E00               	movlw	0
  5110  0010F0  5ADD               	subwfb	postdec2,f,c
  5111                           
  5112                           ;UART.c: 89: } else {
  5113  0010F2  D002               	goto	l614
  5114  0010F4                     l4005:
  5115                           
  5116                           ;UART.c: 90: c = 0;
  5117  0010F4  0E00               	movlw	0
  5118  0010F6  6E25               	movwf	UART_buff_get@c,c
  5119  0010F8                     l614:
  5120                           
  5121                           ;UART.c: 91: }
  5122                           ;UART.c: 92: return (c);
  5123  0010F8  5025               	movf	UART_buff_get@c,w,c
  5124  0010FA  0012               	return	
  5125  0010FC                     __end_of_UART_buff_get:
  5126                           	opt stack 0
  5127                           tosu	equ	0xFFF
  5128                           tosh	equ	0xFFE
  5129                           tosl	equ	0xFFD
  5130                           pclath	equ	0xFFA
  5131                           tblptru	equ	0xFF8
  5132                           tblptrh	equ	0xFF7
  5133                           tblptrl	equ	0xFF6
  5134                           tablat	equ	0xFF5
  5135                           prodh	equ	0xFF4
  5136                           prodl	equ	0xFF3
  5137                           intcon	equ	0xFF2
  5138                           postinc0	equ	0xFEE
  5139                           wreg	equ	0xFE8
  5140                           postdec1	equ	0xFE5
  5141                           fsr1h	equ	0xFE2
  5142                           fsr1l	equ	0xFE1
  5143                           indf2	equ	0xFDF
  5144                           postinc2	equ	0xFDE
  5145                           postdec2	equ	0xFDD
  5146                           plusw2	equ	0xFDB
  5147                           fsr2h	equ	0xFDA
  5148                           fsr2l	equ	0xFD9
  5149                           status	equ	0xFD8
  5150                           
  5151 ;; *************** function _UART_buff_modulo_inc *****************
  5152 ;; Defined at:
  5153 ;;		line 108 in file "UART.c"
  5154 ;; Parameters:    Size  Location     Type
  5155 ;;  value           2   26[COMRAM] const unsigned int 
  5156 ;;  modulus         2   28[COMRAM] const unsigned int 
  5157 ;; Auto vars:     Size  Location     Type
  5158 ;;  my_value        2   30[COMRAM] unsigned int 
  5159 ;; Return value:  Size  Location     Type
  5160 ;;                  2   26[COMRAM] unsigned int 
  5161 ;; Registers used:
  5162 ;;		wreg, status,2, status,0
  5163 ;; Tracked objects:
  5164 ;;		On entry : 0/0
  5165 ;;		On exit  : 0/0
  5166 ;;		Unchanged: 0/0
  5167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5168 ;;      Params:         4       0       0       0       0       0       0
  5169 ;;      Locals:         2       0       0       0       0       0       0
  5170 ;;      Temps:          0       0       0       0       0       0       0
  5171 ;;      Totals:         6       0       0       0       0       0       0
  5172 ;;Total ram usage:        6 bytes
  5173 ;; Hardware stack levels used:    1
  5174 ;; Hardware stack levels required when called:    4
  5175 ;; This function calls:
  5176 ;;		Nothing
  5177 ;; This function is called by:
  5178 ;;		_UART_buff_put
  5179 ;;		_UART_buff_get
  5180 ;; This function uses a non-reentrant model
  5181 ;;
  5182                           
  5183                           	psect	text21
  5184  001736                     __ptext21:
  5185                           	opt stack 0
  5186  001736                     _UART_buff_modulo_inc:
  5187                           	opt stack 21
  5188                           
  5189                           ;UART.c: 109: unsigned int my_value = value + 1;
  5190                           
  5191                           ;incstack = 0
  5192  001736  0E01               	movlw	1
  5193  001738  241B               	addwf	UART_buff_modulo_inc@value,w,c
  5194  00173A  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  5195  00173C  0E00               	movlw	0
  5196  00173E  201C               	addwfc	UART_buff_modulo_inc@value+1,w,c
  5197  001740  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  5198                           
  5199                           ;UART.c: 110: if (my_value >= modulus) {
  5200  001742  501D               	movf	UART_buff_modulo_inc@modulus,w,c
  5201  001744  5C1F               	subwf	UART_buff_modulo_inc@my_value,w,c
  5202  001746  501E               	movf	UART_buff_modulo_inc@modulus+1,w,c
  5203  001748  5820               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  5204  00174A  A0D8               	btfss	status,0,c
  5205  00174C  D004               	goto	l3993
  5206                           
  5207                           ;UART.c: 111: my_value = 0;
  5208  00174E  0E00               	movlw	0
  5209  001750  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  5210  001752  0E00               	movlw	0
  5211  001754  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  5212  001756                     l3993:
  5213                           
  5214                           ;UART.c: 112: }
  5215                           ;UART.c: 113: return (my_value);
  5216  001756  C01F  F01B         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  5217  00175A  C020  F01C         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  5218  00175E  0012               	return	
  5219  001760                     __end_of_UART_buff_modulo_inc:
  5220                           	opt stack 0
  5221                           tosu	equ	0xFFF
  5222                           tosh	equ	0xFFE
  5223                           tosl	equ	0xFFD
  5224                           pclath	equ	0xFFA
  5225                           tblptru	equ	0xFF8
  5226                           tblptrh	equ	0xFF7
  5227                           tblptrl	equ	0xFF6
  5228                           tablat	equ	0xFF5
  5229                           prodh	equ	0xFF4
  5230                           prodl	equ	0xFF3
  5231                           intcon	equ	0xFF2
  5232                           postinc0	equ	0xFEE
  5233                           wreg	equ	0xFE8
  5234                           postdec1	equ	0xFE5
  5235                           fsr1h	equ	0xFE2
  5236                           fsr1l	equ	0xFE1
  5237                           indf2	equ	0xFDF
  5238                           postinc2	equ	0xFDE
  5239                           postdec2	equ	0xFDD
  5240                           plusw2	equ	0xFDB
  5241                           fsr2h	equ	0xFDA
  5242                           fsr2l	equ	0xFD9
  5243                           status	equ	0xFD8
  5244                           
  5245 ;; *************** function _Receive_available *****************
  5246 ;; Defined at:
  5247 ;;		line 124 in file "UART.c"
  5248 ;; Parameters:    Size  Location     Type
  5249 ;;		None
  5250 ;; Auto vars:     Size  Location     Type
  5251 ;;		None
  5252 ;; Return value:  Size  Location     Type
  5253 ;;                  2   28[COMRAM] int 
  5254 ;; Registers used:
  5255 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5256 ;; Tracked objects:
  5257 ;;		On entry : 0/0
  5258 ;;		On exit  : 0/0
  5259 ;;		Unchanged: 0/0
  5260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5261 ;;      Params:         2       0       0       0       0       0       0
  5262 ;;      Locals:         0       0       0       0       0       0       0
  5263 ;;      Temps:          0       0       0       0       0       0       0
  5264 ;;      Totals:         2       0       0       0       0       0       0
  5265 ;;Total ram usage:        2 bytes
  5266 ;; Hardware stack levels used:    1
  5267 ;; Hardware stack levels required when called:    5
  5268 ;; This function calls:
  5269 ;;		_UART_buff_size
  5270 ;; This function is called by:
  5271 ;;		_CommsStart
  5272 ;;		_ReadCharger
  5273 ;;		_CRCcheck
  5274 ;;		_receiveData
  5275 ;; This function uses a non-reentrant model
  5276 ;;
  5277                           
  5278                           	psect	text22
  5279  0018BA                     __ptext22:
  5280                           	opt stack 0
  5281  0018BA                     _Receive_available:
  5282                           	opt stack 22
  5283                           
  5284                           ;UART.c: 125: return UART_buff_size(&input_buffer);
  5285                           
  5286                           ;incstack = 0
  5287  0018BA  0E00               	movlw	low _input_buffer
  5288  0018BC  6E1B               	movwf	UART_buff_size@_this,c
  5289  0018BE  0E03               	movlw	high _input_buffer
  5290  0018C0  6E1C               	movwf	UART_buff_size@_this+1,c
  5291  0018C2  EC68  F00C         	call	_UART_buff_size	;wreg free
  5292  0018C6  C01B  F01D         	movff	?_UART_buff_size,?_Receive_available
  5293  0018CA  C01C  F01E         	movff	?_UART_buff_size+1,?_Receive_available+1
  5294  0018CE  0012               	return	
  5295  0018D0                     __end_of_Receive_available:
  5296                           	opt stack 0
  5297                           tosu	equ	0xFFF
  5298                           tosh	equ	0xFFE
  5299                           tosl	equ	0xFFD
  5300                           pclath	equ	0xFFA
  5301                           tblptru	equ	0xFF8
  5302                           tblptrh	equ	0xFF7
  5303                           tblptrl	equ	0xFF6
  5304                           tablat	equ	0xFF5
  5305                           prodh	equ	0xFF4
  5306                           prodl	equ	0xFF3
  5307                           intcon	equ	0xFF2
  5308                           postinc0	equ	0xFEE
  5309                           wreg	equ	0xFE8
  5310                           postdec1	equ	0xFE5
  5311                           fsr1h	equ	0xFE2
  5312                           fsr1l	equ	0xFE1
  5313                           indf2	equ	0xFDF
  5314                           postinc2	equ	0xFDE
  5315                           postdec2	equ	0xFDD
  5316                           plusw2	equ	0xFDB
  5317                           fsr2h	equ	0xFDA
  5318                           fsr2l	equ	0xFD9
  5319                           status	equ	0xFD8
  5320                           
  5321 ;; *************** function _UART_buff_size *****************
  5322 ;; Defined at:
  5323 ;;		line 104 in file "UART.c"
  5324 ;; Parameters:    Size  Location     Type
  5325 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  5326 ;;		 -> output_buffer(206), input_buffer(206), 
  5327 ;; Auto vars:     Size  Location     Type
  5328 ;;		None
  5329 ;; Return value:  Size  Location     Type
  5330 ;;                  2   26[COMRAM] int 
  5331 ;; Registers used:
  5332 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5333 ;; Tracked objects:
  5334 ;;		On entry : 0/0
  5335 ;;		On exit  : 0/0
  5336 ;;		Unchanged: 0/0
  5337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5338 ;;      Params:         2       0       0       0       0       0       0
  5339 ;;      Locals:         0       0       0       0       0       0       0
  5340 ;;      Temps:          0       0       0       0       0       0       0
  5341 ;;      Totals:         2       0       0       0       0       0       0
  5342 ;;Total ram usage:        2 bytes
  5343 ;; Hardware stack levels used:    1
  5344 ;; Hardware stack levels required when called:    4
  5345 ;; This function calls:
  5346 ;;		Nothing
  5347 ;; This function is called by:
  5348 ;;		_Receive_available
  5349 ;; This function uses a non-reentrant model
  5350 ;;
  5351                           
  5352                           	psect	text23
  5353  0018D0                     __ptext23:
  5354                           	opt stack 0
  5355  0018D0                     _UART_buff_size:
  5356                           	opt stack 22
  5357                           
  5358                           ;UART.c: 105: return (_this->count);
  5359                           
  5360                           ;incstack = 0
  5361  0018D0  EE20 F0CC          	lfsr	2,204
  5362  0018D4  501B               	movf	UART_buff_size@_this,w,c
  5363  0018D6  26D9               	addwf	fsr2l,f,c
  5364  0018D8  501C               	movf	UART_buff_size@_this+1,w,c
  5365  0018DA  22DA               	addwfc	fsr2h,f,c
  5366  0018DC  CFDE F01B          	movff	postinc2,?_UART_buff_size
  5367  0018E0  CFDD F01C          	movff	postdec2,?_UART_buff_size+1
  5368  0018E4  0012               	return	
  5369  0018E6                     __end_of_UART_buff_size:
  5370                           	opt stack 0
  5371                           tosu	equ	0xFFF
  5372                           tosh	equ	0xFFE
  5373                           tosl	equ	0xFFD
  5374                           pclath	equ	0xFFA
  5375                           tblptru	equ	0xFF8
  5376                           tblptrh	equ	0xFF7
  5377                           tblptrl	equ	0xFF6
  5378                           tablat	equ	0xFF5
  5379                           prodh	equ	0xFF4
  5380                           prodl	equ	0xFF3
  5381                           intcon	equ	0xFF2
  5382                           postinc0	equ	0xFEE
  5383                           wreg	equ	0xFE8
  5384                           postdec1	equ	0xFE5
  5385                           fsr1h	equ	0xFE2
  5386                           fsr1l	equ	0xFE1
  5387                           indf2	equ	0xFDF
  5388                           postinc2	equ	0xFDE
  5389                           postdec2	equ	0xFDD
  5390                           plusw2	equ	0xFDB
  5391                           fsr2h	equ	0xFDA
  5392                           fsr2l	equ	0xFD9
  5393                           status	equ	0xFD8
  5394                           
  5395 ;; *************** function _CRC8 *****************
  5396 ;; Defined at:
  5397 ;;		line 89 in file "FastTransfer.c"
  5398 ;; Parameters:    Size  Location     Type
  5399 ;;  data            2   26[COMRAM] PTR const unsigned char 
  5400 ;;		 -> CRCcheck@arrayHolder(3), receiveData@holder_1756(3), receiveData@holder(3), rx_buffer(200), 
  5401 ;;		 -> ring_buffer(206), NULL(0), 
  5402 ;;  len             1   28[COMRAM] unsigned char 
  5403 ;; Auto vars:     Size  Location     Type
  5404 ;;  sum             1   29[COMRAM] unsigned char 
  5405 ;;  tempI           1   31[COMRAM] unsigned char 
  5406 ;;  extract         1   30[COMRAM] unsigned char 
  5407 ;;  crc             1   32[COMRAM] unsigned char 
  5408 ;; Return value:  Size  Location     Type
  5409 ;;                  1    wreg      unsigned char 
  5410 ;; Registers used:
  5411 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5412 ;; Tracked objects:
  5413 ;;		On entry : 0/0
  5414 ;;		On exit  : 0/0
  5415 ;;		Unchanged: 0/0
  5416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5417 ;;      Params:         3       0       0       0       0       0       0
  5418 ;;      Locals:         4       0       0       0       0       0       0
  5419 ;;      Temps:          0       0       0       0       0       0       0
  5420 ;;      Totals:         7       0       0       0       0       0       0
  5421 ;;Total ram usage:        7 bytes
  5422 ;; Hardware stack levels used:    1
  5423 ;; Hardware stack levels required when called:    4
  5424 ;; This function calls:
  5425 ;;		Nothing
  5426 ;; This function is called by:
  5427 ;;		_sendData
  5428 ;;		_receiveData
  5429 ;;		_CRCcheck
  5430 ;; This function uses a non-reentrant model
  5431 ;;
  5432                           
  5433                           	psect	text24
  5434  00148A                     __ptext24:
  5435                           	opt stack 0
  5436  00148A                     _CRC8:
  5437                           	opt stack 22
  5438                           
  5439                           ;FastTransfer.c: 90: unsigned char crc = 0x00;
  5440                           
  5441                           ;incstack = 0
  5442  00148A  0E00               	movlw	0
  5443  00148C  6E21               	movwf	CRC8@crc,c
  5444                           
  5445                           ;FastTransfer.c: 91: while (len--) {
  5446  00148E  D01C               	goto	l4031
  5447  001490                     l4015:
  5448                           
  5449                           ;FastTransfer.c: 92: unsigned char extract = *data++;
  5450  001490  C01B  FFD9         	movff	CRC8@data,fsr2l
  5451  001494  C01C  FFDA         	movff	CRC8@data+1,fsr2h
  5452  001498  50DF               	movf	indf2,w,c
  5453  00149A  6E1F               	movwf	CRC8@extract,c
  5454  00149C  4A1B               	infsnz	CRC8@data,f,c
  5455  00149E  2A1C               	incf	CRC8@data+1,f,c
  5456                           
  5457                           ;FastTransfer.c: 93: unsigned char tempI;
  5458                           ;FastTransfer.c: 94: for (tempI = 8; tempI; tempI--) {
  5459  0014A0  0E08               	movlw	8
  5460  0014A2  6E20               	movwf	CRC8@tempI,c
  5461  0014A4  D00E               	goto	l4029
  5462  0014A6                     l4021:
  5463                           
  5464                           ;FastTransfer.c: 95: unsigned char sum = (crc ^ extract) & 0x01;
  5465  0014A6  5021               	movf	CRC8@crc,w,c
  5466  0014A8  181F               	xorwf	CRC8@extract,w,c
  5467  0014AA  0B01               	andlw	1
  5468  0014AC  6E1E               	movwf	CRC8@sum,c
  5469                           
  5470                           ;FastTransfer.c: 96: crc >>= 1;
  5471  0014AE  90D8               	bcf	status,0,c
  5472  0014B0  3221               	rrcf	CRC8@crc,f,c
  5473                           
  5474                           ;FastTransfer.c: 97: if (sum) {
  5475  0014B2  501E               	movf	CRC8@sum,w,c
  5476  0014B4  B4D8               	btfsc	status,2,c
  5477  0014B6  D002               	goto	l455
  5478                           
  5479                           ;FastTransfer.c: 98: crc ^= 0x8C;
  5480  0014B8  0E8C               	movlw	140
  5481  0014BA  1A21               	xorwf	CRC8@crc,f,c
  5482  0014BC                     l455:
  5483                           
  5484                           ;FastTransfer.c: 99: }
  5485                           ;FastTransfer.c: 100: extract >>= 1;
  5486  0014BC  90D8               	bcf	status,0,c
  5487  0014BE  321F               	rrcf	CRC8@extract,f,c
  5488  0014C0  0620               	decf	CRC8@tempI,f,c
  5489  0014C2                     l4029:
  5490  0014C2  5020               	movf	CRC8@tempI,w,c
  5491  0014C4  A4D8               	btfss	status,2,c
  5492  0014C6  D7EF               	goto	l4021
  5493  0014C8                     l4031:
  5494  0014C8  061D               	decf	CRC8@len,f,c
  5495  0014CA  281D               	incf	CRC8@len,w,c
  5496  0014CC  A4D8               	btfss	status,2,c
  5497  0014CE  D7E0               	goto	l4015
  5498                           
  5499                           ;FastTransfer.c: 101: }
  5500                           ;FastTransfer.c: 102: }
  5501                           ;FastTransfer.c: 103: return crc;
  5502  0014D0  5021               	movf	CRC8@crc,w,c
  5503  0014D2  0012               	return	
  5504  0014D4                     __end_of_CRC8:
  5505                           	opt stack 0
  5506                           tosu	equ	0xFFF
  5507                           tosh	equ	0xFFE
  5508                           tosl	equ	0xFFD
  5509                           pclath	equ	0xFFA
  5510                           tblptru	equ	0xFF8
  5511                           tblptrh	equ	0xFF7
  5512                           tblptrl	equ	0xFF6
  5513                           tablat	equ	0xFF5
  5514                           prodh	equ	0xFF4
  5515                           prodl	equ	0xFF3
  5516                           intcon	equ	0xFF2
  5517                           postinc0	equ	0xFEE
  5518                           wreg	equ	0xFE8
  5519                           postdec1	equ	0xFE5
  5520                           fsr1h	equ	0xFE2
  5521                           fsr1l	equ	0xFE1
  5522                           indf2	equ	0xFDF
  5523                           postinc2	equ	0xFDE
  5524                           postdec2	equ	0xFDD
  5525                           plusw2	equ	0xFDB
  5526                           fsr2h	equ	0xFDA
  5527                           fsr2l	equ	0xFD9
  5528                           status	equ	0xFD8
  5529                           
  5530 ;; *************** function _ToSend *****************
  5531 ;; Defined at:
  5532 ;;		line 271 in file "FastTransfer.c"
  5533 ;; Parameters:    Size  Location     Type
  5534 ;;  where           1    wreg     unsigned char 
  5535 ;;  what            2    2[BANK0 ] unsigned int 
  5536 ;; Auto vars:     Size  Location     Type
  5537 ;;  where           1    4[BANK0 ] unsigned char 
  5538 ;; Return value:  Size  Location     Type
  5539 ;;                  1    wreg      void 
  5540 ;; Registers used:
  5541 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5542 ;; Tracked objects:
  5543 ;;		On entry : 0/0
  5544 ;;		On exit  : 0/0
  5545 ;;		Unchanged: 0/0
  5546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5547 ;;      Params:         0       2       0       0       0       0       0
  5548 ;;      Locals:         0       1       0       0       0       0       0
  5549 ;;      Temps:          0       0       0       0       0       0       0
  5550 ;;      Totals:         0       3       0       0       0       0       0
  5551 ;;Total ram usage:        3 bytes
  5552 ;; Hardware stack levels used:    1
  5553 ;; Hardware stack levels required when called:    6
  5554 ;; This function calls:
  5555 ;;		_FastTransfer_buffer_put
  5556 ;; This function is called by:
  5557 ;;		_respondChargerAsECU
  5558 ;;		_SetBMM
  5559 ;; This function uses a non-reentrant model
  5560 ;;
  5561                           
  5562                           	psect	text25
  5563  001818                     __ptext25:
  5564                           	opt stack 0
  5565  001818                     _ToSend:
  5566                           	opt stack 22
  5567                           
  5568                           ;incstack = 0
  5569                           ;ToSend@where stored from wreg
  5570  001818  0100               	movlb	0	; () banked
  5571  00181A  6FD6               	movwf	ToSend@where& (0+255),b
  5572                           
  5573                           ;FastTransfer.c: 272: FastTransfer_buffer_put(&ring_buffer, where, what);
  5574  00181C  0E00               	movlw	low _ring_buffer
  5575  00181E  6E21               	movwf	FastTransfer_buffer_put@_this,c
  5576  001820  0E01               	movlw	high _ring_buffer
  5577  001822  6E22               	movwf	FastTransfer_buffer_put@_this+1,c
  5578  001824  C0D6  F023         	movff	ToSend@where,FastTransfer_buffer_put@towhere
  5579  001828  C0D4  F024         	movff	ToSend@what,FastTransfer_buffer_put@towhat
  5580  00182C  C0D5  F025         	movff	ToSend@what+1,FastTransfer_buffer_put@towhat+1
  5581  001830  ECBB  F003         	call	_FastTransfer_buffer_put	;wreg free
  5582  001834  0012               	return		;funcret
  5583  001836                     __end_of_ToSend:
  5584                           	opt stack 0
  5585                           tosu	equ	0xFFF
  5586                           tosh	equ	0xFFE
  5587                           tosl	equ	0xFFD
  5588                           pclath	equ	0xFFA
  5589                           tblptru	equ	0xFF8
  5590                           tblptrh	equ	0xFF7
  5591                           tblptrl	equ	0xFF6
  5592                           tablat	equ	0xFF5
  5593                           prodh	equ	0xFF4
  5594                           prodl	equ	0xFF3
  5595                           intcon	equ	0xFF2
  5596                           postinc0	equ	0xFEE
  5597                           wreg	equ	0xFE8
  5598                           postdec1	equ	0xFE5
  5599                           fsr1h	equ	0xFE2
  5600                           fsr1l	equ	0xFE1
  5601                           indf2	equ	0xFDF
  5602                           postinc2	equ	0xFDE
  5603                           postdec2	equ	0xFDD
  5604                           plusw2	equ	0xFDB
  5605                           fsr2h	equ	0xFDA
  5606                           fsr2l	equ	0xFD9
  5607                           status	equ	0xFD8
  5608                           
  5609 ;; *************** function _FastTransfer_buffer_put *****************
  5610 ;; Defined at:
  5611 ;;		line 278 in file "FastTransfer.c"
  5612 ;; Parameters:    Size  Location     Type
  5613 ;;  _this           2   32[COMRAM] PTR struct ringBufS
  5614 ;;		 -> ring_buffer(206), 
  5615 ;;  towhere         1   34[COMRAM] unsigned char 
  5616 ;;  towhat          2   35[COMRAM] unsigned int 
  5617 ;; Auto vars:     Size  Location     Type
  5618 ;;		None
  5619 ;; Return value:  Size  Location     Type
  5620 ;;                  1    wreg      void 
  5621 ;; Registers used:
  5622 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5623 ;; Tracked objects:
  5624 ;;		On entry : 0/0
  5625 ;;		On exit  : 0/0
  5626 ;;		Unchanged: 0/0
  5627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5628 ;;      Params:         5       0       0       0       0       0       0
  5629 ;;      Locals:         0       0       0       0       0       0       0
  5630 ;;      Temps:          0       2       0       0       0       0       0
  5631 ;;      Totals:         5       2       0       0       0       0       0
  5632 ;;Total ram usage:        7 bytes
  5633 ;; Hardware stack levels used:    1
  5634 ;; Hardware stack levels required when called:    5
  5635 ;; This function calls:
  5636 ;;		_FastTransfer_buffer_modulo_inc
  5637 ;; This function is called by:
  5638 ;;		_ToSend
  5639 ;; This function uses a non-reentrant model
  5640 ;;
  5641                           
  5642                           	psect	text26
  5643  000776                     __ptext26:
  5644                           	opt stack 0
  5645  000776                     _FastTransfer_buffer_put:
  5646                           	opt stack 22
  5647                           
  5648                           ;FastTransfer.c: 280: group.integer = towhat;
  5649                           
  5650                           ;incstack = 0
  5651  000776  C024  F02C         	movff	FastTransfer_buffer_put@towhat,_group
  5652  00077A  C025  F02D         	movff	FastTransfer_buffer_put@towhat+1,_group+1
  5653                           
  5654                           ;FastTransfer.c: 282: if (_this->count < (200 - 3)) {
  5655  00077E  EE20 F0CC          	lfsr	2,204
  5656  000782  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5657  000784  26D9               	addwf	fsr2l,f,c
  5658  000786  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5659  000788  22DA               	addwfc	fsr2h,f,c
  5660  00078A  0E01               	movlw	1
  5661  00078C  BEDB               	btfsc	plusw2,7,c
  5662  00078E  D007               	goto	l4167
  5663  000790  0E01               	movlw	1
  5664  000792  50DB               	movf	plusw2,w,c
  5665  000794  E103               	bnz	u4131
  5666  000796  0EC5               	movlw	197
  5667  000798  5CDE               	subwf	postinc2,w,c
  5668  00079A  B0D8               	btfsc	status,0,c
  5669  00079C                     u4131:
  5670  00079C  0012               	return	
  5671  00079E                     l4167:
  5672                           
  5673                           ;FastTransfer.c: 283: _this->buf[_this->head] = towhere;
  5674  00079E  EE20 F0C8          	lfsr	2,200
  5675  0007A2  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5676  0007A4  26D9               	addwf	fsr2l,f,c
  5677  0007A6  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5678  0007A8  22DA               	addwfc	fsr2h,f,c
  5679  0007AA  CFDE F0D2          	movff	postinc2,??_FastTransfer_buffer_put
  5680  0007AE  CFDD F0D3          	movff	postdec2,??_FastTransfer_buffer_put+1
  5681  0007B2  0100               	movlb	0	; () banked
  5682  0007B4  51D2               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  5683  0007B6  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  5684  0007B8  6ED9               	movwf	fsr2l,c
  5685  0007BA  0100               	movlb	0	; () banked
  5686  0007BC  51D3               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  5687  0007BE  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  5688  0007C0  6EDA               	movwf	fsr2h,c
  5689  0007C2  C023  FFDF         	movff	FastTransfer_buffer_put@towhere,indf2
  5690                           
  5691                           ; BSR set to: 0
  5692                           ;FastTransfer.c: 284: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  5693  0007C6  EE20 F0C8          	lfsr	2,200
  5694  0007CA  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5695  0007CC  26D9               	addwf	fsr2l,f,c
  5696  0007CE  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5697  0007D0  22DA               	addwfc	fsr2h,f,c
  5698  0007D2  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  5699  0007D6  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  5700  0007DA  0E00               	movlw	0
  5701  0007DC  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  5702  0007DE  0EC8               	movlw	200
  5703  0007E0  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  5704  0007E2  ECB0  F00B         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  5705  0007E6  EE20 F0C8          	lfsr	2,200
  5706  0007EA  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5707  0007EC  26D9               	addwf	fsr2l,f,c
  5708  0007EE  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5709  0007F0  22DA               	addwfc	fsr2h,f,c
  5710  0007F2  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  5711  0007F6  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  5712                           
  5713                           ;FastTransfer.c: 285: ++_this->count;
  5714  0007FA  EE20 F0CC          	lfsr	2,204
  5715  0007FE  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5716  000800  26D9               	addwf	fsr2l,f,c
  5717  000802  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5718  000804  22DA               	addwfc	fsr2h,f,c
  5719  000806  2ADE               	incf	postinc2,f,c
  5720  000808  0E00               	movlw	0
  5721  00080A  22DD               	addwfc	postdec2,f,c
  5722                           
  5723                           ;FastTransfer.c: 286: _this->buf[_this->head] = group.parts[0];
  5724  00080C  EE20 F0C8          	lfsr	2,200
  5725  000810  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5726  000812  26D9               	addwf	fsr2l,f,c
  5727  000814  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5728  000816  22DA               	addwfc	fsr2h,f,c
  5729  000818  CFDE F0D2          	movff	postinc2,??_FastTransfer_buffer_put
  5730  00081C  CFDD F0D3          	movff	postdec2,??_FastTransfer_buffer_put+1
  5731  000820  0100               	movlb	0	; () banked
  5732  000822  51D2               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  5733  000824  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  5734  000826  6ED9               	movwf	fsr2l,c
  5735  000828  0100               	movlb	0	; () banked
  5736  00082A  51D3               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  5737  00082C  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  5738  00082E  6EDA               	movwf	fsr2h,c
  5739  000830  C02C  FFDF         	movff	_group,indf2
  5740                           
  5741                           ; BSR set to: 0
  5742                           ;FastTransfer.c: 287: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  5743  000834  EE20 F0C8          	lfsr	2,200
  5744  000838  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5745  00083A  26D9               	addwf	fsr2l,f,c
  5746  00083C  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5747  00083E  22DA               	addwfc	fsr2h,f,c
  5748  000840  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  5749  000844  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  5750  000848  0E00               	movlw	0
  5751  00084A  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  5752  00084C  0EC8               	movlw	200
  5753  00084E  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  5754  000850  ECB0  F00B         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  5755  000854  EE20 F0C8          	lfsr	2,200
  5756  000858  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5757  00085A  26D9               	addwf	fsr2l,f,c
  5758  00085C  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5759  00085E  22DA               	addwfc	fsr2h,f,c
  5760  000860  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  5761  000864  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  5762                           
  5763                           ;FastTransfer.c: 288: ++_this->count;
  5764  000868  EE20 F0CC          	lfsr	2,204
  5765  00086C  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5766  00086E  26D9               	addwf	fsr2l,f,c
  5767  000870  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5768  000872  22DA               	addwfc	fsr2h,f,c
  5769  000874  2ADE               	incf	postinc2,f,c
  5770  000876  0E00               	movlw	0
  5771  000878  22DD               	addwfc	postdec2,f,c
  5772                           
  5773                           ;FastTransfer.c: 289: _this->buf[_this->head] = group.parts[1];
  5774  00087A  EE20 F0C8          	lfsr	2,200
  5775  00087E  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5776  000880  26D9               	addwf	fsr2l,f,c
  5777  000882  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5778  000884  22DA               	addwfc	fsr2h,f,c
  5779  000886  CFDE F0D2          	movff	postinc2,??_FastTransfer_buffer_put
  5780  00088A  CFDD F0D3          	movff	postdec2,??_FastTransfer_buffer_put+1
  5781  00088E  0100               	movlb	0	; () banked
  5782  000890  51D2               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  5783  000892  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  5784  000894  6ED9               	movwf	fsr2l,c
  5785  000896  0100               	movlb	0	; () banked
  5786  000898  51D3               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  5787  00089A  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  5788  00089C  6EDA               	movwf	fsr2h,c
  5789  00089E  C02D  FFDF         	movff	_group+1,indf2
  5790                           
  5791                           ; BSR set to: 0
  5792                           ;FastTransfer.c: 290: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  5793  0008A2  EE20 F0C8          	lfsr	2,200
  5794  0008A6  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5795  0008A8  26D9               	addwf	fsr2l,f,c
  5796  0008AA  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5797  0008AC  22DA               	addwfc	fsr2h,f,c
  5798  0008AE  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  5799  0008B2  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  5800  0008B6  0E00               	movlw	0
  5801  0008B8  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  5802  0008BA  0EC8               	movlw	200
  5803  0008BC  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  5804  0008BE  ECB0  F00B         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  5805  0008C2  EE20 F0C8          	lfsr	2,200
  5806  0008C6  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5807  0008C8  26D9               	addwf	fsr2l,f,c
  5808  0008CA  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5809  0008CC  22DA               	addwfc	fsr2h,f,c
  5810  0008CE  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  5811  0008D2  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  5812                           
  5813                           ;FastTransfer.c: 291: ++_this->count;
  5814  0008D6  EE20 F0CC          	lfsr	2,204
  5815  0008DA  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5816  0008DC  26D9               	addwf	fsr2l,f,c
  5817  0008DE  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5818  0008E0  22DA               	addwfc	fsr2h,f,c
  5819  0008E2  2ADE               	incf	postinc2,f,c
  5820  0008E4  0E00               	movlw	0
  5821  0008E6  22DD               	addwfc	postdec2,f,c
  5822  0008E8  0012               	return	
  5823  0008EA                     __end_of_FastTransfer_buffer_put:
  5824                           	opt stack 0
  5825                           tosu	equ	0xFFF
  5826                           tosh	equ	0xFFE
  5827                           tosl	equ	0xFFD
  5828                           pclath	equ	0xFFA
  5829                           tblptru	equ	0xFF8
  5830                           tblptrh	equ	0xFF7
  5831                           tblptrl	equ	0xFF6
  5832                           tablat	equ	0xFF5
  5833                           prodh	equ	0xFF4
  5834                           prodl	equ	0xFF3
  5835                           intcon	equ	0xFF2
  5836                           postinc0	equ	0xFEE
  5837                           wreg	equ	0xFE8
  5838                           postdec1	equ	0xFE5
  5839                           fsr1h	equ	0xFE2
  5840                           fsr1l	equ	0xFE1
  5841                           indf2	equ	0xFDF
  5842                           postinc2	equ	0xFDE
  5843                           postdec2	equ	0xFDD
  5844                           plusw2	equ	0xFDB
  5845                           fsr2h	equ	0xFDA
  5846                           fsr2l	equ	0xFD9
  5847                           status	equ	0xFD8
  5848                           
  5849 ;; *************** function _FastTransfer_buffer_modulo_inc *****************
  5850 ;; Defined at:
  5851 ;;		line 328 in file "FastTransfer.c"
  5852 ;; Parameters:    Size  Location     Type
  5853 ;;  value           2   26[COMRAM] const unsigned int 
  5854 ;;  modulus         2   28[COMRAM] const unsigned int 
  5855 ;; Auto vars:     Size  Location     Type
  5856 ;;  my_value        2   30[COMRAM] unsigned int 
  5857 ;; Return value:  Size  Location     Type
  5858 ;;                  2   26[COMRAM] unsigned int 
  5859 ;; Registers used:
  5860 ;;		wreg, status,2, status,0
  5861 ;; Tracked objects:
  5862 ;;		On entry : 0/0
  5863 ;;		On exit  : 0/0
  5864 ;;		Unchanged: 0/0
  5865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5866 ;;      Params:         4       0       0       0       0       0       0
  5867 ;;      Locals:         2       0       0       0       0       0       0
  5868 ;;      Temps:          0       0       0       0       0       0       0
  5869 ;;      Totals:         6       0       0       0       0       0       0
  5870 ;;Total ram usage:        6 bytes
  5871 ;; Hardware stack levels used:    1
  5872 ;; Hardware stack levels required when called:    4
  5873 ;; This function calls:
  5874 ;;		Nothing
  5875 ;; This function is called by:
  5876 ;;		_FastTransfer_buffer_put
  5877 ;;		_FastTransfer_buffer_get
  5878 ;; This function uses a non-reentrant model
  5879 ;;
  5880                           
  5881                           	psect	text27
  5882  001760                     __ptext27:
  5883                           	opt stack 0
  5884  001760                     _FastTransfer_buffer_modulo_inc:
  5885                           	opt stack 22
  5886                           
  5887                           ;FastTransfer.c: 329: unsigned int my_value = value + 1;
  5888                           
  5889                           ;incstack = 0
  5890  001760  0E01               	movlw	1
  5891  001762  241B               	addwf	FastTransfer_buffer_modulo_inc@value,w,c
  5892  001764  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  5893  001766  0E00               	movlw	0
  5894  001768  201C               	addwfc	FastTransfer_buffer_modulo_inc@value+1,w,c
  5895  00176A  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  5896                           
  5897                           ;FastTransfer.c: 330: if (my_value >= modulus) {
  5898  00176C  501D               	movf	FastTransfer_buffer_modulo_inc@modulus,w,c
  5899  00176E  5C1F               	subwf	FastTransfer_buffer_modulo_inc@my_value,w,c
  5900  001770  501E               	movf	FastTransfer_buffer_modulo_inc@modulus+1,w,c
  5901  001772  5820               	subwfb	FastTransfer_buffer_modulo_inc@my_value+1,w,c
  5902  001774  A0D8               	btfss	status,0,c
  5903  001776  D004               	goto	l4041
  5904                           
  5905                           ;FastTransfer.c: 331: my_value = 0;
  5906  001778  0E00               	movlw	0
  5907  00177A  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  5908  00177C  0E00               	movlw	0
  5909  00177E  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  5910  001780                     l4041:
  5911                           
  5912                           ;FastTransfer.c: 332: }
  5913                           ;FastTransfer.c: 333: return (my_value);
  5914  001780  C01F  F01B         	movff	FastTransfer_buffer_modulo_inc@my_value,?_FastTransfer_buffer_modulo_inc
  5915  001784  C020  F01C         	movff	FastTransfer_buffer_modulo_inc@my_value+1,?_FastTransfer_buffer_modulo_inc+1
  5916  001788  0012               	return	
  5917  00178A                     __end_of_FastTransfer_buffer_modulo_inc:
  5918                           	opt stack 0
  5919                           tosu	equ	0xFFF
  5920                           tosh	equ	0xFFE
  5921                           tosl	equ	0xFFD
  5922                           pclath	equ	0xFFA
  5923                           tblptru	equ	0xFF8
  5924                           tblptrh	equ	0xFF7
  5925                           tblptrl	equ	0xFF6
  5926                           tablat	equ	0xFF5
  5927                           prodh	equ	0xFF4
  5928                           prodl	equ	0xFF3
  5929                           intcon	equ	0xFF2
  5930                           postinc0	equ	0xFEE
  5931                           wreg	equ	0xFE8
  5932                           postdec1	equ	0xFE5
  5933                           fsr1h	equ	0xFE2
  5934                           fsr1l	equ	0xFE1
  5935                           indf2	equ	0xFDF
  5936                           postinc2	equ	0xFDE
  5937                           postdec2	equ	0xFDD
  5938                           plusw2	equ	0xFDB
  5939                           fsr2h	equ	0xFDA
  5940                           fsr2l	equ	0xFD9
  5941                           status	equ	0xFD8
  5942                           
  5943 ;; *************** function _Delay *****************
  5944 ;; Defined at:
  5945 ;;		line 16 in file "Functions.c"
  5946 ;; Parameters:    Size  Location     Type
  5947 ;;  wait            2   26[COMRAM] int 
  5948 ;; Auto vars:     Size  Location     Type
  5949 ;;  i               2   29[COMRAM] int 
  5950 ;; Return value:  Size  Location     Type
  5951 ;;                  1    wreg      void 
  5952 ;; Registers used:
  5953 ;;		wreg, status,2, status,0
  5954 ;; Tracked objects:
  5955 ;;		On entry : 0/0
  5956 ;;		On exit  : 0/0
  5957 ;;		Unchanged: 0/0
  5958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5959 ;;      Params:         2       0       0       0       0       0       0
  5960 ;;      Locals:         2       0       0       0       0       0       0
  5961 ;;      Temps:          1       0       0       0       0       0       0
  5962 ;;      Totals:         5       0       0       0       0       0       0
  5963 ;;Total ram usage:        5 bytes
  5964 ;; Hardware stack levels used:    1
  5965 ;; Hardware stack levels required when called:    4
  5966 ;; This function calls:
  5967 ;;		Nothing
  5968 ;; This function is called by:
  5969 ;;		_respondChargerAsECU
  5970 ;;		_SetBMM
  5971 ;;		_Precharge
  5972 ;;		_Horn
  5973 ;;		_NokiaStart
  5974 ;; This function uses a non-reentrant model
  5975 ;;
  5976                           
  5977                           	psect	text28
  5978  00158C                     __ptext28:
  5979                           	opt stack 0
  5980  00158C                     _Delay:
  5981                           	opt stack 24
  5982                           
  5983                           ;Functions.c: 17: int i = 0;
  5984                           
  5985                           ;incstack = 0
  5986  00158C  0E00               	movlw	0
  5987  00158E  6E1F               	movwf	Delay@i+1,c
  5988  001590  0E00               	movlw	0
  5989  001592  6E1E               	movwf	Delay@i,c
  5990                           
  5991                           ;Functions.c: 18: for (; wait > i; i++) {
  5992  001594  D00A               	goto	l680
  5993  001596                     l3219:
  5994                           
  5995                           ;Functions.c: 19: _delay((unsigned long)((1)*(16000000/4000.0)));
  5996  001596  0E06               	movlw	6
  5997  001598  6E1D               	movwf	??_Delay& (0+255),c
  5998  00159A  0E30               	movlw	48
  5999  00159C                     u4967:
  6000  00159C  2EE8               	decfsz	wreg,f,c
  6001  00159E  D7FE               	goto	u4967
  6002  0015A0  2E1D               	decfsz	??_Delay& (0+255),f,c
  6003  0015A2  D7FC               	goto	u4967
  6004  0015A4  D000               	nop2	
  6005  0015A6  4A1E               	infsnz	Delay@i,f,c
  6006  0015A8  2A1F               	incf	Delay@i+1,f,c
  6007  0015AA                     l680:
  6008  0015AA  501B               	movf	Delay@wait,w,c
  6009  0015AC  5C1E               	subwf	Delay@i,w,c
  6010  0015AE  501F               	movf	Delay@i+1,w,c
  6011  0015B0  0A80               	xorlw	128
  6012  0015B2  6E1D               	movwf	??_Delay& (0+255),c
  6013  0015B4  501C               	movf	Delay@wait+1,w,c
  6014  0015B6  0A80               	xorlw	128
  6015  0015B8  581D               	subwfb	??_Delay& (0+255),w,c
  6016  0015BA  B0D8               	btfsc	status,0,c
  6017  0015BC  0012               	return	
  6018  0015BE  D7EB               	goto	l3219
  6019  0015C0                     __end_of_Delay:
  6020                           	opt stack 0
  6021                           tosu	equ	0xFFF
  6022                           tosh	equ	0xFFE
  6023                           tosl	equ	0xFFD
  6024                           pclath	equ	0xFFA
  6025                           tblptru	equ	0xFF8
  6026                           tblptrh	equ	0xFF7
  6027                           tblptrl	equ	0xFF6
  6028                           tablat	equ	0xFF5
  6029                           prodh	equ	0xFF4
  6030                           prodl	equ	0xFF3
  6031                           intcon	equ	0xFF2
  6032                           postinc0	equ	0xFEE
  6033                           wreg	equ	0xFE8
  6034                           postdec1	equ	0xFE5
  6035                           fsr1h	equ	0xFE2
  6036                           fsr1l	equ	0xFE1
  6037                           indf2	equ	0xFDF
  6038                           postinc2	equ	0xFDE
  6039                           postdec2	equ	0xFDD
  6040                           plusw2	equ	0xFDB
  6041                           fsr2h	equ	0xFDA
  6042                           fsr2l	equ	0xFD9
  6043                           status	equ	0xFD8
  6044                           
  6045 ;; *************** function _SYSTEM_Initialize *****************
  6046 ;; Defined at:
  6047 ;;		line 69 in file "mcc_generated_files/mcc.c"
  6048 ;; Parameters:    Size  Location     Type
  6049 ;;		None
  6050 ;; Auto vars:     Size  Location     Type
  6051 ;;		None
  6052 ;; Return value:  Size  Location     Type
  6053 ;;                  1    wreg      void 
  6054 ;; Registers used:
  6055 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6056 ;; Tracked objects:
  6057 ;;		On entry : 0/0
  6058 ;;		On exit  : 0/0
  6059 ;;		Unchanged: 0/0
  6060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6061 ;;      Params:         0       0       0       0       0       0       0
  6062 ;;      Locals:         0       0       0       0       0       0       0
  6063 ;;      Temps:          0       0       0       0       0       0       0
  6064 ;;      Totals:         0       0       0       0       0       0       0
  6065 ;;Total ram usage:        0 bytes
  6066 ;; Hardware stack levels used:    1
  6067 ;; Hardware stack levels required when called:    8
  6068 ;; This function calls:
  6069 ;;		_CommsStart
  6070 ;;		_EUSART2_Initialize
  6071 ;;		_INTERRUPT_Initialize
  6072 ;;		_OSCILLATOR_Initialize
  6073 ;;		_PIN_MANAGER_Initialize
  6074 ;;		_TMR0_Initialize
  6075 ;; This function is called by:
  6076 ;;		_main
  6077 ;; This function uses a non-reentrant model
  6078 ;;
  6079                           
  6080                           	psect	text29
  6081  001872                     __ptext29:
  6082                           	opt stack 0
  6083  001872                     _SYSTEM_Initialize:
  6084                           	opt stack 22
  6085                           
  6086                           ;mcc.c: 70: OSCILLATOR_Initialize();
  6087                           
  6088                           ;incstack = 0
  6089  001872  EC95  F00C         	call	_OSCILLATOR_Initialize	;wreg free
  6090                           
  6091                           ;mcc.c: 71: PIN_MANAGER_Initialize();
  6092  001876  EC09  F009         	call	_PIN_MANAGER_Initialize	;wreg free
  6093                           
  6094                           ;mcc.c: 72: INTERRUPT_Initialize();
  6095  00187A  EC9C  F00C         	call	_INTERRUPT_Initialize	;wreg free
  6096                           
  6097                           ;mcc.c: 73: EUSART2_Initialize();
  6098  00187E  ECE0  F00A         	call	_EUSART2_Initialize	;wreg free
  6099                           
  6100                           ;mcc.c: 74: TMR0_Initialize();
  6101  001882  EC59  F00B         	call	_TMR0_Initialize	;wreg free
  6102                           
  6103                           ;mcc.c: 75: CommsStart();
  6104  001886  EC19  F00A         	call	_CommsStart	;wreg free
  6105  00188A  0012               	return		;funcret
  6106  00188C                     __end_of_SYSTEM_Initialize:
  6107                           	opt stack 0
  6108                           tosu	equ	0xFFF
  6109                           tosh	equ	0xFFE
  6110                           tosl	equ	0xFFD
  6111                           pclath	equ	0xFFA
  6112                           tblptru	equ	0xFF8
  6113                           tblptrh	equ	0xFF7
  6114                           tblptrl	equ	0xFF6
  6115                           tablat	equ	0xFF5
  6116                           prodh	equ	0xFF4
  6117                           prodl	equ	0xFF3
  6118                           intcon	equ	0xFF2
  6119                           postinc0	equ	0xFEE
  6120                           wreg	equ	0xFE8
  6121                           postdec1	equ	0xFE5
  6122                           fsr1h	equ	0xFE2
  6123                           fsr1l	equ	0xFE1
  6124                           indf2	equ	0xFDF
  6125                           postinc2	equ	0xFDE
  6126                           postdec2	equ	0xFDD
  6127                           plusw2	equ	0xFDB
  6128                           fsr2h	equ	0xFDA
  6129                           fsr2l	equ	0xFD9
  6130                           status	equ	0xFD8
  6131                           
  6132 ;; *************** function _TMR0_Initialize *****************
  6133 ;; Defined at:
  6134 ;;		line 69 in file "mcc_generated_files/tmr0.c"
  6135 ;; Parameters:    Size  Location     Type
  6136 ;;		None
  6137 ;; Auto vars:     Size  Location     Type
  6138 ;;		None
  6139 ;; Return value:  Size  Location     Type
  6140 ;;                  2  190[None  ] int 
  6141 ;; Registers used:
  6142 ;;		wreg, status,2, status,0, cstack
  6143 ;; Tracked objects:
  6144 ;;		On entry : 0/0
  6145 ;;		On exit  : 0/0
  6146 ;;		Unchanged: 0/0
  6147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6148 ;;      Params:         0       0       0       0       0       0       0
  6149 ;;      Locals:         0       0       0       0       0       0       0
  6150 ;;      Temps:          2       0       0       0       0       0       0
  6151 ;;      Totals:         2       0       0       0       0       0       0
  6152 ;;Total ram usage:        2 bytes
  6153 ;; Hardware stack levels used:    1
  6154 ;; Hardware stack levels required when called:    5
  6155 ;; This function calls:
  6156 ;;		_TMR0_StartTimer
  6157 ;; This function is called by:
  6158 ;;		_SYSTEM_Initialize
  6159 ;; This function uses a non-reentrant model
  6160 ;;
  6161                           
  6162                           	psect	text30
  6163  0016B2                     __ptext30:
  6164                           	opt stack 0
  6165  0016B2                     _TMR0_Initialize:
  6166                           	opt stack 24
  6167                           
  6168                           ;tmr0.c: 74: T0CON = 0x94;
  6169                           
  6170                           ;incstack = 0
  6171  0016B2  0E94               	movlw	148
  6172  0016B4  6ED5               	movwf	4053,c	;volatile
  6173                           
  6174                           ;tmr0.c: 76: TMR0H = 0xCF;
  6175  0016B6  0ECF               	movlw	207
  6176  0016B8  6ED7               	movwf	4055,c	;volatile
  6177                           
  6178                           ;tmr0.c: 78: TMR0L = 0x2C;
  6179  0016BA  0E2C               	movlw	44
  6180  0016BC  6ED6               	movwf	4054,c	;volatile
  6181                           
  6182                           ;tmr0.c: 81: timer0ReloadVal16bit = (TMR0H << 8) | TMR0L;
  6183  0016BE  50D6               	movf	4054,w,c	;volatile
  6184  0016C0  CFD7 F01B          	movff	4055,??_TMR0_Initialize	;volatile
  6185  0016C4  6A1C               	clrf	(??_TMR0_Initialize+1)& (0+255),c
  6186  0016C6  C01B  F01C         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  6187  0016CA  6A1B               	clrf	??_TMR0_Initialize,c
  6188  0016CC  101B               	iorwf	??_TMR0_Initialize,w,c
  6189  0016CE  6E40               	movwf	_timer0ReloadVal16bit,c
  6190  0016D0  501C               	movf	??_TMR0_Initialize+1,w,c
  6191  0016D2  6E41               	movwf	_timer0ReloadVal16bit+1,c
  6192                           
  6193                           ;tmr0.c: 84: INTCONbits.TMR0IF = 0;
  6194  0016D4  94F2               	bcf	intcon,2,c	;volatile
  6195                           
  6196                           ;tmr0.c: 87: INTCONbits.TMR0IE = 1;
  6197  0016D6  8AF2               	bsf	intcon,5,c	;volatile
  6198                           
  6199                           ;tmr0.c: 90: TMR0_StartTimer();
  6200  0016D8  ECA2  F00C         	call	_TMR0_StartTimer	;wreg free
  6201  0016DC  0012               	return		;funcret
  6202  0016DE                     __end_of_TMR0_Initialize:
  6203                           	opt stack 0
  6204                           tosu	equ	0xFFF
  6205                           tosh	equ	0xFFE
  6206                           tosl	equ	0xFFD
  6207                           pclath	equ	0xFFA
  6208                           tblptru	equ	0xFF8
  6209                           tblptrh	equ	0xFF7
  6210                           tblptrl	equ	0xFF6
  6211                           tablat	equ	0xFF5
  6212                           prodh	equ	0xFF4
  6213                           prodl	equ	0xFF3
  6214                           intcon	equ	0xFF2
  6215                           postinc0	equ	0xFEE
  6216                           wreg	equ	0xFE8
  6217                           postdec1	equ	0xFE5
  6218                           fsr1h	equ	0xFE2
  6219                           fsr1l	equ	0xFE1
  6220                           indf2	equ	0xFDF
  6221                           postinc2	equ	0xFDE
  6222                           postdec2	equ	0xFDD
  6223                           plusw2	equ	0xFDB
  6224                           fsr2h	equ	0xFDA
  6225                           fsr2l	equ	0xFD9
  6226                           status	equ	0xFD8
  6227                           
  6228 ;; *************** function _TMR0_StartTimer *****************
  6229 ;; Defined at:
  6230 ;;		line 93 in file "mcc_generated_files/tmr0.c"
  6231 ;; Parameters:    Size  Location     Type
  6232 ;;		None
  6233 ;; Auto vars:     Size  Location     Type
  6234 ;;		None
  6235 ;; Return value:  Size  Location     Type
  6236 ;;                  1    wreg      void 
  6237 ;; Registers used:
  6238 ;;		None
  6239 ;; Tracked objects:
  6240 ;;		On entry : 0/0
  6241 ;;		On exit  : 0/0
  6242 ;;		Unchanged: 0/0
  6243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6244 ;;      Params:         0       0       0       0       0       0       0
  6245 ;;      Locals:         0       0       0       0       0       0       0
  6246 ;;      Temps:          0       0       0       0       0       0       0
  6247 ;;      Totals:         0       0       0       0       0       0       0
  6248 ;;Total ram usage:        0 bytes
  6249 ;; Hardware stack levels used:    1
  6250 ;; Hardware stack levels required when called:    4
  6251 ;; This function calls:
  6252 ;;		Nothing
  6253 ;; This function is called by:
  6254 ;;		_TMR0_Initialize
  6255 ;; This function uses a non-reentrant model
  6256 ;;
  6257                           
  6258                           	psect	text31
  6259  001944                     __ptext31:
  6260                           	opt stack 0
  6261  001944                     _TMR0_StartTimer:
  6262                           	opt stack 24
  6263                           
  6264                           ;tmr0.c: 96: T0CONbits.TMR0ON = 1;
  6265                           
  6266                           ;incstack = 0
  6267  001944  8ED5               	bsf	4053,7,c	;volatile
  6268  001946  0012               	return		;funcret
  6269  001948                     __end_of_TMR0_StartTimer:
  6270                           	opt stack 0
  6271                           tosu	equ	0xFFF
  6272                           tosh	equ	0xFFE
  6273                           tosl	equ	0xFFD
  6274                           pclath	equ	0xFFA
  6275                           tblptru	equ	0xFF8
  6276                           tblptrh	equ	0xFF7
  6277                           tblptrl	equ	0xFF6
  6278                           tablat	equ	0xFF5
  6279                           prodh	equ	0xFF4
  6280                           prodl	equ	0xFF3
  6281                           intcon	equ	0xFF2
  6282                           postinc0	equ	0xFEE
  6283                           wreg	equ	0xFE8
  6284                           postdec1	equ	0xFE5
  6285                           fsr1h	equ	0xFE2
  6286                           fsr1l	equ	0xFE1
  6287                           indf2	equ	0xFDF
  6288                           postinc2	equ	0xFDE
  6289                           postdec2	equ	0xFDD
  6290                           plusw2	equ	0xFDB
  6291                           fsr2h	equ	0xFDA
  6292                           fsr2l	equ	0xFD9
  6293                           status	equ	0xFD8
  6294                           
  6295 ;; *************** function _PIN_MANAGER_Initialize *****************
  6296 ;; Defined at:
  6297 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  6298 ;; Parameters:    Size  Location     Type
  6299 ;;		None
  6300 ;; Auto vars:     Size  Location     Type
  6301 ;;		None
  6302 ;; Return value:  Size  Location     Type
  6303 ;;                  1    wreg      void 
  6304 ;; Registers used:
  6305 ;;		wreg, status,2
  6306 ;; Tracked objects:
  6307 ;;		On entry : 0/0
  6308 ;;		On exit  : 0/0
  6309 ;;		Unchanged: 0/0
  6310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6311 ;;      Params:         0       0       0       0       0       0       0
  6312 ;;      Locals:         0       0       0       0       0       0       0
  6313 ;;      Temps:          0       0       0       0       0       0       0
  6314 ;;      Totals:         0       0       0       0       0       0       0
  6315 ;;Total ram usage:        0 bytes
  6316 ;; Hardware stack levels used:    1
  6317 ;; Hardware stack levels required when called:    4
  6318 ;; This function calls:
  6319 ;;		Nothing
  6320 ;; This function is called by:
  6321 ;;		_SYSTEM_Initialize
  6322 ;; This function uses a non-reentrant model
  6323 ;;
  6324                           
  6325                           	psect	text32
  6326  001212                     __ptext32:
  6327                           	opt stack 0
  6328  001212                     _PIN_MANAGER_Initialize:
  6329                           	opt stack 25
  6330                           
  6331                           ;pin_manager.c: 51: LATB = 0x0;
  6332                           
  6333                           ;incstack = 0
  6334  001212  0E00               	movlw	0
  6335  001214  6E8A               	movwf	3978,c	;volatile
  6336                           
  6337                           ;pin_manager.c: 52: LATA = 0x0;
  6338  001216  0E00               	movlw	0
  6339  001218  6E89               	movwf	3977,c	;volatile
  6340                           
  6341                           ;pin_manager.c: 53: ANSELE = 0x7;
  6342  00121A  0E07               	movlw	7
  6343  00121C  010F               	movlb	15	; () banked
  6344  00121E  6F3C               	movwf	60,b	;volatile
  6345                           
  6346                           ;pin_manager.c: 54: LATE = 0x0;
  6347  001220  0E00               	movlw	0
  6348  001222  6E8D               	movwf	3981,c	;volatile
  6349                           
  6350                           ;pin_manager.c: 55: LATD = 0x0;
  6351  001224  0E00               	movlw	0
  6352  001226  6E8C               	movwf	3980,c	;volatile
  6353                           
  6354                           ;pin_manager.c: 56: LATC = 0x0;
  6355  001228  0E00               	movlw	0
  6356  00122A  6E8B               	movwf	3979,c	;volatile
  6357                           
  6358                           ;pin_manager.c: 57: ANSELA = 0x2F;
  6359  00122C  0E2F               	movlw	47
  6360  00122E  010F               	movlb	15	; () banked
  6361  001230  6F38               	movwf	56,b	;volatile
  6362                           
  6363                           ;pin_manager.c: 58: ANSELB = 0x3F;
  6364  001232  0E3F               	movlw	63
  6365  001234  010F               	movlb	15	; () banked
  6366  001236  6F39               	movwf	57,b	;volatile
  6367                           
  6368                           ;pin_manager.c: 59: ANSELC = 0xEC;
  6369  001238  0EEC               	movlw	236
  6370  00123A  010F               	movlb	15	; () banked
  6371  00123C  6F3A               	movwf	58,b	;volatile
  6372                           
  6373                           ;pin_manager.c: 60: ANSELD = 0x3F;
  6374  00123E  0E3F               	movlw	63
  6375  001240  010F               	movlb	15	; () banked
  6376  001242  6F3B               	movwf	59,b	;volatile
  6377                           
  6378                           ;pin_manager.c: 61: WPUB = 0xFC;
  6379  001244  0EFC               	movlw	252
  6380  001246  6E61               	movwf	3937,c	;volatile
  6381                           
  6382                           ;pin_manager.c: 62: TRISD = 0xF2;
  6383  001248  0EF2               	movlw	242
  6384  00124A  6E95               	movwf	3989,c	;volatile
  6385                           
  6386                           ;pin_manager.c: 63: TRISE = 0x7;
  6387  00124C  0E07               	movlw	7
  6388  00124E  6E96               	movwf	3990,c	;volatile
  6389                           
  6390                           ;pin_manager.c: 64: TRISB = 0xC4;
  6391  001250  0EC4               	movlw	196
  6392  001252  6E93               	movwf	3987,c	;volatile
  6393                           
  6394                           ;pin_manager.c: 65: TRISC = 0xD4;
  6395  001254  0ED4               	movlw	212
  6396  001256  6E94               	movwf	3988,c	;volatile
  6397                           
  6398                           ;pin_manager.c: 66: TRISA = 0x37;
  6399  001258  0E37               	movlw	55
  6400  00125A  6E92               	movwf	3986,c	;volatile
  6401                           
  6402                           ; BSR set to: 15
  6403                           ;pin_manager.c: 68: INTCON2bits.nRBPU = 0x0;
  6404  00125C  9EF1               	bcf	intcon2,7,c	;volatile
  6405                           
  6406                           ; BSR set to: 15
  6407                           
  6408                           ; BSR set to: 15
  6409                           
  6410                           ;pin_manager.c: 70: do { ANSB0 = 0; } while(0);
  6411  00125E  010F               	movlb	15	; () banked
  6412  001260  9139               	bcf	57,0,b	;volatile
  6413                           
  6414                           ; BSR set to: 15
  6415                           
  6416                           ; BSR set to: 15
  6417                           
  6418                           ;pin_manager.c: 71: do { ANSB1 = 0; } while(0);
  6419                           
  6420                           ; BSR set to: 15
  6421  001262  010F               	movlb	15	; () banked
  6422  001264  9339               	bcf	57,1,b	;volatile
  6423                           
  6424                           ; BSR set to: 15
  6425                           
  6426                           ; BSR set to: 15
  6427                           
  6428                           ;pin_manager.c: 73: do { TRISB0 = 0; } while(0);
  6429                           
  6430                           ; BSR set to: 15
  6431  001266  9093               	bcf	3987,0,c	;volatile
  6432                           
  6433                           ; BSR set to: 15
  6434                           
  6435                           ; BSR set to: 15
  6436                           
  6437                           ;pin_manager.c: 74: do { TRISB1 = 0; } while(0);
  6438                           
  6439                           ; BSR set to: 15
  6440  001268  9293               	bcf	3987,1,c	;volatile
  6441                           
  6442                           ; BSR set to: 15
  6443                           ;pin_manager.c: 78: INTCONbits.RBIE = 0;
  6444                           
  6445                           ; BSR set to: 15
  6446  00126A  96F2               	bcf	intcon,3,c	;volatile
  6447                           
  6448                           ;pin_manager.c: 80: ANSELC = 0;
  6449  00126C  0E00               	movlw	0
  6450  00126E  010F               	movlb	15	; () banked
  6451  001270  6F3A               	movwf	58,b	;volatile
  6452                           
  6453                           ;pin_manager.c: 81: ANSELA = 0;
  6454  001272  0E00               	movlw	0
  6455  001274  010F               	movlb	15	; () banked
  6456  001276  6F38               	movwf	56,b	;volatile
  6457                           
  6458                           ; BSR set to: 15
  6459                           ;pin_manager.c: 82: TRISCbits.TRISC0=0;
  6460  001278  9094               	bcf	3988,0,c	;volatile
  6461                           
  6462                           ; BSR set to: 15
  6463                           ;pin_manager.c: 83: TRISCbits.TRISC1=0;
  6464  00127A  9294               	bcf	3988,1,c	;volatile
  6465                           
  6466                           ; BSR set to: 15
  6467                           ;pin_manager.c: 84: TRISCbits.TRISC2=0;
  6468  00127C  9494               	bcf	3988,2,c	;volatile
  6469                           
  6470                           ; BSR set to: 15
  6471                           ;pin_manager.c: 85: TRISAbits.TRISA6=0;
  6472  00127E  9C92               	bcf	3986,6,c	;volatile
  6473                           
  6474                           ; BSR set to: 15
  6475                           ;pin_manager.c: 86: TRISAbits.TRISA7=0;
  6476  001280  9E92               	bcf	3986,7,c	;volatile
  6477                           
  6478                           ; BSR set to: 15
  6479                           ;pin_manager.c: 87: TRISBbits.TRISB3=0;
  6480  001282  9693               	bcf	3987,3,c	;volatile
  6481                           
  6482                           ; BSR set to: 15
  6483                           ;pin_manager.c: 88: TRISBbits.TRISB4=0;
  6484  001284  9893               	bcf	3987,4,c	;volatile
  6485                           
  6486                           ; BSR set to: 15
  6487                           ;pin_manager.c: 89: TRISBbits.TRISB5=0;
  6488  001286  9A93               	bcf	3987,5,c	;volatile
  6489                           
  6490                           ; BSR set to: 15
  6491                           ;pin_manager.c: 90: TRISDbits.TRISD4 = 0;
  6492  001288  9895               	bcf	3989,4,c	;volatile
  6493                           
  6494                           ; BSR set to: 15
  6495                           ;pin_manager.c: 92: LATBbits.LATB3=0;
  6496  00128A  968A               	bcf	3978,3,c	;volatile
  6497                           
  6498                           ; BSR set to: 15
  6499                           ;pin_manager.c: 93: LATBbits.LATB5=0;
  6500  00128C  9A8A               	bcf	3978,5,c	;volatile
  6501                           
  6502                           ; BSR set to: 15
  6503                           ;pin_manager.c: 94: LATBbits.LATB4=0;
  6504  00128E  988A               	bcf	3978,4,c	;volatile
  6505                           
  6506                           ; BSR set to: 15
  6507  001290  0012               	return		;funcret
  6508  001292                     __end_of_PIN_MANAGER_Initialize:
  6509                           	opt stack 0
  6510                           tosu	equ	0xFFF
  6511                           tosh	equ	0xFFE
  6512                           tosl	equ	0xFFD
  6513                           pclath	equ	0xFFA
  6514                           tblptru	equ	0xFF8
  6515                           tblptrh	equ	0xFF7
  6516                           tblptrl	equ	0xFF6
  6517                           tablat	equ	0xFF5
  6518                           prodh	equ	0xFF4
  6519                           prodl	equ	0xFF3
  6520                           intcon	equ	0xFF2
  6521                           intcon2	equ	0xFF1
  6522                           postinc0	equ	0xFEE
  6523                           wreg	equ	0xFE8
  6524                           postdec1	equ	0xFE5
  6525                           fsr1h	equ	0xFE2
  6526                           fsr1l	equ	0xFE1
  6527                           indf2	equ	0xFDF
  6528                           postinc2	equ	0xFDE
  6529                           postdec2	equ	0xFDD
  6530                           plusw2	equ	0xFDB
  6531                           fsr2h	equ	0xFDA
  6532                           fsr2l	equ	0xFD9
  6533                           status	equ	0xFD8
  6534                           
  6535 ;; *************** function _OSCILLATOR_Initialize *****************
  6536 ;; Defined at:
  6537 ;;		line 78 in file "mcc_generated_files/mcc.c"
  6538 ;; Parameters:    Size  Location     Type
  6539 ;;		None
  6540 ;; Auto vars:     Size  Location     Type
  6541 ;;		None
  6542 ;; Return value:  Size  Location     Type
  6543 ;;                  1    wreg      void 
  6544 ;; Registers used:
  6545 ;;		wreg, status,2
  6546 ;; Tracked objects:
  6547 ;;		On entry : 0/0
  6548 ;;		On exit  : 0/0
  6549 ;;		Unchanged: 0/0
  6550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6551 ;;      Params:         0       0       0       0       0       0       0
  6552 ;;      Locals:         0       0       0       0       0       0       0
  6553 ;;      Temps:          0       0       0       0       0       0       0
  6554 ;;      Totals:         0       0       0       0       0       0       0
  6555 ;;Total ram usage:        0 bytes
  6556 ;; Hardware stack levels used:    1
  6557 ;; Hardware stack levels required when called:    4
  6558 ;; This function calls:
  6559 ;;		Nothing
  6560 ;; This function is called by:
  6561 ;;		_SYSTEM_Initialize
  6562 ;; This function uses a non-reentrant model
  6563 ;;
  6564                           
  6565                           	psect	text33
  6566  00192A                     __ptext33:
  6567                           	opt stack 0
  6568  00192A                     _OSCILLATOR_Initialize:
  6569                           	opt stack 25
  6570                           
  6571                           ;mcc.c: 80: OSCCON = 0x70;
  6572                           
  6573                           ; BSR set to: 15
  6574                           ;incstack = 0
  6575  00192A  0E70               	movlw	112
  6576  00192C  6ED3               	movwf	4051,c	;volatile
  6577                           
  6578                           ;mcc.c: 82: OSCCON2 = 0x04;
  6579  00192E  0E04               	movlw	4
  6580  001930  6ED2               	movwf	4050,c	;volatile
  6581                           
  6582                           ;mcc.c: 84: OSCTUNE = 0x00;
  6583  001932  0E00               	movlw	0
  6584  001934  6E9B               	movwf	3995,c	;volatile
  6585  001936  0012               	return		;funcret
  6586  001938                     __end_of_OSCILLATOR_Initialize:
  6587                           	opt stack 0
  6588                           tosu	equ	0xFFF
  6589                           tosh	equ	0xFFE
  6590                           tosl	equ	0xFFD
  6591                           pclath	equ	0xFFA
  6592                           tblptru	equ	0xFF8
  6593                           tblptrh	equ	0xFF7
  6594                           tblptrl	equ	0xFF6
  6595                           tablat	equ	0xFF5
  6596                           prodh	equ	0xFF4
  6597                           prodl	equ	0xFF3
  6598                           intcon	equ	0xFF2
  6599                           intcon2	equ	0xFF1
  6600                           postinc0	equ	0xFEE
  6601                           wreg	equ	0xFE8
  6602                           postdec1	equ	0xFE5
  6603                           fsr1h	equ	0xFE2
  6604                           fsr1l	equ	0xFE1
  6605                           indf2	equ	0xFDF
  6606                           postinc2	equ	0xFDE
  6607                           postdec2	equ	0xFDD
  6608                           plusw2	equ	0xFDB
  6609                           fsr2h	equ	0xFDA
  6610                           fsr2l	equ	0xFD9
  6611                           status	equ	0xFD8
  6612                           
  6613 ;; *************** function _INTERRUPT_Initialize *****************
  6614 ;; Defined at:
  6615 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  6616 ;; Parameters:    Size  Location     Type
  6617 ;;		None
  6618 ;; Auto vars:     Size  Location     Type
  6619 ;;		None
  6620 ;; Return value:  Size  Location     Type
  6621 ;;                  1    wreg      void 
  6622 ;; Registers used:
  6623 ;;		None
  6624 ;; Tracked objects:
  6625 ;;		On entry : 0/0
  6626 ;;		On exit  : 0/0
  6627 ;;		Unchanged: 0/0
  6628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6629 ;;      Params:         0       0       0       0       0       0       0
  6630 ;;      Locals:         0       0       0       0       0       0       0
  6631 ;;      Temps:          0       0       0       0       0       0       0
  6632 ;;      Totals:         0       0       0       0       0       0       0
  6633 ;;Total ram usage:        0 bytes
  6634 ;; Hardware stack levels used:    1
  6635 ;; Hardware stack levels required when called:    4
  6636 ;; This function calls:
  6637 ;;		Nothing
  6638 ;; This function is called by:
  6639 ;;		_SYSTEM_Initialize
  6640 ;; This function uses a non-reentrant model
  6641 ;;
  6642                           
  6643                           	psect	text34
  6644  001938                     __ptext34:
  6645                           	opt stack 0
  6646  001938                     _INTERRUPT_Initialize:
  6647                           	opt stack 25
  6648                           
  6649                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  6650                           
  6651                           ;incstack = 0
  6652  001938  9ED0               	bcf	4048,7,c	;volatile
  6653                           
  6654                           ;interrupt_manager.c: 59: IPR3bits.RC2IP = 0;
  6655  00193A  9AA5               	bcf	4005,5,c	;volatile
  6656                           
  6657                           ;interrupt_manager.c: 61: IPR3bits.TX2IP = 0;
  6658  00193C  98A5               	bcf	4005,4,c	;volatile
  6659                           
  6660                           ;interrupt_manager.c: 63: IPR1bits.RC1IP = 0;
  6661  00193E  9A9F               	bcf	3999,5,c	;volatile
  6662                           
  6663                           ;interrupt_manager.c: 65: IPR1bits.TX1IP = 0;
  6664  001940  989F               	bcf	3999,4,c	;volatile
  6665  001942  0012               	return		;funcret
  6666  001944                     __end_of_INTERRUPT_Initialize:
  6667                           	opt stack 0
  6668                           tosu	equ	0xFFF
  6669                           tosh	equ	0xFFE
  6670                           tosl	equ	0xFFD
  6671                           pclath	equ	0xFFA
  6672                           tblptru	equ	0xFF8
  6673                           tblptrh	equ	0xFF7
  6674                           tblptrl	equ	0xFF6
  6675                           tablat	equ	0xFF5
  6676                           prodh	equ	0xFF4
  6677                           prodl	equ	0xFF3
  6678                           intcon	equ	0xFF2
  6679                           intcon2	equ	0xFF1
  6680                           postinc0	equ	0xFEE
  6681                           wreg	equ	0xFE8
  6682                           postdec1	equ	0xFE5
  6683                           fsr1h	equ	0xFE2
  6684                           fsr1l	equ	0xFE1
  6685                           indf2	equ	0xFDF
  6686                           postinc2	equ	0xFDE
  6687                           postdec2	equ	0xFDD
  6688                           plusw2	equ	0xFDB
  6689                           fsr2h	equ	0xFDA
  6690                           fsr2l	equ	0xFD9
  6691                           status	equ	0xFD8
  6692                           
  6693 ;; *************** function _EUSART2_Initialize *****************
  6694 ;; Defined at:
  6695 ;;		line 76 in file "mcc_generated_files/eusart2.c"
  6696 ;; Parameters:    Size  Location     Type
  6697 ;;		None
  6698 ;; Auto vars:     Size  Location     Type
  6699 ;;		None
  6700 ;; Return value:  Size  Location     Type
  6701 ;;                  1    wreg      void 
  6702 ;; Registers used:
  6703 ;;		wreg, status,2
  6704 ;; Tracked objects:
  6705 ;;		On entry : 0/0
  6706 ;;		On exit  : 0/0
  6707 ;;		Unchanged: 0/0
  6708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6709 ;;      Params:         0       0       0       0       0       0       0
  6710 ;;      Locals:         0       0       0       0       0       0       0
  6711 ;;      Temps:          0       0       0       0       0       0       0
  6712 ;;      Totals:         0       0       0       0       0       0       0
  6713 ;;Total ram usage:        0 bytes
  6714 ;; Hardware stack levels used:    1
  6715 ;; Hardware stack levels required when called:    4
  6716 ;; This function calls:
  6717 ;;		Nothing
  6718 ;; This function is called by:
  6719 ;;		_SYSTEM_Initialize
  6720 ;; This function uses a non-reentrant model
  6721 ;;
  6722                           
  6723                           	psect	text35
  6724  0015C0                     __ptext35:
  6725                           	opt stack 0
  6726  0015C0                     _EUSART2_Initialize:
  6727                           	opt stack 25
  6728                           
  6729                           ;eusart2.c: 78: PIE1bits.RC1IE = 0;
  6730                           
  6731                           ;incstack = 0
  6732  0015C0  9A9D               	bcf	3997,5,c	;volatile
  6733                           
  6734                           ;eusart2.c: 79: PIE1bits.TX1IE = 0;
  6735  0015C2  989D               	bcf	3997,4,c	;volatile
  6736                           
  6737                           ;eusart2.c: 84: BAUD1CON = 0x48;
  6738  0015C4  0E48               	movlw	72
  6739  0015C6  6EB8               	movwf	4024,c	;volatile
  6740                           
  6741                           ;eusart2.c: 87: RC1STA = 0x90;
  6742  0015C8  0E90               	movlw	144
  6743  0015CA  6EAB               	movwf	4011,c	;volatile
  6744                           
  6745                           ;eusart2.c: 90: TX1STA = 0x26;
  6746  0015CC  0E26               	movlw	38
  6747  0015CE  6EAC               	movwf	4012,c	;volatile
  6748                           
  6749                           ;eusart2.c: 93: SPBRG1 = 0x33;
  6750  0015D0  0E33               	movlw	51
  6751  0015D2  6EAF               	movwf	4015,c	;volatile
  6752                           
  6753                           ;eusart2.c: 96: SPBRGH1 = 0x00;
  6754  0015D4  0E00               	movlw	0
  6755  0015D6  6EB0               	movwf	4016,c	;volatile
  6756                           
  6757                           ;eusart2.c: 100: eusart1TxHead = 0;
  6758  0015D8  0E00               	movlw	0
  6759  0015DA  6E33               	movwf	_eusart1TxHead,c
  6760                           
  6761                           ;eusart2.c: 101: eusart1TxTail = 0;
  6762  0015DC  0E00               	movlw	0
  6763  0015DE  6E34               	movwf	_eusart1TxTail,c
  6764                           
  6765                           ;eusart2.c: 102: eusart1TxBufferRemaining = sizeof (eusart1TxBuffer);
  6766  0015E0  0E08               	movlw	8
  6767  0015E2  6E42               	movwf	_eusart1TxBufferRemaining,c	;volatile
  6768                           
  6769                           ;eusart2.c: 104: eusart1RxHead = 0;
  6770  0015E4  0E00               	movlw	0
  6771  0015E6  6E31               	movwf	_eusart1RxHead,c
  6772                           
  6773                           ;eusart2.c: 105: eusart1RxTail = 0;
  6774  0015E8  0E00               	movlw	0
  6775  0015EA  6E32               	movwf	_eusart1RxTail,c
  6776                           
  6777                           ;eusart2.c: 106: eusart1RxCount = 0;
  6778  0015EC  0E00               	movlw	0
  6779  0015EE  6E30               	movwf	_eusart1RxCount,c	;volatile
  6780                           
  6781                           ;eusart2.c: 109: PIE1bits.RC1IE = 1;
  6782  0015F0  8A9D               	bsf	3997,5,c	;volatile
  6783  0015F2  0012               	return		;funcret
  6784  0015F4                     __end_of_EUSART2_Initialize:
  6785                           	opt stack 0
  6786                           tosu	equ	0xFFF
  6787                           tosh	equ	0xFFE
  6788                           tosl	equ	0xFFD
  6789                           pclath	equ	0xFFA
  6790                           tblptru	equ	0xFF8
  6791                           tblptrh	equ	0xFF7
  6792                           tblptrl	equ	0xFF6
  6793                           tablat	equ	0xFF5
  6794                           prodh	equ	0xFF4
  6795                           prodl	equ	0xFF3
  6796                           intcon	equ	0xFF2
  6797                           intcon2	equ	0xFF1
  6798                           postinc0	equ	0xFEE
  6799                           wreg	equ	0xFE8
  6800                           postdec1	equ	0xFE5
  6801                           fsr1h	equ	0xFE2
  6802                           fsr1l	equ	0xFE1
  6803                           indf2	equ	0xFDF
  6804                           postinc2	equ	0xFDE
  6805                           postdec2	equ	0xFDD
  6806                           plusw2	equ	0xFDB
  6807                           fsr2h	equ	0xFDA
  6808                           fsr2l	equ	0xFD9
  6809                           status	equ	0xFD8
  6810                           
  6811 ;; *************** function _CommsStart *****************
  6812 ;; Defined at:
  6813 ;;		line 16 in file "Communications.c"
  6814 ;; Parameters:    Size  Location     Type
  6815 ;;		None
  6816 ;; Auto vars:     Size  Location     Type
  6817 ;;		None
  6818 ;; Return value:  Size  Location     Type
  6819 ;;                  1    wreg      void 
  6820 ;; Registers used:
  6821 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6822 ;; Tracked objects:
  6823 ;;		On entry : 0/0
  6824 ;;		On exit  : 0/0
  6825 ;;		Unchanged: 0/0
  6826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6827 ;;      Params:         0       0       0       0       0       0       0
  6828 ;;      Locals:         0       0       0       0       0       0       0
  6829 ;;      Temps:          0       0       0       0       0       0       0
  6830 ;;      Totals:         0       0       0       0       0       0       0
  6831 ;;Total ram usage:        0 bytes
  6832 ;; Hardware stack levels used:    1
  6833 ;; Hardware stack levels required when called:    7
  6834 ;; This function calls:
  6835 ;;		_EUSART1_Initialize
  6836 ;;		_begin
  6837 ;; This function is called by:
  6838 ;;		_SYSTEM_Initialize
  6839 ;; This function uses a non-reentrant model
  6840 ;;
  6841                           
  6842                           	psect	text36
  6843  001432                     __ptext36:
  6844                           	opt stack 0
  6845  001432                     _CommsStart:
  6846                           	opt stack 22
  6847                           
  6848                           ;Communications.c: 17: begin(receiveArray, sizeof (receiveArray), 1, 0, Send_put, Receiv
      +                          e_get, Receive_available, Receive_peek);
  6849                           
  6850                           ;incstack = 0
  6851  001432  0ECE               	movlw	low _receiveArray
  6852  001434  0100               	movlb	0	; () banked
  6853  001436  6FD2               	movwf	begin@ptr& (0+255),b
  6854  001438  0E01               	movlw	high _receiveArray
  6855  00143A  0100               	movlb	0	; () banked
  6856  00143C  6FD3               	movwf	(begin@ptr+1)& (0+255),b
  6857  00143E  0E32               	movlw	50
  6858  001440  0100               	movlb	0	; () banked
  6859  001442  6FD4               	movwf	begin@maxSize& (0+255),b
  6860  001444  0E01               	movlw	1
  6861  001446  0100               	movlb	0	; () banked
  6862  001448  6FD5               	movwf	begin@givenAddress& (0+255),b
  6863  00144A  0E00               	movlw	0
  6864  00144C  0100               	movlb	0	; () banked
  6865  00144E  6FD6               	movwf	begin@error& (0+255),b
  6866  001450  0E26               	movlw	low _Send_put
  6867  001452  0100               	movlb	0	; () banked
  6868  001454  6FD7               	movwf	begin@stufftosend& (0+255),b
  6869  001456  0E16               	movlw	high _Send_put
  6870  001458  0100               	movlb	0	; () banked
  6871  00145A  6FD8               	movwf	(begin@stufftosend+1)& (0+255),b
  6872  00145C  0E1C               	movlw	low _Receive_get
  6873  00145E  0100               	movlb	0	; () banked
  6874  001460  6FD9               	movwf	begin@stufftoreceive& (0+255),b
  6875  001462  0E19               	movlw	high _Receive_get
  6876  001464  0100               	movlb	0	; () banked
  6877  001466  6FDA               	movwf	(begin@stufftoreceive+1)& (0+255),b
  6878  001468  0EBA               	movlw	low _Receive_available
  6879  00146A  0100               	movlb	0	; () banked
  6880  00146C  6FDB               	movwf	begin@stuffavailable& (0+255),b
  6881  00146E  0E18               	movlw	high _Receive_available
  6882  001470  0100               	movlb	0	; () banked
  6883  001472  6FDC               	movwf	(begin@stuffavailable+1)& (0+255),b
  6884  001474  0E0E               	movlw	low _Receive_peek
  6885  001476  0100               	movlb	0	; () banked
  6886  001478  6FDD               	movwf	begin@stuffpeek& (0+255),b
  6887  00147A  0E19               	movlw	high _Receive_peek
  6888  00147C  0100               	movlb	0	; () banked
  6889  00147E  6FDE               	movwf	(begin@stuffpeek+1)& (0+255),b
  6890  001480  ECE9  F009         	call	_begin	;wreg free
  6891                           
  6892                           ;Communications.c: 18: EUSART1_Initialize();
  6893  001484  EC8C  F00A         	call	_EUSART1_Initialize	;wreg free
  6894  001488  0012               	return		;funcret
  6895  00148A                     __end_of_CommsStart:
  6896                           	opt stack 0
  6897                           tosu	equ	0xFFF
  6898                           tosh	equ	0xFFE
  6899                           tosl	equ	0xFFD
  6900                           pclath	equ	0xFFA
  6901                           tblptru	equ	0xFF8
  6902                           tblptrh	equ	0xFF7
  6903                           tblptrl	equ	0xFF6
  6904                           tablat	equ	0xFF5
  6905                           prodh	equ	0xFF4
  6906                           prodl	equ	0xFF3
  6907                           intcon	equ	0xFF2
  6908                           intcon2	equ	0xFF1
  6909                           postinc0	equ	0xFEE
  6910                           wreg	equ	0xFE8
  6911                           postdec1	equ	0xFE5
  6912                           fsr1h	equ	0xFE2
  6913                           fsr1l	equ	0xFE1
  6914                           indf2	equ	0xFDF
  6915                           postinc2	equ	0xFDE
  6916                           postdec2	equ	0xFDD
  6917                           plusw2	equ	0xFDB
  6918                           fsr2h	equ	0xFDA
  6919                           fsr2l	equ	0xFD9
  6920                           status	equ	0xFD8
  6921                           
  6922 ;; *************** function _begin *****************
  6923 ;; Defined at:
  6924 ;;		line 73 in file "FastTransfer.c"
  6925 ;; Parameters:    Size  Location     Type
  6926 ;;  ptr             2    0[BANK0 ] PTR volatile int 
  6927 ;;		 -> receiveArray(50), 
  6928 ;;  maxSize         1    2[BANK0 ] unsigned char 
  6929 ;;  givenAddress    1    3[BANK0 ] unsigned char 
  6930 ;;  error           1    4[BANK0 ] unsigned char 
  6931 ;;  stufftosend     2    5[BANK0 ] PTR FTN(unsigned char ,)
  6932 ;;		 -> Send_put(1), 
  6933 ;;  stufftorecei    2    7[BANK0 ] PTR FTN()unsigned char 
  6934 ;;		 -> Receive_get(1), 
  6935 ;;  stuffavailab    2    9[BANK0 ] PTR FTN()int 
  6936 ;;		 -> Receive_available(2), 
  6937 ;;  stuffpeek       2   11[BANK0 ] PTR FTN()unsigned char 
  6938 ;;		 -> Receive_peek(1), 
  6939 ;; Auto vars:     Size  Location     Type
  6940 ;;		None
  6941 ;; Return value:  Size  Location     Type
  6942 ;;                  1    wreg      void 
  6943 ;; Registers used:
  6944 ;;		wreg, status,2, status,0, cstack
  6945 ;; Tracked objects:
  6946 ;;		On entry : 0/0
  6947 ;;		On exit  : 0/0
  6948 ;;		Unchanged: 0/0
  6949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6950 ;;      Params:         0      13       0       0       0       0       0
  6951 ;;      Locals:         0       0       0       0       0       0       0
  6952 ;;      Temps:          0       0       0       0       0       0       0
  6953 ;;      Totals:         0      13       0       0       0       0       0
  6954 ;;Total ram usage:       13 bytes
  6955 ;; Hardware stack levels used:    1
  6956 ;; Hardware stack levels required when called:    5
  6957 ;; This function calls:
  6958 ;;		___awdiv
  6959 ;; This function is called by:
  6960 ;;		_CommsStart
  6961 ;; This function uses a non-reentrant model
  6962 ;;
  6963                           
  6964                           	psect	text37
  6965  0013D2                     __ptext37:
  6966                           	opt stack 0
  6967  0013D2                     _begin:
  6968                           	opt stack 23
  6969                           
  6970                           ;FastTransfer.c: 74: receiveArrayAddress = ptr;
  6971                           
  6972                           ;incstack = 0
  6973  0013D2  C0D2  F0ED         	movff	begin@ptr,_receiveArrayAddress
  6974  0013D6  C0D3  F0EE         	movff	begin@ptr+1,_receiveArrayAddress+1
  6975                           
  6976                           ;FastTransfer.c: 75: moduleAddress = givenAddress;
  6977  0013DA  C0D5  F043         	movff	begin@givenAddress,_moduleAddress
  6978                           
  6979                           ;FastTransfer.c: 76: serial_write = stufftosend;
  6980  0013DE  C0D7  F03E         	movff	begin@stufftosend,_serial_write
  6981  0013E2  C0D8  F03F         	movff	begin@stufftosend+1,_serial_write+1
  6982                           
  6983                           ;FastTransfer.c: 77: serial_available = stuffavailable;
  6984  0013E6  C0DB  F03A         	movff	begin@stuffavailable,_serial_available
  6985  0013EA  C0DC  F03B         	movff	begin@stuffavailable+1,_serial_available+1
  6986                           
  6987                           ;FastTransfer.c: 78: serial_peek = stuffpeek;
  6988  0013EE  C0DD  F0F1         	movff	begin@stuffpeek,_serial_peek
  6989  0013F2  C0DE  F0F2         	movff	begin@stuffpeek+1,_serial_peek+1
  6990                           
  6991                           ;FastTransfer.c: 79: serial_read = stufftoreceive;
  6992  0013F6  C0D9  F03C         	movff	begin@stufftoreceive,_serial_read
  6993  0013FA  C0DA  F03D         	movff	begin@stufftoreceive+1,_serial_read+1
  6994                           
  6995                           ;FastTransfer.c: 80: maxDataAddress = maxSize / 2;
  6996  0013FE  C0D4  F01B         	movff	begin@maxSize,___awdiv@dividend
  6997  001402  6A1C               	clrf	___awdiv@dividend+1,c
  6998  001404  0E00               	movlw	0
  6999  001406  6E1E               	movwf	___awdiv@divisor+1,c
  7000  001408  0E02               	movlw	2
  7001  00140A  6E1D               	movwf	___awdiv@divisor,c
  7002  00140C  ECC7  F008         	call	___awdiv	;wreg free
  7003  001410  501B               	movf	?___awdiv,w,c
  7004  001412  0100               	movlb	0	; () banked
  7005  001414  6FF4               	movwf	_maxDataAddress& (0+255),b
  7006                           
  7007                           ; BSR set to: 0
  7008                           ;FastTransfer.c: 81: sendStructAddress = (unsigned char*) & ring_buffer;
  7009  001416  0E00               	movlw	low _ring_buffer
  7010  001418  0100               	movlb	0	; () banked
  7011  00141A  6FEF               	movwf	_sendStructAddress& (0+255),b
  7012  00141C  0E01               	movlw	high _ring_buffer
  7013  00141E  0100               	movlb	0	; () banked
  7014  001420  6FF0               	movwf	(_sendStructAddress+1)& (0+255),b
  7015                           
  7016                           ; BSR set to: 0
  7017                           ;FastTransfer.c: 82: AKNAKsend = error;
  7018  001422  C0D6  F0F3         	movff	begin@error,_AKNAKsend
  7019                           
  7020                           ; BSR set to: 0
  7021                           ;FastTransfer.c: 83: alignErrorCounter = 0;
  7022  001426  0E00               	movlw	0
  7023  001428  0100               	movlb	0	; () banked
  7024  00142A  6F94               	movwf	(_alignErrorCounter+1)& (0+255),b
  7025  00142C  0E00               	movlw	0
  7026  00142E  6F93               	movwf	_alignErrorCounter& (0+255),b
  7027                           
  7028                           ; BSR set to: 0
  7029  001430  0012               	return		;funcret
  7030  001432                     __end_of_begin:
  7031                           	opt stack 0
  7032                           tosu	equ	0xFFF
  7033                           tosh	equ	0xFFE
  7034                           tosl	equ	0xFFD
  7035                           pclath	equ	0xFFA
  7036                           tblptru	equ	0xFF8
  7037                           tblptrh	equ	0xFF7
  7038                           tblptrl	equ	0xFF6
  7039                           tablat	equ	0xFF5
  7040                           prodh	equ	0xFF4
  7041                           prodl	equ	0xFF3
  7042                           intcon	equ	0xFF2
  7043                           intcon2	equ	0xFF1
  7044                           postinc0	equ	0xFEE
  7045                           wreg	equ	0xFE8
  7046                           postdec1	equ	0xFE5
  7047                           fsr1h	equ	0xFE2
  7048                           fsr1l	equ	0xFE1
  7049                           indf2	equ	0xFDF
  7050                           postinc2	equ	0xFDE
  7051                           postdec2	equ	0xFDD
  7052                           plusw2	equ	0xFDB
  7053                           fsr2h	equ	0xFDA
  7054                           fsr2l	equ	0xFD9
  7055                           status	equ	0xFD8
  7056                           
  7057 ;; *************** function ___awdiv *****************
  7058 ;; Defined at:
  7059 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  7060 ;; Parameters:    Size  Location     Type
  7061 ;;  dividend        2   26[COMRAM] int 
  7062 ;;  divisor         2   28[COMRAM] int 
  7063 ;; Auto vars:     Size  Location     Type
  7064 ;;  quotient        2   32[COMRAM] int 
  7065 ;;  sign            1   31[COMRAM] unsigned char 
  7066 ;;  counter         1   30[COMRAM] unsigned char 
  7067 ;; Return value:  Size  Location     Type
  7068 ;;                  2   26[COMRAM] int 
  7069 ;; Registers used:
  7070 ;;		wreg, status,2, status,0
  7071 ;; Tracked objects:
  7072 ;;		On entry : 0/0
  7073 ;;		On exit  : 0/0
  7074 ;;		Unchanged: 0/0
  7075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7076 ;;      Params:         4       0       0       0       0       0       0
  7077 ;;      Locals:         4       0       0       0       0       0       0
  7078 ;;      Temps:          0       0       0       0       0       0       0
  7079 ;;      Totals:         8       0       0       0       0       0       0
  7080 ;;Total ram usage:        8 bytes
  7081 ;; Hardware stack levels used:    1
  7082 ;; Hardware stack levels required when called:    4
  7083 ;; This function calls:
  7084 ;;		Nothing
  7085 ;; This function is called by:
  7086 ;;		_begin
  7087 ;; This function uses a non-reentrant model
  7088 ;;
  7089                           
  7090                           	psect	text38
  7091  00118E                     __ptext38:
  7092                           	opt stack 0
  7093  00118E                     ___awdiv:
  7094                           	opt stack 23
  7095                           
  7096                           ; BSR set to: 0
  7097                           ;incstack = 0
  7098  00118E  0E00               	movlw	0
  7099  001190  6E20               	movwf	___awdiv@sign,c
  7100  001192  AE1E               	btfss	___awdiv@divisor+1,7,c
  7101  001194  D006               	goto	l2947
  7102  001196  6C1D               	negf	___awdiv@divisor,c
  7103  001198  1E1E               	comf	___awdiv@divisor+1,f,c
  7104  00119A  B0D8               	btfsc	status,0,c
  7105  00119C  2A1E               	incf	___awdiv@divisor+1,f,c
  7106  00119E  0E01               	movlw	1
  7107  0011A0  6E20               	movwf	___awdiv@sign,c
  7108  0011A2                     l2947:
  7109  0011A2  AE1C               	btfss	___awdiv@dividend+1,7,c
  7110  0011A4  D006               	goto	l2953
  7111  0011A6  6C1B               	negf	___awdiv@dividend,c
  7112  0011A8  1E1C               	comf	___awdiv@dividend+1,f,c
  7113  0011AA  B0D8               	btfsc	status,0,c
  7114  0011AC  2A1C               	incf	___awdiv@dividend+1,f,c
  7115  0011AE  0E01               	movlw	1
  7116  0011B0  1A20               	xorwf	___awdiv@sign,f,c
  7117  0011B2                     l2953:
  7118  0011B2  0E00               	movlw	0
  7119  0011B4  6E22               	movwf	___awdiv@quotient+1,c
  7120  0011B6  0E00               	movlw	0
  7121  0011B8  6E21               	movwf	___awdiv@quotient,c
  7122  0011BA  501D               	movf	___awdiv@divisor,w,c
  7123  0011BC  101E               	iorwf	___awdiv@divisor+1,w,c
  7124  0011BE  B4D8               	btfsc	status,2,c
  7125  0011C0  D01C               	goto	l2975
  7126  0011C2  0E01               	movlw	1
  7127  0011C4  6E1F               	movwf	___awdiv@counter,c
  7128  0011C6  D004               	goto	l2961
  7129  0011C8                     l2959:
  7130  0011C8  90D8               	bcf	status,0,c
  7131  0011CA  361D               	rlcf	___awdiv@divisor,f,c
  7132  0011CC  361E               	rlcf	___awdiv@divisor+1,f,c
  7133  0011CE  2A1F               	incf	___awdiv@counter,f,c
  7134  0011D0                     l2961:
  7135  0011D0  AE1E               	btfss	___awdiv@divisor+1,7,c
  7136  0011D2  D7FA               	goto	l2959
  7137  0011D4                     l2963:
  7138  0011D4  90D8               	bcf	status,0,c
  7139  0011D6  3621               	rlcf	___awdiv@quotient,f,c
  7140  0011D8  3622               	rlcf	___awdiv@quotient+1,f,c
  7141  0011DA  501D               	movf	___awdiv@divisor,w,c
  7142  0011DC  5C1B               	subwf	___awdiv@dividend,w,c
  7143  0011DE  501E               	movf	___awdiv@divisor+1,w,c
  7144  0011E0  581C               	subwfb	___awdiv@dividend+1,w,c
  7145  0011E2  A0D8               	btfss	status,0,c
  7146  0011E4  D005               	goto	l2971
  7147  0011E6  501D               	movf	___awdiv@divisor,w,c
  7148  0011E8  5E1B               	subwf	___awdiv@dividend,f,c
  7149  0011EA  501E               	movf	___awdiv@divisor+1,w,c
  7150  0011EC  5A1C               	subwfb	___awdiv@dividend+1,f,c
  7151  0011EE  8021               	bsf	___awdiv@quotient,0,c
  7152  0011F0                     l2971:
  7153  0011F0  90D8               	bcf	status,0,c
  7154  0011F2  321E               	rrcf	___awdiv@divisor+1,f,c
  7155  0011F4  321D               	rrcf	___awdiv@divisor,f,c
  7156  0011F6  2E1F               	decfsz	___awdiv@counter,f,c
  7157  0011F8  D7ED               	goto	l2963
  7158  0011FA                     l2975:
  7159  0011FA  5020               	movf	___awdiv@sign,w,c
  7160  0011FC  B4D8               	btfsc	status,2,c
  7161  0011FE  D004               	goto	l2979
  7162  001200  6C21               	negf	___awdiv@quotient,c
  7163  001202  1E22               	comf	___awdiv@quotient+1,f,c
  7164  001204  B0D8               	btfsc	status,0,c
  7165  001206  2A22               	incf	___awdiv@quotient+1,f,c
  7166  001208                     l2979:
  7167  001208  C021  F01B         	movff	___awdiv@quotient,?___awdiv
  7168  00120C  C022  F01C         	movff	___awdiv@quotient+1,?___awdiv+1
  7169  001210  0012               	return	
  7170  001212                     __end_of___awdiv:
  7171                           	opt stack 0
  7172                           tosu	equ	0xFFF
  7173                           tosh	equ	0xFFE
  7174                           tosl	equ	0xFFD
  7175                           pclath	equ	0xFFA
  7176                           tblptru	equ	0xFF8
  7177                           tblptrh	equ	0xFF7
  7178                           tblptrl	equ	0xFF6
  7179                           tablat	equ	0xFF5
  7180                           prodh	equ	0xFF4
  7181                           prodl	equ	0xFF3
  7182                           intcon	equ	0xFF2
  7183                           intcon2	equ	0xFF1
  7184                           postinc0	equ	0xFEE
  7185                           wreg	equ	0xFE8
  7186                           postdec1	equ	0xFE5
  7187                           fsr1h	equ	0xFE2
  7188                           fsr1l	equ	0xFE1
  7189                           indf2	equ	0xFDF
  7190                           postinc2	equ	0xFDE
  7191                           postdec2	equ	0xFDD
  7192                           plusw2	equ	0xFDB
  7193                           fsr2h	equ	0xFDA
  7194                           fsr2l	equ	0xFD9
  7195                           status	equ	0xFD8
  7196                           
  7197 ;; *************** function _EUSART1_Initialize *****************
  7198 ;; Defined at:
  7199 ;;		line 23 in file "UART.c"
  7200 ;; Parameters:    Size  Location     Type
  7201 ;;		None
  7202 ;; Auto vars:     Size  Location     Type
  7203 ;;		None
  7204 ;; Return value:  Size  Location     Type
  7205 ;;                  1    wreg      void 
  7206 ;; Registers used:
  7207 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7208 ;; Tracked objects:
  7209 ;;		On entry : 0/0
  7210 ;;		On exit  : 0/0
  7211 ;;		Unchanged: 0/0
  7212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7213 ;;      Params:         0       0       0       0       0       0       0
  7214 ;;      Locals:         0       0       0       0       0       0       0
  7215 ;;      Temps:          0       0       0       0       0       0       0
  7216 ;;      Totals:         0       0       0       0       0       0       0
  7217 ;;Total ram usage:        0 bytes
  7218 ;; Hardware stack levels used:    1
  7219 ;; Hardware stack levels required when called:    6
  7220 ;; This function calls:
  7221 ;;		_UART_buff_init
  7222 ;; This function is called by:
  7223 ;;		_CommsStart
  7224 ;; This function uses a non-reentrant model
  7225 ;;
  7226                           
  7227                           	psect	text39
  7228  001518                     __ptext39:
  7229                           	opt stack 0
  7230  001518                     _EUSART1_Initialize:
  7231                           	opt stack 22
  7232                           
  7233                           ;UART.c: 25: PIE3bits.RC2IE = 0;
  7234                           
  7235                           ;incstack = 0
  7236  001518  9AA3               	bcf	4003,5,c	;volatile
  7237                           
  7238                           ;UART.c: 26: PIE3bits.TX2IE = 0;
  7239  00151A  98A3               	bcf	4003,4,c	;volatile
  7240                           
  7241                           ;UART.c: 31: BAUD2CON = 0x48;
  7242  00151C  0E48               	movlw	72
  7243  00151E  6E70               	movwf	3952,c	;volatile
  7244                           
  7245                           ;UART.c: 34: RC2STA = 0x98;
  7246  001520  0E98               	movlw	152
  7247  001522  6E71               	movwf	3953,c	;volatile
  7248                           
  7249                           ;UART.c: 37: TX2STA = 0x26;
  7250  001524  0E26               	movlw	38
  7251  001526  6E72               	movwf	3954,c	;volatile
  7252                           
  7253                           ;UART.c: 40: SPBRG2 = (((16000000/38400)/4)-1);
  7254  001528  0E67               	movlw	103
  7255  00152A  6E75               	movwf	3957,c	;volatile
  7256                           
  7257                           ;UART.c: 43: SPBRGH2 = 0x00;
  7258  00152C  0E00               	movlw	0
  7259  00152E  6E76               	movwf	3958,c	;volatile
  7260                           
  7261                           ;UART.c: 46: TXREG2 = 0x00;
  7262  001530  0E00               	movlw	0
  7263  001532  6E73               	movwf	3955,c	;volatile
  7264                           
  7265                           ;UART.c: 49: RCREG2 = 0x00;
  7266  001534  0E00               	movlw	0
  7267  001536  6E74               	movwf	3956,c	;volatile
  7268                           
  7269                           ;UART.c: 51: UART_buff_init(&input_buffer);
  7270  001538  0E00               	movlw	low _input_buffer
  7271  00153A  6E23               	movwf	UART_buff_init@_this,c
  7272  00153C  0E03               	movlw	high _input_buffer
  7273  00153E  6E24               	movwf	UART_buff_init@_this+1,c
  7274  001540  EC1B  F00C         	call	_UART_buff_init	;wreg free
  7275                           
  7276                           ;UART.c: 52: UART_buff_init(&output_buffer);
  7277  001544  0E00               	movlw	low _output_buffer
  7278  001546  6E23               	movwf	UART_buff_init@_this,c
  7279  001548  0E04               	movlw	high _output_buffer
  7280  00154A  6E24               	movwf	UART_buff_init@_this+1,c
  7281  00154C  EC1B  F00C         	call	_UART_buff_init	;wreg free
  7282                           
  7283                           ;UART.c: 54: PIE3bits.RC2IE = 1;
  7284  001550  8AA3               	bsf	4003,5,c	;volatile
  7285  001552  0012               	return		;funcret
  7286  001554                     __end_of_EUSART1_Initialize:
  7287                           	opt stack 0
  7288                           tosu	equ	0xFFF
  7289                           tosh	equ	0xFFE
  7290                           tosl	equ	0xFFD
  7291                           pclath	equ	0xFFA
  7292                           tblptru	equ	0xFF8
  7293                           tblptrh	equ	0xFF7
  7294                           tblptrl	equ	0xFF6
  7295                           tablat	equ	0xFF5
  7296                           prodh	equ	0xFF4
  7297                           prodl	equ	0xFF3
  7298                           intcon	equ	0xFF2
  7299                           intcon2	equ	0xFF1
  7300                           postinc0	equ	0xFEE
  7301                           wreg	equ	0xFE8
  7302                           postdec1	equ	0xFE5
  7303                           fsr1h	equ	0xFE2
  7304                           fsr1l	equ	0xFE1
  7305                           indf2	equ	0xFDF
  7306                           postinc2	equ	0xFDE
  7307                           postdec2	equ	0xFDD
  7308                           plusw2	equ	0xFDB
  7309                           fsr2h	equ	0xFDA
  7310                           fsr2l	equ	0xFD9
  7311                           status	equ	0xFD8
  7312                           
  7313 ;; *************** function _UART_buff_init *****************
  7314 ;; Defined at:
  7315 ;;		line 58 in file "UART.c"
  7316 ;; Parameters:    Size  Location     Type
  7317 ;;  _this           2   34[COMRAM] PTR struct UART_ring_buf
  7318 ;;		 -> output_buffer(206), input_buffer(206), 
  7319 ;; Auto vars:     Size  Location     Type
  7320 ;;		None
  7321 ;; Return value:  Size  Location     Type
  7322 ;;                  1    wreg      void 
  7323 ;; Registers used:
  7324 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7325 ;; Tracked objects:
  7326 ;;		On entry : 0/0
  7327 ;;		On exit  : 0/0
  7328 ;;		Unchanged: 0/0
  7329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7330 ;;      Params:         2       0       0       0       0       0       0
  7331 ;;      Locals:         0       0       0       0       0       0       0
  7332 ;;      Temps:          0       0       0       0       0       0       0
  7333 ;;      Totals:         2       0       0       0       0       0       0
  7334 ;;Total ram usage:        2 bytes
  7335 ;; Hardware stack levels used:    1
  7336 ;; Hardware stack levels required when called:    5
  7337 ;; This function calls:
  7338 ;;		_memset
  7339 ;; This function is called by:
  7340 ;;		_EUSART1_Initialize
  7341 ;; This function uses a non-reentrant model
  7342 ;;
  7343                           
  7344                           	psect	text40
  7345  001836                     __ptext40:
  7346                           	opt stack 0
  7347  001836                     _UART_buff_init:
  7348                           	opt stack 22
  7349                           
  7350                           ;UART.c: 67: memset(_this, 0, sizeof (*_this));
  7351                           
  7352                           ;incstack = 0
  7353  001836  C023  F01B         	movff	UART_buff_init@_this,memset@p1
  7354  00183A  C024  F01C         	movff	UART_buff_init@_this+1,memset@p1+1
  7355  00183E  0E00               	movlw	0
  7356  001840  6E1E               	movwf	memset@c+1,c
  7357  001842  0E00               	movlw	0
  7358  001844  6E1D               	movwf	memset@c,c
  7359  001846  0E00               	movlw	0
  7360  001848  6E20               	movwf	memset@n+1,c
  7361  00184A  0ECE               	movlw	206
  7362  00184C  6E1F               	movwf	memset@n,c
  7363  00184E  EC6F  F00B         	call	_memset	;wreg free
  7364  001852  0012               	return		;funcret
  7365  001854                     __end_of_UART_buff_init:
  7366                           	opt stack 0
  7367                           tosu	equ	0xFFF
  7368                           tosh	equ	0xFFE
  7369                           tosl	equ	0xFFD
  7370                           pclath	equ	0xFFA
  7371                           tblptru	equ	0xFF8
  7372                           tblptrh	equ	0xFF7
  7373                           tblptrl	equ	0xFF6
  7374                           tablat	equ	0xFF5
  7375                           prodh	equ	0xFF4
  7376                           prodl	equ	0xFF3
  7377                           intcon	equ	0xFF2
  7378                           intcon2	equ	0xFF1
  7379                           postinc0	equ	0xFEE
  7380                           wreg	equ	0xFE8
  7381                           postdec1	equ	0xFE5
  7382                           fsr1h	equ	0xFE2
  7383                           fsr1l	equ	0xFE1
  7384                           indf2	equ	0xFDF
  7385                           postinc2	equ	0xFDE
  7386                           postdec2	equ	0xFDD
  7387                           plusw2	equ	0xFDB
  7388                           fsr2h	equ	0xFDA
  7389                           fsr2l	equ	0xFD9
  7390                           status	equ	0xFD8
  7391                           
  7392 ;; *************** function _memset *****************
  7393 ;; Defined at:
  7394 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memset.c"
  7395 ;; Parameters:    Size  Location     Type
  7396 ;;  p1              2   26[COMRAM] PTR void 
  7397 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  7398 ;;  c               2   28[COMRAM] int 
  7399 ;;  n               2   30[COMRAM] unsigned int 
  7400 ;; Auto vars:     Size  Location     Type
  7401 ;;  p               2   32[COMRAM] PTR unsigned char 
  7402 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  7403 ;; Return value:  Size  Location     Type
  7404 ;;                  2   26[COMRAM] PTR void 
  7405 ;; Registers used:
  7406 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7407 ;; Tracked objects:
  7408 ;;		On entry : 0/0
  7409 ;;		On exit  : 0/0
  7410 ;;		Unchanged: 0/0
  7411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7412 ;;      Params:         6       0       0       0       0       0       0
  7413 ;;      Locals:         2       0       0       0       0       0       0
  7414 ;;      Temps:          0       0       0       0       0       0       0
  7415 ;;      Totals:         8       0       0       0       0       0       0
  7416 ;;Total ram usage:        8 bytes
  7417 ;; Hardware stack levels used:    1
  7418 ;; Hardware stack levels required when called:    4
  7419 ;; This function calls:
  7420 ;;		Nothing
  7421 ;; This function is called by:
  7422 ;;		_FastTransfer_buffer_flush
  7423 ;;		_UART_buff_init
  7424 ;;		_UART_buff_flush
  7425 ;; This function uses a non-reentrant model
  7426 ;;
  7427                           
  7428                           	psect	text41
  7429  0016DE                     __ptext41:
  7430                           	opt stack 0
  7431  0016DE                     _memset:
  7432                           	opt stack 22
  7433                           
  7434                           ;incstack = 0
  7435  0016DE  C01B  F021         	movff	memset@p1,memset@p
  7436  0016E2  C01C  F022         	movff	memset@p1+1,memset@p+1
  7437  0016E6  D008               	goto	l4051
  7438  0016E8                     l4047:
  7439  0016E8  C021  FFD9         	movff	memset@p,fsr2l
  7440  0016EC  C022  FFDA         	movff	memset@p+1,fsr2h
  7441  0016F0  C01D  FFDF         	movff	memset@c,indf2
  7442  0016F4  4A21               	infsnz	memset@p,f,c
  7443  0016F6  2A22               	incf	memset@p+1,f,c
  7444  0016F8                     l4051:
  7445  0016F8  061F               	decf	memset@n,f,c
  7446  0016FA  A0D8               	btfss	status,0,c
  7447  0016FC  0620               	decf	memset@n+1,f,c
  7448  0016FE  281F               	incf	memset@n,w,c
  7449  001700  E1F3               	bnz	l4047
  7450  001702  2820               	incf	memset@n+1,w,c
  7451  001704  B4D8               	btfsc	status,2,c
  7452  001706  0012               	return	
  7453  001708  D7EF               	goto	l4047
  7454  00170A                     __end_of_memset:
  7455                           	opt stack 0
  7456                           tosu	equ	0xFFF
  7457                           tosh	equ	0xFFE
  7458                           tosl	equ	0xFFD
  7459                           pclath	equ	0xFFA
  7460                           tblptru	equ	0xFF8
  7461                           tblptrh	equ	0xFF7
  7462                           tblptrl	equ	0xFF6
  7463                           tablat	equ	0xFF5
  7464                           prodh	equ	0xFF4
  7465                           prodl	equ	0xFF3
  7466                           intcon	equ	0xFF2
  7467                           intcon2	equ	0xFF1
  7468                           postinc0	equ	0xFEE
  7469                           wreg	equ	0xFE8
  7470                           postdec1	equ	0xFE5
  7471                           fsr1h	equ	0xFE2
  7472                           fsr1l	equ	0xFE1
  7473                           indf2	equ	0xFDF
  7474                           postinc2	equ	0xFDE
  7475                           postdec2	equ	0xFDD
  7476                           plusw2	equ	0xFDB
  7477                           fsr2h	equ	0xFDA
  7478                           fsr2l	equ	0xFD9
  7479                           status	equ	0xFD8
  7480                           
  7481 ;; *************** function _INTERRUPT_InterruptManager *****************
  7482 ;; Defined at:
  7483 ;;		line 68 in file "mcc_generated_files/interrupt_manager.c"
  7484 ;; Parameters:    Size  Location     Type
  7485 ;;		None
  7486 ;; Auto vars:     Size  Location     Type
  7487 ;;		None
  7488 ;; Return value:  Size  Location     Type
  7489 ;;                  1    wreg      void 
  7490 ;; Registers used:
  7491 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7492 ;; Tracked objects:
  7493 ;;		On entry : 0/0
  7494 ;;		On exit  : 0/0
  7495 ;;		Unchanged: 0/0
  7496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7497 ;;      Params:         0       0       0       0       0       0       0
  7498 ;;      Locals:         0       0       0       0       0       0       0
  7499 ;;      Temps:         14       0       0       0       0       0       0
  7500 ;;      Totals:        14       0       0       0       0       0       0
  7501 ;;Total ram usage:       14 bytes
  7502 ;; Hardware stack levels used:    1
  7503 ;; Hardware stack levels required when called:    3
  7504 ;; This function calls:
  7505 ;;		_EUSART1_Receive_ISR
  7506 ;;		_EUSART1_Transmit_ISR
  7507 ;;		_EUSART2_Receive_ISR
  7508 ;;		_EUSART2_Transmit_ISR
  7509 ;;		_TMR0_ISR
  7510 ;; This function is called by:
  7511 ;;		Interrupt level 2
  7512 ;; This function uses a non-reentrant model
  7513 ;;
  7514                           
  7515                           	psect	intcode
  7516  000008                     __pintcode:
  7517                           	opt stack 0
  7518  000008                     _INTERRUPT_InterruptManager:
  7519                           	opt stack 20
  7520                           
  7521                           ;incstack = 0
  7522  000008  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7523  00000A  CFFA F00D          	movff	pclath,??_INTERRUPT_InterruptManager
  7524  00000E  CFFB F00E          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  7525  000012  CFE9 F00F          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  7526  000016  CFEA F010          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  7527  00001A  CFE1 F011          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  7528  00001E  CFE2 F012          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  7529  000022  CFD9 F013          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  7530  000026  CFDA F014          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  7531  00002A  CFF3 F015          	movff	prodl,??_INTERRUPT_InterruptManager+8
  7532  00002E  CFF4 F016          	movff	prodh,??_INTERRUPT_InterruptManager+9
  7533  000032  CFF6 F017          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  7534  000036  CFF7 F018          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  7535  00003A  CFF8 F019          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  7536  00003E  CFF5 F01A          	movff	tablat,??_INTERRUPT_InterruptManager+13
  7537                           
  7538                           ;interrupt_manager.c: 70: if (PIE3bits.RC2IE == 1 && PIR3bits.RC2IF == 1) {
  7539  000042  BAA3               	btfsc	4003,5,c	;volatile
  7540  000044  AAA4               	btfss	4004,5,c	;volatile
  7541  000046  D003               	goto	i2l170
  7542                           
  7543                           ;interrupt_manager.c: 71: EUSART2_Receive_ISR();
  7544  000048  EC2A  F00C         	call	_EUSART2_Receive_ISR	;wreg free
  7545                           
  7546                           ;interrupt_manager.c: 72: } else if (PIE3bits.TX2IE == 1 && PIR3bits.TX2IF == 1) {
  7547  00004C  D017               	goto	i2l180
  7548  00004E                     i2l170:
  7549  00004E  B8A3               	btfsc	4003,4,c	;volatile
  7550  000050  A8A4               	btfss	4004,4,c	;volatile
  7551  000052  D003               	goto	i2l172
  7552                           
  7553                           ;interrupt_manager.c: 73: EUSART2_Transmit_ISR();
  7554  000054  ECFA  F00A         	call	_EUSART2_Transmit_ISR	;wreg free
  7555                           
  7556                           ;interrupt_manager.c: 74: } else if (PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1) {
  7557  000058  D011               	goto	i2l180
  7558  00005A                     i2l172:
  7559  00005A  BA9D               	btfsc	3997,5,c	;volatile
  7560  00005C  AA9E               	btfss	3998,5,c	;volatile
  7561  00005E  D003               	goto	i2l174
  7562                           
  7563                           ;interrupt_manager.c: 75: EUSART1_Receive_ISR();
  7564  000060  EC85  F00B         	call	_EUSART1_Receive_ISR	;wreg free
  7565                           
  7566                           ;interrupt_manager.c: 76: } else if (PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1) {
  7567  000064  D00B               	goto	i2l180
  7568  000066                     i2l174:
  7569  000066  B89D               	btfsc	3997,4,c	;volatile
  7570  000068  A89E               	btfss	3998,4,c	;volatile
  7571  00006A  D003               	goto	i2l176
  7572                           
  7573                           ;interrupt_manager.c: 77: EUSART1_Transmit_ISR();
  7574  00006C  EC42  F00B         	call	_EUSART1_Transmit_ISR	;wreg free
  7575                           
  7576                           ;interrupt_manager.c: 78: } else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1) {
  7577  000070  D005               	goto	i2l180
  7578  000072                     i2l176:
  7579  000072  BAF2               	btfsc	intcon,5,c	;volatile
  7580  000074  A4F2               	btfss	intcon,2,c	;volatile
  7581  000076  D002               	goto	i2l180
  7582                           
  7583                           ;interrupt_manager.c: 79: TMR0_ISR();
  7584  000078  EC46  F00C         	call	_TMR0_ISR	;wreg free
  7585  00007C                     i2l180:
  7586  00007C  C01A  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  7587  000080  C019  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  7588  000084  C018  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  7589  000088  C017  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  7590  00008C  C016  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  7591  000090  C015  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  7592  000094  C014  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  7593  000098  C013  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  7594  00009C  C012  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  7595  0000A0  C011  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  7596  0000A4  C010  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  7597  0000A8  C00F  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  7598  0000AC  C00E  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  7599  0000B0  C00D  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  7600  0000B4  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7601  0000B6  0011               	retfie		f
  7602  0000B8                     __end_of_INTERRUPT_InterruptManager:
  7603                           	opt stack 0
  7604                           tosu	equ	0xFFF
  7605                           tosh	equ	0xFFE
  7606                           tosl	equ	0xFFD
  7607                           pclatu	equ	0xFFB
  7608                           pclath	equ	0xFFA
  7609                           tblptru	equ	0xFF8
  7610                           tblptrh	equ	0xFF7
  7611                           tblptrl	equ	0xFF6
  7612                           tablat	equ	0xFF5
  7613                           prodh	equ	0xFF4
  7614                           prodl	equ	0xFF3
  7615                           intcon	equ	0xFF2
  7616                           intcon2	equ	0xFF1
  7617                           postinc0	equ	0xFEE
  7618                           fsr0h	equ	0xFEA
  7619                           fsr0l	equ	0xFE9
  7620                           wreg	equ	0xFE8
  7621                           postdec1	equ	0xFE5
  7622                           fsr1h	equ	0xFE2
  7623                           fsr1l	equ	0xFE1
  7624                           indf2	equ	0xFDF
  7625                           postinc2	equ	0xFDE
  7626                           postdec2	equ	0xFDD
  7627                           plusw2	equ	0xFDB
  7628                           fsr2h	equ	0xFDA
  7629                           fsr2l	equ	0xFD9
  7630                           status	equ	0xFD8
  7631                           
  7632 ;; *************** function _TMR0_ISR *****************
  7633 ;; Defined at:
  7634 ;;		line 134 in file "mcc_generated_files/tmr0.c"
  7635 ;; Parameters:    Size  Location     Type
  7636 ;;		None
  7637 ;; Auto vars:     Size  Location     Type
  7638 ;;		None
  7639 ;; Return value:  Size  Location     Type
  7640 ;;                  2  164[None  ] int 
  7641 ;; Registers used:
  7642 ;;		wreg, status,2, status,0
  7643 ;; Tracked objects:
  7644 ;;		On entry : 0/0
  7645 ;;		On exit  : 0/0
  7646 ;;		Unchanged: 0/0
  7647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7648 ;;      Params:         0       0       0       0       0       0       0
  7649 ;;      Locals:         0       0       0       0       0       0       0
  7650 ;;      Temps:          0       0       0       0       0       0       0
  7651 ;;      Totals:         0       0       0       0       0       0       0
  7652 ;;Total ram usage:        0 bytes
  7653 ;; Hardware stack levels used:    1
  7654 ;; This function calls:
  7655 ;;		Nothing
  7656 ;; This function is called by:
  7657 ;;		_INTERRUPT_InterruptManager
  7658 ;; This function uses a non-reentrant model
  7659 ;;
  7660                           
  7661                           	psect	text43
  7662  00188C                     __ptext43:
  7663                           	opt stack 0
  7664  00188C                     _TMR0_ISR:
  7665                           	opt stack 22
  7666                           
  7667                           ;tmr0.c: 138: TMR0H = timer0ReloadVal16bit >> 8;
  7668                           
  7669                           ;incstack = 0
  7670  00188C  5041               	movf	_timer0ReloadVal16bit+1,w,c
  7671  00188E  6ED7               	movwf	4055,c	;volatile
  7672                           
  7673                           ;tmr0.c: 139: TMR0L = (uint8_t) timer0ReloadVal16bit;
  7674  001890  C040  FFD6         	movff	_timer0ReloadVal16bit,4054	;volatile
  7675                           
  7676                           ;tmr0.c: 141: time++;
  7677  001894  0E01               	movlw	1
  7678  001896  2626               	addwf	_time,f,c
  7679  001898  0E00               	movlw	0
  7680  00189A  2227               	addwfc	_time+1,f,c
  7681  00189C  2228               	addwfc	_time+2,f,c
  7682  00189E  2229               	addwfc	_time+3,f,c
  7683                           
  7684                           ;tmr0.c: 144: INTCONbits.TMR0IF = 0;
  7685  0018A0  94F2               	bcf	intcon,2,c	;volatile
  7686  0018A2  0012               	return		;funcret
  7687  0018A4                     __end_of_TMR0_ISR:
  7688                           	opt stack 0
  7689                           tosu	equ	0xFFF
  7690                           tosh	equ	0xFFE
  7691                           tosl	equ	0xFFD
  7692                           pclatu	equ	0xFFB
  7693                           pclath	equ	0xFFA
  7694                           tblptru	equ	0xFF8
  7695                           tblptrh	equ	0xFF7
  7696                           tblptrl	equ	0xFF6
  7697                           tablat	equ	0xFF5
  7698                           prodh	equ	0xFF4
  7699                           prodl	equ	0xFF3
  7700                           intcon	equ	0xFF2
  7701                           intcon2	equ	0xFF1
  7702                           postinc0	equ	0xFEE
  7703                           fsr0h	equ	0xFEA
  7704                           fsr0l	equ	0xFE9
  7705                           wreg	equ	0xFE8
  7706                           postdec1	equ	0xFE5
  7707                           fsr1h	equ	0xFE2
  7708                           fsr1l	equ	0xFE1
  7709                           indf2	equ	0xFDF
  7710                           postinc2	equ	0xFDE
  7711                           postdec2	equ	0xFDD
  7712                           plusw2	equ	0xFDB
  7713                           fsr2h	equ	0xFDA
  7714                           fsr2l	equ	0xFD9
  7715                           status	equ	0xFD8
  7716                           
  7717 ;; *************** function _EUSART2_Transmit_ISR *****************
  7718 ;; Defined at:
  7719 ;;		line 152 in file "UART.c"
  7720 ;; Parameters:    Size  Location     Type
  7721 ;;		None
  7722 ;; Auto vars:     Size  Location     Type
  7723 ;;		None
  7724 ;; Return value:  Size  Location     Type
  7725 ;;                  1    wreg      void 
  7726 ;; Registers used:
  7727 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7728 ;; Tracked objects:
  7729 ;;		On entry : 0/0
  7730 ;;		On exit  : 0/0
  7731 ;;		Unchanged: 0/0
  7732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7733 ;;      Params:         0       0       0       0       0       0       0
  7734 ;;      Locals:         0       0       0       0       0       0       0
  7735 ;;      Temps:          0       0       0       0       0       0       0
  7736 ;;      Totals:         0       0       0       0       0       0       0
  7737 ;;Total ram usage:        0 bytes
  7738 ;; Hardware stack levels used:    1
  7739 ;; Hardware stack levels required when called:    2
  7740 ;; This function calls:
  7741 ;;		i2_UART_buff_get
  7742 ;;		i2_UART_buff_size
  7743 ;; This function is called by:
  7744 ;;		_INTERRUPT_InterruptManager
  7745 ;; This function uses a non-reentrant model
  7746 ;;
  7747                           
  7748                           	psect	text44
  7749  0015F4                     __ptext44:
  7750                           	opt stack 0
  7751  0015F4                     _EUSART2_Transmit_ISR:
  7752                           	opt stack 20
  7753                           
  7754                           ;UART.c: 154: if (UART_buff_size(&output_buffer) > 0) {
  7755                           
  7756                           ;incstack = 0
  7757  0015F4  0E00               	movlw	low _output_buffer
  7758  0015F6  6E01               	movwf	i2UART_buff_size@_this,c
  7759  0015F8  0E04               	movlw	high _output_buffer
  7760  0015FA  6E02               	movwf	i2UART_buff_size@_this+1,c
  7761  0015FC  EC73  F00C         	call	i2_UART_buff_size	;wreg free
  7762  001600  BE02               	btfsc	?i2_UART_buff_size+1,7,c
  7763  001602  D00D               	goto	i2l3415
  7764  001604  5002               	movf	?i2_UART_buff_size+1,w,c
  7765  001606  E103               	bnz	i2u289_40
  7766  001608  0401               	decf	?i2_UART_buff_size,w,c
  7767  00160A  A0D8               	btfss	status,0,c
  7768  00160C  D008               	goto	i2l3415
  7769  00160E                     i2u289_40:
  7770                           
  7771                           ;UART.c: 155: TXREG2 = UART_buff_get(&output_buffer);
  7772  00160E  0E00               	movlw	low _output_buffer
  7773  001610  6E07               	movwf	i2UART_buff_get@_this,c
  7774  001612  0E04               	movlw	high _output_buffer
  7775  001614  6E08               	movwf	i2UART_buff_get@_this+1,c
  7776  001616  EC7E  F008         	call	i2_UART_buff_get	;wreg free
  7777  00161A  6E73               	movwf	3955,c	;volatile
  7778                           
  7779                           ;UART.c: 156: } else {
  7780  00161C  0012               	return	
  7781  00161E                     i2l3415:
  7782                           
  7783                           ;UART.c: 157: Transmit_stall = 1;
  7784  00161E  0E01               	movlw	1
  7785  001620  6E44               	movwf	_Transmit_stall,c
  7786                           
  7787                           ;UART.c: 158: PIE3bits.TX2IE = 0;
  7788  001622  98A3               	bcf	4003,4,c	;volatile
  7789  001624  0012               	return	
  7790  001626                     __end_of_EUSART2_Transmit_ISR:
  7791                           	opt stack 0
  7792                           tosu	equ	0xFFF
  7793                           tosh	equ	0xFFE
  7794                           tosl	equ	0xFFD
  7795                           pclatu	equ	0xFFB
  7796                           pclath	equ	0xFFA
  7797                           tblptru	equ	0xFF8
  7798                           tblptrh	equ	0xFF7
  7799                           tblptrl	equ	0xFF6
  7800                           tablat	equ	0xFF5
  7801                           prodh	equ	0xFF4
  7802                           prodl	equ	0xFF3
  7803                           intcon	equ	0xFF2
  7804                           intcon2	equ	0xFF1
  7805                           postinc0	equ	0xFEE
  7806                           fsr0h	equ	0xFEA
  7807                           fsr0l	equ	0xFE9
  7808                           wreg	equ	0xFE8
  7809                           postdec1	equ	0xFE5
  7810                           fsr1h	equ	0xFE2
  7811                           fsr1l	equ	0xFE1
  7812                           indf2	equ	0xFDF
  7813                           postinc2	equ	0xFDE
  7814                           postdec2	equ	0xFDD
  7815                           plusw2	equ	0xFDB
  7816                           fsr2h	equ	0xFDA
  7817                           fsr2l	equ	0xFD9
  7818                           status	equ	0xFD8
  7819                           
  7820 ;; *************** function i2_UART_buff_size *****************
  7821 ;; Defined at:
  7822 ;;		line 104 in file "UART.c"
  7823 ;; Parameters:    Size  Location     Type
  7824 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
  7825 ;;		 -> output_buffer(206), input_buffer(206), 
  7826 ;; Auto vars:     Size  Location     Type
  7827 ;;		None
  7828 ;; Return value:  Size  Location     Type
  7829 ;;                  2    0[COMRAM] int 
  7830 ;; Registers used:
  7831 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7832 ;; Tracked objects:
  7833 ;;		On entry : 0/0
  7834 ;;		On exit  : 0/0
  7835 ;;		Unchanged: 0/0
  7836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7837 ;;      Params:         2       0       0       0       0       0       0
  7838 ;;      Locals:         0       0       0       0       0       0       0
  7839 ;;      Temps:          0       0       0       0       0       0       0
  7840 ;;      Totals:         2       0       0       0       0       0       0
  7841 ;;Total ram usage:        2 bytes
  7842 ;; Hardware stack levels used:    1
  7843 ;; This function calls:
  7844 ;;		Nothing
  7845 ;; This function is called by:
  7846 ;;		_EUSART2_Transmit_ISR
  7847 ;; This function uses a non-reentrant model
  7848 ;;
  7849                           
  7850                           	psect	text45
  7851  0018E6                     __ptext45:
  7852                           	opt stack 0
  7853  0018E6                     i2_UART_buff_size:
  7854                           	opt stack 21
  7855                           
  7856                           ;UART.c: 105: return (_this->count);
  7857                           
  7858                           ;incstack = 0
  7859  0018E6  EE20 F0CC          	lfsr	2,204
  7860  0018EA  5001               	movf	i2UART_buff_size@_this,w,c
  7861  0018EC  26D9               	addwf	fsr2l,f,c
  7862  0018EE  5002               	movf	i2UART_buff_size@_this+1,w,c
  7863  0018F0  22DA               	addwfc	fsr2h,f,c
  7864  0018F2  CFDE F001          	movff	postinc2,?i2_UART_buff_size
  7865  0018F6  CFDD F002          	movff	postdec2,?i2_UART_buff_size+1
  7866  0018FA  0012               	return	
  7867  0018FC                     __end_ofi2_UART_buff_size:
  7868                           	opt stack 0
  7869                           tosu	equ	0xFFF
  7870                           tosh	equ	0xFFE
  7871                           tosl	equ	0xFFD
  7872                           pclatu	equ	0xFFB
  7873                           pclath	equ	0xFFA
  7874                           tblptru	equ	0xFF8
  7875                           tblptrh	equ	0xFF7
  7876                           tblptrl	equ	0xFF6
  7877                           tablat	equ	0xFF5
  7878                           prodh	equ	0xFF4
  7879                           prodl	equ	0xFF3
  7880                           intcon	equ	0xFF2
  7881                           intcon2	equ	0xFF1
  7882                           postinc0	equ	0xFEE
  7883                           fsr0h	equ	0xFEA
  7884                           fsr0l	equ	0xFE9
  7885                           wreg	equ	0xFE8
  7886                           postdec1	equ	0xFE5
  7887                           fsr1h	equ	0xFE2
  7888                           fsr1l	equ	0xFE1
  7889                           indf2	equ	0xFDF
  7890                           postinc2	equ	0xFDE
  7891                           postdec2	equ	0xFDD
  7892                           plusw2	equ	0xFDB
  7893                           fsr2h	equ	0xFDA
  7894                           fsr2l	equ	0xFD9
  7895                           status	equ	0xFD8
  7896                           
  7897 ;; *************** function i2_UART_buff_get *****************
  7898 ;; Defined at:
  7899 ;;		line 83 in file "UART.c"
  7900 ;; Parameters:    Size  Location     Type
  7901 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  7902 ;;		 -> output_buffer(206), input_buffer(206), 
  7903 ;; Auto vars:     Size  Location     Type
  7904 ;;  UART_buff_ge    1   10[COMRAM] unsigned char 
  7905 ;; Return value:  Size  Location     Type
  7906 ;;                  1    wreg      unsigned char 
  7907 ;; Registers used:
  7908 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7909 ;; Tracked objects:
  7910 ;;		On entry : 0/0
  7911 ;;		On exit  : 0/0
  7912 ;;		Unchanged: 0/0
  7913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7914 ;;      Params:         2       0       0       0       0       0       0
  7915 ;;      Locals:         1       0       0       0       0       0       0
  7916 ;;      Temps:          2       0       0       0       0       0       0
  7917 ;;      Totals:         5       0       0       0       0       0       0
  7918 ;;Total ram usage:        5 bytes
  7919 ;; Hardware stack levels used:    1
  7920 ;; Hardware stack levels required when called:    1
  7921 ;; This function calls:
  7922 ;;		i2_UART_buff_modulo_inc
  7923 ;; This function is called by:
  7924 ;;		_EUSART2_Transmit_ISR
  7925 ;; This function uses a non-reentrant model
  7926 ;;
  7927                           
  7928                           	psect	text46
  7929  0010FC                     __ptext46:
  7930                           	opt stack 0
  7931  0010FC                     i2_UART_buff_get:
  7932                           	opt stack 20
  7933                           
  7934                           ;UART.c: 84: unsigned char c;
  7935                           ;UART.c: 85: if (_this->count > 0) {
  7936                           
  7937                           ;incstack = 0
  7938  0010FC  EE20 F0CC          	lfsr	2,204
  7939  001100  5007               	movf	i2UART_buff_get@_this,w,c
  7940  001102  26D9               	addwf	fsr2l,f,c
  7941  001104  5008               	movf	i2UART_buff_get@_this+1,w,c
  7942  001106  22DA               	addwfc	fsr2h,f,c
  7943  001108  0E01               	movlw	1
  7944  00110A  BEDB               	btfsc	plusw2,7,c
  7945  00110C  D03C               	goto	i2l3351
  7946  00110E  0E01               	movlw	1
  7947  001110  50DB               	movf	plusw2,w,c
  7948  001112  E103               	bnz	i2u281_40
  7949  001114  04DE               	decf	postinc2,w,c
  7950  001116  A0D8               	btfss	status,0,c
  7951  001118  D036               	goto	i2l3351
  7952  00111A                     i2u281_40:
  7953                           
  7954                           ;UART.c: 86: c = _this->buf[_this->tail];
  7955  00111A  EE20 F0CA          	lfsr	2,202
  7956  00111E  5007               	movf	i2UART_buff_get@_this,w,c
  7957  001120  26D9               	addwf	fsr2l,f,c
  7958  001122  5008               	movf	i2UART_buff_get@_this+1,w,c
  7959  001124  22DA               	addwfc	fsr2h,f,c
  7960  001126  CFDE F009          	movff	postinc2,??i2_UART_buff_get
  7961  00112A  CFDD F00A          	movff	postdec2,??i2_UART_buff_get+1
  7962  00112E  5009               	movf	??i2_UART_buff_get,w,c
  7963  001130  2407               	addwf	i2UART_buff_get@_this,w,c
  7964  001132  6ED9               	movwf	fsr2l,c
  7965  001134  500A               	movf	??i2_UART_buff_get+1,w,c
  7966  001136  2008               	addwfc	i2UART_buff_get@_this+1,w,c
  7967  001138  6EDA               	movwf	fsr2h,c
  7968  00113A  50DF               	movf	indf2,w,c
  7969  00113C  6E0B               	movwf	i2UART_buff_get@c,c
  7970                           
  7971                           ;UART.c: 87: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  7972  00113E  EE20 F0CA          	lfsr	2,202
  7973  001142  5007               	movf	i2UART_buff_get@_this,w,c
  7974  001144  26D9               	addwf	fsr2l,f,c
  7975  001146  5008               	movf	i2UART_buff_get@_this+1,w,c
  7976  001148  22DA               	addwfc	fsr2h,f,c
  7977  00114A  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  7978  00114E  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  7979  001152  0E00               	movlw	0
  7980  001154  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  7981  001156  0EC8               	movlw	200
  7982  001158  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  7983  00115A  ECC5  F00B         	call	i2_UART_buff_modulo_inc	;wreg free
  7984  00115E  EE20 F0CA          	lfsr	2,202
  7985  001162  5007               	movf	i2UART_buff_get@_this,w,c
  7986  001164  26D9               	addwf	fsr2l,f,c
  7987  001166  5008               	movf	i2UART_buff_get@_this+1,w,c
  7988  001168  22DA               	addwfc	fsr2h,f,c
  7989  00116A  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  7990  00116E  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  7991                           
  7992                           ;UART.c: 88: --_this->count;
  7993  001172  EE20 F0CC          	lfsr	2,204
  7994  001176  5007               	movf	i2UART_buff_get@_this,w,c
  7995  001178  26D9               	addwf	fsr2l,f,c
  7996  00117A  5008               	movf	i2UART_buff_get@_this+1,w,c
  7997  00117C  22DA               	addwfc	fsr2h,f,c
  7998  00117E  06DE               	decf	postinc2,f,c
  7999  001180  0E00               	movlw	0
  8000  001182  5ADD               	subwfb	postdec2,f,c
  8001                           
  8002                           ;UART.c: 89: } else {
  8003  001184  D002               	goto	i2l614
  8004  001186                     i2l3351:
  8005                           
  8006                           ;UART.c: 90: c = 0;
  8007  001186  0E00               	movlw	0
  8008  001188  6E0B               	movwf	i2UART_buff_get@c,c
  8009  00118A                     i2l614:
  8010                           
  8011                           ;UART.c: 91: }
  8012                           ;UART.c: 92: return (c);
  8013  00118A  500B               	movf	i2UART_buff_get@c,w,c
  8014  00118C  0012               	return	
  8015  00118E                     __end_ofi2_UART_buff_get:
  8016                           	opt stack 0
  8017                           tosu	equ	0xFFF
  8018                           tosh	equ	0xFFE
  8019                           tosl	equ	0xFFD
  8020                           pclatu	equ	0xFFB
  8021                           pclath	equ	0xFFA
  8022                           tblptru	equ	0xFF8
  8023                           tblptrh	equ	0xFF7
  8024                           tblptrl	equ	0xFF6
  8025                           tablat	equ	0xFF5
  8026                           prodh	equ	0xFF4
  8027                           prodl	equ	0xFF3
  8028                           intcon	equ	0xFF2
  8029                           intcon2	equ	0xFF1
  8030                           postinc0	equ	0xFEE
  8031                           fsr0h	equ	0xFEA
  8032                           fsr0l	equ	0xFE9
  8033                           wreg	equ	0xFE8
  8034                           postdec1	equ	0xFE5
  8035                           fsr1h	equ	0xFE2
  8036                           fsr1l	equ	0xFE1
  8037                           indf2	equ	0xFDF
  8038                           postinc2	equ	0xFDE
  8039                           postdec2	equ	0xFDD
  8040                           plusw2	equ	0xFDB
  8041                           fsr2h	equ	0xFDA
  8042                           fsr2l	equ	0xFD9
  8043                           status	equ	0xFD8
  8044                           
  8045 ;; *************** function _EUSART2_Receive_ISR *****************
  8046 ;; Defined at:
  8047 ;;		line 141 in file "UART.c"
  8048 ;; Parameters:    Size  Location     Type
  8049 ;;		None
  8050 ;; Auto vars:     Size  Location     Type
  8051 ;;  data            1   11[COMRAM] unsigned char 
  8052 ;; Return value:  Size  Location     Type
  8053 ;;                  1    wreg      void 
  8054 ;; Registers used:
  8055 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8056 ;; Tracked objects:
  8057 ;;		On entry : 0/0
  8058 ;;		On exit  : 0/0
  8059 ;;		Unchanged: 0/0
  8060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8061 ;;      Params:         0       0       0       0       0       0       0
  8062 ;;      Locals:         1       0       0       0       0       0       0
  8063 ;;      Temps:          0       0       0       0       0       0       0
  8064 ;;      Totals:         1       0       0       0       0       0       0
  8065 ;;Total ram usage:        1 bytes
  8066 ;; Hardware stack levels used:    1
  8067 ;; Hardware stack levels required when called:    2
  8068 ;; This function calls:
  8069 ;;		i2_UART_buff_put
  8070 ;; This function is called by:
  8071 ;;		_INTERRUPT_InterruptManager
  8072 ;; This function uses a non-reentrant model
  8073 ;;
  8074                           
  8075                           	psect	text47
  8076  001854                     __ptext47:
  8077                           	opt stack 0
  8078  001854                     _EUSART2_Receive_ISR:
  8079                           	opt stack 20
  8080                           
  8081                           ;UART.c: 142: if (1 == RC2STAbits.OERR) {
  8082                           
  8083                           ;incstack = 0
  8084  001854  A271               	btfss	3953,1,c	;volatile
  8085  001856  D002               	goto	i2l645
  8086                           
  8087                           ;UART.c: 145: RC2STAbits.CREN = 0;
  8088  001858  9871               	bcf	3953,4,c	;volatile
  8089                           
  8090                           ;UART.c: 146: RC2STAbits.CREN = 1;
  8091  00185A  8871               	bsf	3953,4,c	;volatile
  8092  00185C                     i2l645:
  8093                           
  8094                           ;UART.c: 147: }
  8095                           ;UART.c: 148: unsigned char data = RCREG2;
  8096  00185C  CF74 F00C          	movff	3956,EUSART2_Receive_ISR@data	;volatile
  8097                           
  8098                           ;UART.c: 149: UART_buff_put(&input_buffer, data);
  8099  001860  0E00               	movlw	low _input_buffer
  8100  001862  6E07               	movwf	i2UART_buff_put@_this,c
  8101  001864  0E03               	movlw	high _input_buffer
  8102  001866  6E08               	movwf	i2UART_buff_put@_this+1,c
  8103  001868  C00C  F009         	movff	EUSART2_Receive_ISR@data,i2UART_buff_put@c
  8104  00186C  EC58  F006         	call	i2_UART_buff_put	;wreg free
  8105  001870  0012               	return		;funcret
  8106  001872                     __end_of_EUSART2_Receive_ISR:
  8107                           	opt stack 0
  8108                           tosu	equ	0xFFF
  8109                           tosh	equ	0xFFE
  8110                           tosl	equ	0xFFD
  8111                           pclatu	equ	0xFFB
  8112                           pclath	equ	0xFFA
  8113                           tblptru	equ	0xFF8
  8114                           tblptrh	equ	0xFF7
  8115                           tblptrl	equ	0xFF6
  8116                           tablat	equ	0xFF5
  8117                           prodh	equ	0xFF4
  8118                           prodl	equ	0xFF3
  8119                           intcon	equ	0xFF2
  8120                           intcon2	equ	0xFF1
  8121                           postinc0	equ	0xFEE
  8122                           fsr0h	equ	0xFEA
  8123                           fsr0l	equ	0xFE9
  8124                           wreg	equ	0xFE8
  8125                           postdec1	equ	0xFE5
  8126                           fsr1h	equ	0xFE2
  8127                           fsr1l	equ	0xFE1
  8128                           indf2	equ	0xFDF
  8129                           postinc2	equ	0xFDE
  8130                           postdec2	equ	0xFDD
  8131                           plusw2	equ	0xFDB
  8132                           fsr2h	equ	0xFDA
  8133                           fsr2l	equ	0xFD9
  8134                           status	equ	0xFD8
  8135                           
  8136 ;; *************** function i2_UART_buff_put *****************
  8137 ;; Defined at:
  8138 ;;		line 70 in file "UART.c"
  8139 ;; Parameters:    Size  Location     Type
  8140 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  8141 ;;		 -> output_buffer(206), input_buffer(206), 
  8142 ;;  c               1    8[COMRAM] const unsigned char 
  8143 ;; Auto vars:     Size  Location     Type
  8144 ;;		None
  8145 ;; Return value:  Size  Location     Type
  8146 ;;                  1    wreg      void 
  8147 ;; Registers used:
  8148 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8149 ;; Tracked objects:
  8150 ;;		On entry : 0/0
  8151 ;;		On exit  : 0/0
  8152 ;;		Unchanged: 0/0
  8153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8154 ;;      Params:         3       0       0       0       0       0       0
  8155 ;;      Locals:         0       0       0       0       0       0       0
  8156 ;;      Temps:          2       0       0       0       0       0       0
  8157 ;;      Totals:         5       0       0       0       0       0       0
  8158 ;;Total ram usage:        5 bytes
  8159 ;; Hardware stack levels used:    1
  8160 ;; Hardware stack levels required when called:    1
  8161 ;; This function calls:
  8162 ;;		i2_UART_buff_modulo_inc
  8163 ;; This function is called by:
  8164 ;;		_EUSART2_Receive_ISR
  8165 ;; This function uses a non-reentrant model
  8166 ;;
  8167                           
  8168                           	psect	text48
  8169  000CB0                     __ptext48:
  8170                           	opt stack 0
  8171  000CB0                     i2_UART_buff_put:
  8172                           	opt stack 20
  8173                           
  8174                           ;UART.c: 71: if (_this->count < 200) {
  8175                           
  8176                           ;incstack = 0
  8177  000CB0  EE20 F0CC          	lfsr	2,204
  8178  000CB4  5007               	movf	i2UART_buff_put@_this,w,c
  8179  000CB6  26D9               	addwf	fsr2l,f,c
  8180  000CB8  5008               	movf	i2UART_buff_put@_this+1,w,c
  8181  000CBA  22DA               	addwfc	fsr2h,f,c
  8182  000CBC  0E01               	movlw	1
  8183  000CBE  BEDB               	btfsc	plusw2,7,c
  8184  000CC0  D007               	goto	i2l3331
  8185  000CC2  0E01               	movlw	1
  8186  000CC4  50DB               	movf	plusw2,w,c
  8187  000CC6  E13A               	bnz	i2l3337
  8188  000CC8  0EC8               	movlw	200
  8189  000CCA  5CDE               	subwf	postinc2,w,c
  8190  000CCC  B0D8               	btfsc	status,0,c
  8191  000CCE  D036               	goto	i2l3337
  8192  000CD0                     i2l3331:
  8193                           
  8194                           ;UART.c: 72: _this->buf[_this->head] = c;
  8195  000CD0  EE20 F0C8          	lfsr	2,200
  8196  000CD4  5007               	movf	i2UART_buff_put@_this,w,c
  8197  000CD6  26D9               	addwf	fsr2l,f,c
  8198  000CD8  5008               	movf	i2UART_buff_put@_this+1,w,c
  8199  000CDA  22DA               	addwfc	fsr2h,f,c
  8200  000CDC  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  8201  000CE0  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  8202  000CE4  500A               	movf	??i2_UART_buff_put,w,c
  8203  000CE6  2407               	addwf	i2UART_buff_put@_this,w,c
  8204  000CE8  6ED9               	movwf	fsr2l,c
  8205  000CEA  500B               	movf	??i2_UART_buff_put+1,w,c
  8206  000CEC  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  8207  000CEE  6EDA               	movwf	fsr2h,c
  8208  000CF0  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  8209                           
  8210                           ;UART.c: 73: _this->head = UART_buff_modulo_inc(_this->head, 200);
  8211  000CF4  EE20 F0C8          	lfsr	2,200
  8212  000CF8  5007               	movf	i2UART_buff_put@_this,w,c
  8213  000CFA  26D9               	addwf	fsr2l,f,c
  8214  000CFC  5008               	movf	i2UART_buff_put@_this+1,w,c
  8215  000CFE  22DA               	addwfc	fsr2h,f,c
  8216  000D00  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  8217  000D04  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  8218  000D08  0E00               	movlw	0
  8219  000D0A  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  8220  000D0C  0EC8               	movlw	200
  8221  000D0E  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  8222  000D10  ECC5  F00B         	call	i2_UART_buff_modulo_inc	;wreg free
  8223  000D14  EE20 F0C8          	lfsr	2,200
  8224  000D18  5007               	movf	i2UART_buff_put@_this,w,c
  8225  000D1A  26D9               	addwf	fsr2l,f,c
  8226  000D1C  5008               	movf	i2UART_buff_put@_this+1,w,c
  8227  000D1E  22DA               	addwfc	fsr2h,f,c
  8228  000D20  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  8229  000D24  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  8230                           
  8231                           ;UART.c: 74: ++_this->count;
  8232  000D28  EE20 F0CC          	lfsr	2,204
  8233  000D2C  5007               	movf	i2UART_buff_put@_this,w,c
  8234  000D2E  26D9               	addwf	fsr2l,f,c
  8235  000D30  5008               	movf	i2UART_buff_put@_this+1,w,c
  8236  000D32  22DA               	addwfc	fsr2h,f,c
  8237  000D34  2ADE               	incf	postinc2,f,c
  8238  000D36  0E00               	movlw	0
  8239  000D38  22DD               	addwfc	postdec2,f,c
  8240                           
  8241                           ;UART.c: 75: } else {
  8242  000D3A  0012               	return	
  8243  000D3C                     i2l3337:
  8244                           
  8245                           ;UART.c: 76: _this->buf[_this->head] = c;
  8246  000D3C  EE20 F0C8          	lfsr	2,200
  8247  000D40  5007               	movf	i2UART_buff_put@_this,w,c
  8248  000D42  26D9               	addwf	fsr2l,f,c
  8249  000D44  5008               	movf	i2UART_buff_put@_this+1,w,c
  8250  000D46  22DA               	addwfc	fsr2h,f,c
  8251  000D48  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  8252  000D4C  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  8253  000D50  500A               	movf	??i2_UART_buff_put,w,c
  8254  000D52  2407               	addwf	i2UART_buff_put@_this,w,c
  8255  000D54  6ED9               	movwf	fsr2l,c
  8256  000D56  500B               	movf	??i2_UART_buff_put+1,w,c
  8257  000D58  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  8258  000D5A  6EDA               	movwf	fsr2h,c
  8259  000D5C  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  8260                           
  8261                           ;UART.c: 77: _this->head = UART_buff_modulo_inc(_this->head, 200);
  8262  000D60  EE20 F0C8          	lfsr	2,200
  8263  000D64  5007               	movf	i2UART_buff_put@_this,w,c
  8264  000D66  26D9               	addwf	fsr2l,f,c
  8265  000D68  5008               	movf	i2UART_buff_put@_this+1,w,c
  8266  000D6A  22DA               	addwfc	fsr2h,f,c
  8267  000D6C  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  8268  000D70  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  8269  000D74  0E00               	movlw	0
  8270  000D76  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  8271  000D78  0EC8               	movlw	200
  8272  000D7A  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  8273  000D7C  ECC5  F00B         	call	i2_UART_buff_modulo_inc	;wreg free
  8274  000D80  EE20 F0C8          	lfsr	2,200
  8275  000D84  5007               	movf	i2UART_buff_put@_this,w,c
  8276  000D86  26D9               	addwf	fsr2l,f,c
  8277  000D88  5008               	movf	i2UART_buff_put@_this+1,w,c
  8278  000D8A  22DA               	addwfc	fsr2h,f,c
  8279  000D8C  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  8280  000D90  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  8281                           
  8282                           ;UART.c: 78: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  8283  000D94  EE20 F0CA          	lfsr	2,202
  8284  000D98  5007               	movf	i2UART_buff_put@_this,w,c
  8285  000D9A  26D9               	addwf	fsr2l,f,c
  8286  000D9C  5008               	movf	i2UART_buff_put@_this+1,w,c
  8287  000D9E  22DA               	addwfc	fsr2h,f,c
  8288  000DA0  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  8289  000DA4  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  8290  000DA8  0E00               	movlw	0
  8291  000DAA  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  8292  000DAC  0EC8               	movlw	200
  8293  000DAE  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  8294  000DB0  ECC5  F00B         	call	i2_UART_buff_modulo_inc	;wreg free
  8295  000DB4  EE20 F0CA          	lfsr	2,202
  8296  000DB8  5007               	movf	i2UART_buff_put@_this,w,c
  8297  000DBA  26D9               	addwf	fsr2l,f,c
  8298  000DBC  5008               	movf	i2UART_buff_put@_this+1,w,c
  8299  000DBE  22DA               	addwfc	fsr2h,f,c
  8300  000DC0  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  8301  000DC4  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  8302  000DC8  0012               	return	
  8303  000DCA                     __end_ofi2_UART_buff_put:
  8304                           	opt stack 0
  8305                           tosu	equ	0xFFF
  8306                           tosh	equ	0xFFE
  8307                           tosl	equ	0xFFD
  8308                           pclatu	equ	0xFFB
  8309                           pclath	equ	0xFFA
  8310                           tblptru	equ	0xFF8
  8311                           tblptrh	equ	0xFF7
  8312                           tblptrl	equ	0xFF6
  8313                           tablat	equ	0xFF5
  8314                           prodh	equ	0xFF4
  8315                           prodl	equ	0xFF3
  8316                           intcon	equ	0xFF2
  8317                           intcon2	equ	0xFF1
  8318                           postinc0	equ	0xFEE
  8319                           fsr0h	equ	0xFEA
  8320                           fsr0l	equ	0xFE9
  8321                           wreg	equ	0xFE8
  8322                           postdec1	equ	0xFE5
  8323                           fsr1h	equ	0xFE2
  8324                           fsr1l	equ	0xFE1
  8325                           indf2	equ	0xFDF
  8326                           postinc2	equ	0xFDE
  8327                           postdec2	equ	0xFDD
  8328                           plusw2	equ	0xFDB
  8329                           fsr2h	equ	0xFDA
  8330                           fsr2l	equ	0xFD9
  8331                           status	equ	0xFD8
  8332                           
  8333 ;; *************** function i2_UART_buff_modulo_inc *****************
  8334 ;; Defined at:
  8335 ;;		line 108 in file "UART.c"
  8336 ;; Parameters:    Size  Location     Type
  8337 ;;  value           2    0[COMRAM] const unsigned int 
  8338 ;;  modulus         2    2[COMRAM] const unsigned int 
  8339 ;; Auto vars:     Size  Location     Type
  8340 ;;  UART_buff_mo    2    4[COMRAM] unsigned int 
  8341 ;; Return value:  Size  Location     Type
  8342 ;;                  2    0[COMRAM] unsigned int 
  8343 ;; Registers used:
  8344 ;;		wreg, status,2, status,0
  8345 ;; Tracked objects:
  8346 ;;		On entry : 0/0
  8347 ;;		On exit  : 0/0
  8348 ;;		Unchanged: 0/0
  8349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8350 ;;      Params:         4       0       0       0       0       0       0
  8351 ;;      Locals:         2       0       0       0       0       0       0
  8352 ;;      Temps:          0       0       0       0       0       0       0
  8353 ;;      Totals:         6       0       0       0       0       0       0
  8354 ;;Total ram usage:        6 bytes
  8355 ;; Hardware stack levels used:    1
  8356 ;; This function calls:
  8357 ;;		Nothing
  8358 ;; This function is called by:
  8359 ;;		i2_UART_buff_put
  8360 ;;		i2_UART_buff_get
  8361 ;; This function uses a non-reentrant model
  8362 ;;
  8363                           
  8364                           	psect	text49
  8365  00178A                     __ptext49:
  8366                           	opt stack 0
  8367  00178A                     i2_UART_buff_modulo_inc:
  8368                           	opt stack 20
  8369                           
  8370                           ;UART.c: 109: unsigned int my_value = value + 1;
  8371                           
  8372                           ;incstack = 0
  8373  00178A  0E01               	movlw	1
  8374  00178C  2401               	addwf	i2UART_buff_modulo_inc@value,w,c
  8375  00178E  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  8376  001790  0E00               	movlw	0
  8377  001792  2002               	addwfc	i2UART_buff_modulo_inc@value+1,w,c
  8378  001794  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  8379                           
  8380                           ;UART.c: 110: if (my_value >= modulus) {
  8381  001796  5003               	movf	i2UART_buff_modulo_inc@modulus,w,c
  8382  001798  5C05               	subwf	i2UART_buff_modulo_inc@my_value,w,c
  8383  00179A  5004               	movf	i2UART_buff_modulo_inc@modulus+1,w,c
  8384  00179C  5806               	subwfb	i2UART_buff_modulo_inc@my_value+1,w,c
  8385  00179E  A0D8               	btfss	status,0,c
  8386  0017A0  D004               	goto	i2l3227
  8387                           
  8388                           ;UART.c: 111: my_value = 0;
  8389  0017A2  0E00               	movlw	0
  8390  0017A4  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  8391  0017A6  0E00               	movlw	0
  8392  0017A8  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  8393  0017AA                     i2l3227:
  8394                           
  8395                           ;UART.c: 112: }
  8396                           ;UART.c: 113: return (my_value);
  8397  0017AA  C005  F001         	movff	i2UART_buff_modulo_inc@my_value,?i2_UART_buff_modulo_inc
  8398  0017AE  C006  F002         	movff	i2UART_buff_modulo_inc@my_value+1,?i2_UART_buff_modulo_inc+1
  8399  0017B2  0012               	return	
  8400  0017B4                     __end_ofi2_UART_buff_modulo_inc:
  8401                           	opt stack 0
  8402                           tosu	equ	0xFFF
  8403                           tosh	equ	0xFFE
  8404                           tosl	equ	0xFFD
  8405                           pclatu	equ	0xFFB
  8406                           pclath	equ	0xFFA
  8407                           tblptru	equ	0xFF8
  8408                           tblptrh	equ	0xFF7
  8409                           tblptrl	equ	0xFF6
  8410                           tablat	equ	0xFF5
  8411                           prodh	equ	0xFF4
  8412                           prodl	equ	0xFF3
  8413                           intcon	equ	0xFF2
  8414                           intcon2	equ	0xFF1
  8415                           postinc0	equ	0xFEE
  8416                           fsr0h	equ	0xFEA
  8417                           fsr0l	equ	0xFE9
  8418                           wreg	equ	0xFE8
  8419                           postdec1	equ	0xFE5
  8420                           fsr1h	equ	0xFE2
  8421                           fsr1l	equ	0xFE1
  8422                           indf2	equ	0xFDF
  8423                           postinc2	equ	0xFDE
  8424                           postdec2	equ	0xFDD
  8425                           plusw2	equ	0xFDB
  8426                           fsr2h	equ	0xFDA
  8427                           fsr2l	equ	0xFD9
  8428                           status	equ	0xFD8
  8429                           
  8430 ;; *************** function _EUSART1_Transmit_ISR *****************
  8431 ;; Defined at:
  8432 ;;		line 155 in file "mcc_generated_files/eusart2.c"
  8433 ;; Parameters:    Size  Location     Type
  8434 ;;		None
  8435 ;; Auto vars:     Size  Location     Type
  8436 ;;		None
  8437 ;; Return value:  Size  Location     Type
  8438 ;;                  1    wreg      void 
  8439 ;; Registers used:
  8440 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8441 ;; Tracked objects:
  8442 ;;		On entry : 0/0
  8443 ;;		On exit  : 0/0
  8444 ;;		Unchanged: 0/0
  8445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8446 ;;      Params:         0       0       0       0       0       0       0
  8447 ;;      Locals:         0       0       0       0       0       0       0
  8448 ;;      Temps:          0       0       0       0       0       0       0
  8449 ;;      Totals:         0       0       0       0       0       0       0
  8450 ;;Total ram usage:        0 bytes
  8451 ;; Hardware stack levels used:    1
  8452 ;; This function calls:
  8453 ;;		Nothing
  8454 ;; This function is called by:
  8455 ;;		_INTERRUPT_InterruptManager
  8456 ;; This function uses a non-reentrant model
  8457 ;;
  8458                           
  8459                           	psect	text50
  8460  001684                     __ptext50:
  8461                           	opt stack 0
  8462  001684                     _EUSART1_Transmit_ISR:
  8463                           	opt stack 22
  8464                           
  8465                           ;eusart2.c: 158: if (sizeof (eusart1TxBuffer) > eusart1TxBufferRemaining) {
  8466                           
  8467                           ;incstack = 0
  8468  001684  0E08               	movlw	8
  8469  001686  6042               	cpfslt	_eusart1TxBufferRemaining,c	;volatile
  8470  001688  D012               	goto	i2l62
  8471                           
  8472                           ;eusart2.c: 159: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
  8473  00168A  5034               	movf	_eusart1TxTail,w,c
  8474  00168C  0D01               	mullw	1
  8475  00168E  0E73               	movlw	low _eusart1TxBuffer
  8476  001690  24F3               	addwf	prodl,w,c
  8477  001692  6ED9               	movwf	fsr2l,c
  8478  001694  0E00               	movlw	high _eusart1TxBuffer
  8479  001696  20F4               	addwfc	prodh,w,c
  8480  001698  6EDA               	movwf	fsr2h,c
  8481  00169A  50DF               	movf	indf2,w,c
  8482  00169C  6EAD               	movwf	4013,c	;volatile
  8483  00169E  2A34               	incf	_eusart1TxTail,f,c
  8484                           
  8485                           ;eusart2.c: 160: if (sizeof (eusart1TxBuffer) <= eusart1TxTail) {
  8486  0016A0  0E07               	movlw	7
  8487  0016A2  6434               	cpfsgt	_eusart1TxTail,c
  8488  0016A4  D002               	goto	i2l3389
  8489                           
  8490                           ;eusart2.c: 161: eusart1TxTail = 0;
  8491  0016A6  0E00               	movlw	0
  8492  0016A8  6E34               	movwf	_eusart1TxTail,c
  8493  0016AA                     i2l3389:
  8494                           
  8495                           ;eusart2.c: 162: }
  8496                           ;eusart2.c: 163: eusart1TxBufferRemaining++;
  8497  0016AA  2A42               	incf	_eusart1TxBufferRemaining,f,c	;volatile
  8498                           
  8499                           ;eusart2.c: 164: } else {
  8500  0016AC  0012               	return	
  8501  0016AE                     i2l62:
  8502                           
  8503                           ;eusart2.c: 165: PIE1bits.TX1IE = 0;
  8504  0016AE  989D               	bcf	3997,4,c	;volatile
  8505  0016B0  0012               	return	
  8506  0016B2                     __end_of_EUSART1_Transmit_ISR:
  8507                           	opt stack 0
  8508                           tosu	equ	0xFFF
  8509                           tosh	equ	0xFFE
  8510                           tosl	equ	0xFFD
  8511                           pclatu	equ	0xFFB
  8512                           pclath	equ	0xFFA
  8513                           tblptru	equ	0xFF8
  8514                           tblptrh	equ	0xFF7
  8515                           tblptrl	equ	0xFF6
  8516                           tablat	equ	0xFF5
  8517                           prodh	equ	0xFF4
  8518                           prodl	equ	0xFF3
  8519                           intcon	equ	0xFF2
  8520                           intcon2	equ	0xFF1
  8521                           postinc0	equ	0xFEE
  8522                           fsr0h	equ	0xFEA
  8523                           fsr0l	equ	0xFE9
  8524                           wreg	equ	0xFE8
  8525                           postdec1	equ	0xFE5
  8526                           fsr1h	equ	0xFE2
  8527                           fsr1l	equ	0xFE1
  8528                           indf2	equ	0xFDF
  8529                           postinc2	equ	0xFDE
  8530                           postdec2	equ	0xFDD
  8531                           plusw2	equ	0xFDB
  8532                           fsr2h	equ	0xFDA
  8533                           fsr2l	equ	0xFD9
  8534                           status	equ	0xFD8
  8535                           
  8536 ;; *************** function _EUSART1_Receive_ISR *****************
  8537 ;; Defined at:
  8538 ;;		line 169 in file "mcc_generated_files/eusart2.c"
  8539 ;; Parameters:    Size  Location     Type
  8540 ;;		None
  8541 ;; Auto vars:     Size  Location     Type
  8542 ;;		None
  8543 ;; Return value:  Size  Location     Type
  8544 ;;                  1    wreg      void 
  8545 ;; Registers used:
  8546 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8547 ;; Tracked objects:
  8548 ;;		On entry : 0/0
  8549 ;;		On exit  : 0/0
  8550 ;;		Unchanged: 0/0
  8551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8552 ;;      Params:         0       0       0       0       0       0       0
  8553 ;;      Locals:         0       0       0       0       0       0       0
  8554 ;;      Temps:          0       0       0       0       0       0       0
  8555 ;;      Totals:         0       0       0       0       0       0       0
  8556 ;;Total ram usage:        0 bytes
  8557 ;; Hardware stack levels used:    1
  8558 ;; This function calls:
  8559 ;;		Nothing
  8560 ;; This function is called by:
  8561 ;;		_INTERRUPT_InterruptManager
  8562 ;; This function uses a non-reentrant model
  8563 ;;
  8564                           
  8565                           	psect	text51
  8566  00170A                     __ptext51:
  8567                           	opt stack 0
  8568  00170A                     _EUSART1_Receive_ISR:
  8569                           	opt stack 22
  8570                           
  8571                           ;eusart2.c: 170: if (1 == RC1STAbits.OERR) {
  8572                           
  8573                           ;incstack = 0
  8574  00170A  A2AB               	btfss	4011,1,c	;volatile
  8575  00170C  D002               	goto	i2l3395
  8576                           
  8577                           ;eusart2.c: 173: RC1STAbits.CREN = 0;
  8578  00170E  98AB               	bcf	4011,4,c	;volatile
  8579                           
  8580                           ;eusart2.c: 174: RC1STAbits.CREN = 1;
  8581  001710  88AB               	bsf	4011,4,c	;volatile
  8582  001712                     i2l3395:
  8583                           
  8584                           ;eusart2.c: 175: }
  8585                           ;eusart2.c: 178: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
  8586  001712  5031               	movf	_eusart1RxHead,w,c
  8587  001714  0D01               	mullw	1
  8588  001716  0E6B               	movlw	low _eusart1RxBuffer
  8589  001718  24F3               	addwf	prodl,w,c
  8590  00171A  6ED9               	movwf	fsr2l,c
  8591  00171C  0E00               	movlw	high _eusart1RxBuffer
  8592  00171E  20F4               	addwfc	prodh,w,c
  8593  001720  6EDA               	movwf	fsr2h,c
  8594  001722  CFAE FFDF          	movff	4014,indf2	;volatile
  8595  001726  2A31               	incf	_eusart1RxHead,f,c
  8596                           
  8597                           ;eusart2.c: 179: if (sizeof (eusart1RxBuffer) <= eusart1RxHead) {
  8598  001728  0E07               	movlw	7
  8599  00172A  6431               	cpfsgt	_eusart1RxHead,c
  8600  00172C  D002               	goto	i2l3403
  8601                           
  8602                           ;eusart2.c: 180: eusart1RxHead = 0;
  8603  00172E  0E00               	movlw	0
  8604  001730  6E31               	movwf	_eusart1RxHead,c
  8605  001732                     i2l3403:
  8606                           
  8607                           ;eusart2.c: 181: }
  8608                           ;eusart2.c: 182: eusart1RxCount++;
  8609  001732  2A30               	incf	_eusart1RxCount,f,c	;volatile
  8610  001734  0012               	return		;funcret
  8611  001736                     __end_of_EUSART1_Receive_ISR:
  8612                           	opt stack 0
  8613                           tosu	equ	0xFFF
  8614                           tosh	equ	0xFFE
  8615                           tosl	equ	0xFFD
  8616                           pclatu	equ	0xFFB
  8617                           pclath	equ	0xFFA
  8618                           tblptru	equ	0xFF8
  8619                           tblptrh	equ	0xFF7
  8620                           tblptrl	equ	0xFF6
  8621                           tablat	equ	0xFF5
  8622                           prodh	equ	0xFF4
  8623                           prodl	equ	0xFF3
  8624                           intcon	equ	0xFF2
  8625                           intcon2	equ	0xFF1
  8626                           postinc0	equ	0xFEE
  8627                           fsr0h	equ	0xFEA
  8628                           fsr0l	equ	0xFE9
  8629                           wreg	equ	0xFE8
  8630                           postdec1	equ	0xFE5
  8631                           fsr1h	equ	0xFE2
  8632                           fsr1l	equ	0xFE1
  8633                           indf2	equ	0xFDF
  8634                           postinc2	equ	0xFDE
  8635                           postdec2	equ	0xFDD
  8636                           plusw2	equ	0xFDB
  8637                           fsr2h	equ	0xFDA
  8638                           fsr2l	equ	0xFD9
  8639                           status	equ	0xFD8
  8640                           tosu	equ	0xFFF
  8641                           tosh	equ	0xFFE
  8642                           tosl	equ	0xFFD
  8643                           pclatu	equ	0xFFB
  8644                           pclath	equ	0xFFA
  8645                           tblptru	equ	0xFF8
  8646                           tblptrh	equ	0xFF7
  8647                           tblptrl	equ	0xFF6
  8648                           tablat	equ	0xFF5
  8649                           prodh	equ	0xFF4
  8650                           prodl	equ	0xFF3
  8651                           intcon	equ	0xFF2
  8652                           intcon2	equ	0xFF1
  8653                           postinc0	equ	0xFEE
  8654                           fsr0h	equ	0xFEA
  8655                           fsr0l	equ	0xFE9
  8656                           wreg	equ	0xFE8
  8657                           postdec1	equ	0xFE5
  8658                           fsr1h	equ	0xFE2
  8659                           fsr1l	equ	0xFE1
  8660                           indf2	equ	0xFDF
  8661                           postinc2	equ	0xFDE
  8662                           postdec2	equ	0xFDD
  8663                           plusw2	equ	0xFDB
  8664                           fsr2h	equ	0xFDA
  8665                           fsr2l	equ	0xFD9
  8666                           status	equ	0xFD8
  8667                           
  8668                           	psect	text52
  8669  000000                     __ptext52:
  8670                           	opt stack 0
  8671                           tosu	equ	0xFFF
  8672                           tosh	equ	0xFFE
  8673                           tosl	equ	0xFFD
  8674                           pclatu	equ	0xFFB
  8675                           pclath	equ	0xFFA
  8676                           tblptru	equ	0xFF8
  8677                           tblptrh	equ	0xFF7
  8678                           tblptrl	equ	0xFF6
  8679                           tablat	equ	0xFF5
  8680                           prodh	equ	0xFF4
  8681                           prodl	equ	0xFF3
  8682                           intcon	equ	0xFF2
  8683                           intcon2	equ	0xFF1
  8684                           postinc0	equ	0xFEE
  8685                           fsr0h	equ	0xFEA
  8686                           fsr0l	equ	0xFE9
  8687                           wreg	equ	0xFE8
  8688                           postdec1	equ	0xFE5
  8689                           fsr1h	equ	0xFE2
  8690                           fsr1l	equ	0xFE1
  8691                           indf2	equ	0xFDF
  8692                           postinc2	equ	0xFDE
  8693                           postdec2	equ	0xFDD
  8694                           plusw2	equ	0xFDB
  8695                           fsr2h	equ	0xFDA
  8696                           fsr2l	equ	0xFD9
  8697                           status	equ	0xFD8
  8698                           
  8699                           	psect	rparam
  8700  0000                     tosu	equ	0xFFF
  8701                           tosh	equ	0xFFE
  8702                           tosl	equ	0xFFD
  8703                           pclatu	equ	0xFFB
  8704                           pclath	equ	0xFFA
  8705                           tblptru	equ	0xFF8
  8706                           tblptrh	equ	0xFF7
  8707                           tblptrl	equ	0xFF6
  8708                           tablat	equ	0xFF5
  8709                           prodh	equ	0xFF4
  8710                           prodl	equ	0xFF3
  8711                           intcon	equ	0xFF2
  8712                           intcon2	equ	0xFF1
  8713                           postinc0	equ	0xFEE
  8714                           fsr0h	equ	0xFEA
  8715                           fsr0l	equ	0xFE9
  8716                           wreg	equ	0xFE8
  8717                           postdec1	equ	0xFE5
  8718                           fsr1h	equ	0xFE2
  8719                           fsr1l	equ	0xFE1
  8720                           indf2	equ	0xFDF
  8721                           postinc2	equ	0xFDE
  8722                           postdec2	equ	0xFDD
  8723                           plusw2	equ	0xFDB
  8724                           fsr2h	equ	0xFDA
  8725                           fsr2l	equ	0xFD9
  8726                           status	equ	0xFD8
  8727                           
  8728                           	psect	temp
  8729  000045                     btemp:
  8730                           	opt stack 0
  8731  000045                     	ds	1
  8732  0000                     int$flags	set	btemp
  8733                           tosu	equ	0xFFF
  8734                           tosh	equ	0xFFE
  8735                           tosl	equ	0xFFD
  8736                           pclatu	equ	0xFFB
  8737                           pclath	equ	0xFFA
  8738                           tblptru	equ	0xFF8
  8739                           tblptrh	equ	0xFF7
  8740                           tblptrl	equ	0xFF6
  8741                           tablat	equ	0xFF5
  8742                           prodh	equ	0xFF4
  8743                           prodl	equ	0xFF3
  8744                           intcon	equ	0xFF2
  8745                           intcon2	equ	0xFF1
  8746                           postinc0	equ	0xFEE
  8747                           fsr0h	equ	0xFEA
  8748                           fsr0l	equ	0xFE9
  8749                           wreg	equ	0xFE8
  8750                           postdec1	equ	0xFE5
  8751                           fsr1h	equ	0xFE2
  8752                           fsr1l	equ	0xFE1
  8753                           indf2	equ	0xFDF
  8754                           postinc2	equ	0xFDE
  8755                           postdec2	equ	0xFDD
  8756                           plusw2	equ	0xFDB
  8757                           fsr2h	equ	0xFDA
  8758                           fsr2l	equ	0xFD9
  8759                           status	equ	0xFD8


Data Sizes:
    Strings     46
    Constant    490
    Data        1
    BSS         1002
    Persistent  18
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     37      68
    BANK0           160     27     149
    BANK1           256      0     256
    BANK2           256      0     200
    BANK3           256      0     206
    BANK4           256      0     206
    BANK5           256      0       0

Pointer List with Targets:

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 10
		 -> SetCharger@str(COMRAM[10]), NULL(NULL[0]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 10
		 -> SetCharger@str(COMRAM[10]), NULL(NULL[0]), 

    memset@p1	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    memset@p	PTR unsigned char  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    S2221__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    S2221__prbuf$ptr	PTR unsigned char  size(2) Largest target is 10
		 -> SetCharger@str(COMRAM[10]), NULL(NULL[0]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 10
		 -> SetCharger@str(COMRAM[10]), NULL(NULL[0]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 40
		 -> ChargerData(BANK0[40]), 

    UART_buff_peek@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> input_buffer(BANK3[206]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_init@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    crcBufS_get@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_status_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    sp__memset	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    FastTransfer_buffer_flush@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    FastTransfer_buffer_put@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 206
		 -> CRCcheck@arrayHolder(BANK0[3]), receiveData@holder_1756(BANK0[3]), receiveData@holder(BANK0[3]), rx_buffer(BANK2[200]), 
		 -> ring_buffer(BANK1[206]), NULL(NULL[0]), 

    sendStructAddress	PTR unsigned char  size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), NULL(NULL[0]), 

    begin@stufftoreceive	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_get(), 

    serial_read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_get(), 

    begin@stuffpeek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_peek(), 

    serial_peek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_peek(), 

    begin@stuffavailable	PTR FTN()int  size(2) Largest target is 2
		 -> Receive_available(), 

    serial_available	PTR FTN()int  size(2) Largest target is 2
		 -> Absolute function(), Receive_available(), 

    begin@stufftosend	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Send_put(), 

    serial_write	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), Send_put(), 

    begin@ptr	PTR volatile int  size(2) Largest target is 50
		 -> receiveArray(BANK1[50]), 

    receiveArrayAddress	PTR volatile int  size(2) Largest target is 50
		 -> receiveArray(BANK1[50]), NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _FastTransfer_buffer_flush->_memset
    _Send_put->_UART_buff_get
    _Send_put->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc
    _Receive_peek->_UART_buff_peek
    _Receive_get->_UART_buff_get
    _UART_buff_get->_UART_buff_modulo_inc
    _Receive_available->_UART_buff_size
    _ToSend->_FastTransfer_buffer_put
    _FastTransfer_buffer_put->_FastTransfer_buffer_modulo_inc
    _begin->___awdiv
    _EUSART1_Initialize->_UART_buff_init
    _UART_buff_init->_memset

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_EUSART2_Receive_ISR
    _EUSART2_Transmit_ISR->i2_UART_buff_get
    i2_UART_buff_get->i2_UART_buff_modulo_inc
    _EUSART2_Receive_ISR->i2_UART_buff_put
    i2_UART_buff_put->i2_UART_buff_modulo_inc

Critical Paths under _main in BANK0

    _updateComms->_receiveData
    _respondChargerAsECU->_sendData
    _SetBMM->_receiveData
    _sendData->_FastTransfer_buffer_flush
    _receiveData->_CRCcheck
    _CRCcheck->_crcBufS_get
    _ToSend->_FastTransfer_buffer_put
    _CommsStart->_begin

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   40047
                  _SYSTEM_Initialize
                             _SetBMM
                           _ledDebug
                       _updateTimers
 ---------------------------------------------------------------------------------
 (1) _updateTimers                                         8     8      0       0
                                             26 COMRAM     8     8      0
 ---------------------------------------------------------------------------------
 (1) _ledDebug                                             0     0      0   18935
                _respondChargerAsECU
                           _time_Set
                           _time_get
                        _updateComms
 ---------------------------------------------------------------------------------
 (2) _updateComms                                          0     0      0   10715
                        _receiveData
 ---------------------------------------------------------------------------------
 (2) _time_get                                             3     1      2      22
                                             26 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _time_Set                                             3     1      2     108
                                             26 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _respondChargerAsECU                                  0     0      0    8090
                              _Delay
                             _ToSend
                           _sendData
 ---------------------------------------------------------------------------------
 (1) _SetBMM                                               0     0      0   18805
                              _Delay
                             _ToSend
                        _receiveData
                           _sendData
 ---------------------------------------------------------------------------------
 (3) _sendData                                             5     5      0    5704
                                              4 BANK0      5     5      0
                   Absolute function *
                               _CRC8
          _FastTransfer_buffer_flush
                           _Send_put *
                        _crcBufS_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_put                                          7     2      5     742
                                             26 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_flush                            4     0      4    1139
                                              0 BANK0      4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (3) _receiveData                                         18    18      0   10715
                                              9 BANK0     18    18      0
                   Absolute function *
                               _CRC8
                           _CRCcheck
                  _Receive_available *
                        _Receive_get *
                       _Receive_peek *
                           _Send_put *
 ---------------------------------------------------------------------------------
 (4) _Send_put                                             1     1      0    2614
                                              0 BANK0      1     1      0
                      _UART_buff_get
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (5) _UART_buff_put                                        5     2      3    1418
                                             32 COMRAM     5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (4) _Receive_peek                                         0     0      0     139
                     _UART_buff_peek
 ---------------------------------------------------------------------------------
 (5) _UART_buff_peek                                       4     2      2     139
                                             26 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _CRCcheck                                             7     7      0    5114
                                              2 BANK0      7     7      0
                   Absolute function *
                               _CRC8
                  _Receive_available *
                        _Receive_get *
                        _crcBufS_get
                 _crcBufS_status_put
 ---------------------------------------------------------------------------------
 (5) _crcBufS_status_put                                  10     6      4     908
                                             26 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (5) _crcBufS_get                                         12     8      4    1404
                                             26 COMRAM    10     6      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _Receive_get                                          0     0      0    1165
                      _UART_buff_get
 ---------------------------------------------------------------------------------
 (5) _UART_buff_get                                        5     3      2    1165
                                             32 COMRAM     5     3      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (6) _UART_buff_modulo_inc                                 6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _Receive_available                                    2     0      2     150
                                             28 COMRAM     2     0      2
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (5) _UART_buff_size                                       2     0      2     150
                                             26 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _CRC8                                                 7     4      3    1014
                                             26 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (5) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ToSend                                               3     1      2    1828
                                              2 BANK0      3     1      2
            _FastTransfer_buffer_put
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_put                              7     2      5    1535
                                             32 COMRAM     5     0      5
                                              0 BANK0      2     2      0
     _FastTransfer_buffer_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _FastTransfer_buffer_modulo_inc                       6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _Delay                                                5     3      2     558
                                             26 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    2307
                         _CommsStart
                 _EUSART2_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      2     2      0       0
                                             26 COMRAM     2     2      0
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CommsStart                                           0     0      0    2307
                 _EUSART1_Initialize
                              _begin
 ---------------------------------------------------------------------------------
 (3) _begin                                               13     0     13    1292
                                              0 BANK0     13     0     13
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     428
                                             26 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0    1015
                     _UART_buff_init
 ---------------------------------------------------------------------------------
 (4) _UART_buff_init                                       2     0      2    1015
                                             34 COMRAM     2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               8     2      6     830
                                             26 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                          14    14      0    1209
                                             12 COMRAM    14    14      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                _EUSART2_Receive_ISR
               _EUSART2_Transmit_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR0_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART2_Transmit_ISR                                 0     0      0     528
                    i2_UART_buff_get
                   i2_UART_buff_size
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_size                                    2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_get                                     5     3      2     480
                                              6 COMRAM     5     3      2
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (9) _EUSART2_Receive_ISR                                  1     1      0     681
                                             11 COMRAM     1     1      0
                    i2_UART_buff_put
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_put                                     5     2      3     658
                                              6 COMRAM     5     2      3
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (11) i2_UART_buff_modulo_inc                              6     2      4     298
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _CommsStart
       _EUSART1_Initialize
         _UART_buff_init
           _memset
       _begin
         ___awdiv
     _EUSART2_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_StartTimer
   _SetBMM
     _Delay
     _ToSend
       _FastTransfer_buffer_put
         _FastTransfer_buffer_modulo_inc
     _receiveData
       Absolute function(Fake) *
       _CRC8 *
       _CRCcheck *
         Absolute function(Fake) *
         _CRC8 *
         _Receive_available *
           _UART_buff_size
         _Receive_get *
           _UART_buff_get
             _UART_buff_modulo_inc
         _crcBufS_get *
         _crcBufS_status_put *
       _Receive_available *
         _UART_buff_size
       _Receive_get *
         _UART_buff_get
           _UART_buff_modulo_inc
       _Receive_peek *
         _UART_buff_peek
       _Send_put *
         _UART_buff_get
           _UART_buff_modulo_inc
         _UART_buff_put
           _UART_buff_modulo_inc
     _sendData
       Absolute function(Fake) *
       _CRC8 *
       _FastTransfer_buffer_flush *
         _memset
       _Send_put *
         _UART_buff_get
           _UART_buff_modulo_inc
         _UART_buff_put
           _UART_buff_modulo_inc
       _crcBufS_put *
   _ledDebug
     _respondChargerAsECU
       _Delay
       _ToSend
         _FastTransfer_buffer_put
           _FastTransfer_buffer_modulo_inc
       _sendData
         Absolute function(Fake) *
         _CRC8 *
         _FastTransfer_buffer_flush *
           _memset
         _Send_put *
           _UART_buff_get
             _UART_buff_modulo_inc
           _UART_buff_put
             _UART_buff_modulo_inc
         _crcBufS_put *
     _time_Set
     _time_get
     _updateComms
       _receiveData
         Absolute function(Fake) *
         _CRC8 *
         _CRCcheck *
           Absolute function(Fake) *
           _CRC8 *
           _Receive_available *
             _UART_buff_size
           _Receive_get *
             _UART_buff_get
               _UART_buff_modulo_inc
           _crcBufS_get *
           _crcBufS_status_put *
         _Receive_available *
           _UART_buff_size
         _Receive_get *
           _UART_buff_get
             _UART_buff_modulo_inc
         _Receive_peek *
           _UART_buff_peek
         _Send_put *
           _UART_buff_get
             _UART_buff_modulo_inc
           _UART_buff_put
             _UART_buff_modulo_inc
   _updateTimers

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _EUSART2_Receive_ISR
     i2_UART_buff_put
       i2_UART_buff_modulo_inc
   _EUSART2_Transmit_ISR
     i2_UART_buff_get
       i2_UART_buff_modulo_inc
     i2_UART_buff_size
   _TMR0_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      CE      13       80.5%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      CE      11       80.5%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      C8       8       78.1%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0     100       6      100.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     1B      95       4       93.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     25      44       1       72.3%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     43D       9        0.0%
DATA                 0      0     43D      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Fri Sep 16 21:02:18 2016

      __end_of_FastTransfer_buffer_flush 136E                   i2_UART_buff_modulo_inc 178A  
               _eusart1TxBufferRemaining 0042                                        _i 0035  
                           _rx_array_inx 0038                             ___awdiv@sign 0020  
                EUSART2_Receive_ISR@data 000C                             __CFG_CP0$OFF 000000  
                           __CFG_CP1$OFF 000000                             __CFG_CP2$OFF 000000  
                           __CFG_CP3$OFF 000000                                      l614 10F8  
                                    l455 14BC                                      l680 15AA  
                                    l569 0A46                             __CFG_CPB$OFF 000000  
                           __CFG_CPD$OFF 000000     FastTransfer_buffer_flush@clearBuffer 00D4  
                       time_get@WhatTime 001D                                      prod 000FF3  
                                    tosl 000FFD                                      wreg 000FE8  
          i2UART_buff_modulo_inc@modulus 0003                             __CFG_LVP$OFF 000000  
                                   l4021 14A6                                     l4005 10F4  
                                   l4015 1490                                     l4031 14C8  
                                   l4041 1780                                     l4051 16F8  
                                   l3219 1596                                     l4131 0912  
                                   l4029 14C2                                     l4061 0DDE  
                                   l4301 0418                                     l4047 16E8  
                                   l4143 09C2                                     l4303 042C  
                                   l4073 0E72                                     l4057 0DD4  
                                   l4081 0F9E                                     l4153 0A16  
                                   l4161 0A3E                                     l4129 08EA  
                                   l4321 0502                                     l4225 00EC  
                                   l4233 011E                                     l4401 0AF2  
                                   l4139 09AC                                     l4331 05B8  
                                   l4323 051C                                     l4403 0B20  
                                   l4157 0A36                                     l4093 0BB6  
                                   l4325 0536                                     l4317 04CE  
                                   l4333 05D4                                     l4245 01C2  
                                   l4229 011A                                     l4405 0B26  
                                   l4167 079E                                     l4327 0550  
                                   l4319 04E8                                     l4343 05E0  
                                   l4263 0226                                     l4247 01DA  
                                   l4089 1024                                     l4361 0694  
                                   l4329 056A                                     l4265 024C  
                                   l4281 02AE                                     l4249 01E0  
                                   l4257 021A                                     l4409 0B62  
                                   l4099 0C22                                     l4371 074A  
                                   l4363 06AE                                     l4365 06C8  
                                   l4357 0660                                     l4373 0766  
                                   l4293 0372                                     l4285 02D6  
                                   l4277 027C                                     l4381 0772  
                                   l4367 06E2                                     l4359 067A  
                                   l4391 0A7A                                     l2961 11D0  
                                   l2953 11B2                                     l4369 06FC  
                                   l4393 0A94                                     l4481 17E6  
                                   l2971 11F0                                     l2963 11D4  
                                   l2947 11A2                                     l4299 0412  
                                   l4395 0AB0                                     l4459 1514  
                                   l4483 17F0                                     l4397 0ACA  
                                   l2959 11C8                                     l2975 11FA  
                                   l4399 0AE6                     receiveData@crcHolder 00E7  
                                   l2979 1208                                     l3993 1756  
                                   STR_1 7FD1                                     STR_2 7FEC  
                                   STR_3 7FF9                                     STR_4 7FFC  
                                   STR_5 7FF3                                     _CRC8 148A  
                                   STR_9 7FDD                                     _LATA 000F89  
                                   _LATB 000F8A                                     _LATC 000F8B  
                                   _LATD 000F8C                                     _LATE 000F8D  
                                   u4008 08EE                                     u4009 0902  
                                   u4131 079C                                     u4028 0916  
                                   u4029 092A                                     u4038 0932  
                                   u4039 0946                                     u4048 094E  
                                   u4208 0122                                     u4049 0962  
                                   u4401 0316                                     u4209 0136  
                                   u4058 096A                                     u4059 097E  
                                   u4228 0140                                     u4229 0154  
                                   u4328 022A                                     u4248 015E  
                                   u4168 00C6                                     u4329 023E  
                                   u4249 0172                                     u4169 00DA  
                                   u4258 0178                                     u4259 018C  
                                   u4508 053A                                     u4348 0250  
                                   u4268 0192                                     u4188 00F6  
                                   u4349 0266                                     u4269 01A6  
                                   u4189 010A                                     u4518 0554  
                                   u4608 06CC                                     u4528 056E  
                                   u4368 0280                                     u4288 01C6  
                                   u4369 0294                                     u4618 06E6  
                                   u4538 05BC                                     u4458 04B8  
                                   u4378 02B2                                     u4730 18B6  
                                   u4379 02C6                                     u3860 1088  
                                   u4628 0700                                     u4468 04D2  
                                   u4638 074E                                     u4558 064A  
                                   u4478 04EC                                     u4718 0B4A  
                                   u4568 0664                                     u4488 0506  
                                   u4648 0A64                                     u4760 166C  
                                   u4578 067E                                     u4498 0520  
                                   u4658 0A7E                                     u4588 0698  
                                   u3980 0F7E                                     u4668 0A98  
                                   i2l62 16AE                                     u4598 06B2  
                                   u4678 0AB4                                     u4688 0ACE  
                                   u4698 0AF6                                     u4967 159C  
                                   _WPUB 000F61                    ??_EUSART2_Receive_ISR 000C  
                                   _Duty 008B                                     _main 17D8  
                  ??_respondChargerAsECU 0026                          _TMR0_StartTimer 1944  
                                   _time 0026                                     fsr0h 000FEA  
                                   fsr1h 000FE2                                     fsr0l 000FE9  
                                   fsr2h 000FDA                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                                   btemp 0045                            __CFG_BORV$190 000000  
                                   pclat 000FFA                                     prodh 000FF4  
                                   prodl 000FF3          __end_of_FastTransfer_buffer_put 08EA  
                                   start 00B8                            __CFG_IESO$OFF 000000  
           __end_of_EUSART2_Transmit_ISR 1626                             ___param_bank 000010  
         i2UART_buff_modulo_inc@my_value 0005                                    ?_CRC8 001B  
                __end_of_TMR0_Initialize 16DE                         __end_of_CRCcheck 0A48  
         __size_of_OSCILLATOR_Initialize 000E            __end_of_OSCILLATOR_Initialize 1938  
                     crcBufS_put@address 001D                                    ?_main 0001  
                        __end_of___awdiv 1212                                    STR_19 7FE5  
                                  _ANSB0 0079C8                                    _ANSB1 0079C9  
                                  _ANSA3 0079C3                                    _T0CON 000FD5  
                        ___awdiv@divisor 001D                                    _LATB0 007C50  
                                  _LATB1 007C51                                    _LATA3 007C4B  
                                  _LATC0 007C58                                    _LATC1 007C59  
                                  _LATB3 007C53                                    _LATD0 007C60  
                                  _LATB4 007C54                                    _LATB5 007C55  
                                  _LATA7 007C4F                                    _LATD3 007C63  
                         __CFG_DEBUG$OFF 000000                                    i2l170 004E  
                                  i2l172 005A                                    i2l180 007C  
                                  i2l174 0066                                    i2l176 0072  
                                  i2l614 118A                                    i2l645 185C  
                        ___awdiv@counter 001F                                    _TMR0H 000FD7  
                                  _TMR0L 000FD6                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                                  _TRISD 000F95                                    _TRISE 000F96  
                                  _Delay 158C                            __CFG_WRT0$OFF 000000  
                          __CFG_WRT1$OFF 000000                            __CFG_WRT2$OFF 000000  
                            _ChargerData 0099                            __CFG_WRT3$OFF 000000  
                   _EUSART1_Transmit_ISR 1684                           __CFG_EBTR0$OFF 000000  
                         __CFG_FCMEN$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                           __CFG_EBTR3$OFF 000000  
                       __end_of_TMR0_ISR 18A4                                    _Start 002A  
                          __CFG_WRTB$OFF 000000                            __CFG_WRTC$OFF 000000  
                          __CFG_WRTD$OFF 000000                               _CommsStart 1432  
                                  _begin 13D2                                    _ddata 0060  
                         __CFG_EBTRB$OFF 000000                          __end_of_dpowers 7FD1  
                                  _group 002C                       __CFG_MCLRE$EXTMCLR 000000  
                                  _putch 000000                                    pclath 000FFA  
                                  tablat 000FF5                            ??_Receive_get 0026  
                   __size_of_crcBufS_get 00F2                                    plusw2 000FDB  
                         begin@stuffpeek 00DD                     __size_of_crcBufS_put 00D8  
                                  status 000FD8                           __CFG_HFOFST$ON 000000  
                           ?_receiveData 0001                           __CFG_PBADEN$ON 000000  
                           __end_of_CRC8 14D4                          CRCcheck@SentCRC 00D4  
                        __initialization 1292               __end_of_EUSART1_Initialize 1554  
                           __end_of_main 17FA                               ToSend@what 00D4  
                                 ??_CRC8 001E              ?_INTERRUPT_InterruptManager 0001  
                                 ??_main 0026                            __activetblptr 000002  
                       __end_of_Send_put 1656                __size_ofi2_UART_buff_size 0016  
                                 ?_Delay 001B                    ?_EUSART1_Transmit_ISR 0001  
          FastTransfer_buffer_put@towhat 0024                            ?_Receive_peek 0001  
                                 ?_begin 00D2                  __end_of_TMR0_StartTimer 1948  
             __end_of_EUSART2_Initialize 15F4                         ___awdiv@dividend 001B  
                                 _ANSELA 000F38                                   _ANSELB 000F39  
                                 _ANSELC 000F3A                                   _ANSELD 000F3B  
                                 _ANSELE 000F3C                          i2_UART_buff_get 10FC  
                                 _RC1STA 000FAB                                   _RC2STA 000F71  
                        i2_UART_buff_put 0CB0                                   Delay@i 001E  
                                 i2l3403 1732                                   i2l3227 17AA  
                                 i2l3331 0CD0                           __CFG_WDTEN$OFF 000000  
                                 i2l3351 1186                                   i2l3415 161E  
                                 i2l3337 0D3C              UART_buff_modulo_inc@modulus 001D  
                                 i2l3395 1712                                   i2l3389 16AA  
                                 _RCREG1 000FAE                                   _RCREG2 000F74  
                                 _OSCCON 000FD3                                   _SPBRG1 000FAF  
                                 _SPBRG2 000F75                                   _TX1STA 000FAC  
                                 _TX2STA 000F72                                   _TRISB0 007C98  
                                 _TRISB1 007C99                                   _TRISD0 007CA8  
                                 _TRISD2 007CAA                                   _TRISD3 007CAB  
                                 _TXREG1 000FAD                                   _TXREG2 000F73  
                                 _Charge 0087                         __end_of_ledDebug 1684  
                                 _SetBMM 14D4                           __CFG_XINST$OFF 000000  
                                 _ToSend 1818                      __end_of_Receive_get 192A  
                       crcBufS_get@_this 001B              ??_FastTransfer_buffer_flush 0023  
                          _output_buffer 0400                         crcBufS_get@space 001E  
                              ??___awdiv 001F                                CRC8@tempI 0020  
                         __CFG_STVREN$ON 000000                         ?_TMR0_Initialize 0001  
                                 _memset 16DE                                   clear_0 1298  
                                 clear_1 12A4                                   clear_2 12B0  
                                 clear_3 12BE                                   clear_4 12D0  
                                 clear_5 12DC                         ___awdiv@quotient 0021  
                                 _rx_len 0039                         __end_of_sendData 0B96  
                           __pdataCOMRAM 0044                         __end_of_time_Set 1818  
                       __end_of_time_get 190E                            Send_put@_data 00D2  
                           __mediumconst 7DE6                           ??_Receive_peek 001F  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8         __size_of_FastTransfer_buffer_put 0174  
                   _EUSART2_Transmit_ISR 15F4                              ?_CommsStart 0001  
           __end_of_UART_buff_modulo_inc 1760                          _eusart1RxBuffer 006B  
          __size_of_INTERRUPT_Initialize 000C                          _eusart1TxBuffer 0073  
                      _SYSTEM_Initialize 1872                               __accesstop 0060  
                __end_of__initialization 12F4                                ?_CRCcheck 0001  
                     ?_SYSTEM_Initialize 0001                            ___rparam_used 000001  
                ?i2_UART_buff_modulo_inc 0001                             ?_updateComms 0001  
                          __end_of_Delay 15C0                           __pcstackCOMRAM 0001  
                     _crcBufS_status_put 0F94                      ??_SYSTEM_Initialize 0025  
                       crcBufS_put@_this 001B                            __end_of_begin 1432  
                              ?_TMR0_ISR 0001   __end_of_FastTransfer_buffer_modulo_inc 178A  
__size_of_FastTransfer_buffer_modulo_inc 002A           _FastTransfer_buffer_modulo_inc 1760  
           FastTransfer_buffer_put@_this 0021                              ToSend@where 00D6  
                     UART_buff_get@_this 0021                      ?_crcBufS_status_put 001B  
                  __end_of_UART_buff_get 10FC                   ??_EUSART1_Transmit_ISR 0001  
                  __end_of_UART_buff_put 0CB0                                  ??_Delay 001D  
                __end_ofi2_UART_buff_get 118E                  __end_ofi2_UART_buff_put 0DCA  
                  ?_EUSART2_Transmit_ISR 0001              __end_of_EUSART1_Receive_ISR 1736  
              _FastTransfer_buffer_flush 1302                                  CRC8@crc 0021  
                                CRC8@len 001D                                  CRC8@sum 001E  
                                ??_begin 0023                         ?_TMR0_StartTimer 0001  
              __end_of_SYSTEM_Initialize 188C                   receiveData@holder_1756 00E4  
                          _eusart1RxHead 0031                      _addressErrorCounter 0091  
                          _eusart1TxHead 0033                            _eusart1RxTail 0032  
                             __pbssBANK0 0060                               __pbssBANK1 0100  
                             __pbssBANK2 0200                               __pbssBANK3 0300  
                             __pbssBANK4 0400                       __end_of_FONTLOOKUP 7FC7  
                          _eusart1TxTail 0034                          __CFG_PLLCFG$OFF 000000  
                            _Receive_get 191C                               ??_CRCcheck 0026  
                   ??_crcBufS_status_put 001F           __end_ofi2_UART_buff_modulo_inc 17B4  
                             __pnvCOMRAM 003A                        begin@givenAddress 00D5  
                __size_of_UART_buff_init 001E                  __size_of_UART_buff_peek 0024  
                __size_of_UART_buff_size 0016                                  ?_SetBMM 0001  
                              ?_Send_put 0001                     __size_of_receiveData 06BA  
                                ?_ToSend 00D4                       __CFG_CCP2MX$PORTC1 000000  
                             ??_TMR0_ISR 0001                      __size_of_CommsStart 0058  
                     __CFG_CCP3MX$PORTB5 000000      FastTransfer_buffer_modulo_inc@value 001B  
                                ?_memset 001B                               _crc_buffer 00C1  
                       time_Set@WhatTime 001D                             _HeatsinkTemp 008D  
                     UART_buff_put@_this 0021                         i2_UART_buff_size 18E6  
            i2UART_buff_modulo_inc@value 0001                                  _LEDtime 007B  
                                _OSCCON2 000FD2              __end_of_EUSART2_Receive_ISR 1872  
                      _Receive_available 18BA             UART_buff_modulo_inc@my_value 001F  
                      __CFG_PRICLKEN$OFF 000000                                  _OSCTUNE 000F9B  
                              ?_ledDebug 0001                                  _SPBRGH1 000FB0  
                                _SPBRGH2 000F76                                  _SSP1ADD 000FC8  
                    sendData@whereToSend 00D7                      _receiveArrayAddress 00ED  
                                _SSP1BUF 000FC9              __end_of_respondChargerAsECU 158C  
                     ?_Receive_available 001D                               begin@error 00D6  
                    ??_Receive_available 001F                                ?_sendData 0001  
                                _Current 0089                        _alignErrorCounter 0093  
                        __CFG_PWRTEN$OFF 000000                               ??_Send_put 0026  
                                __Hparam 0000                                  __Lparam 0000  
                        __size_of_SetBMM 0044                                ?_time_Set 001B  
                        __size_of_ToSend 001E                     __end_of_Receive_peek 191C  
                              ?_time_get 001B                                  _PowerOn 002E  
                              _AKNAKsend 00F3                                  ___awdiv 118E  
                                _VoltOut 008F                     _UART_buff_modulo_inc 1736  
                                _calc_CS 002F                                  __pcinit 1292  
                        __size_of_memset 002C                                  __ramtop 0600  
                       i2UART_buff_get@c 000B                                  __ptext0 17D8  
                                __ptext1 136E                                  __ptext2 1656  
                                __ptext3 18A4                                  __ptext4 18FC  
                                __ptext5 17FA                                  __ptext6 1554  
                                __ptext7 14D4                                  __ptext8 0A48  
                                __ptext9 0EBC                                _T0CONbits 000FD5  
                       i2UART_buff_put@c 0009                                  _dpowers 7FC7  
                  _OSCILLATOR_Initialize 192A                   ??_EUSART2_Transmit_ISR 000C  
              __end_of_Receive_available 18D0                  _FastTransfer_buffer_put 0776  
                  CRCcheck@calculatedCRC 00D5                       _EUSART1_Initialize 1518  
                       ?i2_UART_buff_get 0007                 ??_PIN_MANAGER_Initialize 001B  
                       ?i2_UART_buff_put 0007             crcBufS_status_put@wantedTime 0023  
                             ??_ledDebug 0026                            ??_crcBufS_get 001F  
                          ??_crcBufS_put 0020               __size_of_SYSTEM_Initialize 001A  
                   end_of_initialization 12F4                                Delay@wait 001B  
                    ?_EUSART1_Initialize 0001                                  memset@c 001D  
                                memset@n 001F                                  memset@p 0021  
                          __Lmediumconst 7DE6                               ??_sendData 00D6  
                     _EUSART2_Initialize 15C0                               ??_time_Set 001D  
                             ??_time_get 001D                    ?_UART_buff_modulo_inc 001B  
                   __size_of_updateComms 0016                                  postdec1 000FE5  
                                postdec2 000FDD                                  postinc0 000FEE  
                                postinc2 000FDE                         begin@stufftosend 00D7  
                    CRCcheck@arrayHolder 00D6                     ??_EUSART1_Initialize 0025  
                    ?_EUSART2_Initialize 0001                   _dataAdressErrorCounter 0097  
                             _rx_address 0037                                _TRISAbits 000F92  
                              _TRISBbits 000F93                                _TRISCbits 000F94  
                              _TRISDbits 000F95                             ??_CommsStart 0025  
                           begin@maxSize 00D4                     ??_EUSART2_Initialize 001B  
     __size_of_FastTransfer_buffer_flush 006C                    i2UART_buff_size@_this 0001  
                         _UART_buff_init 1836                           _UART_buff_peek 17B4  
                         _UART_buff_size 18D0                      __end_of_crcBufS_get 0EBC  
                    __end_of_crcBufS_put 0F94                        __size_of_CRCcheck 015E  
                          ?_updateTimers 0001                            _moduleAddress 0043  
                   _timer0ReloadVal16bit 0040                           __end_of_SetBMM 1518  
                             CRCcheck@rt 00D9                           __end_of_ToSend 1836  
           __end_of_INTERRUPT_Initialize 1944                       __end_of_CommsStart 148A  
                        _crcErrorCounter 0095                        crcBufS_put@oldCRC 001E  
                          __pidataCOMRAM 1948                        __size_of_TMR0_ISR 0018  
              ??_FastTransfer_buffer_put 00D2                   ?_OSCILLATOR_Initialize 0001  
                         __end_of_memset 170A                        crcBufS_put@status 001F  
                           receiveData@r 00EB               __size_of_Receive_available 0016  
                           receiveData@u 00E9                      start_initialization 1292  
               __size_of_TMR0_Initialize 002C          __size_of_PIN_MANAGER_Initialize 0080  
                  crcBufS_get@wantedTime 00D2                   __end_of_UART_buff_init 1854  
                 __end_of_UART_buff_peek 17D8                           UART_buff_get@c 0025  
                 __end_of_UART_buff_size 18E6                             ?_Receive_get 0001  
                         UART_buff_put@c 0023                    __size_of_Receive_peek 000E  
                         ??_updateTimers 001B                 __end_ofi2_UART_buff_size 18FC  
                               ??_SetBMM 0026                                 ??_ToSend 0026  
                 ??_UART_buff_modulo_inc 001F                                 CRC8@data 001B  
                        crcBufS_get@time 001D                        __size_of_Send_put 0030  
                               ??_memset 0021                           _eusart1RxCount 0030  
                            __pbssCOMRAM 0026            __size_of_EUSART1_Transmit_ISR 002E  
                          __pcstackBANK0 00D2                             _Receive_peek 190E  
                    UART_buff_init@_this 0023                              _crcBufS_get 0DCA  
                    UART_buff_peek@_this 001B                              _crcBufS_put 0EBC  
                      __size_of_ledDebug 002E                          ?_UART_buff_init 0023  
                        ?_UART_buff_peek 001B                          ?_UART_buff_size 001B  
           __size_of_EUSART1_Receive_ISR 002C                            ??_receiveData 00DB  
            __size_of_crcBufS_status_put 00D6                               sendData@CS 00D8  
                              __pnvBANK0 00ED                 __size_of_TMR0_StartTimer 0004  
                 __size_of_UART_buff_get 0092                   __size_of_UART_buff_put 011A  
                 _PIN_MANAGER_Initialize 1212                        __size_of_sendData 014E  
                              __pintcode 0008                            __pmediumconst 7DE6  
                               ?___awdiv 001B                        __size_of_time_Set 001E  
                      __size_of_time_get 0012             ??_INTERRUPT_InterruptManager 000D  
                   i2UART_buff_get@_this 0007                                 _BAUD1CON 000FB8  
                               _BAUD2CON 000F70                           __size_of_Delay 0034  
                         __size_of_begin 0060                     _INTERRUPT_Initialize 1938  
                           _receiveArray 01CE                        ??_TMR0_Initialize 001B  
           __size_of_EUSART2_Receive_ISR 001E                                 _CRCcheck 08EA  
                               _LATBbits 000F8A                                 _LATDbits 000F8C  
                    UART_buff_size@_this 001B             __size_of_respondChargerAsECU 0038  
                               _IPR1bits 000F9F                                 _PIE1bits 000F9D  
                               _IPR3bits 000FA5                                 _PIE3bits 000FA3  
    __size_of_INTERRUPT_InterruptManager 00B0                                 i2u281_40 111A  
                               _PIR1bits 000F9E                                 _PIR3bits 000FA4  
                               i2u289_40 160E                      begin@stuffavailable 00DB  
                               _RCONbits 000FD0                         __CFG_WDTPS$32768 000000  
                    __end_of_receiveData 0776                                 _SSP1CON1 000FC6  
                               _TMR0_ISR 188C                                 _SSP1STAT 000FC7  
         FastTransfer_buffer_flush@_this 00D2                             _input_buffer 0300  
                              _rx_buffer 0200                              _lastLEDTime 007F  
                   i2UART_buff_put@_this 0007                            _UART_buff_get 106A  
                          _UART_buff_put 0B96                     __end_of_updateTimers 13D2  
          __size_of_EUSART2_Transmit_ISR 0032                 ??i2_UART_buff_modulo_inc 0005  
                            _INTCON2bits 000FF1                    ?_INTERRUPT_Initialize 0001  
                      _sendStructAddress 00EF                 __size_ofi2_UART_buff_get 0092  
               __size_ofi2_UART_buff_put 011A                            ??_updateComms 0026  
                   __size_of_Receive_get 000E                                 __Hrparam 0000  
                               _Send_put 1626                                 __Lrparam 0000  
                     __CFG_BOREN$SBORDIS 000000                            time_Set@value 001B  
                      __CFG_P2BMX$PORTD2 000000                  ??_OSCILLATOR_Initialize 001B  
                      ??_TMR0_StartTimer 001B                         __size_of___awdiv 0084  
            __size_of_EUSART1_Initialize 003C                      begin@stufftoreceive 00D9  
                         ?_UART_buff_get 0021                           ?_UART_buff_put 0021  
                            CRC8@extract 001F                                sendData@i 00D9  
                               _ledDebug 1656                 crcBufS_status_put@status 001E  
                               __ptext10 1302                                 __ptext11 00BC  
                               __ptext20 106A                                 __ptext12 1626  
                               __ptext21 1736                                 __ptext13 0B96  
                               __ptext30 16B2                                 __ptext22 18BA  
                               __ptext14 190E                                 __ptext31 1944  
                               __ptext23 18D0                                 __ptext15 17B4  
                               __ptext40 1836                                 __ptext32 1212  
                               __ptext24 148A                                 __ptext16 08EA  
                               __ptext41 16DE                                 __ptext33 192A  
                               __ptext25 1818                                 __ptext17 0F94  
                               __ptext50 1684                                 __ptext34 1938  
                               __ptext26 0776                                 __ptext18 0DCA  
                               __ptext51 170A                                 __ptext43 188C  
                               __ptext35 15C0                                 __ptext27 1760  
                               __ptext19 191C                                 __ptext52 0000  
                               __ptext44 15F4                                 __ptext36 1432  
                               __ptext28 158C                                 __ptext45 18E6  
                               __ptext37 13D2                                 __ptext29 1872  
                               __ptext46 10FC                                 __ptext38 118E  
                               __ptext47 1854                                 __ptext39 1518  
                               __ptext48 0CB0                                 __ptext49 178A  
                           _SSP1CON1bits 000FC6                            __size_of_CRC8 004A  
                               begin@ptr 00D2              __size_of_EUSART2_Initialize 0034  
                          _returnAddress 0036                            __size_of_main 0022  
                            _receiveData 00BC                           _Transmit_stall 0044  
                               _sendData 0A48                                 _talkTime 0083  
                      ?i2_UART_buff_size 0001                               _RC1STAbits 000FAB  
                               _time_Set 17FA                               _RC2STAbits 000F71  
                               _time_get 18FC                               _FONTLOOKUP 7DE7  
                     ??i2_UART_buff_size 0003                                 int$flags 0045  
                           _serial_write 003E                      __end_of_updateComms 18BA  
     __end_of_INTERRUPT_InterruptManager 00B8               _INTERRUPT_InterruptManager 0008  
                           _SSP1STATbits 000FC7                      _EUSART1_Receive_ISR 170A  
                      receiveData@holder 00E1                               _INTCONbits 000FF2  
              UART_buff_modulo_inc@value 001B                         ??_UART_buff_init 0025  
                       ??_UART_buff_peek 001D                         ??_UART_buff_size 001D  
                 ??_INTERRUPT_Initialize 001B                                 memset@p1 001B  
                       _serial_available 003A          __size_ofi2_UART_buff_modulo_inc 002A  
                           ?_crcBufS_get 001B                             ?_crcBufS_put 001B  
                               intlevel2 0000                  crcBufS_status_put@_this 001B  
                   ?_EUSART1_Receive_ISR 0001   FastTransfer_buffer_modulo_inc@my_value 001F  
         FastTransfer_buffer_put@towhere 0023                  ?_PIN_MANAGER_Initialize 0001  
           __end_of_EUSART1_Transmit_ISR 16B2                              _ring_buffer 0100  
             ?_FastTransfer_buffer_flush 00D2                        ??i2_UART_buff_get 0009  
                            _serial_peek 00F1                              _serial_read 003C  
                      ??i2_UART_buff_put 000A                 ?_FastTransfer_buffer_put 0021  
          __size_of_UART_buff_modulo_inc 002A                          ??_UART_buff_get 0023  
                  __size_of_updateTimers 0064                          ??_UART_buff_put 0024  
                    _EUSART2_Receive_ISR 1854    FastTransfer_buffer_modulo_inc@modulus 001D  
                    _respondChargerAsECU 1554                   crcBufS_status_put@time 001D  
                        _TMR0_Initialize 16B2                receiveData@crcHolder_1757 00E8  
                      __CFG_T3CMX$PORTC0 000000                           _maxDataAddress 00F4  
             __end_of_crcBufS_status_put 106A                    ??_EUSART1_Receive_ISR 0001  
         __end_of_PIN_MANAGER_Initialize 1292         ??_FastTransfer_buffer_modulo_inc 001F  
        ?_FastTransfer_buffer_modulo_inc 001B                     ?_EUSART2_Receive_ISR 0001  
                      __CFG_FOSC$INTIO67 000000                     ?_respondChargerAsECU 0001  
                            _updateComms 18A4                             _updateTimers 136E  
