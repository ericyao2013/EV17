

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Sat Oct 29 02:10:15 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1
    84                           	psect	text68,global,reloc=2,class=CODE,delta=1
    85                           	psect	text69,global,reloc=2,class=CODE,delta=1
    86                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    87                           	psect	text70,global,reloc=2,class=CODE,delta=1
    88                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    89                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    90  0000                     
    91 ;; Function _Receive_peek is unused but had its address taken
    92  0000                     
    93                           	psect	idataCOMRAM
    94  002616                     __pidataCOMRAM:
    95                           	opt stack 0
    96                           
    97                           ;initializer for _readwhat
    98  002616  0001               	dw	1
    99                           
   100                           ;initializer for _Transmit_stall
   101  002618  01                 	db	1
   102  0000                     _ANSELA	set	3896
   103  0000                     _ANSELB	set	3897
   104  0000                     _ANSELC	set	3898
   105  0000                     _ANSELCbits	set	3898
   106  0000                     _ANSELD	set	3899
   107  0000                     _ANSELE	set	3900
   108  0000                     _CCPTMRS1bits	set	3912
   109  0000                     _ANSB3	set	31179
   110  0000                     _ANSB4	set	31180
   111  0000                     _ANSD7	set	31199
   112  0000                     _ADCON0	set	4034
   113  0000                     _ADCON0bits	set	4034
   114  0000                     _ADCON1	set	4033
   115  0000                     _ADCON2	set	4032
   116  0000                     _ADCON2bits	set	4032
   117  0000                     _ADRESH	set	4036
   118  0000                     _ADRESL	set	4035
   119  0000                     _BAUD1CON	set	4024
   120  0000                     _CCP2CON	set	3942
   121  0000                     _CCPR2H	set	3944
   122  0000                     _CCPR2L	set	3943
   123  0000                     _EEADR	set	4009
   124  0000                     _EECON1bits	set	4006
   125  0000                     _EECON2	set	4007
   126  0000                     _EEDATA	set	4008
   127  0000                     _INTCON2bits	set	4081
   128  0000                     _INTCONbits	set	4082
   129  0000                     _IPR1bits	set	3999
   130  0000                     _LATA	set	3977
   131  0000                     _LATB	set	3978
   132  0000                     _LATC	set	3979
   133  0000                     _LATCbits	set	3979
   134  0000                     _LATD	set	3980
   135  0000                     _LATE	set	3981
   136  0000                     _OSCCON	set	4051
   137  0000                     _OSCCON2	set	4050
   138  0000                     _OSCTUNE	set	3995
   139  0000                     _PIE1bits	set	3997
   140  0000                     _PIR1bits	set	3998
   141  0000                     _PR2	set	4027
   142  0000                     _RC1STA	set	4011
   143  0000                     _RC1STAbits	set	4011
   144  0000                     _RCONbits	set	4048
   145  0000                     _RCREG1	set	4014
   146  0000                     _SPBRG1	set	4015
   147  0000                     _SPBRGH1	set	4016
   148  0000                     _T1CON	set	4045
   149  0000                     _T1CONbits	set	4045
   150  0000                     _T1GCON	set	4044
   151  0000                     _T1GCONbits	set	4044
   152  0000                     _T2CON	set	4026
   153  0000                     _T2CONbits	set	4026
   154  0000                     _TABLAT	set	4085
   155  0000                     _TBLPTRH	set	4087
   156  0000                     _TBLPTRL	set	4086
   157  0000                     _TBLPTRU	set	4088
   158  0000                     _TMR1H	set	4047
   159  0000                     _TMR1L	set	4046
   160  0000                     _TMR2	set	4028
   161  0000                     _TRISA	set	3986
   162  0000                     _TRISB	set	3987
   163  0000                     _TRISC	set	3988
   164  0000                     _TRISCbits	set	3988
   165  0000                     _TRISD	set	3989
   166  0000                     _TRISDbits	set	3989
   167  0000                     _TRISE	set	3990
   168  0000                     _TX1STA	set	4012
   169  0000                     _TXREG1	set	4013
   170  0000                     _WPUB	set	3937
   171  0000                     _LATB0	set	31824
   172  0000                     _LATB3	set	31827
   173  0000                     _LATB4	set	31828
   174  0000                     _LATB5	set	31829
   175  0000                     _LATD4	set	31844
   176  0000                     _LATD5	set	31845
   177  0000                     _LATD6	set	31846
   178  0000                     _LATD7	set	31847
   179  0000                     _TRISB3	set	31899
   180  0000                     _TRISB4	set	31900
   181  0000                     _TRISB5	set	31901
   182                           
   183                           ; #config settings
   184  0000                     
   185                           	psect	cinit
   186  001DD4                     __pcinit:
   187                           	opt stack 0
   188  001DD4                     start_initialization:
   189                           	opt stack 0
   190  001DD4                     __initialization:
   191                           	opt stack 0
   192                           
   193                           ; Clear objects allocated to BANK4 (206 bytes)
   194  001DD4  EE04  F000         	lfsr	0,__pbssBANK4
   195  001DD8  0ECE               	movlw	206
   196  001DDA                     clear_0:
   197  001DDA  6AEE               	clrf	postinc0,c
   198  001DDC  06E8               	decf	wreg,f,c
   199  001DDE  E1FD               	bnz	clear_0
   200                           
   201                           ; Clear objects allocated to BANK3 (206 bytes)
   202  001DE0  EE03  F000         	lfsr	0,__pbssBANK3
   203  001DE4  0ECE               	movlw	206
   204  001DE6                     clear_1:
   205  001DE6  6AEE               	clrf	postinc0,c
   206  001DE8  06E8               	decf	wreg,f,c
   207  001DEA  E1FD               	bnz	clear_1
   208                           
   209                           ; Clear objects allocated to BANK2 (200 bytes)
   210  001DEC  EE02  F000         	lfsr	0,__pbssBANK2
   211  001DF0  0EC8               	movlw	200
   212  001DF2                     clear_2:
   213  001DF2  6AEE               	clrf	postinc0,c
   214  001DF4  06E8               	decf	wreg,f,c
   215  001DF6  E1FD               	bnz	clear_2
   216                           
   217                           ; Clear objects allocated to BANK1 (254 bytes)
   218  001DF8  EE01  F000         	lfsr	0,__pbssBANK1
   219  001DFC  0EFE               	movlw	254
   220  001DFE                     clear_3:
   221  001DFE  6AEE               	clrf	postinc0,c
   222  001E00  06E8               	decf	wreg,f,c
   223  001E02  E1FD               	bnz	clear_3
   224                           
   225                           ; Clear objects allocated to BANK0 (123 bytes)
   226  001E04  EE00  F060         	lfsr	0,__pbssBANK0
   227  001E08  0E7B               	movlw	123
   228  001E0A                     clear_4:
   229  001E0A  6AEE               	clrf	postinc0,c
   230  001E0C  06E8               	decf	wreg,f,c
   231  001E0E  E1FD               	bnz	clear_4
   232                           
   233                           ; Clear objects allocated to COMRAM (27 bytes)
   234  001E10  EE00  F025         	lfsr	0,__pbssCOMRAM
   235  001E14  0E1B               	movlw	27
   236  001E16                     clear_5:
   237  001E16  6AEE               	clrf	postinc0,c
   238  001E18  06E8               	decf	wreg,f,c
   239  001E1A  E1FD               	bnz	clear_5
   240                           
   241                           ; Initialize objects allocated to COMRAM (3 bytes)
   242                           ; load TBLPTR registers with __pidataCOMRAM
   243  001E1C  0E16               	movlw	low __pidataCOMRAM
   244  001E1E  6EF6               	movwf	tblptrl,c
   245  001E20  0E26               	movlw	high __pidataCOMRAM
   246  001E22  6EF7               	movwf	tblptrh,c
   247  001E24  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   248  001E26  6EF8               	movwf	tblptru,c
   249  001E28  0009               	tblrd		*+	;fetch initializer
   250  001E2A  CFF5 F040          	movff	tablat,__pdataCOMRAM
   251  001E2E  0009               	tblrd		*+	;fetch initializer
   252  001E30  CFF5 F041          	movff	tablat,__pdataCOMRAM+1
   253  001E34  0009               	tblrd		*+	;fetch initializer
   254  001E36  CFF5 F042          	movff	tablat,__pdataCOMRAM+2
   255  001E3A                     end_of_initialization:
   256                           	opt stack 0
   257  001E3A                     __end_of__initialization:
   258                           	opt stack 0
   259  001E3A  9043               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   260  001E3C  9243               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   261  001E3E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   262  001E40  6EF8               	movwf	tblptru,c
   263  001E42  0100               	movlb	0
   264  001E44  EFD2  F008         	goto	_main	;jump to C main() function
   265                           tblptru	equ	0xFF8
   266                           tblptrh	equ	0xFF7
   267                           tblptrl	equ	0xFF6
   268                           tablat	equ	0xFF5
   269                           postinc0	equ	0xFEE
   270                           wreg	equ	0xFE8
   271                           
   272                           	psect	bssCOMRAM
   273  000025                     __pbssCOMRAM:
   274                           	opt stack 0
   275  000025                     _group:
   276                           	opt stack 0
   277  000025                     	ds	2
   278  000027                     _prev_pos:
   279                           	opt stack 0
   280  000027                     	ds	2
   281  000029                     _receiveArrayAddress:
   282                           	opt stack 0
   283  000029                     	ds	2
   284  00002B                     _sendStructAddress:
   285                           	opt stack 0
   286  00002B                     	ds	2
   287  00002D                     _serial_available:
   288                           	opt stack 0
   289  00002D                     	ds	2
   290  00002F                     _serial_read:
   291                           	opt stack 0
   292  00002F                     	ds	2
   293  000031                     _serial_write:
   294                           	opt stack 0
   295  000031                     	ds	2
   296  000033                     _timer1ReloadVal:
   297                           	opt stack 0
   298  000033                     	ds	2
   299  000035                     updateComms@previousPowerState:
   300                           	opt stack 0
   301  000035                     	ds	2
   302  000037                     _AKNAKsend:
   303                           	opt stack 0
   304  000037                     	ds	1
   305  000038                     _MCSOn:
   306                           	opt stack 0
   307  000038                     	ds	1
   308  000039                     _calc_CS:
   309                           	opt stack 0
   310  000039                     	ds	1
   311  00003A                     _maxDataAddress:
   312                           	opt stack 0
   313  00003A                     	ds	1
   314  00003B                     _moduleAddress:
   315                           	opt stack 0
   316  00003B                     	ds	1
   317  00003C                     _returnAddress:
   318                           	opt stack 0
   319  00003C                     	ds	1
   320  00003D                     _rx_address:
   321                           	opt stack 0
   322  00003D                     	ds	1
   323  00003E                     _rx_array_inx:
   324                           	opt stack 0
   325  00003E                     	ds	1
   326  00003F                     _rx_len:
   327                           	opt stack 0
   328  00003F                     	ds	1
   329                           tblptru	equ	0xFF8
   330                           tblptrh	equ	0xFF7
   331                           tblptrl	equ	0xFF6
   332                           tablat	equ	0xFF5
   333                           postinc0	equ	0xFEE
   334                           wreg	equ	0xFE8
   335                           
   336                           	psect	dataCOMRAM
   337  000040                     __pdataCOMRAM:
   338                           	opt stack 0
   339  000040                     _readwhat:
   340                           	opt stack 0
   341  000040                     	ds	2
   342  000042                     _Transmit_stall:
   343                           	opt stack 0
   344  000042                     	ds	1
   345                           tblptru	equ	0xFF8
   346                           tblptrh	equ	0xFF7
   347                           tblptrl	equ	0xFF6
   348                           tablat	equ	0xFF5
   349                           postinc0	equ	0xFEE
   350                           wreg	equ	0xFE8
   351                           
   352                           	psect	bssBANK0
   353  000060                     __pbssBANK0:
   354                           	opt stack 0
   355  000060                     _Current:
   356                           	opt stack 0
   357  000060                     	ds	12
   358  00006C                     _CurrentADC:
   359                           	opt stack 0
   360  00006C                     	ds	12
   361  000078                     _Currentcomp:
   362                           	opt stack 0
   363  000078                     	ds	12
   364  000084                     _data:
   365                           	opt stack 0
   366  000084                     	ds	12
   367  000090                     _PDUFalult:
   368                           	opt stack 0
   369  000090                     	ds	8
   370  000098                     _addressErrorCounter:
   371                           	opt stack 0
   372  000098                     	ds	2
   373  00009A                     _alignErrorCounter:
   374                           	opt stack 0
   375  00009A                     	ds	2
   376  00009C                     _crcErrorCounter:
   377                           	opt stack 0
   378  00009C                     	ds	2
   379  00009E                     _dataAdressErrorCounter:
   380                           	opt stack 0
   381  00009E                     	ds	2
   382  0000A0                     _serial_peek:
   383                           	opt stack 0
   384  0000A0                     	ds	2
   385  0000A2                     _receiveArray:
   386                           	opt stack 0
   387  0000A2                     	ds	40
   388  0000CA                     _crc_buffer:
   389                           	opt stack 0
   390  0000CA                     	ds	17
   391                           tblptru	equ	0xFF8
   392                           tblptrh	equ	0xFF7
   393                           tblptrl	equ	0xFF6
   394                           tablat	equ	0xFF5
   395                           postinc0	equ	0xFEE
   396                           wreg	equ	0xFE8
   397                           
   398                           	psect	bssBANK1
   399  000100                     __pbssBANK1:
   400                           	opt stack 0
   401  000100                     _registers:
   402                           	opt stack 0
   403  000100                     	ds	48
   404  000130                     _ring_buffer:
   405                           	opt stack 0
   406  000130                     	ds	206
   407                           tblptru	equ	0xFF8
   408                           tblptrh	equ	0xFF7
   409                           tblptrl	equ	0xFF6
   410                           tablat	equ	0xFF5
   411                           postinc0	equ	0xFEE
   412                           wreg	equ	0xFE8
   413                           
   414                           	psect	bssBANK2
   415  000200                     __pbssBANK2:
   416                           	opt stack 0
   417  000200                     _rx_buffer:
   418                           	opt stack 0
   419  000200                     	ds	200
   420                           tblptru	equ	0xFF8
   421                           tblptrh	equ	0xFF7
   422                           tblptrl	equ	0xFF6
   423                           tablat	equ	0xFF5
   424                           postinc0	equ	0xFEE
   425                           wreg	equ	0xFE8
   426                           
   427                           	psect	bssBANK3
   428  000300                     __pbssBANK3:
   429                           	opt stack 0
   430  000300                     _input_buffer:
   431                           	opt stack 0
   432  000300                     	ds	206
   433                           tblptru	equ	0xFF8
   434                           tblptrh	equ	0xFF7
   435                           tblptrl	equ	0xFF6
   436                           tablat	equ	0xFF5
   437                           postinc0	equ	0xFEE
   438                           wreg	equ	0xFE8
   439                           
   440                           	psect	bssBANK4
   441  000400                     __pbssBANK4:
   442                           	opt stack 0
   443  000400                     _output_buffer:
   444                           	opt stack 0
   445  000400                     	ds	206
   446                           tblptru	equ	0xFF8
   447                           tblptrh	equ	0xFF7
   448                           tblptrl	equ	0xFF6
   449                           tablat	equ	0xFF5
   450                           postinc0	equ	0xFEE
   451                           wreg	equ	0xFE8
   452                           
   453                           	psect	cstackBANK0
   454  0000DB                     __pcstackBANK0:
   455                           	opt stack 0
   456  0000DB                     ??_SetPin595:
   457  0000DB                     ??_UART_buff_get:
   458  0000DB                     FaultsCollector@sendVal:
   459                           	opt stack 0
   460  0000DB                     begin@ptr:
   461                           	opt stack 0
   462  0000DB                     FastTransfer_buffer_put@_this:
   463                           	opt stack 0
   464  0000DB                     FastTransfer_buffer_flush@_this:
   465                           	opt stack 0
   466  0000DB                     UART_buff_init@_this:
   467                           	opt stack 0
   468  0000DB                     UART_buff_put@_this:
   469                           	opt stack 0
   470  0000DB                     Delay@i:
   471                           	opt stack 0
   472                           
   473                           ; 4 bytes @ 0x0
   474  0000DB                     	ds	2
   475  0000DD                     begin@maxSize:
   476                           	opt stack 0
   477  0000DD                     FastTransfer_buffer_put@towhere:
   478                           	opt stack 0
   479  0000DD                     UART_buff_put@c:
   480                           	opt stack 0
   481  0000DD                     UART_buff_get@c:
   482                           	opt stack 0
   483  0000DD                     FaultsCollector@i:
   484                           	opt stack 0
   485  0000DD                     FastTransfer_buffer_flush@clearBuffer:
   486                           	opt stack 0
   487                           
   488                           ; 2 bytes @ 0x2
   489  0000DD                     	ds	1
   490  0000DE                     begin@givenAddress:
   491                           	opt stack 0
   492  0000DE                     Send_put@_data:
   493                           	opt stack 0
   494  0000DE                     FastTransfer_buffer_put@towhat:
   495                           	opt stack 0
   496                           
   497                           ; 2 bytes @ 0x3
   498  0000DE                     	ds	1
   499  0000DF                     ??_receiveData:
   500  0000DF                     ??_sendData:
   501  0000DF                     ??_PotSetpoint:
   502  0000DF                     begin@error:
   503                           	opt stack 0
   504  0000DF                     EnableSlavePower@slave:
   505                           	opt stack 0
   506  0000DF                     writeRegisters@val:
   507                           	opt stack 0
   508                           
   509                           ; 2 bytes @ 0x4
   510  0000DF                     	ds	1
   511  0000E0                     sendData@whereToSend:
   512                           	opt stack 0
   513  0000E0                     begin@stufftosend:
   514                           	opt stack 0
   515  0000E0                     ToSend@what:
   516                           	opt stack 0
   517                           
   518                           ; 2 bytes @ 0x5
   519  0000E0                     	ds	1
   520  0000E1                     sendData@CS:
   521                           	opt stack 0
   522  0000E1                     writeRegisters@i:
   523                           	opt stack 0
   524  0000E1                     PotSetpoint@set_point:
   525                           	opt stack 0
   526                           
   527                           ; 2 bytes @ 0x6
   528  0000E1                     	ds	1
   529  0000E2                     ToSend@where:
   530                           	opt stack 0
   531  0000E2                     begin@stufftoreceive:
   532                           	opt stack 0
   533  0000E2                     sendData@i:
   534                           	opt stack 0
   535                           
   536                           ; 2 bytes @ 0x7
   537  0000E2                     	ds	1
   538  0000E3                     processPowerRequest@powerSet:
   539                           	opt stack 0
   540  0000E3                     PotSetpoint@x:
   541                           	opt stack 0
   542                           
   543                           ; 2 bytes @ 0x8
   544  0000E3                     	ds	1
   545  0000E4                     begin@stuffavailable:
   546                           	opt stack 0
   547                           
   548                           ; 2 bytes @ 0x9
   549  0000E4                     	ds	1
   550  0000E5                     PotSetpoint@new_pos:
   551                           	opt stack 0
   552  0000E5                     receiveData@holder:
   553                           	opt stack 0
   554                           
   555                           ; 3 bytes @ 0xA
   556  0000E5                     	ds	1
   557  0000E6                     begin@stuffpeek:
   558                           	opt stack 0
   559                           
   560                           ; 2 bytes @ 0xB
   561  0000E6                     	ds	2
   562  0000E8                     receiveData@holder_1397:
   563                           	opt stack 0
   564                           
   565                           ; 3 bytes @ 0xD
   566  0000E8                     	ds	3
   567  0000EB                     receiveData@crcHolder:
   568                           	opt stack 0
   569                           
   570                           ; 1 bytes @ 0x10
   571  0000EB                     	ds	1
   572  0000EC                     receiveData@crcHolder_1398:
   573                           	opt stack 0
   574                           
   575                           ; 1 bytes @ 0x11
   576  0000EC                     	ds	1
   577  0000ED                     receiveData@u:
   578                           	opt stack 0
   579                           
   580                           ; 2 bytes @ 0x12
   581  0000ED                     	ds	2
   582  0000EF                     receiveData@r:
   583                           	opt stack 0
   584                           
   585                           ; 2 bytes @ 0x14
   586  0000EF                     	ds	2
   587  0000F1                     main@j:
   588                           	opt stack 0
   589                           
   590                           ; 2 bytes @ 0x16
   591  0000F1                     	ds	2
   592  0000F3                     main@i:
   593                           	opt stack 0
   594                           
   595                           ; 2 bytes @ 0x18
   596  0000F3                     	ds	2
   597  0000F5                     main@UP:
   598                           	opt stack 0
   599                           
   600                           ; 1 bytes @ 0x1A
   601  0000F5                     	ds	1
   602                           tblptru	equ	0xFF8
   603                           tblptrh	equ	0xFF7
   604                           tblptrl	equ	0xFF6
   605                           tablat	equ	0xFF5
   606                           postinc0	equ	0xFEE
   607                           wreg	equ	0xFE8
   608                           
   609                           	psect	cstackCOMRAM
   610  000001                     __pcstackCOMRAM:
   611                           	opt stack 0
   612  000001                     ?_ADC_GetConversion:
   613                           	opt stack 0
   614  000001                     ?___wmul:
   615                           	opt stack 0
   616  000001                     ?i2_UART_buff_size:
   617                           	opt stack 0
   618  000001                     ?i2_UART_buff_modulo_inc:
   619                           	opt stack 0
   620  000001                     ___wmul@multiplier:
   621                           	opt stack 0
   622  000001                     i2SetPin595@Reg:
   623                           	opt stack 0
   624  000001                     i2UART_buff_size@_this:
   625                           	opt stack 0
   626  000001                     i2UART_buff_modulo_inc@value:
   627                           	opt stack 0
   628  000001                     i2Delay@wait:
   629                           	opt stack 0
   630                           
   631                           ; 4 bytes @ 0x0
   632  000001                     	ds	2
   633  000003                     ??_ADC_GetConversion:
   634  000003                     ___wmul@multiplicand:
   635                           	opt stack 0
   636  000003                     i2SetPin595@pin:
   637                           	opt stack 0
   638  000003                     i2UART_buff_modulo_inc@modulus:
   639                           	opt stack 0
   640                           
   641                           ; 2 bytes @ 0x2
   642  000003                     	ds	2
   643  000005                     ??i2_Delay:
   644  000005                     ADC_GetConversion@channel:
   645                           	opt stack 0
   646  000005                     ___wmul@product:
   647                           	opt stack 0
   648  000005                     i2SetPin595@value:
   649                           	opt stack 0
   650  000005                     i2UART_buff_modulo_inc@my_value:
   651                           	opt stack 0
   652                           
   653                           ; 2 bytes @ 0x4
   654  000005                     	ds	1
   655  000006                     i2Delay@i:
   656                           	opt stack 0
   657                           
   658                           ; 4 bytes @ 0x5
   659  000006                     	ds	1
   660  000007                     ??i2_SetPin595:
   661  000007                     FuseSystem@i_1537:
   662                           	opt stack 0
   663  000007                     i2UART_buff_put@_this:
   664                           	opt stack 0
   665  000007                     i2UART_buff_get@_this:
   666                           	opt stack 0
   667                           
   668                           ; 2 bytes @ 0x6
   669  000007                     	ds	2
   670  000009                     ??i2_UART_buff_get:
   671  000009                     i2UART_buff_put@c:
   672                           	opt stack 0
   673  000009                     FuseSystem@i:
   674                           	opt stack 0
   675                           
   676                           ; 2 bytes @ 0x8
   677  000009                     	ds	1
   678  00000A                     ??i2_UART_buff_put:
   679  00000A                     i2writeRegisters@val:
   680                           	opt stack 0
   681                           
   682                           ; 2 bytes @ 0x9
   683  00000A                     	ds	1
   684  00000B                     i2UART_buff_get@c:
   685                           	opt stack 0
   686                           
   687                           ; 1 bytes @ 0xA
   688  00000B                     	ds	1
   689  00000C                     EUSART1_Receive_ISR@data:
   690                           	opt stack 0
   691  00000C                     i2writeRegisters@i:
   692                           	opt stack 0
   693                           
   694                           ; 2 bytes @ 0xB
   695  00000C                     	ds	2
   696  00000E                     ReadCurrent@gather:
   697                           	opt stack 0
   698                           
   699                           ; 1 bytes @ 0xD
   700  00000E                     	ds	1
   701  00000F                     ??_INTERRUPT_InterruptManager:
   702                           
   703                           ; 1 bytes @ 0xE
   704  00000F                     	ds	14
   705  00001D                     ?_FastTransfer_buffer_modulo_inc:
   706                           	opt stack 0
   707  00001D                     ?_UART_buff_modulo_inc:
   708                           	opt stack 0
   709  00001D                     ?_UART_buff_size:
   710                           	opt stack 0
   711  00001D                     ?___awdiv:
   712                           	opt stack 0
   713  00001D                     DATAEE_WriteByte@bData:
   714                           	opt stack 0
   715  00001D                     DATAEE_ReadByte@bAdd:
   716                           	opt stack 0
   717  00001D                     GetPDUFault@loc:
   718                           	opt stack 0
   719  00001D                     PWM4_LoadDutyValue@dutyValue:
   720                           	opt stack 0
   721  00001D                     CRC8@data:
   722                           	opt stack 0
   723  00001D                     FastTransfer_buffer_modulo_inc@value:
   724                           	opt stack 0
   725  00001D                     crcBufS_put@_this:
   726                           	opt stack 0
   727  00001D                     SetPin595@Reg:
   728                           	opt stack 0
   729  00001D                     UART_buff_size@_this:
   730                           	opt stack 0
   731  00001D                     UART_buff_modulo_inc@value:
   732                           	opt stack 0
   733  00001D                     ___awdiv@dividend:
   734                           	opt stack 0
   735  00001D                     memset@p1:
   736                           	opt stack 0
   737  00001D                     Delay@wait:
   738                           	opt stack 0
   739                           
   740                           ; 4 bytes @ 0x1C
   741  00001D                     	ds	1
   742  00001E                     ??_ComputeStorageData:
   743  00001E                     ?_FaultsCollector:
   744                           	opt stack 0
   745  00001E                     DATAEE_WriteByte@bAdd:
   746                           	opt stack 0
   747                           
   748                           ; 1 bytes @ 0x1D
   749  00001E                     	ds	1
   750  00001F                     ??_PWM4_LoadDutyValue:
   751  00001F                     ?_Receive_available:
   752                           	opt stack 0
   753  00001F                     DATAEE_WriteByte@GIEBitValue:
   754                           	opt stack 0
   755  00001F                     CRC8@len:
   756                           	opt stack 0
   757  00001F                     crcBufS_put@address:
   758                           	opt stack 0
   759  00001F                     FastTransfer_buffer_modulo_inc@modulus:
   760                           	opt stack 0
   761  00001F                     SetPin595@pin:
   762                           	opt stack 0
   763  00001F                     UART_buff_modulo_inc@modulus:
   764                           	opt stack 0
   765  00001F                     ___awdiv@divisor:
   766                           	opt stack 0
   767  00001F                     memset@c:
   768                           	opt stack 0
   769                           
   770                           ; 2 bytes @ 0x1E
   771  00001F                     	ds	1
   772  000020                     ??_FaultsCollector:
   773  000020                     CRC8@sum:
   774                           	opt stack 0
   775  000020                     crcBufS_put@oldCRC:
   776                           	opt stack 0
   777  000020                     ComputeStorageData@i:
   778                           	opt stack 0
   779                           
   780                           ; 2 bytes @ 0x1F
   781  000020                     	ds	1
   782  000021                     ??_Delay:
   783  000021                     CRC8@extract:
   784                           	opt stack 0
   785  000021                     crcBufS_put@status:
   786                           	opt stack 0
   787  000021                     ___awdiv@counter:
   788                           	opt stack 0
   789  000021                     FastTransfer_buffer_modulo_inc@my_value:
   790                           	opt stack 0
   791  000021                     SetPin595@value:
   792                           	opt stack 0
   793  000021                     UART_buff_modulo_inc@my_value:
   794                           	opt stack 0
   795  000021                     memset@n:
   796                           	opt stack 0
   797                           
   798                           ; 2 bytes @ 0x20
   799  000021                     	ds	1
   800  000022                     ??_crcBufS_put:
   801  000022                     CRC8@tempI:
   802                           	opt stack 0
   803  000022                     ___awdiv@sign:
   804                           	opt stack 0
   805  000022                     Clear595@i:
   806                           	opt stack 0
   807  000022                     PotSetpoint@new_point:
   808                           	opt stack 0
   809  000022                     PotClear@x:
   810                           	opt stack 0
   811                           
   812                           ; 2 bytes @ 0x21
   813  000022                     	ds	1
   814  000023                     ??_FastTransfer_buffer_put:
   815  000023                     ??_UART_buff_put:
   816  000023                     CRC8@crc:
   817                           	opt stack 0
   818  000023                     EnableSlavePower@onof:
   819                           	opt stack 0
   820  000023                     UART_buff_get@_this:
   821                           	opt stack 0
   822  000023                     ___awdiv@quotient:
   823                           	opt stack 0
   824  000023                     memset@p:
   825                           	opt stack 0
   826                           
   827                           ; 2 bytes @ 0x22
   828  000023                     	ds	1
   829  000024                     
   830                           ; 1 bytes @ 0x23
   831  000024                     	ds	1
   832  000025                     tblptru	equ	0xFF8
   833                           tblptrh	equ	0xFF7
   834                           tblptrl	equ	0xFF6
   835                           tablat	equ	0xFF5
   836                           postinc0	equ	0xFEE
   837                           wreg	equ	0xFE8
   838                           
   839                           ; 1 bytes @ 0x24
   840 ;;
   841 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   842 ;;
   843 ;; *************** function _main *****************
   844 ;; Defined at:
   845 ;;		line 11 in file "main.c"
   846 ;; Parameters:    Size  Location     Type
   847 ;;		None
   848 ;; Auto vars:     Size  Location     Type
   849 ;;  i               2   24[BANK0 ] int 
   850 ;;  j               2   22[BANK0 ] int 
   851 ;;  UP              1   26[BANK0 ] unsigned char 
   852 ;; Return value:  Size  Location     Type
   853 ;;                  1    wreg      void 
   854 ;; Registers used:
   855 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
   856 ;; Tracked objects:
   857 ;;		On entry : 0/0
   858 ;;		On exit  : 0/0
   859 ;;		Unchanged: 0/0
   860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   861 ;;      Params:         0       0       0       0       0       0       0
   862 ;;      Locals:         0       5       0       0       0       0       0
   863 ;;      Temps:          0       0       0       0       0       0       0
   864 ;;      Totals:         0       5       0       0       0       0       0
   865 ;;Total ram usage:        5 bytes
   866 ;; Hardware stack levels required when called:   12
   867 ;; This function calls:
   868 ;;		_ComputeStorageData
   869 ;;		_CoolingCheck
   870 ;;		_CoolingStart
   871 ;;		_CoolingStop
   872 ;;		_DATAEE_WriteByte
   873 ;;		_PDUStartup
   874 ;;		_PWM4_LoadDutyValue
   875 ;;		_PotSetpoint
   876 ;;		_SYSTEM_Initialize
   877 ;;		_updateComms
   878 ;; This function is called by:
   879 ;;		Startup code after reset
   880 ;; This function uses a non-reentrant model
   881 ;;
   882                           
   883                           	psect	text0
   884  0011A4                     __ptext0:
   885                           	opt stack 0
   886  0011A4                     _main:
   887                           	opt stack 19
   888                           
   889                           ;main.c: 13: SYSTEM_Initialize();
   890                           
   891                           ;incstack = 0
   892  0011A4  ECAF  F00E         	call	_SYSTEM_Initialize	;wreg free
   893                           
   894                           ;main.c: 14: PDUStartup();
   895  0011A8  EC8F  F00F         	call	_PDUStartup	;wreg free
   896                           
   897                           ;main.c: 33: (INTCONbits.GIE = 1);
   898  0011AC  8EF2               	bsf	intcon,7,c	;volatile
   899                           
   900                           ;main.c: 36: (INTCONbits.PEIE = 1);
   901  0011AE  8CF2               	bsf	intcon,6,c	;volatile
   902                           
   903                           ;main.c: 43: DATAEE_WriteByte(0, 0x03);
   904  0011B0  0E03               	movlw	3
   905  0011B2  6E1D               	movwf	DATAEE_WriteByte@bData,c
   906  0011B4  0E00               	movlw	0
   907  0011B6  EC22  F011         	call	_DATAEE_WriteByte
   908                           
   909                           ;main.c: 44: DATAEE_WriteByte(1, 0xE8);
   910  0011BA  0EE8               	movlw	232
   911  0011BC  6E1D               	movwf	DATAEE_WriteByte@bData,c
   912  0011BE  0E01               	movlw	1
   913  0011C0  EC22  F011         	call	_DATAEE_WriteByte
   914                           
   915                           ;main.c: 45: DATAEE_WriteByte(2, 0x03);
   916  0011C4  0E03               	movlw	3
   917  0011C6  6E1D               	movwf	DATAEE_WriteByte@bData,c
   918  0011C8  0E02               	movlw	2
   919  0011CA  EC22  F011         	call	_DATAEE_WriteByte
   920                           
   921                           ;main.c: 46: DATAEE_WriteByte(3, 0xE8);
   922  0011CE  0EE8               	movlw	232
   923  0011D0  6E1D               	movwf	DATAEE_WriteByte@bData,c
   924  0011D2  0E03               	movlw	3
   925  0011D4  EC22  F011         	call	_DATAEE_WriteByte
   926                           
   927                           ;main.c: 47: DATAEE_WriteByte(4, 0x03);
   928  0011D8  0E03               	movlw	3
   929  0011DA  6E1D               	movwf	DATAEE_WriteByte@bData,c
   930  0011DC  0E04               	movlw	4
   931  0011DE  EC22  F011         	call	_DATAEE_WriteByte
   932                           
   933                           ;main.c: 48: DATAEE_WriteByte(5, 0xE8);
   934  0011E2  0EE8               	movlw	232
   935  0011E4  6E1D               	movwf	DATAEE_WriteByte@bData,c
   936  0011E6  0E05               	movlw	5
   937  0011E8  EC22  F011         	call	_DATAEE_WriteByte
   938                           
   939                           ;main.c: 49: DATAEE_WriteByte(6, 0x03);
   940  0011EC  0E03               	movlw	3
   941  0011EE  6E1D               	movwf	DATAEE_WriteByte@bData,c
   942  0011F0  0E06               	movlw	6
   943  0011F2  EC22  F011         	call	_DATAEE_WriteByte
   944                           
   945                           ;main.c: 50: DATAEE_WriteByte(7, 0xE8);
   946  0011F6  0EE8               	movlw	232
   947  0011F8  6E1D               	movwf	DATAEE_WriteByte@bData,c
   948  0011FA  0E07               	movlw	7
   949  0011FC  EC22  F011         	call	_DATAEE_WriteByte
   950                           
   951                           ;main.c: 51: DATAEE_WriteByte(8, 0x03);
   952  001200  0E03               	movlw	3
   953  001202  6E1D               	movwf	DATAEE_WriteByte@bData,c
   954  001204  0E08               	movlw	8
   955  001206  EC22  F011         	call	_DATAEE_WriteByte
   956                           
   957                           ;main.c: 52: DATAEE_WriteByte(9, 0xE8);
   958  00120A  0EE8               	movlw	232
   959  00120C  6E1D               	movwf	DATAEE_WriteByte@bData,c
   960  00120E  0E09               	movlw	9
   961  001210  EC22  F011         	call	_DATAEE_WriteByte
   962                           
   963                           ;main.c: 53: DATAEE_WriteByte(10, 0x03);
   964  001214  0E03               	movlw	3
   965  001216  6E1D               	movwf	DATAEE_WriteByte@bData,c
   966  001218  0E0A               	movlw	10
   967  00121A  EC22  F011         	call	_DATAEE_WriteByte
   968                           
   969                           ;main.c: 54: DATAEE_WriteByte(11, 0xE8);
   970  00121E  0EE8               	movlw	232
   971  001220  6E1D               	movwf	DATAEE_WriteByte@bData,c
   972  001222  0E0B               	movlw	11
   973  001224  EC22  F011         	call	_DATAEE_WriteByte
   974                           
   975                           ;main.c: 56: PotSetpoint(0);
   976  001228  0E00               	movlw	0
   977  00122A  6E23               	movwf	PotSetpoint@new_point+1,c
   978  00122C  0E00               	movlw	0
   979  00122E  6E22               	movwf	PotSetpoint@new_point,c
   980  001230  ECF6  F009         	call	_PotSetpoint	;wreg free
   981                           
   982                           ;main.c: 57: PWM4_LoadDutyValue(0);
   983  001234  0E00               	movlw	0
   984  001236  6E1E               	movwf	PWM4_LoadDutyValue@dutyValue+1,c
   985  001238  0E00               	movlw	0
   986  00123A  6E1D               	movwf	PWM4_LoadDutyValue@dutyValue,c
   987  00123C  ECA3  F011         	call	_PWM4_LoadDutyValue	;wreg free
   988                           
   989                           ;main.c: 58: LATCbits.LATC5 = 0;
   990  001240  9A8B               	bcf	3979,5,c	;volatile
   991                           
   992                           ;main.c: 59: int i = 0;
   993  001242  0E00               	movlw	0
   994  001244  0100               	movlb	0	; () banked
   995  001246  6FF4               	movwf	(main@i+1)& (0+255),b
   996  001248  0E00               	movlw	0
   997  00124A  6FF3               	movwf	main@i& (0+255),b
   998                           
   999                           ; BSR set to: 0
  1000                           ;main.c: 60: bool UP = 0;
  1001  00124C  0E00               	movlw	0
  1002  00124E  0100               	movlb	0	; () banked
  1003  001250  6FF5               	movwf	main@UP& (0+255),b
  1004                           
  1005                           ;main.c: 61: ComputeStorageData();
  1006  001252  ECF4  F00A         	call	_ComputeStorageData	;wreg free
  1007                           
  1008                           ;main.c: 63: int j = 1;
  1009  001256  0E00               	movlw	0
  1010  001258  0100               	movlb	0	; () banked
  1011  00125A  6FF2               	movwf	(main@j+1)& (0+255),b
  1012  00125C  0E01               	movlw	1
  1013  00125E  6FF1               	movwf	main@j& (0+255),b
  1014  001260                     l4722:
  1015                           
  1016                           ; BSR set to: 0
  1017                           ;main.c: 65: updateComms();
  1018  001260  EC07  F011         	call	_updateComms	;wreg free
  1019                           
  1020                           ;main.c: 66: if(CoolingCheck() && UP == 0){
  1021  001264  EC07  F013         	call	_CoolingCheck	;wreg free
  1022  001268  0900               	iorlw	0
  1023  00126A  B4D8               	btfsc	status,2,c
  1024  00126C  D00A               	goto	l4732
  1025  00126E  0100               	movlb	0	; () banked
  1026  001270  51F5               	movf	main@UP& (0+255),w,b
  1027  001272  0100               	movlb	0	; () banked
  1028  001274  A4D8               	btfss	status,2,c
  1029  001276  D005               	goto	l4732
  1030                           
  1031                           ; BSR set to: 0
  1032                           ;main.c: 67: UP = 1;
  1033  001278  0E01               	movlw	1
  1034  00127A  0100               	movlb	0	; () banked
  1035  00127C  6FF5               	movwf	main@UP& (0+255),b
  1036                           
  1037                           ; BSR set to: 0
  1038                           ;main.c: 68: CoolingStart();
  1039  00127E  EC7C  F012         	call	_CoolingStart	;wreg free
  1040  001282                     l4732:
  1041                           
  1042                           ;main.c: 69: }
  1043                           ;main.c: 70: if(!CoolingCheck() && UP == 1){
  1044  001282  EC07  F013         	call	_CoolingCheck	;wreg free
  1045  001286  0900               	iorlw	0
  1046  001288  A4D8               	btfss	status,2,c
  1047  00128A  D009               	goto	l4740
  1048  00128C  0100               	movlb	0	; () banked
  1049  00128E  05F5               	decf	main@UP& (0+255),w,b
  1050  001290  A4D8               	btfss	status,2,c
  1051  001292  D005               	goto	l4740
  1052                           
  1053                           ; BSR set to: 0
  1054                           ;main.c: 71: UP = 0;
  1055  001294  0E00               	movlw	0
  1056  001296  0100               	movlb	0	; () banked
  1057  001298  6FF5               	movwf	main@UP& (0+255),b
  1058                           
  1059                           ; BSR set to: 0
  1060                           ;main.c: 72: CoolingStop();
  1061  00129A  ECE1  F012         	call	_CoolingStop	;wreg free
  1062  00129E                     l4740:
  1063                           
  1064                           ;main.c: 73: }
  1065                           ;main.c: 74: i++;
  1066  00129E  0100               	movlb	0	; () banked
  1067  0012A0  4BF3               	infsnz	main@i& (0+255),f,b
  1068  0012A2  2BF4               	incf	(main@i+1)& (0+255),f,b
  1069                           
  1070                           ; BSR set to: 0
  1071                           ;main.c: 75: PWM4_LoadDutyValue(i);
  1072  0012A4  C0F3  F01D         	movff	main@i,PWM4_LoadDutyValue@dutyValue
  1073  0012A8  C0F4  F01E         	movff	main@i+1,PWM4_LoadDutyValue@dutyValue+1
  1074  0012AC  ECA3  F011         	call	_PWM4_LoadDutyValue	;wreg free
  1075                           
  1076                           ;main.c: 76: if(i>500){
  1077  0012B0  0100               	movlb	0	; () banked
  1078  0012B2  BFF4               	btfsc	(main@i+1)& (0+255),7,b
  1079  0012B4  D7D5               	goto	l4722
  1080  0012B6  0EF5               	movlw	245
  1081  0012B8  0100               	movlb	0	; () banked
  1082  0012BA  5DF3               	subwf	main@i& (0+255),w,b
  1083  0012BC  0E01               	movlw	1
  1084  0012BE  0100               	movlb	0	; () banked
  1085  0012C0  59F4               	subwfb	(main@i+1)& (0+255),w,b
  1086  0012C2  A0D8               	btfss	status,0,c
  1087  0012C4  D7CD               	goto	l4722
  1088                           
  1089                           ; BSR set to: 0
  1090                           ;main.c: 77: i = 0;
  1091  0012C6  0E00               	movlw	0
  1092  0012C8  0100               	movlb	0	; () banked
  1093  0012CA  6FF4               	movwf	(main@i+1)& (0+255),b
  1094  0012CC  0E00               	movlw	0
  1095  0012CE  6FF3               	movwf	main@i& (0+255),b
  1096                           
  1097                           ; BSR set to: 0
  1098                           
  1099                           ; BSR set to: 0
  1100  0012D0  D7C7               	goto	l4722
  1101  0012D2                     __end_of_main:
  1102                           	opt stack 0
  1103                           tblptru	equ	0xFF8
  1104                           tblptrh	equ	0xFF7
  1105                           tblptrl	equ	0xFF6
  1106                           tablat	equ	0xFF5
  1107                           intcon	equ	0xFF2
  1108                           postinc0	equ	0xFEE
  1109                           wreg	equ	0xFE8
  1110                           status	equ	0xFD8
  1111                           
  1112 ;; *************** function _updateComms *****************
  1113 ;; Defined at:
  1114 ;;		line 21 in file "Communications.c"
  1115 ;; Parameters:    Size  Location     Type
  1116 ;;		None
  1117 ;; Auto vars:     Size  Location     Type
  1118 ;;		None
  1119 ;; Return value:  Size  Location     Type
  1120 ;;                  1    wreg      void 
  1121 ;; Registers used:
  1122 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  1123 ;; Tracked objects:
  1124 ;;		On entry : 0/0
  1125 ;;		On exit  : 0/0
  1126 ;;		Unchanged: 0/0
  1127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1128 ;;      Params:         0       0       0       0       0       0       0
  1129 ;;      Locals:         0       0       0       0       0       0       0
  1130 ;;      Temps:          0       0       0       0       0       0       0
  1131 ;;      Totals:         0       0       0       0       0       0       0
  1132 ;;Total ram usage:        0 bytes
  1133 ;; Hardware stack levels used:    1
  1134 ;; Hardware stack levels required when called:   11
  1135 ;; This function calls:
  1136 ;;		_processPowerRequest
  1137 ;;		_receiveData
  1138 ;;		_respondECU
  1139 ;; This function is called by:
  1140 ;;		_main
  1141 ;; This function uses a non-reentrant model
  1142 ;;
  1143                           
  1144                           	psect	text1
  1145  00220E                     __ptext1:
  1146                           	opt stack 0
  1147  00220E                     _updateComms:
  1148                           	opt stack 19
  1149                           
  1150                           ;Communications.c: 22: if (receiveData()) {
  1151                           
  1152                           ; BSR set to: 0
  1153                           ;incstack = 0
  1154  00220E  ECA0  F003         	call	_receiveData	;wreg free
  1155  002212  0900               	iorlw	0
  1156  002214  B4D8               	btfsc	status,2,c
  1157  002216  0012               	return	
  1158                           
  1159                           ;Communications.c: 23: static int previousPowerState;
  1160                           ;Communications.c: 24: if (previousPowerState != receiveArray[1]) {
  1161  002218  5035               	movf	updateComms@previousPowerState,w,c
  1162  00221A  0100               	movlb	0	; () banked
  1163  00221C  19A4               	xorwf	(_receiveArray+2)& (0+255),w,b	;volatile
  1164  00221E  E105               	bnz	u4140
  1165  002220  5036               	movf	updateComms@previousPowerState+1,w,c
  1166  002222  0100               	movlb	0	; () banked
  1167  002224  19A5               	xorwf	(_receiveArray+3)& (0+255),w,b	;volatile
  1168  002226  B4D8               	btfsc	status,2,c
  1169  002228  D00A               	goto	l4612
  1170  00222A                     u4140:
  1171                           
  1172                           ; BSR set to: 0
  1173                           ;Communications.c: 25: previousPowerState = receiveArray[1];
  1174  00222A  C0A4  F035         	movff	_receiveArray+2,updateComms@previousPowerState	;volatile
  1175  00222E  C0A5  F036         	movff	_receiveArray+3,updateComms@previousPowerState+1	;volatile
  1176                           
  1177                           ; BSR set to: 0
  1178                           ;Communications.c: 26: processPowerRequest(previousPowerState);
  1179  002232  C035  F0E3         	movff	updateComms@previousPowerState,processPowerRequest@powerSet
  1180  002236  C036  F0E4         	movff	updateComms@previousPowerState+1,processPowerRequest@powerSet+1
  1181  00223A  EC32  F00C         	call	_processPowerRequest	;wreg free
  1182  00223E                     l4612:
  1183                           
  1184                           ;Communications.c: 27: }
  1185                           ;Communications.c: 28: respondECU();
  1186  00223E  EC1E  F010         	call	_respondECU	;wreg free
  1187  002242  0012               	return	
  1188  002244                     __end_of_updateComms:
  1189                           	opt stack 0
  1190                           tblptru	equ	0xFF8
  1191                           tblptrh	equ	0xFF7
  1192                           tblptrl	equ	0xFF6
  1193                           tablat	equ	0xFF5
  1194                           intcon	equ	0xFF2
  1195                           postinc0	equ	0xFEE
  1196                           wreg	equ	0xFE8
  1197                           status	equ	0xFD8
  1198                           
  1199 ;; *************** function _respondECU *****************
  1200 ;; Defined at:
  1201 ;;		line 57 in file "Communications.c"
  1202 ;; Parameters:    Size  Location     Type
  1203 ;;		None
  1204 ;; Auto vars:     Size  Location     Type
  1205 ;;		None
  1206 ;; Return value:  Size  Location     Type
  1207 ;;                  1    wreg      void 
  1208 ;; Registers used:
  1209 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  1210 ;; Tracked objects:
  1211 ;;		On entry : 0/0
  1212 ;;		On exit  : 0/0
  1213 ;;		Unchanged: 0/0
  1214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1215 ;;      Params:         0       0       0       0       0       0       0
  1216 ;;      Locals:         0       0       0       0       0       0       0
  1217 ;;      Temps:          0       0       0       0       0       0       0
  1218 ;;      Totals:         0       0       0       0       0       0       0
  1219 ;;Total ram usage:        0 bytes
  1220 ;; Hardware stack levels used:    1
  1221 ;; Hardware stack levels required when called:   10
  1222 ;; This function calls:
  1223 ;;		_Delay
  1224 ;;		_FaultsCollector
  1225 ;;		_ToSend
  1226 ;;		_sendData
  1227 ;; This function is called by:
  1228 ;;		_updateComms
  1229 ;; This function uses a non-reentrant model
  1230 ;;
  1231                           
  1232                           	psect	text2
  1233  00203C                     __ptext2:
  1234                           	opt stack 0
  1235  00203C                     _respondECU:
  1236                           	opt stack 19
  1237                           
  1238                           ;Communications.c: 58: LATCbits.LATC5 = 1;
  1239                           
  1240                           ;incstack = 0
  1241  00203C  8A8B               	bsf	3979,5,c	;volatile
  1242                           
  1243                           ;Communications.c: 59: ToSend(0, 5);
  1244  00203E  0E00               	movlw	0
  1245  002040  0100               	movlb	0	; () banked
  1246  002042  6FE1               	movwf	(ToSend@what+1)& (0+255),b
  1247  002044  0E05               	movlw	5
  1248  002046  6FE0               	movwf	ToSend@what& (0+255),b
  1249  002048  0E00               	movlw	0
  1250  00204A  EC3B  F012         	call	_ToSend
  1251                           
  1252                           ;Communications.c: 60: ToSend(1,FaultsCollector());
  1253  00204E  EC6F  F00D         	call	_FaultsCollector	;wreg free
  1254  002052  C01E  F0E0         	movff	?_FaultsCollector,ToSend@what
  1255  002056  C01F  F0E1         	movff	?_FaultsCollector+1,ToSend@what+1
  1256  00205A  0E01               	movlw	1
  1257  00205C  EC3B  F012         	call	_ToSend
  1258                           
  1259                           ;Communications.c: 61: Delay(5);
  1260  002060  0E05               	movlw	5
  1261  002062  6E1D               	movwf	Delay@wait,c
  1262  002064  0E00               	movlw	0
  1263  002066  6E1E               	movwf	Delay@wait+1,c
  1264  002068  0E00               	movlw	0
  1265  00206A  6E1F               	movwf	Delay@wait+2,c
  1266  00206C  0E00               	movlw	0
  1267  00206E  6E20               	movwf	Delay@wait+3,c
  1268  002070  EC49  F010         	call	_Delay	;wreg free
  1269                           
  1270                           ;Communications.c: 62: sendData(1);
  1271  002074  0E01               	movlw	1
  1272  002076  EC92  F007         	call	_sendData
  1273                           
  1274                           ;Communications.c: 63: Delay(3);
  1275  00207A  0E03               	movlw	3
  1276  00207C  6E1D               	movwf	Delay@wait,c
  1277  00207E  0E00               	movlw	0
  1278  002080  6E1E               	movwf	Delay@wait+1,c
  1279  002082  0E00               	movlw	0
  1280  002084  6E1F               	movwf	Delay@wait+2,c
  1281  002086  0E00               	movlw	0
  1282  002088  6E20               	movwf	Delay@wait+3,c
  1283  00208A  EC49  F010         	call	_Delay	;wreg free
  1284                           
  1285                           ;Communications.c: 64: LATCbits.LATC5 = 0;
  1286  00208E  9A8B               	bcf	3979,5,c	;volatile
  1287  002090  0012               	return		;funcret
  1288  002092                     __end_of_respondECU:
  1289                           	opt stack 0
  1290                           tblptru	equ	0xFF8
  1291                           tblptrh	equ	0xFF7
  1292                           tblptrl	equ	0xFF6
  1293                           tablat	equ	0xFF5
  1294                           intcon	equ	0xFF2
  1295                           postinc0	equ	0xFEE
  1296                           wreg	equ	0xFE8
  1297                           status	equ	0xFD8
  1298                           
  1299 ;; *************** function _sendData *****************
  1300 ;; Defined at:
  1301 ;;		line 53 in file "FastTransfer.c"
  1302 ;; Parameters:    Size  Location     Type
  1303 ;;  whereToSend     1    wreg     unsigned char 
  1304 ;; Auto vars:     Size  Location     Type
  1305 ;;  whereToSend     1    5[BANK0 ] unsigned char 
  1306 ;;  i               2    7[BANK0 ] int 
  1307 ;;  CS              1    6[BANK0 ] unsigned char 
  1308 ;; Return value:  Size  Location     Type
  1309 ;;                  1    wreg      void 
  1310 ;; Registers used:
  1311 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
  1312 ;; Tracked objects:
  1313 ;;		On entry : 0/0
  1314 ;;		On exit  : 0/0
  1315 ;;		Unchanged: 0/0
  1316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1317 ;;      Params:         0       0       0       0       0       0       0
  1318 ;;      Locals:         0       4       0       0       0       0       0
  1319 ;;      Temps:          0       1       0       0       0       0       0
  1320 ;;      Totals:         0       5       0       0       0       0       0
  1321 ;;Total ram usage:        5 bytes
  1322 ;; Hardware stack levels used:    1
  1323 ;; Hardware stack levels required when called:    9
  1324 ;; This function calls:
  1325 ;;		Absolute function
  1326 ;;		_CRC8
  1327 ;;		_FastTransfer_buffer_flush
  1328 ;;		_Send_put
  1329 ;;		_crcBufS_put
  1330 ;; This function is called by:
  1331 ;;		_respondECU
  1332 ;; This function uses a non-reentrant model
  1333 ;;
  1334                           
  1335                           	psect	text3
  1336  000F24                     __ptext3:
  1337                           	opt stack 0
  1338  000F24                     _sendData:
  1339                           	opt stack 19
  1340                           
  1341                           ;incstack = 0
  1342                           ;sendData@whereToSend stored from wreg
  1343  000F24  0100               	movlb	0	; () banked
  1344  000F26  6FE0               	movwf	sendData@whereToSend& (0+255),b
  1345                           
  1346                           ;FastTransfer.c: 56: unsigned char CS = CRC8(sendStructAddress, ring_buffer.count);
  1347  000F28  C02B  F01D         	movff	_sendStructAddress,CRC8@data
  1348  000F2C  C02C  F01E         	movff	_sendStructAddress+1,CRC8@data+1
  1349  000F30  C1FC  F01F         	movff	_ring_buffer+204,CRC8@len
  1350  000F34  EC9B  F010         	call	_CRC8	;wreg free
  1351  000F38  0100               	movlb	0	; () banked
  1352  000F3A  6FE1               	movwf	sendData@CS& (0+255),b
  1353                           
  1354                           ; BSR set to: 0
  1355                           ;FastTransfer.c: 58: serial_write(0x06);
  1356  000F3C  D801               	call	u3398
  1357  000F3E  D00B               	goto	l4120
  1358  000F40                     u3398:
  1359  000F40  0005               	push	
  1360  000F42  6EFA               	movwf	pclath,c
  1361  000F44  5031               	movf	_serial_write,w,c
  1362  000F46  6EFD               	movwf	tosl,c
  1363  000F48  5032               	movf	_serial_write+1,w,c
  1364  000F4A  6EFE               	movwf	tosh,c
  1365  000F4C  50F8               	movf	tblptru,w,c
  1366  000F4E  6EFF               	movwf	tosu,c
  1367  000F50  50FA               	movf	pclath,w,c
  1368  000F52  0E06               	movlw	6
  1369  000F54  0012               	return		;indir
  1370  000F56                     l4120:
  1371                           
  1372                           ;FastTransfer.c: 59: serial_write(0x85);
  1373  000F56  D801               	call	u3408
  1374  000F58  D00B               	goto	l4122
  1375  000F5A                     u3408:
  1376  000F5A  0005               	push	
  1377  000F5C  6EFA               	movwf	pclath,c
  1378  000F5E  5031               	movf	_serial_write,w,c
  1379  000F60  6EFD               	movwf	tosl,c
  1380  000F62  5032               	movf	_serial_write+1,w,c
  1381  000F64  6EFE               	movwf	tosh,c
  1382  000F66  50F8               	movf	tblptru,w,c
  1383  000F68  6EFF               	movwf	tosu,c
  1384  000F6A  50FA               	movf	pclath,w,c
  1385  000F6C  0E85               	movlw	133
  1386  000F6E  0012               	return		;indir
  1387  000F70                     l4122:
  1388                           
  1389                           ;FastTransfer.c: 60: serial_write(whereToSend);
  1390  000F70  D801               	call	u3418
  1391  000F72  D00C               	goto	l4124
  1392  000F74                     u3418:
  1393  000F74  0005               	push	
  1394  000F76  6EFA               	movwf	pclath,c
  1395  000F78  5031               	movf	_serial_write,w,c
  1396  000F7A  6EFD               	movwf	tosl,c
  1397  000F7C  5032               	movf	_serial_write+1,w,c
  1398  000F7E  6EFE               	movwf	tosh,c
  1399  000F80  50F8               	movf	tblptru,w,c
  1400  000F82  6EFF               	movwf	tosu,c
  1401  000F84  50FA               	movf	pclath,w,c
  1402  000F86  0100               	movlb	0	; () banked
  1403  000F88  51E0               	movf	sendData@whereToSend& (0+255),w,b
  1404  000F8A  0012               	return		;indir
  1405  000F8C                     l4124:
  1406                           
  1407                           ;FastTransfer.c: 61: serial_write(moduleAddress);
  1408  000F8C  D801               	call	u3428
  1409  000F8E  D00B               	goto	l4126
  1410  000F90                     u3428:
  1411  000F90  0005               	push	
  1412  000F92  6EFA               	movwf	pclath,c
  1413  000F94  5031               	movf	_serial_write,w,c
  1414  000F96  6EFD               	movwf	tosl,c
  1415  000F98  5032               	movf	_serial_write+1,w,c
  1416  000F9A  6EFE               	movwf	tosh,c
  1417  000F9C  50F8               	movf	tblptru,w,c
  1418  000F9E  6EFF               	movwf	tosu,c
  1419  000FA0  50FA               	movf	pclath,w,c
  1420  000FA2  503B               	movf	_moduleAddress,w,c
  1421  000FA4  0012               	return		;indir
  1422  000FA6                     l4126:
  1423                           
  1424                           ;FastTransfer.c: 62: serial_write(ring_buffer.count);
  1425  000FA6  D801               	call	u3438
  1426  000FA8  D00C               	goto	l4128
  1427  000FAA                     u3438:
  1428  000FAA  0005               	push	
  1429  000FAC  6EFA               	movwf	pclath,c
  1430  000FAE  5031               	movf	_serial_write,w,c
  1431  000FB0  6EFD               	movwf	tosl,c
  1432  000FB2  5032               	movf	_serial_write+1,w,c
  1433  000FB4  6EFE               	movwf	tosh,c
  1434  000FB6  50F8               	movf	tblptru,w,c
  1435  000FB8  6EFF               	movwf	tosu,c
  1436  000FBA  50FA               	movf	pclath,w,c
  1437  000FBC  0101               	movlb	1	; () banked
  1438  000FBE  51FC               	movf	(_ring_buffer+204)& (0+255),w,b
  1439  000FC0  0012               	return		;indir
  1440  000FC2                     l4128:
  1441                           
  1442                           ;FastTransfer.c: 66: int i;
  1443                           ;FastTransfer.c: 67: for (i = 0; i < ring_buffer.count; i++) {
  1444  000FC2  0E00               	movlw	0
  1445  000FC4  0100               	movlb	0	; () banked
  1446  000FC6  6FE3               	movwf	(sendData@i+1)& (0+255),b
  1447  000FC8  0E00               	movlw	0
  1448  000FCA  6FE2               	movwf	sendData@i& (0+255),b
  1449  000FCC  D018               	goto	l4134
  1450  000FCE                     l4130:
  1451                           
  1452                           ; BSR set to: 0
  1453                           ;FastTransfer.c: 68: serial_write(*(sendStructAddress + i));
  1454  000FCE  D801               	call	u3448
  1455  000FD0  D013               	goto	l4132
  1456  000FD2                     u3448:
  1457  000FD2  0005               	push	
  1458  000FD4  6EFA               	movwf	pclath,c
  1459  000FD6  5031               	movf	_serial_write,w,c
  1460  000FD8  6EFD               	movwf	tosl,c
  1461  000FDA  5032               	movf	_serial_write+1,w,c
  1462  000FDC  6EFE               	movwf	tosh,c
  1463  000FDE  50F8               	movf	tblptru,w,c
  1464  000FE0  6EFF               	movwf	tosu,c
  1465  000FE2  50FA               	movf	pclath,w,c
  1466  000FE4  0100               	movlb	0	; () banked
  1467  000FE6  51E2               	movf	sendData@i& (0+255),w,b
  1468  000FE8  242B               	addwf	_sendStructAddress,w,c
  1469  000FEA  6ED9               	movwf	fsr2l,c
  1470  000FEC  0100               	movlb	0	; () banked
  1471  000FEE  51E3               	movf	(sendData@i+1)& (0+255),w,b
  1472  000FF0  202C               	addwfc	_sendStructAddress+1,w,c
  1473  000FF2  6EDA               	movwf	fsr2h,c
  1474  000FF4  50DF               	movf	indf2,w,c
  1475  000FF6  0012               	return		;indir
  1476  000FF8                     l4132:
  1477  000FF8  0100               	movlb	0	; () banked
  1478  000FFA  4BE2               	infsnz	sendData@i& (0+255),f,b
  1479  000FFC  2BE3               	incf	(sendData@i+1)& (0+255),f,b
  1480  000FFE                     l4134:
  1481                           
  1482                           ; BSR set to: 0
  1483  000FFE  0101               	movlb	1	; () banked
  1484  001000  51FC               	movf	(_ring_buffer+204)& (0+255),w,b
  1485  001002  0100               	movlb	0	; () banked
  1486  001004  5DE2               	subwf	sendData@i& (0+255),w,b
  1487  001006  0100               	movlb	0	; () banked
  1488  001008  51E3               	movf	(sendData@i+1)& (0+255),w,b
  1489  00100A  0A80               	xorlw	128
  1490  00100C  0100               	movlb	0	; () banked
  1491  00100E  6FDF               	movwf	??_sendData& (0+255),b
  1492  001010  0101               	movlb	1	; () banked
  1493  001012  51FD               	movf	(_ring_buffer+205)& (0+255),w,b
  1494  001014  0A80               	xorlw	128
  1495  001016  0100               	movlb	0	; () banked
  1496  001018  59DF               	subwfb	??_sendData& (0+255),w,b
  1497  00101A  A0D8               	btfss	status,0,c
  1498  00101C  D7D8               	goto	l4130
  1499                           
  1500                           ; BSR set to: 0
  1501                           ;FastTransfer.c: 69: }
  1502                           ;FastTransfer.c: 72: serial_write(CS);
  1503                           
  1504                           ; BSR set to: 0
  1505  00101E  D801               	call	u3468
  1506  001020  D00C               	goto	l4138
  1507  001022                     u3468:
  1508  001022  0005               	push	
  1509  001024  6EFA               	movwf	pclath,c
  1510  001026  5031               	movf	_serial_write,w,c
  1511  001028  6EFD               	movwf	tosl,c
  1512  00102A  5032               	movf	_serial_write+1,w,c
  1513  00102C  6EFE               	movwf	tosh,c
  1514  00102E  50F8               	movf	tblptru,w,c
  1515  001030  6EFF               	movwf	tosu,c
  1516  001032  50FA               	movf	pclath,w,c
  1517  001034  0100               	movlb	0	; () banked
  1518  001036  51E1               	movf	sendData@CS& (0+255),w,b
  1519  001038  0012               	return		;indir
  1520  00103A                     l4138:
  1521                           
  1522                           ;FastTransfer.c: 75: crcBufS_put(&crc_buffer, whereToSend, CS, 0);
  1523  00103A  0ECA               	movlw	low _crc_buffer
  1524  00103C  6E1D               	movwf	crcBufS_put@_this,c
  1525  00103E  0E00               	movlw	high _crc_buffer
  1526  001040  6E1E               	movwf	crcBufS_put@_this+1,c
  1527  001042  C0E0  F01F         	movff	sendData@whereToSend,crcBufS_put@address
  1528  001046  C0E1  F020         	movff	sendData@CS,crcBufS_put@oldCRC
  1529  00104A  0E00               	movlw	0
  1530  00104C  6E21               	movwf	crcBufS_put@status,c
  1531  00104E  EC62  F00B         	call	_crcBufS_put
  1532                           
  1533                           ;FastTransfer.c: 78: FastTransfer_buffer_flush(&ring_buffer, 1);
  1534  001052  0E30               	movlw	low _ring_buffer
  1535  001054  0100               	movlb	0	; () banked
  1536  001056  6FDB               	movwf	FastTransfer_buffer_flush@_this& (0+255),b
  1537  001058  0E01               	movlw	high _ring_buffer
  1538  00105A  0100               	movlb	0	; () banked
  1539  00105C  6FDC               	movwf	(FastTransfer_buffer_flush@_this+1)& (0+255),b
  1540  00105E  0E00               	movlw	0
  1541  001060  0100               	movlb	0	; () banked
  1542  001062  6FDE               	movwf	(FastTransfer_buffer_flush@clearBuffer+1)& (0+255),b
  1543  001064  0E01               	movlw	1
  1544  001066  6FDD               	movwf	FastTransfer_buffer_flush@clearBuffer& (0+255),b
  1545  001068  EC24  F00F         	call	_FastTransfer_buffer_flush	;wreg free
  1546  00106C  0012               	return		;funcret
  1547  00106E                     __end_of_sendData:
  1548                           	opt stack 0
  1549                           tosu	equ	0xFFF
  1550                           tosh	equ	0xFFE
  1551                           tosl	equ	0xFFD
  1552                           pclath	equ	0xFFA
  1553                           tblptru	equ	0xFF8
  1554                           tblptrh	equ	0xFF7
  1555                           tblptrl	equ	0xFF6
  1556                           tablat	equ	0xFF5
  1557                           intcon	equ	0xFF2
  1558                           postinc0	equ	0xFEE
  1559                           wreg	equ	0xFE8
  1560                           indf2	equ	0xFDF
  1561                           fsr2h	equ	0xFDA
  1562                           fsr2l	equ	0xFD9
  1563                           status	equ	0xFD8
  1564                           
  1565 ;; *************** function _crcBufS_put *****************
  1566 ;; Defined at:
  1567 ;;		line 322 in file "FastTransfer.c"
  1568 ;; Parameters:    Size  Location     Type
  1569 ;;  _this           2   28[COMRAM] PTR struct crcBufS
  1570 ;;		 -> crc_buffer(17), 
  1571 ;;  address         1   30[COMRAM] unsigned char 
  1572 ;;  oldCRC          1   31[COMRAM] unsigned char 
  1573 ;;  status          1   32[COMRAM] unsigned char 
  1574 ;; Auto vars:     Size  Location     Type
  1575 ;;		None
  1576 ;; Return value:  Size  Location     Type
  1577 ;;                  1    wreg      void 
  1578 ;; Registers used:
  1579 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1580 ;; Tracked objects:
  1581 ;;		On entry : 0/0
  1582 ;;		On exit  : 0/0
  1583 ;;		Unchanged: 0/0
  1584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1585 ;;      Params:         5       0       0       0       0       0       0
  1586 ;;      Locals:         0       0       0       0       0       0       0
  1587 ;;      Temps:          2       0       0       0       0       0       0
  1588 ;;      Totals:         7       0       0       0       0       0       0
  1589 ;;Total ram usage:        7 bytes
  1590 ;; Hardware stack levels used:    1
  1591 ;; Hardware stack levels required when called:    6
  1592 ;; This function calls:
  1593 ;;		Nothing
  1594 ;; This function is called by:
  1595 ;;		_sendData
  1596 ;; This function uses a non-reentrant model
  1597 ;;
  1598                           
  1599                           	psect	text4
  1600  0016C4                     __ptext4:
  1601                           	opt stack 0
  1602  0016C4                     _crcBufS_put:
  1603                           	opt stack 21
  1604                           
  1605                           ;FastTransfer.c: 323: _this->buf[_this->head] = address;
  1606                           
  1607                           ;incstack = 0
  1608  0016C4  EE20 F00F          	lfsr	2,15
  1609  0016C8  501D               	movf	crcBufS_put@_this,w,c
  1610  0016CA  26D9               	addwf	fsr2l,f,c
  1611  0016CC  501E               	movf	crcBufS_put@_this+1,w,c
  1612  0016CE  22DA               	addwfc	fsr2h,f,c
  1613  0016D0  CFDE F022          	movff	postinc2,??_crcBufS_put
  1614  0016D4  CFDD F023          	movff	postdec2,??_crcBufS_put+1
  1615  0016D8  5022               	movf	??_crcBufS_put,w,c
  1616  0016DA  241D               	addwf	crcBufS_put@_this,w,c
  1617  0016DC  6ED9               	movwf	fsr2l,c
  1618  0016DE  5023               	movf	??_crcBufS_put+1,w,c
  1619  0016E0  201E               	addwfc	crcBufS_put@_this+1,w,c
  1620  0016E2  6EDA               	movwf	fsr2h,c
  1621  0016E4  C01F  FFDF         	movff	crcBufS_put@address,indf2
  1622                           
  1623                           ;FastTransfer.c: 324: _this->head++;
  1624  0016E8  EE20 F00F          	lfsr	2,15
  1625  0016EC  501D               	movf	crcBufS_put@_this,w,c
  1626  0016EE  26D9               	addwf	fsr2l,f,c
  1627  0016F0  501E               	movf	crcBufS_put@_this+1,w,c
  1628  0016F2  22DA               	addwfc	fsr2h,f,c
  1629  0016F4  2ADE               	incf	postinc2,f,c
  1630  0016F6  0E00               	movlw	0
  1631  0016F8  22DD               	addwfc	postdec2,f,c
  1632                           
  1633                           ;FastTransfer.c: 325: _this->buf[_this->head] = oldCRC;
  1634  0016FA  EE20 F00F          	lfsr	2,15
  1635  0016FE  501D               	movf	crcBufS_put@_this,w,c
  1636  001700  26D9               	addwf	fsr2l,f,c
  1637  001702  501E               	movf	crcBufS_put@_this+1,w,c
  1638  001704  22DA               	addwfc	fsr2h,f,c
  1639  001706  CFDE F022          	movff	postinc2,??_crcBufS_put
  1640  00170A  CFDD F023          	movff	postdec2,??_crcBufS_put+1
  1641  00170E  5022               	movf	??_crcBufS_put,w,c
  1642  001710  241D               	addwf	crcBufS_put@_this,w,c
  1643  001712  6ED9               	movwf	fsr2l,c
  1644  001714  5023               	movf	??_crcBufS_put+1,w,c
  1645  001716  201E               	addwfc	crcBufS_put@_this+1,w,c
  1646  001718  6EDA               	movwf	fsr2h,c
  1647  00171A  C020  FFDF         	movff	crcBufS_put@oldCRC,indf2
  1648                           
  1649                           ;FastTransfer.c: 326: _this->head++;
  1650  00171E  EE20 F00F          	lfsr	2,15
  1651  001722  501D               	movf	crcBufS_put@_this,w,c
  1652  001724  26D9               	addwf	fsr2l,f,c
  1653  001726  501E               	movf	crcBufS_put@_this+1,w,c
  1654  001728  22DA               	addwfc	fsr2h,f,c
  1655  00172A  2ADE               	incf	postinc2,f,c
  1656  00172C  0E00               	movlw	0
  1657  00172E  22DD               	addwfc	postdec2,f,c
  1658                           
  1659                           ;FastTransfer.c: 327: _this->buf[_this->head] = status;
  1660  001730  EE20 F00F          	lfsr	2,15
  1661  001734  501D               	movf	crcBufS_put@_this,w,c
  1662  001736  26D9               	addwf	fsr2l,f,c
  1663  001738  501E               	movf	crcBufS_put@_this+1,w,c
  1664  00173A  22DA               	addwfc	fsr2h,f,c
  1665  00173C  CFDE F022          	movff	postinc2,??_crcBufS_put
  1666  001740  CFDD F023          	movff	postdec2,??_crcBufS_put+1
  1667  001744  5022               	movf	??_crcBufS_put,w,c
  1668  001746  241D               	addwf	crcBufS_put@_this,w,c
  1669  001748  6ED9               	movwf	fsr2l,c
  1670  00174A  5023               	movf	??_crcBufS_put+1,w,c
  1671  00174C  201E               	addwfc	crcBufS_put@_this+1,w,c
  1672  00174E  6EDA               	movwf	fsr2h,c
  1673  001750  C021  FFDF         	movff	crcBufS_put@status,indf2
  1674                           
  1675                           ;FastTransfer.c: 328: _this->head++;
  1676  001754  EE20 F00F          	lfsr	2,15
  1677  001758  501D               	movf	crcBufS_put@_this,w,c
  1678  00175A  26D9               	addwf	fsr2l,f,c
  1679  00175C  501E               	movf	crcBufS_put@_this+1,w,c
  1680  00175E  22DA               	addwfc	fsr2h,f,c
  1681  001760  2ADE               	incf	postinc2,f,c
  1682  001762  0E00               	movlw	0
  1683  001764  22DD               	addwfc	postdec2,f,c
  1684                           
  1685                           ;FastTransfer.c: 329: if (_this->head >= (5 * 3)) {
  1686  001766  EE20 F00F          	lfsr	2,15
  1687  00176A  501D               	movf	crcBufS_put@_this,w,c
  1688  00176C  26D9               	addwf	fsr2l,f,c
  1689  00176E  501E               	movf	crcBufS_put@_this+1,w,c
  1690  001770  22DA               	addwfc	fsr2h,f,c
  1691  001772  0E01               	movlw	1
  1692  001774  BEDB               	btfsc	plusw2,7,c
  1693  001776  0012               	return	
  1694  001778  0E01               	movlw	1
  1695  00177A  50DB               	movf	plusw2,w,c
  1696  00177C  E104               	bnz	u3280
  1697  00177E  0E0F               	movlw	15
  1698  001780  5CDE               	subwf	postinc2,w,c
  1699  001782  A0D8               	btfss	status,0,c
  1700  001784  0012               	return	
  1701  001786                     u3280:
  1702                           
  1703                           ;FastTransfer.c: 330: _this->head = 0;
  1704  001786  EE20 F00F          	lfsr	2,15
  1705  00178A  501D               	movf	crcBufS_put@_this,w,c
  1706  00178C  26D9               	addwf	fsr2l,f,c
  1707  00178E  501E               	movf	crcBufS_put@_this+1,w,c
  1708  001790  22DA               	addwfc	fsr2h,f,c
  1709  001792  0E00               	movlw	0
  1710  001794  6EDE               	movwf	postinc2,c
  1711  001796  0E00               	movlw	0
  1712  001798  6EDD               	movwf	postdec2,c
  1713  00179A  0012               	return	
  1714  00179C                     __end_of_crcBufS_put:
  1715                           	opt stack 0
  1716                           tosu	equ	0xFFF
  1717                           tosh	equ	0xFFE
  1718                           tosl	equ	0xFFD
  1719                           pclath	equ	0xFFA
  1720                           tblptru	equ	0xFF8
  1721                           tblptrh	equ	0xFF7
  1722                           tblptrl	equ	0xFF6
  1723                           tablat	equ	0xFF5
  1724                           intcon	equ	0xFF2
  1725                           postinc0	equ	0xFEE
  1726                           wreg	equ	0xFE8
  1727                           indf2	equ	0xFDF
  1728                           postinc2	equ	0xFDE
  1729                           postdec2	equ	0xFDD
  1730                           plusw2	equ	0xFDB
  1731                           fsr2h	equ	0xFDA
  1732                           fsr2l	equ	0xFD9
  1733                           status	equ	0xFD8
  1734                           
  1735 ;; *************** function _FastTransfer_buffer_flush *****************
  1736 ;; Defined at:
  1737 ;;		line 262 in file "FastTransfer.c"
  1738 ;; Parameters:    Size  Location     Type
  1739 ;;  _this           2    0[BANK0 ] PTR struct ringBufS
  1740 ;;		 -> ring_buffer(206), 
  1741 ;;  clearBuffer     2    2[BANK0 ] const int 
  1742 ;; Auto vars:     Size  Location     Type
  1743 ;;		None
  1744 ;; Return value:  Size  Location     Type
  1745 ;;                  1    wreg      void 
  1746 ;; Registers used:
  1747 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1748 ;; Tracked objects:
  1749 ;;		On entry : 0/0
  1750 ;;		On exit  : 0/0
  1751 ;;		Unchanged: 0/0
  1752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1753 ;;      Params:         0       4       0       0       0       0       0
  1754 ;;      Locals:         0       0       0       0       0       0       0
  1755 ;;      Temps:          0       0       0       0       0       0       0
  1756 ;;      Totals:         0       4       0       0       0       0       0
  1757 ;;Total ram usage:        4 bytes
  1758 ;; Hardware stack levels used:    1
  1759 ;; Hardware stack levels required when called:    7
  1760 ;; This function calls:
  1761 ;;		_memset
  1762 ;; This function is called by:
  1763 ;;		_sendData
  1764 ;; This function uses a non-reentrant model
  1765 ;;
  1766                           
  1767                           	psect	text5
  1768  001E48                     __ptext5:
  1769                           	opt stack 0
  1770  001E48                     _FastTransfer_buffer_flush:
  1771                           	opt stack 20
  1772                           
  1773                           ;FastTransfer.c: 263: _this->count = 0;
  1774                           
  1775                           ;incstack = 0
  1776  001E48  0100               	movlb	0	; () banked
  1777  001E4A  EE20 F0CC          	lfsr	2,204
  1778  001E4E  51DB               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  1779  001E50  26D9               	addwf	fsr2l,f,c
  1780  001E52  51DC               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  1781  001E54  22DA               	addwfc	fsr2h,f,c
  1782  001E56  0E00               	movlw	0
  1783  001E58  6EDE               	movwf	postinc2,c
  1784  001E5A  0E00               	movlw	0
  1785  001E5C  6EDD               	movwf	postdec2,c
  1786                           
  1787                           ;FastTransfer.c: 264: _this->head = 0;
  1788  001E5E  0100               	movlb	0	; () banked
  1789  001E60  EE20 F0C8          	lfsr	2,200
  1790  001E64  51DB               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  1791  001E66  26D9               	addwf	fsr2l,f,c
  1792  001E68  51DC               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  1793  001E6A  22DA               	addwfc	fsr2h,f,c
  1794  001E6C  0E00               	movlw	0
  1795  001E6E  6EDE               	movwf	postinc2,c
  1796  001E70  0E00               	movlw	0
  1797  001E72  6EDD               	movwf	postdec2,c
  1798                           
  1799                           ;FastTransfer.c: 265: _this->tail = 0;
  1800  001E74  0100               	movlb	0	; () banked
  1801  001E76  EE20 F0CA          	lfsr	2,202
  1802  001E7A  51DB               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  1803  001E7C  26D9               	addwf	fsr2l,f,c
  1804  001E7E  51DC               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  1805  001E80  22DA               	addwfc	fsr2h,f,c
  1806  001E82  0E00               	movlw	0
  1807  001E84  6EDE               	movwf	postinc2,c
  1808  001E86  0E00               	movlw	0
  1809  001E88  6EDD               	movwf	postdec2,c
  1810                           
  1811                           ; BSR set to: 0
  1812                           ;FastTransfer.c: 266: if (clearBuffer) {
  1813  001E8A  0100               	movlb	0	; () banked
  1814  001E8C  51DD               	movf	FastTransfer_buffer_flush@clearBuffer& (0+255),w,b
  1815  001E8E  0100               	movlb	0	; () banked
  1816  001E90  11DE               	iorwf	(FastTransfer_buffer_flush@clearBuffer+1)& (0+255),w,b
  1817  001E92  B4D8               	btfsc	status,2,c
  1818  001E94  0012               	return	
  1819                           
  1820                           ; BSR set to: 0
  1821                           ;FastTransfer.c: 267: memset(_this->buf, 0, sizeof (_this->buf));
  1822  001E96  C0DB  F01D         	movff	FastTransfer_buffer_flush@_this,memset@p1
  1823  001E9A  C0DC  F01E         	movff	FastTransfer_buffer_flush@_this+1,memset@p1+1
  1824  001E9E  0E00               	movlw	0
  1825  001EA0  6E20               	movwf	memset@c+1,c
  1826  001EA2  0E00               	movlw	0
  1827  001EA4  6E1F               	movwf	memset@c,c
  1828  001EA6  0E00               	movlw	0
  1829  001EA8  6E22               	movwf	memset@n+1,c
  1830  001EAA  0EC8               	movlw	200
  1831  001EAC  6E21               	movwf	memset@n,c
  1832  001EAE  ECD3  F011         	call	_memset	;wreg free
  1833  001EB2  0012               	return	
  1834  001EB4                     __end_of_FastTransfer_buffer_flush:
  1835                           	opt stack 0
  1836                           tosu	equ	0xFFF
  1837                           tosh	equ	0xFFE
  1838                           tosl	equ	0xFFD
  1839                           pclath	equ	0xFFA
  1840                           tblptru	equ	0xFF8
  1841                           tblptrh	equ	0xFF7
  1842                           tblptrl	equ	0xFF6
  1843                           tablat	equ	0xFF5
  1844                           intcon	equ	0xFF2
  1845                           postinc0	equ	0xFEE
  1846                           wreg	equ	0xFE8
  1847                           indf2	equ	0xFDF
  1848                           postinc2	equ	0xFDE
  1849                           postdec2	equ	0xFDD
  1850                           plusw2	equ	0xFDB
  1851                           fsr2h	equ	0xFDA
  1852                           fsr2l	equ	0xFD9
  1853                           status	equ	0xFD8
  1854                           
  1855 ;; *************** function _ToSend *****************
  1856 ;; Defined at:
  1857 ;;		line 217 in file "FastTransfer.c"
  1858 ;; Parameters:    Size  Location     Type
  1859 ;;  where           1    wreg     unsigned char 
  1860 ;;  what            2    5[BANK0 ] unsigned int 
  1861 ;; Auto vars:     Size  Location     Type
  1862 ;;  where           1    7[BANK0 ] unsigned char 
  1863 ;; Return value:  Size  Location     Type
  1864 ;;                  1    wreg      void 
  1865 ;; Registers used:
  1866 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1867 ;; Tracked objects:
  1868 ;;		On entry : 0/0
  1869 ;;		On exit  : 0/0
  1870 ;;		Unchanged: 0/0
  1871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1872 ;;      Params:         0       2       0       0       0       0       0
  1873 ;;      Locals:         0       1       0       0       0       0       0
  1874 ;;      Temps:          0       0       0       0       0       0       0
  1875 ;;      Totals:         0       3       0       0       0       0       0
  1876 ;;Total ram usage:        3 bytes
  1877 ;; Hardware stack levels used:    1
  1878 ;; Hardware stack levels required when called:    8
  1879 ;; This function calls:
  1880 ;;		_FastTransfer_buffer_put
  1881 ;; This function is called by:
  1882 ;;		_respondECU
  1883 ;; This function uses a non-reentrant model
  1884 ;;
  1885                           
  1886                           	psect	text6
  1887  002476                     __ptext6:
  1888                           	opt stack 0
  1889  002476                     _ToSend:
  1890                           	opt stack 20
  1891                           
  1892                           ;incstack = 0
  1893                           ;ToSend@where stored from wreg
  1894  002476  0100               	movlb	0	; () banked
  1895  002478  6FE2               	movwf	ToSend@where& (0+255),b
  1896                           
  1897                           ;FastTransfer.c: 218: FastTransfer_buffer_put(&ring_buffer, where, what);
  1898  00247A  0E30               	movlw	low _ring_buffer
  1899  00247C  0100               	movlb	0	; () banked
  1900  00247E  6FDB               	movwf	FastTransfer_buffer_put@_this& (0+255),b
  1901  002480  0E01               	movlw	high _ring_buffer
  1902  002482  0100               	movlb	0	; () banked
  1903  002484  6FDC               	movwf	(FastTransfer_buffer_put@_this+1)& (0+255),b
  1904  002486  C0E2  F0DD         	movff	ToSend@where,FastTransfer_buffer_put@towhere
  1905  00248A  C0E0  F0DE         	movff	ToSend@what,FastTransfer_buffer_put@towhat
  1906  00248E  C0E1  F0DF         	movff	ToSend@what+1,FastTransfer_buffer_put@towhat+1
  1907  002492  ECCB  F006         	call	_FastTransfer_buffer_put	;wreg free
  1908  002496  0012               	return		;funcret
  1909  002498                     __end_of_ToSend:
  1910                           	opt stack 0
  1911                           tosu	equ	0xFFF
  1912                           tosh	equ	0xFFE
  1913                           tosl	equ	0xFFD
  1914                           pclath	equ	0xFFA
  1915                           tblptru	equ	0xFF8
  1916                           tblptrh	equ	0xFF7
  1917                           tblptrl	equ	0xFF6
  1918                           tablat	equ	0xFF5
  1919                           intcon	equ	0xFF2
  1920                           postinc0	equ	0xFEE
  1921                           wreg	equ	0xFE8
  1922                           indf2	equ	0xFDF
  1923                           postinc2	equ	0xFDE
  1924                           postdec2	equ	0xFDD
  1925                           plusw2	equ	0xFDB
  1926                           fsr2h	equ	0xFDA
  1927                           fsr2l	equ	0xFD9
  1928                           status	equ	0xFD8
  1929                           
  1930 ;; *************** function _FastTransfer_buffer_put *****************
  1931 ;; Defined at:
  1932 ;;		line 224 in file "FastTransfer.c"
  1933 ;; Parameters:    Size  Location     Type
  1934 ;;  _this           2    0[BANK0 ] PTR struct ringBufS
  1935 ;;		 -> ring_buffer(206), 
  1936 ;;  towhere         1    2[BANK0 ] unsigned char 
  1937 ;;  towhat          2    3[BANK0 ] unsigned int 
  1938 ;; Auto vars:     Size  Location     Type
  1939 ;;		None
  1940 ;; Return value:  Size  Location     Type
  1941 ;;                  1    wreg      void 
  1942 ;; Registers used:
  1943 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1944 ;; Tracked objects:
  1945 ;;		On entry : 0/0
  1946 ;;		On exit  : 0/0
  1947 ;;		Unchanged: 0/0
  1948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1949 ;;      Params:         0       5       0       0       0       0       0
  1950 ;;      Locals:         0       0       0       0       0       0       0
  1951 ;;      Temps:          2       0       0       0       0       0       0
  1952 ;;      Totals:         2       5       0       0       0       0       0
  1953 ;;Total ram usage:        7 bytes
  1954 ;; Hardware stack levels used:    1
  1955 ;; Hardware stack levels required when called:    7
  1956 ;; This function calls:
  1957 ;;		_FastTransfer_buffer_modulo_inc
  1958 ;; This function is called by:
  1959 ;;		_ToSend
  1960 ;; This function uses a non-reentrant model
  1961 ;;
  1962                           
  1963                           	psect	text7
  1964  000D96                     __ptext7:
  1965                           	opt stack 0
  1966  000D96                     _FastTransfer_buffer_put:
  1967                           	opt stack 20
  1968                           
  1969                           ;FastTransfer.c: 226: group.integer = towhat;
  1970                           
  1971                           ;incstack = 0
  1972  000D96  C0DE  F025         	movff	FastTransfer_buffer_put@towhat,_group
  1973  000D9A  C0DF  F026         	movff	FastTransfer_buffer_put@towhat+1,_group+1
  1974                           
  1975                           ;FastTransfer.c: 228: if (_this->count < (200 - 3)) {
  1976  000D9E  0100               	movlb	0	; () banked
  1977  000DA0  EE20 F0CC          	lfsr	2,204
  1978  000DA4  51DB               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  1979  000DA6  26D9               	addwf	fsr2l,f,c
  1980  000DA8  51DC               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  1981  000DAA  22DA               	addwfc	fsr2h,f,c
  1982  000DAC  0E01               	movlw	1
  1983  000DAE  BEDB               	btfsc	plusw2,7,c
  1984  000DB0  D007               	goto	l4008
  1985  000DB2  0E01               	movlw	1
  1986  000DB4  50DB               	movf	plusw2,w,c
  1987  000DB6  E103               	bnz	u3301
  1988  000DB8  0EC5               	movlw	197
  1989  000DBA  5CDE               	subwf	postinc2,w,c
  1990  000DBC  B0D8               	btfsc	status,0,c
  1991  000DBE                     u3301:
  1992  000DBE  0012               	return	
  1993  000DC0                     l4008:
  1994                           
  1995                           ; BSR set to: 0
  1996                           ;FastTransfer.c: 229: _this->buf[_this->head] = towhere;
  1997  000DC0  0100               	movlb	0	; () banked
  1998  000DC2  EE20 F0C8          	lfsr	2,200
  1999  000DC6  51DB               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  2000  000DC8  26D9               	addwf	fsr2l,f,c
  2001  000DCA  51DC               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  2002  000DCC  22DA               	addwfc	fsr2h,f,c
  2003  000DCE  CFDE F023          	movff	postinc2,??_FastTransfer_buffer_put
  2004  000DD2  CFDD F024          	movff	postdec2,??_FastTransfer_buffer_put+1
  2005  000DD6  5023               	movf	??_FastTransfer_buffer_put,w,c
  2006  000DD8  0100               	movlb	0	; () banked
  2007  000DDA  25DB               	addwf	FastTransfer_buffer_put@_this& (0+255),w,b
  2008  000DDC  6ED9               	movwf	fsr2l,c
  2009  000DDE  5024               	movf	??_FastTransfer_buffer_put+1,w,c
  2010  000DE0  0100               	movlb	0	; () banked
  2011  000DE2  21DC               	addwfc	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  2012  000DE4  6EDA               	movwf	fsr2h,c
  2013  000DE6  C0DD  FFDF         	movff	FastTransfer_buffer_put@towhere,indf2
  2014                           
  2015                           ; BSR set to: 0
  2016                           ;FastTransfer.c: 230: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  2017  000DEA  0100               	movlb	0	; () banked
  2018  000DEC  EE20 F0C8          	lfsr	2,200
  2019  000DF0  51DB               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  2020  000DF2  26D9               	addwf	fsr2l,f,c
  2021  000DF4  51DC               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  2022  000DF6  22DA               	addwfc	fsr2h,f,c
  2023  000DF8  CFDE F01D          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  2024  000DFC  CFDD F01E          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  2025  000E00  0E00               	movlw	0
  2026  000E02  6E20               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  2027  000E04  0EC8               	movlw	200
  2028  000E06  6E1F               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  2029  000E08  ECE9  F011         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  2030  000E0C  0100               	movlb	0	; () banked
  2031  000E0E  EE20 F0C8          	lfsr	2,200
  2032  000E12  51DB               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  2033  000E14  26D9               	addwf	fsr2l,f,c
  2034  000E16  51DC               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  2035  000E18  22DA               	addwfc	fsr2h,f,c
  2036  000E1A  C01D  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  2037  000E1E  C01E  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  2038                           
  2039                           ; BSR set to: 0
  2040                           ;FastTransfer.c: 231: ++_this->count;
  2041  000E22  0100               	movlb	0	; () banked
  2042  000E24  EE20 F0CC          	lfsr	2,204
  2043  000E28  51DB               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  2044  000E2A  26D9               	addwf	fsr2l,f,c
  2045  000E2C  51DC               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  2046  000E2E  22DA               	addwfc	fsr2h,f,c
  2047  000E30  2ADE               	incf	postinc2,f,c
  2048  000E32  0E00               	movlw	0
  2049  000E34  22DD               	addwfc	postdec2,f,c
  2050                           
  2051                           ; BSR set to: 0
  2052                           ;FastTransfer.c: 232: _this->buf[_this->head] = group.parts[0];
  2053  000E36  0100               	movlb	0	; () banked
  2054  000E38  EE20 F0C8          	lfsr	2,200
  2055  000E3C  51DB               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  2056  000E3E  26D9               	addwf	fsr2l,f,c
  2057  000E40  51DC               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  2058  000E42  22DA               	addwfc	fsr2h,f,c
  2059  000E44  CFDE F023          	movff	postinc2,??_FastTransfer_buffer_put
  2060  000E48  CFDD F024          	movff	postdec2,??_FastTransfer_buffer_put+1
  2061  000E4C  5023               	movf	??_FastTransfer_buffer_put,w,c
  2062  000E4E  0100               	movlb	0	; () banked
  2063  000E50  25DB               	addwf	FastTransfer_buffer_put@_this& (0+255),w,b
  2064  000E52  6ED9               	movwf	fsr2l,c
  2065  000E54  5024               	movf	??_FastTransfer_buffer_put+1,w,c
  2066  000E56  0100               	movlb	0	; () banked
  2067  000E58  21DC               	addwfc	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  2068  000E5A  6EDA               	movwf	fsr2h,c
  2069  000E5C  C025  FFDF         	movff	_group,indf2
  2070                           
  2071                           ; BSR set to: 0
  2072                           ;FastTransfer.c: 233: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  2073  000E60  0100               	movlb	0	; () banked
  2074  000E62  EE20 F0C8          	lfsr	2,200
  2075  000E66  51DB               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  2076  000E68  26D9               	addwf	fsr2l,f,c
  2077  000E6A  51DC               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  2078  000E6C  22DA               	addwfc	fsr2h,f,c
  2079  000E6E  CFDE F01D          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  2080  000E72  CFDD F01E          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  2081  000E76  0E00               	movlw	0
  2082  000E78  6E20               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  2083  000E7A  0EC8               	movlw	200
  2084  000E7C  6E1F               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  2085  000E7E  ECE9  F011         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  2086  000E82  0100               	movlb	0	; () banked
  2087  000E84  EE20 F0C8          	lfsr	2,200
  2088  000E88  51DB               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  2089  000E8A  26D9               	addwf	fsr2l,f,c
  2090  000E8C  51DC               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  2091  000E8E  22DA               	addwfc	fsr2h,f,c
  2092  000E90  C01D  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  2093  000E94  C01E  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  2094                           
  2095                           ;FastTransfer.c: 234: ++_this->count;
  2096  000E98  0100               	movlb	0	; () banked
  2097  000E9A  EE20 F0CC          	lfsr	2,204
  2098  000E9E  51DB               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  2099  000EA0  26D9               	addwf	fsr2l,f,c
  2100  000EA2  51DC               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  2101  000EA4  22DA               	addwfc	fsr2h,f,c
  2102  000EA6  2ADE               	incf	postinc2,f,c
  2103  000EA8  0E00               	movlw	0
  2104  000EAA  22DD               	addwfc	postdec2,f,c
  2105                           
  2106                           ;FastTransfer.c: 235: _this->buf[_this->head] = group.parts[1];
  2107  000EAC  0100               	movlb	0	; () banked
  2108  000EAE  EE20 F0C8          	lfsr	2,200
  2109  000EB2  51DB               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  2110  000EB4  26D9               	addwf	fsr2l,f,c
  2111  000EB6  51DC               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  2112  000EB8  22DA               	addwfc	fsr2h,f,c
  2113  000EBA  CFDE F023          	movff	postinc2,??_FastTransfer_buffer_put
  2114  000EBE  CFDD F024          	movff	postdec2,??_FastTransfer_buffer_put+1
  2115  000EC2  5023               	movf	??_FastTransfer_buffer_put,w,c
  2116  000EC4  0100               	movlb	0	; () banked
  2117  000EC6  25DB               	addwf	FastTransfer_buffer_put@_this& (0+255),w,b
  2118  000EC8  6ED9               	movwf	fsr2l,c
  2119  000ECA  5024               	movf	??_FastTransfer_buffer_put+1,w,c
  2120  000ECC  0100               	movlb	0	; () banked
  2121  000ECE  21DC               	addwfc	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  2122  000ED0  6EDA               	movwf	fsr2h,c
  2123  000ED2  C026  FFDF         	movff	_group+1,indf2
  2124                           
  2125                           ; BSR set to: 0
  2126                           ;FastTransfer.c: 236: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  2127  000ED6  0100               	movlb	0	; () banked
  2128  000ED8  EE20 F0C8          	lfsr	2,200
  2129  000EDC  51DB               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  2130  000EDE  26D9               	addwf	fsr2l,f,c
  2131  000EE0  51DC               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  2132  000EE2  22DA               	addwfc	fsr2h,f,c
  2133  000EE4  CFDE F01D          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  2134  000EE8  CFDD F01E          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  2135  000EEC  0E00               	movlw	0
  2136  000EEE  6E20               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  2137  000EF0  0EC8               	movlw	200
  2138  000EF2  6E1F               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  2139  000EF4  ECE9  F011         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  2140  000EF8  0100               	movlb	0	; () banked
  2141  000EFA  EE20 F0C8          	lfsr	2,200
  2142  000EFE  51DB               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  2143  000F00  26D9               	addwf	fsr2l,f,c
  2144  000F02  51DC               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  2145  000F04  22DA               	addwfc	fsr2h,f,c
  2146  000F06  C01D  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  2147  000F0A  C01E  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  2148                           
  2149                           ; BSR set to: 0
  2150                           ;FastTransfer.c: 237: ++_this->count;
  2151  000F0E  0100               	movlb	0	; () banked
  2152  000F10  EE20 F0CC          	lfsr	2,204
  2153  000F14  51DB               	movf	FastTransfer_buffer_put@_this& (0+255),w,b
  2154  000F16  26D9               	addwf	fsr2l,f,c
  2155  000F18  51DC               	movf	(FastTransfer_buffer_put@_this+1)& (0+255),w,b
  2156  000F1A  22DA               	addwfc	fsr2h,f,c
  2157  000F1C  2ADE               	incf	postinc2,f,c
  2158  000F1E  0E00               	movlw	0
  2159  000F20  22DD               	addwfc	postdec2,f,c
  2160  000F22  0012               	return	
  2161  000F24                     __end_of_FastTransfer_buffer_put:
  2162                           	opt stack 0
  2163                           tosu	equ	0xFFF
  2164                           tosh	equ	0xFFE
  2165                           tosl	equ	0xFFD
  2166                           pclath	equ	0xFFA
  2167                           tblptru	equ	0xFF8
  2168                           tblptrh	equ	0xFF7
  2169                           tblptrl	equ	0xFF6
  2170                           tablat	equ	0xFF5
  2171                           intcon	equ	0xFF2
  2172                           postinc0	equ	0xFEE
  2173                           wreg	equ	0xFE8
  2174                           indf2	equ	0xFDF
  2175                           postinc2	equ	0xFDE
  2176                           postdec2	equ	0xFDD
  2177                           plusw2	equ	0xFDB
  2178                           fsr2h	equ	0xFDA
  2179                           fsr2l	equ	0xFD9
  2180                           status	equ	0xFD8
  2181                           
  2182 ;; *************** function _FastTransfer_buffer_modulo_inc *****************
  2183 ;; Defined at:
  2184 ;;		line 274 in file "FastTransfer.c"
  2185 ;; Parameters:    Size  Location     Type
  2186 ;;  value           2   28[COMRAM] const unsigned int 
  2187 ;;  modulus         2   30[COMRAM] const unsigned int 
  2188 ;; Auto vars:     Size  Location     Type
  2189 ;;  my_value        2   32[COMRAM] unsigned int 
  2190 ;; Return value:  Size  Location     Type
  2191 ;;                  2   28[COMRAM] unsigned int 
  2192 ;; Registers used:
  2193 ;;		wreg, status,2, status,0
  2194 ;; Tracked objects:
  2195 ;;		On entry : 0/0
  2196 ;;		On exit  : 0/0
  2197 ;;		Unchanged: 0/0
  2198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2199 ;;      Params:         4       0       0       0       0       0       0
  2200 ;;      Locals:         2       0       0       0       0       0       0
  2201 ;;      Temps:          0       0       0       0       0       0       0
  2202 ;;      Totals:         6       0       0       0       0       0       0
  2203 ;;Total ram usage:        6 bytes
  2204 ;; Hardware stack levels used:    1
  2205 ;; Hardware stack levels required when called:    6
  2206 ;; This function calls:
  2207 ;;		Nothing
  2208 ;; This function is called by:
  2209 ;;		_FastTransfer_buffer_put
  2210 ;;		_FastTransfer_buffer_get
  2211 ;; This function uses a non-reentrant model
  2212 ;;
  2213                           
  2214                           	psect	text8
  2215  0023D2                     __ptext8:
  2216                           	opt stack 0
  2217  0023D2                     _FastTransfer_buffer_modulo_inc:
  2218                           	opt stack 20
  2219                           
  2220                           ;FastTransfer.c: 275: unsigned int my_value = value + 1;
  2221                           
  2222                           ; BSR set to: 0
  2223                           ;incstack = 0
  2224  0023D2  0E01               	movlw	1
  2225  0023D4  241D               	addwf	FastTransfer_buffer_modulo_inc@value,w,c
  2226  0023D6  6E21               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  2227  0023D8  0E00               	movlw	0
  2228  0023DA  201E               	addwfc	FastTransfer_buffer_modulo_inc@value+1,w,c
  2229  0023DC  6E22               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  2230                           
  2231                           ;FastTransfer.c: 276: if (my_value >= modulus) {
  2232  0023DE  501F               	movf	FastTransfer_buffer_modulo_inc@modulus,w,c
  2233  0023E0  5C21               	subwf	FastTransfer_buffer_modulo_inc@my_value,w,c
  2234  0023E2  5020               	movf	FastTransfer_buffer_modulo_inc@modulus+1,w,c
  2235  0023E4  5822               	subwfb	FastTransfer_buffer_modulo_inc@my_value+1,w,c
  2236  0023E6  A0D8               	btfss	status,0,c
  2237  0023E8  D004               	goto	l3928
  2238                           
  2239                           ;FastTransfer.c: 277: my_value = 0;
  2240  0023EA  0E00               	movlw	0
  2241  0023EC  6E22               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  2242  0023EE  0E00               	movlw	0
  2243  0023F0  6E21               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  2244  0023F2                     l3928:
  2245                           
  2246                           ;FastTransfer.c: 278: }
  2247                           ;FastTransfer.c: 279: return (my_value);
  2248  0023F2  C021  F01D         	movff	FastTransfer_buffer_modulo_inc@my_value,?_FastTransfer_buffer_modulo_inc
  2249  0023F6  C022  F01E         	movff	FastTransfer_buffer_modulo_inc@my_value+1,?_FastTransfer_buffer_modulo_inc+1
  2250  0023FA  0012               	return	
  2251  0023FC                     __end_of_FastTransfer_buffer_modulo_inc:
  2252                           	opt stack 0
  2253                           tosu	equ	0xFFF
  2254                           tosh	equ	0xFFE
  2255                           tosl	equ	0xFFD
  2256                           pclath	equ	0xFFA
  2257                           tblptru	equ	0xFF8
  2258                           tblptrh	equ	0xFF7
  2259                           tblptrl	equ	0xFF6
  2260                           tablat	equ	0xFF5
  2261                           intcon	equ	0xFF2
  2262                           postinc0	equ	0xFEE
  2263                           wreg	equ	0xFE8
  2264                           indf2	equ	0xFDF
  2265                           postinc2	equ	0xFDE
  2266                           postdec2	equ	0xFDD
  2267                           plusw2	equ	0xFDB
  2268                           fsr2h	equ	0xFDA
  2269                           fsr2l	equ	0xFD9
  2270                           status	equ	0xFD8
  2271                           
  2272 ;; *************** function _FaultsCollector *****************
  2273 ;; Defined at:
  2274 ;;		line 48 in file "Communications.c"
  2275 ;; Parameters:    Size  Location     Type
  2276 ;;		None
  2277 ;; Auto vars:     Size  Location     Type
  2278 ;;  i               2    2[BANK0 ] int 
  2279 ;;  sendVal         2    0[BANK0 ] unsigned int 
  2280 ;; Return value:  Size  Location     Type
  2281 ;;                  2   29[COMRAM] unsigned int 
  2282 ;; Registers used:
  2283 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2284 ;; Tracked objects:
  2285 ;;		On entry : 0/0
  2286 ;;		On exit  : 0/0
  2287 ;;		Unchanged: 0/0
  2288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2289 ;;      Params:         2       0       0       0       0       0       0
  2290 ;;      Locals:         0       4       0       0       0       0       0
  2291 ;;      Temps:          3       0       0       0       0       0       0
  2292 ;;      Totals:         5       4       0       0       0       0       0
  2293 ;;Total ram usage:        9 bytes
  2294 ;; Hardware stack levels used:    1
  2295 ;; Hardware stack levels required when called:    7
  2296 ;; This function calls:
  2297 ;;		_GetPDUFault
  2298 ;; This function is called by:
  2299 ;;		_respondECU
  2300 ;; This function uses a non-reentrant model
  2301 ;;
  2302                           
  2303                           	psect	text9
  2304  001ADE                     __ptext9:
  2305                           	opt stack 0
  2306  001ADE                     _FaultsCollector:
  2307                           	opt stack 21
  2308                           
  2309                           ;Communications.c: 49: unsigned int sendVal = 0;
  2310                           
  2311                           ;incstack = 0
  2312  001ADE  0E00               	movlw	0
  2313  001AE0  0100               	movlb	0	; () banked
  2314  001AE2  6FDC               	movwf	(FaultsCollector@sendVal+1)& (0+255),b
  2315  001AE4  0E00               	movlw	0
  2316  001AE6  6FDB               	movwf	FaultsCollector@sendVal& (0+255),b
  2317                           
  2318                           ;Communications.c: 50: int i = 0;
  2319  001AE8  0E00               	movlw	0
  2320  001AEA  0100               	movlb	0	; () banked
  2321  001AEC  6FDE               	movwf	(FaultsCollector@i+1)& (0+255),b
  2322  001AEE  0E00               	movlw	0
  2323  001AF0  6FDD               	movwf	FaultsCollector@i& (0+255),b
  2324                           
  2325                           ;Communications.c: 51: for (i = 0; i < 5; i++) {
  2326  001AF2  0E00               	movlw	0
  2327  001AF4  0100               	movlb	0	; () banked
  2328  001AF6  6FDE               	movwf	(FaultsCollector@i+1)& (0+255),b
  2329  001AF8  0E00               	movlw	0
  2330  001AFA  6FDD               	movwf	FaultsCollector@i& (0+255),b
  2331                           
  2332                           ; BSR set to: 0
  2333  001AFC  0100               	movlb	0	; () banked
  2334  001AFE  BFDE               	btfsc	(FaultsCollector@i+1)& (0+255),7,b
  2335  001B00  D008               	goto	l4108
  2336  001B02  0100               	movlb	0	; () banked
  2337  001B04  51DE               	movf	(FaultsCollector@i+1)& (0+255),w,b
  2338  001B06  E129               	bnz	l411
  2339  001B08  0E05               	movlw	5
  2340  001B0A  0100               	movlb	0	; () banked
  2341  001B0C  5DDD               	subwf	FaultsCollector@i& (0+255),w,b
  2342  001B0E  B0D8               	btfsc	status,0,c
  2343  001B10  D024               	goto	l411
  2344  001B12                     l4108:
  2345                           
  2346                           ; BSR set to: 0
  2347                           ;Communications.c: 52: sendVal = sendVal | ((GetPDUFault(i)&0x01) << i);
  2348  001B12  C0DD  F020         	movff	FaultsCollector@i,??_FaultsCollector
  2349  001B16  0100               	movlb	0	; () banked
  2350  001B18  51DD               	movf	FaultsCollector@i& (0+255),w,b
  2351  001B1A  EC97  F012         	call	_GetPDUFault
  2352  001B1E  0B01               	andlw	1
  2353  001B20  6E21               	movwf	(??_FaultsCollector+1)& (0+255),c
  2354  001B22  6A22               	clrf	(??_FaultsCollector+2)& (0+255),c
  2355  001B24  2A20               	incf	??_FaultsCollector,f,c
  2356  001B26  D003               	goto	u3374
  2357  001B28                     u3375:
  2358  001B28  90D8               	bcf	status,0,c
  2359  001B2A  3621               	rlcf	??_FaultsCollector+1,f,c
  2360  001B2C  3622               	rlcf	??_FaultsCollector+2,f,c
  2361  001B2E                     u3374:
  2362  001B2E  2E20               	decfsz	??_FaultsCollector,f,c
  2363  001B30  D7FB               	goto	u3375
  2364  001B32  0100               	movlb	0	; () banked
  2365  001B34  51DB               	movf	FaultsCollector@sendVal& (0+255),w,b
  2366  001B36  1021               	iorwf	??_FaultsCollector+1,w,c
  2367  001B38  0100               	movlb	0	; () banked
  2368  001B3A  6FDB               	movwf	FaultsCollector@sendVal& (0+255),b
  2369  001B3C  0100               	movlb	0	; () banked
  2370  001B3E  51DC               	movf	(FaultsCollector@sendVal+1)& (0+255),w,b
  2371  001B40  1022               	iorwf	??_FaultsCollector+2,w,c
  2372  001B42  0100               	movlb	0	; () banked
  2373  001B44  6FDC               	movwf	(FaultsCollector@sendVal+1)& (0+255),b
  2374                           
  2375                           ; BSR set to: 0
  2376  001B46  0100               	movlb	0	; () banked
  2377  001B48  4BDD               	infsnz	FaultsCollector@i& (0+255),f,b
  2378  001B4A  2BDE               	incf	(FaultsCollector@i+1)& (0+255),f,b
  2379                           
  2380                           ; BSR set to: 0
  2381  001B4C  0100               	movlb	0	; () banked
  2382  001B4E  BFDE               	btfsc	(FaultsCollector@i+1)& (0+255),7,b
  2383  001B50  D7E0               	goto	l4108
  2384  001B52  0100               	movlb	0	; () banked
  2385  001B54  51DE               	movf	(FaultsCollector@i+1)& (0+255),w,b
  2386  001B56  E101               	bnz	u3380
  2387  001B58  D7D7               	goto	L1
  2388  001B5A                     u3380:
  2389  001B5A                     l411:
  2390                           
  2391                           ; BSR set to: 0
  2392                           ;Communications.c: 53: }
  2393                           ;Communications.c: 54: return sendVal;
  2394  001B5A  C0DB  F01E         	movff	FaultsCollector@sendVal,?_FaultsCollector
  2395  001B5E  C0DC  F01F         	movff	FaultsCollector@sendVal+1,?_FaultsCollector+1
  2396                           
  2397                           ; BSR set to: 0
  2398  001B62  0012               	return		;funcret
  2399  001B64                     __end_of_FaultsCollector:
  2400                           	opt stack 0
  2401                           tosu	equ	0xFFF
  2402                           tosh	equ	0xFFE
  2403                           tosl	equ	0xFFD
  2404                           pclath	equ	0xFFA
  2405                           tblptru	equ	0xFF8
  2406                           tblptrh	equ	0xFF7
  2407                           tblptrl	equ	0xFF6
  2408                           tablat	equ	0xFF5
  2409                           intcon	equ	0xFF2
  2410                           postinc0	equ	0xFEE
  2411                           wreg	equ	0xFE8
  2412                           indf2	equ	0xFDF
  2413                           postinc2	equ	0xFDE
  2414                           postdec2	equ	0xFDD
  2415                           plusw2	equ	0xFDB
  2416                           fsr2h	equ	0xFDA
  2417                           fsr2l	equ	0xFD9
  2418                           status	equ	0xFD8
  2419                           
  2420 ;; *************** function _GetPDUFault *****************
  2421 ;; Defined at:
  2422 ;;		line 221 in file "PDU.c"
  2423 ;; Parameters:    Size  Location     Type
  2424 ;;  loc             1    wreg     unsigned char 
  2425 ;; Auto vars:     Size  Location     Type
  2426 ;;  loc             1   28[COMRAM] unsigned char 
  2427 ;; Return value:  Size  Location     Type
  2428 ;;                  1    wreg      unsigned char 
  2429 ;; Registers used:
  2430 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2431 ;; Tracked objects:
  2432 ;;		On entry : 0/0
  2433 ;;		On exit  : 0/0
  2434 ;;		Unchanged: 0/0
  2435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2436 ;;      Params:         0       0       0       0       0       0       0
  2437 ;;      Locals:         1       0       0       0       0       0       0
  2438 ;;      Temps:          0       0       0       0       0       0       0
  2439 ;;      Totals:         1       0       0       0       0       0       0
  2440 ;;Total ram usage:        1 bytes
  2441 ;; Hardware stack levels used:    1
  2442 ;; Hardware stack levels required when called:    6
  2443 ;; This function calls:
  2444 ;;		Nothing
  2445 ;; This function is called by:
  2446 ;;		_FaultsCollector
  2447 ;; This function uses a non-reentrant model
  2448 ;;
  2449                           
  2450                           	psect	text10
  2451  00252E                     __ptext10:
  2452                           	opt stack 0
  2453  00252E                     _GetPDUFault:
  2454                           	opt stack 21
  2455                           
  2456                           ; BSR set to: 0
  2457                           ;incstack = 0
  2458                           ;GetPDUFault@loc stored from wreg
  2459  00252E  6E1D               	movwf	GetPDUFault@loc,c
  2460                           
  2461                           ;PDU.c: 222: return PDUFalult[loc];
  2462  002530  501D               	movf	GetPDUFault@loc,w,c
  2463  002532  0D01               	mullw	1
  2464  002534  0E90               	movlw	low _PDUFalult
  2465  002536  24F3               	addwf	prodl,w,c
  2466  002538  6ED9               	movwf	fsr2l,c
  2467  00253A  0E00               	movlw	high _PDUFalult
  2468  00253C  20F4               	addwfc	prodh,w,c
  2469  00253E  6EDA               	movwf	fsr2h,c
  2470  002540  50DF               	movf	indf2,w,c
  2471  002542  0012               	return	
  2472  002544                     __end_of_GetPDUFault:
  2473                           	opt stack 0
  2474                           tosu	equ	0xFFF
  2475                           tosh	equ	0xFFE
  2476                           tosl	equ	0xFFD
  2477                           pclath	equ	0xFFA
  2478                           tblptru	equ	0xFF8
  2479                           tblptrh	equ	0xFF7
  2480                           tblptrl	equ	0xFF6
  2481                           tablat	equ	0xFF5
  2482                           prodh	equ	0xFF4
  2483                           prodl	equ	0xFF3
  2484                           intcon	equ	0xFF2
  2485                           postinc0	equ	0xFEE
  2486                           wreg	equ	0xFE8
  2487                           indf2	equ	0xFDF
  2488                           postinc2	equ	0xFDE
  2489                           postdec2	equ	0xFDD
  2490                           plusw2	equ	0xFDB
  2491                           fsr2h	equ	0xFDA
  2492                           fsr2l	equ	0xFD9
  2493                           status	equ	0xFD8
  2494                           
  2495 ;; *************** function _receiveData *****************
  2496 ;; Defined at:
  2497 ;;		line 82 in file "FastTransfer.c"
  2498 ;; Parameters:    Size  Location     Type
  2499 ;;		None
  2500 ;; Auto vars:     Size  Location     Type
  2501 ;;  holder          3   13[BANK0 ] unsigned char [3]
  2502 ;;  crcHolder       1   17[BANK0 ] unsigned char 
  2503 ;;  holder          3   10[BANK0 ] unsigned char [3]
  2504 ;;  crcHolder       1   16[BANK0 ] unsigned char 
  2505 ;;  u               2   18[BANK0 ] int 
  2506 ;;  r               2   20[BANK0 ] int 
  2507 ;; Return value:  Size  Location     Type
  2508 ;;                  1    wreg      unsigned char 
  2509 ;; Registers used:
  2510 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  2511 ;; Tracked objects:
  2512 ;;		On entry : 0/0
  2513 ;;		On exit  : 0/0
  2514 ;;		Unchanged: 0/0
  2515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2516 ;;      Params:         0       0       0       0       0       0       0
  2517 ;;      Locals:         0      12       0       0       0       0       0
  2518 ;;      Temps:          0       6       0       0       0       0       0
  2519 ;;      Totals:         0      18       0       0       0       0       0
  2520 ;;Total ram usage:       18 bytes
  2521 ;; Hardware stack levels used:    1
  2522 ;; Hardware stack levels required when called:    9
  2523 ;; This function calls:
  2524 ;;		Absolute function
  2525 ;;		_CRC8
  2526 ;;		_Receive_available
  2527 ;;		_Receive_get
  2528 ;;		_Send_put
  2529 ;; This function is called by:
  2530 ;;		_updateComms
  2531 ;; This function uses a non-reentrant model
  2532 ;;
  2533                           
  2534                           	psect	text11
  2535  000740                     __ptext11:
  2536                           	opt stack 0
  2537  000740                     _receiveData:
  2538                           	opt stack 20
  2539                           
  2540                           ;FastTransfer.c: 85: if (rx_len == 0) {
  2541                           
  2542                           ;incstack = 0
  2543  000740  503F               	movf	_rx_len,w,c
  2544  000742  A4D8               	btfss	status,2,c
  2545  000744  D0AC               	goto	l4332
  2546                           
  2547                           ;FastTransfer.c: 87: if (serial_available() > 4) {
  2548  000746  D801               	call	u3568
  2549  000748  D00A               	goto	u3569
  2550  00074A                     u3568:
  2551  00074A  0005               	push	
  2552  00074C  6EFA               	movwf	pclath,c
  2553  00074E  502D               	movf	_serial_available,w,c
  2554  000750  6EFD               	movwf	tosl,c
  2555  000752  502E               	movf	_serial_available+1,w,c
  2556  000754  6EFE               	movwf	tosh,c
  2557  000756  50F8               	movf	tblptru,w,c
  2558  000758  6EFF               	movwf	tosu,c
  2559  00075A  50FA               	movf	pclath,w,c
  2560  00075C  0012               	return		;indir
  2561  00075E                     u3569:
  2562  00075E  BE20               	btfsc	?_Receive_available+1,7,c
  2563  000760  D09E               	goto	l4332
  2564  000762  5020               	movf	?_Receive_available+1,w,c
  2565  000764  E11E               	bnz	l4308
  2566  000766  0E05               	movlw	5
  2567  000768  5C1F               	subwf	?_Receive_available,w,c
  2568  00076A  B0D8               	btfsc	status,0,c
  2569  00076C  D01A               	goto	l4308
  2570  00076E  D097               	goto	l4332
  2571  000770                     l4300:
  2572                           
  2573                           ;FastTransfer.c: 93: alignErrorCounter++;
  2574  000770  0100               	movlb	0	; () banked
  2575  000772  4B9A               	infsnz	_alignErrorCounter& (0+255),f,b
  2576  000774  2B9B               	incf	(_alignErrorCounter+1)& (0+255),f,b
  2577                           
  2578                           ; BSR set to: 0
  2579                           ;FastTransfer.c: 94: if (serial_available() < 5)
  2580  000776  D801               	call	u3588
  2581  000778  D00A               	goto	u3589
  2582  00077A                     u3588:
  2583  00077A  0005               	push	
  2584  00077C  6EFA               	movwf	pclath,c
  2585  00077E  502D               	movf	_serial_available,w,c
  2586  000780  6EFD               	movwf	tosl,c
  2587  000782  502E               	movf	_serial_available+1,w,c
  2588  000784  6EFE               	movwf	tosh,c
  2589  000786  50F8               	movf	tblptru,w,c
  2590  000788  6EFF               	movwf	tosu,c
  2591  00078A  50FA               	movf	pclath,w,c
  2592  00078C  0012               	return		;indir
  2593  00078E                     u3589:
  2594  00078E  BE20               	btfsc	?_Receive_available+1,7,c
  2595  000790  D006               	goto	l4304
  2596  000792  5020               	movf	?_Receive_available+1,w,c
  2597  000794  E106               	bnz	l4308
  2598  000796  0E05               	movlw	5
  2599  000798  5C1F               	subwf	?_Receive_available,w,c
  2600  00079A  B0D8               	btfsc	status,0,c
  2601  00079C  D002               	goto	l4308
  2602  00079E                     l4304:
  2603                           
  2604                           ;FastTransfer.c: 95: return 0;
  2605  00079E  0E00               	movlw	0
  2606  0007A0  0012               	return	
  2607  0007A2                     l4308:
  2608  0007A2  D801               	call	u3608
  2609  0007A4  D00A               	goto	u3609
  2610  0007A6                     u3608:
  2611  0007A6  0005               	push	
  2612  0007A8  6EFA               	movwf	pclath,c
  2613  0007AA  502F               	movf	_serial_read,w,c
  2614  0007AC  6EFD               	movwf	tosl,c
  2615  0007AE  5030               	movf	_serial_read+1,w,c
  2616  0007B0  6EFE               	movwf	tosh,c
  2617  0007B2  50F8               	movf	tblptru,w,c
  2618  0007B4  6EFF               	movwf	tosu,c
  2619  0007B6  50FA               	movf	pclath,w,c
  2620  0007B8  0012               	return		;indir
  2621  0007BA                     u3609:
  2622  0007BA  0A06               	xorlw	6
  2623  0007BC  A4D8               	btfss	status,2,c
  2624  0007BE  D7D8               	goto	l4300
  2625                           
  2626                           ;FastTransfer.c: 96: }
  2627                           ;FastTransfer.c: 97: if (serial_read() == 0x85) {
  2628  0007C0  D801               	call	u3628
  2629  0007C2  D00A               	goto	u3629
  2630  0007C4                     u3628:
  2631  0007C4  0005               	push	
  2632  0007C6  6EFA               	movwf	pclath,c
  2633  0007C8  502F               	movf	_serial_read,w,c
  2634  0007CA  6EFD               	movwf	tosl,c
  2635  0007CC  5030               	movf	_serial_read+1,w,c
  2636  0007CE  6EFE               	movwf	tosh,c
  2637  0007D0  50F8               	movf	tblptru,w,c
  2638  0007D2  6EFF               	movwf	tosu,c
  2639  0007D4  50FA               	movf	pclath,w,c
  2640  0007D6  0012               	return		;indir
  2641  0007D8                     u3629:
  2642  0007D8  0A85               	xorlw	133
  2643  0007DA  A4D8               	btfss	status,2,c
  2644  0007DC  D060               	goto	l4332
  2645                           
  2646                           ;FastTransfer.c: 98: rx_address = serial_read();
  2647  0007DE  D801               	call	u3648
  2648  0007E0  D00A               	goto	u3649
  2649  0007E2                     u3648:
  2650  0007E2  0005               	push	
  2651  0007E4  6EFA               	movwf	pclath,c
  2652  0007E6  502F               	movf	_serial_read,w,c
  2653  0007E8  6EFD               	movwf	tosl,c
  2654  0007EA  5030               	movf	_serial_read+1,w,c
  2655  0007EC  6EFE               	movwf	tosh,c
  2656  0007EE  50F8               	movf	tblptru,w,c
  2657  0007F0  6EFF               	movwf	tosu,c
  2658  0007F2  50FA               	movf	pclath,w,c
  2659  0007F4  0012               	return		;indir
  2660  0007F6                     u3649:
  2661  0007F6  6E3D               	movwf	_rx_address,c
  2662                           
  2663                           ;FastTransfer.c: 99: returnAddress = serial_read();
  2664  0007F8  D801               	call	u3658
  2665  0007FA  D00A               	goto	u3659
  2666  0007FC                     u3658:
  2667  0007FC  0005               	push	
  2668  0007FE  6EFA               	movwf	pclath,c
  2669  000800  502F               	movf	_serial_read,w,c
  2670  000802  6EFD               	movwf	tosl,c
  2671  000804  5030               	movf	_serial_read+1,w,c
  2672  000806  6EFE               	movwf	tosh,c
  2673  000808  50F8               	movf	tblptru,w,c
  2674  00080A  6EFF               	movwf	tosu,c
  2675  00080C  50FA               	movf	pclath,w,c
  2676  00080E  0012               	return		;indir
  2677  000810                     u3659:
  2678  000810  6E3C               	movwf	_returnAddress,c
  2679                           
  2680                           ;FastTransfer.c: 100: rx_len = serial_read();
  2681  000812  D801               	call	u3668
  2682  000814  D00A               	goto	u3669
  2683  000816                     u3668:
  2684  000816  0005               	push	
  2685  000818  6EFA               	movwf	pclath,c
  2686  00081A  502F               	movf	_serial_read,w,c
  2687  00081C  6EFD               	movwf	tosl,c
  2688  00081E  5030               	movf	_serial_read+1,w,c
  2689  000820  6EFE               	movwf	tosh,c
  2690  000822  50F8               	movf	tblptru,w,c
  2691  000824  6EFF               	movwf	tosu,c
  2692  000826  50FA               	movf	pclath,w,c
  2693  000828  0012               	return		;indir
  2694  00082A                     u3669:
  2695  00082A  6E3F               	movwf	_rx_len,c
  2696                           
  2697                           ;FastTransfer.c: 102: if (rx_address != moduleAddress) {
  2698  00082C  503B               	movf	_moduleAddress,w,c
  2699  00082E  183D               	xorwf	_rx_address,w,c
  2700  000830  B4D8               	btfsc	status,2,c
  2701  000832  D035               	goto	l4332
  2702                           
  2703                           ;FastTransfer.c: 103: addressErrorCounter++;
  2704  000834  0100               	movlb	0	; () banked
  2705  000836  4B98               	infsnz	_addressErrorCounter& (0+255),f,b
  2706  000838  2B99               	incf	(_addressErrorCounter+1)& (0+255),f,b
  2707                           
  2708                           ; BSR set to: 0
  2709                           ;FastTransfer.c: 106: int u;
  2710                           ;FastTransfer.c: 107: for (u = 0; u <= (rx_len + 1); u++) {
  2711  00083A  0E00               	movlw	0
  2712  00083C  0100               	movlb	0	; () banked
  2713  00083E  6FEE               	movwf	(receiveData@u+1)& (0+255),b
  2714  000840  0E00               	movlw	0
  2715  000842  6FED               	movwf	receiveData@u& (0+255),b
  2716  000844  D00F               	goto	l4324
  2717  000846                     l4320:
  2718                           
  2719                           ; BSR set to: 0
  2720                           ;FastTransfer.c: 108: serial_read();
  2721  000846  D801               	call	u3688
  2722  000848  D00A               	goto	l4322
  2723  00084A                     u3688:
  2724  00084A  0005               	push	
  2725  00084C  6EFA               	movwf	pclath,c
  2726  00084E  502F               	movf	_serial_read,w,c
  2727  000850  6EFD               	movwf	tosl,c
  2728  000852  5030               	movf	_serial_read+1,w,c
  2729  000854  6EFE               	movwf	tosh,c
  2730  000856  50F8               	movf	tblptru,w,c
  2731  000858  6EFF               	movwf	tosu,c
  2732  00085A  50FA               	movf	pclath,w,c
  2733  00085C  0012               	return		;indir
  2734  00085E                     l4322:
  2735  00085E  0100               	movlb	0	; () banked
  2736  000860  4BED               	infsnz	receiveData@u& (0+255),f,b
  2737  000862  2BEE               	incf	(receiveData@u+1)& (0+255),f,b
  2738  000864                     l4324:
  2739                           
  2740                           ; BSR set to: 0
  2741  000864  503F               	movf	_rx_len,w,c
  2742  000866  0100               	movlb	0	; () banked
  2743  000868  6FDF               	movwf	??_receiveData& (0+255),b
  2744  00086A  6BE0               	clrf	(??_receiveData+1)& (0+255),b
  2745  00086C  0E01               	movlw	1
  2746  00086E  0100               	movlb	0	; () banked
  2747  000870  27DF               	addwf	??_receiveData& (0+255),f,b
  2748  000872  0E00               	movlw	0
  2749  000874  23E0               	addwfc	(??_receiveData+1)& (0+255),f,b
  2750  000876  0100               	movlb	0	; () banked
  2751  000878  51ED               	movf	receiveData@u& (0+255),w,b
  2752  00087A  0100               	movlb	0	; () banked
  2753  00087C  5DDF               	subwf	??_receiveData& (0+255),w,b
  2754  00087E  0100               	movlb	0	; () banked
  2755  000880  51E0               	movf	(??_receiveData+1)& (0+255),w,b
  2756  000882  0A80               	xorlw	128
  2757  000884  0100               	movlb	0	; () banked
  2758  000886  6FE1               	movwf	(??_receiveData+2)& (0+255),b
  2759  000888  0100               	movlb	0	; () banked
  2760  00088A  51EE               	movf	(receiveData@u+1)& (0+255),w,b
  2761  00088C  0A80               	xorlw	128
  2762  00088E  0100               	movlb	0	; () banked
  2763  000890  59E1               	subwfb	(??_receiveData+2)& (0+255),w,b
  2764  000892  B0D8               	btfsc	status,0,c
  2765  000894  D7D8               	goto	l4320
  2766                           
  2767                           ; BSR set to: 0
  2768                           ;FastTransfer.c: 109: }
  2769                           ;FastTransfer.c: 110: rx_len = 0;
  2770                           
  2771                           ; BSR set to: 0
  2772  000896  0E00               	movlw	0
  2773  000898  6E3F               	movwf	_rx_len,c
  2774                           
  2775                           ; BSR set to: 0
  2776                           ;FastTransfer.c: 111: return 0;
  2777  00089A  0E00               	movlw	0
  2778                           
  2779                           ; BSR set to: 0
  2780  00089C  0012               	return	
  2781  00089E                     l4332:
  2782                           
  2783                           ;FastTransfer.c: 112: }
  2784                           ;FastTransfer.c: 114: }
  2785                           ;FastTransfer.c: 115: }
  2786                           ;FastTransfer.c: 116: }
  2787                           ;FastTransfer.c: 119: if (rx_len != 0) {
  2788  00089E  503F               	movf	_rx_len,w,c
  2789  0008A0  A4D8               	btfss	status,2,c
  2790  0008A2  D01A               	goto	l4340
  2791  0008A4  D276               	goto	l4440
  2792  0008A6                     l4336:
  2793                           
  2794                           ;FastTransfer.c: 135: rx_buffer[rx_array_inx++] = serial_read();
  2795  0008A6  D801               	call	u3718
  2796  0008A8  D00A               	goto	u3719
  2797  0008AA                     u3718:
  2798  0008AA  0005               	push	
  2799  0008AC  6EFA               	movwf	pclath,c
  2800  0008AE  502F               	movf	_serial_read,w,c
  2801  0008B0  6EFD               	movwf	tosl,c
  2802  0008B2  5030               	movf	_serial_read+1,w,c
  2803  0008B4  6EFE               	movwf	tosh,c
  2804  0008B6  50F8               	movf	tblptru,w,c
  2805  0008B8  6EFF               	movwf	tosu,c
  2806  0008BA  50FA               	movf	pclath,w,c
  2807  0008BC  0012               	return		;indir
  2808  0008BE                     u3719:
  2809  0008BE  0100               	movlb	0	; () banked
  2810  0008C0  6FDF               	movwf	??_receiveData& (0+255),b
  2811  0008C2  503E               	movf	_rx_array_inx,w,c
  2812  0008C4  0D01               	mullw	1
  2813  0008C6  0E00               	movlw	low _rx_buffer
  2814  0008C8  24F3               	addwf	prodl,w,c
  2815  0008CA  6ED9               	movwf	fsr2l,c
  2816  0008CC  0E02               	movlw	high _rx_buffer
  2817  0008CE  20F4               	addwfc	prodh,w,c
  2818  0008D0  6EDA               	movwf	fsr2h,c
  2819  0008D2  C0DF  FFDF         	movff	??_receiveData,indf2
  2820                           
  2821                           ; BSR set to: 0
  2822  0008D6  2A3E               	incf	_rx_array_inx,f,c
  2823  0008D8                     l4340:
  2824  0008D8  D801               	call	u3728
  2825  0008DA  D00A               	goto	u3729
  2826  0008DC                     u3728:
  2827  0008DC  0005               	push	
  2828  0008DE  6EFA               	movwf	pclath,c
  2829  0008E0  502D               	movf	_serial_available,w,c
  2830  0008E2  6EFD               	movwf	tosl,c
  2831  0008E4  502E               	movf	_serial_available+1,w,c
  2832  0008E6  6EFE               	movwf	tosh,c
  2833  0008E8  50F8               	movf	tblptru,w,c
  2834  0008EA  6EFF               	movwf	tosu,c
  2835  0008EC  50FA               	movf	pclath,w,c
  2836  0008EE  0012               	return		;indir
  2837  0008F0                     u3729:
  2838  0008F0  501F               	movf	?_Receive_available,w,c
  2839  0008F2  1020               	iorwf	?_Receive_available+1,w,c
  2840  0008F4  B4D8               	btfsc	status,2,c
  2841  0008F6  D004               	goto	l4344
  2842  0008F8  503E               	movf	_rx_array_inx,w,c
  2843  0008FA  5C3F               	subwf	_rx_len,w,c
  2844  0008FC  B0D8               	btfsc	status,0,c
  2845  0008FE  D7D3               	goto	l4336
  2846  000900                     l4344:
  2847                           
  2848                           ;FastTransfer.c: 136: }
  2849                           ;FastTransfer.c: 138: if (rx_len == (rx_array_inx - 1)) {
  2850  000900  503F               	movf	_rx_len,w,c
  2851  000902  0100               	movlb	0	; () banked
  2852  000904  6FDF               	movwf	??_receiveData& (0+255),b
  2853  000906  6BE0               	clrf	(??_receiveData+1)& (0+255),b
  2854  000908  0EFF               	movlw	255
  2855  00090A  0100               	movlb	0	; () banked
  2856  00090C  6FE1               	movwf	(??_receiveData+2)& (0+255),b
  2857  00090E  0EFF               	movlw	255
  2858  000910  0100               	movlb	0	; () banked
  2859  000912  6FE2               	movwf	(??_receiveData+3)& (0+255),b
  2860  000914  503E               	movf	_rx_array_inx,w,c
  2861  000916  0100               	movlb	0	; () banked
  2862  000918  6FE3               	movwf	(??_receiveData+4)& (0+255),b
  2863  00091A  6BE4               	clrf	(??_receiveData+5)& (0+255),b
  2864  00091C  0100               	movlb	0	; () banked
  2865  00091E  51E1               	movf	(??_receiveData+2)& (0+255),w,b
  2866  000920  0100               	movlb	0	; () banked
  2867  000922  27E3               	addwf	(??_receiveData+4)& (0+255),f,b
  2868  000924  0100               	movlb	0	; () banked
  2869  000926  51E2               	movf	(??_receiveData+3)& (0+255),w,b
  2870  000928  0100               	movlb	0	; () banked
  2871  00092A  23E4               	addwfc	(??_receiveData+5)& (0+255),f,b
  2872  00092C  0100               	movlb	0	; () banked
  2873  00092E  51DF               	movf	??_receiveData& (0+255),w,b
  2874  000930  0100               	movlb	0	; () banked
  2875  000932  19E3               	xorwf	(??_receiveData+4)& (0+255),w,b
  2876  000934  E105               	bnz	u3751
  2877  000936  0100               	movlb	0	; () banked
  2878  000938  51E0               	movf	(??_receiveData+1)& (0+255),w,b
  2879  00093A  0100               	movlb	0	; () banked
  2880  00093C  19E4               	xorwf	(??_receiveData+5)& (0+255),w,b
  2881  00093E  A4D8               	btfss	status,2,c
  2882  000940                     u3751:
  2883  000940  D228               	goto	l4440
  2884                           
  2885                           ; BSR set to: 0
  2886                           ;FastTransfer.c: 141: calc_CS = CRC8(rx_buffer, rx_len);
  2887  000942  0E00               	movlw	low _rx_buffer
  2888  000944  6E1D               	movwf	CRC8@data,c
  2889  000946  0E02               	movlw	high _rx_buffer
  2890  000948  6E1E               	movwf	CRC8@data+1,c
  2891  00094A  C03F  F01F         	movff	_rx_len,CRC8@len
  2892  00094E  EC9B  F010         	call	_CRC8	;wreg free
  2893  000952  6E39               	movwf	_calc_CS,c
  2894                           
  2895                           ;FastTransfer.c: 145: if (calc_CS == rx_buffer[rx_array_inx - 1]) {
  2896  000954  0EFF               	movlw	255
  2897  000956  0100               	movlb	0	; () banked
  2898  000958  6FDF               	movwf	??_receiveData& (0+255),b
  2899  00095A  0EFF               	movlw	255
  2900  00095C  0100               	movlb	0	; () banked
  2901  00095E  6FE0               	movwf	(??_receiveData+1)& (0+255),b
  2902  000960  503E               	movf	_rx_array_inx,w,c
  2903  000962  0100               	movlb	0	; () banked
  2904  000964  6FE1               	movwf	(??_receiveData+2)& (0+255),b
  2905  000966  6BE2               	clrf	(??_receiveData+3)& (0+255),b
  2906  000968  0100               	movlb	0	; () banked
  2907  00096A  51DF               	movf	??_receiveData& (0+255),w,b
  2908  00096C  0100               	movlb	0	; () banked
  2909  00096E  27E1               	addwf	(??_receiveData+2)& (0+255),f,b
  2910  000970  0100               	movlb	0	; () banked
  2911  000972  51E0               	movf	(??_receiveData+1)& (0+255),w,b
  2912  000974  0100               	movlb	0	; () banked
  2913  000976  23E2               	addwfc	(??_receiveData+3)& (0+255),f,b
  2914  000978  0E00               	movlw	low _rx_buffer
  2915  00097A  0100               	movlb	0	; () banked
  2916  00097C  25E1               	addwf	(??_receiveData+2)& (0+255),w,b
  2917  00097E  6ED9               	movwf	fsr2l,c
  2918  000980  0E02               	movlw	high _rx_buffer
  2919  000982  0100               	movlb	0	; () banked
  2920  000984  21E2               	addwfc	(??_receiveData+3)& (0+255),w,b
  2921  000986  6EDA               	movwf	fsr2h,c
  2922  000988  5039               	movf	_calc_CS,w,c
  2923  00098A  18DE               	xorwf	postinc2,w,c
  2924  00098C  A4D8               	btfss	status,2,c
  2925  00098E  D139               	goto	l4402
  2926                           
  2927                           ; BSR set to: 0
  2928                           ;FastTransfer.c: 148: int r;
  2929                           ;FastTransfer.c: 149: for (r = 0; r < rx_len; r = r + 3) {
  2930  000990  0E00               	movlw	0
  2931  000992  0100               	movlb	0	; () banked
  2932  000994  6FF0               	movwf	(receiveData@r+1)& (0+255),b
  2933  000996  0E00               	movlw	0
  2934  000998  6FEF               	movwf	receiveData@r& (0+255),b
  2935  00099A  D05A               	goto	l4362
  2936  00099C                     l4352:
  2937                           
  2938                           ; BSR set to: 0
  2939                           ;FastTransfer.c: 150: if (rx_buffer[r] < maxDataAddress) {
  2940  00099C  0E00               	movlw	low _rx_buffer
  2941  00099E  0100               	movlb	0	; () banked
  2942  0009A0  25EF               	addwf	receiveData@r& (0+255),w,b
  2943  0009A2  6ED9               	movwf	fsr2l,c
  2944  0009A4  0E02               	movlw	high _rx_buffer
  2945  0009A6  0100               	movlb	0	; () banked
  2946  0009A8  21F0               	addwfc	(receiveData@r+1)& (0+255),w,b
  2947  0009AA  6EDA               	movwf	fsr2h,c
  2948  0009AC  503A               	movf	_maxDataAddress,w,c
  2949  0009AE  5CDE               	subwf	postinc2,w,c
  2950  0009B0  B0D8               	btfsc	status,0,c
  2951  0009B2  D041               	goto	l4358
  2952                           
  2953                           ; BSR set to: 0
  2954                           ;FastTransfer.c: 151: group.parts[0] = rx_buffer[r + 1];
  2955  0009B4  0E01               	movlw	1
  2956  0009B6  0100               	movlb	0	; () banked
  2957  0009B8  25EF               	addwf	receiveData@r& (0+255),w,b
  2958  0009BA  0100               	movlb	0	; () banked
  2959  0009BC  6FDF               	movwf	??_receiveData& (0+255),b
  2960  0009BE  0E00               	movlw	0
  2961  0009C0  0100               	movlb	0	; () banked
  2962  0009C2  21F0               	addwfc	(receiveData@r+1)& (0+255),w,b
  2963  0009C4  0100               	movlb	0	; () banked
  2964  0009C6  6FE0               	movwf	(??_receiveData+1)& (0+255),b
  2965  0009C8  0E00               	movlw	low _rx_buffer
  2966  0009CA  0100               	movlb	0	; () banked
  2967  0009CC  25DF               	addwf	??_receiveData& (0+255),w,b
  2968  0009CE  6ED9               	movwf	fsr2l,c
  2969  0009D0  0E02               	movlw	high _rx_buffer
  2970  0009D2  0100               	movlb	0	; () banked
  2971  0009D4  21E0               	addwfc	(??_receiveData+1)& (0+255),w,b
  2972  0009D6  6EDA               	movwf	fsr2h,c
  2973  0009D8  50DF               	movf	indf2,w,c
  2974  0009DA  6E25               	movwf	_group,c
  2975                           
  2976                           ;FastTransfer.c: 152: group.parts[1] = rx_buffer[r + 2];
  2977  0009DC  0E02               	movlw	2
  2978  0009DE  0100               	movlb	0	; () banked
  2979  0009E0  25EF               	addwf	receiveData@r& (0+255),w,b
  2980  0009E2  0100               	movlb	0	; () banked
  2981  0009E4  6FDF               	movwf	??_receiveData& (0+255),b
  2982  0009E6  0E00               	movlw	0
  2983  0009E8  0100               	movlb	0	; () banked
  2984  0009EA  21F0               	addwfc	(receiveData@r+1)& (0+255),w,b
  2985  0009EC  0100               	movlb	0	; () banked
  2986  0009EE  6FE0               	movwf	(??_receiveData+1)& (0+255),b
  2987  0009F0  0E00               	movlw	low _rx_buffer
  2988  0009F2  0100               	movlb	0	; () banked
  2989  0009F4  25DF               	addwf	??_receiveData& (0+255),w,b
  2990  0009F6  6ED9               	movwf	fsr2l,c
  2991  0009F8  0E02               	movlw	high _rx_buffer
  2992  0009FA  0100               	movlb	0	; () banked
  2993  0009FC  21E0               	addwfc	(??_receiveData+1)& (0+255),w,b
  2994  0009FE  6EDA               	movwf	fsr2h,c
  2995  000A00  50DF               	movf	indf2,w,c
  2996  000A02  6E26               	movwf	_group+1,c
  2997                           
  2998                           ; BSR set to: 0
  2999                           ;FastTransfer.c: 153: receiveArrayAddress[(rx_buffer[r])] = group.integer;
  3000  000A04  0E00               	movlw	low _rx_buffer
  3001  000A06  0100               	movlb	0	; () banked
  3002  000A08  25EF               	addwf	receiveData@r& (0+255),w,b
  3003  000A0A  6ED9               	movwf	fsr2l,c
  3004  000A0C  0E02               	movlw	high _rx_buffer
  3005  000A0E  0100               	movlb	0	; () banked
  3006  000A10  21F0               	addwfc	(receiveData@r+1)& (0+255),w,b
  3007  000A12  6EDA               	movwf	fsr2h,c
  3008  000A14  50DF               	movf	indf2,w,c
  3009  000A16  0100               	movlb	0	; () banked
  3010  000A18  6FDF               	movwf	??_receiveData& (0+255),b
  3011  000A1A  0100               	movlb	0	; () banked
  3012  000A1C  51DF               	movf	??_receiveData& (0+255),w,b
  3013  000A1E  0D02               	mullw	2
  3014  000A20  50F3               	movf	prodl,w,c
  3015  000A22  2429               	addwf	_receiveArrayAddress,w,c
  3016  000A24  6ED9               	movwf	fsr2l,c
  3017  000A26  50F4               	movf	prodh,w,c
  3018  000A28  202A               	addwfc	_receiveArrayAddress+1,w,c
  3019  000A2A  6EDA               	movwf	fsr2h,c
  3020  000A2C  C025  FFDE         	movff	_group,postinc2
  3021  000A30  C026  FFDD         	movff	_group+1,postdec2
  3022                           
  3023                           ;FastTransfer.c: 154: } else {
  3024  000A34  D003               	goto	l4360
  3025  000A36                     l4358:
  3026                           
  3027                           ; BSR set to: 0
  3028                           ;FastTransfer.c: 155: dataAdressErrorCounter++;
  3029  000A36  0100               	movlb	0	; () banked
  3030  000A38  4B9E               	infsnz	_dataAdressErrorCounter& (0+255),f,b
  3031  000A3A  2B9F               	incf	(_dataAdressErrorCounter+1)& (0+255),f,b
  3032  000A3C                     l4360:
  3033                           
  3034                           ; BSR set to: 0
  3035  000A3C  0E03               	movlw	3
  3036  000A3E  0100               	movlb	0	; () banked
  3037  000A40  25EF               	addwf	receiveData@r& (0+255),w,b
  3038  000A42  0100               	movlb	0	; () banked
  3039  000A44  6FEF               	movwf	receiveData@r& (0+255),b
  3040  000A46  0E00               	movlw	0
  3041  000A48  0100               	movlb	0	; () banked
  3042  000A4A  21F0               	addwfc	(receiveData@r+1)& (0+255),w,b
  3043  000A4C  0100               	movlb	0	; () banked
  3044  000A4E  6FF0               	movwf	(receiveData@r+1)& (0+255),b
  3045  000A50                     l4362:
  3046                           
  3047                           ; BSR set to: 0
  3048  000A50  503F               	movf	_rx_len,w,c
  3049  000A52  0100               	movlb	0	; () banked
  3050  000A54  6FDF               	movwf	??_receiveData& (0+255),b
  3051  000A56  6BE0               	clrf	(??_receiveData+1)& (0+255),b
  3052  000A58  0100               	movlb	0	; () banked
  3053  000A5A  51DF               	movf	??_receiveData& (0+255),w,b
  3054  000A5C  0100               	movlb	0	; () banked
  3055  000A5E  5DEF               	subwf	receiveData@r& (0+255),w,b
  3056  000A60  0100               	movlb	0	; () banked
  3057  000A62  51F0               	movf	(receiveData@r+1)& (0+255),w,b
  3058  000A64  0A80               	xorlw	128
  3059  000A66  0100               	movlb	0	; () banked
  3060  000A68  6FE1               	movwf	(??_receiveData+2)& (0+255),b
  3061  000A6A  0100               	movlb	0	; () banked
  3062  000A6C  51E0               	movf	(??_receiveData+1)& (0+255),w,b
  3063  000A6E  0A80               	xorlw	128
  3064  000A70  0100               	movlb	0	; () banked
  3065  000A72  59E1               	subwfb	(??_receiveData+2)& (0+255),w,b
  3066  000A74  A0D8               	btfss	status,0,c
  3067  000A76  D792               	goto	l4352
  3068                           
  3069                           ; BSR set to: 0
  3070                           ;FastTransfer.c: 156: }
  3071                           ;FastTransfer.c: 157: }
  3072                           ;FastTransfer.c: 160: if (AKNAKsend) {
  3073                           
  3074                           ; BSR set to: 0
  3075  000A78  5037               	movf	_AKNAKsend,w,c
  3076  000A7A  B4D8               	btfsc	status,2,c
  3077  000A7C  D0BC               	goto	l4392
  3078                           
  3079                           ; BSR set to: 0
  3080                           ;FastTransfer.c: 161: unsigned char holder[3];
  3081                           ;FastTransfer.c: 162: holder[0] = 255;
  3082  000A7E  0100               	movlb	0	; () banked
  3083  000A80  69E5               	setf	receiveData@holder& (0+255),b
  3084                           
  3085                           ; BSR set to: 0
  3086                           ;FastTransfer.c: 163: holder[1] = 1;
  3087  000A82  0E01               	movlw	1
  3088  000A84  0100               	movlb	0	; () banked
  3089  000A86  6FE6               	movwf	(receiveData@holder+1)& (0+255),b
  3090                           
  3091                           ; BSR set to: 0
  3092                           ;FastTransfer.c: 164: holder[2] = rx_buffer[rx_array_inx - 1];
  3093  000A88  0EFF               	movlw	255
  3094  000A8A  0100               	movlb	0	; () banked
  3095  000A8C  6FDF               	movwf	??_receiveData& (0+255),b
  3096  000A8E  0EFF               	movlw	255
  3097  000A90  0100               	movlb	0	; () banked
  3098  000A92  6FE0               	movwf	(??_receiveData+1)& (0+255),b
  3099  000A94  503E               	movf	_rx_array_inx,w,c
  3100  000A96  0100               	movlb	0	; () banked
  3101  000A98  6FE1               	movwf	(??_receiveData+2)& (0+255),b
  3102  000A9A  6BE2               	clrf	(??_receiveData+3)& (0+255),b
  3103  000A9C  0100               	movlb	0	; () banked
  3104  000A9E  51DF               	movf	??_receiveData& (0+255),w,b
  3105  000AA0  0100               	movlb	0	; () banked
  3106  000AA2  27E1               	addwf	(??_receiveData+2)& (0+255),f,b
  3107  000AA4  0100               	movlb	0	; () banked
  3108  000AA6  51E0               	movf	(??_receiveData+1)& (0+255),w,b
  3109  000AA8  0100               	movlb	0	; () banked
  3110  000AAA  23E2               	addwfc	(??_receiveData+3)& (0+255),f,b
  3111  000AAC  0E00               	movlw	low _rx_buffer
  3112  000AAE  0100               	movlb	0	; () banked
  3113  000AB0  25E1               	addwf	(??_receiveData+2)& (0+255),w,b
  3114  000AB2  6ED9               	movwf	fsr2l,c
  3115  000AB4  0E02               	movlw	high _rx_buffer
  3116  000AB6  0100               	movlb	0	; () banked
  3117  000AB8  21E2               	addwfc	(??_receiveData+3)& (0+255),w,b
  3118  000ABA  6EDA               	movwf	fsr2h,c
  3119  000ABC  50DF               	movf	indf2,w,c
  3120  000ABE  0100               	movlb	0	; () banked
  3121  000AC0  6FE7               	movwf	(receiveData@holder+2)& (0+255),b
  3122                           
  3123                           ; BSR set to: 0
  3124                           ;FastTransfer.c: 165: unsigned char crcHolder = CRC8(holder, 3);
  3125  000AC2  0EE5               	movlw	low receiveData@holder
  3126  000AC4  6E1D               	movwf	CRC8@data,c
  3127  000AC6  0E00               	movlw	high receiveData@holder
  3128  000AC8  6E1E               	movwf	CRC8@data+1,c
  3129  000ACA  0E03               	movlw	3
  3130  000ACC  6E1F               	movwf	CRC8@len,c
  3131  000ACE  EC9B  F010         	call	_CRC8	;wreg free
  3132  000AD2  0100               	movlb	0	; () banked
  3133  000AD4  6FEB               	movwf	receiveData@crcHolder& (0+255),b
  3134                           
  3135                           ; BSR set to: 0
  3136                           ;FastTransfer.c: 166: serial_write(0x06);
  3137  000AD6  D801               	call	u3808
  3138  000AD8  D00B               	goto	l4376
  3139  000ADA                     u3808:
  3140  000ADA  0005               	push	
  3141  000ADC  6EFA               	movwf	pclath,c
  3142  000ADE  5031               	movf	_serial_write,w,c
  3143  000AE0  6EFD               	movwf	tosl,c
  3144  000AE2  5032               	movf	_serial_write+1,w,c
  3145  000AE4  6EFE               	movwf	tosh,c
  3146  000AE6  50F8               	movf	tblptru,w,c
  3147  000AE8  6EFF               	movwf	tosu,c
  3148  000AEA  50FA               	movf	pclath,w,c
  3149  000AEC  0E06               	movlw	6
  3150  000AEE  0012               	return		;indir
  3151  000AF0                     l4376:
  3152                           
  3153                           ;FastTransfer.c: 167: serial_write(0x85);
  3154  000AF0  D801               	call	u3818
  3155  000AF2  D00B               	goto	l4378
  3156  000AF4                     u3818:
  3157  000AF4  0005               	push	
  3158  000AF6  6EFA               	movwf	pclath,c
  3159  000AF8  5031               	movf	_serial_write,w,c
  3160  000AFA  6EFD               	movwf	tosl,c
  3161  000AFC  5032               	movf	_serial_write+1,w,c
  3162  000AFE  6EFE               	movwf	tosh,c
  3163  000B00  50F8               	movf	tblptru,w,c
  3164  000B02  6EFF               	movwf	tosu,c
  3165  000B04  50FA               	movf	pclath,w,c
  3166  000B06  0E85               	movlw	133
  3167  000B08  0012               	return		;indir
  3168  000B0A                     l4378:
  3169                           
  3170                           ;FastTransfer.c: 168: serial_write(returnAddress);
  3171  000B0A  D801               	call	u3828
  3172  000B0C  D00B               	goto	l4380
  3173  000B0E                     u3828:
  3174  000B0E  0005               	push	
  3175  000B10  6EFA               	movwf	pclath,c
  3176  000B12  5031               	movf	_serial_write,w,c
  3177  000B14  6EFD               	movwf	tosl,c
  3178  000B16  5032               	movf	_serial_write+1,w,c
  3179  000B18  6EFE               	movwf	tosh,c
  3180  000B1A  50F8               	movf	tblptru,w,c
  3181  000B1C  6EFF               	movwf	tosu,c
  3182  000B1E  50FA               	movf	pclath,w,c
  3183  000B20  503C               	movf	_returnAddress,w,c
  3184  000B22  0012               	return		;indir
  3185  000B24                     l4380:
  3186                           
  3187                           ;FastTransfer.c: 169: serial_write(moduleAddress);
  3188  000B24  D801               	call	u3838
  3189  000B26  D00B               	goto	l4382
  3190  000B28                     u3838:
  3191  000B28  0005               	push	
  3192  000B2A  6EFA               	movwf	pclath,c
  3193  000B2C  5031               	movf	_serial_write,w,c
  3194  000B2E  6EFD               	movwf	tosl,c
  3195  000B30  5032               	movf	_serial_write+1,w,c
  3196  000B32  6EFE               	movwf	tosh,c
  3197  000B34  50F8               	movf	tblptru,w,c
  3198  000B36  6EFF               	movwf	tosu,c
  3199  000B38  50FA               	movf	pclath,w,c
  3200  000B3A  503B               	movf	_moduleAddress,w,c
  3201  000B3C  0012               	return		;indir
  3202  000B3E                     l4382:
  3203                           
  3204                           ;FastTransfer.c: 170: serial_write(3);
  3205  000B3E  D801               	call	u3848
  3206  000B40  D00B               	goto	l4384
  3207  000B42                     u3848:
  3208  000B42  0005               	push	
  3209  000B44  6EFA               	movwf	pclath,c
  3210  000B46  5031               	movf	_serial_write,w,c
  3211  000B48  6EFD               	movwf	tosl,c
  3212  000B4A  5032               	movf	_serial_write+1,w,c
  3213  000B4C  6EFE               	movwf	tosh,c
  3214  000B4E  50F8               	movf	tblptru,w,c
  3215  000B50  6EFF               	movwf	tosu,c
  3216  000B52  50FA               	movf	pclath,w,c
  3217  000B54  0E03               	movlw	3
  3218  000B56  0012               	return		;indir
  3219  000B58                     l4384:
  3220                           
  3221                           ;FastTransfer.c: 171: serial_write(255);
  3222  000B58  D801               	call	u3858
  3223  000B5A  D00B               	goto	l4386
  3224  000B5C                     u3858:
  3225  000B5C  0005               	push	
  3226  000B5E  6EFA               	movwf	pclath,c
  3227  000B60  5031               	movf	_serial_write,w,c
  3228  000B62  6EFD               	movwf	tosl,c
  3229  000B64  5032               	movf	_serial_write+1,w,c
  3230  000B66  6EFE               	movwf	tosh,c
  3231  000B68  50F8               	movf	tblptru,w,c
  3232  000B6A  6EFF               	movwf	tosu,c
  3233  000B6C  50FA               	movf	pclath,w,c
  3234  000B6E  0EFF               	movlw	255
  3235  000B70  0012               	return		;indir
  3236  000B72                     l4386:
  3237                           
  3238                           ;FastTransfer.c: 172: serial_write(1);
  3239  000B72  D801               	call	u3868
  3240  000B74  D00B               	goto	l4388
  3241  000B76                     u3868:
  3242  000B76  0005               	push	
  3243  000B78  6EFA               	movwf	pclath,c
  3244  000B7A  5031               	movf	_serial_write,w,c
  3245  000B7C  6EFD               	movwf	tosl,c
  3246  000B7E  5032               	movf	_serial_write+1,w,c
  3247  000B80  6EFE               	movwf	tosh,c
  3248  000B82  50F8               	movf	tblptru,w,c
  3249  000B84  6EFF               	movwf	tosu,c
  3250  000B86  50FA               	movf	pclath,w,c
  3251  000B88  0E01               	movlw	1
  3252  000B8A  0012               	return		;indir
  3253  000B8C                     l4388:
  3254                           
  3255                           ;FastTransfer.c: 173: serial_write(rx_buffer[rx_array_inx - 1]);
  3256  000B8C  D801               	call	u3878
  3257  000B8E  D025               	goto	l4390
  3258  000B90                     u3878:
  3259  000B90  0005               	push	
  3260  000B92  6EFA               	movwf	pclath,c
  3261  000B94  5031               	movf	_serial_write,w,c
  3262  000B96  6EFD               	movwf	tosl,c
  3263  000B98  5032               	movf	_serial_write+1,w,c
  3264  000B9A  6EFE               	movwf	tosh,c
  3265  000B9C  50F8               	movf	tblptru,w,c
  3266  000B9E  6EFF               	movwf	tosu,c
  3267  000BA0  50FA               	movf	pclath,w,c
  3268  000BA2  0EFF               	movlw	255
  3269  000BA4  0100               	movlb	0	; () banked
  3270  000BA6  6FDF               	movwf	??_receiveData& (0+255),b
  3271  000BA8  0EFF               	movlw	255
  3272  000BAA  0100               	movlb	0	; () banked
  3273  000BAC  6FE0               	movwf	(??_receiveData+1)& (0+255),b
  3274  000BAE  503E               	movf	_rx_array_inx,w,c
  3275  000BB0  0100               	movlb	0	; () banked
  3276  000BB2  6FE1               	movwf	(??_receiveData+2)& (0+255),b
  3277  000BB4  6BE2               	clrf	(??_receiveData+3)& (0+255),b
  3278  000BB6  0100               	movlb	0	; () banked
  3279  000BB8  51DF               	movf	??_receiveData& (0+255),w,b
  3280  000BBA  0100               	movlb	0	; () banked
  3281  000BBC  27E1               	addwf	(??_receiveData+2)& (0+255),f,b
  3282  000BBE  0100               	movlb	0	; () banked
  3283  000BC0  51E0               	movf	(??_receiveData+1)& (0+255),w,b
  3284  000BC2  0100               	movlb	0	; () banked
  3285  000BC4  23E2               	addwfc	(??_receiveData+3)& (0+255),f,b
  3286  000BC6  0E00               	movlw	low _rx_buffer
  3287  000BC8  0100               	movlb	0	; () banked
  3288  000BCA  25E1               	addwf	(??_receiveData+2)& (0+255),w,b
  3289  000BCC  6ED9               	movwf	fsr2l,c
  3290  000BCE  0E02               	movlw	high _rx_buffer
  3291  000BD0  0100               	movlb	0	; () banked
  3292  000BD2  21E2               	addwfc	(??_receiveData+3)& (0+255),w,b
  3293  000BD4  6EDA               	movwf	fsr2h,c
  3294  000BD6  50DF               	movf	indf2,w,c
  3295  000BD8  0012               	return		;indir
  3296  000BDA                     l4390:
  3297                           
  3298                           ;FastTransfer.c: 174: serial_write(crcHolder);
  3299  000BDA  D801               	call	u3888
  3300  000BDC  D00C               	goto	l4392
  3301  000BDE                     u3888:
  3302  000BDE  0005               	push	
  3303  000BE0  6EFA               	movwf	pclath,c
  3304  000BE2  5031               	movf	_serial_write,w,c
  3305  000BE4  6EFD               	movwf	tosl,c
  3306  000BE6  5032               	movf	_serial_write+1,w,c
  3307  000BE8  6EFE               	movwf	tosh,c
  3308  000BEA  50F8               	movf	tblptru,w,c
  3309  000BEC  6EFF               	movwf	tosu,c
  3310  000BEE  50FA               	movf	pclath,w,c
  3311  000BF0  0100               	movlb	0	; () banked
  3312  000BF2  51EB               	movf	receiveData@crcHolder& (0+255),w,b
  3313  000BF4  0012               	return		;indir
  3314  000BF6                     l4392:
  3315                           
  3316                           ;FastTransfer.c: 175: }
  3317                           ;FastTransfer.c: 179: rx_len = 0;
  3318  000BF6  0E00               	movlw	0
  3319  000BF8  6E3F               	movwf	_rx_len,c
  3320                           
  3321                           ;FastTransfer.c: 180: rx_array_inx = 0;
  3322  000BFA  0E00               	movlw	0
  3323  000BFC  6E3E               	movwf	_rx_array_inx,c
  3324                           
  3325                           ;FastTransfer.c: 181: return 1;
  3326  000BFE  0E01               	movlw	1
  3327  000C00  0012               	return	
  3328  000C02                     l4402:
  3329                           
  3330                           ;FastTransfer.c: 183: crcErrorCounter++;
  3331  000C02  0100               	movlb	0	; () banked
  3332  000C04  4B9C               	infsnz	_crcErrorCounter& (0+255),f,b
  3333  000C06  2B9D               	incf	(_crcErrorCounter+1)& (0+255),f,b
  3334                           
  3335                           ; BSR set to: 0
  3336                           ;FastTransfer.c: 185: if (AKNAKsend) {
  3337  000C08  5037               	movf	_AKNAKsend,w,c
  3338  000C0A  B4D8               	btfsc	status,2,c
  3339  000C0C  D0BC               	goto	l4432
  3340                           
  3341                           ; BSR set to: 0
  3342                           ;FastTransfer.c: 186: unsigned char holder[3];
  3343                           ;FastTransfer.c: 187: holder[0] = 255;
  3344  000C0E  0100               	movlb	0	; () banked
  3345  000C10  69E8               	setf	receiveData@holder_1397& (0+255),b
  3346                           
  3347                           ; BSR set to: 0
  3348                           ;FastTransfer.c: 188: holder[1] = 2;
  3349  000C12  0E02               	movlw	2
  3350  000C14  0100               	movlb	0	; () banked
  3351  000C16  6FE9               	movwf	(receiveData@holder_1397+1)& (0+255),b
  3352                           
  3353                           ; BSR set to: 0
  3354                           ;FastTransfer.c: 189: holder[2] = rx_buffer[rx_array_inx - 1];
  3355  000C18  0EFF               	movlw	255
  3356  000C1A  0100               	movlb	0	; () banked
  3357  000C1C  6FDF               	movwf	??_receiveData& (0+255),b
  3358  000C1E  0EFF               	movlw	255
  3359  000C20  0100               	movlb	0	; () banked
  3360  000C22  6FE0               	movwf	(??_receiveData+1)& (0+255),b
  3361  000C24  503E               	movf	_rx_array_inx,w,c
  3362  000C26  0100               	movlb	0	; () banked
  3363  000C28  6FE1               	movwf	(??_receiveData+2)& (0+255),b
  3364  000C2A  6BE2               	clrf	(??_receiveData+3)& (0+255),b
  3365  000C2C  0100               	movlb	0	; () banked
  3366  000C2E  51DF               	movf	??_receiveData& (0+255),w,b
  3367  000C30  0100               	movlb	0	; () banked
  3368  000C32  27E1               	addwf	(??_receiveData+2)& (0+255),f,b
  3369  000C34  0100               	movlb	0	; () banked
  3370  000C36  51E0               	movf	(??_receiveData+1)& (0+255),w,b
  3371  000C38  0100               	movlb	0	; () banked
  3372  000C3A  23E2               	addwfc	(??_receiveData+3)& (0+255),f,b
  3373  000C3C  0E00               	movlw	low _rx_buffer
  3374  000C3E  0100               	movlb	0	; () banked
  3375  000C40  25E1               	addwf	(??_receiveData+2)& (0+255),w,b
  3376  000C42  6ED9               	movwf	fsr2l,c
  3377  000C44  0E02               	movlw	high _rx_buffer
  3378  000C46  0100               	movlb	0	; () banked
  3379  000C48  21E2               	addwfc	(??_receiveData+3)& (0+255),w,b
  3380  000C4A  6EDA               	movwf	fsr2h,c
  3381  000C4C  50DF               	movf	indf2,w,c
  3382  000C4E  0100               	movlb	0	; () banked
  3383  000C50  6FEA               	movwf	(receiveData@holder_1397+2)& (0+255),b
  3384                           
  3385                           ; BSR set to: 0
  3386                           ;FastTransfer.c: 190: unsigned char crcHolder = CRC8(holder, 3);
  3387  000C52  0EE8               	movlw	low receiveData@holder_1397
  3388  000C54  6E1D               	movwf	CRC8@data,c
  3389  000C56  0E00               	movlw	high receiveData@holder_1397
  3390  000C58  6E1E               	movwf	CRC8@data+1,c
  3391  000C5A  0E03               	movlw	3
  3392  000C5C  6E1F               	movwf	CRC8@len,c
  3393  000C5E  EC9B  F010         	call	_CRC8
  3394  000C62  0100               	movlb	0	; () banked
  3395  000C64  6FEC               	movwf	receiveData@crcHolder_1398& (0+255),b
  3396                           
  3397                           ; BSR set to: 0
  3398                           ;FastTransfer.c: 191: serial_write(0x06);
  3399  000C66  D801               	call	u3908
  3400  000C68  D00B               	goto	l4416
  3401  000C6A                     u3908:
  3402  000C6A  0005               	push	
  3403  000C6C  6EFA               	movwf	pclath,c
  3404  000C6E  5031               	movf	_serial_write,w,c
  3405  000C70  6EFD               	movwf	tosl,c
  3406  000C72  5032               	movf	_serial_write+1,w,c
  3407  000C74  6EFE               	movwf	tosh,c
  3408  000C76  50F8               	movf	tblptru,w,c
  3409  000C78  6EFF               	movwf	tosu,c
  3410  000C7A  50FA               	movf	pclath,w,c
  3411  000C7C  0E06               	movlw	6
  3412  000C7E  0012               	return		;indir
  3413  000C80                     l4416:
  3414                           
  3415                           ;FastTransfer.c: 192: serial_write(0x85);
  3416  000C80  D801               	call	u3918
  3417  000C82  D00B               	goto	l4418
  3418  000C84                     u3918:
  3419  000C84  0005               	push	
  3420  000C86  6EFA               	movwf	pclath,c
  3421  000C88  5031               	movf	_serial_write,w,c
  3422  000C8A  6EFD               	movwf	tosl,c
  3423  000C8C  5032               	movf	_serial_write+1,w,c
  3424  000C8E  6EFE               	movwf	tosh,c
  3425  000C90  50F8               	movf	tblptru,w,c
  3426  000C92  6EFF               	movwf	tosu,c
  3427  000C94  50FA               	movf	pclath,w,c
  3428  000C96  0E85               	movlw	133
  3429  000C98  0012               	return		;indir
  3430  000C9A                     l4418:
  3431                           
  3432                           ;FastTransfer.c: 193: serial_write(returnAddress);
  3433  000C9A  D801               	call	u3928
  3434  000C9C  D00B               	goto	l4420
  3435  000C9E                     u3928:
  3436  000C9E  0005               	push	
  3437  000CA0  6EFA               	movwf	pclath,c
  3438  000CA2  5031               	movf	_serial_write,w,c
  3439  000CA4  6EFD               	movwf	tosl,c
  3440  000CA6  5032               	movf	_serial_write+1,w,c
  3441  000CA8  6EFE               	movwf	tosh,c
  3442  000CAA  50F8               	movf	tblptru,w,c
  3443  000CAC  6EFF               	movwf	tosu,c
  3444  000CAE  50FA               	movf	pclath,w,c
  3445  000CB0  503C               	movf	_returnAddress,w,c
  3446  000CB2  0012               	return		;indir
  3447  000CB4                     l4420:
  3448                           
  3449                           ;FastTransfer.c: 194: serial_write(moduleAddress);
  3450  000CB4  D801               	call	u3938
  3451  000CB6  D00B               	goto	l4422
  3452  000CB8                     u3938:
  3453  000CB8  0005               	push	
  3454  000CBA  6EFA               	movwf	pclath,c
  3455  000CBC  5031               	movf	_serial_write,w,c
  3456  000CBE  6EFD               	movwf	tosl,c
  3457  000CC0  5032               	movf	_serial_write+1,w,c
  3458  000CC2  6EFE               	movwf	tosh,c
  3459  000CC4  50F8               	movf	tblptru,w,c
  3460  000CC6  6EFF               	movwf	tosu,c
  3461  000CC8  50FA               	movf	pclath,w,c
  3462  000CCA  503B               	movf	_moduleAddress,w,c
  3463  000CCC  0012               	return		;indir
  3464  000CCE                     l4422:
  3465                           
  3466                           ;FastTransfer.c: 195: serial_write(3);
  3467  000CCE  D801               	call	u3948
  3468  000CD0  D00B               	goto	l4424
  3469  000CD2                     u3948:
  3470  000CD2  0005               	push	
  3471  000CD4  6EFA               	movwf	pclath,c
  3472  000CD6  5031               	movf	_serial_write,w,c
  3473  000CD8  6EFD               	movwf	tosl,c
  3474  000CDA  5032               	movf	_serial_write+1,w,c
  3475  000CDC  6EFE               	movwf	tosh,c
  3476  000CDE  50F8               	movf	tblptru,w,c
  3477  000CE0  6EFF               	movwf	tosu,c
  3478  000CE2  50FA               	movf	pclath,w,c
  3479  000CE4  0E03               	movlw	3
  3480  000CE6  0012               	return		;indir
  3481  000CE8                     l4424:
  3482                           
  3483                           ;FastTransfer.c: 196: serial_write(255);
  3484  000CE8  D801               	call	u3958
  3485  000CEA  D00B               	goto	l4426
  3486  000CEC                     u3958:
  3487  000CEC  0005               	push	
  3488  000CEE  6EFA               	movwf	pclath,c
  3489  000CF0  5031               	movf	_serial_write,w,c
  3490  000CF2  6EFD               	movwf	tosl,c
  3491  000CF4  5032               	movf	_serial_write+1,w,c
  3492  000CF6  6EFE               	movwf	tosh,c
  3493  000CF8  50F8               	movf	tblptru,w,c
  3494  000CFA  6EFF               	movwf	tosu,c
  3495  000CFC  50FA               	movf	pclath,w,c
  3496  000CFE  0EFF               	movlw	255
  3497  000D00  0012               	return		;indir
  3498  000D02                     l4426:
  3499                           
  3500                           ;FastTransfer.c: 197: serial_write(2);
  3501  000D02  D801               	call	u3968
  3502  000D04  D00B               	goto	l4428
  3503  000D06                     u3968:
  3504  000D06  0005               	push	
  3505  000D08  6EFA               	movwf	pclath,c
  3506  000D0A  5031               	movf	_serial_write,w,c
  3507  000D0C  6EFD               	movwf	tosl,c
  3508  000D0E  5032               	movf	_serial_write+1,w,c
  3509  000D10  6EFE               	movwf	tosh,c
  3510  000D12  50F8               	movf	tblptru,w,c
  3511  000D14  6EFF               	movwf	tosu,c
  3512  000D16  50FA               	movf	pclath,w,c
  3513  000D18  0E02               	movlw	2
  3514  000D1A  0012               	return		;indir
  3515  000D1C                     l4428:
  3516                           
  3517                           ;FastTransfer.c: 198: serial_write(rx_buffer[rx_array_inx - 1]);
  3518  000D1C  D801               	call	u3978
  3519  000D1E  D025               	goto	l4430
  3520  000D20                     u3978:
  3521  000D20  0005               	push	
  3522  000D22  6EFA               	movwf	pclath,c
  3523  000D24  5031               	movf	_serial_write,w,c
  3524  000D26  6EFD               	movwf	tosl,c
  3525  000D28  5032               	movf	_serial_write+1,w,c
  3526  000D2A  6EFE               	movwf	tosh,c
  3527  000D2C  50F8               	movf	tblptru,w,c
  3528  000D2E  6EFF               	movwf	tosu,c
  3529  000D30  50FA               	movf	pclath,w,c
  3530  000D32  0EFF               	movlw	255
  3531  000D34  0100               	movlb	0	; () banked
  3532  000D36  6FDF               	movwf	??_receiveData& (0+255),b
  3533  000D38  0EFF               	movlw	255
  3534  000D3A  0100               	movlb	0	; () banked
  3535  000D3C  6FE0               	movwf	(??_receiveData+1)& (0+255),b
  3536  000D3E  503E               	movf	_rx_array_inx,w,c
  3537  000D40  0100               	movlb	0	; () banked
  3538  000D42  6FE1               	movwf	(??_receiveData+2)& (0+255),b
  3539  000D44  6BE2               	clrf	(??_receiveData+3)& (0+255),b
  3540  000D46  0100               	movlb	0	; () banked
  3541  000D48  51DF               	movf	??_receiveData& (0+255),w,b
  3542  000D4A  0100               	movlb	0	; () banked
  3543  000D4C  27E1               	addwf	(??_receiveData+2)& (0+255),f,b
  3544  000D4E  0100               	movlb	0	; () banked
  3545  000D50  51E0               	movf	(??_receiveData+1)& (0+255),w,b
  3546  000D52  0100               	movlb	0	; () banked
  3547  000D54  23E2               	addwfc	(??_receiveData+3)& (0+255),f,b
  3548  000D56  0E00               	movlw	low _rx_buffer
  3549  000D58  0100               	movlb	0	; () banked
  3550  000D5A  25E1               	addwf	(??_receiveData+2)& (0+255),w,b
  3551  000D5C  6ED9               	movwf	fsr2l,c
  3552  000D5E  0E02               	movlw	high _rx_buffer
  3553  000D60  0100               	movlb	0	; () banked
  3554  000D62  21E2               	addwfc	(??_receiveData+3)& (0+255),w,b
  3555  000D64  6EDA               	movwf	fsr2h,c
  3556  000D66  50DF               	movf	indf2,w,c
  3557  000D68  0012               	return		;indir
  3558  000D6A                     l4430:
  3559                           
  3560                           ;FastTransfer.c: 199: serial_write(crcHolder);
  3561  000D6A  D801               	call	u3988
  3562  000D6C  D00C               	goto	l4432
  3563  000D6E                     u3988:
  3564  000D6E  0005               	push	
  3565  000D70  6EFA               	movwf	pclath,c
  3566  000D72  5031               	movf	_serial_write,w,c
  3567  000D74  6EFD               	movwf	tosl,c
  3568  000D76  5032               	movf	_serial_write+1,w,c
  3569  000D78  6EFE               	movwf	tosh,c
  3570  000D7A  50F8               	movf	tblptru,w,c
  3571  000D7C  6EFF               	movwf	tosu,c
  3572  000D7E  50FA               	movf	pclath,w,c
  3573  000D80  0100               	movlb	0	; () banked
  3574  000D82  51EC               	movf	receiveData@crcHolder_1398& (0+255),w,b
  3575  000D84  0012               	return		;indir
  3576  000D86                     l4432:
  3577                           
  3578                           ;FastTransfer.c: 200: }
  3579                           ;FastTransfer.c: 203: rx_len = 0;
  3580  000D86  0E00               	movlw	0
  3581  000D88  6E3F               	movwf	_rx_len,c
  3582                           
  3583                           ;FastTransfer.c: 204: rx_array_inx = 0;
  3584  000D8A  0E00               	movlw	0
  3585  000D8C  6E3E               	movwf	_rx_array_inx,c
  3586                           
  3587                           ;FastTransfer.c: 205: return 0;
  3588  000D8E  0E00               	movlw	0
  3589  000D90  0012               	return	
  3590  000D92                     l4440:
  3591                           
  3592                           ;FastTransfer.c: 206: }
  3593                           ;FastTransfer.c: 207: }
  3594                           ;FastTransfer.c: 208: }
  3595                           ;FastTransfer.c: 211: return 0;
  3596  000D92  0E00               	movlw	0
  3597  000D94  0012               	return	
  3598  000D96                     __end_of_receiveData:
  3599                           	opt stack 0
  3600                           tosu	equ	0xFFF
  3601                           tosh	equ	0xFFE
  3602                           tosl	equ	0xFFD
  3603                           pclath	equ	0xFFA
  3604                           tblptru	equ	0xFF8
  3605                           tblptrh	equ	0xFF7
  3606                           tblptrl	equ	0xFF6
  3607                           tablat	equ	0xFF5
  3608                           prodh	equ	0xFF4
  3609                           prodl	equ	0xFF3
  3610                           intcon	equ	0xFF2
  3611                           postinc0	equ	0xFEE
  3612                           wreg	equ	0xFE8
  3613                           indf2	equ	0xFDF
  3614                           postinc2	equ	0xFDE
  3615                           postdec2	equ	0xFDD
  3616                           plusw2	equ	0xFDB
  3617                           fsr2h	equ	0xFDA
  3618                           fsr2l	equ	0xFD9
  3619                           status	equ	0xFD8
  3620                           
  3621 ;; *************** function _Send_put *****************
  3622 ;; Defined at:
  3623 ;;		line 132 in file "UART.c"
  3624 ;; Parameters:    Size  Location     Type
  3625 ;;  _data           1    wreg     unsigned char 
  3626 ;; Auto vars:     Size  Location     Type
  3627 ;;  _data           1    3[BANK0 ] unsigned char 
  3628 ;; Return value:  Size  Location     Type
  3629 ;;                  1    wreg      void 
  3630 ;; Registers used:
  3631 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3632 ;; Tracked objects:
  3633 ;;		On entry : 0/0
  3634 ;;		On exit  : 0/0
  3635 ;;		Unchanged: 0/0
  3636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3637 ;;      Params:         0       0       0       0       0       0       0
  3638 ;;      Locals:         0       1       0       0       0       0       0
  3639 ;;      Temps:          0       0       0       0       0       0       0
  3640 ;;      Totals:         0       1       0       0       0       0       0
  3641 ;;Total ram usage:        1 bytes
  3642 ;; Hardware stack levels used:    1
  3643 ;; Hardware stack levels required when called:    8
  3644 ;; This function calls:
  3645 ;;		_UART_buff_get
  3646 ;;		_UART_buff_put
  3647 ;; This function is called by:
  3648 ;;		_SYSTEM_Initialize
  3649 ;;		_putch
  3650 ;;		_sendData
  3651 ;;		_receiveData
  3652 ;; This function uses a non-reentrant model
  3653 ;;
  3654                           
  3655                           	psect	text12
  3656  00227A                     __ptext12:
  3657                           	opt stack 0
  3658  00227A                     _Send_put:
  3659                           	opt stack 19
  3660                           
  3661                           ;incstack = 0
  3662                           ;Send_put@_data stored from wreg
  3663  00227A  0100               	movlb	0	; () banked
  3664  00227C  6FDE               	movwf	Send_put@_data& (0+255),b
  3665                           
  3666                           ;UART.c: 133: UART_buff_put(&output_buffer, _data);
  3667  00227E  0E00               	movlw	low _output_buffer
  3668  002280  0100               	movlb	0	; () banked
  3669  002282  6FDB               	movwf	UART_buff_put@_this& (0+255),b
  3670  002284  0E04               	movlw	high _output_buffer
  3671  002286  0100               	movlb	0	; () banked
  3672  002288  6FDC               	movwf	(UART_buff_put@_this+1)& (0+255),b
  3673  00228A  C0DE  F0DD         	movff	Send_put@_data,UART_buff_put@c
  3674  00228E  EC37  F008         	call	_UART_buff_put
  3675                           
  3676                           ;UART.c: 134: if (Transmit_stall == 1) {
  3677  002292  0442               	decf	_Transmit_stall,w,c
  3678  002294  A4D8               	btfss	status,2,c
  3679  002296  0012               	return	
  3680                           
  3681                           ;UART.c: 135: Transmit_stall = 0;
  3682  002298  0E00               	movlw	0
  3683  00229A  6E42               	movwf	_Transmit_stall,c
  3684                           
  3685                           ;UART.c: 136: TXREG1 = UART_buff_get(&output_buffer);
  3686  00229C  0E00               	movlw	low _output_buffer
  3687  00229E  6E23               	movwf	UART_buff_get@_this,c
  3688  0022A0  0E04               	movlw	high _output_buffer
  3689  0022A2  6E24               	movwf	UART_buff_get@_this+1,c
  3690  0022A4  EC8F  F00C         	call	_UART_buff_get	;wreg free
  3691  0022A8  6EAD               	movwf	4013,c	;volatile
  3692                           
  3693                           ;UART.c: 137: PIE1bits.TX1IE = 1;
  3694  0022AA  889D               	bsf	3997,4,c	;volatile
  3695  0022AC  0012               	return	
  3696  0022AE                     __end_of_Send_put:
  3697                           	opt stack 0
  3698                           tosu	equ	0xFFF
  3699                           tosh	equ	0xFFE
  3700                           tosl	equ	0xFFD
  3701                           pclath	equ	0xFFA
  3702                           tblptru	equ	0xFF8
  3703                           tblptrh	equ	0xFF7
  3704                           tblptrl	equ	0xFF6
  3705                           tablat	equ	0xFF5
  3706                           prodh	equ	0xFF4
  3707                           prodl	equ	0xFF3
  3708                           intcon	equ	0xFF2
  3709                           postinc0	equ	0xFEE
  3710                           wreg	equ	0xFE8
  3711                           indf2	equ	0xFDF
  3712                           postinc2	equ	0xFDE
  3713                           postdec2	equ	0xFDD
  3714                           plusw2	equ	0xFDB
  3715                           fsr2h	equ	0xFDA
  3716                           fsr2l	equ	0xFD9
  3717                           status	equ	0xFD8
  3718                           
  3719 ;; *************** function _UART_buff_put *****************
  3720 ;; Defined at:
  3721 ;;		line 70 in file "UART.c"
  3722 ;; Parameters:    Size  Location     Type
  3723 ;;  _this           2    0[BANK0 ] PTR struct UART_ring_buf
  3724 ;;		 -> output_buffer(206), input_buffer(206), 
  3725 ;;  c               1    2[BANK0 ] const unsigned char 
  3726 ;; Auto vars:     Size  Location     Type
  3727 ;;		None
  3728 ;; Return value:  Size  Location     Type
  3729 ;;                  1    wreg      void 
  3730 ;; Registers used:
  3731 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3732 ;; Tracked objects:
  3733 ;;		On entry : 0/0
  3734 ;;		On exit  : 0/0
  3735 ;;		Unchanged: 0/0
  3736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3737 ;;      Params:         0       3       0       0       0       0       0
  3738 ;;      Locals:         0       0       0       0       0       0       0
  3739 ;;      Temps:          2       0       0       0       0       0       0
  3740 ;;      Totals:         2       3       0       0       0       0       0
  3741 ;;Total ram usage:        5 bytes
  3742 ;; Hardware stack levels used:    1
  3743 ;; Hardware stack levels required when called:    7
  3744 ;; This function calls:
  3745 ;;		_UART_buff_modulo_inc
  3746 ;; This function is called by:
  3747 ;;		_Send_put
  3748 ;; This function uses a non-reentrant model
  3749 ;;
  3750                           
  3751                           	psect	text13
  3752  00106E                     __ptext13:
  3753                           	opt stack 0
  3754  00106E                     _UART_buff_put:
  3755                           	opt stack 19
  3756                           
  3757                           ;UART.c: 71: if (_this->count < 200) {
  3758                           
  3759                           ;incstack = 0
  3760  00106E  0100               	movlb	0	; () banked
  3761  001070  EE20 F0CC          	lfsr	2,204
  3762  001074  51DB               	movf	UART_buff_put@_this& (0+255),w,b
  3763  001076  26D9               	addwf	fsr2l,f,c
  3764  001078  51DC               	movf	(UART_buff_put@_this+1)& (0+255),w,b
  3765  00107A  22DA               	addwfc	fsr2h,f,c
  3766  00107C  0E01               	movlw	1
  3767  00107E  BEDB               	btfsc	plusw2,7,c
  3768  001080  D007               	goto	l3942
  3769  001082  0E01               	movlw	1
  3770  001084  50DB               	movf	plusw2,w,c
  3771  001086  E140               	bnz	l3948
  3772  001088  0EC8               	movlw	200
  3773  00108A  5CDE               	subwf	postinc2,w,c
  3774  00108C  B0D8               	btfsc	status,0,c
  3775  00108E  D03C               	goto	l3948
  3776  001090                     l3942:
  3777                           
  3778                           ; BSR set to: 0
  3779                           ;UART.c: 72: _this->buf[_this->head] = c;
  3780  001090  0100               	movlb	0	; () banked
  3781  001092  EE20 F0C8          	lfsr	2,200
  3782  001096  51DB               	movf	UART_buff_put@_this& (0+255),w,b
  3783  001098  26D9               	addwf	fsr2l,f,c
  3784  00109A  51DC               	movf	(UART_buff_put@_this+1)& (0+255),w,b
  3785  00109C  22DA               	addwfc	fsr2h,f,c
  3786  00109E  CFDE F023          	movff	postinc2,??_UART_buff_put
  3787  0010A2  CFDD F024          	movff	postdec2,??_UART_buff_put+1
  3788  0010A6  5023               	movf	??_UART_buff_put,w,c
  3789  0010A8  0100               	movlb	0	; () banked
  3790  0010AA  25DB               	addwf	UART_buff_put@_this& (0+255),w,b
  3791  0010AC  6ED9               	movwf	fsr2l,c
  3792  0010AE  5024               	movf	??_UART_buff_put+1,w,c
  3793  0010B0  0100               	movlb	0	; () banked
  3794  0010B2  21DC               	addwfc	(UART_buff_put@_this+1)& (0+255),w,b
  3795  0010B4  6EDA               	movwf	fsr2h,c
  3796  0010B6  C0DD  FFDF         	movff	UART_buff_put@c,indf2
  3797                           
  3798                           ; BSR set to: 0
  3799                           ;UART.c: 73: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3800  0010BA  0100               	movlb	0	; () banked
  3801  0010BC  EE20 F0C8          	lfsr	2,200
  3802  0010C0  51DB               	movf	UART_buff_put@_this& (0+255),w,b
  3803  0010C2  26D9               	addwf	fsr2l,f,c
  3804  0010C4  51DC               	movf	(UART_buff_put@_this+1)& (0+255),w,b
  3805  0010C6  22DA               	addwfc	fsr2h,f,c
  3806  0010C8  CFDE F01D          	movff	postinc2,UART_buff_modulo_inc@value
  3807  0010CC  CFDD F01E          	movff	postdec2,UART_buff_modulo_inc@value+1
  3808  0010D0  0E00               	movlw	0
  3809  0010D2  6E20               	movwf	UART_buff_modulo_inc@modulus+1,c
  3810  0010D4  0EC8               	movlw	200
  3811  0010D6  6E1F               	movwf	UART_buff_modulo_inc@modulus,c
  3812  0010D8  ECFE  F011         	call	_UART_buff_modulo_inc	;wreg free
  3813  0010DC  0100               	movlb	0	; () banked
  3814  0010DE  EE20 F0C8          	lfsr	2,200
  3815  0010E2  51DB               	movf	UART_buff_put@_this& (0+255),w,b
  3816  0010E4  26D9               	addwf	fsr2l,f,c
  3817  0010E6  51DC               	movf	(UART_buff_put@_this+1)& (0+255),w,b
  3818  0010E8  22DA               	addwfc	fsr2h,f,c
  3819  0010EA  C01D  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3820  0010EE  C01E  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3821                           
  3822                           ; BSR set to: 0
  3823                           ;UART.c: 74: ++_this->count;
  3824  0010F2  0100               	movlb	0	; () banked
  3825  0010F4  EE20 F0CC          	lfsr	2,204
  3826  0010F8  51DB               	movf	UART_buff_put@_this& (0+255),w,b
  3827  0010FA  26D9               	addwf	fsr2l,f,c
  3828  0010FC  51DC               	movf	(UART_buff_put@_this+1)& (0+255),w,b
  3829  0010FE  22DA               	addwfc	fsr2h,f,c
  3830  001100  2ADE               	incf	postinc2,f,c
  3831  001102  0E00               	movlw	0
  3832  001104  22DD               	addwfc	postdec2,f,c
  3833                           
  3834                           ;UART.c: 75: } else {
  3835  001106  0012               	return	
  3836  001108                     l3948:
  3837                           
  3838                           ; BSR set to: 0
  3839                           ;UART.c: 76: _this->buf[_this->head] = c;
  3840  001108  0100               	movlb	0	; () banked
  3841  00110A  EE20 F0C8          	lfsr	2,200
  3842  00110E  51DB               	movf	UART_buff_put@_this& (0+255),w,b
  3843  001110  26D9               	addwf	fsr2l,f,c
  3844  001112  51DC               	movf	(UART_buff_put@_this+1)& (0+255),w,b
  3845  001114  22DA               	addwfc	fsr2h,f,c
  3846  001116  CFDE F023          	movff	postinc2,??_UART_buff_put
  3847  00111A  CFDD F024          	movff	postdec2,??_UART_buff_put+1
  3848  00111E  5023               	movf	??_UART_buff_put,w,c
  3849  001120  0100               	movlb	0	; () banked
  3850  001122  25DB               	addwf	UART_buff_put@_this& (0+255),w,b
  3851  001124  6ED9               	movwf	fsr2l,c
  3852  001126  5024               	movf	??_UART_buff_put+1,w,c
  3853  001128  0100               	movlb	0	; () banked
  3854  00112A  21DC               	addwfc	(UART_buff_put@_this+1)& (0+255),w,b
  3855  00112C  6EDA               	movwf	fsr2h,c
  3856  00112E  C0DD  FFDF         	movff	UART_buff_put@c,indf2
  3857                           
  3858                           ; BSR set to: 0
  3859                           ;UART.c: 77: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3860  001132  0100               	movlb	0	; () banked
  3861  001134  EE20 F0C8          	lfsr	2,200
  3862  001138  51DB               	movf	UART_buff_put@_this& (0+255),w,b
  3863  00113A  26D9               	addwf	fsr2l,f,c
  3864  00113C  51DC               	movf	(UART_buff_put@_this+1)& (0+255),w,b
  3865  00113E  22DA               	addwfc	fsr2h,f,c
  3866  001140  CFDE F01D          	movff	postinc2,UART_buff_modulo_inc@value
  3867  001144  CFDD F01E          	movff	postdec2,UART_buff_modulo_inc@value+1
  3868  001148  0E00               	movlw	0
  3869  00114A  6E20               	movwf	UART_buff_modulo_inc@modulus+1,c
  3870  00114C  0EC8               	movlw	200
  3871  00114E  6E1F               	movwf	UART_buff_modulo_inc@modulus,c
  3872  001150  ECFE  F011         	call	_UART_buff_modulo_inc	;wreg free
  3873  001154  0100               	movlb	0	; () banked
  3874  001156  EE20 F0C8          	lfsr	2,200
  3875  00115A  51DB               	movf	UART_buff_put@_this& (0+255),w,b
  3876  00115C  26D9               	addwf	fsr2l,f,c
  3877  00115E  51DC               	movf	(UART_buff_put@_this+1)& (0+255),w,b
  3878  001160  22DA               	addwfc	fsr2h,f,c
  3879  001162  C01D  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3880  001166  C01E  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3881                           
  3882                           ; BSR set to: 0
  3883                           ;UART.c: 78: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  3884  00116A  0100               	movlb	0	; () banked
  3885  00116C  EE20 F0CA          	lfsr	2,202
  3886  001170  51DB               	movf	UART_buff_put@_this& (0+255),w,b
  3887  001172  26D9               	addwf	fsr2l,f,c
  3888  001174  51DC               	movf	(UART_buff_put@_this+1)& (0+255),w,b
  3889  001176  22DA               	addwfc	fsr2h,f,c
  3890  001178  CFDE F01D          	movff	postinc2,UART_buff_modulo_inc@value
  3891  00117C  CFDD F01E          	movff	postdec2,UART_buff_modulo_inc@value+1
  3892  001180  0E00               	movlw	0
  3893  001182  6E20               	movwf	UART_buff_modulo_inc@modulus+1,c
  3894  001184  0EC8               	movlw	200
  3895  001186  6E1F               	movwf	UART_buff_modulo_inc@modulus,c
  3896  001188  ECFE  F011         	call	_UART_buff_modulo_inc	;wreg free
  3897  00118C  0100               	movlb	0	; () banked
  3898  00118E  EE20 F0CA          	lfsr	2,202
  3899  001192  51DB               	movf	UART_buff_put@_this& (0+255),w,b
  3900  001194  26D9               	addwf	fsr2l,f,c
  3901  001196  51DC               	movf	(UART_buff_put@_this+1)& (0+255),w,b
  3902  001198  22DA               	addwfc	fsr2h,f,c
  3903  00119A  C01D  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3904  00119E  C01E  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3905  0011A2  0012               	return	
  3906  0011A4                     __end_of_UART_buff_put:
  3907                           	opt stack 0
  3908                           tosu	equ	0xFFF
  3909                           tosh	equ	0xFFE
  3910                           tosl	equ	0xFFD
  3911                           pclath	equ	0xFFA
  3912                           tblptru	equ	0xFF8
  3913                           tblptrh	equ	0xFF7
  3914                           tblptrl	equ	0xFF6
  3915                           tablat	equ	0xFF5
  3916                           prodh	equ	0xFF4
  3917                           prodl	equ	0xFF3
  3918                           intcon	equ	0xFF2
  3919                           postinc0	equ	0xFEE
  3920                           wreg	equ	0xFE8
  3921                           indf2	equ	0xFDF
  3922                           postinc2	equ	0xFDE
  3923                           postdec2	equ	0xFDD
  3924                           plusw2	equ	0xFDB
  3925                           fsr2h	equ	0xFDA
  3926                           fsr2l	equ	0xFD9
  3927                           status	equ	0xFD8
  3928                           
  3929 ;; *************** function _Receive_get *****************
  3930 ;; Defined at:
  3931 ;;		line 128 in file "UART.c"
  3932 ;; Parameters:    Size  Location     Type
  3933 ;;		None
  3934 ;; Auto vars:     Size  Location     Type
  3935 ;;		None
  3936 ;; Return value:  Size  Location     Type
  3937 ;;                  1    wreg      unsigned char 
  3938 ;; Registers used:
  3939 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3940 ;; Tracked objects:
  3941 ;;		On entry : 0/0
  3942 ;;		On exit  : 0/0
  3943 ;;		Unchanged: 0/0
  3944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3945 ;;      Params:         0       0       0       0       0       0       0
  3946 ;;      Locals:         0       0       0       0       0       0       0
  3947 ;;      Temps:          0       0       0       0       0       0       0
  3948 ;;      Totals:         0       0       0       0       0       0       0
  3949 ;;Total ram usage:        0 bytes
  3950 ;; Hardware stack levels used:    1
  3951 ;; Hardware stack levels required when called:    8
  3952 ;; This function calls:
  3953 ;;		_UART_buff_get
  3954 ;; This function is called by:
  3955 ;;		_SYSTEM_Initialize
  3956 ;;		_getch
  3957 ;;		_receiveData
  3958 ;;		_CRCcheck
  3959 ;; This function uses a non-reentrant model
  3960 ;;
  3961                           
  3962                           	psect	text14
  3963  0025D4                     __ptext14:
  3964                           	opt stack 0
  3965  0025D4                     _Receive_get:
  3966                           	opt stack 20
  3967                           
  3968                           ;UART.c: 129: return UART_buff_get(&input_buffer);
  3969                           
  3970                           ; BSR set to: 0
  3971                           ;incstack = 0
  3972  0025D4  0E00               	movlw	low _input_buffer
  3973  0025D6  6E23               	movwf	UART_buff_get@_this,c
  3974  0025D8  0E03               	movlw	high _input_buffer
  3975  0025DA  6E24               	movwf	UART_buff_get@_this+1,c
  3976  0025DC  EC8F  F00C         	call	_UART_buff_get	;wreg free
  3977  0025E0  0012               	return	
  3978  0025E2                     __end_of_Receive_get:
  3979                           	opt stack 0
  3980                           tosu	equ	0xFFF
  3981                           tosh	equ	0xFFE
  3982                           tosl	equ	0xFFD
  3983                           pclath	equ	0xFFA
  3984                           tblptru	equ	0xFF8
  3985                           tblptrh	equ	0xFF7
  3986                           tblptrl	equ	0xFF6
  3987                           tablat	equ	0xFF5
  3988                           prodh	equ	0xFF4
  3989                           prodl	equ	0xFF3
  3990                           intcon	equ	0xFF2
  3991                           postinc0	equ	0xFEE
  3992                           wreg	equ	0xFE8
  3993                           indf2	equ	0xFDF
  3994                           postinc2	equ	0xFDE
  3995                           postdec2	equ	0xFDD
  3996                           plusw2	equ	0xFDB
  3997                           fsr2h	equ	0xFDA
  3998                           fsr2l	equ	0xFD9
  3999                           status	equ	0xFD8
  4000                           
  4001 ;; *************** function _UART_buff_get *****************
  4002 ;; Defined at:
  4003 ;;		line 83 in file "UART.c"
  4004 ;; Parameters:    Size  Location     Type
  4005 ;;  _this           2   34[COMRAM] PTR struct UART_ring_buf
  4006 ;;		 -> output_buffer(206), input_buffer(206), 
  4007 ;; Auto vars:     Size  Location     Type
  4008 ;;  c               1    2[BANK0 ] unsigned char 
  4009 ;; Return value:  Size  Location     Type
  4010 ;;                  1    wreg      unsigned char 
  4011 ;; Registers used:
  4012 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4013 ;; Tracked objects:
  4014 ;;		On entry : 0/0
  4015 ;;		On exit  : 0/0
  4016 ;;		Unchanged: 0/0
  4017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4018 ;;      Params:         2       0       0       0       0       0       0
  4019 ;;      Locals:         0       1       0       0       0       0       0
  4020 ;;      Temps:          0       2       0       0       0       0       0
  4021 ;;      Totals:         2       3       0       0       0       0       0
  4022 ;;Total ram usage:        5 bytes
  4023 ;; Hardware stack levels used:    1
  4024 ;; Hardware stack levels required when called:    7
  4025 ;; This function calls:
  4026 ;;		_UART_buff_modulo_inc
  4027 ;; This function is called by:
  4028 ;;		_Receive_get
  4029 ;;		_Send_put
  4030 ;; This function uses a non-reentrant model
  4031 ;;
  4032                           
  4033                           	psect	text15
  4034  00191E                     __ptext15:
  4035                           	opt stack 0
  4036  00191E                     _UART_buff_get:
  4037                           	opt stack 19
  4038                           
  4039                           ;UART.c: 84: unsigned char c;
  4040                           ;UART.c: 85: if (_this->count > 0) {
  4041                           
  4042                           ;incstack = 0
  4043  00191E  EE20 F0CC          	lfsr	2,204
  4044  001922  5023               	movf	UART_buff_get@_this,w,c
  4045  001924  26D9               	addwf	fsr2l,f,c
  4046  001926  5024               	movf	UART_buff_get@_this+1,w,c
  4047  001928  22DA               	addwfc	fsr2h,f,c
  4048  00192A  0E01               	movlw	1
  4049  00192C  BEDB               	btfsc	plusw2,7,c
  4050  00192E  D03F               	goto	l3962
  4051  001930  0E01               	movlw	1
  4052  001932  50DB               	movf	plusw2,w,c
  4053  001934  E103               	bnz	u3240
  4054  001936  04DE               	decf	postinc2,w,c
  4055  001938  A0D8               	btfss	status,0,c
  4056  00193A  D039               	goto	l3962
  4057  00193C                     u3240:
  4058                           
  4059                           ;UART.c: 86: c = _this->buf[_this->tail];
  4060  00193C  EE20 F0CA          	lfsr	2,202
  4061  001940  5023               	movf	UART_buff_get@_this,w,c
  4062  001942  26D9               	addwf	fsr2l,f,c
  4063  001944  5024               	movf	UART_buff_get@_this+1,w,c
  4064  001946  22DA               	addwfc	fsr2h,f,c
  4065  001948  CFDE F0DB          	movff	postinc2,??_UART_buff_get
  4066  00194C  CFDD F0DC          	movff	postdec2,??_UART_buff_get+1
  4067  001950  0100               	movlb	0	; () banked
  4068  001952  51DB               	movf	??_UART_buff_get& (0+255),w,b
  4069  001954  2423               	addwf	UART_buff_get@_this,w,c
  4070  001956  6ED9               	movwf	fsr2l,c
  4071  001958  0100               	movlb	0	; () banked
  4072  00195A  51DC               	movf	(??_UART_buff_get+1)& (0+255),w,b
  4073  00195C  2024               	addwfc	UART_buff_get@_this+1,w,c
  4074  00195E  6EDA               	movwf	fsr2h,c
  4075  001960  50DF               	movf	indf2,w,c
  4076  001962  0100               	movlb	0	; () banked
  4077  001964  6FDD               	movwf	UART_buff_get@c& (0+255),b
  4078                           
  4079                           ; BSR set to: 0
  4080                           ;UART.c: 87: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  4081  001966  EE20 F0CA          	lfsr	2,202
  4082  00196A  5023               	movf	UART_buff_get@_this,w,c
  4083  00196C  26D9               	addwf	fsr2l,f,c
  4084  00196E  5024               	movf	UART_buff_get@_this+1,w,c
  4085  001970  22DA               	addwfc	fsr2h,f,c
  4086  001972  CFDE F01D          	movff	postinc2,UART_buff_modulo_inc@value
  4087  001976  CFDD F01E          	movff	postdec2,UART_buff_modulo_inc@value+1
  4088  00197A  0E00               	movlw	0
  4089  00197C  6E20               	movwf	UART_buff_modulo_inc@modulus+1,c
  4090  00197E  0EC8               	movlw	200
  4091  001980  6E1F               	movwf	UART_buff_modulo_inc@modulus,c
  4092  001982  ECFE  F011         	call	_UART_buff_modulo_inc	;wreg free
  4093  001986  EE20 F0CA          	lfsr	2,202
  4094  00198A  5023               	movf	UART_buff_get@_this,w,c
  4095  00198C  26D9               	addwf	fsr2l,f,c
  4096  00198E  5024               	movf	UART_buff_get@_this+1,w,c
  4097  001990  22DA               	addwfc	fsr2h,f,c
  4098  001992  C01D  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  4099  001996  C01E  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  4100                           
  4101                           ;UART.c: 88: --_this->count;
  4102  00199A  EE20 F0CC          	lfsr	2,204
  4103  00199E  5023               	movf	UART_buff_get@_this,w,c
  4104  0019A0  26D9               	addwf	fsr2l,f,c
  4105  0019A2  5024               	movf	UART_buff_get@_this+1,w,c
  4106  0019A4  22DA               	addwfc	fsr2h,f,c
  4107  0019A6  06DE               	decf	postinc2,f,c
  4108  0019A8  0E00               	movlw	0
  4109  0019AA  5ADD               	subwfb	postdec2,f,c
  4110                           
  4111                           ;UART.c: 89: } else {
  4112  0019AC  D003               	goto	l796
  4113  0019AE                     l3962:
  4114                           
  4115                           ;UART.c: 90: c = 0;
  4116  0019AE  0E00               	movlw	0
  4117  0019B0  0100               	movlb	0	; () banked
  4118  0019B2  6FDD               	movwf	UART_buff_get@c& (0+255),b
  4119  0019B4                     l796:
  4120                           
  4121                           ;UART.c: 91: }
  4122                           ;UART.c: 92: return (c);
  4123  0019B4  0100               	movlb	0	; () banked
  4124  0019B6  51DD               	movf	UART_buff_get@c& (0+255),w,b
  4125  0019B8  0012               	return	
  4126  0019BA                     __end_of_UART_buff_get:
  4127                           	opt stack 0
  4128                           tosu	equ	0xFFF
  4129                           tosh	equ	0xFFE
  4130                           tosl	equ	0xFFD
  4131                           pclath	equ	0xFFA
  4132                           tblptru	equ	0xFF8
  4133                           tblptrh	equ	0xFF7
  4134                           tblptrl	equ	0xFF6
  4135                           tablat	equ	0xFF5
  4136                           prodh	equ	0xFF4
  4137                           prodl	equ	0xFF3
  4138                           intcon	equ	0xFF2
  4139                           postinc0	equ	0xFEE
  4140                           wreg	equ	0xFE8
  4141                           indf2	equ	0xFDF
  4142                           postinc2	equ	0xFDE
  4143                           postdec2	equ	0xFDD
  4144                           plusw2	equ	0xFDB
  4145                           fsr2h	equ	0xFDA
  4146                           fsr2l	equ	0xFD9
  4147                           status	equ	0xFD8
  4148                           
  4149 ;; *************** function _UART_buff_modulo_inc *****************
  4150 ;; Defined at:
  4151 ;;		line 108 in file "UART.c"
  4152 ;; Parameters:    Size  Location     Type
  4153 ;;  value           2   28[COMRAM] const unsigned int 
  4154 ;;  modulus         2   30[COMRAM] const unsigned int 
  4155 ;; Auto vars:     Size  Location     Type
  4156 ;;  my_value        2   32[COMRAM] unsigned int 
  4157 ;; Return value:  Size  Location     Type
  4158 ;;                  2   28[COMRAM] unsigned int 
  4159 ;; Registers used:
  4160 ;;		wreg, status,2, status,0
  4161 ;; Tracked objects:
  4162 ;;		On entry : 0/0
  4163 ;;		On exit  : 0/0
  4164 ;;		Unchanged: 0/0
  4165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4166 ;;      Params:         4       0       0       0       0       0       0
  4167 ;;      Locals:         2       0       0       0       0       0       0
  4168 ;;      Temps:          0       0       0       0       0       0       0
  4169 ;;      Totals:         6       0       0       0       0       0       0
  4170 ;;Total ram usage:        6 bytes
  4171 ;; Hardware stack levels used:    1
  4172 ;; Hardware stack levels required when called:    6
  4173 ;; This function calls:
  4174 ;;		Nothing
  4175 ;; This function is called by:
  4176 ;;		_UART_buff_put
  4177 ;;		_UART_buff_get
  4178 ;; This function uses a non-reentrant model
  4179 ;;
  4180                           
  4181                           	psect	text16
  4182  0023FC                     __ptext16:
  4183                           	opt stack 0
  4184  0023FC                     _UART_buff_modulo_inc:
  4185                           	opt stack 19
  4186                           
  4187                           ;UART.c: 109: unsigned int my_value = value + 1;
  4188                           
  4189                           ; BSR set to: 0
  4190                           ;incstack = 0
  4191  0023FC  0E01               	movlw	1
  4192  0023FE  241D               	addwf	UART_buff_modulo_inc@value,w,c
  4193  002400  6E21               	movwf	UART_buff_modulo_inc@my_value,c
  4194  002402  0E00               	movlw	0
  4195  002404  201E               	addwfc	UART_buff_modulo_inc@value+1,w,c
  4196  002406  6E22               	movwf	UART_buff_modulo_inc@my_value+1,c
  4197                           
  4198                           ;UART.c: 110: if (my_value >= modulus) {
  4199  002408  501F               	movf	UART_buff_modulo_inc@modulus,w,c
  4200  00240A  5C21               	subwf	UART_buff_modulo_inc@my_value,w,c
  4201  00240C  5020               	movf	UART_buff_modulo_inc@modulus+1,w,c
  4202  00240E  5822               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  4203  002410  A0D8               	btfss	status,0,c
  4204  002412  D004               	goto	l3912
  4205                           
  4206                           ;UART.c: 111: my_value = 0;
  4207  002414  0E00               	movlw	0
  4208  002416  6E22               	movwf	UART_buff_modulo_inc@my_value+1,c
  4209  002418  0E00               	movlw	0
  4210  00241A  6E21               	movwf	UART_buff_modulo_inc@my_value,c
  4211  00241C                     l3912:
  4212                           
  4213                           ;UART.c: 112: }
  4214                           ;UART.c: 113: return (my_value);
  4215  00241C  C021  F01D         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  4216  002420  C022  F01E         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  4217  002424  0012               	return	
  4218  002426                     __end_of_UART_buff_modulo_inc:
  4219                           	opt stack 0
  4220                           tosu	equ	0xFFF
  4221                           tosh	equ	0xFFE
  4222                           tosl	equ	0xFFD
  4223                           pclath	equ	0xFFA
  4224                           tblptru	equ	0xFF8
  4225                           tblptrh	equ	0xFF7
  4226                           tblptrl	equ	0xFF6
  4227                           tablat	equ	0xFF5
  4228                           prodh	equ	0xFF4
  4229                           prodl	equ	0xFF3
  4230                           intcon	equ	0xFF2
  4231                           postinc0	equ	0xFEE
  4232                           wreg	equ	0xFE8
  4233                           indf2	equ	0xFDF
  4234                           postinc2	equ	0xFDE
  4235                           postdec2	equ	0xFDD
  4236                           plusw2	equ	0xFDB
  4237                           fsr2h	equ	0xFDA
  4238                           fsr2l	equ	0xFD9
  4239                           status	equ	0xFD8
  4240                           
  4241 ;; *************** function _Receive_available *****************
  4242 ;; Defined at:
  4243 ;;		line 124 in file "UART.c"
  4244 ;; Parameters:    Size  Location     Type
  4245 ;;		None
  4246 ;; Auto vars:     Size  Location     Type
  4247 ;;		None
  4248 ;; Return value:  Size  Location     Type
  4249 ;;                  2   30[COMRAM] int 
  4250 ;; Registers used:
  4251 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4252 ;; Tracked objects:
  4253 ;;		On entry : 0/0
  4254 ;;		On exit  : 0/0
  4255 ;;		Unchanged: 0/0
  4256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4257 ;;      Params:         2       0       0       0       0       0       0
  4258 ;;      Locals:         0       0       0       0       0       0       0
  4259 ;;      Temps:          0       0       0       0       0       0       0
  4260 ;;      Totals:         2       0       0       0       0       0       0
  4261 ;;Total ram usage:        2 bytes
  4262 ;; Hardware stack levels used:    1
  4263 ;; Hardware stack levels required when called:    7
  4264 ;; This function calls:
  4265 ;;		_UART_buff_size
  4266 ;; This function is called by:
  4267 ;;		_SYSTEM_Initialize
  4268 ;;		_receiveData
  4269 ;;		_CRCcheck
  4270 ;; This function uses a non-reentrant model
  4271 ;;
  4272                           
  4273                           	psect	text17
  4274  002544                     __ptext17:
  4275                           	opt stack 0
  4276  002544                     _Receive_available:
  4277                           	opt stack 21
  4278                           
  4279                           ;UART.c: 125: return UART_buff_size(&input_buffer);
  4280                           
  4281                           ;incstack = 0
  4282  002544  0E00               	movlw	low _input_buffer
  4283  002546  6E1D               	movwf	UART_buff_size@_this,c
  4284  002548  0E03               	movlw	high _input_buffer
  4285  00254A  6E1E               	movwf	UART_buff_size@_this+1,c
  4286  00254C  ECAD  F012         	call	_UART_buff_size	;wreg free
  4287  002550  C01D  F01F         	movff	?_UART_buff_size,?_Receive_available
  4288  002554  C01E  F020         	movff	?_UART_buff_size+1,?_Receive_available+1
  4289  002558  0012               	return	
  4290  00255A                     __end_of_Receive_available:
  4291                           	opt stack 0
  4292                           tosu	equ	0xFFF
  4293                           tosh	equ	0xFFE
  4294                           tosl	equ	0xFFD
  4295                           pclath	equ	0xFFA
  4296                           tblptru	equ	0xFF8
  4297                           tblptrh	equ	0xFF7
  4298                           tblptrl	equ	0xFF6
  4299                           tablat	equ	0xFF5
  4300                           prodh	equ	0xFF4
  4301                           prodl	equ	0xFF3
  4302                           intcon	equ	0xFF2
  4303                           postinc0	equ	0xFEE
  4304                           wreg	equ	0xFE8
  4305                           indf2	equ	0xFDF
  4306                           postinc2	equ	0xFDE
  4307                           postdec2	equ	0xFDD
  4308                           plusw2	equ	0xFDB
  4309                           fsr2h	equ	0xFDA
  4310                           fsr2l	equ	0xFD9
  4311                           status	equ	0xFD8
  4312                           
  4313 ;; *************** function _UART_buff_size *****************
  4314 ;; Defined at:
  4315 ;;		line 104 in file "UART.c"
  4316 ;; Parameters:    Size  Location     Type
  4317 ;;  _this           2   28[COMRAM] PTR struct UART_ring_buf
  4318 ;;		 -> output_buffer(206), input_buffer(206), 
  4319 ;; Auto vars:     Size  Location     Type
  4320 ;;		None
  4321 ;; Return value:  Size  Location     Type
  4322 ;;                  2   28[COMRAM] int 
  4323 ;; Registers used:
  4324 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4325 ;; Tracked objects:
  4326 ;;		On entry : 0/0
  4327 ;;		On exit  : 0/0
  4328 ;;		Unchanged: 0/0
  4329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4330 ;;      Params:         2       0       0       0       0       0       0
  4331 ;;      Locals:         0       0       0       0       0       0       0
  4332 ;;      Temps:          0       0       0       0       0       0       0
  4333 ;;      Totals:         2       0       0       0       0       0       0
  4334 ;;Total ram usage:        2 bytes
  4335 ;; Hardware stack levels used:    1
  4336 ;; Hardware stack levels required when called:    6
  4337 ;; This function calls:
  4338 ;;		Nothing
  4339 ;; This function is called by:
  4340 ;;		_Receive_available
  4341 ;; This function uses a non-reentrant model
  4342 ;;
  4343                           
  4344                           	psect	text18
  4345  00255A                     __ptext18:
  4346                           	opt stack 0
  4347  00255A                     _UART_buff_size:
  4348                           	opt stack 21
  4349                           
  4350                           ;UART.c: 105: return (_this->count);
  4351                           
  4352                           ;incstack = 0
  4353  00255A  EE20 F0CC          	lfsr	2,204
  4354  00255E  501D               	movf	UART_buff_size@_this,w,c
  4355  002560  26D9               	addwf	fsr2l,f,c
  4356  002562  501E               	movf	UART_buff_size@_this+1,w,c
  4357  002564  22DA               	addwfc	fsr2h,f,c
  4358  002566  CFDE F01D          	movff	postinc2,?_UART_buff_size
  4359  00256A  CFDD F01E          	movff	postdec2,?_UART_buff_size+1
  4360  00256E  0012               	return	
  4361  002570                     __end_of_UART_buff_size:
  4362                           	opt stack 0
  4363                           tosu	equ	0xFFF
  4364                           tosh	equ	0xFFE
  4365                           tosl	equ	0xFFD
  4366                           pclath	equ	0xFFA
  4367                           tblptru	equ	0xFF8
  4368                           tblptrh	equ	0xFF7
  4369                           tblptrl	equ	0xFF6
  4370                           tablat	equ	0xFF5
  4371                           prodh	equ	0xFF4
  4372                           prodl	equ	0xFF3
  4373                           intcon	equ	0xFF2
  4374                           postinc0	equ	0xFEE
  4375                           wreg	equ	0xFE8
  4376                           indf2	equ	0xFDF
  4377                           postinc2	equ	0xFDE
  4378                           postdec2	equ	0xFDD
  4379                           plusw2	equ	0xFDB
  4380                           fsr2h	equ	0xFDA
  4381                           fsr2l	equ	0xFD9
  4382                           status	equ	0xFD8
  4383                           
  4384 ;; *************** function _CRC8 *****************
  4385 ;; Defined at:
  4386 ;;		line 34 in file "FastTransfer.c"
  4387 ;; Parameters:    Size  Location     Type
  4388 ;;  data            2   28[COMRAM] PTR const unsigned char 
  4389 ;;		 -> NULL(0), CRCcheck@arrayHolder(3), receiveData@holder_1397(3), receiveData@holder(3), 
  4390 ;;		 -> rx_buffer(200), ring_buffer(206), 
  4391 ;;  len             1   30[COMRAM] unsigned char 
  4392 ;; Auto vars:     Size  Location     Type
  4393 ;;  sum             1   31[COMRAM] unsigned char 
  4394 ;;  tempI           1   33[COMRAM] unsigned char 
  4395 ;;  extract         1   32[COMRAM] unsigned char 
  4396 ;;  crc             1   34[COMRAM] unsigned char 
  4397 ;; Return value:  Size  Location     Type
  4398 ;;                  1    wreg      unsigned char 
  4399 ;; Registers used:
  4400 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4401 ;; Tracked objects:
  4402 ;;		On entry : 0/0
  4403 ;;		On exit  : 0/0
  4404 ;;		Unchanged: 0/0
  4405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4406 ;;      Params:         3       0       0       0       0       0       0
  4407 ;;      Locals:         4       0       0       0       0       0       0
  4408 ;;      Temps:          0       0       0       0       0       0       0
  4409 ;;      Totals:         7       0       0       0       0       0       0
  4410 ;;Total ram usage:        7 bytes
  4411 ;; Hardware stack levels used:    1
  4412 ;; Hardware stack levels required when called:    6
  4413 ;; This function calls:
  4414 ;;		Nothing
  4415 ;; This function is called by:
  4416 ;;		_sendData
  4417 ;;		_receiveData
  4418 ;;		_CRCcheck
  4419 ;; This function uses a non-reentrant model
  4420 ;;
  4421                           
  4422                           	psect	text19
  4423  002136                     __ptext19:
  4424                           	opt stack 0
  4425  002136                     _CRC8:
  4426                           	opt stack 21
  4427                           
  4428                           ;FastTransfer.c: 35: unsigned char crc = 0x00;
  4429                           
  4430                           ;incstack = 0
  4431  002136  0E00               	movlw	0
  4432  002138  6E23               	movwf	CRC8@crc,c
  4433                           
  4434                           ;FastTransfer.c: 36: while (len--) {
  4435  00213A  D01C               	goto	l3988
  4436  00213C                     l3972:
  4437                           
  4438                           ;FastTransfer.c: 37: unsigned char extract = *data++;
  4439  00213C  C01D  FFD9         	movff	CRC8@data,fsr2l
  4440  002140  C01E  FFDA         	movff	CRC8@data+1,fsr2h
  4441  002144  50DF               	movf	indf2,w,c
  4442  002146  6E21               	movwf	CRC8@extract,c
  4443  002148  4A1D               	infsnz	CRC8@data,f,c
  4444  00214A  2A1E               	incf	CRC8@data+1,f,c
  4445                           
  4446                           ;FastTransfer.c: 38: unsigned char tempI;
  4447                           ;FastTransfer.c: 39: for (tempI = 8; tempI; tempI--) {
  4448  00214C  0E08               	movlw	8
  4449  00214E  6E22               	movwf	CRC8@tempI,c
  4450  002150  D00E               	goto	l3986
  4451  002152                     l3978:
  4452                           
  4453                           ;FastTransfer.c: 40: unsigned char sum = (crc ^ extract) & 0x01;
  4454  002152  5023               	movf	CRC8@crc,w,c
  4455  002154  1821               	xorwf	CRC8@extract,w,c
  4456  002156  0B01               	andlw	1
  4457  002158  6E20               	movwf	CRC8@sum,c
  4458                           
  4459                           ;FastTransfer.c: 41: crc >>= 1;
  4460  00215A  90D8               	bcf	status,0,c
  4461  00215C  3223               	rrcf	CRC8@crc,f,c
  4462                           
  4463                           ;FastTransfer.c: 42: if (sum) {
  4464  00215E  5020               	movf	CRC8@sum,w,c
  4465  002160  B4D8               	btfsc	status,2,c
  4466  002162  D002               	goto	l483
  4467                           
  4468                           ;FastTransfer.c: 43: crc ^= 0x8C;
  4469  002164  0E8C               	movlw	140
  4470  002166  1A23               	xorwf	CRC8@crc,f,c
  4471  002168                     l483:
  4472                           
  4473                           ;FastTransfer.c: 44: }
  4474                           ;FastTransfer.c: 45: extract >>= 1;
  4475  002168  90D8               	bcf	status,0,c
  4476  00216A  3221               	rrcf	CRC8@extract,f,c
  4477  00216C  0622               	decf	CRC8@tempI,f,c
  4478  00216E                     l3986:
  4479  00216E  5022               	movf	CRC8@tempI,w,c
  4480  002170  A4D8               	btfss	status,2,c
  4481  002172  D7EF               	goto	l3978
  4482  002174                     l3988:
  4483  002174  061F               	decf	CRC8@len,f,c
  4484  002176  281F               	incf	CRC8@len,w,c
  4485  002178  A4D8               	btfss	status,2,c
  4486  00217A  D7E0               	goto	l3972
  4487                           
  4488                           ;FastTransfer.c: 46: }
  4489                           ;FastTransfer.c: 47: }
  4490                           ;FastTransfer.c: 48: return crc;
  4491  00217C  5023               	movf	CRC8@crc,w,c
  4492  00217E  0012               	return	
  4493  002180                     __end_of_CRC8:
  4494                           	opt stack 0
  4495                           tosu	equ	0xFFF
  4496                           tosh	equ	0xFFE
  4497                           tosl	equ	0xFFD
  4498                           pclath	equ	0xFFA
  4499                           tblptru	equ	0xFF8
  4500                           tblptrh	equ	0xFF7
  4501                           tblptrl	equ	0xFF6
  4502                           tablat	equ	0xFF5
  4503                           prodh	equ	0xFF4
  4504                           prodl	equ	0xFF3
  4505                           intcon	equ	0xFF2
  4506                           postinc0	equ	0xFEE
  4507                           wreg	equ	0xFE8
  4508                           indf2	equ	0xFDF
  4509                           postinc2	equ	0xFDE
  4510                           postdec2	equ	0xFDD
  4511                           plusw2	equ	0xFDB
  4512                           fsr2h	equ	0xFDA
  4513                           fsr2l	equ	0xFD9
  4514                           status	equ	0xFD8
  4515                           
  4516 ;; *************** function _processPowerRequest *****************
  4517 ;; Defined at:
  4518 ;;		line 33 in file "Communications.c"
  4519 ;; Parameters:    Size  Location     Type
  4520 ;;  powerSet        2    8[BANK0 ] int 
  4521 ;; Auto vars:     Size  Location     Type
  4522 ;;		None
  4523 ;; Return value:  Size  Location     Type
  4524 ;;                  1    wreg      void 
  4525 ;; Registers used:
  4526 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4527 ;; Tracked objects:
  4528 ;;		On entry : 0/0
  4529 ;;		On exit  : 0/0
  4530 ;;		Unchanged: 0/0
  4531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4532 ;;      Params:         0       2       0       0       0       0       0
  4533 ;;      Locals:         0       0       0       0       0       0       0
  4534 ;;      Temps:          0       0       0       0       0       0       0
  4535 ;;      Totals:         0       2       0       0       0       0       0
  4536 ;;Total ram usage:        2 bytes
  4537 ;; Hardware stack levels used:    1
  4538 ;; Hardware stack levels required when called:    9
  4539 ;; This function calls:
  4540 ;;		_EnableSlavePower
  4541 ;;		_Update
  4542 ;; This function is called by:
  4543 ;;		_updateComms
  4544 ;; This function uses a non-reentrant model
  4545 ;;
  4546                           
  4547                           	psect	text20
  4548  001864                     __ptext20:
  4549                           	opt stack 0
  4550  001864                     _processPowerRequest:
  4551                           	opt stack 20
  4552                           
  4553                           ;Communications.c: 35: if (powerSet & 0x01) EnableSlavePower(BMM, ON);
  4554                           
  4555                           ;incstack = 0
  4556  001864  0100               	movlb	0	; () banked
  4557  001866  A1E3               	btfss	processPowerRequest@powerSet& (0+255),0,b
  4558  001868  D008               	goto	l4448
  4559                           
  4560                           ; BSR set to: 0
  4561  00186A  0E00               	movlw	0
  4562  00186C  6E24               	movwf	EnableSlavePower@onof+1,c
  4563  00186E  0E01               	movlw	1
  4564  001870  6E23               	movwf	EnableSlavePower@onof,c
  4565  001872  0E04               	movlw	4
  4566  001874  EC80  F00A         	call	_EnableSlavePower
  4567  001878  D007               	goto	l4450
  4568  00187A                     l4448:
  4569                           
  4570                           ;Communications.c: 36: else EnableSlavePower(BMM, OFF);
  4571  00187A  0E00               	movlw	0
  4572  00187C  6E24               	movwf	EnableSlavePower@onof+1,c
  4573  00187E  0E00               	movlw	0
  4574  001880  6E23               	movwf	EnableSlavePower@onof,c
  4575  001882  0E04               	movlw	4
  4576  001884  EC80  F00A         	call	_EnableSlavePower
  4577  001888                     l4450:
  4578                           
  4579                           ;Communications.c: 37: if (powerSet & 0x02) EnableSlavePower(MCS, ON);
  4580  001888  0100               	movlb	0	; () banked
  4581  00188A  A3E3               	btfss	processPowerRequest@powerSet& (0+255),1,b
  4582  00188C  D008               	goto	l4454
  4583                           
  4584                           ; BSR set to: 0
  4585  00188E  0E00               	movlw	0
  4586  001890  6E24               	movwf	EnableSlavePower@onof+1,c
  4587  001892  0E01               	movlw	1
  4588  001894  6E23               	movwf	EnableSlavePower@onof,c
  4589  001896  0E02               	movlw	2
  4590  001898  EC80  F00A         	call	_EnableSlavePower
  4591  00189C  D007               	goto	l4456
  4592  00189E                     l4454:
  4593                           
  4594                           ;Communications.c: 38: else EnableSlavePower(MCS,OFF);
  4595  00189E  0E00               	movlw	0
  4596  0018A0  6E24               	movwf	EnableSlavePower@onof+1,c
  4597  0018A2  0E00               	movlw	0
  4598  0018A4  6E23               	movwf	EnableSlavePower@onof,c
  4599  0018A6  0E02               	movlw	2
  4600  0018A8  EC80  F00A         	call	_EnableSlavePower
  4601  0018AC                     l4456:
  4602                           
  4603                           ;Communications.c: 39: if (powerSet & 0x04) EnableSlavePower(DDS,ON);
  4604  0018AC  0100               	movlb	0	; () banked
  4605  0018AE  A5E3               	btfss	processPowerRequest@powerSet& (0+255),2,b
  4606  0018B0  D008               	goto	l4460
  4607                           
  4608                           ; BSR set to: 0
  4609  0018B2  0E00               	movlw	0
  4610  0018B4  6E24               	movwf	EnableSlavePower@onof+1,c
  4611  0018B6  0E01               	movlw	1
  4612  0018B8  6E23               	movwf	EnableSlavePower@onof,c
  4613  0018BA  0E01               	movlw	1
  4614  0018BC  EC80  F00A         	call	_EnableSlavePower
  4615  0018C0  D007               	goto	l4462
  4616  0018C2                     l4460:
  4617                           
  4618                           ;Communications.c: 40: else EnableSlavePower(DDS,OFF);
  4619  0018C2  0E00               	movlw	0
  4620  0018C4  6E24               	movwf	EnableSlavePower@onof+1,c
  4621  0018C6  0E00               	movlw	0
  4622  0018C8  6E23               	movwf	EnableSlavePower@onof,c
  4623  0018CA  0E01               	movlw	1
  4624  0018CC  EC80  F00A         	call	_EnableSlavePower
  4625  0018D0                     l4462:
  4626                           
  4627                           ;Communications.c: 41: if(powerSet & 0x08) EnableSlavePower(SAS,ON);
  4628  0018D0  0100               	movlb	0	; () banked
  4629  0018D2  A7E3               	btfss	processPowerRequest@powerSet& (0+255),3,b
  4630  0018D4  D008               	goto	l4466
  4631                           
  4632                           ; BSR set to: 0
  4633  0018D6  0E00               	movlw	0
  4634  0018D8  6E24               	movwf	EnableSlavePower@onof+1,c
  4635  0018DA  0E01               	movlw	1
  4636  0018DC  6E23               	movwf	EnableSlavePower@onof,c
  4637  0018DE  0E03               	movlw	3
  4638  0018E0  EC80  F00A         	call	_EnableSlavePower
  4639  0018E4  D007               	goto	l4468
  4640  0018E6                     l4466:
  4641                           
  4642                           ;Communications.c: 42: else EnableSlavePower(SAS,OFF);
  4643  0018E6  0E00               	movlw	0
  4644  0018E8  6E24               	movwf	EnableSlavePower@onof+1,c
  4645  0018EA  0E00               	movlw	0
  4646  0018EC  6E23               	movwf	EnableSlavePower@onof,c
  4647  0018EE  0E03               	movlw	3
  4648  0018F0  EC80  F00A         	call	_EnableSlavePower
  4649  0018F4                     l4468:
  4650                           
  4651                           ;Communications.c: 43: if(powerSet & 0x10) EnableSlavePower(TSS, ON);
  4652  0018F4  0100               	movlb	0	; () banked
  4653  0018F6  A9E3               	btfss	processPowerRequest@powerSet& (0+255),4,b
  4654  0018F8  D008               	goto	l4472
  4655                           
  4656                           ; BSR set to: 0
  4657  0018FA  0E00               	movlw	0
  4658  0018FC  6E24               	movwf	EnableSlavePower@onof+1,c
  4659  0018FE  0E01               	movlw	1
  4660  001900  6E23               	movwf	EnableSlavePower@onof,c
  4661  001902  0E05               	movlw	5
  4662  001904  EC80  F00A         	call	_EnableSlavePower
  4663  001908  D007               	goto	l406
  4664  00190A                     l4472:
  4665                           
  4666                           ;Communications.c: 44: else EnableSlavePower(TSS,OFF);
  4667  00190A  0E00               	movlw	0
  4668  00190C  6E24               	movwf	EnableSlavePower@onof+1,c
  4669  00190E  0E00               	movlw	0
  4670  001910  6E23               	movwf	EnableSlavePower@onof,c
  4671  001912  0E05               	movlw	5
  4672  001914  EC80  F00A         	call	_EnableSlavePower
  4673  001918                     l406:
  4674                           
  4675                           ;Communications.c: 45: Update();
  4676  001918  ECFD  F012         	call	_Update	;wreg free
  4677  00191C  0012               	return		;funcret
  4678  00191E                     __end_of_processPowerRequest:
  4679                           	opt stack 0
  4680                           tosu	equ	0xFFF
  4681                           tosh	equ	0xFFE
  4682                           tosl	equ	0xFFD
  4683                           pclath	equ	0xFFA
  4684                           tblptru	equ	0xFF8
  4685                           tblptrh	equ	0xFF7
  4686                           tblptrl	equ	0xFF6
  4687                           tablat	equ	0xFF5
  4688                           prodh	equ	0xFF4
  4689                           prodl	equ	0xFF3
  4690                           intcon	equ	0xFF2
  4691                           postinc0	equ	0xFEE
  4692                           wreg	equ	0xFE8
  4693                           indf2	equ	0xFDF
  4694                           postinc2	equ	0xFDE
  4695                           postdec2	equ	0xFDD
  4696                           plusw2	equ	0xFDB
  4697                           fsr2h	equ	0xFDA
  4698                           fsr2l	equ	0xFD9
  4699                           status	equ	0xFD8
  4700                           
  4701 ;; *************** function _SYSTEM_Initialize *****************
  4702 ;; Defined at:
  4703 ;;		line 113 in file "mcc_generated_files/mcc.c"
  4704 ;; Parameters:    Size  Location     Type
  4705 ;;		None
  4706 ;; Auto vars:     Size  Location     Type
  4707 ;;		None
  4708 ;; Return value:  Size  Location     Type
  4709 ;;                  1    wreg      void 
  4710 ;; Registers used:
  4711 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4712 ;; Tracked objects:
  4713 ;;		On entry : 0/0
  4714 ;;		On exit  : 0/0
  4715 ;;		Unchanged: 0/0
  4716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4717 ;;      Params:         0       0       0       0       0       0       0
  4718 ;;      Locals:         0       0       0       0       0       0       0
  4719 ;;      Temps:          0       0       0       0       0       0       0
  4720 ;;      Totals:         0       0       0       0       0       0       0
  4721 ;;Total ram usage:        0 bytes
  4722 ;; Hardware stack levels used:    1
  4723 ;; Hardware stack levels required when called:    9
  4724 ;; This function calls:
  4725 ;;		_ADC_Initialize
  4726 ;;		_EUSART1_Initialize
  4727 ;;		_INTERRUPT_Initialize
  4728 ;;		_OSCILLATOR_Initialize
  4729 ;;		_PIN_MANAGER_Initialize
  4730 ;;		_PWM4_Initialize
  4731 ;;		_TMR1_Initialize
  4732 ;;		_TMR2_Initialize
  4733 ;;		_begin
  4734 ;; This function is called by:
  4735 ;;		_main
  4736 ;; This function uses a non-reentrant model
  4737 ;;
  4738                           
  4739                           	psect	text21
  4740  001D5E                     __ptext21:
  4741                           	opt stack 0
  4742  001D5E                     _SYSTEM_Initialize:
  4743                           	opt stack 21
  4744                           
  4745                           ;mcc.c: 114: OSCILLATOR_Initialize();
  4746                           
  4747                           ;incstack = 0
  4748  001D5E  ECF1  F012         	call	_OSCILLATOR_Initialize	;wreg free
  4749                           
  4750                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  4751  001D62  EC72  F00E         	call	_PIN_MANAGER_Initialize	;wreg free
  4752                           
  4753                           ;mcc.c: 116: INTERRUPT_Initialize();
  4754  001D66  ECF8  F012         	call	_INTERRUPT_Initialize	;wreg free
  4755                           
  4756                           ;mcc.c: 117: EUSART1_Initialize();
  4757  001D6A  ECE5  F010         	call	_EUSART1_Initialize	;wreg free
  4758                           
  4759                           ;mcc.c: 118: begin(receiveArray, sizeof (receiveArray), 5, 0, Send_put, Receive_get, Rec
      +                          eive_available, Receive_peek);
  4760  001D6E  0EA2               	movlw	low _receiveArray
  4761  001D70  0100               	movlb	0	; () banked
  4762  001D72  6FDB               	movwf	begin@ptr& (0+255),b
  4763  001D74  0E00               	movlw	high _receiveArray
  4764  001D76  0100               	movlb	0	; () banked
  4765  001D78  6FDC               	movwf	(begin@ptr+1)& (0+255),b
  4766  001D7A  0E28               	movlw	40
  4767  001D7C  0100               	movlb	0	; () banked
  4768  001D7E  6FDD               	movwf	begin@maxSize& (0+255),b
  4769  001D80  0E05               	movlw	5
  4770  001D82  0100               	movlb	0	; () banked
  4771  001D84  6FDE               	movwf	begin@givenAddress& (0+255),b
  4772  001D86  0E00               	movlw	0
  4773  001D88  0100               	movlb	0	; () banked
  4774  001D8A  6FDF               	movwf	begin@error& (0+255),b
  4775  001D8C  0E7A               	movlw	low _Send_put
  4776  001D8E  0100               	movlb	0	; () banked
  4777  001D90  6FE0               	movwf	begin@stufftosend& (0+255),b
  4778  001D92  0E22               	movlw	high _Send_put
  4779  001D94  0100               	movlb	0	; () banked
  4780  001D96  6FE1               	movwf	(begin@stufftosend+1)& (0+255),b
  4781  001D98  0ED4               	movlw	low _Receive_get
  4782  001D9A  0100               	movlb	0	; () banked
  4783  001D9C  6FE2               	movwf	begin@stufftoreceive& (0+255),b
  4784  001D9E  0E25               	movlw	high _Receive_get
  4785  001DA0  0100               	movlb	0	; () banked
  4786  001DA2  6FE3               	movwf	(begin@stufftoreceive+1)& (0+255),b
  4787  001DA4  0E44               	movlw	low _Receive_available
  4788  001DA6  0100               	movlb	0	; () banked
  4789  001DA8  6FE4               	movwf	begin@stuffavailable& (0+255),b
  4790  001DAA  0E25               	movlw	high _Receive_available
  4791  001DAC  0100               	movlb	0	; () banked
  4792  001DAE  6FE5               	movwf	(begin@stuffavailable+1)& (0+255),b
  4793  001DB0  0E00               	movlw	0
  4794  001DB2  0100               	movlb	0	; () banked
  4795  001DB4  6FE6               	movwf	begin@stuffpeek& (0+255),b
  4796  001DB6  0E00               	movlw	0
  4797  001DB8  0100               	movlb	0	; () banked
  4798  001DBA  6FE7               	movwf	(begin@stuffpeek+1)& (0+255),b
  4799  001DBC  ECF1  F00F         	call	_begin	;wreg free
  4800                           
  4801                           ;mcc.c: 119: PWM4_Initialize();
  4802  001DC0  ECCD  F012         	call	_PWM4_Initialize	;wreg free
  4803                           
  4804                           ;mcc.c: 120: TMR1_Initialize();
  4805  001DC4  EC4C  F012         	call	_TMR1_Initialize	;wreg free
  4806                           
  4807                           ;mcc.c: 121: TMR2_Initialize();
  4808  001DC8  ECC3  F012         	call	_TMR2_Initialize	;wreg free
  4809                           
  4810                           ;mcc.c: 122: LATB4 = 1;
  4811  001DCC  888A               	bsf	3978,4,c	;volatile
  4812                           
  4813                           ;mcc.c: 123: ADC_Initialize();
  4814  001DCE  EC8B  F012         	call	_ADC_Initialize	;wreg free
  4815  001DD2  0012               	return		;funcret
  4816  001DD4                     __end_of_SYSTEM_Initialize:
  4817                           	opt stack 0
  4818                           tosu	equ	0xFFF
  4819                           tosh	equ	0xFFE
  4820                           tosl	equ	0xFFD
  4821                           pclath	equ	0xFFA
  4822                           tblptru	equ	0xFF8
  4823                           tblptrh	equ	0xFF7
  4824                           tblptrl	equ	0xFF6
  4825                           tablat	equ	0xFF5
  4826                           prodh	equ	0xFF4
  4827                           prodl	equ	0xFF3
  4828                           intcon	equ	0xFF2
  4829                           postinc0	equ	0xFEE
  4830                           wreg	equ	0xFE8
  4831                           indf2	equ	0xFDF
  4832                           postinc2	equ	0xFDE
  4833                           postdec2	equ	0xFDD
  4834                           plusw2	equ	0xFDB
  4835                           fsr2h	equ	0xFDA
  4836                           fsr2l	equ	0xFD9
  4837                           status	equ	0xFD8
  4838                           
  4839 ;; *************** function _begin *****************
  4840 ;; Defined at:
  4841 ;;		line 18 in file "FastTransfer.c"
  4842 ;; Parameters:    Size  Location     Type
  4843 ;;  ptr             2    0[BANK0 ] PTR volatile int 
  4844 ;;		 -> receiveArray(40), 
  4845 ;;  maxSize         1    2[BANK0 ] unsigned char 
  4846 ;;  givenAddress    1    3[BANK0 ] unsigned char 
  4847 ;;  error           1    4[BANK0 ] unsigned char 
  4848 ;;  stufftosend     2    5[BANK0 ] PTR FTN(unsigned char ,)
  4849 ;;		 -> Send_put(1), 
  4850 ;;  stufftorecei    2    7[BANK0 ] PTR FTN()unsigned char 
  4851 ;;		 -> Receive_get(1), 
  4852 ;;  stuffavailab    2    9[BANK0 ] PTR FTN()int 
  4853 ;;		 -> Receive_available(2), 
  4854 ;;  stuffpeek       2   11[BANK0 ] PTR FTN()unsigned char 
  4855 ;;		 -> Receive_peek(1), 
  4856 ;; Auto vars:     Size  Location     Type
  4857 ;;		None
  4858 ;; Return value:  Size  Location     Type
  4859 ;;                  1    wreg      void 
  4860 ;; Registers used:
  4861 ;;		wreg, status,2, status,0, cstack
  4862 ;; Tracked objects:
  4863 ;;		On entry : 0/0
  4864 ;;		On exit  : 0/0
  4865 ;;		Unchanged: 0/0
  4866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4867 ;;      Params:         0      13       0       0       0       0       0
  4868 ;;      Locals:         0       0       0       0       0       0       0
  4869 ;;      Temps:          0       0       0       0       0       0       0
  4870 ;;      Totals:         0      13       0       0       0       0       0
  4871 ;;Total ram usage:       13 bytes
  4872 ;; Hardware stack levels used:    1
  4873 ;; Hardware stack levels required when called:    7
  4874 ;; This function calls:
  4875 ;;		___awdiv
  4876 ;; This function is called by:
  4877 ;;		_SYSTEM_Initialize
  4878 ;; This function uses a non-reentrant model
  4879 ;;
  4880                           
  4881                           	psect	text22
  4882  001FE2                     __ptext22:
  4883                           	opt stack 0
  4884  001FE2                     _begin:
  4885                           	opt stack 22
  4886                           
  4887                           ;FastTransfer.c: 19: receiveArrayAddress = ptr;
  4888                           
  4889                           ;incstack = 0
  4890  001FE2  C0DB  F029         	movff	begin@ptr,_receiveArrayAddress
  4891  001FE6  C0DC  F02A         	movff	begin@ptr+1,_receiveArrayAddress+1
  4892                           
  4893                           ;FastTransfer.c: 20: moduleAddress = givenAddress;
  4894  001FEA  C0DE  F03B         	movff	begin@givenAddress,_moduleAddress
  4895                           
  4896                           ;FastTransfer.c: 21: serial_write = stufftosend;
  4897  001FEE  C0E0  F031         	movff	begin@stufftosend,_serial_write
  4898  001FF2  C0E1  F032         	movff	begin@stufftosend+1,_serial_write+1
  4899                           
  4900                           ;FastTransfer.c: 22: serial_available = stuffavailable;
  4901  001FF6  C0E4  F02D         	movff	begin@stuffavailable,_serial_available
  4902  001FFA  C0E5  F02E         	movff	begin@stuffavailable+1,_serial_available+1
  4903                           
  4904                           ;FastTransfer.c: 23: serial_peek = stuffpeek;
  4905  001FFE  C0E6  F0A0         	movff	begin@stuffpeek,_serial_peek
  4906  002002  C0E7  F0A1         	movff	begin@stuffpeek+1,_serial_peek+1
  4907                           
  4908                           ;FastTransfer.c: 24: serial_read = stufftoreceive;
  4909  002006  C0E2  F02F         	movff	begin@stufftoreceive,_serial_read
  4910  00200A  C0E3  F030         	movff	begin@stufftoreceive+1,_serial_read+1
  4911                           
  4912                           ;FastTransfer.c: 25: maxDataAddress = maxSize / 2;
  4913  00200E  C0DD  F01D         	movff	begin@maxSize,___awdiv@dividend
  4914  002012  6A1E               	clrf	___awdiv@dividend+1,c
  4915  002014  0E00               	movlw	0
  4916  002016  6E20               	movwf	___awdiv@divisor+1,c
  4917  002018  0E02               	movlw	2
  4918  00201A  6E1F               	movwf	___awdiv@divisor,c
  4919  00201C  ECB2  F00D         	call	___awdiv	;wreg free
  4920  002020  501D               	movf	?___awdiv,w,c
  4921  002022  6E3A               	movwf	_maxDataAddress,c
  4922                           
  4923                           ;FastTransfer.c: 26: sendStructAddress = (unsigned char*) & ring_buffer;
  4924  002024  0E30               	movlw	low _ring_buffer
  4925  002026  6E2B               	movwf	_sendStructAddress,c
  4926  002028  0E01               	movlw	high _ring_buffer
  4927  00202A  6E2C               	movwf	_sendStructAddress+1,c
  4928                           
  4929                           ;FastTransfer.c: 27: AKNAKsend = error;
  4930  00202C  C0DF  F037         	movff	begin@error,_AKNAKsend
  4931                           
  4932                           ;FastTransfer.c: 28: alignErrorCounter = 0;
  4933  002030  0E00               	movlw	0
  4934  002032  0100               	movlb	0	; () banked
  4935  002034  6F9B               	movwf	(_alignErrorCounter+1)& (0+255),b
  4936  002036  0E00               	movlw	0
  4937  002038  6F9A               	movwf	_alignErrorCounter& (0+255),b
  4938                           
  4939                           ; BSR set to: 0
  4940  00203A  0012               	return		;funcret
  4941  00203C                     __end_of_begin:
  4942                           	opt stack 0
  4943                           tosu	equ	0xFFF
  4944                           tosh	equ	0xFFE
  4945                           tosl	equ	0xFFD
  4946                           pclath	equ	0xFFA
  4947                           tblptru	equ	0xFF8
  4948                           tblptrh	equ	0xFF7
  4949                           tblptrl	equ	0xFF6
  4950                           tablat	equ	0xFF5
  4951                           prodh	equ	0xFF4
  4952                           prodl	equ	0xFF3
  4953                           intcon	equ	0xFF2
  4954                           postinc0	equ	0xFEE
  4955                           wreg	equ	0xFE8
  4956                           indf2	equ	0xFDF
  4957                           postinc2	equ	0xFDE
  4958                           postdec2	equ	0xFDD
  4959                           plusw2	equ	0xFDB
  4960                           fsr2h	equ	0xFDA
  4961                           fsr2l	equ	0xFD9
  4962                           status	equ	0xFD8
  4963                           
  4964 ;; *************** function ___awdiv *****************
  4965 ;; Defined at:
  4966 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  4967 ;; Parameters:    Size  Location     Type
  4968 ;;  dividend        2   28[COMRAM] int 
  4969 ;;  divisor         2   30[COMRAM] int 
  4970 ;; Auto vars:     Size  Location     Type
  4971 ;;  quotient        2   34[COMRAM] int 
  4972 ;;  sign            1   33[COMRAM] unsigned char 
  4973 ;;  counter         1   32[COMRAM] unsigned char 
  4974 ;; Return value:  Size  Location     Type
  4975 ;;                  2   28[COMRAM] int 
  4976 ;; Registers used:
  4977 ;;		wreg, status,2, status,0
  4978 ;; Tracked objects:
  4979 ;;		On entry : 0/0
  4980 ;;		On exit  : 0/0
  4981 ;;		Unchanged: 0/0
  4982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4983 ;;      Params:         4       0       0       0       0       0       0
  4984 ;;      Locals:         4       0       0       0       0       0       0
  4985 ;;      Temps:          0       0       0       0       0       0       0
  4986 ;;      Totals:         8       0       0       0       0       0       0
  4987 ;;Total ram usage:        8 bytes
  4988 ;; Hardware stack levels used:    1
  4989 ;; Hardware stack levels required when called:    6
  4990 ;; This function calls:
  4991 ;;		Nothing
  4992 ;; This function is called by:
  4993 ;;		_begin
  4994 ;; This function uses a non-reentrant model
  4995 ;;
  4996                           
  4997                           	psect	text23
  4998  001B64                     __ptext23:
  4999                           	opt stack 0
  5000  001B64                     ___awdiv:
  5001                           	opt stack 22
  5002                           
  5003                           ; BSR set to: 0
  5004                           ;incstack = 0
  5005  001B64  0E00               	movlw	0
  5006  001B66  6E22               	movwf	___awdiv@sign,c
  5007  001B68  AE20               	btfss	___awdiv@divisor+1,7,c
  5008  001B6A  D006               	goto	l4174
  5009  001B6C  6C1F               	negf	___awdiv@divisor,c
  5010  001B6E  1E20               	comf	___awdiv@divisor+1,f,c
  5011  001B70  B0D8               	btfsc	status,0,c
  5012  001B72  2A20               	incf	___awdiv@divisor+1,f,c
  5013  001B74  0E01               	movlw	1
  5014  001B76  6E22               	movwf	___awdiv@sign,c
  5015  001B78                     l4174:
  5016  001B78  AE1E               	btfss	___awdiv@dividend+1,7,c
  5017  001B7A  D006               	goto	l4180
  5018  001B7C  6C1D               	negf	___awdiv@dividend,c
  5019  001B7E  1E1E               	comf	___awdiv@dividend+1,f,c
  5020  001B80  B0D8               	btfsc	status,0,c
  5021  001B82  2A1E               	incf	___awdiv@dividend+1,f,c
  5022  001B84  0E01               	movlw	1
  5023  001B86  1A22               	xorwf	___awdiv@sign,f,c
  5024  001B88                     l4180:
  5025  001B88  0E00               	movlw	0
  5026  001B8A  6E24               	movwf	___awdiv@quotient+1,c
  5027  001B8C  0E00               	movlw	0
  5028  001B8E  6E23               	movwf	___awdiv@quotient,c
  5029  001B90  501F               	movf	___awdiv@divisor,w,c
  5030  001B92  1020               	iorwf	___awdiv@divisor+1,w,c
  5031  001B94  B4D8               	btfsc	status,2,c
  5032  001B96  D01C               	goto	l4202
  5033  001B98  0E01               	movlw	1
  5034  001B9A  6E21               	movwf	___awdiv@counter,c
  5035  001B9C  D004               	goto	l4188
  5036  001B9E                     l4186:
  5037  001B9E  90D8               	bcf	status,0,c
  5038  001BA0  361F               	rlcf	___awdiv@divisor,f,c
  5039  001BA2  3620               	rlcf	___awdiv@divisor+1,f,c
  5040  001BA4  2A21               	incf	___awdiv@counter,f,c
  5041  001BA6                     l4188:
  5042  001BA6  AE20               	btfss	___awdiv@divisor+1,7,c
  5043  001BA8  D7FA               	goto	l4186
  5044  001BAA                     l4190:
  5045  001BAA  90D8               	bcf	status,0,c
  5046  001BAC  3623               	rlcf	___awdiv@quotient,f,c
  5047  001BAE  3624               	rlcf	___awdiv@quotient+1,f,c
  5048  001BB0  501F               	movf	___awdiv@divisor,w,c
  5049  001BB2  5C1D               	subwf	___awdiv@dividend,w,c
  5050  001BB4  5020               	movf	___awdiv@divisor+1,w,c
  5051  001BB6  581E               	subwfb	___awdiv@dividend+1,w,c
  5052  001BB8  A0D8               	btfss	status,0,c
  5053  001BBA  D005               	goto	l4198
  5054  001BBC  501F               	movf	___awdiv@divisor,w,c
  5055  001BBE  5E1D               	subwf	___awdiv@dividend,f,c
  5056  001BC0  5020               	movf	___awdiv@divisor+1,w,c
  5057  001BC2  5A1E               	subwfb	___awdiv@dividend+1,f,c
  5058  001BC4  8023               	bsf	___awdiv@quotient,0,c
  5059  001BC6                     l4198:
  5060  001BC6  90D8               	bcf	status,0,c
  5061  001BC8  3220               	rrcf	___awdiv@divisor+1,f,c
  5062  001BCA  321F               	rrcf	___awdiv@divisor,f,c
  5063  001BCC  2E21               	decfsz	___awdiv@counter,f,c
  5064  001BCE  D7ED               	goto	l4190
  5065  001BD0                     l4202:
  5066  001BD0  5022               	movf	___awdiv@sign,w,c
  5067  001BD2  B4D8               	btfsc	status,2,c
  5068  001BD4  D004               	goto	l4206
  5069  001BD6  6C23               	negf	___awdiv@quotient,c
  5070  001BD8  1E24               	comf	___awdiv@quotient+1,f,c
  5071  001BDA  B0D8               	btfsc	status,0,c
  5072  001BDC  2A24               	incf	___awdiv@quotient+1,f,c
  5073  001BDE                     l4206:
  5074  001BDE  C023  F01D         	movff	___awdiv@quotient,?___awdiv
  5075  001BE2  C024  F01E         	movff	___awdiv@quotient+1,?___awdiv+1
  5076  001BE6  0012               	return	
  5077  001BE8                     __end_of___awdiv:
  5078                           	opt stack 0
  5079                           tosu	equ	0xFFF
  5080                           tosh	equ	0xFFE
  5081                           tosl	equ	0xFFD
  5082                           pclath	equ	0xFFA
  5083                           tblptru	equ	0xFF8
  5084                           tblptrh	equ	0xFF7
  5085                           tblptrl	equ	0xFF6
  5086                           tablat	equ	0xFF5
  5087                           prodh	equ	0xFF4
  5088                           prodl	equ	0xFF3
  5089                           intcon	equ	0xFF2
  5090                           postinc0	equ	0xFEE
  5091                           wreg	equ	0xFE8
  5092                           indf2	equ	0xFDF
  5093                           postinc2	equ	0xFDE
  5094                           postdec2	equ	0xFDD
  5095                           plusw2	equ	0xFDB
  5096                           fsr2h	equ	0xFDA
  5097                           fsr2l	equ	0xFD9
  5098                           status	equ	0xFD8
  5099                           
  5100 ;; *************** function _TMR2_Initialize *****************
  5101 ;; Defined at:
  5102 ;;		line 9 in file "mcc_generated_files/tmr2.c"
  5103 ;; Parameters:    Size  Location     Type
  5104 ;;		None
  5105 ;; Auto vars:     Size  Location     Type
  5106 ;;		None
  5107 ;; Return value:  Size  Location     Type
  5108 ;;                  1    wreg      void 
  5109 ;; Registers used:
  5110 ;;		wreg, status,2, cstack
  5111 ;; Tracked objects:
  5112 ;;		On entry : 0/0
  5113 ;;		On exit  : 0/0
  5114 ;;		Unchanged: 0/0
  5115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5116 ;;      Params:         0       0       0       0       0       0       0
  5117 ;;      Locals:         0       0       0       0       0       0       0
  5118 ;;      Temps:          0       0       0       0       0       0       0
  5119 ;;      Totals:         0       0       0       0       0       0       0
  5120 ;;Total ram usage:        0 bytes
  5121 ;; Hardware stack levels used:    1
  5122 ;; Hardware stack levels required when called:    7
  5123 ;; This function calls:
  5124 ;;		_TMR2_StartTimer
  5125 ;; This function is called by:
  5126 ;;		_SYSTEM_Initialize
  5127 ;; This function uses a non-reentrant model
  5128 ;;
  5129                           
  5130                           	psect	text24
  5131  002586                     __ptext24:
  5132                           	opt stack 0
  5133  002586                     _TMR2_Initialize:
  5134                           	opt stack 22
  5135                           
  5136                           ;tmr2.c: 14: T2CON = 0x1A;
  5137                           
  5138                           ;incstack = 0
  5139  002586  0E1A               	movlw	26
  5140  002588  6EBA               	movwf	4026,c	;volatile
  5141                           
  5142                           ;tmr2.c: 17: PR2 = 0x7C;
  5143  00258A  0E7C               	movlw	124
  5144  00258C  6EBB               	movwf	4027,c	;volatile
  5145                           
  5146                           ;tmr2.c: 20: TMR2 = 0x00;
  5147  00258E  0E00               	movlw	0
  5148  002590  6EBC               	movwf	4028,c	;volatile
  5149                           
  5150                           ;tmr2.c: 23: PIR1bits.TMR2IF = 0;
  5151  002592  929E               	bcf	3998,1,c	;volatile
  5152                           
  5153                           ;tmr2.c: 26: TMR2_StartTimer();
  5154  002594  EC03  F013         	call	_TMR2_StartTimer	;wreg free
  5155  002598  0012               	return		;funcret
  5156  00259A                     __end_of_TMR2_Initialize:
  5157                           	opt stack 0
  5158                           tosu	equ	0xFFF
  5159                           tosh	equ	0xFFE
  5160                           tosl	equ	0xFFD
  5161                           pclath	equ	0xFFA
  5162                           tblptru	equ	0xFF8
  5163                           tblptrh	equ	0xFF7
  5164                           tblptrl	equ	0xFF6
  5165                           tablat	equ	0xFF5
  5166                           prodh	equ	0xFF4
  5167                           prodl	equ	0xFF3
  5168                           intcon	equ	0xFF2
  5169                           postinc0	equ	0xFEE
  5170                           wreg	equ	0xFE8
  5171                           indf2	equ	0xFDF
  5172                           postinc2	equ	0xFDE
  5173                           postdec2	equ	0xFDD
  5174                           plusw2	equ	0xFDB
  5175                           fsr2h	equ	0xFDA
  5176                           fsr2l	equ	0xFD9
  5177                           status	equ	0xFD8
  5178                           
  5179 ;; *************** function _TMR2_StartTimer *****************
  5180 ;; Defined at:
  5181 ;;		line 29 in file "mcc_generated_files/tmr2.c"
  5182 ;; Parameters:    Size  Location     Type
  5183 ;;		None
  5184 ;; Auto vars:     Size  Location     Type
  5185 ;;		None
  5186 ;; Return value:  Size  Location     Type
  5187 ;;                  1    wreg      void 
  5188 ;; Registers used:
  5189 ;;		None
  5190 ;; Tracked objects:
  5191 ;;		On entry : 0/0
  5192 ;;		On exit  : 0/0
  5193 ;;		Unchanged: 0/0
  5194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5195 ;;      Params:         0       0       0       0       0       0       0
  5196 ;;      Locals:         0       0       0       0       0       0       0
  5197 ;;      Temps:          0       0       0       0       0       0       0
  5198 ;;      Totals:         0       0       0       0       0       0       0
  5199 ;;Total ram usage:        0 bytes
  5200 ;; Hardware stack levels used:    1
  5201 ;; Hardware stack levels required when called:    6
  5202 ;; This function calls:
  5203 ;;		Nothing
  5204 ;; This function is called by:
  5205 ;;		_TMR2_Initialize
  5206 ;; This function uses a non-reentrant model
  5207 ;;
  5208                           
  5209                           	psect	text25
  5210  002606                     __ptext25:
  5211                           	opt stack 0
  5212  002606                     _TMR2_StartTimer:
  5213                           	opt stack 22
  5214                           
  5215                           ;tmr2.c: 32: T2CONbits.TMR2ON = 1;
  5216                           
  5217                           ;incstack = 0
  5218  002606  84BA               	bsf	4026,2,c	;volatile
  5219  002608  0012               	return		;funcret
  5220  00260A                     __end_of_TMR2_StartTimer:
  5221                           	opt stack 0
  5222                           tosu	equ	0xFFF
  5223                           tosh	equ	0xFFE
  5224                           tosl	equ	0xFFD
  5225                           pclath	equ	0xFFA
  5226                           tblptru	equ	0xFF8
  5227                           tblptrh	equ	0xFF7
  5228                           tblptrl	equ	0xFF6
  5229                           tablat	equ	0xFF5
  5230                           prodh	equ	0xFF4
  5231                           prodl	equ	0xFF3
  5232                           intcon	equ	0xFF2
  5233                           postinc0	equ	0xFEE
  5234                           wreg	equ	0xFE8
  5235                           indf2	equ	0xFDF
  5236                           postinc2	equ	0xFDE
  5237                           postdec2	equ	0xFDD
  5238                           plusw2	equ	0xFDB
  5239                           fsr2h	equ	0xFDA
  5240                           fsr2l	equ	0xFD9
  5241                           status	equ	0xFD8
  5242                           
  5243 ;; *************** function _TMR1_Initialize *****************
  5244 ;; Defined at:
  5245 ;;		line 66 in file "mcc_generated_files/tmr1.c"
  5246 ;; Parameters:    Size  Location     Type
  5247 ;;		None
  5248 ;; Auto vars:     Size  Location     Type
  5249 ;;		None
  5250 ;; Return value:  Size  Location     Type
  5251 ;;                  2   97[None  ] int 
  5252 ;; Registers used:
  5253 ;;		wreg, status,2, cstack
  5254 ;; Tracked objects:
  5255 ;;		On entry : 0/0
  5256 ;;		On exit  : 0/0
  5257 ;;		Unchanged: 0/0
  5258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5259 ;;      Params:         0       0       0       0       0       0       0
  5260 ;;      Locals:         0       0       0       0       0       0       0
  5261 ;;      Temps:          0       0       0       0       0       0       0
  5262 ;;      Totals:         0       0       0       0       0       0       0
  5263 ;;Total ram usage:        0 bytes
  5264 ;; Hardware stack levels used:    1
  5265 ;; Hardware stack levels required when called:    7
  5266 ;; This function calls:
  5267 ;;		_TMR1_StartTimer
  5268 ;; This function is called by:
  5269 ;;		_SYSTEM_Initialize
  5270 ;; This function uses a non-reentrant model
  5271 ;;
  5272                           
  5273                           	psect	text26
  5274  002498                     __ptext26:
  5275                           	opt stack 0
  5276  002498                     _TMR1_Initialize:
  5277                           	opt stack 22
  5278                           
  5279                           ;tmr1.c: 71: T1CON = 0x00;
  5280                           
  5281                           ;incstack = 0
  5282  002498  0E00               	movlw	0
  5283  00249A  6ECD               	movwf	4045,c	;volatile
  5284                           
  5285                           ;tmr1.c: 75: T1GCON = 0x00;
  5286  00249C  0E00               	movlw	0
  5287  00249E  6ECC               	movwf	4044,c	;volatile
  5288                           
  5289                           ;tmr1.c: 78: TMR1H = 0x00;
  5290  0024A0  0E00               	movlw	0
  5291  0024A2  6ECF               	movwf	4047,c	;volatile
  5292                           
  5293                           ;tmr1.c: 81: TMR1L = 0x00;
  5294  0024A4  0E00               	movlw	0
  5295  0024A6  6ECE               	movwf	4046,c	;volatile
  5296                           
  5297                           ;tmr1.c: 84: timer1ReloadVal=0;
  5298  0024A8  0E00               	movlw	0
  5299  0024AA  6E34               	movwf	_timer1ReloadVal+1,c	;volatile
  5300  0024AC  0E00               	movlw	0
  5301  0024AE  6E33               	movwf	_timer1ReloadVal,c	;volatile
  5302                           
  5303                           ;tmr1.c: 87: PIR1bits.TMR1IF = 0;
  5304  0024B0  909E               	bcf	3998,0,c	;volatile
  5305                           
  5306                           ;tmr1.c: 90: PIE1bits.TMR1IE = 1;
  5307  0024B2  809D               	bsf	3997,0,c	;volatile
  5308                           
  5309                           ;tmr1.c: 93: TMR1_StartTimer();
  5310  0024B4  EC05  F013         	call	_TMR1_StartTimer	;wreg free
  5311  0024B8  0012               	return		;funcret
  5312  0024BA                     __end_of_TMR1_Initialize:
  5313                           	opt stack 0
  5314                           tosu	equ	0xFFF
  5315                           tosh	equ	0xFFE
  5316                           tosl	equ	0xFFD
  5317                           pclath	equ	0xFFA
  5318                           tblptru	equ	0xFF8
  5319                           tblptrh	equ	0xFF7
  5320                           tblptrl	equ	0xFF6
  5321                           tablat	equ	0xFF5
  5322                           prodh	equ	0xFF4
  5323                           prodl	equ	0xFF3
  5324                           intcon	equ	0xFF2
  5325                           postinc0	equ	0xFEE
  5326                           wreg	equ	0xFE8
  5327                           indf2	equ	0xFDF
  5328                           postinc2	equ	0xFDE
  5329                           postdec2	equ	0xFDD
  5330                           plusw2	equ	0xFDB
  5331                           fsr2h	equ	0xFDA
  5332                           fsr2l	equ	0xFD9
  5333                           status	equ	0xFD8
  5334                           
  5335 ;; *************** function _TMR1_StartTimer *****************
  5336 ;; Defined at:
  5337 ;;		line 96 in file "mcc_generated_files/tmr1.c"
  5338 ;; Parameters:    Size  Location     Type
  5339 ;;		None
  5340 ;; Auto vars:     Size  Location     Type
  5341 ;;		None
  5342 ;; Return value:  Size  Location     Type
  5343 ;;                  1    wreg      void 
  5344 ;; Registers used:
  5345 ;;		None
  5346 ;; Tracked objects:
  5347 ;;		On entry : 0/0
  5348 ;;		On exit  : 0/0
  5349 ;;		Unchanged: 0/0
  5350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5351 ;;      Params:         0       0       0       0       0       0       0
  5352 ;;      Locals:         0       0       0       0       0       0       0
  5353 ;;      Temps:          0       0       0       0       0       0       0
  5354 ;;      Totals:         0       0       0       0       0       0       0
  5355 ;;Total ram usage:        0 bytes
  5356 ;; Hardware stack levels used:    1
  5357 ;; Hardware stack levels required when called:    6
  5358 ;; This function calls:
  5359 ;;		Nothing
  5360 ;; This function is called by:
  5361 ;;		_TMR1_Initialize
  5362 ;; This function uses a non-reentrant model
  5363 ;;
  5364                           
  5365                           	psect	text27
  5366  00260A                     __ptext27:
  5367                           	opt stack 0
  5368  00260A                     _TMR1_StartTimer:
  5369                           	opt stack 22
  5370                           
  5371                           ;tmr1.c: 99: T1CONbits.TMR1ON = 1;
  5372                           
  5373                           ;incstack = 0
  5374  00260A  80CD               	bsf	4045,0,c	;volatile
  5375  00260C  0012               	return		;funcret
  5376  00260E                     __end_of_TMR1_StartTimer:
  5377                           	opt stack 0
  5378                           tosu	equ	0xFFF
  5379                           tosh	equ	0xFFE
  5380                           tosl	equ	0xFFD
  5381                           pclath	equ	0xFFA
  5382                           tblptru	equ	0xFF8
  5383                           tblptrh	equ	0xFF7
  5384                           tblptrl	equ	0xFF6
  5385                           tablat	equ	0xFF5
  5386                           prodh	equ	0xFF4
  5387                           prodl	equ	0xFF3
  5388                           intcon	equ	0xFF2
  5389                           postinc0	equ	0xFEE
  5390                           wreg	equ	0xFE8
  5391                           indf2	equ	0xFDF
  5392                           postinc2	equ	0xFDE
  5393                           postdec2	equ	0xFDD
  5394                           plusw2	equ	0xFDB
  5395                           fsr2h	equ	0xFDA
  5396                           fsr2l	equ	0xFD9
  5397                           status	equ	0xFD8
  5398                           
  5399 ;; *************** function _PWM4_Initialize *****************
  5400 ;; Defined at:
  5401 ;;		line 64 in file "mcc_generated_files/pwm4.c"
  5402 ;; Parameters:    Size  Location     Type
  5403 ;;		None
  5404 ;; Auto vars:     Size  Location     Type
  5405 ;;		None
  5406 ;; Return value:  Size  Location     Type
  5407 ;;                  1    wreg      void 
  5408 ;; Registers used:
  5409 ;;		wreg, status,2
  5410 ;; Tracked objects:
  5411 ;;		On entry : 0/0
  5412 ;;		On exit  : 0/0
  5413 ;;		Unchanged: 0/0
  5414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5415 ;;      Params:         0       0       0       0       0       0       0
  5416 ;;      Locals:         0       0       0       0       0       0       0
  5417 ;;      Temps:          0       0       0       0       0       0       0
  5418 ;;      Totals:         0       0       0       0       0       0       0
  5419 ;;Total ram usage:        0 bytes
  5420 ;; Hardware stack levels used:    1
  5421 ;; Hardware stack levels required when called:    6
  5422 ;; This function calls:
  5423 ;;		Nothing
  5424 ;; This function is called by:
  5425 ;;		_SYSTEM_Initialize
  5426 ;; This function uses a non-reentrant model
  5427 ;;
  5428                           
  5429                           	psect	text28
  5430  00259A                     __ptext28:
  5431                           	opt stack 0
  5432  00259A                     _PWM4_Initialize:
  5433                           	opt stack 23
  5434                           
  5435                           ;pwm4.c: 69: CCP2CON = 0x1C;
  5436                           
  5437                           ;incstack = 0
  5438  00259A  0E1C               	movlw	28
  5439  00259C  6E66               	movwf	3942,c	;volatile
  5440                           
  5441                           ;pwm4.c: 72: CCPR2L = 0x3E;
  5442  00259E  0E3E               	movlw	62
  5443  0025A0  6E67               	movwf	3943,c	;volatile
  5444                           
  5445                           ;pwm4.c: 75: CCPR2H = 0x00;
  5446  0025A2  0E00               	movlw	0
  5447  0025A4  6E68               	movwf	3944,c	;volatile
  5448                           
  5449                           ;pwm4.c: 78: CCPTMRS1bits.C4TSEL = 0x0;
  5450  0025A6  0EFC               	movlw	-4
  5451  0025A8  010F               	movlb	15	; () banked
  5452  0025AA  1748               	andwf	72,f,b	;volatile
  5453                           
  5454                           ; BSR set to: 15
  5455  0025AC  0012               	return		;funcret
  5456  0025AE                     __end_of_PWM4_Initialize:
  5457                           	opt stack 0
  5458                           tosu	equ	0xFFF
  5459                           tosh	equ	0xFFE
  5460                           tosl	equ	0xFFD
  5461                           pclath	equ	0xFFA
  5462                           tblptru	equ	0xFF8
  5463                           tblptrh	equ	0xFF7
  5464                           tblptrl	equ	0xFF6
  5465                           tablat	equ	0xFF5
  5466                           prodh	equ	0xFF4
  5467                           prodl	equ	0xFF3
  5468                           intcon	equ	0xFF2
  5469                           postinc0	equ	0xFEE
  5470                           wreg	equ	0xFE8
  5471                           indf2	equ	0xFDF
  5472                           postinc2	equ	0xFDE
  5473                           postdec2	equ	0xFDD
  5474                           plusw2	equ	0xFDB
  5475                           fsr2h	equ	0xFDA
  5476                           fsr2l	equ	0xFD9
  5477                           status	equ	0xFD8
  5478                           
  5479 ;; *************** function _PIN_MANAGER_Initialize *****************
  5480 ;; Defined at:
  5481 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  5482 ;; Parameters:    Size  Location     Type
  5483 ;;		None
  5484 ;; Auto vars:     Size  Location     Type
  5485 ;;		None
  5486 ;; Return value:  Size  Location     Type
  5487 ;;                  1    wreg      void 
  5488 ;; Registers used:
  5489 ;;		wreg, status,2
  5490 ;; Tracked objects:
  5491 ;;		On entry : 0/0
  5492 ;;		On exit  : 0/0
  5493 ;;		Unchanged: 0/0
  5494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5495 ;;      Params:         0       0       0       0       0       0       0
  5496 ;;      Locals:         0       0       0       0       0       0       0
  5497 ;;      Temps:          0       0       0       0       0       0       0
  5498 ;;      Totals:         0       0       0       0       0       0       0
  5499 ;;Total ram usage:        0 bytes
  5500 ;; Hardware stack levels used:    1
  5501 ;; Hardware stack levels required when called:    6
  5502 ;; This function calls:
  5503 ;;		Nothing
  5504 ;; This function is called by:
  5505 ;;		_SYSTEM_Initialize
  5506 ;; This function uses a non-reentrant model
  5507 ;;
  5508                           
  5509                           	psect	text29
  5510  001CE4                     __ptext29:
  5511                           	opt stack 0
  5512  001CE4                     _PIN_MANAGER_Initialize:
  5513                           	opt stack 23
  5514                           
  5515                           ;pin_manager.c: 52: LATA = 0x00;
  5516                           
  5517                           ; BSR set to: 15
  5518                           ;incstack = 0
  5519  001CE4  0E00               	movlw	0
  5520  001CE6  6E89               	movwf	3977,c	;volatile
  5521                           
  5522                           ;pin_manager.c: 53: TRISA = 0xF7;
  5523  001CE8  0EF7               	movlw	247
  5524  001CEA  6E92               	movwf	3986,c	;volatile
  5525                           
  5526                           ;pin_manager.c: 54: ANSELA = 0x27;
  5527  001CEC  0E27               	movlw	39
  5528  001CEE  010F               	movlb	15	; () banked
  5529  001CF0  6F38               	movwf	56,b	;volatile
  5530                           
  5531                           ;pin_manager.c: 56: LATB = 0x01;
  5532  001CF2  0E01               	movlw	1
  5533  001CF4  6E8A               	movwf	3978,c	;volatile
  5534                           
  5535                           ;pin_manager.c: 57: TRISB = 0xFE;
  5536  001CF6  0EFE               	movlw	254
  5537  001CF8  6E93               	movwf	3987,c	;volatile
  5538                           
  5539                           ;pin_manager.c: 58: ANSELB = 0x3E;
  5540  001CFA  0E3E               	movlw	62
  5541  001CFC  010F               	movlb	15	; () banked
  5542  001CFE  6F39               	movwf	57,b	;volatile
  5543                           
  5544                           ;pin_manager.c: 59: WPUB = 0x00;
  5545  001D00  0E00               	movlw	0
  5546  001D02  6E61               	movwf	3937,c	;volatile
  5547                           
  5548                           ;pin_manager.c: 61: LATC = 0x00;
  5549  001D04  0E00               	movlw	0
  5550  001D06  6E8B               	movwf	3979,c	;volatile
  5551                           
  5552                           ;pin_manager.c: 62: TRISC = 0xDF;
  5553  001D08  0EDF               	movlw	223
  5554  001D0A  6E94               	movwf	3988,c	;volatile
  5555                           
  5556                           ;pin_manager.c: 63: ANSELC = 0x1C;
  5557  001D0C  0E1C               	movlw	28
  5558  001D0E  010F               	movlb	15	; () banked
  5559  001D10  6F3A               	movwf	58,b	;volatile
  5560                           
  5561                           ;pin_manager.c: 65: LATD = 0x00;
  5562  001D12  0E00               	movlw	0
  5563  001D14  6E8C               	movwf	3980,c	;volatile
  5564                           
  5565                           ;pin_manager.c: 66: TRISD = 0x0F;
  5566  001D16  0E0F               	movlw	15
  5567  001D18  6E95               	movwf	3989,c	;volatile
  5568                           
  5569                           ;pin_manager.c: 67: ANSELD = 0x0F;
  5570  001D1A  0E0F               	movlw	15
  5571  001D1C  010F               	movlb	15	; () banked
  5572  001D1E  6F3B               	movwf	59,b	;volatile
  5573                           
  5574                           ;pin_manager.c: 69: LATE = 0x00;
  5575  001D20  0E00               	movlw	0
  5576  001D22  6E8D               	movwf	3981,c	;volatile
  5577                           
  5578                           ;pin_manager.c: 70: TRISE = 0x07;
  5579  001D24  0E07               	movlw	7
  5580  001D26  6E96               	movwf	3990,c	;volatile
  5581                           
  5582                           ;pin_manager.c: 71: ANSELE = 0x07;
  5583  001D28  0E07               	movlw	7
  5584  001D2A  010F               	movlb	15	; () banked
  5585  001D2C  6F3C               	movwf	60,b	;volatile
  5586                           
  5587                           ; BSR set to: 15
  5588                           ;pin_manager.c: 72: TRISCbits.RC6 = 1;
  5589  001D2E  8C94               	bsf	3988,6,c	;volatile
  5590                           
  5591                           ; BSR set to: 15
  5592                           ;pin_manager.c: 73: TRISCbits.RC7 = 1;
  5593  001D30  8E94               	bsf	3988,7,c	;volatile
  5594                           
  5595                           ; BSR set to: 15
  5596                           ;pin_manager.c: 74: TRISCbits.RC5 = 0;
  5597  001D32  9A94               	bcf	3988,5,c	;volatile
  5598                           
  5599                           ; BSR set to: 15
  5600                           ;pin_manager.c: 75: LATCbits.LATC5 = 1;
  5601  001D34  8A8B               	bsf	3979,5,c	;volatile
  5602                           
  5603                           ; BSR set to: 15
  5604                           ;pin_manager.c: 76: LATCbits.LATC6 = 1;
  5605  001D36  8C8B               	bsf	3979,6,c	;volatile
  5606                           
  5607                           ; BSR set to: 15
  5608                           ;pin_manager.c: 77: LATCbits.LATC7 = 1;
  5609  001D38  8E8B               	bsf	3979,7,c	;volatile
  5610                           
  5611                           ; BSR set to: 15
  5612                           ;pin_manager.c: 78: ANSELCbits.ANSC5 =0;
  5613  001D3A  010F               	movlb	15	; () banked
  5614  001D3C  9B3A               	bcf	58,5,b	;volatile
  5615                           
  5616                           ; BSR set to: 15
  5617                           ;pin_manager.c: 79: ANSELCbits.ANSC6 =0;
  5618  001D3E  010F               	movlb	15	; () banked
  5619  001D40  9D3A               	bcf	58,6,b	;volatile
  5620                           
  5621                           ; BSR set to: 15
  5622                           ;pin_manager.c: 80: ANSELCbits.ANSC7 =0;
  5623  001D42  010F               	movlb	15	; () banked
  5624  001D44  9F3A               	bcf	58,7,b	;volatile
  5625                           
  5626                           ; BSR set to: 15
  5627                           ;pin_manager.c: 82: INTCON2bits.nRBPU = 0x01;
  5628  001D46  8EF1               	bsf	intcon2,7,c	;volatile
  5629                           
  5630                           ; BSR set to: 15
  5631                           
  5632                           ; BSR set to: 15
  5633                           
  5634                           ;pin_manager.c: 84: do { TRISB4 = 0; } while(0);
  5635  001D48  9893               	bcf	3987,4,c	;volatile
  5636                           
  5637                           ; BSR set to: 15
  5638                           
  5639                           ; BSR set to: 15
  5640                           
  5641                           ;pin_manager.c: 85: do { TRISB3 = 0; } while(0);
  5642                           
  5643                           ; BSR set to: 15
  5644  001D4A  9693               	bcf	3987,3,c	;volatile
  5645                           
  5646                           ; BSR set to: 15
  5647                           
  5648                           ; BSR set to: 15
  5649                           
  5650                           ;pin_manager.c: 86: do { TRISB5 = 0; } while(0);
  5651                           
  5652                           ; BSR set to: 15
  5653  001D4C  9A93               	bcf	3987,5,c	;volatile
  5654                           
  5655                           ; BSR set to: 15
  5656                           ;pin_manager.c: 88: TRISDbits.RD1 = 0;
  5657                           
  5658                           ; BSR set to: 15
  5659  001D4E  9295               	bcf	3989,1,c	;volatile
  5660                           
  5661                           ; BSR set to: 15
  5662                           
  5663                           ; BSR set to: 15
  5664                           
  5665                           ;pin_manager.c: 90: do { ANSB3 = 0; } while(0);
  5666  001D50  010F               	movlb	15	; () banked
  5667  001D52  9739               	bcf	57,3,b	;volatile
  5668                           
  5669                           ; BSR set to: 15
  5670                           
  5671                           ; BSR set to: 15
  5672                           
  5673                           ;pin_manager.c: 91: do { ANSD7 = 0; } while(0);
  5674                           
  5675                           ; BSR set to: 15
  5676  001D54  010F               	movlb	15	; () banked
  5677  001D56  9F3B               	bcf	59,7,b	;volatile
  5678                           
  5679                           ; BSR set to: 15
  5680                           
  5681                           ; BSR set to: 15
  5682                           
  5683                           ;pin_manager.c: 92: do { ANSB4 = 0; } while(0);
  5684                           
  5685                           ; BSR set to: 15
  5686  001D58  010F               	movlb	15	; () banked
  5687  001D5A  9939               	bcf	57,4,b	;volatile
  5688  001D5C  0012               	return	
  5689  001D5E                     __end_of_PIN_MANAGER_Initialize:
  5690                           	opt stack 0
  5691                           tosu	equ	0xFFF
  5692                           tosh	equ	0xFFE
  5693                           tosl	equ	0xFFD
  5694                           pclath	equ	0xFFA
  5695                           tblptru	equ	0xFF8
  5696                           tblptrh	equ	0xFF7
  5697                           tblptrl	equ	0xFF6
  5698                           tablat	equ	0xFF5
  5699                           prodh	equ	0xFF4
  5700                           prodl	equ	0xFF3
  5701                           intcon	equ	0xFF2
  5702                           intcon2	equ	0xFF1
  5703                           postinc0	equ	0xFEE
  5704                           wreg	equ	0xFE8
  5705                           indf2	equ	0xFDF
  5706                           postinc2	equ	0xFDE
  5707                           postdec2	equ	0xFDD
  5708                           plusw2	equ	0xFDB
  5709                           fsr2h	equ	0xFDA
  5710                           fsr2l	equ	0xFD9
  5711                           status	equ	0xFD8
  5712                           
  5713 ;; *************** function _OSCILLATOR_Initialize *****************
  5714 ;; Defined at:
  5715 ;;		line 126 in file "mcc_generated_files/mcc.c"
  5716 ;; Parameters:    Size  Location     Type
  5717 ;;		None
  5718 ;; Auto vars:     Size  Location     Type
  5719 ;;		None
  5720 ;; Return value:  Size  Location     Type
  5721 ;;                  1    wreg      void 
  5722 ;; Registers used:
  5723 ;;		wreg, status,2
  5724 ;; Tracked objects:
  5725 ;;		On entry : 0/0
  5726 ;;		On exit  : 0/0
  5727 ;;		Unchanged: 0/0
  5728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5729 ;;      Params:         0       0       0       0       0       0       0
  5730 ;;      Locals:         0       0       0       0       0       0       0
  5731 ;;      Temps:          0       0       0       0       0       0       0
  5732 ;;      Totals:         0       0       0       0       0       0       0
  5733 ;;Total ram usage:        0 bytes
  5734 ;; Hardware stack levels used:    1
  5735 ;; Hardware stack levels required when called:    6
  5736 ;; This function calls:
  5737 ;;		Nothing
  5738 ;; This function is called by:
  5739 ;;		_SYSTEM_Initialize
  5740 ;; This function uses a non-reentrant model
  5741 ;;
  5742                           
  5743                           	psect	text30
  5744  0025E2                     __ptext30:
  5745                           	opt stack 0
  5746  0025E2                     _OSCILLATOR_Initialize:
  5747                           	opt stack 23
  5748                           
  5749                           ;mcc.c: 128: OSCCON = 0x72;
  5750                           
  5751                           ; BSR set to: 15
  5752                           ;incstack = 0
  5753  0025E2  0E72               	movlw	114
  5754  0025E4  6ED3               	movwf	4051,c	;volatile
  5755                           
  5756                           ;mcc.c: 130: OSCCON2 = 0x04;
  5757  0025E6  0E04               	movlw	4
  5758  0025E8  6ED2               	movwf	4050,c	;volatile
  5759                           
  5760                           ;mcc.c: 132: OSCTUNE = 0x00;
  5761  0025EA  0E00               	movlw	0
  5762  0025EC  6E9B               	movwf	3995,c	;volatile
  5763  0025EE  0012               	return		;funcret
  5764  0025F0                     __end_of_OSCILLATOR_Initialize:
  5765                           	opt stack 0
  5766                           tosu	equ	0xFFF
  5767                           tosh	equ	0xFFE
  5768                           tosl	equ	0xFFD
  5769                           pclath	equ	0xFFA
  5770                           tblptru	equ	0xFF8
  5771                           tblptrh	equ	0xFF7
  5772                           tblptrl	equ	0xFF6
  5773                           tablat	equ	0xFF5
  5774                           prodh	equ	0xFF4
  5775                           prodl	equ	0xFF3
  5776                           intcon	equ	0xFF2
  5777                           intcon2	equ	0xFF1
  5778                           postinc0	equ	0xFEE
  5779                           wreg	equ	0xFE8
  5780                           indf2	equ	0xFDF
  5781                           postinc2	equ	0xFDE
  5782                           postdec2	equ	0xFDD
  5783                           plusw2	equ	0xFDB
  5784                           fsr2h	equ	0xFDA
  5785                           fsr2l	equ	0xFD9
  5786                           status	equ	0xFD8
  5787                           
  5788 ;; *************** function _INTERRUPT_Initialize *****************
  5789 ;; Defined at:
  5790 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  5791 ;; Parameters:    Size  Location     Type
  5792 ;;		None
  5793 ;; Auto vars:     Size  Location     Type
  5794 ;;		None
  5795 ;; Return value:  Size  Location     Type
  5796 ;;                  1    wreg      void 
  5797 ;; Registers used:
  5798 ;;		None
  5799 ;; Tracked objects:
  5800 ;;		On entry : 0/0
  5801 ;;		On exit  : 0/0
  5802 ;;		Unchanged: 0/0
  5803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5804 ;;      Params:         0       0       0       0       0       0       0
  5805 ;;      Locals:         0       0       0       0       0       0       0
  5806 ;;      Temps:          0       0       0       0       0       0       0
  5807 ;;      Totals:         0       0       0       0       0       0       0
  5808 ;;Total ram usage:        0 bytes
  5809 ;; Hardware stack levels used:    1
  5810 ;; Hardware stack levels required when called:    6
  5811 ;; This function calls:
  5812 ;;		Nothing
  5813 ;; This function is called by:
  5814 ;;		_SYSTEM_Initialize
  5815 ;; This function uses a non-reentrant model
  5816 ;;
  5817                           
  5818                           	psect	text31
  5819  0025F0                     __ptext31:
  5820                           	opt stack 0
  5821  0025F0                     _INTERRUPT_Initialize:
  5822                           	opt stack 23
  5823                           
  5824                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  5825                           
  5826                           ;incstack = 0
  5827  0025F0  9ED0               	bcf	4048,7,c	;volatile
  5828                           
  5829                           ;interrupt_manager.c: 60: IPR1bits.RC1IP = 0;
  5830  0025F2  9A9F               	bcf	3999,5,c	;volatile
  5831                           
  5832                           ;interrupt_manager.c: 62: IPR1bits.TX1IP = 0;
  5833  0025F4  989F               	bcf	3999,4,c	;volatile
  5834                           
  5835                           ;interrupt_manager.c: 64: IPR1bits.ADIP = 0;
  5836  0025F6  9C9F               	bcf	3999,6,c	;volatile
  5837  0025F8  0012               	return		;funcret
  5838  0025FA                     __end_of_INTERRUPT_Initialize:
  5839                           	opt stack 0
  5840                           tosu	equ	0xFFF
  5841                           tosh	equ	0xFFE
  5842                           tosl	equ	0xFFD
  5843                           pclath	equ	0xFFA
  5844                           tblptru	equ	0xFF8
  5845                           tblptrh	equ	0xFF7
  5846                           tblptrl	equ	0xFF6
  5847                           tablat	equ	0xFF5
  5848                           prodh	equ	0xFF4
  5849                           prodl	equ	0xFF3
  5850                           intcon	equ	0xFF2
  5851                           intcon2	equ	0xFF1
  5852                           postinc0	equ	0xFEE
  5853                           wreg	equ	0xFE8
  5854                           indf2	equ	0xFDF
  5855                           postinc2	equ	0xFDE
  5856                           postdec2	equ	0xFDD
  5857                           plusw2	equ	0xFDB
  5858                           fsr2h	equ	0xFDA
  5859                           fsr2l	equ	0xFD9
  5860                           status	equ	0xFD8
  5861                           
  5862 ;; *************** function _EUSART1_Initialize *****************
  5863 ;; Defined at:
  5864 ;;		line 23 in file "UART.c"
  5865 ;; Parameters:    Size  Location     Type
  5866 ;;		None
  5867 ;; Auto vars:     Size  Location     Type
  5868 ;;		None
  5869 ;; Return value:  Size  Location     Type
  5870 ;;                  1    wreg      void 
  5871 ;; Registers used:
  5872 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5873 ;; Tracked objects:
  5874 ;;		On entry : 0/0
  5875 ;;		On exit  : 0/0
  5876 ;;		Unchanged: 0/0
  5877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5878 ;;      Params:         0       0       0       0       0       0       0
  5879 ;;      Locals:         0       0       0       0       0       0       0
  5880 ;;      Temps:          0       0       0       0       0       0       0
  5881 ;;      Totals:         0       0       0       0       0       0       0
  5882 ;;Total ram usage:        0 bytes
  5883 ;; Hardware stack levels used:    1
  5884 ;; Hardware stack levels required when called:    8
  5885 ;; This function calls:
  5886 ;;		_UART_buff_init
  5887 ;; This function is called by:
  5888 ;;		_SYSTEM_Initialize
  5889 ;; This function uses a non-reentrant model
  5890 ;;
  5891                           
  5892                           	psect	text32
  5893  0021CA                     __ptext32:
  5894                           	opt stack 0
  5895  0021CA                     _EUSART1_Initialize:
  5896                           	opt stack 21
  5897                           
  5898                           ;UART.c: 25: PIE1bits.RC1IE = 0;
  5899                           
  5900                           ;incstack = 0
  5901  0021CA  9A9D               	bcf	3997,5,c	;volatile
  5902                           
  5903                           ;UART.c: 26: PIE1bits.TX1IE = 0;
  5904  0021CC  989D               	bcf	3997,4,c	;volatile
  5905                           
  5906                           ;UART.c: 31: BAUD1CON = 0x48;
  5907  0021CE  0E48               	movlw	72
  5908  0021D0  6EB8               	movwf	4024,c	;volatile
  5909                           
  5910                           ;UART.c: 34: RC1STA = 0x98;
  5911  0021D2  0E98               	movlw	152
  5912  0021D4  6EAB               	movwf	4011,c	;volatile
  5913                           
  5914                           ;UART.c: 37: TX1STA = 0x26;
  5915  0021D6  0E26               	movlw	38
  5916  0021D8  6EAC               	movwf	4012,c	;volatile
  5917                           
  5918                           ;UART.c: 40: SPBRG1 = (((16000000/38400)/4)-1);
  5919  0021DA  0E67               	movlw	103
  5920  0021DC  6EAF               	movwf	4015,c	;volatile
  5921                           
  5922                           ;UART.c: 43: SPBRGH1 = 0x00;
  5923  0021DE  0E00               	movlw	0
  5924  0021E0  6EB0               	movwf	4016,c	;volatile
  5925                           
  5926                           ;UART.c: 46: TXREG1 = 0x00;
  5927  0021E2  0E00               	movlw	0
  5928  0021E4  6EAD               	movwf	4013,c	;volatile
  5929                           
  5930                           ;UART.c: 49: RCREG1 = 0x00;
  5931  0021E6  0E00               	movlw	0
  5932  0021E8  6EAE               	movwf	4014,c	;volatile
  5933                           
  5934                           ;UART.c: 51: UART_buff_init(&input_buffer);
  5935  0021EA  0E00               	movlw	low _input_buffer
  5936  0021EC  0100               	movlb	0	; () banked
  5937  0021EE  6FDB               	movwf	UART_buff_init@_this& (0+255),b
  5938  0021F0  0E03               	movlw	high _input_buffer
  5939  0021F2  0100               	movlb	0	; () banked
  5940  0021F4  6FDC               	movwf	(UART_buff_init@_this+1)& (0+255),b
  5941  0021F6  EC6D  F012         	call	_UART_buff_init	;wreg free
  5942                           
  5943                           ;UART.c: 52: UART_buff_init(&output_buffer);
  5944  0021FA  0E00               	movlw	low _output_buffer
  5945  0021FC  0100               	movlb	0	; () banked
  5946  0021FE  6FDB               	movwf	UART_buff_init@_this& (0+255),b
  5947  002200  0E04               	movlw	high _output_buffer
  5948  002202  0100               	movlb	0	; () banked
  5949  002204  6FDC               	movwf	(UART_buff_init@_this+1)& (0+255),b
  5950  002206  EC6D  F012         	call	_UART_buff_init	;wreg free
  5951                           
  5952                           ;UART.c: 54: PIE1bits.RC1IE = 1;
  5953  00220A  8A9D               	bsf	3997,5,c	;volatile
  5954  00220C  0012               	return		;funcret
  5955  00220E                     __end_of_EUSART1_Initialize:
  5956                           	opt stack 0
  5957                           tosu	equ	0xFFF
  5958                           tosh	equ	0xFFE
  5959                           tosl	equ	0xFFD
  5960                           pclath	equ	0xFFA
  5961                           tblptru	equ	0xFF8
  5962                           tblptrh	equ	0xFF7
  5963                           tblptrl	equ	0xFF6
  5964                           tablat	equ	0xFF5
  5965                           prodh	equ	0xFF4
  5966                           prodl	equ	0xFF3
  5967                           intcon	equ	0xFF2
  5968                           intcon2	equ	0xFF1
  5969                           postinc0	equ	0xFEE
  5970                           wreg	equ	0xFE8
  5971                           indf2	equ	0xFDF
  5972                           postinc2	equ	0xFDE
  5973                           postdec2	equ	0xFDD
  5974                           plusw2	equ	0xFDB
  5975                           fsr2h	equ	0xFDA
  5976                           fsr2l	equ	0xFD9
  5977                           status	equ	0xFD8
  5978                           
  5979 ;; *************** function _UART_buff_init *****************
  5980 ;; Defined at:
  5981 ;;		line 58 in file "UART.c"
  5982 ;; Parameters:    Size  Location     Type
  5983 ;;  _this           2    0[BANK0 ] PTR struct UART_ring_buf
  5984 ;;		 -> output_buffer(206), input_buffer(206), 
  5985 ;; Auto vars:     Size  Location     Type
  5986 ;;		None
  5987 ;; Return value:  Size  Location     Type
  5988 ;;                  1    wreg      void 
  5989 ;; Registers used:
  5990 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5991 ;; Tracked objects:
  5992 ;;		On entry : 0/0
  5993 ;;		On exit  : 0/0
  5994 ;;		Unchanged: 0/0
  5995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5996 ;;      Params:         0       2       0       0       0       0       0
  5997 ;;      Locals:         0       0       0       0       0       0       0
  5998 ;;      Temps:          0       0       0       0       0       0       0
  5999 ;;      Totals:         0       2       0       0       0       0       0
  6000 ;;Total ram usage:        2 bytes
  6001 ;; Hardware stack levels used:    1
  6002 ;; Hardware stack levels required when called:    7
  6003 ;; This function calls:
  6004 ;;		_memset
  6005 ;; This function is called by:
  6006 ;;		_EUSART1_Initialize
  6007 ;; This function uses a non-reentrant model
  6008 ;;
  6009                           
  6010                           	psect	text33
  6011  0024DA                     __ptext33:
  6012                           	opt stack 0
  6013  0024DA                     _UART_buff_init:
  6014                           	opt stack 21
  6015                           
  6016                           ;UART.c: 67: memset(_this, 0, sizeof (*_this));
  6017                           
  6018                           ;incstack = 0
  6019  0024DA  C0DB  F01D         	movff	UART_buff_init@_this,memset@p1
  6020  0024DE  C0DC  F01E         	movff	UART_buff_init@_this+1,memset@p1+1
  6021  0024E2  0E00               	movlw	0
  6022  0024E4  6E20               	movwf	memset@c+1,c
  6023  0024E6  0E00               	movlw	0
  6024  0024E8  6E1F               	movwf	memset@c,c
  6025  0024EA  0E00               	movlw	0
  6026  0024EC  6E22               	movwf	memset@n+1,c
  6027  0024EE  0ECE               	movlw	206
  6028  0024F0  6E21               	movwf	memset@n,c
  6029  0024F2  ECD3  F011         	call	_memset	;wreg free
  6030  0024F6  0012               	return		;funcret
  6031  0024F8                     __end_of_UART_buff_init:
  6032                           	opt stack 0
  6033                           tosu	equ	0xFFF
  6034                           tosh	equ	0xFFE
  6035                           tosl	equ	0xFFD
  6036                           pclath	equ	0xFFA
  6037                           tblptru	equ	0xFF8
  6038                           tblptrh	equ	0xFF7
  6039                           tblptrl	equ	0xFF6
  6040                           tablat	equ	0xFF5
  6041                           prodh	equ	0xFF4
  6042                           prodl	equ	0xFF3
  6043                           intcon	equ	0xFF2
  6044                           intcon2	equ	0xFF1
  6045                           postinc0	equ	0xFEE
  6046                           wreg	equ	0xFE8
  6047                           indf2	equ	0xFDF
  6048                           postinc2	equ	0xFDE
  6049                           postdec2	equ	0xFDD
  6050                           plusw2	equ	0xFDB
  6051                           fsr2h	equ	0xFDA
  6052                           fsr2l	equ	0xFD9
  6053                           status	equ	0xFD8
  6054                           
  6055 ;; *************** function _memset *****************
  6056 ;; Defined at:
  6057 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memset.c"
  6058 ;; Parameters:    Size  Location     Type
  6059 ;;  p1              2   28[COMRAM] PTR void 
  6060 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  6061 ;;  c               2   30[COMRAM] int 
  6062 ;;  n               2   32[COMRAM] unsigned int 
  6063 ;; Auto vars:     Size  Location     Type
  6064 ;;  p               2   34[COMRAM] PTR unsigned char 
  6065 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  6066 ;; Return value:  Size  Location     Type
  6067 ;;                  2   28[COMRAM] PTR void 
  6068 ;; Registers used:
  6069 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6070 ;; Tracked objects:
  6071 ;;		On entry : 0/0
  6072 ;;		On exit  : 0/0
  6073 ;;		Unchanged: 0/0
  6074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6075 ;;      Params:         6       0       0       0       0       0       0
  6076 ;;      Locals:         2       0       0       0       0       0       0
  6077 ;;      Temps:          0       0       0       0       0       0       0
  6078 ;;      Totals:         8       0       0       0       0       0       0
  6079 ;;Total ram usage:        8 bytes
  6080 ;; Hardware stack levels used:    1
  6081 ;; Hardware stack levels required when called:    6
  6082 ;; This function calls:
  6083 ;;		Nothing
  6084 ;; This function is called by:
  6085 ;;		_FastTransfer_buffer_flush
  6086 ;;		_UART_buff_init
  6087 ;;		_UART_buff_flush
  6088 ;; This function uses a non-reentrant model
  6089 ;;
  6090                           
  6091                           	psect	text34
  6092  0023A6                     __ptext34:
  6093                           	opt stack 0
  6094  0023A6                     _memset:
  6095                           	opt stack 20
  6096                           
  6097                           ;incstack = 0
  6098  0023A6  C01D  F023         	movff	memset@p1,memset@p
  6099  0023AA  C01E  F024         	movff	memset@p1+1,memset@p+1
  6100  0023AE  D008               	goto	l3938
  6101  0023B0                     l3934:
  6102  0023B0  C023  FFD9         	movff	memset@p,fsr2l
  6103  0023B4  C024  FFDA         	movff	memset@p+1,fsr2h
  6104  0023B8  C01F  FFDF         	movff	memset@c,indf2
  6105  0023BC  4A23               	infsnz	memset@p,f,c
  6106  0023BE  2A24               	incf	memset@p+1,f,c
  6107  0023C0                     l3938:
  6108  0023C0  0621               	decf	memset@n,f,c
  6109  0023C2  A0D8               	btfss	status,0,c
  6110  0023C4  0622               	decf	memset@n+1,f,c
  6111  0023C6  2821               	incf	memset@n,w,c
  6112  0023C8  E1F3               	bnz	l3934
  6113  0023CA  2822               	incf	memset@n+1,w,c
  6114  0023CC  B4D8               	btfsc	status,2,c
  6115  0023CE  0012               	return	
  6116  0023D0  D7EF               	goto	l3934
  6117  0023D2                     __end_of_memset:
  6118                           	opt stack 0
  6119                           tosu	equ	0xFFF
  6120                           tosh	equ	0xFFE
  6121                           tosl	equ	0xFFD
  6122                           pclath	equ	0xFFA
  6123                           tblptru	equ	0xFF8
  6124                           tblptrh	equ	0xFF7
  6125                           tblptrl	equ	0xFF6
  6126                           tablat	equ	0xFF5
  6127                           prodh	equ	0xFF4
  6128                           prodl	equ	0xFF3
  6129                           intcon	equ	0xFF2
  6130                           intcon2	equ	0xFF1
  6131                           postinc0	equ	0xFEE
  6132                           wreg	equ	0xFE8
  6133                           indf2	equ	0xFDF
  6134                           postinc2	equ	0xFDE
  6135                           postdec2	equ	0xFDD
  6136                           plusw2	equ	0xFDB
  6137                           fsr2h	equ	0xFDA
  6138                           fsr2l	equ	0xFD9
  6139                           status	equ	0xFD8
  6140                           
  6141 ;; *************** function _ADC_Initialize *****************
  6142 ;; Defined at:
  6143 ;;		line 59 in file "mcc_generated_files/adc.c"
  6144 ;; Parameters:    Size  Location     Type
  6145 ;;		None
  6146 ;; Auto vars:     Size  Location     Type
  6147 ;;		None
  6148 ;; Return value:  Size  Location     Type
  6149 ;;                  1    wreg      void 
  6150 ;; Registers used:
  6151 ;;		wreg, status,2
  6152 ;; Tracked objects:
  6153 ;;		On entry : 0/0
  6154 ;;		On exit  : 0/0
  6155 ;;		Unchanged: 0/0
  6156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6157 ;;      Params:         0       0       0       0       0       0       0
  6158 ;;      Locals:         0       0       0       0       0       0       0
  6159 ;;      Temps:          0       0       0       0       0       0       0
  6160 ;;      Totals:         0       0       0       0       0       0       0
  6161 ;;Total ram usage:        0 bytes
  6162 ;; Hardware stack levels used:    1
  6163 ;; Hardware stack levels required when called:    6
  6164 ;; This function calls:
  6165 ;;		Nothing
  6166 ;; This function is called by:
  6167 ;;		_SYSTEM_Initialize
  6168 ;; This function uses a non-reentrant model
  6169 ;;
  6170                           
  6171                           	psect	text35
  6172  002516                     __ptext35:
  6173                           	opt stack 0
  6174  002516                     _ADC_Initialize:
  6175                           	opt stack 23
  6176                           
  6177                           ;adc.c: 64: ADCON0 = 0x01;
  6178                           
  6179                           ;incstack = 0
  6180  002516  0E01               	movlw	1
  6181  002518  6EC2               	movwf	4034,c	;volatile
  6182                           
  6183                           ;adc.c: 67: ADCON1 = 0x80;
  6184  00251A  0E80               	movlw	128
  6185  00251C  6EC1               	movwf	4033,c	;volatile
  6186                           
  6187                           ;adc.c: 70: ADCON2 = 0x12;
  6188  00251E  0E12               	movlw	18
  6189  002520  6EC0               	movwf	4032,c	;volatile
  6190                           
  6191                           ;adc.c: 72: ADCON2bits.ADFM = 1;
  6192  002522  8EC0               	bsf	4032,7,c	;volatile
  6193                           
  6194                           ;adc.c: 75: ADRESL = 0x00;
  6195  002524  0E00               	movlw	0
  6196  002526  6EC3               	movwf	4035,c	;volatile
  6197                           
  6198                           ;adc.c: 78: ADRESH = 0x00;
  6199  002528  0E00               	movlw	0
  6200  00252A  6EC4               	movwf	4036,c	;volatile
  6201  00252C  0012               	return		;funcret
  6202  00252E                     __end_of_ADC_Initialize:
  6203                           	opt stack 0
  6204                           tosu	equ	0xFFF
  6205                           tosh	equ	0xFFE
  6206                           tosl	equ	0xFFD
  6207                           pclath	equ	0xFFA
  6208                           tblptru	equ	0xFF8
  6209                           tblptrh	equ	0xFF7
  6210                           tblptrl	equ	0xFF6
  6211                           tablat	equ	0xFF5
  6212                           prodh	equ	0xFF4
  6213                           prodl	equ	0xFF3
  6214                           intcon	equ	0xFF2
  6215                           intcon2	equ	0xFF1
  6216                           postinc0	equ	0xFEE
  6217                           wreg	equ	0xFE8
  6218                           indf2	equ	0xFDF
  6219                           postinc2	equ	0xFDE
  6220                           postdec2	equ	0xFDD
  6221                           plusw2	equ	0xFDB
  6222                           fsr2h	equ	0xFDA
  6223                           fsr2l	equ	0xFD9
  6224                           status	equ	0xFD8
  6225                           
  6226 ;; *************** function _PDUStartup *****************
  6227 ;; Defined at:
  6228 ;;		line 20 in file "PDU.c"
  6229 ;; Parameters:    Size  Location     Type
  6230 ;;		None
  6231 ;; Auto vars:     Size  Location     Type
  6232 ;;		None
  6233 ;; Return value:  Size  Location     Type
  6234 ;;                  1    wreg      void 
  6235 ;; Registers used:
  6236 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6237 ;; Tracked objects:
  6238 ;;		On entry : 0/0
  6239 ;;		On exit  : 0/0
  6240 ;;		Unchanged: 0/0
  6241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6242 ;;      Params:         0       0       0       0       0       0       0
  6243 ;;      Locals:         0       0       0       0       0       0       0
  6244 ;;      Temps:          0       0       0       0       0       0       0
  6245 ;;      Totals:         0       0       0       0       0       0       0
  6246 ;;Total ram usage:        0 bytes
  6247 ;; Hardware stack levels used:    1
  6248 ;; Hardware stack levels required when called:   10
  6249 ;; This function calls:
  6250 ;;		_ComputeStorageData
  6251 ;;		_EnableSlavePower
  6252 ;;		_StartUp595
  6253 ;;		_Update
  6254 ;; This function is called by:
  6255 ;;		_main
  6256 ;; This function uses a non-reentrant model
  6257 ;;
  6258                           
  6259                           	psect	text36
  6260  001F1E                     __ptext36:
  6261                           	opt stack 0
  6262  001F1E                     _PDUStartup:
  6263                           	opt stack 20
  6264                           
  6265                           ;PDU.c: 23: StartUp595();
  6266                           
  6267                           ;incstack = 0
  6268  001F1E  ECC0  F00F         	call	_StartUp595	;wreg free
  6269                           
  6270                           ;PDU.c: 24: EnableSlavePower(SAS, ON);
  6271  001F22  0E00               	movlw	0
  6272  001F24  6E24               	movwf	EnableSlavePower@onof+1,c
  6273  001F26  0E01               	movlw	1
  6274  001F28  6E23               	movwf	EnableSlavePower@onof,c
  6275  001F2A  0E03               	movlw	3
  6276  001F2C  EC80  F00A         	call	_EnableSlavePower
  6277                           
  6278                           ;PDU.c: 25: EnableSlavePower(DDS, ON);
  6279  001F30  0E00               	movlw	0
  6280  001F32  6E24               	movwf	EnableSlavePower@onof+1,c
  6281  001F34  0E01               	movlw	1
  6282  001F36  6E23               	movwf	EnableSlavePower@onof,c
  6283  001F38  0E01               	movlw	1
  6284  001F3A  EC80  F00A         	call	_EnableSlavePower
  6285                           
  6286                           ;PDU.c: 26: EnableSlavePower(MCS, OFF);
  6287  001F3E  0E00               	movlw	0
  6288  001F40  6E24               	movwf	EnableSlavePower@onof+1,c
  6289  001F42  0E00               	movlw	0
  6290  001F44  6E23               	movwf	EnableSlavePower@onof,c
  6291  001F46  0E02               	movlw	2
  6292  001F48  EC80  F00A         	call	_EnableSlavePower
  6293                           
  6294                           ;PDU.c: 27: EnableSlavePower(BMM, ON);
  6295  001F4C  0E00               	movlw	0
  6296  001F4E  6E24               	movwf	EnableSlavePower@onof+1,c
  6297  001F50  0E01               	movlw	1
  6298  001F52  6E23               	movwf	EnableSlavePower@onof,c
  6299  001F54  0E04               	movlw	4
  6300  001F56  EC80  F00A         	call	_EnableSlavePower
  6301                           
  6302                           ;PDU.c: 28: EnableSlavePower(TSS, OFF);
  6303  001F5A  0E00               	movlw	0
  6304  001F5C  6E24               	movwf	EnableSlavePower@onof+1,c
  6305  001F5E  0E00               	movlw	0
  6306  001F60  6E23               	movwf	EnableSlavePower@onof,c
  6307  001F62  0E05               	movlw	5
  6308  001F64  EC80  F00A         	call	_EnableSlavePower
  6309                           
  6310                           ;PDU.c: 29: EnableSlavePower(AUX, OFF);
  6311  001F68  0E00               	movlw	0
  6312  001F6A  6E24               	movwf	EnableSlavePower@onof+1,c
  6313  001F6C  0E00               	movlw	0
  6314  001F6E  6E23               	movwf	EnableSlavePower@onof,c
  6315  001F70  0E06               	movlw	6
  6316  001F72  EC80  F00A         	call	_EnableSlavePower
  6317                           
  6318                           ;PDU.c: 30: Update();
  6319  001F76  ECFD  F012         	call	_Update	;wreg free
  6320                           
  6321                           ;PDU.c: 32: ComputeStorageData();
  6322  001F7A  ECF4  F00A         	call	_ComputeStorageData	;wreg free
  6323  001F7E  0012               	return		;funcret
  6324  001F80                     __end_of_PDUStartup:
  6325                           	opt stack 0
  6326                           tosu	equ	0xFFF
  6327                           tosh	equ	0xFFE
  6328                           tosl	equ	0xFFD
  6329                           pclath	equ	0xFFA
  6330                           tblptru	equ	0xFF8
  6331                           tblptrh	equ	0xFF7
  6332                           tblptrl	equ	0xFF6
  6333                           tablat	equ	0xFF5
  6334                           prodh	equ	0xFF4
  6335                           prodl	equ	0xFF3
  6336                           intcon	equ	0xFF2
  6337                           intcon2	equ	0xFF1
  6338                           postinc0	equ	0xFEE
  6339                           wreg	equ	0xFE8
  6340                           indf2	equ	0xFDF
  6341                           postinc2	equ	0xFDE
  6342                           postdec2	equ	0xFDD
  6343                           plusw2	equ	0xFDB
  6344                           fsr2h	equ	0xFDA
  6345                           fsr2l	equ	0xFD9
  6346                           status	equ	0xFD8
  6347                           
  6348 ;; *************** function _Update *****************
  6349 ;; Defined at:
  6350 ;;		line 225 in file "PDU.c"
  6351 ;; Parameters:    Size  Location     Type
  6352 ;;		None
  6353 ;; Auto vars:     Size  Location     Type
  6354 ;;		None
  6355 ;; Return value:  Size  Location     Type
  6356 ;;                  1    wreg      void 
  6357 ;; Registers used:
  6358 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6359 ;; Tracked objects:
  6360 ;;		On entry : 0/0
  6361 ;;		On exit  : 0/0
  6362 ;;		Unchanged: 0/0
  6363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6364 ;;      Params:         0       0       0       0       0       0       0
  6365 ;;      Locals:         0       0       0       0       0       0       0
  6366 ;;      Temps:          0       0       0       0       0       0       0
  6367 ;;      Totals:         0       0       0       0       0       0       0
  6368 ;;Total ram usage:        0 bytes
  6369 ;; Hardware stack levels used:    1
  6370 ;; Hardware stack levels required when called:    8
  6371 ;; This function calls:
  6372 ;;		_writeRegisters
  6373 ;; This function is called by:
  6374 ;;		_processPowerRequest
  6375 ;;		_PDUStartup
  6376 ;; This function uses a non-reentrant model
  6377 ;;
  6378                           
  6379                           	psect	text37
  6380  0025FA                     __ptext37:
  6381                           	opt stack 0
  6382  0025FA                     _Update:
  6383                           	opt stack 20
  6384                           
  6385                           ;PDU.c: 226: writeRegisters();
  6386                           
  6387                           ;incstack = 0
  6388  0025FA  ECDD  F00C         	call	_writeRegisters	;wreg free
  6389  0025FE  0012               	return		;funcret
  6390  002600                     __end_of_Update:
  6391                           	opt stack 0
  6392                           tosu	equ	0xFFF
  6393                           tosh	equ	0xFFE
  6394                           tosl	equ	0xFFD
  6395                           pclath	equ	0xFFA
  6396                           tblptru	equ	0xFF8
  6397                           tblptrh	equ	0xFF7
  6398                           tblptrl	equ	0xFF6
  6399                           tablat	equ	0xFF5
  6400                           prodh	equ	0xFF4
  6401                           prodl	equ	0xFF3
  6402                           intcon	equ	0xFF2
  6403                           intcon2	equ	0xFF1
  6404                           postinc0	equ	0xFEE
  6405                           wreg	equ	0xFE8
  6406                           indf2	equ	0xFDF
  6407                           postinc2	equ	0xFDE
  6408                           postdec2	equ	0xFDD
  6409                           plusw2	equ	0xFDB
  6410                           fsr2h	equ	0xFDA
  6411                           fsr2l	equ	0xFD9
  6412                           status	equ	0xFD8
  6413                           
  6414 ;; *************** function _StartUp595 *****************
  6415 ;; Defined at:
  6416 ;;		line 10 in file "Shift595.c"
  6417 ;; Parameters:    Size  Location     Type
  6418 ;;		None
  6419 ;; Auto vars:     Size  Location     Type
  6420 ;;		None
  6421 ;; Return value:  Size  Location     Type
  6422 ;;                  1    wreg      void 
  6423 ;; Registers used:
  6424 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6425 ;; Tracked objects:
  6426 ;;		On entry : 0/0
  6427 ;;		On exit  : 0/0
  6428 ;;		Unchanged: 0/0
  6429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6430 ;;      Params:         0       0       0       0       0       0       0
  6431 ;;      Locals:         0       0       0       0       0       0       0
  6432 ;;      Temps:          0       0       0       0       0       0       0
  6433 ;;      Totals:         0       0       0       0       0       0       0
  6434 ;;Total ram usage:        0 bytes
  6435 ;; Hardware stack levels used:    1
  6436 ;; Hardware stack levels required when called:    9
  6437 ;; This function calls:
  6438 ;;		_Clear595
  6439 ;;		_Delay
  6440 ;; This function is called by:
  6441 ;;		_PDUStartup
  6442 ;; This function uses a non-reentrant model
  6443 ;;
  6444                           
  6445                           	psect	text38
  6446  001F80                     __ptext38:
  6447                           	opt stack 0
  6448  001F80                     _StartUp595:
  6449                           	opt stack 20
  6450                           
  6451                           ;incstack = 0
  6452                           ;Shift595.c: 12: do { LATD5 = 1; } while(0);
  6453  001F80  8A8C               	bsf	3980,5,c	;volatile
  6454                           
  6455                           ;Shift595.c: 13: do { LATB0 = 1; } while(0);
  6456  001F82  808A               	bsf	3978,0,c	;volatile
  6457                           
  6458                           ;Shift595.c: 15: Delay(2);
  6459  001F84  0E02               	movlw	2
  6460  001F86  6E1D               	movwf	Delay@wait,c
  6461  001F88  0E00               	movlw	0
  6462  001F8A  6E1E               	movwf	Delay@wait+1,c
  6463  001F8C  0E00               	movlw	0
  6464  001F8E  6E1F               	movwf	Delay@wait+2,c
  6465  001F90  0E00               	movlw	0
  6466  001F92  6E20               	movwf	Delay@wait+3,c
  6467  001F94  EC49  F010         	call	_Delay	;wreg free
  6468                           
  6469                           ;Shift595.c: 16: do { LATD5 = 0; } while(0);
  6470  001F98  9A8C               	bcf	3980,5,c	;volatile
  6471                           
  6472                           ;Shift595.c: 17: Delay(2);
  6473  001F9A  0E02               	movlw	2
  6474  001F9C  6E1D               	movwf	Delay@wait,c
  6475  001F9E  0E00               	movlw	0
  6476  001FA0  6E1E               	movwf	Delay@wait+1,c
  6477  001FA2  0E00               	movlw	0
  6478  001FA4  6E1F               	movwf	Delay@wait+2,c
  6479  001FA6  0E00               	movlw	0
  6480  001FA8  6E20               	movwf	Delay@wait+3,c
  6481  001FAA  EC49  F010         	call	_Delay	;wreg free
  6482                           
  6483                           ;Shift595.c: 18: do { LATB0 = 0; } while(0);
  6484  001FAE  908A               	bcf	3978,0,c	;volatile
  6485                           
  6486                           ;Shift595.c: 19: Delay(2);
  6487  001FB0  0E02               	movlw	2
  6488  001FB2  6E1D               	movwf	Delay@wait,c
  6489  001FB4  0E00               	movlw	0
  6490  001FB6  6E1E               	movwf	Delay@wait+1,c
  6491  001FB8  0E00               	movlw	0
  6492  001FBA  6E1F               	movwf	Delay@wait+2,c
  6493  001FBC  0E00               	movlw	0
  6494  001FBE  6E20               	movwf	Delay@wait+3,c
  6495  001FC0  EC49  F010         	call	_Delay	;wreg free
  6496                           
  6497                           ;Shift595.c: 20: do { LATD5 = 1; } while(0);
  6498  001FC4  8A8C               	bsf	3980,5,c	;volatile
  6499                           
  6500                           ;Shift595.c: 21: Delay(2);
  6501  001FC6  0E02               	movlw	2
  6502  001FC8  6E1D               	movwf	Delay@wait,c
  6503  001FCA  0E00               	movlw	0
  6504  001FCC  6E1E               	movwf	Delay@wait+1,c
  6505  001FCE  0E00               	movlw	0
  6506  001FD0  6E1F               	movwf	Delay@wait+2,c
  6507  001FD2  0E00               	movlw	0
  6508  001FD4  6E20               	movwf	Delay@wait+3,c
  6509  001FD6  EC49  F010         	call	_Delay	;wreg free
  6510                           
  6511                           ;Shift595.c: 22: do { LATB0 = 1; } while(0);
  6512  001FDA  808A               	bsf	3978,0,c	;volatile
  6513                           
  6514                           ;Shift595.c: 24: Clear595();
  6515  001FDC  EC57  F011         	call	_Clear595	;wreg free
  6516  001FE0  0012               	return		;funcret
  6517  001FE2                     __end_of_StartUp595:
  6518                           	opt stack 0
  6519                           tosu	equ	0xFFF
  6520                           tosh	equ	0xFFE
  6521                           tosl	equ	0xFFD
  6522                           pclath	equ	0xFFA
  6523                           tblptru	equ	0xFF8
  6524                           tblptrh	equ	0xFF7
  6525                           tblptrl	equ	0xFF6
  6526                           tablat	equ	0xFF5
  6527                           prodh	equ	0xFF4
  6528                           prodl	equ	0xFF3
  6529                           intcon	equ	0xFF2
  6530                           intcon2	equ	0xFF1
  6531                           postinc0	equ	0xFEE
  6532                           wreg	equ	0xFE8
  6533                           indf2	equ	0xFDF
  6534                           postinc2	equ	0xFDE
  6535                           postdec2	equ	0xFDD
  6536                           plusw2	equ	0xFDB
  6537                           fsr2h	equ	0xFDA
  6538                           fsr2l	equ	0xFD9
  6539                           status	equ	0xFD8
  6540                           
  6541 ;; *************** function _Clear595 *****************
  6542 ;; Defined at:
  6543 ;;		line 39 in file "Shift595.c"
  6544 ;; Parameters:    Size  Location     Type
  6545 ;;		None
  6546 ;; Auto vars:     Size  Location     Type
  6547 ;;  i               2   33[COMRAM] int 
  6548 ;; Return value:  Size  Location     Type
  6549 ;;                  1    wreg      void 
  6550 ;; Registers used:
  6551 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6552 ;; Tracked objects:
  6553 ;;		On entry : 0/0
  6554 ;;		On exit  : 0/0
  6555 ;;		Unchanged: 0/0
  6556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6557 ;;      Params:         0       0       0       0       0       0       0
  6558 ;;      Locals:         2       0       0       0       0       0       0
  6559 ;;      Temps:          0       0       0       0       0       0       0
  6560 ;;      Totals:         2       0       0       0       0       0       0
  6561 ;;Total ram usage:        2 bytes
  6562 ;; Hardware stack levels used:    1
  6563 ;; Hardware stack levels required when called:    8
  6564 ;; This function calls:
  6565 ;;		_writeRegisters
  6566 ;; This function is called by:
  6567 ;;		_StartUp595
  6568 ;; This function uses a non-reentrant model
  6569 ;;
  6570                           
  6571                           	psect	text39
  6572  0022AE                     __ptext39:
  6573                           	opt stack 0
  6574  0022AE                     _Clear595:
  6575                           	opt stack 20
  6576                           
  6577                           ;Shift595.c: 40: for (int i = 3 * 8 - 1; i >= 0; i--) {
  6578                           
  6579                           ;incstack = 0
  6580  0022AE  0E00               	movlw	0
  6581  0022B0  6E23               	movwf	Clear595@i+1,c
  6582  0022B2  0E17               	movlw	23
  6583  0022B4  6E22               	movwf	Clear595@i,c
  6584  0022B6                     l4144:
  6585  0022B6  BE23               	btfsc	Clear595@i+1,7,c
  6586  0022B8  D011               	goto	l4154
  6587                           
  6588                           ;Shift595.c: 41: registers[i] = 0;
  6589  0022BA  90D8               	bcf	status,0,c
  6590  0022BC  3422               	rlcf	Clear595@i,w,c
  6591  0022BE  6ED9               	movwf	fsr2l,c
  6592  0022C0  3423               	rlcf	Clear595@i+1,w,c
  6593  0022C2  6EDA               	movwf	fsr2h,c
  6594  0022C4  0E00               	movlw	low _registers
  6595  0022C6  26D9               	addwf	fsr2l,f,c
  6596  0022C8  0E01               	movlw	high _registers
  6597  0022CA  22DA               	addwfc	fsr2h,f,c
  6598  0022CC  0E00               	movlw	0
  6599  0022CE  6EDE               	movwf	postinc2,c
  6600  0022D0  0E00               	movlw	0
  6601  0022D2  6EDD               	movwf	postdec2,c
  6602  0022D4  0622               	decf	Clear595@i,f,c
  6603  0022D6  A0D8               	btfss	status,0,c
  6604  0022D8  0623               	decf	Clear595@i+1,f,c
  6605  0022DA  D7ED               	goto	l4144
  6606  0022DC                     l4154:
  6607                           
  6608                           ;Shift595.c: 42: }
  6609                           ;Shift595.c: 44: writeRegisters();
  6610  0022DC  ECDD  F00C         	call	_writeRegisters	;wreg free
  6611  0022E0  0012               	return		;funcret
  6612  0022E2                     __end_of_Clear595:
  6613                           	opt stack 0
  6614                           tosu	equ	0xFFF
  6615                           tosh	equ	0xFFE
  6616                           tosl	equ	0xFFD
  6617                           pclath	equ	0xFFA
  6618                           tblptru	equ	0xFF8
  6619                           tblptrh	equ	0xFF7
  6620                           tblptrl	equ	0xFF6
  6621                           tablat	equ	0xFF5
  6622                           prodh	equ	0xFF4
  6623                           prodl	equ	0xFF3
  6624                           intcon	equ	0xFF2
  6625                           intcon2	equ	0xFF1
  6626                           postinc0	equ	0xFEE
  6627                           wreg	equ	0xFE8
  6628                           indf2	equ	0xFDF
  6629                           postinc2	equ	0xFDE
  6630                           postdec2	equ	0xFDD
  6631                           plusw2	equ	0xFDB
  6632                           fsr2h	equ	0xFDA
  6633                           fsr2l	equ	0xFD9
  6634                           status	equ	0xFD8
  6635                           
  6636 ;; *************** function _writeRegisters *****************
  6637 ;; Defined at:
  6638 ;;		line 50 in file "Shift595.c"
  6639 ;; Parameters:    Size  Location     Type
  6640 ;;		None
  6641 ;; Auto vars:     Size  Location     Type
  6642 ;;  i               2    6[BANK0 ] int 
  6643 ;;  val             2    4[BANK0 ] int 
  6644 ;; Return value:  Size  Location     Type
  6645 ;;                  1    wreg      void 
  6646 ;; Registers used:
  6647 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6648 ;; Tracked objects:
  6649 ;;		On entry : 0/0
  6650 ;;		On exit  : 0/0
  6651 ;;		Unchanged: 0/0
  6652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6653 ;;      Params:         0       0       0       0       0       0       0
  6654 ;;      Locals:         0       4       0       0       0       0       0
  6655 ;;      Temps:          0       0       0       0       0       0       0
  6656 ;;      Totals:         0       4       0       0       0       0       0
  6657 ;;Total ram usage:        4 bytes
  6658 ;; Hardware stack levels used:    1
  6659 ;; Hardware stack levels required when called:    7
  6660 ;; This function calls:
  6661 ;;		_Delay
  6662 ;; This function is called by:
  6663 ;;		_Update
  6664 ;;		_Clear595
  6665 ;; This function uses a non-reentrant model
  6666 ;;
  6667                           
  6668                           	psect	text40
  6669  0019BA                     __ptext40:
  6670                           	opt stack 0
  6671  0019BA                     _writeRegisters:
  6672                           	opt stack 20
  6673                           
  6674                           ;Shift595.c: 51: int val = 0;
  6675                           
  6676                           ;incstack = 0
  6677  0019BA  0E00               	movlw	0
  6678  0019BC  0100               	movlb	0	; () banked
  6679  0019BE  6FE0               	movwf	(writeRegisters@val+1)& (0+255),b
  6680  0019C0  0E00               	movlw	0
  6681  0019C2  6FDF               	movwf	writeRegisters@val& (0+255),b
  6682                           
  6683                           ;Shift595.c: 52: for (int i = 3 * 8 - 1; i >= 0; i--) {
  6684  0019C4  0E00               	movlw	0
  6685  0019C6  0100               	movlb	0	; () banked
  6686  0019C8  6FE2               	movwf	(writeRegisters@i+1)& (0+255),b
  6687  0019CA  0E17               	movlw	23
  6688  0019CC  6FE1               	movwf	writeRegisters@i& (0+255),b
  6689  0019CE                     l4026:
  6690                           
  6691                           ; BSR set to: 0
  6692  0019CE  0100               	movlb	0	; () banked
  6693  0019D0  BFE2               	btfsc	(writeRegisters@i+1)& (0+255),7,b
  6694  0019D2  D024               	goto	l745
  6695                           
  6696                           ; BSR set to: 0
  6697                           
  6698                           ; BSR set to: 0
  6699                           ;Shift595.c: 53: do { LATD7 = 0; } while(0);
  6700                           
  6701                           ; BSR set to: 0
  6702  0019D4  9E8C               	bcf	3980,7,c	;volatile
  6703                           
  6704                           ; BSR set to: 0
  6705                           ;Shift595.c: 55: val = registers[i];
  6706                           
  6707                           ; BSR set to: 0
  6708  0019D6  90D8               	bcf	status,0,c
  6709  0019D8  0100               	movlb	0	; () banked
  6710  0019DA  35E1               	rlcf	writeRegisters@i& (0+255),w,b
  6711  0019DC  6ED9               	movwf	fsr2l,c
  6712  0019DE  0100               	movlb	0	; () banked
  6713  0019E0  35E2               	rlcf	(writeRegisters@i+1)& (0+255),w,b
  6714  0019E2  6EDA               	movwf	fsr2h,c
  6715  0019E4  0E00               	movlw	low _registers
  6716  0019E6  26D9               	addwf	fsr2l,f,c
  6717  0019E8  0E01               	movlw	high _registers
  6718  0019EA  22DA               	addwfc	fsr2h,f,c
  6719  0019EC  CFDE F0DF          	movff	postinc2,writeRegisters@val
  6720  0019F0  CFDD F0E0          	movff	postdec2,writeRegisters@val+1
  6721                           
  6722                           ; BSR set to: 0
  6723                           ;Shift595.c: 56: if (val == 1) {
  6724  0019F4  0100               	movlb	0	; () banked
  6725  0019F6  05DF               	decf	writeRegisters@val& (0+255),w,b
  6726  0019F8  0100               	movlb	0	; () banked
  6727  0019FA  11E0               	iorwf	(writeRegisters@val+1)& (0+255),w,b
  6728  0019FC  A4D8               	btfss	status,2,c
  6729  0019FE  D002               	goto	l4034
  6730                           
  6731                           ; BSR set to: 0
  6732                           
  6733                           ;Shift595.c: 57: do { LATD4 = 1; } while(0);
  6734  001A00  888C               	bsf	3980,4,c	;volatile
  6735                           
  6736                           ; BSR set to: 0
  6737                           ;Shift595.c: 58: } else if (val == 0) {
  6738  001A02  D006               	goto	l743
  6739  001A04                     l4034:
  6740                           
  6741                           ; BSR set to: 0
  6742  001A04  0100               	movlb	0	; () banked
  6743  001A06  51DF               	movf	writeRegisters@val& (0+255),w,b
  6744  001A08  0100               	movlb	0	; () banked
  6745  001A0A  11E0               	iorwf	(writeRegisters@val+1)& (0+255),w,b
  6746  001A0C  B4D8               	btfsc	status,2,c
  6747                           
  6748                           ; BSR set to: 0
  6749                           
  6750                           ;Shift595.c: 59: do { LATD4 = 0; } while(0);
  6751  001A0E  988C               	bcf	3980,4,c	;volatile
  6752  001A10                     l743:
  6753                           
  6754                           ; BSR set to: 0
  6755  001A10  8E8C               	bsf	3980,7,c	;volatile
  6756                           
  6757                           ; BSR set to: 0
  6758                           
  6759                           ; BSR set to: 0
  6760  001A12  0100               	movlb	0	; () banked
  6761  001A14  07E1               	decf	writeRegisters@i& (0+255),f,b
  6762  001A16  A0D8               	btfss	status,0,c
  6763  001A18  07E2               	decf	(writeRegisters@i+1)& (0+255),f,b
  6764  001A1A  D7D9               	goto	l4026
  6765  001A1C                     l745:
  6766                           
  6767                           ; BSR set to: 0
  6768  001A1C  9E8C               	bcf	3980,7,c	;volatile
  6769                           
  6770                           ; BSR set to: 0
  6771                           ;Shift595.c: 67: Delay(1);
  6772                           
  6773                           ; BSR set to: 0
  6774  001A1E  0E01               	movlw	1
  6775  001A20  6E1D               	movwf	Delay@wait,c
  6776  001A22  0E00               	movlw	0
  6777  001A24  6E1E               	movwf	Delay@wait+1,c
  6778  001A26  0E00               	movlw	0
  6779  001A28  6E1F               	movwf	Delay@wait+2,c
  6780  001A2A  0E00               	movlw	0
  6781  001A2C  6E20               	movwf	Delay@wait+3,c
  6782  001A2E  EC49  F010         	call	_Delay	;wreg free
  6783                           
  6784                           ;Shift595.c: 68: do { LATD6 = 1; } while(0);
  6785  001A32  8C8C               	bsf	3980,6,c	;volatile
  6786                           
  6787                           ;Shift595.c: 69: Delay(1);
  6788  001A34  0E01               	movlw	1
  6789  001A36  6E1D               	movwf	Delay@wait,c
  6790  001A38  0E00               	movlw	0
  6791  001A3A  6E1E               	movwf	Delay@wait+1,c
  6792  001A3C  0E00               	movlw	0
  6793  001A3E  6E1F               	movwf	Delay@wait+2,c
  6794  001A40  0E00               	movlw	0
  6795  001A42  6E20               	movwf	Delay@wait+3,c
  6796  001A44  EC49  F010         	call	_Delay	;wreg free
  6797                           
  6798                           ;Shift595.c: 70: do { LATD6 = 0; } while(0);
  6799  001A48  9C8C               	bcf	3980,6,c	;volatile
  6800  001A4A  0012               	return	
  6801  001A4C                     __end_of_writeRegisters:
  6802                           	opt stack 0
  6803                           tosu	equ	0xFFF
  6804                           tosh	equ	0xFFE
  6805                           tosl	equ	0xFFD
  6806                           pclath	equ	0xFFA
  6807                           tblptru	equ	0xFF8
  6808                           tblptrh	equ	0xFF7
  6809                           tblptrl	equ	0xFF6
  6810                           tablat	equ	0xFF5
  6811                           prodh	equ	0xFF4
  6812                           prodl	equ	0xFF3
  6813                           intcon	equ	0xFF2
  6814                           intcon2	equ	0xFF1
  6815                           postinc0	equ	0xFEE
  6816                           wreg	equ	0xFE8
  6817                           indf2	equ	0xFDF
  6818                           postinc2	equ	0xFDE
  6819                           postdec2	equ	0xFDD
  6820                           plusw2	equ	0xFDB
  6821                           fsr2h	equ	0xFDA
  6822                           fsr2l	equ	0xFD9
  6823                           status	equ	0xFD8
  6824                           
  6825 ;; *************** function _EnableSlavePower *****************
  6826 ;; Defined at:
  6827 ;;		line 37 in file "PDU.c"
  6828 ;; Parameters:    Size  Location     Type
  6829 ;;  slave           1    wreg     enum E6
  6830 ;;  onof            2   34[COMRAM] int 
  6831 ;; Auto vars:     Size  Location     Type
  6832 ;;  slave           1    4[BANK0 ] enum E6
  6833 ;; Return value:  Size  Location     Type
  6834 ;;                  1    wreg      void 
  6835 ;; Registers used:
  6836 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6837 ;; Tracked objects:
  6838 ;;		On entry : 0/0
  6839 ;;		On exit  : 0/0
  6840 ;;		Unchanged: 0/0
  6841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6842 ;;      Params:         2       0       0       0       0       0       0
  6843 ;;      Locals:         0       1       0       0       0       0       0
  6844 ;;      Temps:          0       0       0       0       0       0       0
  6845 ;;      Totals:         2       1       0       0       0       0       0
  6846 ;;Total ram usage:        3 bytes
  6847 ;; Hardware stack levels used:    1
  6848 ;; Hardware stack levels required when called:    7
  6849 ;; This function calls:
  6850 ;;		_SetPin595
  6851 ;; This function is called by:
  6852 ;;		_processPowerRequest
  6853 ;;		_PDUStartup
  6854 ;; This function uses a non-reentrant model
  6855 ;;
  6856                           
  6857                           	psect	text41
  6858  001500                     __ptext41:
  6859                           	opt stack 0
  6860  001500                     _EnableSlavePower:
  6861                           	opt stack 21
  6862                           
  6863                           ;incstack = 0
  6864                           ;EnableSlavePower@slave stored from wreg
  6865  001500  0100               	movlb	0	; () banked
  6866  001502  6FDF               	movwf	EnableSlavePower@slave& (0+255),b
  6867                           
  6868                           ;PDU.c: 38: switch (slave) {
  6869  001504  D05C               	goto	l4098
  6870  001506                     l4082:
  6871                           
  6872                           ;PDU.c: 40: SetPin595(2, 6, onof);
  6873  001506  0E00               	movlw	0
  6874  001508  6E1E               	movwf	SetPin595@Reg+1,c
  6875  00150A  0E02               	movlw	2
  6876  00150C  6E1D               	movwf	SetPin595@Reg,c
  6877  00150E  0E00               	movlw	0
  6878  001510  6E20               	movwf	SetPin595@pin+1,c
  6879  001512  0E06               	movlw	6
  6880  001514  6E1F               	movwf	SetPin595@pin,c
  6881  001516  C023  F021         	movff	EnableSlavePower@onof,SetPin595@value
  6882  00151A  C024  F022         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  6883  00151E  EC5A  F00F         	call	_SetPin595	;wreg free
  6884                           
  6885                           ;PDU.c: 41: break;
  6886  001522  0012               	return	
  6887  001524                     l4084:
  6888                           
  6889                           ;PDU.c: 43: SetPin595(1, 1, onof);
  6890  001524  0E00               	movlw	0
  6891  001526  6E1E               	movwf	SetPin595@Reg+1,c
  6892  001528  0E01               	movlw	1
  6893  00152A  6E1D               	movwf	SetPin595@Reg,c
  6894  00152C  0E00               	movlw	0
  6895  00152E  6E20               	movwf	SetPin595@pin+1,c
  6896  001530  0E01               	movlw	1
  6897  001532  6E1F               	movwf	SetPin595@pin,c
  6898  001534  C023  F021         	movff	EnableSlavePower@onof,SetPin595@value
  6899  001538  C024  F022         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  6900  00153C  EC5A  F00F         	call	_SetPin595	;wreg free
  6901                           
  6902                           ;PDU.c: 44: break;
  6903  001540  0012               	return	
  6904  001542                     l4086:
  6905                           
  6906                           ;PDU.c: 46: SetPin595(1, 6, onof);
  6907  001542  0E00               	movlw	0
  6908  001544  6E1E               	movwf	SetPin595@Reg+1,c
  6909  001546  0E01               	movlw	1
  6910  001548  6E1D               	movwf	SetPin595@Reg,c
  6911  00154A  0E00               	movlw	0
  6912  00154C  6E20               	movwf	SetPin595@pin+1,c
  6913  00154E  0E06               	movlw	6
  6914  001550  6E1F               	movwf	SetPin595@pin,c
  6915  001552  C023  F021         	movff	EnableSlavePower@onof,SetPin595@value
  6916  001556  C024  F022         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  6917  00155A  EC5A  F00F         	call	_SetPin595	;wreg free
  6918                           
  6919                           ;PDU.c: 47: MCSOn = onof;
  6920  00155E  C023  F038         	movff	EnableSlavePower@onof,_MCSOn
  6921                           
  6922                           ;PDU.c: 48: break;
  6923  001562  0012               	return	
  6924  001564                     l4090:
  6925                           
  6926                           ;PDU.c: 50: SetPin595(2, 1, onof);
  6927  001564  0E00               	movlw	0
  6928  001566  6E1E               	movwf	SetPin595@Reg+1,c
  6929  001568  0E02               	movlw	2
  6930  00156A  6E1D               	movwf	SetPin595@Reg,c
  6931  00156C  0E00               	movlw	0
  6932  00156E  6E20               	movwf	SetPin595@pin+1,c
  6933  001570  0E01               	movlw	1
  6934  001572  6E1F               	movwf	SetPin595@pin,c
  6935  001574  C023  F021         	movff	EnableSlavePower@onof,SetPin595@value
  6936  001578  C024  F022         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  6937  00157C  EC5A  F00F         	call	_SetPin595	;wreg free
  6938                           
  6939                           ;PDU.c: 51: break;
  6940  001580  0012               	return	
  6941  001582                     l4092:
  6942                           
  6943                           ;PDU.c: 53: SetPin595(3, 6, onof);
  6944  001582  0E00               	movlw	0
  6945  001584  6E1E               	movwf	SetPin595@Reg+1,c
  6946  001586  0E03               	movlw	3
  6947  001588  6E1D               	movwf	SetPin595@Reg,c
  6948  00158A  0E00               	movlw	0
  6949  00158C  6E20               	movwf	SetPin595@pin+1,c
  6950  00158E  0E06               	movlw	6
  6951  001590  6E1F               	movwf	SetPin595@pin,c
  6952  001592  C023  F021         	movff	EnableSlavePower@onof,SetPin595@value
  6953  001596  C024  F022         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  6954  00159A  EC5A  F00F         	call	_SetPin595	;wreg free
  6955                           
  6956                           ;PDU.c: 54: break;
  6957  00159E  0012               	return	
  6958  0015A0                     l4094:
  6959                           
  6960                           ;PDU.c: 56: SetPin595(3, 1, onof);
  6961  0015A0  0E00               	movlw	0
  6962  0015A2  6E1E               	movwf	SetPin595@Reg+1,c
  6963  0015A4  0E03               	movlw	3
  6964  0015A6  6E1D               	movwf	SetPin595@Reg,c
  6965  0015A8  0E00               	movlw	0
  6966  0015AA  6E20               	movwf	SetPin595@pin+1,c
  6967  0015AC  0E01               	movlw	1
  6968  0015AE  6E1F               	movwf	SetPin595@pin,c
  6969  0015B0  C023  F021         	movff	EnableSlavePower@onof,SetPin595@value
  6970  0015B4  C024  F022         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  6971  0015B8  EC5A  F00F         	call	_SetPin595	;wreg free
  6972                           
  6973                           ;PDU.c: 58: }
  6974                           
  6975                           ;PDU.c: 57: break;
  6976  0015BC  0012               	return	
  6977  0015BE                     l4098:
  6978  0015BE  0100               	movlb	0	; () banked
  6979  0015C0  51DF               	movf	EnableSlavePower@slave& (0+255),w,b
  6980                           
  6981                           ; Switch size 1, requested type "space"
  6982                           ; Number of cases is 6, Range of values is 1 to 6
  6983                           ; switch strategies available:
  6984                           ; Name         Instructions Cycles
  6985                           ; simple_byte           19    10 (average)
  6986                           ;	Chosen strategy is simple_byte
  6987  0015C2  0A01               	xorlw	1	; case 1
  6988  0015C4  B4D8               	btfsc	status,2,c
  6989  0015C6  D7CE               	goto	l4090
  6990  0015C8  0A03               	xorlw	3	; case 2
  6991  0015CA  B4D8               	btfsc	status,2,c
  6992  0015CC  D7BA               	goto	l4086
  6993  0015CE  0A01               	xorlw	1	; case 3
  6994  0015D0  B4D8               	btfsc	status,2,c
  6995  0015D2  D799               	goto	l4082
  6996  0015D4  0A07               	xorlw	7	; case 4
  6997  0015D6  B4D8               	btfsc	status,2,c
  6998  0015D8  D7A5               	goto	l4084
  6999  0015DA  0A01               	xorlw	1	; case 5
  7000  0015DC  B4D8               	btfsc	status,2,c
  7001  0015DE  D7D1               	goto	l4092
  7002  0015E0  0A03               	xorlw	3	; case 6
  7003  0015E2  A4D8               	btfss	status,2,c
  7004  0015E4  0012               	return	
  7005  0015E6  D7DC               	goto	l4094
  7006  0015E8                     __end_of_EnableSlavePower:
  7007                           	opt stack 0
  7008                           tosu	equ	0xFFF
  7009                           tosh	equ	0xFFE
  7010                           tosl	equ	0xFFD
  7011                           pclath	equ	0xFFA
  7012                           tblptru	equ	0xFF8
  7013                           tblptrh	equ	0xFF7
  7014                           tblptrl	equ	0xFF6
  7015                           tablat	equ	0xFF5
  7016                           prodh	equ	0xFF4
  7017                           prodl	equ	0xFF3
  7018                           intcon	equ	0xFF2
  7019                           intcon2	equ	0xFF1
  7020                           postinc0	equ	0xFEE
  7021                           wreg	equ	0xFE8
  7022                           indf2	equ	0xFDF
  7023                           postinc2	equ	0xFDE
  7024                           postdec2	equ	0xFDD
  7025                           plusw2	equ	0xFDB
  7026                           fsr2h	equ	0xFDA
  7027                           fsr2l	equ	0xFD9
  7028                           status	equ	0xFD8
  7029                           
  7030 ;; *************** function _SetPin595 *****************
  7031 ;; Defined at:
  7032 ;;		line 32 in file "Shift595.c"
  7033 ;; Parameters:    Size  Location     Type
  7034 ;;  Reg             2   28[COMRAM] int 
  7035 ;;  pin             2   30[COMRAM] int 
  7036 ;;  value           2   32[COMRAM] int 
  7037 ;; Auto vars:     Size  Location     Type
  7038 ;;		None
  7039 ;; Return value:  Size  Location     Type
  7040 ;;                  1    wreg      void 
  7041 ;; Registers used:
  7042 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7043 ;; Tracked objects:
  7044 ;;		On entry : 0/0
  7045 ;;		On exit  : 0/0
  7046 ;;		Unchanged: 0/0
  7047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7048 ;;      Params:         6       0       0       0       0       0       0
  7049 ;;      Locals:         0       0       0       0       0       0       0
  7050 ;;      Temps:          0       4       0       0       0       0       0
  7051 ;;      Totals:         6       4       0       0       0       0       0
  7052 ;;Total ram usage:       10 bytes
  7053 ;; Hardware stack levels used:    1
  7054 ;; Hardware stack levels required when called:    6
  7055 ;; This function calls:
  7056 ;;		Nothing
  7057 ;; This function is called by:
  7058 ;;		_EnableSlavePower
  7059 ;; This function uses a non-reentrant model
  7060 ;;
  7061                           
  7062                           	psect	text42
  7063  001EB4                     __ptext42:
  7064                           	opt stack 0
  7065  001EB4                     _SetPin595:
  7066                           	opt stack 21
  7067                           
  7068                           ;Shift595.c: 33: registers[((Reg - 1)*8) + pin] = value;
  7069                           
  7070                           ;incstack = 0
  7071  001EB4  0EF0               	movlw	240
  7072  001EB6  0100               	movlb	0	; () banked
  7073  001EB8  6FDB               	movwf	??_SetPin595& (0+255),b
  7074  001EBA  0EFF               	movlw	255
  7075  001EBC  0100               	movlb	0	; () banked
  7076  001EBE  6FDC               	movwf	(??_SetPin595+1)& (0+255),b
  7077  001EC0  C01D  F0DD         	movff	SetPin595@Reg,??_SetPin595+2
  7078  001EC4  C01E  F0DE         	movff	SetPin595@Reg+1,??_SetPin595+3
  7079  001EC8  0100               	movlb	0	; () banked
  7080  001ECA  90D8               	bcf	status,0,c
  7081  001ECC  37DD               	rlcf	(??_SetPin595+2)& (0+255),f,b
  7082  001ECE  37DE               	rlcf	(??_SetPin595+3)& (0+255),f,b
  7083  001ED0  0100               	movlb	0	; () banked
  7084  001ED2  90D8               	bcf	status,0,c
  7085  001ED4  37DD               	rlcf	(??_SetPin595+2)& (0+255),f,b
  7086  001ED6  37DE               	rlcf	(??_SetPin595+3)& (0+255),f,b
  7087  001ED8  0100               	movlb	0	; () banked
  7088  001EDA  90D8               	bcf	status,0,c
  7089  001EDC  37DD               	rlcf	(??_SetPin595+2)& (0+255),f,b
  7090  001EDE  37DE               	rlcf	(??_SetPin595+3)& (0+255),f,b
  7091  001EE0  501F               	movf	SetPin595@pin,w,c
  7092  001EE2  0100               	movlb	0	; () banked
  7093  001EE4  27DD               	addwf	(??_SetPin595+2)& (0+255),f,b
  7094  001EE6  5020               	movf	SetPin595@pin+1,w,c
  7095  001EE8  0100               	movlb	0	; () banked
  7096  001EEA  23DE               	addwfc	(??_SetPin595+3)& (0+255),f,b
  7097  001EEC  90D8               	bcf	status,0,c
  7098  001EEE  0100               	movlb	0	; () banked
  7099  001EF0  37DD               	rlcf	(??_SetPin595+2)& (0+255),f,b
  7100  001EF2  37DE               	rlcf	(??_SetPin595+3)& (0+255),f,b
  7101  001EF4  0100               	movlb	0	; () banked
  7102  001EF6  51DB               	movf	??_SetPin595& (0+255),w,b
  7103  001EF8  0100               	movlb	0	; () banked
  7104  001EFA  27DD               	addwf	(??_SetPin595+2)& (0+255),f,b
  7105  001EFC  0100               	movlb	0	; () banked
  7106  001EFE  51DC               	movf	(??_SetPin595+1)& (0+255),w,b
  7107  001F00  0100               	movlb	0	; () banked
  7108  001F02  23DE               	addwfc	(??_SetPin595+3)& (0+255),f,b
  7109  001F04  0E00               	movlw	low _registers
  7110  001F06  0100               	movlb	0	; () banked
  7111  001F08  25DD               	addwf	(??_SetPin595+2)& (0+255),w,b
  7112  001F0A  6ED9               	movwf	fsr2l,c
  7113  001F0C  0E01               	movlw	high _registers
  7114  001F0E  0100               	movlb	0	; () banked
  7115  001F10  21DE               	addwfc	(??_SetPin595+3)& (0+255),w,b
  7116  001F12  6EDA               	movwf	fsr2h,c
  7117  001F14  C021  FFDE         	movff	SetPin595@value,postinc2
  7118  001F18  C022  FFDD         	movff	SetPin595@value+1,postdec2
  7119                           
  7120                           ; BSR set to: 0
  7121  001F1C  0012               	return		;funcret
  7122  001F1E                     __end_of_SetPin595:
  7123                           	opt stack 0
  7124                           tosu	equ	0xFFF
  7125                           tosh	equ	0xFFE
  7126                           tosl	equ	0xFFD
  7127                           pclath	equ	0xFFA
  7128                           tblptru	equ	0xFF8
  7129                           tblptrh	equ	0xFF7
  7130                           tblptrl	equ	0xFF6
  7131                           tablat	equ	0xFF5
  7132                           prodh	equ	0xFF4
  7133                           prodl	equ	0xFF3
  7134                           intcon	equ	0xFF2
  7135                           intcon2	equ	0xFF1
  7136                           postinc0	equ	0xFEE
  7137                           wreg	equ	0xFE8
  7138                           indf2	equ	0xFDF
  7139                           postinc2	equ	0xFDE
  7140                           postdec2	equ	0xFDD
  7141                           plusw2	equ	0xFDB
  7142                           fsr2h	equ	0xFDA
  7143                           fsr2l	equ	0xFD9
  7144                           status	equ	0xFD8
  7145                           
  7146 ;; *************** function _ComputeStorageData *****************
  7147 ;; Defined at:
  7148 ;;		line 160 in file "PDU.c"
  7149 ;; Parameters:    Size  Location     Type
  7150 ;;		None
  7151 ;; Auto vars:     Size  Location     Type
  7152 ;;  i               2   31[COMRAM] int 
  7153 ;; Return value:  Size  Location     Type
  7154 ;;                  1    wreg      void 
  7155 ;; Registers used:
  7156 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7157 ;; Tracked objects:
  7158 ;;		On entry : 0/0
  7159 ;;		On exit  : 0/0
  7160 ;;		Unchanged: 0/0
  7161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7162 ;;      Params:         0       0       0       0       0       0       0
  7163 ;;      Locals:         2       0       0       0       0       0       0
  7164 ;;      Temps:          2       0       0       0       0       0       0
  7165 ;;      Totals:         4       0       0       0       0       0       0
  7166 ;;Total ram usage:        4 bytes
  7167 ;; Hardware stack levels used:    1
  7168 ;; Hardware stack levels required when called:    7
  7169 ;; This function calls:
  7170 ;;		_DATAEE_ReadByte
  7171 ;; This function is called by:
  7172 ;;		_PDUStartup
  7173 ;;		_main
  7174 ;; This function uses a non-reentrant model
  7175 ;;
  7176                           
  7177                           	psect	text43
  7178  0015E8                     __ptext43:
  7179                           	opt stack 0
  7180  0015E8                     _ComputeStorageData:
  7181                           	opt stack 22
  7182                           
  7183                           ;PDU.c: 161: for (int i = 0; i < 12; i++) {
  7184                           
  7185                           ; BSR set to: 0
  7186                           ;incstack = 0
  7187  0015E8  0E00               	movlw	0
  7188  0015EA  6E21               	movwf	ComputeStorageData@i+1,c
  7189  0015EC  0E00               	movlw	0
  7190  0015EE  6E20               	movwf	ComputeStorageData@i,c
  7191  0015F0                     l4502:
  7192  0015F0  BE21               	btfsc	ComputeStorageData@i+1,7,c
  7193  0015F2  D006               	goto	l4506
  7194  0015F4  5021               	movf	ComputeStorageData@i+1,w,c
  7195  0015F6  E111               	bnz	l4512
  7196  0015F8  0E0C               	movlw	12
  7197  0015FA  5C20               	subwf	ComputeStorageData@i,w,c
  7198  0015FC  B0D8               	btfsc	status,0,c
  7199  0015FE  D00D               	goto	l4512
  7200  001600                     l4506:
  7201                           
  7202                           ;PDU.c: 162: data[i] = DATAEE_ReadByte(i);
  7203  001600  0E84               	movlw	low _data
  7204  001602  2420               	addwf	ComputeStorageData@i,w,c
  7205  001604  6ED9               	movwf	fsr2l,c
  7206  001606  0E00               	movlw	high _data
  7207  001608  2021               	addwfc	ComputeStorageData@i+1,w,c
  7208  00160A  6EDA               	movwf	fsr2h,c
  7209  00160C  5020               	movf	ComputeStorageData@i,w,c
  7210  00160E  ECD7  F012         	call	_DATAEE_ReadByte
  7211  001612  6EDF               	movwf	indf2,c
  7212  001614  4A20               	infsnz	ComputeStorageData@i,f,c
  7213  001616  2A21               	incf	ComputeStorageData@i+1,f,c
  7214  001618  D7EB               	goto	l4502
  7215  00161A                     l4512:
  7216                           
  7217                           ;PDU.c: 163: }
  7218                           ;PDU.c: 164: Currentcomp[0] = ((data[0] << 8) | data[1]);
  7219  00161A  0100               	movlb	0	; () banked
  7220  00161C  5185               	movf	(_data+1)& (0+255),w,b
  7221  00161E  C084  F01E         	movff	_data,??_ComputeStorageData
  7222  001622  6A1F               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7223  001624  C01E  F01F         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7224  001628  6A1E               	clrf	??_ComputeStorageData,c
  7225  00162A  101E               	iorwf	??_ComputeStorageData,w,c
  7226  00162C  0100               	movlb	0	; () banked
  7227  00162E  6F78               	movwf	_Currentcomp& (0+255),b
  7228  001630  501F               	movf	??_ComputeStorageData+1,w,c
  7229  001632  0100               	movlb	0	; () banked
  7230  001634  6F79               	movwf	(_Currentcomp+1)& (0+255),b
  7231                           
  7232                           ;PDU.c: 165: Currentcomp[1] = ((data[2] << 8) | data[3]);
  7233  001636  0100               	movlb	0	; () banked
  7234  001638  5187               	movf	(_data+3)& (0+255),w,b
  7235  00163A  C086  F01E         	movff	_data+2,??_ComputeStorageData
  7236  00163E  6A1F               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7237  001640  C01E  F01F         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7238  001644  6A1E               	clrf	??_ComputeStorageData,c
  7239  001646  101E               	iorwf	??_ComputeStorageData,w,c
  7240  001648  0100               	movlb	0	; () banked
  7241  00164A  6F7A               	movwf	(_Currentcomp+2)& (0+255),b
  7242  00164C  501F               	movf	??_ComputeStorageData+1,w,c
  7243  00164E  0100               	movlb	0	; () banked
  7244  001650  6F7B               	movwf	(_Currentcomp+3)& (0+255),b
  7245                           
  7246                           ;PDU.c: 166: Currentcomp[2] = ((data[4] << 8) | data[5]);
  7247  001652  0100               	movlb	0	; () banked
  7248  001654  5189               	movf	(_data+5)& (0+255),w,b
  7249  001656  C088  F01E         	movff	_data+4,??_ComputeStorageData
  7250  00165A  6A1F               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7251  00165C  C01E  F01F         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7252  001660  6A1E               	clrf	??_ComputeStorageData,c
  7253  001662  101E               	iorwf	??_ComputeStorageData,w,c
  7254  001664  0100               	movlb	0	; () banked
  7255  001666  6F7C               	movwf	(_Currentcomp+4)& (0+255),b
  7256  001668  501F               	movf	??_ComputeStorageData+1,w,c
  7257  00166A  0100               	movlb	0	; () banked
  7258  00166C  6F7D               	movwf	(_Currentcomp+5)& (0+255),b
  7259                           
  7260                           ;PDU.c: 167: Currentcomp[3] = ((data[6] << 8) | data[7]);
  7261  00166E  0100               	movlb	0	; () banked
  7262  001670  518B               	movf	(_data+7)& (0+255),w,b
  7263  001672  C08A  F01E         	movff	_data+6,??_ComputeStorageData
  7264  001676  6A1F               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7265  001678  C01E  F01F         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7266  00167C  6A1E               	clrf	??_ComputeStorageData,c
  7267  00167E  101E               	iorwf	??_ComputeStorageData,w,c
  7268  001680  0100               	movlb	0	; () banked
  7269  001682  6F7E               	movwf	(_Currentcomp+6)& (0+255),b
  7270  001684  501F               	movf	??_ComputeStorageData+1,w,c
  7271  001686  0100               	movlb	0	; () banked
  7272  001688  6F7F               	movwf	(_Currentcomp+7)& (0+255),b
  7273                           
  7274                           ;PDU.c: 168: Currentcomp[4] = ((data[8] << 8) | data[9]);
  7275  00168A  0100               	movlb	0	; () banked
  7276  00168C  518D               	movf	(_data+9)& (0+255),w,b
  7277  00168E  C08C  F01E         	movff	_data+8,??_ComputeStorageData
  7278  001692  6A1F               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7279  001694  C01E  F01F         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7280  001698  6A1E               	clrf	??_ComputeStorageData,c
  7281  00169A  101E               	iorwf	??_ComputeStorageData,w,c
  7282  00169C  0100               	movlb	0	; () banked
  7283  00169E  6F80               	movwf	(_Currentcomp+8)& (0+255),b
  7284  0016A0  501F               	movf	??_ComputeStorageData+1,w,c
  7285  0016A2  0100               	movlb	0	; () banked
  7286  0016A4  6F81               	movwf	(_Currentcomp+9)& (0+255),b
  7287                           
  7288                           ;PDU.c: 169: Currentcomp[5] = ((data[10] << 8) | data[11]);
  7289  0016A6  0100               	movlb	0	; () banked
  7290  0016A8  518F               	movf	(_data+11)& (0+255),w,b
  7291  0016AA  C08E  F01E         	movff	_data+10,??_ComputeStorageData
  7292  0016AE  6A1F               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7293  0016B0  C01E  F01F         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7294  0016B4  6A1E               	clrf	??_ComputeStorageData,c
  7295  0016B6  101E               	iorwf	??_ComputeStorageData,w,c
  7296  0016B8  0100               	movlb	0	; () banked
  7297  0016BA  6F82               	movwf	(_Currentcomp+10)& (0+255),b
  7298  0016BC  501F               	movf	??_ComputeStorageData+1,w,c
  7299  0016BE  0100               	movlb	0	; () banked
  7300  0016C0  6F83               	movwf	(_Currentcomp+11)& (0+255),b
  7301                           
  7302                           ; BSR set to: 0
  7303  0016C2  0012               	return		;funcret
  7304  0016C4                     __end_of_ComputeStorageData:
  7305                           	opt stack 0
  7306                           tosu	equ	0xFFF
  7307                           tosh	equ	0xFFE
  7308                           tosl	equ	0xFFD
  7309                           pclath	equ	0xFFA
  7310                           tblptru	equ	0xFF8
  7311                           tblptrh	equ	0xFF7
  7312                           tblptrl	equ	0xFF6
  7313                           tablat	equ	0xFF5
  7314                           prodh	equ	0xFF4
  7315                           prodl	equ	0xFF3
  7316                           intcon	equ	0xFF2
  7317                           intcon2	equ	0xFF1
  7318                           postinc0	equ	0xFEE
  7319                           wreg	equ	0xFE8
  7320                           indf2	equ	0xFDF
  7321                           postinc2	equ	0xFDE
  7322                           postdec2	equ	0xFDD
  7323                           plusw2	equ	0xFDB
  7324                           fsr2h	equ	0xFDA
  7325                           fsr2l	equ	0xFD9
  7326                           status	equ	0xFD8
  7327                           
  7328 ;; *************** function _DATAEE_ReadByte *****************
  7329 ;; Defined at:
  7330 ;;		line 143 in file "mcc_generated_files/memory.c"
  7331 ;; Parameters:    Size  Location     Type
  7332 ;;  bAdd            1    wreg     unsigned char 
  7333 ;; Auto vars:     Size  Location     Type
  7334 ;;  bAdd            1   28[COMRAM] unsigned char 
  7335 ;; Return value:  Size  Location     Type
  7336 ;;                  1    wreg      unsigned char 
  7337 ;; Registers used:
  7338 ;;		wreg, status,2
  7339 ;; Tracked objects:
  7340 ;;		On entry : 0/0
  7341 ;;		On exit  : 0/0
  7342 ;;		Unchanged: 0/0
  7343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7344 ;;      Params:         0       0       0       0       0       0       0
  7345 ;;      Locals:         1       0       0       0       0       0       0
  7346 ;;      Temps:          0       0       0       0       0       0       0
  7347 ;;      Totals:         1       0       0       0       0       0       0
  7348 ;;Total ram usage:        1 bytes
  7349 ;; Hardware stack levels used:    1
  7350 ;; Hardware stack levels required when called:    6
  7351 ;; This function calls:
  7352 ;;		Nothing
  7353 ;; This function is called by:
  7354 ;;		_ComputeStorageData
  7355 ;; This function uses a non-reentrant model
  7356 ;;
  7357                           
  7358                           	psect	text44
  7359  0025AE                     __ptext44:
  7360                           	opt stack 0
  7361  0025AE                     _DATAEE_ReadByte:
  7362                           	opt stack 22
  7363                           
  7364                           ; BSR set to: 0
  7365                           ;incstack = 0
  7366                           ;DATAEE_ReadByte@bAdd stored from wreg
  7367  0025AE  6E1D               	movwf	DATAEE_ReadByte@bAdd,c
  7368                           
  7369                           ;memory.c: 145: EEADR = (bAdd & 0xFF);
  7370  0025B0  C01D  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
  7371                           
  7372                           ;memory.c: 146: EECON1bits.CFGS = 0;
  7373  0025B4  9CA6               	bcf	4006,6,c	;volatile
  7374                           
  7375                           ;memory.c: 147: EECON1bits.EEPGD = 0;
  7376  0025B6  9EA6               	bcf	4006,7,c	;volatile
  7377                           
  7378                           ;memory.c: 148: EECON1bits.RD = 1;
  7379  0025B8  80A6               	bsf	4006,0,c	;volatile
  7380                           
  7381                           ;memory.c: 149: __nop();
  7382  0025BA  F000               	nop	
  7383                           
  7384                           ;memory.c: 150: __nop();
  7385  0025BC  F000               	nop	
  7386                           
  7387                           ;memory.c: 152: return (EEDATA);
  7388  0025BE  50A8               	movf	4008,w,c	;volatile
  7389  0025C0  0012               	return	
  7390  0025C2                     __end_of_DATAEE_ReadByte:
  7391                           	opt stack 0
  7392                           tosu	equ	0xFFF
  7393                           tosh	equ	0xFFE
  7394                           tosl	equ	0xFFD
  7395                           pclath	equ	0xFFA
  7396                           tblptru	equ	0xFF8
  7397                           tblptrh	equ	0xFF7
  7398                           tblptrl	equ	0xFF6
  7399                           tablat	equ	0xFF5
  7400                           prodh	equ	0xFF4
  7401                           prodl	equ	0xFF3
  7402                           intcon	equ	0xFF2
  7403                           intcon2	equ	0xFF1
  7404                           postinc0	equ	0xFEE
  7405                           wreg	equ	0xFE8
  7406                           indf2	equ	0xFDF
  7407                           postinc2	equ	0xFDE
  7408                           postdec2	equ	0xFDD
  7409                           plusw2	equ	0xFDB
  7410                           fsr2h	equ	0xFDA
  7411                           fsr2l	equ	0xFD9
  7412                           status	equ	0xFD8
  7413                           
  7414 ;; *************** function _DATAEE_WriteByte *****************
  7415 ;; Defined at:
  7416 ;;		line 121 in file "mcc_generated_files/memory.c"
  7417 ;; Parameters:    Size  Location     Type
  7418 ;;  bAdd            1    wreg     unsigned char 
  7419 ;;  bData           1   28[COMRAM] unsigned char 
  7420 ;; Auto vars:     Size  Location     Type
  7421 ;;  bAdd            1   29[COMRAM] unsigned char 
  7422 ;;  GIEBitValue     1   30[COMRAM] unsigned char 
  7423 ;; Return value:  Size  Location     Type
  7424 ;;                  1    wreg      void 
  7425 ;; Registers used:
  7426 ;;		wreg, status,2
  7427 ;; Tracked objects:
  7428 ;;		On entry : 0/0
  7429 ;;		On exit  : 0/0
  7430 ;;		Unchanged: 0/0
  7431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7432 ;;      Params:         1       0       0       0       0       0       0
  7433 ;;      Locals:         2       0       0       0       0       0       0
  7434 ;;      Temps:          0       0       0       0       0       0       0
  7435 ;;      Totals:         3       0       0       0       0       0       0
  7436 ;;Total ram usage:        3 bytes
  7437 ;; Hardware stack levels used:    1
  7438 ;; Hardware stack levels required when called:    6
  7439 ;; This function calls:
  7440 ;;		Nothing
  7441 ;; This function is called by:
  7442 ;;		_main
  7443 ;; This function uses a non-reentrant model
  7444 ;;
  7445                           
  7446                           	psect	text45
  7447  002244                     __ptext45:
  7448                           	opt stack 0
  7449  002244                     _DATAEE_WriteByte:
  7450                           	opt stack 24
  7451                           
  7452                           ;incstack = 0
  7453                           ;DATAEE_WriteByte@bAdd stored from wreg
  7454  002244  6E1E               	movwf	DATAEE_WriteByte@bAdd,c
  7455                           
  7456                           ;memory.c: 123: uint8_t GIEBitValue = INTCONbits.GIE;
  7457  002246  0E00               	movlw	0
  7458  002248  BEF2               	btfsc	intcon,7,c	;volatile
  7459  00224A  0E01               	movlw	1
  7460  00224C  6E1F               	movwf	DATAEE_WriteByte@GIEBitValue,c
  7461                           
  7462                           ;memory.c: 125: EEADR = (bAdd & 0xFF);
  7463  00224E  C01E  FFA9         	movff	DATAEE_WriteByte@bAdd,4009	;volatile
  7464                           
  7465                           ;memory.c: 126: EEDATA = bData;
  7466  002252  C01D  FFA8         	movff	DATAEE_WriteByte@bData,4008	;volatile
  7467                           
  7468                           ;memory.c: 127: EECON1bits.EEPGD = 0;
  7469  002256  9EA6               	bcf	4006,7,c	;volatile
  7470                           
  7471                           ;memory.c: 128: EECON1bits.CFGS = 0;
  7472  002258  9CA6               	bcf	4006,6,c	;volatile
  7473                           
  7474                           ;memory.c: 129: EECON1bits.WREN = 1;
  7475  00225A  84A6               	bsf	4006,2,c	;volatile
  7476                           
  7477                           ;memory.c: 130: INTCONbits.GIE = 0;
  7478  00225C  9EF2               	bcf	intcon,7,c	;volatile
  7479                           
  7480                           ;memory.c: 131: EECON2 = 0x55;
  7481  00225E  0E55               	movlw	85
  7482  002260  6EA7               	movwf	4007,c	;volatile
  7483                           
  7484                           ;memory.c: 132: EECON2 = 0xAA;
  7485  002262  0EAA               	movlw	170
  7486  002264  6EA7               	movwf	4007,c	;volatile
  7487                           
  7488                           ;memory.c: 133: EECON1bits.WR = 1;
  7489  002266  82A6               	bsf	4006,1,c	;volatile
  7490  002268                     l170:
  7491  002268  B2A6               	btfsc	4006,1,c	;volatile
  7492  00226A  D7FE               	goto	l170
  7493                           
  7494                           ;memory.c: 137: }
  7495                           ;memory.c: 139: EECON1bits.WREN = 0;
  7496  00226C  94A6               	bcf	4006,2,c	;volatile
  7497                           
  7498                           ;memory.c: 140: INTCONbits.GIE = GIEBitValue;
  7499  00226E  B01F               	btfsc	DATAEE_WriteByte@GIEBitValue,0,c
  7500  002270  D002               	bra	u4125
  7501  002272  9EF2               	bcf	intcon,7,c	;volatile
  7502  002274  D001               	bra	u4126
  7503  002276                     u4125:
  7504  002276  8EF2               	bsf	intcon,7,c	;volatile
  7505  002278                     u4126:
  7506  002278  0012               	return		;funcret
  7507  00227A                     __end_of_DATAEE_WriteByte:
  7508                           	opt stack 0
  7509                           tosu	equ	0xFFF
  7510                           tosh	equ	0xFFE
  7511                           tosl	equ	0xFFD
  7512                           pclath	equ	0xFFA
  7513                           tblptru	equ	0xFF8
  7514                           tblptrh	equ	0xFF7
  7515                           tblptrl	equ	0xFF6
  7516                           tablat	equ	0xFF5
  7517                           prodh	equ	0xFF4
  7518                           prodl	equ	0xFF3
  7519                           intcon	equ	0xFF2
  7520                           intcon2	equ	0xFF1
  7521                           postinc0	equ	0xFEE
  7522                           wreg	equ	0xFE8
  7523                           indf2	equ	0xFDF
  7524                           postinc2	equ	0xFDE
  7525                           postdec2	equ	0xFDD
  7526                           plusw2	equ	0xFDB
  7527                           fsr2h	equ	0xFDA
  7528                           fsr2l	equ	0xFD9
  7529                           status	equ	0xFD8
  7530                           
  7531 ;; *************** function _CoolingStop *****************
  7532 ;; Defined at:
  7533 ;;		line 30 in file "CoolingControl.c"
  7534 ;; Parameters:    Size  Location     Type
  7535 ;;		None
  7536 ;; Auto vars:     Size  Location     Type
  7537 ;;		None
  7538 ;; Return value:  Size  Location     Type
  7539 ;;                  1    wreg      void 
  7540 ;; Registers used:
  7541 ;;		wreg, status,2, status,0, cstack
  7542 ;; Tracked objects:
  7543 ;;		On entry : 0/0
  7544 ;;		On exit  : 0/0
  7545 ;;		Unchanged: 0/0
  7546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7547 ;;      Params:         0       0       0       0       0       0       0
  7548 ;;      Locals:         0       0       0       0       0       0       0
  7549 ;;      Temps:          0       0       0       0       0       0       0
  7550 ;;      Totals:         0       0       0       0       0       0       0
  7551 ;;Total ram usage:        0 bytes
  7552 ;; Hardware stack levels used:    1
  7553 ;; Hardware stack levels required when called:    8
  7554 ;; This function calls:
  7555 ;;		_PWM4_LoadDutyValue
  7556 ;;		_PotClear
  7557 ;; This function is called by:
  7558 ;;		_main
  7559 ;; This function uses a non-reentrant model
  7560 ;;
  7561                           
  7562                           	psect	text46
  7563  0025C2                     __ptext46:
  7564                           	opt stack 0
  7565  0025C2                     _CoolingStop:
  7566                           	opt stack 22
  7567                           
  7568                           ;CoolingControl.c: 31: PotClear();
  7569                           
  7570                           ;incstack = 0
  7571  0025C2  ECCE  F00B         	call	_PotClear	;wreg free
  7572                           
  7573                           ;CoolingControl.c: 32: PWM4_LoadDutyValue(0);
  7574  0025C6  0E00               	movlw	0
  7575  0025C8  6E1E               	movwf	PWM4_LoadDutyValue@dutyValue+1,c
  7576  0025CA  0E00               	movlw	0
  7577  0025CC  6E1D               	movwf	PWM4_LoadDutyValue@dutyValue,c
  7578  0025CE  ECA3  F011         	call	_PWM4_LoadDutyValue	;wreg free
  7579  0025D2  0012               	return		;funcret
  7580  0025D4                     __end_of_CoolingStop:
  7581                           	opt stack 0
  7582                           tosu	equ	0xFFF
  7583                           tosh	equ	0xFFE
  7584                           tosl	equ	0xFFD
  7585                           pclath	equ	0xFFA
  7586                           tblptru	equ	0xFF8
  7587                           tblptrh	equ	0xFF7
  7588                           tblptrl	equ	0xFF6
  7589                           tablat	equ	0xFF5
  7590                           prodh	equ	0xFF4
  7591                           prodl	equ	0xFF3
  7592                           intcon	equ	0xFF2
  7593                           intcon2	equ	0xFF1
  7594                           postinc0	equ	0xFEE
  7595                           wreg	equ	0xFE8
  7596                           indf2	equ	0xFDF
  7597                           postinc2	equ	0xFDE
  7598                           postdec2	equ	0xFDD
  7599                           plusw2	equ	0xFDB
  7600                           fsr2h	equ	0xFDA
  7601                           fsr2l	equ	0xFD9
  7602                           status	equ	0xFD8
  7603                           
  7604 ;; *************** function _CoolingStart *****************
  7605 ;; Defined at:
  7606 ;;		line 19 in file "CoolingControl.c"
  7607 ;; Parameters:    Size  Location     Type
  7608 ;;		None
  7609 ;; Auto vars:     Size  Location     Type
  7610 ;;		None
  7611 ;; Return value:  Size  Location     Type
  7612 ;;                  1    wreg      void 
  7613 ;; Registers used:
  7614 ;;		wreg, status,2, status,0, cstack
  7615 ;; Tracked objects:
  7616 ;;		On entry : 0/0
  7617 ;;		On exit  : 0/0
  7618 ;;		Unchanged: 0/0
  7619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7620 ;;      Params:         0       0       0       0       0       0       0
  7621 ;;      Locals:         0       0       0       0       0       0       0
  7622 ;;      Temps:          0       0       0       0       0       0       0
  7623 ;;      Totals:         0       0       0       0       0       0       0
  7624 ;;Total ram usage:        0 bytes
  7625 ;; Hardware stack levels used:    1
  7626 ;; Hardware stack levels required when called:    8
  7627 ;; This function calls:
  7628 ;;		_PWM4_LoadDutyValue
  7629 ;;		_PotClear
  7630 ;;		_PotSetpoint
  7631 ;; This function is called by:
  7632 ;;		_main
  7633 ;; This function uses a non-reentrant model
  7634 ;;
  7635                           
  7636                           	psect	text47
  7637  0024F8                     __ptext47:
  7638                           	opt stack 0
  7639  0024F8                     _CoolingStart:
  7640                           	opt stack 22
  7641                           
  7642                           ;CoolingControl.c: 21: PotClear();
  7643                           
  7644                           ;incstack = 0
  7645  0024F8  ECCE  F00B         	call	_PotClear	;wreg free
  7646                           
  7647                           ;CoolingControl.c: 22: PotSetpoint(40);
  7648  0024FC  0E00               	movlw	0
  7649  0024FE  6E23               	movwf	PotSetpoint@new_point+1,c
  7650  002500  0E28               	movlw	40
  7651  002502  6E22               	movwf	PotSetpoint@new_point,c
  7652  002504  ECF6  F009         	call	_PotSetpoint	;wreg free
  7653                           
  7654                           ;CoolingControl.c: 23: PWM4_LoadDutyValue(1000);
  7655  002508  0E03               	movlw	3
  7656  00250A  6E1E               	movwf	PWM4_LoadDutyValue@dutyValue+1,c
  7657  00250C  0EE8               	movlw	232
  7658  00250E  6E1D               	movwf	PWM4_LoadDutyValue@dutyValue,c
  7659  002510  ECA3  F011         	call	_PWM4_LoadDutyValue	;wreg free
  7660  002514  0012               	return		;funcret
  7661  002516                     __end_of_CoolingStart:
  7662                           	opt stack 0
  7663                           tosu	equ	0xFFF
  7664                           tosh	equ	0xFFE
  7665                           tosl	equ	0xFFD
  7666                           pclath	equ	0xFFA
  7667                           tblptru	equ	0xFF8
  7668                           tblptrh	equ	0xFF7
  7669                           tblptrl	equ	0xFF6
  7670                           tablat	equ	0xFF5
  7671                           prodh	equ	0xFF4
  7672                           prodl	equ	0xFF3
  7673                           intcon	equ	0xFF2
  7674                           intcon2	equ	0xFF1
  7675                           postinc0	equ	0xFEE
  7676                           wreg	equ	0xFE8
  7677                           indf2	equ	0xFDF
  7678                           postinc2	equ	0xFDE
  7679                           postdec2	equ	0xFDD
  7680                           plusw2	equ	0xFDB
  7681                           fsr2h	equ	0xFDA
  7682                           fsr2l	equ	0xFD9
  7683                           status	equ	0xFD8
  7684                           
  7685 ;; *************** function _PotSetpoint *****************
  7686 ;; Defined at:
  7687 ;;		line 21 in file "DigiPot.c"
  7688 ;; Parameters:    Size  Location     Type
  7689 ;;  new_point       2   33[COMRAM] int 
  7690 ;; Auto vars:     Size  Location     Type
  7691 ;;  new_pos         2   10[BANK0 ] int 
  7692 ;;  x               2    8[BANK0 ] int 
  7693 ;;  set_point       2    6[BANK0 ] int 
  7694 ;; Return value:  Size  Location     Type
  7695 ;;                  1    wreg      void 
  7696 ;; Registers used:
  7697 ;;		wreg, status,2, status,0, cstack
  7698 ;; Tracked objects:
  7699 ;;		On entry : 0/0
  7700 ;;		On exit  : 0/0
  7701 ;;		Unchanged: 0/0
  7702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7703 ;;      Params:         2       0       0       0       0       0       0
  7704 ;;      Locals:         0       6       0       0       0       0       0
  7705 ;;      Temps:          0       2       0       0       0       0       0
  7706 ;;      Totals:         2       8       0       0       0       0       0
  7707 ;;Total ram usage:       10 bytes
  7708 ;; Hardware stack levels used:    1
  7709 ;; Hardware stack levels required when called:    7
  7710 ;; This function calls:
  7711 ;;		_Delay
  7712 ;; This function is called by:
  7713 ;;		_main
  7714 ;;		_CoolingStart
  7715 ;; This function uses a non-reentrant model
  7716 ;;
  7717                           
  7718                           	psect	text48
  7719  0013EC                     __ptext48:
  7720                           	opt stack 0
  7721  0013EC                     _PotSetpoint:
  7722                           	opt stack 23
  7723                           
  7724                           ;DigiPot.c: 22: int set_point;
  7725                           ;DigiPot.c: 31: int new_pos = new_point;
  7726                           
  7727                           ;incstack = 0
  7728  0013EC  C022  F0E5         	movff	PotSetpoint@new_point,PotSetpoint@new_pos
  7729  0013F0  C023  F0E6         	movff	PotSetpoint@new_point+1,PotSetpoint@new_pos+1
  7730                           
  7731                           ;DigiPot.c: 35: LATB5 = 0;
  7732  0013F4  9A8A               	bcf	3978,5,c	;volatile
  7733                           
  7734                           ;DigiPot.c: 38: if (new_pos > prev_pos) {
  7735  0013F6  0100               	movlb	0	; () banked
  7736  0013F8  51E5               	movf	PotSetpoint@new_pos& (0+255),w,b
  7737  0013FA  5C27               	subwf	_prev_pos,w,c
  7738  0013FC  5028               	movf	_prev_pos+1,w,c
  7739  0013FE  0A80               	xorlw	128
  7740  001400  0100               	movlb	0	; () banked
  7741  001402  6FDF               	movwf	??_PotSetpoint& (0+255),b
  7742  001404  0100               	movlb	0	; () banked
  7743  001406  51E6               	movf	(PotSetpoint@new_pos+1)& (0+255),w,b
  7744  001408  0A80               	xorlw	128
  7745  00140A  0100               	movlb	0	; () banked
  7746  00140C  59DF               	subwfb	??_PotSetpoint& (0+255),w,b
  7747  00140E  B0D8               	btfsc	status,0,c
  7748  001410  D016               	goto	l916
  7749                           
  7750                           ; BSR set to: 0
  7751                           ;DigiPot.c: 40: LATB3 = 1;
  7752  001412  868A               	bsf	3978,3,c	;volatile
  7753                           
  7754                           ; BSR set to: 0
  7755                           ;DigiPot.c: 41: set_point = new_pos - prev_pos;
  7756  001414  C027  F0DF         	movff	_prev_pos,??_PotSetpoint
  7757  001418  C028  F0E0         	movff	_prev_pos+1,??_PotSetpoint+1
  7758  00141C  0100               	movlb	0	; () banked
  7759  00141E  1FDF               	comf	??_PotSetpoint& (0+255),f,b
  7760  001420  1FE0               	comf	(??_PotSetpoint+1)& (0+255),f,b
  7761  001422  4BDF               	infsnz	??_PotSetpoint& (0+255),f,b
  7762  001424  2BE0               	incf	(??_PotSetpoint+1)& (0+255),f,b
  7763  001426  0100               	movlb	0	; () banked
  7764  001428  51E5               	movf	PotSetpoint@new_pos& (0+255),w,b
  7765  00142A  0100               	movlb	0	; () banked
  7766  00142C  25DF               	addwf	??_PotSetpoint& (0+255),w,b
  7767  00142E  0100               	movlb	0	; () banked
  7768  001430  6FE1               	movwf	PotSetpoint@set_point& (0+255),b
  7769  001432  0100               	movlb	0	; () banked
  7770  001434  51E6               	movf	(PotSetpoint@new_pos+1)& (0+255),w,b
  7771  001436  0100               	movlb	0	; () banked
  7772  001438  21E0               	addwfc	(??_PotSetpoint+1)& (0+255),w,b
  7773  00143A  0100               	movlb	0	; () banked
  7774  00143C  6FE2               	movwf	(PotSetpoint@set_point+1)& (0+255),b
  7775  00143E                     l916:
  7776                           
  7777                           ; BSR set to: 0
  7778                           ;DigiPot.c: 42: }
  7779                           ;DigiPot.c: 43: if (new_pos < prev_pos) {
  7780  00143E  5027               	movf	_prev_pos,w,c
  7781  001440  0100               	movlb	0	; () banked
  7782  001442  5DE5               	subwf	PotSetpoint@new_pos& (0+255),w,b
  7783  001444  0100               	movlb	0	; () banked
  7784  001446  51E6               	movf	(PotSetpoint@new_pos+1)& (0+255),w,b
  7785  001448  0A80               	xorlw	128
  7786  00144A  0100               	movlb	0	; () banked
  7787  00144C  6FDF               	movwf	??_PotSetpoint& (0+255),b
  7788  00144E  5028               	movf	_prev_pos+1,w,c
  7789  001450  0A80               	xorlw	128
  7790  001452  0100               	movlb	0	; () banked
  7791  001454  59DF               	subwfb	??_PotSetpoint& (0+255),w,b
  7792  001456  B0D8               	btfsc	status,0,c
  7793  001458  D014               	goto	l4526
  7794                           
  7795                           ; BSR set to: 0
  7796                           ;DigiPot.c: 45: LATB3 = 0;
  7797  00145A  968A               	bcf	3978,3,c	;volatile
  7798                           
  7799                           ; BSR set to: 0
  7800                           ;DigiPot.c: 46: set_point = prev_pos - new_pos;
  7801  00145C  C0E5  F0DF         	movff	PotSetpoint@new_pos,??_PotSetpoint
  7802  001460  C0E6  F0E0         	movff	PotSetpoint@new_pos+1,??_PotSetpoint+1
  7803  001464  0100               	movlb	0	; () banked
  7804  001466  1FDF               	comf	??_PotSetpoint& (0+255),f,b
  7805  001468  1FE0               	comf	(??_PotSetpoint+1)& (0+255),f,b
  7806  00146A  4BDF               	infsnz	??_PotSetpoint& (0+255),f,b
  7807  00146C  2BE0               	incf	(??_PotSetpoint+1)& (0+255),f,b
  7808  00146E  5027               	movf	_prev_pos,w,c
  7809  001470  0100               	movlb	0	; () banked
  7810  001472  25DF               	addwf	??_PotSetpoint& (0+255),w,b
  7811  001474  0100               	movlb	0	; () banked
  7812  001476  6FE1               	movwf	PotSetpoint@set_point& (0+255),b
  7813  001478  5028               	movf	_prev_pos+1,w,c
  7814  00147A  0100               	movlb	0	; () banked
  7815  00147C  21E0               	addwfc	(??_PotSetpoint+1)& (0+255),w,b
  7816  00147E  0100               	movlb	0	; () banked
  7817  001480  6FE2               	movwf	(PotSetpoint@set_point+1)& (0+255),b
  7818  001482                     l4526:
  7819                           
  7820                           ; BSR set to: 0
  7821                           ;DigiPot.c: 47: }
  7822                           ;DigiPot.c: 48: Delay(1);
  7823  001482  0E01               	movlw	1
  7824  001484  6E1D               	movwf	Delay@wait,c
  7825  001486  0E00               	movlw	0
  7826  001488  6E1E               	movwf	Delay@wait+1,c
  7827  00148A  0E00               	movlw	0
  7828  00148C  6E1F               	movwf	Delay@wait+2,c
  7829  00148E  0E00               	movlw	0
  7830  001490  6E20               	movwf	Delay@wait+3,c
  7831  001492  EC49  F010         	call	_Delay	;wreg free
  7832                           
  7833                           ;DigiPot.c: 50: int x;
  7834                           ;DigiPot.c: 52: for (x = 0; x < set_point; x++) {
  7835  001496  0E00               	movlw	0
  7836  001498  0100               	movlb	0	; () banked
  7837  00149A  6FE4               	movwf	(PotSetpoint@x+1)& (0+255),b
  7838  00149C  0E00               	movlw	0
  7839  00149E  6FE3               	movwf	PotSetpoint@x& (0+255),b
  7840  0014A0  D019               	goto	l4536
  7841  0014A2                     l919:
  7842                           
  7843                           ; BSR set to: 0
  7844                           ;DigiPot.c: 53: LATB4 = 1;
  7845  0014A2  888A               	bsf	3978,4,c	;volatile
  7846                           
  7847                           ; BSR set to: 0
  7848                           ;DigiPot.c: 54: Delay(1);
  7849  0014A4  0E01               	movlw	1
  7850  0014A6  6E1D               	movwf	Delay@wait,c
  7851  0014A8  0E00               	movlw	0
  7852  0014AA  6E1E               	movwf	Delay@wait+1,c
  7853  0014AC  0E00               	movlw	0
  7854  0014AE  6E1F               	movwf	Delay@wait+2,c
  7855  0014B0  0E00               	movlw	0
  7856  0014B2  6E20               	movwf	Delay@wait+3,c
  7857  0014B4  EC49  F010         	call	_Delay	;wreg free
  7858                           
  7859                           ;DigiPot.c: 55: LATB4 = 0;
  7860  0014B8  988A               	bcf	3978,4,c	;volatile
  7861                           
  7862                           ;DigiPot.c: 56: Delay(1);
  7863  0014BA  0E01               	movlw	1
  7864  0014BC  6E1D               	movwf	Delay@wait,c
  7865  0014BE  0E00               	movlw	0
  7866  0014C0  6E1E               	movwf	Delay@wait+1,c
  7867  0014C2  0E00               	movlw	0
  7868  0014C4  6E1F               	movwf	Delay@wait+2,c
  7869  0014C6  0E00               	movlw	0
  7870  0014C8  6E20               	movwf	Delay@wait+3,c
  7871  0014CA  EC49  F010         	call	_Delay	;wreg free
  7872  0014CE  0100               	movlb	0	; () banked
  7873  0014D0  4BE3               	infsnz	PotSetpoint@x& (0+255),f,b
  7874  0014D2  2BE4               	incf	(PotSetpoint@x+1)& (0+255),f,b
  7875  0014D4                     l4536:
  7876                           
  7877                           ; BSR set to: 0
  7878  0014D4  0100               	movlb	0	; () banked
  7879  0014D6  51E1               	movf	PotSetpoint@set_point& (0+255),w,b
  7880  0014D8  0100               	movlb	0	; () banked
  7881  0014DA  5DE3               	subwf	PotSetpoint@x& (0+255),w,b
  7882  0014DC  0100               	movlb	0	; () banked
  7883  0014DE  51E4               	movf	(PotSetpoint@x+1)& (0+255),w,b
  7884  0014E0  0A80               	xorlw	128
  7885  0014E2  0100               	movlb	0	; () banked
  7886  0014E4  6FDF               	movwf	??_PotSetpoint& (0+255),b
  7887  0014E6  0100               	movlb	0	; () banked
  7888  0014E8  51E2               	movf	(PotSetpoint@set_point+1)& (0+255),w,b
  7889  0014EA  0A80               	xorlw	128
  7890  0014EC  0100               	movlb	0	; () banked
  7891  0014EE  59DF               	subwfb	??_PotSetpoint& (0+255),w,b
  7892  0014F0  A0D8               	btfss	status,0,c
  7893  0014F2  D7D7               	goto	l919
  7894                           
  7895                           ; BSR set to: 0
  7896                           ;DigiPot.c: 57: }
  7897                           ;DigiPot.c: 59: LATB5 = 1;
  7898  0014F4  8A8A               	bsf	3978,5,c	;volatile
  7899                           
  7900                           ;DigiPot.c: 60: prev_pos = new_pos;
  7901  0014F6  C0E5  F027         	movff	PotSetpoint@new_pos,_prev_pos
  7902  0014FA  C0E6  F028         	movff	PotSetpoint@new_pos+1,_prev_pos+1
  7903                           
  7904                           ; BSR set to: 0
  7905  0014FE  0012               	return		;funcret
  7906  001500                     __end_of_PotSetpoint:
  7907                           	opt stack 0
  7908                           tosu	equ	0xFFF
  7909                           tosh	equ	0xFFE
  7910                           tosl	equ	0xFFD
  7911                           pclath	equ	0xFFA
  7912                           tblptru	equ	0xFF8
  7913                           tblptrh	equ	0xFF7
  7914                           tblptrl	equ	0xFF6
  7915                           tablat	equ	0xFF5
  7916                           prodh	equ	0xFF4
  7917                           prodl	equ	0xFF3
  7918                           intcon	equ	0xFF2
  7919                           intcon2	equ	0xFF1
  7920                           postinc0	equ	0xFEE
  7921                           wreg	equ	0xFE8
  7922                           indf2	equ	0xFDF
  7923                           postinc2	equ	0xFDE
  7924                           postdec2	equ	0xFDD
  7925                           plusw2	equ	0xFDB
  7926                           fsr2h	equ	0xFDA
  7927                           fsr2l	equ	0xFD9
  7928                           status	equ	0xFD8
  7929                           
  7930 ;; *************** function _PotClear *****************
  7931 ;; Defined at:
  7932 ;;		line 66 in file "DigiPot.c"
  7933 ;; Parameters:    Size  Location     Type
  7934 ;;		None
  7935 ;; Auto vars:     Size  Location     Type
  7936 ;;  x               2   33[COMRAM] int 
  7937 ;; Return value:  Size  Location     Type
  7938 ;;                  1    wreg      void 
  7939 ;; Registers used:
  7940 ;;		wreg, status,2, status,0, cstack
  7941 ;; Tracked objects:
  7942 ;;		On entry : 0/0
  7943 ;;		On exit  : 0/0
  7944 ;;		Unchanged: 0/0
  7945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7946 ;;      Params:         0       0       0       0       0       0       0
  7947 ;;      Locals:         2       0       0       0       0       0       0
  7948 ;;      Temps:          0       0       0       0       0       0       0
  7949 ;;      Totals:         2       0       0       0       0       0       0
  7950 ;;Total ram usage:        2 bytes
  7951 ;; Hardware stack levels used:    1
  7952 ;; Hardware stack levels required when called:    7
  7953 ;; This function calls:
  7954 ;;		_Delay
  7955 ;; This function is called by:
  7956 ;;		_CoolingStart
  7957 ;;		_CoolingStop
  7958 ;; This function uses a non-reentrant model
  7959 ;;
  7960                           
  7961                           	psect	text49
  7962  00179C                     __ptext49:
  7963                           	opt stack 0
  7964  00179C                     _PotClear:
  7965                           	opt stack 22
  7966                           
  7967                           ;DigiPot.c: 67: Delay(1);
  7968                           
  7969                           ; BSR set to: 0
  7970                           ;incstack = 0
  7971  00179C  0E01               	movlw	1
  7972  00179E  6E1D               	movwf	Delay@wait,c
  7973  0017A0  0E00               	movlw	0
  7974  0017A2  6E1E               	movwf	Delay@wait+1,c
  7975  0017A4  0E00               	movlw	0
  7976  0017A6  6E1F               	movwf	Delay@wait+2,c
  7977  0017A8  0E00               	movlw	0
  7978  0017AA  6E20               	movwf	Delay@wait+3,c
  7979  0017AC  EC49  F010         	call	_Delay	;wreg free
  7980                           
  7981                           ;DigiPot.c: 69: LATB5 = 0;
  7982  0017B0  9A8A               	bcf	3978,5,c	;volatile
  7983                           
  7984                           ;DigiPot.c: 70: Delay(1);
  7985  0017B2  0E01               	movlw	1
  7986  0017B4  6E1D               	movwf	Delay@wait,c
  7987  0017B6  0E00               	movlw	0
  7988  0017B8  6E1E               	movwf	Delay@wait+1,c
  7989  0017BA  0E00               	movlw	0
  7990  0017BC  6E1F               	movwf	Delay@wait+2,c
  7991  0017BE  0E00               	movlw	0
  7992  0017C0  6E20               	movwf	Delay@wait+3,c
  7993  0017C2  EC49  F010         	call	_Delay	;wreg free
  7994                           
  7995                           ;DigiPot.c: 71: LATB3 = 0;
  7996  0017C6  968A               	bcf	3978,3,c	;volatile
  7997                           
  7998                           ;DigiPot.c: 72: Delay(1);
  7999  0017C8  0E01               	movlw	1
  8000  0017CA  6E1D               	movwf	Delay@wait,c
  8001  0017CC  0E00               	movlw	0
  8002  0017CE  6E1E               	movwf	Delay@wait+1,c
  8003  0017D0  0E00               	movlw	0
  8004  0017D2  6E1F               	movwf	Delay@wait+2,c
  8005  0017D4  0E00               	movlw	0
  8006  0017D6  6E20               	movwf	Delay@wait+3,c
  8007  0017D8  EC49  F010         	call	_Delay	;wreg free
  8008                           
  8009                           ;DigiPot.c: 73: int x;
  8010                           ;DigiPot.c: 74: for (x = 0; x < 32; x++) {
  8011  0017DC  0E00               	movlw	0
  8012  0017DE  6E23               	movwf	PotClear@x+1,c
  8013  0017E0  0E00               	movlw	0
  8014  0017E2  6E22               	movwf	PotClear@x,c
  8015  0017E4  BE23               	btfsc	PotClear@x+1,7,c
  8016  0017E6  D006               	goto	l924
  8017  0017E8  5023               	movf	PotClear@x+1,w,c
  8018  0017EA  E121               	bnz	l925
  8019  0017EC  0E20               	movlw	32
  8020  0017EE  5C22               	subwf	PotClear@x,w,c
  8021  0017F0  B0D8               	btfsc	status,0,c
  8022  0017F2  D01D               	goto	l925
  8023  0017F4                     l924:
  8024                           
  8025                           ;DigiPot.c: 75: LATB4 = 1;
  8026  0017F4  888A               	bsf	3978,4,c	;volatile
  8027                           
  8028                           ;DigiPot.c: 76: Delay(1);
  8029  0017F6  0E01               	movlw	1
  8030  0017F8  6E1D               	movwf	Delay@wait,c
  8031  0017FA  0E00               	movlw	0
  8032  0017FC  6E1E               	movwf	Delay@wait+1,c
  8033  0017FE  0E00               	movlw	0
  8034  001800  6E1F               	movwf	Delay@wait+2,c
  8035  001802  0E00               	movlw	0
  8036  001804  6E20               	movwf	Delay@wait+3,c
  8037  001806  EC49  F010         	call	_Delay	;wreg free
  8038                           
  8039                           ;DigiPot.c: 77: LATB4 = 0;
  8040  00180A  988A               	bcf	3978,4,c	;volatile
  8041                           
  8042                           ;DigiPot.c: 78: Delay(1);
  8043  00180C  0E01               	movlw	1
  8044  00180E  6E1D               	movwf	Delay@wait,c
  8045  001810  0E00               	movlw	0
  8046  001812  6E1E               	movwf	Delay@wait+1,c
  8047  001814  0E00               	movlw	0
  8048  001816  6E1F               	movwf	Delay@wait+2,c
  8049  001818  0E00               	movlw	0
  8050  00181A  6E20               	movwf	Delay@wait+3,c
  8051  00181C  EC49  F010         	call	_Delay	;wreg free
  8052  001820  4A22               	infsnz	PotClear@x,f,c
  8053  001822  2A23               	incf	PotClear@x+1,f,c
  8054  001824  BE23               	btfsc	PotClear@x+1,7,c
  8055  001826  D7E6               	goto	l924
  8056  001828  5023               	movf	PotClear@x+1,w,c
  8057  00182A  E101               	bnz	u4100
  8058  00182C  D7DF               	goto	L2
  8059  00182E                     u4100:
  8060  00182E                     l925:
  8061                           
  8062                           ;DigiPot.c: 79: }
  8063                           ;DigiPot.c: 80: LATB4 = 1;
  8064  00182E  888A               	bsf	3978,4,c	;volatile
  8065                           
  8066                           ;DigiPot.c: 81: Delay(1);
  8067  001830  0E01               	movlw	1
  8068  001832  6E1D               	movwf	Delay@wait,c
  8069  001834  0E00               	movlw	0
  8070  001836  6E1E               	movwf	Delay@wait+1,c
  8071  001838  0E00               	movlw	0
  8072  00183A  6E1F               	movwf	Delay@wait+2,c
  8073  00183C  0E00               	movlw	0
  8074  00183E  6E20               	movwf	Delay@wait+3,c
  8075  001840  EC49  F010         	call	_Delay	;wreg free
  8076                           
  8077                           ;DigiPot.c: 83: LATB5 = 1;
  8078  001844  8A8A               	bsf	3978,5,c	;volatile
  8079                           
  8080                           ;DigiPot.c: 84: prev_pos = 0;
  8081  001846  0E00               	movlw	0
  8082  001848  6E28               	movwf	_prev_pos+1,c
  8083  00184A  0E00               	movlw	0
  8084  00184C  6E27               	movwf	_prev_pos,c
  8085                           
  8086                           ;DigiPot.c: 85: Delay(1);
  8087  00184E  0E01               	movlw	1
  8088  001850  6E1D               	movwf	Delay@wait,c
  8089  001852  0E00               	movlw	0
  8090  001854  6E1E               	movwf	Delay@wait+1,c
  8091  001856  0E00               	movlw	0
  8092  001858  6E1F               	movwf	Delay@wait+2,c
  8093  00185A  0E00               	movlw	0
  8094  00185C  6E20               	movwf	Delay@wait+3,c
  8095  00185E  EC49  F010         	call	_Delay	;wreg free
  8096  001862  0012               	return		;funcret
  8097  001864                     __end_of_PotClear:
  8098                           	opt stack 0
  8099                           tosu	equ	0xFFF
  8100                           tosh	equ	0xFFE
  8101                           tosl	equ	0xFFD
  8102                           pclath	equ	0xFFA
  8103                           tblptru	equ	0xFF8
  8104                           tblptrh	equ	0xFF7
  8105                           tblptrl	equ	0xFF6
  8106                           tablat	equ	0xFF5
  8107                           prodh	equ	0xFF4
  8108                           prodl	equ	0xFF3
  8109                           intcon	equ	0xFF2
  8110                           intcon2	equ	0xFF1
  8111                           postinc0	equ	0xFEE
  8112                           wreg	equ	0xFE8
  8113                           indf2	equ	0xFDF
  8114                           postinc2	equ	0xFDE
  8115                           postdec2	equ	0xFDD
  8116                           plusw2	equ	0xFDB
  8117                           fsr2h	equ	0xFDA
  8118                           fsr2l	equ	0xFD9
  8119                           status	equ	0xFD8
  8120                           
  8121 ;; *************** function _Delay *****************
  8122 ;; Defined at:
  8123 ;;		line 9 in file "Functions.c"
  8124 ;; Parameters:    Size  Location     Type
  8125 ;;  wait            4   28[COMRAM] long 
  8126 ;; Auto vars:     Size  Location     Type
  8127 ;;  i               4    0[BANK0 ] long 
  8128 ;; Return value:  Size  Location     Type
  8129 ;;                  1    wreg      void 
  8130 ;; Registers used:
  8131 ;;		wreg, status,2, status,0
  8132 ;; Tracked objects:
  8133 ;;		On entry : 0/0
  8134 ;;		On exit  : 0/0
  8135 ;;		Unchanged: 0/0
  8136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8137 ;;      Params:         4       0       0       0       0       0       0
  8138 ;;      Locals:         0       4       0       0       0       0       0
  8139 ;;      Temps:          1       0       0       0       0       0       0
  8140 ;;      Totals:         5       4       0       0       0       0       0
  8141 ;;Total ram usage:        9 bytes
  8142 ;; Hardware stack levels used:    1
  8143 ;; Hardware stack levels required when called:    6
  8144 ;; This function calls:
  8145 ;;		Nothing
  8146 ;; This function is called by:
  8147 ;;		_respondECU
  8148 ;;		_StartUp595
  8149 ;;		_writeRegisters
  8150 ;;		_PotSetpoint
  8151 ;;		_PotClear
  8152 ;; This function uses a non-reentrant model
  8153 ;;
  8154                           
  8155                           	psect	text50
  8156  002092                     __ptext50:
  8157                           	opt stack 0
  8158  002092                     _Delay:
  8159                           	opt stack 22
  8160                           
  8161                           ;Functions.c: 10: long int i = 0;
  8162                           
  8163                           ;incstack = 0
  8164  002092  0E00               	movlw	0
  8165  002094  0100               	movlb	0	; () banked
  8166  002096  6FDB               	movwf	Delay@i& (0+255),b
  8167  002098  0E00               	movlw	0
  8168  00209A  6FDC               	movwf	(Delay@i+1)& (0+255),b
  8169  00209C  0E00               	movlw	0
  8170  00209E  6FDD               	movwf	(Delay@i+2)& (0+255),b
  8171  0020A0  0E00               	movlw	0
  8172  0020A2  6FDE               	movwf	(Delay@i+3)& (0+255),b
  8173                           
  8174                           ;Functions.c: 11: for (; wait > i; i++) {
  8175  0020A4  D00E               	goto	l3922
  8176  0020A6                     l3918:
  8177                           
  8178                           ; BSR set to: 0
  8179                           ;Functions.c: 12: _delay((unsigned long)((1)*(8000000/4000.0)));
  8180  0020A6  0E03               	movlw	3
  8181  0020A8  6E21               	movwf	??_Delay& (0+255),c
  8182  0020AA  0E98               	movlw	152
  8183  0020AC                     u4357:
  8184  0020AC  2EE8               	decfsz	wreg,f,c
  8185  0020AE  D7FE               	goto	u4357
  8186  0020B0  2E21               	decfsz	??_Delay& (0+255),f,c
  8187  0020B2  D7FC               	goto	u4357
  8188  0020B4  0E01               	movlw	1
  8189  0020B6  0100               	movlb	0	; () banked
  8190  0020B8  27DB               	addwf	Delay@i& (0+255),f,b
  8191  0020BA  0E00               	movlw	0
  8192  0020BC  23DC               	addwfc	(Delay@i+1)& (0+255),f,b
  8193  0020BE  23DD               	addwfc	(Delay@i+2)& (0+255),f,b
  8194  0020C0  23DE               	addwfc	(Delay@i+3)& (0+255),f,b
  8195  0020C2                     l3922:
  8196                           
  8197                           ; BSR set to: 0
  8198  0020C2  501D               	movf	Delay@wait,w,c
  8199  0020C4  0100               	movlb	0	; () banked
  8200  0020C6  5DDB               	subwf	Delay@i& (0+255),w,b
  8201  0020C8  501E               	movf	Delay@wait+1,w,c
  8202  0020CA  0100               	movlb	0	; () banked
  8203  0020CC  59DC               	subwfb	(Delay@i+1)& (0+255),w,b
  8204  0020CE  501F               	movf	Delay@wait+2,w,c
  8205  0020D0  0100               	movlb	0	; () banked
  8206  0020D2  59DD               	subwfb	(Delay@i+2)& (0+255),w,b
  8207  0020D4  0100               	movlb	0	; () banked
  8208  0020D6  51DE               	movf	(Delay@i+3)& (0+255),w,b
  8209  0020D8  0A80               	xorlw	128
  8210  0020DA  6E21               	movwf	??_Delay& (0+255),c
  8211  0020DC  5020               	movf	Delay@wait+3,w,c
  8212  0020DE  0A80               	xorlw	128
  8213  0020E0  5821               	subwfb	??_Delay& (0+255),w,c
  8214  0020E2  B0D8               	btfsc	status,0,c
  8215  0020E4  0012               	return	
  8216  0020E6  D7DF               	goto	l3918
  8217  0020E8                     __end_of_Delay:
  8218                           	opt stack 0
  8219                           tosu	equ	0xFFF
  8220                           tosh	equ	0xFFE
  8221                           tosl	equ	0xFFD
  8222                           pclath	equ	0xFFA
  8223                           tblptru	equ	0xFF8
  8224                           tblptrh	equ	0xFF7
  8225                           tblptrl	equ	0xFF6
  8226                           tablat	equ	0xFF5
  8227                           prodh	equ	0xFF4
  8228                           prodl	equ	0xFF3
  8229                           intcon	equ	0xFF2
  8230                           intcon2	equ	0xFF1
  8231                           postinc0	equ	0xFEE
  8232                           wreg	equ	0xFE8
  8233                           indf2	equ	0xFDF
  8234                           postinc2	equ	0xFDE
  8235                           postdec2	equ	0xFDD
  8236                           plusw2	equ	0xFDB
  8237                           fsr2h	equ	0xFDA
  8238                           fsr2l	equ	0xFD9
  8239                           status	equ	0xFD8
  8240                           
  8241 ;; *************** function _PWM4_LoadDutyValue *****************
  8242 ;; Defined at:
  8243 ;;		line 81 in file "mcc_generated_files/pwm4.c"
  8244 ;; Parameters:    Size  Location     Type
  8245 ;;  dutyValue       2   28[COMRAM] unsigned int 
  8246 ;; Auto vars:     Size  Location     Type
  8247 ;;		None
  8248 ;; Return value:  Size  Location     Type
  8249 ;;                  1    wreg      void 
  8250 ;; Registers used:
  8251 ;;		wreg, status,2, status,0
  8252 ;; Tracked objects:
  8253 ;;		On entry : 0/0
  8254 ;;		On exit  : 0/0
  8255 ;;		Unchanged: 0/0
  8256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8257 ;;      Params:         2       0       0       0       0       0       0
  8258 ;;      Locals:         0       0       0       0       0       0       0
  8259 ;;      Temps:          2       0       0       0       0       0       0
  8260 ;;      Totals:         4       0       0       0       0       0       0
  8261 ;;Total ram usage:        4 bytes
  8262 ;; Hardware stack levels used:    1
  8263 ;; Hardware stack levels required when called:    6
  8264 ;; This function calls:
  8265 ;;		Nothing
  8266 ;; This function is called by:
  8267 ;;		_main
  8268 ;;		_CoolingStart
  8269 ;;		_CoolingStop
  8270 ;; This function uses a non-reentrant model
  8271 ;;
  8272                           
  8273                           	psect	text51
  8274  002346                     __ptext51:
  8275                           	opt stack 0
  8276  002346                     _PWM4_LoadDutyValue:
  8277                           	opt stack 24
  8278                           
  8279                           ;pwm4.c: 84: CCPR2L = ((dutyValue & 0x03FC)>>2);
  8280                           
  8281                           ; BSR set to: 0
  8282                           ;incstack = 0
  8283  002346  C01D  F01F         	movff	PWM4_LoadDutyValue@dutyValue,??_PWM4_LoadDutyValue
  8284  00234A  C01E  F020         	movff	PWM4_LoadDutyValue@dutyValue+1,??_PWM4_LoadDutyValue+1
  8285  00234E  90D8               	bcf	status,0,c
  8286  002350  3220               	rrcf	??_PWM4_LoadDutyValue+1,f,c
  8287  002352  321F               	rrcf	??_PWM4_LoadDutyValue,f,c
  8288  002354  90D8               	bcf	status,0,c
  8289  002356  3220               	rrcf	??_PWM4_LoadDutyValue+1,f,c
  8290  002358  321F               	rrcf	??_PWM4_LoadDutyValue,f,c
  8291  00235A  501F               	movf	??_PWM4_LoadDutyValue,w,c
  8292  00235C  6E67               	movwf	3943,c	;volatile
  8293                           
  8294                           ;pwm4.c: 87: CCP2CON = (CCP2CON & 0xCF) | ((dutyValue & 0x0003)<<4);
  8295  00235E  C01D  F01F         	movff	PWM4_LoadDutyValue@dutyValue,??_PWM4_LoadDutyValue
  8296  002362  0E03               	movlw	3
  8297  002364  161F               	andwf	??_PWM4_LoadDutyValue,f,c
  8298  002366  3A1F               	swapf	??_PWM4_LoadDutyValue,f,c
  8299  002368  0EF0               	movlw	240
  8300  00236A  161F               	andwf	??_PWM4_LoadDutyValue,f,c
  8301  00236C  5066               	movf	3942,w,c	;volatile
  8302  00236E  0BCF               	andlw	207
  8303  002370  101F               	iorwf	??_PWM4_LoadDutyValue,w,c
  8304  002372  6E66               	movwf	3942,c	;volatile
  8305  002374  0012               	return		;funcret
  8306  002376                     __end_of_PWM4_LoadDutyValue:
  8307                           	opt stack 0
  8308                           tosu	equ	0xFFF
  8309                           tosh	equ	0xFFE
  8310                           tosl	equ	0xFFD
  8311                           pclath	equ	0xFFA
  8312                           tblptru	equ	0xFF8
  8313                           tblptrh	equ	0xFF7
  8314                           tblptrl	equ	0xFF6
  8315                           tablat	equ	0xFF5
  8316                           prodh	equ	0xFF4
  8317                           prodl	equ	0xFF3
  8318                           intcon	equ	0xFF2
  8319                           intcon2	equ	0xFF1
  8320                           postinc0	equ	0xFEE
  8321                           wreg	equ	0xFE8
  8322                           indf2	equ	0xFDF
  8323                           postinc2	equ	0xFDE
  8324                           postdec2	equ	0xFDD
  8325                           plusw2	equ	0xFDB
  8326                           fsr2h	equ	0xFDA
  8327                           fsr2l	equ	0xFD9
  8328                           status	equ	0xFD8
  8329                           
  8330 ;; *************** function _CoolingCheck *****************
  8331 ;; Defined at:
  8332 ;;		line 229 in file "PDU.c"
  8333 ;; Parameters:    Size  Location     Type
  8334 ;;		None
  8335 ;; Auto vars:     Size  Location     Type
  8336 ;;		None
  8337 ;; Return value:  Size  Location     Type
  8338 ;;                  1    wreg      unsigned char 
  8339 ;; Registers used:
  8340 ;;		wreg, status,2
  8341 ;; Tracked objects:
  8342 ;;		On entry : 0/0
  8343 ;;		On exit  : 0/0
  8344 ;;		Unchanged: 0/0
  8345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8346 ;;      Params:         0       0       0       0       0       0       0
  8347 ;;      Locals:         0       0       0       0       0       0       0
  8348 ;;      Temps:          0       0       0       0       0       0       0
  8349 ;;      Totals:         0       0       0       0       0       0       0
  8350 ;;Total ram usage:        0 bytes
  8351 ;; Hardware stack levels used:    1
  8352 ;; Hardware stack levels required when called:    6
  8353 ;; This function calls:
  8354 ;;		Nothing
  8355 ;; This function is called by:
  8356 ;;		_main
  8357 ;; This function uses a non-reentrant model
  8358 ;;
  8359                           
  8360                           	psect	text52
  8361  00260E                     __ptext52:
  8362                           	opt stack 0
  8363  00260E                     _CoolingCheck:
  8364                           	opt stack 24
  8365                           
  8366                           ;PDU.c: 230: return MCSOn;
  8367                           
  8368                           ;incstack = 0
  8369  00260E  5038               	movf	_MCSOn,w,c
  8370  002610  0012               	return	
  8371  002612                     __end_of_CoolingCheck:
  8372                           	opt stack 0
  8373                           tosu	equ	0xFFF
  8374                           tosh	equ	0xFFE
  8375                           tosl	equ	0xFFD
  8376                           pclath	equ	0xFFA
  8377                           tblptru	equ	0xFF8
  8378                           tblptrh	equ	0xFF7
  8379                           tblptrl	equ	0xFF6
  8380                           tablat	equ	0xFF5
  8381                           prodh	equ	0xFF4
  8382                           prodl	equ	0xFF3
  8383                           intcon	equ	0xFF2
  8384                           intcon2	equ	0xFF1
  8385                           postinc0	equ	0xFEE
  8386                           wreg	equ	0xFE8
  8387                           indf2	equ	0xFDF
  8388                           postinc2	equ	0xFDE
  8389                           postdec2	equ	0xFDD
  8390                           plusw2	equ	0xFDB
  8391                           fsr2h	equ	0xFDA
  8392                           fsr2l	equ	0xFD9
  8393                           status	equ	0xFD8
  8394                           
  8395 ;; *************** function _INTERRUPT_InterruptManager *****************
  8396 ;; Defined at:
  8397 ;;		line 67 in file "mcc_generated_files/interrupt_manager.c"
  8398 ;; Parameters:    Size  Location     Type
  8399 ;;		None
  8400 ;; Auto vars:     Size  Location     Type
  8401 ;;		None
  8402 ;; Return value:  Size  Location     Type
  8403 ;;                  1    wreg      void 
  8404 ;; Registers used:
  8405 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8406 ;; Tracked objects:
  8407 ;;		On entry : 0/0
  8408 ;;		On exit  : 0/0
  8409 ;;		Unchanged: 0/0
  8410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8411 ;;      Params:         0       0       0       0       0       0       0
  8412 ;;      Locals:         0       0       0       0       0       0       0
  8413 ;;      Temps:         14       0       0       0       0       0       0
  8414 ;;      Totals:        14       0       0       0       0       0       0
  8415 ;;Total ram usage:       14 bytes
  8416 ;; Hardware stack levels used:    1
  8417 ;; Hardware stack levels required when called:    5
  8418 ;; This function calls:
  8419 ;;		_ADC_ISR
  8420 ;;		_EUSART1_Receive_ISR
  8421 ;;		_EUSART1_Transmit_ISR
  8422 ;;		_TMR1_ISR
  8423 ;; This function is called by:
  8424 ;;		Interrupt level 2
  8425 ;; This function uses a non-reentrant model
  8426 ;;
  8427                           
  8428                           	psect	intcode
  8429  000008                     __pintcode:
  8430                           	opt stack 0
  8431  000008                     _INTERRUPT_InterruptManager:
  8432                           	opt stack 19
  8433                           
  8434                           ;incstack = 0
  8435  000008  8243               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8436  00000A  CFFA F00F          	movff	pclath,??_INTERRUPT_InterruptManager
  8437  00000E  CFFB F010          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  8438  000012  CFE9 F011          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  8439  000016  CFEA F012          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  8440  00001A  CFE1 F013          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  8441  00001E  CFE2 F014          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  8442  000022  CFD9 F015          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  8443  000026  CFDA F016          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  8444  00002A  CFF3 F017          	movff	prodl,??_INTERRUPT_InterruptManager+8
  8445  00002E  CFF4 F018          	movff	prodh,??_INTERRUPT_InterruptManager+9
  8446  000032  CFF6 F019          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  8447  000036  CFF7 F01A          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  8448  00003A  CFF8 F01B          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  8449  00003E  CFF5 F01C          	movff	tablat,??_INTERRUPT_InterruptManager+13
  8450                           
  8451                           ;interrupt_manager.c: 70: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  8452  000042  BA9D               	btfsc	3997,5,c	;volatile
  8453  000044  AA9E               	btfss	3998,5,c	;volatile
  8454  000046  D003               	goto	i2l65
  8455                           
  8456                           ;interrupt_manager.c: 71: {
  8457                           ;interrupt_manager.c: 72: EUSART1_Receive_ISR();
  8458  000048  EC5D  F012         	call	_EUSART1_Receive_ISR	;wreg free
  8459                           
  8460                           ;interrupt_manager.c: 73: }
  8461  00004C  D011               	goto	i2l73
  8462  00004E                     i2l65:
  8463                           
  8464                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  8465  00004E  B89D               	btfsc	3997,4,c	;volatile
  8466  000050  A89E               	btfss	3998,4,c	;volatile
  8467  000052  D003               	goto	i2l67
  8468                           
  8469                           ;interrupt_manager.c: 75: {
  8470                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
  8471  000054  EC8A  F011         	call	_EUSART1_Transmit_ISR	;wreg free
  8472                           
  8473                           ;interrupt_manager.c: 77: }
  8474  000058  D00B               	goto	i2l73
  8475  00005A                     i2l67:
  8476                           
  8477                           ;interrupt_manager.c: 78: else if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
  8478  00005A  BC9D               	btfsc	3997,6,c	;volatile
  8479  00005C  AC9E               	btfss	3998,6,c	;volatile
  8480  00005E  D003               	goto	i2l69
  8481                           
  8482                           ;interrupt_manager.c: 79: {
  8483                           ;interrupt_manager.c: 80: ADC_ISR();
  8484  000060  EC09  F013         	call	_ADC_ISR	;wreg free
  8485                           
  8486                           ;interrupt_manager.c: 81: }
  8487  000064  D005               	goto	i2l73
  8488  000066                     i2l69:
  8489                           
  8490                           ;interrupt_manager.c: 82: else if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
  8491  000066  B09D               	btfsc	3997,0,c	;volatile
  8492  000068  A09E               	btfss	3998,0,c	;volatile
  8493  00006A  D002               	goto	i2l73
  8494                           
  8495                           ;interrupt_manager.c: 83: {
  8496                           ;interrupt_manager.c: 84: TMR1_ISR();
  8497  00006C  EC71  F011         	call	_TMR1_ISR	;wreg free
  8498  000070                     i2l73:
  8499  000070  C01C  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  8500  000074  C01B  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  8501  000078  C01A  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  8502  00007C  C019  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  8503  000080  C018  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  8504  000084  C017  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  8505  000088  C016  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  8506  00008C  C015  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  8507  000090  C014  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  8508  000094  C013  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  8509  000098  C012  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  8510  00009C  C011  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  8511  0000A0  C010  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  8512  0000A4  C00F  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  8513  0000A8  9243               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8514  0000AA  0011               	retfie		f
  8515  0000AC                     __end_of_INTERRUPT_InterruptManager:
  8516                           	opt stack 0
  8517                           tosu	equ	0xFFF
  8518                           tosh	equ	0xFFE
  8519                           tosl	equ	0xFFD
  8520                           pclatu	equ	0xFFB
  8521                           pclath	equ	0xFFA
  8522                           tblptru	equ	0xFF8
  8523                           tblptrh	equ	0xFF7
  8524                           tblptrl	equ	0xFF6
  8525                           tablat	equ	0xFF5
  8526                           prodh	equ	0xFF4
  8527                           prodl	equ	0xFF3
  8528                           intcon	equ	0xFF2
  8529                           intcon2	equ	0xFF1
  8530                           postinc0	equ	0xFEE
  8531                           fsr0h	equ	0xFEA
  8532                           fsr0l	equ	0xFE9
  8533                           wreg	equ	0xFE8
  8534                           fsr1h	equ	0xFE2
  8535                           fsr1l	equ	0xFE1
  8536                           indf2	equ	0xFDF
  8537                           postinc2	equ	0xFDE
  8538                           postdec2	equ	0xFDD
  8539                           plusw2	equ	0xFDB
  8540                           fsr2h	equ	0xFDA
  8541                           fsr2l	equ	0xFD9
  8542                           status	equ	0xFD8
  8543                           
  8544 ;; *************** function _TMR1_ISR *****************
  8545 ;; Defined at:
  8546 ;;		line 161 in file "mcc_generated_files/tmr1.c"
  8547 ;; Parameters:    Size  Location     Type
  8548 ;;		None
  8549 ;; Auto vars:     Size  Location     Type
  8550 ;;		None
  8551 ;; Return value:  Size  Location     Type
  8552 ;;                  2   53[None  ] int 
  8553 ;; Registers used:
  8554 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8555 ;; Tracked objects:
  8556 ;;		On entry : 0/0
  8557 ;;		On exit  : 0/0
  8558 ;;		Unchanged: 0/0
  8559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8560 ;;      Params:         0       0       0       0       0       0       0
  8561 ;;      Locals:         0       0       0       0       0       0       0
  8562 ;;      Temps:          0       0       0       0       0       0       0
  8563 ;;      Totals:         0       0       0       0       0       0       0
  8564 ;;Total ram usage:        0 bytes
  8565 ;; Hardware stack levels used:    1
  8566 ;; Hardware stack levels required when called:    4
  8567 ;; This function calls:
  8568 ;;		_FuseSystem
  8569 ;;		_ReadCurrent
  8570 ;; This function is called by:
  8571 ;;		_INTERRUPT_InterruptManager
  8572 ;; This function uses a non-reentrant model
  8573 ;;
  8574                           
  8575                           	psect	text54
  8576  0022E2                     __ptext54:
  8577                           	opt stack 0
  8578  0022E2                     _TMR1_ISR:
  8579                           	opt stack 19
  8580                           
  8581                           ;tmr1.c: 165: PIR1bits.TMR1IF = 0;
  8582                           
  8583                           ;incstack = 0
  8584  0022E2  909E               	bcf	3998,0,c	;volatile
  8585                           
  8586                           ;tmr1.c: 168: TMR1H = (timer1ReloadVal >> 8);
  8587  0022E4  5034               	movf	_timer1ReloadVal+1,w,c	;volatile
  8588  0022E6  6ECF               	movwf	4047,c	;volatile
  8589                           
  8590                           ;tmr1.c: 169: TMR1L = (uint8_t) timer1ReloadVal;
  8591  0022E8  C033  FFCE         	movff	_timer1ReloadVal,4046	;volatile
  8592                           
  8593                           ;tmr1.c: 170: readwhat++;
  8594  0022EC  4A40               	infsnz	_readwhat,f,c
  8595  0022EE  2A41               	incf	_readwhat+1,f,c
  8596                           
  8597                           ;tmr1.c: 171: if(readwhat > 7)
  8598  0022F0  BE41               	btfsc	_readwhat+1,7,c
  8599  0022F2  D00C               	goto	i2l3646
  8600  0022F4  5041               	movf	_readwhat+1,w,c
  8601  0022F6  E104               	bnz	i2u278_40
  8602  0022F8  0E08               	movlw	8
  8603  0022FA  5C40               	subwf	_readwhat,w,c
  8604  0022FC  A0D8               	btfss	status,0,c
  8605  0022FE  D006               	goto	i2l3646
  8606  002300                     i2u278_40:
  8607                           
  8608                           ;tmr1.c: 172: {
  8609                           ;tmr1.c: 173: readwhat = 1;
  8610  002300  0E00               	movlw	0
  8611  002302  6E41               	movwf	_readwhat+1,c
  8612  002304  0E01               	movlw	1
  8613  002306  6E40               	movwf	_readwhat,c
  8614                           
  8615                           ;tmr1.c: 174: FuseSystem();
  8616  002308  EC33  F00E         	call	_FuseSystem	;wreg free
  8617  00230C                     i2l3646:
  8618                           
  8619                           ;tmr1.c: 175: }
  8620                           ;tmr1.c: 176: ReadCurrent(readwhat);
  8621  00230C  5040               	movf	_readwhat,w,c
  8622  00230E  EC58  F000         	call	_ReadCurrent
  8623  002312  0012               	return		;funcret
  8624  002314                     __end_of_TMR1_ISR:
  8625                           	opt stack 0
  8626                           tosu	equ	0xFFF
  8627                           tosh	equ	0xFFE
  8628                           tosl	equ	0xFFD
  8629                           pclatu	equ	0xFFB
  8630                           pclath	equ	0xFFA
  8631                           tblptru	equ	0xFF8
  8632                           tblptrh	equ	0xFF7
  8633                           tblptrl	equ	0xFF6
  8634                           tablat	equ	0xFF5
  8635                           prodh	equ	0xFF4
  8636                           prodl	equ	0xFF3
  8637                           intcon	equ	0xFF2
  8638                           intcon2	equ	0xFF1
  8639                           postinc0	equ	0xFEE
  8640                           fsr0h	equ	0xFEA
  8641                           fsr0l	equ	0xFE9
  8642                           wreg	equ	0xFE8
  8643                           fsr1h	equ	0xFE2
  8644                           fsr1l	equ	0xFE1
  8645                           indf2	equ	0xFDF
  8646                           postinc2	equ	0xFDE
  8647                           postdec2	equ	0xFDD
  8648                           plusw2	equ	0xFDB
  8649                           fsr2h	equ	0xFDA
  8650                           fsr2l	equ	0xFD9
  8651                           status	equ	0xFD8
  8652                           
  8653 ;; *************** function _ReadCurrent *****************
  8654 ;; Defined at:
  8655 ;;		line 63 in file "PDU.c"
  8656 ;; Parameters:    Size  Location     Type
  8657 ;;  gather          1    wreg     unsigned char 
  8658 ;; Auto vars:     Size  Location     Type
  8659 ;;  gather          1   13[COMRAM] unsigned char 
  8660 ;; Return value:  Size  Location     Type
  8661 ;;                  1    wreg      void 
  8662 ;; Registers used:
  8663 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8664 ;; Tracked objects:
  8665 ;;		On entry : 0/0
  8666 ;;		On exit  : 0/0
  8667 ;;		Unchanged: 0/0
  8668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8669 ;;      Params:         0       0       0       0       0       0       0
  8670 ;;      Locals:         1       0       0       0       0       0       0
  8671 ;;      Temps:          0       0       0       0       0       0       0
  8672 ;;      Totals:         1       0       0       0       0       0       0
  8673 ;;Total ram usage:        1 bytes
  8674 ;; Hardware stack levels used:    1
  8675 ;; Hardware stack levels required when called:    3
  8676 ;; This function calls:
  8677 ;;		_ADC_GetConversion
  8678 ;;		i2_SetPin595
  8679 ;;		i2_Update
  8680 ;; This function is called by:
  8681 ;;		_TMR1_ISR
  8682 ;; This function uses a non-reentrant model
  8683 ;;
  8684                           
  8685                           	psect	text55
  8686  0000B0                     __ptext55:
  8687                           	opt stack 0
  8688  0000B0                     _ReadCurrent:
  8689                           	opt stack 19
  8690                           
  8691                           ;incstack = 0
  8692                           ;ReadCurrent@gather stored from wreg
  8693  0000B0  6E0E               	movwf	ReadCurrent@gather,c
  8694                           
  8695                           ;PDU.c: 64: if (gather == 1) {
  8696  0000B2  040E               	decf	ReadCurrent@gather,w,c
  8697  0000B4  A4D8               	btfss	status,2,c
  8698  0000B6  D088               	goto	i2l3282
  8699                           
  8700                           ;PDU.c: 66: SetPin595(1, 4, ON);
  8701  0000B8  0E00               	movlw	0
  8702  0000BA  6E02               	movwf	i2SetPin595@Reg+1,c
  8703  0000BC  0E01               	movlw	1
  8704  0000BE  6E01               	movwf	i2SetPin595@Reg,c
  8705  0000C0  0E00               	movlw	0
  8706  0000C2  6E04               	movwf	i2SetPin595@pin+1,c
  8707  0000C4  0E04               	movlw	4
  8708  0000C6  6E03               	movwf	i2SetPin595@pin,c
  8709  0000C8  0E00               	movlw	0
  8710  0000CA  6E06               	movwf	i2SetPin595@value+1,c
  8711  0000CC  0E01               	movlw	1
  8712  0000CE  6E05               	movwf	i2SetPin595@value,c
  8713  0000D0  EC74  F010         	call	i2_SetPin595	;wreg free
  8714                           
  8715                           ;PDU.c: 67: SetPin595(1, 3, OFF);
  8716  0000D4  0E00               	movlw	0
  8717  0000D6  6E02               	movwf	i2SetPin595@Reg+1,c
  8718  0000D8  0E01               	movlw	1
  8719  0000DA  6E01               	movwf	i2SetPin595@Reg,c
  8720  0000DC  0E00               	movlw	0
  8721  0000DE  6E04               	movwf	i2SetPin595@pin+1,c
  8722  0000E0  0E03               	movlw	3
  8723  0000E2  6E03               	movwf	i2SetPin595@pin,c
  8724  0000E4  0E00               	movlw	0
  8725  0000E6  6E06               	movwf	i2SetPin595@value+1,c
  8726  0000E8  0E00               	movlw	0
  8727  0000EA  6E05               	movwf	i2SetPin595@value,c
  8728  0000EC  EC74  F010         	call	i2_SetPin595	;wreg free
  8729                           
  8730                           ;PDU.c: 68: SetPin595(1, 2, OFF);
  8731  0000F0  0E00               	movlw	0
  8732  0000F2  6E02               	movwf	i2SetPin595@Reg+1,c
  8733  0000F4  0E01               	movlw	1
  8734  0000F6  6E01               	movwf	i2SetPin595@Reg,c
  8735  0000F8  0E00               	movlw	0
  8736  0000FA  6E04               	movwf	i2SetPin595@pin+1,c
  8737  0000FC  0E02               	movlw	2
  8738  0000FE  6E03               	movwf	i2SetPin595@pin,c
  8739  000100  0E00               	movlw	0
  8740  000102  6E06               	movwf	i2SetPin595@value+1,c
  8741  000104  0E00               	movlw	0
  8742  000106  6E05               	movwf	i2SetPin595@value,c
  8743  000108  EC74  F010         	call	i2_SetPin595	;wreg free
  8744                           
  8745                           ;PDU.c: 69: SetPin595(2, 4, OFF);
  8746  00010C  0E00               	movlw	0
  8747  00010E  6E02               	movwf	i2SetPin595@Reg+1,c
  8748  000110  0E02               	movlw	2
  8749  000112  6E01               	movwf	i2SetPin595@Reg,c
  8750  000114  0E00               	movlw	0
  8751  000116  6E04               	movwf	i2SetPin595@pin+1,c
  8752  000118  0E04               	movlw	4
  8753  00011A  6E03               	movwf	i2SetPin595@pin,c
  8754  00011C  0E00               	movlw	0
  8755  00011E  6E06               	movwf	i2SetPin595@value+1,c
  8756  000120  0E00               	movlw	0
  8757  000122  6E05               	movwf	i2SetPin595@value,c
  8758  000124  EC74  F010         	call	i2_SetPin595	;wreg free
  8759                           
  8760                           ;PDU.c: 70: SetPin595(2, 3, OFF);
  8761  000128  0E00               	movlw	0
  8762  00012A  6E02               	movwf	i2SetPin595@Reg+1,c
  8763  00012C  0E02               	movlw	2
  8764  00012E  6E01               	movwf	i2SetPin595@Reg,c
  8765  000130  0E00               	movlw	0
  8766  000132  6E04               	movwf	i2SetPin595@pin+1,c
  8767  000134  0E03               	movlw	3
  8768  000136  6E03               	movwf	i2SetPin595@pin,c
  8769  000138  0E00               	movlw	0
  8770  00013A  6E06               	movwf	i2SetPin595@value+1,c
  8771  00013C  0E00               	movlw	0
  8772  00013E  6E05               	movwf	i2SetPin595@value,c
  8773  000140  EC74  F010         	call	i2_SetPin595	;wreg free
  8774                           
  8775                           ;PDU.c: 71: SetPin595(2, 2, OFF);
  8776  000144  0E00               	movlw	0
  8777  000146  6E02               	movwf	i2SetPin595@Reg+1,c
  8778  000148  0E02               	movlw	2
  8779  00014A  6E01               	movwf	i2SetPin595@Reg,c
  8780  00014C  0E00               	movlw	0
  8781  00014E  6E04               	movwf	i2SetPin595@pin+1,c
  8782  000150  0E02               	movlw	2
  8783  000152  6E03               	movwf	i2SetPin595@pin,c
  8784  000154  0E00               	movlw	0
  8785  000156  6E06               	movwf	i2SetPin595@value+1,c
  8786  000158  0E00               	movlw	0
  8787  00015A  6E05               	movwf	i2SetPin595@value,c
  8788  00015C  EC74  F010         	call	i2_SetPin595	;wreg free
  8789                           
  8790                           ;PDU.c: 72: SetPin595(3, 4, OFF);
  8791  000160  0E00               	movlw	0
  8792  000162  6E02               	movwf	i2SetPin595@Reg+1,c
  8793  000164  0E03               	movlw	3
  8794  000166  6E01               	movwf	i2SetPin595@Reg,c
  8795  000168  0E00               	movlw	0
  8796  00016A  6E04               	movwf	i2SetPin595@pin+1,c
  8797  00016C  0E04               	movlw	4
  8798  00016E  6E03               	movwf	i2SetPin595@pin,c
  8799  000170  0E00               	movlw	0
  8800  000172  6E06               	movwf	i2SetPin595@value+1,c
  8801  000174  0E00               	movlw	0
  8802  000176  6E05               	movwf	i2SetPin595@value,c
  8803  000178  EC74  F010         	call	i2_SetPin595	;wreg free
  8804                           
  8805                           ;PDU.c: 73: SetPin595(3, 3, OFF);
  8806  00017C  0E00               	movlw	0
  8807  00017E  6E02               	movwf	i2SetPin595@Reg+1,c
  8808  000180  0E03               	movlw	3
  8809  000182  6E01               	movwf	i2SetPin595@Reg,c
  8810  000184  0E00               	movlw	0
  8811  000186  6E04               	movwf	i2SetPin595@pin+1,c
  8812  000188  0E03               	movlw	3
  8813  00018A  6E03               	movwf	i2SetPin595@pin,c
  8814  00018C  0E00               	movlw	0
  8815  00018E  6E06               	movwf	i2SetPin595@value+1,c
  8816  000190  0E00               	movlw	0
  8817  000192  6E05               	movwf	i2SetPin595@value,c
  8818  000194  EC74  F010         	call	i2_SetPin595	;wreg free
  8819                           
  8820                           ;PDU.c: 74: SetPin595(3, 2, OFF);
  8821  000198  0E00               	movlw	0
  8822  00019A  6E02               	movwf	i2SetPin595@Reg+1,c
  8823  00019C  0E03               	movlw	3
  8824  00019E  6E01               	movwf	i2SetPin595@Reg,c
  8825  0001A0  0E00               	movlw	0
  8826  0001A2  6E04               	movwf	i2SetPin595@pin+1,c
  8827  0001A4  0E02               	movlw	2
  8828  0001A6  6E03               	movwf	i2SetPin595@pin,c
  8829  0001A8  0E00               	movlw	0
  8830  0001AA  6E06               	movwf	i2SetPin595@value+1,c
  8831  0001AC  0E00               	movlw	0
  8832  0001AE  6E05               	movwf	i2SetPin595@value,c
  8833  0001B0  EC74  F010         	call	i2_SetPin595	;wreg free
  8834                           
  8835                           ;PDU.c: 75: Update();
  8836  0001B4  EC00  F013         	call	i2_Update	;wreg free
  8837                           
  8838                           ;PDU.c: 76: CurrentADC[5] = ADC_GetConversion(U10Multisense);
  8839  0001B8  0E17               	movlw	23
  8840  0001BA  ECBB  F011         	call	_ADC_GetConversion
  8841  0001BE  C001  F076         	movff	?_ADC_GetConversion,_CurrentADC+10
  8842  0001C2  C002  F077         	movff	?_ADC_GetConversion+1,_CurrentADC+11
  8843                           
  8844                           ;PDU.c: 78: }
  8845  0001C6  0012               	return	
  8846  0001C8                     i2l3282:
  8847                           
  8848                           ;PDU.c: 79: else if(gather == 2){
  8849  0001C8  0E02               	movlw	2
  8850  0001CA  180E               	xorwf	ReadCurrent@gather,w,c
  8851  0001CC  A4D8               	btfss	status,2,c
  8852  0001CE  D088               	goto	i2l3288
  8853                           
  8854                           ;PDU.c: 81: SetPin595(1, 4, OFF);
  8855  0001D0  0E00               	movlw	0
  8856  0001D2  6E02               	movwf	i2SetPin595@Reg+1,c
  8857  0001D4  0E01               	movlw	1
  8858  0001D6  6E01               	movwf	i2SetPin595@Reg,c
  8859  0001D8  0E00               	movlw	0
  8860  0001DA  6E04               	movwf	i2SetPin595@pin+1,c
  8861  0001DC  0E04               	movlw	4
  8862  0001DE  6E03               	movwf	i2SetPin595@pin,c
  8863  0001E0  0E00               	movlw	0
  8864  0001E2  6E06               	movwf	i2SetPin595@value+1,c
  8865  0001E4  0E00               	movlw	0
  8866  0001E6  6E05               	movwf	i2SetPin595@value,c
  8867  0001E8  EC74  F010         	call	i2_SetPin595	;wreg free
  8868                           
  8869                           ;PDU.c: 82: SetPin595(1, 3, OFF);
  8870  0001EC  0E00               	movlw	0
  8871  0001EE  6E02               	movwf	i2SetPin595@Reg+1,c
  8872  0001F0  0E01               	movlw	1
  8873  0001F2  6E01               	movwf	i2SetPin595@Reg,c
  8874  0001F4  0E00               	movlw	0
  8875  0001F6  6E04               	movwf	i2SetPin595@pin+1,c
  8876  0001F8  0E03               	movlw	3
  8877  0001FA  6E03               	movwf	i2SetPin595@pin,c
  8878  0001FC  0E00               	movlw	0
  8879  0001FE  6E06               	movwf	i2SetPin595@value+1,c
  8880  000200  0E00               	movlw	0
  8881  000202  6E05               	movwf	i2SetPin595@value,c
  8882  000204  EC74  F010         	call	i2_SetPin595	;wreg free
  8883                           
  8884                           ;PDU.c: 83: SetPin595(1, 2, OFF);
  8885  000208  0E00               	movlw	0
  8886  00020A  6E02               	movwf	i2SetPin595@Reg+1,c
  8887  00020C  0E01               	movlw	1
  8888  00020E  6E01               	movwf	i2SetPin595@Reg,c
  8889  000210  0E00               	movlw	0
  8890  000212  6E04               	movwf	i2SetPin595@pin+1,c
  8891  000214  0E02               	movlw	2
  8892  000216  6E03               	movwf	i2SetPin595@pin,c
  8893  000218  0E00               	movlw	0
  8894  00021A  6E06               	movwf	i2SetPin595@value+1,c
  8895  00021C  0E00               	movlw	0
  8896  00021E  6E05               	movwf	i2SetPin595@value,c
  8897  000220  EC74  F010         	call	i2_SetPin595	;wreg free
  8898                           
  8899                           ;PDU.c: 84: SetPin595(2, 4, ON);
  8900  000224  0E00               	movlw	0
  8901  000226  6E02               	movwf	i2SetPin595@Reg+1,c
  8902  000228  0E02               	movlw	2
  8903  00022A  6E01               	movwf	i2SetPin595@Reg,c
  8904  00022C  0E00               	movlw	0
  8905  00022E  6E04               	movwf	i2SetPin595@pin+1,c
  8906  000230  0E04               	movlw	4
  8907  000232  6E03               	movwf	i2SetPin595@pin,c
  8908  000234  0E00               	movlw	0
  8909  000236  6E06               	movwf	i2SetPin595@value+1,c
  8910  000238  0E01               	movlw	1
  8911  00023A  6E05               	movwf	i2SetPin595@value,c
  8912  00023C  EC74  F010         	call	i2_SetPin595	;wreg free
  8913                           
  8914                           ;PDU.c: 85: SetPin595(2, 3, ON);
  8915  000240  0E00               	movlw	0
  8916  000242  6E02               	movwf	i2SetPin595@Reg+1,c
  8917  000244  0E02               	movlw	2
  8918  000246  6E01               	movwf	i2SetPin595@Reg,c
  8919  000248  0E00               	movlw	0
  8920  00024A  6E04               	movwf	i2SetPin595@pin+1,c
  8921  00024C  0E03               	movlw	3
  8922  00024E  6E03               	movwf	i2SetPin595@pin,c
  8923  000250  0E00               	movlw	0
  8924  000252  6E06               	movwf	i2SetPin595@value+1,c
  8925  000254  0E01               	movlw	1
  8926  000256  6E05               	movwf	i2SetPin595@value,c
  8927  000258  EC74  F010         	call	i2_SetPin595	;wreg free
  8928                           
  8929                           ;PDU.c: 86: SetPin595(2, 2, OFF);
  8930  00025C  0E00               	movlw	0
  8931  00025E  6E02               	movwf	i2SetPin595@Reg+1,c
  8932  000260  0E02               	movlw	2
  8933  000262  6E01               	movwf	i2SetPin595@Reg,c
  8934  000264  0E00               	movlw	0
  8935  000266  6E04               	movwf	i2SetPin595@pin+1,c
  8936  000268  0E02               	movlw	2
  8937  00026A  6E03               	movwf	i2SetPin595@pin,c
  8938  00026C  0E00               	movlw	0
  8939  00026E  6E06               	movwf	i2SetPin595@value+1,c
  8940  000270  0E00               	movlw	0
  8941  000272  6E05               	movwf	i2SetPin595@value,c
  8942  000274  EC74  F010         	call	i2_SetPin595	;wreg free
  8943                           
  8944                           ;PDU.c: 87: SetPin595(3, 4, OFF);
  8945  000278  0E00               	movlw	0
  8946  00027A  6E02               	movwf	i2SetPin595@Reg+1,c
  8947  00027C  0E03               	movlw	3
  8948  00027E  6E01               	movwf	i2SetPin595@Reg,c
  8949  000280  0E00               	movlw	0
  8950  000282  6E04               	movwf	i2SetPin595@pin+1,c
  8951  000284  0E04               	movlw	4
  8952  000286  6E03               	movwf	i2SetPin595@pin,c
  8953  000288  0E00               	movlw	0
  8954  00028A  6E06               	movwf	i2SetPin595@value+1,c
  8955  00028C  0E00               	movlw	0
  8956  00028E  6E05               	movwf	i2SetPin595@value,c
  8957  000290  EC74  F010         	call	i2_SetPin595	;wreg free
  8958                           
  8959                           ;PDU.c: 88: SetPin595(3, 3, OFF);
  8960  000294  0E00               	movlw	0
  8961  000296  6E02               	movwf	i2SetPin595@Reg+1,c
  8962  000298  0E03               	movlw	3
  8963  00029A  6E01               	movwf	i2SetPin595@Reg,c
  8964  00029C  0E00               	movlw	0
  8965  00029E  6E04               	movwf	i2SetPin595@pin+1,c
  8966  0002A0  0E03               	movlw	3
  8967  0002A2  6E03               	movwf	i2SetPin595@pin,c
  8968  0002A4  0E00               	movlw	0
  8969  0002A6  6E06               	movwf	i2SetPin595@value+1,c
  8970  0002A8  0E00               	movlw	0
  8971  0002AA  6E05               	movwf	i2SetPin595@value,c
  8972  0002AC  EC74  F010         	call	i2_SetPin595	;wreg free
  8973                           
  8974                           ;PDU.c: 89: SetPin595(3, 2, OFF);
  8975  0002B0  0E00               	movlw	0
  8976  0002B2  6E02               	movwf	i2SetPin595@Reg+1,c
  8977  0002B4  0E03               	movlw	3
  8978  0002B6  6E01               	movwf	i2SetPin595@Reg,c
  8979  0002B8  0E00               	movlw	0
  8980  0002BA  6E04               	movwf	i2SetPin595@pin+1,c
  8981  0002BC  0E02               	movlw	2
  8982  0002BE  6E03               	movwf	i2SetPin595@pin,c
  8983  0002C0  0E00               	movlw	0
  8984  0002C2  6E06               	movwf	i2SetPin595@value+1,c
  8985  0002C4  0E00               	movlw	0
  8986  0002C6  6E05               	movwf	i2SetPin595@value,c
  8987  0002C8  EC74  F010         	call	i2_SetPin595	;wreg free
  8988                           
  8989                           ;PDU.c: 90: Update();
  8990  0002CC  EC00  F013         	call	i2_Update	;wreg free
  8991                           
  8992                           ;PDU.c: 91: CurrentADC[2] = ADC_GetConversion(U8Multisense);
  8993  0002D0  0E16               	movlw	22
  8994  0002D2  ECBB  F011         	call	_ADC_GetConversion
  8995  0002D6  C001  F070         	movff	?_ADC_GetConversion,_CurrentADC+4
  8996  0002DA  C002  F071         	movff	?_ADC_GetConversion+1,_CurrentADC+5
  8997                           
  8998                           ;PDU.c: 93: }
  8999  0002DE  0012               	return	
  9000  0002E0                     i2l3288:
  9001                           
  9002                           ;PDU.c: 94: else if(gather == 3){
  9003  0002E0  0E03               	movlw	3
  9004  0002E2  180E               	xorwf	ReadCurrent@gather,w,c
  9005  0002E4  A4D8               	btfss	status,2,c
  9006  0002E6  D088               	goto	i2l3294
  9007                           
  9008                           ;PDU.c: 96: SetPin595(1, 4, OFF);
  9009  0002E8  0E00               	movlw	0
  9010  0002EA  6E02               	movwf	i2SetPin595@Reg+1,c
  9011  0002EC  0E01               	movlw	1
  9012  0002EE  6E01               	movwf	i2SetPin595@Reg,c
  9013  0002F0  0E00               	movlw	0
  9014  0002F2  6E04               	movwf	i2SetPin595@pin+1,c
  9015  0002F4  0E04               	movlw	4
  9016  0002F6  6E03               	movwf	i2SetPin595@pin,c
  9017  0002F8  0E00               	movlw	0
  9018  0002FA  6E06               	movwf	i2SetPin595@value+1,c
  9019  0002FC  0E00               	movlw	0
  9020  0002FE  6E05               	movwf	i2SetPin595@value,c
  9021  000300  EC74  F010         	call	i2_SetPin595	;wreg free
  9022                           
  9023                           ;PDU.c: 97: SetPin595(1, 3, OFF);
  9024  000304  0E00               	movlw	0
  9025  000306  6E02               	movwf	i2SetPin595@Reg+1,c
  9026  000308  0E01               	movlw	1
  9027  00030A  6E01               	movwf	i2SetPin595@Reg,c
  9028  00030C  0E00               	movlw	0
  9029  00030E  6E04               	movwf	i2SetPin595@pin+1,c
  9030  000310  0E03               	movlw	3
  9031  000312  6E03               	movwf	i2SetPin595@pin,c
  9032  000314  0E00               	movlw	0
  9033  000316  6E06               	movwf	i2SetPin595@value+1,c
  9034  000318  0E00               	movlw	0
  9035  00031A  6E05               	movwf	i2SetPin595@value,c
  9036  00031C  EC74  F010         	call	i2_SetPin595	;wreg free
  9037                           
  9038                           ;PDU.c: 98: SetPin595(1, 2, OFF);
  9039  000320  0E00               	movlw	0
  9040  000322  6E02               	movwf	i2SetPin595@Reg+1,c
  9041  000324  0E01               	movlw	1
  9042  000326  6E01               	movwf	i2SetPin595@Reg,c
  9043  000328  0E00               	movlw	0
  9044  00032A  6E04               	movwf	i2SetPin595@pin+1,c
  9045  00032C  0E02               	movlw	2
  9046  00032E  6E03               	movwf	i2SetPin595@pin,c
  9047  000330  0E00               	movlw	0
  9048  000332  6E06               	movwf	i2SetPin595@value+1,c
  9049  000334  0E00               	movlw	0
  9050  000336  6E05               	movwf	i2SetPin595@value,c
  9051  000338  EC74  F010         	call	i2_SetPin595	;wreg free
  9052                           
  9053                           ;PDU.c: 99: SetPin595(2, 4, OFF);
  9054  00033C  0E00               	movlw	0
  9055  00033E  6E02               	movwf	i2SetPin595@Reg+1,c
  9056  000340  0E02               	movlw	2
  9057  000342  6E01               	movwf	i2SetPin595@Reg,c
  9058  000344  0E00               	movlw	0
  9059  000346  6E04               	movwf	i2SetPin595@pin+1,c
  9060  000348  0E04               	movlw	4
  9061  00034A  6E03               	movwf	i2SetPin595@pin,c
  9062  00034C  0E00               	movlw	0
  9063  00034E  6E06               	movwf	i2SetPin595@value+1,c
  9064  000350  0E00               	movlw	0
  9065  000352  6E05               	movwf	i2SetPin595@value,c
  9066  000354  EC74  F010         	call	i2_SetPin595	;wreg free
  9067                           
  9068                           ;PDU.c: 100: SetPin595(2, 3, OFF);
  9069  000358  0E00               	movlw	0
  9070  00035A  6E02               	movwf	i2SetPin595@Reg+1,c
  9071  00035C  0E02               	movlw	2
  9072  00035E  6E01               	movwf	i2SetPin595@Reg,c
  9073  000360  0E00               	movlw	0
  9074  000362  6E04               	movwf	i2SetPin595@pin+1,c
  9075  000364  0E03               	movlw	3
  9076  000366  6E03               	movwf	i2SetPin595@pin,c
  9077  000368  0E00               	movlw	0
  9078  00036A  6E06               	movwf	i2SetPin595@value+1,c
  9079  00036C  0E00               	movlw	0
  9080  00036E  6E05               	movwf	i2SetPin595@value,c
  9081  000370  EC74  F010         	call	i2_SetPin595	;wreg free
  9082                           
  9083                           ;PDU.c: 101: SetPin595(2, 2, OFF);
  9084  000374  0E00               	movlw	0
  9085  000376  6E02               	movwf	i2SetPin595@Reg+1,c
  9086  000378  0E02               	movlw	2
  9087  00037A  6E01               	movwf	i2SetPin595@Reg,c
  9088  00037C  0E00               	movlw	0
  9089  00037E  6E04               	movwf	i2SetPin595@pin+1,c
  9090  000380  0E02               	movlw	2
  9091  000382  6E03               	movwf	i2SetPin595@pin,c
  9092  000384  0E00               	movlw	0
  9093  000386  6E06               	movwf	i2SetPin595@value+1,c
  9094  000388  0E00               	movlw	0
  9095  00038A  6E05               	movwf	i2SetPin595@value,c
  9096  00038C  EC74  F010         	call	i2_SetPin595	;wreg free
  9097                           
  9098                           ;PDU.c: 102: SetPin595(3, 4, ON);
  9099  000390  0E00               	movlw	0
  9100  000392  6E02               	movwf	i2SetPin595@Reg+1,c
  9101  000394  0E03               	movlw	3
  9102  000396  6E01               	movwf	i2SetPin595@Reg,c
  9103  000398  0E00               	movlw	0
  9104  00039A  6E04               	movwf	i2SetPin595@pin+1,c
  9105  00039C  0E04               	movlw	4
  9106  00039E  6E03               	movwf	i2SetPin595@pin,c
  9107  0003A0  0E00               	movlw	0
  9108  0003A2  6E06               	movwf	i2SetPin595@value+1,c
  9109  0003A4  0E01               	movlw	1
  9110  0003A6  6E05               	movwf	i2SetPin595@value,c
  9111  0003A8  EC74  F010         	call	i2_SetPin595	;wreg free
  9112                           
  9113                           ;PDU.c: 103: SetPin595(3, 3, OFF);
  9114  0003AC  0E00               	movlw	0
  9115  0003AE  6E02               	movwf	i2SetPin595@Reg+1,c
  9116  0003B0  0E03               	movlw	3
  9117  0003B2  6E01               	movwf	i2SetPin595@Reg,c
  9118  0003B4  0E00               	movlw	0
  9119  0003B6  6E04               	movwf	i2SetPin595@pin+1,c
  9120  0003B8  0E03               	movlw	3
  9121  0003BA  6E03               	movwf	i2SetPin595@pin,c
  9122  0003BC  0E00               	movlw	0
  9123  0003BE  6E06               	movwf	i2SetPin595@value+1,c
  9124  0003C0  0E00               	movlw	0
  9125  0003C2  6E05               	movwf	i2SetPin595@value,c
  9126  0003C4  EC74  F010         	call	i2_SetPin595	;wreg free
  9127                           
  9128                           ;PDU.c: 104: SetPin595(3, 2, OFF);
  9129  0003C8  0E00               	movlw	0
  9130  0003CA  6E02               	movwf	i2SetPin595@Reg+1,c
  9131  0003CC  0E03               	movlw	3
  9132  0003CE  6E01               	movwf	i2SetPin595@Reg,c
  9133  0003D0  0E00               	movlw	0
  9134  0003D2  6E04               	movwf	i2SetPin595@pin+1,c
  9135  0003D4  0E02               	movlw	2
  9136  0003D6  6E03               	movwf	i2SetPin595@pin,c
  9137  0003D8  0E00               	movlw	0
  9138  0003DA  6E06               	movwf	i2SetPin595@value+1,c
  9139  0003DC  0E00               	movlw	0
  9140  0003DE  6E05               	movwf	i2SetPin595@value,c
  9141  0003E0  EC74  F010         	call	i2_SetPin595	;wreg free
  9142                           
  9143                           ;PDU.c: 105: Update();
  9144  0003E4  EC00  F013         	call	i2_Update	;wreg free
  9145                           
  9146                           ;PDU.c: 106: CurrentADC[1] = ADC_GetConversion(U5Multisense);
  9147  0003E8  0E10               	movlw	16
  9148  0003EA  ECBB  F011         	call	_ADC_GetConversion
  9149  0003EE  C001  F06E         	movff	?_ADC_GetConversion,_CurrentADC+2
  9150  0003F2  C002  F06F         	movff	?_ADC_GetConversion+1,_CurrentADC+3
  9151                           
  9152                           ;PDU.c: 108: }
  9153  0003F6  0012               	return	
  9154  0003F8                     i2l3294:
  9155                           
  9156                           ;PDU.c: 109: else if(gather == 4){
  9157  0003F8  0E04               	movlw	4
  9158  0003FA  180E               	xorwf	ReadCurrent@gather,w,c
  9159  0003FC  A4D8               	btfss	status,2,c
  9160  0003FE  D088               	goto	i2l3300
  9161                           
  9162                           ;PDU.c: 111: SetPin595(1, 4, ON);
  9163  000400  0E00               	movlw	0
  9164  000402  6E02               	movwf	i2SetPin595@Reg+1,c
  9165  000404  0E01               	movlw	1
  9166  000406  6E01               	movwf	i2SetPin595@Reg,c
  9167  000408  0E00               	movlw	0
  9168  00040A  6E04               	movwf	i2SetPin595@pin+1,c
  9169  00040C  0E04               	movlw	4
  9170  00040E  6E03               	movwf	i2SetPin595@pin,c
  9171  000410  0E00               	movlw	0
  9172  000412  6E06               	movwf	i2SetPin595@value+1,c
  9173  000414  0E01               	movlw	1
  9174  000416  6E05               	movwf	i2SetPin595@value,c
  9175  000418  EC74  F010         	call	i2_SetPin595	;wreg free
  9176                           
  9177                           ;PDU.c: 112: SetPin595(1, 3, ON);
  9178  00041C  0E00               	movlw	0
  9179  00041E  6E02               	movwf	i2SetPin595@Reg+1,c
  9180  000420  0E01               	movlw	1
  9181  000422  6E01               	movwf	i2SetPin595@Reg,c
  9182  000424  0E00               	movlw	0
  9183  000426  6E04               	movwf	i2SetPin595@pin+1,c
  9184  000428  0E03               	movlw	3
  9185  00042A  6E03               	movwf	i2SetPin595@pin,c
  9186  00042C  0E00               	movlw	0
  9187  00042E  6E06               	movwf	i2SetPin595@value+1,c
  9188  000430  0E01               	movlw	1
  9189  000432  6E05               	movwf	i2SetPin595@value,c
  9190  000434  EC74  F010         	call	i2_SetPin595	;wreg free
  9191                           
  9192                           ;PDU.c: 113: SetPin595(1, 2, OFF);
  9193  000438  0E00               	movlw	0
  9194  00043A  6E02               	movwf	i2SetPin595@Reg+1,c
  9195  00043C  0E01               	movlw	1
  9196  00043E  6E01               	movwf	i2SetPin595@Reg,c
  9197  000440  0E00               	movlw	0
  9198  000442  6E04               	movwf	i2SetPin595@pin+1,c
  9199  000444  0E02               	movlw	2
  9200  000446  6E03               	movwf	i2SetPin595@pin,c
  9201  000448  0E00               	movlw	0
  9202  00044A  6E06               	movwf	i2SetPin595@value+1,c
  9203  00044C  0E00               	movlw	0
  9204  00044E  6E05               	movwf	i2SetPin595@value,c
  9205  000450  EC74  F010         	call	i2_SetPin595	;wreg free
  9206                           
  9207                           ;PDU.c: 114: SetPin595(2, 4, OFF);
  9208  000454  0E00               	movlw	0
  9209  000456  6E02               	movwf	i2SetPin595@Reg+1,c
  9210  000458  0E02               	movlw	2
  9211  00045A  6E01               	movwf	i2SetPin595@Reg,c
  9212  00045C  0E00               	movlw	0
  9213  00045E  6E04               	movwf	i2SetPin595@pin+1,c
  9214  000460  0E04               	movlw	4
  9215  000462  6E03               	movwf	i2SetPin595@pin,c
  9216  000464  0E00               	movlw	0
  9217  000466  6E06               	movwf	i2SetPin595@value+1,c
  9218  000468  0E00               	movlw	0
  9219  00046A  6E05               	movwf	i2SetPin595@value,c
  9220  00046C  EC74  F010         	call	i2_SetPin595	;wreg free
  9221                           
  9222                           ;PDU.c: 115: SetPin595(2, 3, OFF);
  9223  000470  0E00               	movlw	0
  9224  000472  6E02               	movwf	i2SetPin595@Reg+1,c
  9225  000474  0E02               	movlw	2
  9226  000476  6E01               	movwf	i2SetPin595@Reg,c
  9227  000478  0E00               	movlw	0
  9228  00047A  6E04               	movwf	i2SetPin595@pin+1,c
  9229  00047C  0E03               	movlw	3
  9230  00047E  6E03               	movwf	i2SetPin595@pin,c
  9231  000480  0E00               	movlw	0
  9232  000482  6E06               	movwf	i2SetPin595@value+1,c
  9233  000484  0E00               	movlw	0
  9234  000486  6E05               	movwf	i2SetPin595@value,c
  9235  000488  EC74  F010         	call	i2_SetPin595	;wreg free
  9236                           
  9237                           ;PDU.c: 116: SetPin595(2, 2, OFF);
  9238  00048C  0E00               	movlw	0
  9239  00048E  6E02               	movwf	i2SetPin595@Reg+1,c
  9240  000490  0E02               	movlw	2
  9241  000492  6E01               	movwf	i2SetPin595@Reg,c
  9242  000494  0E00               	movlw	0
  9243  000496  6E04               	movwf	i2SetPin595@pin+1,c
  9244  000498  0E02               	movlw	2
  9245  00049A  6E03               	movwf	i2SetPin595@pin,c
  9246  00049C  0E00               	movlw	0
  9247  00049E  6E06               	movwf	i2SetPin595@value+1,c
  9248  0004A0  0E00               	movlw	0
  9249  0004A2  6E05               	movwf	i2SetPin595@value,c
  9250  0004A4  EC74  F010         	call	i2_SetPin595	;wreg free
  9251                           
  9252                           ;PDU.c: 117: SetPin595(3, 4, OFF);
  9253  0004A8  0E00               	movlw	0
  9254  0004AA  6E02               	movwf	i2SetPin595@Reg+1,c
  9255  0004AC  0E03               	movlw	3
  9256  0004AE  6E01               	movwf	i2SetPin595@Reg,c
  9257  0004B0  0E00               	movlw	0
  9258  0004B2  6E04               	movwf	i2SetPin595@pin+1,c
  9259  0004B4  0E04               	movlw	4
  9260  0004B6  6E03               	movwf	i2SetPin595@pin,c
  9261  0004B8  0E00               	movlw	0
  9262  0004BA  6E06               	movwf	i2SetPin595@value+1,c
  9263  0004BC  0E00               	movlw	0
  9264  0004BE  6E05               	movwf	i2SetPin595@value,c
  9265  0004C0  EC74  F010         	call	i2_SetPin595	;wreg free
  9266                           
  9267                           ;PDU.c: 118: SetPin595(3, 3, OFF);
  9268  0004C4  0E00               	movlw	0
  9269  0004C6  6E02               	movwf	i2SetPin595@Reg+1,c
  9270  0004C8  0E03               	movlw	3
  9271  0004CA  6E01               	movwf	i2SetPin595@Reg,c
  9272  0004CC  0E00               	movlw	0
  9273  0004CE  6E04               	movwf	i2SetPin595@pin+1,c
  9274  0004D0  0E03               	movlw	3
  9275  0004D2  6E03               	movwf	i2SetPin595@pin,c
  9276  0004D4  0E00               	movlw	0
  9277  0004D6  6E06               	movwf	i2SetPin595@value+1,c
  9278  0004D8  0E00               	movlw	0
  9279  0004DA  6E05               	movwf	i2SetPin595@value,c
  9280  0004DC  EC74  F010         	call	i2_SetPin595	;wreg free
  9281                           
  9282                           ;PDU.c: 119: SetPin595(3, 2, OFF);
  9283  0004E0  0E00               	movlw	0
  9284  0004E2  6E02               	movwf	i2SetPin595@Reg+1,c
  9285  0004E4  0E03               	movlw	3
  9286  0004E6  6E01               	movwf	i2SetPin595@Reg,c
  9287  0004E8  0E00               	movlw	0
  9288  0004EA  6E04               	movwf	i2SetPin595@pin+1,c
  9289  0004EC  0E02               	movlw	2
  9290  0004EE  6E03               	movwf	i2SetPin595@pin,c
  9291  0004F0  0E00               	movlw	0
  9292  0004F2  6E06               	movwf	i2SetPin595@value+1,c
  9293  0004F4  0E00               	movlw	0
  9294  0004F6  6E05               	movwf	i2SetPin595@value,c
  9295  0004F8  EC74  F010         	call	i2_SetPin595	;wreg free
  9296                           
  9297                           ;PDU.c: 120: Update();
  9298  0004FC  EC00  F013         	call	i2_Update	;wreg free
  9299                           
  9300                           ;PDU.c: 121: CurrentADC[4] = ADC_GetConversion(U10Multisense);
  9301  000500  0E17               	movlw	23
  9302  000502  ECBB  F011         	call	_ADC_GetConversion
  9303  000506  C001  F074         	movff	?_ADC_GetConversion,_CurrentADC+8
  9304  00050A  C002  F075         	movff	?_ADC_GetConversion+1,_CurrentADC+9
  9305                           
  9306                           ;PDU.c: 123: }
  9307  00050E  0012               	return	
  9308  000510                     i2l3300:
  9309                           
  9310                           ;PDU.c: 124: else if(gather == 5){
  9311  000510  0E05               	movlw	5
  9312  000512  180E               	xorwf	ReadCurrent@gather,w,c
  9313  000514  A4D8               	btfss	status,2,c
  9314  000516  D088               	goto	i2l3306
  9315                           
  9316                           ;PDU.c: 126: SetPin595(1, 4, OFF);
  9317  000518  0E00               	movlw	0
  9318  00051A  6E02               	movwf	i2SetPin595@Reg+1,c
  9319  00051C  0E01               	movlw	1
  9320  00051E  6E01               	movwf	i2SetPin595@Reg,c
  9321  000520  0E00               	movlw	0
  9322  000522  6E04               	movwf	i2SetPin595@pin+1,c
  9323  000524  0E04               	movlw	4
  9324  000526  6E03               	movwf	i2SetPin595@pin,c
  9325  000528  0E00               	movlw	0
  9326  00052A  6E06               	movwf	i2SetPin595@value+1,c
  9327  00052C  0E00               	movlw	0
  9328  00052E  6E05               	movwf	i2SetPin595@value,c
  9329  000530  EC74  F010         	call	i2_SetPin595	;wreg free
  9330                           
  9331                           ;PDU.c: 127: SetPin595(1, 3, OFF);
  9332  000534  0E00               	movlw	0
  9333  000536  6E02               	movwf	i2SetPin595@Reg+1,c
  9334  000538  0E01               	movlw	1
  9335  00053A  6E01               	movwf	i2SetPin595@Reg,c
  9336  00053C  0E00               	movlw	0
  9337  00053E  6E04               	movwf	i2SetPin595@pin+1,c
  9338  000540  0E03               	movlw	3
  9339  000542  6E03               	movwf	i2SetPin595@pin,c
  9340  000544  0E00               	movlw	0
  9341  000546  6E06               	movwf	i2SetPin595@value+1,c
  9342  000548  0E00               	movlw	0
  9343  00054A  6E05               	movwf	i2SetPin595@value,c
  9344  00054C  EC74  F010         	call	i2_SetPin595	;wreg free
  9345                           
  9346                           ;PDU.c: 128: SetPin595(1, 2, OFF);
  9347  000550  0E00               	movlw	0
  9348  000552  6E02               	movwf	i2SetPin595@Reg+1,c
  9349  000554  0E01               	movlw	1
  9350  000556  6E01               	movwf	i2SetPin595@Reg,c
  9351  000558  0E00               	movlw	0
  9352  00055A  6E04               	movwf	i2SetPin595@pin+1,c
  9353  00055C  0E02               	movlw	2
  9354  00055E  6E03               	movwf	i2SetPin595@pin,c
  9355  000560  0E00               	movlw	0
  9356  000562  6E06               	movwf	i2SetPin595@value+1,c
  9357  000564  0E00               	movlw	0
  9358  000566  6E05               	movwf	i2SetPin595@value,c
  9359  000568  EC74  F010         	call	i2_SetPin595	;wreg free
  9360                           
  9361                           ;PDU.c: 129: SetPin595(2, 4, ON);
  9362  00056C  0E00               	movlw	0
  9363  00056E  6E02               	movwf	i2SetPin595@Reg+1,c
  9364  000570  0E02               	movlw	2
  9365  000572  6E01               	movwf	i2SetPin595@Reg,c
  9366  000574  0E00               	movlw	0
  9367  000576  6E04               	movwf	i2SetPin595@pin+1,c
  9368  000578  0E04               	movlw	4
  9369  00057A  6E03               	movwf	i2SetPin595@pin,c
  9370  00057C  0E00               	movlw	0
  9371  00057E  6E06               	movwf	i2SetPin595@value+1,c
  9372  000580  0E01               	movlw	1
  9373  000582  6E05               	movwf	i2SetPin595@value,c
  9374  000584  EC74  F010         	call	i2_SetPin595	;wreg free
  9375                           
  9376                           ;PDU.c: 130: SetPin595(2, 3, OFF);
  9377  000588  0E00               	movlw	0
  9378  00058A  6E02               	movwf	i2SetPin595@Reg+1,c
  9379  00058C  0E02               	movlw	2
  9380  00058E  6E01               	movwf	i2SetPin595@Reg,c
  9381  000590  0E00               	movlw	0
  9382  000592  6E04               	movwf	i2SetPin595@pin+1,c
  9383  000594  0E03               	movlw	3
  9384  000596  6E03               	movwf	i2SetPin595@pin,c
  9385  000598  0E00               	movlw	0
  9386  00059A  6E06               	movwf	i2SetPin595@value+1,c
  9387  00059C  0E00               	movlw	0
  9388  00059E  6E05               	movwf	i2SetPin595@value,c
  9389  0005A0  EC74  F010         	call	i2_SetPin595	;wreg free
  9390                           
  9391                           ;PDU.c: 131: SetPin595(2, 2, OFF);
  9392  0005A4  0E00               	movlw	0
  9393  0005A6  6E02               	movwf	i2SetPin595@Reg+1,c
  9394  0005A8  0E02               	movlw	2
  9395  0005AA  6E01               	movwf	i2SetPin595@Reg,c
  9396  0005AC  0E00               	movlw	0
  9397  0005AE  6E04               	movwf	i2SetPin595@pin+1,c
  9398  0005B0  0E02               	movlw	2
  9399  0005B2  6E03               	movwf	i2SetPin595@pin,c
  9400  0005B4  0E00               	movlw	0
  9401  0005B6  6E06               	movwf	i2SetPin595@value+1,c
  9402  0005B8  0E00               	movlw	0
  9403  0005BA  6E05               	movwf	i2SetPin595@value,c
  9404  0005BC  EC74  F010         	call	i2_SetPin595	;wreg free
  9405                           
  9406                           ;PDU.c: 132: SetPin595(3, 4, OFF);
  9407  0005C0  0E00               	movlw	0
  9408  0005C2  6E02               	movwf	i2SetPin595@Reg+1,c
  9409  0005C4  0E03               	movlw	3
  9410  0005C6  6E01               	movwf	i2SetPin595@Reg,c
  9411  0005C8  0E00               	movlw	0
  9412  0005CA  6E04               	movwf	i2SetPin595@pin+1,c
  9413  0005CC  0E04               	movlw	4
  9414  0005CE  6E03               	movwf	i2SetPin595@pin,c
  9415  0005D0  0E00               	movlw	0
  9416  0005D2  6E06               	movwf	i2SetPin595@value+1,c
  9417  0005D4  0E00               	movlw	0
  9418  0005D6  6E05               	movwf	i2SetPin595@value,c
  9419  0005D8  EC74  F010         	call	i2_SetPin595	;wreg free
  9420                           
  9421                           ;PDU.c: 133: SetPin595(3, 3, OFF);
  9422  0005DC  0E00               	movlw	0
  9423  0005DE  6E02               	movwf	i2SetPin595@Reg+1,c
  9424  0005E0  0E03               	movlw	3
  9425  0005E2  6E01               	movwf	i2SetPin595@Reg,c
  9426  0005E4  0E00               	movlw	0
  9427  0005E6  6E04               	movwf	i2SetPin595@pin+1,c
  9428  0005E8  0E03               	movlw	3
  9429  0005EA  6E03               	movwf	i2SetPin595@pin,c
  9430  0005EC  0E00               	movlw	0
  9431  0005EE  6E06               	movwf	i2SetPin595@value+1,c
  9432  0005F0  0E00               	movlw	0
  9433  0005F2  6E05               	movwf	i2SetPin595@value,c
  9434  0005F4  EC74  F010         	call	i2_SetPin595	;wreg free
  9435                           
  9436                           ;PDU.c: 134: SetPin595(3, 2, OFF);
  9437  0005F8  0E00               	movlw	0
  9438  0005FA  6E02               	movwf	i2SetPin595@Reg+1,c
  9439  0005FC  0E03               	movlw	3
  9440  0005FE  6E01               	movwf	i2SetPin595@Reg,c
  9441  000600  0E00               	movlw	0
  9442  000602  6E04               	movwf	i2SetPin595@pin+1,c
  9443  000604  0E02               	movlw	2
  9444  000606  6E03               	movwf	i2SetPin595@pin,c
  9445  000608  0E00               	movlw	0
  9446  00060A  6E06               	movwf	i2SetPin595@value+1,c
  9447  00060C  0E00               	movlw	0
  9448  00060E  6E05               	movwf	i2SetPin595@value,c
  9449  000610  EC74  F010         	call	i2_SetPin595	;wreg free
  9450                           
  9451                           ;PDU.c: 135: Update();
  9452  000614  EC00  F013         	call	i2_Update	;wreg free
  9453                           
  9454                           ;PDU.c: 136: CurrentADC[3] = ADC_GetConversion(U8Multisense);
  9455  000618  0E16               	movlw	22
  9456  00061A  ECBB  F011         	call	_ADC_GetConversion
  9457  00061E  C001  F072         	movff	?_ADC_GetConversion,_CurrentADC+6
  9458  000622  C002  F073         	movff	?_ADC_GetConversion+1,_CurrentADC+7
  9459                           
  9460                           ;PDU.c: 138: }
  9461  000626  0012               	return	
  9462  000628                     i2l3306:
  9463                           
  9464                           ;PDU.c: 139: else if(gather == 6){
  9465  000628  0E06               	movlw	6
  9466  00062A  180E               	xorwf	ReadCurrent@gather,w,c
  9467  00062C  A4D8               	btfss	status,2,c
  9468  00062E  0012               	return	
  9469                           
  9470                           ;PDU.c: 141: SetPin595(1, 4, OFF);
  9471  000630  0E00               	movlw	0
  9472  000632  6E02               	movwf	i2SetPin595@Reg+1,c
  9473  000634  0E01               	movlw	1
  9474  000636  6E01               	movwf	i2SetPin595@Reg,c
  9475  000638  0E00               	movlw	0
  9476  00063A  6E04               	movwf	i2SetPin595@pin+1,c
  9477  00063C  0E04               	movlw	4
  9478  00063E  6E03               	movwf	i2SetPin595@pin,c
  9479  000640  0E00               	movlw	0
  9480  000642  6E06               	movwf	i2SetPin595@value+1,c
  9481  000644  0E00               	movlw	0
  9482  000646  6E05               	movwf	i2SetPin595@value,c
  9483  000648  EC74  F010         	call	i2_SetPin595	;wreg free
  9484                           
  9485                           ;PDU.c: 142: SetPin595(1, 3, OFF);
  9486  00064C  0E00               	movlw	0
  9487  00064E  6E02               	movwf	i2SetPin595@Reg+1,c
  9488  000650  0E01               	movlw	1
  9489  000652  6E01               	movwf	i2SetPin595@Reg,c
  9490  000654  0E00               	movlw	0
  9491  000656  6E04               	movwf	i2SetPin595@pin+1,c
  9492  000658  0E03               	movlw	3
  9493  00065A  6E03               	movwf	i2SetPin595@pin,c
  9494  00065C  0E00               	movlw	0
  9495  00065E  6E06               	movwf	i2SetPin595@value+1,c
  9496  000660  0E00               	movlw	0
  9497  000662  6E05               	movwf	i2SetPin595@value,c
  9498  000664  EC74  F010         	call	i2_SetPin595	;wreg free
  9499                           
  9500                           ;PDU.c: 143: SetPin595(1, 2, OFF);
  9501  000668  0E00               	movlw	0
  9502  00066A  6E02               	movwf	i2SetPin595@Reg+1,c
  9503  00066C  0E01               	movlw	1
  9504  00066E  6E01               	movwf	i2SetPin595@Reg,c
  9505  000670  0E00               	movlw	0
  9506  000672  6E04               	movwf	i2SetPin595@pin+1,c
  9507  000674  0E02               	movlw	2
  9508  000676  6E03               	movwf	i2SetPin595@pin,c
  9509  000678  0E00               	movlw	0
  9510  00067A  6E06               	movwf	i2SetPin595@value+1,c
  9511  00067C  0E00               	movlw	0
  9512  00067E  6E05               	movwf	i2SetPin595@value,c
  9513  000680  EC74  F010         	call	i2_SetPin595	;wreg free
  9514                           
  9515                           ;PDU.c: 144: SetPin595(2, 4, OFF);
  9516  000684  0E00               	movlw	0
  9517  000686  6E02               	movwf	i2SetPin595@Reg+1,c
  9518  000688  0E02               	movlw	2
  9519  00068A  6E01               	movwf	i2SetPin595@Reg,c
  9520  00068C  0E00               	movlw	0
  9521  00068E  6E04               	movwf	i2SetPin595@pin+1,c
  9522  000690  0E04               	movlw	4
  9523  000692  6E03               	movwf	i2SetPin595@pin,c
  9524  000694  0E00               	movlw	0
  9525  000696  6E06               	movwf	i2SetPin595@value+1,c
  9526  000698  0E00               	movlw	0
  9527  00069A  6E05               	movwf	i2SetPin595@value,c
  9528  00069C  EC74  F010         	call	i2_SetPin595	;wreg free
  9529                           
  9530                           ;PDU.c: 145: SetPin595(2, 3, OFF);
  9531  0006A0  0E00               	movlw	0
  9532  0006A2  6E02               	movwf	i2SetPin595@Reg+1,c
  9533  0006A4  0E02               	movlw	2
  9534  0006A6  6E01               	movwf	i2SetPin595@Reg,c
  9535  0006A8  0E00               	movlw	0
  9536  0006AA  6E04               	movwf	i2SetPin595@pin+1,c
  9537  0006AC  0E03               	movlw	3
  9538  0006AE  6E03               	movwf	i2SetPin595@pin,c
  9539  0006B0  0E00               	movlw	0
  9540  0006B2  6E06               	movwf	i2SetPin595@value+1,c
  9541  0006B4  0E00               	movlw	0
  9542  0006B6  6E05               	movwf	i2SetPin595@value,c
  9543  0006B8  EC74  F010         	call	i2_SetPin595	;wreg free
  9544                           
  9545                           ;PDU.c: 146: SetPin595(2, 2, OFF);
  9546  0006BC  0E00               	movlw	0
  9547  0006BE  6E02               	movwf	i2SetPin595@Reg+1,c
  9548  0006C0  0E02               	movlw	2
  9549  0006C2  6E01               	movwf	i2SetPin595@Reg,c
  9550  0006C4  0E00               	movlw	0
  9551  0006C6  6E04               	movwf	i2SetPin595@pin+1,c
  9552  0006C8  0E02               	movlw	2
  9553  0006CA  6E03               	movwf	i2SetPin595@pin,c
  9554  0006CC  0E00               	movlw	0
  9555  0006CE  6E06               	movwf	i2SetPin595@value+1,c
  9556  0006D0  0E00               	movlw	0
  9557  0006D2  6E05               	movwf	i2SetPin595@value,c
  9558  0006D4  EC74  F010         	call	i2_SetPin595	;wreg free
  9559                           
  9560                           ;PDU.c: 147: SetPin595(3, 4, ON);
  9561  0006D8  0E00               	movlw	0
  9562  0006DA  6E02               	movwf	i2SetPin595@Reg+1,c
  9563  0006DC  0E03               	movlw	3
  9564  0006DE  6E01               	movwf	i2SetPin595@Reg,c
  9565  0006E0  0E00               	movlw	0
  9566  0006E2  6E04               	movwf	i2SetPin595@pin+1,c
  9567  0006E4  0E04               	movlw	4
  9568  0006E6  6E03               	movwf	i2SetPin595@pin,c
  9569  0006E8  0E00               	movlw	0
  9570  0006EA  6E06               	movwf	i2SetPin595@value+1,c
  9571  0006EC  0E01               	movlw	1
  9572  0006EE  6E05               	movwf	i2SetPin595@value,c
  9573  0006F0  EC74  F010         	call	i2_SetPin595	;wreg free
  9574                           
  9575                           ;PDU.c: 148: SetPin595(3, 3, ON);
  9576  0006F4  0E00               	movlw	0
  9577  0006F6  6E02               	movwf	i2SetPin595@Reg+1,c
  9578  0006F8  0E03               	movlw	3
  9579  0006FA  6E01               	movwf	i2SetPin595@Reg,c
  9580  0006FC  0E00               	movlw	0
  9581  0006FE  6E04               	movwf	i2SetPin595@pin+1,c
  9582  000700  0E03               	movlw	3
  9583  000702  6E03               	movwf	i2SetPin595@pin,c
  9584  000704  0E00               	movlw	0
  9585  000706  6E06               	movwf	i2SetPin595@value+1,c
  9586  000708  0E01               	movlw	1
  9587  00070A  6E05               	movwf	i2SetPin595@value,c
  9588  00070C  EC74  F010         	call	i2_SetPin595	;wreg free
  9589                           
  9590                           ;PDU.c: 149: SetPin595(3, 2, OFF);
  9591  000710  0E00               	movlw	0
  9592  000712  6E02               	movwf	i2SetPin595@Reg+1,c
  9593  000714  0E03               	movlw	3
  9594  000716  6E01               	movwf	i2SetPin595@Reg,c
  9595  000718  0E00               	movlw	0
  9596  00071A  6E04               	movwf	i2SetPin595@pin+1,c
  9597  00071C  0E02               	movlw	2
  9598  00071E  6E03               	movwf	i2SetPin595@pin,c
  9599  000720  0E00               	movlw	0
  9600  000722  6E06               	movwf	i2SetPin595@value+1,c
  9601  000724  0E00               	movlw	0
  9602  000726  6E05               	movwf	i2SetPin595@value,c
  9603  000728  EC74  F010         	call	i2_SetPin595	;wreg free
  9604                           
  9605                           ;PDU.c: 150: Update();
  9606  00072C  EC00  F013         	call	i2_Update	;wreg free
  9607                           
  9608                           ;PDU.c: 151: CurrentADC[0] = ADC_GetConversion(U5Multisense);
  9609  000730  0E10               	movlw	16
  9610  000732  ECBB  F011         	call	_ADC_GetConversion
  9611  000736  C001  F06C         	movff	?_ADC_GetConversion,_CurrentADC
  9612  00073A  C002  F06D         	movff	?_ADC_GetConversion+1,_CurrentADC+1
  9613  00073E  0012               	return	
  9614  000740                     __end_of_ReadCurrent:
  9615                           	opt stack 0
  9616                           tosu	equ	0xFFF
  9617                           tosh	equ	0xFFE
  9618                           tosl	equ	0xFFD
  9619                           pclatu	equ	0xFFB
  9620                           pclath	equ	0xFFA
  9621                           tblptru	equ	0xFF8
  9622                           tblptrh	equ	0xFF7
  9623                           tblptrl	equ	0xFF6
  9624                           tablat	equ	0xFF5
  9625                           prodh	equ	0xFF4
  9626                           prodl	equ	0xFF3
  9627                           intcon	equ	0xFF2
  9628                           intcon2	equ	0xFF1
  9629                           postinc0	equ	0xFEE
  9630                           fsr0h	equ	0xFEA
  9631                           fsr0l	equ	0xFE9
  9632                           wreg	equ	0xFE8
  9633                           fsr1h	equ	0xFE2
  9634                           fsr1l	equ	0xFE1
  9635                           indf2	equ	0xFDF
  9636                           postinc2	equ	0xFDE
  9637                           postdec2	equ	0xFDD
  9638                           plusw2	equ	0xFDB
  9639                           fsr2h	equ	0xFDA
  9640                           fsr2l	equ	0xFD9
  9641                           status	equ	0xFD8
  9642                           
  9643 ;; *************** function i2_Update *****************
  9644 ;; Defined at:
  9645 ;;		line 225 in file "PDU.c"
  9646 ;; Parameters:    Size  Location     Type
  9647 ;;		None
  9648 ;; Auto vars:     Size  Location     Type
  9649 ;;		None
  9650 ;; Return value:  Size  Location     Type
  9651 ;;                  1    wreg      void 
  9652 ;; Registers used:
  9653 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9654 ;; Tracked objects:
  9655 ;;		On entry : 0/0
  9656 ;;		On exit  : 0/0
  9657 ;;		Unchanged: 0/0
  9658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9659 ;;      Params:         0       0       0       0       0       0       0
  9660 ;;      Locals:         0       0       0       0       0       0       0
  9661 ;;      Temps:          0       0       0       0       0       0       0
  9662 ;;      Totals:         0       0       0       0       0       0       0
  9663 ;;Total ram usage:        0 bytes
  9664 ;; Hardware stack levels used:    1
  9665 ;; Hardware stack levels required when called:    2
  9666 ;; This function calls:
  9667 ;;		i2_writeRegisters
  9668 ;; This function is called by:
  9669 ;;		_ReadCurrent
  9670 ;; This function uses a non-reentrant model
  9671 ;;
  9672                           
  9673                           	psect	text56
  9674  002600                     __ptext56:
  9675                           	opt stack 0
  9676  002600                     i2_Update:
  9677                           	opt stack 19
  9678                           
  9679                           ;PDU.c: 226: writeRegisters();
  9680                           
  9681                           ;incstack = 0
  9682  002600  ECF4  F00D         	call	i2_writeRegisters	;wreg free
  9683  002604  0012               	return		;funcret
  9684  002606                     __end_ofi2_Update:
  9685                           	opt stack 0
  9686                           tosu	equ	0xFFF
  9687                           tosh	equ	0xFFE
  9688                           tosl	equ	0xFFD
  9689                           pclatu	equ	0xFFB
  9690                           pclath	equ	0xFFA
  9691                           tblptru	equ	0xFF8
  9692                           tblptrh	equ	0xFF7
  9693                           tblptrl	equ	0xFF6
  9694                           tablat	equ	0xFF5
  9695                           prodh	equ	0xFF4
  9696                           prodl	equ	0xFF3
  9697                           intcon	equ	0xFF2
  9698                           intcon2	equ	0xFF1
  9699                           postinc0	equ	0xFEE
  9700                           fsr0h	equ	0xFEA
  9701                           fsr0l	equ	0xFE9
  9702                           wreg	equ	0xFE8
  9703                           fsr1h	equ	0xFE2
  9704                           fsr1l	equ	0xFE1
  9705                           indf2	equ	0xFDF
  9706                           postinc2	equ	0xFDE
  9707                           postdec2	equ	0xFDD
  9708                           plusw2	equ	0xFDB
  9709                           fsr2h	equ	0xFDA
  9710                           fsr2l	equ	0xFD9
  9711                           status	equ	0xFD8
  9712                           
  9713 ;; *************** function i2_writeRegisters *****************
  9714 ;; Defined at:
  9715 ;;		line 50 in file "Shift595.c"
  9716 ;; Parameters:    Size  Location     Type
  9717 ;;		None
  9718 ;; Auto vars:     Size  Location     Type
  9719 ;;  writeRegiste    2   11[COMRAM] int 
  9720 ;;  writeRegiste    2    9[COMRAM] int 
  9721 ;; Return value:  Size  Location     Type
  9722 ;;                  1    wreg      void 
  9723 ;; Registers used:
  9724 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9725 ;; Tracked objects:
  9726 ;;		On entry : 0/0
  9727 ;;		On exit  : 0/0
  9728 ;;		Unchanged: 0/0
  9729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9730 ;;      Params:         0       0       0       0       0       0       0
  9731 ;;      Locals:         4       0       0       0       0       0       0
  9732 ;;      Temps:          0       0       0       0       0       0       0
  9733 ;;      Totals:         4       0       0       0       0       0       0
  9734 ;;Total ram usage:        4 bytes
  9735 ;; Hardware stack levels used:    1
  9736 ;; Hardware stack levels required when called:    1
  9737 ;; This function calls:
  9738 ;;		i2_Delay
  9739 ;; This function is called by:
  9740 ;;		i2_Update
  9741 ;; This function uses a non-reentrant model
  9742 ;;
  9743                           
  9744                           	psect	text57
  9745  001BE8                     __ptext57:
  9746                           	opt stack 0
  9747  001BE8                     i2_writeRegisters:
  9748                           	opt stack 19
  9749                           
  9750                           ;Shift595.c: 51: int val = 0;
  9751                           
  9752                           ;incstack = 0
  9753  001BE8  0E00               	movlw	0
  9754  001BEA  6E0B               	movwf	i2writeRegisters@val+1,c
  9755  001BEC  0E00               	movlw	0
  9756  001BEE  6E0A               	movwf	i2writeRegisters@val,c
  9757                           
  9758                           ;Shift595.c: 52: for (int i = 3 * 8 - 1; i >= 0; i--) {
  9759  001BF0  0E00               	movlw	0
  9760  001BF2  6E0D               	movwf	i2writeRegisters@i+1,c
  9761  001BF4  0E17               	movlw	23
  9762  001BF6  6E0C               	movwf	i2writeRegisters@i,c
  9763  001BF8                     i2l2974:
  9764  001BF8  BE0D               	btfsc	i2writeRegisters@i+1,7,c
  9765  001BFA  D01D               	goto	i2l745
  9766                           
  9767                           ;Shift595.c: 53: do { LATD7 = 0; } while(0);
  9768  001BFC  9E8C               	bcf	3980,7,c	;volatile
  9769                           
  9770                           ;Shift595.c: 55: val = registers[i];
  9771  001BFE  90D8               	bcf	status,0,c
  9772  001C00  340C               	rlcf	i2writeRegisters@i,w,c
  9773  001C02  6ED9               	movwf	fsr2l,c
  9774  001C04  340D               	rlcf	i2writeRegisters@i+1,w,c
  9775  001C06  6EDA               	movwf	fsr2h,c
  9776  001C08  0E00               	movlw	low _registers
  9777  001C0A  26D9               	addwf	fsr2l,f,c
  9778  001C0C  0E01               	movlw	high _registers
  9779  001C0E  22DA               	addwfc	fsr2h,f,c
  9780  001C10  CFDE F00A          	movff	postinc2,i2writeRegisters@val
  9781  001C14  CFDD F00B          	movff	postdec2,i2writeRegisters@val+1
  9782                           
  9783                           ;Shift595.c: 56: if (val == 1) {
  9784  001C18  040A               	decf	i2writeRegisters@val,w,c
  9785  001C1A  100B               	iorwf	i2writeRegisters@val+1,w,c
  9786  001C1C  A4D8               	btfss	status,2,c
  9787  001C1E  D002               	goto	i2l2982
  9788                           
  9789                           ;Shift595.c: 57: do { LATD4 = 1; } while(0);
  9790  001C20  888C               	bsf	3980,4,c	;volatile
  9791                           
  9792                           ;Shift595.c: 58: } else if (val == 0) {
  9793  001C22  D004               	goto	i2l743
  9794  001C24                     i2l2982:
  9795  001C24  500A               	movf	i2writeRegisters@val,w,c
  9796  001C26  100B               	iorwf	i2writeRegisters@val+1,w,c
  9797  001C28  B4D8               	btfsc	status,2,c
  9798                           
  9799                           ;Shift595.c: 59: do { LATD4 = 0; } while(0);
  9800  001C2A  988C               	bcf	3980,4,c	;volatile
  9801  001C2C                     i2l743:
  9802  001C2C  8E8C               	bsf	3980,7,c	;volatile
  9803  001C2E  060C               	decf	i2writeRegisters@i,f,c
  9804  001C30  A0D8               	btfss	status,0,c
  9805  001C32  060D               	decf	i2writeRegisters@i+1,f,c
  9806  001C34  D7E1               	goto	i2l2974
  9807  001C36                     i2l745:
  9808  001C36  9E8C               	bcf	3980,7,c	;volatile
  9809                           
  9810                           ;Shift595.c: 67: Delay(1);
  9811  001C38  0E01               	movlw	1
  9812  001C3A  6E01               	movwf	i2Delay@wait,c
  9813  001C3C  0E00               	movlw	0
  9814  001C3E  6E02               	movwf	i2Delay@wait+1,c
  9815  001C40  0E00               	movlw	0
  9816  001C42  6E03               	movwf	i2Delay@wait+2,c
  9817  001C44  0E00               	movlw	0
  9818  001C46  6E04               	movwf	i2Delay@wait+3,c
  9819  001C48  ECC0  F010         	call	i2_Delay	;wreg free
  9820                           
  9821                           ;Shift595.c: 68: do { LATD6 = 1; } while(0);
  9822  001C4C  8C8C               	bsf	3980,6,c	;volatile
  9823                           
  9824                           ;Shift595.c: 69: Delay(1);
  9825  001C4E  0E01               	movlw	1
  9826  001C50  6E01               	movwf	i2Delay@wait,c
  9827  001C52  0E00               	movlw	0
  9828  001C54  6E02               	movwf	i2Delay@wait+1,c
  9829  001C56  0E00               	movlw	0
  9830  001C58  6E03               	movwf	i2Delay@wait+2,c
  9831  001C5A  0E00               	movlw	0
  9832  001C5C  6E04               	movwf	i2Delay@wait+3,c
  9833  001C5E  ECC0  F010         	call	i2_Delay	;wreg free
  9834                           
  9835                           ;Shift595.c: 70: do { LATD6 = 0; } while(0);
  9836  001C62  9C8C               	bcf	3980,6,c	;volatile
  9837  001C64  0012               	return	
  9838  001C66                     __end_ofi2_writeRegisters:
  9839                           	opt stack 0
  9840                           tosu	equ	0xFFF
  9841                           tosh	equ	0xFFE
  9842                           tosl	equ	0xFFD
  9843                           pclatu	equ	0xFFB
  9844                           pclath	equ	0xFFA
  9845                           tblptru	equ	0xFF8
  9846                           tblptrh	equ	0xFF7
  9847                           tblptrl	equ	0xFF6
  9848                           tablat	equ	0xFF5
  9849                           prodh	equ	0xFF4
  9850                           prodl	equ	0xFF3
  9851                           intcon	equ	0xFF2
  9852                           intcon2	equ	0xFF1
  9853                           postinc0	equ	0xFEE
  9854                           fsr0h	equ	0xFEA
  9855                           fsr0l	equ	0xFE9
  9856                           wreg	equ	0xFE8
  9857                           fsr1h	equ	0xFE2
  9858                           fsr1l	equ	0xFE1
  9859                           indf2	equ	0xFDF
  9860                           postinc2	equ	0xFDE
  9861                           postdec2	equ	0xFDD
  9862                           plusw2	equ	0xFDB
  9863                           fsr2h	equ	0xFDA
  9864                           fsr2l	equ	0xFD9
  9865                           status	equ	0xFD8
  9866                           
  9867 ;; *************** function i2_Delay *****************
  9868 ;; Defined at:
  9869 ;;		line 9 in file "Functions.c"
  9870 ;; Parameters:    Size  Location     Type
  9871 ;;  wait            4    0[COMRAM] long 
  9872 ;; Auto vars:     Size  Location     Type
  9873 ;;  Delay           4    5[COMRAM] long 
  9874 ;; Return value:  Size  Location     Type
  9875 ;;                  1    wreg      void 
  9876 ;; Registers used:
  9877 ;;		wreg, status,2, status,0
  9878 ;; Tracked objects:
  9879 ;;		On entry : 0/0
  9880 ;;		On exit  : 0/0
  9881 ;;		Unchanged: 0/0
  9882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9883 ;;      Params:         4       0       0       0       0       0       0
  9884 ;;      Locals:         4       0       0       0       0       0       0
  9885 ;;      Temps:          1       0       0       0       0       0       0
  9886 ;;      Totals:         9       0       0       0       0       0       0
  9887 ;;Total ram usage:        9 bytes
  9888 ;; Hardware stack levels used:    1
  9889 ;; This function calls:
  9890 ;;		Nothing
  9891 ;; This function is called by:
  9892 ;;		i2_writeRegisters
  9893 ;; This function uses a non-reentrant model
  9894 ;;
  9895                           
  9896                           	psect	text58
  9897  002180                     __ptext58:
  9898                           	opt stack 0
  9899  002180                     i2_Delay:
  9900                           	opt stack 19
  9901                           
  9902                           ;Functions.c: 10: long int i = 0;
  9903                           
  9904                           ;incstack = 0
  9905  002180  0E00               	movlw	0
  9906  002182  6E06               	movwf	i2Delay@i,c
  9907  002184  0E00               	movlw	0
  9908  002186  6E07               	movwf	i2Delay@i+1,c
  9909  002188  0E00               	movlw	0
  9910  00218A  6E08               	movwf	i2Delay@i+2,c
  9911  00218C  0E00               	movlw	0
  9912  00218E  6E09               	movwf	i2Delay@i+3,c
  9913                           
  9914                           ;Functions.c: 11: for (; wait > i; i++) {
  9915  002190  D00D               	goto	i2l2876
  9916  002192                     i2l2872:
  9917                           
  9918                           ;Functions.c: 12: _delay((unsigned long)((1)*(8000000/4000.0)));
  9919  002192  0E03               	movlw	3
  9920  002194  6E05               	movwf	??i2_Delay& (0+255),c
  9921  002196  0E98               	movlw	152
  9922  002198                     i2u436_47:
  9923  002198  2EE8               	decfsz	wreg,f,c
  9924  00219A  D7FE               	goto	i2u436_47
  9925  00219C  2E05               	decfsz	??i2_Delay& (0+255),f,c
  9926  00219E  D7FC               	goto	i2u436_47
  9927  0021A0  0E01               	movlw	1
  9928  0021A2  2606               	addwf	i2Delay@i,f,c
  9929  0021A4  0E00               	movlw	0
  9930  0021A6  2207               	addwfc	i2Delay@i+1,f,c
  9931  0021A8  2208               	addwfc	i2Delay@i+2,f,c
  9932  0021AA  2209               	addwfc	i2Delay@i+3,f,c
  9933  0021AC                     i2l2876:
  9934  0021AC  5001               	movf	i2Delay@wait,w,c
  9935  0021AE  5C06               	subwf	i2Delay@i,w,c
  9936  0021B0  5002               	movf	i2Delay@wait+1,w,c
  9937  0021B2  5807               	subwfb	i2Delay@i+1,w,c
  9938  0021B4  5003               	movf	i2Delay@wait+2,w,c
  9939  0021B6  5808               	subwfb	i2Delay@i+2,w,c
  9940  0021B8  5009               	movf	i2Delay@i+3,w,c
  9941  0021BA  0A80               	xorlw	128
  9942  0021BC  6E05               	movwf	??i2_Delay& (0+255),c
  9943  0021BE  5004               	movf	i2Delay@wait+3,w,c
  9944  0021C0  0A80               	xorlw	128
  9945  0021C2  5805               	subwfb	??i2_Delay& (0+255),w,c
  9946  0021C4  B0D8               	btfsc	status,0,c
  9947  0021C6  0012               	return	
  9948  0021C8  D7E4               	goto	i2l2872
  9949  0021CA                     __end_ofi2_Delay:
  9950                           	opt stack 0
  9951                           tosu	equ	0xFFF
  9952                           tosh	equ	0xFFE
  9953                           tosl	equ	0xFFD
  9954                           pclatu	equ	0xFFB
  9955                           pclath	equ	0xFFA
  9956                           tblptru	equ	0xFF8
  9957                           tblptrh	equ	0xFF7
  9958                           tblptrl	equ	0xFF6
  9959                           tablat	equ	0xFF5
  9960                           prodh	equ	0xFF4
  9961                           prodl	equ	0xFF3
  9962                           intcon	equ	0xFF2
  9963                           intcon2	equ	0xFF1
  9964                           postinc0	equ	0xFEE
  9965                           fsr0h	equ	0xFEA
  9966                           fsr0l	equ	0xFE9
  9967                           wreg	equ	0xFE8
  9968                           fsr1h	equ	0xFE2
  9969                           fsr1l	equ	0xFE1
  9970                           indf2	equ	0xFDF
  9971                           postinc2	equ	0xFDE
  9972                           postdec2	equ	0xFDD
  9973                           plusw2	equ	0xFDB
  9974                           fsr2h	equ	0xFDA
  9975                           fsr2l	equ	0xFD9
  9976                           status	equ	0xFD8
  9977                           
  9978 ;; *************** function i2_SetPin595 *****************
  9979 ;; Defined at:
  9980 ;;		line 32 in file "Shift595.c"
  9981 ;; Parameters:    Size  Location     Type
  9982 ;;  Reg             2    0[COMRAM] int 
  9983 ;;  pin             2    2[COMRAM] int 
  9984 ;;  value           2    4[COMRAM] int 
  9985 ;; Auto vars:     Size  Location     Type
  9986 ;;		None
  9987 ;; Return value:  Size  Location     Type
  9988 ;;                  1    wreg      void 
  9989 ;; Registers used:
  9990 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9991 ;; Tracked objects:
  9992 ;;		On entry : 0/0
  9993 ;;		On exit  : 0/0
  9994 ;;		Unchanged: 0/0
  9995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9996 ;;      Params:         6       0       0       0       0       0       0
  9997 ;;      Locals:         0       0       0       0       0       0       0
  9998 ;;      Temps:          4       0       0       0       0       0       0
  9999 ;;      Totals:        10       0       0       0       0       0       0
 10000 ;;Total ram usage:       10 bytes
 10001 ;; Hardware stack levels used:    1
 10002 ;; This function calls:
 10003 ;;		Nothing
 10004 ;; This function is called by:
 10005 ;;		_ReadCurrent
 10006 ;; This function uses a non-reentrant model
 10007 ;;
 10008                           
 10009                           	psect	text59
 10010  0020E8                     __ptext59:
 10011                           	opt stack 0
 10012  0020E8                     i2_SetPin595:
 10013                           	opt stack 21
 10014                           
 10015                           ;Shift595.c: 33: registers[((Reg - 1)*8) + pin] = value;
 10016                           
 10017                           ;incstack = 0
 10018  0020E8  0EF0               	movlw	240
 10019  0020EA  6E07               	movwf	??i2_SetPin595& (0+255),c
 10020  0020EC  0EFF               	movlw	255
 10021  0020EE  6E08               	movwf	(??i2_SetPin595+1)& (0+255),c
 10022  0020F0  C001  F009         	movff	i2SetPin595@Reg,??i2_SetPin595+2
 10023  0020F4  C002  F00A         	movff	i2SetPin595@Reg+1,??i2_SetPin595+3
 10024  0020F8  90D8               	bcf	status,0,c
 10025  0020FA  3609               	rlcf	??i2_SetPin595+2,f,c
 10026  0020FC  360A               	rlcf	??i2_SetPin595+3,f,c
 10027  0020FE  90D8               	bcf	status,0,c
 10028  002100  3609               	rlcf	??i2_SetPin595+2,f,c
 10029  002102  360A               	rlcf	??i2_SetPin595+3,f,c
 10030  002104  90D8               	bcf	status,0,c
 10031  002106  3609               	rlcf	??i2_SetPin595+2,f,c
 10032  002108  360A               	rlcf	??i2_SetPin595+3,f,c
 10033  00210A  5003               	movf	i2SetPin595@pin,w,c
 10034  00210C  2609               	addwf	??i2_SetPin595+2,f,c
 10035  00210E  5004               	movf	i2SetPin595@pin+1,w,c
 10036  002110  220A               	addwfc	??i2_SetPin595+3,f,c
 10037  002112  90D8               	bcf	status,0,c
 10038  002114  3609               	rlcf	??i2_SetPin595+2,f,c
 10039  002116  360A               	rlcf	??i2_SetPin595+3,f,c
 10040  002118  5007               	movf	??i2_SetPin595,w,c
 10041  00211A  2609               	addwf	??i2_SetPin595+2,f,c
 10042  00211C  5008               	movf	??i2_SetPin595+1,w,c
 10043  00211E  220A               	addwfc	??i2_SetPin595+3,f,c
 10044  002120  0E00               	movlw	low _registers
 10045  002122  2409               	addwf	??i2_SetPin595+2,w,c
 10046  002124  6ED9               	movwf	fsr2l,c
 10047  002126  0E01               	movlw	high _registers
 10048  002128  200A               	addwfc	??i2_SetPin595+3,w,c
 10049  00212A  6EDA               	movwf	fsr2h,c
 10050  00212C  C005  FFDE         	movff	i2SetPin595@value,postinc2
 10051  002130  C006  FFDD         	movff	i2SetPin595@value+1,postdec2
 10052  002134  0012               	return		;funcret
 10053  002136                     __end_ofi2_SetPin595:
 10054                           	opt stack 0
 10055                           tosu	equ	0xFFF
 10056                           tosh	equ	0xFFE
 10057                           tosl	equ	0xFFD
 10058                           pclatu	equ	0xFFB
 10059                           pclath	equ	0xFFA
 10060                           tblptru	equ	0xFF8
 10061                           tblptrh	equ	0xFF7
 10062                           tblptrl	equ	0xFF6
 10063                           tablat	equ	0xFF5
 10064                           prodh	equ	0xFF4
 10065                           prodl	equ	0xFF3
 10066                           intcon	equ	0xFF2
 10067                           intcon2	equ	0xFF1
 10068                           postinc0	equ	0xFEE
 10069                           fsr0h	equ	0xFEA
 10070                           fsr0l	equ	0xFE9
 10071                           wreg	equ	0xFE8
 10072                           fsr1h	equ	0xFE2
 10073                           fsr1l	equ	0xFE1
 10074                           indf2	equ	0xFDF
 10075                           postinc2	equ	0xFDE
 10076                           postdec2	equ	0xFDD
 10077                           plusw2	equ	0xFDB
 10078                           fsr2h	equ	0xFDA
 10079                           fsr2l	equ	0xFD9
 10080                           status	equ	0xFD8
 10081                           
 10082 ;; *************** function _ADC_GetConversion *****************
 10083 ;; Defined at:
 10084 ;;		line 109 in file "mcc_generated_files/adc.c"
 10085 ;; Parameters:    Size  Location     Type
 10086 ;;  channel         1    wreg     enum E7738
 10087 ;; Auto vars:     Size  Location     Type
 10088 ;;  channel         1    4[COMRAM] enum E7738
 10089 ;; Return value:  Size  Location     Type
 10090 ;;                  2    0[COMRAM] unsigned int 
 10091 ;; Registers used:
 10092 ;;		wreg, status,2, status,0
 10093 ;; Tracked objects:
 10094 ;;		On entry : 0/0
 10095 ;;		On exit  : 0/0
 10096 ;;		Unchanged: 0/0
 10097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10098 ;;      Params:         2       0       0       0       0       0       0
 10099 ;;      Locals:         1       0       0       0       0       0       0
 10100 ;;      Temps:          2       0       0       0       0       0       0
 10101 ;;      Totals:         5       0       0       0       0       0       0
 10102 ;;Total ram usage:        5 bytes
 10103 ;; Hardware stack levels used:    1
 10104 ;; This function calls:
 10105 ;;		Nothing
 10106 ;; This function is called by:
 10107 ;;		_ReadCurrent
 10108 ;; This function uses a non-reentrant model
 10109 ;;
 10110                           
 10111                           	psect	text60
 10112  002376                     __ptext60:
 10113                           	opt stack 0
 10114  002376                     _ADC_GetConversion:
 10115                           	opt stack 21
 10116                           
 10117                           ;incstack = 0
 10118                           ;ADC_GetConversion@channel stored from wreg
 10119  002376  6E05               	movwf	ADC_GetConversion@channel,c
 10120                           
 10121                           ;adc.c: 112: ADCON0bits.CHS = channel;
 10122  002378  C005  F003         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
 10123  00237C  4603               	rlncf	??_ADC_GetConversion,f,c
 10124  00237E  4603               	rlncf	??_ADC_GetConversion,f,c
 10125  002380  50C2               	movf	4034,w,c	;volatile
 10126  002382  1803               	xorwf	??_ADC_GetConversion,w,c
 10127  002384  0B83               	andlw	-125
 10128  002386  1803               	xorwf	??_ADC_GetConversion,w,c
 10129  002388  6EC2               	movwf	4034,c	;volatile
 10130                           
 10131                           ;adc.c: 115: ADCON0bits.ADON = 1;
 10132  00238A  80C2               	bsf	4034,0,c	;volatile
 10133                           
 10134                           ;adc.c: 119: ADCON0bits.GO_nDONE = 1;
 10135  00238C  82C2               	bsf	4034,1,c	;volatile
 10136  00238E                     i2l31:
 10137  00238E  B2C2               	btfsc	4034,1,c	;volatile
 10138  002390  D7FE               	goto	i2l31
 10139                           
 10140                           ;adc.c: 124: }
 10141                           ;adc.c: 127: return ((ADRESH << 8) + ADRESL);
 10142  002392  50C4               	movf	4036,w,c	;volatile
 10143  002394  6E04               	movwf	(??_ADC_GetConversion+1)& (0+255),c
 10144  002396  6A03               	clrf	??_ADC_GetConversion& (0+255),c
 10145  002398  50C3               	movf	4035,w,c	;volatile
 10146  00239A  2403               	addwf	??_ADC_GetConversion,w,c
 10147  00239C  6E01               	movwf	?_ADC_GetConversion,c
 10148  00239E  0E00               	movlw	0
 10149  0023A0  2004               	addwfc	??_ADC_GetConversion+1,w,c
 10150  0023A2  6E02               	movwf	?_ADC_GetConversion+1,c
 10151  0023A4  0012               	return	
 10152  0023A6                     __end_of_ADC_GetConversion:
 10153                           	opt stack 0
 10154                           tosu	equ	0xFFF
 10155                           tosh	equ	0xFFE
 10156                           tosl	equ	0xFFD
 10157                           pclatu	equ	0xFFB
 10158                           pclath	equ	0xFFA
 10159                           tblptru	equ	0xFF8
 10160                           tblptrh	equ	0xFF7
 10161                           tblptrl	equ	0xFF6
 10162                           tablat	equ	0xFF5
 10163                           prodh	equ	0xFF4
 10164                           prodl	equ	0xFF3
 10165                           intcon	equ	0xFF2
 10166                           intcon2	equ	0xFF1
 10167                           postinc0	equ	0xFEE
 10168                           fsr0h	equ	0xFEA
 10169                           fsr0l	equ	0xFE9
 10170                           wreg	equ	0xFE8
 10171                           fsr1h	equ	0xFE2
 10172                           fsr1l	equ	0xFE1
 10173                           indf2	equ	0xFDF
 10174                           postinc2	equ	0xFDE
 10175                           postdec2	equ	0xFDD
 10176                           plusw2	equ	0xFDB
 10177                           fsr2h	equ	0xFDA
 10178                           fsr2l	equ	0xFD9
 10179                           status	equ	0xFD8
 10180                           
 10181 ;; *************** function _FuseSystem *****************
 10182 ;; Defined at:
 10183 ;;		line 175 in file "PDU.c"
 10184 ;; Parameters:    Size  Location     Type
 10185 ;;		None
 10186 ;; Auto vars:     Size  Location     Type
 10187 ;;  i               2    6[COMRAM] int 
 10188 ;;  i               2    8[COMRAM] int 
 10189 ;; Return value:  Size  Location     Type
 10190 ;;                  1    wreg      void 
 10191 ;; Registers used:
 10192 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10193 ;; Tracked objects:
 10194 ;;		On entry : 0/0
 10195 ;;		On exit  : 0/0
 10196 ;;		Unchanged: 0/0
 10197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10198 ;;      Params:         0       0       0       0       0       0       0
 10199 ;;      Locals:         4       0       0       0       0       0       0
 10200 ;;      Temps:          0       0       0       0       0       0       0
 10201 ;;      Totals:         4       0       0       0       0       0       0
 10202 ;;Total ram usage:        4 bytes
 10203 ;; Hardware stack levels used:    1
 10204 ;; Hardware stack levels required when called:    1
 10205 ;; This function calls:
 10206 ;;		___wmul
 10207 ;; This function is called by:
 10208 ;;		_TMR1_ISR
 10209 ;; This function uses a non-reentrant model
 10210 ;;
 10211                           
 10212                           	psect	text61
 10213  001C66                     __ptext61:
 10214                           	opt stack 0
 10215  001C66                     _FuseSystem:
 10216                           	opt stack 21
 10217                           
 10218                           ;PDU.c: 177: for (int i = 0; i < 6; i++) {
 10219                           
 10220                           ;incstack = 0
 10221  001C66  0E00               	movlw	0
 10222  001C68  6E0A               	movwf	FuseSystem@i+1,c
 10223  001C6A  0E00               	movlw	0
 10224  001C6C  6E09               	movwf	FuseSystem@i,c
 10225  001C6E                     i2l3256:
 10226  001C6E  BE0A               	btfsc	FuseSystem@i+1,7,c
 10227  001C70  D006               	goto	i2l3260
 10228  001C72  500A               	movf	FuseSystem@i+1,w,c
 10229  001C74  E127               	bnz	i2l3266
 10230  001C76  0E06               	movlw	6
 10231  001C78  5C09               	subwf	FuseSystem@i,w,c
 10232  001C7A  B0D8               	btfsc	status,0,c
 10233  001C7C  D023               	goto	i2l3266
 10234  001C7E                     i2l3260:
 10235                           
 10236                           ;PDU.c: 178: Current[i] = CurrentADC[i]*48;
 10237  001C7E  90D8               	bcf	status,0,c
 10238  001C80  3409               	rlcf	FuseSystem@i,w,c
 10239  001C82  6ED9               	movwf	fsr2l,c
 10240  001C84  340A               	rlcf	FuseSystem@i+1,w,c
 10241  001C86  6EDA               	movwf	fsr2h,c
 10242  001C88  0E6C               	movlw	low _CurrentADC
 10243  001C8A  26D9               	addwf	fsr2l,f,c
 10244  001C8C  0E00               	movlw	high _CurrentADC
 10245  001C8E  22DA               	addwfc	fsr2h,f,c
 10246  001C90  CFDE F001          	movff	postinc2,___wmul@multiplier
 10247  001C94  CFDD F002          	movff	postdec2,___wmul@multiplier+1
 10248  001C98  0E00               	movlw	0
 10249  001C9A  6E04               	movwf	___wmul@multiplicand+1,c
 10250  001C9C  0E30               	movlw	48
 10251  001C9E  6E03               	movwf	___wmul@multiplicand,c
 10252  001CA0  EC28  F012         	call	___wmul	;wreg free
 10253  001CA4  90D8               	bcf	status,0,c
 10254  001CA6  3409               	rlcf	FuseSystem@i,w,c
 10255  001CA8  6ED9               	movwf	fsr2l,c
 10256  001CAA  340A               	rlcf	FuseSystem@i+1,w,c
 10257  001CAC  6EDA               	movwf	fsr2h,c
 10258  001CAE  0E60               	movlw	low _Current
 10259  001CB0  26D9               	addwf	fsr2l,f,c
 10260  001CB2  0E00               	movlw	high _Current
 10261  001CB4  22DA               	addwfc	fsr2h,f,c
 10262  001CB6  C001  FFDE         	movff	?___wmul,postinc2
 10263  001CBA  C002  FFDD         	movff	?___wmul+1,postdec2
 10264  001CBE  4A09               	infsnz	FuseSystem@i,f,c
 10265  001CC0  2A0A               	incf	FuseSystem@i+1,f,c
 10266  001CC2  D7D5               	goto	i2l3256
 10267  001CC4                     i2l3266:
 10268                           
 10269                           ;PDU.c: 181: }
 10270                           ;PDU.c: 183: for (int i = 0; i < 6; i++) {
 10271  001CC4  0E00               	movlw	0
 10272  001CC6  6E08               	movwf	FuseSystem@i_1537+1,c
 10273  001CC8  0E00               	movlw	0
 10274  001CCA  6E07               	movwf	FuseSystem@i_1537,c
 10275  001CCC                     i2l3268:
 10276  001CCC  BE08               	btfsc	FuseSystem@i_1537+1,7,c
 10277  001CCE  D006               	goto	i2l3272
 10278  001CD0  5008               	movf	FuseSystem@i_1537+1,w,c
 10279  001CD2  E107               	bnz	i2l676
 10280  001CD4  0E06               	movlw	6
 10281  001CD6  5C07               	subwf	FuseSystem@i_1537,w,c
 10282  001CD8  B0D8               	btfsc	status,0,c
 10283  001CDA  0012               	return	
 10284  001CDC                     i2l3272:
 10285  001CDC  4A07               	infsnz	FuseSystem@i_1537,f,c
 10286  001CDE  2A08               	incf	FuseSystem@i_1537+1,f,c
 10287  001CE0  D7F5               	goto	i2l3268
 10288  001CE2                     i2l676:
 10289  001CE2  0012               	return		;funcret
 10290  001CE4                     __end_of_FuseSystem:
 10291                           	opt stack 0
 10292                           tosu	equ	0xFFF
 10293                           tosh	equ	0xFFE
 10294                           tosl	equ	0xFFD
 10295                           pclatu	equ	0xFFB
 10296                           pclath	equ	0xFFA
 10297                           tblptru	equ	0xFF8
 10298                           tblptrh	equ	0xFF7
 10299                           tblptrl	equ	0xFF6
 10300                           tablat	equ	0xFF5
 10301                           prodh	equ	0xFF4
 10302                           prodl	equ	0xFF3
 10303                           intcon	equ	0xFF2
 10304                           intcon2	equ	0xFF1
 10305                           postinc0	equ	0xFEE
 10306                           fsr0h	equ	0xFEA
 10307                           fsr0l	equ	0xFE9
 10308                           wreg	equ	0xFE8
 10309                           fsr1h	equ	0xFE2
 10310                           fsr1l	equ	0xFE1
 10311                           indf2	equ	0xFDF
 10312                           postinc2	equ	0xFDE
 10313                           postdec2	equ	0xFDD
 10314                           plusw2	equ	0xFDB
 10315                           fsr2h	equ	0xFDA
 10316                           fsr2l	equ	0xFD9
 10317                           status	equ	0xFD8
 10318                           
 10319 ;; *************** function ___wmul *****************
 10320 ;; Defined at:
 10321 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
 10322 ;; Parameters:    Size  Location     Type
 10323 ;;  multiplier      2    0[COMRAM] unsigned int 
 10324 ;;  multiplicand    2    2[COMRAM] unsigned int 
 10325 ;; Auto vars:     Size  Location     Type
 10326 ;;  product         2    4[COMRAM] unsigned int 
 10327 ;; Return value:  Size  Location     Type
 10328 ;;                  2    0[COMRAM] unsigned int 
 10329 ;; Registers used:
 10330 ;;		wreg, status,2, status,0, prodl, prodh
 10331 ;; Tracked objects:
 10332 ;;		On entry : 0/0
 10333 ;;		On exit  : 0/0
 10334 ;;		Unchanged: 0/0
 10335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10336 ;;      Params:         4       0       0       0       0       0       0
 10337 ;;      Locals:         2       0       0       0       0       0       0
 10338 ;;      Temps:          0       0       0       0       0       0       0
 10339 ;;      Totals:         6       0       0       0       0       0       0
 10340 ;;Total ram usage:        6 bytes
 10341 ;; Hardware stack levels used:    1
 10342 ;; This function calls:
 10343 ;;		Nothing
 10344 ;; This function is called by:
 10345 ;;		_FuseSystem
 10346 ;; This function uses a non-reentrant model
 10347 ;;
 10348                           
 10349                           	psect	text62
 10350  002450                     __ptext62:
 10351                           	opt stack 0
 10352  002450                     ___wmul:
 10353                           	opt stack 21
 10354                           
 10355                           ;incstack = 0
 10356  002450  5001               	movf	___wmul@multiplier,w,c
 10357  002452  0203               	mulwf	___wmul@multiplicand,c
 10358  002454  CFF3 F005          	movff	prodl,___wmul@product
 10359  002458  CFF4 F006          	movff	prodh,___wmul@product+1
 10360  00245C  5001               	movf	___wmul@multiplier,w,c
 10361  00245E  0204               	mulwf	___wmul@multiplicand+1,c
 10362  002460  50F3               	movf	prodl,w,c
 10363  002462  2606               	addwf	___wmul@product+1,f,c
 10364  002464  5002               	movf	___wmul@multiplier+1,w,c
 10365  002466  0203               	mulwf	___wmul@multiplicand,c
 10366  002468  50F3               	movf	prodl,w,c
 10367  00246A  2606               	addwf	___wmul@product+1,f,c
 10368  00246C  C005  F001         	movff	___wmul@product,?___wmul
 10369  002470  C006  F002         	movff	___wmul@product+1,?___wmul+1
 10370  002474  0012               	return	
 10371  002476                     __end_of___wmul:
 10372                           	opt stack 0
 10373                           tosu	equ	0xFFF
 10374                           tosh	equ	0xFFE
 10375                           tosl	equ	0xFFD
 10376                           pclatu	equ	0xFFB
 10377                           pclath	equ	0xFFA
 10378                           tblptru	equ	0xFF8
 10379                           tblptrh	equ	0xFF7
 10380                           tblptrl	equ	0xFF6
 10381                           tablat	equ	0xFF5
 10382                           prodh	equ	0xFF4
 10383                           prodl	equ	0xFF3
 10384                           intcon	equ	0xFF2
 10385                           intcon2	equ	0xFF1
 10386                           postinc0	equ	0xFEE
 10387                           fsr0h	equ	0xFEA
 10388                           fsr0l	equ	0xFE9
 10389                           wreg	equ	0xFE8
 10390                           fsr1h	equ	0xFE2
 10391                           fsr1l	equ	0xFE1
 10392                           indf2	equ	0xFDF
 10393                           postinc2	equ	0xFDE
 10394                           postdec2	equ	0xFDD
 10395                           plusw2	equ	0xFDB
 10396                           fsr2h	equ	0xFDA
 10397                           fsr2l	equ	0xFD9
 10398                           status	equ	0xFD8
 10399                           
 10400 ;; *************** function _EUSART1_Transmit_ISR *****************
 10401 ;; Defined at:
 10402 ;;		line 153 in file "UART.c"
 10403 ;; Parameters:    Size  Location     Type
 10404 ;;		None
 10405 ;; Auto vars:     Size  Location     Type
 10406 ;;		None
 10407 ;; Return value:  Size  Location     Type
 10408 ;;                  1    wreg      void 
 10409 ;; Registers used:
 10410 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10411 ;; Tracked objects:
 10412 ;;		On entry : 0/0
 10413 ;;		On exit  : 0/0
 10414 ;;		Unchanged: 0/0
 10415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10416 ;;      Params:         0       0       0       0       0       0       0
 10417 ;;      Locals:         0       0       0       0       0       0       0
 10418 ;;      Temps:          0       0       0       0       0       0       0
 10419 ;;      Totals:         0       0       0       0       0       0       0
 10420 ;;Total ram usage:        0 bytes
 10421 ;; Hardware stack levels used:    1
 10422 ;; Hardware stack levels required when called:    2
 10423 ;; This function calls:
 10424 ;;		i2_UART_buff_get
 10425 ;;		i2_UART_buff_size
 10426 ;; This function is called by:
 10427 ;;		_INTERRUPT_InterruptManager
 10428 ;; This function uses a non-reentrant model
 10429 ;;
 10430                           
 10431                           	psect	text63
 10432  002314                     __ptext63:
 10433                           	opt stack 0
 10434  002314                     _EUSART1_Transmit_ISR:
 10435                           	opt stack 21
 10436                           
 10437                           ;UART.c: 154: if (UART_buff_size(&output_buffer) > 0) {
 10438                           
 10439                           ;incstack = 0
 10440  002314  0E00               	movlw	low _output_buffer
 10441  002316  6E01               	movwf	i2UART_buff_size@_this,c
 10442  002318  0E04               	movlw	high _output_buffer
 10443  00231A  6E02               	movwf	i2UART_buff_size@_this+1,c
 10444  00231C  ECB8  F012         	call	i2_UART_buff_size	;wreg free
 10445  002320  BE02               	btfsc	?i2_UART_buff_size+1,7,c
 10446  002322  D00D               	goto	i2l3628
 10447  002324  5002               	movf	?i2_UART_buff_size+1,w,c
 10448  002326  E103               	bnz	i2u277_40
 10449  002328  0401               	decf	?i2_UART_buff_size,w,c
 10450  00232A  A0D8               	btfss	status,0,c
 10451  00232C  D008               	goto	i2l3628
 10452  00232E                     i2u277_40:
 10453                           
 10454                           ;UART.c: 155: TXREG1 = UART_buff_get(&output_buffer);
 10455  00232E  0E00               	movlw	low _output_buffer
 10456  002330  6E07               	movwf	i2UART_buff_get@_this,c
 10457  002332  0E04               	movlw	high _output_buffer
 10458  002334  6E08               	movwf	i2UART_buff_get@_this+1,c
 10459  002336  EC26  F00D         	call	i2_UART_buff_get	;wreg free
 10460  00233A  6EAD               	movwf	4013,c	;volatile
 10461                           
 10462                           ;UART.c: 156: } else {
 10463  00233C  0012               	return	
 10464  00233E                     i2l3628:
 10465                           
 10466                           ;UART.c: 157: Transmit_stall = 1;
 10467  00233E  0E01               	movlw	1
 10468  002340  6E42               	movwf	_Transmit_stall,c
 10469                           
 10470                           ;UART.c: 158: PIE1bits.TX1IE = 0;
 10471  002342  989D               	bcf	3997,4,c	;volatile
 10472  002344  0012               	return	
 10473  002346                     __end_of_EUSART1_Transmit_ISR:
 10474                           	opt stack 0
 10475                           tosu	equ	0xFFF
 10476                           tosh	equ	0xFFE
 10477                           tosl	equ	0xFFD
 10478                           pclatu	equ	0xFFB
 10479                           pclath	equ	0xFFA
 10480                           tblptru	equ	0xFF8
 10481                           tblptrh	equ	0xFF7
 10482                           tblptrl	equ	0xFF6
 10483                           tablat	equ	0xFF5
 10484                           prodh	equ	0xFF4
 10485                           prodl	equ	0xFF3
 10486                           intcon	equ	0xFF2
 10487                           intcon2	equ	0xFF1
 10488                           postinc0	equ	0xFEE
 10489                           fsr0h	equ	0xFEA
 10490                           fsr0l	equ	0xFE9
 10491                           wreg	equ	0xFE8
 10492                           fsr1h	equ	0xFE2
 10493                           fsr1l	equ	0xFE1
 10494                           indf2	equ	0xFDF
 10495                           postinc2	equ	0xFDE
 10496                           postdec2	equ	0xFDD
 10497                           plusw2	equ	0xFDB
 10498                           fsr2h	equ	0xFDA
 10499                           fsr2l	equ	0xFD9
 10500                           status	equ	0xFD8
 10501                           
 10502 ;; *************** function i2_UART_buff_size *****************
 10503 ;; Defined at:
 10504 ;;		line 104 in file "UART.c"
 10505 ;; Parameters:    Size  Location     Type
 10506 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
 10507 ;;		 -> output_buffer(206), input_buffer(206), 
 10508 ;; Auto vars:     Size  Location     Type
 10509 ;;		None
 10510 ;; Return value:  Size  Location     Type
 10511 ;;                  2    0[COMRAM] int 
 10512 ;; Registers used:
 10513 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10514 ;; Tracked objects:
 10515 ;;		On entry : 0/0
 10516 ;;		On exit  : 0/0
 10517 ;;		Unchanged: 0/0
 10518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10519 ;;      Params:         2       0       0       0       0       0       0
 10520 ;;      Locals:         0       0       0       0       0       0       0
 10521 ;;      Temps:          0       0       0       0       0       0       0
 10522 ;;      Totals:         2       0       0       0       0       0       0
 10523 ;;Total ram usage:        2 bytes
 10524 ;; Hardware stack levels used:    1
 10525 ;; This function calls:
 10526 ;;		Nothing
 10527 ;; This function is called by:
 10528 ;;		_EUSART1_Transmit_ISR
 10529 ;; This function uses a non-reentrant model
 10530 ;;
 10531                           
 10532                           	psect	text64
 10533  002570                     __ptext64:
 10534                           	opt stack 0
 10535  002570                     i2_UART_buff_size:
 10536                           	opt stack 22
 10537                           
 10538                           ;UART.c: 105: return (_this->count);
 10539                           
 10540                           ;incstack = 0
 10541  002570  EE20 F0CC          	lfsr	2,204
 10542  002574  5001               	movf	i2UART_buff_size@_this,w,c
 10543  002576  26D9               	addwf	fsr2l,f,c
 10544  002578  5002               	movf	i2UART_buff_size@_this+1,w,c
 10545  00257A  22DA               	addwfc	fsr2h,f,c
 10546  00257C  CFDE F001          	movff	postinc2,?i2_UART_buff_size
 10547  002580  CFDD F002          	movff	postdec2,?i2_UART_buff_size+1
 10548  002584  0012               	return	
 10549  002586                     __end_ofi2_UART_buff_size:
 10550                           	opt stack 0
 10551                           tosu	equ	0xFFF
 10552                           tosh	equ	0xFFE
 10553                           tosl	equ	0xFFD
 10554                           pclatu	equ	0xFFB
 10555                           pclath	equ	0xFFA
 10556                           tblptru	equ	0xFF8
 10557                           tblptrh	equ	0xFF7
 10558                           tblptrl	equ	0xFF6
 10559                           tablat	equ	0xFF5
 10560                           prodh	equ	0xFF4
 10561                           prodl	equ	0xFF3
 10562                           intcon	equ	0xFF2
 10563                           intcon2	equ	0xFF1
 10564                           postinc0	equ	0xFEE
 10565                           fsr0h	equ	0xFEA
 10566                           fsr0l	equ	0xFE9
 10567                           wreg	equ	0xFE8
 10568                           fsr1h	equ	0xFE2
 10569                           fsr1l	equ	0xFE1
 10570                           indf2	equ	0xFDF
 10571                           postinc2	equ	0xFDE
 10572                           postdec2	equ	0xFDD
 10573                           plusw2	equ	0xFDB
 10574                           fsr2h	equ	0xFDA
 10575                           fsr2l	equ	0xFD9
 10576                           status	equ	0xFD8
 10577                           
 10578 ;; *************** function i2_UART_buff_get *****************
 10579 ;; Defined at:
 10580 ;;		line 83 in file "UART.c"
 10581 ;; Parameters:    Size  Location     Type
 10582 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
 10583 ;;		 -> output_buffer(206), input_buffer(206), 
 10584 ;; Auto vars:     Size  Location     Type
 10585 ;;  UART_buff_ge    1   10[COMRAM] unsigned char 
 10586 ;; Return value:  Size  Location     Type
 10587 ;;                  1    wreg      unsigned char 
 10588 ;; Registers used:
 10589 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10590 ;; Tracked objects:
 10591 ;;		On entry : 0/0
 10592 ;;		On exit  : 0/0
 10593 ;;		Unchanged: 0/0
 10594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10595 ;;      Params:         2       0       0       0       0       0       0
 10596 ;;      Locals:         1       0       0       0       0       0       0
 10597 ;;      Temps:          2       0       0       0       0       0       0
 10598 ;;      Totals:         5       0       0       0       0       0       0
 10599 ;;Total ram usage:        5 bytes
 10600 ;; Hardware stack levels used:    1
 10601 ;; Hardware stack levels required when called:    1
 10602 ;; This function calls:
 10603 ;;		i2_UART_buff_modulo_inc
 10604 ;; This function is called by:
 10605 ;;		_EUSART1_Transmit_ISR
 10606 ;; This function uses a non-reentrant model
 10607 ;;
 10608                           
 10609                           	psect	text65
 10610  001A4C                     __ptext65:
 10611                           	opt stack 0
 10612  001A4C                     i2_UART_buff_get:
 10613                           	opt stack 21
 10614                           
 10615                           ;UART.c: 84: unsigned char c;
 10616                           ;UART.c: 85: if (_this->count > 0) {
 10617                           
 10618                           ;incstack = 0
 10619  001A4C  EE20 F0CC          	lfsr	2,204
 10620  001A50  5007               	movf	i2UART_buff_get@_this,w,c
 10621  001A52  26D9               	addwf	fsr2l,f,c
 10622  001A54  5008               	movf	i2UART_buff_get@_this+1,w,c
 10623  001A56  22DA               	addwfc	fsr2h,f,c
 10624  001A58  0E01               	movlw	1
 10625  001A5A  BEDB               	btfsc	plusw2,7,c
 10626  001A5C  D03C               	goto	i2l3608
 10627  001A5E  0E01               	movlw	1
 10628  001A60  50DB               	movf	plusw2,w,c
 10629  001A62  E103               	bnz	i2u275_40
 10630  001A64  04DE               	decf	postinc2,w,c
 10631  001A66  A0D8               	btfss	status,0,c
 10632  001A68  D036               	goto	i2l3608
 10633  001A6A                     i2u275_40:
 10634                           
 10635                           ;UART.c: 86: c = _this->buf[_this->tail];
 10636  001A6A  EE20 F0CA          	lfsr	2,202
 10637  001A6E  5007               	movf	i2UART_buff_get@_this,w,c
 10638  001A70  26D9               	addwf	fsr2l,f,c
 10639  001A72  5008               	movf	i2UART_buff_get@_this+1,w,c
 10640  001A74  22DA               	addwfc	fsr2h,f,c
 10641  001A76  CFDE F009          	movff	postinc2,??i2_UART_buff_get
 10642  001A7A  CFDD F00A          	movff	postdec2,??i2_UART_buff_get+1
 10643  001A7E  5009               	movf	??i2_UART_buff_get,w,c
 10644  001A80  2407               	addwf	i2UART_buff_get@_this,w,c
 10645  001A82  6ED9               	movwf	fsr2l,c
 10646  001A84  500A               	movf	??i2_UART_buff_get+1,w,c
 10647  001A86  2008               	addwfc	i2UART_buff_get@_this+1,w,c
 10648  001A88  6EDA               	movwf	fsr2h,c
 10649  001A8A  50DF               	movf	indf2,w,c
 10650  001A8C  6E0B               	movwf	i2UART_buff_get@c,c
 10651                           
 10652                           ;UART.c: 87: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
 10653  001A8E  EE20 F0CA          	lfsr	2,202
 10654  001A92  5007               	movf	i2UART_buff_get@_this,w,c
 10655  001A94  26D9               	addwf	fsr2l,f,c
 10656  001A96  5008               	movf	i2UART_buff_get@_this+1,w,c
 10657  001A98  22DA               	addwfc	fsr2h,f,c
 10658  001A9A  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 10659  001A9E  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 10660  001AA2  0E00               	movlw	0
 10661  001AA4  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 10662  001AA6  0EC8               	movlw	200
 10663  001AA8  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 10664  001AAA  EC13  F012         	call	i2_UART_buff_modulo_inc	;wreg free
 10665  001AAE  EE20 F0CA          	lfsr	2,202
 10666  001AB2  5007               	movf	i2UART_buff_get@_this,w,c
 10667  001AB4  26D9               	addwf	fsr2l,f,c
 10668  001AB6  5008               	movf	i2UART_buff_get@_this+1,w,c
 10669  001AB8  22DA               	addwfc	fsr2h,f,c
 10670  001ABA  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 10671  001ABE  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 10672                           
 10673                           ;UART.c: 88: --_this->count;
 10674  001AC2  EE20 F0CC          	lfsr	2,204
 10675  001AC6  5007               	movf	i2UART_buff_get@_this,w,c
 10676  001AC8  26D9               	addwf	fsr2l,f,c
 10677  001ACA  5008               	movf	i2UART_buff_get@_this+1,w,c
 10678  001ACC  22DA               	addwfc	fsr2h,f,c
 10679  001ACE  06DE               	decf	postinc2,f,c
 10680  001AD0  0E00               	movlw	0
 10681  001AD2  5ADD               	subwfb	postdec2,f,c
 10682                           
 10683                           ;UART.c: 89: } else {
 10684  001AD4  D002               	goto	i2l796
 10685  001AD6                     i2l3608:
 10686                           
 10687                           ;UART.c: 90: c = 0;
 10688  001AD6  0E00               	movlw	0
 10689  001AD8  6E0B               	movwf	i2UART_buff_get@c,c
 10690  001ADA                     i2l796:
 10691                           
 10692                           ;UART.c: 91: }
 10693                           ;UART.c: 92: return (c);
 10694  001ADA  500B               	movf	i2UART_buff_get@c,w,c
 10695  001ADC  0012               	return	
 10696  001ADE                     __end_ofi2_UART_buff_get:
 10697                           	opt stack 0
 10698                           tosu	equ	0xFFF
 10699                           tosh	equ	0xFFE
 10700                           tosl	equ	0xFFD
 10701                           pclatu	equ	0xFFB
 10702                           pclath	equ	0xFFA
 10703                           tblptru	equ	0xFF8
 10704                           tblptrh	equ	0xFF7
 10705                           tblptrl	equ	0xFF6
 10706                           tablat	equ	0xFF5
 10707                           prodh	equ	0xFF4
 10708                           prodl	equ	0xFF3
 10709                           intcon	equ	0xFF2
 10710                           intcon2	equ	0xFF1
 10711                           postinc0	equ	0xFEE
 10712                           fsr0h	equ	0xFEA
 10713                           fsr0l	equ	0xFE9
 10714                           wreg	equ	0xFE8
 10715                           fsr1h	equ	0xFE2
 10716                           fsr1l	equ	0xFE1
 10717                           indf2	equ	0xFDF
 10718                           postinc2	equ	0xFDE
 10719                           postdec2	equ	0xFDD
 10720                           plusw2	equ	0xFDB
 10721                           fsr2h	equ	0xFDA
 10722                           fsr2l	equ	0xFD9
 10723                           status	equ	0xFD8
 10724                           
 10725 ;; *************** function _EUSART1_Receive_ISR *****************
 10726 ;; Defined at:
 10727 ;;		line 141 in file "UART.c"
 10728 ;; Parameters:    Size  Location     Type
 10729 ;;		None
 10730 ;; Auto vars:     Size  Location     Type
 10731 ;;  data            1   11[COMRAM] unsigned char 
 10732 ;; Return value:  Size  Location     Type
 10733 ;;                  1    wreg      void 
 10734 ;; Registers used:
 10735 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10736 ;; Tracked objects:
 10737 ;;		On entry : 0/0
 10738 ;;		On exit  : 0/0
 10739 ;;		Unchanged: 0/0
 10740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10741 ;;      Params:         0       0       0       0       0       0       0
 10742 ;;      Locals:         1       0       0       0       0       0       0
 10743 ;;      Temps:          0       0       0       0       0       0       0
 10744 ;;      Totals:         1       0       0       0       0       0       0
 10745 ;;Total ram usage:        1 bytes
 10746 ;; Hardware stack levels used:    1
 10747 ;; Hardware stack levels required when called:    2
 10748 ;; This function calls:
 10749 ;;		i2_UART_buff_put
 10750 ;; This function is called by:
 10751 ;;		_INTERRUPT_InterruptManager
 10752 ;; This function uses a non-reentrant model
 10753 ;;
 10754                           
 10755                           	psect	text66
 10756  0024BA                     __ptext66:
 10757                           	opt stack 0
 10758  0024BA                     _EUSART1_Receive_ISR:
 10759                           	opt stack 21
 10760                           
 10761                           ;UART.c: 142: if (1 == RC1STAbits.OERR) {
 10762                           
 10763                           ;incstack = 0
 10764  0024BA  A2AB               	btfss	4011,1,c	;volatile
 10765  0024BC  D002               	goto	i2l827
 10766                           
 10767                           ;UART.c: 145: RC1STAbits.CREN = 0;
 10768  0024BE  98AB               	bcf	4011,4,c	;volatile
 10769                           
 10770                           ;UART.c: 146: RC1STAbits.CREN = 1;
 10771  0024C0  88AB               	bsf	4011,4,c	;volatile
 10772  0024C2                     i2l827:
 10773                           
 10774                           ;UART.c: 147: }
 10775                           ;UART.c: 148: unsigned char data = RCREG1;
 10776  0024C2  CFAE F00C          	movff	4014,EUSART1_Receive_ISR@data	;volatile
 10777                           
 10778                           ;UART.c: 149: UART_buff_put(&input_buffer, data);
 10779  0024C6  0E00               	movlw	low _input_buffer
 10780  0024C8  6E07               	movwf	i2UART_buff_put@_this,c
 10781  0024CA  0E03               	movlw	high _input_buffer
 10782  0024CC  6E08               	movwf	i2UART_buff_put@_this+1,c
 10783  0024CE  C00C  F009         	movff	EUSART1_Receive_ISR@data,i2UART_buff_put@c
 10784  0024D2  EC69  F009         	call	i2_UART_buff_put	;wreg free
 10785                           
 10786                           ;UART.c: 150: PIE1bits.RC1IE == 0;
 10787  0024D6  509D               	movf	3997,w,c	;volatile
 10788  0024D8  0012               	return		;funcret
 10789  0024DA                     __end_of_EUSART1_Receive_ISR:
 10790                           	opt stack 0
 10791                           tosu	equ	0xFFF
 10792                           tosh	equ	0xFFE
 10793                           tosl	equ	0xFFD
 10794                           pclatu	equ	0xFFB
 10795                           pclath	equ	0xFFA
 10796                           tblptru	equ	0xFF8
 10797                           tblptrh	equ	0xFF7
 10798                           tblptrl	equ	0xFF6
 10799                           tablat	equ	0xFF5
 10800                           prodh	equ	0xFF4
 10801                           prodl	equ	0xFF3
 10802                           intcon	equ	0xFF2
 10803                           intcon2	equ	0xFF1
 10804                           postinc0	equ	0xFEE
 10805                           fsr0h	equ	0xFEA
 10806                           fsr0l	equ	0xFE9
 10807                           wreg	equ	0xFE8
 10808                           fsr1h	equ	0xFE2
 10809                           fsr1l	equ	0xFE1
 10810                           indf2	equ	0xFDF
 10811                           postinc2	equ	0xFDE
 10812                           postdec2	equ	0xFDD
 10813                           plusw2	equ	0xFDB
 10814                           fsr2h	equ	0xFDA
 10815                           fsr2l	equ	0xFD9
 10816                           status	equ	0xFD8
 10817                           
 10818 ;; *************** function i2_UART_buff_put *****************
 10819 ;; Defined at:
 10820 ;;		line 70 in file "UART.c"
 10821 ;; Parameters:    Size  Location     Type
 10822 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
 10823 ;;		 -> output_buffer(206), input_buffer(206), 
 10824 ;;  c               1    8[COMRAM] const unsigned char 
 10825 ;; Auto vars:     Size  Location     Type
 10826 ;;		None
 10827 ;; Return value:  Size  Location     Type
 10828 ;;                  1    wreg      void 
 10829 ;; Registers used:
 10830 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10831 ;; Tracked objects:
 10832 ;;		On entry : 0/0
 10833 ;;		On exit  : 0/0
 10834 ;;		Unchanged: 0/0
 10835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10836 ;;      Params:         3       0       0       0       0       0       0
 10837 ;;      Locals:         0       0       0       0       0       0       0
 10838 ;;      Temps:          2       0       0       0       0       0       0
 10839 ;;      Totals:         5       0       0       0       0       0       0
 10840 ;;Total ram usage:        5 bytes
 10841 ;; Hardware stack levels used:    1
 10842 ;; Hardware stack levels required when called:    1
 10843 ;; This function calls:
 10844 ;;		i2_UART_buff_modulo_inc
 10845 ;; This function is called by:
 10846 ;;		_EUSART1_Receive_ISR
 10847 ;; This function uses a non-reentrant model
 10848 ;;
 10849                           
 10850                           	psect	text67
 10851  0012D2                     __ptext67:
 10852                           	opt stack 0
 10853  0012D2                     i2_UART_buff_put:
 10854                           	opt stack 21
 10855                           
 10856                           ;UART.c: 71: if (_this->count < 200) {
 10857                           
 10858                           ;incstack = 0
 10859  0012D2  EE20 F0CC          	lfsr	2,204
 10860  0012D6  5007               	movf	i2UART_buff_put@_this,w,c
 10861  0012D8  26D9               	addwf	fsr2l,f,c
 10862  0012DA  5008               	movf	i2UART_buff_put@_this+1,w,c
 10863  0012DC  22DA               	addwfc	fsr2h,f,c
 10864  0012DE  0E01               	movlw	1
 10865  0012E0  BEDB               	btfsc	plusw2,7,c
 10866  0012E2  D007               	goto	i2l3588
 10867  0012E4  0E01               	movlw	1
 10868  0012E6  50DB               	movf	plusw2,w,c
 10869  0012E8  E13A               	bnz	i2l3594
 10870  0012EA  0EC8               	movlw	200
 10871  0012EC  5CDE               	subwf	postinc2,w,c
 10872  0012EE  B0D8               	btfsc	status,0,c
 10873  0012F0  D036               	goto	i2l3594
 10874  0012F2                     i2l3588:
 10875                           
 10876                           ;UART.c: 72: _this->buf[_this->head] = c;
 10877  0012F2  EE20 F0C8          	lfsr	2,200
 10878  0012F6  5007               	movf	i2UART_buff_put@_this,w,c
 10879  0012F8  26D9               	addwf	fsr2l,f,c
 10880  0012FA  5008               	movf	i2UART_buff_put@_this+1,w,c
 10881  0012FC  22DA               	addwfc	fsr2h,f,c
 10882  0012FE  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
 10883  001302  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
 10884  001306  500A               	movf	??i2_UART_buff_put,w,c
 10885  001308  2407               	addwf	i2UART_buff_put@_this,w,c
 10886  00130A  6ED9               	movwf	fsr2l,c
 10887  00130C  500B               	movf	??i2_UART_buff_put+1,w,c
 10888  00130E  2008               	addwfc	i2UART_buff_put@_this+1,w,c
 10889  001310  6EDA               	movwf	fsr2h,c
 10890  001312  C009  FFDF         	movff	i2UART_buff_put@c,indf2
 10891                           
 10892                           ;UART.c: 73: _this->head = UART_buff_modulo_inc(_this->head, 200);
 10893  001316  EE20 F0C8          	lfsr	2,200
 10894  00131A  5007               	movf	i2UART_buff_put@_this,w,c
 10895  00131C  26D9               	addwf	fsr2l,f,c
 10896  00131E  5008               	movf	i2UART_buff_put@_this+1,w,c
 10897  001320  22DA               	addwfc	fsr2h,f,c
 10898  001322  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 10899  001326  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 10900  00132A  0E00               	movlw	0
 10901  00132C  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 10902  00132E  0EC8               	movlw	200
 10903  001330  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 10904  001332  EC13  F012         	call	i2_UART_buff_modulo_inc	;wreg free
 10905  001336  EE20 F0C8          	lfsr	2,200
 10906  00133A  5007               	movf	i2UART_buff_put@_this,w,c
 10907  00133C  26D9               	addwf	fsr2l,f,c
 10908  00133E  5008               	movf	i2UART_buff_put@_this+1,w,c
 10909  001340  22DA               	addwfc	fsr2h,f,c
 10910  001342  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 10911  001346  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 10912                           
 10913                           ;UART.c: 74: ++_this->count;
 10914  00134A  EE20 F0CC          	lfsr	2,204
 10915  00134E  5007               	movf	i2UART_buff_put@_this,w,c
 10916  001350  26D9               	addwf	fsr2l,f,c
 10917  001352  5008               	movf	i2UART_buff_put@_this+1,w,c
 10918  001354  22DA               	addwfc	fsr2h,f,c
 10919  001356  2ADE               	incf	postinc2,f,c
 10920  001358  0E00               	movlw	0
 10921  00135A  22DD               	addwfc	postdec2,f,c
 10922                           
 10923                           ;UART.c: 75: } else {
 10924  00135C  0012               	return	
 10925  00135E                     i2l3594:
 10926                           
 10927                           ;UART.c: 76: _this->buf[_this->head] = c;
 10928  00135E  EE20 F0C8          	lfsr	2,200
 10929  001362  5007               	movf	i2UART_buff_put@_this,w,c
 10930  001364  26D9               	addwf	fsr2l,f,c
 10931  001366  5008               	movf	i2UART_buff_put@_this+1,w,c
 10932  001368  22DA               	addwfc	fsr2h,f,c
 10933  00136A  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
 10934  00136E  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
 10935  001372  500A               	movf	??i2_UART_buff_put,w,c
 10936  001374  2407               	addwf	i2UART_buff_put@_this,w,c
 10937  001376  6ED9               	movwf	fsr2l,c
 10938  001378  500B               	movf	??i2_UART_buff_put+1,w,c
 10939  00137A  2008               	addwfc	i2UART_buff_put@_this+1,w,c
 10940  00137C  6EDA               	movwf	fsr2h,c
 10941  00137E  C009  FFDF         	movff	i2UART_buff_put@c,indf2
 10942                           
 10943                           ;UART.c: 77: _this->head = UART_buff_modulo_inc(_this->head, 200);
 10944  001382  EE20 F0C8          	lfsr	2,200
 10945  001386  5007               	movf	i2UART_buff_put@_this,w,c
 10946  001388  26D9               	addwf	fsr2l,f,c
 10947  00138A  5008               	movf	i2UART_buff_put@_this+1,w,c
 10948  00138C  22DA               	addwfc	fsr2h,f,c
 10949  00138E  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 10950  001392  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 10951  001396  0E00               	movlw	0
 10952  001398  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 10953  00139A  0EC8               	movlw	200
 10954  00139C  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 10955  00139E  EC13  F012         	call	i2_UART_buff_modulo_inc	;wreg free
 10956  0013A2  EE20 F0C8          	lfsr	2,200
 10957  0013A6  5007               	movf	i2UART_buff_put@_this,w,c
 10958  0013A8  26D9               	addwf	fsr2l,f,c
 10959  0013AA  5008               	movf	i2UART_buff_put@_this+1,w,c
 10960  0013AC  22DA               	addwfc	fsr2h,f,c
 10961  0013AE  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 10962  0013B2  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 10963                           
 10964                           ;UART.c: 78: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
 10965  0013B6  EE20 F0CA          	lfsr	2,202
 10966  0013BA  5007               	movf	i2UART_buff_put@_this,w,c
 10967  0013BC  26D9               	addwf	fsr2l,f,c
 10968  0013BE  5008               	movf	i2UART_buff_put@_this+1,w,c
 10969  0013C0  22DA               	addwfc	fsr2h,f,c
 10970  0013C2  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 10971  0013C6  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 10972  0013CA  0E00               	movlw	0
 10973  0013CC  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 10974  0013CE  0EC8               	movlw	200
 10975  0013D0  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 10976  0013D2  EC13  F012         	call	i2_UART_buff_modulo_inc	;wreg free
 10977  0013D6  EE20 F0CA          	lfsr	2,202
 10978  0013DA  5007               	movf	i2UART_buff_put@_this,w,c
 10979  0013DC  26D9               	addwf	fsr2l,f,c
 10980  0013DE  5008               	movf	i2UART_buff_put@_this+1,w,c
 10981  0013E0  22DA               	addwfc	fsr2h,f,c
 10982  0013E2  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 10983  0013E6  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 10984  0013EA  0012               	return	
 10985  0013EC                     __end_ofi2_UART_buff_put:
 10986                           	opt stack 0
 10987                           tosu	equ	0xFFF
 10988                           tosh	equ	0xFFE
 10989                           tosl	equ	0xFFD
 10990                           pclatu	equ	0xFFB
 10991                           pclath	equ	0xFFA
 10992                           tblptru	equ	0xFF8
 10993                           tblptrh	equ	0xFF7
 10994                           tblptrl	equ	0xFF6
 10995                           tablat	equ	0xFF5
 10996                           prodh	equ	0xFF4
 10997                           prodl	equ	0xFF3
 10998                           intcon	equ	0xFF2
 10999                           intcon2	equ	0xFF1
 11000                           postinc0	equ	0xFEE
 11001                           fsr0h	equ	0xFEA
 11002                           fsr0l	equ	0xFE9
 11003                           wreg	equ	0xFE8
 11004                           fsr1h	equ	0xFE2
 11005                           fsr1l	equ	0xFE1
 11006                           indf2	equ	0xFDF
 11007                           postinc2	equ	0xFDE
 11008                           postdec2	equ	0xFDD
 11009                           plusw2	equ	0xFDB
 11010                           fsr2h	equ	0xFDA
 11011                           fsr2l	equ	0xFD9
 11012                           status	equ	0xFD8
 11013                           
 11014 ;; *************** function i2_UART_buff_modulo_inc *****************
 11015 ;; Defined at:
 11016 ;;		line 108 in file "UART.c"
 11017 ;; Parameters:    Size  Location     Type
 11018 ;;  value           2    0[COMRAM] const unsigned int 
 11019 ;;  modulus         2    2[COMRAM] const unsigned int 
 11020 ;; Auto vars:     Size  Location     Type
 11021 ;;  UART_buff_mo    2    4[COMRAM] unsigned int 
 11022 ;; Return value:  Size  Location     Type
 11023 ;;                  2    0[COMRAM] unsigned int 
 11024 ;; Registers used:
 11025 ;;		wreg, status,2, status,0
 11026 ;; Tracked objects:
 11027 ;;		On entry : 0/0
 11028 ;;		On exit  : 0/0
 11029 ;;		Unchanged: 0/0
 11030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11031 ;;      Params:         4       0       0       0       0       0       0
 11032 ;;      Locals:         2       0       0       0       0       0       0
 11033 ;;      Temps:          0       0       0       0       0       0       0
 11034 ;;      Totals:         6       0       0       0       0       0       0
 11035 ;;Total ram usage:        6 bytes
 11036 ;; Hardware stack levels used:    1
 11037 ;; This function calls:
 11038 ;;		Nothing
 11039 ;; This function is called by:
 11040 ;;		i2_UART_buff_put
 11041 ;;		i2_UART_buff_get
 11042 ;; This function uses a non-reentrant model
 11043 ;;
 11044                           
 11045                           	psect	text68
 11046  002426                     __ptext68:
 11047                           	opt stack 0
 11048  002426                     i2_UART_buff_modulo_inc:
 11049                           	opt stack 21
 11050                           
 11051                           ;UART.c: 109: unsigned int my_value = value + 1;
 11052                           
 11053                           ;incstack = 0
 11054  002426  0E01               	movlw	1
 11055  002428  2401               	addwf	i2UART_buff_modulo_inc@value,w,c
 11056  00242A  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
 11057  00242C  0E00               	movlw	0
 11058  00242E  2002               	addwfc	i2UART_buff_modulo_inc@value+1,w,c
 11059  002430  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
 11060                           
 11061                           ;UART.c: 110: if (my_value >= modulus) {
 11062  002432  5003               	movf	i2UART_buff_modulo_inc@modulus,w,c
 11063  002434  5C05               	subwf	i2UART_buff_modulo_inc@my_value,w,c
 11064  002436  5004               	movf	i2UART_buff_modulo_inc@modulus+1,w,c
 11065  002438  5806               	subwfb	i2UART_buff_modulo_inc@my_value+1,w,c
 11066  00243A  A0D8               	btfss	status,0,c
 11067  00243C  D004               	goto	i2l3168
 11068                           
 11069                           ;UART.c: 111: my_value = 0;
 11070  00243E  0E00               	movlw	0
 11071  002440  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
 11072  002442  0E00               	movlw	0
 11073  002444  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
 11074  002446                     i2l3168:
 11075                           
 11076                           ;UART.c: 112: }
 11077                           ;UART.c: 113: return (my_value);
 11078  002446  C005  F001         	movff	i2UART_buff_modulo_inc@my_value,?i2_UART_buff_modulo_inc
 11079  00244A  C006  F002         	movff	i2UART_buff_modulo_inc@my_value+1,?i2_UART_buff_modulo_inc+1
 11080  00244E  0012               	return	
 11081  002450                     __end_ofi2_UART_buff_modulo_inc:
 11082                           	opt stack 0
 11083                           tosu	equ	0xFFF
 11084                           tosh	equ	0xFFE
 11085                           tosl	equ	0xFFD
 11086                           pclatu	equ	0xFFB
 11087                           pclath	equ	0xFFA
 11088                           tblptru	equ	0xFF8
 11089                           tblptrh	equ	0xFF7
 11090                           tblptrl	equ	0xFF6
 11091                           tablat	equ	0xFF5
 11092                           prodh	equ	0xFF4
 11093                           prodl	equ	0xFF3
 11094                           intcon	equ	0xFF2
 11095                           intcon2	equ	0xFF1
 11096                           postinc0	equ	0xFEE
 11097                           fsr0h	equ	0xFEA
 11098                           fsr0l	equ	0xFE9
 11099                           wreg	equ	0xFE8
 11100                           fsr1h	equ	0xFE2
 11101                           fsr1l	equ	0xFE1
 11102                           indf2	equ	0xFDF
 11103                           postinc2	equ	0xFDE
 11104                           postdec2	equ	0xFDD
 11105                           plusw2	equ	0xFDB
 11106                           fsr2h	equ	0xFDA
 11107                           fsr2l	equ	0xFD9
 11108                           status	equ	0xFD8
 11109                           
 11110 ;; *************** function _ADC_ISR *****************
 11111 ;; Defined at:
 11112 ;;		line 130 in file "mcc_generated_files/adc.c"
 11113 ;; Parameters:    Size  Location     Type
 11114 ;;		None
 11115 ;; Auto vars:     Size  Location     Type
 11116 ;;		None
 11117 ;; Return value:  Size  Location     Type
 11118 ;;                  1    wreg      void 
 11119 ;; Registers used:
 11120 ;;		None
 11121 ;; Tracked objects:
 11122 ;;		On entry : 0/0
 11123 ;;		On exit  : 0/0
 11124 ;;		Unchanged: 0/0
 11125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11126 ;;      Params:         0       0       0       0       0       0       0
 11127 ;;      Locals:         0       0       0       0       0       0       0
 11128 ;;      Temps:          0       0       0       0       0       0       0
 11129 ;;      Totals:         0       0       0       0       0       0       0
 11130 ;;Total ram usage:        0 bytes
 11131 ;; Hardware stack levels used:    1
 11132 ;; This function calls:
 11133 ;;		Nothing
 11134 ;; This function is called by:
 11135 ;;		_INTERRUPT_InterruptManager
 11136 ;; This function uses a non-reentrant model
 11137 ;;
 11138                           
 11139                           	psect	text69
 11140  002612                     __ptext69:
 11141                           	opt stack 0
 11142  002612                     _ADC_ISR:
 11143                           	opt stack 23
 11144                           
 11145                           ;adc.c: 133: PIR1bits.ADIF = 0;
 11146                           
 11147                           ;incstack = 0
 11148  002612  9C9E               	bcf	3998,6,c	;volatile
 11149  002614  0012               	return		;funcret
 11150  002616                     __end_of_ADC_ISR:
 11151                           	opt stack 0
 11152  0000                     tosu	equ	0xFFF
 11153                           tosh	equ	0xFFE
 11154                           tosl	equ	0xFFD
 11155                           pclatu	equ	0xFFB
 11156                           pclath	equ	0xFFA
 11157                           tblptru	equ	0xFF8
 11158                           tblptrh	equ	0xFF7
 11159                           tblptrl	equ	0xFF6
 11160                           tablat	equ	0xFF5
 11161                           prodh	equ	0xFF4
 11162                           prodl	equ	0xFF3
 11163                           intcon	equ	0xFF2
 11164                           intcon2	equ	0xFF1
 11165                           postinc0	equ	0xFEE
 11166                           fsr0h	equ	0xFEA
 11167                           fsr0l	equ	0xFE9
 11168                           wreg	equ	0xFE8
 11169                           fsr1h	equ	0xFE2
 11170                           fsr1l	equ	0xFE1
 11171                           indf2	equ	0xFDF
 11172                           postinc2	equ	0xFDE
 11173                           postdec2	equ	0xFDD
 11174                           plusw2	equ	0xFDB
 11175                           fsr2h	equ	0xFDA
 11176                           fsr2l	equ	0xFD9
 11177                           status	equ	0xFD8
 11178                           tosu	equ	0xFFF
 11179                           tosh	equ	0xFFE
 11180                           tosl	equ	0xFFD
 11181                           pclatu	equ	0xFFB
 11182                           pclath	equ	0xFFA
 11183                           tblptru	equ	0xFF8
 11184                           tblptrh	equ	0xFF7
 11185                           tblptrl	equ	0xFF6
 11186                           tablat	equ	0xFF5
 11187                           prodh	equ	0xFF4
 11188                           prodl	equ	0xFF3
 11189                           intcon	equ	0xFF2
 11190                           intcon2	equ	0xFF1
 11191                           postinc0	equ	0xFEE
 11192                           fsr0h	equ	0xFEA
 11193                           fsr0l	equ	0xFE9
 11194                           wreg	equ	0xFE8
 11195                           fsr1h	equ	0xFE2
 11196                           fsr1l	equ	0xFE1
 11197                           indf2	equ	0xFDF
 11198                           postinc2	equ	0xFDE
 11199                           postdec2	equ	0xFDD
 11200                           plusw2	equ	0xFDB
 11201                           fsr2h	equ	0xFDA
 11202                           fsr2l	equ	0xFD9
 11203                           status	equ	0xFD8
 11204                           
 11205                           	psect	text70
 11206  000000                     __ptext70:
 11207                           	opt stack 0
 11208                           tosu	equ	0xFFF
 11209                           tosh	equ	0xFFE
 11210                           tosl	equ	0xFFD
 11211                           pclatu	equ	0xFFB
 11212                           pclath	equ	0xFFA
 11213                           tblptru	equ	0xFF8
 11214                           tblptrh	equ	0xFF7
 11215                           tblptrl	equ	0xFF6
 11216                           tablat	equ	0xFF5
 11217                           prodh	equ	0xFF4
 11218                           prodl	equ	0xFF3
 11219                           intcon	equ	0xFF2
 11220                           intcon2	equ	0xFF1
 11221                           postinc0	equ	0xFEE
 11222                           fsr0h	equ	0xFEA
 11223                           fsr0l	equ	0xFE9
 11224                           wreg	equ	0xFE8
 11225                           fsr1h	equ	0xFE2
 11226                           fsr1l	equ	0xFE1
 11227                           indf2	equ	0xFDF
 11228                           postinc2	equ	0xFDE
 11229                           postdec2	equ	0xFDD
 11230                           plusw2	equ	0xFDB
 11231                           fsr2h	equ	0xFDA
 11232                           fsr2l	equ	0xFD9
 11233                           status	equ	0xFD8
 11234                           
 11235                           	psect	rparam
 11236  0000                     tosu	equ	0xFFF
 11237                           tosh	equ	0xFFE
 11238                           tosl	equ	0xFFD
 11239                           pclatu	equ	0xFFB
 11240                           pclath	equ	0xFFA
 11241                           tblptru	equ	0xFF8
 11242                           tblptrh	equ	0xFF7
 11243                           tblptrl	equ	0xFF6
 11244                           tablat	equ	0xFF5
 11245                           prodh	equ	0xFF4
 11246                           prodl	equ	0xFF3
 11247                           intcon	equ	0xFF2
 11248                           intcon2	equ	0xFF1
 11249                           postinc0	equ	0xFEE
 11250                           fsr0h	equ	0xFEA
 11251                           fsr0l	equ	0xFE9
 11252                           wreg	equ	0xFE8
 11253                           fsr1h	equ	0xFE2
 11254                           fsr1l	equ	0xFE1
 11255                           indf2	equ	0xFDF
 11256                           postinc2	equ	0xFDE
 11257                           postdec2	equ	0xFDD
 11258                           plusw2	equ	0xFDB
 11259                           fsr2h	equ	0xFDA
 11260                           fsr2l	equ	0xFD9
 11261                           status	equ	0xFD8
 11262                           
 11263                           	psect	temp
 11264  000043                     btemp:
 11265                           	opt stack 0
 11266  000043                     	ds	1
 11267  0000                     int$flags	set	btemp
 11268                           tosu	equ	0xFFF
 11269                           tosh	equ	0xFFE
 11270                           tosl	equ	0xFFD
 11271                           pclatu	equ	0xFFB
 11272                           pclath	equ	0xFFA
 11273                           tblptru	equ	0xFF8
 11274                           tblptrh	equ	0xFF7
 11275                           tblptrl	equ	0xFF6
 11276                           tablat	equ	0xFF5
 11277                           prodh	equ	0xFF4
 11278                           prodl	equ	0xFF3
 11279                           intcon	equ	0xFF2
 11280                           intcon2	equ	0xFF1
 11281                           postinc0	equ	0xFEE
 11282                           fsr0h	equ	0xFEA
 11283                           fsr0l	equ	0xFE9
 11284                           wreg	equ	0xFE8
 11285                           fsr1h	equ	0xFE2
 11286                           fsr1l	equ	0xFE1
 11287                           indf2	equ	0xFDF
 11288                           postinc2	equ	0xFDE
 11289                           postdec2	equ	0xFDD
 11290                           plusw2	equ	0xFDB
 11291                           fsr2h	equ	0xFDA
 11292                           fsr2l	equ	0xFD9
 11293                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        3
    BSS         1016
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     36      66
    BANK0           160     27     150
    BANK1           256      0     254
    BANK2           256      0     200
    BANK3           256      0     206
    BANK4           256      0     206
    BANK5           256      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    memset@p	PTR unsigned char  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_init@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    crcBufS_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    sp__memset	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    FastTransfer_buffer_flush@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    FastTransfer_buffer_put@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), CRCcheck@arrayHolder(COMRAM[3]), receiveData@holder_1397(BANK0[3]), receiveData@holder(BANK0[3]), 
		 -> rx_buffer(BANK2[200]), ring_buffer(BANK1[206]), 

    sendStructAddress	PTR unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), ring_buffer(BANK1[206]), 

    begin@stufftoreceive	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_get(), 

    serial_read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_get(), 

    begin@stuffpeek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_peek(), 

    serial_peek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_peek(), 

    begin@stuffavailable	PTR FTN()int  size(2) Largest target is 2
		 -> Receive_available(), 

    serial_available	PTR FTN()int  size(2) Largest target is 2
		 -> Absolute function(), Receive_available(), 

    begin@stufftosend	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Send_put(), 

    serial_write	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), Send_put(), 

    begin@ptr	PTR volatile int  size(2) Largest target is 40
		 -> receiveArray(BANK0[40]), 

    receiveArrayAddress	PTR volatile int  size(2) Largest target is 40
		 -> NULL(NULL[0]), receiveArray(BANK0[40]), 


Critical Paths under _main in COMRAM

    _FastTransfer_buffer_flush->_memset
    _ToSend->_FastTransfer_buffer_put
    _FastTransfer_buffer_put->_FastTransfer_buffer_modulo_inc
    _FaultsCollector->_GetPDUFault
    _Send_put->_UART_buff_get
    _Send_put->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc
    _Receive_get->_UART_buff_get
    _UART_buff_get->_UART_buff_modulo_inc
    _Receive_available->_UART_buff_size
    _processPowerRequest->_EnableSlavePower
    _begin->___awdiv
    _UART_buff_init->_memset
    _PDUStartup->_EnableSlavePower
    _StartUp595->_Clear595
    _writeRegisters->_Delay
    _EnableSlavePower->_SetPin595
    _ComputeStorageData->_DATAEE_ReadByte
    _CoolingStop->_PotClear
    _CoolingStart->_PotClear
    _CoolingStart->_PotSetpoint
    _PotSetpoint->_Delay
    _PotClear->_Delay

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR1_ISR->_ReadCurrent
    i2_Update->i2_writeRegisters
    i2_writeRegisters->i2_Delay
    _FuseSystem->___wmul
    _EUSART1_Transmit_ISR->i2_UART_buff_get
    i2_UART_buff_get->i2_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->i2_UART_buff_put
    i2_UART_buff_put->i2_UART_buff_modulo_inc

Critical Paths under _main in BANK0

    _updateComms->_receiveData
    _respondECU->_sendData
    _sendData->_FastTransfer_buffer_flush
    _sendData->_Send_put
    _ToSend->_FastTransfer_buffer_put
    _receiveData->_Send_put
    _Send_put->_UART_buff_get
    _Send_put->_UART_buff_put
    _Receive_get->_UART_buff_get
    _SYSTEM_Initialize->_begin
    _EUSART1_Initialize->_UART_buff_init
    _Update->_writeRegisters
    _Clear595->_writeRegisters
    _writeRegisters->_Delay
    _EnableSlavePower->_SetPin595
    _CoolingStart->_PotSetpoint
    _PotSetpoint->_Delay
    _PotClear->_Delay

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   52638
                                             22 BANK0      5     5      0
                 _ComputeStorageData
                       _CoolingCheck
                       _CoolingStart
                        _CoolingStop
                   _DATAEE_WriteByte
                         _PDUStartup
                 _PWM4_LoadDutyValue
                        _PotSetpoint
                  _SYSTEM_Initialize
                        _updateComms
 ---------------------------------------------------------------------------------
 (1) _updateComms                                          0     0      0   26219
                _processPowerRequest
                        _receiveData
                         _respondECU
 ---------------------------------------------------------------------------------
 (2) _respondECU                                           0     0      0    9141
                              _Delay
                    _FaultsCollector
                             _ToSend
                           _sendData
 ---------------------------------------------------------------------------------
 (3) _sendData                                             5     5      0    5704
                                              4 BANK0      5     5      0
                   Absolute function *
                               _CRC8
          _FastTransfer_buffer_flush
                           _Send_put *
                        _crcBufS_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_put                                          7     2      5     742
                                             28 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_flush                            4     0      4    1139
                                              0 BANK0      4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (3) _ToSend                                               3     1      2    1751
                                              5 BANK0      3     1      2
            _FastTransfer_buffer_put
                    _FaultsCollector (ARG)
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_put                              7     2      5    1535
                                             34 COMRAM     2     2      0
                                              0 BANK0      5     0      5
     _FastTransfer_buffer_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _FastTransfer_buffer_modulo_inc                       6     2      4     746
                                             28 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _FaultsCollector                                      9     7      2     232
                                             29 COMRAM     5     3      2
                                              0 BANK0      4     4      0
                        _GetPDUFault
 ---------------------------------------------------------------------------------
 (4) _GetPDUFault                                          1     1      0      31
                                             28 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _receiveData                                         18    18      0    5462
                                              4 BANK0     18    18      0
                   Absolute function *
                               _CRC8
                  _Receive_available *
                        _Receive_get *
                           _Send_put *
 ---------------------------------------------------------------------------------
 (4) _Send_put                                             1     1      0    2614
                                              3 BANK0      1     1      0
                      _UART_buff_get
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (5) _UART_buff_put                                        5     2      3    1418
                                             34 COMRAM     2     2      0
                                              0 BANK0      3     0      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (3) _Receive_get                                          0     0      0    1165
                      _UART_buff_get
 ---------------------------------------------------------------------------------
 (5) _UART_buff_get                                        5     3      2    1165
                                             34 COMRAM     2     0      2
                                              0 BANK0      3     3      0
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (6) _UART_buff_modulo_inc                                 6     2      4     746
                                             28 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _Receive_available                                    2     0      2     150
                                             30 COMRAM     2     0      2
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (4) _UART_buff_size                                       2     0      2     150
                                             28 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _CRC8                                                 7     4      3    1014
                                             28 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _processPowerRequest                                  2     0      2   11616
                                              8 BANK0      2     0      2
                   _EnableSlavePower
                             _Update
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    2478
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM4_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
                              _begin
 ---------------------------------------------------------------------------------
 (2) _begin                                               13     0     13    1463
                                              0 BANK0     13     0     13
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     599
                                             28 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0    1015
                     _UART_buff_init
 ---------------------------------------------------------------------------------
 (3) _UART_buff_init                                       2     0      2    1015
                                              0 BANK0      2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               8     2      6     830
                                             28 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PDUStartup                                           0     0      0   14719
                 _ComputeStorageData
                   _EnableSlavePower
                         _StartUp595
                             _Update
 ---------------------------------------------------------------------------------
 (3) _Update                                               0     0      0    1621
                     _writeRegisters
 ---------------------------------------------------------------------------------
 (2) _StartUp595                                           0     0      0    3174
                           _Clear595
                              _Delay
 ---------------------------------------------------------------------------------
 (3) _Clear595                                             2     2      0    1720
                                             33 COMRAM     2     2      0
                     _writeRegisters
 ---------------------------------------------------------------------------------
 (4) _writeRegisters                                       4     4      0    1621
                                              4 BANK0      4     4      0
                              _Delay
 ---------------------------------------------------------------------------------
 (3) _EnableSlavePower                                     3     1      2    9763
                                             34 COMRAM     2     0      2
                                              4 BANK0      1     1      0
                          _SetPin595
 ---------------------------------------------------------------------------------
 (4) _SetPin595                                           10     4      6    8283
                                             28 COMRAM     6     0      6
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _ComputeStorageData                                   4     4      0     161
                                             29 COMRAM     4     4      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_ReadByte                                      1     1      0      31
                                             28 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DATAEE_WriteByte                                     3     2      1    1020
                                             28 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (1) _CoolingStop                                          0     0      0    1892
                 _PWM4_LoadDutyValue
                           _PotClear
 ---------------------------------------------------------------------------------
 (1) _CoolingStart                                         0     0      0    3763
                 _PWM4_LoadDutyValue
                           _PotClear
                        _PotSetpoint
 ---------------------------------------------------------------------------------
 (1) _PotSetpoint                                         10     8      2    1871
                                             33 COMRAM     2     0      2
                                              4 BANK0      8     8      0
                              _Delay
 ---------------------------------------------------------------------------------
 (2) _PotClear                                             2     2      0    1522
                                             33 COMRAM     2     2      0
                              _Delay
 ---------------------------------------------------------------------------------
 (3) _Delay                                                9     5      4    1454
                                             28 COMRAM     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _PWM4_LoadDutyValue                                   4     2      2     370
                                             28 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _CoolingCheck                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                          14    14      0    6276
                                             14 COMRAM    14    14      0
                            _ADC_ISR
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR1_ISR                                             0     0      0    5067
                         _FuseSystem
                        _ReadCurrent
 ---------------------------------------------------------------------------------
 (9) _ReadCurrent                                          1     1      0    4644
                                             13 COMRAM     1     1      0
                  _ADC_GetConversion
                        i2_SetPin595
                           i2_Update
 ---------------------------------------------------------------------------------
 (10) i2_Update                                            0     0      0     212
                   i2_writeRegisters
 ---------------------------------------------------------------------------------
 (11) i2_writeRegisters                                    4     4      0     212
                                              9 COMRAM     4     4      0
                            i2_Delay
 ---------------------------------------------------------------------------------
 (12) i2_Delay                                             9     5      4      98
                                              0 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (10) i2_SetPin595                                        10     4      6    4278
                                              0 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (10) _ADC_GetConversion                                   5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (9) _FuseSystem                                           4     4      0     423
                                              6 COMRAM     4     4      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (10) ___wmul                                              6     2      4     287
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Transmit_ISR                                 0     0      0     528
                    i2_UART_buff_get
                   i2_UART_buff_size
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_size                                     2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_get                                      5     3      2     480
                                              6 COMRAM     5     3      2
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Receive_ISR                                  1     1      0     681
                                             11 COMRAM     1     1      0
                    i2_UART_buff_put
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_put                                      5     2      3     658
                                              6 COMRAM     5     2      3
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_modulo_inc                              6     2      4     298
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) _ADC_ISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ComputeStorageData
     _DATAEE_ReadByte
   _CoolingCheck
   _CoolingStart
     _PWM4_LoadDutyValue
     _PotClear
       _Delay
     _PotSetpoint
       _Delay
   _CoolingStop
     _PWM4_LoadDutyValue
     _PotClear
       _Delay
   _DATAEE_WriteByte
   _PDUStartup
     _ComputeStorageData
       _DATAEE_ReadByte
     _EnableSlavePower
       _SetPin595
     _StartUp595
       _Clear595
         _writeRegisters
           _Delay
       _Delay
     _Update
       _writeRegisters
         _Delay
   _PWM4_LoadDutyValue
   _PotSetpoint
     _Delay
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
       _UART_buff_init
         _memset
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM4_Initialize
     _TMR1_Initialize
       _TMR1_StartTimer
     _TMR2_Initialize
       _TMR2_StartTimer
     _begin
       ___awdiv
   _updateComms
     _processPowerRequest
       _EnableSlavePower
         _SetPin595
       _Update
         _writeRegisters
           _Delay
     _receiveData
       Absolute function(Fake) *
       _CRC8 *
       _Receive_available *
         _UART_buff_size
       _Receive_get *
         _UART_buff_get
           _UART_buff_modulo_inc
       _Send_put *
         _UART_buff_get
           _UART_buff_modulo_inc
         _UART_buff_put
           _UART_buff_modulo_inc
     _respondECU
       _Delay
       _FaultsCollector
         _GetPDUFault
       _ToSend
         _FastTransfer_buffer_put
           _FastTransfer_buffer_modulo_inc
         _FaultsCollector (ARG)
           _GetPDUFault
       _sendData
         Absolute function(Fake) *
         _CRC8 *
         _FastTransfer_buffer_flush *
           _memset
         _Send_put *
           _UART_buff_get
             _UART_buff_modulo_inc
           _UART_buff_put
             _UART_buff_modulo_inc
         _crcBufS_put *

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
   _EUSART1_Receive_ISR
     i2_UART_buff_put
       i2_UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     i2_UART_buff_get
       i2_UART_buff_modulo_inc
     i2_UART_buff_size
   _TMR1_ISR
     _FuseSystem
       ___wmul
     _ReadCurrent
       _ADC_GetConversion
       i2_SetPin595
       i2_Update
         i2_writeRegisters
           i2_Delay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      CE      13       80.5%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      CE      11       80.5%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      C8       8       78.1%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      FE       6       99.2%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     1B      96       4       93.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     24      42       1       70.2%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     43A       9        0.0%
DATA                 0      0     43A      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sat Oct 29 02:10:15 2016

      __end_of_FastTransfer_buffer_flush 1EB4                   i2_UART_buff_modulo_inc 2426  
                          ??_CoolingStop 0024                           ??_CoolingCheck 001D  
                           _rx_array_inx 003E                             ___awdiv@sign 0022  
                    ___wmul@multiplicand 0003                           ??_CoolingStart 0024  
                           __CFG_CP0$OFF 000000                             __CFG_CP1$OFF 000000  
                           __CFG_CP2$OFF 000000                             __CFG_CP3$OFF 000000  
                                    l170 2268                                      l411 1B5A  
                                    l406 1918                                      l483 2168  
                                    l743 1A10                                      l745 1A1C  
                                    l924 17F4                                      l916 143E  
                                    l925 182E                                      l919 14A2  
                                    l796 19B4                             __CFG_CPB$OFF 000000  
                                    _PR2 000FBB                             __CFG_CPD$OFF 000000  
                        _timer1ReloadVal 0033                          __end_of_ADC_ISR 2616  
   FastTransfer_buffer_flush@clearBuffer 00DD                          _TMR2_Initialize 2586  
                        _PWM4_Initialize 259A                                      prod 000FF3  
                                    tosl 000FFD                                      wreg 000FE8  
          i2UART_buff_modulo_inc@modulus 0003                             __CFG_LVP$OFF 000000  
                                   l4008 0DC0                                     l4120 0F56  
                                   l4034 1A04                                     l4026 19CE  
                                   l4202 1BD0                                     l4130 0FCE  
                                   l4122 0F70                                     l4300 0770  
                                   l4108 1B12                                     l4132 0FF8  
                                   l4124 0F8C                                     l4206 1BDE  
                                   l4134 0FFE                                     l4126 0FA6  
                                   l4144 22B6                                     l4320 0846  
                                   l4304 079E                                     l4128 0FC2  
                                   l4090 1564                                     l4082 1506  
                                   l4154 22DC                                     l4402 0C02  
                                   l4322 085E                                     l4138 103A  
                                   l4092 1582                                     l4084 1524  
                                   l4180 1B88                                     l4420 0CB4  
                                   l4340 08D8                                     l4324 0864  
                                   l4308 07A2                                     l4332 089E  
                                   l4502 15F0                                     l4094 15A0  
                                   l4086 1542                                     l4190 1BAA  
                                   l4174 1B78                                     l4430 0D6A  
                                   l4422 0CCE                                     l4512 161A  
                                   l4424 0CE8                                     l4416 0C80  
                                   l4432 0D86                                     l4360 0A3C  
                                   l4352 099C                                     l4344 0900  
                                   l4336 08A6                                     l4440 0D92  
                                   l4506 1600                                     l4098 15BE  
                                   l4186 1B9E                                     l4450 1888  
                                   l4426 0D02                                     l4418 0C9A  
                                   l4362 0A50                                     l4188 1BA6  
                                   l4460 18C2                                     l4428 0D1C  
                                   l4380 0B24                                     l4612 223E  
                                   l4526 1482                                     l4198 1BC6  
                                   l4462 18D0                                     l4454 189E  
                                   l4390 0BDA                                     l4382 0B3E  
                                   l4358 0A36                                     l4536 14D4  
                                   l4472 190A                                     l4456 18AC  
                                   l4448 187A                                     l3912 241C  
                                   l4384 0B58                                     l4376 0AF0  
                                   l4392 0BF6                                     l3922 20C2  
                                   l4466 18E6                                     l4386 0B72  
                                   l4378 0B0A                                     l4722 1260  
                                   l4468 18F4                                     l4388 0B8C  
                                   l4740 129E                                     l4732 1282  
                                   l3918 20A6                                     l3934 23B0  
                                   l3942 1090                                     l3928 23F2  
                   receiveData@crcHolder 00EB                                     l3938 23C0  
                                   l3962 19AE                                     l3972 213C  
                                   l3948 1108                                     l3978 2152  
                                   l3986 216E                                     l3988 2174  
                                   _CRC8 2136                                     _LATA 000F89  
                                   _LATB 000F8A                                     _LATC 000F8B  
                                   _LATD 000F8C                                     _LATE 000F8D  
                                   u4100 182E                                     u3301 0DBE  
                                   u3240 193C                                     u4140 222A  
                                   u4125 2276                                     u4126 2278  
                                   u3280 1786                                     u3408 0F5A  
                                   u3418 0F74                                     u3380 1B5A  
                                   u3428 0F90                                     u3374 1B2E  
                                   u3438 0FAA                                     u3375 1B28  
                                   u3608 07A6                                     u3448 0FD2  
                                   u3609 07BA                                     u3628 07C4  
                                   u3468 1022                                     u4357 20AC  
                                   u3629 07D8                                     u3718 08AA  
                                   u3398 0F40                                     u3751 0940  
                                   u3719 08BE                                     u3808 0ADA  
                                   u3728 08DC                                     u3648 07E2  
                                   u3568 074A                                     u3729 08F0  
                                   u3649 07F6                                     u3569 075E  
                                   u3818 0AF4                                     u3658 07FC  
                                   u3659 0810                                     u3908 0C6A  
                                   u3828 0B0E                                     u3668 0816  
                                   u3588 077A                                     u3669 082A  
                                   u3589 078E                                     u3918 0C84  
                                   u3838 0B28                                     i2l31 238E  
                                   u3928 0C9E                                     u3848 0B42  
                                   u3688 084A                                     u3938 0CB8  
                                   u3858 0B5C                                     u3948 0CD2  
                                   u3868 0B76                                     u3958 0CEC  
                                   u3878 0B90                                     u3968 0D06  
                                   u3888 0BDE                                     i2l73 0070  
                                   i2l65 004E                                     u3978 0D20  
                                   i2l67 005A                                     u3988 0D6E  
                                   i2l69 0066                                     _TMR2 000FBC  
                                   _WPUB 000F61                          __end_ofi2_Delay 21CA  
                                   _data 0084                                     _main 11A4  
               __end_of_EnableSlavePower 15E8                                     fsr0h 000FEA  
                                   fsr1h 000FE2                                     fsr0l 000FE9  
                                   fsr2h 000FDA                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                                   btemp 0043                            __CFG_BORV$190 000000  
                                   pclat 000FFA                                     prodh 000FF4  
                                   prodl 000FF3          __end_of_FastTransfer_buffer_put 0F24  
                                   start 00AC                            __CFG_IESO$OFF 000000  
                      ?i2_writeRegisters 0001                         ?_FaultsCollector 001E  
                           ___param_bank 000010                            ??_ReadCurrent 000E  
                     ??i2_writeRegisters 000A           i2UART_buff_modulo_inc@my_value 0005  
                         GetPDUFault@loc 001D                __size_of_DATAEE_WriteByte 0036  
                                  ?_CRC8 001D           __size_of_OSCILLATOR_Initialize 000E  
          __end_of_OSCILLATOR_Initialize 25F0                       crcBufS_put@address 001F  
                                  ?_main 0001                          __end_of___awdiv 1BE8  
                                  _EEADR 000FA9                                    _ANSB3 0079CB  
                                  _ANSB4 0079CC                          _TMR1_StartTimer 260A  
                                  _ANSD7 0079DF                          ___awdiv@divisor 001F  
                                  _T1CON 000FCD                                    _T2CON 000FBA  
                                  _LATB0 007C50                                    _LATB3 007C53  
                                  _LATB4 007C54                                    _LATB5 007C55  
                                  _LATD4 007C64                                    _LATD5 007C65  
                                  _LATD6 007C66                                    _LATD7 007C67  
                         __CFG_DEBUG$OFF 000000                              ?_PDUStartup 0001  
                                  i2l743 1C2C                                    i2l745 1C36  
                                  i2l827 24C2                                    i2l676 1CE2  
                                  _MCSOn 0038                                    i2l796 1ADA  
                        ___awdiv@counter 0021                       _PWM4_LoadDutyValue 2346  
                                  _TMR1H 000FCF                                    _TMR1L 000FCE  
                    __end_of_CoolingStop 25D4                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                                  _TRISD 000F95                                    _TRISE 000F96  
                                  _Delay 2092                              _GetPDUFault 252E  
                          __CFG_WRT0$OFF 000000                            __CFG_WRT1$OFF 000000  
                          __CFG_WRT2$OFF 000000                            __CFG_WRT3$OFF 000000  
                   _EUSART1_Transmit_ISR 2314                           __CFG_EBTR0$OFF 000000  
                         __CFG_FCMEN$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                           __CFG_EBTR3$OFF 000000  
                       ??_writeRegisters 0022                         __end_of_TMR1_ISR 2314  
                          __CFG_WRTB$OFF 000000                            __CFG_WRTC$OFF 000000  
                          __CFG_WRTD$OFF 000000                                    _begin 1FE2  
                        _DATAEE_ReadByte 25AE                           __CFG_EBTRB$OFF 000000  
                                  _group 0025                      ?_PWM4_LoadDutyValue 001D  
                     __CFG_MCLRE$EXTMCLR 000000                                    main@i 00F3  
                                  main@j 00F1                  __end_of_TMR1_Initialize 24BA  
                       __end_ofi2_Update 2606                                    pclath 000FFA  
                                  tablat 000FF5                            ??_Receive_get 0025  
                                  plusw2 000FDB                           begin@stuffpeek 00E6  
                   __size_of_crcBufS_put 00D8                                    status 000FD8  
                       __end_of_Clear595 22E2                           __CFG_HFOFST$ON 000000  
                        _TMR2_StartTimer 2606                             ?_receiveData 0001  
                         __CFG_PBADEN$ON 000000                     PotSetpoint@new_point 0022  
                           __end_of_CRC8 2180                          __initialization 1DD4  
             __end_of_EUSART1_Initialize 220E                             __end_of_main 12D2  
                             _CurrentADC 006C                     ??_PWM4_LoadDutyValue 001F  
                             ToSend@what 00E0                                   ??_CRC8 0020  
                __end_of_PWM4_Initialize 25AE                  __end_of_TMR2_Initialize 259A  
                              ??_ADC_ISR 0001              ?_INTERRUPT_InterruptManager 0001  
                   PotSetpoint@set_point 00E1                               _FuseSystem 1C66  
                                 ??_main 0025                      __end_of_ReadCurrent 0740  
                       __end_of_PotClear 1864                            __activetblptr 000002  
                       __end_of_Send_put 22AE                __size_ofi2_UART_buff_size 0016  
                                 ?_Delay 001D                    ?_EUSART1_Transmit_ISR 0001  
          FastTransfer_buffer_put@towhat 00DE                                   ?_begin 00DB  
                              ??i2_Delay 0005                                   _ADCON0 000FC2  
                                 _ADCON1 000FC1                                   _ADCON2 000FC0  
                            FuseSystem@i 0009                                   _ADRESH 000FC4  
                                 _ADRESL 000FC3                                   _EEDATA 000FA8  
                                 _CCPR2H 000F68                                   _CCPR2L 000F67  
                                 _EECON2 000FA7                         ___awdiv@dividend 001D  
                                 _ANSELA 000F38                                   _ANSELB 000F39  
                                 _ANSELC 000F3A                                   _ANSELD 000F3B  
                                 _ANSELE 000F3C                                   _T1GCON 000FCC  
                   __end_of_CoolingCheck 2612                          i2_UART_buff_get 1A4C  
                                 _RC1STA 000FAB                          i2_UART_buff_put 12D2  
                                 i2l3300 0510                                   Delay@i 00DB  
                                 i2l3306 0628                                   i2l3260 1C7E  
                         __CFG_WDTEN$OFF 000000                                   i2l3168 2446  
                                 i2l3272 1CDC                                   i2l3256 1C6E  
                                 i2l3266 1CC4                                   i2l3282 01C8  
                                 i2l3268 1CCC                                   i2l3294 03F8  
                                 i2l3608 1AD6                                   i2l3288 02E0  
            UART_buff_modulo_inc@modulus 001F                                   i2l3628 233E  
                                 i2l3646 230C                                   i2l2872 2192  
                                 i2l3594 135E                                   i2l3588 12F2  
                                 i2l2876 21AC                                   i2l2982 1C24  
                                 i2l2974 1BF8                                   _TABLAT 000FF5  
                                 _RCREG1 000FAE                                   _OSCCON 000FD3  
            __end_of_processPowerRequest 191E                                   _SPBRG1 000FAF  
                   __end_of_CoolingStart 2516                                   _TX1STA 000FAC  
                                 _TRISB3 007C9B                                   _TRISB4 007C9C  
                                 _TRISB5 007C9D                                   _TXREG1 000FAD  
                    __size_of_PDUStartup 0062                           __CFG_XINST$OFF 000000  
                                 _ToSend 2476                            ??_PotSetpoint 00DF  
                    __end_of_Receive_get 25E2                             _CCPTMRS1bits 000F48  
            ??_FastTransfer_buffer_flush 0025                                   _Update 25FA  
                     __size_of_SetPin595 006A                            _output_buffer 0400  
                __end_of_TMR1_StartTimer 260E                                   ___wmul 2450  
                              ??___awdiv 0021                                CRC8@tempI 0022  
                         __CFG_STVREN$ON 000000                              _CoolingStop 25C2  
                                 _memset 23A6                                   clear_0 1DDA  
                                 clear_1 1DE6                                   clear_2 1DF2  
                                 clear_3 1DFE                                   clear_4 1E0A  
                                 clear_5 1E16                         ___awdiv@quotient 0023  
                                 main@UP 00F5                                   _rx_len 003F  
                       __end_of_sendData 106E                  __end_of_DATAEE_ReadByte 25C2  
                           __pdataCOMRAM 0040                            Send_put@_data 00DE  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8         __size_of_FastTransfer_buffer_put 018E  
                             _StartUp595 1F80                 ADC_GetConversion@channel 0005  
           __end_of_UART_buff_modulo_inc 2426                  __end_of_TMR2_StartTimer 260A  
          __size_of_INTERRUPT_Initialize 000A                        ReadCurrent@gather 000E  
                       ?_TMR1_Initialize 0001                        _SYSTEM_Initialize 1D5E  
                             __accesstop 0060                  __end_of__initialization 1E3A  
                           ?i2_SetPin595 0001                       ?_SYSTEM_Initialize 0001  
                          ___rparam_used 000001                  ?i2_UART_buff_modulo_inc 0001  
                           ?_updateComms 0001                            __end_of_Delay 20E8  
                         __pcstackCOMRAM 0001                      ??_SYSTEM_Initialize 0025  
                       crcBufS_put@_this 001D                              _ReadCurrent 00B0  
                          __end_of_begin 203C                                ?_TMR1_ISR 0001  
 __end_of_FastTransfer_buffer_modulo_inc 23FC  __size_of_FastTransfer_buffer_modulo_inc 002A  
         _FastTransfer_buffer_modulo_inc 23D2                         _DATAEE_WriteByte 2244  
                       ?_TMR2_Initialize 0001                         ?_PWM4_Initialize 0001  
           FastTransfer_buffer_put@_this 00DB                              ToSend@where 00E2  
                            ?_FuseSystem 0001                                ?i2_Update 0001  
                    __end_of_PotSetpoint 1500              __size_of_ComputeStorageData 00DC  
            PWM4_LoadDutyValue@dutyValue 001D                       UART_buff_get@_this 0023  
                            _Currentcomp 0078                    __end_of_UART_buff_get 19BA  
                 ??_EUSART1_Transmit_ISR 000C                    __end_of_UART_buff_put 11A4  
                              ?_Clear595 0001                                  ??_Delay 0021  
                __end_ofi2_UART_buff_get 1ADE                  __end_ofi2_UART_buff_put 13EC  
            __end_of_EUSART1_Receive_ISR 24DA                _FastTransfer_buffer_flush 1E48  
                                CRC8@crc 0023                                  CRC8@len 001F  
                                CRC8@sum 0020                                  ??_begin 0025  
                      __end_of_SetPin595 1F1E                __end_of_SYSTEM_Initialize 1DD4  
                 receiveData@holder_1397 00E8                      _addressErrorCounter 0098  
                             __pbssBANK0 0060                               __pbssBANK1 0100  
                             __pbssBANK2 0200                               __pbssBANK3 0300  
                             __pbssBANK4 0400                          __CFG_PLLCFG$OFF 000000  
                            _Receive_get 25D4           __end_ofi2_UART_buff_modulo_inc 2450  
                      begin@givenAddress 00DE                        ?_EnableSlavePower 0023  
                __size_of_UART_buff_init 001E                  __size_of_UART_buff_size 0016  
                              ?_PotClear 0001                                ?_Send_put 0001  
                     ??_EnableSlavePower 0025                     __size_of_receiveData 0656  
                                ?_ToSend 00E0                       __CFG_CCP2MX$PORTC1 000000  
                                ?_Update 0001                                  ?___wmul 0001  
                       ?_TMR1_StartTimer 0001                               ??_TMR1_ISR 000F  
                     __CFG_CCP3MX$PORTB5 000000      FastTransfer_buffer_modulo_inc@value 001D  
                                _CCP2CON 000F66                                  _ADC_ISR 2612  
                                ?_memset 001D                               _crc_buffer 00CA  
                             ??i2_Update 000E                  __size_of_ADC_Initialize 0018  
                       ?_DATAEE_ReadByte 0001                             ??_PDUStartup 0025  
                     UART_buff_put@_this 00DB                               ??_Clear595 0022  
                       i2_UART_buff_size 2570                __size_ofi2_writeRegisters 007E  
            i2UART_buff_modulo_inc@value 0001                             ?_GetPDUFault 0001  
                  __size_of_CoolingCheck 0004                                  _OSCCON2 000FD2  
                                _TBLPTRH 000FF7                                  _TBLPTRL 000FF6  
                                _TBLPTRU 000FF8                              ?_StartUp595 0001  
                      _Receive_available 2544             UART_buff_modulo_inc@my_value 0021  
                      __CFG_PRICLKEN$OFF 000000                                  _OSCTUNE 000F9B  
                                _SPBRGH1 000FB0                      sendData@whereToSend 00E0  
                    _receiveArrayAddress 0029                                  i2_Delay 2180  
                  __size_of_CoolingStart 001E                         ?_TMR2_StartTimer 0001  
                     ?_Receive_available 001F                               begin@error 00DF  
                   DATAEE_WriteByte@bAdd 001E                      __size_of_FuseSystem 007E  
                    ??_Receive_available 0021                                ?_sendData 0001  
                                _Current 0060                        _alignErrorCounter 009A  
                        __CFG_PWRTEN$OFF 000000                               ??_PotClear 0022  
                             ??_Send_put 0025                                  __Hparam 0000  
                                __Lparam 0000                       __end_of_PDUStartup 1F80  
                        __size_of_ToSend 0022                              _PotSetpoint 13EC  
                              _AKNAKsend 0037                          __size_of_Update 0006  
                                ___awdiv 1B64                     _UART_buff_modulo_inc 23FC  
                        __size_of___wmul 0026                                  _calc_CS 0039  
                           _CoolingCheck 260E                                  __pcinit 1DD4  
                        __size_of_memset 002C                                  __ramtop 0600  
                       FaultsCollector@i 00DD                         i2UART_buff_get@c 000B  
                                __ptext0 11A4                                  __ptext1 220E  
                                __ptext2 203C                                  __ptext3 0F24  
                                __ptext4 16C4                                  __ptext5 1E48  
                                __ptext6 2476                                  __ptext7 0D96  
                                __ptext8 23D2                                  __ptext9 1ADE  
               __size_of_FaultsCollector 0086                             _CoolingStart 24F8  
                       i2UART_buff_put@c 0009                                _T1CONbits 000FCD  
                  _OSCILLATOR_Initialize 25E2                __end_of_Receive_available 255A  
                              _T2CONbits 000FBA                  _FastTransfer_buffer_put 0D96  
                     _EUSART1_Initialize 21CA                         ?i2_UART_buff_get 0007  
               ??_PIN_MANAGER_Initialize 001D                                Clear595@i 0022  
                       ?i2_UART_buff_put 0007                            ??_crcBufS_put 0022  
             __size_of_SYSTEM_Initialize 0076                     end_of_initialization 1E3A  
                              Delay@wait 001D                      ?_EUSART1_Initialize 0001  
                                memset@c 001F                                  memset@n 0021  
                                memset@p 0023                            __Lmediumconst 0000  
                             ??_sendData 00DF                     __size_ofi2_SetPin595 004E  
                              _PDUFalult 0090                    ?_UART_buff_modulo_inc 001D  
                   __size_of_updateComms 0036                                  postdec2 000FDD  
                    __size_of_StartUp595 0062                                  postinc0 000FEE  
                                postinc2 000FDE                               _respondECU 203C  
            __size_of_PWM4_LoadDutyValue 0030                             ?_CoolingStop 0001  
                       begin@stufftosend 00E0                             SetPin595@Reg 001D  
                   ??_EUSART1_Initialize 0025                             SetPin595@pin 001F  
                 _dataAdressErrorCounter 009E                               _rx_address 003D  
                              _TRISCbits 000F94                                _TRISDbits 000F95  
                       FuseSystem@i_1537 0007                 __end_of_DATAEE_WriteByte 227A  
                           begin@maxSize 00DD       __size_of_FastTransfer_buffer_flush 006C  
                  i2UART_buff_size@_this 0001                           _UART_buff_init 24DA  
                         _UART_buff_size 255A                  __size_of_writeRegisters 0092  
                    __end_of_crcBufS_put 179C                            _moduleAddress 003B  
           __size_of_processPowerRequest 00BA                             ?_ReadCurrent 0001  
                         __end_of_ToSend 2498             __end_of_INTERRUPT_Initialize 25FA  
                         __end_of_Update 2600                          _crcErrorCounter 009C  
                         __end_of___wmul 2476                        crcBufS_put@oldCRC 0020  
                          __pidataCOMRAM 2616                             ??_FuseSystem 0007  
                      __size_of_TMR1_ISR 0032                           _ADC_Initialize 2516  
              ??_FastTransfer_buffer_put 0023                   ?_OSCILLATOR_Initialize 0001  
                         __end_of_memset 23D2                        crcBufS_put@status 0021  
                           receiveData@r 00EF               __size_of_Receive_available 0016  
                           receiveData@u 00ED                         i2_writeRegisters 1BE8  
                      __size_ofi2_Update 0006                      start_initialization 1DD4  
        __size_of_PIN_MANAGER_Initialize 007A                    EnableSlavePower@slave 00DF  
                      __size_of_Clear595 0034                        ??_FaultsCollector 0020  
                   __size_of_GetPDUFault 0016                      i2writeRegisters@val 000A  
                              PotClear@x 0022                   __end_of_UART_buff_init 24F8  
                         UART_buff_get@c 00DD                   __end_of_UART_buff_size 2570  
                           ?_Receive_get 0001                                _SetPin595 1EB4  
                         UART_buff_put@c 00DD                      DATAEE_ReadByte@bAdd 001D  
                     __end_of_FuseSystem 1CE4                 __end_ofi2_UART_buff_size 2586  
                               ??_ToSend 0025                   ??_UART_buff_modulo_inc 0021  
               __size_of_TMR1_Initialize 0022                                 CRC8@data 001D  
                               ??_Update 0022                        __size_of_PotClear 00C8  
                      __size_of_Send_put 0034                              ?_respondECU 0001  
                               ??___wmul 0005                   __end_of_ADC_Initialize 252E  
             __end_of_ComputeStorageData 16C4                                 ?_ADC_ISR 0001  
                               ??_memset 0023                __size_of_EnableSlavePower 00E8  
                            __pbssCOMRAM 0025            __size_of_EUSART1_Transmit_ISR 0032  
                          __pcstackBANK0 00DB                             ??_StartUp595 0024  
               __size_of_PWM4_Initialize 0014                 __size_of_TMR2_Initialize 0014  
                               ?i2_Delay 0001                             _Receive_peek 000000  
                    UART_buff_init@_this 00DB                              _crcBufS_put 16C4  
                      i2writeRegisters@i 000C                          ?_UART_buff_init 00DB  
                        ?_UART_buff_size 001D             __size_of_EUSART1_Receive_ISR 0020  
                             ?_SetPin595 001D                            ??_receiveData 00DF  
                             sendData@CS 00E1                   __size_of_UART_buff_get 009C  
                 __size_of_UART_buff_put 0136                   _PIN_MANAGER_Initialize 1CE4  
                      __size_of_sendData 014A                             ?_PotSetpoint 0022  
                              __pintcode 0008                                 ?___awdiv 001D  
                     __end_of_StartUp595 1FE2                          ?_ADC_Initialize 0001  
           ??_INTERRUPT_InterruptManager 000F                     i2UART_buff_get@_this 0007  
                   __size_of_CoolingStop 0012                           i2SetPin595@Reg 0001  
                         i2SetPin595@pin 0003                                 _BAUD1CON 000FB8  
               __size_of_TMR1_StartTimer 0004                           __size_of_Delay 0056  
                         __size_of_begin 005A                 __size_of_DATAEE_ReadByte 0014  
                    __size_of_respondECU 0056                   FaultsCollector@sendVal 00DB  
                   _INTERRUPT_Initialize 25F0                             _receiveArray 00A2  
            processPowerRequest@powerSet 00E3                           ___wmul@product 0005  
                               _LATCbits 000F8B                           _writeRegisters 19BA  
                    UART_buff_size@_this 001D                                _registers 0100  
                               _IPR1bits 000F9F                                 _PIE1bits 000F9D  
               __size_of_TMR2_StartTimer 0004                                 i2Delay@i 0006  
    __size_of_INTERRUPT_InterruptManager 00A4                                 _PIR1bits 000F9E  
                               i2u275_40 1A6A                                 i2u436_47 2198  
                               i2u277_40 232E                                 i2u278_40 2300  
                    begin@stuffavailable 00E4                                 _RCONbits 000FD0  
                       __CFG_WDTPS$32768 000000                      __end_of_receiveData 0D96  
                               _TMR1_ISR 22E2           FastTransfer_buffer_flush@_this 00DB  
                           PotSetpoint@x 00E3                             _input_buffer 0300  
                   __size_of_ReadCurrent 0690                                _rx_buffer 0200  
                      ??_TMR1_Initialize 001D                         __size_of_ADC_ISR 0004  
                               i2_Update 2600                               _ADCON0bits 000FC2  
                             _ADCON2bits 000FC0                        ___wmul@multiplier 0001  
                   i2UART_buff_put@_this 0007                         i2SetPin595@value 0005  
                               _Clear595 22AE                            _UART_buff_get 191E  
                          _UART_buff_put 106E                    DATAEE_WriteByte@bData 001D  
                    _processPowerRequest 1864                 ??i2_UART_buff_modulo_inc 0005  
                            _INTCON2bits 000FF1                         __size_ofi2_Delay 004A  
                  ?_INTERRUPT_Initialize 0001                        _sendStructAddress 002B  
                      ?_DATAEE_WriteByte 001D                   __end_of_writeRegisters 1A4C  
                     PotSetpoint@new_pos 00E5                            ??i2_SetPin595 0007  
                            ??_SetPin595 00DB                     EnableSlavePower@onof 0023  
               __size_ofi2_UART_buff_get 0092                        ??_TMR2_Initialize 001D  
                      ??_PWM4_Initialize 001D                 __size_ofi2_UART_buff_put 011A  
                     ??_DATAEE_WriteByte 001E                               _EECON1bits 000FA6  
                          ??_updateComms 0025                     __size_of_Receive_get 000E  
               __end_ofi2_writeRegisters 1C66                                 _PotClear 179C  
                               __Hrparam 0000                                 _Send_put 227A  
             __end_of_PWM4_LoadDutyValue 2376                                 __Lrparam 0000  
                      _ADC_GetConversion 2376                     ?_processPowerRequest 00E3  
                     __CFG_BOREN$SBORDIS 000000                        __CFG_P2BMX$PORTD2 000000  
                ??_OSCILLATOR_Initialize 001D                       ?_ADC_GetConversion 0001  
                       __size_of___awdiv 0084              __size_of_EUSART1_Initialize 0044  
                        _FaultsCollector 1ADE                      begin@stufftoreceive 00E2  
                       _EnableSlavePower 1500                               _ANSELCbits 000F3A  
                         ?_UART_buff_get 0023                           ?_UART_buff_put 00DB  
                            CRC8@extract 0021                      ??_ADC_GetConversion 0003  
                              sendData@i 00E2                                 __ptext10 252E  
                               __ptext11 0740                                 __ptext20 1864  
                               __ptext12 227A                                 __ptext21 1D5E  
                               __ptext13 106E                               _T1GCONbits 000FCC  
                               __ptext30 25E2                                 __ptext22 1FE2  
                               __ptext14 25D4                                 __ptext31 25F0  
                               __ptext23 1B64                                 __ptext15 191E  
                               __ptext40 19BA                                 __ptext32 21CA  
                               __ptext24 2586                                 __ptext16 23FC  
                               __ptext41 1500                                 __ptext33 24DA  
                               __ptext25 2606                                 __ptext17 2544  
                               __ptext50 2092                                 __ptext42 1EB4  
                               __ptext34 23A6                                 __ptext26 2498  
                               __ptext18 255A                                 __ptext51 2346  
                               __ptext43 15E8                                 __ptext35 2516  
                               __ptext27 260A                                 __ptext19 2136  
                               __ptext60 2376                                 __ptext52 260E  
                               __ptext44 25AE                                 __ptext36 1F1E  
                               __ptext28 259A                                 __ptext61 1C66  
                               __ptext45 2244                                 __ptext37 25FA  
                               __ptext29 1CE4                                 __ptext70 0000  
                               __ptext62 2450                                 __ptext54 22E2  
                               __ptext46 25C2                                 __ptext38 1F80  
                               __ptext63 2314                                 __ptext55 00B0  
                               __ptext47 24F8                                 __ptext39 22AE  
                               __ptext64 2570                                 __ptext56 2600  
                               __ptext48 13EC                                 __ptext65 1A4C  
                               __ptext57 1BE8                                 __ptext49 179C  
                               __ptext66 24BA                                 __ptext58 2180  
                               __ptext67 12D2                                 __ptext59 20E8  
                               __ptext68 2426                                 __ptext69 2612  
                      ??_TMR1_StartTimer 001D                            __size_of_CRC8 004A  
                               begin@ptr 00DB                              i2Delay@wait 0001  
            DATAEE_WriteByte@GIEBitValue 001F                  EUSART1_Receive_ISR@data 000C  
                        ?_writeRegisters 0001                            _returnAddress 003C  
                          __size_of_main 012E                              _receiveData 0740  
                               _readwhat 0040                           _Transmit_stall 0042  
                               _sendData 0F24                        ??_DATAEE_ReadByte 001D  
              __end_of_ADC_GetConversion 23A6                        ?i2_UART_buff_size 0001  
                  ??_processPowerRequest 0025                               _RC1STAbits 000FAB  
                    __end_ofi2_SetPin595 2136                                 _prev_pos 0027  
                           ??_respondECU 0025                       ??i2_UART_buff_size 0003  
                      writeRegisters@val 00DF                                 int$flags 0043  
                           _serial_write 0031                        ??_TMR2_StartTimer 001D  
                    __end_of_updateComms 2244       __end_of_INTERRUPT_InterruptManager 00AC  
             _INTERRUPT_InterruptManager 0008                     __size_of_PotSetpoint 0114  
                    _EUSART1_Receive_ISR 24BA                        receiveData@holder 00E5  
                          ??_GetPDUFault 001D                               _INTCONbits 000FF2  
                    ComputeStorageData@i 0020                UART_buff_modulo_inc@value 001D  
                       ??_UART_buff_init 0025                         ??_UART_buff_size 001F  
                     _ComputeStorageData 15E8                   ??_INTERRUPT_Initialize 001D  
                               memset@p1 001D                         _serial_available 002D  
        __size_ofi2_UART_buff_modulo_inc 002A                             ?_crcBufS_put 001D  
                               intlevel2 0000                       __end_of_respondECU 2092  
                   ?_EUSART1_Receive_ISR 0001   FastTransfer_buffer_modulo_inc@my_value 0021  
         FastTransfer_buffer_put@towhere 00DD                      ?_ComputeStorageData 0001  
                ?_PIN_MANAGER_Initialize 0001                           SetPin595@value 0021  
           __end_of_EUSART1_Transmit_ISR 2346                              _ring_buffer 0130  
                       ??_ADC_Initialize 001D                  __end_of_FaultsCollector 1B64  
             ?_FastTransfer_buffer_flush 00DB                        ??i2_UART_buff_get 0009  
                            _serial_peek 00A0                              _serial_read 002F  
                      ??i2_UART_buff_put 000A                 ?_FastTransfer_buffer_put 00DB  
          __size_of_UART_buff_modulo_inc 002A                            ?_CoolingCheck 0001  
                        ??_UART_buff_get 00DB                          ??_UART_buff_put 0023  
                   ??_ComputeStorageData 001E                            ?_CoolingStart 0001  
  FastTransfer_buffer_modulo_inc@modulus 001F                               _PDUStartup 1F1E  
              receiveData@crcHolder_1398 00EC                        __CFG_T3CMX$PORTC0 000000  
                         _maxDataAddress 003A                          writeRegisters@i 00E1  
                    __end_of_GetPDUFault 2544                    ??_EUSART1_Receive_ISR 000C  
         __end_of_PIN_MANAGER_Initialize 1D5E         ??_FastTransfer_buffer_modulo_inc 0021  
        ?_FastTransfer_buffer_modulo_inc 001D            updateComms@previousPowerState 0035  
                            i2_SetPin595 20E8                        __CFG_FOSC$INTIO67 000000  
             __size_of_ADC_GetConversion 0030                          _TMR1_Initialize 2498  
                            _updateComms 220E  
