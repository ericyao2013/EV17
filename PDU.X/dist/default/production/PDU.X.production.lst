

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Mon Aug 21 21:57:47 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    83                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    84                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    85  0000                     
    86                           ; Version 1.42
    87                           ; Generated 13/04/2017 GMT
    88                           ; 
    89                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    90                           ; All rights reserved.
    91                           ; 
    92                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    93                           ; 
    94                           ; Redistribution and use in source and binary forms, with or without modification, are
    95                           ; permitted provided that the following conditions are met:
    96                           ; 
    97                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    98                           ;        conditions and the following disclaimer.
    99                           ; 
   100                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   101                           ;        of conditions and the following disclaimer in the documentation and/or other
   102                           ;        materials provided with the distribution.
   103                           ; 
   104                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   105                           ;        software without specific prior written permission.
   106                           ; 
   107                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   108                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   109                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   110                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   111                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   112                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   113                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   114                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   115                           ; 
   116                           ; 
   117                           ; Code-generator required, PIC18F45K22 Definitions
   118                           ; 
   119                           ; SFR Addresses
   120  0000                     
   121                           	psect	idataCOMRAM
   122  00227E                     __pidataCOMRAM:
   123                           	opt stack 0
   124                           
   125                           ;initializer for _readwhat
   126  00227E  0001               	dw	1
   127                           
   128                           ;initializer for _Transmit_stall
   129  002280  01                 	db	1
   130  0000                     _CCPTMRS1bits	set	3912
   131  0000                     _ANSELCbits	set	3898
   132  0000                     _ANSELE	set	3900
   133  0000                     _ANSELD	set	3899
   134  0000                     _ANSELC	set	3898
   135  0000                     _ANSELB	set	3897
   136  0000                     _ANSELA	set	3896
   137  0000                     _ANSB4	set	31180
   138  0000                     _ANSD7	set	31199
   139  0000                     _ANSB3	set	31179
   140  0000                     _RC1STAbits	set	4011
   141  0000                     _RCREG1	set	4014
   142  0000                     _TXREG1	set	4013
   143  0000                     _SPBRGH1	set	4016
   144  0000                     _SPBRG1	set	4015
   145  0000                     _TX1STA	set	4012
   146  0000                     _RC1STA	set	4011
   147  0000                     _BAUD1CON	set	4024
   148  0000                     _T2CONbits	set	4026
   149  0000                     _TMR2	set	4028
   150  0000                     _PR2	set	4027
   151  0000                     _T2CON	set	4026
   152  0000                     _CCPR2H	set	3944
   153  0000                     _CCPR2L	set	3943
   154  0000                     _CCP2CON	set	3942
   155  0000                     _T1GCONbits	set	4044
   156  0000                     _T1CONbits	set	4045
   157  0000                     _TMR1L	set	4046
   158  0000                     _TMR1H	set	4047
   159  0000                     _T1GCON	set	4044
   160  0000                     _T1CON	set	4045
   161  0000                     _TRISDbits	set	3989
   162  0000                     _INTCON2bits	set	4081
   163  0000                     _LATCbits	set	3979
   164  0000                     _TRISCbits	set	3988
   165  0000                     _TRISE	set	3990
   166  0000                     _LATE	set	3981
   167  0000                     _TRISD	set	3989
   168  0000                     _LATD	set	3980
   169  0000                     _TRISC	set	3988
   170  0000                     _LATC	set	3979
   171  0000                     _WPUB	set	3937
   172  0000                     _TRISB	set	3987
   173  0000                     _LATB	set	3978
   174  0000                     _TRISA	set	3986
   175  0000                     _LATA	set	3977
   176  0000                     _EEDATA	set	4008
   177  0000                     _EEADR	set	4009
   178  0000                     _EECON2	set	4007
   179  0000                     _EECON1bits	set	4006
   180  0000                     _INTCONbits	set	4082
   181  0000                     _TABLAT	set	4085
   182  0000                     _TBLPTRL	set	4086
   183  0000                     _TBLPTRH	set	4087
   184  0000                     _TBLPTRU	set	4088
   185  0000                     _OSCTUNE	set	3995
   186  0000                     _OSCCON2	set	4050
   187  0000                     _OSCCON	set	4051
   188  0000                     _PIE1bits	set	3997
   189  0000                     _IPR1bits	set	3999
   190  0000                     _RCONbits	set	4048
   191  0000                     _PIR1bits	set	3998
   192  0000                     _ADCON0bits	set	4034
   193  0000                     _ADRESH	set	4036
   194  0000                     _ADRESL	set	4035
   195  0000                     _ADCON2bits	set	4032
   196  0000                     _ADCON2	set	4032
   197  0000                     _ADCON1	set	4033
   198  0000                     _ADCON0	set	4034
   199  0000                     _LATC5	set	31837
   200  0000                     _LATA3	set	31819
   201  0000                     _LATB3	set	31827
   202  0000                     _LATB5	set	31829
   203  0000                     _LATD6	set	31846
   204  0000                     _LATD4	set	31844
   205  0000                     _LATD7	set	31847
   206  0000                     _LATB0	set	31824
   207  0000                     _LATD5	set	31845
   208  0000                     _TRISB5	set	31901
   209  0000                     _TRISB3	set	31899
   210  0000                     _TRISB4	set	31900
   211  0000                     _LATB4	set	31828
   212                           
   213                           ; #config settings
   214  0000                     
   215                           	psect	cinit
   216  001BF6                     __pcinit:
   217                           	opt stack 0
   218  001BF6                     start_initialization:
   219                           	opt stack 0
   220  001BF6                     __initialization:
   221                           	opt stack 0
   222                           
   223                           ; Initialize objects allocated to COMRAM (3 bytes)
   224                           ; load TBLPTR registers with __pidataCOMRAM
   225  001BF6  0E7E               	movlw	low __pidataCOMRAM
   226  001BF8  6EF6               	movwf	tblptrl,c
   227  001BFA  0E22               	movlw	high __pidataCOMRAM
   228  001BFC  6EF7               	movwf	tblptrh,c
   229  001BFE  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   230  001C00  6EF8               	movwf	tblptru,c
   231  001C02  0009               	tblrd		*+	;fetch initializer
   232  001C04  CFF5 F040          	movff	tablat,__pdataCOMRAM
   233  001C08  0009               	tblrd		*+	;fetch initializer
   234  001C0A  CFF5 F041          	movff	tablat,__pdataCOMRAM+1
   235  001C0E  0009               	tblrd		*+	;fetch initializer
   236  001C10  CFF5 F042          	movff	tablat,__pdataCOMRAM+2
   237                           
   238                           ; Clear objects allocated to BANK2 (106 bytes)
   239  001C14  EE02  F000         	lfsr	0,__pbssBANK2
   240  001C18  0E6A               	movlw	106
   241  001C1A                     clear_0:
   242  001C1A  6AEE               	clrf	postinc0,c
   243  001C1C  06E8               	decf	wreg,f,c
   244  001C1E  E1FD               	bnz	clear_0
   245                           
   246                           ; Clear objects allocated to BANK1 (214 bytes)
   247  001C20  EE01  F000         	lfsr	0,__pbssBANK1
   248  001C24  0ED6               	movlw	214
   249  001C26                     clear_1:
   250  001C26  6AEE               	clrf	postinc0,c
   251  001C28  06E8               	decf	wreg,f,c
   252  001C2A  E1FD               	bnz	clear_1
   253                           
   254                           ; Clear objects allocated to BANK0 (59 bytes)
   255  001C2C  EE00  F0C4         	lfsr	0,__pbssBANK0
   256  001C30  0E3B               	movlw	59
   257  001C32                     clear_2:
   258  001C32  6AEE               	clrf	postinc0,c
   259  001C34  06E8               	decf	wreg,f,c
   260  001C36  E1FD               	bnz	clear_2
   261                           
   262                           ; Clear objects allocated to COMRAM (22 bytes)
   263  001C38  EE00  F02A         	lfsr	0,__pbssCOMRAM
   264  001C3C  0E16               	movlw	22
   265  001C3E                     clear_3:
   266  001C3E  6AEE               	clrf	postinc0,c
   267  001C40  06E8               	decf	wreg,f,c
   268  001C42  E1FD               	bnz	clear_3
   269  001C44                     end_of_initialization:
   270                           	opt stack 0
   271  001C44                     __end_of__initialization:
   272                           	opt stack 0
   273  001C44  9043               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   274  001C46  9243               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   275  001C48  0E00               	movlw	low (__Lmediumconst shr (0+16))
   276  001C4A  6EF8               	movwf	tblptru,c
   277  001C4C  0100               	movlb	0
   278  001C4E  EFA5  F00E         	goto	_main	;jump to C main() function
   279                           tblptru	equ	0xFF8
   280                           tblptrh	equ	0xFF7
   281                           tblptrl	equ	0xFF6
   282                           tablat	equ	0xFF5
   283                           postinc0	equ	0xFEE
   284                           wreg	equ	0xFE8
   285                           
   286                           	psect	bssCOMRAM
   287  00002A                     __pbssCOMRAM:
   288                           	opt stack 0
   289  00002A                     _PDUFalult:
   290                           	opt stack 0
   291  00002A                     	ds	8
   292  000032                     _DataTableArrayFour:
   293                           	opt stack 0
   294  000032                     	ds	3
   295  000035                     cobs_decode@F192:
   296                           	opt stack 0
   297  000035                     	ds	3
   298  000038                     cobs_encode@F180:
   299                           	opt stack 0
   300  000038                     	ds	3
   301  00003B                     _prev_pos:
   302                           	opt stack 0
   303  00003B                     	ds	2
   304  00003D                     _timer1ReloadVal:
   305                           	opt stack 0
   306  00003D                     	ds	2
   307  00003F                     _MCSOn:
   308                           	opt stack 0
   309  00003F                     	ds	1
   310                           tblptru	equ	0xFF8
   311                           tblptrh	equ	0xFF7
   312                           tblptrl	equ	0xFF6
   313                           tablat	equ	0xFF5
   314                           postinc0	equ	0xFEE
   315                           wreg	equ	0xFE8
   316                           
   317                           	psect	dataCOMRAM
   318  000040                     __pdataCOMRAM:
   319                           	opt stack 0
   320  000040                     _readwhat:
   321                           	opt stack 0
   322  000040                     	ds	2
   323  000042                     _Transmit_stall:
   324                           	opt stack 0
   325  000042                     	ds	1
   326                           tblptru	equ	0xFF8
   327                           tblptrh	equ	0xFF7
   328                           tblptrl	equ	0xFF6
   329                           tablat	equ	0xFF5
   330                           postinc0	equ	0xFEE
   331                           wreg	equ	0xFE8
   332                           
   333                           	psect	bssBANK0
   334  0000C4                     __pbssBANK0:
   335                           	opt stack 0
   336  0000C4                     _Current:
   337                           	opt stack 0
   338  0000C4                     	ds	12
   339  0000D0                     _CurrentADC:
   340                           	opt stack 0
   341  0000D0                     	ds	12
   342  0000DC                     _data:
   343                           	opt stack 0
   344  0000DC                     	ds	12
   345  0000E8                     _Currentcomp:
   346                           	opt stack 0
   347  0000E8                     	ds	12
   348  0000F4                     _DataTableArrayOne:
   349                           	opt stack 0
   350  0000F4                     	ds	10
   351  0000FE                     _Data:
   352                           	opt stack 0
   353  0000FE                     	ds	1
   354                           tblptru	equ	0xFF8
   355                           tblptrh	equ	0xFF7
   356                           tblptrl	equ	0xFF6
   357                           tablat	equ	0xFF5
   358                           postinc0	equ	0xFEE
   359                           wreg	equ	0xFE8
   360                           
   361                           	psect	bssBANK1
   362  000100                     __pbssBANK1:
   363                           	opt stack 0
   364  000100                     _registers:
   365                           	opt stack 0
   366  000100                     	ds	48
   367  000130                     _input_buffer:
   368                           	opt stack 0
   369  000130                     	ds	106
   370  00019A                     _ProcessArray:
   371                           	opt stack 0
   372  00019A                     	ds	30
   373  0001B8                     _ReciveArray:
   374                           	opt stack 0
   375  0001B8                     	ds	30
   376                           tblptru	equ	0xFF8
   377                           tblptrh	equ	0xFF7
   378                           tblptrl	equ	0xFF6
   379                           tablat	equ	0xFF5
   380                           postinc0	equ	0xFEE
   381                           wreg	equ	0xFE8
   382                           
   383                           	psect	bssBANK2
   384  000200                     __pbssBANK2:
   385                           	opt stack 0
   386  000200                     _output_buffer:
   387                           	opt stack 0
   388  000200                     	ds	106
   389                           tblptru	equ	0xFF8
   390                           tblptrh	equ	0xFF7
   391                           tblptrl	equ	0xFF6
   392                           tablat	equ	0xFF5
   393                           postinc0	equ	0xFEE
   394                           wreg	equ	0xFE8
   395                           
   396                           	psect	cstackBANK1
   397  0001D6                     __pcstackBANK1:
   398                           	opt stack 0
   399  0001D6                     ComController@DataRecived:
   400                           	opt stack 0
   401                           
   402                           ; 4 bytes @ 0x0
   403  0001D6                     	ds	4
   404  0001DA                     ComController@DataToSend:
   405                           	opt stack 0
   406                           
   407                           ; 4 bytes @ 0x4
   408  0001DA                     	ds	4
   409  0001DE                     ComController@DataToSend_1653:
   410                           	opt stack 0
   411                           
   412                           ; 4 bytes @ 0x8
   413  0001DE                     	ds	4
   414  0001E2                     ComController@k:
   415                           	opt stack 0
   416                           
   417                           ; 1 bytes @ 0xC
   418  0001E2                     	ds	1
   419  0001E3                     ??_receiveData:
   420                           
   421                           ; 1 bytes @ 0xD
   422  0001E3                     	ds	5
   423  0001E8                     receiveData@CS:
   424                           	opt stack 0
   425                           
   426                           ; 1 bytes @ 0x12
   427  0001E8                     	ds	1
   428  0001E9                     receiveData@i:
   429                           	opt stack 0
   430                           
   431                           ; 2 bytes @ 0x13
   432  0001E9                     	ds	2
   433  0001EB                     receiveData@result:
   434                           	opt stack 0
   435                           
   436                           ; 3 bytes @ 0x15
   437  0001EB                     	ds	3
   438  0001EE                     main@i:
   439                           	opt stack 0
   440                           
   441                           ; 2 bytes @ 0x18
   442  0001EE                     	ds	2
   443  0001F0                     main@j:
   444                           	opt stack 0
   445                           
   446                           ; 2 bytes @ 0x1A
   447  0001F0                     	ds	2
   448  0001F2                     main@UP:
   449                           	opt stack 0
   450                           
   451                           ; 1 bytes @ 0x1C
   452  0001F2                     	ds	1
   453                           tblptru	equ	0xFF8
   454                           tblptrh	equ	0xFF7
   455                           tblptrl	equ	0xFF6
   456                           tablat	equ	0xFF5
   457                           postinc0	equ	0xFEE
   458                           wreg	equ	0xFE8
   459                           
   460                           	psect	cstackBANK0
   461  000060                     __pcstackBANK0:
   462                           	opt stack 0
   463  000060                     Clear595@i:
   464                           	opt stack 0
   465  000060                     PotSetpoint@set_point:
   466                           	opt stack 0
   467  000060                     cobs_encode@src_end_ptr:
   468                           	opt stack 0
   469  000060                     cobs_decode@src_end_ptr:
   470                           	opt stack 0
   471                           
   472                           ; 2 bytes @ 0x0
   473  000060                     	ds	2
   474  000062                     cobs_encode@src_byte:
   475                           	opt stack 0
   476  000062                     PotSetpoint@x:
   477                           	opt stack 0
   478  000062                     cobs_decode@dst_buf_end_ptr:
   479                           	opt stack 0
   480                           
   481                           ; 2 bytes @ 0x2
   482  000062                     	ds	1
   483  000063                     cobs_encode@dst_buf_end_ptr:
   484                           	opt stack 0
   485                           
   486                           ; 2 bytes @ 0x3
   487  000063                     	ds	1
   488  000064                     cobs_decode@src_byte:
   489                           	opt stack 0
   490  000064                     PotSetpoint@new_pos:
   491                           	opt stack 0
   492                           
   493                           ; 2 bytes @ 0x4
   494  000064                     	ds	1
   495  000065                     cobs_encode@search_len:
   496                           	opt stack 0
   497  000065                     cobs_decode@i:
   498                           	opt stack 0
   499                           
   500                           ; 1 bytes @ 0x5
   501  000065                     	ds	1
   502  000066                     ??_processPowerRequest:
   503  000066                     cobs_encode@dst_code_write_ptr:
   504                           	opt stack 0
   505  000066                     cobs_decode@remaining_bytes:
   506                           	opt stack 0
   507                           
   508                           ; 2 bytes @ 0x6
   509  000066                     	ds	2
   510  000068                     processPowerRequest@powerSet:
   511                           	opt stack 0
   512  000068                     cobs_encode@dst_write_ptr:
   513                           	opt stack 0
   514  000068                     cobs_decode@dst_write_ptr:
   515                           	opt stack 0
   516                           
   517                           ; 2 bytes @ 0x8
   518  000068                     	ds	2
   519  00006A                     cobs_decode@len_code:
   520                           	opt stack 0
   521  00006A                     cobs_encode@result:
   522                           	opt stack 0
   523                           
   524                           ; 3 bytes @ 0xA
   525  00006A                     	ds	1
   526  00006B                     cobs_decode@result:
   527                           	opt stack 0
   528                           
   529                           ; 3 bytes @ 0xB
   530  00006B                     	ds	2
   531  00006D                     sendData@ComandByte:
   532                           	opt stack 0
   533                           
   534                           ; 1 bytes @ 0xD
   535  00006D                     	ds	1
   536  00006E                     sendData@DataTable:
   537                           	opt stack 0
   538                           
   539                           ; 1 bytes @ 0xE
   540  00006E                     	ds	1
   541  00006F                     sendData@DataTableIndex:
   542                           	opt stack 0
   543                           
   544                           ; 1 bytes @ 0xF
   545  00006F                     	ds	1
   546  000070                     sendData@DTS:
   547                           	opt stack 0
   548                           
   549                           ; 2 bytes @ 0x10
   550  000070                     	ds	2
   551  000072                     sendData@lenth:
   552                           	opt stack 0
   553                           
   554                           ; 2 bytes @ 0x12
   555  000072                     	ds	2
   556  000074                     ??_sendData:
   557                           
   558                           ; 1 bytes @ 0x14
   559  000074                     	ds	4
   560  000078                     sendData@COBSArray:
   561                           	opt stack 0
   562                           
   563                           ; 30 bytes @ 0x18
   564  000078                     	ds	30
   565  000096                     sendData@SendArray:
   566                           	opt stack 0
   567                           
   568                           ; 30 bytes @ 0x36
   569  000096                     	ds	30
   570  0000B4                     sendData@whereToSend:
   571                           	opt stack 0
   572                           
   573                           ; 1 bytes @ 0x54
   574  0000B4                     	ds	1
   575  0000B5                     sendData@CS:
   576                           	opt stack 0
   577                           
   578                           ; 1 bytes @ 0x55
   579  0000B5                     	ds	1
   580  0000B6                     sendData@result:
   581                           	opt stack 0
   582                           
   583                           ; 3 bytes @ 0x56
   584  0000B6                     	ds	3
   585  0000B9                     sendData@count:
   586                           	opt stack 0
   587                           
   588                           ; 2 bytes @ 0x59
   589  0000B9                     	ds	2
   590  0000BB                     sendData@i:
   591                           	opt stack 0
   592                           
   593                           ; 1 bytes @ 0x5B
   594  0000BB                     	ds	1
   595  0000BC                     ComController@DTI:
   596                           	opt stack 0
   597                           
   598                           ; 2 bytes @ 0x5C
   599  0000BC                     	ds	2
   600  0000BE                     ComController@lenth:
   601                           	opt stack 0
   602                           
   603                           ; 2 bytes @ 0x5E
   604  0000BE                     	ds	2
   605  0000C0                     ??_ComController:
   606                           
   607                           ; 1 bytes @ 0x60
   608  0000C0                     	ds	2
   609  0000C2                     updateComms@DataGet:
   610                           	opt stack 0
   611                           
   612                           ; 2 bytes @ 0x62
   613  0000C2                     	ds	2
   614                           tblptru	equ	0xFF8
   615                           tblptrh	equ	0xFF7
   616                           tblptrl	equ	0xFF6
   617                           tablat	equ	0xFF5
   618                           postinc0	equ	0xFEE
   619                           wreg	equ	0xFE8
   620                           
   621                           	psect	cstackCOMRAM
   622  000001                     __pcstackCOMRAM:
   623                           	opt stack 0
   624  000001                     ?_ADC_GetConversion:
   625                           	opt stack 0
   626  000001                     ?___wmul:
   627                           	opt stack 0
   628  000001                     ?i2_UART_buff_size:
   629                           	opt stack 0
   630  000001                     ?i2_UART_buff_modulo_inc:
   631                           	opt stack 0
   632  000001                     ___wmul@multiplier:
   633                           	opt stack 0
   634  000001                     i2SetPin595@Reg:
   635                           	opt stack 0
   636  000001                     i2UART_buff_size@_this:
   637                           	opt stack 0
   638  000001                     i2UART_buff_modulo_inc@value:
   639                           	opt stack 0
   640  000001                     i2Delay@wait:
   641                           	opt stack 0
   642                           
   643                           ; 4 bytes @ 0x0
   644  000001                     	ds	2
   645  000003                     ??_ADC_GetConversion:
   646  000003                     ___wmul@multiplicand:
   647                           	opt stack 0
   648  000003                     i2SetPin595@pin:
   649                           	opt stack 0
   650  000003                     i2UART_buff_modulo_inc@modulus:
   651                           	opt stack 0
   652                           
   653                           ; 2 bytes @ 0x2
   654  000003                     	ds	2
   655  000005                     ??i2_Delay:
   656  000005                     ADC_GetConversion@channel:
   657                           	opt stack 0
   658  000005                     ___wmul@product:
   659                           	opt stack 0
   660  000005                     i2SetPin595@value:
   661                           	opt stack 0
   662  000005                     i2UART_buff_modulo_inc@my_value:
   663                           	opt stack 0
   664                           
   665                           ; 2 bytes @ 0x4
   666  000005                     	ds	1
   667  000006                     i2Delay@i:
   668                           	opt stack 0
   669                           
   670                           ; 4 bytes @ 0x5
   671  000006                     	ds	1
   672  000007                     ??i2_SetPin595:
   673  000007                     FuseSystem@i_1234:
   674                           	opt stack 0
   675  000007                     i2UART_buff_put@_this:
   676                           	opt stack 0
   677  000007                     i2UART_buff_get@_this:
   678                           	opt stack 0
   679                           
   680                           ; 2 bytes @ 0x6
   681  000007                     	ds	2
   682  000009                     ??i2_UART_buff_get:
   683  000009                     i2UART_buff_put@c:
   684                           	opt stack 0
   685  000009                     FuseSystem@i:
   686                           	opt stack 0
   687                           
   688                           ; 2 bytes @ 0x8
   689  000009                     	ds	1
   690  00000A                     ??i2_UART_buff_put:
   691  00000A                     i2writeRegisters@val:
   692                           	opt stack 0
   693                           
   694                           ; 2 bytes @ 0x9
   695  00000A                     	ds	1
   696  00000B                     i2UART_buff_get@c:
   697                           	opt stack 0
   698                           
   699                           ; 1 bytes @ 0xA
   700  00000B                     	ds	1
   701  00000C                     EUSART1_Receive_ISR@data:
   702                           	opt stack 0
   703  00000C                     i2writeRegisters@i:
   704                           	opt stack 0
   705                           
   706                           ; 2 bytes @ 0xB
   707  00000C                     	ds	2
   708  00000E                     ReadCurrent@gather:
   709                           	opt stack 0
   710                           
   711                           ; 1 bytes @ 0xD
   712  00000E                     	ds	1
   713  00000F                     ??_INTERRUPT_InterruptManager:
   714                           
   715                           ; 1 bytes @ 0xE
   716  00000F                     	ds	14
   717  00001D                     ?_UART_buff_modulo_inc:
   718                           	opt stack 0
   719  00001D                     ?_UART_buff_size:
   720                           	opt stack 0
   721  00001D                     ?_cobs_encode:
   722                           	opt stack 0
   723  00001D                     ?_cobs_decode:
   724                           	opt stack 0
   725  00001D                     DATAEE_ReadByte@bAdd:
   726                           	opt stack 0
   727  00001D                     GetPDUFault@loc:
   728                           	opt stack 0
   729  00001D                     GetDataDict@DataTableIndex:
   730                           	opt stack 0
   731  00001D                     SetDataDict@DataTableIndex:
   732                           	opt stack 0
   733  00001D                     PWM4_LoadDutyValue@dutyValue:
   734                           	opt stack 0
   735  00001D                     SetPin595@Reg:
   736                           	opt stack 0
   737  00001D                     UART_buff_size@_this:
   738                           	opt stack 0
   739  00001D                     UART_buff_modulo_inc@value:
   740                           	opt stack 0
   741  00001D                     CRC8@data:
   742                           	opt stack 0
   743  00001D                     cobs_encode@dst_buf_ptr:
   744                           	opt stack 0
   745  00001D                     cobs_decode@dst_buf_ptr:
   746                           	opt stack 0
   747  00001D                     memset@p1:
   748                           	opt stack 0
   749  00001D                     Delay@wait:
   750                           	opt stack 0
   751                           
   752                           ; 4 bytes @ 0x1C
   753  00001D                     	ds	1
   754  00001E                     ??_FaultsCollector:
   755  00001E                     ??_ComputeStorageData:
   756  00001E                     GetDataDict@DataArray:
   757                           	opt stack 0
   758  00001E                     SetDataDict@DataArray:
   759                           	opt stack 0
   760                           
   761                           ; 2 bytes @ 0x1D
   762  00001E                     	ds	1
   763  00001F                     ??_PWM4_LoadDutyValue:
   764  00001F                     ?_Receive_available:
   765                           	opt stack 0
   766  00001F                     CRC8@len:
   767                           	opt stack 0
   768  00001F                     SetPin595@pin:
   769                           	opt stack 0
   770  00001F                     UART_buff_modulo_inc@modulus:
   771                           	opt stack 0
   772  00001F                     cobs_encode@dst_buf_len:
   773                           	opt stack 0
   774  00001F                     cobs_decode@dst_buf_len:
   775                           	opt stack 0
   776  00001F                     memset@c:
   777                           	opt stack 0
   778                           
   779                           ; 2 bytes @ 0x1E
   780  00001F                     	ds	1
   781  000020                     CRC8@sum:
   782                           	opt stack 0
   783  000020                     GetDataDict@numbofbytes:
   784                           	opt stack 0
   785  000020                     SetDataDict@numbofbytes:
   786                           	opt stack 0
   787  000020                     ComputeStorageData@i:
   788                           	opt stack 0
   789                           
   790                           ; 2 bytes @ 0x1F
   791  000020                     	ds	1
   792  000021                     ??_Delay:
   793  000021                     CRC8@extract:
   794                           	opt stack 0
   795  000021                     GetDataDict@Error:
   796                           	opt stack 0
   797  000021                     SetDataDict@Error:
   798                           	opt stack 0
   799  000021                     FaultsCollector@sendVal:
   800                           	opt stack 0
   801  000021                     SetPin595@value:
   802                           	opt stack 0
   803  000021                     UART_buff_modulo_inc@my_value:
   804                           	opt stack 0
   805  000021                     cobs_encode@src_ptr:
   806                           	opt stack 0
   807  000021                     cobs_decode@src_ptr:
   808                           	opt stack 0
   809  000021                     memset@n:
   810                           	opt stack 0
   811                           
   812                           ; 2 bytes @ 0x20
   813  000021                     	ds	1
   814  000022                     CRC8@tempI:
   815                           	opt stack 0
   816  000022                     GetDataDict@DataTable:
   817                           	opt stack 0
   818  000022                     SetDataDict@DataTable:
   819                           	opt stack 0
   820  000022                     Delay@i:
   821                           	opt stack 0
   822                           
   823                           ; 4 bytes @ 0x21
   824  000022                     	ds	1
   825  000023                     ??_SetPin595:
   826  000023                     CRC8@crc:
   827                           	opt stack 0
   828  000023                     GetDataDict@DataCount:
   829                           	opt stack 0
   830  000023                     SetDataDict@DataCount:
   831                           	opt stack 0
   832  000023                     FaultsCollector@i:
   833                           	opt stack 0
   834  000023                     UART_buff_put@_this:
   835                           	opt stack 0
   836  000023                     UART_buff_get@_this:
   837                           	opt stack 0
   838  000023                     cobs_encode@src_len:
   839                           	opt stack 0
   840  000023                     cobs_decode@src_len:
   841                           	opt stack 0
   842  000023                     memset@p:
   843                           	opt stack 0
   844                           
   845                           ; 2 bytes @ 0x22
   846  000023                     	ds	1
   847  000024                     GetDataDict@ReturnCounter:
   848                           	opt stack 0
   849  000024                     SetDataDict@ReturnCounter:
   850                           	opt stack 0
   851                           
   852                           ; 1 bytes @ 0x23
   853  000024                     	ds	1
   854  000025                     ??_cobs_encode:
   855  000025                     ??_cobs_decode:
   856  000025                     ??_UART_buff_get:
   857  000025                     UART_buff_put@c:
   858                           	opt stack 0
   859  000025                     UART_buff_init@_this:
   860                           	opt stack 0
   861  000025                     UART_buff_flush@_this:
   862                           	opt stack 0
   863                           
   864                           ; 2 bytes @ 0x24
   865  000025                     	ds	1
   866  000026                     ??_UART_buff_put:
   867  000026                     writeRegisters@val:
   868                           	opt stack 0
   869  000026                     PotSetpoint@new_point:
   870                           	opt stack 0
   871  000026                     PotClear@x:
   872                           	opt stack 0
   873                           
   874                           ; 2 bytes @ 0x25
   875  000026                     	ds	1
   876  000027                     UART_buff_get@c:
   877                           	opt stack 0
   878  000027                     EnableSlavePower@onof:
   879                           	opt stack 0
   880  000027                     UART_buff_flush@clearBuffer:
   881                           	opt stack 0
   882                           
   883                           ; 2 bytes @ 0x26
   884  000027                     	ds	1
   885  000028                     ??_PotSetpoint:
   886  000028                     Send_put@_data:
   887                           	opt stack 0
   888  000028                     writeRegisters@i:
   889                           	opt stack 0
   890                           
   891                           ; 2 bytes @ 0x27
   892  000028                     	ds	1
   893  000029                     EnableSlavePower@slave:
   894                           	opt stack 0
   895                           
   896                           ; 1 bytes @ 0x28
   897  000029                     	ds	1
   898  00002A                     tblptru	equ	0xFF8
   899                           tblptrh	equ	0xFF7
   900                           tblptrl	equ	0xFF6
   901                           tablat	equ	0xFF5
   902                           postinc0	equ	0xFEE
   903                           wreg	equ	0xFE8
   904                           
   905                           ; 1 bytes @ 0x29
   906 ;;
   907 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   908 ;;
   909 ;; *************** function _main *****************
   910 ;; Defined at:
   911 ;;		line 11 in file "main.c"
   912 ;; Parameters:    Size  Location     Type
   913 ;;		None
   914 ;; Auto vars:     Size  Location     Type
   915 ;;  j               2   26[BANK1 ] int 
   916 ;;  i               2   24[BANK1 ] int 
   917 ;;  UP              1   28[BANK1 ] unsigned char 
   918 ;; Return value:  Size  Location     Type
   919 ;;                  1    wreg      void 
   920 ;; Registers used:
   921 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   922 ;; Tracked objects:
   923 ;;		On entry : 0/0
   924 ;;		On exit  : 0/0
   925 ;;		Unchanged: 0/0
   926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   927 ;;      Params:         0       0       0       0       0       0       0
   928 ;;      Locals:         0       0       5       0       0       0       0
   929 ;;      Temps:          0       0       0       0       0       0       0
   930 ;;      Totals:         0       0       5       0       0       0       0
   931 ;;Total ram usage:        5 bytes
   932 ;; Hardware stack levels required when called:   13
   933 ;; This function calls:
   934 ;;		_ComputeStorageData
   935 ;;		_PDUStartup
   936 ;;		_PWM4_LoadDutyValue
   937 ;;		_PotSetpoint
   938 ;;		_SYSTEM_Initialize
   939 ;;		_updateComms
   940 ;; This function is called by:
   941 ;;		Startup code after reset
   942 ;; This function uses a non-reentrant model
   943 ;;
   944                           
   945                           	psect	text0
   946  001D4A                     __ptext0:
   947                           	opt stack 0
   948  001D4A                     _main:
   949                           	opt stack 18
   950                           
   951                           ;main.c: 13: SYSTEM_Initialize();
   952                           
   953                           ;incstack = 0
   954  001D4A  EC66  F010         	call	_SYSTEM_Initialize	;wreg free
   955                           
   956                           ;main.c: 14: PDUStartup();
   957  001D4E  EC99  F00D         	call	_PDUStartup	;wreg free
   958                           
   959                           ;main.c: 33: (INTCONbits.GIE = 1);
   960  001D52  8EF2               	bsf	intcon,7,c	;volatile
   961                           
   962                           ;main.c: 36: (INTCONbits.PEIE = 1);
   963  001D54  8CF2               	bsf	intcon,6,c	;volatile
   964                           
   965                           ;main.c: 56: PotSetpoint(0);
   966  001D56  0E00               	movlw	0
   967  001D58  6E27               	movwf	PotSetpoint@new_point+1,c
   968  001D5A  0E00               	movlw	0
   969  001D5C  6E26               	movwf	PotSetpoint@new_point,c
   970  001D5E  EC82  F009         	call	_PotSetpoint	;wreg free
   971                           
   972                           ;main.c: 57: PWM4_LoadDutyValue(0);
   973  001D62  0E00               	movlw	0
   974  001D64  6E1E               	movwf	PWM4_LoadDutyValue@dutyValue+1,c
   975  001D66  0E00               	movlw	0
   976  001D68  6E1D               	movwf	PWM4_LoadDutyValue@dutyValue,c
   977  001D6A  ECCC  F00F         	call	_PWM4_LoadDutyValue	;wreg free
   978                           
   979                           ;main.c: 58: LATCbits.LATC5 = 0;
   980  001D6E  9A8B               	bcf	3979,5,c	;volatile
   981                           
   982                           ;main.c: 59: int i = 0;
   983  001D70  0E00               	movlw	0
   984  001D72  0101               	movlb	1	; () banked
   985  001D74  6FEF               	movwf	(main@i+1)& (0+255),b
   986  001D76  0E00               	movlw	0
   987  001D78  6FEE               	movwf	main@i& (0+255),b
   988                           
   989                           ; BSR set to: 1
   990                           ;main.c: 60: bool UP = 0;
   991  001D7A  0E00               	movlw	0
   992  001D7C  0101               	movlb	1	; () banked
   993  001D7E  6FF2               	movwf	main@UP& (0+255),b
   994                           
   995                           ;main.c: 61: ComputeStorageData();
   996  001D80  EC72  F00A         	call	_ComputeStorageData	;wreg free
   997                           
   998                           ;main.c: 63: int j = 1;
   999  001D84  0E00               	movlw	0
  1000  001D86  0101               	movlb	1	; () banked
  1001  001D88  6FF1               	movwf	(main@j+1)& (0+255),b
  1002  001D8A  0E01               	movlw	1
  1003  001D8C  6FF0               	movwf	main@j& (0+255),b
  1004  001D8E                     l4422:
  1005                           
  1006                           ;main.c: 65: updateComms();
  1007  001D8E  EC39  F00F         	call	_updateComms	;wreg free
  1008  001D92  D7FD               	goto	l4422
  1009  001D94                     __end_of_main:
  1010                           	opt stack 0
  1011                           tblptru	equ	0xFF8
  1012                           tblptrh	equ	0xFF7
  1013                           tblptrl	equ	0xFF6
  1014                           tablat	equ	0xFF5
  1015                           intcon	equ	0xFF2
  1016                           postinc0	equ	0xFEE
  1017                           wreg	equ	0xFE8
  1018                           
  1019 ;; *************** function _updateComms *****************
  1020 ;; Defined at:
  1021 ;;		line 19 in file "Communications.c"
  1022 ;; Parameters:    Size  Location     Type
  1023 ;;		None
  1024 ;; Auto vars:     Size  Location     Type
  1025 ;;  DataGet         2   98[BANK0 ] unsigned char [2]
  1026 ;; Return value:  Size  Location     Type
  1027 ;;                  1    wreg      void 
  1028 ;; Registers used:
  1029 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1030 ;; Tracked objects:
  1031 ;;		On entry : 0/0
  1032 ;;		On exit  : 0/0
  1033 ;;		Unchanged: 0/0
  1034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1035 ;;      Params:         0       0       0       0       0       0       0
  1036 ;;      Locals:         0       2       0       0       0       0       0
  1037 ;;      Temps:          0       0       0       0       0       0       0
  1038 ;;      Totals:         0       2       0       0       0       0       0
  1039 ;;Total ram usage:        2 bytes
  1040 ;; Hardware stack levels used:    1
  1041 ;; Hardware stack levels required when called:   12
  1042 ;; This function calls:
  1043 ;;		_FaultsCollector
  1044 ;;		_GetDataDict
  1045 ;;		_SetDataDict
  1046 ;;		_processPowerRequest
  1047 ;;		_receiveData
  1048 ;; This function is called by:
  1049 ;;		_main
  1050 ;; This function uses a non-reentrant model
  1051 ;;
  1052                           
  1053                           	psect	text1
  1054  001E72                     __ptext1:
  1055                           	opt stack 0
  1056  001E72                     _updateComms:
  1057                           	opt stack 18
  1058                           
  1059                           ;Communications.c: 20: if (receiveData()){
  1060                           
  1061                           ;incstack = 0
  1062  001E72  ECFB  F008         	call	_receiveData	;wreg free
  1063  001E76  0900               	iorlw	0
  1064  001E78  B4D8               	btfsc	status,2,c
  1065  001E7A  0012               	return	
  1066                           
  1067                           ;Communications.c: 21: unsigned char DataGet[2];
  1068                           ;Communications.c: 22: GetDataDict(4, 1, DataGet, 1);
  1069  001E7C  0E01               	movlw	1
  1070  001E7E  6E1D               	movwf	GetDataDict@DataTableIndex,c
  1071  001E80  0EC2               	movlw	low updateComms@DataGet
  1072  001E82  6E1E               	movwf	GetDataDict@DataArray,c
  1073  001E84  0E00               	movlw	high updateComms@DataGet
  1074  001E86  6E1F               	movwf	GetDataDict@DataArray+1,c
  1075  001E88  0E01               	movlw	1
  1076  001E8A  6E20               	movwf	GetDataDict@numbofbytes,c
  1077  001E8C  0E04               	movlw	4
  1078  001E8E  EC90  F00B         	call	_GetDataDict
  1079                           
  1080                           ;Communications.c: 23: processPowerRequest(DataGet[0]);
  1081  001E92  0100               	movlb	0	; () banked
  1082  001E94  51C2               	movf	updateComms@DataGet& (0+255),w,b
  1083  001E96  EC2E  F007         	call	_processPowerRequest
  1084                           
  1085                           ;Communications.c: 24: DataGet[0] = FaultsCollector();
  1086  001E9A  EC29  F00E         	call	_FaultsCollector	;wreg free
  1087  001E9E  0100               	movlb	0	; () banked
  1088  001EA0  6FC2               	movwf	updateComms@DataGet& (0+255),b
  1089                           
  1090                           ; BSR set to: 0
  1091                           ;Communications.c: 25: SetDataDict(4, 2, DataGet, 1);
  1092  001EA2  0E02               	movlw	2
  1093  001EA4  6E1D               	movwf	SetDataDict@DataTableIndex,c
  1094  001EA6  0EC2               	movlw	low updateComms@DataGet
  1095  001EA8  6E1E               	movwf	SetDataDict@DataArray,c
  1096  001EAA  0E00               	movlw	high updateComms@DataGet
  1097  001EAC  6E1F               	movwf	SetDataDict@DataArray+1,c
  1098  001EAE  0E01               	movlw	1
  1099  001EB0  6E20               	movwf	SetDataDict@numbofbytes,c
  1100  001EB2  0E04               	movlw	4
  1101  001EB4  EC44  F00B         	call	_SetDataDict
  1102  001EB8  0012               	return	
  1103  001EBA                     __end_of_updateComms:
  1104                           	opt stack 0
  1105                           tblptru	equ	0xFF8
  1106                           tblptrh	equ	0xFF7
  1107                           tblptrl	equ	0xFF6
  1108                           tablat	equ	0xFF5
  1109                           intcon	equ	0xFF2
  1110                           postinc0	equ	0xFEE
  1111                           wreg	equ	0xFE8
  1112                           status	equ	0xFD8
  1113                           
  1114 ;; *************** function _receiveData *****************
  1115 ;; Defined at:
  1116 ;;		line 79 in file "CarCom.c"
  1117 ;; Parameters:    Size  Location     Type
  1118 ;;		None
  1119 ;; Auto vars:     Size  Location     Type
  1120 ;;  result          3   21[BANK1 ] struct .
  1121 ;;  i               2   19[BANK1 ] int 
  1122 ;;  CS              1   18[BANK1 ] unsigned char 
  1123 ;; Return value:  Size  Location     Type
  1124 ;;                  1    wreg      unsigned char 
  1125 ;; Registers used:
  1126 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1127 ;; Tracked objects:
  1128 ;;		On entry : 0/0
  1129 ;;		On exit  : 0/0
  1130 ;;		Unchanged: 0/0
  1131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1132 ;;      Params:         0       0       0       0       0       0       0
  1133 ;;      Locals:         0       0       6       0       0       0       0
  1134 ;;      Temps:          0       0       5       0       0       0       0
  1135 ;;      Totals:         0       0      11       0       0       0       0
  1136 ;;Total ram usage:       11 bytes
  1137 ;; Hardware stack levels used:    1
  1138 ;; Hardware stack levels required when called:   11
  1139 ;; This function calls:
  1140 ;;		_CRC8
  1141 ;;		_ClearBuffer
  1142 ;;		_ComController
  1143 ;;		_Receive_available
  1144 ;;		_Receive_get
  1145 ;;		_cobs_decode
  1146 ;; This function is called by:
  1147 ;;		_updateComms
  1148 ;; This function uses a non-reentrant model
  1149 ;;
  1150                           
  1151                           	psect	text2
  1152  0011F6                     __ptext2:
  1153                           	opt stack 0
  1154  0011F6                     _receiveData:
  1155                           	opt stack 18
  1156                           
  1157                           ;CarCom.c: 80: if(Receive_available()>5){
  1158                           
  1159                           ;incstack = 0
  1160  0011F6  ECC2  F010         	call	_Receive_available	;wreg free
  1161  0011FA  BE20               	btfsc	?_Receive_available+1,7,c
  1162  0011FC  D081               	goto	l4280
  1163  0011FE  5020               	movf	?_Receive_available+1,w,c
  1164  001200  E104               	bnz	u2730
  1165  001202  0E06               	movlw	6
  1166  001204  5C1F               	subwf	?_Receive_available,w,c
  1167  001206  A0D8               	btfss	status,0,c
  1168  001208  D07B               	goto	l4280
  1169  00120A                     u2730:
  1170                           
  1171                           ;CarCom.c: 81: if(Receive_get() == 5){
  1172  00120A  EC20  F011         	call	_Receive_get	;wreg free
  1173  00120E  0A05               	xorlw	5
  1174  001210  A4D8               	btfss	status,2,c
  1175  001212  D076               	goto	l4280
  1176                           
  1177                           ;CarCom.c: 82: int i = 0;
  1178  001214  0E00               	movlw	0
  1179  001216  0101               	movlb	1	; () banked
  1180  001218  6FEA               	movwf	(receiveData@i+1)& (0+255),b
  1181  00121A  0E00               	movlw	0
  1182  00121C  6FE9               	movwf	receiveData@i& (0+255),b
  1183  00121E                     l4260:
  1184                           
  1185                           ;CarCom.c: 84: Data = Receive_get();
  1186  00121E  EC20  F011         	call	_Receive_get	;wreg free
  1187  001222  0100               	movlb	0	; () banked
  1188  001224  6FFE               	movwf	_Data& (0+255),b
  1189                           
  1190                           ; BSR set to: 0
  1191                           ;CarCom.c: 85: ReciveArray[i] = Data;
  1192  001226  0EB8               	movlw	low _ReciveArray
  1193  001228  0101               	movlb	1	; () banked
  1194  00122A  25E9               	addwf	receiveData@i& (0+255),w,b
  1195  00122C  6ED9               	movwf	fsr2l,c
  1196  00122E  0E01               	movlw	high _ReciveArray
  1197  001230  0101               	movlb	1	; () banked
  1198  001232  21EA               	addwfc	(receiveData@i+1)& (0+255),w,b
  1199  001234  6EDA               	movwf	fsr2h,c
  1200  001236  C0FE  FFDF         	movff	_Data,indf2
  1201                           
  1202                           ; BSR set to: 1
  1203                           ;CarCom.c: 86: _delay((unsigned long)((200)*(8000000/4000000.0)));
  1204  00123A  0E85               	movlw	133
  1205  00123C                     u2957:
  1206  00123C  2EE8               	decfsz	wreg,f,c
  1207  00123E  D7FE               	bra	u2957
  1208  001240  F000               	nop	
  1209                           
  1210                           ;CarCom.c: 88: i++;
  1211  001242  0101               	movlb	1	; () banked
  1212  001244  4BE9               	infsnz	receiveData@i& (0+255),f,b
  1213  001246  2BEA               	incf	(receiveData@i+1)& (0+255),f,b
  1214                           
  1215                           ; BSR set to: 1
  1216                           ;CarCom.c: 89: }while(Data != 0x00);
  1217  001248  0100               	movlb	0	; () banked
  1218  00124A  51FE               	movf	_Data& (0+255),w,b
  1219  00124C  0100               	movlb	0	; () banked
  1220  00124E  A4D8               	btfss	status,2,c
  1221  001250  D7E6               	goto	l4260
  1222                           
  1223                           ; BSR set to: 0
  1224                           ;CarCom.c: 93: ClearBuffer();
  1225                           
  1226                           ; BSR set to: 0
  1227  001252  ECD8  F010         	call	_ClearBuffer	;wreg free
  1228                           
  1229                           ;CarCom.c: 95: cobs_decode_result result;
  1230                           ;CarCom.c: 97: result = cobs_decode(ProcessArray, sizeof(ProcessArray), ReciveArray, i);
  1231  001256  0E9A               	movlw	low _ProcessArray
  1232  001258  6E1D               	movwf	cobs_decode@dst_buf_ptr,c
  1233  00125A  0E01               	movlw	high _ProcessArray
  1234  00125C  6E1E               	movwf	cobs_decode@dst_buf_ptr+1,c
  1235  00125E  0E00               	movlw	0
  1236  001260  6E20               	movwf	cobs_decode@dst_buf_len+1,c
  1237  001262  0E1E               	movlw	30
  1238  001264  6E1F               	movwf	cobs_decode@dst_buf_len,c
  1239  001266  0EB8               	movlw	low _ReciveArray
  1240  001268  6E21               	movwf	cobs_decode@src_ptr,c
  1241  00126A  0E01               	movlw	high _ReciveArray
  1242  00126C  6E22               	movwf	cobs_decode@src_ptr+1,c
  1243  00126E  C1E9  F023         	movff	receiveData@i,cobs_decode@src_len
  1244  001272  C1EA  F024         	movff	receiveData@i+1,cobs_decode@src_len+1
  1245  001276  EC83  F005         	call	_cobs_decode	;wreg free
  1246  00127A  C01D  F1EB         	movff	?_cobs_decode,receiveData@result
  1247  00127E  C01E  F1EC         	movff	?_cobs_decode+1,receiveData@result+1
  1248  001282  C01F  F1ED         	movff	?_cobs_decode+2,receiveData@result+2
  1249                           
  1250                           ;CarCom.c: 99: unsigned char CS = CRC8(ProcessArray, result.out_len-1);
  1251  001286  0E9A               	movlw	low _ProcessArray
  1252  001288  6E1D               	movwf	CRC8@data,c
  1253  00128A  0E01               	movlw	high _ProcessArray
  1254  00128C  6E1E               	movwf	CRC8@data+1,c
  1255  00128E  0101               	movlb	1	; () banked
  1256  001290  05EB               	decf	receiveData@result& (0+255),w,b
  1257  001292  6E1F               	movwf	CRC8@len,c
  1258  001294  ECCA  F00E         	call	_CRC8	;wreg free
  1259  001298  0101               	movlb	1	; () banked
  1260  00129A  6FE8               	movwf	receiveData@CS& (0+255),b
  1261                           
  1262                           ; BSR set to: 1
  1263                           ;CarCom.c: 101: if(ProcessArray[result.out_len-1] == CS){
  1264  00129C  0EFF               	movlw	255
  1265  00129E  0101               	movlb	1	; () banked
  1266  0012A0  6FE3               	movwf	??_receiveData& (0+255),b
  1267  0012A2  0EFF               	movlw	255
  1268  0012A4  0101               	movlb	1	; () banked
  1269  0012A6  6FE4               	movwf	(??_receiveData+1)& (0+255),b
  1270  0012A8  C1EB  F1E5         	movff	receiveData@result,??_receiveData+2
  1271  0012AC  C1EC  F1E6         	movff	receiveData@result+1,??_receiveData+3
  1272  0012B0  0101               	movlb	1	; () banked
  1273  0012B2  51E3               	movf	??_receiveData& (0+255),w,b
  1274  0012B4  0101               	movlb	1	; () banked
  1275  0012B6  27E5               	addwf	(??_receiveData+2)& (0+255),f,b
  1276  0012B8  0101               	movlb	1	; () banked
  1277  0012BA  51E4               	movf	(??_receiveData+1)& (0+255),w,b
  1278  0012BC  0101               	movlb	1	; () banked
  1279  0012BE  23E6               	addwfc	(??_receiveData+3)& (0+255),f,b
  1280  0012C0  0E9A               	movlw	low _ProcessArray
  1281  0012C2  0101               	movlb	1	; () banked
  1282  0012C4  25E5               	addwf	(??_receiveData+2)& (0+255),w,b
  1283  0012C6  6ED9               	movwf	fsr2l,c
  1284  0012C8  0E01               	movlw	high _ProcessArray
  1285  0012CA  0101               	movlb	1	; () banked
  1286  0012CC  21E6               	addwfc	(??_receiveData+3)& (0+255),w,b
  1287  0012CE  6EDA               	movwf	fsr2h,c
  1288  0012D0  0101               	movlb	1	; () banked
  1289  0012D2  51E8               	movf	receiveData@CS& (0+255),w,b
  1290  0012D4  18DE               	xorwf	postinc2,w,c
  1291  0012D6  A4D8               	btfss	status,2,c
  1292  0012D8  D013               	goto	l4280
  1293                           
  1294                           ; BSR set to: 1
  1295                           
  1296                           ;CarCom.c: 102: do { LATA3 = ~LATA3; } while(0);
  1297  0012DA  B689               	btfsc	3977,3,c	;volatile
  1298  0012DC  D002               	goto	u2770
  1299  0012DE  8689               	bsf	3977,3,c	;volatile
  1300  0012E0  D001               	goto	l4274
  1301  0012E2                     u2770:
  1302  0012E2  9689               	bcf	3977,3,c	;volatile
  1303  0012E4                     l4274:
  1304                           
  1305                           ;CarCom.c: 103: ComController(ProcessArray,result.out_len);
  1306  0012E4  0E9A               	movlw	low _ProcessArray
  1307  0012E6  0100               	movlb	0	; () banked
  1308  0012E8  6FBC               	movwf	ComController@DTI& (0+255),b
  1309  0012EA  0E01               	movlw	high _ProcessArray
  1310  0012EC  0100               	movlb	0	; () banked
  1311  0012EE  6FBD               	movwf	(ComController@DTI+1)& (0+255),b
  1312  0012F0  C1EB  F0BE         	movff	receiveData@result,ComController@lenth
  1313  0012F4  C1EC  F0BF         	movff	receiveData@result+1,ComController@lenth+1
  1314  0012F8  ECA0  F003         	call	_ComController	;wreg free
  1315                           
  1316                           ;CarCom.c: 104: return 1;
  1317  0012FC  0E01               	movlw	1
  1318  0012FE  0012               	return	
  1319  001300                     l4280:
  1320                           
  1321                           ;CarCom.c: 115: }
  1322                           ;CarCom.c: 117: return 0;
  1323  001300  0E00               	movlw	0
  1324  001302  0012               	return	
  1325  001304                     __end_of_receiveData:
  1326                           	opt stack 0
  1327                           tblptru	equ	0xFF8
  1328                           tblptrh	equ	0xFF7
  1329                           tblptrl	equ	0xFF6
  1330                           tablat	equ	0xFF5
  1331                           intcon	equ	0xFF2
  1332                           postinc0	equ	0xFEE
  1333                           wreg	equ	0xFE8
  1334                           indf2	equ	0xFDF
  1335                           postinc2	equ	0xFDE
  1336                           fsr2h	equ	0xFDA
  1337                           fsr2l	equ	0xFD9
  1338                           status	equ	0xFD8
  1339                           
  1340 ;; *************** function _cobs_decode *****************
  1341 ;; Defined at:
  1342 ;;		line 115 in file "COBS.c"
  1343 ;; Parameters:    Size  Location     Type
  1344 ;;  dst_buf_ptr     2   28[COMRAM] PTR unsigned char 
  1345 ;;		 -> ProcessArray(30), 
  1346 ;;  dst_buf_len     2   30[COMRAM] unsigned int 
  1347 ;;  src_ptr         2   32[COMRAM] PTR const unsigned char 
  1348 ;;		 -> ReciveArray(30), 
  1349 ;;  src_len         2   34[COMRAM] unsigned int 
  1350 ;; Auto vars:     Size  Location     Type
  1351 ;;  result          3   11[BANK0 ] struct .
  1352 ;;  dst_write_pt    2    8[BANK0 ] PTR unsigned char 
  1353 ;;		 -> ProcessArray(30), 
  1354 ;;  remaining_by    2    6[BANK0 ] unsigned int 
  1355 ;;  dst_buf_end_    2    2[BANK0 ] PTR unsigned char 
  1356 ;;		 -> ProcessArray(30), 
  1357 ;;  src_end_ptr     2    0[BANK0 ] PTR const unsigned char 
  1358 ;;		 -> ReciveArray(30), 
  1359 ;;  len_code        1   10[BANK0 ] unsigned char 
  1360 ;;  i               1    5[BANK0 ] unsigned char 
  1361 ;;  src_byte        1    4[BANK0 ] unsigned char 
  1362 ;; Return value:  Size  Location     Type
  1363 ;;                  3   28[COMRAM] struct .
  1364 ;; Registers used:
  1365 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1366 ;; Tracked objects:
  1367 ;;		On entry : 0/0
  1368 ;;		On exit  : 0/0
  1369 ;;		Unchanged: 0/0
  1370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1371 ;;      Params:         8       0       0       0       0       0       0
  1372 ;;      Locals:         0      14       0       0       0       0       0
  1373 ;;      Temps:          2       0       0       0       0       0       0
  1374 ;;      Totals:        10      14       0       0       0       0       0
  1375 ;;Total ram usage:       24 bytes
  1376 ;; Hardware stack levels used:    1
  1377 ;; Hardware stack levels required when called:    6
  1378 ;; This function calls:
  1379 ;;		Nothing
  1380 ;; This function is called by:
  1381 ;;		_receiveData
  1382 ;; This function uses a non-reentrant model
  1383 ;;
  1384                           
  1385                           	psect	text3
  1386  000B06                     __ptext3:
  1387                           	opt stack 0
  1388  000B06                     _cobs_decode:
  1389                           	opt stack 22
  1390                           
  1391                           ;COBS.c: 117: cobs_decode_result result = { 0, COBS_DECODE_OK };
  1392                           
  1393                           ;incstack = 0
  1394  000B06  C035  F06B         	movff	cobs_decode@F192,cobs_decode@result
  1395  000B0A  C036  F06C         	movff	cobs_decode@F192+1,cobs_decode@result+1
  1396  000B0E  C037  F06D         	movff	cobs_decode@F192+2,cobs_decode@result+2
  1397                           
  1398                           ;COBS.c: 118: const uint8_t * src_end_ptr = src_ptr + src_len;
  1399  000B12  5023               	movf	cobs_decode@src_len,w,c
  1400  000B14  2421               	addwf	cobs_decode@src_ptr,w,c
  1401  000B16  0100               	movlb	0	; () banked
  1402  000B18  6F60               	movwf	cobs_decode@src_end_ptr& (0+255),b
  1403  000B1A  5024               	movf	cobs_decode@src_len+1,w,c
  1404  000B1C  2022               	addwfc	cobs_decode@src_ptr+1,w,c
  1405  000B1E  0100               	movlb	0	; () banked
  1406  000B20  6F61               	movwf	(cobs_decode@src_end_ptr+1)& (0+255),b
  1407                           
  1408                           ;COBS.c: 119: uint8_t * dst_buf_end_ptr = dst_buf_ptr + dst_buf_len;
  1409  000B22  501F               	movf	cobs_decode@dst_buf_len,w,c
  1410  000B24  241D               	addwf	cobs_decode@dst_buf_ptr,w,c
  1411  000B26  0100               	movlb	0	; () banked
  1412  000B28  6F62               	movwf	cobs_decode@dst_buf_end_ptr& (0+255),b
  1413  000B2A  5020               	movf	cobs_decode@dst_buf_len+1,w,c
  1414  000B2C  201E               	addwfc	cobs_decode@dst_buf_ptr+1,w,c
  1415  000B2E  0100               	movlb	0	; () banked
  1416  000B30  6F63               	movwf	(cobs_decode@dst_buf_end_ptr+1)& (0+255),b
  1417                           
  1418                           ;COBS.c: 120: uint8_t * dst_write_ptr = dst_buf_ptr;
  1419  000B32  C01D  F068         	movff	cobs_decode@dst_buf_ptr,cobs_decode@dst_write_ptr
  1420  000B36  C01E  F069         	movff	cobs_decode@dst_buf_ptr+1,cobs_decode@dst_write_ptr+1
  1421                           
  1422                           ;COBS.c: 121: size_t remaining_bytes;
  1423                           ;COBS.c: 122: uint8_t src_byte;
  1424                           ;COBS.c: 123: uint8_t i;
  1425                           ;COBS.c: 124: uint8_t len_code;
  1426                           ;COBS.c: 128: if ((dst_buf_ptr == (0)) || (src_ptr == (0)))
  1427  000B3A  501D               	movf	cobs_decode@dst_buf_ptr,w,c
  1428  000B3C  101E               	iorwf	cobs_decode@dst_buf_ptr+1,w,c
  1429  000B3E  B4D8               	btfsc	status,2,c
  1430  000B40  D004               	goto	l4076
  1431                           
  1432                           ; BSR set to: 0
  1433  000B42  5021               	movf	cobs_decode@src_ptr,w,c
  1434  000B44  1022               	iorwf	cobs_decode@src_ptr+1,w,c
  1435  000B46  A4D8               	btfss	status,2,c
  1436  000B48  D00A               	goto	l4082
  1437  000B4A                     l4076:
  1438                           
  1439                           ; BSR set to: 0
  1440                           ;COBS.c: 129: {
  1441                           ;COBS.c: 130: result.status = COBS_DECODE_NULL_POINTER;
  1442  000B4A  0E01               	movlw	1
  1443  000B4C  0100               	movlb	0	; () banked
  1444  000B4E  6F6D               	movwf	(cobs_decode@result+2)& (0+255),b
  1445                           
  1446                           ; BSR set to: 0
  1447                           ;COBS.c: 131: return result;
  1448  000B50  C06B  F01D         	movff	cobs_decode@result,?_cobs_decode
  1449  000B54  C06C  F01E         	movff	cobs_decode@result+1,?_cobs_decode+1
  1450  000B58  C06D  F01F         	movff	cobs_decode@result+2,?_cobs_decode+2
  1451                           
  1452                           ; BSR set to: 0
  1453  000B5C  0012               	return	
  1454  000B5E                     l4082:
  1455                           
  1456                           ; BSR set to: 0
  1457                           ;COBS.c: 132: }
  1458                           ;COBS.c: 134: if (src_len != 0)
  1459  000B5E  5023               	movf	cobs_decode@src_len,w,c
  1460  000B60  1024               	iorwf	cobs_decode@src_len+1,w,c
  1461  000B62  B4D8               	btfsc	status,2,c
  1462  000B64  D096               	goto	l4146
  1463  000B66                     l4084:
  1464                           
  1465                           ; BSR set to: 0
  1466                           ;COBS.c: 137: {
  1467                           ;COBS.c: 138: len_code = *src_ptr++;
  1468  000B66  C021  FFD9         	movff	cobs_decode@src_ptr,fsr2l
  1469  000B6A  C022  FFDA         	movff	cobs_decode@src_ptr+1,fsr2h
  1470  000B6E  50DF               	movf	indf2,w,c
  1471  000B70  0100               	movlb	0	; () banked
  1472  000B72  6F6A               	movwf	cobs_decode@len_code& (0+255),b
  1473                           
  1474                           ; BSR set to: 0
  1475  000B74  4A21               	infsnz	cobs_decode@src_ptr,f,c
  1476  000B76  2A22               	incf	cobs_decode@src_ptr+1,f,c
  1477                           
  1478                           ; BSR set to: 0
  1479                           ;COBS.c: 139: if (len_code == 0)
  1480  000B78  0100               	movlb	0	; () banked
  1481  000B7A  516A               	movf	cobs_decode@len_code& (0+255),w,b
  1482  000B7C  0100               	movlb	0	; () banked
  1483  000B7E  A4D8               	btfss	status,2,c
  1484  000B80  D003               	goto	l4092
  1485                           
  1486                           ; BSR set to: 0
  1487                           ;COBS.c: 140: {
  1488                           ;COBS.c: 141: result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
  1489  000B82  0100               	movlb	0	; () banked
  1490  000B84  856D               	bsf	(cobs_decode@result+2)& (0+255),2,b
  1491                           
  1492                           ;COBS.c: 142: break;
  1493  000B86  D085               	goto	l4146
  1494  000B88                     l4092:
  1495                           
  1496                           ; BSR set to: 0
  1497                           ;COBS.c: 143: }
  1498                           ;COBS.c: 144: len_code--;
  1499  000B88  0100               	movlb	0	; () banked
  1500  000B8A  076A               	decf	cobs_decode@len_code& (0+255),f,b
  1501                           
  1502                           ; BSR set to: 0
  1503                           ;COBS.c: 147: remaining_bytes = src_end_ptr - src_ptr;
  1504  000B8C  C021  F025         	movff	cobs_decode@src_ptr,??_cobs_decode
  1505  000B90  C022  F026         	movff	cobs_decode@src_ptr+1,??_cobs_decode+1
  1506  000B94  1E25               	comf	??_cobs_decode,f,c
  1507  000B96  1E26               	comf	??_cobs_decode+1,f,c
  1508  000B98  4A25               	infsnz	??_cobs_decode,f,c
  1509  000B9A  2A26               	incf	??_cobs_decode+1,f,c
  1510  000B9C  0100               	movlb	0	; () banked
  1511  000B9E  5160               	movf	cobs_decode@src_end_ptr& (0+255),w,b
  1512  000BA0  2425               	addwf	??_cobs_decode,w,c
  1513  000BA2  0100               	movlb	0	; () banked
  1514  000BA4  6F66               	movwf	cobs_decode@remaining_bytes& (0+255),b
  1515  000BA6  0100               	movlb	0	; () banked
  1516  000BA8  5161               	movf	(cobs_decode@src_end_ptr+1)& (0+255),w,b
  1517  000BAA  2026               	addwfc	??_cobs_decode+1,w,c
  1518  000BAC  0100               	movlb	0	; () banked
  1519  000BAE  6F67               	movwf	(cobs_decode@remaining_bytes+1)& (0+255),b
  1520                           
  1521                           ; BSR set to: 0
  1522                           ;COBS.c: 148: if (len_code > remaining_bytes)
  1523  000BB0  0100               	movlb	0	; () banked
  1524  000BB2  516A               	movf	cobs_decode@len_code& (0+255),w,b
  1525  000BB4  0100               	movlb	0	; () banked
  1526  000BB6  5D66               	subwf	cobs_decode@remaining_bytes& (0+255),w,b
  1527  000BB8  0E00               	movlw	0
  1528  000BBA  5967               	subwfb	(cobs_decode@remaining_bytes+1)& (0+255),w,b
  1529  000BBC  B0D8               	btfsc	status,0,c
  1530  000BBE  D004               	goto	l4102
  1531                           
  1532                           ; BSR set to: 0
  1533                           ;COBS.c: 149: {
  1534                           ;COBS.c: 150: result.status |= COBS_DECODE_INPUT_TOO_SHORT;
  1535  000BC0  0100               	movlb	0	; () banked
  1536  000BC2  876D               	bsf	(cobs_decode@result+2)& (0+255),3,b
  1537                           
  1538                           ; BSR set to: 0
  1539                           ;COBS.c: 151: len_code = remaining_bytes;
  1540  000BC4  C066  F06A         	movff	cobs_decode@remaining_bytes,cobs_decode@len_code
  1541  000BC8                     l4102:
  1542                           
  1543                           ; BSR set to: 0
  1544                           ;COBS.c: 152: }
  1545                           ;COBS.c: 155: remaining_bytes = dst_buf_end_ptr - dst_write_ptr;
  1546  000BC8  C068  F025         	movff	cobs_decode@dst_write_ptr,??_cobs_decode
  1547  000BCC  C069  F026         	movff	cobs_decode@dst_write_ptr+1,??_cobs_decode+1
  1548  000BD0  1E25               	comf	??_cobs_decode,f,c
  1549  000BD2  1E26               	comf	??_cobs_decode+1,f,c
  1550  000BD4  4A25               	infsnz	??_cobs_decode,f,c
  1551  000BD6  2A26               	incf	??_cobs_decode+1,f,c
  1552  000BD8  0100               	movlb	0	; () banked
  1553  000BDA  5162               	movf	cobs_decode@dst_buf_end_ptr& (0+255),w,b
  1554  000BDC  2425               	addwf	??_cobs_decode,w,c
  1555  000BDE  0100               	movlb	0	; () banked
  1556  000BE0  6F66               	movwf	cobs_decode@remaining_bytes& (0+255),b
  1557  000BE2  0100               	movlb	0	; () banked
  1558  000BE4  5163               	movf	(cobs_decode@dst_buf_end_ptr+1)& (0+255),w,b
  1559  000BE6  2026               	addwfc	??_cobs_decode+1,w,c
  1560  000BE8  0100               	movlb	0	; () banked
  1561  000BEA  6F67               	movwf	(cobs_decode@remaining_bytes+1)& (0+255),b
  1562                           
  1563                           ; BSR set to: 0
  1564                           ;COBS.c: 156: if (len_code > remaining_bytes)
  1565  000BEC  0100               	movlb	0	; () banked
  1566  000BEE  516A               	movf	cobs_decode@len_code& (0+255),w,b
  1567  000BF0  0100               	movlb	0	; () banked
  1568  000BF2  5D66               	subwf	cobs_decode@remaining_bytes& (0+255),w,b
  1569  000BF4  0E00               	movlw	0
  1570  000BF6  5967               	subwfb	(cobs_decode@remaining_bytes+1)& (0+255),w,b
  1571  000BF8  B0D8               	btfsc	status,0,c
  1572  000BFA  D004               	goto	l4110
  1573                           
  1574                           ; BSR set to: 0
  1575                           ;COBS.c: 157: {
  1576                           ;COBS.c: 158: result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
  1577  000BFC  0100               	movlb	0	; () banked
  1578  000BFE  836D               	bsf	(cobs_decode@result+2)& (0+255),1,b
  1579                           
  1580                           ; BSR set to: 0
  1581                           ;COBS.c: 159: len_code = remaining_bytes;
  1582  000C00  C066  F06A         	movff	cobs_decode@remaining_bytes,cobs_decode@len_code
  1583  000C04                     l4110:
  1584                           
  1585                           ; BSR set to: 0
  1586                           ;COBS.c: 160: }
  1587                           ;COBS.c: 162: for (i = len_code; i != 0; i--)
  1588  000C04  C06A  F065         	movff	cobs_decode@len_code,cobs_decode@i
  1589  000C08                     l4112:
  1590                           
  1591                           ; BSR set to: 0
  1592  000C08  0100               	movlb	0	; () banked
  1593  000C0A  5165               	movf	cobs_decode@i& (0+255),w,b
  1594  000C0C  0100               	movlb	0	; () banked
  1595  000C0E  B4D8               	btfsc	status,2,c
  1596  000C10  D01C               	goto	l4132
  1597                           
  1598                           ; BSR set to: 0
  1599                           ;COBS.c: 163: {
  1600                           ;COBS.c: 164: src_byte = *src_ptr++;
  1601                           
  1602                           ; BSR set to: 0
  1603                           
  1604                           ; BSR set to: 0
  1605  000C12  C021  FFD9         	movff	cobs_decode@src_ptr,fsr2l
  1606  000C16  C022  FFDA         	movff	cobs_decode@src_ptr+1,fsr2h
  1607  000C1A  50DF               	movf	indf2,w,c
  1608  000C1C  0100               	movlb	0	; () banked
  1609  000C1E  6F64               	movwf	cobs_decode@src_byte& (0+255),b
  1610                           
  1611                           ; BSR set to: 0
  1612  000C20  4A21               	infsnz	cobs_decode@src_ptr,f,c
  1613  000C22  2A22               	incf	cobs_decode@src_ptr+1,f,c
  1614                           
  1615                           ; BSR set to: 0
  1616                           ;COBS.c: 165: if (src_byte == 0)
  1617  000C24  0100               	movlb	0	; () banked
  1618  000C26  5164               	movf	cobs_decode@src_byte& (0+255),w,b
  1619  000C28  0100               	movlb	0	; () banked
  1620  000C2A  A4D8               	btfss	status,2,c
  1621  000C2C  D002               	goto	l4124
  1622                           
  1623                           ; BSR set to: 0
  1624                           ;COBS.c: 166: {
  1625                           ;COBS.c: 167: result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
  1626  000C2E  0100               	movlb	0	; () banked
  1627  000C30  856D               	bsf	(cobs_decode@result+2)& (0+255),2,b
  1628  000C32                     l4124:
  1629                           
  1630                           ; BSR set to: 0
  1631                           ;COBS.c: 168: }
  1632                           ;COBS.c: 169: *dst_write_ptr++ = src_byte;
  1633  000C32  C068  FFD9         	movff	cobs_decode@dst_write_ptr,fsr2l
  1634  000C36  C069  FFDA         	movff	cobs_decode@dst_write_ptr+1,fsr2h
  1635  000C3A  C064  FFDF         	movff	cobs_decode@src_byte,indf2
  1636                           
  1637                           ; BSR set to: 0
  1638  000C3E  0100               	movlb	0	; () banked
  1639  000C40  4B68               	infsnz	cobs_decode@dst_write_ptr& (0+255),f,b
  1640  000C42  2B69               	incf	(cobs_decode@dst_write_ptr+1)& (0+255),f,b
  1641                           
  1642                           ; BSR set to: 0
  1643  000C44  0100               	movlb	0	; () banked
  1644  000C46  0765               	decf	cobs_decode@i& (0+255),f,b
  1645  000C48  D7DF               	goto	l4112
  1646  000C4A                     l4132:
  1647                           
  1648                           ; BSR set to: 0
  1649                           ;COBS.c: 170: }
  1650                           ;COBS.c: 172: if (src_ptr >= src_end_ptr)
  1651  000C4A  0100               	movlb	0	; () banked
  1652  000C4C  5160               	movf	cobs_decode@src_end_ptr& (0+255),w,b
  1653  000C4E  5C21               	subwf	cobs_decode@src_ptr,w,c
  1654  000C50  0100               	movlb	0	; () banked
  1655  000C52  5161               	movf	(cobs_decode@src_end_ptr+1)& (0+255),w,b
  1656  000C54  5822               	subwfb	cobs_decode@src_ptr+1,w,c
  1657  000C56  B0D8               	btfsc	status,0,c
  1658  000C58  D01C               	goto	l4146
  1659                           
  1660                           ; BSR set to: 0
  1661                           ;COBS.c: 175: }
  1662                           ;COBS.c: 178: if (len_code != 0xFE)
  1663                           
  1664                           ; BSR set to: 0
  1665                           
  1666                           ; BSR set to: 0
  1667                           ;COBS.c: 173: {
  1668                           ;COBS.c: 174: break;
  1669  000C5A  0EFE               	movlw	254
  1670  000C5C  0100               	movlb	0	; () banked
  1671  000C5E  196A               	xorwf	cobs_decode@len_code& (0+255),w,b
  1672  000C60  B4D8               	btfsc	status,2,c
  1673  000C62  D781               	goto	l4084
  1674                           
  1675                           ; BSR set to: 0
  1676                           ;COBS.c: 179: {
  1677                           ;COBS.c: 180: if (dst_write_ptr >= dst_buf_end_ptr)
  1678  000C64  0100               	movlb	0	; () banked
  1679  000C66  5162               	movf	cobs_decode@dst_buf_end_ptr& (0+255),w,b
  1680  000C68  0100               	movlb	0	; () banked
  1681  000C6A  5D68               	subwf	cobs_decode@dst_write_ptr& (0+255),w,b
  1682  000C6C  0100               	movlb	0	; () banked
  1683  000C6E  5163               	movf	(cobs_decode@dst_buf_end_ptr+1)& (0+255),w,b
  1684  000C70  0100               	movlb	0	; () banked
  1685  000C72  5969               	subwfb	(cobs_decode@dst_write_ptr+1)& (0+255),w,b
  1686  000C74  A0D8               	btfss	status,0,c
  1687  000C76  D003               	goto	l4142
  1688                           
  1689                           ; BSR set to: 0
  1690                           ;COBS.c: 181: {
  1691                           ;COBS.c: 182: result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
  1692  000C78  0100               	movlb	0	; () banked
  1693  000C7A  836D               	bsf	(cobs_decode@result+2)& (0+255),1,b
  1694                           
  1695                           ;COBS.c: 183: break;
  1696  000C7C  D00A               	goto	l4146
  1697  000C7E                     l4142:
  1698                           
  1699                           ; BSR set to: 0
  1700                           ;COBS.c: 184: }
  1701                           ;COBS.c: 185: *dst_write_ptr++ = 0;
  1702  000C7E  C068  FFD9         	movff	cobs_decode@dst_write_ptr,fsr2l
  1703  000C82  C069  FFDA         	movff	cobs_decode@dst_write_ptr+1,fsr2h
  1704  000C86  0E00               	movlw	0
  1705  000C88  6EDF               	movwf	indf2,c
  1706                           
  1707                           ; BSR set to: 0
  1708  000C8A  0100               	movlb	0	; () banked
  1709  000C8C  4B68               	infsnz	cobs_decode@dst_write_ptr& (0+255),f,b
  1710  000C8E  2B69               	incf	(cobs_decode@dst_write_ptr+1)& (0+255),f,b
  1711                           
  1712                           ; BSR set to: 0
  1713                           ;COBS.c: 186: }
  1714                           ;COBS.c: 187: }
  1715  000C90  D76A               	goto	l4084
  1716  000C92                     l4146:
  1717                           
  1718                           ; BSR set to: 0
  1719                           ;COBS.c: 188: }
  1720                           ;COBS.c: 190: result.out_len = dst_write_ptr - dst_buf_ptr;
  1721  000C92  C01D  F025         	movff	cobs_decode@dst_buf_ptr,??_cobs_decode
  1722  000C96  C01E  F026         	movff	cobs_decode@dst_buf_ptr+1,??_cobs_decode+1
  1723  000C9A  1E25               	comf	??_cobs_decode,f,c
  1724  000C9C  1E26               	comf	??_cobs_decode+1,f,c
  1725  000C9E  4A25               	infsnz	??_cobs_decode,f,c
  1726  000CA0  2A26               	incf	??_cobs_decode+1,f,c
  1727  000CA2  0100               	movlb	0	; () banked
  1728  000CA4  5168               	movf	cobs_decode@dst_write_ptr& (0+255),w,b
  1729  000CA6  2425               	addwf	??_cobs_decode,w,c
  1730  000CA8  0100               	movlb	0	; () banked
  1731  000CAA  6F6B               	movwf	cobs_decode@result& (0+255),b
  1732  000CAC  0100               	movlb	0	; () banked
  1733  000CAE  5169               	movf	(cobs_decode@dst_write_ptr+1)& (0+255),w,b
  1734  000CB0  2026               	addwfc	??_cobs_decode+1,w,c
  1735  000CB2  0100               	movlb	0	; () banked
  1736  000CB4  6F6C               	movwf	(cobs_decode@result+1)& (0+255),b
  1737                           
  1738                           ; BSR set to: 0
  1739                           ;COBS.c: 192: return result;
  1740  000CB6  C06B  F01D         	movff	cobs_decode@result,?_cobs_decode
  1741  000CBA  C06C  F01E         	movff	cobs_decode@result+1,?_cobs_decode+1
  1742  000CBE  C06D  F01F         	movff	cobs_decode@result+2,?_cobs_decode+2
  1743  000CC2  0012               	return	
  1744  000CC4                     __end_of_cobs_decode:
  1745                           	opt stack 0
  1746                           tblptru	equ	0xFF8
  1747                           tblptrh	equ	0xFF7
  1748                           tblptrl	equ	0xFF6
  1749                           tablat	equ	0xFF5
  1750                           intcon	equ	0xFF2
  1751                           postinc0	equ	0xFEE
  1752                           wreg	equ	0xFE8
  1753                           indf2	equ	0xFDF
  1754                           postinc2	equ	0xFDE
  1755                           fsr2h	equ	0xFDA
  1756                           fsr2l	equ	0xFD9
  1757                           status	equ	0xFD8
  1758                           
  1759 ;; *************** function _Receive_get *****************
  1760 ;; Defined at:
  1761 ;;		line 125 in file "UART.c"
  1762 ;; Parameters:    Size  Location     Type
  1763 ;;		None
  1764 ;; Auto vars:     Size  Location     Type
  1765 ;;		None
  1766 ;; Return value:  Size  Location     Type
  1767 ;;                  1    wreg      unsigned char 
  1768 ;; Registers used:
  1769 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1770 ;; Tracked objects:
  1771 ;;		On entry : 0/0
  1772 ;;		On exit  : 0/0
  1773 ;;		Unchanged: 0/0
  1774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1775 ;;      Params:         0       0       0       0       0       0       0
  1776 ;;      Locals:         0       0       0       0       0       0       0
  1777 ;;      Temps:          0       0       0       0       0       0       0
  1778 ;;      Totals:         0       0       0       0       0       0       0
  1779 ;;Total ram usage:        0 bytes
  1780 ;; Hardware stack levels used:    1
  1781 ;; Hardware stack levels required when called:    8
  1782 ;; This function calls:
  1783 ;;		_UART_buff_get
  1784 ;; This function is called by:
  1785 ;;		_receiveData
  1786 ;;		_getch
  1787 ;; This function uses a non-reentrant model
  1788 ;;
  1789                           
  1790                           	psect	text4
  1791  002240                     __ptext4:
  1792                           	opt stack 0
  1793  002240                     _Receive_get:
  1794                           	opt stack 20
  1795                           
  1796                           ;UART.c: 126: return UART_buff_get(&input_buffer);
  1797                           
  1798                           ; BSR set to: 0
  1799                           ;incstack = 0
  1800  002240  0E30               	movlw	low _input_buffer
  1801  002242  6E23               	movwf	UART_buff_get@_this,c
  1802  002244  0E01               	movlw	high _input_buffer
  1803  002246  6E24               	movwf	UART_buff_get@_this+1,c
  1804  002248  ECDC  F00B         	call	_UART_buff_get	;wreg free
  1805  00224C  0012               	return	
  1806  00224E                     __end_of_Receive_get:
  1807                           	opt stack 0
  1808                           tblptru	equ	0xFF8
  1809                           tblptrh	equ	0xFF7
  1810                           tblptrl	equ	0xFF6
  1811                           tablat	equ	0xFF5
  1812                           intcon	equ	0xFF2
  1813                           postinc0	equ	0xFEE
  1814                           wreg	equ	0xFE8
  1815                           indf2	equ	0xFDF
  1816                           postinc2	equ	0xFDE
  1817                           fsr2h	equ	0xFDA
  1818                           fsr2l	equ	0xFD9
  1819                           status	equ	0xFD8
  1820                           
  1821 ;; *************** function _Receive_available *****************
  1822 ;; Defined at:
  1823 ;;		line 121 in file "UART.c"
  1824 ;; Parameters:    Size  Location     Type
  1825 ;;		None
  1826 ;; Auto vars:     Size  Location     Type
  1827 ;;		None
  1828 ;; Return value:  Size  Location     Type
  1829 ;;                  2   30[COMRAM] int 
  1830 ;; Registers used:
  1831 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1832 ;; Tracked objects:
  1833 ;;		On entry : 0/0
  1834 ;;		On exit  : 0/0
  1835 ;;		Unchanged: 0/0
  1836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1837 ;;      Params:         2       0       0       0       0       0       0
  1838 ;;      Locals:         0       0       0       0       0       0       0
  1839 ;;      Temps:          0       0       0       0       0       0       0
  1840 ;;      Totals:         2       0       0       0       0       0       0
  1841 ;;Total ram usage:        2 bytes
  1842 ;; Hardware stack levels used:    1
  1843 ;; Hardware stack levels required when called:    7
  1844 ;; This function calls:
  1845 ;;		_UART_buff_size
  1846 ;; This function is called by:
  1847 ;;		_receiveData
  1848 ;; This function uses a non-reentrant model
  1849 ;;
  1850                           
  1851                           	psect	text5
  1852  002184                     __ptext5:
  1853                           	opt stack 0
  1854  002184                     _Receive_available:
  1855                           	opt stack 21
  1856                           
  1857                           ;UART.c: 122: return UART_buff_size(&input_buffer);
  1858                           
  1859                           ;incstack = 0
  1860  002184  0E30               	movlw	low _input_buffer
  1861  002186  6E1D               	movwf	UART_buff_size@_this,c
  1862  002188  0E01               	movlw	high _input_buffer
  1863  00218A  6E1E               	movwf	UART_buff_size@_this+1,c
  1864  00218C  ECCD  F010         	call	_UART_buff_size	;wreg free
  1865  002190  C01D  F01F         	movff	?_UART_buff_size,?_Receive_available
  1866  002194  C01E  F020         	movff	?_UART_buff_size+1,?_Receive_available+1
  1867  002198  0012               	return	
  1868  00219A                     __end_of_Receive_available:
  1869                           	opt stack 0
  1870                           tblptru	equ	0xFF8
  1871                           tblptrh	equ	0xFF7
  1872                           tblptrl	equ	0xFF6
  1873                           tablat	equ	0xFF5
  1874                           intcon	equ	0xFF2
  1875                           postinc0	equ	0xFEE
  1876                           wreg	equ	0xFE8
  1877                           indf2	equ	0xFDF
  1878                           postinc2	equ	0xFDE
  1879                           fsr2h	equ	0xFDA
  1880                           fsr2l	equ	0xFD9
  1881                           status	equ	0xFD8
  1882                           
  1883 ;; *************** function _UART_buff_size *****************
  1884 ;; Defined at:
  1885 ;;		line 101 in file "UART.c"
  1886 ;; Parameters:    Size  Location     Type
  1887 ;;  _this           2   28[COMRAM] PTR struct UART_ring_buf
  1888 ;;		 -> output_buffer(106), input_buffer(106), 
  1889 ;; Auto vars:     Size  Location     Type
  1890 ;;		None
  1891 ;; Return value:  Size  Location     Type
  1892 ;;                  2   28[COMRAM] int 
  1893 ;; Registers used:
  1894 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1895 ;; Tracked objects:
  1896 ;;		On entry : 0/0
  1897 ;;		On exit  : 0/0
  1898 ;;		Unchanged: 0/0
  1899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1900 ;;      Params:         2       0       0       0       0       0       0
  1901 ;;      Locals:         0       0       0       0       0       0       0
  1902 ;;      Temps:          0       0       0       0       0       0       0
  1903 ;;      Totals:         2       0       0       0       0       0       0
  1904 ;;Total ram usage:        2 bytes
  1905 ;; Hardware stack levels used:    1
  1906 ;; Hardware stack levels required when called:    6
  1907 ;; This function calls:
  1908 ;;		Nothing
  1909 ;; This function is called by:
  1910 ;;		_Receive_available
  1911 ;; This function uses a non-reentrant model
  1912 ;;
  1913                           
  1914                           	psect	text6
  1915  00219A                     __ptext6:
  1916                           	opt stack 0
  1917  00219A                     _UART_buff_size:
  1918                           	opt stack 21
  1919                           
  1920                           ;UART.c: 102: return (_this->count);
  1921                           
  1922                           ;incstack = 0
  1923  00219A  EE20 F068          	lfsr	2,104
  1924  00219E  501D               	movf	UART_buff_size@_this,w,c
  1925  0021A0  26D9               	addwf	fsr2l,f,c
  1926  0021A2  501E               	movf	UART_buff_size@_this+1,w,c
  1927  0021A4  22DA               	addwfc	fsr2h,f,c
  1928  0021A6  CFDE F01D          	movff	postinc2,?_UART_buff_size
  1929  0021AA  CFDD F01E          	movff	postdec2,?_UART_buff_size+1
  1930  0021AE  0012               	return	
  1931  0021B0                     __end_of_UART_buff_size:
  1932                           	opt stack 0
  1933                           tblptru	equ	0xFF8
  1934                           tblptrh	equ	0xFF7
  1935                           tblptrl	equ	0xFF6
  1936                           tablat	equ	0xFF5
  1937                           intcon	equ	0xFF2
  1938                           postinc0	equ	0xFEE
  1939                           wreg	equ	0xFE8
  1940                           indf2	equ	0xFDF
  1941                           postinc2	equ	0xFDE
  1942                           postdec2	equ	0xFDD
  1943                           fsr2h	equ	0xFDA
  1944                           fsr2l	equ	0xFD9
  1945                           status	equ	0xFD8
  1946                           
  1947 ;; *************** function _ComController *****************
  1948 ;; Defined at:
  1949 ;;		line 122 in file "CarCom.c"
  1950 ;; Parameters:    Size  Location     Type
  1951 ;;  DTI             2   92[BANK0 ] PTR unsigned char 
  1952 ;;		 -> ProcessArray(30), 
  1953 ;;  lenth           2   94[BANK0 ] unsigned int 
  1954 ;; Auto vars:     Size  Location     Type
  1955 ;;  k               1   12[BANK1 ] unsigned char 
  1956 ;;  DataToSend      4    8[BANK1 ] unsigned char [4]
  1957 ;;  DataRecived     4    0[BANK1 ] unsigned char [4]
  1958 ;;  DataToSend      4    4[BANK1 ] unsigned char [4]
  1959 ;; Return value:  Size  Location     Type
  1960 ;;                  1    wreg      void 
  1961 ;; Registers used:
  1962 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1963 ;; Tracked objects:
  1964 ;;		On entry : 0/0
  1965 ;;		On exit  : 0/0
  1966 ;;		Unchanged: 0/0
  1967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1968 ;;      Params:         0       4       0       0       0       0       0
  1969 ;;      Locals:         0       0      13       0       0       0       0
  1970 ;;      Temps:          0       2       0       0       0       0       0
  1971 ;;      Totals:         0       6      13       0       0       0       0
  1972 ;;Total ram usage:       19 bytes
  1973 ;; Hardware stack levels used:    1
  1974 ;; Hardware stack levels required when called:   10
  1975 ;; This function calls:
  1976 ;;		_Delay
  1977 ;;		_GetDataDict
  1978 ;;		_SetDataDict
  1979 ;;		_sendData
  1980 ;; This function is called by:
  1981 ;;		_receiveData
  1982 ;; This function uses a non-reentrant model
  1983 ;;
  1984                           
  1985                           	psect	text7
  1986  000740                     __ptext7:
  1987                           	opt stack 0
  1988  000740                     _ComController:
  1989                           	opt stack 18
  1990                           
  1991                           ;CarCom.c: 123: if(DTI[1] == 1){
  1992                           
  1993                           ;incstack = 0
  1994  000740  0100               	movlb	0	; () banked
  1995  000742  EE20 F001          	lfsr	2,1
  1996  000746  51BC               	movf	ComController@DTI& (0+255),w,b
  1997  000748  26D9               	addwf	fsr2l,f,c
  1998  00074A  51BD               	movf	(ComController@DTI+1)& (0+255),w,b
  1999  00074C  22DA               	addwfc	fsr2h,f,c
  2000  00074E  04DE               	decf	postinc2,w,c
  2001  000750  A4D8               	btfss	status,2,c
  2002  000752  D057               	goto	l4164
  2003                           
  2004                           ; BSR set to: 0
  2005                           ;CarCom.c: 124: unsigned char DataToSend[4];
  2006                           ;CarCom.c: 125: GetDataDict(DTI[2], DTI[3], DataToSend, DTI[4]);
  2007  000754  0100               	movlb	0	; () banked
  2008  000756  EE20 F003          	lfsr	2,3
  2009  00075A  51BC               	movf	ComController@DTI& (0+255),w,b
  2010  00075C  26D9               	addwf	fsr2l,f,c
  2011  00075E  51BD               	movf	(ComController@DTI+1)& (0+255),w,b
  2012  000760  22DA               	addwfc	fsr2h,f,c
  2013  000762  50DF               	movf	indf2,w,c
  2014  000764  6E1D               	movwf	GetDataDict@DataTableIndex,c
  2015  000766  0EDA               	movlw	low ComController@DataToSend
  2016  000768  6E1E               	movwf	GetDataDict@DataArray,c
  2017  00076A  0E01               	movlw	high ComController@DataToSend
  2018  00076C  6E1F               	movwf	GetDataDict@DataArray+1,c
  2019  00076E  0100               	movlb	0	; () banked
  2020  000770  EE20 F004          	lfsr	2,4
  2021  000774  51BC               	movf	ComController@DTI& (0+255),w,b
  2022  000776  26D9               	addwf	fsr2l,f,c
  2023  000778  51BD               	movf	(ComController@DTI+1)& (0+255),w,b
  2024  00077A  22DA               	addwfc	fsr2h,f,c
  2025  00077C  50DF               	movf	indf2,w,c
  2026  00077E  6E20               	movwf	GetDataDict@numbofbytes,c
  2027  000780  0100               	movlb	0	; () banked
  2028  000782  EE20 F002          	lfsr	2,2
  2029  000786  51BC               	movf	ComController@DTI& (0+255),w,b
  2030  000788  26D9               	addwf	fsr2l,f,c
  2031  00078A  51BD               	movf	(ComController@DTI+1)& (0+255),w,b
  2032  00078C  22DA               	addwfc	fsr2h,f,c
  2033  00078E  50DF               	movf	indf2,w,c
  2034  000790  EC90  F00B         	call	_GetDataDict
  2035                           
  2036                           ;CarCom.c: 126: do { LATC5 = 1; } while(0);
  2037  000794  8A8B               	bsf	3979,5,c	;volatile
  2038                           
  2039                           ;CarCom.c: 127: Delay(5);
  2040  000796  0E05               	movlw	5
  2041  000798  6E1D               	movwf	Delay@wait,c
  2042  00079A  0E00               	movlw	0
  2043  00079C  6E1E               	movwf	Delay@wait+1,c
  2044  00079E  0E00               	movlw	0
  2045  0007A0  6E1F               	movwf	Delay@wait+2,c
  2046  0007A2  0E00               	movlw	0
  2047  0007A4  6E20               	movwf	Delay@wait+3,c
  2048  0007A6  ECEF  F00E         	call	_Delay	;wreg free
  2049                           
  2050                           ;CarCom.c: 128: sendData(1, 2, 1, 1, DataToSend, DTI[4]);
  2051  0007AA  0E02               	movlw	2
  2052  0007AC  0100               	movlb	0	; () banked
  2053  0007AE  6F6D               	movwf	sendData@ComandByte& (0+255),b
  2054  0007B0  0E01               	movlw	1
  2055  0007B2  0100               	movlb	0	; () banked
  2056  0007B4  6F6E               	movwf	sendData@DataTable& (0+255),b
  2057  0007B6  0E01               	movlw	1
  2058  0007B8  0100               	movlb	0	; () banked
  2059  0007BA  6F6F               	movwf	sendData@DataTableIndex& (0+255),b
  2060  0007BC  0EDA               	movlw	low ComController@DataToSend
  2061  0007BE  0100               	movlb	0	; () banked
  2062  0007C0  6F70               	movwf	sendData@DTS& (0+255),b
  2063  0007C2  0E01               	movlw	high ComController@DataToSend
  2064  0007C4  0100               	movlb	0	; () banked
  2065  0007C6  6F71               	movwf	(sendData@DTS+1)& (0+255),b
  2066  0007C8  0100               	movlb	0	; () banked
  2067  0007CA  EE20 F004          	lfsr	2,4
  2068  0007CE  51BC               	movf	ComController@DTI& (0+255),w,b
  2069  0007D0  26D9               	addwf	fsr2l,f,c
  2070  0007D2  51BD               	movf	(ComController@DTI+1)& (0+255),w,b
  2071  0007D4  22DA               	addwfc	fsr2h,f,c
  2072  0007D6  50DF               	movf	indf2,w,c
  2073  0007D8  0100               	movlb	0	; () banked
  2074  0007DA  6FC0               	movwf	??_ComController& (0+255),b
  2075  0007DC  0100               	movlb	0	; () banked
  2076  0007DE  51C0               	movf	??_ComController& (0+255),w,b
  2077  0007E0  0100               	movlb	0	; () banked
  2078  0007E2  6F72               	movwf	sendData@lenth& (0+255),b
  2079  0007E4  6B73               	clrf	(sendData@lenth+1)& (0+255),b
  2080  0007E6  0E01               	movlw	1
  2081  0007E8  EC96  F004         	call	_sendData
  2082                           
  2083                           ;CarCom.c: 129: Delay(3);
  2084  0007EC  0E03               	movlw	3
  2085  0007EE  6E1D               	movwf	Delay@wait,c
  2086  0007F0  0E00               	movlw	0
  2087  0007F2  6E1E               	movwf	Delay@wait+1,c
  2088  0007F4  0E00               	movlw	0
  2089  0007F6  6E1F               	movwf	Delay@wait+2,c
  2090  0007F8  0E00               	movlw	0
  2091  0007FA  6E20               	movwf	Delay@wait+3,c
  2092  0007FC  ECEF  F00E         	call	_Delay	;wreg free
  2093                           
  2094                           ;CarCom.c: 130: do { LATC5 = 0; } while(0);
  2095  000800  9A8B               	bcf	3979,5,c	;volatile
  2096  000802                     l4164:
  2097                           
  2098                           ;CarCom.c: 131: }
  2099                           ;CarCom.c: 132: if(DTI[1] == 2){
  2100  000802  0100               	movlb	0	; () banked
  2101  000804  EE20 F001          	lfsr	2,1
  2102  000808  51BC               	movf	ComController@DTI& (0+255),w,b
  2103  00080A  26D9               	addwf	fsr2l,f,c
  2104  00080C  51BD               	movf	(ComController@DTI+1)& (0+255),w,b
  2105  00080E  22DA               	addwfc	fsr2h,f,c
  2106  000810  0E02               	movlw	2
  2107  000812  18DE               	xorwf	postinc2,w,c
  2108  000814  A4D8               	btfss	status,2,c
  2109  000816  0012               	return	
  2110                           
  2111                           ; BSR set to: 0
  2112                           ;CarCom.c: 133: unsigned char DataToSend[4];
  2113                           ;CarCom.c: 134: unsigned char DataRecived[4];
  2114                           ;CarCom.c: 135: for(char k = 0;k<DTI[4];k++){
  2115  000818  0E00               	movlw	0
  2116  00081A  0101               	movlb	1	; () banked
  2117  00081C  6FE2               	movwf	ComController@k& (0+255),b
  2118  00081E  D021               	goto	l4172
  2119  000820                     l4168:
  2120                           
  2121                           ; BSR set to: 1
  2122                           ;CarCom.c: 136: DataRecived[k] = DTI[5+k];
  2123  000820  0101               	movlb	1	; () banked
  2124  000822  51E2               	movf	ComController@k& (0+255),w,b
  2125  000824  0100               	movlb	0	; () banked
  2126  000826  6FC0               	movwf	??_ComController& (0+255),b
  2127  000828  6BC1               	clrf	(??_ComController+1)& (0+255),b
  2128  00082A  0E05               	movlw	5
  2129  00082C  0100               	movlb	0	; () banked
  2130  00082E  27C0               	addwf	??_ComController& (0+255),f,b
  2131  000830  0E00               	movlw	0
  2132  000832  23C1               	addwfc	(??_ComController+1)& (0+255),f,b
  2133  000834  0100               	movlb	0	; () banked
  2134  000836  51C0               	movf	??_ComController& (0+255),w,b
  2135  000838  0100               	movlb	0	; () banked
  2136  00083A  25BC               	addwf	ComController@DTI& (0+255),w,b
  2137  00083C  6ED9               	movwf	fsr2l,c
  2138  00083E  0100               	movlb	0	; () banked
  2139  000840  51C1               	movf	(??_ComController+1)& (0+255),w,b
  2140  000842  0100               	movlb	0	; () banked
  2141  000844  21BD               	addwfc	(ComController@DTI+1)& (0+255),w,b
  2142  000846  6EDA               	movwf	fsr2h,c
  2143  000848  0101               	movlb	1	; () banked
  2144  00084A  51E2               	movf	ComController@k& (0+255),w,b
  2145  00084C  0D01               	mullw	1
  2146  00084E  0ED6               	movlw	low ComController@DataRecived
  2147  000850  24F3               	addwf	prodl,w,c
  2148  000852  6EE1               	movwf	fsr1l,c
  2149  000854  0E01               	movlw	high ComController@DataRecived
  2150  000856  20F4               	addwfc	prodh,w,c
  2151  000858  6EE2               	movwf	fsr1h,c
  2152  00085A  CFDF FFE7          	movff	indf2,indf1
  2153                           
  2154                           ; BSR set to: 1
  2155  00085E  0101               	movlb	1	; () banked
  2156  000860  2BE2               	incf	ComController@k& (0+255),f,b
  2157  000862                     l4172:
  2158                           
  2159                           ; BSR set to: 1
  2160  000862  0100               	movlb	0	; () banked
  2161  000864  EE20 F004          	lfsr	2,4
  2162  000868  51BC               	movf	ComController@DTI& (0+255),w,b
  2163  00086A  26D9               	addwf	fsr2l,f,c
  2164  00086C  51BD               	movf	(ComController@DTI+1)& (0+255),w,b
  2165  00086E  22DA               	addwfc	fsr2h,f,c
  2166  000870  50DE               	movf	postinc2,w,c
  2167  000872  0101               	movlb	1	; () banked
  2168  000874  5DE2               	subwf	ComController@k& (0+255),w,b
  2169  000876  A0D8               	btfss	status,0,c
  2170  000878  D7D3               	goto	l4168
  2171                           
  2172                           ; BSR set to: 1
  2173                           ;CarCom.c: 137: }
  2174                           ;CarCom.c: 138: SetDataDict(DTI[2], DTI[3], DataRecived, DTI[4]);
  2175                           
  2176                           ; BSR set to: 1
  2177  00087A  0100               	movlb	0	; () banked
  2178  00087C  EE20 F003          	lfsr	2,3
  2179  000880  51BC               	movf	ComController@DTI& (0+255),w,b
  2180  000882  26D9               	addwf	fsr2l,f,c
  2181  000884  51BD               	movf	(ComController@DTI+1)& (0+255),w,b
  2182  000886  22DA               	addwfc	fsr2h,f,c
  2183  000888  50DF               	movf	indf2,w,c
  2184  00088A  6E1D               	movwf	SetDataDict@DataTableIndex,c
  2185  00088C  0ED6               	movlw	low ComController@DataRecived
  2186  00088E  6E1E               	movwf	SetDataDict@DataArray,c
  2187  000890  0E01               	movlw	high ComController@DataRecived
  2188  000892  6E1F               	movwf	SetDataDict@DataArray+1,c
  2189  000894  0100               	movlb	0	; () banked
  2190  000896  EE20 F004          	lfsr	2,4
  2191  00089A  51BC               	movf	ComController@DTI& (0+255),w,b
  2192  00089C  26D9               	addwf	fsr2l,f,c
  2193  00089E  51BD               	movf	(ComController@DTI+1)& (0+255),w,b
  2194  0008A0  22DA               	addwfc	fsr2h,f,c
  2195  0008A2  50DF               	movf	indf2,w,c
  2196  0008A4  6E20               	movwf	SetDataDict@numbofbytes,c
  2197  0008A6  0100               	movlb	0	; () banked
  2198  0008A8  EE20 F002          	lfsr	2,2
  2199  0008AC  51BC               	movf	ComController@DTI& (0+255),w,b
  2200  0008AE  26D9               	addwf	fsr2l,f,c
  2201  0008B0  51BD               	movf	(ComController@DTI+1)& (0+255),w,b
  2202  0008B2  22DA               	addwfc	fsr2h,f,c
  2203  0008B4  50DF               	movf	indf2,w,c
  2204  0008B6  EC44  F00B         	call	_SetDataDict
  2205                           
  2206                           ;CarCom.c: 139: GetDataDict(4, 2, DataToSend, 1);
  2207  0008BA  0E02               	movlw	2
  2208  0008BC  6E1D               	movwf	GetDataDict@DataTableIndex,c
  2209  0008BE  0EDE               	movlw	low ComController@DataToSend_1653
  2210  0008C0  6E1E               	movwf	GetDataDict@DataArray,c
  2211  0008C2  0E01               	movlw	high ComController@DataToSend_1653
  2212  0008C4  6E1F               	movwf	GetDataDict@DataArray+1,c
  2213  0008C6  0E01               	movlw	1
  2214  0008C8  6E20               	movwf	GetDataDict@numbofbytes,c
  2215  0008CA  0E04               	movlw	4
  2216  0008CC  EC90  F00B         	call	_GetDataDict
  2217                           
  2218                           ;CarCom.c: 140: do { LATC5 = 1; } while(0);
  2219  0008D0  8A8B               	bsf	3979,5,c	;volatile
  2220                           
  2221                           ;CarCom.c: 141: Delay(2);
  2222  0008D2  0E02               	movlw	2
  2223  0008D4  6E1D               	movwf	Delay@wait,c
  2224  0008D6  0E00               	movlw	0
  2225  0008D8  6E1E               	movwf	Delay@wait+1,c
  2226  0008DA  0E00               	movlw	0
  2227  0008DC  6E1F               	movwf	Delay@wait+2,c
  2228  0008DE  0E00               	movlw	0
  2229  0008E0  6E20               	movwf	Delay@wait+3,c
  2230  0008E2  ECEF  F00E         	call	_Delay	;wreg free
  2231                           
  2232                           ;CarCom.c: 142: sendData(1, 2, 4, 2, DataToSend, 1);
  2233  0008E6  0E02               	movlw	2
  2234  0008E8  0100               	movlb	0	; () banked
  2235  0008EA  6F6D               	movwf	sendData@ComandByte& (0+255),b
  2236  0008EC  0E04               	movlw	4
  2237  0008EE  0100               	movlb	0	; () banked
  2238  0008F0  6F6E               	movwf	sendData@DataTable& (0+255),b
  2239  0008F2  0E02               	movlw	2
  2240  0008F4  0100               	movlb	0	; () banked
  2241  0008F6  6F6F               	movwf	sendData@DataTableIndex& (0+255),b
  2242  0008F8  0EDE               	movlw	low ComController@DataToSend_1653
  2243  0008FA  0100               	movlb	0	; () banked
  2244  0008FC  6F70               	movwf	sendData@DTS& (0+255),b
  2245  0008FE  0E01               	movlw	high ComController@DataToSend_1653
  2246  000900  0100               	movlb	0	; () banked
  2247  000902  6F71               	movwf	(sendData@DTS+1)& (0+255),b
  2248  000904  0E00               	movlw	0
  2249  000906  0100               	movlb	0	; () banked
  2250  000908  6F73               	movwf	(sendData@lenth+1)& (0+255),b
  2251  00090A  0E01               	movlw	1
  2252  00090C  6F72               	movwf	sendData@lenth& (0+255),b
  2253  00090E  0E01               	movlw	1
  2254  000910  EC96  F004         	call	_sendData
  2255                           
  2256                           ;CarCom.c: 143: Delay(5);
  2257  000914  0E05               	movlw	5
  2258  000916  6E1D               	movwf	Delay@wait,c
  2259  000918  0E00               	movlw	0
  2260  00091A  6E1E               	movwf	Delay@wait+1,c
  2261  00091C  0E00               	movlw	0
  2262  00091E  6E1F               	movwf	Delay@wait+2,c
  2263  000920  0E00               	movlw	0
  2264  000922  6E20               	movwf	Delay@wait+3,c
  2265  000924  ECEF  F00E         	call	_Delay	;wreg free
  2266                           
  2267                           ;CarCom.c: 144: do { LATC5 = 0; } while(0);
  2268  000928  9A8B               	bcf	3979,5,c	;volatile
  2269  00092A  0012               	return	
  2270  00092C                     __end_of_ComController:
  2271                           	opt stack 0
  2272                           tblptru	equ	0xFF8
  2273                           tblptrh	equ	0xFF7
  2274                           tblptrl	equ	0xFF6
  2275                           tablat	equ	0xFF5
  2276                           prodh	equ	0xFF4
  2277                           prodl	equ	0xFF3
  2278                           intcon	equ	0xFF2
  2279                           postinc0	equ	0xFEE
  2280                           wreg	equ	0xFE8
  2281                           indf1	equ	0xFE7
  2282                           fsr1h	equ	0xFE2
  2283                           fsr1l	equ	0xFE1
  2284                           indf2	equ	0xFDF
  2285                           postinc2	equ	0xFDE
  2286                           postdec2	equ	0xFDD
  2287                           fsr2h	equ	0xFDA
  2288                           fsr2l	equ	0xFD9
  2289                           status	equ	0xFD8
  2290                           
  2291 ;; *************** function _sendData *****************
  2292 ;; Defined at:
  2293 ;;		line 39 in file "CarCom.c"
  2294 ;; Parameters:    Size  Location     Type
  2295 ;;  whereToSend     1    wreg     unsigned char 
  2296 ;;  ComandByte      1   13[BANK0 ] unsigned char 
  2297 ;;  DataTable       1   14[BANK0 ] unsigned char 
  2298 ;;  DataTableInd    1   15[BANK0 ] unsigned char 
  2299 ;;  DTS             2   16[BANK0 ] PTR unsigned char 
  2300 ;;		 -> ComController@DataToSend_1653(4), ComController@DataToSend(4), 
  2301 ;;  lenth           2   18[BANK0 ] unsigned int 
  2302 ;; Auto vars:     Size  Location     Type
  2303 ;;  whereToSend     1   84[BANK0 ] unsigned char 
  2304 ;;  SendArray      30   54[BANK0 ] unsigned char [30]
  2305 ;;  COBSArray      30   24[BANK0 ] unsigned char [30]
  2306 ;;  result          3   86[BANK0 ] struct .
  2307 ;;  count           2   89[BANK0 ] int 
  2308 ;;  i               1   91[BANK0 ] unsigned char 
  2309 ;;  CS              1   85[BANK0 ] unsigned char 
  2310 ;; Return value:  Size  Location     Type
  2311 ;;                  1    wreg      void 
  2312 ;; Registers used:
  2313 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2314 ;; Tracked objects:
  2315 ;;		On entry : 0/0
  2316 ;;		On exit  : 0/0
  2317 ;;		Unchanged: 0/0
  2318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2319 ;;      Params:         0       7       0       0       0       0       0
  2320 ;;      Locals:         0      68       0       0       0       0       0
  2321 ;;      Temps:          0       4       0       0       0       0       0
  2322 ;;      Totals:         0      79       0       0       0       0       0
  2323 ;;Total ram usage:       79 bytes
  2324 ;; Hardware stack levels used:    1
  2325 ;; Hardware stack levels required when called:    9
  2326 ;; This function calls:
  2327 ;;		_CRC8
  2328 ;;		_Send_put
  2329 ;;		_cobs_encode
  2330 ;; This function is called by:
  2331 ;;		_ComController
  2332 ;; This function uses a non-reentrant model
  2333 ;;
  2334                           
  2335                           	psect	text8
  2336  00092C                     __ptext8:
  2337                           	opt stack 0
  2338  00092C                     _sendData:
  2339                           	opt stack 18
  2340                           
  2341                           ;incstack = 0
  2342                           ;sendData@whereToSend stored from wreg
  2343  00092C  0100               	movlb	0	; () banked
  2344  00092E  6FB4               	movwf	sendData@whereToSend& (0+255),b
  2345                           
  2346                           ;CarCom.c: 40: unsigned char SendArray[30];
  2347                           ;CarCom.c: 41: unsigned char COBSArray[30];
  2348                           ;CarCom.c: 43: cobs_encode_result result;
  2349                           ;CarCom.c: 45: SendArray[0] = 5+lenth;
  2350  000930  0100               	movlb	0	; () banked
  2351  000932  5172               	movf	sendData@lenth& (0+255),w,b
  2352  000934  0F05               	addlw	5
  2353  000936  0100               	movlb	0	; () banked
  2354  000938  6F96               	movwf	sendData@SendArray& (0+255),b
  2355                           
  2356                           ; BSR set to: 0
  2357                           ;CarCom.c: 46: SendArray[1] = ComandByte;
  2358  00093A  C06D  F097         	movff	sendData@ComandByte,sendData@SendArray+1
  2359                           
  2360                           ; BSR set to: 0
  2361                           ;CarCom.c: 47: SendArray[2] = DataTable;
  2362  00093E  C06E  F098         	movff	sendData@DataTable,sendData@SendArray+2
  2363                           
  2364                           ; BSR set to: 0
  2365                           ;CarCom.c: 48: SendArray[3] = DataTableIndex;
  2366  000942  C06F  F099         	movff	sendData@DataTableIndex,sendData@SendArray+3
  2367                           
  2368                           ; BSR set to: 0
  2369                           ;CarCom.c: 49: SendArray[4] = lenth;
  2370  000946  C072  F09A         	movff	sendData@lenth,sendData@SendArray+4
  2371                           
  2372                           ; BSR set to: 0
  2373                           ;CarCom.c: 51: unsigned char i = 0;
  2374  00094A  0E00               	movlw	0
  2375  00094C  0100               	movlb	0	; () banked
  2376  00094E  6FBB               	movwf	sendData@i& (0+255),b
  2377                           
  2378                           ; BSR set to: 0
  2379                           ;CarCom.c: 52: int count = 5;
  2380  000950  0E00               	movlw	0
  2381  000952  0100               	movlb	0	; () banked
  2382  000954  6FBA               	movwf	(sendData@count+1)& (0+255),b
  2383  000956  0E05               	movlw	5
  2384  000958  6FB9               	movwf	sendData@count& (0+255),b
  2385  00095A  D024               	goto	l3966
  2386  00095C                     l3960:
  2387                           
  2388                           ; BSR set to: 0
  2389                           ;CarCom.c: 55: SendArray[i+5] = DTS[i];
  2390  00095C  0100               	movlb	0	; () banked
  2391  00095E  51BB               	movf	sendData@i& (0+255),w,b
  2392  000960  0D01               	mullw	1
  2393  000962  50F3               	movf	prodl,w,c
  2394  000964  0100               	movlb	0	; () banked
  2395  000966  2570               	addwf	sendData@DTS& (0+255),w,b
  2396  000968  6ED9               	movwf	fsr2l,c
  2397  00096A  50F4               	movf	prodh,w,c
  2398  00096C  0100               	movlb	0	; () banked
  2399  00096E  2171               	addwfc	(sendData@DTS+1)& (0+255),w,b
  2400  000970  6EDA               	movwf	fsr2h,c
  2401  000972  0100               	movlb	0	; () banked
  2402  000974  51BB               	movf	sendData@i& (0+255),w,b
  2403  000976  0100               	movlb	0	; () banked
  2404  000978  6F74               	movwf	??_sendData& (0+255),b
  2405  00097A  6B75               	clrf	(??_sendData+1)& (0+255),b
  2406  00097C  0E05               	movlw	5
  2407  00097E  0100               	movlb	0	; () banked
  2408  000980  2774               	addwf	??_sendData& (0+255),f,b
  2409  000982  0E00               	movlw	0
  2410  000984  2375               	addwfc	(??_sendData+1)& (0+255),f,b
  2411  000986  0E96               	movlw	low sendData@SendArray
  2412  000988  0100               	movlb	0	; () banked
  2413  00098A  2574               	addwf	??_sendData& (0+255),w,b
  2414  00098C  6EE1               	movwf	fsr1l,c
  2415  00098E  0E00               	movlw	high sendData@SendArray
  2416  000990  0100               	movlb	0	; () banked
  2417  000992  2175               	addwfc	(??_sendData+1)& (0+255),w,b
  2418  000994  6EE2               	movwf	fsr1h,c
  2419  000996  CFDF FFE7          	movff	indf2,indf1
  2420                           
  2421                           ; BSR set to: 0
  2422                           ;CarCom.c: 56: count++;
  2423  00099A  0100               	movlb	0	; () banked
  2424  00099C  4BB9               	infsnz	sendData@count& (0+255),f,b
  2425  00099E  2BBA               	incf	(sendData@count+1)& (0+255),f,b
  2426                           
  2427                           ; BSR set to: 0
  2428  0009A0  0100               	movlb	0	; () banked
  2429  0009A2  2BBB               	incf	sendData@i& (0+255),f,b
  2430  0009A4                     l3966:
  2431                           
  2432                           ; BSR set to: 0
  2433  0009A4  0100               	movlb	0	; () banked
  2434  0009A6  51BB               	movf	sendData@i& (0+255),w,b
  2435  0009A8  0100               	movlb	0	; () banked
  2436  0009AA  6F74               	movwf	??_sendData& (0+255),b
  2437  0009AC  6B75               	clrf	(??_sendData+1)& (0+255),b
  2438  0009AE  0100               	movlb	0	; () banked
  2439  0009B0  5172               	movf	sendData@lenth& (0+255),w,b
  2440  0009B2  0100               	movlb	0	; () banked
  2441  0009B4  5D74               	subwf	??_sendData& (0+255),w,b
  2442  0009B6  0100               	movlb	0	; () banked
  2443  0009B8  5173               	movf	(sendData@lenth+1)& (0+255),w,b
  2444  0009BA  0100               	movlb	0	; () banked
  2445  0009BC  5975               	subwfb	(??_sendData+1)& (0+255),w,b
  2446  0009BE  A0D8               	btfss	status,0,c
  2447  0009C0  D7CD               	goto	l3960
  2448                           
  2449                           ; BSR set to: 0
  2450                           ;CarCom.c: 57: }
  2451                           ;CarCom.c: 59: unsigned char CS = CRC8(SendArray, count);
  2452                           
  2453                           ; BSR set to: 0
  2454  0009C2  0E96               	movlw	low sendData@SendArray
  2455  0009C4  6E1D               	movwf	CRC8@data,c
  2456  0009C6  0E00               	movlw	high sendData@SendArray
  2457  0009C8  6E1E               	movwf	CRC8@data+1,c
  2458  0009CA  C0B9  F01F         	movff	sendData@count,CRC8@len
  2459  0009CE  ECCA  F00E         	call	_CRC8	;wreg free
  2460  0009D2  0100               	movlb	0	; () banked
  2461  0009D4  6FB5               	movwf	sendData@CS& (0+255),b
  2462                           
  2463                           ; BSR set to: 0
  2464                           ;CarCom.c: 60: SendArray[count] = CS;
  2465  0009D6  0E96               	movlw	low sendData@SendArray
  2466  0009D8  0100               	movlb	0	; () banked
  2467  0009DA  25B9               	addwf	sendData@count& (0+255),w,b
  2468  0009DC  6ED9               	movwf	fsr2l,c
  2469  0009DE  0E00               	movlw	high sendData@SendArray
  2470  0009E0  0100               	movlb	0	; () banked
  2471  0009E2  21BA               	addwfc	(sendData@count+1)& (0+255),w,b
  2472  0009E4  6EDA               	movwf	fsr2h,c
  2473  0009E6  C0B5  FFDF         	movff	sendData@CS,indf2
  2474                           
  2475                           ; BSR set to: 0
  2476                           ;CarCom.c: 61: count++;
  2477  0009EA  0100               	movlb	0	; () banked
  2478  0009EC  4BB9               	infsnz	sendData@count& (0+255),f,b
  2479  0009EE  2BBA               	incf	(sendData@count+1)& (0+255),f,b
  2480                           
  2481                           ; BSR set to: 0
  2482                           ;CarCom.c: 62: result = cobs_encode(COBSArray, sizeof(COBSArray), SendArray, count);
  2483  0009F0  0E78               	movlw	low sendData@COBSArray
  2484  0009F2  6E1D               	movwf	cobs_encode@dst_buf_ptr,c
  2485  0009F4  0E00               	movlw	high sendData@COBSArray
  2486  0009F6  6E1E               	movwf	cobs_encode@dst_buf_ptr+1,c
  2487  0009F8  0E00               	movlw	0
  2488  0009FA  6E20               	movwf	cobs_encode@dst_buf_len+1,c
  2489  0009FC  0E1E               	movlw	30
  2490  0009FE  6E1F               	movwf	cobs_encode@dst_buf_len,c
  2491  000A00  0E96               	movlw	low sendData@SendArray
  2492  000A02  6E21               	movwf	cobs_encode@src_ptr,c
  2493  000A04  0E00               	movlw	high sendData@SendArray
  2494  000A06  6E22               	movwf	cobs_encode@src_ptr+1,c
  2495  000A08  C0B9  F023         	movff	sendData@count,cobs_encode@src_len
  2496  000A0C  C0BA  F024         	movff	sendData@count+1,cobs_encode@src_len+1
  2497  000A10  EC62  F006         	call	_cobs_encode	;wreg free
  2498  000A14  C01D  F0B6         	movff	?_cobs_encode,sendData@result
  2499  000A18  C01E  F0B7         	movff	?_cobs_encode+1,sendData@result+1
  2500  000A1C  C01F  F0B8         	movff	?_cobs_encode+2,sendData@result+2
  2501                           
  2502                           ;CarCom.c: 63: SendArray[0] = whereToSend;
  2503  000A20  C0B4  F096         	movff	sendData@whereToSend,sendData@SendArray
  2504                           
  2505                           ;CarCom.c: 65: for(i = 1;i<result.out_len+1;i++){
  2506  000A24  0E01               	movlw	1
  2507  000A26  0100               	movlb	0	; () banked
  2508  000A28  6FBB               	movwf	sendData@i& (0+255),b
  2509  000A2A  D028               	goto	l3984
  2510  000A2C                     l3980:
  2511                           
  2512                           ; BSR set to: 0
  2513                           ;CarCom.c: 66: SendArray[i] = COBSArray[i-1];
  2514  000A2C  0EFF               	movlw	255
  2515  000A2E  0100               	movlb	0	; () banked
  2516  000A30  6F74               	movwf	??_sendData& (0+255),b
  2517  000A32  0EFF               	movlw	255
  2518  000A34  0100               	movlb	0	; () banked
  2519  000A36  6F75               	movwf	(??_sendData+1)& (0+255),b
  2520  000A38  0100               	movlb	0	; () banked
  2521  000A3A  51BB               	movf	sendData@i& (0+255),w,b
  2522  000A3C  0100               	movlb	0	; () banked
  2523  000A3E  6F76               	movwf	(??_sendData+2)& (0+255),b
  2524  000A40  6B77               	clrf	(??_sendData+3)& (0+255),b
  2525  000A42  0100               	movlb	0	; () banked
  2526  000A44  5174               	movf	??_sendData& (0+255),w,b
  2527  000A46  0100               	movlb	0	; () banked
  2528  000A48  2776               	addwf	(??_sendData+2)& (0+255),f,b
  2529  000A4A  0100               	movlb	0	; () banked
  2530  000A4C  5175               	movf	(??_sendData+1)& (0+255),w,b
  2531  000A4E  0100               	movlb	0	; () banked
  2532  000A50  2377               	addwfc	(??_sendData+3)& (0+255),f,b
  2533  000A52  0E78               	movlw	low sendData@COBSArray
  2534  000A54  0100               	movlb	0	; () banked
  2535  000A56  2576               	addwf	(??_sendData+2)& (0+255),w,b
  2536  000A58  6ED9               	movwf	fsr2l,c
  2537  000A5A  0E00               	movlw	high sendData@COBSArray
  2538  000A5C  0100               	movlb	0	; () banked
  2539  000A5E  2177               	addwfc	(??_sendData+3)& (0+255),w,b
  2540  000A60  6EDA               	movwf	fsr2h,c
  2541  000A62  0100               	movlb	0	; () banked
  2542  000A64  51BB               	movf	sendData@i& (0+255),w,b
  2543  000A66  0D01               	mullw	1
  2544  000A68  0E96               	movlw	low sendData@SendArray
  2545  000A6A  24F3               	addwf	prodl,w,c
  2546  000A6C  6EE1               	movwf	fsr1l,c
  2547  000A6E  0E00               	movlw	high sendData@SendArray
  2548  000A70  20F4               	addwfc	prodh,w,c
  2549  000A72  6EE2               	movwf	fsr1h,c
  2550  000A74  CFDF FFE7          	movff	indf2,indf1
  2551                           
  2552                           ; BSR set to: 0
  2553  000A78  0100               	movlb	0	; () banked
  2554  000A7A  2BBB               	incf	sendData@i& (0+255),f,b
  2555  000A7C                     l3984:
  2556                           
  2557                           ; BSR set to: 0
  2558  000A7C  0E01               	movlw	1
  2559  000A7E  0100               	movlb	0	; () banked
  2560  000A80  25B6               	addwf	sendData@result& (0+255),w,b
  2561  000A82  0100               	movlb	0	; () banked
  2562  000A84  6F74               	movwf	??_sendData& (0+255),b
  2563  000A86  0E00               	movlw	0
  2564  000A88  0100               	movlb	0	; () banked
  2565  000A8A  21B7               	addwfc	(sendData@result+1)& (0+255),w,b
  2566  000A8C  0100               	movlb	0	; () banked
  2567  000A8E  6F75               	movwf	(??_sendData+1)& (0+255),b
  2568  000A90  0100               	movlb	0	; () banked
  2569  000A92  51BB               	movf	sendData@i& (0+255),w,b
  2570  000A94  0100               	movlb	0	; () banked
  2571  000A96  6F76               	movwf	(??_sendData+2)& (0+255),b
  2572  000A98  6B77               	clrf	(??_sendData+3)& (0+255),b
  2573  000A9A  0100               	movlb	0	; () banked
  2574  000A9C  5174               	movf	??_sendData& (0+255),w,b
  2575  000A9E  0100               	movlb	0	; () banked
  2576  000AA0  5D76               	subwf	(??_sendData+2)& (0+255),w,b
  2577  000AA2  0100               	movlb	0	; () banked
  2578  000AA4  5175               	movf	(??_sendData+1)& (0+255),w,b
  2579  000AA6  0100               	movlb	0	; () banked
  2580  000AA8  5977               	subwfb	(??_sendData+3)& (0+255),w,b
  2581  000AAA  A0D8               	btfss	status,0,c
  2582  000AAC  D7BF               	goto	l3980
  2583                           
  2584                           ; BSR set to: 0
  2585                           ;CarCom.c: 67: }
  2586                           ;CarCom.c: 69: for(i = 0;i<result.out_len+2;i++){
  2587                           
  2588                           ; BSR set to: 0
  2589  000AAE  0E00               	movlw	0
  2590  000AB0  0100               	movlb	0	; () banked
  2591  000AB2  6FBB               	movwf	sendData@i& (0+255),b
  2592  000AB4  D00E               	goto	l3992
  2593  000AB6                     l3988:
  2594                           
  2595                           ; BSR set to: 0
  2596                           ;CarCom.c: 70: Send_put(SendArray[i]);
  2597  000AB6  0100               	movlb	0	; () banked
  2598  000AB8  51BB               	movf	sendData@i& (0+255),w,b
  2599  000ABA  0D01               	mullw	1
  2600  000ABC  0E96               	movlw	low sendData@SendArray
  2601  000ABE  24F3               	addwf	prodl,w,c
  2602  000AC0  6ED9               	movwf	fsr2l,c
  2603  000AC2  0E00               	movlw	high sendData@SendArray
  2604  000AC4  20F4               	addwfc	prodh,w,c
  2605  000AC6  6EDA               	movwf	fsr2h,c
  2606  000AC8  50DF               	movf	indf2,w,c
  2607  000ACA  ECFC  F00F         	call	_Send_put
  2608  000ACE  0100               	movlb	0	; () banked
  2609  000AD0  2BBB               	incf	sendData@i& (0+255),f,b
  2610  000AD2                     l3992:
  2611                           
  2612                           ; BSR set to: 0
  2613  000AD2  0E02               	movlw	2
  2614  000AD4  0100               	movlb	0	; () banked
  2615  000AD6  25B6               	addwf	sendData@result& (0+255),w,b
  2616  000AD8  0100               	movlb	0	; () banked
  2617  000ADA  6F74               	movwf	??_sendData& (0+255),b
  2618  000ADC  0E00               	movlw	0
  2619  000ADE  0100               	movlb	0	; () banked
  2620  000AE0  21B7               	addwfc	(sendData@result+1)& (0+255),w,b
  2621  000AE2  0100               	movlb	0	; () banked
  2622  000AE4  6F75               	movwf	(??_sendData+1)& (0+255),b
  2623  000AE6  0100               	movlb	0	; () banked
  2624  000AE8  51BB               	movf	sendData@i& (0+255),w,b
  2625  000AEA  0100               	movlb	0	; () banked
  2626  000AEC  6F76               	movwf	(??_sendData+2)& (0+255),b
  2627  000AEE  6B77               	clrf	(??_sendData+3)& (0+255),b
  2628  000AF0  0100               	movlb	0	; () banked
  2629  000AF2  5174               	movf	??_sendData& (0+255),w,b
  2630  000AF4  0100               	movlb	0	; () banked
  2631  000AF6  5D76               	subwf	(??_sendData+2)& (0+255),w,b
  2632  000AF8  0100               	movlb	0	; () banked
  2633  000AFA  5175               	movf	(??_sendData+1)& (0+255),w,b
  2634  000AFC  0100               	movlb	0	; () banked
  2635  000AFE  5977               	subwfb	(??_sendData+3)& (0+255),w,b
  2636  000B00  B0D8               	btfsc	status,0,c
  2637  000B02  0012               	return	
  2638  000B04  D7D8               	goto	l3988
  2639  000B06                     __end_of_sendData:
  2640                           	opt stack 0
  2641                           tblptru	equ	0xFF8
  2642                           tblptrh	equ	0xFF7
  2643                           tblptrl	equ	0xFF6
  2644                           tablat	equ	0xFF5
  2645                           prodh	equ	0xFF4
  2646                           prodl	equ	0xFF3
  2647                           intcon	equ	0xFF2
  2648                           postinc0	equ	0xFEE
  2649                           wreg	equ	0xFE8
  2650                           indf1	equ	0xFE7
  2651                           fsr1h	equ	0xFE2
  2652                           fsr1l	equ	0xFE1
  2653                           indf2	equ	0xFDF
  2654                           postinc2	equ	0xFDE
  2655                           postdec2	equ	0xFDD
  2656                           fsr2h	equ	0xFDA
  2657                           fsr2l	equ	0xFD9
  2658                           status	equ	0xFD8
  2659                           
  2660 ;; *************** function _cobs_encode *****************
  2661 ;; Defined at:
  2662 ;;		line 29 in file "COBS.c"
  2663 ;; Parameters:    Size  Location     Type
  2664 ;;  dst_buf_ptr     2   28[COMRAM] PTR unsigned char 
  2665 ;;		 -> sendData@COBSArray(30), 
  2666 ;;  dst_buf_len     2   30[COMRAM] unsigned int 
  2667 ;;  src_ptr         2   32[COMRAM] PTR const unsigned char 
  2668 ;;		 -> sendData@SendArray(30), 
  2669 ;;  src_len         2   34[COMRAM] unsigned int 
  2670 ;; Auto vars:     Size  Location     Type
  2671 ;;  result          3   10[BANK0 ] struct .
  2672 ;;  dst_write_pt    2    8[BANK0 ] PTR unsigned char 
  2673 ;;		 -> sendData@COBSArray(30), 
  2674 ;;  dst_code_wri    2    6[BANK0 ] PTR unsigned char 
  2675 ;;		 -> sendData@COBSArray(30), 
  2676 ;;  dst_buf_end_    2    3[BANK0 ] PTR unsigned char 
  2677 ;;		 -> sendData@COBSArray(30), 
  2678 ;;  src_end_ptr     2    0[BANK0 ] PTR const unsigned char 
  2679 ;;		 -> sendData@SendArray(30), 
  2680 ;;  search_len      1    5[BANK0 ] unsigned char 
  2681 ;;  src_byte        1    2[BANK0 ] unsigned char 
  2682 ;; Return value:  Size  Location     Type
  2683 ;;                  3   28[COMRAM] struct .
  2684 ;; Registers used:
  2685 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2686 ;; Tracked objects:
  2687 ;;		On entry : 0/0
  2688 ;;		On exit  : 0/0
  2689 ;;		Unchanged: 0/0
  2690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2691 ;;      Params:         8       0       0       0       0       0       0
  2692 ;;      Locals:         0      13       0       0       0       0       0
  2693 ;;      Temps:          2       0       0       0       0       0       0
  2694 ;;      Totals:        10      13       0       0       0       0       0
  2695 ;;Total ram usage:       23 bytes
  2696 ;; Hardware stack levels used:    1
  2697 ;; Hardware stack levels required when called:    6
  2698 ;; This function calls:
  2699 ;;		Nothing
  2700 ;; This function is called by:
  2701 ;;		_sendData
  2702 ;; This function uses a non-reentrant model
  2703 ;;
  2704                           
  2705                           	psect	text9
  2706  000CC4                     __ptext9:
  2707                           	opt stack 0
  2708  000CC4                     _cobs_encode:
  2709                           	opt stack 20
  2710                           
  2711                           ;COBS.c: 31: cobs_encode_result result = { 0, COBS_ENCODE_OK };
  2712                           
  2713                           ; BSR set to: 0
  2714                           ;incstack = 0
  2715  000CC4  C038  F06A         	movff	cobs_encode@F180,cobs_encode@result
  2716  000CC8  C039  F06B         	movff	cobs_encode@F180+1,cobs_encode@result+1
  2717  000CCC  C03A  F06C         	movff	cobs_encode@F180+2,cobs_encode@result+2
  2718                           
  2719                           ;COBS.c: 32: const uint8_t * src_end_ptr = src_ptr + src_len;
  2720  000CD0  5023               	movf	cobs_encode@src_len,w,c
  2721  000CD2  2421               	addwf	cobs_encode@src_ptr,w,c
  2722  000CD4  0100               	movlb	0	; () banked
  2723  000CD6  6F60               	movwf	cobs_encode@src_end_ptr& (0+255),b
  2724  000CD8  5024               	movf	cobs_encode@src_len+1,w,c
  2725  000CDA  2022               	addwfc	cobs_encode@src_ptr+1,w,c
  2726  000CDC  0100               	movlb	0	; () banked
  2727  000CDE  6F61               	movwf	(cobs_encode@src_end_ptr+1)& (0+255),b
  2728                           
  2729                           ;COBS.c: 33: uint8_t * dst_buf_end_ptr = dst_buf_ptr + dst_buf_len;
  2730  000CE0  501F               	movf	cobs_encode@dst_buf_len,w,c
  2731  000CE2  241D               	addwf	cobs_encode@dst_buf_ptr,w,c
  2732  000CE4  0100               	movlb	0	; () banked
  2733  000CE6  6F63               	movwf	cobs_encode@dst_buf_end_ptr& (0+255),b
  2734  000CE8  5020               	movf	cobs_encode@dst_buf_len+1,w,c
  2735  000CEA  201E               	addwfc	cobs_encode@dst_buf_ptr+1,w,c
  2736  000CEC  0100               	movlb	0	; () banked
  2737  000CEE  6F64               	movwf	(cobs_encode@dst_buf_end_ptr+1)& (0+255),b
  2738                           
  2739                           ;COBS.c: 34: uint8_t * dst_code_write_ptr = dst_buf_ptr;
  2740  000CF0  C01D  F066         	movff	cobs_encode@dst_buf_ptr,cobs_encode@dst_code_write_ptr
  2741  000CF4  C01E  F067         	movff	cobs_encode@dst_buf_ptr+1,cobs_encode@dst_code_write_ptr+1
  2742                           
  2743                           ;COBS.c: 35: uint8_t * dst_write_ptr = dst_code_write_ptr + 1;
  2744  000CF8  0E01               	movlw	1
  2745  000CFA  0100               	movlb	0	; () banked
  2746  000CFC  2566               	addwf	cobs_encode@dst_code_write_ptr& (0+255),w,b
  2747  000CFE  0100               	movlb	0	; () banked
  2748  000D00  6F68               	movwf	cobs_encode@dst_write_ptr& (0+255),b
  2749  000D02  0E00               	movlw	0
  2750  000D04  0100               	movlb	0	; () banked
  2751  000D06  2167               	addwfc	(cobs_encode@dst_code_write_ptr+1)& (0+255),w,b
  2752  000D08  0100               	movlb	0	; () banked
  2753  000D0A  6F69               	movwf	(cobs_encode@dst_write_ptr+1)& (0+255),b
  2754                           
  2755                           ; BSR set to: 0
  2756                           ;COBS.c: 36: uint8_t src_byte = 0;
  2757  000D0C  0E00               	movlw	0
  2758  000D0E  0100               	movlb	0	; () banked
  2759  000D10  6F62               	movwf	cobs_encode@src_byte& (0+255),b
  2760                           
  2761                           ; BSR set to: 0
  2762                           ;COBS.c: 37: uint8_t search_len = 1;
  2763  000D12  0E01               	movlw	1
  2764  000D14  0100               	movlb	0	; () banked
  2765  000D16  6F65               	movwf	cobs_encode@search_len& (0+255),b
  2766                           
  2767                           ;COBS.c: 41: if ((dst_buf_ptr == (0)) || (src_ptr == (0)))
  2768  000D18  501D               	movf	cobs_encode@dst_buf_ptr,w,c
  2769  000D1A  101E               	iorwf	cobs_encode@dst_buf_ptr+1,w,c
  2770  000D1C  B4D8               	btfsc	status,2,c
  2771  000D1E  D004               	goto	l3746
  2772                           
  2773                           ; BSR set to: 0
  2774  000D20  5021               	movf	cobs_encode@src_ptr,w,c
  2775  000D22  1022               	iorwf	cobs_encode@src_ptr+1,w,c
  2776  000D24  A4D8               	btfss	status,2,c
  2777  000D26  D00A               	goto	l3752
  2778  000D28                     l3746:
  2779                           
  2780                           ; BSR set to: 0
  2781                           ;COBS.c: 42: {
  2782                           ;COBS.c: 43: result.status = COBS_ENCODE_NULL_POINTER;
  2783  000D28  0E01               	movlw	1
  2784  000D2A  0100               	movlb	0	; () banked
  2785  000D2C  6F6C               	movwf	(cobs_encode@result+2)& (0+255),b
  2786                           
  2787                           ; BSR set to: 0
  2788                           ;COBS.c: 44: return result;
  2789  000D2E  C06A  F01D         	movff	cobs_encode@result,?_cobs_encode
  2790  000D32  C06B  F01E         	movff	cobs_encode@result+1,?_cobs_encode+1
  2791  000D36  C06C  F01F         	movff	cobs_encode@result+2,?_cobs_encode+2
  2792                           
  2793                           ; BSR set to: 0
  2794  000D3A  0012               	return	
  2795  000D3C                     l3752:
  2796                           
  2797                           ; BSR set to: 0
  2798                           ;COBS.c: 45: }
  2799                           ;COBS.c: 47: if (src_len != 0)
  2800  000D3C  5023               	movf	cobs_encode@src_len,w,c
  2801  000D3E  1024               	iorwf	cobs_encode@src_len+1,w,c
  2802  000D40  B4D8               	btfsc	status,2,c
  2803  000D42  D05C               	goto	l3796
  2804  000D44                     l3754:
  2805                           
  2806                           ; BSR set to: 0
  2807                           ;COBS.c: 51: {
  2808                           ;COBS.c: 53: if (dst_write_ptr >= dst_buf_end_ptr)
  2809  000D44  0100               	movlb	0	; () banked
  2810  000D46  5163               	movf	cobs_encode@dst_buf_end_ptr& (0+255),w,b
  2811  000D48  0100               	movlb	0	; () banked
  2812  000D4A  5D68               	subwf	cobs_encode@dst_write_ptr& (0+255),w,b
  2813  000D4C  0100               	movlb	0	; () banked
  2814  000D4E  5164               	movf	(cobs_encode@dst_buf_end_ptr+1)& (0+255),w,b
  2815  000D50  0100               	movlb	0	; () banked
  2816  000D52  5969               	subwfb	(cobs_encode@dst_write_ptr+1)& (0+255),w,b
  2817  000D54  A0D8               	btfss	status,0,c
  2818  000D56  D003               	goto	l3758
  2819                           
  2820                           ; BSR set to: 0
  2821                           ;COBS.c: 54: {
  2822                           ;COBS.c: 55: result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
  2823  000D58  0100               	movlb	0	; () banked
  2824  000D5A  836C               	bsf	(cobs_encode@result+2)& (0+255),1,b
  2825                           
  2826                           ;COBS.c: 56: break;
  2827  000D5C  D04F               	goto	l3796
  2828  000D5E                     l3758:
  2829                           
  2830                           ; BSR set to: 0
  2831                           ;COBS.c: 57: }
  2832                           ;COBS.c: 59: src_byte = *src_ptr++;
  2833  000D5E  C021  FFD9         	movff	cobs_encode@src_ptr,fsr2l
  2834  000D62  C022  FFDA         	movff	cobs_encode@src_ptr+1,fsr2h
  2835  000D66  50DF               	movf	indf2,w,c
  2836  000D68  0100               	movlb	0	; () banked
  2837  000D6A  6F62               	movwf	cobs_encode@src_byte& (0+255),b
  2838                           
  2839                           ; BSR set to: 0
  2840  000D6C  4A21               	infsnz	cobs_encode@src_ptr,f,c
  2841  000D6E  2A22               	incf	cobs_encode@src_ptr+1,f,c
  2842                           
  2843                           ; BSR set to: 0
  2844                           ;COBS.c: 60: if (src_byte == 0)
  2845  000D70  0100               	movlb	0	; () banked
  2846  000D72  5162               	movf	cobs_encode@src_byte& (0+255),w,b
  2847  000D74  0100               	movlb	0	; () banked
  2848  000D76  A4D8               	btfss	status,2,c
  2849  000D78  D019               	goto	l3776
  2850                           
  2851                           ; BSR set to: 0
  2852                           ;COBS.c: 61: {
  2853                           ;COBS.c: 63: *dst_code_write_ptr = search_len;
  2854  000D7A  C066  FFD9         	movff	cobs_encode@dst_code_write_ptr,fsr2l
  2855  000D7E  C067  FFDA         	movff	cobs_encode@dst_code_write_ptr+1,fsr2h
  2856  000D82  C065  FFDF         	movff	cobs_encode@search_len,indf2
  2857                           
  2858                           ; BSR set to: 0
  2859                           ;COBS.c: 64: dst_code_write_ptr = dst_write_ptr++;
  2860  000D86  C068  F066         	movff	cobs_encode@dst_write_ptr,cobs_encode@dst_code_write_ptr
  2861  000D8A  C069  F067         	movff	cobs_encode@dst_write_ptr+1,cobs_encode@dst_code_write_ptr+1
  2862                           
  2863                           ; BSR set to: 0
  2864  000D8E  0100               	movlb	0	; () banked
  2865  000D90  4B68               	infsnz	cobs_encode@dst_write_ptr& (0+255),f,b
  2866  000D92  2B69               	incf	(cobs_encode@dst_write_ptr+1)& (0+255),f,b
  2867                           
  2868                           ; BSR set to: 0
  2869                           ;COBS.c: 65: search_len = 1;
  2870  000D94  0E01               	movlw	1
  2871  000D96  0100               	movlb	0	; () banked
  2872  000D98  6F65               	movwf	cobs_encode@search_len& (0+255),b
  2873                           
  2874                           ; BSR set to: 0
  2875                           ;COBS.c: 66: if (src_ptr >= src_end_ptr)
  2876  000D9A  0100               	movlb	0	; () banked
  2877  000D9C  5160               	movf	cobs_encode@src_end_ptr& (0+255),w,b
  2878  000D9E  5C21               	subwf	cobs_encode@src_ptr,w,c
  2879  000DA0  0100               	movlb	0	; () banked
  2880  000DA2  5161               	movf	(cobs_encode@src_end_ptr+1)& (0+255),w,b
  2881  000DA4  5822               	subwfb	cobs_encode@src_ptr+1,w,c
  2882  000DA6  B0D8               	btfsc	status,0,c
  2883  000DA8  D029               	goto	l3796
  2884  000DAA  D7CC               	goto	l3754
  2885  000DAC                     l3776:
  2886                           
  2887                           ; BSR set to: 0
  2888                           ;COBS.c: 71: else
  2889                           ;COBS.c: 72: {
  2890                           ;COBS.c: 74: *dst_write_ptr++ = src_byte;
  2891  000DAC  C068  FFD9         	movff	cobs_encode@dst_write_ptr,fsr2l
  2892  000DB0  C069  FFDA         	movff	cobs_encode@dst_write_ptr+1,fsr2h
  2893  000DB4  C062  FFDF         	movff	cobs_encode@src_byte,indf2
  2894                           
  2895                           ; BSR set to: 0
  2896  000DB8  0100               	movlb	0	; () banked
  2897  000DBA  4B68               	infsnz	cobs_encode@dst_write_ptr& (0+255),f,b
  2898  000DBC  2B69               	incf	(cobs_encode@dst_write_ptr+1)& (0+255),f,b
  2899                           
  2900                           ; BSR set to: 0
  2901                           ;COBS.c: 75: search_len++;
  2902  000DBE  0100               	movlb	0	; () banked
  2903  000DC0  2B65               	incf	cobs_encode@search_len& (0+255),f,b
  2904                           
  2905                           ; BSR set to: 0
  2906                           ;COBS.c: 76: if (src_ptr >= src_end_ptr)
  2907  000DC2  0100               	movlb	0	; () banked
  2908  000DC4  5160               	movf	cobs_encode@src_end_ptr& (0+255),w,b
  2909  000DC6  5C21               	subwf	cobs_encode@src_ptr,w,c
  2910  000DC8  0100               	movlb	0	; () banked
  2911  000DCA  5161               	movf	(cobs_encode@src_end_ptr+1)& (0+255),w,b
  2912  000DCC  5822               	subwfb	cobs_encode@src_ptr+1,w,c
  2913  000DCE  B0D8               	btfsc	status,0,c
  2914  000DD0  D015               	goto	l3796
  2915                           
  2916                           ; BSR set to: 0
  2917                           ;COBS.c: 79: }
  2918                           ;COBS.c: 80: if (search_len == 0xFF)
  2919                           
  2920                           ; BSR set to: 0
  2921                           
  2922                           ; BSR set to: 0
  2923                           ;COBS.c: 77: {
  2924                           ;COBS.c: 78: break;
  2925  000DD2  0100               	movlb	0	; () banked
  2926  000DD4  2965               	incf	cobs_encode@search_len& (0+255),w,b
  2927  000DD6  A4D8               	btfss	status,2,c
  2928  000DD8  D7B5               	goto	l3754
  2929                           
  2930                           ; BSR set to: 0
  2931                           ;COBS.c: 81: {
  2932                           ;COBS.c: 84: *dst_code_write_ptr = search_len;
  2933  000DDA  C066  FFD9         	movff	cobs_encode@dst_code_write_ptr,fsr2l
  2934  000DDE  C067  FFDA         	movff	cobs_encode@dst_code_write_ptr+1,fsr2h
  2935  000DE2  C065  FFDF         	movff	cobs_encode@search_len,indf2
  2936                           
  2937                           ; BSR set to: 0
  2938                           ;COBS.c: 85: dst_code_write_ptr = dst_write_ptr++;
  2939  000DE6  C068  F066         	movff	cobs_encode@dst_write_ptr,cobs_encode@dst_code_write_ptr
  2940  000DEA  C069  F067         	movff	cobs_encode@dst_write_ptr+1,cobs_encode@dst_code_write_ptr+1
  2941                           
  2942                           ; BSR set to: 0
  2943  000DEE  0100               	movlb	0	; () banked
  2944  000DF0  4B68               	infsnz	cobs_encode@dst_write_ptr& (0+255),f,b
  2945  000DF2  2B69               	incf	(cobs_encode@dst_write_ptr+1)& (0+255),f,b
  2946                           
  2947                           ; BSR set to: 0
  2948                           ;COBS.c: 86: search_len = 1;
  2949  000DF4  0E01               	movlw	1
  2950  000DF6  0100               	movlb	0	; () banked
  2951  000DF8  6F65               	movwf	cobs_encode@search_len& (0+255),b
  2952                           
  2953                           ; BSR set to: 0
  2954                           ;COBS.c: 87: }
  2955                           ;COBS.c: 88: }
  2956                           ;COBS.c: 89: }
  2957                           
  2958                           ; BSR set to: 0
  2959  000DFA  D7A4               	goto	l3754
  2960  000DFC                     l3796:
  2961                           
  2962                           ; BSR set to: 0
  2963                           ;COBS.c: 90: }
  2964                           ;COBS.c: 96: if (dst_code_write_ptr >= dst_buf_end_ptr)
  2965  000DFC  0100               	movlb	0	; () banked
  2966  000DFE  5163               	movf	cobs_encode@dst_buf_end_ptr& (0+255),w,b
  2967  000E00  0100               	movlb	0	; () banked
  2968  000E02  5D66               	subwf	cobs_encode@dst_code_write_ptr& (0+255),w,b
  2969  000E04  0100               	movlb	0	; () banked
  2970  000E06  5164               	movf	(cobs_encode@dst_buf_end_ptr+1)& (0+255),w,b
  2971  000E08  0100               	movlb	0	; () banked
  2972  000E0A  5967               	subwfb	(cobs_encode@dst_code_write_ptr+1)& (0+255),w,b
  2973  000E0C  A0D8               	btfss	status,0,c
  2974  000E0E  D007               	goto	l3802
  2975                           
  2976                           ; BSR set to: 0
  2977                           ;COBS.c: 97: {
  2978                           ;COBS.c: 99: result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
  2979  000E10  0100               	movlb	0	; () banked
  2980  000E12  836C               	bsf	(cobs_encode@result+2)& (0+255),1,b
  2981                           
  2982                           ; BSR set to: 0
  2983                           ;COBS.c: 100: dst_write_ptr = dst_buf_end_ptr;
  2984  000E14  C063  F068         	movff	cobs_encode@dst_buf_end_ptr,cobs_encode@dst_write_ptr
  2985  000E18  C064  F069         	movff	cobs_encode@dst_buf_end_ptr+1,cobs_encode@dst_write_ptr+1
  2986                           
  2987                           ;COBS.c: 101: }
  2988  000E1C  D006               	goto	l3804
  2989  000E1E                     l3802:
  2990                           
  2991                           ; BSR set to: 0
  2992                           ;COBS.c: 102: else
  2993                           ;COBS.c: 103: {
  2994                           ;COBS.c: 105: *dst_code_write_ptr = search_len;
  2995  000E1E  C066  FFD9         	movff	cobs_encode@dst_code_write_ptr,fsr2l
  2996  000E22  C067  FFDA         	movff	cobs_encode@dst_code_write_ptr+1,fsr2h
  2997  000E26  C065  FFDF         	movff	cobs_encode@search_len,indf2
  2998  000E2A                     l3804:
  2999                           
  3000                           ; BSR set to: 0
  3001                           ;COBS.c: 106: }
  3002                           ;COBS.c: 109: result.out_len = dst_write_ptr - dst_buf_ptr;
  3003  000E2A  C01D  F025         	movff	cobs_encode@dst_buf_ptr,??_cobs_encode
  3004  000E2E  C01E  F026         	movff	cobs_encode@dst_buf_ptr+1,??_cobs_encode+1
  3005  000E32  1E25               	comf	??_cobs_encode,f,c
  3006  000E34  1E26               	comf	??_cobs_encode+1,f,c
  3007  000E36  4A25               	infsnz	??_cobs_encode,f,c
  3008  000E38  2A26               	incf	??_cobs_encode+1,f,c
  3009  000E3A  0100               	movlb	0	; () banked
  3010  000E3C  5168               	movf	cobs_encode@dst_write_ptr& (0+255),w,b
  3011  000E3E  2425               	addwf	??_cobs_encode,w,c
  3012  000E40  0100               	movlb	0	; () banked
  3013  000E42  6F6A               	movwf	cobs_encode@result& (0+255),b
  3014  000E44  0100               	movlb	0	; () banked
  3015  000E46  5169               	movf	(cobs_encode@dst_write_ptr+1)& (0+255),w,b
  3016  000E48  2026               	addwfc	??_cobs_encode+1,w,c
  3017  000E4A  0100               	movlb	0	; () banked
  3018  000E4C  6F6B               	movwf	(cobs_encode@result+1)& (0+255),b
  3019                           
  3020                           ; BSR set to: 0
  3021                           ;COBS.c: 111: return result;
  3022  000E4E  C06A  F01D         	movff	cobs_encode@result,?_cobs_encode
  3023  000E52  C06B  F01E         	movff	cobs_encode@result+1,?_cobs_encode+1
  3024  000E56  C06C  F01F         	movff	cobs_encode@result+2,?_cobs_encode+2
  3025  000E5A  0012               	return	
  3026  000E5C                     __end_of_cobs_encode:
  3027                           	opt stack 0
  3028                           tblptru	equ	0xFF8
  3029                           tblptrh	equ	0xFF7
  3030                           tblptrl	equ	0xFF6
  3031                           tablat	equ	0xFF5
  3032                           prodh	equ	0xFF4
  3033                           prodl	equ	0xFF3
  3034                           intcon	equ	0xFF2
  3035                           postinc0	equ	0xFEE
  3036                           wreg	equ	0xFE8
  3037                           indf1	equ	0xFE7
  3038                           fsr1h	equ	0xFE2
  3039                           fsr1l	equ	0xFE1
  3040                           indf2	equ	0xFDF
  3041                           postinc2	equ	0xFDE
  3042                           postdec2	equ	0xFDD
  3043                           fsr2h	equ	0xFDA
  3044                           fsr2l	equ	0xFD9
  3045                           status	equ	0xFD8
  3046                           
  3047 ;; *************** function _Send_put *****************
  3048 ;; Defined at:
  3049 ;;		line 129 in file "UART.c"
  3050 ;; Parameters:    Size  Location     Type
  3051 ;;  _data           1    wreg     unsigned char 
  3052 ;; Auto vars:     Size  Location     Type
  3053 ;;  _data           1   39[COMRAM] unsigned char 
  3054 ;; Return value:  Size  Location     Type
  3055 ;;                  1    wreg      void 
  3056 ;; Registers used:
  3057 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3058 ;; Tracked objects:
  3059 ;;		On entry : 0/0
  3060 ;;		On exit  : 0/0
  3061 ;;		Unchanged: 0/0
  3062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3063 ;;      Params:         0       0       0       0       0       0       0
  3064 ;;      Locals:         1       0       0       0       0       0       0
  3065 ;;      Temps:          0       0       0       0       0       0       0
  3066 ;;      Totals:         1       0       0       0       0       0       0
  3067 ;;Total ram usage:        1 bytes
  3068 ;; Hardware stack levels used:    1
  3069 ;; Hardware stack levels required when called:    8
  3070 ;; This function calls:
  3071 ;;		_UART_buff_get
  3072 ;;		_UART_buff_put
  3073 ;; This function is called by:
  3074 ;;		_sendData
  3075 ;;		_putch
  3076 ;; This function uses a non-reentrant model
  3077 ;;
  3078                           
  3079                           	psect	text10
  3080  001FF8                     __ptext10:
  3081                           	opt stack 0
  3082  001FF8                     _Send_put:
  3083                           	opt stack 18
  3084                           
  3085                           ; BSR set to: 0
  3086                           ;incstack = 0
  3087                           ;Send_put@_data stored from wreg
  3088  001FF8  6E28               	movwf	Send_put@_data,c
  3089                           
  3090                           ;UART.c: 130: UART_buff_put(&output_buffer, _data);
  3091  001FFA  0E00               	movlw	low _output_buffer
  3092  001FFC  6E23               	movwf	UART_buff_put@_this,c
  3093  001FFE  0E02               	movlw	high _output_buffer
  3094  002000  6E24               	movwf	UART_buff_put@_this+1,c
  3095  002002  C028  F025         	movff	Send_put@_data,UART_buff_put@c
  3096  002006  ECE1  F007         	call	_UART_buff_put	;wreg free
  3097                           
  3098                           ;UART.c: 131: if (Transmit_stall == 1) {
  3099  00200A  0442               	decf	_Transmit_stall,w,c
  3100  00200C  A4D8               	btfss	status,2,c
  3101  00200E  0012               	return	
  3102                           
  3103                           ;UART.c: 132: Transmit_stall = 0;
  3104  002010  0E00               	movlw	0
  3105  002012  6E42               	movwf	_Transmit_stall,c
  3106                           
  3107                           ;UART.c: 133: TXREG1 = UART_buff_get(&output_buffer);
  3108  002014  0E00               	movlw	low _output_buffer
  3109  002016  6E23               	movwf	UART_buff_get@_this,c
  3110  002018  0E02               	movlw	high _output_buffer
  3111  00201A  6E24               	movwf	UART_buff_get@_this+1,c
  3112  00201C  ECDC  F00B         	call	_UART_buff_get	;wreg free
  3113  002020  6EAD               	movwf	4013,c	;volatile
  3114                           
  3115                           ;UART.c: 134: PIE1bits.TX1IE = 1;
  3116  002022  889D               	bsf	3997,4,c	;volatile
  3117  002024  0012               	return	
  3118  002026                     __end_of_Send_put:
  3119                           	opt stack 0
  3120                           tblptru	equ	0xFF8
  3121                           tblptrh	equ	0xFF7
  3122                           tblptrl	equ	0xFF6
  3123                           tablat	equ	0xFF5
  3124                           prodh	equ	0xFF4
  3125                           prodl	equ	0xFF3
  3126                           intcon	equ	0xFF2
  3127                           postinc0	equ	0xFEE
  3128                           wreg	equ	0xFE8
  3129                           indf1	equ	0xFE7
  3130                           fsr1h	equ	0xFE2
  3131                           fsr1l	equ	0xFE1
  3132                           indf2	equ	0xFDF
  3133                           postinc2	equ	0xFDE
  3134                           postdec2	equ	0xFDD
  3135                           fsr2h	equ	0xFDA
  3136                           fsr2l	equ	0xFD9
  3137                           status	equ	0xFD8
  3138                           
  3139 ;; *************** function _UART_buff_put *****************
  3140 ;; Defined at:
  3141 ;;		line 67 in file "UART.c"
  3142 ;; Parameters:    Size  Location     Type
  3143 ;;  _this           2   34[COMRAM] PTR struct UART_ring_buf
  3144 ;;		 -> output_buffer(106), input_buffer(106), 
  3145 ;;  c               1   36[COMRAM] const unsigned char 
  3146 ;; Auto vars:     Size  Location     Type
  3147 ;;		None
  3148 ;; Return value:  Size  Location     Type
  3149 ;;                  1    wreg      void 
  3150 ;; Registers used:
  3151 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3152 ;; Tracked objects:
  3153 ;;		On entry : 0/0
  3154 ;;		On exit  : 0/0
  3155 ;;		Unchanged: 0/0
  3156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3157 ;;      Params:         3       0       0       0       0       0       0
  3158 ;;      Locals:         0       0       0       0       0       0       0
  3159 ;;      Temps:          2       0       0       0       0       0       0
  3160 ;;      Totals:         5       0       0       0       0       0       0
  3161 ;;Total ram usage:        5 bytes
  3162 ;; Hardware stack levels used:    1
  3163 ;; Hardware stack levels required when called:    7
  3164 ;; This function calls:
  3165 ;;		_UART_buff_modulo_inc
  3166 ;; This function is called by:
  3167 ;;		_Send_put
  3168 ;; This function uses a non-reentrant model
  3169 ;;
  3170                           
  3171                           	psect	text11
  3172  000FC2                     __ptext11:
  3173                           	opt stack 0
  3174  000FC2                     _UART_buff_put:
  3175                           	opt stack 18
  3176                           
  3177                           ;UART.c: 68: if (_this->count < 100) {
  3178                           
  3179                           ;incstack = 0
  3180  000FC2  EE20 F068          	lfsr	2,104
  3181  000FC6  5023               	movf	UART_buff_put@_this,w,c
  3182  000FC8  26D9               	addwf	fsr2l,f,c
  3183  000FCA  5024               	movf	UART_buff_put@_this+1,w,c
  3184  000FCC  22DA               	addwfc	fsr2h,f,c
  3185  000FCE  0E01               	movlw	1
  3186  000FD0  BEDB               	btfsc	plusw2,7,c
  3187  000FD2  D007               	goto	l3662
  3188  000FD4  0E01               	movlw	1
  3189  000FD6  50DB               	movf	plusw2,w,c
  3190  000FD8  E13A               	bnz	l3668
  3191  000FDA  0E64               	movlw	100
  3192  000FDC  5CDE               	subwf	postinc2,w,c
  3193  000FDE  B0D8               	btfsc	status,0,c
  3194  000FE0  D036               	goto	l3668
  3195  000FE2                     l3662:
  3196                           
  3197                           ;UART.c: 69: _this->buf[_this->head] = c;
  3198  000FE2  EE20 F064          	lfsr	2,100
  3199  000FE6  5023               	movf	UART_buff_put@_this,w,c
  3200  000FE8  26D9               	addwf	fsr2l,f,c
  3201  000FEA  5024               	movf	UART_buff_put@_this+1,w,c
  3202  000FEC  22DA               	addwfc	fsr2h,f,c
  3203  000FEE  CFDE F026          	movff	postinc2,??_UART_buff_put
  3204  000FF2  CFDD F027          	movff	postdec2,??_UART_buff_put+1
  3205  000FF6  5026               	movf	??_UART_buff_put,w,c
  3206  000FF8  2423               	addwf	UART_buff_put@_this,w,c
  3207  000FFA  6ED9               	movwf	fsr2l,c
  3208  000FFC  5027               	movf	??_UART_buff_put+1,w,c
  3209  000FFE  2024               	addwfc	UART_buff_put@_this+1,w,c
  3210  001000  6EDA               	movwf	fsr2h,c
  3211  001002  C025  FFDF         	movff	UART_buff_put@c,indf2
  3212                           
  3213                           ;UART.c: 70: _this->head = UART_buff_modulo_inc(_this->head, 100);
  3214  001006  EE20 F064          	lfsr	2,100
  3215  00100A  5023               	movf	UART_buff_put@_this,w,c
  3216  00100C  26D9               	addwf	fsr2l,f,c
  3217  00100E  5024               	movf	UART_buff_put@_this+1,w,c
  3218  001010  22DA               	addwfc	fsr2h,f,c
  3219  001012  CFDE F01D          	movff	postinc2,UART_buff_modulo_inc@value
  3220  001016  CFDD F01E          	movff	postdec2,UART_buff_modulo_inc@value+1
  3221  00101A  0E00               	movlw	0
  3222  00101C  6E20               	movwf	UART_buff_modulo_inc@modulus+1,c
  3223  00101E  0E64               	movlw	100
  3224  001020  6E1F               	movwf	UART_buff_modulo_inc@modulus,c
  3225  001022  EC29  F010         	call	_UART_buff_modulo_inc	;wreg free
  3226  001026  EE20 F064          	lfsr	2,100
  3227  00102A  5023               	movf	UART_buff_put@_this,w,c
  3228  00102C  26D9               	addwf	fsr2l,f,c
  3229  00102E  5024               	movf	UART_buff_put@_this+1,w,c
  3230  001030  22DA               	addwfc	fsr2h,f,c
  3231  001032  C01D  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3232  001036  C01E  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3233                           
  3234                           ;UART.c: 71: ++_this->count;
  3235  00103A  EE20 F068          	lfsr	2,104
  3236  00103E  5023               	movf	UART_buff_put@_this,w,c
  3237  001040  26D9               	addwf	fsr2l,f,c
  3238  001042  5024               	movf	UART_buff_put@_this+1,w,c
  3239  001044  22DA               	addwfc	fsr2h,f,c
  3240  001046  2ADE               	incf	postinc2,f,c
  3241  001048  0E00               	movlw	0
  3242  00104A  22DD               	addwfc	postdec2,f,c
  3243                           
  3244                           ;UART.c: 72: } else {
  3245  00104C  0012               	return	
  3246  00104E                     l3668:
  3247                           
  3248                           ;UART.c: 73: _this->buf[_this->head] = c;
  3249  00104E  EE20 F064          	lfsr	2,100
  3250  001052  5023               	movf	UART_buff_put@_this,w,c
  3251  001054  26D9               	addwf	fsr2l,f,c
  3252  001056  5024               	movf	UART_buff_put@_this+1,w,c
  3253  001058  22DA               	addwfc	fsr2h,f,c
  3254  00105A  CFDE F026          	movff	postinc2,??_UART_buff_put
  3255  00105E  CFDD F027          	movff	postdec2,??_UART_buff_put+1
  3256  001062  5026               	movf	??_UART_buff_put,w,c
  3257  001064  2423               	addwf	UART_buff_put@_this,w,c
  3258  001066  6ED9               	movwf	fsr2l,c
  3259  001068  5027               	movf	??_UART_buff_put+1,w,c
  3260  00106A  2024               	addwfc	UART_buff_put@_this+1,w,c
  3261  00106C  6EDA               	movwf	fsr2h,c
  3262  00106E  C025  FFDF         	movff	UART_buff_put@c,indf2
  3263                           
  3264                           ;UART.c: 74: _this->head = UART_buff_modulo_inc(_this->head, 100);
  3265  001072  EE20 F064          	lfsr	2,100
  3266  001076  5023               	movf	UART_buff_put@_this,w,c
  3267  001078  26D9               	addwf	fsr2l,f,c
  3268  00107A  5024               	movf	UART_buff_put@_this+1,w,c
  3269  00107C  22DA               	addwfc	fsr2h,f,c
  3270  00107E  CFDE F01D          	movff	postinc2,UART_buff_modulo_inc@value
  3271  001082  CFDD F01E          	movff	postdec2,UART_buff_modulo_inc@value+1
  3272  001086  0E00               	movlw	0
  3273  001088  6E20               	movwf	UART_buff_modulo_inc@modulus+1,c
  3274  00108A  0E64               	movlw	100
  3275  00108C  6E1F               	movwf	UART_buff_modulo_inc@modulus,c
  3276  00108E  EC29  F010         	call	_UART_buff_modulo_inc	;wreg free
  3277  001092  EE20 F064          	lfsr	2,100
  3278  001096  5023               	movf	UART_buff_put@_this,w,c
  3279  001098  26D9               	addwf	fsr2l,f,c
  3280  00109A  5024               	movf	UART_buff_put@_this+1,w,c
  3281  00109C  22DA               	addwfc	fsr2h,f,c
  3282  00109E  C01D  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3283  0010A2  C01E  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3284                           
  3285                           ;UART.c: 75: _this->tail = UART_buff_modulo_inc(_this->tail, 100);
  3286  0010A6  EE20 F066          	lfsr	2,102
  3287  0010AA  5023               	movf	UART_buff_put@_this,w,c
  3288  0010AC  26D9               	addwf	fsr2l,f,c
  3289  0010AE  5024               	movf	UART_buff_put@_this+1,w,c
  3290  0010B0  22DA               	addwfc	fsr2h,f,c
  3291  0010B2  CFDE F01D          	movff	postinc2,UART_buff_modulo_inc@value
  3292  0010B6  CFDD F01E          	movff	postdec2,UART_buff_modulo_inc@value+1
  3293  0010BA  0E00               	movlw	0
  3294  0010BC  6E20               	movwf	UART_buff_modulo_inc@modulus+1,c
  3295  0010BE  0E64               	movlw	100
  3296  0010C0  6E1F               	movwf	UART_buff_modulo_inc@modulus,c
  3297  0010C2  EC29  F010         	call	_UART_buff_modulo_inc	;wreg free
  3298  0010C6  EE20 F066          	lfsr	2,102
  3299  0010CA  5023               	movf	UART_buff_put@_this,w,c
  3300  0010CC  26D9               	addwf	fsr2l,f,c
  3301  0010CE  5024               	movf	UART_buff_put@_this+1,w,c
  3302  0010D0  22DA               	addwfc	fsr2h,f,c
  3303  0010D2  C01D  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3304  0010D6  C01E  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3305  0010DA  0012               	return	
  3306  0010DC                     __end_of_UART_buff_put:
  3307                           	opt stack 0
  3308                           tblptru	equ	0xFF8
  3309                           tblptrh	equ	0xFF7
  3310                           tblptrl	equ	0xFF6
  3311                           tablat	equ	0xFF5
  3312                           prodh	equ	0xFF4
  3313                           prodl	equ	0xFF3
  3314                           intcon	equ	0xFF2
  3315                           postinc0	equ	0xFEE
  3316                           wreg	equ	0xFE8
  3317                           indf1	equ	0xFE7
  3318                           fsr1h	equ	0xFE2
  3319                           fsr1l	equ	0xFE1
  3320                           indf2	equ	0xFDF
  3321                           postinc2	equ	0xFDE
  3322                           postdec2	equ	0xFDD
  3323                           plusw2	equ	0xFDB
  3324                           fsr2h	equ	0xFDA
  3325                           fsr2l	equ	0xFD9
  3326                           status	equ	0xFD8
  3327                           
  3328 ;; *************** function _UART_buff_get *****************
  3329 ;; Defined at:
  3330 ;;		line 80 in file "UART.c"
  3331 ;; Parameters:    Size  Location     Type
  3332 ;;  _this           2   34[COMRAM] PTR struct UART_ring_buf
  3333 ;;		 -> output_buffer(106), input_buffer(106), 
  3334 ;; Auto vars:     Size  Location     Type
  3335 ;;  c               1   38[COMRAM] unsigned char 
  3336 ;; Return value:  Size  Location     Type
  3337 ;;                  1    wreg      unsigned char 
  3338 ;; Registers used:
  3339 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3340 ;; Tracked objects:
  3341 ;;		On entry : 0/0
  3342 ;;		On exit  : 0/0
  3343 ;;		Unchanged: 0/0
  3344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3345 ;;      Params:         2       0       0       0       0       0       0
  3346 ;;      Locals:         1       0       0       0       0       0       0
  3347 ;;      Temps:          2       0       0       0       0       0       0
  3348 ;;      Totals:         5       0       0       0       0       0       0
  3349 ;;Total ram usage:        5 bytes
  3350 ;; Hardware stack levels used:    1
  3351 ;; Hardware stack levels required when called:    7
  3352 ;; This function calls:
  3353 ;;		_UART_buff_modulo_inc
  3354 ;; This function is called by:
  3355 ;;		_Receive_get
  3356 ;;		_Send_put
  3357 ;; This function uses a non-reentrant model
  3358 ;;
  3359                           
  3360                           	psect	text12
  3361  0017B8                     __ptext12:
  3362                           	opt stack 0
  3363  0017B8                     _UART_buff_get:
  3364                           	opt stack 20
  3365                           
  3366                           ;UART.c: 81: unsigned char c;
  3367                           ;UART.c: 82: if (_this->count > 0) {
  3368                           
  3369                           ;incstack = 0
  3370  0017B8  EE20 F068          	lfsr	2,104
  3371  0017BC  5023               	movf	UART_buff_get@_this,w,c
  3372  0017BE  26D9               	addwf	fsr2l,f,c
  3373  0017C0  5024               	movf	UART_buff_get@_this+1,w,c
  3374  0017C2  22DA               	addwfc	fsr2h,f,c
  3375  0017C4  0E01               	movlw	1
  3376  0017C6  BEDB               	btfsc	plusw2,7,c
  3377  0017C8  D03C               	goto	l3682
  3378  0017CA  0E01               	movlw	1
  3379  0017CC  50DB               	movf	plusw2,w,c
  3380  0017CE  E103               	bnz	u2230
  3381  0017D0  04DE               	decf	postinc2,w,c
  3382  0017D2  A0D8               	btfss	status,0,c
  3383  0017D4  D036               	goto	l3682
  3384  0017D6                     u2230:
  3385                           
  3386                           ;UART.c: 83: c = _this->buf[_this->tail];
  3387  0017D6  EE20 F066          	lfsr	2,102
  3388  0017DA  5023               	movf	UART_buff_get@_this,w,c
  3389  0017DC  26D9               	addwf	fsr2l,f,c
  3390  0017DE  5024               	movf	UART_buff_get@_this+1,w,c
  3391  0017E0  22DA               	addwfc	fsr2h,f,c
  3392  0017E2  CFDE F025          	movff	postinc2,??_UART_buff_get
  3393  0017E6  CFDD F026          	movff	postdec2,??_UART_buff_get+1
  3394  0017EA  5025               	movf	??_UART_buff_get,w,c
  3395  0017EC  2423               	addwf	UART_buff_get@_this,w,c
  3396  0017EE  6ED9               	movwf	fsr2l,c
  3397  0017F0  5026               	movf	??_UART_buff_get+1,w,c
  3398  0017F2  2024               	addwfc	UART_buff_get@_this+1,w,c
  3399  0017F4  6EDA               	movwf	fsr2h,c
  3400  0017F6  50DF               	movf	indf2,w,c
  3401  0017F8  6E27               	movwf	UART_buff_get@c,c
  3402                           
  3403                           ;UART.c: 84: _this->tail = UART_buff_modulo_inc(_this->tail, 100);
  3404  0017FA  EE20 F066          	lfsr	2,102
  3405  0017FE  5023               	movf	UART_buff_get@_this,w,c
  3406  001800  26D9               	addwf	fsr2l,f,c
  3407  001802  5024               	movf	UART_buff_get@_this+1,w,c
  3408  001804  22DA               	addwfc	fsr2h,f,c
  3409  001806  CFDE F01D          	movff	postinc2,UART_buff_modulo_inc@value
  3410  00180A  CFDD F01E          	movff	postdec2,UART_buff_modulo_inc@value+1
  3411  00180E  0E00               	movlw	0
  3412  001810  6E20               	movwf	UART_buff_modulo_inc@modulus+1,c
  3413  001812  0E64               	movlw	100
  3414  001814  6E1F               	movwf	UART_buff_modulo_inc@modulus,c
  3415  001816  EC29  F010         	call	_UART_buff_modulo_inc	;wreg free
  3416  00181A  EE20 F066          	lfsr	2,102
  3417  00181E  5023               	movf	UART_buff_get@_this,w,c
  3418  001820  26D9               	addwf	fsr2l,f,c
  3419  001822  5024               	movf	UART_buff_get@_this+1,w,c
  3420  001824  22DA               	addwfc	fsr2h,f,c
  3421  001826  C01D  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3422  00182A  C01E  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3423                           
  3424                           ;UART.c: 85: --_this->count;
  3425  00182E  EE20 F068          	lfsr	2,104
  3426  001832  5023               	movf	UART_buff_get@_this,w,c
  3427  001834  26D9               	addwf	fsr2l,f,c
  3428  001836  5024               	movf	UART_buff_get@_this+1,w,c
  3429  001838  22DA               	addwfc	fsr2h,f,c
  3430  00183A  06DE               	decf	postinc2,f,c
  3431  00183C  0E00               	movlw	0
  3432  00183E  5ADD               	subwfb	postdec2,f,c
  3433                           
  3434                           ;UART.c: 86: } else {
  3435  001840  D002               	goto	l605
  3436  001842                     l3682:
  3437                           
  3438                           ;UART.c: 87: c = 0;
  3439  001842  0E00               	movlw	0
  3440  001844  6E27               	movwf	UART_buff_get@c,c
  3441  001846                     l605:
  3442                           
  3443                           ;UART.c: 88: }
  3444                           ;UART.c: 89: return (c);
  3445  001846  5027               	movf	UART_buff_get@c,w,c
  3446  001848  0012               	return	
  3447  00184A                     __end_of_UART_buff_get:
  3448                           	opt stack 0
  3449                           tblptru	equ	0xFF8
  3450                           tblptrh	equ	0xFF7
  3451                           tblptrl	equ	0xFF6
  3452                           tablat	equ	0xFF5
  3453                           prodh	equ	0xFF4
  3454                           prodl	equ	0xFF3
  3455                           intcon	equ	0xFF2
  3456                           postinc0	equ	0xFEE
  3457                           wreg	equ	0xFE8
  3458                           indf1	equ	0xFE7
  3459                           fsr1h	equ	0xFE2
  3460                           fsr1l	equ	0xFE1
  3461                           indf2	equ	0xFDF
  3462                           postinc2	equ	0xFDE
  3463                           postdec2	equ	0xFDD
  3464                           plusw2	equ	0xFDB
  3465                           fsr2h	equ	0xFDA
  3466                           fsr2l	equ	0xFD9
  3467                           status	equ	0xFD8
  3468                           
  3469 ;; *************** function _UART_buff_modulo_inc *****************
  3470 ;; Defined at:
  3471 ;;		line 105 in file "UART.c"
  3472 ;; Parameters:    Size  Location     Type
  3473 ;;  value           2   28[COMRAM] const unsigned int 
  3474 ;;  modulus         2   30[COMRAM] const unsigned int 
  3475 ;; Auto vars:     Size  Location     Type
  3476 ;;  my_value        2   32[COMRAM] unsigned int 
  3477 ;; Return value:  Size  Location     Type
  3478 ;;                  2   28[COMRAM] unsigned int 
  3479 ;; Registers used:
  3480 ;;		wreg, status,2, status,0
  3481 ;; Tracked objects:
  3482 ;;		On entry : 0/0
  3483 ;;		On exit  : 0/0
  3484 ;;		Unchanged: 0/0
  3485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3486 ;;      Params:         4       0       0       0       0       0       0
  3487 ;;      Locals:         2       0       0       0       0       0       0
  3488 ;;      Temps:          0       0       0       0       0       0       0
  3489 ;;      Totals:         6       0       0       0       0       0       0
  3490 ;;Total ram usage:        6 bytes
  3491 ;; Hardware stack levels used:    1
  3492 ;; Hardware stack levels required when called:    6
  3493 ;; This function calls:
  3494 ;;		Nothing
  3495 ;; This function is called by:
  3496 ;;		_UART_buff_put
  3497 ;;		_UART_buff_get
  3498 ;; This function uses a non-reentrant model
  3499 ;;
  3500                           
  3501                           	psect	text13
  3502  002052                     __ptext13:
  3503                           	opt stack 0
  3504  002052                     _UART_buff_modulo_inc:
  3505                           	opt stack 20
  3506                           
  3507                           ;UART.c: 106: unsigned int my_value = value + 1;
  3508                           
  3509                           ;incstack = 0
  3510  002052  0E01               	movlw	1
  3511  002054  241D               	addwf	UART_buff_modulo_inc@value,w,c
  3512  002056  6E21               	movwf	UART_buff_modulo_inc@my_value,c
  3513  002058  0E00               	movlw	0
  3514  00205A  201E               	addwfc	UART_buff_modulo_inc@value+1,w,c
  3515  00205C  6E22               	movwf	UART_buff_modulo_inc@my_value+1,c
  3516                           
  3517                           ;UART.c: 107: if (my_value >= modulus) {
  3518  00205E  501F               	movf	UART_buff_modulo_inc@modulus,w,c
  3519  002060  5C21               	subwf	UART_buff_modulo_inc@my_value,w,c
  3520  002062  5020               	movf	UART_buff_modulo_inc@modulus+1,w,c
  3521  002064  5822               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  3522  002066  A0D8               	btfss	status,0,c
  3523  002068  D004               	goto	l3656
  3524                           
  3525                           ;UART.c: 108: my_value = 0;
  3526  00206A  0E00               	movlw	0
  3527  00206C  6E22               	movwf	UART_buff_modulo_inc@my_value+1,c
  3528  00206E  0E00               	movlw	0
  3529  002070  6E21               	movwf	UART_buff_modulo_inc@my_value,c
  3530  002072                     l3656:
  3531                           
  3532                           ;UART.c: 109: }
  3533                           ;UART.c: 110: return (my_value);
  3534  002072  C021  F01D         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  3535  002076  C022  F01E         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  3536  00207A  0012               	return	
  3537  00207C                     __end_of_UART_buff_modulo_inc:
  3538                           	opt stack 0
  3539                           tblptru	equ	0xFF8
  3540                           tblptrh	equ	0xFF7
  3541                           tblptrl	equ	0xFF6
  3542                           tablat	equ	0xFF5
  3543                           prodh	equ	0xFF4
  3544                           prodl	equ	0xFF3
  3545                           intcon	equ	0xFF2
  3546                           postinc0	equ	0xFEE
  3547                           wreg	equ	0xFE8
  3548                           indf1	equ	0xFE7
  3549                           fsr1h	equ	0xFE2
  3550                           fsr1l	equ	0xFE1
  3551                           indf2	equ	0xFDF
  3552                           postinc2	equ	0xFDE
  3553                           postdec2	equ	0xFDD
  3554                           plusw2	equ	0xFDB
  3555                           fsr2h	equ	0xFDA
  3556                           fsr2l	equ	0xFD9
  3557                           status	equ	0xFD8
  3558                           
  3559 ;; *************** function _CRC8 *****************
  3560 ;; Defined at:
  3561 ;;		line 21 in file "CarCom.c"
  3562 ;; Parameters:    Size  Location     Type
  3563 ;;  data            2   28[COMRAM] PTR const unsigned char 
  3564 ;;		 -> ProcessArray(30), sendData@SendArray(30), 
  3565 ;;  len             1   30[COMRAM] unsigned char 
  3566 ;; Auto vars:     Size  Location     Type
  3567 ;;  sum             1   31[COMRAM] unsigned char 
  3568 ;;  tempI           1   33[COMRAM] unsigned char 
  3569 ;;  extract         1   32[COMRAM] unsigned char 
  3570 ;;  crc             1   34[COMRAM] unsigned char 
  3571 ;; Return value:  Size  Location     Type
  3572 ;;                  1    wreg      unsigned char 
  3573 ;; Registers used:
  3574 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3575 ;; Tracked objects:
  3576 ;;		On entry : 0/0
  3577 ;;		On exit  : 0/0
  3578 ;;		Unchanged: 0/0
  3579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3580 ;;      Params:         3       0       0       0       0       0       0
  3581 ;;      Locals:         4       0       0       0       0       0       0
  3582 ;;      Temps:          0       0       0       0       0       0       0
  3583 ;;      Totals:         7       0       0       0       0       0       0
  3584 ;;Total ram usage:        7 bytes
  3585 ;; Hardware stack levels used:    1
  3586 ;; Hardware stack levels required when called:    6
  3587 ;; This function calls:
  3588 ;;		Nothing
  3589 ;; This function is called by:
  3590 ;;		_sendData
  3591 ;;		_receiveData
  3592 ;; This function uses a non-reentrant model
  3593 ;;
  3594                           
  3595                           	psect	text14
  3596  001D94                     __ptext14:
  3597                           	opt stack 0
  3598  001D94                     _CRC8:
  3599                           	opt stack 20
  3600                           
  3601                           ;CarCom.c: 22: unsigned char crc = 0x00;
  3602                           
  3603                           ;incstack = 0
  3604  001D94  0E00               	movlw	0
  3605  001D96  6E23               	movwf	CRC8@crc,c
  3606                           
  3607                           ;CarCom.c: 23: while (len--) {
  3608  001D98  D01C               	goto	l3730
  3609  001D9A                     l3714:
  3610                           
  3611                           ;CarCom.c: 24: unsigned char extract = *data++;
  3612  001D9A  C01D  FFD9         	movff	CRC8@data,fsr2l
  3613  001D9E  C01E  FFDA         	movff	CRC8@data+1,fsr2h
  3614  001DA2  50DF               	movf	indf2,w,c
  3615  001DA4  6E21               	movwf	CRC8@extract,c
  3616  001DA6  4A1D               	infsnz	CRC8@data,f,c
  3617  001DA8  2A1E               	incf	CRC8@data+1,f,c
  3618                           
  3619                           ;CarCom.c: 25: unsigned char tempI;
  3620                           ;CarCom.c: 26: for (tempI = 8; tempI; tempI--) {
  3621  001DAA  0E08               	movlw	8
  3622  001DAC  6E22               	movwf	CRC8@tempI,c
  3623  001DAE  D00E               	goto	l3728
  3624  001DB0                     l3720:
  3625                           
  3626                           ;CarCom.c: 27: unsigned char sum = (crc ^ extract) & 0x01;
  3627  001DB0  5023               	movf	CRC8@crc,w,c
  3628  001DB2  1821               	xorwf	CRC8@extract,w,c
  3629  001DB4  0B01               	andlw	1
  3630  001DB6  6E20               	movwf	CRC8@sum,c
  3631                           
  3632                           ;CarCom.c: 28: crc >>= 1;
  3633  001DB8  90D8               	bcf	status,0,c
  3634  001DBA  3223               	rrcf	CRC8@crc,f,c
  3635                           
  3636                           ;CarCom.c: 29: if (sum) {
  3637  001DBC  5020               	movf	CRC8@sum,w,c
  3638  001DBE  B4D8               	btfsc	status,2,c
  3639  001DC0  D002               	goto	l768
  3640                           
  3641                           ;CarCom.c: 30: crc ^= 0x8C;
  3642  001DC2  0E8C               	movlw	140
  3643  001DC4  1A23               	xorwf	CRC8@crc,f,c
  3644  001DC6                     l768:
  3645                           
  3646                           ;CarCom.c: 31: }
  3647                           ;CarCom.c: 32: extract >>= 1;
  3648  001DC6  90D8               	bcf	status,0,c
  3649  001DC8  3221               	rrcf	CRC8@extract,f,c
  3650  001DCA  0622               	decf	CRC8@tempI,f,c
  3651  001DCC                     l3728:
  3652  001DCC  5022               	movf	CRC8@tempI,w,c
  3653  001DCE  A4D8               	btfss	status,2,c
  3654  001DD0  D7EF               	goto	l3720
  3655  001DD2                     l3730:
  3656  001DD2  061F               	decf	CRC8@len,f,c
  3657  001DD4  281F               	incf	CRC8@len,w,c
  3658  001DD6  A4D8               	btfss	status,2,c
  3659  001DD8  D7E0               	goto	l3714
  3660                           
  3661                           ;CarCom.c: 33: }
  3662                           ;CarCom.c: 34: }
  3663                           ;CarCom.c: 35: return crc;
  3664  001DDA  5023               	movf	CRC8@crc,w,c
  3665  001DDC  0012               	return	
  3666  001DDE                     __end_of_CRC8:
  3667                           	opt stack 0
  3668                           tblptru	equ	0xFF8
  3669                           tblptrh	equ	0xFF7
  3670                           tblptrl	equ	0xFF6
  3671                           tablat	equ	0xFF5
  3672                           prodh	equ	0xFF4
  3673                           prodl	equ	0xFF3
  3674                           intcon	equ	0xFF2
  3675                           postinc0	equ	0xFEE
  3676                           wreg	equ	0xFE8
  3677                           indf1	equ	0xFE7
  3678                           fsr1h	equ	0xFE2
  3679                           fsr1l	equ	0xFE1
  3680                           indf2	equ	0xFDF
  3681                           postinc2	equ	0xFDE
  3682                           postdec2	equ	0xFDD
  3683                           plusw2	equ	0xFDB
  3684                           fsr2h	equ	0xFDA
  3685                           fsr2l	equ	0xFD9
  3686                           status	equ	0xFD8
  3687                           
  3688 ;; *************** function _SetDataDict *****************
  3689 ;; Defined at:
  3690 ;;		line 32 in file "CarDataDictionary.c"
  3691 ;; Parameters:    Size  Location     Type
  3692 ;;  DataTable       1    wreg     unsigned char 
  3693 ;;  DataTableInd    1   28[COMRAM] unsigned char 
  3694 ;;  DataArray       2   29[COMRAM] PTR unsigned char 
  3695 ;;		 -> ComController@DataRecived(4), updateComms@DataGet(2), 
  3696 ;;  numbofbytes     1   31[COMRAM] unsigned char 
  3697 ;; Auto vars:     Size  Location     Type
  3698 ;;  DataTable       1   33[COMRAM] unsigned char 
  3699 ;;  ReturnCounte    1   35[COMRAM] unsigned char 
  3700 ;;  DataCount       1   34[COMRAM] unsigned char 
  3701 ;;  Error           1   32[COMRAM] unsigned char 
  3702 ;; Return value:  Size  Location     Type
  3703 ;;                  1    wreg      unsigned char 
  3704 ;; Registers used:
  3705 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3706 ;; Tracked objects:
  3707 ;;		On entry : 0/0
  3708 ;;		On exit  : 0/0
  3709 ;;		Unchanged: 0/0
  3710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3711 ;;      Params:         4       0       0       0       0       0       0
  3712 ;;      Locals:         4       0       0       0       0       0       0
  3713 ;;      Temps:          0       0       0       0       0       0       0
  3714 ;;      Totals:         8       0       0       0       0       0       0
  3715 ;;Total ram usage:        8 bytes
  3716 ;; Hardware stack levels used:    1
  3717 ;; Hardware stack levels required when called:    6
  3718 ;; This function calls:
  3719 ;;		Nothing
  3720 ;; This function is called by:
  3721 ;;		_updateComms
  3722 ;;		_ComController
  3723 ;; This function uses a non-reentrant model
  3724 ;;
  3725                           
  3726                           	psect	text15
  3727  001688                     __ptext15:
  3728                           	opt stack 0
  3729  001688                     _SetDataDict:
  3730                           	opt stack 21
  3731                           
  3732                           ;incstack = 0
  3733                           ;SetDataDict@DataTable stored from wreg
  3734  001688  6E22               	movwf	SetDataDict@DataTable,c
  3735                           
  3736                           ;CarDataDictionary.c: 33: unsigned char Error = 0;
  3737  00168A  0E00               	movlw	0
  3738  00168C  6E21               	movwf	SetDataDict@Error,c
  3739                           
  3740                           ;CarDataDictionary.c: 34: unsigned char DataCount = 0;
  3741  00168E  0E00               	movlw	0
  3742  001690  6E23               	movwf	SetDataDict@DataCount,c
  3743                           
  3744                           ;CarDataDictionary.c: 35: unsigned char ReturnCounter = 0;
  3745  001692  0E00               	movlw	0
  3746  001694  6E24               	movwf	SetDataDict@ReturnCounter,c
  3747                           
  3748                           ;CarDataDictionary.c: 36: switch(DataTable){
  3749  001696  D03C               	goto	l3858
  3750  001698                     l3838:
  3751                           
  3752                           ;CarDataDictionary.c: 38: DataCount = DataTableIndex + numbofbytes;
  3753  001698  501D               	movf	SetDataDict@DataTableIndex,w,c
  3754  00169A  2420               	addwf	SetDataDict@numbofbytes,w,c
  3755  00169C  6E23               	movwf	SetDataDict@DataCount,c
  3756  00169E  D014               	goto	l3846
  3757  0016A0                     l3840:
  3758                           
  3759                           ;CarDataDictionary.c: 40: DataTableArrayOne[DataTableIndex] = DataArray[ReturnCounter];
  3760  0016A0  5024               	movf	SetDataDict@ReturnCounter,w,c
  3761  0016A2  0D01               	mullw	1
  3762  0016A4  50F3               	movf	prodl,w,c
  3763  0016A6  241E               	addwf	SetDataDict@DataArray,w,c
  3764  0016A8  6ED9               	movwf	fsr2l,c
  3765  0016AA  50F4               	movf	prodh,w,c
  3766  0016AC  201F               	addwfc	SetDataDict@DataArray+1,w,c
  3767  0016AE  6EDA               	movwf	fsr2h,c
  3768  0016B0  501D               	movf	SetDataDict@DataTableIndex,w,c
  3769  0016B2  0D01               	mullw	1
  3770  0016B4  0EF4               	movlw	low _DataTableArrayOne
  3771  0016B6  24F3               	addwf	prodl,w,c
  3772  0016B8  6EE1               	movwf	fsr1l,c
  3773  0016BA  0E00               	movlw	high _DataTableArrayOne
  3774  0016BC  20F4               	addwfc	prodh,w,c
  3775  0016BE  6EE2               	movwf	fsr1h,c
  3776  0016C0  CFDF FFE7          	movff	indf2,indf1
  3777                           
  3778                           ;CarDataDictionary.c: 41: ReturnCounter++;
  3779  0016C4  2A24               	incf	SetDataDict@ReturnCounter,f,c
  3780  0016C6  2A1D               	incf	SetDataDict@DataTableIndex,f,c
  3781  0016C8                     l3846:
  3782  0016C8  5023               	movf	SetDataDict@DataCount,w,c
  3783  0016CA  5C1D               	subwf	SetDataDict@DataTableIndex,w,c
  3784  0016CC  B0D8               	btfsc	status,0,c
  3785  0016CE  0012               	return	
  3786  0016D0  D7E7               	goto	l3840
  3787  0016D2                     l3848:
  3788                           
  3789                           ;CarDataDictionary.c: 45: DataCount = DataTableIndex + numbofbytes;
  3790  0016D2  501D               	movf	SetDataDict@DataTableIndex,w,c
  3791  0016D4  2420               	addwf	SetDataDict@numbofbytes,w,c
  3792  0016D6  6E23               	movwf	SetDataDict@DataCount,c
  3793  0016D8  D014               	goto	l3856
  3794  0016DA                     l3850:
  3795                           
  3796                           ;CarDataDictionary.c: 47: DataTableArrayFour[DataTableIndex] = DataArray[ReturnCounter];
  3797  0016DA  5024               	movf	SetDataDict@ReturnCounter,w,c
  3798  0016DC  0D01               	mullw	1
  3799  0016DE  50F3               	movf	prodl,w,c
  3800  0016E0  241E               	addwf	SetDataDict@DataArray,w,c
  3801  0016E2  6ED9               	movwf	fsr2l,c
  3802  0016E4  50F4               	movf	prodh,w,c
  3803  0016E6  201F               	addwfc	SetDataDict@DataArray+1,w,c
  3804  0016E8  6EDA               	movwf	fsr2h,c
  3805  0016EA  501D               	movf	SetDataDict@DataTableIndex,w,c
  3806  0016EC  0D01               	mullw	1
  3807  0016EE  0E32               	movlw	low _DataTableArrayFour
  3808  0016F0  24F3               	addwf	prodl,w,c
  3809  0016F2  6EE1               	movwf	fsr1l,c
  3810  0016F4  0E00               	movlw	high _DataTableArrayFour
  3811  0016F6  20F4               	addwfc	prodh,w,c
  3812  0016F8  6EE2               	movwf	fsr1h,c
  3813  0016FA  CFDF FFE7          	movff	indf2,indf1
  3814                           
  3815                           ;CarDataDictionary.c: 48: ReturnCounter++;
  3816  0016FE  2A24               	incf	SetDataDict@ReturnCounter,f,c
  3817  001700  2A1D               	incf	SetDataDict@DataTableIndex,f,c
  3818  001702                     l3856:
  3819  001702  5023               	movf	SetDataDict@DataCount,w,c
  3820  001704  5C1D               	subwf	SetDataDict@DataTableIndex,w,c
  3821  001706  B0D8               	btfsc	status,0,c
  3822  001708  0012               	return	
  3823  00170A  D7E7               	goto	l3850
  3824  00170C                     l893:
  3825                           
  3826                           ;CarDataDictionary.c: 52: Error = -1;
  3827  00170C  6821               	setf	SetDataDict@Error,c
  3828                           
  3829                           ;CarDataDictionary.c: 53: }
  3830  00170E  0012               	return	
  3831  001710                     l3858:
  3832  001710  5022               	movf	SetDataDict@DataTable,w,c
  3833                           
  3834                           ; Switch size 1, requested type "space"
  3835                           ; Number of cases is 2, Range of values is 0 to 4
  3836                           ; switch strategies available:
  3837                           ; Name         Instructions Cycles
  3838                           ; simple_byte            7     4 (average)
  3839                           ;	Chosen strategy is simple_byte
  3840  001712  0A00               	xorlw	0	; case 0
  3841  001714  B4D8               	btfsc	status,2,c
  3842  001716  D7C0               	goto	l3838
  3843  001718  0A04               	xorlw	4	; case 4
  3844  00171A  B4D8               	btfsc	status,2,c
  3845  00171C  D7DA               	goto	l3848
  3846  00171E  D7F6               	goto	l893
  3847  001720                     __end_of_SetDataDict:
  3848                           	opt stack 0
  3849                           tblptru	equ	0xFF8
  3850                           tblptrh	equ	0xFF7
  3851                           tblptrl	equ	0xFF6
  3852                           tablat	equ	0xFF5
  3853                           prodh	equ	0xFF4
  3854                           prodl	equ	0xFF3
  3855                           intcon	equ	0xFF2
  3856                           postinc0	equ	0xFEE
  3857                           wreg	equ	0xFE8
  3858                           indf1	equ	0xFE7
  3859                           fsr1h	equ	0xFE2
  3860                           fsr1l	equ	0xFE1
  3861                           indf2	equ	0xFDF
  3862                           postinc2	equ	0xFDE
  3863                           postdec2	equ	0xFDD
  3864                           plusw2	equ	0xFDB
  3865                           fsr2h	equ	0xFDA
  3866                           fsr2l	equ	0xFD9
  3867                           status	equ	0xFD8
  3868                           
  3869 ;; *************** function _GetDataDict *****************
  3870 ;; Defined at:
  3871 ;;		line 7 in file "CarDataDictionary.c"
  3872 ;; Parameters:    Size  Location     Type
  3873 ;;  DataTable       1    wreg     unsigned char 
  3874 ;;  DataTableInd    1   28[COMRAM] unsigned char 
  3875 ;;  DataArray       2   29[COMRAM] PTR unsigned char 
  3876 ;;		 -> ComController@DataToSend_1653(4), ComController@DataToSend(4), updateComms@DataGet(2), 
  3877 ;;  numbofbytes     1   31[COMRAM] unsigned char 
  3878 ;; Auto vars:     Size  Location     Type
  3879 ;;  DataTable       1   33[COMRAM] unsigned char 
  3880 ;;  ReturnCounte    1   35[COMRAM] unsigned char 
  3881 ;;  DataCount       1   34[COMRAM] unsigned char 
  3882 ;;  Error           1   32[COMRAM] unsigned char 
  3883 ;; Return value:  Size  Location     Type
  3884 ;;                  1    wreg      unsigned char 
  3885 ;; Registers used:
  3886 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3887 ;; Tracked objects:
  3888 ;;		On entry : 0/0
  3889 ;;		On exit  : 0/0
  3890 ;;		Unchanged: 0/0
  3891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3892 ;;      Params:         4       0       0       0       0       0       0
  3893 ;;      Locals:         4       0       0       0       0       0       0
  3894 ;;      Temps:          0       0       0       0       0       0       0
  3895 ;;      Totals:         8       0       0       0       0       0       0
  3896 ;;Total ram usage:        8 bytes
  3897 ;; Hardware stack levels used:    1
  3898 ;; Hardware stack levels required when called:    6
  3899 ;; This function calls:
  3900 ;;		Nothing
  3901 ;; This function is called by:
  3902 ;;		_updateComms
  3903 ;;		_ComController
  3904 ;; This function uses a non-reentrant model
  3905 ;;
  3906                           
  3907                           	psect	text16
  3908  001720                     __ptext16:
  3909                           	opt stack 0
  3910  001720                     _GetDataDict:
  3911                           	opt stack 21
  3912                           
  3913                           ;incstack = 0
  3914                           ;GetDataDict@DataTable stored from wreg
  3915  001720  6E22               	movwf	GetDataDict@DataTable,c
  3916                           
  3917                           ;CarDataDictionary.c: 8: unsigned char Error = 0;
  3918  001722  0E00               	movlw	0
  3919  001724  6E21               	movwf	GetDataDict@Error,c
  3920                           
  3921                           ;CarDataDictionary.c: 9: unsigned char DataCount = 0;
  3922  001726  0E00               	movlw	0
  3923  001728  6E23               	movwf	GetDataDict@DataCount,c
  3924                           
  3925                           ;CarDataDictionary.c: 10: unsigned char ReturnCounter = 0;
  3926  00172A  0E00               	movlw	0
  3927  00172C  6E24               	movwf	GetDataDict@ReturnCounter,c
  3928                           
  3929                           ;CarDataDictionary.c: 11: switch(DataTable){
  3930  00172E  D03C               	goto	l3834
  3931  001730                     l3814:
  3932                           
  3933                           ;CarDataDictionary.c: 13: DataCount = DataTableIndex + numbofbytes;
  3934  001730  501D               	movf	GetDataDict@DataTableIndex,w,c
  3935  001732  2420               	addwf	GetDataDict@numbofbytes,w,c
  3936  001734  6E23               	movwf	GetDataDict@DataCount,c
  3937  001736  D014               	goto	l3822
  3938  001738                     l3816:
  3939                           
  3940                           ;CarDataDictionary.c: 15: DataArray[ReturnCounter] = DataTableArrayOne[DataTableIndex];
  3941  001738  501D               	movf	GetDataDict@DataTableIndex,w,c
  3942  00173A  0D01               	mullw	1
  3943  00173C  0EF4               	movlw	low _DataTableArrayOne
  3944  00173E  24F3               	addwf	prodl,w,c
  3945  001740  6ED9               	movwf	fsr2l,c
  3946  001742  0E00               	movlw	high _DataTableArrayOne
  3947  001744  20F4               	addwfc	prodh,w,c
  3948  001746  6EDA               	movwf	fsr2h,c
  3949  001748  5024               	movf	GetDataDict@ReturnCounter,w,c
  3950  00174A  0D01               	mullw	1
  3951  00174C  50F3               	movf	prodl,w,c
  3952  00174E  241E               	addwf	GetDataDict@DataArray,w,c
  3953  001750  6EE1               	movwf	fsr1l,c
  3954  001752  50F4               	movf	prodh,w,c
  3955  001754  201F               	addwfc	GetDataDict@DataArray+1,w,c
  3956  001756  6EE2               	movwf	fsr1h,c
  3957  001758  CFDF FFE7          	movff	indf2,indf1
  3958                           
  3959                           ;CarDataDictionary.c: 16: ReturnCounter++;
  3960  00175C  2A24               	incf	GetDataDict@ReturnCounter,f,c
  3961  00175E  2A1D               	incf	GetDataDict@DataTableIndex,f,c
  3962  001760                     l3822:
  3963  001760  5023               	movf	GetDataDict@DataCount,w,c
  3964  001762  5C1D               	subwf	GetDataDict@DataTableIndex,w,c
  3965  001764  B0D8               	btfsc	status,0,c
  3966  001766  0012               	return	
  3967  001768  D7E7               	goto	l3816
  3968  00176A                     l3824:
  3969                           
  3970                           ;CarDataDictionary.c: 20: DataCount = DataTableIndex + numbofbytes;
  3971  00176A  501D               	movf	GetDataDict@DataTableIndex,w,c
  3972  00176C  2420               	addwf	GetDataDict@numbofbytes,w,c
  3973  00176E  6E23               	movwf	GetDataDict@DataCount,c
  3974  001770  D014               	goto	l3832
  3975  001772                     l3826:
  3976                           
  3977                           ;CarDataDictionary.c: 22: DataArray[ReturnCounter] = DataTableArrayFour[DataTableIndex];
  3978  001772  501D               	movf	GetDataDict@DataTableIndex,w,c
  3979  001774  0D01               	mullw	1
  3980  001776  0E32               	movlw	low _DataTableArrayFour
  3981  001778  24F3               	addwf	prodl,w,c
  3982  00177A  6ED9               	movwf	fsr2l,c
  3983  00177C  0E00               	movlw	high _DataTableArrayFour
  3984  00177E  20F4               	addwfc	prodh,w,c
  3985  001780  6EDA               	movwf	fsr2h,c
  3986  001782  5024               	movf	GetDataDict@ReturnCounter,w,c
  3987  001784  0D01               	mullw	1
  3988  001786  50F3               	movf	prodl,w,c
  3989  001788  241E               	addwf	GetDataDict@DataArray,w,c
  3990  00178A  6EE1               	movwf	fsr1l,c
  3991  00178C  50F4               	movf	prodh,w,c
  3992  00178E  201F               	addwfc	GetDataDict@DataArray+1,w,c
  3993  001790  6EE2               	movwf	fsr1h,c
  3994  001792  CFDF FFE7          	movff	indf2,indf1
  3995                           
  3996                           ;CarDataDictionary.c: 23: ReturnCounter++;
  3997  001796  2A24               	incf	GetDataDict@ReturnCounter,f,c
  3998  001798  2A1D               	incf	GetDataDict@DataTableIndex,f,c
  3999  00179A                     l3832:
  4000  00179A  5023               	movf	GetDataDict@DataCount,w,c
  4001  00179C  5C1D               	subwf	GetDataDict@DataTableIndex,w,c
  4002  00179E  B0D8               	btfsc	status,0,c
  4003  0017A0  0012               	return	
  4004  0017A2  D7E7               	goto	l3826
  4005  0017A4                     l879:
  4006                           
  4007                           ;CarDataDictionary.c: 27: Error = -1;
  4008  0017A4  6821               	setf	GetDataDict@Error,c
  4009                           
  4010                           ;CarDataDictionary.c: 28: }
  4011  0017A6  0012               	return	
  4012  0017A8                     l3834:
  4013  0017A8  5022               	movf	GetDataDict@DataTable,w,c
  4014                           
  4015                           ; Switch size 1, requested type "space"
  4016                           ; Number of cases is 2, Range of values is 0 to 4
  4017                           ; switch strategies available:
  4018                           ; Name         Instructions Cycles
  4019                           ; simple_byte            7     4 (average)
  4020                           ;	Chosen strategy is simple_byte
  4021  0017AA  0A00               	xorlw	0	; case 0
  4022  0017AC  B4D8               	btfsc	status,2,c
  4023  0017AE  D7C0               	goto	l3814
  4024  0017B0  0A04               	xorlw	4	; case 4
  4025  0017B2  B4D8               	btfsc	status,2,c
  4026  0017B4  D7DA               	goto	l3824
  4027  0017B6  D7F6               	goto	l879
  4028  0017B8                     __end_of_GetDataDict:
  4029                           	opt stack 0
  4030                           tblptru	equ	0xFF8
  4031                           tblptrh	equ	0xFF7
  4032                           tblptrl	equ	0xFF6
  4033                           tablat	equ	0xFF5
  4034                           prodh	equ	0xFF4
  4035                           prodl	equ	0xFF3
  4036                           intcon	equ	0xFF2
  4037                           postinc0	equ	0xFEE
  4038                           wreg	equ	0xFE8
  4039                           indf1	equ	0xFE7
  4040                           fsr1h	equ	0xFE2
  4041                           fsr1l	equ	0xFE1
  4042                           indf2	equ	0xFDF
  4043                           postinc2	equ	0xFDE
  4044                           postdec2	equ	0xFDD
  4045                           plusw2	equ	0xFDB
  4046                           fsr2h	equ	0xFDA
  4047                           fsr2l	equ	0xFD9
  4048                           status	equ	0xFD8
  4049                           
  4050 ;; *************** function _ClearBuffer *****************
  4051 ;; Defined at:
  4052 ;;		line 159 in file "UART.c"
  4053 ;; Parameters:    Size  Location     Type
  4054 ;;		None
  4055 ;; Auto vars:     Size  Location     Type
  4056 ;;		None
  4057 ;; Return value:  Size  Location     Type
  4058 ;;                  1    wreg      void 
  4059 ;; Registers used:
  4060 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4061 ;; Tracked objects:
  4062 ;;		On entry : 0/0
  4063 ;;		On exit  : 0/0
  4064 ;;		Unchanged: 0/0
  4065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4066 ;;      Params:         0       0       0       0       0       0       0
  4067 ;;      Locals:         0       0       0       0       0       0       0
  4068 ;;      Temps:          0       0       0       0       0       0       0
  4069 ;;      Totals:         0       0       0       0       0       0       0
  4070 ;;Total ram usage:        0 bytes
  4071 ;; Hardware stack levels used:    1
  4072 ;; Hardware stack levels required when called:    8
  4073 ;; This function calls:
  4074 ;;		_UART_buff_flush
  4075 ;; This function is called by:
  4076 ;;		_receiveData
  4077 ;; This function uses a non-reentrant model
  4078 ;;
  4079                           
  4080                           	psect	text17
  4081  0021B0                     __ptext17:
  4082                           	opt stack 0
  4083  0021B0                     _ClearBuffer:
  4084                           	opt stack 20
  4085                           
  4086                           ;UART.c: 160: UART_buff_flush(&input_buffer, 1);
  4087                           
  4088                           ;incstack = 0
  4089  0021B0  0E30               	movlw	low _input_buffer
  4090  0021B2  6E25               	movwf	UART_buff_flush@_this,c
  4091  0021B4  0E01               	movlw	high _input_buffer
  4092  0021B6  6E26               	movwf	UART_buff_flush@_this+1,c
  4093  0021B8  0E00               	movlw	0
  4094  0021BA  6E28               	movwf	UART_buff_flush@clearBuffer+1,c
  4095  0021BC  0E01               	movlw	1
  4096  0021BE  6E27               	movwf	UART_buff_flush@clearBuffer,c
  4097  0021C0  EC68  F00D         	call	_UART_buff_flush	;wreg free
  4098  0021C4  0012               	return		;funcret
  4099  0021C6                     __end_of_ClearBuffer:
  4100                           	opt stack 0
  4101                           tblptru	equ	0xFF8
  4102                           tblptrh	equ	0xFF7
  4103                           tblptrl	equ	0xFF6
  4104                           tablat	equ	0xFF5
  4105                           prodh	equ	0xFF4
  4106                           prodl	equ	0xFF3
  4107                           intcon	equ	0xFF2
  4108                           postinc0	equ	0xFEE
  4109                           wreg	equ	0xFE8
  4110                           indf1	equ	0xFE7
  4111                           fsr1h	equ	0xFE2
  4112                           fsr1l	equ	0xFE1
  4113                           indf2	equ	0xFDF
  4114                           postinc2	equ	0xFDE
  4115                           postdec2	equ	0xFDD
  4116                           plusw2	equ	0xFDB
  4117                           fsr2h	equ	0xFDA
  4118                           fsr2l	equ	0xFD9
  4119                           status	equ	0xFD8
  4120                           
  4121 ;; *************** function _UART_buff_flush *****************
  4122 ;; Defined at:
  4123 ;;		line 92 in file "UART.c"
  4124 ;; Parameters:    Size  Location     Type
  4125 ;;  _this           2   36[COMRAM] PTR struct UART_ring_buf
  4126 ;;		 -> input_buffer(106), 
  4127 ;;  clearBuffer     2   38[COMRAM] const int 
  4128 ;; Auto vars:     Size  Location     Type
  4129 ;;		None
  4130 ;; Return value:  Size  Location     Type
  4131 ;;                  1    wreg      void 
  4132 ;; Registers used:
  4133 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4134 ;; Tracked objects:
  4135 ;;		On entry : 0/0
  4136 ;;		On exit  : 0/0
  4137 ;;		Unchanged: 0/0
  4138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4139 ;;      Params:         4       0       0       0       0       0       0
  4140 ;;      Locals:         0       0       0       0       0       0       0
  4141 ;;      Temps:          0       0       0       0       0       0       0
  4142 ;;      Totals:         4       0       0       0       0       0       0
  4143 ;;Total ram usage:        4 bytes
  4144 ;; Hardware stack levels used:    1
  4145 ;; Hardware stack levels required when called:    7
  4146 ;; This function calls:
  4147 ;;		_memset
  4148 ;; This function is called by:
  4149 ;;		_ClearBuffer
  4150 ;; This function uses a non-reentrant model
  4151 ;;
  4152                           
  4153                           	psect	text18
  4154  001AD0                     __ptext18:
  4155                           	opt stack 0
  4156  001AD0                     _UART_buff_flush:
  4157                           	opt stack 20
  4158                           
  4159                           ;UART.c: 93: _this->count = 0;
  4160                           
  4161                           ;incstack = 0
  4162  001AD0  EE20 F068          	lfsr	2,104
  4163  001AD4  5025               	movf	UART_buff_flush@_this,w,c
  4164  001AD6  26D9               	addwf	fsr2l,f,c
  4165  001AD8  5026               	movf	UART_buff_flush@_this+1,w,c
  4166  001ADA  22DA               	addwfc	fsr2h,f,c
  4167  001ADC  0E00               	movlw	0
  4168  001ADE  6EDE               	movwf	postinc2,c
  4169  001AE0  0E00               	movlw	0
  4170  001AE2  6EDD               	movwf	postdec2,c
  4171                           
  4172                           ;UART.c: 94: _this->head = 0;
  4173  001AE4  EE20 F064          	lfsr	2,100
  4174  001AE8  5025               	movf	UART_buff_flush@_this,w,c
  4175  001AEA  26D9               	addwf	fsr2l,f,c
  4176  001AEC  5026               	movf	UART_buff_flush@_this+1,w,c
  4177  001AEE  22DA               	addwfc	fsr2h,f,c
  4178  001AF0  0E00               	movlw	0
  4179  001AF2  6EDE               	movwf	postinc2,c
  4180  001AF4  0E00               	movlw	0
  4181  001AF6  6EDD               	movwf	postdec2,c
  4182                           
  4183                           ;UART.c: 95: _this->tail = 0;
  4184  001AF8  EE20 F066          	lfsr	2,102
  4185  001AFC  5025               	movf	UART_buff_flush@_this,w,c
  4186  001AFE  26D9               	addwf	fsr2l,f,c
  4187  001B00  5026               	movf	UART_buff_flush@_this+1,w,c
  4188  001B02  22DA               	addwfc	fsr2h,f,c
  4189  001B04  0E00               	movlw	0
  4190  001B06  6EDE               	movwf	postinc2,c
  4191  001B08  0E00               	movlw	0
  4192  001B0A  6EDD               	movwf	postdec2,c
  4193                           
  4194                           ;UART.c: 96: if (clearBuffer) {
  4195  001B0C  5027               	movf	UART_buff_flush@clearBuffer,w,c
  4196  001B0E  1028               	iorwf	UART_buff_flush@clearBuffer+1,w,c
  4197  001B10  B4D8               	btfsc	status,2,c
  4198  001B12  0012               	return	
  4199                           
  4200                           ;UART.c: 97: memset(_this->buf, 0, sizeof (_this->buf));
  4201  001B14  C025  F01D         	movff	UART_buff_flush@_this,memset@p1
  4202  001B18  C026  F01E         	movff	UART_buff_flush@_this+1,memset@p1+1
  4203  001B1C  0E00               	movlw	0
  4204  001B1E  6E20               	movwf	memset@c+1,c
  4205  001B20  0E00               	movlw	0
  4206  001B22  6E1F               	movwf	memset@c,c
  4207  001B24  0E00               	movlw	0
  4208  001B26  6E22               	movwf	memset@n+1,c
  4209  001B28  0E64               	movlw	100
  4210  001B2A  6E21               	movwf	memset@n,c
  4211  001B2C  EC13  F010         	call	_memset	;wreg free
  4212  001B30  0012               	return	
  4213  001B32                     __end_of_UART_buff_flush:
  4214                           	opt stack 0
  4215                           tblptru	equ	0xFF8
  4216                           tblptrh	equ	0xFF7
  4217                           tblptrl	equ	0xFF6
  4218                           tablat	equ	0xFF5
  4219                           prodh	equ	0xFF4
  4220                           prodl	equ	0xFF3
  4221                           intcon	equ	0xFF2
  4222                           postinc0	equ	0xFEE
  4223                           wreg	equ	0xFE8
  4224                           indf1	equ	0xFE7
  4225                           fsr1h	equ	0xFE2
  4226                           fsr1l	equ	0xFE1
  4227                           indf2	equ	0xFDF
  4228                           postinc2	equ	0xFDE
  4229                           postdec2	equ	0xFDD
  4230                           plusw2	equ	0xFDB
  4231                           fsr2h	equ	0xFDA
  4232                           fsr2l	equ	0xFD9
  4233                           status	equ	0xFD8
  4234                           
  4235 ;; *************** function _processPowerRequest *****************
  4236 ;; Defined at:
  4237 ;;		line 30 in file "Communications.c"
  4238 ;; Parameters:    Size  Location     Type
  4239 ;;  powerSet        1    wreg     unsigned char 
  4240 ;; Auto vars:     Size  Location     Type
  4241 ;;  powerSet        1    8[BANK0 ] unsigned char 
  4242 ;; Return value:  Size  Location     Type
  4243 ;;                  1    wreg      void 
  4244 ;; Registers used:
  4245 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4246 ;; Tracked objects:
  4247 ;;		On entry : 0/0
  4248 ;;		On exit  : 0/0
  4249 ;;		Unchanged: 0/0
  4250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4251 ;;      Params:         0       0       0       0       0       0       0
  4252 ;;      Locals:         0       1       0       0       0       0       0
  4253 ;;      Temps:          0       2       0       0       0       0       0
  4254 ;;      Totals:         0       3       0       0       0       0       0
  4255 ;;Total ram usage:        3 bytes
  4256 ;; Hardware stack levels used:    1
  4257 ;; Hardware stack levels required when called:    9
  4258 ;; This function calls:
  4259 ;;		_CoolingStart
  4260 ;;		_CoolingStop
  4261 ;;		_EnableSlavePower
  4262 ;;		_Update
  4263 ;; This function is called by:
  4264 ;;		_updateComms
  4265 ;; This function uses a non-reentrant model
  4266 ;;
  4267                           
  4268                           	psect	text19
  4269  000E5C                     __ptext19:
  4270                           	opt stack 0
  4271  000E5C                     _processPowerRequest:
  4272                           	opt stack 20
  4273                           
  4274                           ;incstack = 0
  4275                           ;processPowerRequest@powerSet stored from wreg
  4276  000E5C  0100               	movlb	0	; () banked
  4277  000E5E  6F68               	movwf	processPowerRequest@powerSet& (0+255),b
  4278                           
  4279                           ;Communications.c: 32: if (((powerSet >> 1) & 0x01)){
  4280  000E60  C068  F066         	movff	processPowerRequest@powerSet,??_processPowerRequest
  4281  000E64  0100               	movlb	0	; () banked
  4282  000E66  90D8               	bcf	status,0,c
  4283  000E68  3366               	rrcf	??_processPowerRequest& (0+255),f,b
  4284  000E6A  0100               	movlb	0	; () banked
  4285  000E6C  A166               	btfss	??_processPowerRequest& (0+255),0,b
  4286  000E6E  D008               	goto	l4288
  4287                           
  4288                           ; BSR set to: 0
  4289                           ;Communications.c: 33: EnableSlavePower(BMM, ON);
  4290  000E70  0E00               	movlw	0
  4291  000E72  6E28               	movwf	EnableSlavePower@onof+1,c
  4292  000E74  0E01               	movlw	1
  4293  000E76  6E27               	movwf	EnableSlavePower@onof,c
  4294  000E78  0E04               	movlw	4
  4295  000E7A  EC00  F00A         	call	_EnableSlavePower
  4296                           
  4297                           ;Communications.c: 34: }
  4298  000E7E  D007               	goto	l4290
  4299  000E80                     l4288:
  4300                           
  4301                           ;Communications.c: 35: else{
  4302                           ;Communications.c: 36: EnableSlavePower(BMM, OFF);
  4303  000E80  0E00               	movlw	0
  4304  000E82  6E28               	movwf	EnableSlavePower@onof+1,c
  4305  000E84  0E00               	movlw	0
  4306  000E86  6E27               	movwf	EnableSlavePower@onof,c
  4307  000E88  0E04               	movlw	4
  4308  000E8A  EC00  F00A         	call	_EnableSlavePower
  4309  000E8E                     l4290:
  4310                           
  4311                           ;Communications.c: 37: }
  4312                           ;Communications.c: 38: if (((powerSet >> 2) & 0x01)){
  4313  000E8E  C068  F066         	movff	processPowerRequest@powerSet,??_processPowerRequest
  4314  000E92  0100               	movlb	0	; () banked
  4315  000E94  90D8               	bcf	status,0,c
  4316  000E96  3366               	rrcf	??_processPowerRequest& (0+255),f,b
  4317  000E98  0100               	movlb	0	; () banked
  4318  000E9A  90D8               	bcf	status,0,c
  4319  000E9C  3366               	rrcf	??_processPowerRequest& (0+255),f,b
  4320  000E9E  0100               	movlb	0	; () banked
  4321  000EA0  A166               	btfss	??_processPowerRequest& (0+255),0,b
  4322  000EA2  D008               	goto	l4294
  4323                           
  4324                           ; BSR set to: 0
  4325                           ;Communications.c: 39: EnableSlavePower(MCS, ON);
  4326  000EA4  0E00               	movlw	0
  4327  000EA6  6E28               	movwf	EnableSlavePower@onof+1,c
  4328  000EA8  0E01               	movlw	1
  4329  000EAA  6E27               	movwf	EnableSlavePower@onof,c
  4330  000EAC  0E02               	movlw	2
  4331  000EAE  EC00  F00A         	call	_EnableSlavePower
  4332                           
  4333                           ;Communications.c: 40: }
  4334  000EB2  D007               	goto	l4296
  4335  000EB4                     l4294:
  4336                           
  4337                           ;Communications.c: 41: else{
  4338                           ;Communications.c: 42: EnableSlavePower(MCS,OFF);
  4339  000EB4  0E00               	movlw	0
  4340  000EB6  6E28               	movwf	EnableSlavePower@onof+1,c
  4341  000EB8  0E00               	movlw	0
  4342  000EBA  6E27               	movwf	EnableSlavePower@onof,c
  4343  000EBC  0E02               	movlw	2
  4344  000EBE  EC00  F00A         	call	_EnableSlavePower
  4345  000EC2                     l4296:
  4346                           
  4347                           ;Communications.c: 43: }
  4348                           ;Communications.c: 44: if (((powerSet >> 3) & 0x01)){
  4349  000EC2  C068  F066         	movff	processPowerRequest@powerSet,??_processPowerRequest
  4350  000EC6  0100               	movlb	0	; () banked
  4351  000EC8  90D8               	bcf	status,0,c
  4352  000ECA  3366               	rrcf	??_processPowerRequest& (0+255),f,b
  4353  000ECC  0100               	movlb	0	; () banked
  4354  000ECE  90D8               	bcf	status,0,c
  4355  000ED0  3366               	rrcf	??_processPowerRequest& (0+255),f,b
  4356  000ED2  0100               	movlb	0	; () banked
  4357  000ED4  90D8               	bcf	status,0,c
  4358  000ED6  3366               	rrcf	??_processPowerRequest& (0+255),f,b
  4359  000ED8  0100               	movlb	0	; () banked
  4360  000EDA  A166               	btfss	??_processPowerRequest& (0+255),0,b
  4361  000EDC  D008               	goto	l4300
  4362                           
  4363                           ; BSR set to: 0
  4364                           ;Communications.c: 45: EnableSlavePower(DDS,ON);
  4365  000EDE  0E00               	movlw	0
  4366  000EE0  6E28               	movwf	EnableSlavePower@onof+1,c
  4367  000EE2  0E01               	movlw	1
  4368  000EE4  6E27               	movwf	EnableSlavePower@onof,c
  4369  000EE6  0E01               	movlw	1
  4370  000EE8  EC00  F00A         	call	_EnableSlavePower
  4371                           
  4372                           ;Communications.c: 46: }
  4373  000EEC  D007               	goto	l4302
  4374  000EEE                     l4300:
  4375                           
  4376                           ;Communications.c: 47: else{
  4377                           ;Communications.c: 48: EnableSlavePower(DDS,OFF);
  4378  000EEE  0E00               	movlw	0
  4379  000EF0  6E28               	movwf	EnableSlavePower@onof+1,c
  4380  000EF2  0E00               	movlw	0
  4381  000EF4  6E27               	movwf	EnableSlavePower@onof,c
  4382  000EF6  0E01               	movlw	1
  4383  000EF8  EC00  F00A         	call	_EnableSlavePower
  4384  000EFC                     l4302:
  4385                           
  4386                           ;Communications.c: 49: }
  4387                           ;Communications.c: 50: if(((powerSet >> 4) & 0x01)){
  4388  000EFC  C068  F066         	movff	processPowerRequest@powerSet,??_processPowerRequest
  4389  000F00  0100               	movlb	0	; () banked
  4390  000F02  3B66               	swapf	??_processPowerRequest& (0+255),f,b
  4391  000F04  0E0F               	movlw	15
  4392  000F06  1766               	andwf	??_processPowerRequest& (0+255),f,b
  4393  000F08  0100               	movlb	0	; () banked
  4394  000F0A  A166               	btfss	??_processPowerRequest& (0+255),0,b
  4395  000F0C  D008               	goto	l4306
  4396                           
  4397                           ; BSR set to: 0
  4398                           ;Communications.c: 51: EnableSlavePower(SAS,ON);
  4399  000F0E  0E00               	movlw	0
  4400  000F10  6E28               	movwf	EnableSlavePower@onof+1,c
  4401  000F12  0E01               	movlw	1
  4402  000F14  6E27               	movwf	EnableSlavePower@onof,c
  4403  000F16  0E03               	movlw	3
  4404  000F18  EC00  F00A         	call	_EnableSlavePower
  4405                           
  4406                           ;Communications.c: 52: }
  4407  000F1C  D007               	goto	l4308
  4408  000F1E                     l4306:
  4409                           
  4410                           ;Communications.c: 53: else{
  4411                           ;Communications.c: 54: EnableSlavePower(SAS,OFF);
  4412  000F1E  0E00               	movlw	0
  4413  000F20  6E28               	movwf	EnableSlavePower@onof+1,c
  4414  000F22  0E00               	movlw	0
  4415  000F24  6E27               	movwf	EnableSlavePower@onof,c
  4416  000F26  0E03               	movlw	3
  4417  000F28  EC00  F00A         	call	_EnableSlavePower
  4418  000F2C                     l4308:
  4419                           
  4420                           ;Communications.c: 55: }
  4421                           ;Communications.c: 56: if(((powerSet >> 5) & 0x01)){
  4422  000F2C  C068  F066         	movff	processPowerRequest@powerSet,??_processPowerRequest
  4423  000F30  0E05               	movlw	5
  4424  000F32  0100               	movlb	0	; () banked
  4425  000F34  6F67               	movwf	(??_processPowerRequest+1)& (0+255),b
  4426  000F36                     u2835:
  4427  000F36  0100               	movlb	0	; () banked
  4428  000F38  90D8               	bcf	status,0,c
  4429  000F3A  3366               	rrcf	??_processPowerRequest& (0+255),f,b
  4430  000F3C  0100               	movlb	0	; () banked
  4431  000F3E  2F67               	decfsz	(??_processPowerRequest+1)& (0+255),f,b
  4432  000F40  D7FA               	goto	u2835
  4433  000F42  0100               	movlb	0	; () banked
  4434  000F44  A166               	btfss	??_processPowerRequest& (0+255),0,b
  4435  000F46  D008               	goto	l4312
  4436                           
  4437                           ; BSR set to: 0
  4438                           ;Communications.c: 57: EnableSlavePower(TSS, ON);
  4439  000F48  0E00               	movlw	0
  4440  000F4A  6E28               	movwf	EnableSlavePower@onof+1,c
  4441  000F4C  0E01               	movlw	1
  4442  000F4E  6E27               	movwf	EnableSlavePower@onof,c
  4443  000F50  0E05               	movlw	5
  4444  000F52  EC00  F00A         	call	_EnableSlavePower
  4445                           
  4446                           ;Communications.c: 58: }
  4447  000F56  D007               	goto	l4314
  4448  000F58                     l4312:
  4449                           
  4450                           ;Communications.c: 59: else{
  4451                           ;Communications.c: 60: EnableSlavePower(TSS,OFF);
  4452  000F58  0E00               	movlw	0
  4453  000F5A  6E28               	movwf	EnableSlavePower@onof+1,c
  4454  000F5C  0E00               	movlw	0
  4455  000F5E  6E27               	movwf	EnableSlavePower@onof,c
  4456  000F60  0E05               	movlw	5
  4457  000F62  EC00  F00A         	call	_EnableSlavePower
  4458  000F66                     l4314:
  4459                           
  4460                           ;Communications.c: 61: }
  4461                           ;Communications.c: 62: if(((powerSet >> 6) & 0x01)){
  4462  000F66  C068  F066         	movff	processPowerRequest@powerSet,??_processPowerRequest
  4463  000F6A  0E06               	movlw	6
  4464  000F6C  0100               	movlb	0	; () banked
  4465  000F6E  6F67               	movwf	(??_processPowerRequest+1)& (0+255),b
  4466  000F70                     u2855:
  4467  000F70  0100               	movlb	0	; () banked
  4468  000F72  90D8               	bcf	status,0,c
  4469  000F74  3366               	rrcf	??_processPowerRequest& (0+255),f,b
  4470  000F76  0100               	movlb	0	; () banked
  4471  000F78  2F67               	decfsz	(??_processPowerRequest+1)& (0+255),f,b
  4472  000F7A  D7FA               	goto	u2855
  4473  000F7C  0100               	movlb	0	; () banked
  4474  000F7E  A166               	btfss	??_processPowerRequest& (0+255),0,b
  4475  000F80  D008               	goto	l4318
  4476                           
  4477                           ; BSR set to: 0
  4478                           ;Communications.c: 63: EnableSlavePower(AUX, ON);
  4479  000F82  0E00               	movlw	0
  4480  000F84  6E28               	movwf	EnableSlavePower@onof+1,c
  4481  000F86  0E01               	movlw	1
  4482  000F88  6E27               	movwf	EnableSlavePower@onof,c
  4483  000F8A  0E06               	movlw	6
  4484  000F8C  EC00  F00A         	call	_EnableSlavePower
  4485                           
  4486                           ;Communications.c: 64: }
  4487  000F90  D007               	goto	l4320
  4488  000F92                     l4318:
  4489                           
  4490                           ;Communications.c: 65: else{
  4491                           ;Communications.c: 66: EnableSlavePower(AUX,OFF);
  4492  000F92  0E00               	movlw	0
  4493  000F94  6E28               	movwf	EnableSlavePower@onof+1,c
  4494  000F96  0E00               	movlw	0
  4495  000F98  6E27               	movwf	EnableSlavePower@onof,c
  4496  000F9A  0E06               	movlw	6
  4497  000F9C  EC00  F00A         	call	_EnableSlavePower
  4498  000FA0                     l4320:
  4499                           
  4500                           ;Communications.c: 67: }
  4501                           ;Communications.c: 68: if(((powerSet >> 7) & 0x01)){
  4502  000FA0  0100               	movlb	0	; () banked
  4503  000FA2  6B66               	clrf	??_processPowerRequest& (0+255),b
  4504  000FA4  AF68               	btfss	processPowerRequest@powerSet& (0+255),7,b
  4505  000FA6  D002               	bra	u2875
  4506  000FA8  0100               	movlb	0	; () banked
  4507  000FAA  2B66               	incf	??_processPowerRequest& (0+255),f,b
  4508  000FAC                     u2875:
  4509  000FAC  0100               	movlb	0	; () banked
  4510  000FAE  A166               	btfss	??_processPowerRequest& (0+255),0,b
  4511  000FB0  D003               	goto	l4324
  4512                           
  4513                           ; BSR set to: 0
  4514                           ;Communications.c: 70: CoolingStart();
  4515  000FB2  EC89  F010         	call	_CoolingStart	;wreg free
  4516                           
  4517                           ;Communications.c: 71: }
  4518  000FB6  D002               	goto	l4326
  4519  000FB8                     l4324:
  4520                           
  4521                           ;Communications.c: 72: else{
  4522                           ;Communications.c: 74: CoolingStop();
  4523  000FB8  EC17  F011         	call	_CoolingStop	;wreg free
  4524  000FBC                     l4326:
  4525                           
  4526                           ;Communications.c: 75: }
  4527                           ;Communications.c: 76: Update();
  4528  000FBC  EC33  F011         	call	_Update	;wreg free
  4529  000FC0  0012               	return		;funcret
  4530  000FC2                     __end_of_processPowerRequest:
  4531                           	opt stack 0
  4532                           tblptru	equ	0xFF8
  4533                           tblptrh	equ	0xFF7
  4534                           tblptrl	equ	0xFF6
  4535                           tablat	equ	0xFF5
  4536                           prodh	equ	0xFF4
  4537                           prodl	equ	0xFF3
  4538                           intcon	equ	0xFF2
  4539                           postinc0	equ	0xFEE
  4540                           wreg	equ	0xFE8
  4541                           indf1	equ	0xFE7
  4542                           fsr1h	equ	0xFE2
  4543                           fsr1l	equ	0xFE1
  4544                           indf2	equ	0xFDF
  4545                           postinc2	equ	0xFDE
  4546                           postdec2	equ	0xFDD
  4547                           plusw2	equ	0xFDB
  4548                           fsr2h	equ	0xFDA
  4549                           fsr2l	equ	0xFD9
  4550                           status	equ	0xFD8
  4551                           
  4552 ;; *************** function _CoolingStop *****************
  4553 ;; Defined at:
  4554 ;;		line 30 in file "CoolingControl.c"
  4555 ;; Parameters:    Size  Location     Type
  4556 ;;		None
  4557 ;; Auto vars:     Size  Location     Type
  4558 ;;		None
  4559 ;; Return value:  Size  Location     Type
  4560 ;;                  1    wreg      void 
  4561 ;; Registers used:
  4562 ;;		wreg, status,2, status,0, cstack
  4563 ;; Tracked objects:
  4564 ;;		On entry : 0/0
  4565 ;;		On exit  : 0/0
  4566 ;;		Unchanged: 0/0
  4567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4568 ;;      Params:         0       0       0       0       0       0       0
  4569 ;;      Locals:         0       0       0       0       0       0       0
  4570 ;;      Temps:          0       0       0       0       0       0       0
  4571 ;;      Totals:         0       0       0       0       0       0       0
  4572 ;;Total ram usage:        0 bytes
  4573 ;; Hardware stack levels used:    1
  4574 ;; Hardware stack levels required when called:    8
  4575 ;; This function calls:
  4576 ;;		_PWM4_LoadDutyValue
  4577 ;;		_PotClear
  4578 ;; This function is called by:
  4579 ;;		_processPowerRequest
  4580 ;; This function uses a non-reentrant model
  4581 ;;
  4582                           
  4583                           	psect	text20
  4584  00222E                     __ptext20:
  4585                           	opt stack 0
  4586  00222E                     _CoolingStop:
  4587                           	opt stack 20
  4588                           
  4589                           ;CoolingControl.c: 31: PotClear();
  4590                           
  4591                           ;incstack = 0
  4592  00222E  ECE0  F00A         	call	_PotClear	;wreg free
  4593                           
  4594                           ;CoolingControl.c: 32: PWM4_LoadDutyValue(0);
  4595  002232  0E00               	movlw	0
  4596  002234  6E1E               	movwf	PWM4_LoadDutyValue@dutyValue+1,c
  4597  002236  0E00               	movlw	0
  4598  002238  6E1D               	movwf	PWM4_LoadDutyValue@dutyValue,c
  4599  00223A  ECCC  F00F         	call	_PWM4_LoadDutyValue	;wreg free
  4600  00223E  0012               	return		;funcret
  4601  002240                     __end_of_CoolingStop:
  4602                           	opt stack 0
  4603                           tblptru	equ	0xFF8
  4604                           tblptrh	equ	0xFF7
  4605                           tblptrl	equ	0xFF6
  4606                           tablat	equ	0xFF5
  4607                           prodh	equ	0xFF4
  4608                           prodl	equ	0xFF3
  4609                           intcon	equ	0xFF2
  4610                           postinc0	equ	0xFEE
  4611                           wreg	equ	0xFE8
  4612                           indf1	equ	0xFE7
  4613                           fsr1h	equ	0xFE2
  4614                           fsr1l	equ	0xFE1
  4615                           indf2	equ	0xFDF
  4616                           postinc2	equ	0xFDE
  4617                           postdec2	equ	0xFDD
  4618                           plusw2	equ	0xFDB
  4619                           fsr2h	equ	0xFDA
  4620                           fsr2l	equ	0xFD9
  4621                           status	equ	0xFD8
  4622                           
  4623 ;; *************** function _CoolingStart *****************
  4624 ;; Defined at:
  4625 ;;		line 19 in file "CoolingControl.c"
  4626 ;; Parameters:    Size  Location     Type
  4627 ;;		None
  4628 ;; Auto vars:     Size  Location     Type
  4629 ;;		None
  4630 ;; Return value:  Size  Location     Type
  4631 ;;                  1    wreg      void 
  4632 ;; Registers used:
  4633 ;;		wreg, status,2, status,0, cstack
  4634 ;; Tracked objects:
  4635 ;;		On entry : 0/0
  4636 ;;		On exit  : 0/0
  4637 ;;		Unchanged: 0/0
  4638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4639 ;;      Params:         0       0       0       0       0       0       0
  4640 ;;      Locals:         0       0       0       0       0       0       0
  4641 ;;      Temps:          0       0       0       0       0       0       0
  4642 ;;      Totals:         0       0       0       0       0       0       0
  4643 ;;Total ram usage:        0 bytes
  4644 ;; Hardware stack levels used:    1
  4645 ;; Hardware stack levels required when called:    8
  4646 ;; This function calls:
  4647 ;;		_PWM4_LoadDutyValue
  4648 ;;		_PotClear
  4649 ;;		_PotSetpoint
  4650 ;; This function is called by:
  4651 ;;		_processPowerRequest
  4652 ;; This function uses a non-reentrant model
  4653 ;;
  4654                           
  4655                           	psect	text21
  4656  002112                     __ptext21:
  4657                           	opt stack 0
  4658  002112                     _CoolingStart:
  4659                           	opt stack 20
  4660                           
  4661                           ;CoolingControl.c: 21: PotClear();
  4662                           
  4663                           ;incstack = 0
  4664  002112  ECE0  F00A         	call	_PotClear	;wreg free
  4665                           
  4666                           ;CoolingControl.c: 22: PotSetpoint(40);
  4667  002116  0E00               	movlw	0
  4668  002118  6E27               	movwf	PotSetpoint@new_point+1,c
  4669  00211A  0E28               	movlw	40
  4670  00211C  6E26               	movwf	PotSetpoint@new_point,c
  4671  00211E  EC82  F009         	call	_PotSetpoint	;wreg free
  4672                           
  4673                           ;CoolingControl.c: 23: PWM4_LoadDutyValue(1000);
  4674  002122  0E03               	movlw	3
  4675  002124  6E1E               	movwf	PWM4_LoadDutyValue@dutyValue+1,c
  4676  002126  0EE8               	movlw	232
  4677  002128  6E1D               	movwf	PWM4_LoadDutyValue@dutyValue,c
  4678  00212A  ECCC  F00F         	call	_PWM4_LoadDutyValue	;wreg free
  4679  00212E  0012               	return		;funcret
  4680  002130                     __end_of_CoolingStart:
  4681                           	opt stack 0
  4682                           tblptru	equ	0xFF8
  4683                           tblptrh	equ	0xFF7
  4684                           tblptrl	equ	0xFF6
  4685                           tablat	equ	0xFF5
  4686                           prodh	equ	0xFF4
  4687                           prodl	equ	0xFF3
  4688                           intcon	equ	0xFF2
  4689                           postinc0	equ	0xFEE
  4690                           wreg	equ	0xFE8
  4691                           indf1	equ	0xFE7
  4692                           fsr1h	equ	0xFE2
  4693                           fsr1l	equ	0xFE1
  4694                           indf2	equ	0xFDF
  4695                           postinc2	equ	0xFDE
  4696                           postdec2	equ	0xFDD
  4697                           plusw2	equ	0xFDB
  4698                           fsr2h	equ	0xFDA
  4699                           fsr2l	equ	0xFD9
  4700                           status	equ	0xFD8
  4701                           
  4702 ;; *************** function _PotSetpoint *****************
  4703 ;; Defined at:
  4704 ;;		line 21 in file "DigiPot.c"
  4705 ;; Parameters:    Size  Location     Type
  4706 ;;  new_point       2   37[COMRAM] int 
  4707 ;; Auto vars:     Size  Location     Type
  4708 ;;  new_pos         2    4[BANK0 ] int 
  4709 ;;  x               2    2[BANK0 ] int 
  4710 ;;  set_point       2    0[BANK0 ] int 
  4711 ;; Return value:  Size  Location     Type
  4712 ;;                  1    wreg      void 
  4713 ;; Registers used:
  4714 ;;		wreg, status,2, status,0, cstack
  4715 ;; Tracked objects:
  4716 ;;		On entry : 0/0
  4717 ;;		On exit  : 0/0
  4718 ;;		Unchanged: 0/0
  4719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4720 ;;      Params:         2       0       0       0       0       0       0
  4721 ;;      Locals:         0       6       0       0       0       0       0
  4722 ;;      Temps:          2       0       0       0       0       0       0
  4723 ;;      Totals:         4       6       0       0       0       0       0
  4724 ;;Total ram usage:       10 bytes
  4725 ;; Hardware stack levels used:    1
  4726 ;; Hardware stack levels required when called:    7
  4727 ;; This function calls:
  4728 ;;		_Delay
  4729 ;; This function is called by:
  4730 ;;		_main
  4731 ;;		_CoolingStart
  4732 ;; This function uses a non-reentrant model
  4733 ;;
  4734                           
  4735                           	psect	text22
  4736  001304                     __ptext22:
  4737                           	opt stack 0
  4738  001304                     _PotSetpoint:
  4739                           	opt stack 20
  4740                           
  4741                           ;DigiPot.c: 22: int set_point;
  4742                           ;DigiPot.c: 31: int new_pos = new_point;
  4743                           
  4744                           ;incstack = 0
  4745  001304  C026  F064         	movff	PotSetpoint@new_point,PotSetpoint@new_pos
  4746  001308  C027  F065         	movff	PotSetpoint@new_point+1,PotSetpoint@new_pos+1
  4747                           
  4748                           ;DigiPot.c: 35: LATB5 = 0;
  4749  00130C  9A8A               	bcf	3978,5,c	;volatile
  4750                           
  4751                           ;DigiPot.c: 38: if (new_pos > prev_pos) {
  4752  00130E  0100               	movlb	0	; () banked
  4753  001310  5164               	movf	PotSetpoint@new_pos& (0+255),w,b
  4754  001312  5C3B               	subwf	_prev_pos,w,c
  4755  001314  503C               	movf	_prev_pos+1,w,c
  4756  001316  0A80               	xorlw	128
  4757  001318  6E28               	movwf	??_PotSetpoint& (0+255),c
  4758  00131A  0100               	movlb	0	; () banked
  4759  00131C  5165               	movf	(PotSetpoint@new_pos+1)& (0+255),w,b
  4760  00131E  0A80               	xorlw	128
  4761  001320  5828               	subwfb	??_PotSetpoint& (0+255),w,c
  4762  001322  B0D8               	btfsc	status,0,c
  4763  001324  D013               	goto	l719
  4764                           
  4765                           ; BSR set to: 0
  4766                           ;DigiPot.c: 40: LATB3 = 1;
  4767  001326  868A               	bsf	3978,3,c	;volatile
  4768                           
  4769                           ; BSR set to: 0
  4770                           ;DigiPot.c: 41: set_point = new_pos - prev_pos;
  4771  001328  C03B  F028         	movff	_prev_pos,??_PotSetpoint
  4772  00132C  C03C  F029         	movff	_prev_pos+1,??_PotSetpoint+1
  4773  001330  1E28               	comf	??_PotSetpoint,f,c
  4774  001332  1E29               	comf	??_PotSetpoint+1,f,c
  4775  001334  4A28               	infsnz	??_PotSetpoint,f,c
  4776  001336  2A29               	incf	??_PotSetpoint+1,f,c
  4777  001338  0100               	movlb	0	; () banked
  4778  00133A  5164               	movf	PotSetpoint@new_pos& (0+255),w,b
  4779  00133C  2428               	addwf	??_PotSetpoint,w,c
  4780  00133E  0100               	movlb	0	; () banked
  4781  001340  6F60               	movwf	PotSetpoint@set_point& (0+255),b
  4782  001342  0100               	movlb	0	; () banked
  4783  001344  5165               	movf	(PotSetpoint@new_pos+1)& (0+255),w,b
  4784  001346  2029               	addwfc	??_PotSetpoint+1,w,c
  4785  001348  0100               	movlb	0	; () banked
  4786  00134A  6F61               	movwf	(PotSetpoint@set_point+1)& (0+255),b
  4787  00134C                     l719:
  4788                           
  4789                           ; BSR set to: 0
  4790                           ;DigiPot.c: 42: }
  4791                           ;DigiPot.c: 43: if (new_pos < prev_pos) {
  4792  00134C  503B               	movf	_prev_pos,w,c
  4793  00134E  0100               	movlb	0	; () banked
  4794  001350  5D64               	subwf	PotSetpoint@new_pos& (0+255),w,b
  4795  001352  0100               	movlb	0	; () banked
  4796  001354  5165               	movf	(PotSetpoint@new_pos+1)& (0+255),w,b
  4797  001356  0A80               	xorlw	128
  4798  001358  6E28               	movwf	??_PotSetpoint& (0+255),c
  4799  00135A  503C               	movf	_prev_pos+1,w,c
  4800  00135C  0A80               	xorlw	128
  4801  00135E  5828               	subwfb	??_PotSetpoint& (0+255),w,c
  4802  001360  B0D8               	btfsc	status,0,c
  4803  001362  D011               	goto	l3906
  4804                           
  4805                           ; BSR set to: 0
  4806                           ;DigiPot.c: 45: LATB3 = 0;
  4807  001364  968A               	bcf	3978,3,c	;volatile
  4808                           
  4809                           ; BSR set to: 0
  4810                           ;DigiPot.c: 46: set_point = prev_pos - new_pos;
  4811  001366  C064  F028         	movff	PotSetpoint@new_pos,??_PotSetpoint
  4812  00136A  C065  F029         	movff	PotSetpoint@new_pos+1,??_PotSetpoint+1
  4813  00136E  1E28               	comf	??_PotSetpoint,f,c
  4814  001370  1E29               	comf	??_PotSetpoint+1,f,c
  4815  001372  4A28               	infsnz	??_PotSetpoint,f,c
  4816  001374  2A29               	incf	??_PotSetpoint+1,f,c
  4817  001376  503B               	movf	_prev_pos,w,c
  4818  001378  2428               	addwf	??_PotSetpoint,w,c
  4819  00137A  0100               	movlb	0	; () banked
  4820  00137C  6F60               	movwf	PotSetpoint@set_point& (0+255),b
  4821  00137E  503C               	movf	_prev_pos+1,w,c
  4822  001380  2029               	addwfc	??_PotSetpoint+1,w,c
  4823  001382  0100               	movlb	0	; () banked
  4824  001384  6F61               	movwf	(PotSetpoint@set_point+1)& (0+255),b
  4825  001386                     l3906:
  4826                           
  4827                           ; BSR set to: 0
  4828                           ;DigiPot.c: 47: }
  4829                           ;DigiPot.c: 48: Delay(1);
  4830  001386  0E01               	movlw	1
  4831  001388  6E1D               	movwf	Delay@wait,c
  4832  00138A  0E00               	movlw	0
  4833  00138C  6E1E               	movwf	Delay@wait+1,c
  4834  00138E  0E00               	movlw	0
  4835  001390  6E1F               	movwf	Delay@wait+2,c
  4836  001392  0E00               	movlw	0
  4837  001394  6E20               	movwf	Delay@wait+3,c
  4838  001396  ECEF  F00E         	call	_Delay	;wreg free
  4839                           
  4840                           ;DigiPot.c: 50: int x;
  4841                           ;DigiPot.c: 52: for (x = 0; x < set_point; x++) {
  4842  00139A  0E00               	movlw	0
  4843  00139C  0100               	movlb	0	; () banked
  4844  00139E  6F63               	movwf	(PotSetpoint@x+1)& (0+255),b
  4845  0013A0  0E00               	movlw	0
  4846  0013A2  6F62               	movwf	PotSetpoint@x& (0+255),b
  4847  0013A4  D019               	goto	l3916
  4848  0013A6                     l722:
  4849                           
  4850                           ; BSR set to: 0
  4851                           ;DigiPot.c: 53: LATB4 = 1;
  4852  0013A6  888A               	bsf	3978,4,c	;volatile
  4853                           
  4854                           ; BSR set to: 0
  4855                           ;DigiPot.c: 54: Delay(1);
  4856  0013A8  0E01               	movlw	1
  4857  0013AA  6E1D               	movwf	Delay@wait,c
  4858  0013AC  0E00               	movlw	0
  4859  0013AE  6E1E               	movwf	Delay@wait+1,c
  4860  0013B0  0E00               	movlw	0
  4861  0013B2  6E1F               	movwf	Delay@wait+2,c
  4862  0013B4  0E00               	movlw	0
  4863  0013B6  6E20               	movwf	Delay@wait+3,c
  4864  0013B8  ECEF  F00E         	call	_Delay	;wreg free
  4865                           
  4866                           ;DigiPot.c: 55: LATB4 = 0;
  4867  0013BC  988A               	bcf	3978,4,c	;volatile
  4868                           
  4869                           ;DigiPot.c: 56: Delay(1);
  4870  0013BE  0E01               	movlw	1
  4871  0013C0  6E1D               	movwf	Delay@wait,c
  4872  0013C2  0E00               	movlw	0
  4873  0013C4  6E1E               	movwf	Delay@wait+1,c
  4874  0013C6  0E00               	movlw	0
  4875  0013C8  6E1F               	movwf	Delay@wait+2,c
  4876  0013CA  0E00               	movlw	0
  4877  0013CC  6E20               	movwf	Delay@wait+3,c
  4878  0013CE  ECEF  F00E         	call	_Delay	;wreg free
  4879  0013D2  0100               	movlb	0	; () banked
  4880  0013D4  4B62               	infsnz	PotSetpoint@x& (0+255),f,b
  4881  0013D6  2B63               	incf	(PotSetpoint@x+1)& (0+255),f,b
  4882  0013D8                     l3916:
  4883                           
  4884                           ; BSR set to: 0
  4885  0013D8  0100               	movlb	0	; () banked
  4886  0013DA  5160               	movf	PotSetpoint@set_point& (0+255),w,b
  4887  0013DC  0100               	movlb	0	; () banked
  4888  0013DE  5D62               	subwf	PotSetpoint@x& (0+255),w,b
  4889  0013E0  0100               	movlb	0	; () banked
  4890  0013E2  5163               	movf	(PotSetpoint@x+1)& (0+255),w,b
  4891  0013E4  0A80               	xorlw	128
  4892  0013E6  6E28               	movwf	??_PotSetpoint& (0+255),c
  4893  0013E8  0100               	movlb	0	; () banked
  4894  0013EA  5161               	movf	(PotSetpoint@set_point+1)& (0+255),w,b
  4895  0013EC  0A80               	xorlw	128
  4896  0013EE  5828               	subwfb	??_PotSetpoint& (0+255),w,c
  4897  0013F0  A0D8               	btfss	status,0,c
  4898  0013F2  D7D9               	goto	l722
  4899                           
  4900                           ; BSR set to: 0
  4901                           ;DigiPot.c: 57: }
  4902                           ;DigiPot.c: 59: LATB5 = 1;
  4903  0013F4  8A8A               	bsf	3978,5,c	;volatile
  4904                           
  4905                           ;DigiPot.c: 60: prev_pos = new_pos;
  4906  0013F6  C064  F03B         	movff	PotSetpoint@new_pos,_prev_pos
  4907  0013FA  C065  F03C         	movff	PotSetpoint@new_pos+1,_prev_pos+1
  4908                           
  4909                           ; BSR set to: 0
  4910  0013FE  0012               	return		;funcret
  4911  001400                     __end_of_PotSetpoint:
  4912                           	opt stack 0
  4913                           tblptru	equ	0xFF8
  4914                           tblptrh	equ	0xFF7
  4915                           tblptrl	equ	0xFF6
  4916                           tablat	equ	0xFF5
  4917                           prodh	equ	0xFF4
  4918                           prodl	equ	0xFF3
  4919                           intcon	equ	0xFF2
  4920                           postinc0	equ	0xFEE
  4921                           wreg	equ	0xFE8
  4922                           indf1	equ	0xFE7
  4923                           fsr1h	equ	0xFE2
  4924                           fsr1l	equ	0xFE1
  4925                           indf2	equ	0xFDF
  4926                           postinc2	equ	0xFDE
  4927                           postdec2	equ	0xFDD
  4928                           plusw2	equ	0xFDB
  4929                           fsr2h	equ	0xFDA
  4930                           fsr2l	equ	0xFD9
  4931                           status	equ	0xFD8
  4932                           
  4933 ;; *************** function _PotClear *****************
  4934 ;; Defined at:
  4935 ;;		line 66 in file "DigiPot.c"
  4936 ;; Parameters:    Size  Location     Type
  4937 ;;		None
  4938 ;; Auto vars:     Size  Location     Type
  4939 ;;  x               2   37[COMRAM] int 
  4940 ;; Return value:  Size  Location     Type
  4941 ;;                  1    wreg      void 
  4942 ;; Registers used:
  4943 ;;		wreg, status,2, status,0, cstack
  4944 ;; Tracked objects:
  4945 ;;		On entry : 0/0
  4946 ;;		On exit  : 0/0
  4947 ;;		Unchanged: 0/0
  4948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4949 ;;      Params:         0       0       0       0       0       0       0
  4950 ;;      Locals:         2       0       0       0       0       0       0
  4951 ;;      Temps:          0       0       0       0       0       0       0
  4952 ;;      Totals:         2       0       0       0       0       0       0
  4953 ;;Total ram usage:        2 bytes
  4954 ;; Hardware stack levels used:    1
  4955 ;; Hardware stack levels required when called:    7
  4956 ;; This function calls:
  4957 ;;		_Delay
  4958 ;; This function is called by:
  4959 ;;		_CoolingStart
  4960 ;;		_CoolingStop
  4961 ;; This function uses a non-reentrant model
  4962 ;;
  4963                           
  4964                           	psect	text23
  4965  0015C0                     __ptext23:
  4966                           	opt stack 0
  4967  0015C0                     _PotClear:
  4968                           	opt stack 20
  4969                           
  4970                           ;DigiPot.c: 67: Delay(1);
  4971                           
  4972                           ; BSR set to: 0
  4973                           ;incstack = 0
  4974  0015C0  0E01               	movlw	1
  4975  0015C2  6E1D               	movwf	Delay@wait,c
  4976  0015C4  0E00               	movlw	0
  4977  0015C6  6E1E               	movwf	Delay@wait+1,c
  4978  0015C8  0E00               	movlw	0
  4979  0015CA  6E1F               	movwf	Delay@wait+2,c
  4980  0015CC  0E00               	movlw	0
  4981  0015CE  6E20               	movwf	Delay@wait+3,c
  4982  0015D0  ECEF  F00E         	call	_Delay	;wreg free
  4983                           
  4984                           ;DigiPot.c: 69: LATB5 = 0;
  4985  0015D4  9A8A               	bcf	3978,5,c	;volatile
  4986                           
  4987                           ;DigiPot.c: 70: Delay(1);
  4988  0015D6  0E01               	movlw	1
  4989  0015D8  6E1D               	movwf	Delay@wait,c
  4990  0015DA  0E00               	movlw	0
  4991  0015DC  6E1E               	movwf	Delay@wait+1,c
  4992  0015DE  0E00               	movlw	0
  4993  0015E0  6E1F               	movwf	Delay@wait+2,c
  4994  0015E2  0E00               	movlw	0
  4995  0015E4  6E20               	movwf	Delay@wait+3,c
  4996  0015E6  ECEF  F00E         	call	_Delay	;wreg free
  4997                           
  4998                           ;DigiPot.c: 71: LATB3 = 0;
  4999  0015EA  968A               	bcf	3978,3,c	;volatile
  5000                           
  5001                           ;DigiPot.c: 72: Delay(1);
  5002  0015EC  0E01               	movlw	1
  5003  0015EE  6E1D               	movwf	Delay@wait,c
  5004  0015F0  0E00               	movlw	0
  5005  0015F2  6E1E               	movwf	Delay@wait+1,c
  5006  0015F4  0E00               	movlw	0
  5007  0015F6  6E1F               	movwf	Delay@wait+2,c
  5008  0015F8  0E00               	movlw	0
  5009  0015FA  6E20               	movwf	Delay@wait+3,c
  5010  0015FC  ECEF  F00E         	call	_Delay	;wreg free
  5011                           
  5012                           ;DigiPot.c: 73: int x;
  5013                           ;DigiPot.c: 74: for (x = 0; x < 32; x++) {
  5014  001600  0E00               	movlw	0
  5015  001602  6E27               	movwf	PotClear@x+1,c
  5016  001604  0E00               	movlw	0
  5017  001606  6E26               	movwf	PotClear@x,c
  5018  001608  BE27               	btfsc	PotClear@x+1,7,c
  5019  00160A  D006               	goto	l727
  5020  00160C  5027               	movf	PotClear@x+1,w,c
  5021  00160E  E121               	bnz	l728
  5022  001610  0E20               	movlw	32
  5023  001612  5C26               	subwf	PotClear@x,w,c
  5024  001614  B0D8               	btfsc	status,0,c
  5025  001616  D01D               	goto	l728
  5026  001618                     l727:
  5027                           
  5028                           ;DigiPot.c: 75: LATB4 = 1;
  5029  001618  888A               	bsf	3978,4,c	;volatile
  5030                           
  5031                           ;DigiPot.c: 76: Delay(1);
  5032  00161A  0E01               	movlw	1
  5033  00161C  6E1D               	movwf	Delay@wait,c
  5034  00161E  0E00               	movlw	0
  5035  001620  6E1E               	movwf	Delay@wait+1,c
  5036  001622  0E00               	movlw	0
  5037  001624  6E1F               	movwf	Delay@wait+2,c
  5038  001626  0E00               	movlw	0
  5039  001628  6E20               	movwf	Delay@wait+3,c
  5040  00162A  ECEF  F00E         	call	_Delay	;wreg free
  5041                           
  5042                           ;DigiPot.c: 77: LATB4 = 0;
  5043  00162E  988A               	bcf	3978,4,c	;volatile
  5044                           
  5045                           ;DigiPot.c: 78: Delay(1);
  5046  001630  0E01               	movlw	1
  5047  001632  6E1D               	movwf	Delay@wait,c
  5048  001634  0E00               	movlw	0
  5049  001636  6E1E               	movwf	Delay@wait+1,c
  5050  001638  0E00               	movlw	0
  5051  00163A  6E1F               	movwf	Delay@wait+2,c
  5052  00163C  0E00               	movlw	0
  5053  00163E  6E20               	movwf	Delay@wait+3,c
  5054  001640  ECEF  F00E         	call	_Delay	;wreg free
  5055  001644  4A26               	infsnz	PotClear@x,f,c
  5056  001646  2A27               	incf	PotClear@x+1,f,c
  5057  001648  BE27               	btfsc	PotClear@x+1,7,c
  5058  00164A  D7E6               	goto	l727
  5059  00164C  5027               	movf	PotClear@x+1,w,c
  5060  00164E  E101               	bnz	u2520
  5061  001650  D7DF               	goto	L1
  5062  001652                     u2520:
  5063  001652                     l728:
  5064                           
  5065                           ;DigiPot.c: 79: }
  5066                           ;DigiPot.c: 80: LATB4 = 1;
  5067  001652  888A               	bsf	3978,4,c	;volatile
  5068                           
  5069                           ;DigiPot.c: 81: Delay(1);
  5070  001654  0E01               	movlw	1
  5071  001656  6E1D               	movwf	Delay@wait,c
  5072  001658  0E00               	movlw	0
  5073  00165A  6E1E               	movwf	Delay@wait+1,c
  5074  00165C  0E00               	movlw	0
  5075  00165E  6E1F               	movwf	Delay@wait+2,c
  5076  001660  0E00               	movlw	0
  5077  001662  6E20               	movwf	Delay@wait+3,c
  5078  001664  ECEF  F00E         	call	_Delay	;wreg free
  5079                           
  5080                           ;DigiPot.c: 83: LATB5 = 1;
  5081  001668  8A8A               	bsf	3978,5,c	;volatile
  5082                           
  5083                           ;DigiPot.c: 84: prev_pos = 0;
  5084  00166A  0E00               	movlw	0
  5085  00166C  6E3C               	movwf	_prev_pos+1,c
  5086  00166E  0E00               	movlw	0
  5087  001670  6E3B               	movwf	_prev_pos,c
  5088                           
  5089                           ;DigiPot.c: 85: Delay(1);
  5090  001672  0E01               	movlw	1
  5091  001674  6E1D               	movwf	Delay@wait,c
  5092  001676  0E00               	movlw	0
  5093  001678  6E1E               	movwf	Delay@wait+1,c
  5094  00167A  0E00               	movlw	0
  5095  00167C  6E1F               	movwf	Delay@wait+2,c
  5096  00167E  0E00               	movlw	0
  5097  001680  6E20               	movwf	Delay@wait+3,c
  5098  001682  ECEF  F00E         	call	_Delay	;wreg free
  5099  001686  0012               	return		;funcret
  5100  001688                     __end_of_PotClear:
  5101                           	opt stack 0
  5102                           tblptru	equ	0xFF8
  5103                           tblptrh	equ	0xFF7
  5104                           tblptrl	equ	0xFF6
  5105                           tablat	equ	0xFF5
  5106                           prodh	equ	0xFF4
  5107                           prodl	equ	0xFF3
  5108                           intcon	equ	0xFF2
  5109                           postinc0	equ	0xFEE
  5110                           wreg	equ	0xFE8
  5111                           indf1	equ	0xFE7
  5112                           fsr1h	equ	0xFE2
  5113                           fsr1l	equ	0xFE1
  5114                           indf2	equ	0xFDF
  5115                           postinc2	equ	0xFDE
  5116                           postdec2	equ	0xFDD
  5117                           plusw2	equ	0xFDB
  5118                           fsr2h	equ	0xFDA
  5119                           fsr2l	equ	0xFD9
  5120                           status	equ	0xFD8
  5121                           
  5122 ;; *************** function _PWM4_LoadDutyValue *****************
  5123 ;; Defined at:
  5124 ;;		line 81 in file "mcc_generated_files/pwm4.c"
  5125 ;; Parameters:    Size  Location     Type
  5126 ;;  dutyValue       2   28[COMRAM] unsigned int 
  5127 ;; Auto vars:     Size  Location     Type
  5128 ;;		None
  5129 ;; Return value:  Size  Location     Type
  5130 ;;                  1    wreg      void 
  5131 ;; Registers used:
  5132 ;;		wreg, status,2, status,0
  5133 ;; Tracked objects:
  5134 ;;		On entry : 0/0
  5135 ;;		On exit  : 0/0
  5136 ;;		Unchanged: 0/0
  5137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5138 ;;      Params:         2       0       0       0       0       0       0
  5139 ;;      Locals:         0       0       0       0       0       0       0
  5140 ;;      Temps:          2       0       0       0       0       0       0
  5141 ;;      Totals:         4       0       0       0       0       0       0
  5142 ;;Total ram usage:        4 bytes
  5143 ;; Hardware stack levels used:    1
  5144 ;; Hardware stack levels required when called:    6
  5145 ;; This function calls:
  5146 ;;		Nothing
  5147 ;; This function is called by:
  5148 ;;		_main
  5149 ;;		_CoolingStart
  5150 ;;		_CoolingStop
  5151 ;; This function uses a non-reentrant model
  5152 ;;
  5153                           
  5154                           	psect	text24
  5155  001F98                     __ptext24:
  5156                           	opt stack 0
  5157  001F98                     _PWM4_LoadDutyValue:
  5158                           	opt stack 21
  5159                           
  5160                           ;pwm4.c: 84: CCPR2L = ((dutyValue & 0x03FC)>>2);
  5161                           
  5162                           ;incstack = 0
  5163  001F98  C01D  F01F         	movff	PWM4_LoadDutyValue@dutyValue,??_PWM4_LoadDutyValue
  5164  001F9C  C01E  F020         	movff	PWM4_LoadDutyValue@dutyValue+1,??_PWM4_LoadDutyValue+1
  5165  001FA0  90D8               	bcf	status,0,c
  5166  001FA2  3220               	rrcf	??_PWM4_LoadDutyValue+1,f,c
  5167  001FA4  321F               	rrcf	??_PWM4_LoadDutyValue,f,c
  5168  001FA6  90D8               	bcf	status,0,c
  5169  001FA8  3220               	rrcf	??_PWM4_LoadDutyValue+1,f,c
  5170  001FAA  321F               	rrcf	??_PWM4_LoadDutyValue,f,c
  5171  001FAC  501F               	movf	??_PWM4_LoadDutyValue,w,c
  5172  001FAE  6E67               	movwf	3943,c	;volatile
  5173                           
  5174                           ;pwm4.c: 87: CCP2CON = (CCP2CON & 0xCF) | ((dutyValue & 0x0003)<<4);
  5175  001FB0  C01D  F01F         	movff	PWM4_LoadDutyValue@dutyValue,??_PWM4_LoadDutyValue
  5176  001FB4  0E03               	movlw	3
  5177  001FB6  161F               	andwf	??_PWM4_LoadDutyValue,f,c
  5178  001FB8  3A1F               	swapf	??_PWM4_LoadDutyValue,f,c
  5179  001FBA  0EF0               	movlw	240
  5180  001FBC  161F               	andwf	??_PWM4_LoadDutyValue,f,c
  5181  001FBE  5066               	movf	3942,w,c	;volatile
  5182  001FC0  0BCF               	andlw	207
  5183  001FC2  101F               	iorwf	??_PWM4_LoadDutyValue,w,c
  5184  001FC4  6E66               	movwf	3942,c	;volatile
  5185  001FC6  0012               	return		;funcret
  5186  001FC8                     __end_of_PWM4_LoadDutyValue:
  5187                           	opt stack 0
  5188                           tblptru	equ	0xFF8
  5189                           tblptrh	equ	0xFF7
  5190                           tblptrl	equ	0xFF6
  5191                           tablat	equ	0xFF5
  5192                           prodh	equ	0xFF4
  5193                           prodl	equ	0xFF3
  5194                           intcon	equ	0xFF2
  5195                           postinc0	equ	0xFEE
  5196                           wreg	equ	0xFE8
  5197                           indf1	equ	0xFE7
  5198                           fsr1h	equ	0xFE2
  5199                           fsr1l	equ	0xFE1
  5200                           indf2	equ	0xFDF
  5201                           postinc2	equ	0xFDE
  5202                           postdec2	equ	0xFDD
  5203                           plusw2	equ	0xFDB
  5204                           fsr2h	equ	0xFDA
  5205                           fsr2l	equ	0xFD9
  5206                           status	equ	0xFD8
  5207                           
  5208 ;; *************** function _FaultsCollector *****************
  5209 ;; Defined at:
  5210 ;;		line 79 in file "Communications.c"
  5211 ;; Parameters:    Size  Location     Type
  5212 ;;		None
  5213 ;; Auto vars:     Size  Location     Type
  5214 ;;  i               2   34[COMRAM] int 
  5215 ;;  sendVal         2   32[COMRAM] unsigned int 
  5216 ;; Return value:  Size  Location     Type
  5217 ;;                  1    wreg      unsigned char 
  5218 ;; Registers used:
  5219 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5220 ;; Tracked objects:
  5221 ;;		On entry : 0/0
  5222 ;;		On exit  : 0/0
  5223 ;;		Unchanged: 0/0
  5224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5225 ;;      Params:         0       0       0       0       0       0       0
  5226 ;;      Locals:         4       0       0       0       0       0       0
  5227 ;;      Temps:          3       0       0       0       0       0       0
  5228 ;;      Totals:         7       0       0       0       0       0       0
  5229 ;;Total ram usage:        7 bytes
  5230 ;; Hardware stack levels used:    1
  5231 ;; Hardware stack levels required when called:    7
  5232 ;; This function calls:
  5233 ;;		_GetPDUFault
  5234 ;; This function is called by:
  5235 ;;		_updateComms
  5236 ;; This function uses a non-reentrant model
  5237 ;;
  5238                           
  5239                           	psect	text25
  5240  001C52                     __ptext25:
  5241                           	opt stack 0
  5242  001C52                     _FaultsCollector:
  5243                           	opt stack 22
  5244                           
  5245                           ;Communications.c: 80: unsigned int sendVal = 0;
  5246                           
  5247                           ;incstack = 0
  5248  001C52  0E00               	movlw	0
  5249  001C54  6E22               	movwf	FaultsCollector@sendVal+1,c
  5250  001C56  0E00               	movlw	0
  5251  001C58  6E21               	movwf	FaultsCollector@sendVal,c
  5252                           
  5253                           ;Communications.c: 81: int i = 0;
  5254  001C5A  0E00               	movlw	0
  5255  001C5C  6E24               	movwf	FaultsCollector@i+1,c
  5256  001C5E  0E00               	movlw	0
  5257  001C60  6E23               	movwf	FaultsCollector@i,c
  5258                           
  5259                           ;Communications.c: 82: for (i = 0; i < 5; i++) {
  5260  001C62  0E00               	movlw	0
  5261  001C64  6E24               	movwf	FaultsCollector@i+1,c
  5262  001C66  0E00               	movlw	0
  5263  001C68  6E23               	movwf	FaultsCollector@i,c
  5264  001C6A                     l4330:
  5265  001C6A  BE24               	btfsc	FaultsCollector@i+1,7,c
  5266  001C6C  D006               	goto	l4334
  5267  001C6E  5024               	movf	FaultsCollector@i+1,w,c
  5268  001C70  E11C               	bnz	l4340
  5269  001C72  0E05               	movlw	5
  5270  001C74  5C23               	subwf	FaultsCollector@i,w,c
  5271  001C76  B0D8               	btfsc	status,0,c
  5272  001C78  D018               	goto	l4340
  5273  001C7A                     l4334:
  5274                           
  5275                           ;Communications.c: 83: sendVal = sendVal | ((GetPDUFault(i)&0x01) << i);
  5276  001C7A  C023  F01E         	movff	FaultsCollector@i,??_FaultsCollector
  5277  001C7E  5023               	movf	FaultsCollector@i,w,c
  5278  001C80  ECE3  F010         	call	_GetPDUFault
  5279  001C84  0B01               	andlw	1
  5280  001C86  6E1F               	movwf	(??_FaultsCollector+1)& (0+255),c
  5281  001C88  6A20               	clrf	(??_FaultsCollector+2)& (0+255),c
  5282  001C8A  2A1E               	incf	??_FaultsCollector,f,c
  5283  001C8C  D003               	goto	u2904
  5284  001C8E                     u2905:
  5285  001C8E  90D8               	bcf	status,0,c
  5286  001C90  361F               	rlcf	??_FaultsCollector+1,f,c
  5287  001C92  3620               	rlcf	??_FaultsCollector+2,f,c
  5288  001C94                     u2904:
  5289  001C94  2E1E               	decfsz	??_FaultsCollector,f,c
  5290  001C96  D7FB               	goto	u2905
  5291  001C98  5021               	movf	FaultsCollector@sendVal,w,c
  5292  001C9A  101F               	iorwf	??_FaultsCollector+1,w,c
  5293  001C9C  6E21               	movwf	FaultsCollector@sendVal,c
  5294  001C9E  5022               	movf	FaultsCollector@sendVal+1,w,c
  5295  001CA0  1020               	iorwf	??_FaultsCollector+2,w,c
  5296  001CA2  6E22               	movwf	FaultsCollector@sendVal+1,c
  5297  001CA4  4A23               	infsnz	FaultsCollector@i,f,c
  5298  001CA6  2A24               	incf	FaultsCollector@i+1,f,c
  5299  001CA8  D7E0               	goto	l4330
  5300  001CAA                     l4340:
  5301                           
  5302                           ;Communications.c: 84: }
  5303                           ;Communications.c: 85: return sendVal;
  5304  001CAA  5021               	movf	FaultsCollector@sendVal,w,c
  5305  001CAC  0012               	return	
  5306  001CAE                     __end_of_FaultsCollector:
  5307                           	opt stack 0
  5308                           tblptru	equ	0xFF8
  5309                           tblptrh	equ	0xFF7
  5310                           tblptrl	equ	0xFF6
  5311                           tablat	equ	0xFF5
  5312                           prodh	equ	0xFF4
  5313                           prodl	equ	0xFF3
  5314                           intcon	equ	0xFF2
  5315                           postinc0	equ	0xFEE
  5316                           wreg	equ	0xFE8
  5317                           indf1	equ	0xFE7
  5318                           fsr1h	equ	0xFE2
  5319                           fsr1l	equ	0xFE1
  5320                           indf2	equ	0xFDF
  5321                           postinc2	equ	0xFDE
  5322                           postdec2	equ	0xFDD
  5323                           plusw2	equ	0xFDB
  5324                           fsr2h	equ	0xFDA
  5325                           fsr2l	equ	0xFD9
  5326                           status	equ	0xFD8
  5327                           
  5328 ;; *************** function _GetPDUFault *****************
  5329 ;; Defined at:
  5330 ;;		line 221 in file "PDU.c"
  5331 ;; Parameters:    Size  Location     Type
  5332 ;;  loc             1    wreg     unsigned char 
  5333 ;; Auto vars:     Size  Location     Type
  5334 ;;  loc             1   28[COMRAM] unsigned char 
  5335 ;; Return value:  Size  Location     Type
  5336 ;;                  1    wreg      unsigned char 
  5337 ;; Registers used:
  5338 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5339 ;; Tracked objects:
  5340 ;;		On entry : 0/0
  5341 ;;		On exit  : 0/0
  5342 ;;		Unchanged: 0/0
  5343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5344 ;;      Params:         0       0       0       0       0       0       0
  5345 ;;      Locals:         1       0       0       0       0       0       0
  5346 ;;      Temps:          0       0       0       0       0       0       0
  5347 ;;      Totals:         1       0       0       0       0       0       0
  5348 ;;Total ram usage:        1 bytes
  5349 ;; Hardware stack levels used:    1
  5350 ;; Hardware stack levels required when called:    6
  5351 ;; This function calls:
  5352 ;;		Nothing
  5353 ;; This function is called by:
  5354 ;;		_FaultsCollector
  5355 ;; This function uses a non-reentrant model
  5356 ;;
  5357                           
  5358                           	psect	text26
  5359  0021C6                     __ptext26:
  5360                           	opt stack 0
  5361  0021C6                     _GetPDUFault:
  5362                           	opt stack 22
  5363                           
  5364                           ;incstack = 0
  5365                           ;GetPDUFault@loc stored from wreg
  5366  0021C6  6E1D               	movwf	GetPDUFault@loc,c
  5367                           
  5368                           ;PDU.c: 222: return PDUFalult[loc];
  5369  0021C8  501D               	movf	GetPDUFault@loc,w,c
  5370  0021CA  0D01               	mullw	1
  5371  0021CC  0E2A               	movlw	low _PDUFalult
  5372  0021CE  24F3               	addwf	prodl,w,c
  5373  0021D0  6ED9               	movwf	fsr2l,c
  5374  0021D2  0E00               	movlw	high _PDUFalult
  5375  0021D4  20F4               	addwfc	prodh,w,c
  5376  0021D6  6EDA               	movwf	fsr2h,c
  5377  0021D8  50DF               	movf	indf2,w,c
  5378  0021DA  0012               	return	
  5379  0021DC                     __end_of_GetPDUFault:
  5380                           	opt stack 0
  5381                           tblptru	equ	0xFF8
  5382                           tblptrh	equ	0xFF7
  5383                           tblptrl	equ	0xFF6
  5384                           tablat	equ	0xFF5
  5385                           prodh	equ	0xFF4
  5386                           prodl	equ	0xFF3
  5387                           intcon	equ	0xFF2
  5388                           postinc0	equ	0xFEE
  5389                           wreg	equ	0xFE8
  5390                           indf1	equ	0xFE7
  5391                           fsr1h	equ	0xFE2
  5392                           fsr1l	equ	0xFE1
  5393                           indf2	equ	0xFDF
  5394                           postinc2	equ	0xFDE
  5395                           postdec2	equ	0xFDD
  5396                           plusw2	equ	0xFDB
  5397                           fsr2h	equ	0xFDA
  5398                           fsr2l	equ	0xFD9
  5399                           status	equ	0xFD8
  5400                           
  5401 ;; *************** function _SYSTEM_Initialize *****************
  5402 ;; Defined at:
  5403 ;;		line 113 in file "mcc_generated_files/mcc.c"
  5404 ;; Parameters:    Size  Location     Type
  5405 ;;		None
  5406 ;; Auto vars:     Size  Location     Type
  5407 ;;		None
  5408 ;; Return value:  Size  Location     Type
  5409 ;;                  1    wreg      void 
  5410 ;; Registers used:
  5411 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5412 ;; Tracked objects:
  5413 ;;		On entry : 0/0
  5414 ;;		On exit  : 0/0
  5415 ;;		Unchanged: 0/0
  5416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5417 ;;      Params:         0       0       0       0       0       0       0
  5418 ;;      Locals:         0       0       0       0       0       0       0
  5419 ;;      Temps:          0       0       0       0       0       0       0
  5420 ;;      Totals:         0       0       0       0       0       0       0
  5421 ;;Total ram usage:        0 bytes
  5422 ;; Hardware stack levels used:    1
  5423 ;; Hardware stack levels required when called:    9
  5424 ;; This function calls:
  5425 ;;		_ADC_Initialize
  5426 ;;		_EUSART1_Initialize
  5427 ;;		_INTERRUPT_Initialize
  5428 ;;		_OSCILLATOR_Initialize
  5429 ;;		_PIN_MANAGER_Initialize
  5430 ;;		_PWM4_Initialize
  5431 ;;		_TMR1_Initialize
  5432 ;;		_TMR2_Initialize
  5433 ;; This function is called by:
  5434 ;;		_main
  5435 ;; This function uses a non-reentrant model
  5436 ;;
  5437                           
  5438                           	psect	text27
  5439  0020CC                     __ptext27:
  5440                           	opt stack 0
  5441  0020CC                     _SYSTEM_Initialize:
  5442                           	opt stack 21
  5443                           
  5444                           ;mcc.c: 114: OSCILLATOR_Initialize();
  5445                           
  5446                           ;incstack = 0
  5447  0020CC  EC27  F011         	call	_OSCILLATOR_Initialize	;wreg free
  5448                           
  5449                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  5450  0020D0  EC2B  F00D         	call	_PIN_MANAGER_Initialize	;wreg free
  5451                           
  5452                           ;mcc.c: 116: INTERRUPT_Initialize();
  5453  0020D4  EC2E  F011         	call	_INTERRUPT_Initialize	;wreg free
  5454                           
  5455                           ;mcc.c: 117: EUSART1_Initialize();
  5456  0020D8  EC7C  F00F         	call	_EUSART1_Initialize	;wreg free
  5457                           
  5458                           ;mcc.c: 118: PWM4_Initialize();
  5459  0020DC  EC03  F011         	call	_PWM4_Initialize	;wreg free
  5460                           
  5461                           ;mcc.c: 119: TMR1_Initialize();
  5462  0020E0  EC78  F010         	call	_TMR1_Initialize	;wreg free
  5463                           
  5464                           ;mcc.c: 120: TMR2_Initialize();
  5465  0020E4  ECF9  F010         	call	_TMR2_Initialize	;wreg free
  5466                           
  5467                           ;mcc.c: 121: LATB4 = 1;
  5468  0020E8  888A               	bsf	3978,4,c	;volatile
  5469                           
  5470                           ;mcc.c: 122: ADC_Initialize();
  5471  0020EA  ECB6  F010         	call	_ADC_Initialize	;wreg free
  5472  0020EE  0012               	return		;funcret
  5473  0020F0                     __end_of_SYSTEM_Initialize:
  5474                           	opt stack 0
  5475                           tblptru	equ	0xFF8
  5476                           tblptrh	equ	0xFF7
  5477                           tblptrl	equ	0xFF6
  5478                           tablat	equ	0xFF5
  5479                           prodh	equ	0xFF4
  5480                           prodl	equ	0xFF3
  5481                           intcon	equ	0xFF2
  5482                           postinc0	equ	0xFEE
  5483                           wreg	equ	0xFE8
  5484                           indf1	equ	0xFE7
  5485                           fsr1h	equ	0xFE2
  5486                           fsr1l	equ	0xFE1
  5487                           indf2	equ	0xFDF
  5488                           postinc2	equ	0xFDE
  5489                           postdec2	equ	0xFDD
  5490                           plusw2	equ	0xFDB
  5491                           fsr2h	equ	0xFDA
  5492                           fsr2l	equ	0xFD9
  5493                           status	equ	0xFD8
  5494                           
  5495 ;; *************** function _TMR2_Initialize *****************
  5496 ;; Defined at:
  5497 ;;		line 9 in file "mcc_generated_files/tmr2.c"
  5498 ;; Parameters:    Size  Location     Type
  5499 ;;		None
  5500 ;; Auto vars:     Size  Location     Type
  5501 ;;		None
  5502 ;; Return value:  Size  Location     Type
  5503 ;;                  1    wreg      void 
  5504 ;; Registers used:
  5505 ;;		wreg, status,2, cstack
  5506 ;; Tracked objects:
  5507 ;;		On entry : 0/0
  5508 ;;		On exit  : 0/0
  5509 ;;		Unchanged: 0/0
  5510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5511 ;;      Params:         0       0       0       0       0       0       0
  5512 ;;      Locals:         0       0       0       0       0       0       0
  5513 ;;      Temps:          0       0       0       0       0       0       0
  5514 ;;      Totals:         0       0       0       0       0       0       0
  5515 ;;Total ram usage:        0 bytes
  5516 ;; Hardware stack levels used:    1
  5517 ;; Hardware stack levels required when called:    7
  5518 ;; This function calls:
  5519 ;;		_TMR2_StartTimer
  5520 ;; This function is called by:
  5521 ;;		_SYSTEM_Initialize
  5522 ;; This function uses a non-reentrant model
  5523 ;;
  5524                           
  5525                           	psect	text28
  5526  0021F2                     __ptext28:
  5527                           	opt stack 0
  5528  0021F2                     _TMR2_Initialize:
  5529                           	opt stack 22
  5530                           
  5531                           ;tmr2.c: 14: T2CON = 0x1A;
  5532                           
  5533                           ;incstack = 0
  5534  0021F2  0E1A               	movlw	26
  5535  0021F4  6EBA               	movwf	4026,c	;volatile
  5536                           
  5537                           ;tmr2.c: 17: PR2 = 0x7C;
  5538  0021F6  0E7C               	movlw	124
  5539  0021F8  6EBB               	movwf	4027,c	;volatile
  5540                           
  5541                           ;tmr2.c: 20: TMR2 = 0x00;
  5542  0021FA  0E00               	movlw	0
  5543  0021FC  6EBC               	movwf	4028,c	;volatile
  5544                           
  5545                           ;tmr2.c: 23: PIR1bits.TMR2IF = 0;
  5546  0021FE  929E               	bcf	3998,1,c	;volatile
  5547                           
  5548                           ;tmr2.c: 26: TMR2_StartTimer();
  5549  002200  EC39  F011         	call	_TMR2_StartTimer	;wreg free
  5550  002204  0012               	return		;funcret
  5551  002206                     __end_of_TMR2_Initialize:
  5552                           	opt stack 0
  5553                           tblptru	equ	0xFF8
  5554                           tblptrh	equ	0xFF7
  5555                           tblptrl	equ	0xFF6
  5556                           tablat	equ	0xFF5
  5557                           prodh	equ	0xFF4
  5558                           prodl	equ	0xFF3
  5559                           intcon	equ	0xFF2
  5560                           postinc0	equ	0xFEE
  5561                           wreg	equ	0xFE8
  5562                           indf1	equ	0xFE7
  5563                           fsr1h	equ	0xFE2
  5564                           fsr1l	equ	0xFE1
  5565                           indf2	equ	0xFDF
  5566                           postinc2	equ	0xFDE
  5567                           postdec2	equ	0xFDD
  5568                           plusw2	equ	0xFDB
  5569                           fsr2h	equ	0xFDA
  5570                           fsr2l	equ	0xFD9
  5571                           status	equ	0xFD8
  5572                           
  5573 ;; *************** function _TMR2_StartTimer *****************
  5574 ;; Defined at:
  5575 ;;		line 29 in file "mcc_generated_files/tmr2.c"
  5576 ;; Parameters:    Size  Location     Type
  5577 ;;		None
  5578 ;; Auto vars:     Size  Location     Type
  5579 ;;		None
  5580 ;; Return value:  Size  Location     Type
  5581 ;;                  1    wreg      void 
  5582 ;; Registers used:
  5583 ;;		None
  5584 ;; Tracked objects:
  5585 ;;		On entry : 0/0
  5586 ;;		On exit  : 0/0
  5587 ;;		Unchanged: 0/0
  5588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5589 ;;      Params:         0       0       0       0       0       0       0
  5590 ;;      Locals:         0       0       0       0       0       0       0
  5591 ;;      Temps:          0       0       0       0       0       0       0
  5592 ;;      Totals:         0       0       0       0       0       0       0
  5593 ;;Total ram usage:        0 bytes
  5594 ;; Hardware stack levels used:    1
  5595 ;; Hardware stack levels required when called:    6
  5596 ;; This function calls:
  5597 ;;		Nothing
  5598 ;; This function is called by:
  5599 ;;		_TMR2_Initialize
  5600 ;; This function uses a non-reentrant model
  5601 ;;
  5602                           
  5603                           	psect	text29
  5604  002272                     __ptext29:
  5605                           	opt stack 0
  5606  002272                     _TMR2_StartTimer:
  5607                           	opt stack 22
  5608                           
  5609                           ;tmr2.c: 32: T2CONbits.TMR2ON = 1;
  5610                           
  5611                           ;incstack = 0
  5612  002272  84BA               	bsf	4026,2,c	;volatile
  5613  002274  0012               	return		;funcret
  5614  002276                     __end_of_TMR2_StartTimer:
  5615                           	opt stack 0
  5616                           tblptru	equ	0xFF8
  5617                           tblptrh	equ	0xFF7
  5618                           tblptrl	equ	0xFF6
  5619                           tablat	equ	0xFF5
  5620                           prodh	equ	0xFF4
  5621                           prodl	equ	0xFF3
  5622                           intcon	equ	0xFF2
  5623                           postinc0	equ	0xFEE
  5624                           wreg	equ	0xFE8
  5625                           indf1	equ	0xFE7
  5626                           fsr1h	equ	0xFE2
  5627                           fsr1l	equ	0xFE1
  5628                           indf2	equ	0xFDF
  5629                           postinc2	equ	0xFDE
  5630                           postdec2	equ	0xFDD
  5631                           plusw2	equ	0xFDB
  5632                           fsr2h	equ	0xFDA
  5633                           fsr2l	equ	0xFD9
  5634                           status	equ	0xFD8
  5635                           
  5636 ;; *************** function _TMR1_Initialize *****************
  5637 ;; Defined at:
  5638 ;;		line 66 in file "mcc_generated_files/tmr1.c"
  5639 ;; Parameters:    Size  Location     Type
  5640 ;;		None
  5641 ;; Auto vars:     Size  Location     Type
  5642 ;;		None
  5643 ;; Return value:  Size  Location     Type
  5644 ;;                  1    wreg      void 
  5645 ;; Registers used:
  5646 ;;		wreg, status,2, cstack
  5647 ;; Tracked objects:
  5648 ;;		On entry : 0/0
  5649 ;;		On exit  : 0/0
  5650 ;;		Unchanged: 0/0
  5651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5652 ;;      Params:         0       0       0       0       0       0       0
  5653 ;;      Locals:         0       0       0       0       0       0       0
  5654 ;;      Temps:          0       0       0       0       0       0       0
  5655 ;;      Totals:         0       0       0       0       0       0       0
  5656 ;;Total ram usage:        0 bytes
  5657 ;; Hardware stack levels used:    1
  5658 ;; Hardware stack levels required when called:    7
  5659 ;; This function calls:
  5660 ;;		_TMR1_StartTimer
  5661 ;; This function is called by:
  5662 ;;		_SYSTEM_Initialize
  5663 ;; This function uses a non-reentrant model
  5664 ;;
  5665                           
  5666                           	psect	text30
  5667  0020F0                     __ptext30:
  5668                           	opt stack 0
  5669  0020F0                     _TMR1_Initialize:
  5670                           	opt stack 22
  5671                           
  5672                           ;tmr1.c: 71: T1CON = 0x00;
  5673                           
  5674                           ;incstack = 0
  5675  0020F0  0E00               	movlw	0
  5676  0020F2  6ECD               	movwf	4045,c	;volatile
  5677                           
  5678                           ;tmr1.c: 75: T1GCON = 0x00;
  5679  0020F4  0E00               	movlw	0
  5680  0020F6  6ECC               	movwf	4044,c	;volatile
  5681                           
  5682                           ;tmr1.c: 78: TMR1H = 0x00;
  5683  0020F8  0E00               	movlw	0
  5684  0020FA  6ECF               	movwf	4047,c	;volatile
  5685                           
  5686                           ;tmr1.c: 81: TMR1L = 0x00;
  5687  0020FC  0E00               	movlw	0
  5688  0020FE  6ECE               	movwf	4046,c	;volatile
  5689                           
  5690                           ;tmr1.c: 84: timer1ReloadVal=0;
  5691  002100  0E00               	movlw	0
  5692  002102  6E3E               	movwf	_timer1ReloadVal+1,c	;volatile
  5693  002104  0E00               	movlw	0
  5694  002106  6E3D               	movwf	_timer1ReloadVal,c	;volatile
  5695                           
  5696                           ;tmr1.c: 87: PIR1bits.TMR1IF = 0;
  5697  002108  909E               	bcf	3998,0,c	;volatile
  5698                           
  5699                           ;tmr1.c: 90: PIE1bits.TMR1IE = 1;
  5700  00210A  809D               	bsf	3997,0,c	;volatile
  5701                           
  5702                           ;tmr1.c: 93: TMR1_StartTimer();
  5703  00210C  EC3B  F011         	call	_TMR1_StartTimer	;wreg free
  5704  002110  0012               	return		;funcret
  5705  002112                     __end_of_TMR1_Initialize:
  5706                           	opt stack 0
  5707                           tblptru	equ	0xFF8
  5708                           tblptrh	equ	0xFF7
  5709                           tblptrl	equ	0xFF6
  5710                           tablat	equ	0xFF5
  5711                           prodh	equ	0xFF4
  5712                           prodl	equ	0xFF3
  5713                           intcon	equ	0xFF2
  5714                           postinc0	equ	0xFEE
  5715                           wreg	equ	0xFE8
  5716                           indf1	equ	0xFE7
  5717                           fsr1h	equ	0xFE2
  5718                           fsr1l	equ	0xFE1
  5719                           indf2	equ	0xFDF
  5720                           postinc2	equ	0xFDE
  5721                           postdec2	equ	0xFDD
  5722                           plusw2	equ	0xFDB
  5723                           fsr2h	equ	0xFDA
  5724                           fsr2l	equ	0xFD9
  5725                           status	equ	0xFD8
  5726                           
  5727 ;; *************** function _TMR1_StartTimer *****************
  5728 ;; Defined at:
  5729 ;;		line 96 in file "mcc_generated_files/tmr1.c"
  5730 ;; Parameters:    Size  Location     Type
  5731 ;;		None
  5732 ;; Auto vars:     Size  Location     Type
  5733 ;;		None
  5734 ;; Return value:  Size  Location     Type
  5735 ;;                  1    wreg      void 
  5736 ;; Registers used:
  5737 ;;		None
  5738 ;; Tracked objects:
  5739 ;;		On entry : 0/0
  5740 ;;		On exit  : 0/0
  5741 ;;		Unchanged: 0/0
  5742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5743 ;;      Params:         0       0       0       0       0       0       0
  5744 ;;      Locals:         0       0       0       0       0       0       0
  5745 ;;      Temps:          0       0       0       0       0       0       0
  5746 ;;      Totals:         0       0       0       0       0       0       0
  5747 ;;Total ram usage:        0 bytes
  5748 ;; Hardware stack levels used:    1
  5749 ;; Hardware stack levels required when called:    6
  5750 ;; This function calls:
  5751 ;;		Nothing
  5752 ;; This function is called by:
  5753 ;;		_TMR1_Initialize
  5754 ;; This function uses a non-reentrant model
  5755 ;;
  5756                           
  5757                           	psect	text31
  5758  002276                     __ptext31:
  5759                           	opt stack 0
  5760  002276                     _TMR1_StartTimer:
  5761                           	opt stack 22
  5762                           
  5763                           ;tmr1.c: 99: T1CONbits.TMR1ON = 1;
  5764                           
  5765                           ;incstack = 0
  5766  002276  80CD               	bsf	4045,0,c	;volatile
  5767  002278  0012               	return		;funcret
  5768  00227A                     __end_of_TMR1_StartTimer:
  5769                           	opt stack 0
  5770                           tblptru	equ	0xFF8
  5771                           tblptrh	equ	0xFF7
  5772                           tblptrl	equ	0xFF6
  5773                           tablat	equ	0xFF5
  5774                           prodh	equ	0xFF4
  5775                           prodl	equ	0xFF3
  5776                           intcon	equ	0xFF2
  5777                           postinc0	equ	0xFEE
  5778                           wreg	equ	0xFE8
  5779                           indf1	equ	0xFE7
  5780                           fsr1h	equ	0xFE2
  5781                           fsr1l	equ	0xFE1
  5782                           indf2	equ	0xFDF
  5783                           postinc2	equ	0xFDE
  5784                           postdec2	equ	0xFDD
  5785                           plusw2	equ	0xFDB
  5786                           fsr2h	equ	0xFDA
  5787                           fsr2l	equ	0xFD9
  5788                           status	equ	0xFD8
  5789                           
  5790 ;; *************** function _PWM4_Initialize *****************
  5791 ;; Defined at:
  5792 ;;		line 64 in file "mcc_generated_files/pwm4.c"
  5793 ;; Parameters:    Size  Location     Type
  5794 ;;		None
  5795 ;; Auto vars:     Size  Location     Type
  5796 ;;		None
  5797 ;; Return value:  Size  Location     Type
  5798 ;;                  1    wreg      void 
  5799 ;; Registers used:
  5800 ;;		wreg, status,2
  5801 ;; Tracked objects:
  5802 ;;		On entry : 0/0
  5803 ;;		On exit  : 0/0
  5804 ;;		Unchanged: 0/0
  5805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5806 ;;      Params:         0       0       0       0       0       0       0
  5807 ;;      Locals:         0       0       0       0       0       0       0
  5808 ;;      Temps:          0       0       0       0       0       0       0
  5809 ;;      Totals:         0       0       0       0       0       0       0
  5810 ;;Total ram usage:        0 bytes
  5811 ;; Hardware stack levels used:    1
  5812 ;; Hardware stack levels required when called:    6
  5813 ;; This function calls:
  5814 ;;		Nothing
  5815 ;; This function is called by:
  5816 ;;		_SYSTEM_Initialize
  5817 ;; This function uses a non-reentrant model
  5818 ;;
  5819                           
  5820                           	psect	text32
  5821  002206                     __ptext32:
  5822                           	opt stack 0
  5823  002206                     _PWM4_Initialize:
  5824                           	opt stack 23
  5825                           
  5826                           ;pwm4.c: 69: CCP2CON = 0x1C;
  5827                           
  5828                           ;incstack = 0
  5829  002206  0E1C               	movlw	28
  5830  002208  6E66               	movwf	3942,c	;volatile
  5831                           
  5832                           ;pwm4.c: 72: CCPR2L = 0x3E;
  5833  00220A  0E3E               	movlw	62
  5834  00220C  6E67               	movwf	3943,c	;volatile
  5835                           
  5836                           ;pwm4.c: 75: CCPR2H = 0x00;
  5837  00220E  0E00               	movlw	0
  5838  002210  6E68               	movwf	3944,c	;volatile
  5839                           
  5840                           ;pwm4.c: 78: CCPTMRS1bits.C4TSEL = 0x0;
  5841  002212  0EFC               	movlw	-4
  5842  002214  010F               	movlb	15	; () banked
  5843  002216  1748               	andwf	72,f,b	;volatile
  5844                           
  5845                           ; BSR set to: 15
  5846  002218  0012               	return		;funcret
  5847  00221A                     __end_of_PWM4_Initialize:
  5848                           	opt stack 0
  5849                           tblptru	equ	0xFF8
  5850                           tblptrh	equ	0xFF7
  5851                           tblptrl	equ	0xFF6
  5852                           tablat	equ	0xFF5
  5853                           prodh	equ	0xFF4
  5854                           prodl	equ	0xFF3
  5855                           intcon	equ	0xFF2
  5856                           postinc0	equ	0xFEE
  5857                           wreg	equ	0xFE8
  5858                           indf1	equ	0xFE7
  5859                           fsr1h	equ	0xFE2
  5860                           fsr1l	equ	0xFE1
  5861                           indf2	equ	0xFDF
  5862                           postinc2	equ	0xFDE
  5863                           postdec2	equ	0xFDD
  5864                           plusw2	equ	0xFDB
  5865                           fsr2h	equ	0xFDA
  5866                           fsr2l	equ	0xFD9
  5867                           status	equ	0xFD8
  5868                           
  5869 ;; *************** function _PIN_MANAGER_Initialize *****************
  5870 ;; Defined at:
  5871 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  5872 ;; Parameters:    Size  Location     Type
  5873 ;;		None
  5874 ;; Auto vars:     Size  Location     Type
  5875 ;;		None
  5876 ;; Return value:  Size  Location     Type
  5877 ;;                  1    wreg      void 
  5878 ;; Registers used:
  5879 ;;		wreg, status,2
  5880 ;; Tracked objects:
  5881 ;;		On entry : 0/0
  5882 ;;		On exit  : 0/0
  5883 ;;		Unchanged: 0/0
  5884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5885 ;;      Params:         0       0       0       0       0       0       0
  5886 ;;      Locals:         0       0       0       0       0       0       0
  5887 ;;      Temps:          0       0       0       0       0       0       0
  5888 ;;      Totals:         0       0       0       0       0       0       0
  5889 ;;Total ram usage:        0 bytes
  5890 ;; Hardware stack levels used:    1
  5891 ;; Hardware stack levels required when called:    6
  5892 ;; This function calls:
  5893 ;;		Nothing
  5894 ;; This function is called by:
  5895 ;;		_SYSTEM_Initialize
  5896 ;; This function uses a non-reentrant model
  5897 ;;
  5898                           
  5899                           	psect	text33
  5900  001A56                     __ptext33:
  5901                           	opt stack 0
  5902  001A56                     _PIN_MANAGER_Initialize:
  5903                           	opt stack 23
  5904                           
  5905                           ;pin_manager.c: 52: LATA = 0x00;
  5906                           
  5907                           ; BSR set to: 15
  5908                           ;incstack = 0
  5909  001A56  0E00               	movlw	0
  5910  001A58  6E89               	movwf	3977,c	;volatile
  5911                           
  5912                           ;pin_manager.c: 53: TRISA = 0xF7;
  5913  001A5A  0EF7               	movlw	247
  5914  001A5C  6E92               	movwf	3986,c	;volatile
  5915                           
  5916                           ;pin_manager.c: 54: ANSELA = 0x27;
  5917  001A5E  0E27               	movlw	39
  5918  001A60  010F               	movlb	15	; () banked
  5919  001A62  6F38               	movwf	56,b	;volatile
  5920                           
  5921                           ;pin_manager.c: 56: LATB = 0x01;
  5922  001A64  0E01               	movlw	1
  5923  001A66  6E8A               	movwf	3978,c	;volatile
  5924                           
  5925                           ;pin_manager.c: 57: TRISB = 0xFE;
  5926  001A68  0EFE               	movlw	254
  5927  001A6A  6E93               	movwf	3987,c	;volatile
  5928                           
  5929                           ;pin_manager.c: 58: ANSELB = 0x3E;
  5930  001A6C  0E3E               	movlw	62
  5931  001A6E  010F               	movlb	15	; () banked
  5932  001A70  6F39               	movwf	57,b	;volatile
  5933                           
  5934                           ;pin_manager.c: 59: WPUB = 0x00;
  5935  001A72  0E00               	movlw	0
  5936  001A74  6E61               	movwf	3937,c	;volatile
  5937                           
  5938                           ;pin_manager.c: 61: LATC = 0x00;
  5939  001A76  0E00               	movlw	0
  5940  001A78  6E8B               	movwf	3979,c	;volatile
  5941                           
  5942                           ;pin_manager.c: 62: TRISC = 0xDF;
  5943  001A7A  0EDF               	movlw	223
  5944  001A7C  6E94               	movwf	3988,c	;volatile
  5945                           
  5946                           ;pin_manager.c: 63: ANSELC = 0x1C;
  5947  001A7E  0E1C               	movlw	28
  5948  001A80  010F               	movlb	15	; () banked
  5949  001A82  6F3A               	movwf	58,b	;volatile
  5950                           
  5951                           ;pin_manager.c: 65: LATD = 0x00;
  5952  001A84  0E00               	movlw	0
  5953  001A86  6E8C               	movwf	3980,c	;volatile
  5954                           
  5955                           ;pin_manager.c: 66: TRISD = 0x0F;
  5956  001A88  0E0F               	movlw	15
  5957  001A8A  6E95               	movwf	3989,c	;volatile
  5958                           
  5959                           ;pin_manager.c: 67: ANSELD = 0x0F;
  5960  001A8C  0E0F               	movlw	15
  5961  001A8E  010F               	movlb	15	; () banked
  5962  001A90  6F3B               	movwf	59,b	;volatile
  5963                           
  5964                           ;pin_manager.c: 69: LATE = 0x00;
  5965  001A92  0E00               	movlw	0
  5966  001A94  6E8D               	movwf	3981,c	;volatile
  5967                           
  5968                           ;pin_manager.c: 70: TRISE = 0x07;
  5969  001A96  0E07               	movlw	7
  5970  001A98  6E96               	movwf	3990,c	;volatile
  5971                           
  5972                           ;pin_manager.c: 71: ANSELE = 0x07;
  5973  001A9A  0E07               	movlw	7
  5974  001A9C  010F               	movlb	15	; () banked
  5975  001A9E  6F3C               	movwf	60,b	;volatile
  5976                           
  5977                           ; BSR set to: 15
  5978                           ;pin_manager.c: 72: TRISCbits.RC6 = 1;
  5979  001AA0  8C94               	bsf	3988,6,c	;volatile
  5980                           
  5981                           ; BSR set to: 15
  5982                           ;pin_manager.c: 73: TRISCbits.RC7 = 1;
  5983  001AA2  8E94               	bsf	3988,7,c	;volatile
  5984                           
  5985                           ; BSR set to: 15
  5986                           ;pin_manager.c: 74: TRISCbits.RC5 = 0;
  5987  001AA4  9A94               	bcf	3988,5,c	;volatile
  5988                           
  5989                           ; BSR set to: 15
  5990                           ;pin_manager.c: 75: LATCbits.LATC5 = 1;
  5991  001AA6  8A8B               	bsf	3979,5,c	;volatile
  5992                           
  5993                           ; BSR set to: 15
  5994                           ;pin_manager.c: 76: LATCbits.LATC6 = 1;
  5995  001AA8  8C8B               	bsf	3979,6,c	;volatile
  5996                           
  5997                           ; BSR set to: 15
  5998                           ;pin_manager.c: 77: LATCbits.LATC7 = 1;
  5999  001AAA  8E8B               	bsf	3979,7,c	;volatile
  6000                           
  6001                           ; BSR set to: 15
  6002                           ;pin_manager.c: 78: ANSELCbits.ANSC5 =0;
  6003  001AAC  010F               	movlb	15	; () banked
  6004  001AAE  9B3A               	bcf	58,5,b	;volatile
  6005                           
  6006                           ; BSR set to: 15
  6007                           ;pin_manager.c: 79: ANSELCbits.ANSC6 =0;
  6008  001AB0  010F               	movlb	15	; () banked
  6009  001AB2  9D3A               	bcf	58,6,b	;volatile
  6010                           
  6011                           ; BSR set to: 15
  6012                           ;pin_manager.c: 80: ANSELCbits.ANSC7 =0;
  6013  001AB4  010F               	movlb	15	; () banked
  6014  001AB6  9F3A               	bcf	58,7,b	;volatile
  6015                           
  6016                           ; BSR set to: 15
  6017                           ;pin_manager.c: 82: INTCON2bits.nRBPU = 0x01;
  6018  001AB8  8EF1               	bsf	intcon2,7,c	;volatile
  6019                           
  6020                           ; BSR set to: 15
  6021                           
  6022                           ; BSR set to: 15
  6023                           
  6024                           ;pin_manager.c: 84: do { TRISB4 = 0; } while(0);
  6025  001ABA  9893               	bcf	3987,4,c	;volatile
  6026                           
  6027                           ; BSR set to: 15
  6028                           
  6029                           ; BSR set to: 15
  6030                           
  6031                           ;pin_manager.c: 85: do { TRISB3 = 0; } while(0);
  6032                           
  6033                           ; BSR set to: 15
  6034  001ABC  9693               	bcf	3987,3,c	;volatile
  6035                           
  6036                           ; BSR set to: 15
  6037                           
  6038                           ; BSR set to: 15
  6039                           
  6040                           ;pin_manager.c: 86: do { TRISB5 = 0; } while(0);
  6041                           
  6042                           ; BSR set to: 15
  6043  001ABE  9A93               	bcf	3987,5,c	;volatile
  6044                           
  6045                           ; BSR set to: 15
  6046                           ;pin_manager.c: 88: TRISDbits.RD1 = 0;
  6047                           
  6048                           ; BSR set to: 15
  6049  001AC0  9295               	bcf	3989,1,c	;volatile
  6050                           
  6051                           ; BSR set to: 15
  6052                           
  6053                           ; BSR set to: 15
  6054                           
  6055                           ;pin_manager.c: 90: do { ANSB3 = 0; } while(0);
  6056  001AC2  010F               	movlb	15	; () banked
  6057  001AC4  9739               	bcf	57,3,b	;volatile
  6058                           
  6059                           ; BSR set to: 15
  6060                           
  6061                           ; BSR set to: 15
  6062                           
  6063                           ;pin_manager.c: 91: do { ANSD7 = 0; } while(0);
  6064                           
  6065                           ; BSR set to: 15
  6066  001AC6  010F               	movlb	15	; () banked
  6067  001AC8  9F3B               	bcf	59,7,b	;volatile
  6068                           
  6069                           ; BSR set to: 15
  6070                           
  6071                           ; BSR set to: 15
  6072                           
  6073                           ;pin_manager.c: 92: do { ANSB4 = 0; } while(0);
  6074                           
  6075                           ; BSR set to: 15
  6076  001ACA  010F               	movlb	15	; () banked
  6077  001ACC  9939               	bcf	57,4,b	;volatile
  6078  001ACE  0012               	return	
  6079  001AD0                     __end_of_PIN_MANAGER_Initialize:
  6080                           	opt stack 0
  6081                           tblptru	equ	0xFF8
  6082                           tblptrh	equ	0xFF7
  6083                           tblptrl	equ	0xFF6
  6084                           tablat	equ	0xFF5
  6085                           prodh	equ	0xFF4
  6086                           prodl	equ	0xFF3
  6087                           intcon	equ	0xFF2
  6088                           intcon2	equ	0xFF1
  6089                           postinc0	equ	0xFEE
  6090                           wreg	equ	0xFE8
  6091                           indf1	equ	0xFE7
  6092                           fsr1h	equ	0xFE2
  6093                           fsr1l	equ	0xFE1
  6094                           indf2	equ	0xFDF
  6095                           postinc2	equ	0xFDE
  6096                           postdec2	equ	0xFDD
  6097                           plusw2	equ	0xFDB
  6098                           fsr2h	equ	0xFDA
  6099                           fsr2l	equ	0xFD9
  6100                           status	equ	0xFD8
  6101                           
  6102 ;; *************** function _OSCILLATOR_Initialize *****************
  6103 ;; Defined at:
  6104 ;;		line 125 in file "mcc_generated_files/mcc.c"
  6105 ;; Parameters:    Size  Location     Type
  6106 ;;		None
  6107 ;; Auto vars:     Size  Location     Type
  6108 ;;		None
  6109 ;; Return value:  Size  Location     Type
  6110 ;;                  1    wreg      void 
  6111 ;; Registers used:
  6112 ;;		wreg, status,2
  6113 ;; Tracked objects:
  6114 ;;		On entry : 0/0
  6115 ;;		On exit  : 0/0
  6116 ;;		Unchanged: 0/0
  6117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6118 ;;      Params:         0       0       0       0       0       0       0
  6119 ;;      Locals:         0       0       0       0       0       0       0
  6120 ;;      Temps:          0       0       0       0       0       0       0
  6121 ;;      Totals:         0       0       0       0       0       0       0
  6122 ;;Total ram usage:        0 bytes
  6123 ;; Hardware stack levels used:    1
  6124 ;; Hardware stack levels required when called:    6
  6125 ;; This function calls:
  6126 ;;		Nothing
  6127 ;; This function is called by:
  6128 ;;		_SYSTEM_Initialize
  6129 ;; This function uses a non-reentrant model
  6130 ;;
  6131                           
  6132                           	psect	text34
  6133  00224E                     __ptext34:
  6134                           	opt stack 0
  6135  00224E                     _OSCILLATOR_Initialize:
  6136                           	opt stack 23
  6137                           
  6138                           ;mcc.c: 127: OSCCON = 0x72;
  6139                           
  6140                           ; BSR set to: 15
  6141                           ;incstack = 0
  6142  00224E  0E72               	movlw	114
  6143  002250  6ED3               	movwf	4051,c	;volatile
  6144                           
  6145                           ;mcc.c: 129: OSCCON2 = 0x04;
  6146  002252  0E04               	movlw	4
  6147  002254  6ED2               	movwf	4050,c	;volatile
  6148                           
  6149                           ;mcc.c: 131: OSCTUNE = 0x00;
  6150  002256  0E00               	movlw	0
  6151  002258  6E9B               	movwf	3995,c	;volatile
  6152  00225A  0012               	return		;funcret
  6153  00225C                     __end_of_OSCILLATOR_Initialize:
  6154                           	opt stack 0
  6155                           tblptru	equ	0xFF8
  6156                           tblptrh	equ	0xFF7
  6157                           tblptrl	equ	0xFF6
  6158                           tablat	equ	0xFF5
  6159                           prodh	equ	0xFF4
  6160                           prodl	equ	0xFF3
  6161                           intcon	equ	0xFF2
  6162                           intcon2	equ	0xFF1
  6163                           postinc0	equ	0xFEE
  6164                           wreg	equ	0xFE8
  6165                           indf1	equ	0xFE7
  6166                           fsr1h	equ	0xFE2
  6167                           fsr1l	equ	0xFE1
  6168                           indf2	equ	0xFDF
  6169                           postinc2	equ	0xFDE
  6170                           postdec2	equ	0xFDD
  6171                           plusw2	equ	0xFDB
  6172                           fsr2h	equ	0xFDA
  6173                           fsr2l	equ	0xFD9
  6174                           status	equ	0xFD8
  6175                           
  6176 ;; *************** function _INTERRUPT_Initialize *****************
  6177 ;; Defined at:
  6178 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  6179 ;; Parameters:    Size  Location     Type
  6180 ;;		None
  6181 ;; Auto vars:     Size  Location     Type
  6182 ;;		None
  6183 ;; Return value:  Size  Location     Type
  6184 ;;                  1    wreg      void 
  6185 ;; Registers used:
  6186 ;;		None
  6187 ;; Tracked objects:
  6188 ;;		On entry : 0/0
  6189 ;;		On exit  : 0/0
  6190 ;;		Unchanged: 0/0
  6191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6192 ;;      Params:         0       0       0       0       0       0       0
  6193 ;;      Locals:         0       0       0       0       0       0       0
  6194 ;;      Temps:          0       0       0       0       0       0       0
  6195 ;;      Totals:         0       0       0       0       0       0       0
  6196 ;;Total ram usage:        0 bytes
  6197 ;; Hardware stack levels used:    1
  6198 ;; Hardware stack levels required when called:    6
  6199 ;; This function calls:
  6200 ;;		Nothing
  6201 ;; This function is called by:
  6202 ;;		_SYSTEM_Initialize
  6203 ;; This function uses a non-reentrant model
  6204 ;;
  6205                           
  6206                           	psect	text35
  6207  00225C                     __ptext35:
  6208                           	opt stack 0
  6209  00225C                     _INTERRUPT_Initialize:
  6210                           	opt stack 23
  6211                           
  6212                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  6213                           
  6214                           ;incstack = 0
  6215  00225C  9ED0               	bcf	4048,7,c	;volatile
  6216                           
  6217                           ;interrupt_manager.c: 60: IPR1bits.RC1IP = 0;
  6218  00225E  9A9F               	bcf	3999,5,c	;volatile
  6219                           
  6220                           ;interrupt_manager.c: 62: IPR1bits.TX1IP = 0;
  6221  002260  989F               	bcf	3999,4,c	;volatile
  6222                           
  6223                           ;interrupt_manager.c: 64: IPR1bits.ADIP = 0;
  6224  002262  9C9F               	bcf	3999,6,c	;volatile
  6225  002264  0012               	return		;funcret
  6226  002266                     __end_of_INTERRUPT_Initialize:
  6227                           	opt stack 0
  6228                           tblptru	equ	0xFF8
  6229                           tblptrh	equ	0xFF7
  6230                           tblptrl	equ	0xFF6
  6231                           tablat	equ	0xFF5
  6232                           prodh	equ	0xFF4
  6233                           prodl	equ	0xFF3
  6234                           intcon	equ	0xFF2
  6235                           intcon2	equ	0xFF1
  6236                           postinc0	equ	0xFEE
  6237                           wreg	equ	0xFE8
  6238                           indf1	equ	0xFE7
  6239                           fsr1h	equ	0xFE2
  6240                           fsr1l	equ	0xFE1
  6241                           indf2	equ	0xFDF
  6242                           postinc2	equ	0xFDE
  6243                           postdec2	equ	0xFDD
  6244                           plusw2	equ	0xFDB
  6245                           fsr2h	equ	0xFDA
  6246                           fsr2l	equ	0xFD9
  6247                           status	equ	0xFD8
  6248                           
  6249 ;; *************** function _EUSART1_Initialize *****************
  6250 ;; Defined at:
  6251 ;;		line 20 in file "UART.c"
  6252 ;; Parameters:    Size  Location     Type
  6253 ;;		None
  6254 ;; Auto vars:     Size  Location     Type
  6255 ;;		None
  6256 ;; Return value:  Size  Location     Type
  6257 ;;                  1    wreg      void 
  6258 ;; Registers used:
  6259 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6260 ;; Tracked objects:
  6261 ;;		On entry : 0/0
  6262 ;;		On exit  : 0/0
  6263 ;;		Unchanged: 0/0
  6264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6265 ;;      Params:         0       0       0       0       0       0       0
  6266 ;;      Locals:         0       0       0       0       0       0       0
  6267 ;;      Temps:          0       0       0       0       0       0       0
  6268 ;;      Totals:         0       0       0       0       0       0       0
  6269 ;;Total ram usage:        0 bytes
  6270 ;; Hardware stack levels used:    1
  6271 ;; Hardware stack levels required when called:    8
  6272 ;; This function calls:
  6273 ;;		_UART_buff_init
  6274 ;; This function is called by:
  6275 ;;		_SYSTEM_Initialize
  6276 ;; This function uses a non-reentrant model
  6277 ;;
  6278                           
  6279                           	psect	text36
  6280  001EF8                     __ptext36:
  6281                           	opt stack 0
  6282  001EF8                     _EUSART1_Initialize:
  6283                           	opt stack 21
  6284                           
  6285                           ;UART.c: 22: PIE1bits.RC1IE = 0;
  6286                           
  6287                           ;incstack = 0
  6288  001EF8  9A9D               	bcf	3997,5,c	;volatile
  6289                           
  6290                           ;UART.c: 23: PIE1bits.TX1IE = 0;
  6291  001EFA  989D               	bcf	3997,4,c	;volatile
  6292                           
  6293                           ;UART.c: 28: BAUD1CON = 0x48;
  6294  001EFC  0E48               	movlw	72
  6295  001EFE  6EB8               	movwf	4024,c	;volatile
  6296                           
  6297                           ;UART.c: 31: RC1STA = 0x98;
  6298  001F00  0E98               	movlw	152
  6299  001F02  6EAB               	movwf	4011,c	;volatile
  6300                           
  6301                           ;UART.c: 34: TX1STA = 0x26;
  6302  001F04  0E26               	movlw	38
  6303  001F06  6EAC               	movwf	4012,c	;volatile
  6304                           
  6305                           ;UART.c: 37: SPBRG1 = (((16000000/38400)/4)-1);
  6306  001F08  0E67               	movlw	103
  6307  001F0A  6EAF               	movwf	4015,c	;volatile
  6308                           
  6309                           ;UART.c: 40: SPBRGH1 = 0x00;
  6310  001F0C  0E00               	movlw	0
  6311  001F0E  6EB0               	movwf	4016,c	;volatile
  6312                           
  6313                           ;UART.c: 43: TXREG1 = 0x00;
  6314  001F10  0E00               	movlw	0
  6315  001F12  6EAD               	movwf	4013,c	;volatile
  6316                           
  6317                           ;UART.c: 46: RCREG1 = 0x00;
  6318  001F14  0E00               	movlw	0
  6319  001F16  6EAE               	movwf	4014,c	;volatile
  6320                           
  6321                           ;UART.c: 48: UART_buff_init(&input_buffer);
  6322  001F18  0E30               	movlw	low _input_buffer
  6323  001F1A  6E25               	movwf	UART_buff_init@_this,c
  6324  001F1C  0E01               	movlw	high _input_buffer
  6325  001F1E  6E26               	movwf	UART_buff_init@_this+1,c
  6326  001F20  EC98  F010         	call	_UART_buff_init	;wreg free
  6327                           
  6328                           ;UART.c: 49: UART_buff_init(&output_buffer);
  6329  001F24  0E00               	movlw	low _output_buffer
  6330  001F26  6E25               	movwf	UART_buff_init@_this,c
  6331  001F28  0E02               	movlw	high _output_buffer
  6332  001F2A  6E26               	movwf	UART_buff_init@_this+1,c
  6333  001F2C  EC98  F010         	call	_UART_buff_init	;wreg free
  6334                           
  6335                           ;UART.c: 51: PIE1bits.RC1IE = 1;
  6336  001F30  8A9D               	bsf	3997,5,c	;volatile
  6337  001F32  0012               	return		;funcret
  6338  001F34                     __end_of_EUSART1_Initialize:
  6339                           	opt stack 0
  6340                           tblptru	equ	0xFF8
  6341                           tblptrh	equ	0xFF7
  6342                           tblptrl	equ	0xFF6
  6343                           tablat	equ	0xFF5
  6344                           prodh	equ	0xFF4
  6345                           prodl	equ	0xFF3
  6346                           intcon	equ	0xFF2
  6347                           intcon2	equ	0xFF1
  6348                           postinc0	equ	0xFEE
  6349                           wreg	equ	0xFE8
  6350                           indf1	equ	0xFE7
  6351                           fsr1h	equ	0xFE2
  6352                           fsr1l	equ	0xFE1
  6353                           indf2	equ	0xFDF
  6354                           postinc2	equ	0xFDE
  6355                           postdec2	equ	0xFDD
  6356                           plusw2	equ	0xFDB
  6357                           fsr2h	equ	0xFDA
  6358                           fsr2l	equ	0xFD9
  6359                           status	equ	0xFD8
  6360                           
  6361 ;; *************** function _UART_buff_init *****************
  6362 ;; Defined at:
  6363 ;;		line 55 in file "UART.c"
  6364 ;; Parameters:    Size  Location     Type
  6365 ;;  _this           2   36[COMRAM] PTR struct UART_ring_buf
  6366 ;;		 -> output_buffer(106), input_buffer(106), 
  6367 ;; Auto vars:     Size  Location     Type
  6368 ;;		None
  6369 ;; Return value:  Size  Location     Type
  6370 ;;                  1    wreg      void 
  6371 ;; Registers used:
  6372 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6373 ;; Tracked objects:
  6374 ;;		On entry : 0/0
  6375 ;;		On exit  : 0/0
  6376 ;;		Unchanged: 0/0
  6377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6378 ;;      Params:         2       0       0       0       0       0       0
  6379 ;;      Locals:         0       0       0       0       0       0       0
  6380 ;;      Temps:          0       0       0       0       0       0       0
  6381 ;;      Totals:         2       0       0       0       0       0       0
  6382 ;;Total ram usage:        2 bytes
  6383 ;; Hardware stack levels used:    1
  6384 ;; Hardware stack levels required when called:    7
  6385 ;; This function calls:
  6386 ;;		_memset
  6387 ;; This function is called by:
  6388 ;;		_EUSART1_Initialize
  6389 ;; This function uses a non-reentrant model
  6390 ;;
  6391                           
  6392                           	psect	text37
  6393  002130                     __ptext37:
  6394                           	opt stack 0
  6395  002130                     _UART_buff_init:
  6396                           	opt stack 21
  6397                           
  6398                           ;UART.c: 64: memset(_this, 0, sizeof (*_this));
  6399                           
  6400                           ;incstack = 0
  6401  002130  C025  F01D         	movff	UART_buff_init@_this,memset@p1
  6402  002134  C026  F01E         	movff	UART_buff_init@_this+1,memset@p1+1
  6403  002138  0E00               	movlw	0
  6404  00213A  6E20               	movwf	memset@c+1,c
  6405  00213C  0E00               	movlw	0
  6406  00213E  6E1F               	movwf	memset@c,c
  6407  002140  0E00               	movlw	0
  6408  002142  6E22               	movwf	memset@n+1,c
  6409  002144  0E6A               	movlw	106
  6410  002146  6E21               	movwf	memset@n,c
  6411  002148  EC13  F010         	call	_memset	;wreg free
  6412  00214C  0012               	return		;funcret
  6413  00214E                     __end_of_UART_buff_init:
  6414                           	opt stack 0
  6415                           tblptru	equ	0xFF8
  6416                           tblptrh	equ	0xFF7
  6417                           tblptrl	equ	0xFF6
  6418                           tablat	equ	0xFF5
  6419                           prodh	equ	0xFF4
  6420                           prodl	equ	0xFF3
  6421                           intcon	equ	0xFF2
  6422                           intcon2	equ	0xFF1
  6423                           postinc0	equ	0xFEE
  6424                           wreg	equ	0xFE8
  6425                           indf1	equ	0xFE7
  6426                           fsr1h	equ	0xFE2
  6427                           fsr1l	equ	0xFE1
  6428                           indf2	equ	0xFDF
  6429                           postinc2	equ	0xFDE
  6430                           postdec2	equ	0xFDD
  6431                           plusw2	equ	0xFDB
  6432                           fsr2h	equ	0xFDA
  6433                           fsr2l	equ	0xFD9
  6434                           status	equ	0xFD8
  6435                           
  6436 ;; *************** function _memset *****************
  6437 ;; Defined at:
  6438 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\memset.c"
  6439 ;; Parameters:    Size  Location     Type
  6440 ;;  p1              2   28[COMRAM] PTR void 
  6441 ;;		 -> output_buffer(106), input_buffer(106), 
  6442 ;;  c               2   30[COMRAM] int 
  6443 ;;  n               2   32[COMRAM] unsigned int 
  6444 ;; Auto vars:     Size  Location     Type
  6445 ;;  p               2   34[COMRAM] PTR unsigned char 
  6446 ;;		 -> output_buffer(106), input_buffer(106), 
  6447 ;; Return value:  Size  Location     Type
  6448 ;;                  2   28[COMRAM] PTR void 
  6449 ;; Registers used:
  6450 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6451 ;; Tracked objects:
  6452 ;;		On entry : 0/0
  6453 ;;		On exit  : 0/0
  6454 ;;		Unchanged: 0/0
  6455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6456 ;;      Params:         6       0       0       0       0       0       0
  6457 ;;      Locals:         2       0       0       0       0       0       0
  6458 ;;      Temps:          0       0       0       0       0       0       0
  6459 ;;      Totals:         8       0       0       0       0       0       0
  6460 ;;Total ram usage:        8 bytes
  6461 ;; Hardware stack levels used:    1
  6462 ;; Hardware stack levels required when called:    6
  6463 ;; This function calls:
  6464 ;;		Nothing
  6465 ;; This function is called by:
  6466 ;;		_UART_buff_init
  6467 ;;		_UART_buff_flush
  6468 ;; This function uses a non-reentrant model
  6469 ;;
  6470                           
  6471                           	psect	text38
  6472  002026                     __ptext38:
  6473                           	opt stack 0
  6474  002026                     _memset:
  6475                           	opt stack 20
  6476                           
  6477                           ;incstack = 0
  6478  002026  C01D  F023         	movff	memset@p1,memset@p
  6479  00202A  C01E  F024         	movff	memset@p1+1,memset@p+1
  6480  00202E  D008               	goto	l3700
  6481  002030                     l3696:
  6482  002030  C023  FFD9         	movff	memset@p,fsr2l
  6483  002034  C024  FFDA         	movff	memset@p+1,fsr2h
  6484  002038  C01F  FFDF         	movff	memset@c,indf2
  6485  00203C  4A23               	infsnz	memset@p,f,c
  6486  00203E  2A24               	incf	memset@p+1,f,c
  6487  002040                     l3700:
  6488  002040  0621               	decf	memset@n,f,c
  6489  002042  A0D8               	btfss	status,0,c
  6490  002044  0622               	decf	memset@n+1,f,c
  6491  002046  2821               	incf	memset@n,w,c
  6492  002048  E1F3               	bnz	l3696
  6493  00204A  2822               	incf	memset@n+1,w,c
  6494  00204C  B4D8               	btfsc	status,2,c
  6495  00204E  0012               	return	
  6496  002050  D7EF               	goto	l3696
  6497  002052                     __end_of_memset:
  6498                           	opt stack 0
  6499                           tblptru	equ	0xFF8
  6500                           tblptrh	equ	0xFF7
  6501                           tblptrl	equ	0xFF6
  6502                           tablat	equ	0xFF5
  6503                           prodh	equ	0xFF4
  6504                           prodl	equ	0xFF3
  6505                           intcon	equ	0xFF2
  6506                           intcon2	equ	0xFF1
  6507                           postinc0	equ	0xFEE
  6508                           wreg	equ	0xFE8
  6509                           indf1	equ	0xFE7
  6510                           fsr1h	equ	0xFE2
  6511                           fsr1l	equ	0xFE1
  6512                           indf2	equ	0xFDF
  6513                           postinc2	equ	0xFDE
  6514                           postdec2	equ	0xFDD
  6515                           plusw2	equ	0xFDB
  6516                           fsr2h	equ	0xFDA
  6517                           fsr2l	equ	0xFD9
  6518                           status	equ	0xFD8
  6519                           
  6520 ;; *************** function _ADC_Initialize *****************
  6521 ;; Defined at:
  6522 ;;		line 59 in file "mcc_generated_files/adc.c"
  6523 ;; Parameters:    Size  Location     Type
  6524 ;;		None
  6525 ;; Auto vars:     Size  Location     Type
  6526 ;;		None
  6527 ;; Return value:  Size  Location     Type
  6528 ;;                  1    wreg      void 
  6529 ;; Registers used:
  6530 ;;		wreg, status,2
  6531 ;; Tracked objects:
  6532 ;;		On entry : 0/0
  6533 ;;		On exit  : 0/0
  6534 ;;		Unchanged: 0/0
  6535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6536 ;;      Params:         0       0       0       0       0       0       0
  6537 ;;      Locals:         0       0       0       0       0       0       0
  6538 ;;      Temps:          0       0       0       0       0       0       0
  6539 ;;      Totals:         0       0       0       0       0       0       0
  6540 ;;Total ram usage:        0 bytes
  6541 ;; Hardware stack levels used:    1
  6542 ;; Hardware stack levels required when called:    6
  6543 ;; This function calls:
  6544 ;;		Nothing
  6545 ;; This function is called by:
  6546 ;;		_SYSTEM_Initialize
  6547 ;; This function uses a non-reentrant model
  6548 ;;
  6549                           
  6550                           	psect	text39
  6551  00216C                     __ptext39:
  6552                           	opt stack 0
  6553  00216C                     _ADC_Initialize:
  6554                           	opt stack 23
  6555                           
  6556                           ;adc.c: 64: ADCON0 = 0x01;
  6557                           
  6558                           ;incstack = 0
  6559  00216C  0E01               	movlw	1
  6560  00216E  6EC2               	movwf	4034,c	;volatile
  6561                           
  6562                           ;adc.c: 67: ADCON1 = 0x80;
  6563  002170  0E80               	movlw	128
  6564  002172  6EC1               	movwf	4033,c	;volatile
  6565                           
  6566                           ;adc.c: 70: ADCON2 = 0x12;
  6567  002174  0E12               	movlw	18
  6568  002176  6EC0               	movwf	4032,c	;volatile
  6569                           
  6570                           ;adc.c: 72: ADCON2bits.ADFM = 1;
  6571  002178  8EC0               	bsf	4032,7,c	;volatile
  6572                           
  6573                           ;adc.c: 75: ADRESL = 0x00;
  6574  00217A  0E00               	movlw	0
  6575  00217C  6EC3               	movwf	4035,c	;volatile
  6576                           
  6577                           ;adc.c: 78: ADRESH = 0x00;
  6578  00217E  0E00               	movlw	0
  6579  002180  6EC4               	movwf	4036,c	;volatile
  6580  002182  0012               	return		;funcret
  6581  002184                     __end_of_ADC_Initialize:
  6582                           	opt stack 0
  6583                           tblptru	equ	0xFF8
  6584                           tblptrh	equ	0xFF7
  6585                           tblptrl	equ	0xFF6
  6586                           tablat	equ	0xFF5
  6587                           prodh	equ	0xFF4
  6588                           prodl	equ	0xFF3
  6589                           intcon	equ	0xFF2
  6590                           intcon2	equ	0xFF1
  6591                           postinc0	equ	0xFEE
  6592                           wreg	equ	0xFE8
  6593                           indf1	equ	0xFE7
  6594                           fsr1h	equ	0xFE2
  6595                           fsr1l	equ	0xFE1
  6596                           indf2	equ	0xFDF
  6597                           postinc2	equ	0xFDE
  6598                           postdec2	equ	0xFDD
  6599                           plusw2	equ	0xFDB
  6600                           fsr2h	equ	0xFDA
  6601                           fsr2l	equ	0xFD9
  6602                           status	equ	0xFD8
  6603                           
  6604 ;; *************** function _PDUStartup *****************
  6605 ;; Defined at:
  6606 ;;		line 20 in file "PDU.c"
  6607 ;; Parameters:    Size  Location     Type
  6608 ;;		None
  6609 ;; Auto vars:     Size  Location     Type
  6610 ;;		None
  6611 ;; Return value:  Size  Location     Type
  6612 ;;                  1    wreg      void 
  6613 ;; Registers used:
  6614 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6615 ;; Tracked objects:
  6616 ;;		On entry : 0/0
  6617 ;;		On exit  : 0/0
  6618 ;;		Unchanged: 0/0
  6619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6620 ;;      Params:         0       0       0       0       0       0       0
  6621 ;;      Locals:         0       0       0       0       0       0       0
  6622 ;;      Temps:          0       0       0       0       0       0       0
  6623 ;;      Totals:         0       0       0       0       0       0       0
  6624 ;;Total ram usage:        0 bytes
  6625 ;; Hardware stack levels used:    1
  6626 ;; Hardware stack levels required when called:   10
  6627 ;; This function calls:
  6628 ;;		_ComputeStorageData
  6629 ;;		_EnableSlavePower
  6630 ;;		_StartUp595
  6631 ;;		_Update
  6632 ;; This function is called by:
  6633 ;;		_main
  6634 ;; This function uses a non-reentrant model
  6635 ;;
  6636                           
  6637                           	psect	text40
  6638  001B32                     __ptext40:
  6639                           	opt stack 0
  6640  001B32                     _PDUStartup:
  6641                           	opt stack 20
  6642                           
  6643                           ;PDU.c: 23: StartUp595();
  6644                           
  6645                           ;incstack = 0
  6646  001B32  ECCA  F00D         	call	_StartUp595	;wreg free
  6647                           
  6648                           ;PDU.c: 24: EnableSlavePower(SAS, ON);
  6649  001B36  0E00               	movlw	0
  6650  001B38  6E28               	movwf	EnableSlavePower@onof+1,c
  6651  001B3A  0E01               	movlw	1
  6652  001B3C  6E27               	movwf	EnableSlavePower@onof,c
  6653  001B3E  0E03               	movlw	3
  6654  001B40  EC00  F00A         	call	_EnableSlavePower
  6655                           
  6656                           ;PDU.c: 25: EnableSlavePower(DDS, ON);
  6657  001B44  0E00               	movlw	0
  6658  001B46  6E28               	movwf	EnableSlavePower@onof+1,c
  6659  001B48  0E01               	movlw	1
  6660  001B4A  6E27               	movwf	EnableSlavePower@onof,c
  6661  001B4C  0E01               	movlw	1
  6662  001B4E  EC00  F00A         	call	_EnableSlavePower
  6663                           
  6664                           ;PDU.c: 26: EnableSlavePower(MCS, OFF);
  6665  001B52  0E00               	movlw	0
  6666  001B54  6E28               	movwf	EnableSlavePower@onof+1,c
  6667  001B56  0E00               	movlw	0
  6668  001B58  6E27               	movwf	EnableSlavePower@onof,c
  6669  001B5A  0E02               	movlw	2
  6670  001B5C  EC00  F00A         	call	_EnableSlavePower
  6671                           
  6672                           ;PDU.c: 27: EnableSlavePower(BMM, ON);
  6673  001B60  0E00               	movlw	0
  6674  001B62  6E28               	movwf	EnableSlavePower@onof+1,c
  6675  001B64  0E01               	movlw	1
  6676  001B66  6E27               	movwf	EnableSlavePower@onof,c
  6677  001B68  0E04               	movlw	4
  6678  001B6A  EC00  F00A         	call	_EnableSlavePower
  6679                           
  6680                           ;PDU.c: 28: EnableSlavePower(TSS, OFF);
  6681  001B6E  0E00               	movlw	0
  6682  001B70  6E28               	movwf	EnableSlavePower@onof+1,c
  6683  001B72  0E00               	movlw	0
  6684  001B74  6E27               	movwf	EnableSlavePower@onof,c
  6685  001B76  0E05               	movlw	5
  6686  001B78  EC00  F00A         	call	_EnableSlavePower
  6687                           
  6688                           ;PDU.c: 29: EnableSlavePower(AUX, OFF);
  6689  001B7C  0E00               	movlw	0
  6690  001B7E  6E28               	movwf	EnableSlavePower@onof+1,c
  6691  001B80  0E00               	movlw	0
  6692  001B82  6E27               	movwf	EnableSlavePower@onof,c
  6693  001B84  0E06               	movlw	6
  6694  001B86  EC00  F00A         	call	_EnableSlavePower
  6695                           
  6696                           ;PDU.c: 30: Update();
  6697  001B8A  EC33  F011         	call	_Update	;wreg free
  6698                           
  6699                           ;PDU.c: 32: ComputeStorageData();
  6700  001B8E  EC72  F00A         	call	_ComputeStorageData	;wreg free
  6701  001B92  0012               	return		;funcret
  6702  001B94                     __end_of_PDUStartup:
  6703                           	opt stack 0
  6704                           tblptru	equ	0xFF8
  6705                           tblptrh	equ	0xFF7
  6706                           tblptrl	equ	0xFF6
  6707                           tablat	equ	0xFF5
  6708                           prodh	equ	0xFF4
  6709                           prodl	equ	0xFF3
  6710                           intcon	equ	0xFF2
  6711                           intcon2	equ	0xFF1
  6712                           postinc0	equ	0xFEE
  6713                           wreg	equ	0xFE8
  6714                           indf1	equ	0xFE7
  6715                           fsr1h	equ	0xFE2
  6716                           fsr1l	equ	0xFE1
  6717                           indf2	equ	0xFDF
  6718                           postinc2	equ	0xFDE
  6719                           postdec2	equ	0xFDD
  6720                           plusw2	equ	0xFDB
  6721                           fsr2h	equ	0xFDA
  6722                           fsr2l	equ	0xFD9
  6723                           status	equ	0xFD8
  6724                           
  6725 ;; *************** function _Update *****************
  6726 ;; Defined at:
  6727 ;;		line 225 in file "PDU.c"
  6728 ;; Parameters:    Size  Location     Type
  6729 ;;		None
  6730 ;; Auto vars:     Size  Location     Type
  6731 ;;		None
  6732 ;; Return value:  Size  Location     Type
  6733 ;;                  1    wreg      void 
  6734 ;; Registers used:
  6735 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6736 ;; Tracked objects:
  6737 ;;		On entry : 0/0
  6738 ;;		On exit  : 0/0
  6739 ;;		Unchanged: 0/0
  6740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6741 ;;      Params:         0       0       0       0       0       0       0
  6742 ;;      Locals:         0       0       0       0       0       0       0
  6743 ;;      Temps:          0       0       0       0       0       0       0
  6744 ;;      Totals:         0       0       0       0       0       0       0
  6745 ;;Total ram usage:        0 bytes
  6746 ;; Hardware stack levels used:    1
  6747 ;; Hardware stack levels required when called:    8
  6748 ;; This function calls:
  6749 ;;		_writeRegisters
  6750 ;; This function is called by:
  6751 ;;		_processPowerRequest
  6752 ;;		_PDUStartup
  6753 ;; This function uses a non-reentrant model
  6754 ;;
  6755                           
  6756                           	psect	text41
  6757  002266                     __ptext41:
  6758                           	opt stack 0
  6759  002266                     _Update:
  6760                           	opt stack 20
  6761                           
  6762                           ;PDU.c: 226: writeRegisters();
  6763                           
  6764                           ;incstack = 0
  6765  002266  EC6E  F00C         	call	_writeRegisters	;wreg free
  6766  00226A  0012               	return		;funcret
  6767  00226C                     __end_of_Update:
  6768                           	opt stack 0
  6769                           tblptru	equ	0xFF8
  6770                           tblptrh	equ	0xFF7
  6771                           tblptrl	equ	0xFF6
  6772                           tablat	equ	0xFF5
  6773                           prodh	equ	0xFF4
  6774                           prodl	equ	0xFF3
  6775                           intcon	equ	0xFF2
  6776                           intcon2	equ	0xFF1
  6777                           postinc0	equ	0xFEE
  6778                           wreg	equ	0xFE8
  6779                           indf1	equ	0xFE7
  6780                           fsr1h	equ	0xFE2
  6781                           fsr1l	equ	0xFE1
  6782                           indf2	equ	0xFDF
  6783                           postinc2	equ	0xFDE
  6784                           postdec2	equ	0xFDD
  6785                           plusw2	equ	0xFDB
  6786                           fsr2h	equ	0xFDA
  6787                           fsr2l	equ	0xFD9
  6788                           status	equ	0xFD8
  6789                           
  6790 ;; *************** function _StartUp595 *****************
  6791 ;; Defined at:
  6792 ;;		line 10 in file "Shift595.c"
  6793 ;; Parameters:    Size  Location     Type
  6794 ;;		None
  6795 ;; Auto vars:     Size  Location     Type
  6796 ;;		None
  6797 ;; Return value:  Size  Location     Type
  6798 ;;                  1    wreg      void 
  6799 ;; Registers used:
  6800 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6801 ;; Tracked objects:
  6802 ;;		On entry : 0/0
  6803 ;;		On exit  : 0/0
  6804 ;;		Unchanged: 0/0
  6805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6806 ;;      Params:         0       0       0       0       0       0       0
  6807 ;;      Locals:         0       0       0       0       0       0       0
  6808 ;;      Temps:          0       0       0       0       0       0       0
  6809 ;;      Totals:         0       0       0       0       0       0       0
  6810 ;;Total ram usage:        0 bytes
  6811 ;; Hardware stack levels used:    1
  6812 ;; Hardware stack levels required when called:    9
  6813 ;; This function calls:
  6814 ;;		_Clear595
  6815 ;;		_Delay
  6816 ;; This function is called by:
  6817 ;;		_PDUStartup
  6818 ;; This function uses a non-reentrant model
  6819 ;;
  6820                           
  6821                           	psect	text42
  6822  001B94                     __ptext42:
  6823                           	opt stack 0
  6824  001B94                     _StartUp595:
  6825                           	opt stack 20
  6826                           
  6827                           ;incstack = 0
  6828                           ;Shift595.c: 12: do { LATD5 = 1; } while(0);
  6829  001B94  8A8C               	bsf	3980,5,c	;volatile
  6830                           
  6831                           ;Shift595.c: 13: do { LATB0 = 1; } while(0);
  6832  001B96  808A               	bsf	3978,0,c	;volatile
  6833                           
  6834                           ;Shift595.c: 15: Delay(2);
  6835  001B98  0E02               	movlw	2
  6836  001B9A  6E1D               	movwf	Delay@wait,c
  6837  001B9C  0E00               	movlw	0
  6838  001B9E  6E1E               	movwf	Delay@wait+1,c
  6839  001BA0  0E00               	movlw	0
  6840  001BA2  6E1F               	movwf	Delay@wait+2,c
  6841  001BA4  0E00               	movlw	0
  6842  001BA6  6E20               	movwf	Delay@wait+3,c
  6843  001BA8  ECEF  F00E         	call	_Delay	;wreg free
  6844                           
  6845                           ;Shift595.c: 16: do { LATD5 = 0; } while(0);
  6846  001BAC  9A8C               	bcf	3980,5,c	;volatile
  6847                           
  6848                           ;Shift595.c: 17: Delay(2);
  6849  001BAE  0E02               	movlw	2
  6850  001BB0  6E1D               	movwf	Delay@wait,c
  6851  001BB2  0E00               	movlw	0
  6852  001BB4  6E1E               	movwf	Delay@wait+1,c
  6853  001BB6  0E00               	movlw	0
  6854  001BB8  6E1F               	movwf	Delay@wait+2,c
  6855  001BBA  0E00               	movlw	0
  6856  001BBC  6E20               	movwf	Delay@wait+3,c
  6857  001BBE  ECEF  F00E         	call	_Delay	;wreg free
  6858                           
  6859                           ;Shift595.c: 18: do { LATB0 = 0; } while(0);
  6860  001BC2  908A               	bcf	3978,0,c	;volatile
  6861                           
  6862                           ;Shift595.c: 19: Delay(2);
  6863  001BC4  0E02               	movlw	2
  6864  001BC6  6E1D               	movwf	Delay@wait,c
  6865  001BC8  0E00               	movlw	0
  6866  001BCA  6E1E               	movwf	Delay@wait+1,c
  6867  001BCC  0E00               	movlw	0
  6868  001BCE  6E1F               	movwf	Delay@wait+2,c
  6869  001BD0  0E00               	movlw	0
  6870  001BD2  6E20               	movwf	Delay@wait+3,c
  6871  001BD4  ECEF  F00E         	call	_Delay	;wreg free
  6872                           
  6873                           ;Shift595.c: 20: do { LATD5 = 1; } while(0);
  6874  001BD8  8A8C               	bsf	3980,5,c	;volatile
  6875                           
  6876                           ;Shift595.c: 21: Delay(2);
  6877  001BDA  0E02               	movlw	2
  6878  001BDC  6E1D               	movwf	Delay@wait,c
  6879  001BDE  0E00               	movlw	0
  6880  001BE0  6E1E               	movwf	Delay@wait+1,c
  6881  001BE2  0E00               	movlw	0
  6882  001BE4  6E1F               	movwf	Delay@wait+2,c
  6883  001BE6  0E00               	movlw	0
  6884  001BE8  6E20               	movwf	Delay@wait+3,c
  6885  001BEA  ECEF  F00E         	call	_Delay	;wreg free
  6886                           
  6887                           ;Shift595.c: 22: do { LATB0 = 1; } while(0);
  6888  001BEE  808A               	bsf	3978,0,c	;volatile
  6889                           
  6890                           ;Shift595.c: 24: Clear595();
  6891  001BF0  EC5D  F00F         	call	_Clear595	;wreg free
  6892  001BF4  0012               	return		;funcret
  6893  001BF6                     __end_of_StartUp595:
  6894                           	opt stack 0
  6895                           tblptru	equ	0xFF8
  6896                           tblptrh	equ	0xFF7
  6897                           tblptrl	equ	0xFF6
  6898                           tablat	equ	0xFF5
  6899                           prodh	equ	0xFF4
  6900                           prodl	equ	0xFF3
  6901                           intcon	equ	0xFF2
  6902                           intcon2	equ	0xFF1
  6903                           postinc0	equ	0xFEE
  6904                           wreg	equ	0xFE8
  6905                           indf1	equ	0xFE7
  6906                           fsr1h	equ	0xFE2
  6907                           fsr1l	equ	0xFE1
  6908                           indf2	equ	0xFDF
  6909                           postinc2	equ	0xFDE
  6910                           postdec2	equ	0xFDD
  6911                           plusw2	equ	0xFDB
  6912                           fsr2h	equ	0xFDA
  6913                           fsr2l	equ	0xFD9
  6914                           status	equ	0xFD8
  6915                           
  6916 ;; *************** function _Clear595 *****************
  6917 ;; Defined at:
  6918 ;;		line 39 in file "Shift595.c"
  6919 ;; Parameters:    Size  Location     Type
  6920 ;;		None
  6921 ;; Auto vars:     Size  Location     Type
  6922 ;;  i               2    0[BANK0 ] int 
  6923 ;; Return value:  Size  Location     Type
  6924 ;;                  1    wreg      void 
  6925 ;; Registers used:
  6926 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6927 ;; Tracked objects:
  6928 ;;		On entry : 0/0
  6929 ;;		On exit  : 0/0
  6930 ;;		Unchanged: 0/0
  6931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6932 ;;      Params:         0       0       0       0       0       0       0
  6933 ;;      Locals:         0       2       0       0       0       0       0
  6934 ;;      Temps:          0       0       0       0       0       0       0
  6935 ;;      Totals:         0       2       0       0       0       0       0
  6936 ;;Total ram usage:        2 bytes
  6937 ;; Hardware stack levels used:    1
  6938 ;; Hardware stack levels required when called:    8
  6939 ;; This function calls:
  6940 ;;		_writeRegisters
  6941 ;; This function is called by:
  6942 ;;		_StartUp595
  6943 ;; This function uses a non-reentrant model
  6944 ;;
  6945                           
  6946                           	psect	text43
  6947  001EBA                     __ptext43:
  6948                           	opt stack 0
  6949  001EBA                     _Clear595:
  6950                           	opt stack 20
  6951                           
  6952                           ;Shift595.c: 40: for (int i = 3 * 8 - 1; i >= 0; i--) {
  6953                           
  6954                           ;incstack = 0
  6955  001EBA  0E00               	movlw	0
  6956  001EBC  0100               	movlb	0	; () banked
  6957  001EBE  6F61               	movwf	(Clear595@i+1)& (0+255),b
  6958  001EC0  0E17               	movlw	23
  6959  001EC2  6F60               	movwf	Clear595@i& (0+255),b
  6960  001EC4                     l4046:
  6961                           
  6962                           ; BSR set to: 0
  6963  001EC4  0100               	movlb	0	; () banked
  6964  001EC6  BF61               	btfsc	(Clear595@i+1)& (0+255),7,b
  6965  001EC8  D014               	goto	l4056
  6966                           
  6967                           ; BSR set to: 0
  6968                           ;Shift595.c: 41: registers[i] = 0;
  6969                           
  6970                           ; BSR set to: 0
  6971                           
  6972                           ; BSR set to: 0
  6973  001ECA  90D8               	bcf	status,0,c
  6974  001ECC  0100               	movlb	0	; () banked
  6975  001ECE  3560               	rlcf	Clear595@i& (0+255),w,b
  6976  001ED0  6ED9               	movwf	fsr2l,c
  6977  001ED2  0100               	movlb	0	; () banked
  6978  001ED4  3561               	rlcf	(Clear595@i+1)& (0+255),w,b
  6979  001ED6  6EDA               	movwf	fsr2h,c
  6980  001ED8  0E00               	movlw	low _registers
  6981  001EDA  26D9               	addwf	fsr2l,f,c
  6982  001EDC  0E01               	movlw	high _registers
  6983  001EDE  22DA               	addwfc	fsr2h,f,c
  6984  001EE0  0E00               	movlw	0
  6985  001EE2  6EDE               	movwf	postinc2,c
  6986  001EE4  0E00               	movlw	0
  6987  001EE6  6EDD               	movwf	postdec2,c
  6988                           
  6989                           ; BSR set to: 0
  6990  001EE8  0100               	movlb	0	; () banked
  6991  001EEA  0760               	decf	Clear595@i& (0+255),f,b
  6992  001EEC  A0D8               	btfss	status,0,c
  6993  001EEE  0761               	decf	(Clear595@i+1)& (0+255),f,b
  6994  001EF0  D7E9               	goto	l4046
  6995  001EF2                     l4056:
  6996                           
  6997                           ; BSR set to: 0
  6998                           ;Shift595.c: 42: }
  6999                           ;Shift595.c: 44: writeRegisters();
  7000  001EF2  EC6E  F00C         	call	_writeRegisters	;wreg free
  7001  001EF6  0012               	return		;funcret
  7002  001EF8                     __end_of_Clear595:
  7003                           	opt stack 0
  7004                           tblptru	equ	0xFF8
  7005                           tblptrh	equ	0xFF7
  7006                           tblptrl	equ	0xFF6
  7007                           tablat	equ	0xFF5
  7008                           prodh	equ	0xFF4
  7009                           prodl	equ	0xFF3
  7010                           intcon	equ	0xFF2
  7011                           intcon2	equ	0xFF1
  7012                           postinc0	equ	0xFEE
  7013                           wreg	equ	0xFE8
  7014                           indf1	equ	0xFE7
  7015                           fsr1h	equ	0xFE2
  7016                           fsr1l	equ	0xFE1
  7017                           indf2	equ	0xFDF
  7018                           postinc2	equ	0xFDE
  7019                           postdec2	equ	0xFDD
  7020                           plusw2	equ	0xFDB
  7021                           fsr2h	equ	0xFDA
  7022                           fsr2l	equ	0xFD9
  7023                           status	equ	0xFD8
  7024                           
  7025 ;; *************** function _writeRegisters *****************
  7026 ;; Defined at:
  7027 ;;		line 50 in file "Shift595.c"
  7028 ;; Parameters:    Size  Location     Type
  7029 ;;		None
  7030 ;; Auto vars:     Size  Location     Type
  7031 ;;  i               2   39[COMRAM] int 
  7032 ;;  val             2   37[COMRAM] int 
  7033 ;; Return value:  Size  Location     Type
  7034 ;;                  1    wreg      void 
  7035 ;; Registers used:
  7036 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7037 ;; Tracked objects:
  7038 ;;		On entry : 0/0
  7039 ;;		On exit  : 0/0
  7040 ;;		Unchanged: 0/0
  7041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7042 ;;      Params:         0       0       0       0       0       0       0
  7043 ;;      Locals:         4       0       0       0       0       0       0
  7044 ;;      Temps:          0       0       0       0       0       0       0
  7045 ;;      Totals:         4       0       0       0       0       0       0
  7046 ;;Total ram usage:        4 bytes
  7047 ;; Hardware stack levels used:    1
  7048 ;; Hardware stack levels required when called:    7
  7049 ;; This function calls:
  7050 ;;		_Delay
  7051 ;; This function is called by:
  7052 ;;		_Update
  7053 ;;		_Clear595
  7054 ;; This function uses a non-reentrant model
  7055 ;;
  7056                           
  7057                           	psect	text44
  7058  0018DC                     __ptext44:
  7059                           	opt stack 0
  7060  0018DC                     _writeRegisters:
  7061                           	opt stack 20
  7062                           
  7063                           ;Shift595.c: 51: int val = 0;
  7064                           
  7065                           ;incstack = 0
  7066  0018DC  0E00               	movlw	0
  7067  0018DE  6E27               	movwf	writeRegisters@val+1,c
  7068  0018E0  0E00               	movlw	0
  7069  0018E2  6E26               	movwf	writeRegisters@val,c
  7070                           
  7071                           ;Shift595.c: 52: for (int i = 3 * 8 - 1; i >= 0; i--) {
  7072  0018E4  0E00               	movlw	0
  7073  0018E6  6E29               	movwf	writeRegisters@i+1,c
  7074  0018E8  0E17               	movlw	23
  7075  0018EA  6E28               	movwf	writeRegisters@i,c
  7076  0018EC                     l3864:
  7077  0018EC  BE29               	btfsc	writeRegisters@i+1,7,c
  7078  0018EE  D01D               	goto	l554
  7079                           
  7080                           ;Shift595.c: 53: do { LATD7 = 0; } while(0);
  7081  0018F0  9E8C               	bcf	3980,7,c	;volatile
  7082                           
  7083                           ;Shift595.c: 55: val = registers[i];
  7084  0018F2  90D8               	bcf	status,0,c
  7085  0018F4  3428               	rlcf	writeRegisters@i,w,c
  7086  0018F6  6ED9               	movwf	fsr2l,c
  7087  0018F8  3429               	rlcf	writeRegisters@i+1,w,c
  7088  0018FA  6EDA               	movwf	fsr2h,c
  7089  0018FC  0E00               	movlw	low _registers
  7090  0018FE  26D9               	addwf	fsr2l,f,c
  7091  001900  0E01               	movlw	high _registers
  7092  001902  22DA               	addwfc	fsr2h,f,c
  7093  001904  CFDE F026          	movff	postinc2,writeRegisters@val
  7094  001908  CFDD F027          	movff	postdec2,writeRegisters@val+1
  7095                           
  7096                           ;Shift595.c: 56: if (val == 1) {
  7097  00190C  0426               	decf	writeRegisters@val,w,c
  7098  00190E  1027               	iorwf	writeRegisters@val+1,w,c
  7099  001910  A4D8               	btfss	status,2,c
  7100  001912  D002               	goto	l3872
  7101                           
  7102                           ;Shift595.c: 57: do { LATD4 = 1; } while(0);
  7103  001914  888C               	bsf	3980,4,c	;volatile
  7104                           
  7105                           ;Shift595.c: 58: } else if (val == 0) {
  7106  001916  D004               	goto	l552
  7107  001918                     l3872:
  7108  001918  5026               	movf	writeRegisters@val,w,c
  7109  00191A  1027               	iorwf	writeRegisters@val+1,w,c
  7110  00191C  B4D8               	btfsc	status,2,c
  7111                           
  7112                           ;Shift595.c: 59: do { LATD4 = 0; } while(0);
  7113  00191E  988C               	bcf	3980,4,c	;volatile
  7114  001920                     l552:
  7115  001920  8E8C               	bsf	3980,7,c	;volatile
  7116  001922  0628               	decf	writeRegisters@i,f,c
  7117  001924  A0D8               	btfss	status,0,c
  7118  001926  0629               	decf	writeRegisters@i+1,f,c
  7119  001928  D7E1               	goto	l3864
  7120  00192A                     l554:
  7121  00192A  9E8C               	bcf	3980,7,c	;volatile
  7122                           
  7123                           ;Shift595.c: 67: Delay(1);
  7124  00192C  0E01               	movlw	1
  7125  00192E  6E1D               	movwf	Delay@wait,c
  7126  001930  0E00               	movlw	0
  7127  001932  6E1E               	movwf	Delay@wait+1,c
  7128  001934  0E00               	movlw	0
  7129  001936  6E1F               	movwf	Delay@wait+2,c
  7130  001938  0E00               	movlw	0
  7131  00193A  6E20               	movwf	Delay@wait+3,c
  7132  00193C  ECEF  F00E         	call	_Delay	;wreg free
  7133                           
  7134                           ;Shift595.c: 68: do { LATD6 = 1; } while(0);
  7135  001940  8C8C               	bsf	3980,6,c	;volatile
  7136                           
  7137                           ;Shift595.c: 69: Delay(1);
  7138  001942  0E01               	movlw	1
  7139  001944  6E1D               	movwf	Delay@wait,c
  7140  001946  0E00               	movlw	0
  7141  001948  6E1E               	movwf	Delay@wait+1,c
  7142  00194A  0E00               	movlw	0
  7143  00194C  6E1F               	movwf	Delay@wait+2,c
  7144  00194E  0E00               	movlw	0
  7145  001950  6E20               	movwf	Delay@wait+3,c
  7146  001952  ECEF  F00E         	call	_Delay	;wreg free
  7147                           
  7148                           ;Shift595.c: 70: do { LATD6 = 0; } while(0);
  7149  001956  9C8C               	bcf	3980,6,c	;volatile
  7150  001958  0012               	return	
  7151  00195A                     __end_of_writeRegisters:
  7152                           	opt stack 0
  7153                           tblptru	equ	0xFF8
  7154                           tblptrh	equ	0xFF7
  7155                           tblptrl	equ	0xFF6
  7156                           tablat	equ	0xFF5
  7157                           prodh	equ	0xFF4
  7158                           prodl	equ	0xFF3
  7159                           intcon	equ	0xFF2
  7160                           intcon2	equ	0xFF1
  7161                           postinc0	equ	0xFEE
  7162                           wreg	equ	0xFE8
  7163                           indf1	equ	0xFE7
  7164                           fsr1h	equ	0xFE2
  7165                           fsr1l	equ	0xFE1
  7166                           indf2	equ	0xFDF
  7167                           postinc2	equ	0xFDE
  7168                           postdec2	equ	0xFDD
  7169                           plusw2	equ	0xFDB
  7170                           fsr2h	equ	0xFDA
  7171                           fsr2l	equ	0xFD9
  7172                           status	equ	0xFD8
  7173                           
  7174 ;; *************** function _Delay *****************
  7175 ;; Defined at:
  7176 ;;		line 9 in file "Functions.c"
  7177 ;; Parameters:    Size  Location     Type
  7178 ;;  wait            4   28[COMRAM] long 
  7179 ;; Auto vars:     Size  Location     Type
  7180 ;;  i               4   33[COMRAM] long 
  7181 ;; Return value:  Size  Location     Type
  7182 ;;                  1    wreg      void 
  7183 ;; Registers used:
  7184 ;;		wreg, status,2, status,0
  7185 ;; Tracked objects:
  7186 ;;		On entry : 0/0
  7187 ;;		On exit  : 0/0
  7188 ;;		Unchanged: 0/0
  7189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7190 ;;      Params:         4       0       0       0       0       0       0
  7191 ;;      Locals:         4       0       0       0       0       0       0
  7192 ;;      Temps:          1       0       0       0       0       0       0
  7193 ;;      Totals:         9       0       0       0       0       0       0
  7194 ;;Total ram usage:        9 bytes
  7195 ;; Hardware stack levels used:    1
  7196 ;; Hardware stack levels required when called:    6
  7197 ;; This function calls:
  7198 ;;		Nothing
  7199 ;; This function is called by:
  7200 ;;		_StartUp595
  7201 ;;		_writeRegisters
  7202 ;;		_PotSetpoint
  7203 ;;		_PotClear
  7204 ;;		_ComController
  7205 ;; This function uses a non-reentrant model
  7206 ;;
  7207                           
  7208                           	psect	text45
  7209  001DDE                     __ptext45:
  7210                           	opt stack 0
  7211  001DDE                     _Delay:
  7212                           	opt stack 21
  7213                           
  7214                           ;Functions.c: 10: long int i = 0;
  7215                           
  7216                           ;incstack = 0
  7217  001DDE  0E00               	movlw	0
  7218  001DE0  6E22               	movwf	Delay@i,c
  7219  001DE2  0E00               	movlw	0
  7220  001DE4  6E23               	movwf	Delay@i+1,c
  7221  001DE6  0E00               	movlw	0
  7222  001DE8  6E24               	movwf	Delay@i+2,c
  7223  001DEA  0E00               	movlw	0
  7224  001DEC  6E25               	movwf	Delay@i+3,c
  7225                           
  7226                           ;Functions.c: 11: for (; wait > i; i++) {
  7227  001DEE  D00D               	goto	l3692
  7228  001DF0                     l3688:
  7229                           
  7230                           ;Functions.c: 12: _delay((unsigned long)((1)*(8000000/4000.0)));
  7231  001DF0  0E03               	movlw	3
  7232  001DF2  6E21               	movwf	??_Delay& (0+255),c
  7233  001DF4  0E98               	movlw	152
  7234  001DF6                     u2967:
  7235  001DF6  2EE8               	decfsz	wreg,f,c
  7236  001DF8  D7FE               	bra	u2967
  7237  001DFA  2E21               	decfsz	??_Delay& (0+255),f,c
  7238  001DFC  D7FC               	bra	u2967
  7239  001DFE  0E01               	movlw	1
  7240  001E00  2622               	addwf	Delay@i,f,c
  7241  001E02  0E00               	movlw	0
  7242  001E04  2223               	addwfc	Delay@i+1,f,c
  7243  001E06  2224               	addwfc	Delay@i+2,f,c
  7244  001E08  2225               	addwfc	Delay@i+3,f,c
  7245  001E0A                     l3692:
  7246  001E0A  501D               	movf	Delay@wait,w,c
  7247  001E0C  5C22               	subwf	Delay@i,w,c
  7248  001E0E  501E               	movf	Delay@wait+1,w,c
  7249  001E10  5823               	subwfb	Delay@i+1,w,c
  7250  001E12  501F               	movf	Delay@wait+2,w,c
  7251  001E14  5824               	subwfb	Delay@i+2,w,c
  7252  001E16  5025               	movf	Delay@i+3,w,c
  7253  001E18  0A80               	xorlw	128
  7254  001E1A  6E21               	movwf	??_Delay& (0+255),c
  7255  001E1C  5020               	movf	Delay@wait+3,w,c
  7256  001E1E  0A80               	xorlw	128
  7257  001E20  5821               	subwfb	??_Delay& (0+255),w,c
  7258  001E22  B0D8               	btfsc	status,0,c
  7259  001E24  0012               	return	
  7260  001E26  D7E4               	goto	l3688
  7261  001E28                     __end_of_Delay:
  7262                           	opt stack 0
  7263                           tblptru	equ	0xFF8
  7264                           tblptrh	equ	0xFF7
  7265                           tblptrl	equ	0xFF6
  7266                           tablat	equ	0xFF5
  7267                           prodh	equ	0xFF4
  7268                           prodl	equ	0xFF3
  7269                           intcon	equ	0xFF2
  7270                           intcon2	equ	0xFF1
  7271                           postinc0	equ	0xFEE
  7272                           wreg	equ	0xFE8
  7273                           indf1	equ	0xFE7
  7274                           fsr1h	equ	0xFE2
  7275                           fsr1l	equ	0xFE1
  7276                           indf2	equ	0xFDF
  7277                           postinc2	equ	0xFDE
  7278                           postdec2	equ	0xFDD
  7279                           plusw2	equ	0xFDB
  7280                           fsr2h	equ	0xFDA
  7281                           fsr2l	equ	0xFD9
  7282                           status	equ	0xFD8
  7283                           
  7284 ;; *************** function _EnableSlavePower *****************
  7285 ;; Defined at:
  7286 ;;		line 37 in file "PDU.c"
  7287 ;; Parameters:    Size  Location     Type
  7288 ;;  slave           1    wreg     enum E6
  7289 ;;  onof            2   38[COMRAM] int 
  7290 ;; Auto vars:     Size  Location     Type
  7291 ;;  slave           1   40[COMRAM] enum E6
  7292 ;; Return value:  Size  Location     Type
  7293 ;;                  1    wreg      void 
  7294 ;; Registers used:
  7295 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7296 ;; Tracked objects:
  7297 ;;		On entry : 0/0
  7298 ;;		On exit  : 0/0
  7299 ;;		Unchanged: 0/0
  7300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7301 ;;      Params:         2       0       0       0       0       0       0
  7302 ;;      Locals:         1       0       0       0       0       0       0
  7303 ;;      Temps:          0       0       0       0       0       0       0
  7304 ;;      Totals:         3       0       0       0       0       0       0
  7305 ;;Total ram usage:        3 bytes
  7306 ;; Hardware stack levels used:    1
  7307 ;; Hardware stack levels required when called:    7
  7308 ;; This function calls:
  7309 ;;		_SetPin595
  7310 ;; This function is called by:
  7311 ;;		_processPowerRequest
  7312 ;;		_PDUStartup
  7313 ;; This function uses a non-reentrant model
  7314 ;;
  7315                           
  7316                           	psect	text46
  7317  001400                     __ptext46:
  7318                           	opt stack 0
  7319  001400                     _EnableSlavePower:
  7320                           	opt stack 21
  7321                           
  7322                           ;incstack = 0
  7323                           ;EnableSlavePower@slave stored from wreg
  7324  001400  6E29               	movwf	EnableSlavePower@slave,c
  7325                           
  7326                           ;PDU.c: 38: switch (slave) {
  7327  001402  D05C               	goto	l4032
  7328  001404                     l4016:
  7329                           
  7330                           ;PDU.c: 40: SetPin595(2, 6, onof);
  7331  001404  0E00               	movlw	0
  7332  001406  6E1E               	movwf	SetPin595@Reg+1,c
  7333  001408  0E02               	movlw	2
  7334  00140A  6E1D               	movwf	SetPin595@Reg,c
  7335  00140C  0E00               	movlw	0
  7336  00140E  6E20               	movwf	SetPin595@pin+1,c
  7337  001410  0E06               	movlw	6
  7338  001412  6E1F               	movwf	SetPin595@pin,c
  7339  001414  C027  F021         	movff	EnableSlavePower@onof,SetPin595@value
  7340  001418  C028  F022         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  7341  00141C  EC57  F00E         	call	_SetPin595	;wreg free
  7342                           
  7343                           ;PDU.c: 41: break;
  7344  001420  0012               	return	
  7345  001422                     l4018:
  7346                           
  7347                           ;PDU.c: 43: SetPin595(1, 1, onof);
  7348  001422  0E00               	movlw	0
  7349  001424  6E1E               	movwf	SetPin595@Reg+1,c
  7350  001426  0E01               	movlw	1
  7351  001428  6E1D               	movwf	SetPin595@Reg,c
  7352  00142A  0E00               	movlw	0
  7353  00142C  6E20               	movwf	SetPin595@pin+1,c
  7354  00142E  0E01               	movlw	1
  7355  001430  6E1F               	movwf	SetPin595@pin,c
  7356  001432  C027  F021         	movff	EnableSlavePower@onof,SetPin595@value
  7357  001436  C028  F022         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  7358  00143A  EC57  F00E         	call	_SetPin595	;wreg free
  7359                           
  7360                           ;PDU.c: 44: break;
  7361  00143E  0012               	return	
  7362  001440                     l4020:
  7363                           
  7364                           ;PDU.c: 46: SetPin595(1, 6, onof);
  7365  001440  0E00               	movlw	0
  7366  001442  6E1E               	movwf	SetPin595@Reg+1,c
  7367  001444  0E01               	movlw	1
  7368  001446  6E1D               	movwf	SetPin595@Reg,c
  7369  001448  0E00               	movlw	0
  7370  00144A  6E20               	movwf	SetPin595@pin+1,c
  7371  00144C  0E06               	movlw	6
  7372  00144E  6E1F               	movwf	SetPin595@pin,c
  7373  001450  C027  F021         	movff	EnableSlavePower@onof,SetPin595@value
  7374  001454  C028  F022         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  7375  001458  EC57  F00E         	call	_SetPin595	;wreg free
  7376                           
  7377                           ;PDU.c: 47: MCSOn = onof;
  7378  00145C  C027  F03F         	movff	EnableSlavePower@onof,_MCSOn
  7379                           
  7380                           ;PDU.c: 48: break;
  7381  001460  0012               	return	
  7382  001462                     l4024:
  7383                           
  7384                           ;PDU.c: 50: SetPin595(2, 1, onof);
  7385  001462  0E00               	movlw	0
  7386  001464  6E1E               	movwf	SetPin595@Reg+1,c
  7387  001466  0E02               	movlw	2
  7388  001468  6E1D               	movwf	SetPin595@Reg,c
  7389  00146A  0E00               	movlw	0
  7390  00146C  6E20               	movwf	SetPin595@pin+1,c
  7391  00146E  0E01               	movlw	1
  7392  001470  6E1F               	movwf	SetPin595@pin,c
  7393  001472  C027  F021         	movff	EnableSlavePower@onof,SetPin595@value
  7394  001476  C028  F022         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  7395  00147A  EC57  F00E         	call	_SetPin595	;wreg free
  7396                           
  7397                           ;PDU.c: 51: break;
  7398  00147E  0012               	return	
  7399  001480                     l4026:
  7400                           
  7401                           ;PDU.c: 53: SetPin595(3, 6, onof);
  7402  001480  0E00               	movlw	0
  7403  001482  6E1E               	movwf	SetPin595@Reg+1,c
  7404  001484  0E03               	movlw	3
  7405  001486  6E1D               	movwf	SetPin595@Reg,c
  7406  001488  0E00               	movlw	0
  7407  00148A  6E20               	movwf	SetPin595@pin+1,c
  7408  00148C  0E06               	movlw	6
  7409  00148E  6E1F               	movwf	SetPin595@pin,c
  7410  001490  C027  F021         	movff	EnableSlavePower@onof,SetPin595@value
  7411  001494  C028  F022         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  7412  001498  EC57  F00E         	call	_SetPin595	;wreg free
  7413                           
  7414                           ;PDU.c: 54: break;
  7415  00149C  0012               	return	
  7416  00149E                     l4028:
  7417                           
  7418                           ;PDU.c: 56: SetPin595(3, 1, onof);
  7419  00149E  0E00               	movlw	0
  7420  0014A0  6E1E               	movwf	SetPin595@Reg+1,c
  7421  0014A2  0E03               	movlw	3
  7422  0014A4  6E1D               	movwf	SetPin595@Reg,c
  7423  0014A6  0E00               	movlw	0
  7424  0014A8  6E20               	movwf	SetPin595@pin+1,c
  7425  0014AA  0E01               	movlw	1
  7426  0014AC  6E1F               	movwf	SetPin595@pin,c
  7427  0014AE  C027  F021         	movff	EnableSlavePower@onof,SetPin595@value
  7428  0014B2  C028  F022         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  7429  0014B6  EC57  F00E         	call	_SetPin595	;wreg free
  7430                           
  7431                           ;PDU.c: 58: }
  7432                           
  7433                           ;PDU.c: 57: break;
  7434  0014BA  0012               	return	
  7435  0014BC                     l4032:
  7436  0014BC  5029               	movf	EnableSlavePower@slave,w,c
  7437                           
  7438                           ; Switch size 1, requested type "space"
  7439                           ; Number of cases is 6, Range of values is 1 to 6
  7440                           ; switch strategies available:
  7441                           ; Name         Instructions Cycles
  7442                           ; simple_byte           19    10 (average)
  7443                           ;	Chosen strategy is simple_byte
  7444  0014BE  0A01               	xorlw	1	; case 1
  7445  0014C0  B4D8               	btfsc	status,2,c
  7446  0014C2  D7CF               	goto	l4024
  7447  0014C4  0A03               	xorlw	3	; case 2
  7448  0014C6  B4D8               	btfsc	status,2,c
  7449  0014C8  D7BB               	goto	l4020
  7450  0014CA  0A01               	xorlw	1	; case 3
  7451  0014CC  B4D8               	btfsc	status,2,c
  7452  0014CE  D79A               	goto	l4016
  7453  0014D0  0A07               	xorlw	7	; case 4
  7454  0014D2  B4D8               	btfsc	status,2,c
  7455  0014D4  D7A6               	goto	l4018
  7456  0014D6  0A01               	xorlw	1	; case 5
  7457  0014D8  B4D8               	btfsc	status,2,c
  7458  0014DA  D7D2               	goto	l4026
  7459  0014DC  0A03               	xorlw	3	; case 6
  7460  0014DE  A4D8               	btfss	status,2,c
  7461  0014E0  0012               	return	
  7462  0014E2  D7DD               	goto	l4028
  7463  0014E4                     __end_of_EnableSlavePower:
  7464                           	opt stack 0
  7465                           tblptru	equ	0xFF8
  7466                           tblptrh	equ	0xFF7
  7467                           tblptrl	equ	0xFF6
  7468                           tablat	equ	0xFF5
  7469                           prodh	equ	0xFF4
  7470                           prodl	equ	0xFF3
  7471                           intcon	equ	0xFF2
  7472                           intcon2	equ	0xFF1
  7473                           postinc0	equ	0xFEE
  7474                           wreg	equ	0xFE8
  7475                           indf1	equ	0xFE7
  7476                           fsr1h	equ	0xFE2
  7477                           fsr1l	equ	0xFE1
  7478                           indf2	equ	0xFDF
  7479                           postinc2	equ	0xFDE
  7480                           postdec2	equ	0xFDD
  7481                           plusw2	equ	0xFDB
  7482                           fsr2h	equ	0xFDA
  7483                           fsr2l	equ	0xFD9
  7484                           status	equ	0xFD8
  7485                           
  7486 ;; *************** function _SetPin595 *****************
  7487 ;; Defined at:
  7488 ;;		line 32 in file "Shift595.c"
  7489 ;; Parameters:    Size  Location     Type
  7490 ;;  Reg             2   28[COMRAM] int 
  7491 ;;  pin             2   30[COMRAM] int 
  7492 ;;  value           2   32[COMRAM] int 
  7493 ;; Auto vars:     Size  Location     Type
  7494 ;;		None
  7495 ;; Return value:  Size  Location     Type
  7496 ;;                  1    wreg      void 
  7497 ;; Registers used:
  7498 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7499 ;; Tracked objects:
  7500 ;;		On entry : 0/0
  7501 ;;		On exit  : 0/0
  7502 ;;		Unchanged: 0/0
  7503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7504 ;;      Params:         6       0       0       0       0       0       0
  7505 ;;      Locals:         0       0       0       0       0       0       0
  7506 ;;      Temps:          4       0       0       0       0       0       0
  7507 ;;      Totals:        10       0       0       0       0       0       0
  7508 ;;Total ram usage:       10 bytes
  7509 ;; Hardware stack levels used:    1
  7510 ;; Hardware stack levels required when called:    6
  7511 ;; This function calls:
  7512 ;;		Nothing
  7513 ;; This function is called by:
  7514 ;;		_EnableSlavePower
  7515 ;; This function uses a non-reentrant model
  7516 ;;
  7517                           
  7518                           	psect	text47
  7519  001CAE                     __ptext47:
  7520                           	opt stack 0
  7521  001CAE                     _SetPin595:
  7522                           	opt stack 21
  7523                           
  7524                           ;Shift595.c: 33: registers[((Reg - 1)*8) + pin] = value;
  7525                           
  7526                           ;incstack = 0
  7527  001CAE  0EF0               	movlw	240
  7528  001CB0  6E23               	movwf	??_SetPin595& (0+255),c
  7529  001CB2  0EFF               	movlw	255
  7530  001CB4  6E24               	movwf	(??_SetPin595+1)& (0+255),c
  7531  001CB6  C01D  F025         	movff	SetPin595@Reg,??_SetPin595+2
  7532  001CBA  C01E  F026         	movff	SetPin595@Reg+1,??_SetPin595+3
  7533  001CBE  90D8               	bcf	status,0,c
  7534  001CC0  3625               	rlcf	??_SetPin595+2,f,c
  7535  001CC2  3626               	rlcf	??_SetPin595+3,f,c
  7536  001CC4  90D8               	bcf	status,0,c
  7537  001CC6  3625               	rlcf	??_SetPin595+2,f,c
  7538  001CC8  3626               	rlcf	??_SetPin595+3,f,c
  7539  001CCA  90D8               	bcf	status,0,c
  7540  001CCC  3625               	rlcf	??_SetPin595+2,f,c
  7541  001CCE  3626               	rlcf	??_SetPin595+3,f,c
  7542  001CD0  501F               	movf	SetPin595@pin,w,c
  7543  001CD2  2625               	addwf	??_SetPin595+2,f,c
  7544  001CD4  5020               	movf	SetPin595@pin+1,w,c
  7545  001CD6  2226               	addwfc	??_SetPin595+3,f,c
  7546  001CD8  90D8               	bcf	status,0,c
  7547  001CDA  3625               	rlcf	??_SetPin595+2,f,c
  7548  001CDC  3626               	rlcf	??_SetPin595+3,f,c
  7549  001CDE  5023               	movf	??_SetPin595,w,c
  7550  001CE0  2625               	addwf	??_SetPin595+2,f,c
  7551  001CE2  5024               	movf	??_SetPin595+1,w,c
  7552  001CE4  2226               	addwfc	??_SetPin595+3,f,c
  7553  001CE6  0E00               	movlw	low _registers
  7554  001CE8  2425               	addwf	??_SetPin595+2,w,c
  7555  001CEA  6ED9               	movwf	fsr2l,c
  7556  001CEC  0E01               	movlw	high _registers
  7557  001CEE  2026               	addwfc	??_SetPin595+3,w,c
  7558  001CF0  6EDA               	movwf	fsr2h,c
  7559  001CF2  C021  FFDE         	movff	SetPin595@value,postinc2
  7560  001CF6  C022  FFDD         	movff	SetPin595@value+1,postdec2
  7561  001CFA  0012               	return		;funcret
  7562  001CFC                     __end_of_SetPin595:
  7563                           	opt stack 0
  7564                           tblptru	equ	0xFF8
  7565                           tblptrh	equ	0xFF7
  7566                           tblptrl	equ	0xFF6
  7567                           tablat	equ	0xFF5
  7568                           prodh	equ	0xFF4
  7569                           prodl	equ	0xFF3
  7570                           intcon	equ	0xFF2
  7571                           intcon2	equ	0xFF1
  7572                           postinc0	equ	0xFEE
  7573                           wreg	equ	0xFE8
  7574                           indf1	equ	0xFE7
  7575                           fsr1h	equ	0xFE2
  7576                           fsr1l	equ	0xFE1
  7577                           indf2	equ	0xFDF
  7578                           postinc2	equ	0xFDE
  7579                           postdec2	equ	0xFDD
  7580                           plusw2	equ	0xFDB
  7581                           fsr2h	equ	0xFDA
  7582                           fsr2l	equ	0xFD9
  7583                           status	equ	0xFD8
  7584                           
  7585 ;; *************** function _ComputeStorageData *****************
  7586 ;; Defined at:
  7587 ;;		line 160 in file "PDU.c"
  7588 ;; Parameters:    Size  Location     Type
  7589 ;;		None
  7590 ;; Auto vars:     Size  Location     Type
  7591 ;;  i               2   31[COMRAM] int 
  7592 ;; Return value:  Size  Location     Type
  7593 ;;                  1    wreg      void 
  7594 ;; Registers used:
  7595 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7596 ;; Tracked objects:
  7597 ;;		On entry : 0/0
  7598 ;;		On exit  : 0/0
  7599 ;;		Unchanged: 0/0
  7600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7601 ;;      Params:         0       0       0       0       0       0       0
  7602 ;;      Locals:         2       0       0       0       0       0       0
  7603 ;;      Temps:          2       0       0       0       0       0       0
  7604 ;;      Totals:         4       0       0       0       0       0       0
  7605 ;;Total ram usage:        4 bytes
  7606 ;; Hardware stack levels used:    1
  7607 ;; Hardware stack levels required when called:    7
  7608 ;; This function calls:
  7609 ;;		_DATAEE_ReadByte
  7610 ;; This function is called by:
  7611 ;;		_PDUStartup
  7612 ;;		_main
  7613 ;; This function uses a non-reentrant model
  7614 ;;
  7615                           
  7616                           	psect	text48
  7617  0014E4                     __ptext48:
  7618                           	opt stack 0
  7619  0014E4                     _ComputeStorageData:
  7620                           	opt stack 22
  7621                           
  7622                           ;PDU.c: 161: for (int i = 0; i < 12; i++) {
  7623                           
  7624                           ;incstack = 0
  7625  0014E4  0E00               	movlw	0
  7626  0014E6  6E21               	movwf	ComputeStorageData@i+1,c
  7627  0014E8  0E00               	movlw	0
  7628  0014EA  6E20               	movwf	ComputeStorageData@i,c
  7629  0014EC                     l4358:
  7630  0014EC  BE21               	btfsc	ComputeStorageData@i+1,7,c
  7631  0014EE  D006               	goto	l4362
  7632  0014F0  5021               	movf	ComputeStorageData@i+1,w,c
  7633  0014F2  E111               	bnz	l4368
  7634  0014F4  0E0C               	movlw	12
  7635  0014F6  5C20               	subwf	ComputeStorageData@i,w,c
  7636  0014F8  B0D8               	btfsc	status,0,c
  7637  0014FA  D00D               	goto	l4368
  7638  0014FC                     l4362:
  7639                           
  7640                           ;PDU.c: 162: data[i] = DATAEE_ReadByte(i);
  7641  0014FC  0EDC               	movlw	low _data
  7642  0014FE  2420               	addwf	ComputeStorageData@i,w,c
  7643  001500  6ED9               	movwf	fsr2l,c
  7644  001502  0E00               	movlw	high _data
  7645  001504  2021               	addwfc	ComputeStorageData@i+1,w,c
  7646  001506  6EDA               	movwf	fsr2h,c
  7647  001508  5020               	movf	ComputeStorageData@i,w,c
  7648  00150A  EC0D  F011         	call	_DATAEE_ReadByte
  7649  00150E  6EDF               	movwf	indf2,c
  7650  001510  4A20               	infsnz	ComputeStorageData@i,f,c
  7651  001512  2A21               	incf	ComputeStorageData@i+1,f,c
  7652  001514  D7EB               	goto	l4358
  7653  001516                     l4368:
  7654                           
  7655                           ;PDU.c: 163: }
  7656                           ;PDU.c: 164: Currentcomp[0] = ((data[0] << 8) | data[1]);
  7657  001516  0100               	movlb	0	; () banked
  7658  001518  51DD               	movf	(_data+1)& (0+255),w,b
  7659  00151A  C0DC  F01E         	movff	_data,??_ComputeStorageData
  7660  00151E  6A1F               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7661  001520  C01E  F01F         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7662  001524  6A1E               	clrf	??_ComputeStorageData,c
  7663  001526  101E               	iorwf	??_ComputeStorageData,w,c
  7664  001528  0100               	movlb	0	; () banked
  7665  00152A  6FE8               	movwf	_Currentcomp& (0+255),b
  7666  00152C  501F               	movf	??_ComputeStorageData+1,w,c
  7667  00152E  0100               	movlb	0	; () banked
  7668  001530  6FE9               	movwf	(_Currentcomp+1)& (0+255),b
  7669                           
  7670                           ;PDU.c: 165: Currentcomp[1] = ((data[2] << 8) | data[3]);
  7671  001532  0100               	movlb	0	; () banked
  7672  001534  51DF               	movf	(_data+3)& (0+255),w,b
  7673  001536  C0DE  F01E         	movff	_data+2,??_ComputeStorageData
  7674  00153A  6A1F               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7675  00153C  C01E  F01F         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7676  001540  6A1E               	clrf	??_ComputeStorageData,c
  7677  001542  101E               	iorwf	??_ComputeStorageData,w,c
  7678  001544  0100               	movlb	0	; () banked
  7679  001546  6FEA               	movwf	(_Currentcomp+2)& (0+255),b
  7680  001548  501F               	movf	??_ComputeStorageData+1,w,c
  7681  00154A  0100               	movlb	0	; () banked
  7682  00154C  6FEB               	movwf	(_Currentcomp+3)& (0+255),b
  7683                           
  7684                           ;PDU.c: 166: Currentcomp[2] = ((data[4] << 8) | data[5]);
  7685  00154E  0100               	movlb	0	; () banked
  7686  001550  51E1               	movf	(_data+5)& (0+255),w,b
  7687  001552  C0E0  F01E         	movff	_data+4,??_ComputeStorageData
  7688  001556  6A1F               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7689  001558  C01E  F01F         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7690  00155C  6A1E               	clrf	??_ComputeStorageData,c
  7691  00155E  101E               	iorwf	??_ComputeStorageData,w,c
  7692  001560  0100               	movlb	0	; () banked
  7693  001562  6FEC               	movwf	(_Currentcomp+4)& (0+255),b
  7694  001564  501F               	movf	??_ComputeStorageData+1,w,c
  7695  001566  0100               	movlb	0	; () banked
  7696  001568  6FED               	movwf	(_Currentcomp+5)& (0+255),b
  7697                           
  7698                           ;PDU.c: 167: Currentcomp[3] = ((data[6] << 8) | data[7]);
  7699  00156A  0100               	movlb	0	; () banked
  7700  00156C  51E3               	movf	(_data+7)& (0+255),w,b
  7701  00156E  C0E2  F01E         	movff	_data+6,??_ComputeStorageData
  7702  001572  6A1F               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7703  001574  C01E  F01F         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7704  001578  6A1E               	clrf	??_ComputeStorageData,c
  7705  00157A  101E               	iorwf	??_ComputeStorageData,w,c
  7706  00157C  0100               	movlb	0	; () banked
  7707  00157E  6FEE               	movwf	(_Currentcomp+6)& (0+255),b
  7708  001580  501F               	movf	??_ComputeStorageData+1,w,c
  7709  001582  0100               	movlb	0	; () banked
  7710  001584  6FEF               	movwf	(_Currentcomp+7)& (0+255),b
  7711                           
  7712                           ;PDU.c: 168: Currentcomp[4] = ((data[8] << 8) | data[9]);
  7713  001586  0100               	movlb	0	; () banked
  7714  001588  51E5               	movf	(_data+9)& (0+255),w,b
  7715  00158A  C0E4  F01E         	movff	_data+8,??_ComputeStorageData
  7716  00158E  6A1F               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7717  001590  C01E  F01F         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7718  001594  6A1E               	clrf	??_ComputeStorageData,c
  7719  001596  101E               	iorwf	??_ComputeStorageData,w,c
  7720  001598  0100               	movlb	0	; () banked
  7721  00159A  6FF0               	movwf	(_Currentcomp+8)& (0+255),b
  7722  00159C  501F               	movf	??_ComputeStorageData+1,w,c
  7723  00159E  0100               	movlb	0	; () banked
  7724  0015A0  6FF1               	movwf	(_Currentcomp+9)& (0+255),b
  7725                           
  7726                           ;PDU.c: 169: Currentcomp[5] = ((data[10] << 8) | data[11]);
  7727  0015A2  0100               	movlb	0	; () banked
  7728  0015A4  51E7               	movf	(_data+11)& (0+255),w,b
  7729  0015A6  C0E6  F01E         	movff	_data+10,??_ComputeStorageData
  7730  0015AA  6A1F               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7731  0015AC  C01E  F01F         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7732  0015B0  6A1E               	clrf	??_ComputeStorageData,c
  7733  0015B2  101E               	iorwf	??_ComputeStorageData,w,c
  7734  0015B4  0100               	movlb	0	; () banked
  7735  0015B6  6FF2               	movwf	(_Currentcomp+10)& (0+255),b
  7736  0015B8  501F               	movf	??_ComputeStorageData+1,w,c
  7737  0015BA  0100               	movlb	0	; () banked
  7738  0015BC  6FF3               	movwf	(_Currentcomp+11)& (0+255),b
  7739                           
  7740                           ; BSR set to: 0
  7741  0015BE  0012               	return		;funcret
  7742  0015C0                     __end_of_ComputeStorageData:
  7743                           	opt stack 0
  7744                           tblptru	equ	0xFF8
  7745                           tblptrh	equ	0xFF7
  7746                           tblptrl	equ	0xFF6
  7747                           tablat	equ	0xFF5
  7748                           prodh	equ	0xFF4
  7749                           prodl	equ	0xFF3
  7750                           intcon	equ	0xFF2
  7751                           intcon2	equ	0xFF1
  7752                           postinc0	equ	0xFEE
  7753                           wreg	equ	0xFE8
  7754                           indf1	equ	0xFE7
  7755                           fsr1h	equ	0xFE2
  7756                           fsr1l	equ	0xFE1
  7757                           indf2	equ	0xFDF
  7758                           postinc2	equ	0xFDE
  7759                           postdec2	equ	0xFDD
  7760                           plusw2	equ	0xFDB
  7761                           fsr2h	equ	0xFDA
  7762                           fsr2l	equ	0xFD9
  7763                           status	equ	0xFD8
  7764                           
  7765 ;; *************** function _DATAEE_ReadByte *****************
  7766 ;; Defined at:
  7767 ;;		line 143 in file "mcc_generated_files/memory.c"
  7768 ;; Parameters:    Size  Location     Type
  7769 ;;  bAdd            1    wreg     unsigned char 
  7770 ;; Auto vars:     Size  Location     Type
  7771 ;;  bAdd            1   28[COMRAM] unsigned char 
  7772 ;; Return value:  Size  Location     Type
  7773 ;;                  1    wreg      unsigned char 
  7774 ;; Registers used:
  7775 ;;		wreg, status,2
  7776 ;; Tracked objects:
  7777 ;;		On entry : 0/0
  7778 ;;		On exit  : 0/0
  7779 ;;		Unchanged: 0/0
  7780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7781 ;;      Params:         0       0       0       0       0       0       0
  7782 ;;      Locals:         1       0       0       0       0       0       0
  7783 ;;      Temps:          0       0       0       0       0       0       0
  7784 ;;      Totals:         1       0       0       0       0       0       0
  7785 ;;Total ram usage:        1 bytes
  7786 ;; Hardware stack levels used:    1
  7787 ;; Hardware stack levels required when called:    6
  7788 ;; This function calls:
  7789 ;;		Nothing
  7790 ;; This function is called by:
  7791 ;;		_ComputeStorageData
  7792 ;; This function uses a non-reentrant model
  7793 ;;
  7794                           
  7795                           	psect	text49
  7796  00221A                     __ptext49:
  7797                           	opt stack 0
  7798  00221A                     _DATAEE_ReadByte:
  7799                           	opt stack 22
  7800                           
  7801                           ; BSR set to: 0
  7802                           ;incstack = 0
  7803                           ;DATAEE_ReadByte@bAdd stored from wreg
  7804  00221A  6E1D               	movwf	DATAEE_ReadByte@bAdd,c
  7805                           
  7806                           ;memory.c: 145: EEADR = (bAdd & 0xFF);
  7807  00221C  C01D  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
  7808                           
  7809                           ;memory.c: 146: EECON1bits.CFGS = 0;
  7810  002220  9CA6               	bcf	4006,6,c	;volatile
  7811                           
  7812                           ;memory.c: 147: EECON1bits.EEPGD = 0;
  7813  002222  9EA6               	bcf	4006,7,c	;volatile
  7814                           
  7815                           ;memory.c: 148: EECON1bits.RD = 1;
  7816  002224  80A6               	bsf	4006,0,c	;volatile
  7817                           
  7818                           ;memory.c: 149: __nop();
  7819  002226  F000               	nop	
  7820                           
  7821                           ;memory.c: 150: __nop();
  7822  002228  F000               	nop	
  7823                           
  7824                           ;memory.c: 152: return (EEDATA);
  7825  00222A  50A8               	movf	4008,w,c	;volatile
  7826  00222C  0012               	return	
  7827  00222E                     __end_of_DATAEE_ReadByte:
  7828                           	opt stack 0
  7829                           tblptru	equ	0xFF8
  7830                           tblptrh	equ	0xFF7
  7831                           tblptrl	equ	0xFF6
  7832                           tablat	equ	0xFF5
  7833                           prodh	equ	0xFF4
  7834                           prodl	equ	0xFF3
  7835                           intcon	equ	0xFF2
  7836                           intcon2	equ	0xFF1
  7837                           postinc0	equ	0xFEE
  7838                           wreg	equ	0xFE8
  7839                           indf1	equ	0xFE7
  7840                           fsr1h	equ	0xFE2
  7841                           fsr1l	equ	0xFE1
  7842                           indf2	equ	0xFDF
  7843                           postinc2	equ	0xFDE
  7844                           postdec2	equ	0xFDD
  7845                           plusw2	equ	0xFDB
  7846                           fsr2h	equ	0xFDA
  7847                           fsr2l	equ	0xFD9
  7848                           status	equ	0xFD8
  7849                           
  7850 ;; *************** function _INTERRUPT_InterruptManager *****************
  7851 ;; Defined at:
  7852 ;;		line 67 in file "mcc_generated_files/interrupt_manager.c"
  7853 ;; Parameters:    Size  Location     Type
  7854 ;;		None
  7855 ;; Auto vars:     Size  Location     Type
  7856 ;;		None
  7857 ;; Return value:  Size  Location     Type
  7858 ;;                  1    wreg      void 
  7859 ;; Registers used:
  7860 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7861 ;; Tracked objects:
  7862 ;;		On entry : 0/0
  7863 ;;		On exit  : 0/0
  7864 ;;		Unchanged: 0/0
  7865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7866 ;;      Params:         0       0       0       0       0       0       0
  7867 ;;      Locals:         0       0       0       0       0       0       0
  7868 ;;      Temps:         14       0       0       0       0       0       0
  7869 ;;      Totals:        14       0       0       0       0       0       0
  7870 ;;Total ram usage:       14 bytes
  7871 ;; Hardware stack levels used:    1
  7872 ;; Hardware stack levels required when called:    5
  7873 ;; This function calls:
  7874 ;;		_ADC_ISR
  7875 ;;		_EUSART1_Receive_ISR
  7876 ;;		_EUSART1_Transmit_ISR
  7877 ;;		_TMR1_ISR
  7878 ;; This function is called by:
  7879 ;;		Interrupt level 2
  7880 ;; This function uses a non-reentrant model
  7881 ;;
  7882                           
  7883                           	psect	intcode
  7884  000008                     __pintcode:
  7885                           	opt stack 0
  7886  000008                     _INTERRUPT_InterruptManager:
  7887                           	opt stack 18
  7888                           
  7889                           ;incstack = 0
  7890  000008  8243               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7891  00000A  CFFA F00F          	movff	pclath,??_INTERRUPT_InterruptManager
  7892  00000E  CFFB F010          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  7893  000012  CFE9 F011          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  7894  000016  CFEA F012          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  7895  00001A  CFE1 F013          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  7896  00001E  CFE2 F014          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  7897  000022  CFD9 F015          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  7898  000026  CFDA F016          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  7899  00002A  CFF3 F017          	movff	prodl,??_INTERRUPT_InterruptManager+8
  7900  00002E  CFF4 F018          	movff	prodh,??_INTERRUPT_InterruptManager+9
  7901  000032  CFF6 F019          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  7902  000036  CFF7 F01A          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  7903  00003A  CFF8 F01B          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  7904  00003E  CFF5 F01C          	movff	tablat,??_INTERRUPT_InterruptManager+13
  7905                           
  7906                           ;interrupt_manager.c: 70: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  7907  000042  BA9D               	btfsc	3997,5,c	;volatile
  7908  000044  AA9E               	btfss	3998,5,c	;volatile
  7909  000046  D003               	goto	i2l67
  7910                           
  7911                           ;interrupt_manager.c: 71: {
  7912                           ;interrupt_manager.c: 72: EUSART1_Receive_ISR();
  7913  000048  ECA7  F010         	call	_EUSART1_Receive_ISR	;wreg free
  7914                           
  7915                           ;interrupt_manager.c: 73: }
  7916  00004C  D011               	goto	i2l75
  7917  00004E                     i2l67:
  7918                           
  7919                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  7920  00004E  B89D               	btfsc	3997,4,c	;volatile
  7921  000050  A89E               	btfss	3998,4,c	;volatile
  7922  000052  D003               	goto	i2l69
  7923                           
  7924                           ;interrupt_manager.c: 75: {
  7925                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
  7926  000054  ECB3  F00F         	call	_EUSART1_Transmit_ISR	;wreg free
  7927                           
  7928                           ;interrupt_manager.c: 77: }
  7929  000058  D00B               	goto	i2l75
  7930  00005A                     i2l69:
  7931                           
  7932                           ;interrupt_manager.c: 78: else if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
  7933  00005A  BC9D               	btfsc	3997,6,c	;volatile
  7934  00005C  AC9E               	btfss	3998,6,c	;volatile
  7935  00005E  D003               	goto	i2l71
  7936                           
  7937                           ;interrupt_manager.c: 79: {
  7938                           ;interrupt_manager.c: 80: ADC_ISR();
  7939  000060  EC3D  F011         	call	_ADC_ISR	;wreg free
  7940                           
  7941                           ;interrupt_manager.c: 81: }
  7942  000064  D005               	goto	i2l75
  7943  000066                     i2l71:
  7944                           
  7945                           ;interrupt_manager.c: 82: else if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
  7946  000066  B09D               	btfsc	3997,0,c	;volatile
  7947  000068  A09E               	btfss	3998,0,c	;volatile
  7948  00006A  D002               	goto	i2l75
  7949                           
  7950                           ;interrupt_manager.c: 83: {
  7951                           ;interrupt_manager.c: 84: TMR1_ISR();
  7952  00006C  EC9A  F00F         	call	_TMR1_ISR	;wreg free
  7953  000070                     i2l75:
  7954  000070  C01C  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  7955  000074  C01B  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  7956  000078  C01A  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  7957  00007C  C019  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  7958  000080  C018  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  7959  000084  C017  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  7960  000088  C016  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  7961  00008C  C015  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  7962  000090  C014  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  7963  000094  C013  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  7964  000098  C012  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  7965  00009C  C011  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  7966  0000A0  C010  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  7967  0000A4  C00F  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  7968  0000A8  9243               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7969  0000AA  0011               	retfie		f
  7970  0000AC                     __end_of_INTERRUPT_InterruptManager:
  7971                           	opt stack 0
  7972                           pclatu	equ	0xFFB
  7973                           pclath	equ	0xFFA
  7974                           tblptru	equ	0xFF8
  7975                           tblptrh	equ	0xFF7
  7976                           tblptrl	equ	0xFF6
  7977                           tablat	equ	0xFF5
  7978                           prodh	equ	0xFF4
  7979                           prodl	equ	0xFF3
  7980                           intcon	equ	0xFF2
  7981                           intcon2	equ	0xFF1
  7982                           postinc0	equ	0xFEE
  7983                           fsr0h	equ	0xFEA
  7984                           fsr0l	equ	0xFE9
  7985                           wreg	equ	0xFE8
  7986                           indf1	equ	0xFE7
  7987                           fsr1h	equ	0xFE2
  7988                           fsr1l	equ	0xFE1
  7989                           indf2	equ	0xFDF
  7990                           postinc2	equ	0xFDE
  7991                           postdec2	equ	0xFDD
  7992                           plusw2	equ	0xFDB
  7993                           fsr2h	equ	0xFDA
  7994                           fsr2l	equ	0xFD9
  7995                           status	equ	0xFD8
  7996                           
  7997 ;; *************** function _TMR1_ISR *****************
  7998 ;; Defined at:
  7999 ;;		line 161 in file "mcc_generated_files/tmr1.c"
  8000 ;; Parameters:    Size  Location     Type
  8001 ;;		None
  8002 ;; Auto vars:     Size  Location     Type
  8003 ;;		None
  8004 ;; Return value:  Size  Location     Type
  8005 ;;                  1    wreg      void 
  8006 ;; Registers used:
  8007 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8008 ;; Tracked objects:
  8009 ;;		On entry : 0/0
  8010 ;;		On exit  : 0/0
  8011 ;;		Unchanged: 0/0
  8012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8013 ;;      Params:         0       0       0       0       0       0       0
  8014 ;;      Locals:         0       0       0       0       0       0       0
  8015 ;;      Temps:          0       0       0       0       0       0       0
  8016 ;;      Totals:         0       0       0       0       0       0       0
  8017 ;;Total ram usage:        0 bytes
  8018 ;; Hardware stack levels used:    1
  8019 ;; Hardware stack levels required when called:    4
  8020 ;; This function calls:
  8021 ;;		_FuseSystem
  8022 ;;		_ReadCurrent
  8023 ;; This function is called by:
  8024 ;;		_INTERRUPT_InterruptManager
  8025 ;; This function uses a non-reentrant model
  8026 ;;
  8027                           
  8028                           	psect	text51
  8029  001F34                     __ptext51:
  8030                           	opt stack 0
  8031  001F34                     _TMR1_ISR:
  8032                           	opt stack 18
  8033                           
  8034                           ;tmr1.c: 165: PIR1bits.TMR1IF = 0;
  8035                           
  8036                           ;incstack = 0
  8037  001F34  909E               	bcf	3998,0,c	;volatile
  8038                           
  8039                           ;tmr1.c: 168: TMR1H = (timer1ReloadVal >> 8);
  8040  001F36  503E               	movf	_timer1ReloadVal+1,w,c	;volatile
  8041  001F38  6ECF               	movwf	4047,c	;volatile
  8042                           
  8043                           ;tmr1.c: 169: TMR1L = (uint8_t) timer1ReloadVal;
  8044  001F3A  C03D  FFCE         	movff	_timer1ReloadVal,4046	;volatile
  8045                           
  8046                           ;tmr1.c: 170: readwhat++;
  8047  001F3E  4A40               	infsnz	_readwhat,f,c
  8048  001F40  2A41               	incf	_readwhat+1,f,c
  8049                           
  8050                           ;tmr1.c: 171: if(readwhat > 7)
  8051  001F42  BE41               	btfsc	_readwhat+1,7,c
  8052  001F44  D00C               	goto	i2l3570
  8053  001F46  5041               	movf	_readwhat+1,w,c
  8054  001F48  E104               	bnz	i2u211_40
  8055  001F4A  0E08               	movlw	8
  8056  001F4C  5C40               	subwf	_readwhat,w,c
  8057  001F4E  A0D8               	btfss	status,0,c
  8058  001F50  D006               	goto	i2l3570
  8059  001F52                     i2u211_40:
  8060                           
  8061                           ;tmr1.c: 172: {
  8062                           ;tmr1.c: 173: readwhat = 1;
  8063  001F52  0E00               	movlw	0
  8064  001F54  6E41               	movwf	_readwhat+1,c
  8065  001F56  0E01               	movlw	1
  8066  001F58  6E40               	movwf	_readwhat,c
  8067                           
  8068                           ;tmr1.c: 174: FuseSystem();
  8069  001F5A  ECEC  F00C         	call	_FuseSystem	;wreg free
  8070  001F5E                     i2l3570:
  8071                           
  8072                           ;tmr1.c: 175: }
  8073                           ;tmr1.c: 176: ReadCurrent(readwhat);
  8074  001F5E  5040               	movf	_readwhat,w,c
  8075  001F60  EC58  F000         	call	_ReadCurrent
  8076  001F64  0012               	return		;funcret
  8077  001F66                     __end_of_TMR1_ISR:
  8078                           	opt stack 0
  8079                           pclatu	equ	0xFFB
  8080                           pclath	equ	0xFFA
  8081                           tblptru	equ	0xFF8
  8082                           tblptrh	equ	0xFF7
  8083                           tblptrl	equ	0xFF6
  8084                           tablat	equ	0xFF5
  8085                           prodh	equ	0xFF4
  8086                           prodl	equ	0xFF3
  8087                           intcon	equ	0xFF2
  8088                           intcon2	equ	0xFF1
  8089                           postinc0	equ	0xFEE
  8090                           fsr0h	equ	0xFEA
  8091                           fsr0l	equ	0xFE9
  8092                           wreg	equ	0xFE8
  8093                           indf1	equ	0xFE7
  8094                           fsr1h	equ	0xFE2
  8095                           fsr1l	equ	0xFE1
  8096                           indf2	equ	0xFDF
  8097                           postinc2	equ	0xFDE
  8098                           postdec2	equ	0xFDD
  8099                           plusw2	equ	0xFDB
  8100                           fsr2h	equ	0xFDA
  8101                           fsr2l	equ	0xFD9
  8102                           status	equ	0xFD8
  8103                           
  8104 ;; *************** function _ReadCurrent *****************
  8105 ;; Defined at:
  8106 ;;		line 63 in file "PDU.c"
  8107 ;; Parameters:    Size  Location     Type
  8108 ;;  gather          1    wreg     unsigned char 
  8109 ;; Auto vars:     Size  Location     Type
  8110 ;;  gather          1   13[COMRAM] unsigned char 
  8111 ;; Return value:  Size  Location     Type
  8112 ;;                  1    wreg      void 
  8113 ;; Registers used:
  8114 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8115 ;; Tracked objects:
  8116 ;;		On entry : 0/0
  8117 ;;		On exit  : 0/0
  8118 ;;		Unchanged: 0/0
  8119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8120 ;;      Params:         0       0       0       0       0       0       0
  8121 ;;      Locals:         1       0       0       0       0       0       0
  8122 ;;      Temps:          0       0       0       0       0       0       0
  8123 ;;      Totals:         1       0       0       0       0       0       0
  8124 ;;Total ram usage:        1 bytes
  8125 ;; Hardware stack levels used:    1
  8126 ;; Hardware stack levels required when called:    3
  8127 ;; This function calls:
  8128 ;;		_ADC_GetConversion
  8129 ;;		i2_SetPin595
  8130 ;;		i2_Update
  8131 ;; This function is called by:
  8132 ;;		_TMR1_ISR
  8133 ;; This function uses a non-reentrant model
  8134 ;;
  8135                           
  8136                           	psect	text52
  8137  0000B0                     __ptext52:
  8138                           	opt stack 0
  8139  0000B0                     _ReadCurrent:
  8140                           	opt stack 18
  8141                           
  8142                           ;incstack = 0
  8143                           ;ReadCurrent@gather stored from wreg
  8144  0000B0  6E0E               	movwf	ReadCurrent@gather,c
  8145                           
  8146                           ;PDU.c: 64: if (gather == 1) {
  8147  0000B2  040E               	decf	ReadCurrent@gather,w,c
  8148  0000B4  A4D8               	btfss	status,2,c
  8149  0000B6  D088               	goto	i2l3366
  8150                           
  8151                           ;PDU.c: 66: SetPin595(1, 4, ON);
  8152  0000B8  0E00               	movlw	0
  8153  0000BA  6E02               	movwf	i2SetPin595@Reg+1,c
  8154  0000BC  0E01               	movlw	1
  8155  0000BE  6E01               	movwf	i2SetPin595@Reg,c
  8156  0000C0  0E00               	movlw	0
  8157  0000C2  6E04               	movwf	i2SetPin595@pin+1,c
  8158  0000C4  0E04               	movlw	4
  8159  0000C6  6E03               	movwf	i2SetPin595@pin,c
  8160  0000C8  0E00               	movlw	0
  8161  0000CA  6E06               	movwf	i2SetPin595@value+1,c
  8162  0000CC  0E01               	movlw	1
  8163  0000CE  6E05               	movwf	i2SetPin595@value,c
  8164  0000D0  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8165                           
  8166                           ;PDU.c: 67: SetPin595(1, 3, OFF);
  8167  0000D4  0E00               	movlw	0
  8168  0000D6  6E02               	movwf	i2SetPin595@Reg+1,c
  8169  0000D8  0E01               	movlw	1
  8170  0000DA  6E01               	movwf	i2SetPin595@Reg,c
  8171  0000DC  0E00               	movlw	0
  8172  0000DE  6E04               	movwf	i2SetPin595@pin+1,c
  8173  0000E0  0E03               	movlw	3
  8174  0000E2  6E03               	movwf	i2SetPin595@pin,c
  8175  0000E4  0E00               	movlw	0
  8176  0000E6  6E06               	movwf	i2SetPin595@value+1,c
  8177  0000E8  0E00               	movlw	0
  8178  0000EA  6E05               	movwf	i2SetPin595@value,c
  8179  0000EC  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8180                           
  8181                           ;PDU.c: 68: SetPin595(1, 2, OFF);
  8182  0000F0  0E00               	movlw	0
  8183  0000F2  6E02               	movwf	i2SetPin595@Reg+1,c
  8184  0000F4  0E01               	movlw	1
  8185  0000F6  6E01               	movwf	i2SetPin595@Reg,c
  8186  0000F8  0E00               	movlw	0
  8187  0000FA  6E04               	movwf	i2SetPin595@pin+1,c
  8188  0000FC  0E02               	movlw	2
  8189  0000FE  6E03               	movwf	i2SetPin595@pin,c
  8190  000100  0E00               	movlw	0
  8191  000102  6E06               	movwf	i2SetPin595@value+1,c
  8192  000104  0E00               	movlw	0
  8193  000106  6E05               	movwf	i2SetPin595@value,c
  8194  000108  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8195                           
  8196                           ;PDU.c: 69: SetPin595(2, 4, OFF);
  8197  00010C  0E00               	movlw	0
  8198  00010E  6E02               	movwf	i2SetPin595@Reg+1,c
  8199  000110  0E02               	movlw	2
  8200  000112  6E01               	movwf	i2SetPin595@Reg,c
  8201  000114  0E00               	movlw	0
  8202  000116  6E04               	movwf	i2SetPin595@pin+1,c
  8203  000118  0E04               	movlw	4
  8204  00011A  6E03               	movwf	i2SetPin595@pin,c
  8205  00011C  0E00               	movlw	0
  8206  00011E  6E06               	movwf	i2SetPin595@value+1,c
  8207  000120  0E00               	movlw	0
  8208  000122  6E05               	movwf	i2SetPin595@value,c
  8209  000124  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8210                           
  8211                           ;PDU.c: 70: SetPin595(2, 3, OFF);
  8212  000128  0E00               	movlw	0
  8213  00012A  6E02               	movwf	i2SetPin595@Reg+1,c
  8214  00012C  0E02               	movlw	2
  8215  00012E  6E01               	movwf	i2SetPin595@Reg,c
  8216  000130  0E00               	movlw	0
  8217  000132  6E04               	movwf	i2SetPin595@pin+1,c
  8218  000134  0E03               	movlw	3
  8219  000136  6E03               	movwf	i2SetPin595@pin,c
  8220  000138  0E00               	movlw	0
  8221  00013A  6E06               	movwf	i2SetPin595@value+1,c
  8222  00013C  0E00               	movlw	0
  8223  00013E  6E05               	movwf	i2SetPin595@value,c
  8224  000140  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8225                           
  8226                           ;PDU.c: 71: SetPin595(2, 2, OFF);
  8227  000144  0E00               	movlw	0
  8228  000146  6E02               	movwf	i2SetPin595@Reg+1,c
  8229  000148  0E02               	movlw	2
  8230  00014A  6E01               	movwf	i2SetPin595@Reg,c
  8231  00014C  0E00               	movlw	0
  8232  00014E  6E04               	movwf	i2SetPin595@pin+1,c
  8233  000150  0E02               	movlw	2
  8234  000152  6E03               	movwf	i2SetPin595@pin,c
  8235  000154  0E00               	movlw	0
  8236  000156  6E06               	movwf	i2SetPin595@value+1,c
  8237  000158  0E00               	movlw	0
  8238  00015A  6E05               	movwf	i2SetPin595@value,c
  8239  00015C  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8240                           
  8241                           ;PDU.c: 72: SetPin595(3, 4, OFF);
  8242  000160  0E00               	movlw	0
  8243  000162  6E02               	movwf	i2SetPin595@Reg+1,c
  8244  000164  0E03               	movlw	3
  8245  000166  6E01               	movwf	i2SetPin595@Reg,c
  8246  000168  0E00               	movlw	0
  8247  00016A  6E04               	movwf	i2SetPin595@pin+1,c
  8248  00016C  0E04               	movlw	4
  8249  00016E  6E03               	movwf	i2SetPin595@pin,c
  8250  000170  0E00               	movlw	0
  8251  000172  6E06               	movwf	i2SetPin595@value+1,c
  8252  000174  0E00               	movlw	0
  8253  000176  6E05               	movwf	i2SetPin595@value,c
  8254  000178  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8255                           
  8256                           ;PDU.c: 73: SetPin595(3, 3, OFF);
  8257  00017C  0E00               	movlw	0
  8258  00017E  6E02               	movwf	i2SetPin595@Reg+1,c
  8259  000180  0E03               	movlw	3
  8260  000182  6E01               	movwf	i2SetPin595@Reg,c
  8261  000184  0E00               	movlw	0
  8262  000186  6E04               	movwf	i2SetPin595@pin+1,c
  8263  000188  0E03               	movlw	3
  8264  00018A  6E03               	movwf	i2SetPin595@pin,c
  8265  00018C  0E00               	movlw	0
  8266  00018E  6E06               	movwf	i2SetPin595@value+1,c
  8267  000190  0E00               	movlw	0
  8268  000192  6E05               	movwf	i2SetPin595@value,c
  8269  000194  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8270                           
  8271                           ;PDU.c: 74: SetPin595(3, 2, OFF);
  8272  000198  0E00               	movlw	0
  8273  00019A  6E02               	movwf	i2SetPin595@Reg+1,c
  8274  00019C  0E03               	movlw	3
  8275  00019E  6E01               	movwf	i2SetPin595@Reg,c
  8276  0001A0  0E00               	movlw	0
  8277  0001A2  6E04               	movwf	i2SetPin595@pin+1,c
  8278  0001A4  0E02               	movlw	2
  8279  0001A6  6E03               	movwf	i2SetPin595@pin,c
  8280  0001A8  0E00               	movlw	0
  8281  0001AA  6E06               	movwf	i2SetPin595@value+1,c
  8282  0001AC  0E00               	movlw	0
  8283  0001AE  6E05               	movwf	i2SetPin595@value,c
  8284  0001B0  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8285                           
  8286                           ;PDU.c: 75: Update();
  8287  0001B4  EC36  F011         	call	i2_Update	;wreg free
  8288                           
  8289                           ;PDU.c: 76: CurrentADC[5] = ADC_GetConversion(U10Multisense);
  8290  0001B8  0E17               	movlw	23
  8291  0001BA  ECE4  F00F         	call	_ADC_GetConversion
  8292  0001BE  C001  F0DA         	movff	?_ADC_GetConversion,_CurrentADC+10
  8293  0001C2  C002  F0DB         	movff	?_ADC_GetConversion+1,_CurrentADC+11
  8294                           
  8295                           ;PDU.c: 78: }
  8296  0001C6  0012               	return	
  8297  0001C8                     i2l3366:
  8298                           
  8299                           ;PDU.c: 79: else if(gather == 2){
  8300  0001C8  0E02               	movlw	2
  8301  0001CA  180E               	xorwf	ReadCurrent@gather,w,c
  8302  0001CC  A4D8               	btfss	status,2,c
  8303  0001CE  D088               	goto	i2l3372
  8304                           
  8305                           ;PDU.c: 81: SetPin595(1, 4, OFF);
  8306  0001D0  0E00               	movlw	0
  8307  0001D2  6E02               	movwf	i2SetPin595@Reg+1,c
  8308  0001D4  0E01               	movlw	1
  8309  0001D6  6E01               	movwf	i2SetPin595@Reg,c
  8310  0001D8  0E00               	movlw	0
  8311  0001DA  6E04               	movwf	i2SetPin595@pin+1,c
  8312  0001DC  0E04               	movlw	4
  8313  0001DE  6E03               	movwf	i2SetPin595@pin,c
  8314  0001E0  0E00               	movlw	0
  8315  0001E2  6E06               	movwf	i2SetPin595@value+1,c
  8316  0001E4  0E00               	movlw	0
  8317  0001E6  6E05               	movwf	i2SetPin595@value,c
  8318  0001E8  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8319                           
  8320                           ;PDU.c: 82: SetPin595(1, 3, OFF);
  8321  0001EC  0E00               	movlw	0
  8322  0001EE  6E02               	movwf	i2SetPin595@Reg+1,c
  8323  0001F0  0E01               	movlw	1
  8324  0001F2  6E01               	movwf	i2SetPin595@Reg,c
  8325  0001F4  0E00               	movlw	0
  8326  0001F6  6E04               	movwf	i2SetPin595@pin+1,c
  8327  0001F8  0E03               	movlw	3
  8328  0001FA  6E03               	movwf	i2SetPin595@pin,c
  8329  0001FC  0E00               	movlw	0
  8330  0001FE  6E06               	movwf	i2SetPin595@value+1,c
  8331  000200  0E00               	movlw	0
  8332  000202  6E05               	movwf	i2SetPin595@value,c
  8333  000204  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8334                           
  8335                           ;PDU.c: 83: SetPin595(1, 2, OFF);
  8336  000208  0E00               	movlw	0
  8337  00020A  6E02               	movwf	i2SetPin595@Reg+1,c
  8338  00020C  0E01               	movlw	1
  8339  00020E  6E01               	movwf	i2SetPin595@Reg,c
  8340  000210  0E00               	movlw	0
  8341  000212  6E04               	movwf	i2SetPin595@pin+1,c
  8342  000214  0E02               	movlw	2
  8343  000216  6E03               	movwf	i2SetPin595@pin,c
  8344  000218  0E00               	movlw	0
  8345  00021A  6E06               	movwf	i2SetPin595@value+1,c
  8346  00021C  0E00               	movlw	0
  8347  00021E  6E05               	movwf	i2SetPin595@value,c
  8348  000220  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8349                           
  8350                           ;PDU.c: 84: SetPin595(2, 4, ON);
  8351  000224  0E00               	movlw	0
  8352  000226  6E02               	movwf	i2SetPin595@Reg+1,c
  8353  000228  0E02               	movlw	2
  8354  00022A  6E01               	movwf	i2SetPin595@Reg,c
  8355  00022C  0E00               	movlw	0
  8356  00022E  6E04               	movwf	i2SetPin595@pin+1,c
  8357  000230  0E04               	movlw	4
  8358  000232  6E03               	movwf	i2SetPin595@pin,c
  8359  000234  0E00               	movlw	0
  8360  000236  6E06               	movwf	i2SetPin595@value+1,c
  8361  000238  0E01               	movlw	1
  8362  00023A  6E05               	movwf	i2SetPin595@value,c
  8363  00023C  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8364                           
  8365                           ;PDU.c: 85: SetPin595(2, 3, ON);
  8366  000240  0E00               	movlw	0
  8367  000242  6E02               	movwf	i2SetPin595@Reg+1,c
  8368  000244  0E02               	movlw	2
  8369  000246  6E01               	movwf	i2SetPin595@Reg,c
  8370  000248  0E00               	movlw	0
  8371  00024A  6E04               	movwf	i2SetPin595@pin+1,c
  8372  00024C  0E03               	movlw	3
  8373  00024E  6E03               	movwf	i2SetPin595@pin,c
  8374  000250  0E00               	movlw	0
  8375  000252  6E06               	movwf	i2SetPin595@value+1,c
  8376  000254  0E01               	movlw	1
  8377  000256  6E05               	movwf	i2SetPin595@value,c
  8378  000258  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8379                           
  8380                           ;PDU.c: 86: SetPin595(2, 2, OFF);
  8381  00025C  0E00               	movlw	0
  8382  00025E  6E02               	movwf	i2SetPin595@Reg+1,c
  8383  000260  0E02               	movlw	2
  8384  000262  6E01               	movwf	i2SetPin595@Reg,c
  8385  000264  0E00               	movlw	0
  8386  000266  6E04               	movwf	i2SetPin595@pin+1,c
  8387  000268  0E02               	movlw	2
  8388  00026A  6E03               	movwf	i2SetPin595@pin,c
  8389  00026C  0E00               	movlw	0
  8390  00026E  6E06               	movwf	i2SetPin595@value+1,c
  8391  000270  0E00               	movlw	0
  8392  000272  6E05               	movwf	i2SetPin595@value,c
  8393  000274  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8394                           
  8395                           ;PDU.c: 87: SetPin595(3, 4, OFF);
  8396  000278  0E00               	movlw	0
  8397  00027A  6E02               	movwf	i2SetPin595@Reg+1,c
  8398  00027C  0E03               	movlw	3
  8399  00027E  6E01               	movwf	i2SetPin595@Reg,c
  8400  000280  0E00               	movlw	0
  8401  000282  6E04               	movwf	i2SetPin595@pin+1,c
  8402  000284  0E04               	movlw	4
  8403  000286  6E03               	movwf	i2SetPin595@pin,c
  8404  000288  0E00               	movlw	0
  8405  00028A  6E06               	movwf	i2SetPin595@value+1,c
  8406  00028C  0E00               	movlw	0
  8407  00028E  6E05               	movwf	i2SetPin595@value,c
  8408  000290  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8409                           
  8410                           ;PDU.c: 88: SetPin595(3, 3, OFF);
  8411  000294  0E00               	movlw	0
  8412  000296  6E02               	movwf	i2SetPin595@Reg+1,c
  8413  000298  0E03               	movlw	3
  8414  00029A  6E01               	movwf	i2SetPin595@Reg,c
  8415  00029C  0E00               	movlw	0
  8416  00029E  6E04               	movwf	i2SetPin595@pin+1,c
  8417  0002A0  0E03               	movlw	3
  8418  0002A2  6E03               	movwf	i2SetPin595@pin,c
  8419  0002A4  0E00               	movlw	0
  8420  0002A6  6E06               	movwf	i2SetPin595@value+1,c
  8421  0002A8  0E00               	movlw	0
  8422  0002AA  6E05               	movwf	i2SetPin595@value,c
  8423  0002AC  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8424                           
  8425                           ;PDU.c: 89: SetPin595(3, 2, OFF);
  8426  0002B0  0E00               	movlw	0
  8427  0002B2  6E02               	movwf	i2SetPin595@Reg+1,c
  8428  0002B4  0E03               	movlw	3
  8429  0002B6  6E01               	movwf	i2SetPin595@Reg,c
  8430  0002B8  0E00               	movlw	0
  8431  0002BA  6E04               	movwf	i2SetPin595@pin+1,c
  8432  0002BC  0E02               	movlw	2
  8433  0002BE  6E03               	movwf	i2SetPin595@pin,c
  8434  0002C0  0E00               	movlw	0
  8435  0002C2  6E06               	movwf	i2SetPin595@value+1,c
  8436  0002C4  0E00               	movlw	0
  8437  0002C6  6E05               	movwf	i2SetPin595@value,c
  8438  0002C8  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8439                           
  8440                           ;PDU.c: 90: Update();
  8441  0002CC  EC36  F011         	call	i2_Update	;wreg free
  8442                           
  8443                           ;PDU.c: 91: CurrentADC[2] = ADC_GetConversion(U8Multisense);
  8444  0002D0  0E16               	movlw	22
  8445  0002D2  ECE4  F00F         	call	_ADC_GetConversion
  8446  0002D6  C001  F0D4         	movff	?_ADC_GetConversion,_CurrentADC+4
  8447  0002DA  C002  F0D5         	movff	?_ADC_GetConversion+1,_CurrentADC+5
  8448                           
  8449                           ;PDU.c: 93: }
  8450  0002DE  0012               	return	
  8451  0002E0                     i2l3372:
  8452                           
  8453                           ;PDU.c: 94: else if(gather == 3){
  8454  0002E0  0E03               	movlw	3
  8455  0002E2  180E               	xorwf	ReadCurrent@gather,w,c
  8456  0002E4  A4D8               	btfss	status,2,c
  8457  0002E6  D088               	goto	i2l3378
  8458                           
  8459                           ;PDU.c: 96: SetPin595(1, 4, OFF);
  8460  0002E8  0E00               	movlw	0
  8461  0002EA  6E02               	movwf	i2SetPin595@Reg+1,c
  8462  0002EC  0E01               	movlw	1
  8463  0002EE  6E01               	movwf	i2SetPin595@Reg,c
  8464  0002F0  0E00               	movlw	0
  8465  0002F2  6E04               	movwf	i2SetPin595@pin+1,c
  8466  0002F4  0E04               	movlw	4
  8467  0002F6  6E03               	movwf	i2SetPin595@pin,c
  8468  0002F8  0E00               	movlw	0
  8469  0002FA  6E06               	movwf	i2SetPin595@value+1,c
  8470  0002FC  0E00               	movlw	0
  8471  0002FE  6E05               	movwf	i2SetPin595@value,c
  8472  000300  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8473                           
  8474                           ;PDU.c: 97: SetPin595(1, 3, OFF);
  8475  000304  0E00               	movlw	0
  8476  000306  6E02               	movwf	i2SetPin595@Reg+1,c
  8477  000308  0E01               	movlw	1
  8478  00030A  6E01               	movwf	i2SetPin595@Reg,c
  8479  00030C  0E00               	movlw	0
  8480  00030E  6E04               	movwf	i2SetPin595@pin+1,c
  8481  000310  0E03               	movlw	3
  8482  000312  6E03               	movwf	i2SetPin595@pin,c
  8483  000314  0E00               	movlw	0
  8484  000316  6E06               	movwf	i2SetPin595@value+1,c
  8485  000318  0E00               	movlw	0
  8486  00031A  6E05               	movwf	i2SetPin595@value,c
  8487  00031C  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8488                           
  8489                           ;PDU.c: 98: SetPin595(1, 2, OFF);
  8490  000320  0E00               	movlw	0
  8491  000322  6E02               	movwf	i2SetPin595@Reg+1,c
  8492  000324  0E01               	movlw	1
  8493  000326  6E01               	movwf	i2SetPin595@Reg,c
  8494  000328  0E00               	movlw	0
  8495  00032A  6E04               	movwf	i2SetPin595@pin+1,c
  8496  00032C  0E02               	movlw	2
  8497  00032E  6E03               	movwf	i2SetPin595@pin,c
  8498  000330  0E00               	movlw	0
  8499  000332  6E06               	movwf	i2SetPin595@value+1,c
  8500  000334  0E00               	movlw	0
  8501  000336  6E05               	movwf	i2SetPin595@value,c
  8502  000338  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8503                           
  8504                           ;PDU.c: 99: SetPin595(2, 4, OFF);
  8505  00033C  0E00               	movlw	0
  8506  00033E  6E02               	movwf	i2SetPin595@Reg+1,c
  8507  000340  0E02               	movlw	2
  8508  000342  6E01               	movwf	i2SetPin595@Reg,c
  8509  000344  0E00               	movlw	0
  8510  000346  6E04               	movwf	i2SetPin595@pin+1,c
  8511  000348  0E04               	movlw	4
  8512  00034A  6E03               	movwf	i2SetPin595@pin,c
  8513  00034C  0E00               	movlw	0
  8514  00034E  6E06               	movwf	i2SetPin595@value+1,c
  8515  000350  0E00               	movlw	0
  8516  000352  6E05               	movwf	i2SetPin595@value,c
  8517  000354  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8518                           
  8519                           ;PDU.c: 100: SetPin595(2, 3, OFF);
  8520  000358  0E00               	movlw	0
  8521  00035A  6E02               	movwf	i2SetPin595@Reg+1,c
  8522  00035C  0E02               	movlw	2
  8523  00035E  6E01               	movwf	i2SetPin595@Reg,c
  8524  000360  0E00               	movlw	0
  8525  000362  6E04               	movwf	i2SetPin595@pin+1,c
  8526  000364  0E03               	movlw	3
  8527  000366  6E03               	movwf	i2SetPin595@pin,c
  8528  000368  0E00               	movlw	0
  8529  00036A  6E06               	movwf	i2SetPin595@value+1,c
  8530  00036C  0E00               	movlw	0
  8531  00036E  6E05               	movwf	i2SetPin595@value,c
  8532  000370  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8533                           
  8534                           ;PDU.c: 101: SetPin595(2, 2, OFF);
  8535  000374  0E00               	movlw	0
  8536  000376  6E02               	movwf	i2SetPin595@Reg+1,c
  8537  000378  0E02               	movlw	2
  8538  00037A  6E01               	movwf	i2SetPin595@Reg,c
  8539  00037C  0E00               	movlw	0
  8540  00037E  6E04               	movwf	i2SetPin595@pin+1,c
  8541  000380  0E02               	movlw	2
  8542  000382  6E03               	movwf	i2SetPin595@pin,c
  8543  000384  0E00               	movlw	0
  8544  000386  6E06               	movwf	i2SetPin595@value+1,c
  8545  000388  0E00               	movlw	0
  8546  00038A  6E05               	movwf	i2SetPin595@value,c
  8547  00038C  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8548                           
  8549                           ;PDU.c: 102: SetPin595(3, 4, ON);
  8550  000390  0E00               	movlw	0
  8551  000392  6E02               	movwf	i2SetPin595@Reg+1,c
  8552  000394  0E03               	movlw	3
  8553  000396  6E01               	movwf	i2SetPin595@Reg,c
  8554  000398  0E00               	movlw	0
  8555  00039A  6E04               	movwf	i2SetPin595@pin+1,c
  8556  00039C  0E04               	movlw	4
  8557  00039E  6E03               	movwf	i2SetPin595@pin,c
  8558  0003A0  0E00               	movlw	0
  8559  0003A2  6E06               	movwf	i2SetPin595@value+1,c
  8560  0003A4  0E01               	movlw	1
  8561  0003A6  6E05               	movwf	i2SetPin595@value,c
  8562  0003A8  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8563                           
  8564                           ;PDU.c: 103: SetPin595(3, 3, OFF);
  8565  0003AC  0E00               	movlw	0
  8566  0003AE  6E02               	movwf	i2SetPin595@Reg+1,c
  8567  0003B0  0E03               	movlw	3
  8568  0003B2  6E01               	movwf	i2SetPin595@Reg,c
  8569  0003B4  0E00               	movlw	0
  8570  0003B6  6E04               	movwf	i2SetPin595@pin+1,c
  8571  0003B8  0E03               	movlw	3
  8572  0003BA  6E03               	movwf	i2SetPin595@pin,c
  8573  0003BC  0E00               	movlw	0
  8574  0003BE  6E06               	movwf	i2SetPin595@value+1,c
  8575  0003C0  0E00               	movlw	0
  8576  0003C2  6E05               	movwf	i2SetPin595@value,c
  8577  0003C4  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8578                           
  8579                           ;PDU.c: 104: SetPin595(3, 2, OFF);
  8580  0003C8  0E00               	movlw	0
  8581  0003CA  6E02               	movwf	i2SetPin595@Reg+1,c
  8582  0003CC  0E03               	movlw	3
  8583  0003CE  6E01               	movwf	i2SetPin595@Reg,c
  8584  0003D0  0E00               	movlw	0
  8585  0003D2  6E04               	movwf	i2SetPin595@pin+1,c
  8586  0003D4  0E02               	movlw	2
  8587  0003D6  6E03               	movwf	i2SetPin595@pin,c
  8588  0003D8  0E00               	movlw	0
  8589  0003DA  6E06               	movwf	i2SetPin595@value+1,c
  8590  0003DC  0E00               	movlw	0
  8591  0003DE  6E05               	movwf	i2SetPin595@value,c
  8592  0003E0  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8593                           
  8594                           ;PDU.c: 105: Update();
  8595  0003E4  EC36  F011         	call	i2_Update	;wreg free
  8596                           
  8597                           ;PDU.c: 106: CurrentADC[1] = ADC_GetConversion(U5Multisense);
  8598  0003E8  0E10               	movlw	16
  8599  0003EA  ECE4  F00F         	call	_ADC_GetConversion
  8600  0003EE  C001  F0D2         	movff	?_ADC_GetConversion,_CurrentADC+2
  8601  0003F2  C002  F0D3         	movff	?_ADC_GetConversion+1,_CurrentADC+3
  8602                           
  8603                           ;PDU.c: 108: }
  8604  0003F6  0012               	return	
  8605  0003F8                     i2l3378:
  8606                           
  8607                           ;PDU.c: 109: else if(gather == 4){
  8608  0003F8  0E04               	movlw	4
  8609  0003FA  180E               	xorwf	ReadCurrent@gather,w,c
  8610  0003FC  A4D8               	btfss	status,2,c
  8611  0003FE  D088               	goto	i2l3384
  8612                           
  8613                           ;PDU.c: 111: SetPin595(1, 4, ON);
  8614  000400  0E00               	movlw	0
  8615  000402  6E02               	movwf	i2SetPin595@Reg+1,c
  8616  000404  0E01               	movlw	1
  8617  000406  6E01               	movwf	i2SetPin595@Reg,c
  8618  000408  0E00               	movlw	0
  8619  00040A  6E04               	movwf	i2SetPin595@pin+1,c
  8620  00040C  0E04               	movlw	4
  8621  00040E  6E03               	movwf	i2SetPin595@pin,c
  8622  000410  0E00               	movlw	0
  8623  000412  6E06               	movwf	i2SetPin595@value+1,c
  8624  000414  0E01               	movlw	1
  8625  000416  6E05               	movwf	i2SetPin595@value,c
  8626  000418  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8627                           
  8628                           ;PDU.c: 112: SetPin595(1, 3, ON);
  8629  00041C  0E00               	movlw	0
  8630  00041E  6E02               	movwf	i2SetPin595@Reg+1,c
  8631  000420  0E01               	movlw	1
  8632  000422  6E01               	movwf	i2SetPin595@Reg,c
  8633  000424  0E00               	movlw	0
  8634  000426  6E04               	movwf	i2SetPin595@pin+1,c
  8635  000428  0E03               	movlw	3
  8636  00042A  6E03               	movwf	i2SetPin595@pin,c
  8637  00042C  0E00               	movlw	0
  8638  00042E  6E06               	movwf	i2SetPin595@value+1,c
  8639  000430  0E01               	movlw	1
  8640  000432  6E05               	movwf	i2SetPin595@value,c
  8641  000434  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8642                           
  8643                           ;PDU.c: 113: SetPin595(1, 2, OFF);
  8644  000438  0E00               	movlw	0
  8645  00043A  6E02               	movwf	i2SetPin595@Reg+1,c
  8646  00043C  0E01               	movlw	1
  8647  00043E  6E01               	movwf	i2SetPin595@Reg,c
  8648  000440  0E00               	movlw	0
  8649  000442  6E04               	movwf	i2SetPin595@pin+1,c
  8650  000444  0E02               	movlw	2
  8651  000446  6E03               	movwf	i2SetPin595@pin,c
  8652  000448  0E00               	movlw	0
  8653  00044A  6E06               	movwf	i2SetPin595@value+1,c
  8654  00044C  0E00               	movlw	0
  8655  00044E  6E05               	movwf	i2SetPin595@value,c
  8656  000450  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8657                           
  8658                           ;PDU.c: 114: SetPin595(2, 4, OFF);
  8659  000454  0E00               	movlw	0
  8660  000456  6E02               	movwf	i2SetPin595@Reg+1,c
  8661  000458  0E02               	movlw	2
  8662  00045A  6E01               	movwf	i2SetPin595@Reg,c
  8663  00045C  0E00               	movlw	0
  8664  00045E  6E04               	movwf	i2SetPin595@pin+1,c
  8665  000460  0E04               	movlw	4
  8666  000462  6E03               	movwf	i2SetPin595@pin,c
  8667  000464  0E00               	movlw	0
  8668  000466  6E06               	movwf	i2SetPin595@value+1,c
  8669  000468  0E00               	movlw	0
  8670  00046A  6E05               	movwf	i2SetPin595@value,c
  8671  00046C  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8672                           
  8673                           ;PDU.c: 115: SetPin595(2, 3, OFF);
  8674  000470  0E00               	movlw	0
  8675  000472  6E02               	movwf	i2SetPin595@Reg+1,c
  8676  000474  0E02               	movlw	2
  8677  000476  6E01               	movwf	i2SetPin595@Reg,c
  8678  000478  0E00               	movlw	0
  8679  00047A  6E04               	movwf	i2SetPin595@pin+1,c
  8680  00047C  0E03               	movlw	3
  8681  00047E  6E03               	movwf	i2SetPin595@pin,c
  8682  000480  0E00               	movlw	0
  8683  000482  6E06               	movwf	i2SetPin595@value+1,c
  8684  000484  0E00               	movlw	0
  8685  000486  6E05               	movwf	i2SetPin595@value,c
  8686  000488  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8687                           
  8688                           ;PDU.c: 116: SetPin595(2, 2, OFF);
  8689  00048C  0E00               	movlw	0
  8690  00048E  6E02               	movwf	i2SetPin595@Reg+1,c
  8691  000490  0E02               	movlw	2
  8692  000492  6E01               	movwf	i2SetPin595@Reg,c
  8693  000494  0E00               	movlw	0
  8694  000496  6E04               	movwf	i2SetPin595@pin+1,c
  8695  000498  0E02               	movlw	2
  8696  00049A  6E03               	movwf	i2SetPin595@pin,c
  8697  00049C  0E00               	movlw	0
  8698  00049E  6E06               	movwf	i2SetPin595@value+1,c
  8699  0004A0  0E00               	movlw	0
  8700  0004A2  6E05               	movwf	i2SetPin595@value,c
  8701  0004A4  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8702                           
  8703                           ;PDU.c: 117: SetPin595(3, 4, OFF);
  8704  0004A8  0E00               	movlw	0
  8705  0004AA  6E02               	movwf	i2SetPin595@Reg+1,c
  8706  0004AC  0E03               	movlw	3
  8707  0004AE  6E01               	movwf	i2SetPin595@Reg,c
  8708  0004B0  0E00               	movlw	0
  8709  0004B2  6E04               	movwf	i2SetPin595@pin+1,c
  8710  0004B4  0E04               	movlw	4
  8711  0004B6  6E03               	movwf	i2SetPin595@pin,c
  8712  0004B8  0E00               	movlw	0
  8713  0004BA  6E06               	movwf	i2SetPin595@value+1,c
  8714  0004BC  0E00               	movlw	0
  8715  0004BE  6E05               	movwf	i2SetPin595@value,c
  8716  0004C0  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8717                           
  8718                           ;PDU.c: 118: SetPin595(3, 3, OFF);
  8719  0004C4  0E00               	movlw	0
  8720  0004C6  6E02               	movwf	i2SetPin595@Reg+1,c
  8721  0004C8  0E03               	movlw	3
  8722  0004CA  6E01               	movwf	i2SetPin595@Reg,c
  8723  0004CC  0E00               	movlw	0
  8724  0004CE  6E04               	movwf	i2SetPin595@pin+1,c
  8725  0004D0  0E03               	movlw	3
  8726  0004D2  6E03               	movwf	i2SetPin595@pin,c
  8727  0004D4  0E00               	movlw	0
  8728  0004D6  6E06               	movwf	i2SetPin595@value+1,c
  8729  0004D8  0E00               	movlw	0
  8730  0004DA  6E05               	movwf	i2SetPin595@value,c
  8731  0004DC  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8732                           
  8733                           ;PDU.c: 119: SetPin595(3, 2, OFF);
  8734  0004E0  0E00               	movlw	0
  8735  0004E2  6E02               	movwf	i2SetPin595@Reg+1,c
  8736  0004E4  0E03               	movlw	3
  8737  0004E6  6E01               	movwf	i2SetPin595@Reg,c
  8738  0004E8  0E00               	movlw	0
  8739  0004EA  6E04               	movwf	i2SetPin595@pin+1,c
  8740  0004EC  0E02               	movlw	2
  8741  0004EE  6E03               	movwf	i2SetPin595@pin,c
  8742  0004F0  0E00               	movlw	0
  8743  0004F2  6E06               	movwf	i2SetPin595@value+1,c
  8744  0004F4  0E00               	movlw	0
  8745  0004F6  6E05               	movwf	i2SetPin595@value,c
  8746  0004F8  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8747                           
  8748                           ;PDU.c: 120: Update();
  8749  0004FC  EC36  F011         	call	i2_Update	;wreg free
  8750                           
  8751                           ;PDU.c: 121: CurrentADC[4] = ADC_GetConversion(U10Multisense);
  8752  000500  0E17               	movlw	23
  8753  000502  ECE4  F00F         	call	_ADC_GetConversion
  8754  000506  C001  F0D8         	movff	?_ADC_GetConversion,_CurrentADC+8
  8755  00050A  C002  F0D9         	movff	?_ADC_GetConversion+1,_CurrentADC+9
  8756                           
  8757                           ;PDU.c: 123: }
  8758  00050E  0012               	return	
  8759  000510                     i2l3384:
  8760                           
  8761                           ;PDU.c: 124: else if(gather == 5){
  8762  000510  0E05               	movlw	5
  8763  000512  180E               	xorwf	ReadCurrent@gather,w,c
  8764  000514  A4D8               	btfss	status,2,c
  8765  000516  D088               	goto	i2l3390
  8766                           
  8767                           ;PDU.c: 126: SetPin595(1, 4, OFF);
  8768  000518  0E00               	movlw	0
  8769  00051A  6E02               	movwf	i2SetPin595@Reg+1,c
  8770  00051C  0E01               	movlw	1
  8771  00051E  6E01               	movwf	i2SetPin595@Reg,c
  8772  000520  0E00               	movlw	0
  8773  000522  6E04               	movwf	i2SetPin595@pin+1,c
  8774  000524  0E04               	movlw	4
  8775  000526  6E03               	movwf	i2SetPin595@pin,c
  8776  000528  0E00               	movlw	0
  8777  00052A  6E06               	movwf	i2SetPin595@value+1,c
  8778  00052C  0E00               	movlw	0
  8779  00052E  6E05               	movwf	i2SetPin595@value,c
  8780  000530  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8781                           
  8782                           ;PDU.c: 127: SetPin595(1, 3, OFF);
  8783  000534  0E00               	movlw	0
  8784  000536  6E02               	movwf	i2SetPin595@Reg+1,c
  8785  000538  0E01               	movlw	1
  8786  00053A  6E01               	movwf	i2SetPin595@Reg,c
  8787  00053C  0E00               	movlw	0
  8788  00053E  6E04               	movwf	i2SetPin595@pin+1,c
  8789  000540  0E03               	movlw	3
  8790  000542  6E03               	movwf	i2SetPin595@pin,c
  8791  000544  0E00               	movlw	0
  8792  000546  6E06               	movwf	i2SetPin595@value+1,c
  8793  000548  0E00               	movlw	0
  8794  00054A  6E05               	movwf	i2SetPin595@value,c
  8795  00054C  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8796                           
  8797                           ;PDU.c: 128: SetPin595(1, 2, OFF);
  8798  000550  0E00               	movlw	0
  8799  000552  6E02               	movwf	i2SetPin595@Reg+1,c
  8800  000554  0E01               	movlw	1
  8801  000556  6E01               	movwf	i2SetPin595@Reg,c
  8802  000558  0E00               	movlw	0
  8803  00055A  6E04               	movwf	i2SetPin595@pin+1,c
  8804  00055C  0E02               	movlw	2
  8805  00055E  6E03               	movwf	i2SetPin595@pin,c
  8806  000560  0E00               	movlw	0
  8807  000562  6E06               	movwf	i2SetPin595@value+1,c
  8808  000564  0E00               	movlw	0
  8809  000566  6E05               	movwf	i2SetPin595@value,c
  8810  000568  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8811                           
  8812                           ;PDU.c: 129: SetPin595(2, 4, ON);
  8813  00056C  0E00               	movlw	0
  8814  00056E  6E02               	movwf	i2SetPin595@Reg+1,c
  8815  000570  0E02               	movlw	2
  8816  000572  6E01               	movwf	i2SetPin595@Reg,c
  8817  000574  0E00               	movlw	0
  8818  000576  6E04               	movwf	i2SetPin595@pin+1,c
  8819  000578  0E04               	movlw	4
  8820  00057A  6E03               	movwf	i2SetPin595@pin,c
  8821  00057C  0E00               	movlw	0
  8822  00057E  6E06               	movwf	i2SetPin595@value+1,c
  8823  000580  0E01               	movlw	1
  8824  000582  6E05               	movwf	i2SetPin595@value,c
  8825  000584  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8826                           
  8827                           ;PDU.c: 130: SetPin595(2, 3, OFF);
  8828  000588  0E00               	movlw	0
  8829  00058A  6E02               	movwf	i2SetPin595@Reg+1,c
  8830  00058C  0E02               	movlw	2
  8831  00058E  6E01               	movwf	i2SetPin595@Reg,c
  8832  000590  0E00               	movlw	0
  8833  000592  6E04               	movwf	i2SetPin595@pin+1,c
  8834  000594  0E03               	movlw	3
  8835  000596  6E03               	movwf	i2SetPin595@pin,c
  8836  000598  0E00               	movlw	0
  8837  00059A  6E06               	movwf	i2SetPin595@value+1,c
  8838  00059C  0E00               	movlw	0
  8839  00059E  6E05               	movwf	i2SetPin595@value,c
  8840  0005A0  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8841                           
  8842                           ;PDU.c: 131: SetPin595(2, 2, OFF);
  8843  0005A4  0E00               	movlw	0
  8844  0005A6  6E02               	movwf	i2SetPin595@Reg+1,c
  8845  0005A8  0E02               	movlw	2
  8846  0005AA  6E01               	movwf	i2SetPin595@Reg,c
  8847  0005AC  0E00               	movlw	0
  8848  0005AE  6E04               	movwf	i2SetPin595@pin+1,c
  8849  0005B0  0E02               	movlw	2
  8850  0005B2  6E03               	movwf	i2SetPin595@pin,c
  8851  0005B4  0E00               	movlw	0
  8852  0005B6  6E06               	movwf	i2SetPin595@value+1,c
  8853  0005B8  0E00               	movlw	0
  8854  0005BA  6E05               	movwf	i2SetPin595@value,c
  8855  0005BC  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8856                           
  8857                           ;PDU.c: 132: SetPin595(3, 4, OFF);
  8858  0005C0  0E00               	movlw	0
  8859  0005C2  6E02               	movwf	i2SetPin595@Reg+1,c
  8860  0005C4  0E03               	movlw	3
  8861  0005C6  6E01               	movwf	i2SetPin595@Reg,c
  8862  0005C8  0E00               	movlw	0
  8863  0005CA  6E04               	movwf	i2SetPin595@pin+1,c
  8864  0005CC  0E04               	movlw	4
  8865  0005CE  6E03               	movwf	i2SetPin595@pin,c
  8866  0005D0  0E00               	movlw	0
  8867  0005D2  6E06               	movwf	i2SetPin595@value+1,c
  8868  0005D4  0E00               	movlw	0
  8869  0005D6  6E05               	movwf	i2SetPin595@value,c
  8870  0005D8  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8871                           
  8872                           ;PDU.c: 133: SetPin595(3, 3, OFF);
  8873  0005DC  0E00               	movlw	0
  8874  0005DE  6E02               	movwf	i2SetPin595@Reg+1,c
  8875  0005E0  0E03               	movlw	3
  8876  0005E2  6E01               	movwf	i2SetPin595@Reg,c
  8877  0005E4  0E00               	movlw	0
  8878  0005E6  6E04               	movwf	i2SetPin595@pin+1,c
  8879  0005E8  0E03               	movlw	3
  8880  0005EA  6E03               	movwf	i2SetPin595@pin,c
  8881  0005EC  0E00               	movlw	0
  8882  0005EE  6E06               	movwf	i2SetPin595@value+1,c
  8883  0005F0  0E00               	movlw	0
  8884  0005F2  6E05               	movwf	i2SetPin595@value,c
  8885  0005F4  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8886                           
  8887                           ;PDU.c: 134: SetPin595(3, 2, OFF);
  8888  0005F8  0E00               	movlw	0
  8889  0005FA  6E02               	movwf	i2SetPin595@Reg+1,c
  8890  0005FC  0E03               	movlw	3
  8891  0005FE  6E01               	movwf	i2SetPin595@Reg,c
  8892  000600  0E00               	movlw	0
  8893  000602  6E04               	movwf	i2SetPin595@pin+1,c
  8894  000604  0E02               	movlw	2
  8895  000606  6E03               	movwf	i2SetPin595@pin,c
  8896  000608  0E00               	movlw	0
  8897  00060A  6E06               	movwf	i2SetPin595@value+1,c
  8898  00060C  0E00               	movlw	0
  8899  00060E  6E05               	movwf	i2SetPin595@value,c
  8900  000610  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8901                           
  8902                           ;PDU.c: 135: Update();
  8903  000614  EC36  F011         	call	i2_Update	;wreg free
  8904                           
  8905                           ;PDU.c: 136: CurrentADC[3] = ADC_GetConversion(U8Multisense);
  8906  000618  0E16               	movlw	22
  8907  00061A  ECE4  F00F         	call	_ADC_GetConversion
  8908  00061E  C001  F0D6         	movff	?_ADC_GetConversion,_CurrentADC+6
  8909  000622  C002  F0D7         	movff	?_ADC_GetConversion+1,_CurrentADC+7
  8910                           
  8911                           ;PDU.c: 138: }
  8912  000626  0012               	return	
  8913  000628                     i2l3390:
  8914                           
  8915                           ;PDU.c: 139: else if(gather == 6){
  8916  000628  0E06               	movlw	6
  8917  00062A  180E               	xorwf	ReadCurrent@gather,w,c
  8918  00062C  A4D8               	btfss	status,2,c
  8919  00062E  0012               	return	
  8920                           
  8921                           ;PDU.c: 141: SetPin595(1, 4, OFF);
  8922  000630  0E00               	movlw	0
  8923  000632  6E02               	movwf	i2SetPin595@Reg+1,c
  8924  000634  0E01               	movlw	1
  8925  000636  6E01               	movwf	i2SetPin595@Reg,c
  8926  000638  0E00               	movlw	0
  8927  00063A  6E04               	movwf	i2SetPin595@pin+1,c
  8928  00063C  0E04               	movlw	4
  8929  00063E  6E03               	movwf	i2SetPin595@pin,c
  8930  000640  0E00               	movlw	0
  8931  000642  6E06               	movwf	i2SetPin595@value+1,c
  8932  000644  0E00               	movlw	0
  8933  000646  6E05               	movwf	i2SetPin595@value,c
  8934  000648  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8935                           
  8936                           ;PDU.c: 142: SetPin595(1, 3, OFF);
  8937  00064C  0E00               	movlw	0
  8938  00064E  6E02               	movwf	i2SetPin595@Reg+1,c
  8939  000650  0E01               	movlw	1
  8940  000652  6E01               	movwf	i2SetPin595@Reg,c
  8941  000654  0E00               	movlw	0
  8942  000656  6E04               	movwf	i2SetPin595@pin+1,c
  8943  000658  0E03               	movlw	3
  8944  00065A  6E03               	movwf	i2SetPin595@pin,c
  8945  00065C  0E00               	movlw	0
  8946  00065E  6E06               	movwf	i2SetPin595@value+1,c
  8947  000660  0E00               	movlw	0
  8948  000662  6E05               	movwf	i2SetPin595@value,c
  8949  000664  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8950                           
  8951                           ;PDU.c: 143: SetPin595(1, 2, OFF);
  8952  000668  0E00               	movlw	0
  8953  00066A  6E02               	movwf	i2SetPin595@Reg+1,c
  8954  00066C  0E01               	movlw	1
  8955  00066E  6E01               	movwf	i2SetPin595@Reg,c
  8956  000670  0E00               	movlw	0
  8957  000672  6E04               	movwf	i2SetPin595@pin+1,c
  8958  000674  0E02               	movlw	2
  8959  000676  6E03               	movwf	i2SetPin595@pin,c
  8960  000678  0E00               	movlw	0
  8961  00067A  6E06               	movwf	i2SetPin595@value+1,c
  8962  00067C  0E00               	movlw	0
  8963  00067E  6E05               	movwf	i2SetPin595@value,c
  8964  000680  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8965                           
  8966                           ;PDU.c: 144: SetPin595(2, 4, OFF);
  8967  000684  0E00               	movlw	0
  8968  000686  6E02               	movwf	i2SetPin595@Reg+1,c
  8969  000688  0E02               	movlw	2
  8970  00068A  6E01               	movwf	i2SetPin595@Reg,c
  8971  00068C  0E00               	movlw	0
  8972  00068E  6E04               	movwf	i2SetPin595@pin+1,c
  8973  000690  0E04               	movlw	4
  8974  000692  6E03               	movwf	i2SetPin595@pin,c
  8975  000694  0E00               	movlw	0
  8976  000696  6E06               	movwf	i2SetPin595@value+1,c
  8977  000698  0E00               	movlw	0
  8978  00069A  6E05               	movwf	i2SetPin595@value,c
  8979  00069C  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8980                           
  8981                           ;PDU.c: 145: SetPin595(2, 3, OFF);
  8982  0006A0  0E00               	movlw	0
  8983  0006A2  6E02               	movwf	i2SetPin595@Reg+1,c
  8984  0006A4  0E02               	movlw	2
  8985  0006A6  6E01               	movwf	i2SetPin595@Reg,c
  8986  0006A8  0E00               	movlw	0
  8987  0006AA  6E04               	movwf	i2SetPin595@pin+1,c
  8988  0006AC  0E03               	movlw	3
  8989  0006AE  6E03               	movwf	i2SetPin595@pin,c
  8990  0006B0  0E00               	movlw	0
  8991  0006B2  6E06               	movwf	i2SetPin595@value+1,c
  8992  0006B4  0E00               	movlw	0
  8993  0006B6  6E05               	movwf	i2SetPin595@value,c
  8994  0006B8  EC7E  F00E         	call	i2_SetPin595	;wreg free
  8995                           
  8996                           ;PDU.c: 146: SetPin595(2, 2, OFF);
  8997  0006BC  0E00               	movlw	0
  8998  0006BE  6E02               	movwf	i2SetPin595@Reg+1,c
  8999  0006C0  0E02               	movlw	2
  9000  0006C2  6E01               	movwf	i2SetPin595@Reg,c
  9001  0006C4  0E00               	movlw	0
  9002  0006C6  6E04               	movwf	i2SetPin595@pin+1,c
  9003  0006C8  0E02               	movlw	2
  9004  0006CA  6E03               	movwf	i2SetPin595@pin,c
  9005  0006CC  0E00               	movlw	0
  9006  0006CE  6E06               	movwf	i2SetPin595@value+1,c
  9007  0006D0  0E00               	movlw	0
  9008  0006D2  6E05               	movwf	i2SetPin595@value,c
  9009  0006D4  EC7E  F00E         	call	i2_SetPin595	;wreg free
  9010                           
  9011                           ;PDU.c: 147: SetPin595(3, 4, ON);
  9012  0006D8  0E00               	movlw	0
  9013  0006DA  6E02               	movwf	i2SetPin595@Reg+1,c
  9014  0006DC  0E03               	movlw	3
  9015  0006DE  6E01               	movwf	i2SetPin595@Reg,c
  9016  0006E0  0E00               	movlw	0
  9017  0006E2  6E04               	movwf	i2SetPin595@pin+1,c
  9018  0006E4  0E04               	movlw	4
  9019  0006E6  6E03               	movwf	i2SetPin595@pin,c
  9020  0006E8  0E00               	movlw	0
  9021  0006EA  6E06               	movwf	i2SetPin595@value+1,c
  9022  0006EC  0E01               	movlw	1
  9023  0006EE  6E05               	movwf	i2SetPin595@value,c
  9024  0006F0  EC7E  F00E         	call	i2_SetPin595	;wreg free
  9025                           
  9026                           ;PDU.c: 148: SetPin595(3, 3, ON);
  9027  0006F4  0E00               	movlw	0
  9028  0006F6  6E02               	movwf	i2SetPin595@Reg+1,c
  9029  0006F8  0E03               	movlw	3
  9030  0006FA  6E01               	movwf	i2SetPin595@Reg,c
  9031  0006FC  0E00               	movlw	0
  9032  0006FE  6E04               	movwf	i2SetPin595@pin+1,c
  9033  000700  0E03               	movlw	3
  9034  000702  6E03               	movwf	i2SetPin595@pin,c
  9035  000704  0E00               	movlw	0
  9036  000706  6E06               	movwf	i2SetPin595@value+1,c
  9037  000708  0E01               	movlw	1
  9038  00070A  6E05               	movwf	i2SetPin595@value,c
  9039  00070C  EC7E  F00E         	call	i2_SetPin595	;wreg free
  9040                           
  9041                           ;PDU.c: 149: SetPin595(3, 2, OFF);
  9042  000710  0E00               	movlw	0
  9043  000712  6E02               	movwf	i2SetPin595@Reg+1,c
  9044  000714  0E03               	movlw	3
  9045  000716  6E01               	movwf	i2SetPin595@Reg,c
  9046  000718  0E00               	movlw	0
  9047  00071A  6E04               	movwf	i2SetPin595@pin+1,c
  9048  00071C  0E02               	movlw	2
  9049  00071E  6E03               	movwf	i2SetPin595@pin,c
  9050  000720  0E00               	movlw	0
  9051  000722  6E06               	movwf	i2SetPin595@value+1,c
  9052  000724  0E00               	movlw	0
  9053  000726  6E05               	movwf	i2SetPin595@value,c
  9054  000728  EC7E  F00E         	call	i2_SetPin595	;wreg free
  9055                           
  9056                           ;PDU.c: 150: Update();
  9057  00072C  EC36  F011         	call	i2_Update	;wreg free
  9058                           
  9059                           ;PDU.c: 151: CurrentADC[0] = ADC_GetConversion(U5Multisense);
  9060  000730  0E10               	movlw	16
  9061  000732  ECE4  F00F         	call	_ADC_GetConversion
  9062  000736  C001  F0D0         	movff	?_ADC_GetConversion,_CurrentADC
  9063  00073A  C002  F0D1         	movff	?_ADC_GetConversion+1,_CurrentADC+1
  9064  00073E  0012               	return	
  9065  000740                     __end_of_ReadCurrent:
  9066                           	opt stack 0
  9067                           pclatu	equ	0xFFB
  9068                           pclath	equ	0xFFA
  9069                           tblptru	equ	0xFF8
  9070                           tblptrh	equ	0xFF7
  9071                           tblptrl	equ	0xFF6
  9072                           tablat	equ	0xFF5
  9073                           prodh	equ	0xFF4
  9074                           prodl	equ	0xFF3
  9075                           intcon	equ	0xFF2
  9076                           intcon2	equ	0xFF1
  9077                           postinc0	equ	0xFEE
  9078                           fsr0h	equ	0xFEA
  9079                           fsr0l	equ	0xFE9
  9080                           wreg	equ	0xFE8
  9081                           indf1	equ	0xFE7
  9082                           fsr1h	equ	0xFE2
  9083                           fsr1l	equ	0xFE1
  9084                           indf2	equ	0xFDF
  9085                           postinc2	equ	0xFDE
  9086                           postdec2	equ	0xFDD
  9087                           plusw2	equ	0xFDB
  9088                           fsr2h	equ	0xFDA
  9089                           fsr2l	equ	0xFD9
  9090                           status	equ	0xFD8
  9091                           
  9092 ;; *************** function i2_Update *****************
  9093 ;; Defined at:
  9094 ;;		line 225 in file "PDU.c"
  9095 ;; Parameters:    Size  Location     Type
  9096 ;;		None
  9097 ;; Auto vars:     Size  Location     Type
  9098 ;;		None
  9099 ;; Return value:  Size  Location     Type
  9100 ;;                  1    wreg      void 
  9101 ;; Registers used:
  9102 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9103 ;; Tracked objects:
  9104 ;;		On entry : 0/0
  9105 ;;		On exit  : 0/0
  9106 ;;		Unchanged: 0/0
  9107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9108 ;;      Params:         0       0       0       0       0       0       0
  9109 ;;      Locals:         0       0       0       0       0       0       0
  9110 ;;      Temps:          0       0       0       0       0       0       0
  9111 ;;      Totals:         0       0       0       0       0       0       0
  9112 ;;Total ram usage:        0 bytes
  9113 ;; Hardware stack levels used:    1
  9114 ;; Hardware stack levels required when called:    2
  9115 ;; This function calls:
  9116 ;;		i2_writeRegisters
  9117 ;; This function is called by:
  9118 ;;		_ReadCurrent
  9119 ;; This function uses a non-reentrant model
  9120 ;;
  9121                           
  9122                           	psect	text53
  9123  00226C                     __ptext53:
  9124                           	opt stack 0
  9125  00226C                     i2_Update:
  9126                           	opt stack 18
  9127                           
  9128                           ;PDU.c: 226: writeRegisters();
  9129                           
  9130                           ;incstack = 0
  9131  00226C  ECAD  F00C         	call	i2_writeRegisters	;wreg free
  9132  002270  0012               	return		;funcret
  9133  002272                     __end_ofi2_Update:
  9134                           	opt stack 0
  9135                           pclatu	equ	0xFFB
  9136                           pclath	equ	0xFFA
  9137                           tblptru	equ	0xFF8
  9138                           tblptrh	equ	0xFF7
  9139                           tblptrl	equ	0xFF6
  9140                           tablat	equ	0xFF5
  9141                           prodh	equ	0xFF4
  9142                           prodl	equ	0xFF3
  9143                           intcon	equ	0xFF2
  9144                           intcon2	equ	0xFF1
  9145                           postinc0	equ	0xFEE
  9146                           fsr0h	equ	0xFEA
  9147                           fsr0l	equ	0xFE9
  9148                           wreg	equ	0xFE8
  9149                           indf1	equ	0xFE7
  9150                           fsr1h	equ	0xFE2
  9151                           fsr1l	equ	0xFE1
  9152                           indf2	equ	0xFDF
  9153                           postinc2	equ	0xFDE
  9154                           postdec2	equ	0xFDD
  9155                           plusw2	equ	0xFDB
  9156                           fsr2h	equ	0xFDA
  9157                           fsr2l	equ	0xFD9
  9158                           status	equ	0xFD8
  9159                           
  9160 ;; *************** function i2_writeRegisters *****************
  9161 ;; Defined at:
  9162 ;;		line 50 in file "Shift595.c"
  9163 ;; Parameters:    Size  Location     Type
  9164 ;;		None
  9165 ;; Auto vars:     Size  Location     Type
  9166 ;;  writeRegiste    2   11[COMRAM] int 
  9167 ;;  writeRegiste    2    9[COMRAM] int 
  9168 ;; Return value:  Size  Location     Type
  9169 ;;                  1    wreg      void 
  9170 ;; Registers used:
  9171 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9172 ;; Tracked objects:
  9173 ;;		On entry : 0/0
  9174 ;;		On exit  : 0/0
  9175 ;;		Unchanged: 0/0
  9176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9177 ;;      Params:         0       0       0       0       0       0       0
  9178 ;;      Locals:         4       0       0       0       0       0       0
  9179 ;;      Temps:          0       0       0       0       0       0       0
  9180 ;;      Totals:         4       0       0       0       0       0       0
  9181 ;;Total ram usage:        4 bytes
  9182 ;; Hardware stack levels used:    1
  9183 ;; Hardware stack levels required when called:    1
  9184 ;; This function calls:
  9185 ;;		i2_Delay
  9186 ;; This function is called by:
  9187 ;;		i2_Update
  9188 ;; This function uses a non-reentrant model
  9189 ;;
  9190                           
  9191                           	psect	text54
  9192  00195A                     __ptext54:
  9193                           	opt stack 0
  9194  00195A                     i2_writeRegisters:
  9195                           	opt stack 18
  9196                           
  9197                           ;Shift595.c: 51: int val = 0;
  9198                           
  9199                           ;incstack = 0
  9200  00195A  0E00               	movlw	0
  9201  00195C  6E0B               	movwf	i2writeRegisters@val+1,c
  9202  00195E  0E00               	movlw	0
  9203  001960  6E0A               	movwf	i2writeRegisters@val,c
  9204                           
  9205                           ;Shift595.c: 52: for (int i = 3 * 8 - 1; i >= 0; i--) {
  9206  001962  0E00               	movlw	0
  9207  001964  6E0D               	movwf	i2writeRegisters@i+1,c
  9208  001966  0E17               	movlw	23
  9209  001968  6E0C               	movwf	i2writeRegisters@i,c
  9210  00196A                     i2l3030:
  9211  00196A  BE0D               	btfsc	i2writeRegisters@i+1,7,c
  9212  00196C  D01D               	goto	i2l554
  9213                           
  9214                           ;Shift595.c: 53: do { LATD7 = 0; } while(0);
  9215  00196E  9E8C               	bcf	3980,7,c	;volatile
  9216                           
  9217                           ;Shift595.c: 55: val = registers[i];
  9218  001970  90D8               	bcf	status,0,c
  9219  001972  340C               	rlcf	i2writeRegisters@i,w,c
  9220  001974  6ED9               	movwf	fsr2l,c
  9221  001976  340D               	rlcf	i2writeRegisters@i+1,w,c
  9222  001978  6EDA               	movwf	fsr2h,c
  9223  00197A  0E00               	movlw	low _registers
  9224  00197C  26D9               	addwf	fsr2l,f,c
  9225  00197E  0E01               	movlw	high _registers
  9226  001980  22DA               	addwfc	fsr2h,f,c
  9227  001982  CFDE F00A          	movff	postinc2,i2writeRegisters@val
  9228  001986  CFDD F00B          	movff	postdec2,i2writeRegisters@val+1
  9229                           
  9230                           ;Shift595.c: 56: if (val == 1) {
  9231  00198A  040A               	decf	i2writeRegisters@val,w,c
  9232  00198C  100B               	iorwf	i2writeRegisters@val+1,w,c
  9233  00198E  A4D8               	btfss	status,2,c
  9234  001990  D002               	goto	i2l3038
  9235                           
  9236                           ;Shift595.c: 57: do { LATD4 = 1; } while(0);
  9237  001992  888C               	bsf	3980,4,c	;volatile
  9238                           
  9239                           ;Shift595.c: 58: } else if (val == 0) {
  9240  001994  D004               	goto	i2l552
  9241  001996                     i2l3038:
  9242  001996  500A               	movf	i2writeRegisters@val,w,c
  9243  001998  100B               	iorwf	i2writeRegisters@val+1,w,c
  9244  00199A  B4D8               	btfsc	status,2,c
  9245                           
  9246                           ;Shift595.c: 59: do { LATD4 = 0; } while(0);
  9247  00199C  988C               	bcf	3980,4,c	;volatile
  9248  00199E                     i2l552:
  9249  00199E  8E8C               	bsf	3980,7,c	;volatile
  9250  0019A0  060C               	decf	i2writeRegisters@i,f,c
  9251  0019A2  A0D8               	btfss	status,0,c
  9252  0019A4  060D               	decf	i2writeRegisters@i+1,f,c
  9253  0019A6  D7E1               	goto	i2l3030
  9254  0019A8                     i2l554:
  9255  0019A8  9E8C               	bcf	3980,7,c	;volatile
  9256                           
  9257                           ;Shift595.c: 67: Delay(1);
  9258  0019AA  0E01               	movlw	1
  9259  0019AC  6E01               	movwf	i2Delay@wait,c
  9260  0019AE  0E00               	movlw	0
  9261  0019B0  6E02               	movwf	i2Delay@wait+1,c
  9262  0019B2  0E00               	movlw	0
  9263  0019B4  6E03               	movwf	i2Delay@wait+2,c
  9264  0019B6  0E00               	movlw	0
  9265  0019B8  6E04               	movwf	i2Delay@wait+3,c
  9266  0019BA  EC14  F00F         	call	i2_Delay	;wreg free
  9267                           
  9268                           ;Shift595.c: 68: do { LATD6 = 1; } while(0);
  9269  0019BE  8C8C               	bsf	3980,6,c	;volatile
  9270                           
  9271                           ;Shift595.c: 69: Delay(1);
  9272  0019C0  0E01               	movlw	1
  9273  0019C2  6E01               	movwf	i2Delay@wait,c
  9274  0019C4  0E00               	movlw	0
  9275  0019C6  6E02               	movwf	i2Delay@wait+1,c
  9276  0019C8  0E00               	movlw	0
  9277  0019CA  6E03               	movwf	i2Delay@wait+2,c
  9278  0019CC  0E00               	movlw	0
  9279  0019CE  6E04               	movwf	i2Delay@wait+3,c
  9280  0019D0  EC14  F00F         	call	i2_Delay	;wreg free
  9281                           
  9282                           ;Shift595.c: 70: do { LATD6 = 0; } while(0);
  9283  0019D4  9C8C               	bcf	3980,6,c	;volatile
  9284  0019D6  0012               	return	
  9285  0019D8                     __end_ofi2_writeRegisters:
  9286                           	opt stack 0
  9287                           pclatu	equ	0xFFB
  9288                           pclath	equ	0xFFA
  9289                           tblptru	equ	0xFF8
  9290                           tblptrh	equ	0xFF7
  9291                           tblptrl	equ	0xFF6
  9292                           tablat	equ	0xFF5
  9293                           prodh	equ	0xFF4
  9294                           prodl	equ	0xFF3
  9295                           intcon	equ	0xFF2
  9296                           intcon2	equ	0xFF1
  9297                           postinc0	equ	0xFEE
  9298                           fsr0h	equ	0xFEA
  9299                           fsr0l	equ	0xFE9
  9300                           wreg	equ	0xFE8
  9301                           indf1	equ	0xFE7
  9302                           fsr1h	equ	0xFE2
  9303                           fsr1l	equ	0xFE1
  9304                           indf2	equ	0xFDF
  9305                           postinc2	equ	0xFDE
  9306                           postdec2	equ	0xFDD
  9307                           plusw2	equ	0xFDB
  9308                           fsr2h	equ	0xFDA
  9309                           fsr2l	equ	0xFD9
  9310                           status	equ	0xFD8
  9311                           
  9312 ;; *************** function i2_Delay *****************
  9313 ;; Defined at:
  9314 ;;		line 9 in file "Functions.c"
  9315 ;; Parameters:    Size  Location     Type
  9316 ;;  wait            4    0[COMRAM] long 
  9317 ;; Auto vars:     Size  Location     Type
  9318 ;;  Delay           4    5[COMRAM] long 
  9319 ;; Return value:  Size  Location     Type
  9320 ;;                  1    wreg      void 
  9321 ;; Registers used:
  9322 ;;		wreg, status,2, status,0
  9323 ;; Tracked objects:
  9324 ;;		On entry : 0/0
  9325 ;;		On exit  : 0/0
  9326 ;;		Unchanged: 0/0
  9327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9328 ;;      Params:         4       0       0       0       0       0       0
  9329 ;;      Locals:         4       0       0       0       0       0       0
  9330 ;;      Temps:          1       0       0       0       0       0       0
  9331 ;;      Totals:         9       0       0       0       0       0       0
  9332 ;;Total ram usage:        9 bytes
  9333 ;; Hardware stack levels used:    1
  9334 ;; This function calls:
  9335 ;;		Nothing
  9336 ;; This function is called by:
  9337 ;;		i2_writeRegisters
  9338 ;; This function uses a non-reentrant model
  9339 ;;
  9340                           
  9341                           	psect	text55
  9342  001E28                     __ptext55:
  9343                           	opt stack 0
  9344  001E28                     i2_Delay:
  9345                           	opt stack 18
  9346                           
  9347                           ;Functions.c: 10: long int i = 0;
  9348                           
  9349                           ;incstack = 0
  9350  001E28  0E00               	movlw	0
  9351  001E2A  6E06               	movwf	i2Delay@i,c
  9352  001E2C  0E00               	movlw	0
  9353  001E2E  6E07               	movwf	i2Delay@i+1,c
  9354  001E30  0E00               	movlw	0
  9355  001E32  6E08               	movwf	i2Delay@i+2,c
  9356  001E34  0E00               	movlw	0
  9357  001E36  6E09               	movwf	i2Delay@i+3,c
  9358                           
  9359                           ;Functions.c: 11: for (; wait > i; i++) {
  9360  001E38  D00D               	goto	i2l2842
  9361  001E3A                     i2l2838:
  9362                           
  9363                           ;Functions.c: 12: _delay((unsigned long)((1)*(8000000/4000.0)));
  9364  001E3A  0E03               	movlw	3
  9365  001E3C  6E05               	movwf	??i2_Delay& (0+255),c
  9366  001E3E  0E98               	movlw	152
  9367  001E40                     i2u297_47:
  9368  001E40  2EE8               	decfsz	wreg,f,c
  9369  001E42  D7FE               	bra	i2u297_47
  9370  001E44  2E05               	decfsz	??i2_Delay& (0+255),f,c
  9371  001E46  D7FC               	bra	i2u297_47
  9372  001E48  0E01               	movlw	1
  9373  001E4A  2606               	addwf	i2Delay@i,f,c
  9374  001E4C  0E00               	movlw	0
  9375  001E4E  2207               	addwfc	i2Delay@i+1,f,c
  9376  001E50  2208               	addwfc	i2Delay@i+2,f,c
  9377  001E52  2209               	addwfc	i2Delay@i+3,f,c
  9378  001E54                     i2l2842:
  9379  001E54  5001               	movf	i2Delay@wait,w,c
  9380  001E56  5C06               	subwf	i2Delay@i,w,c
  9381  001E58  5002               	movf	i2Delay@wait+1,w,c
  9382  001E5A  5807               	subwfb	i2Delay@i+1,w,c
  9383  001E5C  5003               	movf	i2Delay@wait+2,w,c
  9384  001E5E  5808               	subwfb	i2Delay@i+2,w,c
  9385  001E60  5009               	movf	i2Delay@i+3,w,c
  9386  001E62  0A80               	xorlw	128
  9387  001E64  6E05               	movwf	??i2_Delay& (0+255),c
  9388  001E66  5004               	movf	i2Delay@wait+3,w,c
  9389  001E68  0A80               	xorlw	128
  9390  001E6A  5805               	subwfb	??i2_Delay& (0+255),w,c
  9391  001E6C  B0D8               	btfsc	status,0,c
  9392  001E6E  0012               	return	
  9393  001E70  D7E4               	goto	i2l2838
  9394  001E72                     __end_ofi2_Delay:
  9395                           	opt stack 0
  9396                           pclatu	equ	0xFFB
  9397                           pclath	equ	0xFFA
  9398                           tblptru	equ	0xFF8
  9399                           tblptrh	equ	0xFF7
  9400                           tblptrl	equ	0xFF6
  9401                           tablat	equ	0xFF5
  9402                           prodh	equ	0xFF4
  9403                           prodl	equ	0xFF3
  9404                           intcon	equ	0xFF2
  9405                           intcon2	equ	0xFF1
  9406                           postinc0	equ	0xFEE
  9407                           fsr0h	equ	0xFEA
  9408                           fsr0l	equ	0xFE9
  9409                           wreg	equ	0xFE8
  9410                           indf1	equ	0xFE7
  9411                           fsr1h	equ	0xFE2
  9412                           fsr1l	equ	0xFE1
  9413                           indf2	equ	0xFDF
  9414                           postinc2	equ	0xFDE
  9415                           postdec2	equ	0xFDD
  9416                           plusw2	equ	0xFDB
  9417                           fsr2h	equ	0xFDA
  9418                           fsr2l	equ	0xFD9
  9419                           status	equ	0xFD8
  9420                           
  9421 ;; *************** function i2_SetPin595 *****************
  9422 ;; Defined at:
  9423 ;;		line 32 in file "Shift595.c"
  9424 ;; Parameters:    Size  Location     Type
  9425 ;;  Reg             2    0[COMRAM] int 
  9426 ;;  pin             2    2[COMRAM] int 
  9427 ;;  value           2    4[COMRAM] int 
  9428 ;; Auto vars:     Size  Location     Type
  9429 ;;		None
  9430 ;; Return value:  Size  Location     Type
  9431 ;;                  1    wreg      void 
  9432 ;; Registers used:
  9433 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9434 ;; Tracked objects:
  9435 ;;		On entry : 0/0
  9436 ;;		On exit  : 0/0
  9437 ;;		Unchanged: 0/0
  9438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9439 ;;      Params:         6       0       0       0       0       0       0
  9440 ;;      Locals:         0       0       0       0       0       0       0
  9441 ;;      Temps:          4       0       0       0       0       0       0
  9442 ;;      Totals:        10       0       0       0       0       0       0
  9443 ;;Total ram usage:       10 bytes
  9444 ;; Hardware stack levels used:    1
  9445 ;; This function calls:
  9446 ;;		Nothing
  9447 ;; This function is called by:
  9448 ;;		_ReadCurrent
  9449 ;; This function uses a non-reentrant model
  9450 ;;
  9451                           
  9452                           	psect	text56
  9453  001CFC                     __ptext56:
  9454                           	opt stack 0
  9455  001CFC                     i2_SetPin595:
  9456                           	opt stack 20
  9457                           
  9458                           ;Shift595.c: 33: registers[((Reg - 1)*8) + pin] = value;
  9459                           
  9460                           ;incstack = 0
  9461  001CFC  0EF0               	movlw	240
  9462  001CFE  6E07               	movwf	??i2_SetPin595& (0+255),c
  9463  001D00  0EFF               	movlw	255
  9464  001D02  6E08               	movwf	(??i2_SetPin595+1)& (0+255),c
  9465  001D04  C001  F009         	movff	i2SetPin595@Reg,??i2_SetPin595+2
  9466  001D08  C002  F00A         	movff	i2SetPin595@Reg+1,??i2_SetPin595+3
  9467  001D0C  90D8               	bcf	status,0,c
  9468  001D0E  3609               	rlcf	??i2_SetPin595+2,f,c
  9469  001D10  360A               	rlcf	??i2_SetPin595+3,f,c
  9470  001D12  90D8               	bcf	status,0,c
  9471  001D14  3609               	rlcf	??i2_SetPin595+2,f,c
  9472  001D16  360A               	rlcf	??i2_SetPin595+3,f,c
  9473  001D18  90D8               	bcf	status,0,c
  9474  001D1A  3609               	rlcf	??i2_SetPin595+2,f,c
  9475  001D1C  360A               	rlcf	??i2_SetPin595+3,f,c
  9476  001D1E  5003               	movf	i2SetPin595@pin,w,c
  9477  001D20  2609               	addwf	??i2_SetPin595+2,f,c
  9478  001D22  5004               	movf	i2SetPin595@pin+1,w,c
  9479  001D24  220A               	addwfc	??i2_SetPin595+3,f,c
  9480  001D26  90D8               	bcf	status,0,c
  9481  001D28  3609               	rlcf	??i2_SetPin595+2,f,c
  9482  001D2A  360A               	rlcf	??i2_SetPin595+3,f,c
  9483  001D2C  5007               	movf	??i2_SetPin595,w,c
  9484  001D2E  2609               	addwf	??i2_SetPin595+2,f,c
  9485  001D30  5008               	movf	??i2_SetPin595+1,w,c
  9486  001D32  220A               	addwfc	??i2_SetPin595+3,f,c
  9487  001D34  0E00               	movlw	low _registers
  9488  001D36  2409               	addwf	??i2_SetPin595+2,w,c
  9489  001D38  6ED9               	movwf	fsr2l,c
  9490  001D3A  0E01               	movlw	high _registers
  9491  001D3C  200A               	addwfc	??i2_SetPin595+3,w,c
  9492  001D3E  6EDA               	movwf	fsr2h,c
  9493  001D40  C005  FFDE         	movff	i2SetPin595@value,postinc2
  9494  001D44  C006  FFDD         	movff	i2SetPin595@value+1,postdec2
  9495  001D48  0012               	return		;funcret
  9496  001D4A                     __end_ofi2_SetPin595:
  9497                           	opt stack 0
  9498                           pclatu	equ	0xFFB
  9499                           pclath	equ	0xFFA
  9500                           tblptru	equ	0xFF8
  9501                           tblptrh	equ	0xFF7
  9502                           tblptrl	equ	0xFF6
  9503                           tablat	equ	0xFF5
  9504                           prodh	equ	0xFF4
  9505                           prodl	equ	0xFF3
  9506                           intcon	equ	0xFF2
  9507                           intcon2	equ	0xFF1
  9508                           postinc0	equ	0xFEE
  9509                           fsr0h	equ	0xFEA
  9510                           fsr0l	equ	0xFE9
  9511                           wreg	equ	0xFE8
  9512                           indf1	equ	0xFE7
  9513                           fsr1h	equ	0xFE2
  9514                           fsr1l	equ	0xFE1
  9515                           indf2	equ	0xFDF
  9516                           postinc2	equ	0xFDE
  9517                           postdec2	equ	0xFDD
  9518                           plusw2	equ	0xFDB
  9519                           fsr2h	equ	0xFDA
  9520                           fsr2l	equ	0xFD9
  9521                           status	equ	0xFD8
  9522                           
  9523 ;; *************** function _ADC_GetConversion *****************
  9524 ;; Defined at:
  9525 ;;		line 109 in file "mcc_generated_files/adc.c"
  9526 ;; Parameters:    Size  Location     Type
  9527 ;;  channel         1    wreg     enum E6965
  9528 ;; Auto vars:     Size  Location     Type
  9529 ;;  channel         1    4[COMRAM] enum E6965
  9530 ;; Return value:  Size  Location     Type
  9531 ;;                  2    0[COMRAM] unsigned int 
  9532 ;; Registers used:
  9533 ;;		wreg, status,2, status,0
  9534 ;; Tracked objects:
  9535 ;;		On entry : 0/0
  9536 ;;		On exit  : 0/0
  9537 ;;		Unchanged: 0/0
  9538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9539 ;;      Params:         2       0       0       0       0       0       0
  9540 ;;      Locals:         1       0       0       0       0       0       0
  9541 ;;      Temps:          2       0       0       0       0       0       0
  9542 ;;      Totals:         5       0       0       0       0       0       0
  9543 ;;Total ram usage:        5 bytes
  9544 ;; Hardware stack levels used:    1
  9545 ;; This function calls:
  9546 ;;		Nothing
  9547 ;; This function is called by:
  9548 ;;		_ReadCurrent
  9549 ;; This function uses a non-reentrant model
  9550 ;;
  9551                           
  9552                           	psect	text57
  9553  001FC8                     __ptext57:
  9554                           	opt stack 0
  9555  001FC8                     _ADC_GetConversion:
  9556                           	opt stack 20
  9557                           
  9558                           ;incstack = 0
  9559                           ;ADC_GetConversion@channel stored from wreg
  9560  001FC8  6E05               	movwf	ADC_GetConversion@channel,c
  9561                           
  9562                           ;adc.c: 112: ADCON0bits.CHS = channel;
  9563  001FCA  C005  F003         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
  9564  001FCE  4603               	rlncf	??_ADC_GetConversion,f,c
  9565  001FD0  4603               	rlncf	??_ADC_GetConversion,f,c
  9566  001FD2  50C2               	movf	4034,w,c	;volatile
  9567  001FD4  1803               	xorwf	??_ADC_GetConversion,w,c
  9568  001FD6  0B83               	andlw	-125
  9569  001FD8  1803               	xorwf	??_ADC_GetConversion,w,c
  9570  001FDA  6EC2               	movwf	4034,c	;volatile
  9571                           
  9572                           ;adc.c: 115: ADCON0bits.ADON = 1;
  9573  001FDC  80C2               	bsf	4034,0,c	;volatile
  9574                           
  9575                           ;adc.c: 119: ADCON0bits.GO_nDONE = 1;
  9576  001FDE  82C2               	bsf	4034,1,c	;volatile
  9577  001FE0                     i2l31:
  9578  001FE0  B2C2               	btfsc	4034,1,c	;volatile
  9579  001FE2  D7FE               	goto	i2l31
  9580                           
  9581                           ;adc.c: 124: }
  9582                           ;adc.c: 127: return ((ADRESH << 8) + ADRESL);
  9583  001FE4  50C4               	movf	4036,w,c	;volatile
  9584  001FE6  6E04               	movwf	(??_ADC_GetConversion+1)& (0+255),c
  9585  001FE8  6A03               	clrf	??_ADC_GetConversion& (0+255),c
  9586  001FEA  50C3               	movf	4035,w,c	;volatile
  9587  001FEC  2403               	addwf	??_ADC_GetConversion,w,c
  9588  001FEE  6E01               	movwf	?_ADC_GetConversion,c
  9589  001FF0  0E00               	movlw	0
  9590  001FF2  2004               	addwfc	??_ADC_GetConversion+1,w,c
  9591  001FF4  6E02               	movwf	?_ADC_GetConversion+1,c
  9592  001FF6  0012               	return	
  9593  001FF8                     __end_of_ADC_GetConversion:
  9594                           	opt stack 0
  9595                           pclatu	equ	0xFFB
  9596                           pclath	equ	0xFFA
  9597                           tblptru	equ	0xFF8
  9598                           tblptrh	equ	0xFF7
  9599                           tblptrl	equ	0xFF6
  9600                           tablat	equ	0xFF5
  9601                           prodh	equ	0xFF4
  9602                           prodl	equ	0xFF3
  9603                           intcon	equ	0xFF2
  9604                           intcon2	equ	0xFF1
  9605                           postinc0	equ	0xFEE
  9606                           fsr0h	equ	0xFEA
  9607                           fsr0l	equ	0xFE9
  9608                           wreg	equ	0xFE8
  9609                           indf1	equ	0xFE7
  9610                           fsr1h	equ	0xFE2
  9611                           fsr1l	equ	0xFE1
  9612                           indf2	equ	0xFDF
  9613                           postinc2	equ	0xFDE
  9614                           postdec2	equ	0xFDD
  9615                           plusw2	equ	0xFDB
  9616                           fsr2h	equ	0xFDA
  9617                           fsr2l	equ	0xFD9
  9618                           status	equ	0xFD8
  9619                           
  9620 ;; *************** function _FuseSystem *****************
  9621 ;; Defined at:
  9622 ;;		line 175 in file "PDU.c"
  9623 ;; Parameters:    Size  Location     Type
  9624 ;;		None
  9625 ;; Auto vars:     Size  Location     Type
  9626 ;;  i               2    6[COMRAM] int 
  9627 ;;  i               2    8[COMRAM] int 
  9628 ;; Return value:  Size  Location     Type
  9629 ;;                  1    wreg      void 
  9630 ;; Registers used:
  9631 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9632 ;; Tracked objects:
  9633 ;;		On entry : 0/0
  9634 ;;		On exit  : 0/0
  9635 ;;		Unchanged: 0/0
  9636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9637 ;;      Params:         0       0       0       0       0       0       0
  9638 ;;      Locals:         4       0       0       0       0       0       0
  9639 ;;      Temps:          0       0       0       0       0       0       0
  9640 ;;      Totals:         4       0       0       0       0       0       0
  9641 ;;Total ram usage:        4 bytes
  9642 ;; Hardware stack levels used:    1
  9643 ;; Hardware stack levels required when called:    1
  9644 ;; This function calls:
  9645 ;;		___wmul
  9646 ;; This function is called by:
  9647 ;;		_TMR1_ISR
  9648 ;; This function uses a non-reentrant model
  9649 ;;
  9650                           
  9651                           	psect	text58
  9652  0019D8                     __ptext58:
  9653                           	opt stack 0
  9654  0019D8                     _FuseSystem:
  9655                           	opt stack 20
  9656                           
  9657                           ;PDU.c: 177: for (int i = 0; i < 6; i++) {
  9658                           
  9659                           ;incstack = 0
  9660  0019D8  0E00               	movlw	0
  9661  0019DA  6E0A               	movwf	FuseSystem@i+1,c
  9662  0019DC  0E00               	movlw	0
  9663  0019DE  6E09               	movwf	FuseSystem@i,c
  9664  0019E0                     i2l3340:
  9665  0019E0  BE0A               	btfsc	FuseSystem@i+1,7,c
  9666  0019E2  D006               	goto	i2l3344
  9667  0019E4  500A               	movf	FuseSystem@i+1,w,c
  9668  0019E6  E127               	bnz	i2l3350
  9669  0019E8  0E06               	movlw	6
  9670  0019EA  5C09               	subwf	FuseSystem@i,w,c
  9671  0019EC  B0D8               	btfsc	status,0,c
  9672  0019EE  D023               	goto	i2l3350
  9673  0019F0                     i2l3344:
  9674                           
  9675                           ;PDU.c: 178: Current[i] = CurrentADC[i]*48;
  9676  0019F0  90D8               	bcf	status,0,c
  9677  0019F2  3409               	rlcf	FuseSystem@i,w,c
  9678  0019F4  6ED9               	movwf	fsr2l,c
  9679  0019F6  340A               	rlcf	FuseSystem@i+1,w,c
  9680  0019F8  6EDA               	movwf	fsr2h,c
  9681  0019FA  0ED0               	movlw	low _CurrentADC
  9682  0019FC  26D9               	addwf	fsr2l,f,c
  9683  0019FE  0E00               	movlw	high _CurrentADC
  9684  001A00  22DA               	addwfc	fsr2h,f,c
  9685  001A02  CFDE F001          	movff	postinc2,___wmul@multiplier
  9686  001A06  CFDD F002          	movff	postdec2,___wmul@multiplier+1
  9687  001A0A  0E00               	movlw	0
  9688  001A0C  6E04               	movwf	___wmul@multiplicand+1,c
  9689  001A0E  0E30               	movlw	48
  9690  001A10  6E03               	movwf	___wmul@multiplicand,c
  9691  001A12  EC53  F010         	call	___wmul	;wreg free
  9692  001A16  90D8               	bcf	status,0,c
  9693  001A18  3409               	rlcf	FuseSystem@i,w,c
  9694  001A1A  6ED9               	movwf	fsr2l,c
  9695  001A1C  340A               	rlcf	FuseSystem@i+1,w,c
  9696  001A1E  6EDA               	movwf	fsr2h,c
  9697  001A20  0EC4               	movlw	low _Current
  9698  001A22  26D9               	addwf	fsr2l,f,c
  9699  001A24  0E00               	movlw	high _Current
  9700  001A26  22DA               	addwfc	fsr2h,f,c
  9701  001A28  C001  FFDE         	movff	?___wmul,postinc2
  9702  001A2C  C002  FFDD         	movff	?___wmul+1,postdec2
  9703  001A30  4A09               	infsnz	FuseSystem@i,f,c
  9704  001A32  2A0A               	incf	FuseSystem@i+1,f,c
  9705  001A34  D7D5               	goto	i2l3340
  9706  001A36                     i2l3350:
  9707                           
  9708                           ;PDU.c: 181: }
  9709                           ;PDU.c: 183: for (int i = 0; i < 6; i++) {
  9710  001A36  0E00               	movlw	0
  9711  001A38  6E08               	movwf	FuseSystem@i_1234+1,c
  9712  001A3A  0E00               	movlw	0
  9713  001A3C  6E07               	movwf	FuseSystem@i_1234,c
  9714  001A3E                     i2l3352:
  9715  001A3E  BE08               	btfsc	FuseSystem@i_1234+1,7,c
  9716  001A40  D006               	goto	i2l3356
  9717  001A42  5008               	movf	FuseSystem@i_1234+1,w,c
  9718  001A44  E107               	bnz	i2l485
  9719  001A46  0E06               	movlw	6
  9720  001A48  5C07               	subwf	FuseSystem@i_1234,w,c
  9721  001A4A  B0D8               	btfsc	status,0,c
  9722  001A4C  0012               	return	
  9723  001A4E                     i2l3356:
  9724  001A4E  4A07               	infsnz	FuseSystem@i_1234,f,c
  9725  001A50  2A08               	incf	FuseSystem@i_1234+1,f,c
  9726  001A52  D7F5               	goto	i2l3352
  9727  001A54                     i2l485:
  9728  001A54  0012               	return		;funcret
  9729  001A56                     __end_of_FuseSystem:
  9730                           	opt stack 0
  9731                           pclatu	equ	0xFFB
  9732                           pclath	equ	0xFFA
  9733                           tblptru	equ	0xFF8
  9734                           tblptrh	equ	0xFF7
  9735                           tblptrl	equ	0xFF6
  9736                           tablat	equ	0xFF5
  9737                           prodh	equ	0xFF4
  9738                           prodl	equ	0xFF3
  9739                           intcon	equ	0xFF2
  9740                           intcon2	equ	0xFF1
  9741                           postinc0	equ	0xFEE
  9742                           fsr0h	equ	0xFEA
  9743                           fsr0l	equ	0xFE9
  9744                           wreg	equ	0xFE8
  9745                           indf1	equ	0xFE7
  9746                           fsr1h	equ	0xFE2
  9747                           fsr1l	equ	0xFE1
  9748                           indf2	equ	0xFDF
  9749                           postinc2	equ	0xFDE
  9750                           postdec2	equ	0xFDD
  9751                           plusw2	equ	0xFDB
  9752                           fsr2h	equ	0xFDA
  9753                           fsr2l	equ	0xFD9
  9754                           status	equ	0xFD8
  9755                           
  9756 ;; *************** function ___wmul *****************
  9757 ;; Defined at:
  9758 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
  9759 ;; Parameters:    Size  Location     Type
  9760 ;;  multiplier      2    0[COMRAM] unsigned int 
  9761 ;;  multiplicand    2    2[COMRAM] unsigned int 
  9762 ;; Auto vars:     Size  Location     Type
  9763 ;;  product         2    4[COMRAM] unsigned int 
  9764 ;; Return value:  Size  Location     Type
  9765 ;;                  2    0[COMRAM] unsigned int 
  9766 ;; Registers used:
  9767 ;;		wreg, status,2, status,0, prodl, prodh
  9768 ;; Tracked objects:
  9769 ;;		On entry : 0/0
  9770 ;;		On exit  : 0/0
  9771 ;;		Unchanged: 0/0
  9772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9773 ;;      Params:         4       0       0       0       0       0       0
  9774 ;;      Locals:         2       0       0       0       0       0       0
  9775 ;;      Temps:          0       0       0       0       0       0       0
  9776 ;;      Totals:         6       0       0       0       0       0       0
  9777 ;;Total ram usage:        6 bytes
  9778 ;; Hardware stack levels used:    1
  9779 ;; This function calls:
  9780 ;;		Nothing
  9781 ;; This function is called by:
  9782 ;;		_FuseSystem
  9783 ;; This function uses a non-reentrant model
  9784 ;;
  9785                           
  9786                           	psect	text59
  9787  0020A6                     __ptext59:
  9788                           	opt stack 0
  9789  0020A6                     ___wmul:
  9790                           	opt stack 20
  9791                           
  9792                           ;incstack = 0
  9793  0020A6  5001               	movf	___wmul@multiplier,w,c
  9794  0020A8  0203               	mulwf	___wmul@multiplicand,c
  9795  0020AA  CFF3 F005          	movff	prodl,___wmul@product
  9796  0020AE  CFF4 F006          	movff	prodh,___wmul@product+1
  9797  0020B2  5001               	movf	___wmul@multiplier,w,c
  9798  0020B4  0204               	mulwf	___wmul@multiplicand+1,c
  9799  0020B6  50F3               	movf	prodl,w,c
  9800  0020B8  2606               	addwf	___wmul@product+1,f,c
  9801  0020BA  5002               	movf	___wmul@multiplier+1,w,c
  9802  0020BC  0203               	mulwf	___wmul@multiplicand,c
  9803  0020BE  50F3               	movf	prodl,w,c
  9804  0020C0  2606               	addwf	___wmul@product+1,f,c
  9805  0020C2  C005  F001         	movff	___wmul@product,?___wmul
  9806  0020C6  C006  F002         	movff	___wmul@product+1,?___wmul+1
  9807  0020CA  0012               	return	
  9808  0020CC                     __end_of___wmul:
  9809                           	opt stack 0
  9810                           pclatu	equ	0xFFB
  9811                           pclath	equ	0xFFA
  9812                           tblptru	equ	0xFF8
  9813                           tblptrh	equ	0xFF7
  9814                           tblptrl	equ	0xFF6
  9815                           tablat	equ	0xFF5
  9816                           prodh	equ	0xFF4
  9817                           prodl	equ	0xFF3
  9818                           intcon	equ	0xFF2
  9819                           intcon2	equ	0xFF1
  9820                           postinc0	equ	0xFEE
  9821                           fsr0h	equ	0xFEA
  9822                           fsr0l	equ	0xFE9
  9823                           wreg	equ	0xFE8
  9824                           indf1	equ	0xFE7
  9825                           fsr1h	equ	0xFE2
  9826                           fsr1l	equ	0xFE1
  9827                           indf2	equ	0xFDF
  9828                           postinc2	equ	0xFDE
  9829                           postdec2	equ	0xFDD
  9830                           plusw2	equ	0xFDB
  9831                           fsr2h	equ	0xFDA
  9832                           fsr2l	equ	0xFD9
  9833                           status	equ	0xFD8
  9834                           
  9835 ;; *************** function _EUSART1_Transmit_ISR *****************
  9836 ;; Defined at:
  9837 ;;		line 149 in file "UART.c"
  9838 ;; Parameters:    Size  Location     Type
  9839 ;;		None
  9840 ;; Auto vars:     Size  Location     Type
  9841 ;;		None
  9842 ;; Return value:  Size  Location     Type
  9843 ;;                  1    wreg      void 
  9844 ;; Registers used:
  9845 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9846 ;; Tracked objects:
  9847 ;;		On entry : 0/0
  9848 ;;		On exit  : 0/0
  9849 ;;		Unchanged: 0/0
  9850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9851 ;;      Params:         0       0       0       0       0       0       0
  9852 ;;      Locals:         0       0       0       0       0       0       0
  9853 ;;      Temps:          0       0       0       0       0       0       0
  9854 ;;      Totals:         0       0       0       0       0       0       0
  9855 ;;Total ram usage:        0 bytes
  9856 ;; Hardware stack levels used:    1
  9857 ;; Hardware stack levels required when called:    2
  9858 ;; This function calls:
  9859 ;;		i2_UART_buff_get
  9860 ;;		i2_UART_buff_size
  9861 ;; This function is called by:
  9862 ;;		_INTERRUPT_InterruptManager
  9863 ;; This function uses a non-reentrant model
  9864 ;;
  9865                           
  9866                           	psect	text60
  9867  001F66                     __ptext60:
  9868                           	opt stack 0
  9869  001F66                     _EUSART1_Transmit_ISR:
  9870                           	opt stack 20
  9871                           
  9872                           ;UART.c: 151: if (UART_buff_size(&output_buffer) > 0) {
  9873                           
  9874                           ;incstack = 0
  9875  001F66  0E00               	movlw	low _output_buffer
  9876  001F68  6E01               	movwf	i2UART_buff_size@_this,c
  9877  001F6A  0E02               	movlw	high _output_buffer
  9878  001F6C  6E02               	movwf	i2UART_buff_size@_this+1,c
  9879  001F6E  ECEE  F010         	call	i2_UART_buff_size	;wreg free
  9880  001F72  BE02               	btfsc	?i2_UART_buff_size+1,7,c
  9881  001F74  D00D               	goto	i2l3552
  9882  001F76  5002               	movf	?i2_UART_buff_size+1,w,c
  9883  001F78  E103               	bnz	i2u210_40
  9884  001F7A  0401               	decf	?i2_UART_buff_size,w,c
  9885  001F7C  A0D8               	btfss	status,0,c
  9886  001F7E  D008               	goto	i2l3552
  9887  001F80                     i2u210_40:
  9888                           
  9889                           ;UART.c: 152: TXREG1 = UART_buff_get(&output_buffer);
  9890  001F80  0E00               	movlw	low _output_buffer
  9891  001F82  6E07               	movwf	i2UART_buff_get@_this,c
  9892  001F84  0E02               	movlw	high _output_buffer
  9893  001F86  6E08               	movwf	i2UART_buff_get@_this+1,c
  9894  001F88  EC25  F00C         	call	i2_UART_buff_get	;wreg free
  9895  001F8C  6EAD               	movwf	4013,c	;volatile
  9896                           
  9897                           ;UART.c: 153: } else {
  9898  001F8E  0012               	return	
  9899  001F90                     i2l3552:
  9900                           
  9901                           ;UART.c: 154: Transmit_stall = 1;
  9902  001F90  0E01               	movlw	1
  9903  001F92  6E42               	movwf	_Transmit_stall,c
  9904                           
  9905                           ;UART.c: 155: PIE1bits.TX1IE = 0;
  9906  001F94  989D               	bcf	3997,4,c	;volatile
  9907  001F96  0012               	return	
  9908  001F98                     __end_of_EUSART1_Transmit_ISR:
  9909                           	opt stack 0
  9910                           pclatu	equ	0xFFB
  9911                           pclath	equ	0xFFA
  9912                           tblptru	equ	0xFF8
  9913                           tblptrh	equ	0xFF7
  9914                           tblptrl	equ	0xFF6
  9915                           tablat	equ	0xFF5
  9916                           prodh	equ	0xFF4
  9917                           prodl	equ	0xFF3
  9918                           intcon	equ	0xFF2
  9919                           intcon2	equ	0xFF1
  9920                           postinc0	equ	0xFEE
  9921                           fsr0h	equ	0xFEA
  9922                           fsr0l	equ	0xFE9
  9923                           wreg	equ	0xFE8
  9924                           indf1	equ	0xFE7
  9925                           fsr1h	equ	0xFE2
  9926                           fsr1l	equ	0xFE1
  9927                           indf2	equ	0xFDF
  9928                           postinc2	equ	0xFDE
  9929                           postdec2	equ	0xFDD
  9930                           plusw2	equ	0xFDB
  9931                           fsr2h	equ	0xFDA
  9932                           fsr2l	equ	0xFD9
  9933                           status	equ	0xFD8
  9934                           
  9935 ;; *************** function i2_UART_buff_size *****************
  9936 ;; Defined at:
  9937 ;;		line 101 in file "UART.c"
  9938 ;; Parameters:    Size  Location     Type
  9939 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
  9940 ;;		 -> output_buffer(106), input_buffer(106), 
  9941 ;; Auto vars:     Size  Location     Type
  9942 ;;		None
  9943 ;; Return value:  Size  Location     Type
  9944 ;;                  2    0[COMRAM] int 
  9945 ;; Registers used:
  9946 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9947 ;; Tracked objects:
  9948 ;;		On entry : 0/0
  9949 ;;		On exit  : 0/0
  9950 ;;		Unchanged: 0/0
  9951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9952 ;;      Params:         2       0       0       0       0       0       0
  9953 ;;      Locals:         0       0       0       0       0       0       0
  9954 ;;      Temps:          0       0       0       0       0       0       0
  9955 ;;      Totals:         2       0       0       0       0       0       0
  9956 ;;Total ram usage:        2 bytes
  9957 ;; Hardware stack levels used:    1
  9958 ;; This function calls:
  9959 ;;		Nothing
  9960 ;; This function is called by:
  9961 ;;		_EUSART1_Transmit_ISR
  9962 ;; This function uses a non-reentrant model
  9963 ;;
  9964                           
  9965                           	psect	text61
  9966  0021DC                     __ptext61:
  9967                           	opt stack 0
  9968  0021DC                     i2_UART_buff_size:
  9969                           	opt stack 21
  9970                           
  9971                           ;UART.c: 102: return (_this->count);
  9972                           
  9973                           ;incstack = 0
  9974  0021DC  EE20 F068          	lfsr	2,104
  9975  0021E0  5001               	movf	i2UART_buff_size@_this,w,c
  9976  0021E2  26D9               	addwf	fsr2l,f,c
  9977  0021E4  5002               	movf	i2UART_buff_size@_this+1,w,c
  9978  0021E6  22DA               	addwfc	fsr2h,f,c
  9979  0021E8  CFDE F001          	movff	postinc2,?i2_UART_buff_size
  9980  0021EC  CFDD F002          	movff	postdec2,?i2_UART_buff_size+1
  9981  0021F0  0012               	return	
  9982  0021F2                     __end_ofi2_UART_buff_size:
  9983                           	opt stack 0
  9984                           pclatu	equ	0xFFB
  9985                           pclath	equ	0xFFA
  9986                           tblptru	equ	0xFF8
  9987                           tblptrh	equ	0xFF7
  9988                           tblptrl	equ	0xFF6
  9989                           tablat	equ	0xFF5
  9990                           prodh	equ	0xFF4
  9991                           prodl	equ	0xFF3
  9992                           intcon	equ	0xFF2
  9993                           intcon2	equ	0xFF1
  9994                           postinc0	equ	0xFEE
  9995                           fsr0h	equ	0xFEA
  9996                           fsr0l	equ	0xFE9
  9997                           wreg	equ	0xFE8
  9998                           indf1	equ	0xFE7
  9999                           fsr1h	equ	0xFE2
 10000                           fsr1l	equ	0xFE1
 10001                           indf2	equ	0xFDF
 10002                           postinc2	equ	0xFDE
 10003                           postdec2	equ	0xFDD
 10004                           plusw2	equ	0xFDB
 10005                           fsr2h	equ	0xFDA
 10006                           fsr2l	equ	0xFD9
 10007                           status	equ	0xFD8
 10008                           
 10009 ;; *************** function i2_UART_buff_get *****************
 10010 ;; Defined at:
 10011 ;;		line 80 in file "UART.c"
 10012 ;; Parameters:    Size  Location     Type
 10013 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
 10014 ;;		 -> output_buffer(106), input_buffer(106), 
 10015 ;; Auto vars:     Size  Location     Type
 10016 ;;  UART_buff_ge    1   10[COMRAM] unsigned char 
 10017 ;; Return value:  Size  Location     Type
 10018 ;;                  1    wreg      unsigned char 
 10019 ;; Registers used:
 10020 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10021 ;; Tracked objects:
 10022 ;;		On entry : 0/0
 10023 ;;		On exit  : 0/0
 10024 ;;		Unchanged: 0/0
 10025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10026 ;;      Params:         2       0       0       0       0       0       0
 10027 ;;      Locals:         1       0       0       0       0       0       0
 10028 ;;      Temps:          2       0       0       0       0       0       0
 10029 ;;      Totals:         5       0       0       0       0       0       0
 10030 ;;Total ram usage:        5 bytes
 10031 ;; Hardware stack levels used:    1
 10032 ;; Hardware stack levels required when called:    1
 10033 ;; This function calls:
 10034 ;;		i2_UART_buff_modulo_inc
 10035 ;; This function is called by:
 10036 ;;		_EUSART1_Transmit_ISR
 10037 ;; This function uses a non-reentrant model
 10038 ;;
 10039                           
 10040                           	psect	text62
 10041  00184A                     __ptext62:
 10042                           	opt stack 0
 10043  00184A                     i2_UART_buff_get:
 10044                           	opt stack 20
 10045                           
 10046                           ;UART.c: 81: unsigned char c;
 10047                           ;UART.c: 82: if (_this->count > 0) {
 10048                           
 10049                           ;incstack = 0
 10050  00184A  EE20 F068          	lfsr	2,104
 10051  00184E  5007               	movf	i2UART_buff_get@_this,w,c
 10052  001850  26D9               	addwf	fsr2l,f,c
 10053  001852  5008               	movf	i2UART_buff_get@_this+1,w,c
 10054  001854  22DA               	addwfc	fsr2h,f,c
 10055  001856  0E01               	movlw	1
 10056  001858  BEDB               	btfsc	plusw2,7,c
 10057  00185A  D03C               	goto	i2l3534
 10058  00185C  0E01               	movlw	1
 10059  00185E  50DB               	movf	plusw2,w,c
 10060  001860  E103               	bnz	i2u208_40
 10061  001862  04DE               	decf	postinc2,w,c
 10062  001864  A0D8               	btfss	status,0,c
 10063  001866  D036               	goto	i2l3534
 10064  001868                     i2u208_40:
 10065                           
 10066                           ;UART.c: 83: c = _this->buf[_this->tail];
 10067  001868  EE20 F066          	lfsr	2,102
 10068  00186C  5007               	movf	i2UART_buff_get@_this,w,c
 10069  00186E  26D9               	addwf	fsr2l,f,c
 10070  001870  5008               	movf	i2UART_buff_get@_this+1,w,c
 10071  001872  22DA               	addwfc	fsr2h,f,c
 10072  001874  CFDE F009          	movff	postinc2,??i2_UART_buff_get
 10073  001878  CFDD F00A          	movff	postdec2,??i2_UART_buff_get+1
 10074  00187C  5009               	movf	??i2_UART_buff_get,w,c
 10075  00187E  2407               	addwf	i2UART_buff_get@_this,w,c
 10076  001880  6ED9               	movwf	fsr2l,c
 10077  001882  500A               	movf	??i2_UART_buff_get+1,w,c
 10078  001884  2008               	addwfc	i2UART_buff_get@_this+1,w,c
 10079  001886  6EDA               	movwf	fsr2h,c
 10080  001888  50DF               	movf	indf2,w,c
 10081  00188A  6E0B               	movwf	i2UART_buff_get@c,c
 10082                           
 10083                           ;UART.c: 84: _this->tail = UART_buff_modulo_inc(_this->tail, 100);
 10084  00188C  EE20 F066          	lfsr	2,102
 10085  001890  5007               	movf	i2UART_buff_get@_this,w,c
 10086  001892  26D9               	addwf	fsr2l,f,c
 10087  001894  5008               	movf	i2UART_buff_get@_this+1,w,c
 10088  001896  22DA               	addwfc	fsr2h,f,c
 10089  001898  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 10090  00189C  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 10091  0018A0  0E00               	movlw	0
 10092  0018A2  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 10093  0018A4  0E64               	movlw	100
 10094  0018A6  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 10095  0018A8  EC3E  F010         	call	i2_UART_buff_modulo_inc	;wreg free
 10096  0018AC  EE20 F066          	lfsr	2,102
 10097  0018B0  5007               	movf	i2UART_buff_get@_this,w,c
 10098  0018B2  26D9               	addwf	fsr2l,f,c
 10099  0018B4  5008               	movf	i2UART_buff_get@_this+1,w,c
 10100  0018B6  22DA               	addwfc	fsr2h,f,c
 10101  0018B8  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 10102  0018BC  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 10103                           
 10104                           ;UART.c: 85: --_this->count;
 10105  0018C0  EE20 F068          	lfsr	2,104
 10106  0018C4  5007               	movf	i2UART_buff_get@_this,w,c
 10107  0018C6  26D9               	addwf	fsr2l,f,c
 10108  0018C8  5008               	movf	i2UART_buff_get@_this+1,w,c
 10109  0018CA  22DA               	addwfc	fsr2h,f,c
 10110  0018CC  06DE               	decf	postinc2,f,c
 10111  0018CE  0E00               	movlw	0
 10112  0018D0  5ADD               	subwfb	postdec2,f,c
 10113                           
 10114                           ;UART.c: 86: } else {
 10115  0018D2  D002               	goto	i2l605
 10116  0018D4                     i2l3534:
 10117                           
 10118                           ;UART.c: 87: c = 0;
 10119  0018D4  0E00               	movlw	0
 10120  0018D6  6E0B               	movwf	i2UART_buff_get@c,c
 10121  0018D8                     i2l605:
 10122                           
 10123                           ;UART.c: 88: }
 10124                           ;UART.c: 89: return (c);
 10125  0018D8  500B               	movf	i2UART_buff_get@c,w,c
 10126  0018DA  0012               	return	
 10127  0018DC                     __end_ofi2_UART_buff_get:
 10128                           	opt stack 0
 10129                           pclatu	equ	0xFFB
 10130                           pclath	equ	0xFFA
 10131                           tblptru	equ	0xFF8
 10132                           tblptrh	equ	0xFF7
 10133                           tblptrl	equ	0xFF6
 10134                           tablat	equ	0xFF5
 10135                           prodh	equ	0xFF4
 10136                           prodl	equ	0xFF3
 10137                           intcon	equ	0xFF2
 10138                           intcon2	equ	0xFF1
 10139                           postinc0	equ	0xFEE
 10140                           fsr0h	equ	0xFEA
 10141                           fsr0l	equ	0xFE9
 10142                           wreg	equ	0xFE8
 10143                           indf1	equ	0xFE7
 10144                           fsr1h	equ	0xFE2
 10145                           fsr1l	equ	0xFE1
 10146                           indf2	equ	0xFDF
 10147                           postinc2	equ	0xFDE
 10148                           postdec2	equ	0xFDD
 10149                           plusw2	equ	0xFDB
 10150                           fsr2h	equ	0xFDA
 10151                           fsr2l	equ	0xFD9
 10152                           status	equ	0xFD8
 10153                           
 10154 ;; *************** function _EUSART1_Receive_ISR *****************
 10155 ;; Defined at:
 10156 ;;		line 138 in file "UART.c"
 10157 ;; Parameters:    Size  Location     Type
 10158 ;;		None
 10159 ;; Auto vars:     Size  Location     Type
 10160 ;;  data            1   11[COMRAM] unsigned char 
 10161 ;; Return value:  Size  Location     Type
 10162 ;;                  1    wreg      void 
 10163 ;; Registers used:
 10164 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10165 ;; Tracked objects:
 10166 ;;		On entry : 0/0
 10167 ;;		On exit  : 0/0
 10168 ;;		Unchanged: 0/0
 10169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10170 ;;      Params:         0       0       0       0       0       0       0
 10171 ;;      Locals:         1       0       0       0       0       0       0
 10172 ;;      Temps:          0       0       0       0       0       0       0
 10173 ;;      Totals:         1       0       0       0       0       0       0
 10174 ;;Total ram usage:        1 bytes
 10175 ;; Hardware stack levels used:    1
 10176 ;; Hardware stack levels required when called:    2
 10177 ;; This function calls:
 10178 ;;		i2_UART_buff_put
 10179 ;; This function is called by:
 10180 ;;		_INTERRUPT_InterruptManager
 10181 ;; This function uses a non-reentrant model
 10182 ;;
 10183                           
 10184                           	psect	text63
 10185  00214E                     __ptext63:
 10186                           	opt stack 0
 10187  00214E                     _EUSART1_Receive_ISR:
 10188                           	opt stack 20
 10189                           
 10190                           ;UART.c: 139: if (1 == RC1STAbits.OERR) {
 10191                           
 10192                           ;incstack = 0
 10193  00214E  A2AB               	btfss	4011,1,c	;volatile
 10194  002150  D002               	goto	i2l636
 10195                           
 10196                           ;UART.c: 142: RC1STAbits.CREN = 0;
 10197  002152  98AB               	bcf	4011,4,c	;volatile
 10198                           
 10199                           ;UART.c: 143: RC1STAbits.CREN = 1;
 10200  002154  88AB               	bsf	4011,4,c	;volatile
 10201  002156                     i2l636:
 10202                           
 10203                           ;UART.c: 144: }
 10204                           ;UART.c: 145: unsigned char data = RCREG1;
 10205  002156  CFAE F00C          	movff	4014,EUSART1_Receive_ISR@data	;volatile
 10206                           
 10207                           ;UART.c: 146: UART_buff_put(&input_buffer, data);
 10208  00215A  0E30               	movlw	low _input_buffer
 10209  00215C  6E07               	movwf	i2UART_buff_put@_this,c
 10210  00215E  0E01               	movlw	high _input_buffer
 10211  002160  6E08               	movwf	i2UART_buff_put@_this+1,c
 10212  002162  C00C  F009         	movff	EUSART1_Receive_ISR@data,i2UART_buff_put@c
 10213  002166  EC6E  F008         	call	i2_UART_buff_put	;wreg free
 10214  00216A  0012               	return		;funcret
 10215  00216C                     __end_of_EUSART1_Receive_ISR:
 10216                           	opt stack 0
 10217                           pclatu	equ	0xFFB
 10218                           pclath	equ	0xFFA
 10219                           tblptru	equ	0xFF8
 10220                           tblptrh	equ	0xFF7
 10221                           tblptrl	equ	0xFF6
 10222                           tablat	equ	0xFF5
 10223                           prodh	equ	0xFF4
 10224                           prodl	equ	0xFF3
 10225                           intcon	equ	0xFF2
 10226                           intcon2	equ	0xFF1
 10227                           postinc0	equ	0xFEE
 10228                           fsr0h	equ	0xFEA
 10229                           fsr0l	equ	0xFE9
 10230                           wreg	equ	0xFE8
 10231                           indf1	equ	0xFE7
 10232                           fsr1h	equ	0xFE2
 10233                           fsr1l	equ	0xFE1
 10234                           indf2	equ	0xFDF
 10235                           postinc2	equ	0xFDE
 10236                           postdec2	equ	0xFDD
 10237                           plusw2	equ	0xFDB
 10238                           fsr2h	equ	0xFDA
 10239                           fsr2l	equ	0xFD9
 10240                           status	equ	0xFD8
 10241                           
 10242 ;; *************** function i2_UART_buff_put *****************
 10243 ;; Defined at:
 10244 ;;		line 67 in file "UART.c"
 10245 ;; Parameters:    Size  Location     Type
 10246 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
 10247 ;;		 -> output_buffer(106), input_buffer(106), 
 10248 ;;  c               1    8[COMRAM] const unsigned char 
 10249 ;; Auto vars:     Size  Location     Type
 10250 ;;		None
 10251 ;; Return value:  Size  Location     Type
 10252 ;;                  1    wreg      void 
 10253 ;; Registers used:
 10254 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10255 ;; Tracked objects:
 10256 ;;		On entry : 0/0
 10257 ;;		On exit  : 0/0
 10258 ;;		Unchanged: 0/0
 10259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10260 ;;      Params:         3       0       0       0       0       0       0
 10261 ;;      Locals:         0       0       0       0       0       0       0
 10262 ;;      Temps:          2       0       0       0       0       0       0
 10263 ;;      Totals:         5       0       0       0       0       0       0
 10264 ;;Total ram usage:        5 bytes
 10265 ;; Hardware stack levels used:    1
 10266 ;; Hardware stack levels required when called:    1
 10267 ;; This function calls:
 10268 ;;		i2_UART_buff_modulo_inc
 10269 ;; This function is called by:
 10270 ;;		_EUSART1_Receive_ISR
 10271 ;; This function uses a non-reentrant model
 10272 ;;
 10273                           
 10274                           	psect	text64
 10275  0010DC                     __ptext64:
 10276                           	opt stack 0
 10277  0010DC                     i2_UART_buff_put:
 10278                           	opt stack 20
 10279                           
 10280                           ;UART.c: 68: if (_this->count < 100) {
 10281                           
 10282                           ;incstack = 0
 10283  0010DC  EE20 F068          	lfsr	2,104
 10284  0010E0  5007               	movf	i2UART_buff_put@_this,w,c
 10285  0010E2  26D9               	addwf	fsr2l,f,c
 10286  0010E4  5008               	movf	i2UART_buff_put@_this+1,w,c
 10287  0010E6  22DA               	addwfc	fsr2h,f,c
 10288  0010E8  0E01               	movlw	1
 10289  0010EA  BEDB               	btfsc	plusw2,7,c
 10290  0010EC  D007               	goto	i2l3514
 10291  0010EE  0E01               	movlw	1
 10292  0010F0  50DB               	movf	plusw2,w,c
 10293  0010F2  E13A               	bnz	i2l3520
 10294  0010F4  0E64               	movlw	100
 10295  0010F6  5CDE               	subwf	postinc2,w,c
 10296  0010F8  B0D8               	btfsc	status,0,c
 10297  0010FA  D036               	goto	i2l3520
 10298  0010FC                     i2l3514:
 10299                           
 10300                           ;UART.c: 69: _this->buf[_this->head] = c;
 10301  0010FC  EE20 F064          	lfsr	2,100
 10302  001100  5007               	movf	i2UART_buff_put@_this,w,c
 10303  001102  26D9               	addwf	fsr2l,f,c
 10304  001104  5008               	movf	i2UART_buff_put@_this+1,w,c
 10305  001106  22DA               	addwfc	fsr2h,f,c
 10306  001108  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
 10307  00110C  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
 10308  001110  500A               	movf	??i2_UART_buff_put,w,c
 10309  001112  2407               	addwf	i2UART_buff_put@_this,w,c
 10310  001114  6ED9               	movwf	fsr2l,c
 10311  001116  500B               	movf	??i2_UART_buff_put+1,w,c
 10312  001118  2008               	addwfc	i2UART_buff_put@_this+1,w,c
 10313  00111A  6EDA               	movwf	fsr2h,c
 10314  00111C  C009  FFDF         	movff	i2UART_buff_put@c,indf2
 10315                           
 10316                           ;UART.c: 70: _this->head = UART_buff_modulo_inc(_this->head, 100);
 10317  001120  EE20 F064          	lfsr	2,100
 10318  001124  5007               	movf	i2UART_buff_put@_this,w,c
 10319  001126  26D9               	addwf	fsr2l,f,c
 10320  001128  5008               	movf	i2UART_buff_put@_this+1,w,c
 10321  00112A  22DA               	addwfc	fsr2h,f,c
 10322  00112C  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 10323  001130  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 10324  001134  0E00               	movlw	0
 10325  001136  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 10326  001138  0E64               	movlw	100
 10327  00113A  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 10328  00113C  EC3E  F010         	call	i2_UART_buff_modulo_inc	;wreg free
 10329  001140  EE20 F064          	lfsr	2,100
 10330  001144  5007               	movf	i2UART_buff_put@_this,w,c
 10331  001146  26D9               	addwf	fsr2l,f,c
 10332  001148  5008               	movf	i2UART_buff_put@_this+1,w,c
 10333  00114A  22DA               	addwfc	fsr2h,f,c
 10334  00114C  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 10335  001150  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 10336                           
 10337                           ;UART.c: 71: ++_this->count;
 10338  001154  EE20 F068          	lfsr	2,104
 10339  001158  5007               	movf	i2UART_buff_put@_this,w,c
 10340  00115A  26D9               	addwf	fsr2l,f,c
 10341  00115C  5008               	movf	i2UART_buff_put@_this+1,w,c
 10342  00115E  22DA               	addwfc	fsr2h,f,c
 10343  001160  2ADE               	incf	postinc2,f,c
 10344  001162  0E00               	movlw	0
 10345  001164  22DD               	addwfc	postdec2,f,c
 10346                           
 10347                           ;UART.c: 72: } else {
 10348  001166  0012               	return	
 10349  001168                     i2l3520:
 10350                           
 10351                           ;UART.c: 73: _this->buf[_this->head] = c;
 10352  001168  EE20 F064          	lfsr	2,100
 10353  00116C  5007               	movf	i2UART_buff_put@_this,w,c
 10354  00116E  26D9               	addwf	fsr2l,f,c
 10355  001170  5008               	movf	i2UART_buff_put@_this+1,w,c
 10356  001172  22DA               	addwfc	fsr2h,f,c
 10357  001174  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
 10358  001178  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
 10359  00117C  500A               	movf	??i2_UART_buff_put,w,c
 10360  00117E  2407               	addwf	i2UART_buff_put@_this,w,c
 10361  001180  6ED9               	movwf	fsr2l,c
 10362  001182  500B               	movf	??i2_UART_buff_put+1,w,c
 10363  001184  2008               	addwfc	i2UART_buff_put@_this+1,w,c
 10364  001186  6EDA               	movwf	fsr2h,c
 10365  001188  C009  FFDF         	movff	i2UART_buff_put@c,indf2
 10366                           
 10367                           ;UART.c: 74: _this->head = UART_buff_modulo_inc(_this->head, 100);
 10368  00118C  EE20 F064          	lfsr	2,100
 10369  001190  5007               	movf	i2UART_buff_put@_this,w,c
 10370  001192  26D9               	addwf	fsr2l,f,c
 10371  001194  5008               	movf	i2UART_buff_put@_this+1,w,c
 10372  001196  22DA               	addwfc	fsr2h,f,c
 10373  001198  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 10374  00119C  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 10375  0011A0  0E00               	movlw	0
 10376  0011A2  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 10377  0011A4  0E64               	movlw	100
 10378  0011A6  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 10379  0011A8  EC3E  F010         	call	i2_UART_buff_modulo_inc	;wreg free
 10380  0011AC  EE20 F064          	lfsr	2,100
 10381  0011B0  5007               	movf	i2UART_buff_put@_this,w,c
 10382  0011B2  26D9               	addwf	fsr2l,f,c
 10383  0011B4  5008               	movf	i2UART_buff_put@_this+1,w,c
 10384  0011B6  22DA               	addwfc	fsr2h,f,c
 10385  0011B8  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 10386  0011BC  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 10387                           
 10388                           ;UART.c: 75: _this->tail = UART_buff_modulo_inc(_this->tail, 100);
 10389  0011C0  EE20 F066          	lfsr	2,102
 10390  0011C4  5007               	movf	i2UART_buff_put@_this,w,c
 10391  0011C6  26D9               	addwf	fsr2l,f,c
 10392  0011C8  5008               	movf	i2UART_buff_put@_this+1,w,c
 10393  0011CA  22DA               	addwfc	fsr2h,f,c
 10394  0011CC  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 10395  0011D0  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 10396  0011D4  0E00               	movlw	0
 10397  0011D6  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 10398  0011D8  0E64               	movlw	100
 10399  0011DA  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 10400  0011DC  EC3E  F010         	call	i2_UART_buff_modulo_inc	;wreg free
 10401  0011E0  EE20 F066          	lfsr	2,102
 10402  0011E4  5007               	movf	i2UART_buff_put@_this,w,c
 10403  0011E6  26D9               	addwf	fsr2l,f,c
 10404  0011E8  5008               	movf	i2UART_buff_put@_this+1,w,c
 10405  0011EA  22DA               	addwfc	fsr2h,f,c
 10406  0011EC  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 10407  0011F0  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 10408  0011F4  0012               	return	
 10409  0011F6                     __end_ofi2_UART_buff_put:
 10410                           	opt stack 0
 10411                           pclatu	equ	0xFFB
 10412                           pclath	equ	0xFFA
 10413                           tblptru	equ	0xFF8
 10414                           tblptrh	equ	0xFF7
 10415                           tblptrl	equ	0xFF6
 10416                           tablat	equ	0xFF5
 10417                           prodh	equ	0xFF4
 10418                           prodl	equ	0xFF3
 10419                           intcon	equ	0xFF2
 10420                           intcon2	equ	0xFF1
 10421                           postinc0	equ	0xFEE
 10422                           fsr0h	equ	0xFEA
 10423                           fsr0l	equ	0xFE9
 10424                           wreg	equ	0xFE8
 10425                           indf1	equ	0xFE7
 10426                           fsr1h	equ	0xFE2
 10427                           fsr1l	equ	0xFE1
 10428                           indf2	equ	0xFDF
 10429                           postinc2	equ	0xFDE
 10430                           postdec2	equ	0xFDD
 10431                           plusw2	equ	0xFDB
 10432                           fsr2h	equ	0xFDA
 10433                           fsr2l	equ	0xFD9
 10434                           status	equ	0xFD8
 10435                           
 10436 ;; *************** function i2_UART_buff_modulo_inc *****************
 10437 ;; Defined at:
 10438 ;;		line 105 in file "UART.c"
 10439 ;; Parameters:    Size  Location     Type
 10440 ;;  value           2    0[COMRAM] const unsigned int 
 10441 ;;  modulus         2    2[COMRAM] const unsigned int 
 10442 ;; Auto vars:     Size  Location     Type
 10443 ;;  UART_buff_mo    2    4[COMRAM] unsigned int 
 10444 ;; Return value:  Size  Location     Type
 10445 ;;                  2    0[COMRAM] unsigned int 
 10446 ;; Registers used:
 10447 ;;		wreg, status,2, status,0
 10448 ;; Tracked objects:
 10449 ;;		On entry : 0/0
 10450 ;;		On exit  : 0/0
 10451 ;;		Unchanged: 0/0
 10452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10453 ;;      Params:         4       0       0       0       0       0       0
 10454 ;;      Locals:         2       0       0       0       0       0       0
 10455 ;;      Temps:          0       0       0       0       0       0       0
 10456 ;;      Totals:         6       0       0       0       0       0       0
 10457 ;;Total ram usage:        6 bytes
 10458 ;; Hardware stack levels used:    1
 10459 ;; This function calls:
 10460 ;;		Nothing
 10461 ;; This function is called by:
 10462 ;;		i2_UART_buff_put
 10463 ;;		i2_UART_buff_get
 10464 ;; This function uses a non-reentrant model
 10465 ;;
 10466                           
 10467                           	psect	text65
 10468  00207C                     __ptext65:
 10469                           	opt stack 0
 10470  00207C                     i2_UART_buff_modulo_inc:
 10471                           	opt stack 20
 10472                           
 10473                           ;UART.c: 106: unsigned int my_value = value + 1;
 10474                           
 10475                           ;incstack = 0
 10476  00207C  0E01               	movlw	1
 10477  00207E  2401               	addwf	i2UART_buff_modulo_inc@value,w,c
 10478  002080  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
 10479  002082  0E00               	movlw	0
 10480  002084  2002               	addwfc	i2UART_buff_modulo_inc@value+1,w,c
 10481  002086  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
 10482                           
 10483                           ;UART.c: 107: if (my_value >= modulus) {
 10484  002088  5003               	movf	i2UART_buff_modulo_inc@modulus,w,c
 10485  00208A  5C05               	subwf	i2UART_buff_modulo_inc@my_value,w,c
 10486  00208C  5004               	movf	i2UART_buff_modulo_inc@modulus+1,w,c
 10487  00208E  5806               	subwfb	i2UART_buff_modulo_inc@my_value+1,w,c
 10488  002090  A0D8               	btfss	status,0,c
 10489  002092  D004               	goto	i2l3264
 10490                           
 10491                           ;UART.c: 108: my_value = 0;
 10492  002094  0E00               	movlw	0
 10493  002096  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
 10494  002098  0E00               	movlw	0
 10495  00209A  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
 10496  00209C                     i2l3264:
 10497                           
 10498                           ;UART.c: 109: }
 10499                           ;UART.c: 110: return (my_value);
 10500  00209C  C005  F001         	movff	i2UART_buff_modulo_inc@my_value,?i2_UART_buff_modulo_inc
 10501  0020A0  C006  F002         	movff	i2UART_buff_modulo_inc@my_value+1,?i2_UART_buff_modulo_inc+1
 10502  0020A4  0012               	return	
 10503  0020A6                     __end_ofi2_UART_buff_modulo_inc:
 10504                           	opt stack 0
 10505                           pclatu	equ	0xFFB
 10506                           pclath	equ	0xFFA
 10507                           tblptru	equ	0xFF8
 10508                           tblptrh	equ	0xFF7
 10509                           tblptrl	equ	0xFF6
 10510                           tablat	equ	0xFF5
 10511                           prodh	equ	0xFF4
 10512                           prodl	equ	0xFF3
 10513                           intcon	equ	0xFF2
 10514                           intcon2	equ	0xFF1
 10515                           postinc0	equ	0xFEE
 10516                           fsr0h	equ	0xFEA
 10517                           fsr0l	equ	0xFE9
 10518                           wreg	equ	0xFE8
 10519                           indf1	equ	0xFE7
 10520                           fsr1h	equ	0xFE2
 10521                           fsr1l	equ	0xFE1
 10522                           indf2	equ	0xFDF
 10523                           postinc2	equ	0xFDE
 10524                           postdec2	equ	0xFDD
 10525                           plusw2	equ	0xFDB
 10526                           fsr2h	equ	0xFDA
 10527                           fsr2l	equ	0xFD9
 10528                           status	equ	0xFD8
 10529                           
 10530 ;; *************** function _ADC_ISR *****************
 10531 ;; Defined at:
 10532 ;;		line 130 in file "mcc_generated_files/adc.c"
 10533 ;; Parameters:    Size  Location     Type
 10534 ;;		None
 10535 ;; Auto vars:     Size  Location     Type
 10536 ;;		None
 10537 ;; Return value:  Size  Location     Type
 10538 ;;                  1    wreg      void 
 10539 ;; Registers used:
 10540 ;;		None
 10541 ;; Tracked objects:
 10542 ;;		On entry : 0/0
 10543 ;;		On exit  : 0/0
 10544 ;;		Unchanged: 0/0
 10545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10546 ;;      Params:         0       0       0       0       0       0       0
 10547 ;;      Locals:         0       0       0       0       0       0       0
 10548 ;;      Temps:          0       0       0       0       0       0       0
 10549 ;;      Totals:         0       0       0       0       0       0       0
 10550 ;;Total ram usage:        0 bytes
 10551 ;; Hardware stack levels used:    1
 10552 ;; This function calls:
 10553 ;;		Nothing
 10554 ;; This function is called by:
 10555 ;;		_INTERRUPT_InterruptManager
 10556 ;; This function uses a non-reentrant model
 10557 ;;
 10558                           
 10559                           	psect	text66
 10560  00227A                     __ptext66:
 10561                           	opt stack 0
 10562  00227A                     _ADC_ISR:
 10563                           	opt stack 22
 10564                           
 10565                           ;adc.c: 133: PIR1bits.ADIF = 0;
 10566                           
 10567                           ;incstack = 0
 10568  00227A  9C9E               	bcf	3998,6,c	;volatile
 10569  00227C  0012               	return		;funcret
 10570  00227E                     __end_of_ADC_ISR:
 10571                           	opt stack 0
 10572  0000                     pclatu	equ	0xFFB
 10573                           pclath	equ	0xFFA
 10574                           tblptru	equ	0xFF8
 10575                           tblptrh	equ	0xFF7
 10576                           tblptrl	equ	0xFF6
 10577                           tablat	equ	0xFF5
 10578                           prodh	equ	0xFF4
 10579                           prodl	equ	0xFF3
 10580                           intcon	equ	0xFF2
 10581                           intcon2	equ	0xFF1
 10582                           postinc0	equ	0xFEE
 10583                           fsr0h	equ	0xFEA
 10584                           fsr0l	equ	0xFE9
 10585                           wreg	equ	0xFE8
 10586                           indf1	equ	0xFE7
 10587                           fsr1h	equ	0xFE2
 10588                           fsr1l	equ	0xFE1
 10589                           indf2	equ	0xFDF
 10590                           postinc2	equ	0xFDE
 10591                           postdec2	equ	0xFDD
 10592                           plusw2	equ	0xFDB
 10593                           fsr2h	equ	0xFDA
 10594                           fsr2l	equ	0xFD9
 10595                           status	equ	0xFD8
 10596                           pclatu	equ	0xFFB
 10597                           pclath	equ	0xFFA
 10598                           tblptru	equ	0xFF8
 10599                           tblptrh	equ	0xFF7
 10600                           tblptrl	equ	0xFF6
 10601                           tablat	equ	0xFF5
 10602                           prodh	equ	0xFF4
 10603                           prodl	equ	0xFF3
 10604                           intcon	equ	0xFF2
 10605                           intcon2	equ	0xFF1
 10606                           postinc0	equ	0xFEE
 10607                           fsr0h	equ	0xFEA
 10608                           fsr0l	equ	0xFE9
 10609                           wreg	equ	0xFE8
 10610                           indf1	equ	0xFE7
 10611                           fsr1h	equ	0xFE2
 10612                           fsr1l	equ	0xFE1
 10613                           indf2	equ	0xFDF
 10614                           postinc2	equ	0xFDE
 10615                           postdec2	equ	0xFDD
 10616                           plusw2	equ	0xFDB
 10617                           fsr2h	equ	0xFDA
 10618                           fsr2l	equ	0xFD9
 10619                           status	equ	0xFD8
 10620                           
 10621                           	psect	rparam
 10622  0000                     pclatu	equ	0xFFB
 10623                           pclath	equ	0xFFA
 10624                           tblptru	equ	0xFF8
 10625                           tblptrh	equ	0xFF7
 10626                           tblptrl	equ	0xFF6
 10627                           tablat	equ	0xFF5
 10628                           prodh	equ	0xFF4
 10629                           prodl	equ	0xFF3
 10630                           intcon	equ	0xFF2
 10631                           intcon2	equ	0xFF1
 10632                           postinc0	equ	0xFEE
 10633                           fsr0h	equ	0xFEA
 10634                           fsr0l	equ	0xFE9
 10635                           wreg	equ	0xFE8
 10636                           indf1	equ	0xFE7
 10637                           fsr1h	equ	0xFE2
 10638                           fsr1l	equ	0xFE1
 10639                           indf2	equ	0xFDF
 10640                           postinc2	equ	0xFDE
 10641                           postdec2	equ	0xFDD
 10642                           plusw2	equ	0xFDB
 10643                           fsr2h	equ	0xFDA
 10644                           fsr2l	equ	0xFD9
 10645                           status	equ	0xFD8
 10646                           
 10647                           	psect	temp
 10648  000043                     btemp:
 10649                           	opt stack 0
 10650  000043                     	ds	1
 10651  0000                     int$flags	set	btemp
 10652                           pclatu	equ	0xFFB
 10653                           pclath	equ	0xFFA
 10654                           tblptru	equ	0xFF8
 10655                           tblptrh	equ	0xFF7
 10656                           tblptrl	equ	0xFF6
 10657                           tablat	equ	0xFF5
 10658                           prodh	equ	0xFF4
 10659                           prodl	equ	0xFF3
 10660                           intcon	equ	0xFF2
 10661                           intcon2	equ	0xFF1
 10662                           postinc0	equ	0xFEE
 10663                           fsr0h	equ	0xFEA
 10664                           fsr0l	equ	0xFE9
 10665                           wreg	equ	0xFE8
 10666                           indf1	equ	0xFE7
 10667                           fsr1h	equ	0xFE2
 10668                           fsr1l	equ	0xFE1
 10669                           indf2	equ	0xFDF
 10670                           postinc2	equ	0xFDE
 10671                           postdec2	equ	0xFDD
 10672                           plusw2	equ	0xFDB
 10673                           fsr2h	equ	0xFDA
 10674                           fsr2l	equ	0xFD9
 10675                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        3
    BSS         401
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     41      66
    BANK0           160    100     159
    BANK1           256     29     243
    BANK2           256      0     106
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 106
		 -> output_buffer(BANK2[106]), input_buffer(BANK1[106]), 

    memset@p	PTR unsigned char  size(2) Largest target is 106
		 -> output_buffer(BANK2[106]), input_buffer(BANK1[106]), 

    SetDataDict@DataArray	PTR unsigned char  size(2) Largest target is 4
		 -> ComController@DataRecived(BANK1[4]), updateComms@DataGet(BANK0[2]), 

    GetDataDict@DataArray	PTR unsigned char  size(2) Largest target is 4
		 -> ComController@DataToSend_1653(BANK1[4]), ComController@DataToSend(BANK1[4]), updateComms@DataGet(BANK0[2]), 

    cobs_decode@dst_write_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK1[30]), 

    cobs_decode@dst_buf_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK1[30]), 

    cobs_decode@dst_buf_end_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK1[30]), 

    cobs_decode@src_ptr	PTR const unsigned char  size(2) Largest target is 30
		 -> ReciveArray(BANK1[30]), 

    cobs_decode@src_end_ptr	PTR const unsigned char  size(2) Largest target is 30
		 -> ReciveArray(BANK1[30]), 

    cobs_encode@dst_write_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> sendData@COBSArray(BANK0[30]), 

    cobs_encode@dst_code_write_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> sendData@COBSArray(BANK0[30]), 

    cobs_encode@dst_buf_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> sendData@COBSArray(BANK0[30]), 

    cobs_encode@dst_buf_end_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> sendData@COBSArray(BANK0[30]), 

    cobs_encode@src_ptr	PTR const unsigned char  size(2) Largest target is 30
		 -> sendData@SendArray(BANK0[30]), 

    cobs_encode@src_end_ptr	PTR const unsigned char  size(2) Largest target is 30
		 -> sendData@SendArray(BANK0[30]), 

    ComController@DTI	PTR unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK1[30]), 

    sendData@DTS	PTR unsigned char  size(2) Largest target is 4
		 -> ComController@DataToSend_1653(BANK1[4]), ComController@DataToSend(BANK1[4]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK1[30]), sendData@SendArray(BANK0[30]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 106
		 -> output_buffer(BANK2[106]), input_buffer(BANK1[106]), 

    UART_buff_flush@_this	PTR struct UART_ring_buff size(2) Largest target is 106
		 -> input_buffer(BANK1[106]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 106
		 -> output_buffer(BANK2[106]), input_buffer(BANK1[106]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 106
		 -> output_buffer(BANK2[106]), input_buffer(BANK1[106]), 

    sp__memset	PTR void  size(2) Largest target is 106
		 -> output_buffer(BANK2[106]), input_buffer(BANK1[106]), 

    UART_buff_init@_this	PTR struct UART_ring_buff size(2) Largest target is 106
		 -> output_buffer(BANK2[106]), input_buffer(BANK1[106]), 


Critical Paths under _main in COMRAM

    _main->_PotSetpoint
    _Receive_get->_UART_buff_get
    _Receive_available->_UART_buff_size
    _sendData->_Send_put
    _Send_put->_UART_buff_get
    _Send_put->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc
    _UART_buff_get->_UART_buff_modulo_inc
    _ClearBuffer->_UART_buff_flush
    _UART_buff_flush->_memset
    _processPowerRequest->_EnableSlavePower
    _CoolingStop->_PotClear
    _CoolingStart->_PotSetpoint
    _PotSetpoint->_Delay
    _PotClear->_Delay
    _FaultsCollector->_GetPDUFault
    _EUSART1_Initialize->_UART_buff_init
    _UART_buff_init->_memset
    _PDUStartup->_EnableSlavePower
    _Update->_writeRegisters
    _Clear595->_writeRegisters
    _writeRegisters->_Delay
    _EnableSlavePower->_SetPin595
    _ComputeStorageData->_DATAEE_ReadByte

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR1_ISR->_ReadCurrent
    i2_Update->i2_writeRegisters
    i2_writeRegisters->i2_Delay
    _FuseSystem->___wmul
    _EUSART1_Transmit_ISR->i2_UART_buff_get
    i2_UART_buff_get->i2_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->i2_UART_buff_put
    i2_UART_buff_put->i2_UART_buff_modulo_inc

Critical Paths under _main in BANK0

    _main->_updateComms
    _receiveData->_ComController
    _ComController->_sendData
    _sendData->_cobs_encode
    _CoolingStart->_PotSetpoint
    _StartUp595->_Clear595

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _updateComms->_receiveData
    _receiveData->_ComController

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   64032
                                             24 BANK1      5     5      0
                 _ComputeStorageData
                         _PDUStartup
                 _PWM4_LoadDutyValue
                        _PotSetpoint
                  _SYSTEM_Initialize
                        _updateComms
 ---------------------------------------------------------------------------------
 (1) _updateComms                                          2     2      0   41642
                                             98 BANK0      2     2      0
                    _FaultsCollector
                        _GetDataDict
                        _SetDataDict
                _processPowerRequest
                        _receiveData
 ---------------------------------------------------------------------------------
 (2) _receiveData                                         11    11      0   17352
                                             13 BANK1     11    11      0
                               _CRC8
                        _ClearBuffer
                      _ComController
                  _Receive_available
                        _Receive_get
                        _cobs_decode
 ---------------------------------------------------------------------------------
 (3) _cobs_decode                                         24    16      8    1783
                                             28 COMRAM    10     2      8
                                              0 BANK0     14    14      0
 ---------------------------------------------------------------------------------
 (3) _Receive_get                                          0     0      0    1308
                      _UART_buff_get
 ---------------------------------------------------------------------------------
 (3) _Receive_available                                    2     0      2     176
                                             30 COMRAM     2     0      2
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (4) _UART_buff_size                                       2     0      2     176
                                             28 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _ComController                                       19    15      4   12271
                                             92 BANK0      6     2      4
                                              0 BANK1     13    13      0
                              _Delay
                        _GetDataDict
                        _SetDataDict
                           _sendData
 ---------------------------------------------------------------------------------
 (4) _sendData                                            79    72      7    7201
                                             13 BANK0     79    72      7
                               _CRC8
                           _Send_put
                        _cobs_encode
 ---------------------------------------------------------------------------------
 (5) _cobs_encode                                         23    15      8    1613
                                             28 COMRAM    10     2      8
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (5) _Send_put                                             1     1      0    2913
                                             39 COMRAM     1     1      0
                      _UART_buff_get
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (6) _UART_buff_put                                        5     2      3    1574
                                             34 COMRAM     5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (4) _UART_buff_get                                        5     3      2    1308
                                             34 COMRAM     5     3      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _UART_buff_modulo_inc                                 6     2      4     850
                                             28 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _CRC8                                                 7     4      3     604
                                             28 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (4) _SetDataDict                                          8     4      4    1042
                                             28 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (4) _GetDataDict                                          8     4      4    1312
                                             28 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _ClearBuffer                                          0     0      0    1012
                    _UART_buff_flush
 ---------------------------------------------------------------------------------
 (4) _UART_buff_flush                                      4     0      4    1012
                                             36 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (2) _processPowerRequest                                  3     3      0   21590
                                              6 BANK0      3     3      0
                       _CoolingStart
                        _CoolingStop
                   _EnableSlavePower
                             _Update
 ---------------------------------------------------------------------------------
 (3) _CoolingStop                                          0     0      0    2268
                 _PWM4_LoadDutyValue
                           _PotClear
 ---------------------------------------------------------------------------------
 (3) _CoolingStart                                         0     0      0    4579
                 _PWM4_LoadDutyValue
                           _PotClear
                        _PotSetpoint
 ---------------------------------------------------------------------------------
 (4) _PotSetpoint                                         10     8      2    2311
                                             37 COMRAM     4     2      2
                                              0 BANK0      6     6      0
                              _Delay
 ---------------------------------------------------------------------------------
 (4) _PotClear                                             2     2      0    1936
                                             37 COMRAM     2     2      0
                              _Delay
 ---------------------------------------------------------------------------------
 (4) _PWM4_LoadDutyValue                                   4     2      2     332
                                             28 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _FaultsCollector                                      7     7      0     232
                                             29 COMRAM     7     7      0
                        _GetPDUFault
 ---------------------------------------------------------------------------------
 (3) _GetPDUFault                                          1     1      0      31
                                             28 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     888
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM4_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0     888
                     _UART_buff_init
 ---------------------------------------------------------------------------------
 (3) _UART_buff_init                                       2     0      2     888
                                             36 COMRAM     2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               8     2      6     677
                                             28 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PDUStartup                                           0     0      0   18689
                 _ComputeStorageData
                   _EnableSlavePower
                         _StartUp595
                             _Update
 ---------------------------------------------------------------------------------
 (3) _Update                                               0     0      0    2035
                     _writeRegisters
 ---------------------------------------------------------------------------------
 (2) _StartUp595                                           0     0      0    4002
                           _Clear595
                              _Delay
 ---------------------------------------------------------------------------------
 (3) _Clear595                                             2     2      0    2134
                                              0 BANK0      2     2      0
                     _writeRegisters
 ---------------------------------------------------------------------------------
 (4) _writeRegisters                                       4     4      0    2035
                                             37 COMRAM     4     4      0
                              _Delay
 ---------------------------------------------------------------------------------
 (4) _Delay                                                9     5      4    1868
                                             28 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (3) _EnableSlavePower                                     3     1      2   12491
                                             38 COMRAM     3     1      2
                          _SetPin595
 ---------------------------------------------------------------------------------
 (4) _SetPin595                                           10     4      6   10623
                                             28 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (2) _ComputeStorageData                                   4     4      0     161
                                             29 COMRAM     4     4      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_ReadByte                                      1     1      0      31
                                             28 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                          14    14      0    6300
                                             14 COMRAM    14    14      0
                            _ADC_ISR
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR1_ISR                                             0     0      0    5091
                         _FuseSystem
                        _ReadCurrent
 ---------------------------------------------------------------------------------
 (10) _ReadCurrent                                         1     1      0    4644
                                             13 COMRAM     1     1      0
                  _ADC_GetConversion
                        i2_SetPin595
                           i2_Update
 ---------------------------------------------------------------------------------
 (11) i2_Update                                            0     0      0     212
                   i2_writeRegisters
 ---------------------------------------------------------------------------------
 (12) i2_writeRegisters                                    4     4      0     212
                                              9 COMRAM     4     4      0
                            i2_Delay
 ---------------------------------------------------------------------------------
 (13) i2_Delay                                             9     5      4      98
                                              0 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (11) i2_SetPin595                                        10     4      6    4278
                                              0 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (11) _ADC_GetConversion                                   5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (10) _FuseSystem                                          4     4      0     447
                                              6 COMRAM     4     4      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (11) ___wmul                                              6     2      4     311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Transmit_ISR                                 0     0      0     528
                    i2_UART_buff_get
                   i2_UART_buff_size
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_size                                    2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_get                                     5     3      2     480
                                              6 COMRAM     5     3      2
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Receive_ISR                                  1     1      0     681
                                             11 COMRAM     1     1      0
                    i2_UART_buff_put
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_put                                     5     2      3     658
                                              6 COMRAM     5     2      3
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (11) i2_UART_buff_modulo_inc                              6     2      4     298
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _ADC_ISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ComputeStorageData
     _DATAEE_ReadByte
   _PDUStartup
     _ComputeStorageData
       _DATAEE_ReadByte
     _EnableSlavePower
       _SetPin595
     _StartUp595
       _Clear595
         _writeRegisters
           _Delay
       _Delay
     _Update
       _writeRegisters
         _Delay
   _PWM4_LoadDutyValue
   _PotSetpoint
     _Delay
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
       _UART_buff_init
         _memset
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM4_Initialize
     _TMR1_Initialize
       _TMR1_StartTimer
     _TMR2_Initialize
       _TMR2_StartTimer
   _updateComms
     _FaultsCollector
       _GetPDUFault
     _GetDataDict
     _SetDataDict
     _processPowerRequest
       _CoolingStart
         _PWM4_LoadDutyValue
         _PotClear
           _Delay
         _PotSetpoint
           _Delay
       _CoolingStop
         _PWM4_LoadDutyValue
         _PotClear
           _Delay
       _EnableSlavePower
         _SetPin595
       _Update
         _writeRegisters
           _Delay
     _receiveData
       _CRC8
       _ClearBuffer
         _UART_buff_flush
           _memset
       _ComController
         _Delay
         _GetDataDict
         _SetDataDict
         _sendData
           _CRC8
           _Send_put
             _UART_buff_get
               _UART_buff_modulo_inc
             _UART_buff_put
               _UART_buff_modulo_inc
           _cobs_encode
       _Receive_available
         _UART_buff_size
       _Receive_get
         _UART_buff_get
           _UART_buff_modulo_inc
       _cobs_decode

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
   _EUSART1_Receive_ISR
     i2_UART_buff_put
       i2_UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     i2_UART_buff_get
       i2_UART_buff_modulo_inc
     i2_UART_buff_size
   _TMR1_ISR
     _FuseSystem
       ___wmul
     _ReadCurrent
       _ADC_GetConversion
       i2_SetPin595
       i2_Update
         i2_writeRegisters
           i2_Delay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      6A       8       41.4%
BITBANK1           100      0       0       5        0.0%
BANK1              100     1D      F3       6       94.9%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     64      9F       4       99.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     29      42       1       70.2%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     23E       9        0.0%
DATA                 0      0     23E      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Mon Aug 21 21:57:47 2017

                __end_of_GetDataDict 17B8               i2_UART_buff_modulo_inc 207C  
                      ??_CoolingStop 0028             cobs_encode@dst_write_ptr 0068  
           GetDataDict@ReturnCounter 0024                  ___wmul@multiplicand 0003  
                     ??_CoolingStart 002A                         __CFG_CP0$OFF 000000  
                       __CFG_CP1$OFF 000000                         __CFG_CP2$OFF 000000  
                       __CFG_CP3$OFF 000000                                  l605 1846  
                                l552 1920                                  l554 192A  
                                l722 13A6                                  l727 1618  
                                l719 134C                                  l728 1652  
                                l768 1DC6                                  l893 170C  
                                l879 17A4                         __CFG_CPB$OFF 000000  
                                _PR2 000FBB                         __CFG_CPD$OFF 000000  
                    _timer1ReloadVal 003D                      __end_of_ADC_ISR 227E  
                    _TMR2_Initialize 21F2                      _PWM4_Initialize 2206  
                                prod 000FF3                                  wreg 000FE8  
      i2UART_buff_modulo_inc@modulus 0003                         __CFG_LVP$OFF 000000  
          SetDataDict@DataTableIndex 001D                      _UART_buff_flush 1AD0  
                               l4020 1440                                 l4110 0C04  
                               l4102 0BC8                                 l4024 1462  
                               l4016 1404                                 l4032 14BC  
                               l4112 0C08                                 l4026 1480  
                               l4018 1422                                 l4028 149E  
                               l4300 0EEE                                 l4124 0C32  
                               l4132 0C4A                                 l4046 1EC4  
                               l4302 0EFC                                 l4142 0C7E  
                               l4056 1EF2                                 l4320 0FA0  
                               l4312 0F58                                 l4330 1C6A  
                               l4314 0F66                                 l4306 0F1E  
                               l4146 0C92                                 l4082 0B5E  
                               l3700 2040                                 l4340 1CAA  
                               l4324 0FB8                                 l4308 0F2C  
                               l4172 0862                                 l4164 0802  
                               l4092 0B88                                 l4084 0B66  
                               l4076 0B4A                                 l4260 121E  
                               l4334 1C7A                                 l4326 0FBC  
                               l4318 0F92                                 l4422 1D8E  
                               l3720 1DB0                                 l4168 0820  
                               l4280 1300                                 l4362 14FC  
                               l4290 0E8E                                 l3714 1D9A  
                               l3730 1DD2                                 l3802 0E1E  
                               l4274 12E4                                 l3804 0E2A  
                               l4358 14EC                                 l4294 0EB4  
                               l3822 1760                                 l3814 1730  
                               l3662 0FE2                                 l4368 1516  
                               l4296 0EC2                                 l4288 0E80  
                               l3832 179A                                 l3824 176A  
                               l3816 1738                                 l3840 16A0  
                               l3728 1DCC                                 l3656 2072  
                               l3752 0D3C                                 l3906 1386  
                               l3826 1772                                 l3834 17A8  
                               l3850 16DA                                 l3682 1842  
                               l3754 0D44                                 l3746 0D28  
                               l3692 1E0A                                 l3916 13D8  
                               l3668 104E                                 l3846 16C8  
                               l3838 1698                                 l3758 0D5E  
                               l3688 1DF0                                 l3872 1918  
                               l3864 18EC                                 l3696 2030  
                               l3856 1702                                 l3848 16D2  
                               l3776 0DAC                                 l3960 095C  
                               l3858 1710                                 l3796 0DFC  
                               l3980 0A2C                                 l3966 09A4  
                               l3992 0AD2                                 l3984 0A7C  
                               l3988 0AB6                __end_of_ComController 092C  
                               _CRC8 1D94                                 _LATA 000F89  
                               u2230 17D6                                 _LATB 000F8A  
                               _LATC 000F8B                                 _LATD 000F8C  
                               _LATE 000F8D                                 u2520 1652  
                               u2730 120A                                 u2904 1C94  
                               u2905 1C8E                                 u2770 12E2  
                               u2835 0F36                                 u2855 0F70  
                               u2875 0FAC                                 u2957 123C  
                               i2l31 1FE0                                 u2967 1DF6  
                               i2l71 0066                                 i2l75 0070  
                               i2l67 004E                                 i2l69 005A  
                               _TMR2 000FBC                                 _WPUB 000F61  
                               _Data 00FE                      __end_ofi2_Delay 1E72  
                               _data 00DC                                 _main 1D4A  
           __end_of_EnableSlavePower 14E4                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 fsr2h 000FDA  
                               fsr0l 000FE9                                 indf1 000FE7  
                               indf2 000FDF                                 fsr1l 000FE1  
                               fsr2l 000FD9                                 btemp 0043  
                      __CFG_BORV$190 000000                                 prodh 000FF4  
                               prodl 000FF3                                 start 00AC  
                      __CFG_IESO$OFF 000000                    ?i2_writeRegisters 0001  
                   ?_FaultsCollector 0001                         ___param_bank 000000  
                      ??_ReadCurrent 000E                   ??i2_writeRegisters 000A  
     i2UART_buff_modulo_inc@my_value 0005                       GetPDUFault@loc 001D  
                              ?_CRC8 001D              ComController@DataToSend 01DA  
     __size_of_OSCILLATOR_Initialize 000E        __end_of_OSCILLATOR_Initialize 225C  
                              ?_main 0001                                _EEADR 000FA9  
                              _ANSB3 0079CB                                _ANSB4 0079CC  
                    _TMR1_StartTimer 2276                                _ANSD7 0079DF  
                              _T1CON 000FCD                                _T2CON 000FBA  
                              _LATB0 007C50                                _LATA3 007C4B  
                              _LATB3 007C53                                _LATB4 007C54  
                              _LATB5 007C55                                _LATC5 007C5D  
                              _LATD4 007C64                                _LATD5 007C65  
                              _LATD6 007C66                                _LATD7 007C67  
                     __CFG_DEBUG$OFF 000000                          ?_PDUStartup 0001  
                              i2l605 18D8                                i2l552 199E  
                              i2l554 19A8                                i2l636 2156  
                              i2l485 1A54                                _MCSOn 003F  
                 _PWM4_LoadDutyValue 1F98                                _TMR1H 000FCF  
                              _TMR1L 000FCE                  __end_of_CoolingStop 2240  
                              _TRISA 000F92                                _TRISB 000F93  
                              _TRISC 000F94                                _TRISD 000F95  
                              _TRISE 000F96                                _Delay 1DDE  
                        _GetPDUFault 21C6                        __CFG_WRT0$OFF 000000  
                      __CFG_WRT1$OFF 000000                        __CFG_WRT2$OFF 000000  
                      __CFG_WRT3$OFF 000000                 _EUSART1_Transmit_ISR 1F66  
                     __CFG_EBTR0$OFF 000000                       __CFG_FCMEN$OFF 000000  
                     __CFG_EBTR1$OFF 000000                       __CFG_EBTR2$OFF 000000  
                     __CFG_EBTR3$OFF 000000                     ??_writeRegisters 0026  
                   __end_of_TMR1_ISR 1F66                        __CFG_WRTB$OFF 000000  
                      __CFG_WRTC$OFF 000000                        __CFG_WRTD$OFF 000000  
                    _DATAEE_ReadByte 221A                       __CFG_EBTRB$OFF 000000  
                ?_PWM4_LoadDutyValue 001D                   __CFG_MCLRE$EXTMCLR 000000  
                              main@i 01EE                                main@j 01F0  
           SetDataDict@ReturnCounter 0024                          _ClearBuffer 21B0  
            __end_of_TMR1_Initialize 2112                     __end_ofi2_Update 2272  
                              pclath 000FFA                                tablat 000FF5  
                      ??_Receive_get 0028                        receiveData@CS 01E8  
                              plusw2 000FDB                                status 000FD8  
                        _GetDataDict 1720                     __end_of_Clear595 1EF8  
                      ??_SetDataDict 0021                       __CFG_HFOFST$ON 000000  
                    _TMR2_StartTimer 2272                         ?_receiveData 0001  
                     __CFG_PBADEN$ON 000000                 PotSetpoint@new_point 0026  
                       __end_of_CRC8 1DDE                      __initialization 1BF6  
         __end_of_EUSART1_Initialize 1F34                         __end_of_main 1D94  
                         _CurrentADC 00D0           UART_buff_flush@clearBuffer 0027  
               ??_PWM4_LoadDutyValue 001F                               ??_CRC8 0020  
            __end_of_PWM4_Initialize 221A              __end_of_TMR2_Initialize 2206  
                          ??_ADC_ISR 0001          ?_INTERRUPT_InterruptManager 0001  
               PotSetpoint@set_point 0060                           _FuseSystem 19D8  
                             ??_main 002A             ComController@DataRecived 01D6  
                __end_of_ReadCurrent 0740                     __end_of_PotClear 1688  
                      __activetblptr 000002                     __end_of_Send_put 2026  
            __end_of_UART_buff_flush 1B32            __size_ofi2_UART_buff_size 0016  
                             ?_Delay 001D                ?_EUSART1_Transmit_ISR 0001  
               GetDataDict@DataArray 001E                 GetDataDict@DataCount 0023  
               GetDataDict@DataTable 0022                 SetDataDict@DataArray 001E  
               SetDataDict@DataCount 0023                 SetDataDict@DataTable 0022  
                          ??i2_Delay 0005                               _ADCON0 000FC2  
                             _ADCON1 000FC1                               _ADCON2 000FC0  
               __size_of_cobs_decode 01BE                          FuseSystem@i 0009  
                             _ADRESH 000FC4                               _ADRESL 000FC3  
                             _EEDATA 000FA8                               _CCPR2H 000F68  
                             _CCPR2L 000F67                               _EECON2 000FA7  
               __size_of_cobs_encode 0198                               _ANSELA 000F38  
                             _ANSELB 000F39                               _ANSELC 000F3A  
                             _ANSELD 000F3B                               _ANSELE 000F3C  
                             _T1GCON 000FCC                      i2_UART_buff_get 184A  
                             _RC1STA 000FAB                               i2l3030 196A  
                    i2_UART_buff_put 10DC                               Delay@i 0022  
                             i2l3038 1996                               i2l3340 19E0  
                             i2l3350 1A36                       __CFG_WDTEN$OFF 000000  
                             i2l3264 209C                               i2l3520 1168  
                             i2l3352 1A3E                               i2l3344 19F0  
                             i2l3514 10FC                               i2l3356 1A4E  
                             i2l3372 02E0                               i2l3534 18D4  
                             i2l3390 0628                               i2l3366 01C8  
                             i2l3552 1F90                               i2l3384 0510  
        UART_buff_modulo_inc@modulus 001F                               i2l2842 1E54  
                             i2l3378 03F8                               i2l3570 1F5E  
                             i2l2838 1E3A                               _TABLAT 000FF5  
                             _RCREG1 000FAE                               _OSCCON 000FD3  
        __end_of_processPowerRequest 0FC2                               _SPBRG1 000FAF  
               __end_of_CoolingStart 2130                               _TX1STA 000FAC  
                             _TRISB3 007C9B                               _TRISB4 007C9C  
                             _TRISB5 007C9D                               _TXREG1 000FAD  
                __size_of_PDUStartup 0062                       __CFG_XINST$OFF 000000  
                      ??_PotSetpoint 0028                  __end_of_Receive_get 224E  
                       _CCPTMRS1bits 000F48                               _Update 2266  
                 __size_of_SetPin595 004E                        _output_buffer 0200  
            __end_of_TMR1_StartTimer 227A                  __end_of_SetDataDict 1720  
                             ___wmul 20A6                            CRC8@tempI 0022  
                     __CFG_STVREN$ON 000000                          _CoolingStop 222E  
                             _memset 2026                               clear_0 1C1A  
                             clear_1 1C26                               clear_2 1C32  
                             clear_3 1C3E                               main@UP 01F2  
                   __end_of_sendData 0B06              __end_of_DATAEE_ReadByte 222E  
                       __pdataCOMRAM 0040               cobs_encode@dst_buf_len 001F  
             cobs_encode@dst_buf_ptr 001D                        Send_put@_data 0028  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8                           _StartUp595 1B94  
           ADC_GetConversion@channel 0005         __end_of_UART_buff_modulo_inc 207C  
            __end_of_TMR2_StartTimer 2276        __size_of_INTERRUPT_Initialize 000A  
                  ReadCurrent@gather 000E                     ?_TMR1_Initialize 0001  
                  _SYSTEM_Initialize 20CC                           __accesstop 0060  
            __end_of__initialization 1C44                         ?i2_SetPin595 0001  
                      sendData@count 00B9                        sendData@lenth 0072  
                 ?_SYSTEM_Initialize 0001                        ___rparam_used 000001  
            ?i2_UART_buff_modulo_inc 0001                         ?_updateComms 0001  
                      __end_of_Delay 1E28                       __pcstackCOMRAM 0001  
                ??_SYSTEM_Initialize 0027                          _ReadCurrent 00B0  
                          ?_TMR1_ISR 0001                     ?_TMR2_Initialize 0001  
                   ?_PWM4_Initialize 0001                 UART_buff_flush@_this 0025  
                        ?_FuseSystem 0001                            ?i2_Update 0001  
                __end_of_PotSetpoint 1400          __size_of_ComputeStorageData 00DC  
        PWM4_LoadDutyValue@dutyValue 001D                   UART_buff_get@_this 0023  
                        _Currentcomp 00E8                __end_of_UART_buff_get 184A  
             ??_EUSART1_Transmit_ISR 000C                __end_of_UART_buff_put 10DC  
                          ?_Clear595 0001                     ?_UART_buff_flush 0025  
                            ??_Delay 0021              __end_ofi2_UART_buff_get 18DC  
            __end_ofi2_UART_buff_put 11F6          __end_of_EUSART1_Receive_ISR 216C  
                            CRC8@crc 0023                              CRC8@len 001F  
                            CRC8@sum 0020                    __end_of_SetPin595 1CFC  
          __end_of_SYSTEM_Initialize 20F0                          sendData@DTS 0070  
             cobs_decode@dst_buf_len 001F                           __pbssBANK0 00C4  
                         __pbssBANK1 0100                           __pbssBANK2 0200  
             cobs_decode@dst_buf_ptr 001D                      __CFG_PLLCFG$OFF 000000  
                        _Receive_get 2240       __end_ofi2_UART_buff_modulo_inc 20A6  
                        _SetDataDict 1688                    ?_EnableSlavePower 0027  
            __size_of_UART_buff_init 001E                          _ReciveArray 01B8  
            __size_of_UART_buff_size 0016                            ?_PotClear 0001  
                          ?_Send_put 0001                   ??_EnableSlavePower 0029  
               __size_of_receiveData 010E                   __CFG_CCP2MX$PORTC1 000000  
                            ?_Update 0001                              ?___wmul 0001  
                   ?_TMR1_StartTimer 0001                           ??_TMR1_ISR 000F  
                 __CFG_CCP3MX$PORTB5 000000             cobs_decode@dst_write_ptr 0068  
         cobs_decode@remaining_bytes 0066                              _CCP2CON 000F66  
                            _ADC_ISR 227A                              ?_memset 001D  
                         ??i2_Update 000E              __size_of_ADC_Initialize 0018  
                   ?_DATAEE_ReadByte 0001                         ??_PDUStartup 002A  
                 UART_buff_put@_this 0023                      cobs_decode@F192 0035  
                         ??_Clear595 002A                     i2_UART_buff_size 21DC  
          __size_ofi2_writeRegisters 007E          i2UART_buff_modulo_inc@value 0001  
                       ?_GetPDUFault 0001                              _OSCCON2 000FD2  
                            _TBLPTRH 000FF7                              _TBLPTRL 000FF6  
                            _TBLPTRU 000FF8                          ?_StartUp595 0001  
                  _Receive_available 2184         UART_buff_modulo_inc@my_value 0021  
                  __CFG_PRICLKEN$OFF 000000                              _OSCTUNE 000F9B  
                            _SPBRGH1 000FB0                  sendData@whereToSend 00B4  
                            i2_Delay 1E28                __size_of_CoolingStart 001E  
                   ?_TMR2_StartTimer 0001                   ?_Receive_available 001F  
                       ?_ClearBuffer 0001                         ?_GetDataDict 001D  
       ComController@DataToSend_1653 01DE                  __size_of_FuseSystem 007E  
                   ComController@DTI 00BC                  ??_Receive_available 0021  
                          ?_sendData 006D                              _Current 00C4  
                    __CFG_PWRTEN$OFF 000000                           ??_PotClear 0026  
                         ??_Send_put 0028                              __Hparam 0000  
                            __Lparam 0000                   __end_of_PDUStartup 1B94  
             cobs_encode@src_end_ptr 0060                          _PotSetpoint 1304  
                    __size_of_Update 0006                 _UART_buff_modulo_inc 2052  
                    __size_of___wmul 0026                              __pcinit 1BF6  
             __size_of_ComController 01EC                      __size_of_memset 002C  
                            __ramtop 0600                     FaultsCollector@i 0023  
                   i2UART_buff_get@c 000B                              __ptext0 1D4A  
                            __ptext1 1E72                              __ptext2 11F6  
                            __ptext3 0B06                              __ptext4 2240  
                            __ptext5 2184                              __ptext6 219A  
                            __ptext7 0740                              __ptext8 092C  
                            __ptext9 0CC4             __size_of_FaultsCollector 005C  
                       _CoolingStart 2112                     i2UART_buff_put@c 0009  
                          _T1CONbits 000FCD           cobs_encode@dst_buf_end_ptr 0063  
              _OSCILLATOR_Initialize 224E            __end_of_Receive_available 219A  
                          _T2CONbits 000FBA                  cobs_encode@src_byte 0062  
                 _EUSART1_Initialize 1EF8                     ?i2_UART_buff_get 0007  
           ??_PIN_MANAGER_Initialize 001D                            Clear595@i 0060  
                   ?i2_UART_buff_put 0007           __size_of_SYSTEM_Initialize 0024  
               end_of_initialization 1C44                            Delay@wait 001D  
                ?_EUSART1_Initialize 0001                      cobs_encode@F180 0038  
                            memset@c 001F                              memset@n 0021  
                            memset@p 0023                        __Lmediumconst 0000  
                         ??_sendData 0074                 __size_ofi2_SetPin595 004E  
                          _PDUFalult 002A                ?_UART_buff_modulo_inc 001D  
               __size_of_updateComms 0048                              postdec2 000FDD  
                __size_of_StartUp595 0062                              postinc0 000FEE  
                            postinc2 000FDE          __size_of_PWM4_LoadDutyValue 0030  
                       ?_CoolingStop 0001                         SetPin595@Reg 001D  
               ??_EUSART1_Initialize 0027                         SetPin595@pin 001F  
                  cobs_decode@result 006B               cobs_decode@src_end_ptr 0060  
                      ??_cobs_decode 0025                        ??_cobs_encode 0025  
                          _TRISCbits 000F94                            _TRISDbits 000F95  
                   FuseSystem@i_1234 0007                       sendData@result 00B6  
                      _ComController 0740                i2UART_buff_size@_this 0001  
                     _UART_buff_init 2130                       _UART_buff_size 219A  
            __size_of_writeRegisters 007E                   updateComms@DataGet 00C2  
       __size_of_processPowerRequest 0166                         ?_ReadCurrent 0001  
       __end_of_INTERRUPT_Initialize 2266                       __end_of_Update 226C  
             GetDataDict@numbofbytes 0020                       __end_of___wmul 20CC  
                      __pidataCOMRAM 227E                         ??_FuseSystem 0007  
                  __size_of_TMR1_ISR 0032                       _ADC_Initialize 216C  
             ?_OSCILLATOR_Initialize 0001                       __end_of_memset 2052  
                       receiveData@i 01E9           __size_of_Receive_available 0016  
                   i2_writeRegisters 195A                    __size_ofi2_Update 0006  
                start_initialization 1BF6      __size_of_PIN_MANAGER_Initialize 007A  
              EnableSlavePower@slave 0029               SetDataDict@numbofbytes 0020  
                  __size_of_Clear595 003E                    ??_FaultsCollector 001E  
               __size_of_GetPDUFault 0016                  i2writeRegisters@val 000A  
                          PotClear@x 0026                   ComController@lenth 00BE  
                     ?_ComController 00BC                  __end_of_cobs_decode 0CC4  
             __end_of_UART_buff_init 214E                       UART_buff_get@c 0027  
             __end_of_UART_buff_size 21B0                  __end_of_cobs_encode 0E5C  
                       ?_Receive_get 0001                            _SetPin595 1CAE  
                     UART_buff_put@c 0025                 __size_of_ClearBuffer 0016  
                       ?_SetDataDict 001D                  DATAEE_ReadByte@bAdd 001D  
                 __end_of_FuseSystem 1A56             __end_ofi2_UART_buff_size 21F2  
               __size_of_GetDataDict 0098                       ComController@k 01E2  
             ??_UART_buff_modulo_inc 0021             __size_of_TMR1_Initialize 0022  
                           CRC8@data 001D                             ??_Update 002A  
                  __size_of_PotClear 00C8                    __size_of_Send_put 002E  
                           ??___wmul 0005               __end_of_ADC_Initialize 2184  
         __end_of_ComputeStorageData 15C0                             ?_ADC_ISR 0001  
                           ??_memset 0023            __size_of_EnableSlavePower 00E4  
                        __pbssCOMRAM 002A        __size_of_EUSART1_Transmit_ISR 0032  
                      __pcstackBANK0 0060                        __pcstackBANK1 01D6  
                       ??_StartUp595 002A             __size_of_PWM4_Initialize 0014  
           __size_of_TMR2_Initialize 0014                             ?i2_Delay 0001  
                UART_buff_init@_this 0025                    i2writeRegisters@i 000C  
                    ?_UART_buff_init 0025             __size_of_UART_buff_flush 0062  
                    ?_UART_buff_size 001D         __size_of_EUSART1_Receive_ISR 001E  
                         ?_SetPin595 001D                        ??_receiveData 01E3  
                         sendData@CS 00B5                cobs_encode@search_len 0065  
             __size_of_UART_buff_get 0092               __size_of_UART_buff_put 011A  
             _PIN_MANAGER_Initialize 1A56                    __size_of_sendData 01DA  
                       ?_PotSetpoint 0026                            __pintcode 0008  
                 __end_of_StartUp595 1BF6                      ?_ADC_Initialize 0001  
       ??_INTERRUPT_InterruptManager 000F                 i2UART_buff_get@_this 0007  
               __size_of_CoolingStop 0012                       i2SetPin595@Reg 0001  
                     i2SetPin595@pin 0003                             _BAUD1CON 000FB8  
           __size_of_TMR1_StartTimer 0004                       __size_of_Delay 004A  
                        _cobs_decode 0B06                          _cobs_encode 0CC4  
             sendData@DataTableIndex 006F                      ??_ComController 00C0  
           __size_of_DATAEE_ReadByte 0014               FaultsCollector@sendVal 0021  
               _INTERRUPT_Initialize 225C                   cobs_encode@src_len 0023  
                 cobs_encode@src_ptr 0021          processPowerRequest@powerSet 0068  
                     ___wmul@product 0005                             _LATCbits 000F8B  
                     _writeRegisters 18DC                  UART_buff_size@_this 001D  
                          _registers 0100                             _IPR1bits 000F9F  
                           _PIE1bits 000F9D             __size_of_TMR2_StartTimer 0004  
                           i2u210_40 1F80                             i2u211_40 1F52  
                           i2Delay@i 0006  __size_of_INTERRUPT_InterruptManager 00A4  
                           i2u208_40 1868                             _PIR1bits 000F9E  
                           i2u297_47 1E40                             _RCONbits 000FD0  
                   __CFG_WDTPS$32768 000000                  __end_of_receiveData 1304  
                           _TMR1_ISR 1F34                         PotSetpoint@x 0062  
                       _input_buffer 0130                 __size_of_ReadCurrent 0690  
                  ??_TMR1_Initialize 001D                     __size_of_ADC_ISR 0004  
         cobs_decode@dst_buf_end_ptr 0062                             i2_Update 226C  
                         _ADCON0bits 000FC2                           _ADCON2bits 000FC0  
                  ___wmul@multiplier 0001                 i2UART_buff_put@_this 0007  
                   i2SetPin595@value 0005                             _Clear595 1EBA  
                      _UART_buff_get 17B8                        _UART_buff_put 0FC2  
                  sendData@COBSArray 0078        cobs_encode@dst_code_write_ptr 0066  
                _processPowerRequest 0E5C             ??i2_UART_buff_modulo_inc 0005  
                        _INTCON2bits 000FF1                     __size_ofi2_Delay 004A  
              ?_INTERRUPT_Initialize 0001                   sendData@ComandByte 006D  
             __end_of_writeRegisters 195A                   PotSetpoint@new_pos 0064  
                      ??i2_SetPin595 0007                          ??_SetPin595 0023  
               EnableSlavePower@onof 0027             __size_ofi2_UART_buff_get 0092  
                  ??_TMR2_Initialize 001D                    ??_PWM4_Initialize 001D  
           __size_ofi2_UART_buff_put 011A                           _EECON1bits 000FA6  
                      ??_updateComms 002A                 __size_of_Receive_get 000E  
           __end_ofi2_writeRegisters 19D8                             _PotClear 15C0  
                           __Hrparam 0000                             _Send_put 1FF8  
               __size_of_SetDataDict 0098                    ??_UART_buff_flush 0029  
         __end_of_PWM4_LoadDutyValue 1FC8                             __Lrparam 0000  
                  _ADC_GetConversion 1FC8                 ?_processPowerRequest 0001  
                 __CFG_BOREN$SBORDIS 000000                    __CFG_P2BMX$PORTD2 000000  
            ??_OSCILLATOR_Initialize 001D                   ?_ADC_GetConversion 0001  
        __size_of_EUSART1_Initialize 003C                      _FaultsCollector 1C52  
                   _EnableSlavePower 1400                           _ANSELCbits 000F3A  
                     ?_UART_buff_get 0023                       ?_UART_buff_put 0023  
                        CRC8@extract 0021                  ??_ADC_GetConversion 0003  
                   GetDataDict@Error 0021                     SetDataDict@Error 0021  
                          sendData@i 00BB                             __ptext10 1FF8  
                           __ptext11 0FC2                             __ptext20 222E  
                           __ptext12 17B8                             __ptext21 2112  
                           __ptext13 2052                           _T1GCONbits 000FCC  
                           __ptext30 20F0                             __ptext22 1304  
                           __ptext14 1D94                             __ptext31 2276  
                           __ptext23 15C0                             __ptext15 1688  
                           __ptext40 1B32                             __ptext32 2206  
                           __ptext24 1F98                             __ptext16 1720  
                           __ptext41 2266                             __ptext33 1A56  
                           __ptext25 1C52                             __ptext17 21B0  
                           __ptext42 1B94                             __ptext34 224E  
                           __ptext26 21C6                             __ptext18 1AD0  
                           __ptext51 1F34                             __ptext43 1EBA  
                           __ptext35 225C                             __ptext27 20CC  
                           __ptext19 0E5C                             __ptext60 1F66  
                           __ptext52 00B0                             __ptext44 18DC  
                           __ptext36 1EF8                             __ptext28 21F2  
                           __ptext61 21DC                             __ptext53 226C  
                           __ptext45 1DDE                             __ptext37 2130  
                           __ptext29 2272                             __ptext62 184A  
                           __ptext54 195A                             __ptext46 1400  
                           __ptext38 2026                             __ptext63 214E  
                           __ptext55 1E28                             __ptext47 1CAE  
                           __ptext39 216C                             __ptext64 10DC  
                           __ptext56 1CFC                             __ptext48 14E4  
                           __ptext65 207C                             __ptext57 1FC8  
                           __ptext49 221A                             __ptext66 227A  
                           __ptext58 19D8                             __ptext59 20A6  
                  ??_TMR1_StartTimer 001D                        __size_of_CRC8 004A  
          GetDataDict@DataTableIndex 001D                          i2Delay@wait 0001  
            EUSART1_Receive_ISR@data 000C                      ?_writeRegisters 0001  
                      __size_of_main 004A                    cobs_encode@result 006A  
                        _receiveData 11F6                             _readwhat 0040  
                     _Transmit_stall 0042                             _sendData 092C  
                  ??_DATAEE_ReadByte 001D            __end_of_ADC_GetConversion 1FF8  
                  ?i2_UART_buff_size 0001                    sendData@DataTable 006E  
              ??_processPowerRequest 0066                           _RC1STAbits 000FAB  
                __end_ofi2_SetPin595 1D4A                             _prev_pos 003B  
                       _ProcessArray 019A                   ??i2_UART_buff_size 0003  
                  writeRegisters@val 0026                             int$flags 0043  
                  ??_TMR2_StartTimer 001D                  __end_of_updateComms 1EBA  
 __end_of_INTERRUPT_InterruptManager 00AC           _INTERRUPT_InterruptManager 0008  
               __size_of_PotSetpoint 00FC                  _EUSART1_Receive_ISR 214E  
                  receiveData@result 01EB                        ??_GetPDUFault 001D  
                         _INTCONbits 000FF2                  ComputeStorageData@i 0020  
                 _DataTableArrayFour 0032            UART_buff_modulo_inc@value 001D  
                   ??_UART_buff_init 0027                     ??_UART_buff_size 001F  
                 _ComputeStorageData 14E4               ??_INTERRUPT_Initialize 001D  
                           memset@p1 001D      __size_ofi2_UART_buff_modulo_inc 002A  
                      ??_ClearBuffer 0029                             intlevel2 0000  
                cobs_decode@len_code 006A                 ?_EUSART1_Receive_ISR 0001  
                      ??_GetDataDict 0021                  ?_ComputeStorageData 0001  
            ?_PIN_MANAGER_Initialize 0001                         cobs_decode@i 0065  
                     SetPin595@value 0021         __end_of_EUSART1_Transmit_ISR 1F98  
                   ??_ADC_Initialize 001D                    sendData@SendArray 0096  
            __end_of_FaultsCollector 1CAE                    ??i2_UART_buff_get 0009  
                  ??i2_UART_buff_put 000A                  cobs_decode@src_byte 0064  
      __size_of_UART_buff_modulo_inc 002A                    _DataTableArrayOne 00F4  
                    ??_UART_buff_get 0025                      ??_UART_buff_put 0026  
               ??_ComputeStorageData 001E                        ?_CoolingStart 0001  
                         _PDUStartup 1B32                         ?_cobs_decode 001D  
                       ?_cobs_encode 001D                    __CFG_T3CMX$PORTC0 000000  
                    writeRegisters@i 0028                   cobs_decode@src_len 0023  
                 cobs_decode@src_ptr 0021                  __end_of_GetPDUFault 21DC  
              ??_EUSART1_Receive_ISR 000C       __end_of_PIN_MANAGER_Initialize 1AD0  
                        i2_SetPin595 1CFC                    __CFG_FOSC$INTIO67 000000  
                __end_of_ClearBuffer 21C6           __size_of_ADC_GetConversion 0030  
                    _TMR1_Initialize 20F0                          _updateComms 1E72  
