

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Sat Aug 12 16:31:35 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    84                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    85                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    86  0000                     
    87                           ; Version 1.42
    88                           ; Generated 13/04/2017 GMT
    89                           ; 
    90                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    91                           ; All rights reserved.
    92                           ; 
    93                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    94                           ; 
    95                           ; Redistribution and use in source and binary forms, with or without modification, are
    96                           ; permitted provided that the following conditions are met:
    97                           ; 
    98                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    99                           ;        conditions and the following disclaimer.
   100                           ; 
   101                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   102                           ;        of conditions and the following disclaimer in the documentation and/or other
   103                           ;        materials provided with the distribution.
   104                           ; 
   105                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   106                           ;        software without specific prior written permission.
   107                           ; 
   108                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   109                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   110                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   111                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   112                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   113                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   114                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   115                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   116                           ; 
   117                           ; 
   118                           ; Code-generator required, PIC18F45K22 Definitions
   119                           ; 
   120                           ; SFR Addresses
   121  0000                     
   122                           	psect	idataCOMRAM
   123  002224                     __pidataCOMRAM:
   124                           	opt stack 0
   125                           
   126                           ;initializer for _COBS_DECODE_DST_BUF_LEN_MAX
   127  002224  001E               	dw	30
   128                           
   129                           ;initializer for _COBS_ENCODE_DST_BUF_LEN_MAX
   130  002226  001E               	dw	30
   131                           
   132                           ;initializer for _readwhat
   133  002228  0001               	dw	1
   134                           
   135                           ;initializer for _Transmit_stall
   136  00222A  01                 	db	1
   137  0000                     _CCPTMRS1bits	set	3912
   138  0000                     _ANSELCbits	set	3898
   139  0000                     _ANSELE	set	3900
   140  0000                     _ANSELD	set	3899
   141  0000                     _ANSELC	set	3898
   142  0000                     _ANSELB	set	3897
   143  0000                     _ANSELA	set	3896
   144  0000                     _ANSB4	set	31180
   145  0000                     _ANSD7	set	31199
   146  0000                     _ANSB3	set	31179
   147  0000                     _RC1STAbits	set	4011
   148  0000                     _RCREG1	set	4014
   149  0000                     _TXREG1	set	4013
   150  0000                     _SPBRGH1	set	4016
   151  0000                     _SPBRG1	set	4015
   152  0000                     _TX1STA	set	4012
   153  0000                     _RC1STA	set	4011
   154  0000                     _BAUD1CON	set	4024
   155  0000                     _T2CONbits	set	4026
   156  0000                     _TMR2	set	4028
   157  0000                     _PR2	set	4027
   158  0000                     _T2CON	set	4026
   159  0000                     _CCPR2H	set	3944
   160  0000                     _CCPR2L	set	3943
   161  0000                     _CCP2CON	set	3942
   162  0000                     _T1GCONbits	set	4044
   163  0000                     _T1CONbits	set	4045
   164  0000                     _TMR1L	set	4046
   165  0000                     _TMR1H	set	4047
   166  0000                     _T1GCON	set	4044
   167  0000                     _T1CON	set	4045
   168  0000                     _TRISDbits	set	3989
   169  0000                     _INTCON2bits	set	4081
   170  0000                     _LATCbits	set	3979
   171  0000                     _TRISCbits	set	3988
   172  0000                     _TRISE	set	3990
   173  0000                     _LATE	set	3981
   174  0000                     _TRISD	set	3989
   175  0000                     _LATD	set	3980
   176  0000                     _TRISC	set	3988
   177  0000                     _LATC	set	3979
   178  0000                     _WPUB	set	3937
   179  0000                     _TRISB	set	3987
   180  0000                     _LATB	set	3978
   181  0000                     _TRISA	set	3986
   182  0000                     _LATA	set	3977
   183  0000                     _EEDATA	set	4008
   184  0000                     _EEADR	set	4009
   185  0000                     _EECON2	set	4007
   186  0000                     _EECON1bits	set	4006
   187  0000                     _INTCONbits	set	4082
   188  0000                     _TABLAT	set	4085
   189  0000                     _TBLPTRL	set	4086
   190  0000                     _TBLPTRH	set	4087
   191  0000                     _TBLPTRU	set	4088
   192  0000                     _OSCTUNE	set	3995
   193  0000                     _OSCCON2	set	4050
   194  0000                     _OSCCON	set	4051
   195  0000                     _PIE1bits	set	3997
   196  0000                     _IPR1bits	set	3999
   197  0000                     _RCONbits	set	4048
   198  0000                     _PIR1bits	set	3998
   199  0000                     _ADCON0bits	set	4034
   200  0000                     _ADRESH	set	4036
   201  0000                     _ADRESL	set	4035
   202  0000                     _ADCON2bits	set	4032
   203  0000                     _ADCON2	set	4032
   204  0000                     _ADCON1	set	4033
   205  0000                     _ADCON0	set	4034
   206  0000                     _LATC5	set	31837
   207  0000                     _LATA3	set	31819
   208  0000                     _LATB3	set	31827
   209  0000                     _LATB5	set	31829
   210  0000                     _LATD6	set	31846
   211  0000                     _LATD4	set	31844
   212  0000                     _LATD7	set	31847
   213  0000                     _LATB0	set	31824
   214  0000                     _LATD5	set	31845
   215  0000                     _TRISB5	set	31901
   216  0000                     _TRISB3	set	31899
   217  0000                     _TRISB4	set	31900
   218  0000                     _LATB4	set	31828
   219                           
   220                           ; #config settings
   221  0000                     
   222                           	psect	cinit
   223  001C06                     __pcinit:
   224                           	opt stack 0
   225  001C06                     start_initialization:
   226                           	opt stack 0
   227  001C06                     __initialization:
   228                           	opt stack 0
   229                           
   230                           ; Initialize objects allocated to COMRAM (7 bytes)
   231                           ; load TBLPTR registers with __pidataCOMRAM
   232  001C06  0E24               	movlw	low __pidataCOMRAM
   233  001C08  6EF6               	movwf	tblptrl,c
   234  001C0A  0E22               	movlw	high __pidataCOMRAM
   235  001C0C  6EF7               	movwf	tblptrh,c
   236  001C0E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   237  001C10  6EF8               	movwf	tblptru,c
   238  001C12  EE00  F03B         	lfsr	0,__pdataCOMRAM
   239  001C16  EE10 F007          	lfsr	1,7
   240  001C1A                     copy_data0:
   241  001C1A  0009               	tblrd		*+
   242  001C1C  CFF5 FFEE          	movff	tablat,postinc0
   243  001C20  50E5               	movf	postdec1,w,c
   244  001C22  50E1               	movf	fsr1l,w,c
   245  001C24  E1FA               	bnz	copy_data0
   246                           
   247                           ; Clear objects allocated to BANK2 (106 bytes)
   248  001C26  EE02  F000         	lfsr	0,__pbssBANK2
   249  001C2A  0E6A               	movlw	106
   250  001C2C                     clear_0:
   251  001C2C  6AEE               	clrf	postinc0,c
   252  001C2E  06E8               	decf	wreg,f,c
   253  001C30  E1FD               	bnz	clear_0
   254                           
   255                           ; Clear objects allocated to BANK1 (226 bytes)
   256  001C32  EE01  F000         	lfsr	0,__pbssBANK1
   257  001C36  0EE2               	movlw	226
   258  001C38                     clear_1:
   259  001C38  6AEE               	clrf	postinc0,c
   260  001C3A  06E8               	decf	wreg,f,c
   261  001C3C  E1FD               	bnz	clear_1
   262                           
   263                           ; Clear objects allocated to BANK0 (54 bytes)
   264  001C3E  EE00  F0C7         	lfsr	0,__pbssBANK0
   265  001C42  0E36               	movlw	54
   266  001C44                     clear_2:
   267  001C44  6AEE               	clrf	postinc0,c
   268  001C46  06E8               	decf	wreg,f,c
   269  001C48  E1FD               	bnz	clear_2
   270                           
   271                           ; Clear objects allocated to COMRAM (14 bytes)
   272  001C4A  EE00  F02D         	lfsr	0,__pbssCOMRAM
   273  001C4E  0E0E               	movlw	14
   274  001C50                     clear_3:
   275  001C50  6AEE               	clrf	postinc0,c
   276  001C52  06E8               	decf	wreg,f,c
   277  001C54  E1FD               	bnz	clear_3
   278  001C56                     end_of_initialization:
   279                           	opt stack 0
   280  001C56                     __end_of__initialization:
   281                           	opt stack 0
   282  001C56  9042               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   283  001C58  9242               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   284  001C5A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   285  001C5C  6EF8               	movwf	tblptru,c
   286  001C5E  0100               	movlb	0
   287  001C60  EF34  F00C         	goto	_main	;jump to C main() function
   288                           tblptru	equ	0xFF8
   289                           tblptrh	equ	0xFF7
   290                           tblptrl	equ	0xFF6
   291                           tablat	equ	0xFF5
   292                           postinc0	equ	0xFEE
   293                           wreg	equ	0xFE8
   294                           postdec1	equ	0xFE5
   295                           fsr1l	equ	0xFE1
   296                           
   297                           	psect	bssCOMRAM
   298  00002D                     __pbssCOMRAM:
   299                           	opt stack 0
   300  00002D                     _DataTableArrayFour:
   301                           	opt stack 0
   302  00002D                     	ds	3
   303  000030                     cobs_decode@F192:
   304                           	opt stack 0
   305  000030                     	ds	3
   306  000033                     cobs_encode@F180:
   307                           	opt stack 0
   308  000033                     	ds	3
   309  000036                     _prev_pos:
   310                           	opt stack 0
   311  000036                     	ds	2
   312  000038                     _timer1ReloadVal:
   313                           	opt stack 0
   314  000038                     	ds	2
   315  00003A                     _MCSOn:
   316                           	opt stack 0
   317  00003A                     	ds	1
   318                           tblptru	equ	0xFF8
   319                           tblptrh	equ	0xFF7
   320                           tblptrl	equ	0xFF6
   321                           tablat	equ	0xFF5
   322                           postinc0	equ	0xFEE
   323                           wreg	equ	0xFE8
   324                           postdec1	equ	0xFE5
   325                           fsr1l	equ	0xFE1
   326                           
   327                           	psect	dataCOMRAM
   328  00003B                     __pdataCOMRAM:
   329                           	opt stack 0
   330  00003B                     _COBS_DECODE_DST_BUF_LEN_MAX:
   331                           	opt stack 0
   332  00003B                     	ds	2
   333  00003D                     _COBS_ENCODE_DST_BUF_LEN_MAX:
   334                           	opt stack 0
   335  00003D                     	ds	2
   336  00003F                     _readwhat:
   337                           	opt stack 0
   338  00003F                     	ds	2
   339  000041                     _Transmit_stall:
   340                           	opt stack 0
   341  000041                     	ds	1
   342                           tblptru	equ	0xFF8
   343                           tblptrh	equ	0xFF7
   344                           tblptrl	equ	0xFF6
   345                           tablat	equ	0xFF5
   346                           postinc0	equ	0xFEE
   347                           wreg	equ	0xFE8
   348                           postdec1	equ	0xFE5
   349                           fsr1l	equ	0xFE1
   350                           
   351                           	psect	bssBANK0
   352  0000C7                     __pbssBANK0:
   353                           	opt stack 0
   354  0000C7                     _CurrentADC:
   355                           	opt stack 0
   356  0000C7                     	ds	12
   357  0000D3                     _data:
   358                           	opt stack 0
   359  0000D3                     	ds	12
   360  0000DF                     _Currentcomp:
   361                           	opt stack 0
   362  0000DF                     	ds	12
   363  0000EB                     _DataTableArrayOne:
   364                           	opt stack 0
   365  0000EB                     	ds	10
   366  0000F5                     _PDUFalult:
   367                           	opt stack 0
   368  0000F5                     	ds	8
   369                           tblptru	equ	0xFF8
   370                           tblptrh	equ	0xFF7
   371                           tblptrl	equ	0xFF6
   372                           tablat	equ	0xFF5
   373                           postinc0	equ	0xFEE
   374                           wreg	equ	0xFE8
   375                           postdec1	equ	0xFE5
   376                           fsr1l	equ	0xFE1
   377                           
   378                           	psect	bssBANK1
   379  000100                     __pbssBANK1:
   380                           	opt stack 0
   381  000100                     _registers:
   382                           	opt stack 0
   383  000100                     	ds	48
   384  000130                     _Current:
   385                           	opt stack 0
   386  000130                     	ds	12
   387  00013C                     _input_buffer:
   388                           	opt stack 0
   389  00013C                     	ds	106
   390  0001A6                     _ProcessArray:
   391                           	opt stack 0
   392  0001A6                     	ds	30
   393  0001C4                     _ReciveArray:
   394                           	opt stack 0
   395  0001C4                     	ds	30
   396                           tblptru	equ	0xFF8
   397                           tblptrh	equ	0xFF7
   398                           tblptrl	equ	0xFF6
   399                           tablat	equ	0xFF5
   400                           postinc0	equ	0xFEE
   401                           wreg	equ	0xFE8
   402                           postdec1	equ	0xFE5
   403                           fsr1l	equ	0xFE1
   404                           
   405                           	psect	bssBANK2
   406  000200                     __pbssBANK2:
   407                           	opt stack 0
   408  000200                     _output_buffer:
   409                           	opt stack 0
   410  000200                     	ds	106
   411                           tblptru	equ	0xFF8
   412                           tblptrh	equ	0xFF7
   413                           tblptrl	equ	0xFF6
   414                           tablat	equ	0xFF5
   415                           postinc0	equ	0xFEE
   416                           wreg	equ	0xFE8
   417                           postdec1	equ	0xFE5
   418                           fsr1l	equ	0xFE1
   419                           
   420                           	psect	cstackBANK1
   421  0001E2                     __pcstackBANK1:
   422                           	opt stack 0
   423  0001E2                     ComController@DataRecived:
   424                           	opt stack 0
   425                           
   426                           ; 4 bytes @ 0x0
   427  0001E2                     	ds	4
   428  0001E6                     ComController@DataToSend:
   429                           	opt stack 0
   430                           
   431                           ; 4 bytes @ 0x4
   432  0001E6                     	ds	4
   433  0001EA                     ComController@DataToSend_1658:
   434                           	opt stack 0
   435                           
   436                           ; 4 bytes @ 0x8
   437  0001EA                     	ds	4
   438  0001EE                     ComController@k:
   439                           	opt stack 0
   440                           
   441                           ; 1 bytes @ 0xC
   442  0001EE                     	ds	1
   443  0001EF                     receiveData@CS:
   444                           	opt stack 0
   445                           
   446                           ; 1 bytes @ 0xD
   447  0001EF                     	ds	1
   448  0001F0                     receiveData@i:
   449                           	opt stack 0
   450                           
   451                           ; 2 bytes @ 0xE
   452  0001F0                     	ds	2
   453  0001F2                     receiveData@Data:
   454                           	opt stack 0
   455                           
   456                           ; 1 bytes @ 0x10
   457  0001F2                     	ds	1
   458  0001F3                     receiveData@result:
   459                           	opt stack 0
   460                           
   461                           ; 3 bytes @ 0x11
   462  0001F3                     	ds	3
   463  0001F6                     main@i:
   464                           	opt stack 0
   465                           
   466                           ; 2 bytes @ 0x14
   467  0001F6                     	ds	2
   468  0001F8                     main@j:
   469                           	opt stack 0
   470                           
   471                           ; 2 bytes @ 0x16
   472  0001F8                     	ds	2
   473  0001FA                     main@UP:
   474                           	opt stack 0
   475                           
   476                           ; 1 bytes @ 0x18
   477  0001FA                     	ds	1
   478                           tblptru	equ	0xFF8
   479                           tblptrh	equ	0xFF7
   480                           tblptrl	equ	0xFF6
   481                           tablat	equ	0xFF5
   482                           postinc0	equ	0xFEE
   483                           wreg	equ	0xFE8
   484                           postdec1	equ	0xFE5
   485                           fsr1l	equ	0xFE1
   486                           
   487                           	psect	cstackBANK0
   488  000060                     __pcstackBANK0:
   489                           	opt stack 0
   490  000060                     PotSetpoint@set_point:
   491                           	opt stack 0
   492  000060                     cobs_encode@src_end_ptr:
   493                           	opt stack 0
   494  000060                     cobs_decode@src_end_ptr:
   495                           	opt stack 0
   496                           
   497                           ; 2 bytes @ 0x0
   498  000060                     	ds	2
   499  000062                     cobs_encode@src_byte:
   500                           	opt stack 0
   501  000062                     PotSetpoint@x:
   502                           	opt stack 0
   503  000062                     cobs_decode@dst_buf_end_ptr:
   504                           	opt stack 0
   505                           
   506                           ; 2 bytes @ 0x2
   507  000062                     	ds	1
   508  000063                     cobs_encode@dst_buf_end_ptr:
   509                           	opt stack 0
   510                           
   511                           ; 2 bytes @ 0x3
   512  000063                     	ds	1
   513  000064                     cobs_decode@src_byte:
   514                           	opt stack 0
   515  000064                     PotSetpoint@new_pos:
   516                           	opt stack 0
   517                           
   518                           ; 2 bytes @ 0x4
   519  000064                     	ds	1
   520  000065                     cobs_encode@search_len:
   521                           	opt stack 0
   522  000065                     cobs_decode@i:
   523                           	opt stack 0
   524                           
   525                           ; 1 bytes @ 0x5
   526  000065                     	ds	1
   527  000066                     cobs_encode@dst_code_write_ptr:
   528                           	opt stack 0
   529  000066                     cobs_decode@remaining_bytes:
   530                           	opt stack 0
   531                           
   532                           ; 2 bytes @ 0x6
   533  000066                     	ds	2
   534  000068                     cobs_encode@dst_write_ptr:
   535                           	opt stack 0
   536  000068                     cobs_decode@dst_write_ptr:
   537                           	opt stack 0
   538                           
   539                           ; 2 bytes @ 0x8
   540  000068                     	ds	2
   541  00006A                     cobs_decode@len_code:
   542                           	opt stack 0
   543  00006A                     cobs_encode@result:
   544                           	opt stack 0
   545                           
   546                           ; 3 bytes @ 0xA
   547  00006A                     	ds	1
   548  00006B                     cobs_decode@result:
   549                           	opt stack 0
   550                           
   551                           ; 3 bytes @ 0xB
   552  00006B                     	ds	2
   553  00006D                     sendData@ComandByte:
   554                           	opt stack 0
   555                           
   556                           ; 1 bytes @ 0xD
   557  00006D                     	ds	1
   558  00006E                     sendData@DataTable:
   559                           	opt stack 0
   560                           
   561                           ; 1 bytes @ 0xE
   562  00006E                     	ds	1
   563  00006F                     sendData@DataTableIndex:
   564                           	opt stack 0
   565                           
   566                           ; 1 bytes @ 0xF
   567  00006F                     	ds	1
   568  000070                     sendData@DTS:
   569                           	opt stack 0
   570                           
   571                           ; 2 bytes @ 0x10
   572  000070                     	ds	2
   573  000072                     sendData@lenth:
   574                           	opt stack 0
   575                           
   576                           ; 2 bytes @ 0x12
   577  000072                     	ds	2
   578  000074                     sendData@COBSArray:
   579                           	opt stack 0
   580                           
   581                           ; 30 bytes @ 0x14
   582  000074                     	ds	30
   583  000092                     sendData@SendArray:
   584                           	opt stack 0
   585                           
   586                           ; 30 bytes @ 0x32
   587  000092                     	ds	30
   588  0000B0                     sendData@whereToSend:
   589                           	opt stack 0
   590                           
   591                           ; 1 bytes @ 0x50
   592  0000B0                     	ds	1
   593  0000B1                     sendData@CS:
   594                           	opt stack 0
   595                           
   596                           ; 1 bytes @ 0x51
   597  0000B1                     	ds	1
   598  0000B2                     sendData@result:
   599                           	opt stack 0
   600                           
   601                           ; 3 bytes @ 0x52
   602  0000B2                     	ds	3
   603  0000B5                     sendData@j:
   604                           	opt stack 0
   605                           
   606                           ; 2 bytes @ 0x55
   607  0000B5                     	ds	2
   608  0000B7                     sendData@count:
   609                           	opt stack 0
   610                           
   611                           ; 2 bytes @ 0x57
   612  0000B7                     	ds	2
   613  0000B9                     sendData@i:
   614                           	opt stack 0
   615                           
   616                           ; 1 bytes @ 0x59
   617  0000B9                     	ds	1
   618  0000BA                     ComController@DTI:
   619                           	opt stack 0
   620                           
   621                           ; 2 bytes @ 0x5A
   622  0000BA                     	ds	2
   623  0000BC                     ComController@lenth:
   624                           	opt stack 0
   625                           
   626                           ; 2 bytes @ 0x5C
   627  0000BC                     	ds	2
   628  0000BE                     ??_ComController:
   629                           
   630                           ; 1 bytes @ 0x5E
   631  0000BE                     	ds	2
   632  0000C0                     ??_receiveData:
   633                           
   634                           ; 1 bytes @ 0x60
   635  0000C0                     	ds	5
   636  0000C5                     updateComms@DataGet:
   637                           	opt stack 0
   638                           
   639                           ; 2 bytes @ 0x65
   640  0000C5                     	ds	2
   641                           tblptru	equ	0xFF8
   642                           tblptrh	equ	0xFF7
   643                           tblptrl	equ	0xFF6
   644                           tablat	equ	0xFF5
   645                           postinc0	equ	0xFEE
   646                           wreg	equ	0xFE8
   647                           postdec1	equ	0xFE5
   648                           fsr1l	equ	0xFE1
   649                           
   650                           	psect	cstackCOMRAM
   651  000001                     __pcstackCOMRAM:
   652                           	opt stack 0
   653  000001                     ?_ADC_GetConversion:
   654                           	opt stack 0
   655  000001                     ?___wmul:
   656                           	opt stack 0
   657  000001                     ?i2_UART_buff_size:
   658                           	opt stack 0
   659  000001                     ?i2_UART_buff_modulo_inc:
   660                           	opt stack 0
   661  000001                     ___wmul@multiplier:
   662                           	opt stack 0
   663  000001                     i2SetPin595@Reg:
   664                           	opt stack 0
   665  000001                     i2UART_buff_size@_this:
   666                           	opt stack 0
   667  000001                     i2UART_buff_modulo_inc@value:
   668                           	opt stack 0
   669  000001                     i2Delay@wait:
   670                           	opt stack 0
   671                           
   672                           ; 4 bytes @ 0x0
   673  000001                     	ds	2
   674  000003                     ??_ADC_GetConversion:
   675  000003                     ___wmul@multiplicand:
   676                           	opt stack 0
   677  000003                     i2SetPin595@pin:
   678                           	opt stack 0
   679  000003                     i2UART_buff_modulo_inc@modulus:
   680                           	opt stack 0
   681                           
   682                           ; 2 bytes @ 0x2
   683  000003                     	ds	2
   684  000005                     ??i2_Delay:
   685  000005                     ADC_GetConversion@channel:
   686                           	opt stack 0
   687  000005                     ___wmul@product:
   688                           	opt stack 0
   689  000005                     i2SetPin595@value:
   690                           	opt stack 0
   691  000005                     i2UART_buff_modulo_inc@my_value:
   692                           	opt stack 0
   693                           
   694                           ; 2 bytes @ 0x4
   695  000005                     	ds	1
   696  000006                     i2Delay@i:
   697                           	opt stack 0
   698                           
   699                           ; 4 bytes @ 0x5
   700  000006                     	ds	1
   701  000007                     ??i2_SetPin595:
   702  000007                     FuseSystem@i_1226:
   703                           	opt stack 0
   704  000007                     i2UART_buff_put@_this:
   705                           	opt stack 0
   706  000007                     i2UART_buff_get@_this:
   707                           	opt stack 0
   708                           
   709                           ; 2 bytes @ 0x6
   710  000007                     	ds	2
   711  000009                     ??i2_UART_buff_get:
   712  000009                     i2UART_buff_put@c:
   713                           	opt stack 0
   714  000009                     FuseSystem@i:
   715                           	opt stack 0
   716                           
   717                           ; 2 bytes @ 0x8
   718  000009                     	ds	1
   719  00000A                     ??i2_UART_buff_put:
   720  00000A                     i2writeRegisters@val:
   721                           	opt stack 0
   722                           
   723                           ; 2 bytes @ 0x9
   724  00000A                     	ds	1
   725  00000B                     i2UART_buff_get@c:
   726                           	opt stack 0
   727                           
   728                           ; 1 bytes @ 0xA
   729  00000B                     	ds	1
   730  00000C                     EUSART1_Receive_ISR@data:
   731                           	opt stack 0
   732  00000C                     i2writeRegisters@i:
   733                           	opt stack 0
   734                           
   735                           ; 2 bytes @ 0xB
   736  00000C                     	ds	2
   737  00000E                     ReadCurrent@gather:
   738                           	opt stack 0
   739                           
   740                           ; 1 bytes @ 0xD
   741  00000E                     	ds	1
   742  00000F                     ??_INTERRUPT_InterruptManager:
   743                           
   744                           ; 1 bytes @ 0xE
   745  00000F                     	ds	14
   746  00001D                     ?_UART_buff_modulo_inc:
   747                           	opt stack 0
   748  00001D                     ?_UART_buff_size:
   749                           	opt stack 0
   750  00001D                     ?_cobs_encode:
   751                           	opt stack 0
   752  00001D                     ?_cobs_decode:
   753                           	opt stack 0
   754  00001D                     DATAEE_ReadByte@bAdd:
   755                           	opt stack 0
   756  00001D                     GetPDUFault@loc:
   757                           	opt stack 0
   758  00001D                     GetDataDict@DataTableIndex:
   759                           	opt stack 0
   760  00001D                     SetDataDict@DataTableIndex:
   761                           	opt stack 0
   762  00001D                     PWM4_LoadDutyValue@dutyValue:
   763                           	opt stack 0
   764  00001D                     SetPin595@Reg:
   765                           	opt stack 0
   766  00001D                     UART_buff_size@_this:
   767                           	opt stack 0
   768  00001D                     UART_buff_modulo_inc@value:
   769                           	opt stack 0
   770  00001D                     CRC8@data:
   771                           	opt stack 0
   772  00001D                     cobs_encode@dst_buf_ptr:
   773                           	opt stack 0
   774  00001D                     cobs_decode@dst_buf_ptr:
   775                           	opt stack 0
   776  00001D                     memset@p1:
   777                           	opt stack 0
   778  00001D                     Delay@wait:
   779                           	opt stack 0
   780                           
   781                           ; 4 bytes @ 0x1C
   782  00001D                     	ds	1
   783  00001E                     ??_FaultsCollector:
   784  00001E                     ??_ComputeStorageData:
   785  00001E                     GetDataDict@DataArray:
   786                           	opt stack 0
   787  00001E                     SetDataDict@DataArray:
   788                           	opt stack 0
   789                           
   790                           ; 2 bytes @ 0x1D
   791  00001E                     	ds	1
   792  00001F                     ??_PWM4_LoadDutyValue:
   793  00001F                     ?_Receive_available:
   794                           	opt stack 0
   795  00001F                     CRC8@len:
   796                           	opt stack 0
   797  00001F                     SetPin595@pin:
   798                           	opt stack 0
   799  00001F                     UART_buff_modulo_inc@modulus:
   800                           	opt stack 0
   801  00001F                     cobs_encode@dst_buf_len:
   802                           	opt stack 0
   803  00001F                     cobs_decode@dst_buf_len:
   804                           	opt stack 0
   805  00001F                     memset@c:
   806                           	opt stack 0
   807                           
   808                           ; 2 bytes @ 0x1E
   809  00001F                     	ds	1
   810  000020                     CRC8@sum:
   811                           	opt stack 0
   812  000020                     GetDataDict@numbofbytes:
   813                           	opt stack 0
   814  000020                     SetDataDict@numbofbytes:
   815                           	opt stack 0
   816  000020                     ComputeStorageData@i:
   817                           	opt stack 0
   818                           
   819                           ; 2 bytes @ 0x1F
   820  000020                     	ds	1
   821  000021                     ??_Delay:
   822  000021                     CRC8@extract:
   823                           	opt stack 0
   824  000021                     GetDataDict@Error:
   825                           	opt stack 0
   826  000021                     SetDataDict@Error:
   827                           	opt stack 0
   828  000021                     FaultsCollector@sendVal:
   829                           	opt stack 0
   830  000021                     SetPin595@value:
   831                           	opt stack 0
   832  000021                     UART_buff_modulo_inc@my_value:
   833                           	opt stack 0
   834  000021                     cobs_encode@src_ptr:
   835                           	opt stack 0
   836  000021                     cobs_decode@src_ptr:
   837                           	opt stack 0
   838  000021                     memset@n:
   839                           	opt stack 0
   840                           
   841                           ; 2 bytes @ 0x20
   842  000021                     	ds	1
   843  000022                     CRC8@tempI:
   844                           	opt stack 0
   845  000022                     GetDataDict@DataTable:
   846                           	opt stack 0
   847  000022                     SetDataDict@DataTable:
   848                           	opt stack 0
   849  000022                     Delay@i:
   850                           	opt stack 0
   851                           
   852                           ; 4 bytes @ 0x21
   853  000022                     	ds	1
   854  000023                     ??_SetPin595:
   855  000023                     CRC8@crc:
   856                           	opt stack 0
   857  000023                     GetDataDict@DataCount:
   858                           	opt stack 0
   859  000023                     SetDataDict@DataCount:
   860                           	opt stack 0
   861  000023                     FaultsCollector@i:
   862                           	opt stack 0
   863  000023                     UART_buff_put@_this:
   864                           	opt stack 0
   865  000023                     UART_buff_get@_this:
   866                           	opt stack 0
   867  000023                     cobs_encode@src_len:
   868                           	opt stack 0
   869  000023                     cobs_decode@src_len:
   870                           	opt stack 0
   871  000023                     memset@p:
   872                           	opt stack 0
   873                           
   874                           ; 2 bytes @ 0x22
   875  000023                     	ds	1
   876  000024                     GetDataDict@ReturnCounter:
   877                           	opt stack 0
   878  000024                     SetDataDict@ReturnCounter:
   879                           	opt stack 0
   880                           
   881                           ; 1 bytes @ 0x23
   882  000024                     	ds	1
   883  000025                     ??_cobs_encode:
   884  000025                     ??_cobs_decode:
   885  000025                     ??_UART_buff_get:
   886  000025                     UART_buff_put@c:
   887                           	opt stack 0
   888  000025                     UART_buff_init@_this:
   889                           	opt stack 0
   890  000025                     UART_buff_flush@_this:
   891                           	opt stack 0
   892                           
   893                           ; 2 bytes @ 0x24
   894  000025                     	ds	1
   895  000026                     ??_UART_buff_put:
   896  000026                     writeRegisters@val:
   897                           	opt stack 0
   898  000026                     PotSetpoint@new_point:
   899                           	opt stack 0
   900  000026                     PotClear@x:
   901                           	opt stack 0
   902                           
   903                           ; 2 bytes @ 0x25
   904  000026                     	ds	1
   905  000027                     UART_buff_get@c:
   906                           	opt stack 0
   907  000027                     EnableSlavePower@onof:
   908                           	opt stack 0
   909  000027                     UART_buff_flush@clearBuffer:
   910                           	opt stack 0
   911                           
   912                           ; 2 bytes @ 0x26
   913  000027                     	ds	1
   914  000028                     ??_PotSetpoint:
   915  000028                     Send_put@_data:
   916                           	opt stack 0
   917  000028                     writeRegisters@i:
   918                           	opt stack 0
   919                           
   920                           ; 2 bytes @ 0x27
   921  000028                     	ds	1
   922  000029                     ??_sendData:
   923  000029                     EnableSlavePower@slave:
   924                           	opt stack 0
   925                           
   926                           ; 1 bytes @ 0x28
   927  000029                     	ds	1
   928  00002A                     ??_processPowerRequest:
   929  00002A                     Clear595@i:
   930                           	opt stack 0
   931                           
   932                           ; 2 bytes @ 0x29
   933  00002A                     	ds	2
   934  00002C                     processPowerRequest@powerSet:
   935                           	opt stack 0
   936                           
   937                           ; 1 bytes @ 0x2B
   938  00002C                     	ds	1
   939  00002D                     tblptru	equ	0xFF8
   940                           tblptrh	equ	0xFF7
   941                           tblptrl	equ	0xFF6
   942                           tablat	equ	0xFF5
   943                           postinc0	equ	0xFEE
   944                           wreg	equ	0xFE8
   945                           postdec1	equ	0xFE5
   946                           fsr1l	equ	0xFE1
   947                           
   948                           ; 1 bytes @ 0x2C
   949 ;;
   950 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   951 ;;
   952 ;; *************** function _main *****************
   953 ;; Defined at:
   954 ;;		line 11 in file "main.c"
   955 ;; Parameters:    Size  Location     Type
   956 ;;		None
   957 ;; Auto vars:     Size  Location     Type
   958 ;;  j               2   22[BANK1 ] int 
   959 ;;  i               2   20[BANK1 ] int 
   960 ;;  UP              1   24[BANK1 ] unsigned char 
   961 ;; Return value:  Size  Location     Type
   962 ;;                  1    wreg      void 
   963 ;; Registers used:
   964 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   965 ;; Tracked objects:
   966 ;;		On entry : 0/0
   967 ;;		On exit  : 0/0
   968 ;;		Unchanged: 0/0
   969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   970 ;;      Params:         0       0       0       0       0       0       0
   971 ;;      Locals:         0       0       5       0       0       0       0
   972 ;;      Temps:          0       0       0       0       0       0       0
   973 ;;      Totals:         0       0       5       0       0       0       0
   974 ;;Total ram usage:        5 bytes
   975 ;; Hardware stack levels required when called:   13
   976 ;; This function calls:
   977 ;;		_ComputeStorageData
   978 ;;		_CoolingCheck
   979 ;;		_CoolingStart
   980 ;;		_CoolingStop
   981 ;;		_PDUStartup
   982 ;;		_PWM4_LoadDutyValue
   983 ;;		_PotSetpoint
   984 ;;		_SYSTEM_Initialize
   985 ;;		_updateComms
   986 ;; This function is called by:
   987 ;;		Startup code after reset
   988 ;; This function uses a non-reentrant model
   989 ;;
   990                           
   991                           	psect	text0
   992  001868                     __ptext0:
   993                           	opt stack 0
   994  001868                     _main:
   995                           	opt stack 18
   996                           
   997                           ;main.c: 13: SYSTEM_Initialize();
   998                           
   999                           ;incstack = 0
  1000  001868  EC45  F010         	call	_SYSTEM_Initialize	;wreg free
  1001                           
  1002                           ;main.c: 14: PDUStartup();
  1003  00186C  ECA1  F00D         	call	_PDUStartup	;wreg free
  1004                           
  1005                           ;main.c: 33: (INTCONbits.GIE = 1);
  1006  001870  8EF2               	bsf	intcon,7,c	;volatile
  1007                           
  1008                           ;main.c: 36: (INTCONbits.PEIE = 1);
  1009  001872  8CF2               	bsf	intcon,6,c	;volatile
  1010                           
  1011                           ;main.c: 56: PotSetpoint(0);
  1012  001874  0E00               	movlw	0
  1013  001876  6E27               	movwf	PotSetpoint@new_point+1,c
  1014  001878  0E00               	movlw	0
  1015  00187A  6E26               	movwf	PotSetpoint@new_point,c
  1016  00187C  ECD0  F008         	call	_PotSetpoint	;wreg free
  1017                           
  1018                           ;main.c: 57: PWM4_LoadDutyValue(0);
  1019  001880  0E00               	movlw	0
  1020  001882  6E1E               	movwf	PWM4_LoadDutyValue@dutyValue+1,c
  1021  001884  0E00               	movlw	0
  1022  001886  6E1D               	movwf	PWM4_LoadDutyValue@dutyValue,c
  1023  001888  ECAB  F00F         	call	_PWM4_LoadDutyValue	;wreg free
  1024                           
  1025                           ;main.c: 58: LATCbits.LATC5 = 0;
  1026  00188C  9A8B               	bcf	3979,5,c	;volatile
  1027                           
  1028                           ;main.c: 59: int i = 0;
  1029  00188E  0E00               	movlw	0
  1030  001890  0101               	movlb	1	; () banked
  1031  001892  6FF7               	movwf	(main@i+1)& (0+255),b
  1032  001894  0E00               	movlw	0
  1033  001896  6FF6               	movwf	main@i& (0+255),b
  1034                           
  1035                           ; BSR set to: 1
  1036                           ;main.c: 60: bool UP = 0;
  1037  001898  0E00               	movlw	0
  1038  00189A  0101               	movlb	1	; () banked
  1039  00189C  6FFA               	movwf	main@UP& (0+255),b
  1040                           
  1041                           ;main.c: 61: ComputeStorageData();
  1042  00189E  EC38  F00A         	call	_ComputeStorageData	;wreg free
  1043                           
  1044                           ;main.c: 63: int j = 1;
  1045  0018A2  0E00               	movlw	0
  1046  0018A4  0101               	movlb	1	; () banked
  1047  0018A6  6FF9               	movwf	(main@j+1)& (0+255),b
  1048  0018A8  0E01               	movlw	1
  1049  0018AA  6FF8               	movwf	main@j& (0+255),b
  1050  0018AC                     l4464:
  1051                           
  1052                           ;main.c: 65: updateComms();
  1053  0018AC  EC1D  F00F         	call	_updateComms	;wreg free
  1054                           
  1055                           ;main.c: 66: if(CoolingCheck() && UP == 0){
  1056  0018B0  EC20  F011         	call	_CoolingCheck	;wreg free
  1057  0018B4  0900               	iorlw	0
  1058  0018B6  B4D8               	btfsc	status,2,c
  1059  0018B8  D00A               	goto	l4474
  1060  0018BA  0101               	movlb	1	; () banked
  1061  0018BC  51FA               	movf	main@UP& (0+255),w,b
  1062  0018BE  0101               	movlb	1	; () banked
  1063  0018C0  A4D8               	btfss	status,2,c
  1064  0018C2  D005               	goto	l4474
  1065                           
  1066                           ; BSR set to: 1
  1067                           ;main.c: 67: UP = 1;
  1068  0018C4  0E01               	movlw	1
  1069  0018C6  0101               	movlb	1	; () banked
  1070  0018C8  6FFA               	movwf	main@UP& (0+255),b
  1071                           
  1072                           ; BSR set to: 1
  1073                           ;main.c: 68: CoolingStart();
  1074  0018CA  EC77  F010         	call	_CoolingStart	;wreg free
  1075  0018CE                     l4474:
  1076                           
  1077                           ;main.c: 69: }
  1078                           ;main.c: 70: if(!CoolingCheck() && UP == 1){
  1079  0018CE  EC20  F011         	call	_CoolingCheck	;wreg free
  1080  0018D2  0900               	iorlw	0
  1081  0018D4  A4D8               	btfss	status,2,c
  1082  0018D6  D7EA               	goto	l4464
  1083  0018D8  0101               	movlb	1	; () banked
  1084  0018DA  05FA               	decf	main@UP& (0+255),w,b
  1085  0018DC  A4D8               	btfss	status,2,c
  1086  0018DE  D7E6               	goto	l4464
  1087                           
  1088                           ; BSR set to: 1
  1089                           ;main.c: 71: UP = 0;
  1090  0018E0  0E00               	movlw	0
  1091  0018E2  0101               	movlb	1	; () banked
  1092  0018E4  6FFA               	movwf	main@UP& (0+255),b
  1093                           
  1094                           ; BSR set to: 1
  1095                           ;main.c: 72: CoolingStop();
  1096  0018E6  ECF6  F010         	call	_CoolingStop	;wreg free
  1097  0018EA  D7E0               	goto	l4464
  1098  0018EC                     __end_of_main:
  1099                           	opt stack 0
  1100                           tblptru	equ	0xFF8
  1101                           tblptrh	equ	0xFF7
  1102                           tblptrl	equ	0xFF6
  1103                           tablat	equ	0xFF5
  1104                           intcon	equ	0xFF2
  1105                           postinc0	equ	0xFEE
  1106                           wreg	equ	0xFE8
  1107                           postdec1	equ	0xFE5
  1108                           fsr1l	equ	0xFE1
  1109                           status	equ	0xFD8
  1110                           
  1111 ;; *************** function _updateComms *****************
  1112 ;; Defined at:
  1113 ;;		line 18 in file "Communications.c"
  1114 ;; Parameters:    Size  Location     Type
  1115 ;;		None
  1116 ;; Auto vars:     Size  Location     Type
  1117 ;;  DataGet         2  101[BANK0 ] unsigned char [2]
  1118 ;; Return value:  Size  Location     Type
  1119 ;;                  1    wreg      void 
  1120 ;; Registers used:
  1121 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1122 ;; Tracked objects:
  1123 ;;		On entry : 0/0
  1124 ;;		On exit  : 0/0
  1125 ;;		Unchanged: 0/0
  1126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1127 ;;      Params:         0       0       0       0       0       0       0
  1128 ;;      Locals:         0       2       0       0       0       0       0
  1129 ;;      Temps:          0       0       0       0       0       0       0
  1130 ;;      Totals:         0       2       0       0       0       0       0
  1131 ;;Total ram usage:        2 bytes
  1132 ;; Hardware stack levels used:    1
  1133 ;; Hardware stack levels required when called:   12
  1134 ;; This function calls:
  1135 ;;		_FaultsCollector
  1136 ;;		_GetDataDict
  1137 ;;		_SetDataDict
  1138 ;;		_processPowerRequest
  1139 ;;		_receiveData
  1140 ;; This function is called by:
  1141 ;;		_main
  1142 ;; This function uses a non-reentrant model
  1143 ;;
  1144                           
  1145                           	psect	text1
  1146  001E3A                     __ptext1:
  1147                           	opt stack 0
  1148  001E3A                     _updateComms:
  1149                           	opt stack 18
  1150                           
  1151                           ;Communications.c: 19: if (receiveData()){
  1152                           
  1153                           ;incstack = 0
  1154  001E3A  EC45  F008         	call	_receiveData	;wreg free
  1155  001E3E  0900               	iorlw	0
  1156  001E40  B4D8               	btfsc	status,2,c
  1157  001E42  0012               	return	
  1158                           
  1159                           ;Communications.c: 20: unsigned char DataGet[2];
  1160                           ;Communications.c: 21: GetDataDict(4, 1, DataGet, 1);
  1161  001E44  0E01               	movlw	1
  1162  001E46  6E1D               	movwf	GetDataDict@DataTableIndex,c
  1163  001E48  0EC5               	movlw	low updateComms@DataGet
  1164  001E4A  6E1E               	movwf	GetDataDict@DataArray,c
  1165  001E4C  0E00               	movlw	high updateComms@DataGet
  1166  001E4E  6E1F               	movwf	GetDataDict@DataArray+1,c
  1167  001E50  0E01               	movlw	1
  1168  001E52  6E20               	movwf	GetDataDict@numbofbytes,c
  1169  001E54  0E04               	movlw	4
  1170  001E56  EC56  F00B         	call	_GetDataDict
  1171                           
  1172                           ;Communications.c: 22: processPowerRequest(DataGet[0]);
  1173  001E5A  0100               	movlb	0	; () banked
  1174  001E5C  51C5               	movf	updateComms@DataGet& (0+255),w,b
  1175  001E5E  EC4E  F009         	call	_processPowerRequest
  1176                           
  1177                           ;Communications.c: 23: DataGet[0] = FaultsCollector();
  1178  001E62  EC32  F00E         	call	_FaultsCollector	;wreg free
  1179  001E66  0100               	movlb	0	; () banked
  1180  001E68  6FC5               	movwf	updateComms@DataGet& (0+255),b
  1181                           
  1182                           ; BSR set to: 0
  1183                           ;Communications.c: 24: SetDataDict(4, 2, DataGet, 1);
  1184  001E6A  0E02               	movlw	2
  1185  001E6C  6E1D               	movwf	SetDataDict@DataTableIndex,c
  1186  001E6E  0EC5               	movlw	low updateComms@DataGet
  1187  001E70  6E1E               	movwf	SetDataDict@DataArray,c
  1188  001E72  0E00               	movlw	high updateComms@DataGet
  1189  001E74  6E1F               	movwf	SetDataDict@DataArray+1,c
  1190  001E76  0E01               	movlw	1
  1191  001E78  6E20               	movwf	SetDataDict@numbofbytes,c
  1192  001E7A  0E04               	movlw	4
  1193  001E7C  EC0A  F00B         	call	_SetDataDict
  1194  001E80  0012               	return	
  1195  001E82                     __end_of_updateComms:
  1196                           	opt stack 0
  1197                           tblptru	equ	0xFF8
  1198                           tblptrh	equ	0xFF7
  1199                           tblptrl	equ	0xFF6
  1200                           tablat	equ	0xFF5
  1201                           intcon	equ	0xFF2
  1202                           postinc0	equ	0xFEE
  1203                           wreg	equ	0xFE8
  1204                           postdec1	equ	0xFE5
  1205                           fsr1l	equ	0xFE1
  1206                           status	equ	0xFD8
  1207                           
  1208 ;; *************** function _receiveData *****************
  1209 ;; Defined at:
  1210 ;;		line 85 in file "CarCom.c"
  1211 ;; Parameters:    Size  Location     Type
  1212 ;;		None
  1213 ;; Auto vars:     Size  Location     Type
  1214 ;;  result          3   17[BANK1 ] struct .
  1215 ;;  i               2   14[BANK1 ] int 
  1216 ;;  Data            1   16[BANK1 ] unsigned char 
  1217 ;;  CS              1   13[BANK1 ] unsigned char 
  1218 ;; Return value:  Size  Location     Type
  1219 ;;                  1    wreg      unsigned char 
  1220 ;; Registers used:
  1221 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1222 ;; Tracked objects:
  1223 ;;		On entry : 0/0
  1224 ;;		On exit  : 0/0
  1225 ;;		Unchanged: 0/0
  1226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1227 ;;      Params:         0       0       0       0       0       0       0
  1228 ;;      Locals:         0       0       7       0       0       0       0
  1229 ;;      Temps:          0       5       0       0       0       0       0
  1230 ;;      Totals:         0       5       7       0       0       0       0
  1231 ;;Total ram usage:       12 bytes
  1232 ;; Hardware stack levels used:    1
  1233 ;; Hardware stack levels required when called:   11
  1234 ;; This function calls:
  1235 ;;		_CRC8
  1236 ;;		_ClearBuffer
  1237 ;;		_ComController
  1238 ;;		_Receive_available
  1239 ;;		_Receive_get
  1240 ;;		_cobs_decode
  1241 ;; This function is called by:
  1242 ;;		_updateComms
  1243 ;; This function uses a non-reentrant model
  1244 ;;
  1245                           
  1246                           	psect	text2
  1247  00108A                     __ptext2:
  1248                           	opt stack 0
  1249  00108A                     _receiveData:
  1250                           	opt stack 18
  1251                           
  1252                           ;CarCom.c: 86: if(Receive_available()>5){
  1253                           
  1254                           ;incstack = 0
  1255  00108A  ECA1  F010         	call	_Receive_available	;wreg free
  1256  00108E  BE20               	btfsc	?_Receive_available+1,7,c
  1257  001090  D085               	goto	l4276
  1258  001092  5020               	movf	?_Receive_available+1,w,c
  1259  001094  E104               	bnz	u2740
  1260  001096  0E06               	movlw	6
  1261  001098  5C1F               	subwf	?_Receive_available,w,c
  1262  00109A  A0D8               	btfss	status,0,c
  1263  00109C  D07F               	goto	l4276
  1264  00109E                     u2740:
  1265                           
  1266                           ;CarCom.c: 87: if(Receive_get() == 5){
  1267  00109E  ECFF  F010         	call	_Receive_get	;wreg free
  1268  0010A2  0A05               	xorlw	5
  1269  0010A4  A4D8               	btfss	status,2,c
  1270  0010A6  D07A               	goto	l4276
  1271                           
  1272                           ;CarCom.c: 88: int i = 0;
  1273  0010A8  0E00               	movlw	0
  1274  0010AA  0101               	movlb	1	; () banked
  1275  0010AC  6FF1               	movwf	(receiveData@i+1)& (0+255),b
  1276  0010AE  0E00               	movlw	0
  1277  0010B0  6FF0               	movwf	receiveData@i& (0+255),b
  1278                           
  1279                           ;CarCom.c: 89: unsigned char Data = 0;
  1280  0010B2  0E00               	movlw	0
  1281  0010B4  0101               	movlb	1	; () banked
  1282  0010B6  6FF2               	movwf	receiveData@Data& (0+255),b
  1283  0010B8                     l4256:
  1284                           
  1285                           ; BSR set to: 1
  1286                           ;CarCom.c: 91: Data = Receive_get();
  1287  0010B8  ECFF  F010         	call	_Receive_get	;wreg free
  1288  0010BC  0101               	movlb	1	; () banked
  1289  0010BE  6FF2               	movwf	receiveData@Data& (0+255),b
  1290                           
  1291                           ; BSR set to: 1
  1292                           ;CarCom.c: 92: ReciveArray[i] = Data;
  1293  0010C0  0EC4               	movlw	low _ReciveArray
  1294  0010C2  0101               	movlb	1	; () banked
  1295  0010C4  25F0               	addwf	receiveData@i& (0+255),w,b
  1296  0010C6  6ED9               	movwf	fsr2l,c
  1297  0010C8  0E01               	movlw	high _ReciveArray
  1298  0010CA  0101               	movlb	1	; () banked
  1299  0010CC  21F1               	addwfc	(receiveData@i+1)& (0+255),w,b
  1300  0010CE  6EDA               	movwf	fsr2h,c
  1301  0010D0  C1F2  FFDF         	movff	receiveData@Data,indf2
  1302                           
  1303                           ; BSR set to: 1
  1304                           ;CarCom.c: 93: _delay((unsigned long)((200)*(8000000/4000000.0)));
  1305  0010D4  0E85               	movlw	133
  1306  0010D6                     u3017:
  1307  0010D6  2EE8               	decfsz	wreg,f,c
  1308  0010D8  D7FE               	bra	u3017
  1309  0010DA  F000               	nop	
  1310                           
  1311                           ;CarCom.c: 95: i++;
  1312  0010DC  0101               	movlb	1	; () banked
  1313  0010DE  4BF0               	infsnz	receiveData@i& (0+255),f,b
  1314  0010E0  2BF1               	incf	(receiveData@i+1)& (0+255),f,b
  1315                           
  1316                           ; BSR set to: 1
  1317                           ;CarCom.c: 96: }while(Data != 0x00);
  1318  0010E2  0101               	movlb	1	; () banked
  1319  0010E4  51F2               	movf	receiveData@Data& (0+255),w,b
  1320  0010E6  0101               	movlb	1	; () banked
  1321  0010E8  A4D8               	btfss	status,2,c
  1322  0010EA  D7E6               	goto	l4256
  1323                           
  1324                           ; BSR set to: 1
  1325                           ;CarCom.c: 100: ClearBuffer();
  1326                           
  1327                           ; BSR set to: 1
  1328  0010EC  ECB7  F010         	call	_ClearBuffer	;wreg free
  1329                           
  1330                           ;CarCom.c: 102: cobs_decode_result result;
  1331                           ;CarCom.c: 104: result = cobs_decode(ProcessArray, sizeof(ProcessArray), ReciveArray, i)
      +                          ;
  1332  0010F0  0EA6               	movlw	low _ProcessArray
  1333  0010F2  6E1D               	movwf	cobs_decode@dst_buf_ptr,c
  1334  0010F4  0E01               	movlw	high _ProcessArray
  1335  0010F6  6E1E               	movwf	cobs_decode@dst_buf_ptr+1,c
  1336  0010F8  0E00               	movlw	0
  1337  0010FA  6E20               	movwf	cobs_decode@dst_buf_len+1,c
  1338  0010FC  0E1E               	movlw	30
  1339  0010FE  6E1F               	movwf	cobs_decode@dst_buf_len,c
  1340  001100  0EC4               	movlw	low _ReciveArray
  1341  001102  6E21               	movwf	cobs_decode@src_ptr,c
  1342  001104  0E01               	movlw	high _ReciveArray
  1343  001106  6E22               	movwf	cobs_decode@src_ptr+1,c
  1344  001108  C1F0  F023         	movff	receiveData@i,cobs_decode@src_len
  1345  00110C  C1F1  F024         	movff	receiveData@i+1,cobs_decode@src_len+1
  1346  001110  EC80  F005         	call	_cobs_decode	;wreg free
  1347  001114  C01D  F1F3         	movff	?_cobs_decode,receiveData@result
  1348  001118  C01E  F1F4         	movff	?_cobs_decode+1,receiveData@result+1
  1349  00111C  C01F  F1F5         	movff	?_cobs_decode+2,receiveData@result+2
  1350                           
  1351                           ;CarCom.c: 106: unsigned char CS = CRC8(ProcessArray, result.out_len-2);
  1352  001120  0EA6               	movlw	low _ProcessArray
  1353  001122  6E1D               	movwf	CRC8@data,c
  1354  001124  0E01               	movlw	high _ProcessArray
  1355  001126  6E1E               	movwf	CRC8@data+1,c
  1356  001128  0101               	movlb	1	; () banked
  1357  00112A  51F3               	movf	receiveData@result& (0+255),w,b
  1358  00112C  0FFE               	addlw	254
  1359  00112E  6E1F               	movwf	CRC8@len,c
  1360  001130  ECAE  F00E         	call	_CRC8	;wreg free
  1361  001134  0101               	movlb	1	; () banked
  1362  001136  6FEF               	movwf	receiveData@CS& (0+255),b
  1363                           
  1364                           ; BSR set to: 1
  1365                           ;CarCom.c: 108: if(ProcessArray[result.out_len-2] == CS){
  1366  001138  0EFE               	movlw	254
  1367  00113A  0100               	movlb	0	; () banked
  1368  00113C  6FC0               	movwf	??_receiveData& (0+255),b
  1369  00113E  0EFF               	movlw	255
  1370  001140  0100               	movlb	0	; () banked
  1371  001142  6FC1               	movwf	(??_receiveData+1)& (0+255),b
  1372  001144  C1F3  F0C2         	movff	receiveData@result,??_receiveData+2
  1373  001148  C1F4  F0C3         	movff	receiveData@result+1,??_receiveData+3
  1374  00114C  0100               	movlb	0	; () banked
  1375  00114E  51C0               	movf	??_receiveData& (0+255),w,b
  1376  001150  0100               	movlb	0	; () banked
  1377  001152  27C2               	addwf	(??_receiveData+2)& (0+255),f,b
  1378  001154  0100               	movlb	0	; () banked
  1379  001156  51C1               	movf	(??_receiveData+1)& (0+255),w,b
  1380  001158  0100               	movlb	0	; () banked
  1381  00115A  23C3               	addwfc	(??_receiveData+3)& (0+255),f,b
  1382  00115C  0EA6               	movlw	low _ProcessArray
  1383  00115E  0100               	movlb	0	; () banked
  1384  001160  25C2               	addwf	(??_receiveData+2)& (0+255),w,b
  1385  001162  6ED9               	movwf	fsr2l,c
  1386  001164  0E01               	movlw	high _ProcessArray
  1387  001166  0100               	movlb	0	; () banked
  1388  001168  21C3               	addwfc	(??_receiveData+3)& (0+255),w,b
  1389  00116A  6EDA               	movwf	fsr2h,c
  1390  00116C  0101               	movlb	1	; () banked
  1391  00116E  51EF               	movf	receiveData@CS& (0+255),w,b
  1392  001170  18DE               	xorwf	postinc2,w,c
  1393  001172  A4D8               	btfss	status,2,c
  1394  001174  D013               	goto	l4276
  1395                           
  1396                           ; BSR set to: 1
  1397                           
  1398                           ;CarCom.c: 109: do { LATA3 = ~LATA3; } while(0);
  1399  001176  B689               	btfsc	3977,3,c	;volatile
  1400  001178  D002               	goto	u2780
  1401  00117A  8689               	bsf	3977,3,c	;volatile
  1402  00117C  D001               	goto	l4270
  1403  00117E                     u2780:
  1404  00117E  9689               	bcf	3977,3,c	;volatile
  1405  001180                     l4270:
  1406                           
  1407                           ;CarCom.c: 110: ComController(ProcessArray,result.out_len);
  1408  001180  0EA6               	movlw	low _ProcessArray
  1409  001182  0100               	movlb	0	; () banked
  1410  001184  6FBA               	movwf	ComController@DTI& (0+255),b
  1411  001186  0E01               	movlw	high _ProcessArray
  1412  001188  0100               	movlb	0	; () banked
  1413  00118A  6FBB               	movwf	(ComController@DTI+1)& (0+255),b
  1414  00118C  C1F3  F0BC         	movff	receiveData@result,ComController@lenth
  1415  001190  C1F4  F0BD         	movff	receiveData@result+1,ComController@lenth+1
  1416  001194  ECA0  F003         	call	_ComController	;wreg free
  1417                           
  1418                           ;CarCom.c: 111: return 1;
  1419  001198  0E01               	movlw	1
  1420  00119A  0012               	return	
  1421  00119C                     l4276:
  1422                           
  1423                           ;CarCom.c: 120: }
  1424                           ;CarCom.c: 122: return 0;
  1425  00119C  0E00               	movlw	0
  1426  00119E  0012               	return	
  1427  0011A0                     __end_of_receiveData:
  1428                           	opt stack 0
  1429                           tblptru	equ	0xFF8
  1430                           tblptrh	equ	0xFF7
  1431                           tblptrl	equ	0xFF6
  1432                           tablat	equ	0xFF5
  1433                           intcon	equ	0xFF2
  1434                           postinc0	equ	0xFEE
  1435                           wreg	equ	0xFE8
  1436                           postdec1	equ	0xFE5
  1437                           fsr1l	equ	0xFE1
  1438                           indf2	equ	0xFDF
  1439                           postinc2	equ	0xFDE
  1440                           fsr2h	equ	0xFDA
  1441                           fsr2l	equ	0xFD9
  1442                           status	equ	0xFD8
  1443                           
  1444 ;; *************** function _cobs_decode *****************
  1445 ;; Defined at:
  1446 ;;		line 115 in file "COBS.c"
  1447 ;; Parameters:    Size  Location     Type
  1448 ;;  dst_buf_ptr     2   28[COMRAM] PTR unsigned char 
  1449 ;;		 -> ProcessArray(30), 
  1450 ;;  dst_buf_len     2   30[COMRAM] unsigned int 
  1451 ;;  src_ptr         2   32[COMRAM] PTR const unsigned char 
  1452 ;;		 -> ReciveArray(30), 
  1453 ;;  src_len         2   34[COMRAM] unsigned int 
  1454 ;; Auto vars:     Size  Location     Type
  1455 ;;  result          3   11[BANK0 ] struct .
  1456 ;;  dst_write_pt    2    8[BANK0 ] PTR unsigned char 
  1457 ;;		 -> ProcessArray(30), 
  1458 ;;  remaining_by    2    6[BANK0 ] unsigned int 
  1459 ;;  dst_buf_end_    2    2[BANK0 ] PTR unsigned char 
  1460 ;;		 -> ProcessArray(30), 
  1461 ;;  src_end_ptr     2    0[BANK0 ] PTR const unsigned char 
  1462 ;;		 -> ReciveArray(30), 
  1463 ;;  len_code        1   10[BANK0 ] unsigned char 
  1464 ;;  i               1    5[BANK0 ] unsigned char 
  1465 ;;  src_byte        1    4[BANK0 ] unsigned char 
  1466 ;; Return value:  Size  Location     Type
  1467 ;;                  3   28[COMRAM] struct .
  1468 ;; Registers used:
  1469 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1470 ;; Tracked objects:
  1471 ;;		On entry : 0/0
  1472 ;;		On exit  : 0/0
  1473 ;;		Unchanged: 0/0
  1474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1475 ;;      Params:         8       0       0       0       0       0       0
  1476 ;;      Locals:         0      14       0       0       0       0       0
  1477 ;;      Temps:          2       0       0       0       0       0       0
  1478 ;;      Totals:        10      14       0       0       0       0       0
  1479 ;;Total ram usage:       24 bytes
  1480 ;; Hardware stack levels used:    1
  1481 ;; Hardware stack levels required when called:    6
  1482 ;; This function calls:
  1483 ;;		Nothing
  1484 ;; This function is called by:
  1485 ;;		_receiveData
  1486 ;; This function uses a non-reentrant model
  1487 ;;
  1488                           
  1489                           	psect	text3
  1490  000B00                     __ptext3:
  1491                           	opt stack 0
  1492  000B00                     _cobs_decode:
  1493                           	opt stack 22
  1494                           
  1495                           ;COBS.c: 117: cobs_decode_result result = { 0, COBS_DECODE_OK };
  1496                           
  1497                           ;incstack = 0
  1498  000B00  C030  F06B         	movff	cobs_decode@F192,cobs_decode@result
  1499  000B04  C031  F06C         	movff	cobs_decode@F192+1,cobs_decode@result+1
  1500  000B08  C032  F06D         	movff	cobs_decode@F192+2,cobs_decode@result+2
  1501                           
  1502                           ;COBS.c: 118: const uint8_t * src_end_ptr = src_ptr + src_len;
  1503  000B0C  5023               	movf	cobs_decode@src_len,w,c
  1504  000B0E  2421               	addwf	cobs_decode@src_ptr,w,c
  1505  000B10  0100               	movlb	0	; () banked
  1506  000B12  6F60               	movwf	cobs_decode@src_end_ptr& (0+255),b
  1507  000B14  5024               	movf	cobs_decode@src_len+1,w,c
  1508  000B16  2022               	addwfc	cobs_decode@src_ptr+1,w,c
  1509  000B18  0100               	movlb	0	; () banked
  1510  000B1A  6F61               	movwf	(cobs_decode@src_end_ptr+1)& (0+255),b
  1511                           
  1512                           ;COBS.c: 119: uint8_t * dst_buf_end_ptr = dst_buf_ptr + dst_buf_len;
  1513  000B1C  501F               	movf	cobs_decode@dst_buf_len,w,c
  1514  000B1E  241D               	addwf	cobs_decode@dst_buf_ptr,w,c
  1515  000B20  0100               	movlb	0	; () banked
  1516  000B22  6F62               	movwf	cobs_decode@dst_buf_end_ptr& (0+255),b
  1517  000B24  5020               	movf	cobs_decode@dst_buf_len+1,w,c
  1518  000B26  201E               	addwfc	cobs_decode@dst_buf_ptr+1,w,c
  1519  000B28  0100               	movlb	0	; () banked
  1520  000B2A  6F63               	movwf	(cobs_decode@dst_buf_end_ptr+1)& (0+255),b
  1521                           
  1522                           ;COBS.c: 120: uint8_t * dst_write_ptr = dst_buf_ptr;
  1523  000B2C  C01D  F068         	movff	cobs_decode@dst_buf_ptr,cobs_decode@dst_write_ptr
  1524  000B30  C01E  F069         	movff	cobs_decode@dst_buf_ptr+1,cobs_decode@dst_write_ptr+1
  1525                           
  1526                           ;COBS.c: 121: size_t remaining_bytes;
  1527                           ;COBS.c: 122: uint8_t src_byte;
  1528                           ;COBS.c: 123: uint8_t i;
  1529                           ;COBS.c: 124: uint8_t len_code;
  1530                           ;COBS.c: 128: if ((dst_buf_ptr == (0)) || (src_ptr == (0)))
  1531  000B34  501D               	movf	cobs_decode@dst_buf_ptr,w,c
  1532  000B36  101E               	iorwf	cobs_decode@dst_buf_ptr+1,w,c
  1533  000B38  B4D8               	btfsc	status,2,c
  1534  000B3A  D004               	goto	l4070
  1535                           
  1536                           ; BSR set to: 0
  1537  000B3C  5021               	movf	cobs_decode@src_ptr,w,c
  1538  000B3E  1022               	iorwf	cobs_decode@src_ptr+1,w,c
  1539  000B40  A4D8               	btfss	status,2,c
  1540  000B42  D00A               	goto	l4076
  1541  000B44                     l4070:
  1542                           
  1543                           ; BSR set to: 0
  1544                           ;COBS.c: 129: {
  1545                           ;COBS.c: 130: result.status = COBS_DECODE_NULL_POINTER;
  1546  000B44  0E01               	movlw	1
  1547  000B46  0100               	movlb	0	; () banked
  1548  000B48  6F6D               	movwf	(cobs_decode@result+2)& (0+255),b
  1549                           
  1550                           ; BSR set to: 0
  1551                           ;COBS.c: 131: return result;
  1552  000B4A  C06B  F01D         	movff	cobs_decode@result,?_cobs_decode
  1553  000B4E  C06C  F01E         	movff	cobs_decode@result+1,?_cobs_decode+1
  1554  000B52  C06D  F01F         	movff	cobs_decode@result+2,?_cobs_decode+2
  1555                           
  1556                           ; BSR set to: 0
  1557  000B56  0012               	return	
  1558  000B58                     l4076:
  1559                           
  1560                           ; BSR set to: 0
  1561                           ;COBS.c: 132: }
  1562                           ;COBS.c: 134: if (src_len != 0)
  1563  000B58  5023               	movf	cobs_decode@src_len,w,c
  1564  000B5A  1024               	iorwf	cobs_decode@src_len+1,w,c
  1565  000B5C  B4D8               	btfsc	status,2,c
  1566  000B5E  D096               	goto	l4140
  1567  000B60                     l4078:
  1568                           
  1569                           ; BSR set to: 0
  1570                           ;COBS.c: 137: {
  1571                           ;COBS.c: 138: len_code = *src_ptr++;
  1572  000B60  C021  FFD9         	movff	cobs_decode@src_ptr,fsr2l
  1573  000B64  C022  FFDA         	movff	cobs_decode@src_ptr+1,fsr2h
  1574  000B68  50DF               	movf	indf2,w,c
  1575  000B6A  0100               	movlb	0	; () banked
  1576  000B6C  6F6A               	movwf	cobs_decode@len_code& (0+255),b
  1577                           
  1578                           ; BSR set to: 0
  1579  000B6E  4A21               	infsnz	cobs_decode@src_ptr,f,c
  1580  000B70  2A22               	incf	cobs_decode@src_ptr+1,f,c
  1581                           
  1582                           ; BSR set to: 0
  1583                           ;COBS.c: 139: if (len_code == 0)
  1584  000B72  0100               	movlb	0	; () banked
  1585  000B74  516A               	movf	cobs_decode@len_code& (0+255),w,b
  1586  000B76  0100               	movlb	0	; () banked
  1587  000B78  A4D8               	btfss	status,2,c
  1588  000B7A  D003               	goto	l4086
  1589                           
  1590                           ; BSR set to: 0
  1591                           ;COBS.c: 140: {
  1592                           ;COBS.c: 141: result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
  1593  000B7C  0100               	movlb	0	; () banked
  1594  000B7E  856D               	bsf	(cobs_decode@result+2)& (0+255),2,b
  1595                           
  1596                           ;COBS.c: 142: break;
  1597  000B80  D085               	goto	l4140
  1598  000B82                     l4086:
  1599                           
  1600                           ; BSR set to: 0
  1601                           ;COBS.c: 143: }
  1602                           ;COBS.c: 144: len_code--;
  1603  000B82  0100               	movlb	0	; () banked
  1604  000B84  076A               	decf	cobs_decode@len_code& (0+255),f,b
  1605                           
  1606                           ; BSR set to: 0
  1607                           ;COBS.c: 147: remaining_bytes = src_end_ptr - src_ptr;
  1608  000B86  C021  F025         	movff	cobs_decode@src_ptr,??_cobs_decode
  1609  000B8A  C022  F026         	movff	cobs_decode@src_ptr+1,??_cobs_decode+1
  1610  000B8E  1E25               	comf	??_cobs_decode,f,c
  1611  000B90  1E26               	comf	??_cobs_decode+1,f,c
  1612  000B92  4A25               	infsnz	??_cobs_decode,f,c
  1613  000B94  2A26               	incf	??_cobs_decode+1,f,c
  1614  000B96  0100               	movlb	0	; () banked
  1615  000B98  5160               	movf	cobs_decode@src_end_ptr& (0+255),w,b
  1616  000B9A  2425               	addwf	??_cobs_decode,w,c
  1617  000B9C  0100               	movlb	0	; () banked
  1618  000B9E  6F66               	movwf	cobs_decode@remaining_bytes& (0+255),b
  1619  000BA0  0100               	movlb	0	; () banked
  1620  000BA2  5161               	movf	(cobs_decode@src_end_ptr+1)& (0+255),w,b
  1621  000BA4  2026               	addwfc	??_cobs_decode+1,w,c
  1622  000BA6  0100               	movlb	0	; () banked
  1623  000BA8  6F67               	movwf	(cobs_decode@remaining_bytes+1)& (0+255),b
  1624                           
  1625                           ; BSR set to: 0
  1626                           ;COBS.c: 148: if (len_code > remaining_bytes)
  1627  000BAA  0100               	movlb	0	; () banked
  1628  000BAC  516A               	movf	cobs_decode@len_code& (0+255),w,b
  1629  000BAE  0100               	movlb	0	; () banked
  1630  000BB0  5D66               	subwf	cobs_decode@remaining_bytes& (0+255),w,b
  1631  000BB2  0E00               	movlw	0
  1632  000BB4  5967               	subwfb	(cobs_decode@remaining_bytes+1)& (0+255),w,b
  1633  000BB6  B0D8               	btfsc	status,0,c
  1634  000BB8  D004               	goto	l4096
  1635                           
  1636                           ; BSR set to: 0
  1637                           ;COBS.c: 149: {
  1638                           ;COBS.c: 150: result.status |= COBS_DECODE_INPUT_TOO_SHORT;
  1639  000BBA  0100               	movlb	0	; () banked
  1640  000BBC  876D               	bsf	(cobs_decode@result+2)& (0+255),3,b
  1641                           
  1642                           ; BSR set to: 0
  1643                           ;COBS.c: 151: len_code = remaining_bytes;
  1644  000BBE  C066  F06A         	movff	cobs_decode@remaining_bytes,cobs_decode@len_code
  1645  000BC2                     l4096:
  1646                           
  1647                           ; BSR set to: 0
  1648                           ;COBS.c: 152: }
  1649                           ;COBS.c: 155: remaining_bytes = dst_buf_end_ptr - dst_write_ptr;
  1650  000BC2  C068  F025         	movff	cobs_decode@dst_write_ptr,??_cobs_decode
  1651  000BC6  C069  F026         	movff	cobs_decode@dst_write_ptr+1,??_cobs_decode+1
  1652  000BCA  1E25               	comf	??_cobs_decode,f,c
  1653  000BCC  1E26               	comf	??_cobs_decode+1,f,c
  1654  000BCE  4A25               	infsnz	??_cobs_decode,f,c
  1655  000BD0  2A26               	incf	??_cobs_decode+1,f,c
  1656  000BD2  0100               	movlb	0	; () banked
  1657  000BD4  5162               	movf	cobs_decode@dst_buf_end_ptr& (0+255),w,b
  1658  000BD6  2425               	addwf	??_cobs_decode,w,c
  1659  000BD8  0100               	movlb	0	; () banked
  1660  000BDA  6F66               	movwf	cobs_decode@remaining_bytes& (0+255),b
  1661  000BDC  0100               	movlb	0	; () banked
  1662  000BDE  5163               	movf	(cobs_decode@dst_buf_end_ptr+1)& (0+255),w,b
  1663  000BE0  2026               	addwfc	??_cobs_decode+1,w,c
  1664  000BE2  0100               	movlb	0	; () banked
  1665  000BE4  6F67               	movwf	(cobs_decode@remaining_bytes+1)& (0+255),b
  1666                           
  1667                           ; BSR set to: 0
  1668                           ;COBS.c: 156: if (len_code > remaining_bytes)
  1669  000BE6  0100               	movlb	0	; () banked
  1670  000BE8  516A               	movf	cobs_decode@len_code& (0+255),w,b
  1671  000BEA  0100               	movlb	0	; () banked
  1672  000BEC  5D66               	subwf	cobs_decode@remaining_bytes& (0+255),w,b
  1673  000BEE  0E00               	movlw	0
  1674  000BF0  5967               	subwfb	(cobs_decode@remaining_bytes+1)& (0+255),w,b
  1675  000BF2  B0D8               	btfsc	status,0,c
  1676  000BF4  D004               	goto	l4104
  1677                           
  1678                           ; BSR set to: 0
  1679                           ;COBS.c: 157: {
  1680                           ;COBS.c: 158: result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
  1681  000BF6  0100               	movlb	0	; () banked
  1682  000BF8  836D               	bsf	(cobs_decode@result+2)& (0+255),1,b
  1683                           
  1684                           ; BSR set to: 0
  1685                           ;COBS.c: 159: len_code = remaining_bytes;
  1686  000BFA  C066  F06A         	movff	cobs_decode@remaining_bytes,cobs_decode@len_code
  1687  000BFE                     l4104:
  1688                           
  1689                           ; BSR set to: 0
  1690                           ;COBS.c: 160: }
  1691                           ;COBS.c: 162: for (i = len_code; i != 0; i--)
  1692  000BFE  C06A  F065         	movff	cobs_decode@len_code,cobs_decode@i
  1693  000C02                     l4106:
  1694                           
  1695                           ; BSR set to: 0
  1696  000C02  0100               	movlb	0	; () banked
  1697  000C04  5165               	movf	cobs_decode@i& (0+255),w,b
  1698  000C06  0100               	movlb	0	; () banked
  1699  000C08  B4D8               	btfsc	status,2,c
  1700  000C0A  D01C               	goto	l4126
  1701                           
  1702                           ; BSR set to: 0
  1703                           ;COBS.c: 163: {
  1704                           ;COBS.c: 164: src_byte = *src_ptr++;
  1705                           
  1706                           ; BSR set to: 0
  1707                           
  1708                           ; BSR set to: 0
  1709  000C0C  C021  FFD9         	movff	cobs_decode@src_ptr,fsr2l
  1710  000C10  C022  FFDA         	movff	cobs_decode@src_ptr+1,fsr2h
  1711  000C14  50DF               	movf	indf2,w,c
  1712  000C16  0100               	movlb	0	; () banked
  1713  000C18  6F64               	movwf	cobs_decode@src_byte& (0+255),b
  1714                           
  1715                           ; BSR set to: 0
  1716  000C1A  4A21               	infsnz	cobs_decode@src_ptr,f,c
  1717  000C1C  2A22               	incf	cobs_decode@src_ptr+1,f,c
  1718                           
  1719                           ; BSR set to: 0
  1720                           ;COBS.c: 165: if (src_byte == 0)
  1721  000C1E  0100               	movlb	0	; () banked
  1722  000C20  5164               	movf	cobs_decode@src_byte& (0+255),w,b
  1723  000C22  0100               	movlb	0	; () banked
  1724  000C24  A4D8               	btfss	status,2,c
  1725  000C26  D002               	goto	l4118
  1726                           
  1727                           ; BSR set to: 0
  1728                           ;COBS.c: 166: {
  1729                           ;COBS.c: 167: result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
  1730  000C28  0100               	movlb	0	; () banked
  1731  000C2A  856D               	bsf	(cobs_decode@result+2)& (0+255),2,b
  1732  000C2C                     l4118:
  1733                           
  1734                           ; BSR set to: 0
  1735                           ;COBS.c: 168: }
  1736                           ;COBS.c: 169: *dst_write_ptr++ = src_byte;
  1737  000C2C  C068  FFD9         	movff	cobs_decode@dst_write_ptr,fsr2l
  1738  000C30  C069  FFDA         	movff	cobs_decode@dst_write_ptr+1,fsr2h
  1739  000C34  C064  FFDF         	movff	cobs_decode@src_byte,indf2
  1740                           
  1741                           ; BSR set to: 0
  1742  000C38  0100               	movlb	0	; () banked
  1743  000C3A  4B68               	infsnz	cobs_decode@dst_write_ptr& (0+255),f,b
  1744  000C3C  2B69               	incf	(cobs_decode@dst_write_ptr+1)& (0+255),f,b
  1745                           
  1746                           ; BSR set to: 0
  1747  000C3E  0100               	movlb	0	; () banked
  1748  000C40  0765               	decf	cobs_decode@i& (0+255),f,b
  1749  000C42  D7DF               	goto	l4106
  1750  000C44                     l4126:
  1751                           
  1752                           ; BSR set to: 0
  1753                           ;COBS.c: 170: }
  1754                           ;COBS.c: 172: if (src_ptr >= src_end_ptr)
  1755  000C44  0100               	movlb	0	; () banked
  1756  000C46  5160               	movf	cobs_decode@src_end_ptr& (0+255),w,b
  1757  000C48  5C21               	subwf	cobs_decode@src_ptr,w,c
  1758  000C4A  0100               	movlb	0	; () banked
  1759  000C4C  5161               	movf	(cobs_decode@src_end_ptr+1)& (0+255),w,b
  1760  000C4E  5822               	subwfb	cobs_decode@src_ptr+1,w,c
  1761  000C50  B0D8               	btfsc	status,0,c
  1762  000C52  D01C               	goto	l4140
  1763                           
  1764                           ; BSR set to: 0
  1765                           ;COBS.c: 175: }
  1766                           ;COBS.c: 178: if (len_code != 0xFE)
  1767                           
  1768                           ; BSR set to: 0
  1769                           
  1770                           ; BSR set to: 0
  1771                           ;COBS.c: 173: {
  1772                           ;COBS.c: 174: break;
  1773  000C54  0EFE               	movlw	254
  1774  000C56  0100               	movlb	0	; () banked
  1775  000C58  196A               	xorwf	cobs_decode@len_code& (0+255),w,b
  1776  000C5A  B4D8               	btfsc	status,2,c
  1777  000C5C  D781               	goto	l4078
  1778                           
  1779                           ; BSR set to: 0
  1780                           ;COBS.c: 179: {
  1781                           ;COBS.c: 180: if (dst_write_ptr >= dst_buf_end_ptr)
  1782  000C5E  0100               	movlb	0	; () banked
  1783  000C60  5162               	movf	cobs_decode@dst_buf_end_ptr& (0+255),w,b
  1784  000C62  0100               	movlb	0	; () banked
  1785  000C64  5D68               	subwf	cobs_decode@dst_write_ptr& (0+255),w,b
  1786  000C66  0100               	movlb	0	; () banked
  1787  000C68  5163               	movf	(cobs_decode@dst_buf_end_ptr+1)& (0+255),w,b
  1788  000C6A  0100               	movlb	0	; () banked
  1789  000C6C  5969               	subwfb	(cobs_decode@dst_write_ptr+1)& (0+255),w,b
  1790  000C6E  A0D8               	btfss	status,0,c
  1791  000C70  D003               	goto	l4136
  1792                           
  1793                           ; BSR set to: 0
  1794                           ;COBS.c: 181: {
  1795                           ;COBS.c: 182: result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
  1796  000C72  0100               	movlb	0	; () banked
  1797  000C74  836D               	bsf	(cobs_decode@result+2)& (0+255),1,b
  1798                           
  1799                           ;COBS.c: 183: break;
  1800  000C76  D00A               	goto	l4140
  1801  000C78                     l4136:
  1802                           
  1803                           ; BSR set to: 0
  1804                           ;COBS.c: 184: }
  1805                           ;COBS.c: 185: *dst_write_ptr++ = 0;
  1806  000C78  C068  FFD9         	movff	cobs_decode@dst_write_ptr,fsr2l
  1807  000C7C  C069  FFDA         	movff	cobs_decode@dst_write_ptr+1,fsr2h
  1808  000C80  0E00               	movlw	0
  1809  000C82  6EDF               	movwf	indf2,c
  1810                           
  1811                           ; BSR set to: 0
  1812  000C84  0100               	movlb	0	; () banked
  1813  000C86  4B68               	infsnz	cobs_decode@dst_write_ptr& (0+255),f,b
  1814  000C88  2B69               	incf	(cobs_decode@dst_write_ptr+1)& (0+255),f,b
  1815                           
  1816                           ; BSR set to: 0
  1817                           ;COBS.c: 186: }
  1818                           ;COBS.c: 187: }
  1819  000C8A  D76A               	goto	l4078
  1820  000C8C                     l4140:
  1821                           
  1822                           ; BSR set to: 0
  1823                           ;COBS.c: 188: }
  1824                           ;COBS.c: 190: result.out_len = dst_write_ptr - dst_buf_ptr;
  1825  000C8C  C01D  F025         	movff	cobs_decode@dst_buf_ptr,??_cobs_decode
  1826  000C90  C01E  F026         	movff	cobs_decode@dst_buf_ptr+1,??_cobs_decode+1
  1827  000C94  1E25               	comf	??_cobs_decode,f,c
  1828  000C96  1E26               	comf	??_cobs_decode+1,f,c
  1829  000C98  4A25               	infsnz	??_cobs_decode,f,c
  1830  000C9A  2A26               	incf	??_cobs_decode+1,f,c
  1831  000C9C  0100               	movlb	0	; () banked
  1832  000C9E  5168               	movf	cobs_decode@dst_write_ptr& (0+255),w,b
  1833  000CA0  2425               	addwf	??_cobs_decode,w,c
  1834  000CA2  0100               	movlb	0	; () banked
  1835  000CA4  6F6B               	movwf	cobs_decode@result& (0+255),b
  1836  000CA6  0100               	movlb	0	; () banked
  1837  000CA8  5169               	movf	(cobs_decode@dst_write_ptr+1)& (0+255),w,b
  1838  000CAA  2026               	addwfc	??_cobs_decode+1,w,c
  1839  000CAC  0100               	movlb	0	; () banked
  1840  000CAE  6F6C               	movwf	(cobs_decode@result+1)& (0+255),b
  1841                           
  1842                           ; BSR set to: 0
  1843                           ;COBS.c: 192: return result;
  1844  000CB0  C06B  F01D         	movff	cobs_decode@result,?_cobs_decode
  1845  000CB4  C06C  F01E         	movff	cobs_decode@result+1,?_cobs_decode+1
  1846  000CB8  C06D  F01F         	movff	cobs_decode@result+2,?_cobs_decode+2
  1847  000CBC  0012               	return	
  1848  000CBE                     __end_of_cobs_decode:
  1849                           	opt stack 0
  1850                           tblptru	equ	0xFF8
  1851                           tblptrh	equ	0xFF7
  1852                           tblptrl	equ	0xFF6
  1853                           tablat	equ	0xFF5
  1854                           intcon	equ	0xFF2
  1855                           postinc0	equ	0xFEE
  1856                           wreg	equ	0xFE8
  1857                           postdec1	equ	0xFE5
  1858                           fsr1l	equ	0xFE1
  1859                           indf2	equ	0xFDF
  1860                           postinc2	equ	0xFDE
  1861                           fsr2h	equ	0xFDA
  1862                           fsr2l	equ	0xFD9
  1863                           status	equ	0xFD8
  1864                           
  1865 ;; *************** function _Receive_get *****************
  1866 ;; Defined at:
  1867 ;;		line 125 in file "UART.c"
  1868 ;; Parameters:    Size  Location     Type
  1869 ;;		None
  1870 ;; Auto vars:     Size  Location     Type
  1871 ;;		None
  1872 ;; Return value:  Size  Location     Type
  1873 ;;                  1    wreg      unsigned char 
  1874 ;; Registers used:
  1875 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1876 ;; Tracked objects:
  1877 ;;		On entry : 0/0
  1878 ;;		On exit  : 0/0
  1879 ;;		Unchanged: 0/0
  1880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1881 ;;      Params:         0       0       0       0       0       0       0
  1882 ;;      Locals:         0       0       0       0       0       0       0
  1883 ;;      Temps:          0       0       0       0       0       0       0
  1884 ;;      Totals:         0       0       0       0       0       0       0
  1885 ;;Total ram usage:        0 bytes
  1886 ;; Hardware stack levels used:    1
  1887 ;; Hardware stack levels required when called:    8
  1888 ;; This function calls:
  1889 ;;		_UART_buff_get
  1890 ;; This function is called by:
  1891 ;;		_receiveData
  1892 ;;		_getch
  1893 ;; This function uses a non-reentrant model
  1894 ;;
  1895                           
  1896                           	psect	text4
  1897  0021FE                     __ptext4:
  1898                           	opt stack 0
  1899  0021FE                     _Receive_get:
  1900                           	opt stack 20
  1901                           
  1902                           ;UART.c: 126: return UART_buff_get(&input_buffer);
  1903                           
  1904                           ; BSR set to: 0
  1905                           ;incstack = 0
  1906  0021FE  0E3C               	movlw	low _input_buffer
  1907  002200  6E23               	movwf	UART_buff_get@_this,c
  1908  002202  0E01               	movlw	high _input_buffer
  1909  002204  6E24               	movwf	UART_buff_get@_this+1,c
  1910  002206  ECA2  F00B         	call	_UART_buff_get	;wreg free
  1911  00220A  0012               	return	
  1912  00220C                     __end_of_Receive_get:
  1913                           	opt stack 0
  1914                           tblptru	equ	0xFF8
  1915                           tblptrh	equ	0xFF7
  1916                           tblptrl	equ	0xFF6
  1917                           tablat	equ	0xFF5
  1918                           intcon	equ	0xFF2
  1919                           postinc0	equ	0xFEE
  1920                           wreg	equ	0xFE8
  1921                           postdec1	equ	0xFE5
  1922                           fsr1l	equ	0xFE1
  1923                           indf2	equ	0xFDF
  1924                           postinc2	equ	0xFDE
  1925                           fsr2h	equ	0xFDA
  1926                           fsr2l	equ	0xFD9
  1927                           status	equ	0xFD8
  1928                           
  1929 ;; *************** function _Receive_available *****************
  1930 ;; Defined at:
  1931 ;;		line 121 in file "UART.c"
  1932 ;; Parameters:    Size  Location     Type
  1933 ;;		None
  1934 ;; Auto vars:     Size  Location     Type
  1935 ;;		None
  1936 ;; Return value:  Size  Location     Type
  1937 ;;                  2   30[COMRAM] int 
  1938 ;; Registers used:
  1939 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1940 ;; Tracked objects:
  1941 ;;		On entry : 0/0
  1942 ;;		On exit  : 0/0
  1943 ;;		Unchanged: 0/0
  1944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1945 ;;      Params:         2       0       0       0       0       0       0
  1946 ;;      Locals:         0       0       0       0       0       0       0
  1947 ;;      Temps:          0       0       0       0       0       0       0
  1948 ;;      Totals:         2       0       0       0       0       0       0
  1949 ;;Total ram usage:        2 bytes
  1950 ;; Hardware stack levels used:    1
  1951 ;; Hardware stack levels required when called:    7
  1952 ;; This function calls:
  1953 ;;		_UART_buff_size
  1954 ;; This function is called by:
  1955 ;;		_receiveData
  1956 ;; This function uses a non-reentrant model
  1957 ;;
  1958                           
  1959                           	psect	text5
  1960  002142                     __ptext5:
  1961                           	opt stack 0
  1962  002142                     _Receive_available:
  1963                           	opt stack 21
  1964                           
  1965                           ;UART.c: 122: return UART_buff_size(&input_buffer);
  1966                           
  1967                           ;incstack = 0
  1968  002142  0E3C               	movlw	low _input_buffer
  1969  002144  6E1D               	movwf	UART_buff_size@_this,c
  1970  002146  0E01               	movlw	high _input_buffer
  1971  002148  6E1E               	movwf	UART_buff_size@_this+1,c
  1972  00214A  ECAC  F010         	call	_UART_buff_size	;wreg free
  1973  00214E  C01D  F01F         	movff	?_UART_buff_size,?_Receive_available
  1974  002152  C01E  F020         	movff	?_UART_buff_size+1,?_Receive_available+1
  1975  002156  0012               	return	
  1976  002158                     __end_of_Receive_available:
  1977                           	opt stack 0
  1978                           tblptru	equ	0xFF8
  1979                           tblptrh	equ	0xFF7
  1980                           tblptrl	equ	0xFF6
  1981                           tablat	equ	0xFF5
  1982                           intcon	equ	0xFF2
  1983                           postinc0	equ	0xFEE
  1984                           wreg	equ	0xFE8
  1985                           postdec1	equ	0xFE5
  1986                           fsr1l	equ	0xFE1
  1987                           indf2	equ	0xFDF
  1988                           postinc2	equ	0xFDE
  1989                           fsr2h	equ	0xFDA
  1990                           fsr2l	equ	0xFD9
  1991                           status	equ	0xFD8
  1992                           
  1993 ;; *************** function _UART_buff_size *****************
  1994 ;; Defined at:
  1995 ;;		line 101 in file "UART.c"
  1996 ;; Parameters:    Size  Location     Type
  1997 ;;  _this           2   28[COMRAM] PTR struct UART_ring_buf
  1998 ;;		 -> output_buffer(106), input_buffer(106), 
  1999 ;; Auto vars:     Size  Location     Type
  2000 ;;		None
  2001 ;; Return value:  Size  Location     Type
  2002 ;;                  2   28[COMRAM] int 
  2003 ;; Registers used:
  2004 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2005 ;; Tracked objects:
  2006 ;;		On entry : 0/0
  2007 ;;		On exit  : 0/0
  2008 ;;		Unchanged: 0/0
  2009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2010 ;;      Params:         2       0       0       0       0       0       0
  2011 ;;      Locals:         0       0       0       0       0       0       0
  2012 ;;      Temps:          0       0       0       0       0       0       0
  2013 ;;      Totals:         2       0       0       0       0       0       0
  2014 ;;Total ram usage:        2 bytes
  2015 ;; Hardware stack levels used:    1
  2016 ;; Hardware stack levels required when called:    6
  2017 ;; This function calls:
  2018 ;;		Nothing
  2019 ;; This function is called by:
  2020 ;;		_Receive_available
  2021 ;; This function uses a non-reentrant model
  2022 ;;
  2023                           
  2024                           	psect	text6
  2025  002158                     __ptext6:
  2026                           	opt stack 0
  2027  002158                     _UART_buff_size:
  2028                           	opt stack 21
  2029                           
  2030                           ;UART.c: 102: return (_this->count);
  2031                           
  2032                           ;incstack = 0
  2033  002158  EE20 F068          	lfsr	2,104
  2034  00215C  501D               	movf	UART_buff_size@_this,w,c
  2035  00215E  26D9               	addwf	fsr2l,f,c
  2036  002160  501E               	movf	UART_buff_size@_this+1,w,c
  2037  002162  22DA               	addwfc	fsr2h,f,c
  2038  002164  CFDE F01D          	movff	postinc2,?_UART_buff_size
  2039  002168  CFDD F01E          	movff	postdec2,?_UART_buff_size+1
  2040  00216C  0012               	return	
  2041  00216E                     __end_of_UART_buff_size:
  2042                           	opt stack 0
  2043                           tblptru	equ	0xFF8
  2044                           tblptrh	equ	0xFF7
  2045                           tblptrl	equ	0xFF6
  2046                           tablat	equ	0xFF5
  2047                           intcon	equ	0xFF2
  2048                           postinc0	equ	0xFEE
  2049                           wreg	equ	0xFE8
  2050                           postdec1	equ	0xFE5
  2051                           fsr1l	equ	0xFE1
  2052                           indf2	equ	0xFDF
  2053                           postinc2	equ	0xFDE
  2054                           postdec2	equ	0xFDD
  2055                           fsr2h	equ	0xFDA
  2056                           fsr2l	equ	0xFD9
  2057                           status	equ	0xFD8
  2058                           
  2059 ;; *************** function _ComController *****************
  2060 ;; Defined at:
  2061 ;;		line 127 in file "CarCom.c"
  2062 ;; Parameters:    Size  Location     Type
  2063 ;;  DTI             2   90[BANK0 ] PTR unsigned char 
  2064 ;;		 -> ProcessArray(30), 
  2065 ;;  lenth           2   92[BANK0 ] unsigned int 
  2066 ;; Auto vars:     Size  Location     Type
  2067 ;;  k               1   12[BANK1 ] unsigned char 
  2068 ;;  DataToSend      4    8[BANK1 ] unsigned char [4]
  2069 ;;  DataRecived     4    0[BANK1 ] unsigned char [4]
  2070 ;;  DataToSend      4    4[BANK1 ] unsigned char [4]
  2071 ;; Return value:  Size  Location     Type
  2072 ;;                  1    wreg      void 
  2073 ;; Registers used:
  2074 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2075 ;; Tracked objects:
  2076 ;;		On entry : 0/0
  2077 ;;		On exit  : 0/0
  2078 ;;		Unchanged: 0/0
  2079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2080 ;;      Params:         0       4       0       0       0       0       0
  2081 ;;      Locals:         0       0      13       0       0       0       0
  2082 ;;      Temps:          0       2       0       0       0       0       0
  2083 ;;      Totals:         0       6      13       0       0       0       0
  2084 ;;Total ram usage:       19 bytes
  2085 ;; Hardware stack levels used:    1
  2086 ;; Hardware stack levels required when called:   10
  2087 ;; This function calls:
  2088 ;;		_Delay
  2089 ;;		_GetDataDict
  2090 ;;		_SetDataDict
  2091 ;;		_sendData
  2092 ;; This function is called by:
  2093 ;;		_receiveData
  2094 ;; This function uses a non-reentrant model
  2095 ;;
  2096                           
  2097                           	psect	text7
  2098  000740                     __ptext7:
  2099                           	opt stack 0
  2100  000740                     _ComController:
  2101                           	opt stack 18
  2102                           
  2103                           ;CarCom.c: 128: if(DTI[1] == 1){
  2104                           
  2105                           ;incstack = 0
  2106  000740  0100               	movlb	0	; () banked
  2107  000742  EE20 F001          	lfsr	2,1
  2108  000746  51BA               	movf	ComController@DTI& (0+255),w,b
  2109  000748  26D9               	addwf	fsr2l,f,c
  2110  00074A  51BB               	movf	(ComController@DTI+1)& (0+255),w,b
  2111  00074C  22DA               	addwfc	fsr2h,f,c
  2112  00074E  04DE               	decf	postinc2,w,c
  2113  000750  A4D8               	btfss	status,2,c
  2114  000752  D057               	goto	l4158
  2115                           
  2116                           ; BSR set to: 0
  2117                           ;CarCom.c: 129: unsigned char DataToSend[4];
  2118                           ;CarCom.c: 130: GetDataDict(DTI[2], DTI[3], DataToSend, DTI[4]);
  2119  000754  0100               	movlb	0	; () banked
  2120  000756  EE20 F003          	lfsr	2,3
  2121  00075A  51BA               	movf	ComController@DTI& (0+255),w,b
  2122  00075C  26D9               	addwf	fsr2l,f,c
  2123  00075E  51BB               	movf	(ComController@DTI+1)& (0+255),w,b
  2124  000760  22DA               	addwfc	fsr2h,f,c
  2125  000762  50DF               	movf	indf2,w,c
  2126  000764  6E1D               	movwf	GetDataDict@DataTableIndex,c
  2127  000766  0EE6               	movlw	low ComController@DataToSend
  2128  000768  6E1E               	movwf	GetDataDict@DataArray,c
  2129  00076A  0E01               	movlw	high ComController@DataToSend
  2130  00076C  6E1F               	movwf	GetDataDict@DataArray+1,c
  2131  00076E  0100               	movlb	0	; () banked
  2132  000770  EE20 F004          	lfsr	2,4
  2133  000774  51BA               	movf	ComController@DTI& (0+255),w,b
  2134  000776  26D9               	addwf	fsr2l,f,c
  2135  000778  51BB               	movf	(ComController@DTI+1)& (0+255),w,b
  2136  00077A  22DA               	addwfc	fsr2h,f,c
  2137  00077C  50DF               	movf	indf2,w,c
  2138  00077E  6E20               	movwf	GetDataDict@numbofbytes,c
  2139  000780  0100               	movlb	0	; () banked
  2140  000782  EE20 F002          	lfsr	2,2
  2141  000786  51BA               	movf	ComController@DTI& (0+255),w,b
  2142  000788  26D9               	addwf	fsr2l,f,c
  2143  00078A  51BB               	movf	(ComController@DTI+1)& (0+255),w,b
  2144  00078C  22DA               	addwfc	fsr2h,f,c
  2145  00078E  50DF               	movf	indf2,w,c
  2146  000790  EC56  F00B         	call	_GetDataDict
  2147                           
  2148                           ;CarCom.c: 131: do { LATC5 = 1; } while(0);
  2149  000794  8A8B               	bsf	3979,5,c	;volatile
  2150                           
  2151                           ;CarCom.c: 132: Delay(5);
  2152  000796  0E05               	movlw	5
  2153  000798  6E1D               	movwf	Delay@wait,c
  2154  00079A  0E00               	movlw	0
  2155  00079C  6E1E               	movwf	Delay@wait+1,c
  2156  00079E  0E00               	movlw	0
  2157  0007A0  6E1F               	movwf	Delay@wait+2,c
  2158  0007A2  0E00               	movlw	0
  2159  0007A4  6E20               	movwf	Delay@wait+3,c
  2160  0007A6  ECD3  F00E         	call	_Delay	;wreg free
  2161                           
  2162                           ;CarCom.c: 133: sendData(1, 2, 1, 1, DataToSend, DTI[4]);
  2163  0007AA  0E02               	movlw	2
  2164  0007AC  0100               	movlb	0	; () banked
  2165  0007AE  6F6D               	movwf	sendData@ComandByte& (0+255),b
  2166  0007B0  0E01               	movlw	1
  2167  0007B2  0100               	movlb	0	; () banked
  2168  0007B4  6F6E               	movwf	sendData@DataTable& (0+255),b
  2169  0007B6  0E01               	movlw	1
  2170  0007B8  0100               	movlb	0	; () banked
  2171  0007BA  6F6F               	movwf	sendData@DataTableIndex& (0+255),b
  2172  0007BC  0EE6               	movlw	low ComController@DataToSend
  2173  0007BE  0100               	movlb	0	; () banked
  2174  0007C0  6F70               	movwf	sendData@DTS& (0+255),b
  2175  0007C2  0E01               	movlw	high ComController@DataToSend
  2176  0007C4  0100               	movlb	0	; () banked
  2177  0007C6  6F71               	movwf	(sendData@DTS+1)& (0+255),b
  2178  0007C8  0100               	movlb	0	; () banked
  2179  0007CA  EE20 F004          	lfsr	2,4
  2180  0007CE  51BA               	movf	ComController@DTI& (0+255),w,b
  2181  0007D0  26D9               	addwf	fsr2l,f,c
  2182  0007D2  51BB               	movf	(ComController@DTI+1)& (0+255),w,b
  2183  0007D4  22DA               	addwfc	fsr2h,f,c
  2184  0007D6  50DF               	movf	indf2,w,c
  2185  0007D8  0100               	movlb	0	; () banked
  2186  0007DA  6FBE               	movwf	??_ComController& (0+255),b
  2187  0007DC  0100               	movlb	0	; () banked
  2188  0007DE  51BE               	movf	??_ComController& (0+255),w,b
  2189  0007E0  0100               	movlb	0	; () banked
  2190  0007E2  6F72               	movwf	sendData@lenth& (0+255),b
  2191  0007E4  6B73               	clrf	(sendData@lenth+1)& (0+255),b
  2192  0007E6  0E01               	movlw	1
  2193  0007E8  EC96  F004         	call	_sendData
  2194                           
  2195                           ;CarCom.c: 134: Delay(3);
  2196  0007EC  0E03               	movlw	3
  2197  0007EE  6E1D               	movwf	Delay@wait,c
  2198  0007F0  0E00               	movlw	0
  2199  0007F2  6E1E               	movwf	Delay@wait+1,c
  2200  0007F4  0E00               	movlw	0
  2201  0007F6  6E1F               	movwf	Delay@wait+2,c
  2202  0007F8  0E00               	movlw	0
  2203  0007FA  6E20               	movwf	Delay@wait+3,c
  2204  0007FC  ECD3  F00E         	call	_Delay	;wreg free
  2205                           
  2206                           ;CarCom.c: 135: do { LATC5 = 0; } while(0);
  2207  000800  9A8B               	bcf	3979,5,c	;volatile
  2208  000802                     l4158:
  2209                           
  2210                           ;CarCom.c: 136: }
  2211                           ;CarCom.c: 137: if(DTI[1] == 2){
  2212  000802  0100               	movlb	0	; () banked
  2213  000804  EE20 F001          	lfsr	2,1
  2214  000808  51BA               	movf	ComController@DTI& (0+255),w,b
  2215  00080A  26D9               	addwf	fsr2l,f,c
  2216  00080C  51BB               	movf	(ComController@DTI+1)& (0+255),w,b
  2217  00080E  22DA               	addwfc	fsr2h,f,c
  2218  000810  0E02               	movlw	2
  2219  000812  18DE               	xorwf	postinc2,w,c
  2220  000814  A4D8               	btfss	status,2,c
  2221  000816  0012               	return	
  2222                           
  2223                           ; BSR set to: 0
  2224                           ;CarCom.c: 138: unsigned char DataToSend[4];
  2225                           ;CarCom.c: 139: unsigned char DataRecived[4];
  2226                           ;CarCom.c: 140: for(char k = 0;k<DTI[4];k++){
  2227  000818  0E00               	movlw	0
  2228  00081A  0101               	movlb	1	; () banked
  2229  00081C  6FEE               	movwf	ComController@k& (0+255),b
  2230  00081E  D021               	goto	l4166
  2231  000820                     l4162:
  2232                           
  2233                           ; BSR set to: 1
  2234                           ;CarCom.c: 141: DataRecived[k] = DTI[4+k];
  2235  000820  0101               	movlb	1	; () banked
  2236  000822  51EE               	movf	ComController@k& (0+255),w,b
  2237  000824  0100               	movlb	0	; () banked
  2238  000826  6FBE               	movwf	??_ComController& (0+255),b
  2239  000828  6BBF               	clrf	(??_ComController+1)& (0+255),b
  2240  00082A  0E04               	movlw	4
  2241  00082C  0100               	movlb	0	; () banked
  2242  00082E  27BE               	addwf	??_ComController& (0+255),f,b
  2243  000830  0E00               	movlw	0
  2244  000832  23BF               	addwfc	(??_ComController+1)& (0+255),f,b
  2245  000834  0100               	movlb	0	; () banked
  2246  000836  51BE               	movf	??_ComController& (0+255),w,b
  2247  000838  0100               	movlb	0	; () banked
  2248  00083A  25BA               	addwf	ComController@DTI& (0+255),w,b
  2249  00083C  6ED9               	movwf	fsr2l,c
  2250  00083E  0100               	movlb	0	; () banked
  2251  000840  51BF               	movf	(??_ComController+1)& (0+255),w,b
  2252  000842  0100               	movlb	0	; () banked
  2253  000844  21BB               	addwfc	(ComController@DTI+1)& (0+255),w,b
  2254  000846  6EDA               	movwf	fsr2h,c
  2255  000848  0101               	movlb	1	; () banked
  2256  00084A  51EE               	movf	ComController@k& (0+255),w,b
  2257  00084C  0D01               	mullw	1
  2258  00084E  0EE2               	movlw	low ComController@DataRecived
  2259  000850  24F3               	addwf	prodl,w,c
  2260  000852  6EE1               	movwf	fsr1l,c
  2261  000854  0E01               	movlw	high ComController@DataRecived
  2262  000856  20F4               	addwfc	prodh,w,c
  2263  000858  6EE2               	movwf	fsr1h,c
  2264  00085A  CFDF FFE7          	movff	indf2,indf1
  2265                           
  2266                           ; BSR set to: 1
  2267  00085E  0101               	movlb	1	; () banked
  2268  000860  2BEE               	incf	ComController@k& (0+255),f,b
  2269  000862                     l4166:
  2270                           
  2271                           ; BSR set to: 1
  2272  000862  0100               	movlb	0	; () banked
  2273  000864  EE20 F004          	lfsr	2,4
  2274  000868  51BA               	movf	ComController@DTI& (0+255),w,b
  2275  00086A  26D9               	addwf	fsr2l,f,c
  2276  00086C  51BB               	movf	(ComController@DTI+1)& (0+255),w,b
  2277  00086E  22DA               	addwfc	fsr2h,f,c
  2278  000870  50DE               	movf	postinc2,w,c
  2279  000872  0101               	movlb	1	; () banked
  2280  000874  5DEE               	subwf	ComController@k& (0+255),w,b
  2281  000876  A0D8               	btfss	status,0,c
  2282  000878  D7D3               	goto	l4162
  2283                           
  2284                           ; BSR set to: 1
  2285                           ;CarCom.c: 142: }
  2286                           ;CarCom.c: 143: SetDataDict(DTI[2], DTI[3], DataRecived, DTI[4]);
  2287                           
  2288                           ; BSR set to: 1
  2289  00087A  0100               	movlb	0	; () banked
  2290  00087C  EE20 F003          	lfsr	2,3
  2291  000880  51BA               	movf	ComController@DTI& (0+255),w,b
  2292  000882  26D9               	addwf	fsr2l,f,c
  2293  000884  51BB               	movf	(ComController@DTI+1)& (0+255),w,b
  2294  000886  22DA               	addwfc	fsr2h,f,c
  2295  000888  50DF               	movf	indf2,w,c
  2296  00088A  6E1D               	movwf	SetDataDict@DataTableIndex,c
  2297  00088C  0EE2               	movlw	low ComController@DataRecived
  2298  00088E  6E1E               	movwf	SetDataDict@DataArray,c
  2299  000890  0E01               	movlw	high ComController@DataRecived
  2300  000892  6E1F               	movwf	SetDataDict@DataArray+1,c
  2301  000894  0100               	movlb	0	; () banked
  2302  000896  EE20 F004          	lfsr	2,4
  2303  00089A  51BA               	movf	ComController@DTI& (0+255),w,b
  2304  00089C  26D9               	addwf	fsr2l,f,c
  2305  00089E  51BB               	movf	(ComController@DTI+1)& (0+255),w,b
  2306  0008A0  22DA               	addwfc	fsr2h,f,c
  2307  0008A2  50DF               	movf	indf2,w,c
  2308  0008A4  6E20               	movwf	SetDataDict@numbofbytes,c
  2309  0008A6  0100               	movlb	0	; () banked
  2310  0008A8  EE20 F002          	lfsr	2,2
  2311  0008AC  51BA               	movf	ComController@DTI& (0+255),w,b
  2312  0008AE  26D9               	addwf	fsr2l,f,c
  2313  0008B0  51BB               	movf	(ComController@DTI+1)& (0+255),w,b
  2314  0008B2  22DA               	addwfc	fsr2h,f,c
  2315  0008B4  50DF               	movf	indf2,w,c
  2316  0008B6  EC0A  F00B         	call	_SetDataDict
  2317                           
  2318                           ;CarCom.c: 144: GetDataDict(4, 2, DataToSend, 1);
  2319  0008BA  0E02               	movlw	2
  2320  0008BC  6E1D               	movwf	GetDataDict@DataTableIndex,c
  2321  0008BE  0EEA               	movlw	low ComController@DataToSend_1658
  2322  0008C0  6E1E               	movwf	GetDataDict@DataArray,c
  2323  0008C2  0E01               	movlw	high ComController@DataToSend_1658
  2324  0008C4  6E1F               	movwf	GetDataDict@DataArray+1,c
  2325  0008C6  0E01               	movlw	1
  2326  0008C8  6E20               	movwf	GetDataDict@numbofbytes,c
  2327  0008CA  0E04               	movlw	4
  2328  0008CC  EC56  F00B         	call	_GetDataDict
  2329                           
  2330                           ;CarCom.c: 145: do { LATC5 = 1; } while(0);
  2331  0008D0  8A8B               	bsf	3979,5,c	;volatile
  2332                           
  2333                           ;CarCom.c: 146: Delay(2);
  2334  0008D2  0E02               	movlw	2
  2335  0008D4  6E1D               	movwf	Delay@wait,c
  2336  0008D6  0E00               	movlw	0
  2337  0008D8  6E1E               	movwf	Delay@wait+1,c
  2338  0008DA  0E00               	movlw	0
  2339  0008DC  6E1F               	movwf	Delay@wait+2,c
  2340  0008DE  0E00               	movlw	0
  2341  0008E0  6E20               	movwf	Delay@wait+3,c
  2342  0008E2  ECD3  F00E         	call	_Delay	;wreg free
  2343                           
  2344                           ;CarCom.c: 147: sendData(1, 2, 4, 2, DataToSend, 1);
  2345  0008E6  0E02               	movlw	2
  2346  0008E8  0100               	movlb	0	; () banked
  2347  0008EA  6F6D               	movwf	sendData@ComandByte& (0+255),b
  2348  0008EC  0E04               	movlw	4
  2349  0008EE  0100               	movlb	0	; () banked
  2350  0008F0  6F6E               	movwf	sendData@DataTable& (0+255),b
  2351  0008F2  0E02               	movlw	2
  2352  0008F4  0100               	movlb	0	; () banked
  2353  0008F6  6F6F               	movwf	sendData@DataTableIndex& (0+255),b
  2354  0008F8  0EEA               	movlw	low ComController@DataToSend_1658
  2355  0008FA  0100               	movlb	0	; () banked
  2356  0008FC  6F70               	movwf	sendData@DTS& (0+255),b
  2357  0008FE  0E01               	movlw	high ComController@DataToSend_1658
  2358  000900  0100               	movlb	0	; () banked
  2359  000902  6F71               	movwf	(sendData@DTS+1)& (0+255),b
  2360  000904  0E00               	movlw	0
  2361  000906  0100               	movlb	0	; () banked
  2362  000908  6F73               	movwf	(sendData@lenth+1)& (0+255),b
  2363  00090A  0E01               	movlw	1
  2364  00090C  6F72               	movwf	sendData@lenth& (0+255),b
  2365  00090E  0E01               	movlw	1
  2366  000910  EC96  F004         	call	_sendData
  2367                           
  2368                           ;CarCom.c: 148: Delay(5);
  2369  000914  0E05               	movlw	5
  2370  000916  6E1D               	movwf	Delay@wait,c
  2371  000918  0E00               	movlw	0
  2372  00091A  6E1E               	movwf	Delay@wait+1,c
  2373  00091C  0E00               	movlw	0
  2374  00091E  6E1F               	movwf	Delay@wait+2,c
  2375  000920  0E00               	movlw	0
  2376  000922  6E20               	movwf	Delay@wait+3,c
  2377  000924  ECD3  F00E         	call	_Delay	;wreg free
  2378                           
  2379                           ;CarCom.c: 149: do { LATC5 = 0; } while(0);
  2380  000928  9A8B               	bcf	3979,5,c	;volatile
  2381  00092A  0012               	return	
  2382  00092C                     __end_of_ComController:
  2383                           	opt stack 0
  2384                           tblptru	equ	0xFF8
  2385                           tblptrh	equ	0xFF7
  2386                           tblptrl	equ	0xFF6
  2387                           tablat	equ	0xFF5
  2388                           prodh	equ	0xFF4
  2389                           prodl	equ	0xFF3
  2390                           intcon	equ	0xFF2
  2391                           postinc0	equ	0xFEE
  2392                           wreg	equ	0xFE8
  2393                           indf1	equ	0xFE7
  2394                           postdec1	equ	0xFE5
  2395                           fsr1h	equ	0xFE2
  2396                           fsr1l	equ	0xFE1
  2397                           indf2	equ	0xFDF
  2398                           postinc2	equ	0xFDE
  2399                           postdec2	equ	0xFDD
  2400                           fsr2h	equ	0xFDA
  2401                           fsr2l	equ	0xFD9
  2402                           status	equ	0xFD8
  2403                           
  2404 ;; *************** function _sendData *****************
  2405 ;; Defined at:
  2406 ;;		line 39 in file "CarCom.c"
  2407 ;; Parameters:    Size  Location     Type
  2408 ;;  whereToSend     1    wreg     unsigned char 
  2409 ;;  ComandByte      1   13[BANK0 ] unsigned char 
  2410 ;;  DataTable       1   14[BANK0 ] unsigned char 
  2411 ;;  DataTableInd    1   15[BANK0 ] unsigned char 
  2412 ;;  DTS             2   16[BANK0 ] PTR unsigned char 
  2413 ;;		 -> ComController@DataToSend_1658(4), ComController@DataToSend(4), 
  2414 ;;  lenth           2   18[BANK0 ] unsigned int 
  2415 ;; Auto vars:     Size  Location     Type
  2416 ;;  whereToSend     1   80[BANK0 ] unsigned char 
  2417 ;;  SendArray      30   50[BANK0 ] unsigned char [30]
  2418 ;;  COBSArray      30   20[BANK0 ] unsigned char [30]
  2419 ;;  result          3   82[BANK0 ] struct .
  2420 ;;  count           2   87[BANK0 ] int 
  2421 ;;  j               2   85[BANK0 ] int 
  2422 ;;  i               1   89[BANK0 ] unsigned char 
  2423 ;;  CS              1   81[BANK0 ] unsigned char 
  2424 ;; Return value:  Size  Location     Type
  2425 ;;                  1    wreg      void 
  2426 ;; Registers used:
  2427 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2428 ;; Tracked objects:
  2429 ;;		On entry : 0/0
  2430 ;;		On exit  : 0/0
  2431 ;;		Unchanged: 0/0
  2432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2433 ;;      Params:         0       7       0       0       0       0       0
  2434 ;;      Locals:         0      70       0       0       0       0       0
  2435 ;;      Temps:          4       0       0       0       0       0       0
  2436 ;;      Totals:         4      77       0       0       0       0       0
  2437 ;;Total ram usage:       81 bytes
  2438 ;; Hardware stack levels used:    1
  2439 ;; Hardware stack levels required when called:    9
  2440 ;; This function calls:
  2441 ;;		_CRC8
  2442 ;;		_Send_put
  2443 ;;		_cobs_encode
  2444 ;; This function is called by:
  2445 ;;		_ComController
  2446 ;; This function uses a non-reentrant model
  2447 ;;
  2448                           
  2449                           	psect	text8
  2450  00092C                     __ptext8:
  2451                           	opt stack 0
  2452  00092C                     _sendData:
  2453                           	opt stack 18
  2454                           
  2455                           ;incstack = 0
  2456                           ;sendData@whereToSend stored from wreg
  2457  00092C  0100               	movlb	0	; () banked
  2458  00092E  6FB0               	movwf	sendData@whereToSend& (0+255),b
  2459                           
  2460                           ;CarCom.c: 40: unsigned char SendArray[30];
  2461                           ;CarCom.c: 41: unsigned char COBSArray[30];
  2462                           ;CarCom.c: 43: int j = 0;
  2463  000930  0E00               	movlw	0
  2464  000932  0100               	movlb	0	; () banked
  2465  000934  6FB6               	movwf	(sendData@j+1)& (0+255),b
  2466  000936  0E00               	movlw	0
  2467  000938  6FB5               	movwf	sendData@j& (0+255),b
  2468  00093A                     l3934:
  2469                           
  2470                           ; BSR set to: 0
  2471  00093A  0100               	movlb	0	; () banked
  2472  00093C  51B6               	movf	(sendData@j+1)& (0+255),w,b
  2473  00093E  E113               	bnz	l3944
  2474  000940  0E1E               	movlw	30
  2475  000942  0100               	movlb	0	; () banked
  2476  000944  5DB5               	subwf	sendData@j& (0+255),w,b
  2477  000946  B0D8               	btfsc	status,0,c
  2478  000948  D00E               	goto	l3944
  2479                           
  2480                           ; BSR set to: 0
  2481                           ;CarCom.c: 45: SendArray[j] = 0;
  2482                           
  2483                           ; BSR set to: 0
  2484                           
  2485                           ; BSR set to: 0
  2486  00094A  0E92               	movlw	low sendData@SendArray
  2487  00094C  0100               	movlb	0	; () banked
  2488  00094E  25B5               	addwf	sendData@j& (0+255),w,b
  2489  000950  6ED9               	movwf	fsr2l,c
  2490  000952  0E00               	movlw	high sendData@SendArray
  2491  000954  0100               	movlb	0	; () banked
  2492  000956  21B6               	addwfc	(sendData@j+1)& (0+255),w,b
  2493  000958  6EDA               	movwf	fsr2h,c
  2494  00095A  0E00               	movlw	0
  2495  00095C  6EDF               	movwf	indf2,c
  2496                           
  2497                           ; BSR set to: 0
  2498  00095E  0100               	movlb	0	; () banked
  2499  000960  4BB5               	infsnz	sendData@j& (0+255),f,b
  2500  000962  2BB6               	incf	(sendData@j+1)& (0+255),f,b
  2501  000964  D7EA               	goto	l3934
  2502  000966                     l3944:
  2503                           
  2504                           ; BSR set to: 0
  2505                           ;CarCom.c: 46: }
  2506                           ;CarCom.c: 48: cobs_encode_result result;
  2507                           ;CarCom.c: 50: SendArray[0] = 5+lenth;
  2508  000966  0100               	movlb	0	; () banked
  2509  000968  5172               	movf	sendData@lenth& (0+255),w,b
  2510  00096A  0F05               	addlw	5
  2511  00096C  0100               	movlb	0	; () banked
  2512  00096E  6F92               	movwf	sendData@SendArray& (0+255),b
  2513                           
  2514                           ; BSR set to: 0
  2515                           ;CarCom.c: 51: SendArray[1] = ComandByte;
  2516  000970  C06D  F093         	movff	sendData@ComandByte,sendData@SendArray+1
  2517                           
  2518                           ; BSR set to: 0
  2519                           ;CarCom.c: 52: SendArray[2] = DataTable;
  2520  000974  C06E  F094         	movff	sendData@DataTable,sendData@SendArray+2
  2521                           
  2522                           ; BSR set to: 0
  2523                           ;CarCom.c: 53: SendArray[3] = DataTableIndex;
  2524  000978  C06F  F095         	movff	sendData@DataTableIndex,sendData@SendArray+3
  2525                           
  2526                           ; BSR set to: 0
  2527                           ;CarCom.c: 54: SendArray[4] = lenth;
  2528  00097C  C072  F096         	movff	sendData@lenth,sendData@SendArray+4
  2529                           
  2530                           ; BSR set to: 0
  2531                           ;CarCom.c: 56: unsigned char i = 0;
  2532  000980  0E00               	movlw	0
  2533  000982  0100               	movlb	0	; () banked
  2534  000984  6FB9               	movwf	sendData@i& (0+255),b
  2535                           
  2536                           ; BSR set to: 0
  2537                           ;CarCom.c: 57: int count = 5;
  2538  000986  0E00               	movlw	0
  2539  000988  0100               	movlb	0	; () banked
  2540  00098A  6FB8               	movwf	(sendData@count+1)& (0+255),b
  2541  00098C  0E05               	movlw	5
  2542  00098E  6FB7               	movwf	sendData@count& (0+255),b
  2543  000990  D020               	goto	l3964
  2544  000992                     l3958:
  2545                           
  2546                           ; BSR set to: 0
  2547                           ;CarCom.c: 60: SendArray[i+5] = DTS[i];
  2548  000992  0100               	movlb	0	; () banked
  2549  000994  51B9               	movf	sendData@i& (0+255),w,b
  2550  000996  0D01               	mullw	1
  2551  000998  50F3               	movf	prodl,w,c
  2552  00099A  0100               	movlb	0	; () banked
  2553  00099C  2570               	addwf	sendData@DTS& (0+255),w,b
  2554  00099E  6ED9               	movwf	fsr2l,c
  2555  0009A0  50F4               	movf	prodh,w,c
  2556  0009A2  0100               	movlb	0	; () banked
  2557  0009A4  2171               	addwfc	(sendData@DTS+1)& (0+255),w,b
  2558  0009A6  6EDA               	movwf	fsr2h,c
  2559  0009A8  0100               	movlb	0	; () banked
  2560  0009AA  51B9               	movf	sendData@i& (0+255),w,b
  2561  0009AC  6E29               	movwf	??_sendData& (0+255),c
  2562  0009AE  6A2A               	clrf	(??_sendData+1)& (0+255),c
  2563  0009B0  0E05               	movlw	5
  2564  0009B2  2629               	addwf	??_sendData,f,c
  2565  0009B4  0E00               	movlw	0
  2566  0009B6  222A               	addwfc	??_sendData+1,f,c
  2567  0009B8  0E92               	movlw	low sendData@SendArray
  2568  0009BA  2429               	addwf	??_sendData,w,c
  2569  0009BC  6EE1               	movwf	fsr1l,c
  2570  0009BE  0E00               	movlw	high sendData@SendArray
  2571  0009C0  202A               	addwfc	??_sendData+1,w,c
  2572  0009C2  6EE2               	movwf	fsr1h,c
  2573  0009C4  CFDF FFE7          	movff	indf2,indf1
  2574                           
  2575                           ; BSR set to: 0
  2576                           ;CarCom.c: 61: count++;
  2577  0009C8  0100               	movlb	0	; () banked
  2578  0009CA  4BB7               	infsnz	sendData@count& (0+255),f,b
  2579  0009CC  2BB8               	incf	(sendData@count+1)& (0+255),f,b
  2580                           
  2581                           ; BSR set to: 0
  2582  0009CE  0100               	movlb	0	; () banked
  2583  0009D0  2BB9               	incf	sendData@i& (0+255),f,b
  2584  0009D2                     l3964:
  2585                           
  2586                           ; BSR set to: 0
  2587  0009D2  0100               	movlb	0	; () banked
  2588  0009D4  51B9               	movf	sendData@i& (0+255),w,b
  2589  0009D6  6E29               	movwf	??_sendData& (0+255),c
  2590  0009D8  6A2A               	clrf	(??_sendData+1)& (0+255),c
  2591  0009DA  0100               	movlb	0	; () banked
  2592  0009DC  5172               	movf	sendData@lenth& (0+255),w,b
  2593  0009DE  5C29               	subwf	??_sendData,w,c
  2594  0009E0  0100               	movlb	0	; () banked
  2595  0009E2  5173               	movf	(sendData@lenth+1)& (0+255),w,b
  2596  0009E4  582A               	subwfb	??_sendData+1,w,c
  2597  0009E6  A0D8               	btfss	status,0,c
  2598  0009E8  D7D4               	goto	l3958
  2599                           
  2600                           ; BSR set to: 0
  2601                           ;CarCom.c: 62: }
  2602                           ;CarCom.c: 64: unsigned char CS = CRC8(SendArray, count);
  2603                           
  2604                           ; BSR set to: 0
  2605  0009EA  0E92               	movlw	low sendData@SendArray
  2606  0009EC  6E1D               	movwf	CRC8@data,c
  2607  0009EE  0E00               	movlw	high sendData@SendArray
  2608  0009F0  6E1E               	movwf	CRC8@data+1,c
  2609  0009F2  C0B7  F01F         	movff	sendData@count,CRC8@len
  2610  0009F6  ECAE  F00E         	call	_CRC8	;wreg free
  2611  0009FA  0100               	movlb	0	; () banked
  2612  0009FC  6FB1               	movwf	sendData@CS& (0+255),b
  2613                           
  2614                           ; BSR set to: 0
  2615                           ;CarCom.c: 65: SendArray[count] = CS;
  2616  0009FE  0E92               	movlw	low sendData@SendArray
  2617  000A00  0100               	movlb	0	; () banked
  2618  000A02  25B7               	addwf	sendData@count& (0+255),w,b
  2619  000A04  6ED9               	movwf	fsr2l,c
  2620  000A06  0E00               	movlw	high sendData@SendArray
  2621  000A08  0100               	movlb	0	; () banked
  2622  000A0A  21B8               	addwfc	(sendData@count+1)& (0+255),w,b
  2623  000A0C  6EDA               	movwf	fsr2h,c
  2624  000A0E  C0B1  FFDF         	movff	sendData@CS,indf2
  2625                           
  2626                           ; BSR set to: 0
  2627                           ;CarCom.c: 66: count++;
  2628  000A12  0100               	movlb	0	; () banked
  2629  000A14  4BB7               	infsnz	sendData@count& (0+255),f,b
  2630  000A16  2BB8               	incf	(sendData@count+1)& (0+255),f,b
  2631                           
  2632                           ; BSR set to: 0
  2633                           ;CarCom.c: 67: result = cobs_encode(COBSArray, sizeof(COBSArray), SendArray, count);
  2634  000A18  0E74               	movlw	low sendData@COBSArray
  2635  000A1A  6E1D               	movwf	cobs_encode@dst_buf_ptr,c
  2636  000A1C  0E00               	movlw	high sendData@COBSArray
  2637  000A1E  6E1E               	movwf	cobs_encode@dst_buf_ptr+1,c
  2638  000A20  0E00               	movlw	0
  2639  000A22  6E20               	movwf	cobs_encode@dst_buf_len+1,c
  2640  000A24  0E1E               	movlw	30
  2641  000A26  6E1F               	movwf	cobs_encode@dst_buf_len,c
  2642  000A28  0E92               	movlw	low sendData@SendArray
  2643  000A2A  6E21               	movwf	cobs_encode@src_ptr,c
  2644  000A2C  0E00               	movlw	high sendData@SendArray
  2645  000A2E  6E22               	movwf	cobs_encode@src_ptr+1,c
  2646  000A30  C0B7  F023         	movff	sendData@count,cobs_encode@src_len
  2647  000A34  C0B8  F024         	movff	sendData@count+1,cobs_encode@src_len+1
  2648  000A38  EC5F  F006         	call	_cobs_encode	;wreg free
  2649  000A3C  C01D  F0B2         	movff	?_cobs_encode,sendData@result
  2650  000A40  C01E  F0B3         	movff	?_cobs_encode+1,sendData@result+1
  2651  000A44  C01F  F0B4         	movff	?_cobs_encode+2,sendData@result+2
  2652                           
  2653                           ;CarCom.c: 68: SendArray[0] = whereToSend;
  2654  000A48  C0B0  F092         	movff	sendData@whereToSend,sendData@SendArray
  2655                           
  2656                           ;CarCom.c: 70: for(i = 1;i<result.out_len+1;i++){
  2657  000A4C  0E01               	movlw	1
  2658  000A4E  0100               	movlb	0	; () banked
  2659  000A50  6FB9               	movwf	sendData@i& (0+255),b
  2660  000A52  D01F               	goto	l3982
  2661  000A54                     l3978:
  2662                           
  2663                           ; BSR set to: 0
  2664                           ;CarCom.c: 71: SendArray[i] = COBSArray[i-1];
  2665  000A54  0EFF               	movlw	255
  2666  000A56  6E29               	movwf	??_sendData& (0+255),c
  2667  000A58  0EFF               	movlw	255
  2668  000A5A  6E2A               	movwf	(??_sendData+1)& (0+255),c
  2669  000A5C  0100               	movlb	0	; () banked
  2670  000A5E  51B9               	movf	sendData@i& (0+255),w,b
  2671  000A60  6E2B               	movwf	(??_sendData+2)& (0+255),c
  2672  000A62  6A2C               	clrf	(??_sendData+3)& (0+255),c
  2673  000A64  5029               	movf	??_sendData,w,c
  2674  000A66  262B               	addwf	??_sendData+2,f,c
  2675  000A68  502A               	movf	??_sendData+1,w,c
  2676  000A6A  222C               	addwfc	??_sendData+3,f,c
  2677  000A6C  0E74               	movlw	low sendData@COBSArray
  2678  000A6E  242B               	addwf	??_sendData+2,w,c
  2679  000A70  6ED9               	movwf	fsr2l,c
  2680  000A72  0E00               	movlw	high sendData@COBSArray
  2681  000A74  202C               	addwfc	??_sendData+3,w,c
  2682  000A76  6EDA               	movwf	fsr2h,c
  2683  000A78  0100               	movlb	0	; () banked
  2684  000A7A  51B9               	movf	sendData@i& (0+255),w,b
  2685  000A7C  0D01               	mullw	1
  2686  000A7E  0E92               	movlw	low sendData@SendArray
  2687  000A80  24F3               	addwf	prodl,w,c
  2688  000A82  6EE1               	movwf	fsr1l,c
  2689  000A84  0E00               	movlw	high sendData@SendArray
  2690  000A86  20F4               	addwfc	prodh,w,c
  2691  000A88  6EE2               	movwf	fsr1h,c
  2692  000A8A  CFDF FFE7          	movff	indf2,indf1
  2693                           
  2694                           ; BSR set to: 0
  2695  000A8E  0100               	movlb	0	; () banked
  2696  000A90  2BB9               	incf	sendData@i& (0+255),f,b
  2697  000A92                     l3982:
  2698                           
  2699                           ; BSR set to: 0
  2700  000A92  0E01               	movlw	1
  2701  000A94  0100               	movlb	0	; () banked
  2702  000A96  25B2               	addwf	sendData@result& (0+255),w,b
  2703  000A98  6E29               	movwf	??_sendData& (0+255),c
  2704  000A9A  0E00               	movlw	0
  2705  000A9C  0100               	movlb	0	; () banked
  2706  000A9E  21B3               	addwfc	(sendData@result+1)& (0+255),w,b
  2707  000AA0  6E2A               	movwf	(??_sendData+1)& (0+255),c
  2708  000AA2  0100               	movlb	0	; () banked
  2709  000AA4  51B9               	movf	sendData@i& (0+255),w,b
  2710  000AA6  6E2B               	movwf	(??_sendData+2)& (0+255),c
  2711  000AA8  6A2C               	clrf	(??_sendData+3)& (0+255),c
  2712  000AAA  5029               	movf	??_sendData,w,c
  2713  000AAC  5C2B               	subwf	??_sendData+2,w,c
  2714  000AAE  502A               	movf	??_sendData+1,w,c
  2715  000AB0  582C               	subwfb	??_sendData+3,w,c
  2716  000AB2  A0D8               	btfss	status,0,c
  2717  000AB4  D7CF               	goto	l3978
  2718                           
  2719                           ; BSR set to: 0
  2720                           ;CarCom.c: 72: }
  2721                           ;CarCom.c: 74: for(i = 0;i<result.out_len+2;i++){
  2722                           
  2723                           ; BSR set to: 0
  2724  000AB6  0E00               	movlw	0
  2725  000AB8  0100               	movlb	0	; () banked
  2726  000ABA  6FB9               	movwf	sendData@i& (0+255),b
  2727  000ABC  D00E               	goto	l3990
  2728  000ABE                     l3986:
  2729                           
  2730                           ; BSR set to: 0
  2731                           ;CarCom.c: 75: Send_put(SendArray[i]);
  2732  000ABE  0100               	movlb	0	; () banked
  2733  000AC0  51B9               	movf	sendData@i& (0+255),w,b
  2734  000AC2  0D01               	mullw	1
  2735  000AC4  0E92               	movlw	low sendData@SendArray
  2736  000AC6  24F3               	addwf	prodl,w,c
  2737  000AC8  6ED9               	movwf	fsr2l,c
  2738  000ACA  0E00               	movlw	high sendData@SendArray
  2739  000ACC  20F4               	addwfc	prodh,w,c
  2740  000ACE  6EDA               	movwf	fsr2h,c
  2741  000AD0  50DF               	movf	indf2,w,c
  2742  000AD2  ECDB  F00F         	call	_Send_put
  2743  000AD6  0100               	movlb	0	; () banked
  2744  000AD8  2BB9               	incf	sendData@i& (0+255),f,b
  2745  000ADA                     l3990:
  2746                           
  2747                           ; BSR set to: 0
  2748  000ADA  0E02               	movlw	2
  2749  000ADC  0100               	movlb	0	; () banked
  2750  000ADE  25B2               	addwf	sendData@result& (0+255),w,b
  2751  000AE0  6E29               	movwf	??_sendData& (0+255),c
  2752  000AE2  0E00               	movlw	0
  2753  000AE4  0100               	movlb	0	; () banked
  2754  000AE6  21B3               	addwfc	(sendData@result+1)& (0+255),w,b
  2755  000AE8  6E2A               	movwf	(??_sendData+1)& (0+255),c
  2756  000AEA  0100               	movlb	0	; () banked
  2757  000AEC  51B9               	movf	sendData@i& (0+255),w,b
  2758  000AEE  6E2B               	movwf	(??_sendData+2)& (0+255),c
  2759  000AF0  6A2C               	clrf	(??_sendData+3)& (0+255),c
  2760  000AF2  5029               	movf	??_sendData,w,c
  2761  000AF4  5C2B               	subwf	??_sendData+2,w,c
  2762  000AF6  502A               	movf	??_sendData+1,w,c
  2763  000AF8  582C               	subwfb	??_sendData+3,w,c
  2764  000AFA  B0D8               	btfsc	status,0,c
  2765  000AFC  0012               	return	
  2766  000AFE  D7DF               	goto	l3986
  2767  000B00                     __end_of_sendData:
  2768                           	opt stack 0
  2769                           tblptru	equ	0xFF8
  2770                           tblptrh	equ	0xFF7
  2771                           tblptrl	equ	0xFF6
  2772                           tablat	equ	0xFF5
  2773                           prodh	equ	0xFF4
  2774                           prodl	equ	0xFF3
  2775                           intcon	equ	0xFF2
  2776                           postinc0	equ	0xFEE
  2777                           wreg	equ	0xFE8
  2778                           indf1	equ	0xFE7
  2779                           postdec1	equ	0xFE5
  2780                           fsr1h	equ	0xFE2
  2781                           fsr1l	equ	0xFE1
  2782                           indf2	equ	0xFDF
  2783                           postinc2	equ	0xFDE
  2784                           postdec2	equ	0xFDD
  2785                           fsr2h	equ	0xFDA
  2786                           fsr2l	equ	0xFD9
  2787                           status	equ	0xFD8
  2788                           
  2789 ;; *************** function _cobs_encode *****************
  2790 ;; Defined at:
  2791 ;;		line 29 in file "COBS.c"
  2792 ;; Parameters:    Size  Location     Type
  2793 ;;  dst_buf_ptr     2   28[COMRAM] PTR unsigned char 
  2794 ;;		 -> sendData@COBSArray(30), 
  2795 ;;  dst_buf_len     2   30[COMRAM] unsigned int 
  2796 ;;  src_ptr         2   32[COMRAM] PTR const unsigned char 
  2797 ;;		 -> sendData@SendArray(30), 
  2798 ;;  src_len         2   34[COMRAM] unsigned int 
  2799 ;; Auto vars:     Size  Location     Type
  2800 ;;  result          3   10[BANK0 ] struct .
  2801 ;;  dst_write_pt    2    8[BANK0 ] PTR unsigned char 
  2802 ;;		 -> sendData@COBSArray(30), 
  2803 ;;  dst_code_wri    2    6[BANK0 ] PTR unsigned char 
  2804 ;;		 -> sendData@COBSArray(30), 
  2805 ;;  dst_buf_end_    2    3[BANK0 ] PTR unsigned char 
  2806 ;;		 -> sendData@COBSArray(30), 
  2807 ;;  src_end_ptr     2    0[BANK0 ] PTR const unsigned char 
  2808 ;;		 -> sendData@SendArray(30), 
  2809 ;;  search_len      1    5[BANK0 ] unsigned char 
  2810 ;;  src_byte        1    2[BANK0 ] unsigned char 
  2811 ;; Return value:  Size  Location     Type
  2812 ;;                  3   28[COMRAM] struct .
  2813 ;; Registers used:
  2814 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2815 ;; Tracked objects:
  2816 ;;		On entry : 0/0
  2817 ;;		On exit  : 0/0
  2818 ;;		Unchanged: 0/0
  2819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2820 ;;      Params:         8       0       0       0       0       0       0
  2821 ;;      Locals:         0      13       0       0       0       0       0
  2822 ;;      Temps:          2       0       0       0       0       0       0
  2823 ;;      Totals:        10      13       0       0       0       0       0
  2824 ;;Total ram usage:       23 bytes
  2825 ;; Hardware stack levels used:    1
  2826 ;; Hardware stack levels required when called:    6
  2827 ;; This function calls:
  2828 ;;		Nothing
  2829 ;; This function is called by:
  2830 ;;		_sendData
  2831 ;; This function uses a non-reentrant model
  2832 ;;
  2833                           
  2834                           	psect	text9
  2835  000CBE                     __ptext9:
  2836                           	opt stack 0
  2837  000CBE                     _cobs_encode:
  2838                           	opt stack 20
  2839                           
  2840                           ;COBS.c: 31: cobs_encode_result result = { 0, COBS_ENCODE_OK };
  2841                           
  2842                           ; BSR set to: 0
  2843                           ;incstack = 0
  2844  000CBE  C033  F06A         	movff	cobs_encode@F180,cobs_encode@result
  2845  000CC2  C034  F06B         	movff	cobs_encode@F180+1,cobs_encode@result+1
  2846  000CC6  C035  F06C         	movff	cobs_encode@F180+2,cobs_encode@result+2
  2847                           
  2848                           ;COBS.c: 32: const uint8_t * src_end_ptr = src_ptr + src_len;
  2849  000CCA  5023               	movf	cobs_encode@src_len,w,c
  2850  000CCC  2421               	addwf	cobs_encode@src_ptr,w,c
  2851  000CCE  0100               	movlb	0	; () banked
  2852  000CD0  6F60               	movwf	cobs_encode@src_end_ptr& (0+255),b
  2853  000CD2  5024               	movf	cobs_encode@src_len+1,w,c
  2854  000CD4  2022               	addwfc	cobs_encode@src_ptr+1,w,c
  2855  000CD6  0100               	movlb	0	; () banked
  2856  000CD8  6F61               	movwf	(cobs_encode@src_end_ptr+1)& (0+255),b
  2857                           
  2858                           ;COBS.c: 33: uint8_t * dst_buf_end_ptr = dst_buf_ptr + dst_buf_len;
  2859  000CDA  501F               	movf	cobs_encode@dst_buf_len,w,c
  2860  000CDC  241D               	addwf	cobs_encode@dst_buf_ptr,w,c
  2861  000CDE  0100               	movlb	0	; () banked
  2862  000CE0  6F63               	movwf	cobs_encode@dst_buf_end_ptr& (0+255),b
  2863  000CE2  5020               	movf	cobs_encode@dst_buf_len+1,w,c
  2864  000CE4  201E               	addwfc	cobs_encode@dst_buf_ptr+1,w,c
  2865  000CE6  0100               	movlb	0	; () banked
  2866  000CE8  6F64               	movwf	(cobs_encode@dst_buf_end_ptr+1)& (0+255),b
  2867                           
  2868                           ;COBS.c: 34: uint8_t * dst_code_write_ptr = dst_buf_ptr;
  2869  000CEA  C01D  F066         	movff	cobs_encode@dst_buf_ptr,cobs_encode@dst_code_write_ptr
  2870  000CEE  C01E  F067         	movff	cobs_encode@dst_buf_ptr+1,cobs_encode@dst_code_write_ptr+1
  2871                           
  2872                           ;COBS.c: 35: uint8_t * dst_write_ptr = dst_code_write_ptr + 1;
  2873  000CF2  0E01               	movlw	1
  2874  000CF4  0100               	movlb	0	; () banked
  2875  000CF6  2566               	addwf	cobs_encode@dst_code_write_ptr& (0+255),w,b
  2876  000CF8  0100               	movlb	0	; () banked
  2877  000CFA  6F68               	movwf	cobs_encode@dst_write_ptr& (0+255),b
  2878  000CFC  0E00               	movlw	0
  2879  000CFE  0100               	movlb	0	; () banked
  2880  000D00  2167               	addwfc	(cobs_encode@dst_code_write_ptr+1)& (0+255),w,b
  2881  000D02  0100               	movlb	0	; () banked
  2882  000D04  6F69               	movwf	(cobs_encode@dst_write_ptr+1)& (0+255),b
  2883                           
  2884                           ; BSR set to: 0
  2885                           ;COBS.c: 36: uint8_t src_byte = 0;
  2886  000D06  0E00               	movlw	0
  2887  000D08  0100               	movlb	0	; () banked
  2888  000D0A  6F62               	movwf	cobs_encode@src_byte& (0+255),b
  2889                           
  2890                           ; BSR set to: 0
  2891                           ;COBS.c: 37: uint8_t search_len = 1;
  2892  000D0C  0E01               	movlw	1
  2893  000D0E  0100               	movlb	0	; () banked
  2894  000D10  6F65               	movwf	cobs_encode@search_len& (0+255),b
  2895                           
  2896                           ;COBS.c: 41: if ((dst_buf_ptr == (0)) || (src_ptr == (0)))
  2897  000D12  501D               	movf	cobs_encode@dst_buf_ptr,w,c
  2898  000D14  101E               	iorwf	cobs_encode@dst_buf_ptr+1,w,c
  2899  000D16  B4D8               	btfsc	status,2,c
  2900  000D18  D004               	goto	l3786
  2901                           
  2902                           ; BSR set to: 0
  2903  000D1A  5021               	movf	cobs_encode@src_ptr,w,c
  2904  000D1C  1022               	iorwf	cobs_encode@src_ptr+1,w,c
  2905  000D1E  A4D8               	btfss	status,2,c
  2906  000D20  D00A               	goto	l3792
  2907  000D22                     l3786:
  2908                           
  2909                           ; BSR set to: 0
  2910                           ;COBS.c: 42: {
  2911                           ;COBS.c: 43: result.status = COBS_ENCODE_NULL_POINTER;
  2912  000D22  0E01               	movlw	1
  2913  000D24  0100               	movlb	0	; () banked
  2914  000D26  6F6C               	movwf	(cobs_encode@result+2)& (0+255),b
  2915                           
  2916                           ; BSR set to: 0
  2917                           ;COBS.c: 44: return result;
  2918  000D28  C06A  F01D         	movff	cobs_encode@result,?_cobs_encode
  2919  000D2C  C06B  F01E         	movff	cobs_encode@result+1,?_cobs_encode+1
  2920  000D30  C06C  F01F         	movff	cobs_encode@result+2,?_cobs_encode+2
  2921                           
  2922                           ; BSR set to: 0
  2923  000D34  0012               	return	
  2924  000D36                     l3792:
  2925                           
  2926                           ; BSR set to: 0
  2927                           ;COBS.c: 45: }
  2928                           ;COBS.c: 47: if (src_len != 0)
  2929  000D36  5023               	movf	cobs_encode@src_len,w,c
  2930  000D38  1024               	iorwf	cobs_encode@src_len+1,w,c
  2931  000D3A  B4D8               	btfsc	status,2,c
  2932  000D3C  D05C               	goto	l3836
  2933  000D3E                     l3794:
  2934                           
  2935                           ; BSR set to: 0
  2936                           ;COBS.c: 51: {
  2937                           ;COBS.c: 53: if (dst_write_ptr >= dst_buf_end_ptr)
  2938  000D3E  0100               	movlb	0	; () banked
  2939  000D40  5163               	movf	cobs_encode@dst_buf_end_ptr& (0+255),w,b
  2940  000D42  0100               	movlb	0	; () banked
  2941  000D44  5D68               	subwf	cobs_encode@dst_write_ptr& (0+255),w,b
  2942  000D46  0100               	movlb	0	; () banked
  2943  000D48  5164               	movf	(cobs_encode@dst_buf_end_ptr+1)& (0+255),w,b
  2944  000D4A  0100               	movlb	0	; () banked
  2945  000D4C  5969               	subwfb	(cobs_encode@dst_write_ptr+1)& (0+255),w,b
  2946  000D4E  A0D8               	btfss	status,0,c
  2947  000D50  D003               	goto	l3798
  2948                           
  2949                           ; BSR set to: 0
  2950                           ;COBS.c: 54: {
  2951                           ;COBS.c: 55: result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
  2952  000D52  0100               	movlb	0	; () banked
  2953  000D54  836C               	bsf	(cobs_encode@result+2)& (0+255),1,b
  2954                           
  2955                           ;COBS.c: 56: break;
  2956  000D56  D04F               	goto	l3836
  2957  000D58                     l3798:
  2958                           
  2959                           ; BSR set to: 0
  2960                           ;COBS.c: 57: }
  2961                           ;COBS.c: 59: src_byte = *src_ptr++;
  2962  000D58  C021  FFD9         	movff	cobs_encode@src_ptr,fsr2l
  2963  000D5C  C022  FFDA         	movff	cobs_encode@src_ptr+1,fsr2h
  2964  000D60  50DF               	movf	indf2,w,c
  2965  000D62  0100               	movlb	0	; () banked
  2966  000D64  6F62               	movwf	cobs_encode@src_byte& (0+255),b
  2967                           
  2968                           ; BSR set to: 0
  2969  000D66  4A21               	infsnz	cobs_encode@src_ptr,f,c
  2970  000D68  2A22               	incf	cobs_encode@src_ptr+1,f,c
  2971                           
  2972                           ; BSR set to: 0
  2973                           ;COBS.c: 60: if (src_byte == 0)
  2974  000D6A  0100               	movlb	0	; () banked
  2975  000D6C  5162               	movf	cobs_encode@src_byte& (0+255),w,b
  2976  000D6E  0100               	movlb	0	; () banked
  2977  000D70  A4D8               	btfss	status,2,c
  2978  000D72  D019               	goto	l3816
  2979                           
  2980                           ; BSR set to: 0
  2981                           ;COBS.c: 61: {
  2982                           ;COBS.c: 63: *dst_code_write_ptr = search_len;
  2983  000D74  C066  FFD9         	movff	cobs_encode@dst_code_write_ptr,fsr2l
  2984  000D78  C067  FFDA         	movff	cobs_encode@dst_code_write_ptr+1,fsr2h
  2985  000D7C  C065  FFDF         	movff	cobs_encode@search_len,indf2
  2986                           
  2987                           ; BSR set to: 0
  2988                           ;COBS.c: 64: dst_code_write_ptr = dst_write_ptr++;
  2989  000D80  C068  F066         	movff	cobs_encode@dst_write_ptr,cobs_encode@dst_code_write_ptr
  2990  000D84  C069  F067         	movff	cobs_encode@dst_write_ptr+1,cobs_encode@dst_code_write_ptr+1
  2991                           
  2992                           ; BSR set to: 0
  2993  000D88  0100               	movlb	0	; () banked
  2994  000D8A  4B68               	infsnz	cobs_encode@dst_write_ptr& (0+255),f,b
  2995  000D8C  2B69               	incf	(cobs_encode@dst_write_ptr+1)& (0+255),f,b
  2996                           
  2997                           ; BSR set to: 0
  2998                           ;COBS.c: 65: search_len = 1;
  2999  000D8E  0E01               	movlw	1
  3000  000D90  0100               	movlb	0	; () banked
  3001  000D92  6F65               	movwf	cobs_encode@search_len& (0+255),b
  3002                           
  3003                           ; BSR set to: 0
  3004                           ;COBS.c: 66: if (src_ptr >= src_end_ptr)
  3005  000D94  0100               	movlb	0	; () banked
  3006  000D96  5160               	movf	cobs_encode@src_end_ptr& (0+255),w,b
  3007  000D98  5C21               	subwf	cobs_encode@src_ptr,w,c
  3008  000D9A  0100               	movlb	0	; () banked
  3009  000D9C  5161               	movf	(cobs_encode@src_end_ptr+1)& (0+255),w,b
  3010  000D9E  5822               	subwfb	cobs_encode@src_ptr+1,w,c
  3011  000DA0  B0D8               	btfsc	status,0,c
  3012  000DA2  D029               	goto	l3836
  3013  000DA4  D7CC               	goto	l3794
  3014  000DA6                     l3816:
  3015                           
  3016                           ; BSR set to: 0
  3017                           ;COBS.c: 71: else
  3018                           ;COBS.c: 72: {
  3019                           ;COBS.c: 74: *dst_write_ptr++ = src_byte;
  3020  000DA6  C068  FFD9         	movff	cobs_encode@dst_write_ptr,fsr2l
  3021  000DAA  C069  FFDA         	movff	cobs_encode@dst_write_ptr+1,fsr2h
  3022  000DAE  C062  FFDF         	movff	cobs_encode@src_byte,indf2
  3023                           
  3024                           ; BSR set to: 0
  3025  000DB2  0100               	movlb	0	; () banked
  3026  000DB4  4B68               	infsnz	cobs_encode@dst_write_ptr& (0+255),f,b
  3027  000DB6  2B69               	incf	(cobs_encode@dst_write_ptr+1)& (0+255),f,b
  3028                           
  3029                           ; BSR set to: 0
  3030                           ;COBS.c: 75: search_len++;
  3031  000DB8  0100               	movlb	0	; () banked
  3032  000DBA  2B65               	incf	cobs_encode@search_len& (0+255),f,b
  3033                           
  3034                           ; BSR set to: 0
  3035                           ;COBS.c: 76: if (src_ptr >= src_end_ptr)
  3036  000DBC  0100               	movlb	0	; () banked
  3037  000DBE  5160               	movf	cobs_encode@src_end_ptr& (0+255),w,b
  3038  000DC0  5C21               	subwf	cobs_encode@src_ptr,w,c
  3039  000DC2  0100               	movlb	0	; () banked
  3040  000DC4  5161               	movf	(cobs_encode@src_end_ptr+1)& (0+255),w,b
  3041  000DC6  5822               	subwfb	cobs_encode@src_ptr+1,w,c
  3042  000DC8  B0D8               	btfsc	status,0,c
  3043  000DCA  D015               	goto	l3836
  3044                           
  3045                           ; BSR set to: 0
  3046                           ;COBS.c: 79: }
  3047                           ;COBS.c: 80: if (search_len == 0xFF)
  3048                           
  3049                           ; BSR set to: 0
  3050                           
  3051                           ; BSR set to: 0
  3052                           ;COBS.c: 77: {
  3053                           ;COBS.c: 78: break;
  3054  000DCC  0100               	movlb	0	; () banked
  3055  000DCE  2965               	incf	cobs_encode@search_len& (0+255),w,b
  3056  000DD0  A4D8               	btfss	status,2,c
  3057  000DD2  D7B5               	goto	l3794
  3058                           
  3059                           ; BSR set to: 0
  3060                           ;COBS.c: 81: {
  3061                           ;COBS.c: 84: *dst_code_write_ptr = search_len;
  3062  000DD4  C066  FFD9         	movff	cobs_encode@dst_code_write_ptr,fsr2l
  3063  000DD8  C067  FFDA         	movff	cobs_encode@dst_code_write_ptr+1,fsr2h
  3064  000DDC  C065  FFDF         	movff	cobs_encode@search_len,indf2
  3065                           
  3066                           ; BSR set to: 0
  3067                           ;COBS.c: 85: dst_code_write_ptr = dst_write_ptr++;
  3068  000DE0  C068  F066         	movff	cobs_encode@dst_write_ptr,cobs_encode@dst_code_write_ptr
  3069  000DE4  C069  F067         	movff	cobs_encode@dst_write_ptr+1,cobs_encode@dst_code_write_ptr+1
  3070                           
  3071                           ; BSR set to: 0
  3072  000DE8  0100               	movlb	0	; () banked
  3073  000DEA  4B68               	infsnz	cobs_encode@dst_write_ptr& (0+255),f,b
  3074  000DEC  2B69               	incf	(cobs_encode@dst_write_ptr+1)& (0+255),f,b
  3075                           
  3076                           ; BSR set to: 0
  3077                           ;COBS.c: 86: search_len = 1;
  3078  000DEE  0E01               	movlw	1
  3079  000DF0  0100               	movlb	0	; () banked
  3080  000DF2  6F65               	movwf	cobs_encode@search_len& (0+255),b
  3081                           
  3082                           ; BSR set to: 0
  3083                           ;COBS.c: 87: }
  3084                           ;COBS.c: 88: }
  3085                           ;COBS.c: 89: }
  3086                           
  3087                           ; BSR set to: 0
  3088  000DF4  D7A4               	goto	l3794
  3089  000DF6                     l3836:
  3090                           
  3091                           ; BSR set to: 0
  3092                           ;COBS.c: 90: }
  3093                           ;COBS.c: 96: if (dst_code_write_ptr >= dst_buf_end_ptr)
  3094  000DF6  0100               	movlb	0	; () banked
  3095  000DF8  5163               	movf	cobs_encode@dst_buf_end_ptr& (0+255),w,b
  3096  000DFA  0100               	movlb	0	; () banked
  3097  000DFC  5D66               	subwf	cobs_encode@dst_code_write_ptr& (0+255),w,b
  3098  000DFE  0100               	movlb	0	; () banked
  3099  000E00  5164               	movf	(cobs_encode@dst_buf_end_ptr+1)& (0+255),w,b
  3100  000E02  0100               	movlb	0	; () banked
  3101  000E04  5967               	subwfb	(cobs_encode@dst_code_write_ptr+1)& (0+255),w,b
  3102  000E06  A0D8               	btfss	status,0,c
  3103  000E08  D007               	goto	l3842
  3104                           
  3105                           ; BSR set to: 0
  3106                           ;COBS.c: 97: {
  3107                           ;COBS.c: 99: result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
  3108  000E0A  0100               	movlb	0	; () banked
  3109  000E0C  836C               	bsf	(cobs_encode@result+2)& (0+255),1,b
  3110                           
  3111                           ; BSR set to: 0
  3112                           ;COBS.c: 100: dst_write_ptr = dst_buf_end_ptr;
  3113  000E0E  C063  F068         	movff	cobs_encode@dst_buf_end_ptr,cobs_encode@dst_write_ptr
  3114  000E12  C064  F069         	movff	cobs_encode@dst_buf_end_ptr+1,cobs_encode@dst_write_ptr+1
  3115                           
  3116                           ;COBS.c: 101: }
  3117  000E16  D006               	goto	l3844
  3118  000E18                     l3842:
  3119                           
  3120                           ; BSR set to: 0
  3121                           ;COBS.c: 102: else
  3122                           ;COBS.c: 103: {
  3123                           ;COBS.c: 105: *dst_code_write_ptr = search_len;
  3124  000E18  C066  FFD9         	movff	cobs_encode@dst_code_write_ptr,fsr2l
  3125  000E1C  C067  FFDA         	movff	cobs_encode@dst_code_write_ptr+1,fsr2h
  3126  000E20  C065  FFDF         	movff	cobs_encode@search_len,indf2
  3127  000E24                     l3844:
  3128                           
  3129                           ; BSR set to: 0
  3130                           ;COBS.c: 106: }
  3131                           ;COBS.c: 109: result.out_len = dst_write_ptr - dst_buf_ptr;
  3132  000E24  C01D  F025         	movff	cobs_encode@dst_buf_ptr,??_cobs_encode
  3133  000E28  C01E  F026         	movff	cobs_encode@dst_buf_ptr+1,??_cobs_encode+1
  3134  000E2C  1E25               	comf	??_cobs_encode,f,c
  3135  000E2E  1E26               	comf	??_cobs_encode+1,f,c
  3136  000E30  4A25               	infsnz	??_cobs_encode,f,c
  3137  000E32  2A26               	incf	??_cobs_encode+1,f,c
  3138  000E34  0100               	movlb	0	; () banked
  3139  000E36  5168               	movf	cobs_encode@dst_write_ptr& (0+255),w,b
  3140  000E38  2425               	addwf	??_cobs_encode,w,c
  3141  000E3A  0100               	movlb	0	; () banked
  3142  000E3C  6F6A               	movwf	cobs_encode@result& (0+255),b
  3143  000E3E  0100               	movlb	0	; () banked
  3144  000E40  5169               	movf	(cobs_encode@dst_write_ptr+1)& (0+255),w,b
  3145  000E42  2026               	addwfc	??_cobs_encode+1,w,c
  3146  000E44  0100               	movlb	0	; () banked
  3147  000E46  6F6B               	movwf	(cobs_encode@result+1)& (0+255),b
  3148                           
  3149                           ; BSR set to: 0
  3150                           ;COBS.c: 111: return result;
  3151  000E48  C06A  F01D         	movff	cobs_encode@result,?_cobs_encode
  3152  000E4C  C06B  F01E         	movff	cobs_encode@result+1,?_cobs_encode+1
  3153  000E50  C06C  F01F         	movff	cobs_encode@result+2,?_cobs_encode+2
  3154  000E54  0012               	return	
  3155  000E56                     __end_of_cobs_encode:
  3156                           	opt stack 0
  3157                           tblptru	equ	0xFF8
  3158                           tblptrh	equ	0xFF7
  3159                           tblptrl	equ	0xFF6
  3160                           tablat	equ	0xFF5
  3161                           prodh	equ	0xFF4
  3162                           prodl	equ	0xFF3
  3163                           intcon	equ	0xFF2
  3164                           postinc0	equ	0xFEE
  3165                           wreg	equ	0xFE8
  3166                           indf1	equ	0xFE7
  3167                           postdec1	equ	0xFE5
  3168                           fsr1h	equ	0xFE2
  3169                           fsr1l	equ	0xFE1
  3170                           indf2	equ	0xFDF
  3171                           postinc2	equ	0xFDE
  3172                           postdec2	equ	0xFDD
  3173                           fsr2h	equ	0xFDA
  3174                           fsr2l	equ	0xFD9
  3175                           status	equ	0xFD8
  3176                           
  3177 ;; *************** function _Send_put *****************
  3178 ;; Defined at:
  3179 ;;		line 129 in file "UART.c"
  3180 ;; Parameters:    Size  Location     Type
  3181 ;;  _data           1    wreg     unsigned char 
  3182 ;; Auto vars:     Size  Location     Type
  3183 ;;  _data           1   39[COMRAM] unsigned char 
  3184 ;; Return value:  Size  Location     Type
  3185 ;;                  1    wreg      void 
  3186 ;; Registers used:
  3187 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3188 ;; Tracked objects:
  3189 ;;		On entry : 0/0
  3190 ;;		On exit  : 0/0
  3191 ;;		Unchanged: 0/0
  3192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3193 ;;      Params:         0       0       0       0       0       0       0
  3194 ;;      Locals:         1       0       0       0       0       0       0
  3195 ;;      Temps:          0       0       0       0       0       0       0
  3196 ;;      Totals:         1       0       0       0       0       0       0
  3197 ;;Total ram usage:        1 bytes
  3198 ;; Hardware stack levels used:    1
  3199 ;; Hardware stack levels required when called:    8
  3200 ;; This function calls:
  3201 ;;		_UART_buff_get
  3202 ;;		_UART_buff_put
  3203 ;; This function is called by:
  3204 ;;		_sendData
  3205 ;;		_putch
  3206 ;; This function uses a non-reentrant model
  3207 ;;
  3208                           
  3209                           	psect	text10
  3210  001FB6                     __ptext10:
  3211                           	opt stack 0
  3212  001FB6                     _Send_put:
  3213                           	opt stack 18
  3214                           
  3215                           ; BSR set to: 0
  3216                           ;incstack = 0
  3217                           ;Send_put@_data stored from wreg
  3218  001FB6  6E28               	movwf	Send_put@_data,c
  3219                           
  3220                           ;UART.c: 130: UART_buff_put(&output_buffer, _data);
  3221  001FB8  0E00               	movlw	low _output_buffer
  3222  001FBA  6E23               	movwf	UART_buff_put@_this,c
  3223  001FBC  0E02               	movlw	high _output_buffer
  3224  001FBE  6E24               	movwf	UART_buff_put@_this+1,c
  3225  001FC0  C028  F025         	movff	Send_put@_data,UART_buff_put@c
  3226  001FC4  EC2B  F007         	call	_UART_buff_put	;wreg free
  3227                           
  3228                           ;UART.c: 131: if (Transmit_stall == 1) {
  3229  001FC8  0441               	decf	_Transmit_stall,w,c
  3230  001FCA  A4D8               	btfss	status,2,c
  3231  001FCC  0012               	return	
  3232                           
  3233                           ;UART.c: 132: Transmit_stall = 0;
  3234  001FCE  0E00               	movlw	0
  3235  001FD0  6E41               	movwf	_Transmit_stall,c
  3236                           
  3237                           ;UART.c: 133: TXREG1 = UART_buff_get(&output_buffer);
  3238  001FD2  0E00               	movlw	low _output_buffer
  3239  001FD4  6E23               	movwf	UART_buff_get@_this,c
  3240  001FD6  0E02               	movlw	high _output_buffer
  3241  001FD8  6E24               	movwf	UART_buff_get@_this+1,c
  3242  001FDA  ECA2  F00B         	call	_UART_buff_get	;wreg free
  3243  001FDE  6EAD               	movwf	4013,c	;volatile
  3244                           
  3245                           ;UART.c: 134: PIE1bits.TX1IE = 1;
  3246  001FE0  889D               	bsf	3997,4,c	;volatile
  3247  001FE2  0012               	return	
  3248  001FE4                     __end_of_Send_put:
  3249                           	opt stack 0
  3250                           tblptru	equ	0xFF8
  3251                           tblptrh	equ	0xFF7
  3252                           tblptrl	equ	0xFF6
  3253                           tablat	equ	0xFF5
  3254                           prodh	equ	0xFF4
  3255                           prodl	equ	0xFF3
  3256                           intcon	equ	0xFF2
  3257                           postinc0	equ	0xFEE
  3258                           wreg	equ	0xFE8
  3259                           indf1	equ	0xFE7
  3260                           postdec1	equ	0xFE5
  3261                           fsr1h	equ	0xFE2
  3262                           fsr1l	equ	0xFE1
  3263                           indf2	equ	0xFDF
  3264                           postinc2	equ	0xFDE
  3265                           postdec2	equ	0xFDD
  3266                           fsr2h	equ	0xFDA
  3267                           fsr2l	equ	0xFD9
  3268                           status	equ	0xFD8
  3269                           
  3270 ;; *************** function _UART_buff_put *****************
  3271 ;; Defined at:
  3272 ;;		line 67 in file "UART.c"
  3273 ;; Parameters:    Size  Location     Type
  3274 ;;  _this           2   34[COMRAM] PTR struct UART_ring_buf
  3275 ;;		 -> output_buffer(106), input_buffer(106), 
  3276 ;;  c               1   36[COMRAM] const unsigned char 
  3277 ;; Auto vars:     Size  Location     Type
  3278 ;;		None
  3279 ;; Return value:  Size  Location     Type
  3280 ;;                  1    wreg      void 
  3281 ;; Registers used:
  3282 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3283 ;; Tracked objects:
  3284 ;;		On entry : 0/0
  3285 ;;		On exit  : 0/0
  3286 ;;		Unchanged: 0/0
  3287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3288 ;;      Params:         3       0       0       0       0       0       0
  3289 ;;      Locals:         0       0       0       0       0       0       0
  3290 ;;      Temps:          2       0       0       0       0       0       0
  3291 ;;      Totals:         5       0       0       0       0       0       0
  3292 ;;Total ram usage:        5 bytes
  3293 ;; Hardware stack levels used:    1
  3294 ;; Hardware stack levels required when called:    7
  3295 ;; This function calls:
  3296 ;;		_UART_buff_modulo_inc
  3297 ;; This function is called by:
  3298 ;;		_Send_put
  3299 ;; This function uses a non-reentrant model
  3300 ;;
  3301                           
  3302                           	psect	text11
  3303  000E56                     __ptext11:
  3304                           	opt stack 0
  3305  000E56                     _UART_buff_put:
  3306                           	opt stack 18
  3307                           
  3308                           ;UART.c: 68: if (_this->count < 100) {
  3309                           
  3310                           ;incstack = 0
  3311  000E56  EE20 F068          	lfsr	2,104
  3312  000E5A  5023               	movf	UART_buff_put@_this,w,c
  3313  000E5C  26D9               	addwf	fsr2l,f,c
  3314  000E5E  5024               	movf	UART_buff_put@_this+1,w,c
  3315  000E60  22DA               	addwfc	fsr2h,f,c
  3316  000E62  0E01               	movlw	1
  3317  000E64  BEDB               	btfsc	plusw2,7,c
  3318  000E66  D007               	goto	l3702
  3319  000E68  0E01               	movlw	1
  3320  000E6A  50DB               	movf	plusw2,w,c
  3321  000E6C  E13A               	bnz	l3708
  3322  000E6E  0E64               	movlw	100
  3323  000E70  5CDE               	subwf	postinc2,w,c
  3324  000E72  B0D8               	btfsc	status,0,c
  3325  000E74  D036               	goto	l3708
  3326  000E76                     l3702:
  3327                           
  3328                           ;UART.c: 69: _this->buf[_this->head] = c;
  3329  000E76  EE20 F064          	lfsr	2,100
  3330  000E7A  5023               	movf	UART_buff_put@_this,w,c
  3331  000E7C  26D9               	addwf	fsr2l,f,c
  3332  000E7E  5024               	movf	UART_buff_put@_this+1,w,c
  3333  000E80  22DA               	addwfc	fsr2h,f,c
  3334  000E82  CFDE F026          	movff	postinc2,??_UART_buff_put
  3335  000E86  CFDD F027          	movff	postdec2,??_UART_buff_put+1
  3336  000E8A  5026               	movf	??_UART_buff_put,w,c
  3337  000E8C  2423               	addwf	UART_buff_put@_this,w,c
  3338  000E8E  6ED9               	movwf	fsr2l,c
  3339  000E90  5027               	movf	??_UART_buff_put+1,w,c
  3340  000E92  2024               	addwfc	UART_buff_put@_this+1,w,c
  3341  000E94  6EDA               	movwf	fsr2h,c
  3342  000E96  C025  FFDF         	movff	UART_buff_put@c,indf2
  3343                           
  3344                           ;UART.c: 70: _this->head = UART_buff_modulo_inc(_this->head, 100);
  3345  000E9A  EE20 F064          	lfsr	2,100
  3346  000E9E  5023               	movf	UART_buff_put@_this,w,c
  3347  000EA0  26D9               	addwf	fsr2l,f,c
  3348  000EA2  5024               	movf	UART_buff_put@_this+1,w,c
  3349  000EA4  22DA               	addwfc	fsr2h,f,c
  3350  000EA6  CFDE F01D          	movff	postinc2,UART_buff_modulo_inc@value
  3351  000EAA  CFDD F01E          	movff	postdec2,UART_buff_modulo_inc@value+1
  3352  000EAE  0E00               	movlw	0
  3353  000EB0  6E20               	movwf	UART_buff_modulo_inc@modulus+1,c
  3354  000EB2  0E64               	movlw	100
  3355  000EB4  6E1F               	movwf	UART_buff_modulo_inc@modulus,c
  3356  000EB6  EC08  F010         	call	_UART_buff_modulo_inc	;wreg free
  3357  000EBA  EE20 F064          	lfsr	2,100
  3358  000EBE  5023               	movf	UART_buff_put@_this,w,c
  3359  000EC0  26D9               	addwf	fsr2l,f,c
  3360  000EC2  5024               	movf	UART_buff_put@_this+1,w,c
  3361  000EC4  22DA               	addwfc	fsr2h,f,c
  3362  000EC6  C01D  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3363  000ECA  C01E  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3364                           
  3365                           ;UART.c: 71: ++_this->count;
  3366  000ECE  EE20 F068          	lfsr	2,104
  3367  000ED2  5023               	movf	UART_buff_put@_this,w,c
  3368  000ED4  26D9               	addwf	fsr2l,f,c
  3369  000ED6  5024               	movf	UART_buff_put@_this+1,w,c
  3370  000ED8  22DA               	addwfc	fsr2h,f,c
  3371  000EDA  2ADE               	incf	postinc2,f,c
  3372  000EDC  0E00               	movlw	0
  3373  000EDE  22DD               	addwfc	postdec2,f,c
  3374                           
  3375                           ;UART.c: 72: } else {
  3376  000EE0  0012               	return	
  3377  000EE2                     l3708:
  3378                           
  3379                           ;UART.c: 73: _this->buf[_this->head] = c;
  3380  000EE2  EE20 F064          	lfsr	2,100
  3381  000EE6  5023               	movf	UART_buff_put@_this,w,c
  3382  000EE8  26D9               	addwf	fsr2l,f,c
  3383  000EEA  5024               	movf	UART_buff_put@_this+1,w,c
  3384  000EEC  22DA               	addwfc	fsr2h,f,c
  3385  000EEE  CFDE F026          	movff	postinc2,??_UART_buff_put
  3386  000EF2  CFDD F027          	movff	postdec2,??_UART_buff_put+1
  3387  000EF6  5026               	movf	??_UART_buff_put,w,c
  3388  000EF8  2423               	addwf	UART_buff_put@_this,w,c
  3389  000EFA  6ED9               	movwf	fsr2l,c
  3390  000EFC  5027               	movf	??_UART_buff_put+1,w,c
  3391  000EFE  2024               	addwfc	UART_buff_put@_this+1,w,c
  3392  000F00  6EDA               	movwf	fsr2h,c
  3393  000F02  C025  FFDF         	movff	UART_buff_put@c,indf2
  3394                           
  3395                           ;UART.c: 74: _this->head = UART_buff_modulo_inc(_this->head, 100);
  3396  000F06  EE20 F064          	lfsr	2,100
  3397  000F0A  5023               	movf	UART_buff_put@_this,w,c
  3398  000F0C  26D9               	addwf	fsr2l,f,c
  3399  000F0E  5024               	movf	UART_buff_put@_this+1,w,c
  3400  000F10  22DA               	addwfc	fsr2h,f,c
  3401  000F12  CFDE F01D          	movff	postinc2,UART_buff_modulo_inc@value
  3402  000F16  CFDD F01E          	movff	postdec2,UART_buff_modulo_inc@value+1
  3403  000F1A  0E00               	movlw	0
  3404  000F1C  6E20               	movwf	UART_buff_modulo_inc@modulus+1,c
  3405  000F1E  0E64               	movlw	100
  3406  000F20  6E1F               	movwf	UART_buff_modulo_inc@modulus,c
  3407  000F22  EC08  F010         	call	_UART_buff_modulo_inc	;wreg free
  3408  000F26  EE20 F064          	lfsr	2,100
  3409  000F2A  5023               	movf	UART_buff_put@_this,w,c
  3410  000F2C  26D9               	addwf	fsr2l,f,c
  3411  000F2E  5024               	movf	UART_buff_put@_this+1,w,c
  3412  000F30  22DA               	addwfc	fsr2h,f,c
  3413  000F32  C01D  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3414  000F36  C01E  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3415                           
  3416                           ;UART.c: 75: _this->tail = UART_buff_modulo_inc(_this->tail, 100);
  3417  000F3A  EE20 F066          	lfsr	2,102
  3418  000F3E  5023               	movf	UART_buff_put@_this,w,c
  3419  000F40  26D9               	addwf	fsr2l,f,c
  3420  000F42  5024               	movf	UART_buff_put@_this+1,w,c
  3421  000F44  22DA               	addwfc	fsr2h,f,c
  3422  000F46  CFDE F01D          	movff	postinc2,UART_buff_modulo_inc@value
  3423  000F4A  CFDD F01E          	movff	postdec2,UART_buff_modulo_inc@value+1
  3424  000F4E  0E00               	movlw	0
  3425  000F50  6E20               	movwf	UART_buff_modulo_inc@modulus+1,c
  3426  000F52  0E64               	movlw	100
  3427  000F54  6E1F               	movwf	UART_buff_modulo_inc@modulus,c
  3428  000F56  EC08  F010         	call	_UART_buff_modulo_inc	;wreg free
  3429  000F5A  EE20 F066          	lfsr	2,102
  3430  000F5E  5023               	movf	UART_buff_put@_this,w,c
  3431  000F60  26D9               	addwf	fsr2l,f,c
  3432  000F62  5024               	movf	UART_buff_put@_this+1,w,c
  3433  000F64  22DA               	addwfc	fsr2h,f,c
  3434  000F66  C01D  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3435  000F6A  C01E  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3436  000F6E  0012               	return	
  3437  000F70                     __end_of_UART_buff_put:
  3438                           	opt stack 0
  3439                           tblptru	equ	0xFF8
  3440                           tblptrh	equ	0xFF7
  3441                           tblptrl	equ	0xFF6
  3442                           tablat	equ	0xFF5
  3443                           prodh	equ	0xFF4
  3444                           prodl	equ	0xFF3
  3445                           intcon	equ	0xFF2
  3446                           postinc0	equ	0xFEE
  3447                           wreg	equ	0xFE8
  3448                           indf1	equ	0xFE7
  3449                           postdec1	equ	0xFE5
  3450                           fsr1h	equ	0xFE2
  3451                           fsr1l	equ	0xFE1
  3452                           indf2	equ	0xFDF
  3453                           postinc2	equ	0xFDE
  3454                           postdec2	equ	0xFDD
  3455                           plusw2	equ	0xFDB
  3456                           fsr2h	equ	0xFDA
  3457                           fsr2l	equ	0xFD9
  3458                           status	equ	0xFD8
  3459                           
  3460 ;; *************** function _UART_buff_get *****************
  3461 ;; Defined at:
  3462 ;;		line 80 in file "UART.c"
  3463 ;; Parameters:    Size  Location     Type
  3464 ;;  _this           2   34[COMRAM] PTR struct UART_ring_buf
  3465 ;;		 -> output_buffer(106), input_buffer(106), 
  3466 ;; Auto vars:     Size  Location     Type
  3467 ;;  c               1   38[COMRAM] unsigned char 
  3468 ;; Return value:  Size  Location     Type
  3469 ;;                  1    wreg      unsigned char 
  3470 ;; Registers used:
  3471 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3472 ;; Tracked objects:
  3473 ;;		On entry : 0/0
  3474 ;;		On exit  : 0/0
  3475 ;;		Unchanged: 0/0
  3476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3477 ;;      Params:         2       0       0       0       0       0       0
  3478 ;;      Locals:         1       0       0       0       0       0       0
  3479 ;;      Temps:          2       0       0       0       0       0       0
  3480 ;;      Totals:         5       0       0       0       0       0       0
  3481 ;;Total ram usage:        5 bytes
  3482 ;; Hardware stack levels used:    1
  3483 ;; Hardware stack levels required when called:    7
  3484 ;; This function calls:
  3485 ;;		_UART_buff_modulo_inc
  3486 ;; This function is called by:
  3487 ;;		_Receive_get
  3488 ;;		_Send_put
  3489 ;; This function uses a non-reentrant model
  3490 ;;
  3491                           
  3492                           	psect	text12
  3493  001744                     __ptext12:
  3494                           	opt stack 0
  3495  001744                     _UART_buff_get:
  3496                           	opt stack 20
  3497                           
  3498                           ;UART.c: 81: unsigned char c;
  3499                           ;UART.c: 82: if (_this->count > 0) {
  3500                           
  3501                           ;incstack = 0
  3502  001744  EE20 F068          	lfsr	2,104
  3503  001748  5023               	movf	UART_buff_get@_this,w,c
  3504  00174A  26D9               	addwf	fsr2l,f,c
  3505  00174C  5024               	movf	UART_buff_get@_this+1,w,c
  3506  00174E  22DA               	addwfc	fsr2h,f,c
  3507  001750  0E01               	movlw	1
  3508  001752  BEDB               	btfsc	plusw2,7,c
  3509  001754  D03C               	goto	l3722
  3510  001756  0E01               	movlw	1
  3511  001758  50DB               	movf	plusw2,w,c
  3512  00175A  E103               	bnz	u2270
  3513  00175C  04DE               	decf	postinc2,w,c
  3514  00175E  A0D8               	btfss	status,0,c
  3515  001760  D036               	goto	l3722
  3516  001762                     u2270:
  3517                           
  3518                           ;UART.c: 83: c = _this->buf[_this->tail];
  3519  001762  EE20 F066          	lfsr	2,102
  3520  001766  5023               	movf	UART_buff_get@_this,w,c
  3521  001768  26D9               	addwf	fsr2l,f,c
  3522  00176A  5024               	movf	UART_buff_get@_this+1,w,c
  3523  00176C  22DA               	addwfc	fsr2h,f,c
  3524  00176E  CFDE F025          	movff	postinc2,??_UART_buff_get
  3525  001772  CFDD F026          	movff	postdec2,??_UART_buff_get+1
  3526  001776  5025               	movf	??_UART_buff_get,w,c
  3527  001778  2423               	addwf	UART_buff_get@_this,w,c
  3528  00177A  6ED9               	movwf	fsr2l,c
  3529  00177C  5026               	movf	??_UART_buff_get+1,w,c
  3530  00177E  2024               	addwfc	UART_buff_get@_this+1,w,c
  3531  001780  6EDA               	movwf	fsr2h,c
  3532  001782  50DF               	movf	indf2,w,c
  3533  001784  6E27               	movwf	UART_buff_get@c,c
  3534                           
  3535                           ;UART.c: 84: _this->tail = UART_buff_modulo_inc(_this->tail, 100);
  3536  001786  EE20 F066          	lfsr	2,102
  3537  00178A  5023               	movf	UART_buff_get@_this,w,c
  3538  00178C  26D9               	addwf	fsr2l,f,c
  3539  00178E  5024               	movf	UART_buff_get@_this+1,w,c
  3540  001790  22DA               	addwfc	fsr2h,f,c
  3541  001792  CFDE F01D          	movff	postinc2,UART_buff_modulo_inc@value
  3542  001796  CFDD F01E          	movff	postdec2,UART_buff_modulo_inc@value+1
  3543  00179A  0E00               	movlw	0
  3544  00179C  6E20               	movwf	UART_buff_modulo_inc@modulus+1,c
  3545  00179E  0E64               	movlw	100
  3546  0017A0  6E1F               	movwf	UART_buff_modulo_inc@modulus,c
  3547  0017A2  EC08  F010         	call	_UART_buff_modulo_inc	;wreg free
  3548  0017A6  EE20 F066          	lfsr	2,102
  3549  0017AA  5023               	movf	UART_buff_get@_this,w,c
  3550  0017AC  26D9               	addwf	fsr2l,f,c
  3551  0017AE  5024               	movf	UART_buff_get@_this+1,w,c
  3552  0017B0  22DA               	addwfc	fsr2h,f,c
  3553  0017B2  C01D  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3554  0017B6  C01E  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3555                           
  3556                           ;UART.c: 85: --_this->count;
  3557  0017BA  EE20 F068          	lfsr	2,104
  3558  0017BE  5023               	movf	UART_buff_get@_this,w,c
  3559  0017C0  26D9               	addwf	fsr2l,f,c
  3560  0017C2  5024               	movf	UART_buff_get@_this+1,w,c
  3561  0017C4  22DA               	addwfc	fsr2h,f,c
  3562  0017C6  06DE               	decf	postinc2,f,c
  3563  0017C8  0E00               	movlw	0
  3564  0017CA  5ADD               	subwfb	postdec2,f,c
  3565                           
  3566                           ;UART.c: 86: } else {
  3567  0017CC  D002               	goto	l597
  3568  0017CE                     l3722:
  3569                           
  3570                           ;UART.c: 87: c = 0;
  3571  0017CE  0E00               	movlw	0
  3572  0017D0  6E27               	movwf	UART_buff_get@c,c
  3573  0017D2                     l597:
  3574                           
  3575                           ;UART.c: 88: }
  3576                           ;UART.c: 89: return (c);
  3577  0017D2  5027               	movf	UART_buff_get@c,w,c
  3578  0017D4  0012               	return	
  3579  0017D6                     __end_of_UART_buff_get:
  3580                           	opt stack 0
  3581                           tblptru	equ	0xFF8
  3582                           tblptrh	equ	0xFF7
  3583                           tblptrl	equ	0xFF6
  3584                           tablat	equ	0xFF5
  3585                           prodh	equ	0xFF4
  3586                           prodl	equ	0xFF3
  3587                           intcon	equ	0xFF2
  3588                           postinc0	equ	0xFEE
  3589                           wreg	equ	0xFE8
  3590                           indf1	equ	0xFE7
  3591                           postdec1	equ	0xFE5
  3592                           fsr1h	equ	0xFE2
  3593                           fsr1l	equ	0xFE1
  3594                           indf2	equ	0xFDF
  3595                           postinc2	equ	0xFDE
  3596                           postdec2	equ	0xFDD
  3597                           plusw2	equ	0xFDB
  3598                           fsr2h	equ	0xFDA
  3599                           fsr2l	equ	0xFD9
  3600                           status	equ	0xFD8
  3601                           
  3602 ;; *************** function _UART_buff_modulo_inc *****************
  3603 ;; Defined at:
  3604 ;;		line 105 in file "UART.c"
  3605 ;; Parameters:    Size  Location     Type
  3606 ;;  value           2   28[COMRAM] const unsigned int 
  3607 ;;  modulus         2   30[COMRAM] const unsigned int 
  3608 ;; Auto vars:     Size  Location     Type
  3609 ;;  my_value        2   32[COMRAM] unsigned int 
  3610 ;; Return value:  Size  Location     Type
  3611 ;;                  2   28[COMRAM] unsigned int 
  3612 ;; Registers used:
  3613 ;;		wreg, status,2, status,0
  3614 ;; Tracked objects:
  3615 ;;		On entry : 0/0
  3616 ;;		On exit  : 0/0
  3617 ;;		Unchanged: 0/0
  3618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3619 ;;      Params:         4       0       0       0       0       0       0
  3620 ;;      Locals:         2       0       0       0       0       0       0
  3621 ;;      Temps:          0       0       0       0       0       0       0
  3622 ;;      Totals:         6       0       0       0       0       0       0
  3623 ;;Total ram usage:        6 bytes
  3624 ;; Hardware stack levels used:    1
  3625 ;; Hardware stack levels required when called:    6
  3626 ;; This function calls:
  3627 ;;		Nothing
  3628 ;; This function is called by:
  3629 ;;		_UART_buff_put
  3630 ;;		_UART_buff_get
  3631 ;; This function uses a non-reentrant model
  3632 ;;
  3633                           
  3634                           	psect	text13
  3635  002010                     __ptext13:
  3636                           	opt stack 0
  3637  002010                     _UART_buff_modulo_inc:
  3638                           	opt stack 20
  3639                           
  3640                           ;UART.c: 106: unsigned int my_value = value + 1;
  3641                           
  3642                           ;incstack = 0
  3643  002010  0E01               	movlw	1
  3644  002012  241D               	addwf	UART_buff_modulo_inc@value,w,c
  3645  002014  6E21               	movwf	UART_buff_modulo_inc@my_value,c
  3646  002016  0E00               	movlw	0
  3647  002018  201E               	addwfc	UART_buff_modulo_inc@value+1,w,c
  3648  00201A  6E22               	movwf	UART_buff_modulo_inc@my_value+1,c
  3649                           
  3650                           ;UART.c: 107: if (my_value >= modulus) {
  3651  00201C  501F               	movf	UART_buff_modulo_inc@modulus,w,c
  3652  00201E  5C21               	subwf	UART_buff_modulo_inc@my_value,w,c
  3653  002020  5020               	movf	UART_buff_modulo_inc@modulus+1,w,c
  3654  002022  5822               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  3655  002024  A0D8               	btfss	status,0,c
  3656  002026  D004               	goto	l3696
  3657                           
  3658                           ;UART.c: 108: my_value = 0;
  3659  002028  0E00               	movlw	0
  3660  00202A  6E22               	movwf	UART_buff_modulo_inc@my_value+1,c
  3661  00202C  0E00               	movlw	0
  3662  00202E  6E21               	movwf	UART_buff_modulo_inc@my_value,c
  3663  002030                     l3696:
  3664                           
  3665                           ;UART.c: 109: }
  3666                           ;UART.c: 110: return (my_value);
  3667  002030  C021  F01D         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  3668  002034  C022  F01E         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  3669  002038  0012               	return	
  3670  00203A                     __end_of_UART_buff_modulo_inc:
  3671                           	opt stack 0
  3672                           tblptru	equ	0xFF8
  3673                           tblptrh	equ	0xFF7
  3674                           tblptrl	equ	0xFF6
  3675                           tablat	equ	0xFF5
  3676                           prodh	equ	0xFF4
  3677                           prodl	equ	0xFF3
  3678                           intcon	equ	0xFF2
  3679                           postinc0	equ	0xFEE
  3680                           wreg	equ	0xFE8
  3681                           indf1	equ	0xFE7
  3682                           postdec1	equ	0xFE5
  3683                           fsr1h	equ	0xFE2
  3684                           fsr1l	equ	0xFE1
  3685                           indf2	equ	0xFDF
  3686                           postinc2	equ	0xFDE
  3687                           postdec2	equ	0xFDD
  3688                           plusw2	equ	0xFDB
  3689                           fsr2h	equ	0xFDA
  3690                           fsr2l	equ	0xFD9
  3691                           status	equ	0xFD8
  3692                           
  3693 ;; *************** function _CRC8 *****************
  3694 ;; Defined at:
  3695 ;;		line 21 in file "CarCom.c"
  3696 ;; Parameters:    Size  Location     Type
  3697 ;;  data            2   28[COMRAM] PTR const unsigned char 
  3698 ;;		 -> ProcessArray(30), sendData@SendArray(30), 
  3699 ;;  len             1   30[COMRAM] unsigned char 
  3700 ;; Auto vars:     Size  Location     Type
  3701 ;;  sum             1   31[COMRAM] unsigned char 
  3702 ;;  tempI           1   33[COMRAM] unsigned char 
  3703 ;;  extract         1   32[COMRAM] unsigned char 
  3704 ;;  crc             1   34[COMRAM] unsigned char 
  3705 ;; Return value:  Size  Location     Type
  3706 ;;                  1    wreg      unsigned char 
  3707 ;; Registers used:
  3708 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3709 ;; Tracked objects:
  3710 ;;		On entry : 0/0
  3711 ;;		On exit  : 0/0
  3712 ;;		Unchanged: 0/0
  3713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3714 ;;      Params:         3       0       0       0       0       0       0
  3715 ;;      Locals:         4       0       0       0       0       0       0
  3716 ;;      Temps:          0       0       0       0       0       0       0
  3717 ;;      Totals:         7       0       0       0       0       0       0
  3718 ;;Total ram usage:        7 bytes
  3719 ;; Hardware stack levels used:    1
  3720 ;; Hardware stack levels required when called:    6
  3721 ;; This function calls:
  3722 ;;		Nothing
  3723 ;; This function is called by:
  3724 ;;		_sendData
  3725 ;;		_receiveData
  3726 ;; This function uses a non-reentrant model
  3727 ;;
  3728                           
  3729                           	psect	text14
  3730  001D5C                     __ptext14:
  3731                           	opt stack 0
  3732  001D5C                     _CRC8:
  3733                           	opt stack 20
  3734                           
  3735                           ;CarCom.c: 22: unsigned char crc = 0x00;
  3736                           
  3737                           ;incstack = 0
  3738  001D5C  0E00               	movlw	0
  3739  001D5E  6E23               	movwf	CRC8@crc,c
  3740                           
  3741                           ;CarCom.c: 23: while (len--) {
  3742  001D60  D01C               	goto	l3770
  3743  001D62                     l3754:
  3744                           
  3745                           ;CarCom.c: 24: unsigned char extract = *data++;
  3746  001D62  C01D  FFD9         	movff	CRC8@data,fsr2l
  3747  001D66  C01E  FFDA         	movff	CRC8@data+1,fsr2h
  3748  001D6A  50DF               	movf	indf2,w,c
  3749  001D6C  6E21               	movwf	CRC8@extract,c
  3750  001D6E  4A1D               	infsnz	CRC8@data,f,c
  3751  001D70  2A1E               	incf	CRC8@data+1,f,c
  3752                           
  3753                           ;CarCom.c: 25: unsigned char tempI;
  3754                           ;CarCom.c: 26: for (tempI = 8; tempI; tempI--) {
  3755  001D72  0E08               	movlw	8
  3756  001D74  6E22               	movwf	CRC8@tempI,c
  3757  001D76  D00E               	goto	l3768
  3758  001D78                     l3760:
  3759                           
  3760                           ;CarCom.c: 27: unsigned char sum = (crc ^ extract) & 0x01;
  3761  001D78  5023               	movf	CRC8@crc,w,c
  3762  001D7A  1821               	xorwf	CRC8@extract,w,c
  3763  001D7C  0B01               	andlw	1
  3764  001D7E  6E20               	movwf	CRC8@sum,c
  3765                           
  3766                           ;CarCom.c: 28: crc >>= 1;
  3767  001D80  90D8               	bcf	status,0,c
  3768  001D82  3223               	rrcf	CRC8@crc,f,c
  3769                           
  3770                           ;CarCom.c: 29: if (sum) {
  3771  001D84  5020               	movf	CRC8@sum,w,c
  3772  001D86  B4D8               	btfsc	status,2,c
  3773  001D88  D002               	goto	l768
  3774                           
  3775                           ;CarCom.c: 30: crc ^= 0x8C;
  3776  001D8A  0E8C               	movlw	140
  3777  001D8C  1A23               	xorwf	CRC8@crc,f,c
  3778  001D8E                     l768:
  3779                           
  3780                           ;CarCom.c: 31: }
  3781                           ;CarCom.c: 32: extract >>= 1;
  3782  001D8E  90D8               	bcf	status,0,c
  3783  001D90  3221               	rrcf	CRC8@extract,f,c
  3784  001D92  0622               	decf	CRC8@tempI,f,c
  3785  001D94                     l3768:
  3786  001D94  5022               	movf	CRC8@tempI,w,c
  3787  001D96  A4D8               	btfss	status,2,c
  3788  001D98  D7EF               	goto	l3760
  3789  001D9A                     l3770:
  3790  001D9A  061F               	decf	CRC8@len,f,c
  3791  001D9C  281F               	incf	CRC8@len,w,c
  3792  001D9E  A4D8               	btfss	status,2,c
  3793  001DA0  D7E0               	goto	l3754
  3794                           
  3795                           ;CarCom.c: 33: }
  3796                           ;CarCom.c: 34: }
  3797                           ;CarCom.c: 35: return crc;
  3798  001DA2  5023               	movf	CRC8@crc,w,c
  3799  001DA4  0012               	return	
  3800  001DA6                     __end_of_CRC8:
  3801                           	opt stack 0
  3802                           tblptru	equ	0xFF8
  3803                           tblptrh	equ	0xFF7
  3804                           tblptrl	equ	0xFF6
  3805                           tablat	equ	0xFF5
  3806                           prodh	equ	0xFF4
  3807                           prodl	equ	0xFF3
  3808                           intcon	equ	0xFF2
  3809                           postinc0	equ	0xFEE
  3810                           wreg	equ	0xFE8
  3811                           indf1	equ	0xFE7
  3812                           postdec1	equ	0xFE5
  3813                           fsr1h	equ	0xFE2
  3814                           fsr1l	equ	0xFE1
  3815                           indf2	equ	0xFDF
  3816                           postinc2	equ	0xFDE
  3817                           postdec2	equ	0xFDD
  3818                           plusw2	equ	0xFDB
  3819                           fsr2h	equ	0xFDA
  3820                           fsr2l	equ	0xFD9
  3821                           status	equ	0xFD8
  3822                           
  3823 ;; *************** function _SetDataDict *****************
  3824 ;; Defined at:
  3825 ;;		line 32 in file "CarDataDictionary.c"
  3826 ;; Parameters:    Size  Location     Type
  3827 ;;  DataTable       1    wreg     unsigned char 
  3828 ;;  DataTableInd    1   28[COMRAM] unsigned char 
  3829 ;;  DataArray       2   29[COMRAM] PTR unsigned char 
  3830 ;;		 -> ComController@DataRecived(4), updateComms@DataGet(2), 
  3831 ;;  numbofbytes     1   31[COMRAM] unsigned char 
  3832 ;; Auto vars:     Size  Location     Type
  3833 ;;  DataTable       1   33[COMRAM] unsigned char 
  3834 ;;  ReturnCounte    1   35[COMRAM] unsigned char 
  3835 ;;  DataCount       1   34[COMRAM] unsigned char 
  3836 ;;  Error           1   32[COMRAM] unsigned char 
  3837 ;; Return value:  Size  Location     Type
  3838 ;;                  1    wreg      unsigned char 
  3839 ;; Registers used:
  3840 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3841 ;; Tracked objects:
  3842 ;;		On entry : 0/0
  3843 ;;		On exit  : 0/0
  3844 ;;		Unchanged: 0/0
  3845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3846 ;;      Params:         4       0       0       0       0       0       0
  3847 ;;      Locals:         4       0       0       0       0       0       0
  3848 ;;      Temps:          0       0       0       0       0       0       0
  3849 ;;      Totals:         8       0       0       0       0       0       0
  3850 ;;Total ram usage:        8 bytes
  3851 ;; Hardware stack levels used:    1
  3852 ;; Hardware stack levels required when called:    6
  3853 ;; This function calls:
  3854 ;;		Nothing
  3855 ;; This function is called by:
  3856 ;;		_updateComms
  3857 ;;		_ComController
  3858 ;; This function uses a non-reentrant model
  3859 ;;
  3860                           
  3861                           	psect	text15
  3862  001614                     __ptext15:
  3863                           	opt stack 0
  3864  001614                     _SetDataDict:
  3865                           	opt stack 21
  3866                           
  3867                           ;incstack = 0
  3868                           ;SetDataDict@DataTable stored from wreg
  3869  001614  6E22               	movwf	SetDataDict@DataTable,c
  3870                           
  3871                           ;CarDataDictionary.c: 33: unsigned char Error = 0;
  3872  001616  0E00               	movlw	0
  3873  001618  6E21               	movwf	SetDataDict@Error,c
  3874                           
  3875                           ;CarDataDictionary.c: 34: unsigned char DataCount = 0;
  3876  00161A  0E00               	movlw	0
  3877  00161C  6E23               	movwf	SetDataDict@DataCount,c
  3878                           
  3879                           ;CarDataDictionary.c: 35: unsigned char ReturnCounter = 0;
  3880  00161E  0E00               	movlw	0
  3881  001620  6E24               	movwf	SetDataDict@ReturnCounter,c
  3882                           
  3883                           ;CarDataDictionary.c: 36: switch(DataTable){
  3884  001622  D03C               	goto	l3896
  3885  001624                     l3876:
  3886                           
  3887                           ;CarDataDictionary.c: 38: DataCount = DataTableIndex + numbofbytes;
  3888  001624  501D               	movf	SetDataDict@DataTableIndex,w,c
  3889  001626  2420               	addwf	SetDataDict@numbofbytes,w,c
  3890  001628  6E23               	movwf	SetDataDict@DataCount,c
  3891  00162A  D014               	goto	l3884
  3892  00162C                     l3878:
  3893                           
  3894                           ;CarDataDictionary.c: 40: DataTableArrayOne[DataTableIndex] = DataArray[ReturnCounter];
  3895  00162C  5024               	movf	SetDataDict@ReturnCounter,w,c
  3896  00162E  0D01               	mullw	1
  3897  001630  50F3               	movf	prodl,w,c
  3898  001632  241E               	addwf	SetDataDict@DataArray,w,c
  3899  001634  6ED9               	movwf	fsr2l,c
  3900  001636  50F4               	movf	prodh,w,c
  3901  001638  201F               	addwfc	SetDataDict@DataArray+1,w,c
  3902  00163A  6EDA               	movwf	fsr2h,c
  3903  00163C  501D               	movf	SetDataDict@DataTableIndex,w,c
  3904  00163E  0D01               	mullw	1
  3905  001640  0EEB               	movlw	low _DataTableArrayOne
  3906  001642  24F3               	addwf	prodl,w,c
  3907  001644  6EE1               	movwf	fsr1l,c
  3908  001646  0E00               	movlw	high _DataTableArrayOne
  3909  001648  20F4               	addwfc	prodh,w,c
  3910  00164A  6EE2               	movwf	fsr1h,c
  3911  00164C  CFDF FFE7          	movff	indf2,indf1
  3912                           
  3913                           ;CarDataDictionary.c: 41: ReturnCounter++;
  3914  001650  2A24               	incf	SetDataDict@ReturnCounter,f,c
  3915  001652  2A1D               	incf	SetDataDict@DataTableIndex,f,c
  3916  001654                     l3884:
  3917  001654  5023               	movf	SetDataDict@DataCount,w,c
  3918  001656  5C1D               	subwf	SetDataDict@DataTableIndex,w,c
  3919  001658  B0D8               	btfsc	status,0,c
  3920  00165A  0012               	return	
  3921  00165C  D7E7               	goto	l3878
  3922  00165E                     l3886:
  3923                           
  3924                           ;CarDataDictionary.c: 45: DataCount = DataTableIndex + numbofbytes;
  3925  00165E  501D               	movf	SetDataDict@DataTableIndex,w,c
  3926  001660  2420               	addwf	SetDataDict@numbofbytes,w,c
  3927  001662  6E23               	movwf	SetDataDict@DataCount,c
  3928  001664  D014               	goto	l3894
  3929  001666                     l3888:
  3930                           
  3931                           ;CarDataDictionary.c: 47: DataTableArrayFour[DataTableIndex] = DataArray[ReturnCounter];
  3932  001666  5024               	movf	SetDataDict@ReturnCounter,w,c
  3933  001668  0D01               	mullw	1
  3934  00166A  50F3               	movf	prodl,w,c
  3935  00166C  241E               	addwf	SetDataDict@DataArray,w,c
  3936  00166E  6ED9               	movwf	fsr2l,c
  3937  001670  50F4               	movf	prodh,w,c
  3938  001672  201F               	addwfc	SetDataDict@DataArray+1,w,c
  3939  001674  6EDA               	movwf	fsr2h,c
  3940  001676  501D               	movf	SetDataDict@DataTableIndex,w,c
  3941  001678  0D01               	mullw	1
  3942  00167A  0E2D               	movlw	low _DataTableArrayFour
  3943  00167C  24F3               	addwf	prodl,w,c
  3944  00167E  6EE1               	movwf	fsr1l,c
  3945  001680  0E00               	movlw	high _DataTableArrayFour
  3946  001682  20F4               	addwfc	prodh,w,c
  3947  001684  6EE2               	movwf	fsr1h,c
  3948  001686  CFDF FFE7          	movff	indf2,indf1
  3949                           
  3950                           ;CarDataDictionary.c: 48: ReturnCounter++;
  3951  00168A  2A24               	incf	SetDataDict@ReturnCounter,f,c
  3952  00168C  2A1D               	incf	SetDataDict@DataTableIndex,f,c
  3953  00168E                     l3894:
  3954  00168E  5023               	movf	SetDataDict@DataCount,w,c
  3955  001690  5C1D               	subwf	SetDataDict@DataTableIndex,w,c
  3956  001692  B0D8               	btfsc	status,0,c
  3957  001694  0012               	return	
  3958  001696  D7E7               	goto	l3888
  3959  001698                     l897:
  3960                           
  3961                           ;CarDataDictionary.c: 52: Error = -1;
  3962  001698  6821               	setf	SetDataDict@Error,c
  3963                           
  3964                           ;CarDataDictionary.c: 53: }
  3965  00169A  0012               	return	
  3966  00169C                     l3896:
  3967  00169C  5022               	movf	SetDataDict@DataTable,w,c
  3968                           
  3969                           ; Switch size 1, requested type "space"
  3970                           ; Number of cases is 2, Range of values is 0 to 4
  3971                           ; switch strategies available:
  3972                           ; Name         Instructions Cycles
  3973                           ; simple_byte            7     4 (average)
  3974                           ;	Chosen strategy is simple_byte
  3975  00169E  0A00               	xorlw	0	; case 0
  3976  0016A0  B4D8               	btfsc	status,2,c
  3977  0016A2  D7C0               	goto	l3876
  3978  0016A4  0A04               	xorlw	4	; case 4
  3979  0016A6  B4D8               	btfsc	status,2,c
  3980  0016A8  D7DA               	goto	l3886
  3981  0016AA  D7F6               	goto	l897
  3982  0016AC                     __end_of_SetDataDict:
  3983                           	opt stack 0
  3984                           tblptru	equ	0xFF8
  3985                           tblptrh	equ	0xFF7
  3986                           tblptrl	equ	0xFF6
  3987                           tablat	equ	0xFF5
  3988                           prodh	equ	0xFF4
  3989                           prodl	equ	0xFF3
  3990                           intcon	equ	0xFF2
  3991                           postinc0	equ	0xFEE
  3992                           wreg	equ	0xFE8
  3993                           indf1	equ	0xFE7
  3994                           postdec1	equ	0xFE5
  3995                           fsr1h	equ	0xFE2
  3996                           fsr1l	equ	0xFE1
  3997                           indf2	equ	0xFDF
  3998                           postinc2	equ	0xFDE
  3999                           postdec2	equ	0xFDD
  4000                           plusw2	equ	0xFDB
  4001                           fsr2h	equ	0xFDA
  4002                           fsr2l	equ	0xFD9
  4003                           status	equ	0xFD8
  4004                           
  4005 ;; *************** function _GetDataDict *****************
  4006 ;; Defined at:
  4007 ;;		line 7 in file "CarDataDictionary.c"
  4008 ;; Parameters:    Size  Location     Type
  4009 ;;  DataTable       1    wreg     unsigned char 
  4010 ;;  DataTableInd    1   28[COMRAM] unsigned char 
  4011 ;;  DataArray       2   29[COMRAM] PTR unsigned char 
  4012 ;;		 -> ComController@DataToSend_1658(4), ComController@DataToSend(4), updateComms@DataGet(2), 
  4013 ;;  numbofbytes     1   31[COMRAM] unsigned char 
  4014 ;; Auto vars:     Size  Location     Type
  4015 ;;  DataTable       1   33[COMRAM] unsigned char 
  4016 ;;  ReturnCounte    1   35[COMRAM] unsigned char 
  4017 ;;  DataCount       1   34[COMRAM] unsigned char 
  4018 ;;  Error           1   32[COMRAM] unsigned char 
  4019 ;; Return value:  Size  Location     Type
  4020 ;;                  1    wreg      unsigned char 
  4021 ;; Registers used:
  4022 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4023 ;; Tracked objects:
  4024 ;;		On entry : 0/0
  4025 ;;		On exit  : 0/0
  4026 ;;		Unchanged: 0/0
  4027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4028 ;;      Params:         4       0       0       0       0       0       0
  4029 ;;      Locals:         4       0       0       0       0       0       0
  4030 ;;      Temps:          0       0       0       0       0       0       0
  4031 ;;      Totals:         8       0       0       0       0       0       0
  4032 ;;Total ram usage:        8 bytes
  4033 ;; Hardware stack levels used:    1
  4034 ;; Hardware stack levels required when called:    6
  4035 ;; This function calls:
  4036 ;;		Nothing
  4037 ;; This function is called by:
  4038 ;;		_updateComms
  4039 ;;		_ComController
  4040 ;; This function uses a non-reentrant model
  4041 ;;
  4042                           
  4043                           	psect	text16
  4044  0016AC                     __ptext16:
  4045                           	opt stack 0
  4046  0016AC                     _GetDataDict:
  4047                           	opt stack 21
  4048                           
  4049                           ;incstack = 0
  4050                           ;GetDataDict@DataTable stored from wreg
  4051  0016AC  6E22               	movwf	GetDataDict@DataTable,c
  4052                           
  4053                           ;CarDataDictionary.c: 8: unsigned char Error = 0;
  4054  0016AE  0E00               	movlw	0
  4055  0016B0  6E21               	movwf	GetDataDict@Error,c
  4056                           
  4057                           ;CarDataDictionary.c: 9: unsigned char DataCount = 0;
  4058  0016B2  0E00               	movlw	0
  4059  0016B4  6E23               	movwf	GetDataDict@DataCount,c
  4060                           
  4061                           ;CarDataDictionary.c: 10: unsigned char ReturnCounter = 0;
  4062  0016B6  0E00               	movlw	0
  4063  0016B8  6E24               	movwf	GetDataDict@ReturnCounter,c
  4064                           
  4065                           ;CarDataDictionary.c: 11: switch(DataTable){
  4066  0016BA  D03C               	goto	l3872
  4067  0016BC                     l3852:
  4068                           
  4069                           ;CarDataDictionary.c: 13: DataCount = DataTableIndex + numbofbytes;
  4070  0016BC  501D               	movf	GetDataDict@DataTableIndex,w,c
  4071  0016BE  2420               	addwf	GetDataDict@numbofbytes,w,c
  4072  0016C0  6E23               	movwf	GetDataDict@DataCount,c
  4073  0016C2  D014               	goto	l3860
  4074  0016C4                     l3854:
  4075                           
  4076                           ;CarDataDictionary.c: 15: DataArray[ReturnCounter] = DataTableArrayOne[DataTableIndex];
  4077  0016C4  501D               	movf	GetDataDict@DataTableIndex,w,c
  4078  0016C6  0D01               	mullw	1
  4079  0016C8  0EEB               	movlw	low _DataTableArrayOne
  4080  0016CA  24F3               	addwf	prodl,w,c
  4081  0016CC  6ED9               	movwf	fsr2l,c
  4082  0016CE  0E00               	movlw	high _DataTableArrayOne
  4083  0016D0  20F4               	addwfc	prodh,w,c
  4084  0016D2  6EDA               	movwf	fsr2h,c
  4085  0016D4  5024               	movf	GetDataDict@ReturnCounter,w,c
  4086  0016D6  0D01               	mullw	1
  4087  0016D8  50F3               	movf	prodl,w,c
  4088  0016DA  241E               	addwf	GetDataDict@DataArray,w,c
  4089  0016DC  6EE1               	movwf	fsr1l,c
  4090  0016DE  50F4               	movf	prodh,w,c
  4091  0016E0  201F               	addwfc	GetDataDict@DataArray+1,w,c
  4092  0016E2  6EE2               	movwf	fsr1h,c
  4093  0016E4  CFDF FFE7          	movff	indf2,indf1
  4094                           
  4095                           ;CarDataDictionary.c: 16: ReturnCounter++;
  4096  0016E8  2A24               	incf	GetDataDict@ReturnCounter,f,c
  4097  0016EA  2A1D               	incf	GetDataDict@DataTableIndex,f,c
  4098  0016EC                     l3860:
  4099  0016EC  5023               	movf	GetDataDict@DataCount,w,c
  4100  0016EE  5C1D               	subwf	GetDataDict@DataTableIndex,w,c
  4101  0016F0  B0D8               	btfsc	status,0,c
  4102  0016F2  0012               	return	
  4103  0016F4  D7E7               	goto	l3854
  4104  0016F6                     l3862:
  4105                           
  4106                           ;CarDataDictionary.c: 20: DataCount = DataTableIndex + numbofbytes;
  4107  0016F6  501D               	movf	GetDataDict@DataTableIndex,w,c
  4108  0016F8  2420               	addwf	GetDataDict@numbofbytes,w,c
  4109  0016FA  6E23               	movwf	GetDataDict@DataCount,c
  4110  0016FC  D014               	goto	l3870
  4111  0016FE                     l3864:
  4112                           
  4113                           ;CarDataDictionary.c: 22: DataArray[ReturnCounter] = DataTableArrayFour[DataTableIndex];
  4114  0016FE  501D               	movf	GetDataDict@DataTableIndex,w,c
  4115  001700  0D01               	mullw	1
  4116  001702  0E2D               	movlw	low _DataTableArrayFour
  4117  001704  24F3               	addwf	prodl,w,c
  4118  001706  6ED9               	movwf	fsr2l,c
  4119  001708  0E00               	movlw	high _DataTableArrayFour
  4120  00170A  20F4               	addwfc	prodh,w,c
  4121  00170C  6EDA               	movwf	fsr2h,c
  4122  00170E  5024               	movf	GetDataDict@ReturnCounter,w,c
  4123  001710  0D01               	mullw	1
  4124  001712  50F3               	movf	prodl,w,c
  4125  001714  241E               	addwf	GetDataDict@DataArray,w,c
  4126  001716  6EE1               	movwf	fsr1l,c
  4127  001718  50F4               	movf	prodh,w,c
  4128  00171A  201F               	addwfc	GetDataDict@DataArray+1,w,c
  4129  00171C  6EE2               	movwf	fsr1h,c
  4130  00171E  CFDF FFE7          	movff	indf2,indf1
  4131                           
  4132                           ;CarDataDictionary.c: 23: ReturnCounter++;
  4133  001722  2A24               	incf	GetDataDict@ReturnCounter,f,c
  4134  001724  2A1D               	incf	GetDataDict@DataTableIndex,f,c
  4135  001726                     l3870:
  4136  001726  5023               	movf	GetDataDict@DataCount,w,c
  4137  001728  5C1D               	subwf	GetDataDict@DataTableIndex,w,c
  4138  00172A  B0D8               	btfsc	status,0,c
  4139  00172C  0012               	return	
  4140  00172E  D7E7               	goto	l3864
  4141  001730                     l883:
  4142                           
  4143                           ;CarDataDictionary.c: 27: Error = -1;
  4144  001730  6821               	setf	GetDataDict@Error,c
  4145                           
  4146                           ;CarDataDictionary.c: 28: }
  4147  001732  0012               	return	
  4148  001734                     l3872:
  4149  001734  5022               	movf	GetDataDict@DataTable,w,c
  4150                           
  4151                           ; Switch size 1, requested type "space"
  4152                           ; Number of cases is 2, Range of values is 0 to 4
  4153                           ; switch strategies available:
  4154                           ; Name         Instructions Cycles
  4155                           ; simple_byte            7     4 (average)
  4156                           ;	Chosen strategy is simple_byte
  4157  001736  0A00               	xorlw	0	; case 0
  4158  001738  B4D8               	btfsc	status,2,c
  4159  00173A  D7C0               	goto	l3852
  4160  00173C  0A04               	xorlw	4	; case 4
  4161  00173E  B4D8               	btfsc	status,2,c
  4162  001740  D7DA               	goto	l3862
  4163  001742  D7F6               	goto	l883
  4164  001744                     __end_of_GetDataDict:
  4165                           	opt stack 0
  4166                           tblptru	equ	0xFF8
  4167                           tblptrh	equ	0xFF7
  4168                           tblptrl	equ	0xFF6
  4169                           tablat	equ	0xFF5
  4170                           prodh	equ	0xFF4
  4171                           prodl	equ	0xFF3
  4172                           intcon	equ	0xFF2
  4173                           postinc0	equ	0xFEE
  4174                           wreg	equ	0xFE8
  4175                           indf1	equ	0xFE7
  4176                           postdec1	equ	0xFE5
  4177                           fsr1h	equ	0xFE2
  4178                           fsr1l	equ	0xFE1
  4179                           indf2	equ	0xFDF
  4180                           postinc2	equ	0xFDE
  4181                           postdec2	equ	0xFDD
  4182                           plusw2	equ	0xFDB
  4183                           fsr2h	equ	0xFDA
  4184                           fsr2l	equ	0xFD9
  4185                           status	equ	0xFD8
  4186                           
  4187 ;; *************** function _ClearBuffer *****************
  4188 ;; Defined at:
  4189 ;;		line 159 in file "UART.c"
  4190 ;; Parameters:    Size  Location     Type
  4191 ;;		None
  4192 ;; Auto vars:     Size  Location     Type
  4193 ;;		None
  4194 ;; Return value:  Size  Location     Type
  4195 ;;                  1    wreg      void 
  4196 ;; Registers used:
  4197 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4198 ;; Tracked objects:
  4199 ;;		On entry : 0/0
  4200 ;;		On exit  : 0/0
  4201 ;;		Unchanged: 0/0
  4202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4203 ;;      Params:         0       0       0       0       0       0       0
  4204 ;;      Locals:         0       0       0       0       0       0       0
  4205 ;;      Temps:          0       0       0       0       0       0       0
  4206 ;;      Totals:         0       0       0       0       0       0       0
  4207 ;;Total ram usage:        0 bytes
  4208 ;; Hardware stack levels used:    1
  4209 ;; Hardware stack levels required when called:    8
  4210 ;; This function calls:
  4211 ;;		_UART_buff_flush
  4212 ;; This function is called by:
  4213 ;;		_receiveData
  4214 ;; This function uses a non-reentrant model
  4215 ;;
  4216                           
  4217                           	psect	text17
  4218  00216E                     __ptext17:
  4219                           	opt stack 0
  4220  00216E                     _ClearBuffer:
  4221                           	opt stack 20
  4222                           
  4223                           ;UART.c: 160: UART_buff_flush(&input_buffer, 1);
  4224                           
  4225                           ;incstack = 0
  4226  00216E  0E3C               	movlw	low _input_buffer
  4227  002170  6E25               	movwf	UART_buff_flush@_this,c
  4228  002172  0E01               	movlw	high _input_buffer
  4229  002174  6E26               	movwf	UART_buff_flush@_this+1,c
  4230  002176  0E00               	movlw	0
  4231  002178  6E28               	movwf	UART_buff_flush@clearBuffer+1,c
  4232  00217A  0E01               	movlw	1
  4233  00217C  6E27               	movwf	UART_buff_flush@clearBuffer,c
  4234  00217E  EC70  F00D         	call	_UART_buff_flush	;wreg free
  4235  002182  0012               	return		;funcret
  4236  002184                     __end_of_ClearBuffer:
  4237                           	opt stack 0
  4238                           tblptru	equ	0xFF8
  4239                           tblptrh	equ	0xFF7
  4240                           tblptrl	equ	0xFF6
  4241                           tablat	equ	0xFF5
  4242                           prodh	equ	0xFF4
  4243                           prodl	equ	0xFF3
  4244                           intcon	equ	0xFF2
  4245                           postinc0	equ	0xFEE
  4246                           wreg	equ	0xFE8
  4247                           indf1	equ	0xFE7
  4248                           postdec1	equ	0xFE5
  4249                           fsr1h	equ	0xFE2
  4250                           fsr1l	equ	0xFE1
  4251                           indf2	equ	0xFDF
  4252                           postinc2	equ	0xFDE
  4253                           postdec2	equ	0xFDD
  4254                           plusw2	equ	0xFDB
  4255                           fsr2h	equ	0xFDA
  4256                           fsr2l	equ	0xFD9
  4257                           status	equ	0xFD8
  4258                           
  4259 ;; *************** function _UART_buff_flush *****************
  4260 ;; Defined at:
  4261 ;;		line 92 in file "UART.c"
  4262 ;; Parameters:    Size  Location     Type
  4263 ;;  _this           2   36[COMRAM] PTR struct UART_ring_buf
  4264 ;;		 -> input_buffer(106), 
  4265 ;;  clearBuffer     2   38[COMRAM] const int 
  4266 ;; Auto vars:     Size  Location     Type
  4267 ;;		None
  4268 ;; Return value:  Size  Location     Type
  4269 ;;                  1    wreg      void 
  4270 ;; Registers used:
  4271 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4272 ;; Tracked objects:
  4273 ;;		On entry : 0/0
  4274 ;;		On exit  : 0/0
  4275 ;;		Unchanged: 0/0
  4276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4277 ;;      Params:         4       0       0       0       0       0       0
  4278 ;;      Locals:         0       0       0       0       0       0       0
  4279 ;;      Temps:          0       0       0       0       0       0       0
  4280 ;;      Totals:         4       0       0       0       0       0       0
  4281 ;;Total ram usage:        4 bytes
  4282 ;; Hardware stack levels used:    1
  4283 ;; Hardware stack levels required when called:    7
  4284 ;; This function calls:
  4285 ;;		_memset
  4286 ;; This function is called by:
  4287 ;;		_ClearBuffer
  4288 ;; This function uses a non-reentrant model
  4289 ;;
  4290                           
  4291                           	psect	text18
  4292  001AE0                     __ptext18:
  4293                           	opt stack 0
  4294  001AE0                     _UART_buff_flush:
  4295                           	opt stack 20
  4296                           
  4297                           ;UART.c: 93: _this->count = 0;
  4298                           
  4299                           ;incstack = 0
  4300  001AE0  EE20 F068          	lfsr	2,104
  4301  001AE4  5025               	movf	UART_buff_flush@_this,w,c
  4302  001AE6  26D9               	addwf	fsr2l,f,c
  4303  001AE8  5026               	movf	UART_buff_flush@_this+1,w,c
  4304  001AEA  22DA               	addwfc	fsr2h,f,c
  4305  001AEC  0E00               	movlw	0
  4306  001AEE  6EDE               	movwf	postinc2,c
  4307  001AF0  0E00               	movlw	0
  4308  001AF2  6EDD               	movwf	postdec2,c
  4309                           
  4310                           ;UART.c: 94: _this->head = 0;
  4311  001AF4  EE20 F064          	lfsr	2,100
  4312  001AF8  5025               	movf	UART_buff_flush@_this,w,c
  4313  001AFA  26D9               	addwf	fsr2l,f,c
  4314  001AFC  5026               	movf	UART_buff_flush@_this+1,w,c
  4315  001AFE  22DA               	addwfc	fsr2h,f,c
  4316  001B00  0E00               	movlw	0
  4317  001B02  6EDE               	movwf	postinc2,c
  4318  001B04  0E00               	movlw	0
  4319  001B06  6EDD               	movwf	postdec2,c
  4320                           
  4321                           ;UART.c: 95: _this->tail = 0;
  4322  001B08  EE20 F066          	lfsr	2,102
  4323  001B0C  5025               	movf	UART_buff_flush@_this,w,c
  4324  001B0E  26D9               	addwf	fsr2l,f,c
  4325  001B10  5026               	movf	UART_buff_flush@_this+1,w,c
  4326  001B12  22DA               	addwfc	fsr2h,f,c
  4327  001B14  0E00               	movlw	0
  4328  001B16  6EDE               	movwf	postinc2,c
  4329  001B18  0E00               	movlw	0
  4330  001B1A  6EDD               	movwf	postdec2,c
  4331                           
  4332                           ;UART.c: 96: if (clearBuffer) {
  4333  001B1C  5027               	movf	UART_buff_flush@clearBuffer,w,c
  4334  001B1E  1028               	iorwf	UART_buff_flush@clearBuffer+1,w,c
  4335  001B20  B4D8               	btfsc	status,2,c
  4336  001B22  0012               	return	
  4337                           
  4338                           ;UART.c: 97: memset(_this->buf, 0, sizeof (_this->buf));
  4339  001B24  C025  F01D         	movff	UART_buff_flush@_this,memset@p1
  4340  001B28  C026  F01E         	movff	UART_buff_flush@_this+1,memset@p1+1
  4341  001B2C  0E00               	movlw	0
  4342  001B2E  6E20               	movwf	memset@c+1,c
  4343  001B30  0E00               	movlw	0
  4344  001B32  6E1F               	movwf	memset@c,c
  4345  001B34  0E00               	movlw	0
  4346  001B36  6E22               	movwf	memset@n+1,c
  4347  001B38  0E64               	movlw	100
  4348  001B3A  6E21               	movwf	memset@n,c
  4349  001B3C  ECF2  F00F         	call	_memset	;wreg free
  4350  001B40  0012               	return	
  4351  001B42                     __end_of_UART_buff_flush:
  4352                           	opt stack 0
  4353                           tblptru	equ	0xFF8
  4354                           tblptrh	equ	0xFF7
  4355                           tblptrl	equ	0xFF6
  4356                           tablat	equ	0xFF5
  4357                           prodh	equ	0xFF4
  4358                           prodl	equ	0xFF3
  4359                           intcon	equ	0xFF2
  4360                           postinc0	equ	0xFEE
  4361                           wreg	equ	0xFE8
  4362                           indf1	equ	0xFE7
  4363                           postdec1	equ	0xFE5
  4364                           fsr1h	equ	0xFE2
  4365                           fsr1l	equ	0xFE1
  4366                           indf2	equ	0xFDF
  4367                           postinc2	equ	0xFDE
  4368                           postdec2	equ	0xFDD
  4369                           plusw2	equ	0xFDB
  4370                           fsr2h	equ	0xFDA
  4371                           fsr2l	equ	0xFD9
  4372                           status	equ	0xFD8
  4373                           
  4374 ;; *************** function _processPowerRequest *****************
  4375 ;; Defined at:
  4376 ;;		line 29 in file "Communications.c"
  4377 ;; Parameters:    Size  Location     Type
  4378 ;;  powerSet        1    wreg     unsigned char 
  4379 ;; Auto vars:     Size  Location     Type
  4380 ;;  powerSet        1   43[COMRAM] unsigned char 
  4381 ;; Return value:  Size  Location     Type
  4382 ;;                  1    wreg      void 
  4383 ;; Registers used:
  4384 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4385 ;; Tracked objects:
  4386 ;;		On entry : 0/0
  4387 ;;		On exit  : 0/0
  4388 ;;		Unchanged: 0/0
  4389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4390 ;;      Params:         0       0       0       0       0       0       0
  4391 ;;      Locals:         1       0       0       0       0       0       0
  4392 ;;      Temps:          2       0       0       0       0       0       0
  4393 ;;      Totals:         3       0       0       0       0       0       0
  4394 ;;Total ram usage:        3 bytes
  4395 ;; Hardware stack levels used:    1
  4396 ;; Hardware stack levels required when called:    9
  4397 ;; This function calls:
  4398 ;;		_EnableSlavePower
  4399 ;;		_Update
  4400 ;; This function is called by:
  4401 ;;		_updateComms
  4402 ;; This function uses a non-reentrant model
  4403 ;;
  4404                           
  4405                           	psect	text19
  4406  00129C                     __ptext19:
  4407                           	opt stack 0
  4408  00129C                     _processPowerRequest:
  4409                           	opt stack 20
  4410                           
  4411                           ;incstack = 0
  4412                           ;processPowerRequest@powerSet stored from wreg
  4413  00129C  6E2C               	movwf	processPowerRequest@powerSet,c
  4414                           
  4415                           ;Communications.c: 31: if (((powerSet >> 1) & 0x01)){
  4416  00129E  C02C  F02A         	movff	processPowerRequest@powerSet,??_processPowerRequest
  4417  0012A2  90D8               	bcf	status,0,c
  4418  0012A4  322A               	rrcf	??_processPowerRequest,f,c
  4419  0012A6  A02A               	btfss	??_processPowerRequest,0,c
  4420  0012A8  D008               	goto	l4284
  4421                           
  4422                           ;Communications.c: 32: EnableSlavePower(BMM, ON);
  4423  0012AA  0E00               	movlw	0
  4424  0012AC  6E28               	movwf	EnableSlavePower@onof+1,c
  4425  0012AE  0E01               	movlw	1
  4426  0012B0  6E27               	movwf	EnableSlavePower@onof,c
  4427  0012B2  0E04               	movlw	4
  4428  0012B4  ECC6  F009         	call	_EnableSlavePower
  4429                           
  4430                           ;Communications.c: 33: }
  4431  0012B8  D007               	goto	l4286
  4432  0012BA                     l4284:
  4433                           
  4434                           ;Communications.c: 34: else{
  4435                           ;Communications.c: 35: EnableSlavePower(BMM, OFF);
  4436  0012BA  0E00               	movlw	0
  4437  0012BC  6E28               	movwf	EnableSlavePower@onof+1,c
  4438  0012BE  0E00               	movlw	0
  4439  0012C0  6E27               	movwf	EnableSlavePower@onof,c
  4440  0012C2  0E04               	movlw	4
  4441  0012C4  ECC6  F009         	call	_EnableSlavePower
  4442  0012C8                     l4286:
  4443                           
  4444                           ;Communications.c: 36: }
  4445                           ;Communications.c: 37: if (((powerSet >> 2) & 0x01)){
  4446  0012C8  C02C  F02A         	movff	processPowerRequest@powerSet,??_processPowerRequest
  4447  0012CC  90D8               	bcf	status,0,c
  4448  0012CE  322A               	rrcf	??_processPowerRequest,f,c
  4449  0012D0  90D8               	bcf	status,0,c
  4450  0012D2  322A               	rrcf	??_processPowerRequest,f,c
  4451  0012D4  A02A               	btfss	??_processPowerRequest,0,c
  4452  0012D6  D008               	goto	l4290
  4453                           
  4454                           ;Communications.c: 38: EnableSlavePower(MCS, ON);
  4455  0012D8  0E00               	movlw	0
  4456  0012DA  6E28               	movwf	EnableSlavePower@onof+1,c
  4457  0012DC  0E01               	movlw	1
  4458  0012DE  6E27               	movwf	EnableSlavePower@onof,c
  4459  0012E0  0E02               	movlw	2
  4460  0012E2  ECC6  F009         	call	_EnableSlavePower
  4461                           
  4462                           ;Communications.c: 39: }
  4463  0012E6  D007               	goto	l4292
  4464  0012E8                     l4290:
  4465                           
  4466                           ;Communications.c: 40: else{
  4467                           ;Communications.c: 41: EnableSlavePower(MCS,OFF);
  4468  0012E8  0E00               	movlw	0
  4469  0012EA  6E28               	movwf	EnableSlavePower@onof+1,c
  4470  0012EC  0E00               	movlw	0
  4471  0012EE  6E27               	movwf	EnableSlavePower@onof,c
  4472  0012F0  0E02               	movlw	2
  4473  0012F2  ECC6  F009         	call	_EnableSlavePower
  4474  0012F6                     l4292:
  4475                           
  4476                           ;Communications.c: 42: }
  4477                           ;Communications.c: 43: if (((powerSet >> 3) & 0x01)){
  4478  0012F6  C02C  F02A         	movff	processPowerRequest@powerSet,??_processPowerRequest
  4479  0012FA  90D8               	bcf	status,0,c
  4480  0012FC  322A               	rrcf	??_processPowerRequest,f,c
  4481  0012FE  90D8               	bcf	status,0,c
  4482  001300  322A               	rrcf	??_processPowerRequest,f,c
  4483  001302  90D8               	bcf	status,0,c
  4484  001304  322A               	rrcf	??_processPowerRequest,f,c
  4485  001306  A02A               	btfss	??_processPowerRequest,0,c
  4486  001308  D008               	goto	l4296
  4487                           
  4488                           ;Communications.c: 44: EnableSlavePower(DDS,ON);
  4489  00130A  0E00               	movlw	0
  4490  00130C  6E28               	movwf	EnableSlavePower@onof+1,c
  4491  00130E  0E01               	movlw	1
  4492  001310  6E27               	movwf	EnableSlavePower@onof,c
  4493  001312  0E01               	movlw	1
  4494  001314  ECC6  F009         	call	_EnableSlavePower
  4495                           
  4496                           ;Communications.c: 45: }
  4497  001318  D007               	goto	l4298
  4498  00131A                     l4296:
  4499                           
  4500                           ;Communications.c: 46: else{
  4501                           ;Communications.c: 47: EnableSlavePower(DDS,OFF);
  4502  00131A  0E00               	movlw	0
  4503  00131C  6E28               	movwf	EnableSlavePower@onof+1,c
  4504  00131E  0E00               	movlw	0
  4505  001320  6E27               	movwf	EnableSlavePower@onof,c
  4506  001322  0E01               	movlw	1
  4507  001324  ECC6  F009         	call	_EnableSlavePower
  4508  001328                     l4298:
  4509                           
  4510                           ;Communications.c: 48: }
  4511                           ;Communications.c: 49: if(((powerSet >> 4) & 0x01)){
  4512  001328  C02C  F02A         	movff	processPowerRequest@powerSet,??_processPowerRequest
  4513  00132C  3A2A               	swapf	??_processPowerRequest,f,c
  4514  00132E  0E0F               	movlw	15
  4515  001330  162A               	andwf	??_processPowerRequest,f,c
  4516  001332  A02A               	btfss	??_processPowerRequest,0,c
  4517  001334  D008               	goto	l4302
  4518                           
  4519                           ;Communications.c: 50: EnableSlavePower(SAS,ON);
  4520  001336  0E00               	movlw	0
  4521  001338  6E28               	movwf	EnableSlavePower@onof+1,c
  4522  00133A  0E01               	movlw	1
  4523  00133C  6E27               	movwf	EnableSlavePower@onof,c
  4524  00133E  0E03               	movlw	3
  4525  001340  ECC6  F009         	call	_EnableSlavePower
  4526                           
  4527                           ;Communications.c: 51: }
  4528  001344  D007               	goto	l4304
  4529  001346                     l4302:
  4530                           
  4531                           ;Communications.c: 52: else{
  4532                           ;Communications.c: 53: EnableSlavePower(SAS,OFF);
  4533  001346  0E00               	movlw	0
  4534  001348  6E28               	movwf	EnableSlavePower@onof+1,c
  4535  00134A  0E00               	movlw	0
  4536  00134C  6E27               	movwf	EnableSlavePower@onof,c
  4537  00134E  0E03               	movlw	3
  4538  001350  ECC6  F009         	call	_EnableSlavePower
  4539  001354                     l4304:
  4540                           
  4541                           ;Communications.c: 54: }
  4542                           ;Communications.c: 55: if(((powerSet >> 5) & 0x01)){
  4543  001354  C02C  F02A         	movff	processPowerRequest@powerSet,??_processPowerRequest
  4544  001358  0E05               	movlw	5
  4545  00135A  6E2B               	movwf	(??_processPowerRequest+1)& (0+255),c
  4546  00135C                     u2845:
  4547  00135C  90D8               	bcf	status,0,c
  4548  00135E  322A               	rrcf	??_processPowerRequest,f,c
  4549  001360  2E2B               	decfsz	(??_processPowerRequest+1)& (0+255),f,c
  4550  001362  D7FC               	goto	u2845
  4551  001364  A02A               	btfss	??_processPowerRequest,0,c
  4552  001366  D008               	goto	l4308
  4553                           
  4554                           ;Communications.c: 56: EnableSlavePower(TSS, ON);
  4555  001368  0E00               	movlw	0
  4556  00136A  6E28               	movwf	EnableSlavePower@onof+1,c
  4557  00136C  0E01               	movlw	1
  4558  00136E  6E27               	movwf	EnableSlavePower@onof,c
  4559  001370  0E05               	movlw	5
  4560  001372  ECC6  F009         	call	_EnableSlavePower
  4561                           
  4562                           ;Communications.c: 57: }
  4563  001376  D007               	goto	l387
  4564  001378                     l4308:
  4565                           
  4566                           ;Communications.c: 58: else{
  4567                           ;Communications.c: 59: EnableSlavePower(TSS,OFF);
  4568  001378  0E00               	movlw	0
  4569  00137A  6E28               	movwf	EnableSlavePower@onof+1,c
  4570  00137C  0E00               	movlw	0
  4571  00137E  6E27               	movwf	EnableSlavePower@onof,c
  4572  001380  0E05               	movlw	5
  4573  001382  ECC6  F009         	call	_EnableSlavePower
  4574  001386                     l387:
  4575                           
  4576                           ;Communications.c: 60: }
  4577                           ;Communications.c: 61: Update();
  4578  001386  EC16  F011         	call	_Update	;wreg free
  4579  00138A  0012               	return		;funcret
  4580  00138C                     __end_of_processPowerRequest:
  4581                           	opt stack 0
  4582                           tblptru	equ	0xFF8
  4583                           tblptrh	equ	0xFF7
  4584                           tblptrl	equ	0xFF6
  4585                           tablat	equ	0xFF5
  4586                           prodh	equ	0xFF4
  4587                           prodl	equ	0xFF3
  4588                           intcon	equ	0xFF2
  4589                           postinc0	equ	0xFEE
  4590                           wreg	equ	0xFE8
  4591                           indf1	equ	0xFE7
  4592                           postdec1	equ	0xFE5
  4593                           fsr1h	equ	0xFE2
  4594                           fsr1l	equ	0xFE1
  4595                           indf2	equ	0xFDF
  4596                           postinc2	equ	0xFDE
  4597                           postdec2	equ	0xFDD
  4598                           plusw2	equ	0xFDB
  4599                           fsr2h	equ	0xFDA
  4600                           fsr2l	equ	0xFD9
  4601                           status	equ	0xFD8
  4602                           
  4603 ;; *************** function _FaultsCollector *****************
  4604 ;; Defined at:
  4605 ;;		line 64 in file "Communications.c"
  4606 ;; Parameters:    Size  Location     Type
  4607 ;;		None
  4608 ;; Auto vars:     Size  Location     Type
  4609 ;;  i               2   34[COMRAM] int 
  4610 ;;  sendVal         2   32[COMRAM] unsigned int 
  4611 ;; Return value:  Size  Location     Type
  4612 ;;                  1    wreg      unsigned char 
  4613 ;; Registers used:
  4614 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4615 ;; Tracked objects:
  4616 ;;		On entry : 0/0
  4617 ;;		On exit  : 0/0
  4618 ;;		Unchanged: 0/0
  4619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4620 ;;      Params:         0       0       0       0       0       0       0
  4621 ;;      Locals:         4       0       0       0       0       0       0
  4622 ;;      Temps:          3       0       0       0       0       0       0
  4623 ;;      Totals:         7       0       0       0       0       0       0
  4624 ;;Total ram usage:        7 bytes
  4625 ;; Hardware stack levels used:    1
  4626 ;; Hardware stack levels required when called:    7
  4627 ;; This function calls:
  4628 ;;		_GetPDUFault
  4629 ;; This function is called by:
  4630 ;;		_updateComms
  4631 ;; This function uses a non-reentrant model
  4632 ;;
  4633                           
  4634                           	psect	text20
  4635  001C64                     __ptext20:
  4636                           	opt stack 0
  4637  001C64                     _FaultsCollector:
  4638                           	opt stack 22
  4639                           
  4640                           ;Communications.c: 65: unsigned int sendVal = 0;
  4641                           
  4642                           ;incstack = 0
  4643  001C64  0E00               	movlw	0
  4644  001C66  6E22               	movwf	FaultsCollector@sendVal+1,c
  4645  001C68  0E00               	movlw	0
  4646  001C6A  6E21               	movwf	FaultsCollector@sendVal,c
  4647                           
  4648                           ;Communications.c: 66: int i = 0;
  4649  001C6C  0E00               	movlw	0
  4650  001C6E  6E24               	movwf	FaultsCollector@i+1,c
  4651  001C70  0E00               	movlw	0
  4652  001C72  6E23               	movwf	FaultsCollector@i,c
  4653                           
  4654                           ;Communications.c: 67: for (i = 0; i < 5; i++) {
  4655  001C74  0E00               	movlw	0
  4656  001C76  6E24               	movwf	FaultsCollector@i+1,c
  4657  001C78  0E00               	movlw	0
  4658  001C7A  6E23               	movwf	FaultsCollector@i,c
  4659  001C7C                     l4312:
  4660  001C7C  BE24               	btfsc	FaultsCollector@i+1,7,c
  4661  001C7E  D006               	goto	l4316
  4662  001C80  5024               	movf	FaultsCollector@i+1,w,c
  4663  001C82  E11C               	bnz	l4322
  4664  001C84  0E05               	movlw	5
  4665  001C86  5C23               	subwf	FaultsCollector@i,w,c
  4666  001C88  B0D8               	btfsc	status,0,c
  4667  001C8A  D018               	goto	l4322
  4668  001C8C                     l4316:
  4669                           
  4670                           ;Communications.c: 68: sendVal = sendVal | ((GetPDUFault(i)&0x01) << i);
  4671  001C8C  C023  F01E         	movff	FaultsCollector@i,??_FaultsCollector
  4672  001C90  5023               	movf	FaultsCollector@i,w,c
  4673  001C92  ECC2  F010         	call	_GetPDUFault
  4674  001C96  0B01               	andlw	1
  4675  001C98  6E1F               	movwf	(??_FaultsCollector+1)& (0+255),c
  4676  001C9A  6A20               	clrf	(??_FaultsCollector+2)& (0+255),c
  4677  001C9C  2A1E               	incf	??_FaultsCollector,f,c
  4678  001C9E  D003               	goto	u2874
  4679  001CA0                     u2875:
  4680  001CA0  90D8               	bcf	status,0,c
  4681  001CA2  361F               	rlcf	??_FaultsCollector+1,f,c
  4682  001CA4  3620               	rlcf	??_FaultsCollector+2,f,c
  4683  001CA6                     u2874:
  4684  001CA6  2E1E               	decfsz	??_FaultsCollector,f,c
  4685  001CA8  D7FB               	goto	u2875
  4686  001CAA  5021               	movf	FaultsCollector@sendVal,w,c
  4687  001CAC  101F               	iorwf	??_FaultsCollector+1,w,c
  4688  001CAE  6E21               	movwf	FaultsCollector@sendVal,c
  4689  001CB0  5022               	movf	FaultsCollector@sendVal+1,w,c
  4690  001CB2  1020               	iorwf	??_FaultsCollector+2,w,c
  4691  001CB4  6E22               	movwf	FaultsCollector@sendVal+1,c
  4692  001CB6  4A23               	infsnz	FaultsCollector@i,f,c
  4693  001CB8  2A24               	incf	FaultsCollector@i+1,f,c
  4694  001CBA  D7E0               	goto	l4312
  4695  001CBC                     l4322:
  4696                           
  4697                           ;Communications.c: 69: }
  4698                           ;Communications.c: 70: return sendVal;
  4699  001CBC  5021               	movf	FaultsCollector@sendVal,w,c
  4700  001CBE  0012               	return	
  4701  001CC0                     __end_of_FaultsCollector:
  4702                           	opt stack 0
  4703                           tblptru	equ	0xFF8
  4704                           tblptrh	equ	0xFF7
  4705                           tblptrl	equ	0xFF6
  4706                           tablat	equ	0xFF5
  4707                           prodh	equ	0xFF4
  4708                           prodl	equ	0xFF3
  4709                           intcon	equ	0xFF2
  4710                           postinc0	equ	0xFEE
  4711                           wreg	equ	0xFE8
  4712                           indf1	equ	0xFE7
  4713                           postdec1	equ	0xFE5
  4714                           fsr1h	equ	0xFE2
  4715                           fsr1l	equ	0xFE1
  4716                           indf2	equ	0xFDF
  4717                           postinc2	equ	0xFDE
  4718                           postdec2	equ	0xFDD
  4719                           plusw2	equ	0xFDB
  4720                           fsr2h	equ	0xFDA
  4721                           fsr2l	equ	0xFD9
  4722                           status	equ	0xFD8
  4723                           
  4724 ;; *************** function _GetPDUFault *****************
  4725 ;; Defined at:
  4726 ;;		line 221 in file "PDU.c"
  4727 ;; Parameters:    Size  Location     Type
  4728 ;;  loc             1    wreg     unsigned char 
  4729 ;; Auto vars:     Size  Location     Type
  4730 ;;  loc             1   28[COMRAM] unsigned char 
  4731 ;; Return value:  Size  Location     Type
  4732 ;;                  1    wreg      unsigned char 
  4733 ;; Registers used:
  4734 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4735 ;; Tracked objects:
  4736 ;;		On entry : 0/0
  4737 ;;		On exit  : 0/0
  4738 ;;		Unchanged: 0/0
  4739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4740 ;;      Params:         0       0       0       0       0       0       0
  4741 ;;      Locals:         1       0       0       0       0       0       0
  4742 ;;      Temps:          0       0       0       0       0       0       0
  4743 ;;      Totals:         1       0       0       0       0       0       0
  4744 ;;Total ram usage:        1 bytes
  4745 ;; Hardware stack levels used:    1
  4746 ;; Hardware stack levels required when called:    6
  4747 ;; This function calls:
  4748 ;;		Nothing
  4749 ;; This function is called by:
  4750 ;;		_FaultsCollector
  4751 ;; This function uses a non-reentrant model
  4752 ;;
  4753                           
  4754                           	psect	text21
  4755  002184                     __ptext21:
  4756                           	opt stack 0
  4757  002184                     _GetPDUFault:
  4758                           	opt stack 22
  4759                           
  4760                           ;incstack = 0
  4761                           ;GetPDUFault@loc stored from wreg
  4762  002184  6E1D               	movwf	GetPDUFault@loc,c
  4763                           
  4764                           ;PDU.c: 222: return PDUFalult[loc];
  4765  002186  501D               	movf	GetPDUFault@loc,w,c
  4766  002188  0D01               	mullw	1
  4767  00218A  0EF5               	movlw	low _PDUFalult
  4768  00218C  24F3               	addwf	prodl,w,c
  4769  00218E  6ED9               	movwf	fsr2l,c
  4770  002190  0E00               	movlw	high _PDUFalult
  4771  002192  20F4               	addwfc	prodh,w,c
  4772  002194  6EDA               	movwf	fsr2h,c
  4773  002196  50DF               	movf	indf2,w,c
  4774  002198  0012               	return	
  4775  00219A                     __end_of_GetPDUFault:
  4776                           	opt stack 0
  4777                           tblptru	equ	0xFF8
  4778                           tblptrh	equ	0xFF7
  4779                           tblptrl	equ	0xFF6
  4780                           tablat	equ	0xFF5
  4781                           prodh	equ	0xFF4
  4782                           prodl	equ	0xFF3
  4783                           intcon	equ	0xFF2
  4784                           postinc0	equ	0xFEE
  4785                           wreg	equ	0xFE8
  4786                           indf1	equ	0xFE7
  4787                           postdec1	equ	0xFE5
  4788                           fsr1h	equ	0xFE2
  4789                           fsr1l	equ	0xFE1
  4790                           indf2	equ	0xFDF
  4791                           postinc2	equ	0xFDE
  4792                           postdec2	equ	0xFDD
  4793                           plusw2	equ	0xFDB
  4794                           fsr2h	equ	0xFDA
  4795                           fsr2l	equ	0xFD9
  4796                           status	equ	0xFD8
  4797                           
  4798 ;; *************** function _SYSTEM_Initialize *****************
  4799 ;; Defined at:
  4800 ;;		line 113 in file "mcc_generated_files/mcc.c"
  4801 ;; Parameters:    Size  Location     Type
  4802 ;;		None
  4803 ;; Auto vars:     Size  Location     Type
  4804 ;;		None
  4805 ;; Return value:  Size  Location     Type
  4806 ;;                  1    wreg      void 
  4807 ;; Registers used:
  4808 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4809 ;; Tracked objects:
  4810 ;;		On entry : 0/0
  4811 ;;		On exit  : 0/0
  4812 ;;		Unchanged: 0/0
  4813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4814 ;;      Params:         0       0       0       0       0       0       0
  4815 ;;      Locals:         0       0       0       0       0       0       0
  4816 ;;      Temps:          0       0       0       0       0       0       0
  4817 ;;      Totals:         0       0       0       0       0       0       0
  4818 ;;Total ram usage:        0 bytes
  4819 ;; Hardware stack levels used:    1
  4820 ;; Hardware stack levels required when called:    9
  4821 ;; This function calls:
  4822 ;;		_ADC_Initialize
  4823 ;;		_EUSART1_Initialize
  4824 ;;		_INTERRUPT_Initialize
  4825 ;;		_OSCILLATOR_Initialize
  4826 ;;		_PIN_MANAGER_Initialize
  4827 ;;		_PWM4_Initialize
  4828 ;;		_TMR1_Initialize
  4829 ;;		_TMR2_Initialize
  4830 ;; This function is called by:
  4831 ;;		_main
  4832 ;; This function uses a non-reentrant model
  4833 ;;
  4834                           
  4835                           	psect	text22
  4836  00208A                     __ptext22:
  4837                           	opt stack 0
  4838  00208A                     _SYSTEM_Initialize:
  4839                           	opt stack 21
  4840                           
  4841                           ;mcc.c: 114: OSCILLATOR_Initialize();
  4842                           
  4843                           ;incstack = 0
  4844  00208A  EC06  F011         	call	_OSCILLATOR_Initialize	;wreg free
  4845                           
  4846                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  4847  00208E  EC33  F00D         	call	_PIN_MANAGER_Initialize	;wreg free
  4848                           
  4849                           ;mcc.c: 116: INTERRUPT_Initialize();
  4850  002092  EC0D  F011         	call	_INTERRUPT_Initialize	;wreg free
  4851                           
  4852                           ;mcc.c: 117: EUSART1_Initialize();
  4853  002096  EC41  F00F         	call	_EUSART1_Initialize	;wreg free
  4854                           
  4855                           ;mcc.c: 118: PWM4_Initialize();
  4856  00209A  ECE2  F010         	call	_PWM4_Initialize	;wreg free
  4857                           
  4858                           ;mcc.c: 119: TMR1_Initialize();
  4859  00209E  EC57  F010         	call	_TMR1_Initialize	;wreg free
  4860                           
  4861                           ;mcc.c: 120: TMR2_Initialize();
  4862  0020A2  ECD8  F010         	call	_TMR2_Initialize	;wreg free
  4863                           
  4864                           ;mcc.c: 121: LATB4 = 1;
  4865  0020A6  888A               	bsf	3978,4,c	;volatile
  4866                           
  4867                           ;mcc.c: 122: ADC_Initialize();
  4868  0020A8  EC95  F010         	call	_ADC_Initialize	;wreg free
  4869  0020AC  0012               	return		;funcret
  4870  0020AE                     __end_of_SYSTEM_Initialize:
  4871                           	opt stack 0
  4872                           tblptru	equ	0xFF8
  4873                           tblptrh	equ	0xFF7
  4874                           tblptrl	equ	0xFF6
  4875                           tablat	equ	0xFF5
  4876                           prodh	equ	0xFF4
  4877                           prodl	equ	0xFF3
  4878                           intcon	equ	0xFF2
  4879                           postinc0	equ	0xFEE
  4880                           wreg	equ	0xFE8
  4881                           indf1	equ	0xFE7
  4882                           postdec1	equ	0xFE5
  4883                           fsr1h	equ	0xFE2
  4884                           fsr1l	equ	0xFE1
  4885                           indf2	equ	0xFDF
  4886                           postinc2	equ	0xFDE
  4887                           postdec2	equ	0xFDD
  4888                           plusw2	equ	0xFDB
  4889                           fsr2h	equ	0xFDA
  4890                           fsr2l	equ	0xFD9
  4891                           status	equ	0xFD8
  4892                           
  4893 ;; *************** function _TMR2_Initialize *****************
  4894 ;; Defined at:
  4895 ;;		line 9 in file "mcc_generated_files/tmr2.c"
  4896 ;; Parameters:    Size  Location     Type
  4897 ;;		None
  4898 ;; Auto vars:     Size  Location     Type
  4899 ;;		None
  4900 ;; Return value:  Size  Location     Type
  4901 ;;                  1    wreg      void 
  4902 ;; Registers used:
  4903 ;;		wreg, status,2, cstack
  4904 ;; Tracked objects:
  4905 ;;		On entry : 0/0
  4906 ;;		On exit  : 0/0
  4907 ;;		Unchanged: 0/0
  4908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4909 ;;      Params:         0       0       0       0       0       0       0
  4910 ;;      Locals:         0       0       0       0       0       0       0
  4911 ;;      Temps:          0       0       0       0       0       0       0
  4912 ;;      Totals:         0       0       0       0       0       0       0
  4913 ;;Total ram usage:        0 bytes
  4914 ;; Hardware stack levels used:    1
  4915 ;; Hardware stack levels required when called:    7
  4916 ;; This function calls:
  4917 ;;		_TMR2_StartTimer
  4918 ;; This function is called by:
  4919 ;;		_SYSTEM_Initialize
  4920 ;; This function uses a non-reentrant model
  4921 ;;
  4922                           
  4923                           	psect	text23
  4924  0021B0                     __ptext23:
  4925                           	opt stack 0
  4926  0021B0                     _TMR2_Initialize:
  4927                           	opt stack 22
  4928                           
  4929                           ;tmr2.c: 14: T2CON = 0x1A;
  4930                           
  4931                           ;incstack = 0
  4932  0021B0  0E1A               	movlw	26
  4933  0021B2  6EBA               	movwf	4026,c	;volatile
  4934                           
  4935                           ;tmr2.c: 17: PR2 = 0x7C;
  4936  0021B4  0E7C               	movlw	124
  4937  0021B6  6EBB               	movwf	4027,c	;volatile
  4938                           
  4939                           ;tmr2.c: 20: TMR2 = 0x00;
  4940  0021B8  0E00               	movlw	0
  4941  0021BA  6EBC               	movwf	4028,c	;volatile
  4942                           
  4943                           ;tmr2.c: 23: PIR1bits.TMR2IF = 0;
  4944  0021BC  929E               	bcf	3998,1,c	;volatile
  4945                           
  4946                           ;tmr2.c: 26: TMR2_StartTimer();
  4947  0021BE  EC1C  F011         	call	_TMR2_StartTimer	;wreg free
  4948  0021C2  0012               	return		;funcret
  4949  0021C4                     __end_of_TMR2_Initialize:
  4950                           	opt stack 0
  4951                           tblptru	equ	0xFF8
  4952                           tblptrh	equ	0xFF7
  4953                           tblptrl	equ	0xFF6
  4954                           tablat	equ	0xFF5
  4955                           prodh	equ	0xFF4
  4956                           prodl	equ	0xFF3
  4957                           intcon	equ	0xFF2
  4958                           postinc0	equ	0xFEE
  4959                           wreg	equ	0xFE8
  4960                           indf1	equ	0xFE7
  4961                           postdec1	equ	0xFE5
  4962                           fsr1h	equ	0xFE2
  4963                           fsr1l	equ	0xFE1
  4964                           indf2	equ	0xFDF
  4965                           postinc2	equ	0xFDE
  4966                           postdec2	equ	0xFDD
  4967                           plusw2	equ	0xFDB
  4968                           fsr2h	equ	0xFDA
  4969                           fsr2l	equ	0xFD9
  4970                           status	equ	0xFD8
  4971                           
  4972 ;; *************** function _TMR2_StartTimer *****************
  4973 ;; Defined at:
  4974 ;;		line 29 in file "mcc_generated_files/tmr2.c"
  4975 ;; Parameters:    Size  Location     Type
  4976 ;;		None
  4977 ;; Auto vars:     Size  Location     Type
  4978 ;;		None
  4979 ;; Return value:  Size  Location     Type
  4980 ;;                  1    wreg      void 
  4981 ;; Registers used:
  4982 ;;		None
  4983 ;; Tracked objects:
  4984 ;;		On entry : 0/0
  4985 ;;		On exit  : 0/0
  4986 ;;		Unchanged: 0/0
  4987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4988 ;;      Params:         0       0       0       0       0       0       0
  4989 ;;      Locals:         0       0       0       0       0       0       0
  4990 ;;      Temps:          0       0       0       0       0       0       0
  4991 ;;      Totals:         0       0       0       0       0       0       0
  4992 ;;Total ram usage:        0 bytes
  4993 ;; Hardware stack levels used:    1
  4994 ;; Hardware stack levels required when called:    6
  4995 ;; This function calls:
  4996 ;;		Nothing
  4997 ;; This function is called by:
  4998 ;;		_TMR2_Initialize
  4999 ;; This function uses a non-reentrant model
  5000 ;;
  5001                           
  5002                           	psect	text24
  5003  002238                     __ptext24:
  5004                           	opt stack 0
  5005  002238                     _TMR2_StartTimer:
  5006                           	opt stack 22
  5007                           
  5008                           ;tmr2.c: 32: T2CONbits.TMR2ON = 1;
  5009                           
  5010                           ;incstack = 0
  5011  002238  84BA               	bsf	4026,2,c	;volatile
  5012  00223A  0012               	return		;funcret
  5013  00223C                     __end_of_TMR2_StartTimer:
  5014                           	opt stack 0
  5015                           tblptru	equ	0xFF8
  5016                           tblptrh	equ	0xFF7
  5017                           tblptrl	equ	0xFF6
  5018                           tablat	equ	0xFF5
  5019                           prodh	equ	0xFF4
  5020                           prodl	equ	0xFF3
  5021                           intcon	equ	0xFF2
  5022                           postinc0	equ	0xFEE
  5023                           wreg	equ	0xFE8
  5024                           indf1	equ	0xFE7
  5025                           postdec1	equ	0xFE5
  5026                           fsr1h	equ	0xFE2
  5027                           fsr1l	equ	0xFE1
  5028                           indf2	equ	0xFDF
  5029                           postinc2	equ	0xFDE
  5030                           postdec2	equ	0xFDD
  5031                           plusw2	equ	0xFDB
  5032                           fsr2h	equ	0xFDA
  5033                           fsr2l	equ	0xFD9
  5034                           status	equ	0xFD8
  5035                           
  5036 ;; *************** function _TMR1_Initialize *****************
  5037 ;; Defined at:
  5038 ;;		line 66 in file "mcc_generated_files/tmr1.c"
  5039 ;; Parameters:    Size  Location     Type
  5040 ;;		None
  5041 ;; Auto vars:     Size  Location     Type
  5042 ;;		None
  5043 ;; Return value:  Size  Location     Type
  5044 ;;                  1    wreg      void 
  5045 ;; Registers used:
  5046 ;;		wreg, status,2, cstack
  5047 ;; Tracked objects:
  5048 ;;		On entry : 0/0
  5049 ;;		On exit  : 0/0
  5050 ;;		Unchanged: 0/0
  5051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5052 ;;      Params:         0       0       0       0       0       0       0
  5053 ;;      Locals:         0       0       0       0       0       0       0
  5054 ;;      Temps:          0       0       0       0       0       0       0
  5055 ;;      Totals:         0       0       0       0       0       0       0
  5056 ;;Total ram usage:        0 bytes
  5057 ;; Hardware stack levels used:    1
  5058 ;; Hardware stack levels required when called:    7
  5059 ;; This function calls:
  5060 ;;		_TMR1_StartTimer
  5061 ;; This function is called by:
  5062 ;;		_SYSTEM_Initialize
  5063 ;; This function uses a non-reentrant model
  5064 ;;
  5065                           
  5066                           	psect	text25
  5067  0020AE                     __ptext25:
  5068                           	opt stack 0
  5069  0020AE                     _TMR1_Initialize:
  5070                           	opt stack 22
  5071                           
  5072                           ;tmr1.c: 71: T1CON = 0x00;
  5073                           
  5074                           ;incstack = 0
  5075  0020AE  0E00               	movlw	0
  5076  0020B0  6ECD               	movwf	4045,c	;volatile
  5077                           
  5078                           ;tmr1.c: 75: T1GCON = 0x00;
  5079  0020B2  0E00               	movlw	0
  5080  0020B4  6ECC               	movwf	4044,c	;volatile
  5081                           
  5082                           ;tmr1.c: 78: TMR1H = 0x00;
  5083  0020B6  0E00               	movlw	0
  5084  0020B8  6ECF               	movwf	4047,c	;volatile
  5085                           
  5086                           ;tmr1.c: 81: TMR1L = 0x00;
  5087  0020BA  0E00               	movlw	0
  5088  0020BC  6ECE               	movwf	4046,c	;volatile
  5089                           
  5090                           ;tmr1.c: 84: timer1ReloadVal=0;
  5091  0020BE  0E00               	movlw	0
  5092  0020C0  6E39               	movwf	_timer1ReloadVal+1,c	;volatile
  5093  0020C2  0E00               	movlw	0
  5094  0020C4  6E38               	movwf	_timer1ReloadVal,c	;volatile
  5095                           
  5096                           ;tmr1.c: 87: PIR1bits.TMR1IF = 0;
  5097  0020C6  909E               	bcf	3998,0,c	;volatile
  5098                           
  5099                           ;tmr1.c: 90: PIE1bits.TMR1IE = 1;
  5100  0020C8  809D               	bsf	3997,0,c	;volatile
  5101                           
  5102                           ;tmr1.c: 93: TMR1_StartTimer();
  5103  0020CA  EC1E  F011         	call	_TMR1_StartTimer	;wreg free
  5104  0020CE  0012               	return		;funcret
  5105  0020D0                     __end_of_TMR1_Initialize:
  5106                           	opt stack 0
  5107                           tblptru	equ	0xFF8
  5108                           tblptrh	equ	0xFF7
  5109                           tblptrl	equ	0xFF6
  5110                           tablat	equ	0xFF5
  5111                           prodh	equ	0xFF4
  5112                           prodl	equ	0xFF3
  5113                           intcon	equ	0xFF2
  5114                           postinc0	equ	0xFEE
  5115                           wreg	equ	0xFE8
  5116                           indf1	equ	0xFE7
  5117                           postdec1	equ	0xFE5
  5118                           fsr1h	equ	0xFE2
  5119                           fsr1l	equ	0xFE1
  5120                           indf2	equ	0xFDF
  5121                           postinc2	equ	0xFDE
  5122                           postdec2	equ	0xFDD
  5123                           plusw2	equ	0xFDB
  5124                           fsr2h	equ	0xFDA
  5125                           fsr2l	equ	0xFD9
  5126                           status	equ	0xFD8
  5127                           
  5128 ;; *************** function _TMR1_StartTimer *****************
  5129 ;; Defined at:
  5130 ;;		line 96 in file "mcc_generated_files/tmr1.c"
  5131 ;; Parameters:    Size  Location     Type
  5132 ;;		None
  5133 ;; Auto vars:     Size  Location     Type
  5134 ;;		None
  5135 ;; Return value:  Size  Location     Type
  5136 ;;                  1    wreg      void 
  5137 ;; Registers used:
  5138 ;;		None
  5139 ;; Tracked objects:
  5140 ;;		On entry : 0/0
  5141 ;;		On exit  : 0/0
  5142 ;;		Unchanged: 0/0
  5143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5144 ;;      Params:         0       0       0       0       0       0       0
  5145 ;;      Locals:         0       0       0       0       0       0       0
  5146 ;;      Temps:          0       0       0       0       0       0       0
  5147 ;;      Totals:         0       0       0       0       0       0       0
  5148 ;;Total ram usage:        0 bytes
  5149 ;; Hardware stack levels used:    1
  5150 ;; Hardware stack levels required when called:    6
  5151 ;; This function calls:
  5152 ;;		Nothing
  5153 ;; This function is called by:
  5154 ;;		_TMR1_Initialize
  5155 ;; This function uses a non-reentrant model
  5156 ;;
  5157                           
  5158                           	psect	text26
  5159  00223C                     __ptext26:
  5160                           	opt stack 0
  5161  00223C                     _TMR1_StartTimer:
  5162                           	opt stack 22
  5163                           
  5164                           ;tmr1.c: 99: T1CONbits.TMR1ON = 1;
  5165                           
  5166                           ;incstack = 0
  5167  00223C  80CD               	bsf	4045,0,c	;volatile
  5168  00223E  0012               	return		;funcret
  5169  002240                     __end_of_TMR1_StartTimer:
  5170                           	opt stack 0
  5171                           tblptru	equ	0xFF8
  5172                           tblptrh	equ	0xFF7
  5173                           tblptrl	equ	0xFF6
  5174                           tablat	equ	0xFF5
  5175                           prodh	equ	0xFF4
  5176                           prodl	equ	0xFF3
  5177                           intcon	equ	0xFF2
  5178                           postinc0	equ	0xFEE
  5179                           wreg	equ	0xFE8
  5180                           indf1	equ	0xFE7
  5181                           postdec1	equ	0xFE5
  5182                           fsr1h	equ	0xFE2
  5183                           fsr1l	equ	0xFE1
  5184                           indf2	equ	0xFDF
  5185                           postinc2	equ	0xFDE
  5186                           postdec2	equ	0xFDD
  5187                           plusw2	equ	0xFDB
  5188                           fsr2h	equ	0xFDA
  5189                           fsr2l	equ	0xFD9
  5190                           status	equ	0xFD8
  5191                           
  5192 ;; *************** function _PWM4_Initialize *****************
  5193 ;; Defined at:
  5194 ;;		line 64 in file "mcc_generated_files/pwm4.c"
  5195 ;; Parameters:    Size  Location     Type
  5196 ;;		None
  5197 ;; Auto vars:     Size  Location     Type
  5198 ;;		None
  5199 ;; Return value:  Size  Location     Type
  5200 ;;                  1    wreg      void 
  5201 ;; Registers used:
  5202 ;;		wreg, status,2
  5203 ;; Tracked objects:
  5204 ;;		On entry : 0/0
  5205 ;;		On exit  : 0/0
  5206 ;;		Unchanged: 0/0
  5207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5208 ;;      Params:         0       0       0       0       0       0       0
  5209 ;;      Locals:         0       0       0       0       0       0       0
  5210 ;;      Temps:          0       0       0       0       0       0       0
  5211 ;;      Totals:         0       0       0       0       0       0       0
  5212 ;;Total ram usage:        0 bytes
  5213 ;; Hardware stack levels used:    1
  5214 ;; Hardware stack levels required when called:    6
  5215 ;; This function calls:
  5216 ;;		Nothing
  5217 ;; This function is called by:
  5218 ;;		_SYSTEM_Initialize
  5219 ;; This function uses a non-reentrant model
  5220 ;;
  5221                           
  5222                           	psect	text27
  5223  0021C4                     __ptext27:
  5224                           	opt stack 0
  5225  0021C4                     _PWM4_Initialize:
  5226                           	opt stack 23
  5227                           
  5228                           ;pwm4.c: 69: CCP2CON = 0x1C;
  5229                           
  5230                           ;incstack = 0
  5231  0021C4  0E1C               	movlw	28
  5232  0021C6  6E66               	movwf	3942,c	;volatile
  5233                           
  5234                           ;pwm4.c: 72: CCPR2L = 0x3E;
  5235  0021C8  0E3E               	movlw	62
  5236  0021CA  6E67               	movwf	3943,c	;volatile
  5237                           
  5238                           ;pwm4.c: 75: CCPR2H = 0x00;
  5239  0021CC  0E00               	movlw	0
  5240  0021CE  6E68               	movwf	3944,c	;volatile
  5241                           
  5242                           ;pwm4.c: 78: CCPTMRS1bits.C4TSEL = 0x0;
  5243  0021D0  0EFC               	movlw	-4
  5244  0021D2  010F               	movlb	15	; () banked
  5245  0021D4  1748               	andwf	72,f,b	;volatile
  5246                           
  5247                           ; BSR set to: 15
  5248  0021D6  0012               	return		;funcret
  5249  0021D8                     __end_of_PWM4_Initialize:
  5250                           	opt stack 0
  5251                           tblptru	equ	0xFF8
  5252                           tblptrh	equ	0xFF7
  5253                           tblptrl	equ	0xFF6
  5254                           tablat	equ	0xFF5
  5255                           prodh	equ	0xFF4
  5256                           prodl	equ	0xFF3
  5257                           intcon	equ	0xFF2
  5258                           postinc0	equ	0xFEE
  5259                           wreg	equ	0xFE8
  5260                           indf1	equ	0xFE7
  5261                           postdec1	equ	0xFE5
  5262                           fsr1h	equ	0xFE2
  5263                           fsr1l	equ	0xFE1
  5264                           indf2	equ	0xFDF
  5265                           postinc2	equ	0xFDE
  5266                           postdec2	equ	0xFDD
  5267                           plusw2	equ	0xFDB
  5268                           fsr2h	equ	0xFDA
  5269                           fsr2l	equ	0xFD9
  5270                           status	equ	0xFD8
  5271                           
  5272 ;; *************** function _PIN_MANAGER_Initialize *****************
  5273 ;; Defined at:
  5274 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  5275 ;; Parameters:    Size  Location     Type
  5276 ;;		None
  5277 ;; Auto vars:     Size  Location     Type
  5278 ;;		None
  5279 ;; Return value:  Size  Location     Type
  5280 ;;                  1    wreg      void 
  5281 ;; Registers used:
  5282 ;;		wreg, status,2
  5283 ;; Tracked objects:
  5284 ;;		On entry : 0/0
  5285 ;;		On exit  : 0/0
  5286 ;;		Unchanged: 0/0
  5287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5288 ;;      Params:         0       0       0       0       0       0       0
  5289 ;;      Locals:         0       0       0       0       0       0       0
  5290 ;;      Temps:          0       0       0       0       0       0       0
  5291 ;;      Totals:         0       0       0       0       0       0       0
  5292 ;;Total ram usage:        0 bytes
  5293 ;; Hardware stack levels used:    1
  5294 ;; Hardware stack levels required when called:    6
  5295 ;; This function calls:
  5296 ;;		Nothing
  5297 ;; This function is called by:
  5298 ;;		_SYSTEM_Initialize
  5299 ;; This function uses a non-reentrant model
  5300 ;;
  5301                           
  5302                           	psect	text28
  5303  001A66                     __ptext28:
  5304                           	opt stack 0
  5305  001A66                     _PIN_MANAGER_Initialize:
  5306                           	opt stack 23
  5307                           
  5308                           ;pin_manager.c: 52: LATA = 0x00;
  5309                           
  5310                           ; BSR set to: 15
  5311                           ;incstack = 0
  5312  001A66  0E00               	movlw	0
  5313  001A68  6E89               	movwf	3977,c	;volatile
  5314                           
  5315                           ;pin_manager.c: 53: TRISA = 0xF7;
  5316  001A6A  0EF7               	movlw	247
  5317  001A6C  6E92               	movwf	3986,c	;volatile
  5318                           
  5319                           ;pin_manager.c: 54: ANSELA = 0x27;
  5320  001A6E  0E27               	movlw	39
  5321  001A70  010F               	movlb	15	; () banked
  5322  001A72  6F38               	movwf	56,b	;volatile
  5323                           
  5324                           ;pin_manager.c: 56: LATB = 0x01;
  5325  001A74  0E01               	movlw	1
  5326  001A76  6E8A               	movwf	3978,c	;volatile
  5327                           
  5328                           ;pin_manager.c: 57: TRISB = 0xFE;
  5329  001A78  0EFE               	movlw	254
  5330  001A7A  6E93               	movwf	3987,c	;volatile
  5331                           
  5332                           ;pin_manager.c: 58: ANSELB = 0x3E;
  5333  001A7C  0E3E               	movlw	62
  5334  001A7E  010F               	movlb	15	; () banked
  5335  001A80  6F39               	movwf	57,b	;volatile
  5336                           
  5337                           ;pin_manager.c: 59: WPUB = 0x00;
  5338  001A82  0E00               	movlw	0
  5339  001A84  6E61               	movwf	3937,c	;volatile
  5340                           
  5341                           ;pin_manager.c: 61: LATC = 0x00;
  5342  001A86  0E00               	movlw	0
  5343  001A88  6E8B               	movwf	3979,c	;volatile
  5344                           
  5345                           ;pin_manager.c: 62: TRISC = 0xDF;
  5346  001A8A  0EDF               	movlw	223
  5347  001A8C  6E94               	movwf	3988,c	;volatile
  5348                           
  5349                           ;pin_manager.c: 63: ANSELC = 0x1C;
  5350  001A8E  0E1C               	movlw	28
  5351  001A90  010F               	movlb	15	; () banked
  5352  001A92  6F3A               	movwf	58,b	;volatile
  5353                           
  5354                           ;pin_manager.c: 65: LATD = 0x00;
  5355  001A94  0E00               	movlw	0
  5356  001A96  6E8C               	movwf	3980,c	;volatile
  5357                           
  5358                           ;pin_manager.c: 66: TRISD = 0x0F;
  5359  001A98  0E0F               	movlw	15
  5360  001A9A  6E95               	movwf	3989,c	;volatile
  5361                           
  5362                           ;pin_manager.c: 67: ANSELD = 0x0F;
  5363  001A9C  0E0F               	movlw	15
  5364  001A9E  010F               	movlb	15	; () banked
  5365  001AA0  6F3B               	movwf	59,b	;volatile
  5366                           
  5367                           ;pin_manager.c: 69: LATE = 0x00;
  5368  001AA2  0E00               	movlw	0
  5369  001AA4  6E8D               	movwf	3981,c	;volatile
  5370                           
  5371                           ;pin_manager.c: 70: TRISE = 0x07;
  5372  001AA6  0E07               	movlw	7
  5373  001AA8  6E96               	movwf	3990,c	;volatile
  5374                           
  5375                           ;pin_manager.c: 71: ANSELE = 0x07;
  5376  001AAA  0E07               	movlw	7
  5377  001AAC  010F               	movlb	15	; () banked
  5378  001AAE  6F3C               	movwf	60,b	;volatile
  5379                           
  5380                           ; BSR set to: 15
  5381                           ;pin_manager.c: 72: TRISCbits.RC6 = 1;
  5382  001AB0  8C94               	bsf	3988,6,c	;volatile
  5383                           
  5384                           ; BSR set to: 15
  5385                           ;pin_manager.c: 73: TRISCbits.RC7 = 1;
  5386  001AB2  8E94               	bsf	3988,7,c	;volatile
  5387                           
  5388                           ; BSR set to: 15
  5389                           ;pin_manager.c: 74: TRISCbits.RC5 = 0;
  5390  001AB4  9A94               	bcf	3988,5,c	;volatile
  5391                           
  5392                           ; BSR set to: 15
  5393                           ;pin_manager.c: 75: LATCbits.LATC5 = 1;
  5394  001AB6  8A8B               	bsf	3979,5,c	;volatile
  5395                           
  5396                           ; BSR set to: 15
  5397                           ;pin_manager.c: 76: LATCbits.LATC6 = 1;
  5398  001AB8  8C8B               	bsf	3979,6,c	;volatile
  5399                           
  5400                           ; BSR set to: 15
  5401                           ;pin_manager.c: 77: LATCbits.LATC7 = 1;
  5402  001ABA  8E8B               	bsf	3979,7,c	;volatile
  5403                           
  5404                           ; BSR set to: 15
  5405                           ;pin_manager.c: 78: ANSELCbits.ANSC5 =0;
  5406  001ABC  010F               	movlb	15	; () banked
  5407  001ABE  9B3A               	bcf	58,5,b	;volatile
  5408                           
  5409                           ; BSR set to: 15
  5410                           ;pin_manager.c: 79: ANSELCbits.ANSC6 =0;
  5411  001AC0  010F               	movlb	15	; () banked
  5412  001AC2  9D3A               	bcf	58,6,b	;volatile
  5413                           
  5414                           ; BSR set to: 15
  5415                           ;pin_manager.c: 80: ANSELCbits.ANSC7 =0;
  5416  001AC4  010F               	movlb	15	; () banked
  5417  001AC6  9F3A               	bcf	58,7,b	;volatile
  5418                           
  5419                           ; BSR set to: 15
  5420                           ;pin_manager.c: 82: INTCON2bits.nRBPU = 0x01;
  5421  001AC8  8EF1               	bsf	intcon2,7,c	;volatile
  5422                           
  5423                           ; BSR set to: 15
  5424                           
  5425                           ; BSR set to: 15
  5426                           
  5427                           ;pin_manager.c: 84: do { TRISB4 = 0; } while(0);
  5428  001ACA  9893               	bcf	3987,4,c	;volatile
  5429                           
  5430                           ; BSR set to: 15
  5431                           
  5432                           ; BSR set to: 15
  5433                           
  5434                           ;pin_manager.c: 85: do { TRISB3 = 0; } while(0);
  5435                           
  5436                           ; BSR set to: 15
  5437  001ACC  9693               	bcf	3987,3,c	;volatile
  5438                           
  5439                           ; BSR set to: 15
  5440                           
  5441                           ; BSR set to: 15
  5442                           
  5443                           ;pin_manager.c: 86: do { TRISB5 = 0; } while(0);
  5444                           
  5445                           ; BSR set to: 15
  5446  001ACE  9A93               	bcf	3987,5,c	;volatile
  5447                           
  5448                           ; BSR set to: 15
  5449                           ;pin_manager.c: 88: TRISDbits.RD1 = 0;
  5450                           
  5451                           ; BSR set to: 15
  5452  001AD0  9295               	bcf	3989,1,c	;volatile
  5453                           
  5454                           ; BSR set to: 15
  5455                           
  5456                           ; BSR set to: 15
  5457                           
  5458                           ;pin_manager.c: 90: do { ANSB3 = 0; } while(0);
  5459  001AD2  010F               	movlb	15	; () banked
  5460  001AD4  9739               	bcf	57,3,b	;volatile
  5461                           
  5462                           ; BSR set to: 15
  5463                           
  5464                           ; BSR set to: 15
  5465                           
  5466                           ;pin_manager.c: 91: do { ANSD7 = 0; } while(0);
  5467                           
  5468                           ; BSR set to: 15
  5469  001AD6  010F               	movlb	15	; () banked
  5470  001AD8  9F3B               	bcf	59,7,b	;volatile
  5471                           
  5472                           ; BSR set to: 15
  5473                           
  5474                           ; BSR set to: 15
  5475                           
  5476                           ;pin_manager.c: 92: do { ANSB4 = 0; } while(0);
  5477                           
  5478                           ; BSR set to: 15
  5479  001ADA  010F               	movlb	15	; () banked
  5480  001ADC  9939               	bcf	57,4,b	;volatile
  5481  001ADE  0012               	return	
  5482  001AE0                     __end_of_PIN_MANAGER_Initialize:
  5483                           	opt stack 0
  5484                           tblptru	equ	0xFF8
  5485                           tblptrh	equ	0xFF7
  5486                           tblptrl	equ	0xFF6
  5487                           tablat	equ	0xFF5
  5488                           prodh	equ	0xFF4
  5489                           prodl	equ	0xFF3
  5490                           intcon	equ	0xFF2
  5491                           intcon2	equ	0xFF1
  5492                           postinc0	equ	0xFEE
  5493                           wreg	equ	0xFE8
  5494                           indf1	equ	0xFE7
  5495                           postdec1	equ	0xFE5
  5496                           fsr1h	equ	0xFE2
  5497                           fsr1l	equ	0xFE1
  5498                           indf2	equ	0xFDF
  5499                           postinc2	equ	0xFDE
  5500                           postdec2	equ	0xFDD
  5501                           plusw2	equ	0xFDB
  5502                           fsr2h	equ	0xFDA
  5503                           fsr2l	equ	0xFD9
  5504                           status	equ	0xFD8
  5505                           
  5506 ;; *************** function _OSCILLATOR_Initialize *****************
  5507 ;; Defined at:
  5508 ;;		line 125 in file "mcc_generated_files/mcc.c"
  5509 ;; Parameters:    Size  Location     Type
  5510 ;;		None
  5511 ;; Auto vars:     Size  Location     Type
  5512 ;;		None
  5513 ;; Return value:  Size  Location     Type
  5514 ;;                  1    wreg      void 
  5515 ;; Registers used:
  5516 ;;		wreg, status,2
  5517 ;; Tracked objects:
  5518 ;;		On entry : 0/0
  5519 ;;		On exit  : 0/0
  5520 ;;		Unchanged: 0/0
  5521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5522 ;;      Params:         0       0       0       0       0       0       0
  5523 ;;      Locals:         0       0       0       0       0       0       0
  5524 ;;      Temps:          0       0       0       0       0       0       0
  5525 ;;      Totals:         0       0       0       0       0       0       0
  5526 ;;Total ram usage:        0 bytes
  5527 ;; Hardware stack levels used:    1
  5528 ;; Hardware stack levels required when called:    6
  5529 ;; This function calls:
  5530 ;;		Nothing
  5531 ;; This function is called by:
  5532 ;;		_SYSTEM_Initialize
  5533 ;; This function uses a non-reentrant model
  5534 ;;
  5535                           
  5536                           	psect	text29
  5537  00220C                     __ptext29:
  5538                           	opt stack 0
  5539  00220C                     _OSCILLATOR_Initialize:
  5540                           	opt stack 23
  5541                           
  5542                           ;mcc.c: 127: OSCCON = 0x72;
  5543                           
  5544                           ; BSR set to: 15
  5545                           ;incstack = 0
  5546  00220C  0E72               	movlw	114
  5547  00220E  6ED3               	movwf	4051,c	;volatile
  5548                           
  5549                           ;mcc.c: 129: OSCCON2 = 0x04;
  5550  002210  0E04               	movlw	4
  5551  002212  6ED2               	movwf	4050,c	;volatile
  5552                           
  5553                           ;mcc.c: 131: OSCTUNE = 0x00;
  5554  002214  0E00               	movlw	0
  5555  002216  6E9B               	movwf	3995,c	;volatile
  5556  002218  0012               	return		;funcret
  5557  00221A                     __end_of_OSCILLATOR_Initialize:
  5558                           	opt stack 0
  5559                           tblptru	equ	0xFF8
  5560                           tblptrh	equ	0xFF7
  5561                           tblptrl	equ	0xFF6
  5562                           tablat	equ	0xFF5
  5563                           prodh	equ	0xFF4
  5564                           prodl	equ	0xFF3
  5565                           intcon	equ	0xFF2
  5566                           intcon2	equ	0xFF1
  5567                           postinc0	equ	0xFEE
  5568                           wreg	equ	0xFE8
  5569                           indf1	equ	0xFE7
  5570                           postdec1	equ	0xFE5
  5571                           fsr1h	equ	0xFE2
  5572                           fsr1l	equ	0xFE1
  5573                           indf2	equ	0xFDF
  5574                           postinc2	equ	0xFDE
  5575                           postdec2	equ	0xFDD
  5576                           plusw2	equ	0xFDB
  5577                           fsr2h	equ	0xFDA
  5578                           fsr2l	equ	0xFD9
  5579                           status	equ	0xFD8
  5580                           
  5581 ;; *************** function _INTERRUPT_Initialize *****************
  5582 ;; Defined at:
  5583 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  5584 ;; Parameters:    Size  Location     Type
  5585 ;;		None
  5586 ;; Auto vars:     Size  Location     Type
  5587 ;;		None
  5588 ;; Return value:  Size  Location     Type
  5589 ;;                  1    wreg      void 
  5590 ;; Registers used:
  5591 ;;		None
  5592 ;; Tracked objects:
  5593 ;;		On entry : 0/0
  5594 ;;		On exit  : 0/0
  5595 ;;		Unchanged: 0/0
  5596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5597 ;;      Params:         0       0       0       0       0       0       0
  5598 ;;      Locals:         0       0       0       0       0       0       0
  5599 ;;      Temps:          0       0       0       0       0       0       0
  5600 ;;      Totals:         0       0       0       0       0       0       0
  5601 ;;Total ram usage:        0 bytes
  5602 ;; Hardware stack levels used:    1
  5603 ;; Hardware stack levels required when called:    6
  5604 ;; This function calls:
  5605 ;;		Nothing
  5606 ;; This function is called by:
  5607 ;;		_SYSTEM_Initialize
  5608 ;; This function uses a non-reentrant model
  5609 ;;
  5610                           
  5611                           	psect	text30
  5612  00221A                     __ptext30:
  5613                           	opt stack 0
  5614  00221A                     _INTERRUPT_Initialize:
  5615                           	opt stack 23
  5616                           
  5617                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  5618                           
  5619                           ;incstack = 0
  5620  00221A  9ED0               	bcf	4048,7,c	;volatile
  5621                           
  5622                           ;interrupt_manager.c: 60: IPR1bits.RC1IP = 0;
  5623  00221C  9A9F               	bcf	3999,5,c	;volatile
  5624                           
  5625                           ;interrupt_manager.c: 62: IPR1bits.TX1IP = 0;
  5626  00221E  989F               	bcf	3999,4,c	;volatile
  5627                           
  5628                           ;interrupt_manager.c: 64: IPR1bits.ADIP = 0;
  5629  002220  9C9F               	bcf	3999,6,c	;volatile
  5630  002222  0012               	return		;funcret
  5631  002224                     __end_of_INTERRUPT_Initialize:
  5632                           	opt stack 0
  5633                           tblptru	equ	0xFF8
  5634                           tblptrh	equ	0xFF7
  5635                           tblptrl	equ	0xFF6
  5636                           tablat	equ	0xFF5
  5637                           prodh	equ	0xFF4
  5638                           prodl	equ	0xFF3
  5639                           intcon	equ	0xFF2
  5640                           intcon2	equ	0xFF1
  5641                           postinc0	equ	0xFEE
  5642                           wreg	equ	0xFE8
  5643                           indf1	equ	0xFE7
  5644                           postdec1	equ	0xFE5
  5645                           fsr1h	equ	0xFE2
  5646                           fsr1l	equ	0xFE1
  5647                           indf2	equ	0xFDF
  5648                           postinc2	equ	0xFDE
  5649                           postdec2	equ	0xFDD
  5650                           plusw2	equ	0xFDB
  5651                           fsr2h	equ	0xFDA
  5652                           fsr2l	equ	0xFD9
  5653                           status	equ	0xFD8
  5654                           
  5655 ;; *************** function _EUSART1_Initialize *****************
  5656 ;; Defined at:
  5657 ;;		line 20 in file "UART.c"
  5658 ;; Parameters:    Size  Location     Type
  5659 ;;		None
  5660 ;; Auto vars:     Size  Location     Type
  5661 ;;		None
  5662 ;; Return value:  Size  Location     Type
  5663 ;;                  1    wreg      void 
  5664 ;; Registers used:
  5665 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5666 ;; Tracked objects:
  5667 ;;		On entry : 0/0
  5668 ;;		On exit  : 0/0
  5669 ;;		Unchanged: 0/0
  5670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5671 ;;      Params:         0       0       0       0       0       0       0
  5672 ;;      Locals:         0       0       0       0       0       0       0
  5673 ;;      Temps:          0       0       0       0       0       0       0
  5674 ;;      Totals:         0       0       0       0       0       0       0
  5675 ;;Total ram usage:        0 bytes
  5676 ;; Hardware stack levels used:    1
  5677 ;; Hardware stack levels required when called:    8
  5678 ;; This function calls:
  5679 ;;		_UART_buff_init
  5680 ;; This function is called by:
  5681 ;;		_SYSTEM_Initialize
  5682 ;; This function uses a non-reentrant model
  5683 ;;
  5684                           
  5685                           	psect	text31
  5686  001E82                     __ptext31:
  5687                           	opt stack 0
  5688  001E82                     _EUSART1_Initialize:
  5689                           	opt stack 21
  5690                           
  5691                           ;UART.c: 22: PIE1bits.RC1IE = 0;
  5692                           
  5693                           ;incstack = 0
  5694  001E82  9A9D               	bcf	3997,5,c	;volatile
  5695                           
  5696                           ;UART.c: 23: PIE1bits.TX1IE = 0;
  5697  001E84  989D               	bcf	3997,4,c	;volatile
  5698                           
  5699                           ;UART.c: 28: BAUD1CON = 0x48;
  5700  001E86  0E48               	movlw	72
  5701  001E88  6EB8               	movwf	4024,c	;volatile
  5702                           
  5703                           ;UART.c: 31: RC1STA = 0x98;
  5704  001E8A  0E98               	movlw	152
  5705  001E8C  6EAB               	movwf	4011,c	;volatile
  5706                           
  5707                           ;UART.c: 34: TX1STA = 0x26;
  5708  001E8E  0E26               	movlw	38
  5709  001E90  6EAC               	movwf	4012,c	;volatile
  5710                           
  5711                           ;UART.c: 37: SPBRG1 = (((16000000/38400)/4)-1);
  5712  001E92  0E67               	movlw	103
  5713  001E94  6EAF               	movwf	4015,c	;volatile
  5714                           
  5715                           ;UART.c: 40: SPBRGH1 = 0x00;
  5716  001E96  0E00               	movlw	0
  5717  001E98  6EB0               	movwf	4016,c	;volatile
  5718                           
  5719                           ;UART.c: 43: TXREG1 = 0x00;
  5720  001E9A  0E00               	movlw	0
  5721  001E9C  6EAD               	movwf	4013,c	;volatile
  5722                           
  5723                           ;UART.c: 46: RCREG1 = 0x00;
  5724  001E9E  0E00               	movlw	0
  5725  001EA0  6EAE               	movwf	4014,c	;volatile
  5726                           
  5727                           ;UART.c: 48: UART_buff_init(&input_buffer);
  5728  001EA2  0E3C               	movlw	low _input_buffer
  5729  001EA4  6E25               	movwf	UART_buff_init@_this,c
  5730  001EA6  0E01               	movlw	high _input_buffer
  5731  001EA8  6E26               	movwf	UART_buff_init@_this+1,c
  5732  001EAA  EC68  F010         	call	_UART_buff_init	;wreg free
  5733                           
  5734                           ;UART.c: 49: UART_buff_init(&output_buffer);
  5735  001EAE  0E00               	movlw	low _output_buffer
  5736  001EB0  6E25               	movwf	UART_buff_init@_this,c
  5737  001EB2  0E02               	movlw	high _output_buffer
  5738  001EB4  6E26               	movwf	UART_buff_init@_this+1,c
  5739  001EB6  EC68  F010         	call	_UART_buff_init	;wreg free
  5740                           
  5741                           ;UART.c: 51: PIE1bits.RC1IE = 1;
  5742  001EBA  8A9D               	bsf	3997,5,c	;volatile
  5743  001EBC  0012               	return		;funcret
  5744  001EBE                     __end_of_EUSART1_Initialize:
  5745                           	opt stack 0
  5746                           tblptru	equ	0xFF8
  5747                           tblptrh	equ	0xFF7
  5748                           tblptrl	equ	0xFF6
  5749                           tablat	equ	0xFF5
  5750                           prodh	equ	0xFF4
  5751                           prodl	equ	0xFF3
  5752                           intcon	equ	0xFF2
  5753                           intcon2	equ	0xFF1
  5754                           postinc0	equ	0xFEE
  5755                           wreg	equ	0xFE8
  5756                           indf1	equ	0xFE7
  5757                           postdec1	equ	0xFE5
  5758                           fsr1h	equ	0xFE2
  5759                           fsr1l	equ	0xFE1
  5760                           indf2	equ	0xFDF
  5761                           postinc2	equ	0xFDE
  5762                           postdec2	equ	0xFDD
  5763                           plusw2	equ	0xFDB
  5764                           fsr2h	equ	0xFDA
  5765                           fsr2l	equ	0xFD9
  5766                           status	equ	0xFD8
  5767                           
  5768 ;; *************** function _UART_buff_init *****************
  5769 ;; Defined at:
  5770 ;;		line 55 in file "UART.c"
  5771 ;; Parameters:    Size  Location     Type
  5772 ;;  _this           2   36[COMRAM] PTR struct UART_ring_buf
  5773 ;;		 -> output_buffer(106), input_buffer(106), 
  5774 ;; Auto vars:     Size  Location     Type
  5775 ;;		None
  5776 ;; Return value:  Size  Location     Type
  5777 ;;                  1    wreg      void 
  5778 ;; Registers used:
  5779 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5780 ;; Tracked objects:
  5781 ;;		On entry : 0/0
  5782 ;;		On exit  : 0/0
  5783 ;;		Unchanged: 0/0
  5784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5785 ;;      Params:         2       0       0       0       0       0       0
  5786 ;;      Locals:         0       0       0       0       0       0       0
  5787 ;;      Temps:          0       0       0       0       0       0       0
  5788 ;;      Totals:         2       0       0       0       0       0       0
  5789 ;;Total ram usage:        2 bytes
  5790 ;; Hardware stack levels used:    1
  5791 ;; Hardware stack levels required when called:    7
  5792 ;; This function calls:
  5793 ;;		_memset
  5794 ;; This function is called by:
  5795 ;;		_EUSART1_Initialize
  5796 ;; This function uses a non-reentrant model
  5797 ;;
  5798                           
  5799                           	psect	text32
  5800  0020D0                     __ptext32:
  5801                           	opt stack 0
  5802  0020D0                     _UART_buff_init:
  5803                           	opt stack 21
  5804                           
  5805                           ;UART.c: 64: memset(_this, 0, sizeof (*_this));
  5806                           
  5807                           ;incstack = 0
  5808  0020D0  C025  F01D         	movff	UART_buff_init@_this,memset@p1
  5809  0020D4  C026  F01E         	movff	UART_buff_init@_this+1,memset@p1+1
  5810  0020D8  0E00               	movlw	0
  5811  0020DA  6E20               	movwf	memset@c+1,c
  5812  0020DC  0E00               	movlw	0
  5813  0020DE  6E1F               	movwf	memset@c,c
  5814  0020E0  0E00               	movlw	0
  5815  0020E2  6E22               	movwf	memset@n+1,c
  5816  0020E4  0E6A               	movlw	106
  5817  0020E6  6E21               	movwf	memset@n,c
  5818  0020E8  ECF2  F00F         	call	_memset	;wreg free
  5819  0020EC  0012               	return		;funcret
  5820  0020EE                     __end_of_UART_buff_init:
  5821                           	opt stack 0
  5822                           tblptru	equ	0xFF8
  5823                           tblptrh	equ	0xFF7
  5824                           tblptrl	equ	0xFF6
  5825                           tablat	equ	0xFF5
  5826                           prodh	equ	0xFF4
  5827                           prodl	equ	0xFF3
  5828                           intcon	equ	0xFF2
  5829                           intcon2	equ	0xFF1
  5830                           postinc0	equ	0xFEE
  5831                           wreg	equ	0xFE8
  5832                           indf1	equ	0xFE7
  5833                           postdec1	equ	0xFE5
  5834                           fsr1h	equ	0xFE2
  5835                           fsr1l	equ	0xFE1
  5836                           indf2	equ	0xFDF
  5837                           postinc2	equ	0xFDE
  5838                           postdec2	equ	0xFDD
  5839                           plusw2	equ	0xFDB
  5840                           fsr2h	equ	0xFDA
  5841                           fsr2l	equ	0xFD9
  5842                           status	equ	0xFD8
  5843                           
  5844 ;; *************** function _memset *****************
  5845 ;; Defined at:
  5846 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\memset.c"
  5847 ;; Parameters:    Size  Location     Type
  5848 ;;  p1              2   28[COMRAM] PTR void 
  5849 ;;		 -> output_buffer(106), input_buffer(106), 
  5850 ;;  c               2   30[COMRAM] int 
  5851 ;;  n               2   32[COMRAM] unsigned int 
  5852 ;; Auto vars:     Size  Location     Type
  5853 ;;  p               2   34[COMRAM] PTR unsigned char 
  5854 ;;		 -> output_buffer(106), input_buffer(106), 
  5855 ;; Return value:  Size  Location     Type
  5856 ;;                  2   28[COMRAM] PTR void 
  5857 ;; Registers used:
  5858 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5859 ;; Tracked objects:
  5860 ;;		On entry : 0/0
  5861 ;;		On exit  : 0/0
  5862 ;;		Unchanged: 0/0
  5863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5864 ;;      Params:         6       0       0       0       0       0       0
  5865 ;;      Locals:         2       0       0       0       0       0       0
  5866 ;;      Temps:          0       0       0       0       0       0       0
  5867 ;;      Totals:         8       0       0       0       0       0       0
  5868 ;;Total ram usage:        8 bytes
  5869 ;; Hardware stack levels used:    1
  5870 ;; Hardware stack levels required when called:    6
  5871 ;; This function calls:
  5872 ;;		Nothing
  5873 ;; This function is called by:
  5874 ;;		_UART_buff_init
  5875 ;;		_UART_buff_flush
  5876 ;; This function uses a non-reentrant model
  5877 ;;
  5878                           
  5879                           	psect	text33
  5880  001FE4                     __ptext33:
  5881                           	opt stack 0
  5882  001FE4                     _memset:
  5883                           	opt stack 20
  5884                           
  5885                           ;incstack = 0
  5886  001FE4  C01D  F023         	movff	memset@p1,memset@p
  5887  001FE8  C01E  F024         	movff	memset@p1+1,memset@p+1
  5888  001FEC  D008               	goto	l3740
  5889  001FEE                     l3736:
  5890  001FEE  C023  FFD9         	movff	memset@p,fsr2l
  5891  001FF2  C024  FFDA         	movff	memset@p+1,fsr2h
  5892  001FF6  C01F  FFDF         	movff	memset@c,indf2
  5893  001FFA  4A23               	infsnz	memset@p,f,c
  5894  001FFC  2A24               	incf	memset@p+1,f,c
  5895  001FFE                     l3740:
  5896  001FFE  0621               	decf	memset@n,f,c
  5897  002000  A0D8               	btfss	status,0,c
  5898  002002  0622               	decf	memset@n+1,f,c
  5899  002004  2821               	incf	memset@n,w,c
  5900  002006  E1F3               	bnz	l3736
  5901  002008  2822               	incf	memset@n+1,w,c
  5902  00200A  B4D8               	btfsc	status,2,c
  5903  00200C  0012               	return	
  5904  00200E  D7EF               	goto	l3736
  5905  002010                     __end_of_memset:
  5906                           	opt stack 0
  5907                           tblptru	equ	0xFF8
  5908                           tblptrh	equ	0xFF7
  5909                           tblptrl	equ	0xFF6
  5910                           tablat	equ	0xFF5
  5911                           prodh	equ	0xFF4
  5912                           prodl	equ	0xFF3
  5913                           intcon	equ	0xFF2
  5914                           intcon2	equ	0xFF1
  5915                           postinc0	equ	0xFEE
  5916                           wreg	equ	0xFE8
  5917                           indf1	equ	0xFE7
  5918                           postdec1	equ	0xFE5
  5919                           fsr1h	equ	0xFE2
  5920                           fsr1l	equ	0xFE1
  5921                           indf2	equ	0xFDF
  5922                           postinc2	equ	0xFDE
  5923                           postdec2	equ	0xFDD
  5924                           plusw2	equ	0xFDB
  5925                           fsr2h	equ	0xFDA
  5926                           fsr2l	equ	0xFD9
  5927                           status	equ	0xFD8
  5928                           
  5929 ;; *************** function _ADC_Initialize *****************
  5930 ;; Defined at:
  5931 ;;		line 59 in file "mcc_generated_files/adc.c"
  5932 ;; Parameters:    Size  Location     Type
  5933 ;;		None
  5934 ;; Auto vars:     Size  Location     Type
  5935 ;;		None
  5936 ;; Return value:  Size  Location     Type
  5937 ;;                  1    wreg      void 
  5938 ;; Registers used:
  5939 ;;		wreg, status,2
  5940 ;; Tracked objects:
  5941 ;;		On entry : 0/0
  5942 ;;		On exit  : 0/0
  5943 ;;		Unchanged: 0/0
  5944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5945 ;;      Params:         0       0       0       0       0       0       0
  5946 ;;      Locals:         0       0       0       0       0       0       0
  5947 ;;      Temps:          0       0       0       0       0       0       0
  5948 ;;      Totals:         0       0       0       0       0       0       0
  5949 ;;Total ram usage:        0 bytes
  5950 ;; Hardware stack levels used:    1
  5951 ;; Hardware stack levels required when called:    6
  5952 ;; This function calls:
  5953 ;;		Nothing
  5954 ;; This function is called by:
  5955 ;;		_SYSTEM_Initialize
  5956 ;; This function uses a non-reentrant model
  5957 ;;
  5958                           
  5959                           	psect	text34
  5960  00212A                     __ptext34:
  5961                           	opt stack 0
  5962  00212A                     _ADC_Initialize:
  5963                           	opt stack 23
  5964                           
  5965                           ;adc.c: 64: ADCON0 = 0x01;
  5966                           
  5967                           ;incstack = 0
  5968  00212A  0E01               	movlw	1
  5969  00212C  6EC2               	movwf	4034,c	;volatile
  5970                           
  5971                           ;adc.c: 67: ADCON1 = 0x80;
  5972  00212E  0E80               	movlw	128
  5973  002130  6EC1               	movwf	4033,c	;volatile
  5974                           
  5975                           ;adc.c: 70: ADCON2 = 0x12;
  5976  002132  0E12               	movlw	18
  5977  002134  6EC0               	movwf	4032,c	;volatile
  5978                           
  5979                           ;adc.c: 72: ADCON2bits.ADFM = 1;
  5980  002136  8EC0               	bsf	4032,7,c	;volatile
  5981                           
  5982                           ;adc.c: 75: ADRESL = 0x00;
  5983  002138  0E00               	movlw	0
  5984  00213A  6EC3               	movwf	4035,c	;volatile
  5985                           
  5986                           ;adc.c: 78: ADRESH = 0x00;
  5987  00213C  0E00               	movlw	0
  5988  00213E  6EC4               	movwf	4036,c	;volatile
  5989  002140  0012               	return		;funcret
  5990  002142                     __end_of_ADC_Initialize:
  5991                           	opt stack 0
  5992                           tblptru	equ	0xFF8
  5993                           tblptrh	equ	0xFF7
  5994                           tblptrl	equ	0xFF6
  5995                           tablat	equ	0xFF5
  5996                           prodh	equ	0xFF4
  5997                           prodl	equ	0xFF3
  5998                           intcon	equ	0xFF2
  5999                           intcon2	equ	0xFF1
  6000                           postinc0	equ	0xFEE
  6001                           wreg	equ	0xFE8
  6002                           indf1	equ	0xFE7
  6003                           postdec1	equ	0xFE5
  6004                           fsr1h	equ	0xFE2
  6005                           fsr1l	equ	0xFE1
  6006                           indf2	equ	0xFDF
  6007                           postinc2	equ	0xFDE
  6008                           postdec2	equ	0xFDD
  6009                           plusw2	equ	0xFDB
  6010                           fsr2h	equ	0xFDA
  6011                           fsr2l	equ	0xFD9
  6012                           status	equ	0xFD8
  6013                           
  6014 ;; *************** function _PDUStartup *****************
  6015 ;; Defined at:
  6016 ;;		line 20 in file "PDU.c"
  6017 ;; Parameters:    Size  Location     Type
  6018 ;;		None
  6019 ;; Auto vars:     Size  Location     Type
  6020 ;;		None
  6021 ;; Return value:  Size  Location     Type
  6022 ;;                  1    wreg      void 
  6023 ;; Registers used:
  6024 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6025 ;; Tracked objects:
  6026 ;;		On entry : 0/0
  6027 ;;		On exit  : 0/0
  6028 ;;		Unchanged: 0/0
  6029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6030 ;;      Params:         0       0       0       0       0       0       0
  6031 ;;      Locals:         0       0       0       0       0       0       0
  6032 ;;      Temps:          0       0       0       0       0       0       0
  6033 ;;      Totals:         0       0       0       0       0       0       0
  6034 ;;Total ram usage:        0 bytes
  6035 ;; Hardware stack levels used:    1
  6036 ;; Hardware stack levels required when called:   10
  6037 ;; This function calls:
  6038 ;;		_ComputeStorageData
  6039 ;;		_EnableSlavePower
  6040 ;;		_StartUp595
  6041 ;;		_Update
  6042 ;; This function is called by:
  6043 ;;		_main
  6044 ;; This function uses a non-reentrant model
  6045 ;;
  6046                           
  6047                           	psect	text35
  6048  001B42                     __ptext35:
  6049                           	opt stack 0
  6050  001B42                     _PDUStartup:
  6051                           	opt stack 20
  6052                           
  6053                           ;PDU.c: 23: StartUp595();
  6054                           
  6055                           ;incstack = 0
  6056  001B42  ECD2  F00D         	call	_StartUp595	;wreg free
  6057                           
  6058                           ;PDU.c: 24: EnableSlavePower(SAS, ON);
  6059  001B46  0E00               	movlw	0
  6060  001B48  6E28               	movwf	EnableSlavePower@onof+1,c
  6061  001B4A  0E01               	movlw	1
  6062  001B4C  6E27               	movwf	EnableSlavePower@onof,c
  6063  001B4E  0E03               	movlw	3
  6064  001B50  ECC6  F009         	call	_EnableSlavePower
  6065                           
  6066                           ;PDU.c: 25: EnableSlavePower(DDS, ON);
  6067  001B54  0E00               	movlw	0
  6068  001B56  6E28               	movwf	EnableSlavePower@onof+1,c
  6069  001B58  0E01               	movlw	1
  6070  001B5A  6E27               	movwf	EnableSlavePower@onof,c
  6071  001B5C  0E01               	movlw	1
  6072  001B5E  ECC6  F009         	call	_EnableSlavePower
  6073                           
  6074                           ;PDU.c: 26: EnableSlavePower(MCS, OFF);
  6075  001B62  0E00               	movlw	0
  6076  001B64  6E28               	movwf	EnableSlavePower@onof+1,c
  6077  001B66  0E00               	movlw	0
  6078  001B68  6E27               	movwf	EnableSlavePower@onof,c
  6079  001B6A  0E02               	movlw	2
  6080  001B6C  ECC6  F009         	call	_EnableSlavePower
  6081                           
  6082                           ;PDU.c: 27: EnableSlavePower(BMM, ON);
  6083  001B70  0E00               	movlw	0
  6084  001B72  6E28               	movwf	EnableSlavePower@onof+1,c
  6085  001B74  0E01               	movlw	1
  6086  001B76  6E27               	movwf	EnableSlavePower@onof,c
  6087  001B78  0E04               	movlw	4
  6088  001B7A  ECC6  F009         	call	_EnableSlavePower
  6089                           
  6090                           ;PDU.c: 28: EnableSlavePower(TSS, OFF);
  6091  001B7E  0E00               	movlw	0
  6092  001B80  6E28               	movwf	EnableSlavePower@onof+1,c
  6093  001B82  0E00               	movlw	0
  6094  001B84  6E27               	movwf	EnableSlavePower@onof,c
  6095  001B86  0E05               	movlw	5
  6096  001B88  ECC6  F009         	call	_EnableSlavePower
  6097                           
  6098                           ;PDU.c: 29: EnableSlavePower(AUX, OFF);
  6099  001B8C  0E00               	movlw	0
  6100  001B8E  6E28               	movwf	EnableSlavePower@onof+1,c
  6101  001B90  0E00               	movlw	0
  6102  001B92  6E27               	movwf	EnableSlavePower@onof,c
  6103  001B94  0E06               	movlw	6
  6104  001B96  ECC6  F009         	call	_EnableSlavePower
  6105                           
  6106                           ;PDU.c: 30: Update();
  6107  001B9A  EC16  F011         	call	_Update	;wreg free
  6108                           
  6109                           ;PDU.c: 32: ComputeStorageData();
  6110  001B9E  EC38  F00A         	call	_ComputeStorageData	;wreg free
  6111  001BA2  0012               	return		;funcret
  6112  001BA4                     __end_of_PDUStartup:
  6113                           	opt stack 0
  6114                           tblptru	equ	0xFF8
  6115                           tblptrh	equ	0xFF7
  6116                           tblptrl	equ	0xFF6
  6117                           tablat	equ	0xFF5
  6118                           prodh	equ	0xFF4
  6119                           prodl	equ	0xFF3
  6120                           intcon	equ	0xFF2
  6121                           intcon2	equ	0xFF1
  6122                           postinc0	equ	0xFEE
  6123                           wreg	equ	0xFE8
  6124                           indf1	equ	0xFE7
  6125                           postdec1	equ	0xFE5
  6126                           fsr1h	equ	0xFE2
  6127                           fsr1l	equ	0xFE1
  6128                           indf2	equ	0xFDF
  6129                           postinc2	equ	0xFDE
  6130                           postdec2	equ	0xFDD
  6131                           plusw2	equ	0xFDB
  6132                           fsr2h	equ	0xFDA
  6133                           fsr2l	equ	0xFD9
  6134                           status	equ	0xFD8
  6135                           
  6136 ;; *************** function _Update *****************
  6137 ;; Defined at:
  6138 ;;		line 225 in file "PDU.c"
  6139 ;; Parameters:    Size  Location     Type
  6140 ;;		None
  6141 ;; Auto vars:     Size  Location     Type
  6142 ;;		None
  6143 ;; Return value:  Size  Location     Type
  6144 ;;                  1    wreg      void 
  6145 ;; Registers used:
  6146 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6147 ;; Tracked objects:
  6148 ;;		On entry : 0/0
  6149 ;;		On exit  : 0/0
  6150 ;;		Unchanged: 0/0
  6151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6152 ;;      Params:         0       0       0       0       0       0       0
  6153 ;;      Locals:         0       0       0       0       0       0       0
  6154 ;;      Temps:          0       0       0       0       0       0       0
  6155 ;;      Totals:         0       0       0       0       0       0       0
  6156 ;;Total ram usage:        0 bytes
  6157 ;; Hardware stack levels used:    1
  6158 ;; Hardware stack levels required when called:    8
  6159 ;; This function calls:
  6160 ;;		_writeRegisters
  6161 ;; This function is called by:
  6162 ;;		_processPowerRequest
  6163 ;;		_PDUStartup
  6164 ;; This function uses a non-reentrant model
  6165 ;;
  6166                           
  6167                           	psect	text36
  6168  00222C                     __ptext36:
  6169                           	opt stack 0
  6170  00222C                     _Update:
  6171                           	opt stack 20
  6172                           
  6173                           ;PDU.c: 226: writeRegisters();
  6174                           
  6175                           ;incstack = 0
  6176  00222C  EC76  F00C         	call	_writeRegisters	;wreg free
  6177  002230  0012               	return		;funcret
  6178  002232                     __end_of_Update:
  6179                           	opt stack 0
  6180                           tblptru	equ	0xFF8
  6181                           tblptrh	equ	0xFF7
  6182                           tblptrl	equ	0xFF6
  6183                           tablat	equ	0xFF5
  6184                           prodh	equ	0xFF4
  6185                           prodl	equ	0xFF3
  6186                           intcon	equ	0xFF2
  6187                           intcon2	equ	0xFF1
  6188                           postinc0	equ	0xFEE
  6189                           wreg	equ	0xFE8
  6190                           indf1	equ	0xFE7
  6191                           postdec1	equ	0xFE5
  6192                           fsr1h	equ	0xFE2
  6193                           fsr1l	equ	0xFE1
  6194                           indf2	equ	0xFDF
  6195                           postinc2	equ	0xFDE
  6196                           postdec2	equ	0xFDD
  6197                           plusw2	equ	0xFDB
  6198                           fsr2h	equ	0xFDA
  6199                           fsr2l	equ	0xFD9
  6200                           status	equ	0xFD8
  6201                           
  6202 ;; *************** function _StartUp595 *****************
  6203 ;; Defined at:
  6204 ;;		line 10 in file "Shift595.c"
  6205 ;; Parameters:    Size  Location     Type
  6206 ;;		None
  6207 ;; Auto vars:     Size  Location     Type
  6208 ;;		None
  6209 ;; Return value:  Size  Location     Type
  6210 ;;                  1    wreg      void 
  6211 ;; Registers used:
  6212 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6213 ;; Tracked objects:
  6214 ;;		On entry : 0/0
  6215 ;;		On exit  : 0/0
  6216 ;;		Unchanged: 0/0
  6217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6218 ;;      Params:         0       0       0       0       0       0       0
  6219 ;;      Locals:         0       0       0       0       0       0       0
  6220 ;;      Temps:          0       0       0       0       0       0       0
  6221 ;;      Totals:         0       0       0       0       0       0       0
  6222 ;;Total ram usage:        0 bytes
  6223 ;; Hardware stack levels used:    1
  6224 ;; Hardware stack levels required when called:    9
  6225 ;; This function calls:
  6226 ;;		_Clear595
  6227 ;;		_Delay
  6228 ;; This function is called by:
  6229 ;;		_PDUStartup
  6230 ;; This function uses a non-reentrant model
  6231 ;;
  6232                           
  6233                           	psect	text37
  6234  001BA4                     __ptext37:
  6235                           	opt stack 0
  6236  001BA4                     _StartUp595:
  6237                           	opt stack 20
  6238                           
  6239                           ;incstack = 0
  6240                           ;Shift595.c: 12: do { LATD5 = 1; } while(0);
  6241  001BA4  8A8C               	bsf	3980,5,c	;volatile
  6242                           
  6243                           ;Shift595.c: 13: do { LATB0 = 1; } while(0);
  6244  001BA6  808A               	bsf	3978,0,c	;volatile
  6245                           
  6246                           ;Shift595.c: 15: Delay(2);
  6247  001BA8  0E02               	movlw	2
  6248  001BAA  6E1D               	movwf	Delay@wait,c
  6249  001BAC  0E00               	movlw	0
  6250  001BAE  6E1E               	movwf	Delay@wait+1,c
  6251  001BB0  0E00               	movlw	0
  6252  001BB2  6E1F               	movwf	Delay@wait+2,c
  6253  001BB4  0E00               	movlw	0
  6254  001BB6  6E20               	movwf	Delay@wait+3,c
  6255  001BB8  ECD3  F00E         	call	_Delay	;wreg free
  6256                           
  6257                           ;Shift595.c: 16: do { LATD5 = 0; } while(0);
  6258  001BBC  9A8C               	bcf	3980,5,c	;volatile
  6259                           
  6260                           ;Shift595.c: 17: Delay(2);
  6261  001BBE  0E02               	movlw	2
  6262  001BC0  6E1D               	movwf	Delay@wait,c
  6263  001BC2  0E00               	movlw	0
  6264  001BC4  6E1E               	movwf	Delay@wait+1,c
  6265  001BC6  0E00               	movlw	0
  6266  001BC8  6E1F               	movwf	Delay@wait+2,c
  6267  001BCA  0E00               	movlw	0
  6268  001BCC  6E20               	movwf	Delay@wait+3,c
  6269  001BCE  ECD3  F00E         	call	_Delay	;wreg free
  6270                           
  6271                           ;Shift595.c: 18: do { LATB0 = 0; } while(0);
  6272  001BD2  908A               	bcf	3978,0,c	;volatile
  6273                           
  6274                           ;Shift595.c: 19: Delay(2);
  6275  001BD4  0E02               	movlw	2
  6276  001BD6  6E1D               	movwf	Delay@wait,c
  6277  001BD8  0E00               	movlw	0
  6278  001BDA  6E1E               	movwf	Delay@wait+1,c
  6279  001BDC  0E00               	movlw	0
  6280  001BDE  6E1F               	movwf	Delay@wait+2,c
  6281  001BE0  0E00               	movlw	0
  6282  001BE2  6E20               	movwf	Delay@wait+3,c
  6283  001BE4  ECD3  F00E         	call	_Delay	;wreg free
  6284                           
  6285                           ;Shift595.c: 20: do { LATD5 = 1; } while(0);
  6286  001BE8  8A8C               	bsf	3980,5,c	;volatile
  6287                           
  6288                           ;Shift595.c: 21: Delay(2);
  6289  001BEA  0E02               	movlw	2
  6290  001BEC  6E1D               	movwf	Delay@wait,c
  6291  001BEE  0E00               	movlw	0
  6292  001BF0  6E1E               	movwf	Delay@wait+1,c
  6293  001BF2  0E00               	movlw	0
  6294  001BF4  6E1F               	movwf	Delay@wait+2,c
  6295  001BF6  0E00               	movlw	0
  6296  001BF8  6E20               	movwf	Delay@wait+3,c
  6297  001BFA  ECD3  F00E         	call	_Delay	;wreg free
  6298                           
  6299                           ;Shift595.c: 22: do { LATB0 = 1; } while(0);
  6300  001BFE  808A               	bsf	3978,0,c	;volatile
  6301                           
  6302                           ;Shift595.c: 24: Clear595();
  6303  001C00  EC5F  F00F         	call	_Clear595	;wreg free
  6304  001C04  0012               	return		;funcret
  6305  001C06                     __end_of_StartUp595:
  6306                           	opt stack 0
  6307                           tblptru	equ	0xFF8
  6308                           tblptrh	equ	0xFF7
  6309                           tblptrl	equ	0xFF6
  6310                           tablat	equ	0xFF5
  6311                           prodh	equ	0xFF4
  6312                           prodl	equ	0xFF3
  6313                           intcon	equ	0xFF2
  6314                           intcon2	equ	0xFF1
  6315                           postinc0	equ	0xFEE
  6316                           wreg	equ	0xFE8
  6317                           indf1	equ	0xFE7
  6318                           postdec1	equ	0xFE5
  6319                           fsr1h	equ	0xFE2
  6320                           fsr1l	equ	0xFE1
  6321                           indf2	equ	0xFDF
  6322                           postinc2	equ	0xFDE
  6323                           postdec2	equ	0xFDD
  6324                           plusw2	equ	0xFDB
  6325                           fsr2h	equ	0xFDA
  6326                           fsr2l	equ	0xFD9
  6327                           status	equ	0xFD8
  6328                           
  6329 ;; *************** function _Clear595 *****************
  6330 ;; Defined at:
  6331 ;;		line 39 in file "Shift595.c"
  6332 ;; Parameters:    Size  Location     Type
  6333 ;;		None
  6334 ;; Auto vars:     Size  Location     Type
  6335 ;;  i               2   41[COMRAM] int 
  6336 ;; Return value:  Size  Location     Type
  6337 ;;                  1    wreg      void 
  6338 ;; Registers used:
  6339 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6340 ;; Tracked objects:
  6341 ;;		On entry : 0/0
  6342 ;;		On exit  : 0/0
  6343 ;;		Unchanged: 0/0
  6344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6345 ;;      Params:         0       0       0       0       0       0       0
  6346 ;;      Locals:         2       0       0       0       0       0       0
  6347 ;;      Temps:          0       0       0       0       0       0       0
  6348 ;;      Totals:         2       0       0       0       0       0       0
  6349 ;;Total ram usage:        2 bytes
  6350 ;; Hardware stack levels used:    1
  6351 ;; Hardware stack levels required when called:    8
  6352 ;; This function calls:
  6353 ;;		_writeRegisters
  6354 ;; This function is called by:
  6355 ;;		_StartUp595
  6356 ;; This function uses a non-reentrant model
  6357 ;;
  6358                           
  6359                           	psect	text38
  6360  001EBE                     __ptext38:
  6361                           	opt stack 0
  6362  001EBE                     _Clear595:
  6363                           	opt stack 20
  6364                           
  6365                           ;Shift595.c: 40: for (int i = 3 * 8 - 1; i >= 0; i--) {
  6366                           
  6367                           ;incstack = 0
  6368  001EBE  0E00               	movlw	0
  6369  001EC0  6E2B               	movwf	Clear595@i+1,c
  6370  001EC2  0E17               	movlw	23
  6371  001EC4  6E2A               	movwf	Clear595@i,c
  6372  001EC6                     l4040:
  6373  001EC6  BE2B               	btfsc	Clear595@i+1,7,c
  6374  001EC8  D011               	goto	l4050
  6375                           
  6376                           ;Shift595.c: 41: registers[i] = 0;
  6377  001ECA  90D8               	bcf	status,0,c
  6378  001ECC  342A               	rlcf	Clear595@i,w,c
  6379  001ECE  6ED9               	movwf	fsr2l,c
  6380  001ED0  342B               	rlcf	Clear595@i+1,w,c
  6381  001ED2  6EDA               	movwf	fsr2h,c
  6382  001ED4  0E00               	movlw	low _registers
  6383  001ED6  26D9               	addwf	fsr2l,f,c
  6384  001ED8  0E01               	movlw	high _registers
  6385  001EDA  22DA               	addwfc	fsr2h,f,c
  6386  001EDC  0E00               	movlw	0
  6387  001EDE  6EDE               	movwf	postinc2,c
  6388  001EE0  0E00               	movlw	0
  6389  001EE2  6EDD               	movwf	postdec2,c
  6390  001EE4  062A               	decf	Clear595@i,f,c
  6391  001EE6  A0D8               	btfss	status,0,c
  6392  001EE8  062B               	decf	Clear595@i+1,f,c
  6393  001EEA  D7ED               	goto	l4040
  6394  001EEC                     l4050:
  6395                           
  6396                           ;Shift595.c: 42: }
  6397                           ;Shift595.c: 44: writeRegisters();
  6398  001EEC  EC76  F00C         	call	_writeRegisters	;wreg free
  6399  001EF0  0012               	return		;funcret
  6400  001EF2                     __end_of_Clear595:
  6401                           	opt stack 0
  6402                           tblptru	equ	0xFF8
  6403                           tblptrh	equ	0xFF7
  6404                           tblptrl	equ	0xFF6
  6405                           tablat	equ	0xFF5
  6406                           prodh	equ	0xFF4
  6407                           prodl	equ	0xFF3
  6408                           intcon	equ	0xFF2
  6409                           intcon2	equ	0xFF1
  6410                           postinc0	equ	0xFEE
  6411                           wreg	equ	0xFE8
  6412                           indf1	equ	0xFE7
  6413                           postdec1	equ	0xFE5
  6414                           fsr1h	equ	0xFE2
  6415                           fsr1l	equ	0xFE1
  6416                           indf2	equ	0xFDF
  6417                           postinc2	equ	0xFDE
  6418                           postdec2	equ	0xFDD
  6419                           plusw2	equ	0xFDB
  6420                           fsr2h	equ	0xFDA
  6421                           fsr2l	equ	0xFD9
  6422                           status	equ	0xFD8
  6423                           
  6424 ;; *************** function _writeRegisters *****************
  6425 ;; Defined at:
  6426 ;;		line 50 in file "Shift595.c"
  6427 ;; Parameters:    Size  Location     Type
  6428 ;;		None
  6429 ;; Auto vars:     Size  Location     Type
  6430 ;;  i               2   39[COMRAM] int 
  6431 ;;  val             2   37[COMRAM] int 
  6432 ;; Return value:  Size  Location     Type
  6433 ;;                  1    wreg      void 
  6434 ;; Registers used:
  6435 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6436 ;; Tracked objects:
  6437 ;;		On entry : 0/0
  6438 ;;		On exit  : 0/0
  6439 ;;		Unchanged: 0/0
  6440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6441 ;;      Params:         0       0       0       0       0       0       0
  6442 ;;      Locals:         4       0       0       0       0       0       0
  6443 ;;      Temps:          0       0       0       0       0       0       0
  6444 ;;      Totals:         4       0       0       0       0       0       0
  6445 ;;Total ram usage:        4 bytes
  6446 ;; Hardware stack levels used:    1
  6447 ;; Hardware stack levels required when called:    7
  6448 ;; This function calls:
  6449 ;;		_Delay
  6450 ;; This function is called by:
  6451 ;;		_Update
  6452 ;;		_Clear595
  6453 ;; This function uses a non-reentrant model
  6454 ;;
  6455                           
  6456                           	psect	text39
  6457  0018EC                     __ptext39:
  6458                           	opt stack 0
  6459  0018EC                     _writeRegisters:
  6460                           	opt stack 20
  6461                           
  6462                           ;Shift595.c: 51: int val = 0;
  6463                           
  6464                           ;incstack = 0
  6465  0018EC  0E00               	movlw	0
  6466  0018EE  6E27               	movwf	writeRegisters@val+1,c
  6467  0018F0  0E00               	movlw	0
  6468  0018F2  6E26               	movwf	writeRegisters@val,c
  6469                           
  6470                           ;Shift595.c: 52: for (int i = 3 * 8 - 1; i >= 0; i--) {
  6471  0018F4  0E00               	movlw	0
  6472  0018F6  6E29               	movwf	writeRegisters@i+1,c
  6473  0018F8  0E17               	movlw	23
  6474  0018FA  6E28               	movwf	writeRegisters@i,c
  6475  0018FC                     l3902:
  6476  0018FC  BE29               	btfsc	writeRegisters@i+1,7,c
  6477  0018FE  D01D               	goto	l546
  6478                           
  6479                           ;Shift595.c: 53: do { LATD7 = 0; } while(0);
  6480  001900  9E8C               	bcf	3980,7,c	;volatile
  6481                           
  6482                           ;Shift595.c: 55: val = registers[i];
  6483  001902  90D8               	bcf	status,0,c
  6484  001904  3428               	rlcf	writeRegisters@i,w,c
  6485  001906  6ED9               	movwf	fsr2l,c
  6486  001908  3429               	rlcf	writeRegisters@i+1,w,c
  6487  00190A  6EDA               	movwf	fsr2h,c
  6488  00190C  0E00               	movlw	low _registers
  6489  00190E  26D9               	addwf	fsr2l,f,c
  6490  001910  0E01               	movlw	high _registers
  6491  001912  22DA               	addwfc	fsr2h,f,c
  6492  001914  CFDE F026          	movff	postinc2,writeRegisters@val
  6493  001918  CFDD F027          	movff	postdec2,writeRegisters@val+1
  6494                           
  6495                           ;Shift595.c: 56: if (val == 1) {
  6496  00191C  0426               	decf	writeRegisters@val,w,c
  6497  00191E  1027               	iorwf	writeRegisters@val+1,w,c
  6498  001920  A4D8               	btfss	status,2,c
  6499  001922  D002               	goto	l3910
  6500                           
  6501                           ;Shift595.c: 57: do { LATD4 = 1; } while(0);
  6502  001924  888C               	bsf	3980,4,c	;volatile
  6503                           
  6504                           ;Shift595.c: 58: } else if (val == 0) {
  6505  001926  D004               	goto	l544
  6506  001928                     l3910:
  6507  001928  5026               	movf	writeRegisters@val,w,c
  6508  00192A  1027               	iorwf	writeRegisters@val+1,w,c
  6509  00192C  B4D8               	btfsc	status,2,c
  6510                           
  6511                           ;Shift595.c: 59: do { LATD4 = 0; } while(0);
  6512  00192E  988C               	bcf	3980,4,c	;volatile
  6513  001930                     l544:
  6514  001930  8E8C               	bsf	3980,7,c	;volatile
  6515  001932  0628               	decf	writeRegisters@i,f,c
  6516  001934  A0D8               	btfss	status,0,c
  6517  001936  0629               	decf	writeRegisters@i+1,f,c
  6518  001938  D7E1               	goto	l3902
  6519  00193A                     l546:
  6520  00193A  9E8C               	bcf	3980,7,c	;volatile
  6521                           
  6522                           ;Shift595.c: 67: Delay(1);
  6523  00193C  0E01               	movlw	1
  6524  00193E  6E1D               	movwf	Delay@wait,c
  6525  001940  0E00               	movlw	0
  6526  001942  6E1E               	movwf	Delay@wait+1,c
  6527  001944  0E00               	movlw	0
  6528  001946  6E1F               	movwf	Delay@wait+2,c
  6529  001948  0E00               	movlw	0
  6530  00194A  6E20               	movwf	Delay@wait+3,c
  6531  00194C  ECD3  F00E         	call	_Delay	;wreg free
  6532                           
  6533                           ;Shift595.c: 68: do { LATD6 = 1; } while(0);
  6534  001950  8C8C               	bsf	3980,6,c	;volatile
  6535                           
  6536                           ;Shift595.c: 69: Delay(1);
  6537  001952  0E01               	movlw	1
  6538  001954  6E1D               	movwf	Delay@wait,c
  6539  001956  0E00               	movlw	0
  6540  001958  6E1E               	movwf	Delay@wait+1,c
  6541  00195A  0E00               	movlw	0
  6542  00195C  6E1F               	movwf	Delay@wait+2,c
  6543  00195E  0E00               	movlw	0
  6544  001960  6E20               	movwf	Delay@wait+3,c
  6545  001962  ECD3  F00E         	call	_Delay	;wreg free
  6546                           
  6547                           ;Shift595.c: 70: do { LATD6 = 0; } while(0);
  6548  001966  9C8C               	bcf	3980,6,c	;volatile
  6549  001968  0012               	return	
  6550  00196A                     __end_of_writeRegisters:
  6551                           	opt stack 0
  6552                           tblptru	equ	0xFF8
  6553                           tblptrh	equ	0xFF7
  6554                           tblptrl	equ	0xFF6
  6555                           tablat	equ	0xFF5
  6556                           prodh	equ	0xFF4
  6557                           prodl	equ	0xFF3
  6558                           intcon	equ	0xFF2
  6559                           intcon2	equ	0xFF1
  6560                           postinc0	equ	0xFEE
  6561                           wreg	equ	0xFE8
  6562                           indf1	equ	0xFE7
  6563                           postdec1	equ	0xFE5
  6564                           fsr1h	equ	0xFE2
  6565                           fsr1l	equ	0xFE1
  6566                           indf2	equ	0xFDF
  6567                           postinc2	equ	0xFDE
  6568                           postdec2	equ	0xFDD
  6569                           plusw2	equ	0xFDB
  6570                           fsr2h	equ	0xFDA
  6571                           fsr2l	equ	0xFD9
  6572                           status	equ	0xFD8
  6573                           
  6574 ;; *************** function _EnableSlavePower *****************
  6575 ;; Defined at:
  6576 ;;		line 37 in file "PDU.c"
  6577 ;; Parameters:    Size  Location     Type
  6578 ;;  slave           1    wreg     enum E6
  6579 ;;  onof            2   38[COMRAM] int 
  6580 ;; Auto vars:     Size  Location     Type
  6581 ;;  slave           1   40[COMRAM] enum E6
  6582 ;; Return value:  Size  Location     Type
  6583 ;;                  1    wreg      void 
  6584 ;; Registers used:
  6585 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6586 ;; Tracked objects:
  6587 ;;		On entry : 0/0
  6588 ;;		On exit  : 0/0
  6589 ;;		Unchanged: 0/0
  6590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6591 ;;      Params:         2       0       0       0       0       0       0
  6592 ;;      Locals:         1       0       0       0       0       0       0
  6593 ;;      Temps:          0       0       0       0       0       0       0
  6594 ;;      Totals:         3       0       0       0       0       0       0
  6595 ;;Total ram usage:        3 bytes
  6596 ;; Hardware stack levels used:    1
  6597 ;; Hardware stack levels required when called:    7
  6598 ;; This function calls:
  6599 ;;		_SetPin595
  6600 ;; This function is called by:
  6601 ;;		_processPowerRequest
  6602 ;;		_PDUStartup
  6603 ;; This function uses a non-reentrant model
  6604 ;;
  6605                           
  6606                           	psect	text40
  6607  00138C                     __ptext40:
  6608                           	opt stack 0
  6609  00138C                     _EnableSlavePower:
  6610                           	opt stack 21
  6611                           
  6612                           ;incstack = 0
  6613                           ;EnableSlavePower@slave stored from wreg
  6614  00138C  6E29               	movwf	EnableSlavePower@slave,c
  6615                           
  6616                           ;PDU.c: 38: switch (slave) {
  6617  00138E  D05C               	goto	l4030
  6618  001390                     l4014:
  6619                           
  6620                           ;PDU.c: 40: SetPin595(2, 6, onof);
  6621  001390  0E00               	movlw	0
  6622  001392  6E1E               	movwf	SetPin595@Reg+1,c
  6623  001394  0E02               	movlw	2
  6624  001396  6E1D               	movwf	SetPin595@Reg,c
  6625  001398  0E00               	movlw	0
  6626  00139A  6E20               	movwf	SetPin595@pin+1,c
  6627  00139C  0E06               	movlw	6
  6628  00139E  6E1F               	movwf	SetPin595@pin,c
  6629  0013A0  C027  F021         	movff	EnableSlavePower@onof,SetPin595@value
  6630  0013A4  C028  F022         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  6631  0013A8  EC60  F00E         	call	_SetPin595	;wreg free
  6632                           
  6633                           ;PDU.c: 41: break;
  6634  0013AC  0012               	return	
  6635  0013AE                     l4016:
  6636                           
  6637                           ;PDU.c: 43: SetPin595(1, 1, onof);
  6638  0013AE  0E00               	movlw	0
  6639  0013B0  6E1E               	movwf	SetPin595@Reg+1,c
  6640  0013B2  0E01               	movlw	1
  6641  0013B4  6E1D               	movwf	SetPin595@Reg,c
  6642  0013B6  0E00               	movlw	0
  6643  0013B8  6E20               	movwf	SetPin595@pin+1,c
  6644  0013BA  0E01               	movlw	1
  6645  0013BC  6E1F               	movwf	SetPin595@pin,c
  6646  0013BE  C027  F021         	movff	EnableSlavePower@onof,SetPin595@value
  6647  0013C2  C028  F022         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  6648  0013C6  EC60  F00E         	call	_SetPin595	;wreg free
  6649                           
  6650                           ;PDU.c: 44: break;
  6651  0013CA  0012               	return	
  6652  0013CC                     l4018:
  6653                           
  6654                           ;PDU.c: 46: SetPin595(1, 6, onof);
  6655  0013CC  0E00               	movlw	0
  6656  0013CE  6E1E               	movwf	SetPin595@Reg+1,c
  6657  0013D0  0E01               	movlw	1
  6658  0013D2  6E1D               	movwf	SetPin595@Reg,c
  6659  0013D4  0E00               	movlw	0
  6660  0013D6  6E20               	movwf	SetPin595@pin+1,c
  6661  0013D8  0E06               	movlw	6
  6662  0013DA  6E1F               	movwf	SetPin595@pin,c
  6663  0013DC  C027  F021         	movff	EnableSlavePower@onof,SetPin595@value
  6664  0013E0  C028  F022         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  6665  0013E4  EC60  F00E         	call	_SetPin595	;wreg free
  6666                           
  6667                           ;PDU.c: 47: MCSOn = onof;
  6668  0013E8  C027  F03A         	movff	EnableSlavePower@onof,_MCSOn
  6669                           
  6670                           ;PDU.c: 48: break;
  6671  0013EC  0012               	return	
  6672  0013EE                     l4022:
  6673                           
  6674                           ;PDU.c: 50: SetPin595(2, 1, onof);
  6675  0013EE  0E00               	movlw	0
  6676  0013F0  6E1E               	movwf	SetPin595@Reg+1,c
  6677  0013F2  0E02               	movlw	2
  6678  0013F4  6E1D               	movwf	SetPin595@Reg,c
  6679  0013F6  0E00               	movlw	0
  6680  0013F8  6E20               	movwf	SetPin595@pin+1,c
  6681  0013FA  0E01               	movlw	1
  6682  0013FC  6E1F               	movwf	SetPin595@pin,c
  6683  0013FE  C027  F021         	movff	EnableSlavePower@onof,SetPin595@value
  6684  001402  C028  F022         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  6685  001406  EC60  F00E         	call	_SetPin595	;wreg free
  6686                           
  6687                           ;PDU.c: 51: break;
  6688  00140A  0012               	return	
  6689  00140C                     l4024:
  6690                           
  6691                           ;PDU.c: 53: SetPin595(3, 6, onof);
  6692  00140C  0E00               	movlw	0
  6693  00140E  6E1E               	movwf	SetPin595@Reg+1,c
  6694  001410  0E03               	movlw	3
  6695  001412  6E1D               	movwf	SetPin595@Reg,c
  6696  001414  0E00               	movlw	0
  6697  001416  6E20               	movwf	SetPin595@pin+1,c
  6698  001418  0E06               	movlw	6
  6699  00141A  6E1F               	movwf	SetPin595@pin,c
  6700  00141C  C027  F021         	movff	EnableSlavePower@onof,SetPin595@value
  6701  001420  C028  F022         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  6702  001424  EC60  F00E         	call	_SetPin595	;wreg free
  6703                           
  6704                           ;PDU.c: 54: break;
  6705  001428  0012               	return	
  6706  00142A                     l4026:
  6707                           
  6708                           ;PDU.c: 56: SetPin595(3, 1, onof);
  6709  00142A  0E00               	movlw	0
  6710  00142C  6E1E               	movwf	SetPin595@Reg+1,c
  6711  00142E  0E03               	movlw	3
  6712  001430  6E1D               	movwf	SetPin595@Reg,c
  6713  001432  0E00               	movlw	0
  6714  001434  6E20               	movwf	SetPin595@pin+1,c
  6715  001436  0E01               	movlw	1
  6716  001438  6E1F               	movwf	SetPin595@pin,c
  6717  00143A  C027  F021         	movff	EnableSlavePower@onof,SetPin595@value
  6718  00143E  C028  F022         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  6719  001442  EC60  F00E         	call	_SetPin595	;wreg free
  6720                           
  6721                           ;PDU.c: 58: }
  6722                           
  6723                           ;PDU.c: 57: break;
  6724  001446  0012               	return	
  6725  001448                     l4030:
  6726  001448  5029               	movf	EnableSlavePower@slave,w,c
  6727                           
  6728                           ; Switch size 1, requested type "space"
  6729                           ; Number of cases is 6, Range of values is 1 to 6
  6730                           ; switch strategies available:
  6731                           ; Name         Instructions Cycles
  6732                           ; simple_byte           19    10 (average)
  6733                           ;	Chosen strategy is simple_byte
  6734  00144A  0A01               	xorlw	1	; case 1
  6735  00144C  B4D8               	btfsc	status,2,c
  6736  00144E  D7CF               	goto	l4022
  6737  001450  0A03               	xorlw	3	; case 2
  6738  001452  B4D8               	btfsc	status,2,c
  6739  001454  D7BB               	goto	l4018
  6740  001456  0A01               	xorlw	1	; case 3
  6741  001458  B4D8               	btfsc	status,2,c
  6742  00145A  D79A               	goto	l4014
  6743  00145C  0A07               	xorlw	7	; case 4
  6744  00145E  B4D8               	btfsc	status,2,c
  6745  001460  D7A6               	goto	l4016
  6746  001462  0A01               	xorlw	1	; case 5
  6747  001464  B4D8               	btfsc	status,2,c
  6748  001466  D7D2               	goto	l4024
  6749  001468  0A03               	xorlw	3	; case 6
  6750  00146A  A4D8               	btfss	status,2,c
  6751  00146C  0012               	return	
  6752  00146E  D7DD               	goto	l4026
  6753  001470                     __end_of_EnableSlavePower:
  6754                           	opt stack 0
  6755                           tblptru	equ	0xFF8
  6756                           tblptrh	equ	0xFF7
  6757                           tblptrl	equ	0xFF6
  6758                           tablat	equ	0xFF5
  6759                           prodh	equ	0xFF4
  6760                           prodl	equ	0xFF3
  6761                           intcon	equ	0xFF2
  6762                           intcon2	equ	0xFF1
  6763                           postinc0	equ	0xFEE
  6764                           wreg	equ	0xFE8
  6765                           indf1	equ	0xFE7
  6766                           postdec1	equ	0xFE5
  6767                           fsr1h	equ	0xFE2
  6768                           fsr1l	equ	0xFE1
  6769                           indf2	equ	0xFDF
  6770                           postinc2	equ	0xFDE
  6771                           postdec2	equ	0xFDD
  6772                           plusw2	equ	0xFDB
  6773                           fsr2h	equ	0xFDA
  6774                           fsr2l	equ	0xFD9
  6775                           status	equ	0xFD8
  6776                           
  6777 ;; *************** function _SetPin595 *****************
  6778 ;; Defined at:
  6779 ;;		line 32 in file "Shift595.c"
  6780 ;; Parameters:    Size  Location     Type
  6781 ;;  Reg             2   28[COMRAM] int 
  6782 ;;  pin             2   30[COMRAM] int 
  6783 ;;  value           2   32[COMRAM] int 
  6784 ;; Auto vars:     Size  Location     Type
  6785 ;;		None
  6786 ;; Return value:  Size  Location     Type
  6787 ;;                  1    wreg      void 
  6788 ;; Registers used:
  6789 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6790 ;; Tracked objects:
  6791 ;;		On entry : 0/0
  6792 ;;		On exit  : 0/0
  6793 ;;		Unchanged: 0/0
  6794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6795 ;;      Params:         6       0       0       0       0       0       0
  6796 ;;      Locals:         0       0       0       0       0       0       0
  6797 ;;      Temps:          4       0       0       0       0       0       0
  6798 ;;      Totals:        10       0       0       0       0       0       0
  6799 ;;Total ram usage:       10 bytes
  6800 ;; Hardware stack levels used:    1
  6801 ;; Hardware stack levels required when called:    6
  6802 ;; This function calls:
  6803 ;;		Nothing
  6804 ;; This function is called by:
  6805 ;;		_EnableSlavePower
  6806 ;; This function uses a non-reentrant model
  6807 ;;
  6808                           
  6809                           	psect	text41
  6810  001CC0                     __ptext41:
  6811                           	opt stack 0
  6812  001CC0                     _SetPin595:
  6813                           	opt stack 21
  6814                           
  6815                           ;Shift595.c: 33: registers[((Reg - 1)*8) + pin] = value;
  6816                           
  6817                           ;incstack = 0
  6818  001CC0  0EF0               	movlw	240
  6819  001CC2  6E23               	movwf	??_SetPin595& (0+255),c
  6820  001CC4  0EFF               	movlw	255
  6821  001CC6  6E24               	movwf	(??_SetPin595+1)& (0+255),c
  6822  001CC8  C01D  F025         	movff	SetPin595@Reg,??_SetPin595+2
  6823  001CCC  C01E  F026         	movff	SetPin595@Reg+1,??_SetPin595+3
  6824  001CD0  90D8               	bcf	status,0,c
  6825  001CD2  3625               	rlcf	??_SetPin595+2,f,c
  6826  001CD4  3626               	rlcf	??_SetPin595+3,f,c
  6827  001CD6  90D8               	bcf	status,0,c
  6828  001CD8  3625               	rlcf	??_SetPin595+2,f,c
  6829  001CDA  3626               	rlcf	??_SetPin595+3,f,c
  6830  001CDC  90D8               	bcf	status,0,c
  6831  001CDE  3625               	rlcf	??_SetPin595+2,f,c
  6832  001CE0  3626               	rlcf	??_SetPin595+3,f,c
  6833  001CE2  501F               	movf	SetPin595@pin,w,c
  6834  001CE4  2625               	addwf	??_SetPin595+2,f,c
  6835  001CE6  5020               	movf	SetPin595@pin+1,w,c
  6836  001CE8  2226               	addwfc	??_SetPin595+3,f,c
  6837  001CEA  90D8               	bcf	status,0,c
  6838  001CEC  3625               	rlcf	??_SetPin595+2,f,c
  6839  001CEE  3626               	rlcf	??_SetPin595+3,f,c
  6840  001CF0  5023               	movf	??_SetPin595,w,c
  6841  001CF2  2625               	addwf	??_SetPin595+2,f,c
  6842  001CF4  5024               	movf	??_SetPin595+1,w,c
  6843  001CF6  2226               	addwfc	??_SetPin595+3,f,c
  6844  001CF8  0E00               	movlw	low _registers
  6845  001CFA  2425               	addwf	??_SetPin595+2,w,c
  6846  001CFC  6ED9               	movwf	fsr2l,c
  6847  001CFE  0E01               	movlw	high _registers
  6848  001D00  2026               	addwfc	??_SetPin595+3,w,c
  6849  001D02  6EDA               	movwf	fsr2h,c
  6850  001D04  C021  FFDE         	movff	SetPin595@value,postinc2
  6851  001D08  C022  FFDD         	movff	SetPin595@value+1,postdec2
  6852  001D0C  0012               	return		;funcret
  6853  001D0E                     __end_of_SetPin595:
  6854                           	opt stack 0
  6855                           tblptru	equ	0xFF8
  6856                           tblptrh	equ	0xFF7
  6857                           tblptrl	equ	0xFF6
  6858                           tablat	equ	0xFF5
  6859                           prodh	equ	0xFF4
  6860                           prodl	equ	0xFF3
  6861                           intcon	equ	0xFF2
  6862                           intcon2	equ	0xFF1
  6863                           postinc0	equ	0xFEE
  6864                           wreg	equ	0xFE8
  6865                           indf1	equ	0xFE7
  6866                           postdec1	equ	0xFE5
  6867                           fsr1h	equ	0xFE2
  6868                           fsr1l	equ	0xFE1
  6869                           indf2	equ	0xFDF
  6870                           postinc2	equ	0xFDE
  6871                           postdec2	equ	0xFDD
  6872                           plusw2	equ	0xFDB
  6873                           fsr2h	equ	0xFDA
  6874                           fsr2l	equ	0xFD9
  6875                           status	equ	0xFD8
  6876                           
  6877 ;; *************** function _ComputeStorageData *****************
  6878 ;; Defined at:
  6879 ;;		line 160 in file "PDU.c"
  6880 ;; Parameters:    Size  Location     Type
  6881 ;;		None
  6882 ;; Auto vars:     Size  Location     Type
  6883 ;;  i               2   31[COMRAM] int 
  6884 ;; Return value:  Size  Location     Type
  6885 ;;                  1    wreg      void 
  6886 ;; Registers used:
  6887 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6888 ;; Tracked objects:
  6889 ;;		On entry : 0/0
  6890 ;;		On exit  : 0/0
  6891 ;;		Unchanged: 0/0
  6892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6893 ;;      Params:         0       0       0       0       0       0       0
  6894 ;;      Locals:         2       0       0       0       0       0       0
  6895 ;;      Temps:          2       0       0       0       0       0       0
  6896 ;;      Totals:         4       0       0       0       0       0       0
  6897 ;;Total ram usage:        4 bytes
  6898 ;; Hardware stack levels used:    1
  6899 ;; Hardware stack levels required when called:    7
  6900 ;; This function calls:
  6901 ;;		_DATAEE_ReadByte
  6902 ;; This function is called by:
  6903 ;;		_PDUStartup
  6904 ;;		_main
  6905 ;; This function uses a non-reentrant model
  6906 ;;
  6907                           
  6908                           	psect	text42
  6909  001470                     __ptext42:
  6910                           	opt stack 0
  6911  001470                     _ComputeStorageData:
  6912                           	opt stack 22
  6913                           
  6914                           ;PDU.c: 161: for (int i = 0; i < 12; i++) {
  6915                           
  6916                           ;incstack = 0
  6917  001470  0E00               	movlw	0
  6918  001472  6E21               	movwf	ComputeStorageData@i+1,c
  6919  001474  0E00               	movlw	0
  6920  001476  6E20               	movwf	ComputeStorageData@i,c
  6921  001478                     l4340:
  6922  001478  BE21               	btfsc	ComputeStorageData@i+1,7,c
  6923  00147A  D006               	goto	l4344
  6924  00147C  5021               	movf	ComputeStorageData@i+1,w,c
  6925  00147E  E111               	bnz	l4350
  6926  001480  0E0C               	movlw	12
  6927  001482  5C20               	subwf	ComputeStorageData@i,w,c
  6928  001484  B0D8               	btfsc	status,0,c
  6929  001486  D00D               	goto	l4350
  6930  001488                     l4344:
  6931                           
  6932                           ;PDU.c: 162: data[i] = DATAEE_ReadByte(i);
  6933  001488  0ED3               	movlw	low _data
  6934  00148A  2420               	addwf	ComputeStorageData@i,w,c
  6935  00148C  6ED9               	movwf	fsr2l,c
  6936  00148E  0E00               	movlw	high _data
  6937  001490  2021               	addwfc	ComputeStorageData@i+1,w,c
  6938  001492  6EDA               	movwf	fsr2h,c
  6939  001494  5020               	movf	ComputeStorageData@i,w,c
  6940  001496  ECEC  F010         	call	_DATAEE_ReadByte
  6941  00149A  6EDF               	movwf	indf2,c
  6942  00149C  4A20               	infsnz	ComputeStorageData@i,f,c
  6943  00149E  2A21               	incf	ComputeStorageData@i+1,f,c
  6944  0014A0  D7EB               	goto	l4340
  6945  0014A2                     l4350:
  6946                           
  6947                           ;PDU.c: 163: }
  6948                           ;PDU.c: 164: Currentcomp[0] = ((data[0] << 8) | data[1]);
  6949  0014A2  0100               	movlb	0	; () banked
  6950  0014A4  51D4               	movf	(_data+1)& (0+255),w,b
  6951  0014A6  C0D3  F01E         	movff	_data,??_ComputeStorageData
  6952  0014AA  6A1F               	clrf	(??_ComputeStorageData+1)& (0+255),c
  6953  0014AC  C01E  F01F         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  6954  0014B0  6A1E               	clrf	??_ComputeStorageData,c
  6955  0014B2  101E               	iorwf	??_ComputeStorageData,w,c
  6956  0014B4  0100               	movlb	0	; () banked
  6957  0014B6  6FDF               	movwf	_Currentcomp& (0+255),b
  6958  0014B8  501F               	movf	??_ComputeStorageData+1,w,c
  6959  0014BA  0100               	movlb	0	; () banked
  6960  0014BC  6FE0               	movwf	(_Currentcomp+1)& (0+255),b
  6961                           
  6962                           ;PDU.c: 165: Currentcomp[1] = ((data[2] << 8) | data[3]);
  6963  0014BE  0100               	movlb	0	; () banked
  6964  0014C0  51D6               	movf	(_data+3)& (0+255),w,b
  6965  0014C2  C0D5  F01E         	movff	_data+2,??_ComputeStorageData
  6966  0014C6  6A1F               	clrf	(??_ComputeStorageData+1)& (0+255),c
  6967  0014C8  C01E  F01F         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  6968  0014CC  6A1E               	clrf	??_ComputeStorageData,c
  6969  0014CE  101E               	iorwf	??_ComputeStorageData,w,c
  6970  0014D0  0100               	movlb	0	; () banked
  6971  0014D2  6FE1               	movwf	(_Currentcomp+2)& (0+255),b
  6972  0014D4  501F               	movf	??_ComputeStorageData+1,w,c
  6973  0014D6  0100               	movlb	0	; () banked
  6974  0014D8  6FE2               	movwf	(_Currentcomp+3)& (0+255),b
  6975                           
  6976                           ;PDU.c: 166: Currentcomp[2] = ((data[4] << 8) | data[5]);
  6977  0014DA  0100               	movlb	0	; () banked
  6978  0014DC  51D8               	movf	(_data+5)& (0+255),w,b
  6979  0014DE  C0D7  F01E         	movff	_data+4,??_ComputeStorageData
  6980  0014E2  6A1F               	clrf	(??_ComputeStorageData+1)& (0+255),c
  6981  0014E4  C01E  F01F         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  6982  0014E8  6A1E               	clrf	??_ComputeStorageData,c
  6983  0014EA  101E               	iorwf	??_ComputeStorageData,w,c
  6984  0014EC  0100               	movlb	0	; () banked
  6985  0014EE  6FE3               	movwf	(_Currentcomp+4)& (0+255),b
  6986  0014F0  501F               	movf	??_ComputeStorageData+1,w,c
  6987  0014F2  0100               	movlb	0	; () banked
  6988  0014F4  6FE4               	movwf	(_Currentcomp+5)& (0+255),b
  6989                           
  6990                           ;PDU.c: 167: Currentcomp[3] = ((data[6] << 8) | data[7]);
  6991  0014F6  0100               	movlb	0	; () banked
  6992  0014F8  51DA               	movf	(_data+7)& (0+255),w,b
  6993  0014FA  C0D9  F01E         	movff	_data+6,??_ComputeStorageData
  6994  0014FE  6A1F               	clrf	(??_ComputeStorageData+1)& (0+255),c
  6995  001500  C01E  F01F         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  6996  001504  6A1E               	clrf	??_ComputeStorageData,c
  6997  001506  101E               	iorwf	??_ComputeStorageData,w,c
  6998  001508  0100               	movlb	0	; () banked
  6999  00150A  6FE5               	movwf	(_Currentcomp+6)& (0+255),b
  7000  00150C  501F               	movf	??_ComputeStorageData+1,w,c
  7001  00150E  0100               	movlb	0	; () banked
  7002  001510  6FE6               	movwf	(_Currentcomp+7)& (0+255),b
  7003                           
  7004                           ;PDU.c: 168: Currentcomp[4] = ((data[8] << 8) | data[9]);
  7005  001512  0100               	movlb	0	; () banked
  7006  001514  51DC               	movf	(_data+9)& (0+255),w,b
  7007  001516  C0DB  F01E         	movff	_data+8,??_ComputeStorageData
  7008  00151A  6A1F               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7009  00151C  C01E  F01F         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7010  001520  6A1E               	clrf	??_ComputeStorageData,c
  7011  001522  101E               	iorwf	??_ComputeStorageData,w,c
  7012  001524  0100               	movlb	0	; () banked
  7013  001526  6FE7               	movwf	(_Currentcomp+8)& (0+255),b
  7014  001528  501F               	movf	??_ComputeStorageData+1,w,c
  7015  00152A  0100               	movlb	0	; () banked
  7016  00152C  6FE8               	movwf	(_Currentcomp+9)& (0+255),b
  7017                           
  7018                           ;PDU.c: 169: Currentcomp[5] = ((data[10] << 8) | data[11]);
  7019  00152E  0100               	movlb	0	; () banked
  7020  001530  51DE               	movf	(_data+11)& (0+255),w,b
  7021  001532  C0DD  F01E         	movff	_data+10,??_ComputeStorageData
  7022  001536  6A1F               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7023  001538  C01E  F01F         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7024  00153C  6A1E               	clrf	??_ComputeStorageData,c
  7025  00153E  101E               	iorwf	??_ComputeStorageData,w,c
  7026  001540  0100               	movlb	0	; () banked
  7027  001542  6FE9               	movwf	(_Currentcomp+10)& (0+255),b
  7028  001544  501F               	movf	??_ComputeStorageData+1,w,c
  7029  001546  0100               	movlb	0	; () banked
  7030  001548  6FEA               	movwf	(_Currentcomp+11)& (0+255),b
  7031                           
  7032                           ; BSR set to: 0
  7033  00154A  0012               	return		;funcret
  7034  00154C                     __end_of_ComputeStorageData:
  7035                           	opt stack 0
  7036                           tblptru	equ	0xFF8
  7037                           tblptrh	equ	0xFF7
  7038                           tblptrl	equ	0xFF6
  7039                           tablat	equ	0xFF5
  7040                           prodh	equ	0xFF4
  7041                           prodl	equ	0xFF3
  7042                           intcon	equ	0xFF2
  7043                           intcon2	equ	0xFF1
  7044                           postinc0	equ	0xFEE
  7045                           wreg	equ	0xFE8
  7046                           indf1	equ	0xFE7
  7047                           postdec1	equ	0xFE5
  7048                           fsr1h	equ	0xFE2
  7049                           fsr1l	equ	0xFE1
  7050                           indf2	equ	0xFDF
  7051                           postinc2	equ	0xFDE
  7052                           postdec2	equ	0xFDD
  7053                           plusw2	equ	0xFDB
  7054                           fsr2h	equ	0xFDA
  7055                           fsr2l	equ	0xFD9
  7056                           status	equ	0xFD8
  7057                           
  7058 ;; *************** function _DATAEE_ReadByte *****************
  7059 ;; Defined at:
  7060 ;;		line 143 in file "mcc_generated_files/memory.c"
  7061 ;; Parameters:    Size  Location     Type
  7062 ;;  bAdd            1    wreg     unsigned char 
  7063 ;; Auto vars:     Size  Location     Type
  7064 ;;  bAdd            1   28[COMRAM] unsigned char 
  7065 ;; Return value:  Size  Location     Type
  7066 ;;                  1    wreg      unsigned char 
  7067 ;; Registers used:
  7068 ;;		wreg, status,2
  7069 ;; Tracked objects:
  7070 ;;		On entry : 0/0
  7071 ;;		On exit  : 0/0
  7072 ;;		Unchanged: 0/0
  7073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7074 ;;      Params:         0       0       0       0       0       0       0
  7075 ;;      Locals:         1       0       0       0       0       0       0
  7076 ;;      Temps:          0       0       0       0       0       0       0
  7077 ;;      Totals:         1       0       0       0       0       0       0
  7078 ;;Total ram usage:        1 bytes
  7079 ;; Hardware stack levels used:    1
  7080 ;; Hardware stack levels required when called:    6
  7081 ;; This function calls:
  7082 ;;		Nothing
  7083 ;; This function is called by:
  7084 ;;		_ComputeStorageData
  7085 ;; This function uses a non-reentrant model
  7086 ;;
  7087                           
  7088                           	psect	text43
  7089  0021D8                     __ptext43:
  7090                           	opt stack 0
  7091  0021D8                     _DATAEE_ReadByte:
  7092                           	opt stack 22
  7093                           
  7094                           ; BSR set to: 0
  7095                           ;incstack = 0
  7096                           ;DATAEE_ReadByte@bAdd stored from wreg
  7097  0021D8  6E1D               	movwf	DATAEE_ReadByte@bAdd,c
  7098                           
  7099                           ;memory.c: 145: EEADR = (bAdd & 0xFF);
  7100  0021DA  C01D  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
  7101                           
  7102                           ;memory.c: 146: EECON1bits.CFGS = 0;
  7103  0021DE  9CA6               	bcf	4006,6,c	;volatile
  7104                           
  7105                           ;memory.c: 147: EECON1bits.EEPGD = 0;
  7106  0021E0  9EA6               	bcf	4006,7,c	;volatile
  7107                           
  7108                           ;memory.c: 148: EECON1bits.RD = 1;
  7109  0021E2  80A6               	bsf	4006,0,c	;volatile
  7110                           
  7111                           ;memory.c: 149: __nop();
  7112  0021E4  F000               	nop	
  7113                           
  7114                           ;memory.c: 150: __nop();
  7115  0021E6  F000               	nop	
  7116                           
  7117                           ;memory.c: 152: return (EEDATA);
  7118  0021E8  50A8               	movf	4008,w,c	;volatile
  7119  0021EA  0012               	return	
  7120  0021EC                     __end_of_DATAEE_ReadByte:
  7121                           	opt stack 0
  7122                           tblptru	equ	0xFF8
  7123                           tblptrh	equ	0xFF7
  7124                           tblptrl	equ	0xFF6
  7125                           tablat	equ	0xFF5
  7126                           prodh	equ	0xFF4
  7127                           prodl	equ	0xFF3
  7128                           intcon	equ	0xFF2
  7129                           intcon2	equ	0xFF1
  7130                           postinc0	equ	0xFEE
  7131                           wreg	equ	0xFE8
  7132                           indf1	equ	0xFE7
  7133                           postdec1	equ	0xFE5
  7134                           fsr1h	equ	0xFE2
  7135                           fsr1l	equ	0xFE1
  7136                           indf2	equ	0xFDF
  7137                           postinc2	equ	0xFDE
  7138                           postdec2	equ	0xFDD
  7139                           plusw2	equ	0xFDB
  7140                           fsr2h	equ	0xFDA
  7141                           fsr2l	equ	0xFD9
  7142                           status	equ	0xFD8
  7143                           
  7144 ;; *************** function _CoolingStop *****************
  7145 ;; Defined at:
  7146 ;;		line 30 in file "CoolingControl.c"
  7147 ;; Parameters:    Size  Location     Type
  7148 ;;		None
  7149 ;; Auto vars:     Size  Location     Type
  7150 ;;		None
  7151 ;; Return value:  Size  Location     Type
  7152 ;;                  1    wreg      void 
  7153 ;; Registers used:
  7154 ;;		wreg, status,2, status,0, cstack
  7155 ;; Tracked objects:
  7156 ;;		On entry : 0/0
  7157 ;;		On exit  : 0/0
  7158 ;;		Unchanged: 0/0
  7159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7160 ;;      Params:         0       0       0       0       0       0       0
  7161 ;;      Locals:         0       0       0       0       0       0       0
  7162 ;;      Temps:          0       0       0       0       0       0       0
  7163 ;;      Totals:         0       0       0       0       0       0       0
  7164 ;;Total ram usage:        0 bytes
  7165 ;; Hardware stack levels used:    1
  7166 ;; Hardware stack levels required when called:    8
  7167 ;; This function calls:
  7168 ;;		_PWM4_LoadDutyValue
  7169 ;;		_PotClear
  7170 ;; This function is called by:
  7171 ;;		_main
  7172 ;; This function uses a non-reentrant model
  7173 ;;
  7174                           
  7175                           	psect	text44
  7176  0021EC                     __ptext44:
  7177                           	opt stack 0
  7178  0021EC                     _CoolingStop:
  7179                           	opt stack 22
  7180                           
  7181                           ;CoolingControl.c: 31: PotClear();
  7182                           
  7183                           ;incstack = 0
  7184  0021EC  ECA6  F00A         	call	_PotClear	;wreg free
  7185                           
  7186                           ;CoolingControl.c: 32: PWM4_LoadDutyValue(0);
  7187  0021F0  0E00               	movlw	0
  7188  0021F2  6E1E               	movwf	PWM4_LoadDutyValue@dutyValue+1,c
  7189  0021F4  0E00               	movlw	0
  7190  0021F6  6E1D               	movwf	PWM4_LoadDutyValue@dutyValue,c
  7191  0021F8  ECAB  F00F         	call	_PWM4_LoadDutyValue	;wreg free
  7192  0021FC  0012               	return		;funcret
  7193  0021FE                     __end_of_CoolingStop:
  7194                           	opt stack 0
  7195                           tblptru	equ	0xFF8
  7196                           tblptrh	equ	0xFF7
  7197                           tblptrl	equ	0xFF6
  7198                           tablat	equ	0xFF5
  7199                           prodh	equ	0xFF4
  7200                           prodl	equ	0xFF3
  7201                           intcon	equ	0xFF2
  7202                           intcon2	equ	0xFF1
  7203                           postinc0	equ	0xFEE
  7204                           wreg	equ	0xFE8
  7205                           indf1	equ	0xFE7
  7206                           postdec1	equ	0xFE5
  7207                           fsr1h	equ	0xFE2
  7208                           fsr1l	equ	0xFE1
  7209                           indf2	equ	0xFDF
  7210                           postinc2	equ	0xFDE
  7211                           postdec2	equ	0xFDD
  7212                           plusw2	equ	0xFDB
  7213                           fsr2h	equ	0xFDA
  7214                           fsr2l	equ	0xFD9
  7215                           status	equ	0xFD8
  7216                           
  7217 ;; *************** function _CoolingStart *****************
  7218 ;; Defined at:
  7219 ;;		line 19 in file "CoolingControl.c"
  7220 ;; Parameters:    Size  Location     Type
  7221 ;;		None
  7222 ;; Auto vars:     Size  Location     Type
  7223 ;;		None
  7224 ;; Return value:  Size  Location     Type
  7225 ;;                  1    wreg      void 
  7226 ;; Registers used:
  7227 ;;		wreg, status,2, status,0, cstack
  7228 ;; Tracked objects:
  7229 ;;		On entry : 0/0
  7230 ;;		On exit  : 0/0
  7231 ;;		Unchanged: 0/0
  7232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7233 ;;      Params:         0       0       0       0       0       0       0
  7234 ;;      Locals:         0       0       0       0       0       0       0
  7235 ;;      Temps:          0       0       0       0       0       0       0
  7236 ;;      Totals:         0       0       0       0       0       0       0
  7237 ;;Total ram usage:        0 bytes
  7238 ;; Hardware stack levels used:    1
  7239 ;; Hardware stack levels required when called:    8
  7240 ;; This function calls:
  7241 ;;		_PWM4_LoadDutyValue
  7242 ;;		_PotClear
  7243 ;;		_PotSetpoint
  7244 ;; This function is called by:
  7245 ;;		_main
  7246 ;; This function uses a non-reentrant model
  7247 ;;
  7248                           
  7249                           	psect	text45
  7250  0020EE                     __ptext45:
  7251                           	opt stack 0
  7252  0020EE                     _CoolingStart:
  7253                           	opt stack 22
  7254                           
  7255                           ;CoolingControl.c: 21: PotClear();
  7256                           
  7257                           ;incstack = 0
  7258  0020EE  ECA6  F00A         	call	_PotClear	;wreg free
  7259                           
  7260                           ;CoolingControl.c: 22: PotSetpoint(40);
  7261  0020F2  0E00               	movlw	0
  7262  0020F4  6E27               	movwf	PotSetpoint@new_point+1,c
  7263  0020F6  0E28               	movlw	40
  7264  0020F8  6E26               	movwf	PotSetpoint@new_point,c
  7265  0020FA  ECD0  F008         	call	_PotSetpoint	;wreg free
  7266                           
  7267                           ;CoolingControl.c: 23: PWM4_LoadDutyValue(1000);
  7268  0020FE  0E03               	movlw	3
  7269  002100  6E1E               	movwf	PWM4_LoadDutyValue@dutyValue+1,c
  7270  002102  0EE8               	movlw	232
  7271  002104  6E1D               	movwf	PWM4_LoadDutyValue@dutyValue,c
  7272  002106  ECAB  F00F         	call	_PWM4_LoadDutyValue	;wreg free
  7273  00210A  0012               	return		;funcret
  7274  00210C                     __end_of_CoolingStart:
  7275                           	opt stack 0
  7276                           tblptru	equ	0xFF8
  7277                           tblptrh	equ	0xFF7
  7278                           tblptrl	equ	0xFF6
  7279                           tablat	equ	0xFF5
  7280                           prodh	equ	0xFF4
  7281                           prodl	equ	0xFF3
  7282                           intcon	equ	0xFF2
  7283                           intcon2	equ	0xFF1
  7284                           postinc0	equ	0xFEE
  7285                           wreg	equ	0xFE8
  7286                           indf1	equ	0xFE7
  7287                           postdec1	equ	0xFE5
  7288                           fsr1h	equ	0xFE2
  7289                           fsr1l	equ	0xFE1
  7290                           indf2	equ	0xFDF
  7291                           postinc2	equ	0xFDE
  7292                           postdec2	equ	0xFDD
  7293                           plusw2	equ	0xFDB
  7294                           fsr2h	equ	0xFDA
  7295                           fsr2l	equ	0xFD9
  7296                           status	equ	0xFD8
  7297                           
  7298 ;; *************** function _PotSetpoint *****************
  7299 ;; Defined at:
  7300 ;;		line 21 in file "DigiPot.c"
  7301 ;; Parameters:    Size  Location     Type
  7302 ;;  new_point       2   37[COMRAM] int 
  7303 ;; Auto vars:     Size  Location     Type
  7304 ;;  new_pos         2    4[BANK0 ] int 
  7305 ;;  x               2    2[BANK0 ] int 
  7306 ;;  set_point       2    0[BANK0 ] int 
  7307 ;; Return value:  Size  Location     Type
  7308 ;;                  1    wreg      void 
  7309 ;; Registers used:
  7310 ;;		wreg, status,2, status,0, cstack
  7311 ;; Tracked objects:
  7312 ;;		On entry : 0/0
  7313 ;;		On exit  : 0/0
  7314 ;;		Unchanged: 0/0
  7315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7316 ;;      Params:         2       0       0       0       0       0       0
  7317 ;;      Locals:         0       6       0       0       0       0       0
  7318 ;;      Temps:          2       0       0       0       0       0       0
  7319 ;;      Totals:         4       6       0       0       0       0       0
  7320 ;;Total ram usage:       10 bytes
  7321 ;; Hardware stack levels used:    1
  7322 ;; Hardware stack levels required when called:    7
  7323 ;; This function calls:
  7324 ;;		_Delay
  7325 ;; This function is called by:
  7326 ;;		_main
  7327 ;;		_CoolingStart
  7328 ;; This function uses a non-reentrant model
  7329 ;;
  7330                           
  7331                           	psect	text46
  7332  0011A0                     __ptext46:
  7333                           	opt stack 0
  7334  0011A0                     _PotSetpoint:
  7335                           	opt stack 23
  7336                           
  7337                           ;DigiPot.c: 22: int set_point;
  7338                           ;DigiPot.c: 31: int new_pos = new_point;
  7339                           
  7340                           ;incstack = 0
  7341  0011A0  C026  F064         	movff	PotSetpoint@new_point,PotSetpoint@new_pos
  7342  0011A4  C027  F065         	movff	PotSetpoint@new_point+1,PotSetpoint@new_pos+1
  7343                           
  7344                           ;DigiPot.c: 35: LATB5 = 0;
  7345  0011A8  9A8A               	bcf	3978,5,c	;volatile
  7346                           
  7347                           ;DigiPot.c: 38: if (new_pos > prev_pos) {
  7348  0011AA  0100               	movlb	0	; () banked
  7349  0011AC  5164               	movf	PotSetpoint@new_pos& (0+255),w,b
  7350  0011AE  5C36               	subwf	_prev_pos,w,c
  7351  0011B0  5037               	movf	_prev_pos+1,w,c
  7352  0011B2  0A80               	xorlw	128
  7353  0011B4  6E28               	movwf	??_PotSetpoint& (0+255),c
  7354  0011B6  0100               	movlb	0	; () banked
  7355  0011B8  5165               	movf	(PotSetpoint@new_pos+1)& (0+255),w,b
  7356  0011BA  0A80               	xorlw	128
  7357  0011BC  5828               	subwfb	??_PotSetpoint& (0+255),w,c
  7358  0011BE  B0D8               	btfsc	status,0,c
  7359  0011C0  D013               	goto	l719
  7360                           
  7361                           ; BSR set to: 0
  7362                           ;DigiPot.c: 40: LATB3 = 1;
  7363  0011C2  868A               	bsf	3978,3,c	;volatile
  7364                           
  7365                           ; BSR set to: 0
  7366                           ;DigiPot.c: 41: set_point = new_pos - prev_pos;
  7367  0011C4  C036  F028         	movff	_prev_pos,??_PotSetpoint
  7368  0011C8  C037  F029         	movff	_prev_pos+1,??_PotSetpoint+1
  7369  0011CC  1E28               	comf	??_PotSetpoint,f,c
  7370  0011CE  1E29               	comf	??_PotSetpoint+1,f,c
  7371  0011D0  4A28               	infsnz	??_PotSetpoint,f,c
  7372  0011D2  2A29               	incf	??_PotSetpoint+1,f,c
  7373  0011D4  0100               	movlb	0	; () banked
  7374  0011D6  5164               	movf	PotSetpoint@new_pos& (0+255),w,b
  7375  0011D8  2428               	addwf	??_PotSetpoint,w,c
  7376  0011DA  0100               	movlb	0	; () banked
  7377  0011DC  6F60               	movwf	PotSetpoint@set_point& (0+255),b
  7378  0011DE  0100               	movlb	0	; () banked
  7379  0011E0  5165               	movf	(PotSetpoint@new_pos+1)& (0+255),w,b
  7380  0011E2  2029               	addwfc	??_PotSetpoint+1,w,c
  7381  0011E4  0100               	movlb	0	; () banked
  7382  0011E6  6F61               	movwf	(PotSetpoint@set_point+1)& (0+255),b
  7383  0011E8                     l719:
  7384                           
  7385                           ; BSR set to: 0
  7386                           ;DigiPot.c: 42: }
  7387                           ;DigiPot.c: 43: if (new_pos < prev_pos) {
  7388  0011E8  5036               	movf	_prev_pos,w,c
  7389  0011EA  0100               	movlb	0	; () banked
  7390  0011EC  5D64               	subwf	PotSetpoint@new_pos& (0+255),w,b
  7391  0011EE  0100               	movlb	0	; () banked
  7392  0011F0  5165               	movf	(PotSetpoint@new_pos+1)& (0+255),w,b
  7393  0011F2  0A80               	xorlw	128
  7394  0011F4  6E28               	movwf	??_PotSetpoint& (0+255),c
  7395  0011F6  5037               	movf	_prev_pos+1,w,c
  7396  0011F8  0A80               	xorlw	128
  7397  0011FA  5828               	subwfb	??_PotSetpoint& (0+255),w,c
  7398  0011FC  B0D8               	btfsc	status,0,c
  7399  0011FE  D011               	goto	l4364
  7400                           
  7401                           ; BSR set to: 0
  7402                           ;DigiPot.c: 45: LATB3 = 0;
  7403  001200  968A               	bcf	3978,3,c	;volatile
  7404                           
  7405                           ; BSR set to: 0
  7406                           ;DigiPot.c: 46: set_point = prev_pos - new_pos;
  7407  001202  C064  F028         	movff	PotSetpoint@new_pos,??_PotSetpoint
  7408  001206  C065  F029         	movff	PotSetpoint@new_pos+1,??_PotSetpoint+1
  7409  00120A  1E28               	comf	??_PotSetpoint,f,c
  7410  00120C  1E29               	comf	??_PotSetpoint+1,f,c
  7411  00120E  4A28               	infsnz	??_PotSetpoint,f,c
  7412  001210  2A29               	incf	??_PotSetpoint+1,f,c
  7413  001212  5036               	movf	_prev_pos,w,c
  7414  001214  2428               	addwf	??_PotSetpoint,w,c
  7415  001216  0100               	movlb	0	; () banked
  7416  001218  6F60               	movwf	PotSetpoint@set_point& (0+255),b
  7417  00121A  5037               	movf	_prev_pos+1,w,c
  7418  00121C  2029               	addwfc	??_PotSetpoint+1,w,c
  7419  00121E  0100               	movlb	0	; () banked
  7420  001220  6F61               	movwf	(PotSetpoint@set_point+1)& (0+255),b
  7421  001222                     l4364:
  7422                           
  7423                           ; BSR set to: 0
  7424                           ;DigiPot.c: 47: }
  7425                           ;DigiPot.c: 48: Delay(1);
  7426  001222  0E01               	movlw	1
  7427  001224  6E1D               	movwf	Delay@wait,c
  7428  001226  0E00               	movlw	0
  7429  001228  6E1E               	movwf	Delay@wait+1,c
  7430  00122A  0E00               	movlw	0
  7431  00122C  6E1F               	movwf	Delay@wait+2,c
  7432  00122E  0E00               	movlw	0
  7433  001230  6E20               	movwf	Delay@wait+3,c
  7434  001232  ECD3  F00E         	call	_Delay	;wreg free
  7435                           
  7436                           ;DigiPot.c: 50: int x;
  7437                           ;DigiPot.c: 52: for (x = 0; x < set_point; x++) {
  7438  001236  0E00               	movlw	0
  7439  001238  0100               	movlb	0	; () banked
  7440  00123A  6F63               	movwf	(PotSetpoint@x+1)& (0+255),b
  7441  00123C  0E00               	movlw	0
  7442  00123E  6F62               	movwf	PotSetpoint@x& (0+255),b
  7443  001240  D019               	goto	l4374
  7444  001242                     l722:
  7445                           
  7446                           ; BSR set to: 0
  7447                           ;DigiPot.c: 53: LATB4 = 1;
  7448  001242  888A               	bsf	3978,4,c	;volatile
  7449                           
  7450                           ; BSR set to: 0
  7451                           ;DigiPot.c: 54: Delay(1);
  7452  001244  0E01               	movlw	1
  7453  001246  6E1D               	movwf	Delay@wait,c
  7454  001248  0E00               	movlw	0
  7455  00124A  6E1E               	movwf	Delay@wait+1,c
  7456  00124C  0E00               	movlw	0
  7457  00124E  6E1F               	movwf	Delay@wait+2,c
  7458  001250  0E00               	movlw	0
  7459  001252  6E20               	movwf	Delay@wait+3,c
  7460  001254  ECD3  F00E         	call	_Delay	;wreg free
  7461                           
  7462                           ;DigiPot.c: 55: LATB4 = 0;
  7463  001258  988A               	bcf	3978,4,c	;volatile
  7464                           
  7465                           ;DigiPot.c: 56: Delay(1);
  7466  00125A  0E01               	movlw	1
  7467  00125C  6E1D               	movwf	Delay@wait,c
  7468  00125E  0E00               	movlw	0
  7469  001260  6E1E               	movwf	Delay@wait+1,c
  7470  001262  0E00               	movlw	0
  7471  001264  6E1F               	movwf	Delay@wait+2,c
  7472  001266  0E00               	movlw	0
  7473  001268  6E20               	movwf	Delay@wait+3,c
  7474  00126A  ECD3  F00E         	call	_Delay	;wreg free
  7475  00126E  0100               	movlb	0	; () banked
  7476  001270  4B62               	infsnz	PotSetpoint@x& (0+255),f,b
  7477  001272  2B63               	incf	(PotSetpoint@x+1)& (0+255),f,b
  7478  001274                     l4374:
  7479                           
  7480                           ; BSR set to: 0
  7481  001274  0100               	movlb	0	; () banked
  7482  001276  5160               	movf	PotSetpoint@set_point& (0+255),w,b
  7483  001278  0100               	movlb	0	; () banked
  7484  00127A  5D62               	subwf	PotSetpoint@x& (0+255),w,b
  7485  00127C  0100               	movlb	0	; () banked
  7486  00127E  5163               	movf	(PotSetpoint@x+1)& (0+255),w,b
  7487  001280  0A80               	xorlw	128
  7488  001282  6E28               	movwf	??_PotSetpoint& (0+255),c
  7489  001284  0100               	movlb	0	; () banked
  7490  001286  5161               	movf	(PotSetpoint@set_point+1)& (0+255),w,b
  7491  001288  0A80               	xorlw	128
  7492  00128A  5828               	subwfb	??_PotSetpoint& (0+255),w,c
  7493  00128C  A0D8               	btfss	status,0,c
  7494  00128E  D7D9               	goto	l722
  7495                           
  7496                           ; BSR set to: 0
  7497                           ;DigiPot.c: 57: }
  7498                           ;DigiPot.c: 59: LATB5 = 1;
  7499  001290  8A8A               	bsf	3978,5,c	;volatile
  7500                           
  7501                           ;DigiPot.c: 60: prev_pos = new_pos;
  7502  001292  C064  F036         	movff	PotSetpoint@new_pos,_prev_pos
  7503  001296  C065  F037         	movff	PotSetpoint@new_pos+1,_prev_pos+1
  7504                           
  7505                           ; BSR set to: 0
  7506  00129A  0012               	return		;funcret
  7507  00129C                     __end_of_PotSetpoint:
  7508                           	opt stack 0
  7509                           tblptru	equ	0xFF8
  7510                           tblptrh	equ	0xFF7
  7511                           tblptrl	equ	0xFF6
  7512                           tablat	equ	0xFF5
  7513                           prodh	equ	0xFF4
  7514                           prodl	equ	0xFF3
  7515                           intcon	equ	0xFF2
  7516                           intcon2	equ	0xFF1
  7517                           postinc0	equ	0xFEE
  7518                           wreg	equ	0xFE8
  7519                           indf1	equ	0xFE7
  7520                           postdec1	equ	0xFE5
  7521                           fsr1h	equ	0xFE2
  7522                           fsr1l	equ	0xFE1
  7523                           indf2	equ	0xFDF
  7524                           postinc2	equ	0xFDE
  7525                           postdec2	equ	0xFDD
  7526                           plusw2	equ	0xFDB
  7527                           fsr2h	equ	0xFDA
  7528                           fsr2l	equ	0xFD9
  7529                           status	equ	0xFD8
  7530                           
  7531 ;; *************** function _PotClear *****************
  7532 ;; Defined at:
  7533 ;;		line 66 in file "DigiPot.c"
  7534 ;; Parameters:    Size  Location     Type
  7535 ;;		None
  7536 ;; Auto vars:     Size  Location     Type
  7537 ;;  x               2   37[COMRAM] int 
  7538 ;; Return value:  Size  Location     Type
  7539 ;;                  1    wreg      void 
  7540 ;; Registers used:
  7541 ;;		wreg, status,2, status,0, cstack
  7542 ;; Tracked objects:
  7543 ;;		On entry : 0/0
  7544 ;;		On exit  : 0/0
  7545 ;;		Unchanged: 0/0
  7546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7547 ;;      Params:         0       0       0       0       0       0       0
  7548 ;;      Locals:         2       0       0       0       0       0       0
  7549 ;;      Temps:          0       0       0       0       0       0       0
  7550 ;;      Totals:         2       0       0       0       0       0       0
  7551 ;;Total ram usage:        2 bytes
  7552 ;; Hardware stack levels used:    1
  7553 ;; Hardware stack levels required when called:    7
  7554 ;; This function calls:
  7555 ;;		_Delay
  7556 ;; This function is called by:
  7557 ;;		_CoolingStart
  7558 ;;		_CoolingStop
  7559 ;; This function uses a non-reentrant model
  7560 ;;
  7561                           
  7562                           	psect	text47
  7563  00154C                     __ptext47:
  7564                           	opt stack 0
  7565  00154C                     _PotClear:
  7566                           	opt stack 22
  7567                           
  7568                           ;DigiPot.c: 67: Delay(1);
  7569                           
  7570                           ; BSR set to: 0
  7571                           ;incstack = 0
  7572  00154C  0E01               	movlw	1
  7573  00154E  6E1D               	movwf	Delay@wait,c
  7574  001550  0E00               	movlw	0
  7575  001552  6E1E               	movwf	Delay@wait+1,c
  7576  001554  0E00               	movlw	0
  7577  001556  6E1F               	movwf	Delay@wait+2,c
  7578  001558  0E00               	movlw	0
  7579  00155A  6E20               	movwf	Delay@wait+3,c
  7580  00155C  ECD3  F00E         	call	_Delay	;wreg free
  7581                           
  7582                           ;DigiPot.c: 69: LATB5 = 0;
  7583  001560  9A8A               	bcf	3978,5,c	;volatile
  7584                           
  7585                           ;DigiPot.c: 70: Delay(1);
  7586  001562  0E01               	movlw	1
  7587  001564  6E1D               	movwf	Delay@wait,c
  7588  001566  0E00               	movlw	0
  7589  001568  6E1E               	movwf	Delay@wait+1,c
  7590  00156A  0E00               	movlw	0
  7591  00156C  6E1F               	movwf	Delay@wait+2,c
  7592  00156E  0E00               	movlw	0
  7593  001570  6E20               	movwf	Delay@wait+3,c
  7594  001572  ECD3  F00E         	call	_Delay	;wreg free
  7595                           
  7596                           ;DigiPot.c: 71: LATB3 = 0;
  7597  001576  968A               	bcf	3978,3,c	;volatile
  7598                           
  7599                           ;DigiPot.c: 72: Delay(1);
  7600  001578  0E01               	movlw	1
  7601  00157A  6E1D               	movwf	Delay@wait,c
  7602  00157C  0E00               	movlw	0
  7603  00157E  6E1E               	movwf	Delay@wait+1,c
  7604  001580  0E00               	movlw	0
  7605  001582  6E1F               	movwf	Delay@wait+2,c
  7606  001584  0E00               	movlw	0
  7607  001586  6E20               	movwf	Delay@wait+3,c
  7608  001588  ECD3  F00E         	call	_Delay	;wreg free
  7609                           
  7610                           ;DigiPot.c: 73: int x;
  7611                           ;DigiPot.c: 74: for (x = 0; x < 32; x++) {
  7612  00158C  0E00               	movlw	0
  7613  00158E  6E27               	movwf	PotClear@x+1,c
  7614  001590  0E00               	movlw	0
  7615  001592  6E26               	movwf	PotClear@x,c
  7616  001594  BE27               	btfsc	PotClear@x+1,7,c
  7617  001596  D006               	goto	l727
  7618  001598  5027               	movf	PotClear@x+1,w,c
  7619  00159A  E121               	bnz	l728
  7620  00159C  0E20               	movlw	32
  7621  00159E  5C26               	subwf	PotClear@x,w,c
  7622  0015A0  B0D8               	btfsc	status,0,c
  7623  0015A2  D01D               	goto	l728
  7624  0015A4                     l727:
  7625                           
  7626                           ;DigiPot.c: 75: LATB4 = 1;
  7627  0015A4  888A               	bsf	3978,4,c	;volatile
  7628                           
  7629                           ;DigiPot.c: 76: Delay(1);
  7630  0015A6  0E01               	movlw	1
  7631  0015A8  6E1D               	movwf	Delay@wait,c
  7632  0015AA  0E00               	movlw	0
  7633  0015AC  6E1E               	movwf	Delay@wait+1,c
  7634  0015AE  0E00               	movlw	0
  7635  0015B0  6E1F               	movwf	Delay@wait+2,c
  7636  0015B2  0E00               	movlw	0
  7637  0015B4  6E20               	movwf	Delay@wait+3,c
  7638  0015B6  ECD3  F00E         	call	_Delay	;wreg free
  7639                           
  7640                           ;DigiPot.c: 77: LATB4 = 0;
  7641  0015BA  988A               	bcf	3978,4,c	;volatile
  7642                           
  7643                           ;DigiPot.c: 78: Delay(1);
  7644  0015BC  0E01               	movlw	1
  7645  0015BE  6E1D               	movwf	Delay@wait,c
  7646  0015C0  0E00               	movlw	0
  7647  0015C2  6E1E               	movwf	Delay@wait+1,c
  7648  0015C4  0E00               	movlw	0
  7649  0015C6  6E1F               	movwf	Delay@wait+2,c
  7650  0015C8  0E00               	movlw	0
  7651  0015CA  6E20               	movwf	Delay@wait+3,c
  7652  0015CC  ECD3  F00E         	call	_Delay	;wreg free
  7653  0015D0  4A26               	infsnz	PotClear@x,f,c
  7654  0015D2  2A27               	incf	PotClear@x+1,f,c
  7655  0015D4  BE27               	btfsc	PotClear@x+1,7,c
  7656  0015D6  D7E6               	goto	l727
  7657  0015D8  5027               	movf	PotClear@x+1,w,c
  7658  0015DA  E101               	bnz	u2950
  7659  0015DC  D7DF               	goto	L1
  7660  0015DE                     u2950:
  7661  0015DE                     l728:
  7662                           
  7663                           ;DigiPot.c: 79: }
  7664                           ;DigiPot.c: 80: LATB4 = 1;
  7665  0015DE  888A               	bsf	3978,4,c	;volatile
  7666                           
  7667                           ;DigiPot.c: 81: Delay(1);
  7668  0015E0  0E01               	movlw	1
  7669  0015E2  6E1D               	movwf	Delay@wait,c
  7670  0015E4  0E00               	movlw	0
  7671  0015E6  6E1E               	movwf	Delay@wait+1,c
  7672  0015E8  0E00               	movlw	0
  7673  0015EA  6E1F               	movwf	Delay@wait+2,c
  7674  0015EC  0E00               	movlw	0
  7675  0015EE  6E20               	movwf	Delay@wait+3,c
  7676  0015F0  ECD3  F00E         	call	_Delay	;wreg free
  7677                           
  7678                           ;DigiPot.c: 83: LATB5 = 1;
  7679  0015F4  8A8A               	bsf	3978,5,c	;volatile
  7680                           
  7681                           ;DigiPot.c: 84: prev_pos = 0;
  7682  0015F6  0E00               	movlw	0
  7683  0015F8  6E37               	movwf	_prev_pos+1,c
  7684  0015FA  0E00               	movlw	0
  7685  0015FC  6E36               	movwf	_prev_pos,c
  7686                           
  7687                           ;DigiPot.c: 85: Delay(1);
  7688  0015FE  0E01               	movlw	1
  7689  001600  6E1D               	movwf	Delay@wait,c
  7690  001602  0E00               	movlw	0
  7691  001604  6E1E               	movwf	Delay@wait+1,c
  7692  001606  0E00               	movlw	0
  7693  001608  6E1F               	movwf	Delay@wait+2,c
  7694  00160A  0E00               	movlw	0
  7695  00160C  6E20               	movwf	Delay@wait+3,c
  7696  00160E  ECD3  F00E         	call	_Delay	;wreg free
  7697  001612  0012               	return		;funcret
  7698  001614                     __end_of_PotClear:
  7699                           	opt stack 0
  7700                           tblptru	equ	0xFF8
  7701                           tblptrh	equ	0xFF7
  7702                           tblptrl	equ	0xFF6
  7703                           tablat	equ	0xFF5
  7704                           prodh	equ	0xFF4
  7705                           prodl	equ	0xFF3
  7706                           intcon	equ	0xFF2
  7707                           intcon2	equ	0xFF1
  7708                           postinc0	equ	0xFEE
  7709                           wreg	equ	0xFE8
  7710                           indf1	equ	0xFE7
  7711                           postdec1	equ	0xFE5
  7712                           fsr1h	equ	0xFE2
  7713                           fsr1l	equ	0xFE1
  7714                           indf2	equ	0xFDF
  7715                           postinc2	equ	0xFDE
  7716                           postdec2	equ	0xFDD
  7717                           plusw2	equ	0xFDB
  7718                           fsr2h	equ	0xFDA
  7719                           fsr2l	equ	0xFD9
  7720                           status	equ	0xFD8
  7721                           
  7722 ;; *************** function _Delay *****************
  7723 ;; Defined at:
  7724 ;;		line 9 in file "Functions.c"
  7725 ;; Parameters:    Size  Location     Type
  7726 ;;  wait            4   28[COMRAM] long 
  7727 ;; Auto vars:     Size  Location     Type
  7728 ;;  i               4   33[COMRAM] long 
  7729 ;; Return value:  Size  Location     Type
  7730 ;;                  1    wreg      void 
  7731 ;; Registers used:
  7732 ;;		wreg, status,2, status,0
  7733 ;; Tracked objects:
  7734 ;;		On entry : 0/0
  7735 ;;		On exit  : 0/0
  7736 ;;		Unchanged: 0/0
  7737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7738 ;;      Params:         4       0       0       0       0       0       0
  7739 ;;      Locals:         4       0       0       0       0       0       0
  7740 ;;      Temps:          1       0       0       0       0       0       0
  7741 ;;      Totals:         9       0       0       0       0       0       0
  7742 ;;Total ram usage:        9 bytes
  7743 ;; Hardware stack levels used:    1
  7744 ;; Hardware stack levels required when called:    6
  7745 ;; This function calls:
  7746 ;;		Nothing
  7747 ;; This function is called by:
  7748 ;;		_StartUp595
  7749 ;;		_writeRegisters
  7750 ;;		_PotSetpoint
  7751 ;;		_PotClear
  7752 ;;		_ComController
  7753 ;; This function uses a non-reentrant model
  7754 ;;
  7755                           
  7756                           	psect	text48
  7757  001DA6                     __ptext48:
  7758                           	opt stack 0
  7759  001DA6                     _Delay:
  7760                           	opt stack 21
  7761                           
  7762                           ;Functions.c: 10: long int i = 0;
  7763                           
  7764                           ;incstack = 0
  7765  001DA6  0E00               	movlw	0
  7766  001DA8  6E22               	movwf	Delay@i,c
  7767  001DAA  0E00               	movlw	0
  7768  001DAC  6E23               	movwf	Delay@i+1,c
  7769  001DAE  0E00               	movlw	0
  7770  001DB0  6E24               	movwf	Delay@i+2,c
  7771  001DB2  0E00               	movlw	0
  7772  001DB4  6E25               	movwf	Delay@i+3,c
  7773                           
  7774                           ;Functions.c: 11: for (; wait > i; i++) {
  7775  001DB6  D00D               	goto	l3732
  7776  001DB8                     l3728:
  7777                           
  7778                           ;Functions.c: 12: _delay((unsigned long)((1)*(8000000/4000.0)));
  7779  001DB8  0E03               	movlw	3
  7780  001DBA  6E21               	movwf	??_Delay& (0+255),c
  7781  001DBC  0E98               	movlw	152
  7782  001DBE                     u3027:
  7783  001DBE  2EE8               	decfsz	wreg,f,c
  7784  001DC0  D7FE               	bra	u3027
  7785  001DC2  2E21               	decfsz	??_Delay& (0+255),f,c
  7786  001DC4  D7FC               	bra	u3027
  7787  001DC6  0E01               	movlw	1
  7788  001DC8  2622               	addwf	Delay@i,f,c
  7789  001DCA  0E00               	movlw	0
  7790  001DCC  2223               	addwfc	Delay@i+1,f,c
  7791  001DCE  2224               	addwfc	Delay@i+2,f,c
  7792  001DD0  2225               	addwfc	Delay@i+3,f,c
  7793  001DD2                     l3732:
  7794  001DD2  501D               	movf	Delay@wait,w,c
  7795  001DD4  5C22               	subwf	Delay@i,w,c
  7796  001DD6  501E               	movf	Delay@wait+1,w,c
  7797  001DD8  5823               	subwfb	Delay@i+1,w,c
  7798  001DDA  501F               	movf	Delay@wait+2,w,c
  7799  001DDC  5824               	subwfb	Delay@i+2,w,c
  7800  001DDE  5025               	movf	Delay@i+3,w,c
  7801  001DE0  0A80               	xorlw	128
  7802  001DE2  6E21               	movwf	??_Delay& (0+255),c
  7803  001DE4  5020               	movf	Delay@wait+3,w,c
  7804  001DE6  0A80               	xorlw	128
  7805  001DE8  5821               	subwfb	??_Delay& (0+255),w,c
  7806  001DEA  B0D8               	btfsc	status,0,c
  7807  001DEC  0012               	return	
  7808  001DEE  D7E4               	goto	l3728
  7809  001DF0                     __end_of_Delay:
  7810                           	opt stack 0
  7811                           tblptru	equ	0xFF8
  7812                           tblptrh	equ	0xFF7
  7813                           tblptrl	equ	0xFF6
  7814                           tablat	equ	0xFF5
  7815                           prodh	equ	0xFF4
  7816                           prodl	equ	0xFF3
  7817                           intcon	equ	0xFF2
  7818                           intcon2	equ	0xFF1
  7819                           postinc0	equ	0xFEE
  7820                           wreg	equ	0xFE8
  7821                           indf1	equ	0xFE7
  7822                           postdec1	equ	0xFE5
  7823                           fsr1h	equ	0xFE2
  7824                           fsr1l	equ	0xFE1
  7825                           indf2	equ	0xFDF
  7826                           postinc2	equ	0xFDE
  7827                           postdec2	equ	0xFDD
  7828                           plusw2	equ	0xFDB
  7829                           fsr2h	equ	0xFDA
  7830                           fsr2l	equ	0xFD9
  7831                           status	equ	0xFD8
  7832                           
  7833 ;; *************** function _PWM4_LoadDutyValue *****************
  7834 ;; Defined at:
  7835 ;;		line 81 in file "mcc_generated_files/pwm4.c"
  7836 ;; Parameters:    Size  Location     Type
  7837 ;;  dutyValue       2   28[COMRAM] unsigned int 
  7838 ;; Auto vars:     Size  Location     Type
  7839 ;;		None
  7840 ;; Return value:  Size  Location     Type
  7841 ;;                  1    wreg      void 
  7842 ;; Registers used:
  7843 ;;		wreg, status,2, status,0
  7844 ;; Tracked objects:
  7845 ;;		On entry : 0/0
  7846 ;;		On exit  : 0/0
  7847 ;;		Unchanged: 0/0
  7848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7849 ;;      Params:         2       0       0       0       0       0       0
  7850 ;;      Locals:         0       0       0       0       0       0       0
  7851 ;;      Temps:          2       0       0       0       0       0       0
  7852 ;;      Totals:         4       0       0       0       0       0       0
  7853 ;;Total ram usage:        4 bytes
  7854 ;; Hardware stack levels used:    1
  7855 ;; Hardware stack levels required when called:    6
  7856 ;; This function calls:
  7857 ;;		Nothing
  7858 ;; This function is called by:
  7859 ;;		_main
  7860 ;;		_CoolingStart
  7861 ;;		_CoolingStop
  7862 ;; This function uses a non-reentrant model
  7863 ;;
  7864                           
  7865                           	psect	text49
  7866  001F56                     __ptext49:
  7867                           	opt stack 0
  7868  001F56                     _PWM4_LoadDutyValue:
  7869                           	opt stack 24
  7870                           
  7871                           ;pwm4.c: 84: CCPR2L = ((dutyValue & 0x03FC)>>2);
  7872                           
  7873                           ;incstack = 0
  7874  001F56  C01D  F01F         	movff	PWM4_LoadDutyValue@dutyValue,??_PWM4_LoadDutyValue
  7875  001F5A  C01E  F020         	movff	PWM4_LoadDutyValue@dutyValue+1,??_PWM4_LoadDutyValue+1
  7876  001F5E  90D8               	bcf	status,0,c
  7877  001F60  3220               	rrcf	??_PWM4_LoadDutyValue+1,f,c
  7878  001F62  321F               	rrcf	??_PWM4_LoadDutyValue,f,c
  7879  001F64  90D8               	bcf	status,0,c
  7880  001F66  3220               	rrcf	??_PWM4_LoadDutyValue+1,f,c
  7881  001F68  321F               	rrcf	??_PWM4_LoadDutyValue,f,c
  7882  001F6A  501F               	movf	??_PWM4_LoadDutyValue,w,c
  7883  001F6C  6E67               	movwf	3943,c	;volatile
  7884                           
  7885                           ;pwm4.c: 87: CCP2CON = (CCP2CON & 0xCF) | ((dutyValue & 0x0003)<<4);
  7886  001F6E  C01D  F01F         	movff	PWM4_LoadDutyValue@dutyValue,??_PWM4_LoadDutyValue
  7887  001F72  0E03               	movlw	3
  7888  001F74  161F               	andwf	??_PWM4_LoadDutyValue,f,c
  7889  001F76  3A1F               	swapf	??_PWM4_LoadDutyValue,f,c
  7890  001F78  0EF0               	movlw	240
  7891  001F7A  161F               	andwf	??_PWM4_LoadDutyValue,f,c
  7892  001F7C  5066               	movf	3942,w,c	;volatile
  7893  001F7E  0BCF               	andlw	207
  7894  001F80  101F               	iorwf	??_PWM4_LoadDutyValue,w,c
  7895  001F82  6E66               	movwf	3942,c	;volatile
  7896  001F84  0012               	return		;funcret
  7897  001F86                     __end_of_PWM4_LoadDutyValue:
  7898                           	opt stack 0
  7899                           tblptru	equ	0xFF8
  7900                           tblptrh	equ	0xFF7
  7901                           tblptrl	equ	0xFF6
  7902                           tablat	equ	0xFF5
  7903                           prodh	equ	0xFF4
  7904                           prodl	equ	0xFF3
  7905                           intcon	equ	0xFF2
  7906                           intcon2	equ	0xFF1
  7907                           postinc0	equ	0xFEE
  7908                           wreg	equ	0xFE8
  7909                           indf1	equ	0xFE7
  7910                           postdec1	equ	0xFE5
  7911                           fsr1h	equ	0xFE2
  7912                           fsr1l	equ	0xFE1
  7913                           indf2	equ	0xFDF
  7914                           postinc2	equ	0xFDE
  7915                           postdec2	equ	0xFDD
  7916                           plusw2	equ	0xFDB
  7917                           fsr2h	equ	0xFDA
  7918                           fsr2l	equ	0xFD9
  7919                           status	equ	0xFD8
  7920                           
  7921 ;; *************** function _CoolingCheck *****************
  7922 ;; Defined at:
  7923 ;;		line 229 in file "PDU.c"
  7924 ;; Parameters:    Size  Location     Type
  7925 ;;		None
  7926 ;; Auto vars:     Size  Location     Type
  7927 ;;		None
  7928 ;; Return value:  Size  Location     Type
  7929 ;;                  1    wreg      unsigned char 
  7930 ;; Registers used:
  7931 ;;		wreg, status,2
  7932 ;; Tracked objects:
  7933 ;;		On entry : 0/0
  7934 ;;		On exit  : 0/0
  7935 ;;		Unchanged: 0/0
  7936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7937 ;;      Params:         0       0       0       0       0       0       0
  7938 ;;      Locals:         0       0       0       0       0       0       0
  7939 ;;      Temps:          0       0       0       0       0       0       0
  7940 ;;      Totals:         0       0       0       0       0       0       0
  7941 ;;Total ram usage:        0 bytes
  7942 ;; Hardware stack levels used:    1
  7943 ;; Hardware stack levels required when called:    6
  7944 ;; This function calls:
  7945 ;;		Nothing
  7946 ;; This function is called by:
  7947 ;;		_main
  7948 ;; This function uses a non-reentrant model
  7949 ;;
  7950                           
  7951                           	psect	text50
  7952  002240                     __ptext50:
  7953                           	opt stack 0
  7954  002240                     _CoolingCheck:
  7955                           	opt stack 24
  7956                           
  7957                           ;PDU.c: 230: return MCSOn;
  7958                           
  7959                           ;incstack = 0
  7960  002240  503A               	movf	_MCSOn,w,c
  7961  002242  0012               	return	
  7962  002244                     __end_of_CoolingCheck:
  7963                           	opt stack 0
  7964                           tblptru	equ	0xFF8
  7965                           tblptrh	equ	0xFF7
  7966                           tblptrl	equ	0xFF6
  7967                           tablat	equ	0xFF5
  7968                           prodh	equ	0xFF4
  7969                           prodl	equ	0xFF3
  7970                           intcon	equ	0xFF2
  7971                           intcon2	equ	0xFF1
  7972                           postinc0	equ	0xFEE
  7973                           wreg	equ	0xFE8
  7974                           indf1	equ	0xFE7
  7975                           postdec1	equ	0xFE5
  7976                           fsr1h	equ	0xFE2
  7977                           fsr1l	equ	0xFE1
  7978                           indf2	equ	0xFDF
  7979                           postinc2	equ	0xFDE
  7980                           postdec2	equ	0xFDD
  7981                           plusw2	equ	0xFDB
  7982                           fsr2h	equ	0xFDA
  7983                           fsr2l	equ	0xFD9
  7984                           status	equ	0xFD8
  7985                           
  7986 ;; *************** function _INTERRUPT_InterruptManager *****************
  7987 ;; Defined at:
  7988 ;;		line 67 in file "mcc_generated_files/interrupt_manager.c"
  7989 ;; Parameters:    Size  Location     Type
  7990 ;;		None
  7991 ;; Auto vars:     Size  Location     Type
  7992 ;;		None
  7993 ;; Return value:  Size  Location     Type
  7994 ;;                  1    wreg      void 
  7995 ;; Registers used:
  7996 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7997 ;; Tracked objects:
  7998 ;;		On entry : 0/0
  7999 ;;		On exit  : 0/0
  8000 ;;		Unchanged: 0/0
  8001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8002 ;;      Params:         0       0       0       0       0       0       0
  8003 ;;      Locals:         0       0       0       0       0       0       0
  8004 ;;      Temps:         14       0       0       0       0       0       0
  8005 ;;      Totals:        14       0       0       0       0       0       0
  8006 ;;Total ram usage:       14 bytes
  8007 ;; Hardware stack levels used:    1
  8008 ;; Hardware stack levels required when called:    5
  8009 ;; This function calls:
  8010 ;;		_ADC_ISR
  8011 ;;		_EUSART1_Receive_ISR
  8012 ;;		_EUSART1_Transmit_ISR
  8013 ;;		_TMR1_ISR
  8014 ;; This function is called by:
  8015 ;;		Interrupt level 2
  8016 ;; This function uses a non-reentrant model
  8017 ;;
  8018                           
  8019                           	psect	intcode
  8020  000008                     __pintcode:
  8021                           	opt stack 0
  8022  000008                     _INTERRUPT_InterruptManager:
  8023                           	opt stack 18
  8024                           
  8025                           ;incstack = 0
  8026  000008  8242               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8027  00000A  CFFA F00F          	movff	pclath,??_INTERRUPT_InterruptManager
  8028  00000E  CFFB F010          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  8029  000012  CFE9 F011          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  8030  000016  CFEA F012          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  8031  00001A  CFE1 F013          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  8032  00001E  CFE2 F014          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  8033  000022  CFD9 F015          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  8034  000026  CFDA F016          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  8035  00002A  CFF3 F017          	movff	prodl,??_INTERRUPT_InterruptManager+8
  8036  00002E  CFF4 F018          	movff	prodh,??_INTERRUPT_InterruptManager+9
  8037  000032  CFF6 F019          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  8038  000036  CFF7 F01A          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  8039  00003A  CFF8 F01B          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  8040  00003E  CFF5 F01C          	movff	tablat,??_INTERRUPT_InterruptManager+13
  8041                           
  8042                           ;interrupt_manager.c: 70: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  8043  000042  BA9D               	btfsc	3997,5,c	;volatile
  8044  000044  AA9E               	btfss	3998,5,c	;volatile
  8045  000046  D003               	goto	i2l67
  8046                           
  8047                           ;interrupt_manager.c: 71: {
  8048                           ;interrupt_manager.c: 72: EUSART1_Receive_ISR();
  8049  000048  EC86  F010         	call	_EUSART1_Receive_ISR	;wreg free
  8050                           
  8051                           ;interrupt_manager.c: 73: }
  8052  00004C  D011               	goto	i2l75
  8053  00004E                     i2l67:
  8054                           
  8055                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  8056  00004E  B89D               	btfsc	3997,4,c	;volatile
  8057  000050  A89E               	btfss	3998,4,c	;volatile
  8058  000052  D003               	goto	i2l69
  8059                           
  8060                           ;interrupt_manager.c: 75: {
  8061                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
  8062  000054  EC92  F00F         	call	_EUSART1_Transmit_ISR	;wreg free
  8063                           
  8064                           ;interrupt_manager.c: 77: }
  8065  000058  D00B               	goto	i2l75
  8066  00005A                     i2l69:
  8067                           
  8068                           ;interrupt_manager.c: 78: else if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
  8069  00005A  BC9D               	btfsc	3997,6,c	;volatile
  8070  00005C  AC9E               	btfss	3998,6,c	;volatile
  8071  00005E  D003               	goto	i2l71
  8072                           
  8073                           ;interrupt_manager.c: 79: {
  8074                           ;interrupt_manager.c: 80: ADC_ISR();
  8075  000060  EC22  F011         	call	_ADC_ISR	;wreg free
  8076                           
  8077                           ;interrupt_manager.c: 81: }
  8078  000064  D005               	goto	i2l75
  8079  000066                     i2l71:
  8080                           
  8081                           ;interrupt_manager.c: 82: else if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
  8082  000066  B09D               	btfsc	3997,0,c	;volatile
  8083  000068  A09E               	btfss	3998,0,c	;volatile
  8084  00006A  D002               	goto	i2l75
  8085                           
  8086                           ;interrupt_manager.c: 83: {
  8087                           ;interrupt_manager.c: 84: TMR1_ISR();
  8088  00006C  EC79  F00F         	call	_TMR1_ISR	;wreg free
  8089  000070                     i2l75:
  8090  000070  C01C  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  8091  000074  C01B  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  8092  000078  C01A  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  8093  00007C  C019  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  8094  000080  C018  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  8095  000084  C017  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  8096  000088  C016  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  8097  00008C  C015  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  8098  000090  C014  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  8099  000094  C013  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  8100  000098  C012  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  8101  00009C  C011  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  8102  0000A0  C010  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  8103  0000A4  C00F  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  8104  0000A8  9242               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8105  0000AA  0011               	retfie		f
  8106  0000AC                     __end_of_INTERRUPT_InterruptManager:
  8107                           	opt stack 0
  8108                           pclatu	equ	0xFFB
  8109                           pclath	equ	0xFFA
  8110                           tblptru	equ	0xFF8
  8111                           tblptrh	equ	0xFF7
  8112                           tblptrl	equ	0xFF6
  8113                           tablat	equ	0xFF5
  8114                           prodh	equ	0xFF4
  8115                           prodl	equ	0xFF3
  8116                           intcon	equ	0xFF2
  8117                           intcon2	equ	0xFF1
  8118                           postinc0	equ	0xFEE
  8119                           fsr0h	equ	0xFEA
  8120                           fsr0l	equ	0xFE9
  8121                           wreg	equ	0xFE8
  8122                           indf1	equ	0xFE7
  8123                           postdec1	equ	0xFE5
  8124                           fsr1h	equ	0xFE2
  8125                           fsr1l	equ	0xFE1
  8126                           indf2	equ	0xFDF
  8127                           postinc2	equ	0xFDE
  8128                           postdec2	equ	0xFDD
  8129                           plusw2	equ	0xFDB
  8130                           fsr2h	equ	0xFDA
  8131                           fsr2l	equ	0xFD9
  8132                           status	equ	0xFD8
  8133                           
  8134 ;; *************** function _TMR1_ISR *****************
  8135 ;; Defined at:
  8136 ;;		line 161 in file "mcc_generated_files/tmr1.c"
  8137 ;; Parameters:    Size  Location     Type
  8138 ;;		None
  8139 ;; Auto vars:     Size  Location     Type
  8140 ;;		None
  8141 ;; Return value:  Size  Location     Type
  8142 ;;                  1    wreg      void 
  8143 ;; Registers used:
  8144 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8145 ;; Tracked objects:
  8146 ;;		On entry : 0/0
  8147 ;;		On exit  : 0/0
  8148 ;;		Unchanged: 0/0
  8149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8150 ;;      Params:         0       0       0       0       0       0       0
  8151 ;;      Locals:         0       0       0       0       0       0       0
  8152 ;;      Temps:          0       0       0       0       0       0       0
  8153 ;;      Totals:         0       0       0       0       0       0       0
  8154 ;;Total ram usage:        0 bytes
  8155 ;; Hardware stack levels used:    1
  8156 ;; Hardware stack levels required when called:    4
  8157 ;; This function calls:
  8158 ;;		_FuseSystem
  8159 ;;		_ReadCurrent
  8160 ;; This function is called by:
  8161 ;;		_INTERRUPT_InterruptManager
  8162 ;; This function uses a non-reentrant model
  8163 ;;
  8164                           
  8165                           	psect	text52
  8166  001EF2                     __ptext52:
  8167                           	opt stack 0
  8168  001EF2                     _TMR1_ISR:
  8169                           	opt stack 18
  8170                           
  8171                           ;tmr1.c: 165: PIR1bits.TMR1IF = 0;
  8172                           
  8173                           ;incstack = 0
  8174  001EF2  909E               	bcf	3998,0,c	;volatile
  8175                           
  8176                           ;tmr1.c: 168: TMR1H = (timer1ReloadVal >> 8);
  8177  001EF4  5039               	movf	_timer1ReloadVal+1,w,c	;volatile
  8178  001EF6  6ECF               	movwf	4047,c	;volatile
  8179                           
  8180                           ;tmr1.c: 169: TMR1L = (uint8_t) timer1ReloadVal;
  8181  001EF8  C038  FFCE         	movff	_timer1ReloadVal,4046	;volatile
  8182                           
  8183                           ;tmr1.c: 170: readwhat++;
  8184  001EFC  4A3F               	infsnz	_readwhat,f,c
  8185  001EFE  2A40               	incf	_readwhat+1,f,c
  8186                           
  8187                           ;tmr1.c: 171: if(readwhat > 7)
  8188  001F00  BE40               	btfsc	_readwhat+1,7,c
  8189  001F02  D00C               	goto	i2l3584
  8190  001F04  5040               	movf	_readwhat+1,w,c
  8191  001F06  E104               	bnz	i2u211_40
  8192  001F08  0E08               	movlw	8
  8193  001F0A  5C3F               	subwf	_readwhat,w,c
  8194  001F0C  A0D8               	btfss	status,0,c
  8195  001F0E  D006               	goto	i2l3584
  8196  001F10                     i2u211_40:
  8197                           
  8198                           ;tmr1.c: 172: {
  8199                           ;tmr1.c: 173: readwhat = 1;
  8200  001F10  0E00               	movlw	0
  8201  001F12  6E40               	movwf	_readwhat+1,c
  8202  001F14  0E01               	movlw	1
  8203  001F16  6E3F               	movwf	_readwhat,c
  8204                           
  8205                           ;tmr1.c: 174: FuseSystem();
  8206  001F18  ECF4  F00C         	call	_FuseSystem	;wreg free
  8207  001F1C                     i2l3584:
  8208                           
  8209                           ;tmr1.c: 175: }
  8210                           ;tmr1.c: 176: ReadCurrent(readwhat);
  8211  001F1C  503F               	movf	_readwhat,w,c
  8212  001F1E  EC58  F000         	call	_ReadCurrent
  8213  001F22  0012               	return		;funcret
  8214  001F24                     __end_of_TMR1_ISR:
  8215                           	opt stack 0
  8216                           pclatu	equ	0xFFB
  8217                           pclath	equ	0xFFA
  8218                           tblptru	equ	0xFF8
  8219                           tblptrh	equ	0xFF7
  8220                           tblptrl	equ	0xFF6
  8221                           tablat	equ	0xFF5
  8222                           prodh	equ	0xFF4
  8223                           prodl	equ	0xFF3
  8224                           intcon	equ	0xFF2
  8225                           intcon2	equ	0xFF1
  8226                           postinc0	equ	0xFEE
  8227                           fsr0h	equ	0xFEA
  8228                           fsr0l	equ	0xFE9
  8229                           wreg	equ	0xFE8
  8230                           indf1	equ	0xFE7
  8231                           postdec1	equ	0xFE5
  8232                           fsr1h	equ	0xFE2
  8233                           fsr1l	equ	0xFE1
  8234                           indf2	equ	0xFDF
  8235                           postinc2	equ	0xFDE
  8236                           postdec2	equ	0xFDD
  8237                           plusw2	equ	0xFDB
  8238                           fsr2h	equ	0xFDA
  8239                           fsr2l	equ	0xFD9
  8240                           status	equ	0xFD8
  8241                           
  8242 ;; *************** function _ReadCurrent *****************
  8243 ;; Defined at:
  8244 ;;		line 63 in file "PDU.c"
  8245 ;; Parameters:    Size  Location     Type
  8246 ;;  gather          1    wreg     unsigned char 
  8247 ;; Auto vars:     Size  Location     Type
  8248 ;;  gather          1   13[COMRAM] unsigned char 
  8249 ;; Return value:  Size  Location     Type
  8250 ;;                  1    wreg      void 
  8251 ;; Registers used:
  8252 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8253 ;; Tracked objects:
  8254 ;;		On entry : 0/0
  8255 ;;		On exit  : 0/0
  8256 ;;		Unchanged: 0/0
  8257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8258 ;;      Params:         0       0       0       0       0       0       0
  8259 ;;      Locals:         1       0       0       0       0       0       0
  8260 ;;      Temps:          0       0       0       0       0       0       0
  8261 ;;      Totals:         1       0       0       0       0       0       0
  8262 ;;Total ram usage:        1 bytes
  8263 ;; Hardware stack levels used:    1
  8264 ;; Hardware stack levels required when called:    3
  8265 ;; This function calls:
  8266 ;;		_ADC_GetConversion
  8267 ;;		i2_SetPin595
  8268 ;;		i2_Update
  8269 ;; This function is called by:
  8270 ;;		_TMR1_ISR
  8271 ;; This function uses a non-reentrant model
  8272 ;;
  8273                           
  8274                           	psect	text53
  8275  0000B0                     __ptext53:
  8276                           	opt stack 0
  8277  0000B0                     _ReadCurrent:
  8278                           	opt stack 18
  8279                           
  8280                           ;incstack = 0
  8281                           ;ReadCurrent@gather stored from wreg
  8282  0000B0  6E0E               	movwf	ReadCurrent@gather,c
  8283                           
  8284                           ;PDU.c: 64: if (gather == 1) {
  8285  0000B2  040E               	decf	ReadCurrent@gather,w,c
  8286  0000B4  A4D8               	btfss	status,2,c
  8287  0000B6  D088               	goto	i2l3340
  8288                           
  8289                           ;PDU.c: 66: SetPin595(1, 4, ON);
  8290  0000B8  0E00               	movlw	0
  8291  0000BA  6E02               	movwf	i2SetPin595@Reg+1,c
  8292  0000BC  0E01               	movlw	1
  8293  0000BE  6E01               	movwf	i2SetPin595@Reg,c
  8294  0000C0  0E00               	movlw	0
  8295  0000C2  6E04               	movwf	i2SetPin595@pin+1,c
  8296  0000C4  0E04               	movlw	4
  8297  0000C6  6E03               	movwf	i2SetPin595@pin,c
  8298  0000C8  0E00               	movlw	0
  8299  0000CA  6E06               	movwf	i2SetPin595@value+1,c
  8300  0000CC  0E01               	movlw	1
  8301  0000CE  6E05               	movwf	i2SetPin595@value,c
  8302  0000D0  EC87  F00E         	call	i2_SetPin595	;wreg free
  8303                           
  8304                           ;PDU.c: 67: SetPin595(1, 3, OFF);
  8305  0000D4  0E00               	movlw	0
  8306  0000D6  6E02               	movwf	i2SetPin595@Reg+1,c
  8307  0000D8  0E01               	movlw	1
  8308  0000DA  6E01               	movwf	i2SetPin595@Reg,c
  8309  0000DC  0E00               	movlw	0
  8310  0000DE  6E04               	movwf	i2SetPin595@pin+1,c
  8311  0000E0  0E03               	movlw	3
  8312  0000E2  6E03               	movwf	i2SetPin595@pin,c
  8313  0000E4  0E00               	movlw	0
  8314  0000E6  6E06               	movwf	i2SetPin595@value+1,c
  8315  0000E8  0E00               	movlw	0
  8316  0000EA  6E05               	movwf	i2SetPin595@value,c
  8317  0000EC  EC87  F00E         	call	i2_SetPin595	;wreg free
  8318                           
  8319                           ;PDU.c: 68: SetPin595(1, 2, OFF);
  8320  0000F0  0E00               	movlw	0
  8321  0000F2  6E02               	movwf	i2SetPin595@Reg+1,c
  8322  0000F4  0E01               	movlw	1
  8323  0000F6  6E01               	movwf	i2SetPin595@Reg,c
  8324  0000F8  0E00               	movlw	0
  8325  0000FA  6E04               	movwf	i2SetPin595@pin+1,c
  8326  0000FC  0E02               	movlw	2
  8327  0000FE  6E03               	movwf	i2SetPin595@pin,c
  8328  000100  0E00               	movlw	0
  8329  000102  6E06               	movwf	i2SetPin595@value+1,c
  8330  000104  0E00               	movlw	0
  8331  000106  6E05               	movwf	i2SetPin595@value,c
  8332  000108  EC87  F00E         	call	i2_SetPin595	;wreg free
  8333                           
  8334                           ;PDU.c: 69: SetPin595(2, 4, OFF);
  8335  00010C  0E00               	movlw	0
  8336  00010E  6E02               	movwf	i2SetPin595@Reg+1,c
  8337  000110  0E02               	movlw	2
  8338  000112  6E01               	movwf	i2SetPin595@Reg,c
  8339  000114  0E00               	movlw	0
  8340  000116  6E04               	movwf	i2SetPin595@pin+1,c
  8341  000118  0E04               	movlw	4
  8342  00011A  6E03               	movwf	i2SetPin595@pin,c
  8343  00011C  0E00               	movlw	0
  8344  00011E  6E06               	movwf	i2SetPin595@value+1,c
  8345  000120  0E00               	movlw	0
  8346  000122  6E05               	movwf	i2SetPin595@value,c
  8347  000124  EC87  F00E         	call	i2_SetPin595	;wreg free
  8348                           
  8349                           ;PDU.c: 70: SetPin595(2, 3, OFF);
  8350  000128  0E00               	movlw	0
  8351  00012A  6E02               	movwf	i2SetPin595@Reg+1,c
  8352  00012C  0E02               	movlw	2
  8353  00012E  6E01               	movwf	i2SetPin595@Reg,c
  8354  000130  0E00               	movlw	0
  8355  000132  6E04               	movwf	i2SetPin595@pin+1,c
  8356  000134  0E03               	movlw	3
  8357  000136  6E03               	movwf	i2SetPin595@pin,c
  8358  000138  0E00               	movlw	0
  8359  00013A  6E06               	movwf	i2SetPin595@value+1,c
  8360  00013C  0E00               	movlw	0
  8361  00013E  6E05               	movwf	i2SetPin595@value,c
  8362  000140  EC87  F00E         	call	i2_SetPin595	;wreg free
  8363                           
  8364                           ;PDU.c: 71: SetPin595(2, 2, OFF);
  8365  000144  0E00               	movlw	0
  8366  000146  6E02               	movwf	i2SetPin595@Reg+1,c
  8367  000148  0E02               	movlw	2
  8368  00014A  6E01               	movwf	i2SetPin595@Reg,c
  8369  00014C  0E00               	movlw	0
  8370  00014E  6E04               	movwf	i2SetPin595@pin+1,c
  8371  000150  0E02               	movlw	2
  8372  000152  6E03               	movwf	i2SetPin595@pin,c
  8373  000154  0E00               	movlw	0
  8374  000156  6E06               	movwf	i2SetPin595@value+1,c
  8375  000158  0E00               	movlw	0
  8376  00015A  6E05               	movwf	i2SetPin595@value,c
  8377  00015C  EC87  F00E         	call	i2_SetPin595	;wreg free
  8378                           
  8379                           ;PDU.c: 72: SetPin595(3, 4, OFF);
  8380  000160  0E00               	movlw	0
  8381  000162  6E02               	movwf	i2SetPin595@Reg+1,c
  8382  000164  0E03               	movlw	3
  8383  000166  6E01               	movwf	i2SetPin595@Reg,c
  8384  000168  0E00               	movlw	0
  8385  00016A  6E04               	movwf	i2SetPin595@pin+1,c
  8386  00016C  0E04               	movlw	4
  8387  00016E  6E03               	movwf	i2SetPin595@pin,c
  8388  000170  0E00               	movlw	0
  8389  000172  6E06               	movwf	i2SetPin595@value+1,c
  8390  000174  0E00               	movlw	0
  8391  000176  6E05               	movwf	i2SetPin595@value,c
  8392  000178  EC87  F00E         	call	i2_SetPin595	;wreg free
  8393                           
  8394                           ;PDU.c: 73: SetPin595(3, 3, OFF);
  8395  00017C  0E00               	movlw	0
  8396  00017E  6E02               	movwf	i2SetPin595@Reg+1,c
  8397  000180  0E03               	movlw	3
  8398  000182  6E01               	movwf	i2SetPin595@Reg,c
  8399  000184  0E00               	movlw	0
  8400  000186  6E04               	movwf	i2SetPin595@pin+1,c
  8401  000188  0E03               	movlw	3
  8402  00018A  6E03               	movwf	i2SetPin595@pin,c
  8403  00018C  0E00               	movlw	0
  8404  00018E  6E06               	movwf	i2SetPin595@value+1,c
  8405  000190  0E00               	movlw	0
  8406  000192  6E05               	movwf	i2SetPin595@value,c
  8407  000194  EC87  F00E         	call	i2_SetPin595	;wreg free
  8408                           
  8409                           ;PDU.c: 74: SetPin595(3, 2, OFF);
  8410  000198  0E00               	movlw	0
  8411  00019A  6E02               	movwf	i2SetPin595@Reg+1,c
  8412  00019C  0E03               	movlw	3
  8413  00019E  6E01               	movwf	i2SetPin595@Reg,c
  8414  0001A0  0E00               	movlw	0
  8415  0001A2  6E04               	movwf	i2SetPin595@pin+1,c
  8416  0001A4  0E02               	movlw	2
  8417  0001A6  6E03               	movwf	i2SetPin595@pin,c
  8418  0001A8  0E00               	movlw	0
  8419  0001AA  6E06               	movwf	i2SetPin595@value+1,c
  8420  0001AC  0E00               	movlw	0
  8421  0001AE  6E05               	movwf	i2SetPin595@value,c
  8422  0001B0  EC87  F00E         	call	i2_SetPin595	;wreg free
  8423                           
  8424                           ;PDU.c: 75: Update();
  8425  0001B4  EC19  F011         	call	i2_Update	;wreg free
  8426                           
  8427                           ;PDU.c: 76: CurrentADC[5] = ADC_GetConversion(U10Multisense);
  8428  0001B8  0E17               	movlw	23
  8429  0001BA  ECC3  F00F         	call	_ADC_GetConversion
  8430  0001BE  C001  F0D1         	movff	?_ADC_GetConversion,_CurrentADC+10
  8431  0001C2  C002  F0D2         	movff	?_ADC_GetConversion+1,_CurrentADC+11
  8432                           
  8433                           ;PDU.c: 78: }
  8434  0001C6  0012               	return	
  8435  0001C8                     i2l3340:
  8436                           
  8437                           ;PDU.c: 79: else if(gather == 2){
  8438  0001C8  0E02               	movlw	2
  8439  0001CA  180E               	xorwf	ReadCurrent@gather,w,c
  8440  0001CC  A4D8               	btfss	status,2,c
  8441  0001CE  D088               	goto	i2l3346
  8442                           
  8443                           ;PDU.c: 81: SetPin595(1, 4, OFF);
  8444  0001D0  0E00               	movlw	0
  8445  0001D2  6E02               	movwf	i2SetPin595@Reg+1,c
  8446  0001D4  0E01               	movlw	1
  8447  0001D6  6E01               	movwf	i2SetPin595@Reg,c
  8448  0001D8  0E00               	movlw	0
  8449  0001DA  6E04               	movwf	i2SetPin595@pin+1,c
  8450  0001DC  0E04               	movlw	4
  8451  0001DE  6E03               	movwf	i2SetPin595@pin,c
  8452  0001E0  0E00               	movlw	0
  8453  0001E2  6E06               	movwf	i2SetPin595@value+1,c
  8454  0001E4  0E00               	movlw	0
  8455  0001E6  6E05               	movwf	i2SetPin595@value,c
  8456  0001E8  EC87  F00E         	call	i2_SetPin595	;wreg free
  8457                           
  8458                           ;PDU.c: 82: SetPin595(1, 3, OFF);
  8459  0001EC  0E00               	movlw	0
  8460  0001EE  6E02               	movwf	i2SetPin595@Reg+1,c
  8461  0001F0  0E01               	movlw	1
  8462  0001F2  6E01               	movwf	i2SetPin595@Reg,c
  8463  0001F4  0E00               	movlw	0
  8464  0001F6  6E04               	movwf	i2SetPin595@pin+1,c
  8465  0001F8  0E03               	movlw	3
  8466  0001FA  6E03               	movwf	i2SetPin595@pin,c
  8467  0001FC  0E00               	movlw	0
  8468  0001FE  6E06               	movwf	i2SetPin595@value+1,c
  8469  000200  0E00               	movlw	0
  8470  000202  6E05               	movwf	i2SetPin595@value,c
  8471  000204  EC87  F00E         	call	i2_SetPin595	;wreg free
  8472                           
  8473                           ;PDU.c: 83: SetPin595(1, 2, OFF);
  8474  000208  0E00               	movlw	0
  8475  00020A  6E02               	movwf	i2SetPin595@Reg+1,c
  8476  00020C  0E01               	movlw	1
  8477  00020E  6E01               	movwf	i2SetPin595@Reg,c
  8478  000210  0E00               	movlw	0
  8479  000212  6E04               	movwf	i2SetPin595@pin+1,c
  8480  000214  0E02               	movlw	2
  8481  000216  6E03               	movwf	i2SetPin595@pin,c
  8482  000218  0E00               	movlw	0
  8483  00021A  6E06               	movwf	i2SetPin595@value+1,c
  8484  00021C  0E00               	movlw	0
  8485  00021E  6E05               	movwf	i2SetPin595@value,c
  8486  000220  EC87  F00E         	call	i2_SetPin595	;wreg free
  8487                           
  8488                           ;PDU.c: 84: SetPin595(2, 4, ON);
  8489  000224  0E00               	movlw	0
  8490  000226  6E02               	movwf	i2SetPin595@Reg+1,c
  8491  000228  0E02               	movlw	2
  8492  00022A  6E01               	movwf	i2SetPin595@Reg,c
  8493  00022C  0E00               	movlw	0
  8494  00022E  6E04               	movwf	i2SetPin595@pin+1,c
  8495  000230  0E04               	movlw	4
  8496  000232  6E03               	movwf	i2SetPin595@pin,c
  8497  000234  0E00               	movlw	0
  8498  000236  6E06               	movwf	i2SetPin595@value+1,c
  8499  000238  0E01               	movlw	1
  8500  00023A  6E05               	movwf	i2SetPin595@value,c
  8501  00023C  EC87  F00E         	call	i2_SetPin595	;wreg free
  8502                           
  8503                           ;PDU.c: 85: SetPin595(2, 3, ON);
  8504  000240  0E00               	movlw	0
  8505  000242  6E02               	movwf	i2SetPin595@Reg+1,c
  8506  000244  0E02               	movlw	2
  8507  000246  6E01               	movwf	i2SetPin595@Reg,c
  8508  000248  0E00               	movlw	0
  8509  00024A  6E04               	movwf	i2SetPin595@pin+1,c
  8510  00024C  0E03               	movlw	3
  8511  00024E  6E03               	movwf	i2SetPin595@pin,c
  8512  000250  0E00               	movlw	0
  8513  000252  6E06               	movwf	i2SetPin595@value+1,c
  8514  000254  0E01               	movlw	1
  8515  000256  6E05               	movwf	i2SetPin595@value,c
  8516  000258  EC87  F00E         	call	i2_SetPin595	;wreg free
  8517                           
  8518                           ;PDU.c: 86: SetPin595(2, 2, OFF);
  8519  00025C  0E00               	movlw	0
  8520  00025E  6E02               	movwf	i2SetPin595@Reg+1,c
  8521  000260  0E02               	movlw	2
  8522  000262  6E01               	movwf	i2SetPin595@Reg,c
  8523  000264  0E00               	movlw	0
  8524  000266  6E04               	movwf	i2SetPin595@pin+1,c
  8525  000268  0E02               	movlw	2
  8526  00026A  6E03               	movwf	i2SetPin595@pin,c
  8527  00026C  0E00               	movlw	0
  8528  00026E  6E06               	movwf	i2SetPin595@value+1,c
  8529  000270  0E00               	movlw	0
  8530  000272  6E05               	movwf	i2SetPin595@value,c
  8531  000274  EC87  F00E         	call	i2_SetPin595	;wreg free
  8532                           
  8533                           ;PDU.c: 87: SetPin595(3, 4, OFF);
  8534  000278  0E00               	movlw	0
  8535  00027A  6E02               	movwf	i2SetPin595@Reg+1,c
  8536  00027C  0E03               	movlw	3
  8537  00027E  6E01               	movwf	i2SetPin595@Reg,c
  8538  000280  0E00               	movlw	0
  8539  000282  6E04               	movwf	i2SetPin595@pin+1,c
  8540  000284  0E04               	movlw	4
  8541  000286  6E03               	movwf	i2SetPin595@pin,c
  8542  000288  0E00               	movlw	0
  8543  00028A  6E06               	movwf	i2SetPin595@value+1,c
  8544  00028C  0E00               	movlw	0
  8545  00028E  6E05               	movwf	i2SetPin595@value,c
  8546  000290  EC87  F00E         	call	i2_SetPin595	;wreg free
  8547                           
  8548                           ;PDU.c: 88: SetPin595(3, 3, OFF);
  8549  000294  0E00               	movlw	0
  8550  000296  6E02               	movwf	i2SetPin595@Reg+1,c
  8551  000298  0E03               	movlw	3
  8552  00029A  6E01               	movwf	i2SetPin595@Reg,c
  8553  00029C  0E00               	movlw	0
  8554  00029E  6E04               	movwf	i2SetPin595@pin+1,c
  8555  0002A0  0E03               	movlw	3
  8556  0002A2  6E03               	movwf	i2SetPin595@pin,c
  8557  0002A4  0E00               	movlw	0
  8558  0002A6  6E06               	movwf	i2SetPin595@value+1,c
  8559  0002A8  0E00               	movlw	0
  8560  0002AA  6E05               	movwf	i2SetPin595@value,c
  8561  0002AC  EC87  F00E         	call	i2_SetPin595	;wreg free
  8562                           
  8563                           ;PDU.c: 89: SetPin595(3, 2, OFF);
  8564  0002B0  0E00               	movlw	0
  8565  0002B2  6E02               	movwf	i2SetPin595@Reg+1,c
  8566  0002B4  0E03               	movlw	3
  8567  0002B6  6E01               	movwf	i2SetPin595@Reg,c
  8568  0002B8  0E00               	movlw	0
  8569  0002BA  6E04               	movwf	i2SetPin595@pin+1,c
  8570  0002BC  0E02               	movlw	2
  8571  0002BE  6E03               	movwf	i2SetPin595@pin,c
  8572  0002C0  0E00               	movlw	0
  8573  0002C2  6E06               	movwf	i2SetPin595@value+1,c
  8574  0002C4  0E00               	movlw	0
  8575  0002C6  6E05               	movwf	i2SetPin595@value,c
  8576  0002C8  EC87  F00E         	call	i2_SetPin595	;wreg free
  8577                           
  8578                           ;PDU.c: 90: Update();
  8579  0002CC  EC19  F011         	call	i2_Update	;wreg free
  8580                           
  8581                           ;PDU.c: 91: CurrentADC[2] = ADC_GetConversion(U8Multisense);
  8582  0002D0  0E16               	movlw	22
  8583  0002D2  ECC3  F00F         	call	_ADC_GetConversion
  8584  0002D6  C001  F0CB         	movff	?_ADC_GetConversion,_CurrentADC+4
  8585  0002DA  C002  F0CC         	movff	?_ADC_GetConversion+1,_CurrentADC+5
  8586                           
  8587                           ;PDU.c: 93: }
  8588  0002DE  0012               	return	
  8589  0002E0                     i2l3346:
  8590                           
  8591                           ;PDU.c: 94: else if(gather == 3){
  8592  0002E0  0E03               	movlw	3
  8593  0002E2  180E               	xorwf	ReadCurrent@gather,w,c
  8594  0002E4  A4D8               	btfss	status,2,c
  8595  0002E6  D088               	goto	i2l3352
  8596                           
  8597                           ;PDU.c: 96: SetPin595(1, 4, OFF);
  8598  0002E8  0E00               	movlw	0
  8599  0002EA  6E02               	movwf	i2SetPin595@Reg+1,c
  8600  0002EC  0E01               	movlw	1
  8601  0002EE  6E01               	movwf	i2SetPin595@Reg,c
  8602  0002F0  0E00               	movlw	0
  8603  0002F2  6E04               	movwf	i2SetPin595@pin+1,c
  8604  0002F4  0E04               	movlw	4
  8605  0002F6  6E03               	movwf	i2SetPin595@pin,c
  8606  0002F8  0E00               	movlw	0
  8607  0002FA  6E06               	movwf	i2SetPin595@value+1,c
  8608  0002FC  0E00               	movlw	0
  8609  0002FE  6E05               	movwf	i2SetPin595@value,c
  8610  000300  EC87  F00E         	call	i2_SetPin595	;wreg free
  8611                           
  8612                           ;PDU.c: 97: SetPin595(1, 3, OFF);
  8613  000304  0E00               	movlw	0
  8614  000306  6E02               	movwf	i2SetPin595@Reg+1,c
  8615  000308  0E01               	movlw	1
  8616  00030A  6E01               	movwf	i2SetPin595@Reg,c
  8617  00030C  0E00               	movlw	0
  8618  00030E  6E04               	movwf	i2SetPin595@pin+1,c
  8619  000310  0E03               	movlw	3
  8620  000312  6E03               	movwf	i2SetPin595@pin,c
  8621  000314  0E00               	movlw	0
  8622  000316  6E06               	movwf	i2SetPin595@value+1,c
  8623  000318  0E00               	movlw	0
  8624  00031A  6E05               	movwf	i2SetPin595@value,c
  8625  00031C  EC87  F00E         	call	i2_SetPin595	;wreg free
  8626                           
  8627                           ;PDU.c: 98: SetPin595(1, 2, OFF);
  8628  000320  0E00               	movlw	0
  8629  000322  6E02               	movwf	i2SetPin595@Reg+1,c
  8630  000324  0E01               	movlw	1
  8631  000326  6E01               	movwf	i2SetPin595@Reg,c
  8632  000328  0E00               	movlw	0
  8633  00032A  6E04               	movwf	i2SetPin595@pin+1,c
  8634  00032C  0E02               	movlw	2
  8635  00032E  6E03               	movwf	i2SetPin595@pin,c
  8636  000330  0E00               	movlw	0
  8637  000332  6E06               	movwf	i2SetPin595@value+1,c
  8638  000334  0E00               	movlw	0
  8639  000336  6E05               	movwf	i2SetPin595@value,c
  8640  000338  EC87  F00E         	call	i2_SetPin595	;wreg free
  8641                           
  8642                           ;PDU.c: 99: SetPin595(2, 4, OFF);
  8643  00033C  0E00               	movlw	0
  8644  00033E  6E02               	movwf	i2SetPin595@Reg+1,c
  8645  000340  0E02               	movlw	2
  8646  000342  6E01               	movwf	i2SetPin595@Reg,c
  8647  000344  0E00               	movlw	0
  8648  000346  6E04               	movwf	i2SetPin595@pin+1,c
  8649  000348  0E04               	movlw	4
  8650  00034A  6E03               	movwf	i2SetPin595@pin,c
  8651  00034C  0E00               	movlw	0
  8652  00034E  6E06               	movwf	i2SetPin595@value+1,c
  8653  000350  0E00               	movlw	0
  8654  000352  6E05               	movwf	i2SetPin595@value,c
  8655  000354  EC87  F00E         	call	i2_SetPin595	;wreg free
  8656                           
  8657                           ;PDU.c: 100: SetPin595(2, 3, OFF);
  8658  000358  0E00               	movlw	0
  8659  00035A  6E02               	movwf	i2SetPin595@Reg+1,c
  8660  00035C  0E02               	movlw	2
  8661  00035E  6E01               	movwf	i2SetPin595@Reg,c
  8662  000360  0E00               	movlw	0
  8663  000362  6E04               	movwf	i2SetPin595@pin+1,c
  8664  000364  0E03               	movlw	3
  8665  000366  6E03               	movwf	i2SetPin595@pin,c
  8666  000368  0E00               	movlw	0
  8667  00036A  6E06               	movwf	i2SetPin595@value+1,c
  8668  00036C  0E00               	movlw	0
  8669  00036E  6E05               	movwf	i2SetPin595@value,c
  8670  000370  EC87  F00E         	call	i2_SetPin595	;wreg free
  8671                           
  8672                           ;PDU.c: 101: SetPin595(2, 2, OFF);
  8673  000374  0E00               	movlw	0
  8674  000376  6E02               	movwf	i2SetPin595@Reg+1,c
  8675  000378  0E02               	movlw	2
  8676  00037A  6E01               	movwf	i2SetPin595@Reg,c
  8677  00037C  0E00               	movlw	0
  8678  00037E  6E04               	movwf	i2SetPin595@pin+1,c
  8679  000380  0E02               	movlw	2
  8680  000382  6E03               	movwf	i2SetPin595@pin,c
  8681  000384  0E00               	movlw	0
  8682  000386  6E06               	movwf	i2SetPin595@value+1,c
  8683  000388  0E00               	movlw	0
  8684  00038A  6E05               	movwf	i2SetPin595@value,c
  8685  00038C  EC87  F00E         	call	i2_SetPin595	;wreg free
  8686                           
  8687                           ;PDU.c: 102: SetPin595(3, 4, ON);
  8688  000390  0E00               	movlw	0
  8689  000392  6E02               	movwf	i2SetPin595@Reg+1,c
  8690  000394  0E03               	movlw	3
  8691  000396  6E01               	movwf	i2SetPin595@Reg,c
  8692  000398  0E00               	movlw	0
  8693  00039A  6E04               	movwf	i2SetPin595@pin+1,c
  8694  00039C  0E04               	movlw	4
  8695  00039E  6E03               	movwf	i2SetPin595@pin,c
  8696  0003A0  0E00               	movlw	0
  8697  0003A2  6E06               	movwf	i2SetPin595@value+1,c
  8698  0003A4  0E01               	movlw	1
  8699  0003A6  6E05               	movwf	i2SetPin595@value,c
  8700  0003A8  EC87  F00E         	call	i2_SetPin595	;wreg free
  8701                           
  8702                           ;PDU.c: 103: SetPin595(3, 3, OFF);
  8703  0003AC  0E00               	movlw	0
  8704  0003AE  6E02               	movwf	i2SetPin595@Reg+1,c
  8705  0003B0  0E03               	movlw	3
  8706  0003B2  6E01               	movwf	i2SetPin595@Reg,c
  8707  0003B4  0E00               	movlw	0
  8708  0003B6  6E04               	movwf	i2SetPin595@pin+1,c
  8709  0003B8  0E03               	movlw	3
  8710  0003BA  6E03               	movwf	i2SetPin595@pin,c
  8711  0003BC  0E00               	movlw	0
  8712  0003BE  6E06               	movwf	i2SetPin595@value+1,c
  8713  0003C0  0E00               	movlw	0
  8714  0003C2  6E05               	movwf	i2SetPin595@value,c
  8715  0003C4  EC87  F00E         	call	i2_SetPin595	;wreg free
  8716                           
  8717                           ;PDU.c: 104: SetPin595(3, 2, OFF);
  8718  0003C8  0E00               	movlw	0
  8719  0003CA  6E02               	movwf	i2SetPin595@Reg+1,c
  8720  0003CC  0E03               	movlw	3
  8721  0003CE  6E01               	movwf	i2SetPin595@Reg,c
  8722  0003D0  0E00               	movlw	0
  8723  0003D2  6E04               	movwf	i2SetPin595@pin+1,c
  8724  0003D4  0E02               	movlw	2
  8725  0003D6  6E03               	movwf	i2SetPin595@pin,c
  8726  0003D8  0E00               	movlw	0
  8727  0003DA  6E06               	movwf	i2SetPin595@value+1,c
  8728  0003DC  0E00               	movlw	0
  8729  0003DE  6E05               	movwf	i2SetPin595@value,c
  8730  0003E0  EC87  F00E         	call	i2_SetPin595	;wreg free
  8731                           
  8732                           ;PDU.c: 105: Update();
  8733  0003E4  EC19  F011         	call	i2_Update	;wreg free
  8734                           
  8735                           ;PDU.c: 106: CurrentADC[1] = ADC_GetConversion(U5Multisense);
  8736  0003E8  0E10               	movlw	16
  8737  0003EA  ECC3  F00F         	call	_ADC_GetConversion
  8738  0003EE  C001  F0C9         	movff	?_ADC_GetConversion,_CurrentADC+2
  8739  0003F2  C002  F0CA         	movff	?_ADC_GetConversion+1,_CurrentADC+3
  8740                           
  8741                           ;PDU.c: 108: }
  8742  0003F6  0012               	return	
  8743  0003F8                     i2l3352:
  8744                           
  8745                           ;PDU.c: 109: else if(gather == 4){
  8746  0003F8  0E04               	movlw	4
  8747  0003FA  180E               	xorwf	ReadCurrent@gather,w,c
  8748  0003FC  A4D8               	btfss	status,2,c
  8749  0003FE  D088               	goto	i2l3358
  8750                           
  8751                           ;PDU.c: 111: SetPin595(1, 4, ON);
  8752  000400  0E00               	movlw	0
  8753  000402  6E02               	movwf	i2SetPin595@Reg+1,c
  8754  000404  0E01               	movlw	1
  8755  000406  6E01               	movwf	i2SetPin595@Reg,c
  8756  000408  0E00               	movlw	0
  8757  00040A  6E04               	movwf	i2SetPin595@pin+1,c
  8758  00040C  0E04               	movlw	4
  8759  00040E  6E03               	movwf	i2SetPin595@pin,c
  8760  000410  0E00               	movlw	0
  8761  000412  6E06               	movwf	i2SetPin595@value+1,c
  8762  000414  0E01               	movlw	1
  8763  000416  6E05               	movwf	i2SetPin595@value,c
  8764  000418  EC87  F00E         	call	i2_SetPin595	;wreg free
  8765                           
  8766                           ;PDU.c: 112: SetPin595(1, 3, ON);
  8767  00041C  0E00               	movlw	0
  8768  00041E  6E02               	movwf	i2SetPin595@Reg+1,c
  8769  000420  0E01               	movlw	1
  8770  000422  6E01               	movwf	i2SetPin595@Reg,c
  8771  000424  0E00               	movlw	0
  8772  000426  6E04               	movwf	i2SetPin595@pin+1,c
  8773  000428  0E03               	movlw	3
  8774  00042A  6E03               	movwf	i2SetPin595@pin,c
  8775  00042C  0E00               	movlw	0
  8776  00042E  6E06               	movwf	i2SetPin595@value+1,c
  8777  000430  0E01               	movlw	1
  8778  000432  6E05               	movwf	i2SetPin595@value,c
  8779  000434  EC87  F00E         	call	i2_SetPin595	;wreg free
  8780                           
  8781                           ;PDU.c: 113: SetPin595(1, 2, OFF);
  8782  000438  0E00               	movlw	0
  8783  00043A  6E02               	movwf	i2SetPin595@Reg+1,c
  8784  00043C  0E01               	movlw	1
  8785  00043E  6E01               	movwf	i2SetPin595@Reg,c
  8786  000440  0E00               	movlw	0
  8787  000442  6E04               	movwf	i2SetPin595@pin+1,c
  8788  000444  0E02               	movlw	2
  8789  000446  6E03               	movwf	i2SetPin595@pin,c
  8790  000448  0E00               	movlw	0
  8791  00044A  6E06               	movwf	i2SetPin595@value+1,c
  8792  00044C  0E00               	movlw	0
  8793  00044E  6E05               	movwf	i2SetPin595@value,c
  8794  000450  EC87  F00E         	call	i2_SetPin595	;wreg free
  8795                           
  8796                           ;PDU.c: 114: SetPin595(2, 4, OFF);
  8797  000454  0E00               	movlw	0
  8798  000456  6E02               	movwf	i2SetPin595@Reg+1,c
  8799  000458  0E02               	movlw	2
  8800  00045A  6E01               	movwf	i2SetPin595@Reg,c
  8801  00045C  0E00               	movlw	0
  8802  00045E  6E04               	movwf	i2SetPin595@pin+1,c
  8803  000460  0E04               	movlw	4
  8804  000462  6E03               	movwf	i2SetPin595@pin,c
  8805  000464  0E00               	movlw	0
  8806  000466  6E06               	movwf	i2SetPin595@value+1,c
  8807  000468  0E00               	movlw	0
  8808  00046A  6E05               	movwf	i2SetPin595@value,c
  8809  00046C  EC87  F00E         	call	i2_SetPin595	;wreg free
  8810                           
  8811                           ;PDU.c: 115: SetPin595(2, 3, OFF);
  8812  000470  0E00               	movlw	0
  8813  000472  6E02               	movwf	i2SetPin595@Reg+1,c
  8814  000474  0E02               	movlw	2
  8815  000476  6E01               	movwf	i2SetPin595@Reg,c
  8816  000478  0E00               	movlw	0
  8817  00047A  6E04               	movwf	i2SetPin595@pin+1,c
  8818  00047C  0E03               	movlw	3
  8819  00047E  6E03               	movwf	i2SetPin595@pin,c
  8820  000480  0E00               	movlw	0
  8821  000482  6E06               	movwf	i2SetPin595@value+1,c
  8822  000484  0E00               	movlw	0
  8823  000486  6E05               	movwf	i2SetPin595@value,c
  8824  000488  EC87  F00E         	call	i2_SetPin595	;wreg free
  8825                           
  8826                           ;PDU.c: 116: SetPin595(2, 2, OFF);
  8827  00048C  0E00               	movlw	0
  8828  00048E  6E02               	movwf	i2SetPin595@Reg+1,c
  8829  000490  0E02               	movlw	2
  8830  000492  6E01               	movwf	i2SetPin595@Reg,c
  8831  000494  0E00               	movlw	0
  8832  000496  6E04               	movwf	i2SetPin595@pin+1,c
  8833  000498  0E02               	movlw	2
  8834  00049A  6E03               	movwf	i2SetPin595@pin,c
  8835  00049C  0E00               	movlw	0
  8836  00049E  6E06               	movwf	i2SetPin595@value+1,c
  8837  0004A0  0E00               	movlw	0
  8838  0004A2  6E05               	movwf	i2SetPin595@value,c
  8839  0004A4  EC87  F00E         	call	i2_SetPin595	;wreg free
  8840                           
  8841                           ;PDU.c: 117: SetPin595(3, 4, OFF);
  8842  0004A8  0E00               	movlw	0
  8843  0004AA  6E02               	movwf	i2SetPin595@Reg+1,c
  8844  0004AC  0E03               	movlw	3
  8845  0004AE  6E01               	movwf	i2SetPin595@Reg,c
  8846  0004B0  0E00               	movlw	0
  8847  0004B2  6E04               	movwf	i2SetPin595@pin+1,c
  8848  0004B4  0E04               	movlw	4
  8849  0004B6  6E03               	movwf	i2SetPin595@pin,c
  8850  0004B8  0E00               	movlw	0
  8851  0004BA  6E06               	movwf	i2SetPin595@value+1,c
  8852  0004BC  0E00               	movlw	0
  8853  0004BE  6E05               	movwf	i2SetPin595@value,c
  8854  0004C0  EC87  F00E         	call	i2_SetPin595	;wreg free
  8855                           
  8856                           ;PDU.c: 118: SetPin595(3, 3, OFF);
  8857  0004C4  0E00               	movlw	0
  8858  0004C6  6E02               	movwf	i2SetPin595@Reg+1,c
  8859  0004C8  0E03               	movlw	3
  8860  0004CA  6E01               	movwf	i2SetPin595@Reg,c
  8861  0004CC  0E00               	movlw	0
  8862  0004CE  6E04               	movwf	i2SetPin595@pin+1,c
  8863  0004D0  0E03               	movlw	3
  8864  0004D2  6E03               	movwf	i2SetPin595@pin,c
  8865  0004D4  0E00               	movlw	0
  8866  0004D6  6E06               	movwf	i2SetPin595@value+1,c
  8867  0004D8  0E00               	movlw	0
  8868  0004DA  6E05               	movwf	i2SetPin595@value,c
  8869  0004DC  EC87  F00E         	call	i2_SetPin595	;wreg free
  8870                           
  8871                           ;PDU.c: 119: SetPin595(3, 2, OFF);
  8872  0004E0  0E00               	movlw	0
  8873  0004E2  6E02               	movwf	i2SetPin595@Reg+1,c
  8874  0004E4  0E03               	movlw	3
  8875  0004E6  6E01               	movwf	i2SetPin595@Reg,c
  8876  0004E8  0E00               	movlw	0
  8877  0004EA  6E04               	movwf	i2SetPin595@pin+1,c
  8878  0004EC  0E02               	movlw	2
  8879  0004EE  6E03               	movwf	i2SetPin595@pin,c
  8880  0004F0  0E00               	movlw	0
  8881  0004F2  6E06               	movwf	i2SetPin595@value+1,c
  8882  0004F4  0E00               	movlw	0
  8883  0004F6  6E05               	movwf	i2SetPin595@value,c
  8884  0004F8  EC87  F00E         	call	i2_SetPin595	;wreg free
  8885                           
  8886                           ;PDU.c: 120: Update();
  8887  0004FC  EC19  F011         	call	i2_Update	;wreg free
  8888                           
  8889                           ;PDU.c: 121: CurrentADC[4] = ADC_GetConversion(U10Multisense);
  8890  000500  0E17               	movlw	23
  8891  000502  ECC3  F00F         	call	_ADC_GetConversion
  8892  000506  C001  F0CF         	movff	?_ADC_GetConversion,_CurrentADC+8
  8893  00050A  C002  F0D0         	movff	?_ADC_GetConversion+1,_CurrentADC+9
  8894                           
  8895                           ;PDU.c: 123: }
  8896  00050E  0012               	return	
  8897  000510                     i2l3358:
  8898                           
  8899                           ;PDU.c: 124: else if(gather == 5){
  8900  000510  0E05               	movlw	5
  8901  000512  180E               	xorwf	ReadCurrent@gather,w,c
  8902  000514  A4D8               	btfss	status,2,c
  8903  000516  D088               	goto	i2l3364
  8904                           
  8905                           ;PDU.c: 126: SetPin595(1, 4, OFF);
  8906  000518  0E00               	movlw	0
  8907  00051A  6E02               	movwf	i2SetPin595@Reg+1,c
  8908  00051C  0E01               	movlw	1
  8909  00051E  6E01               	movwf	i2SetPin595@Reg,c
  8910  000520  0E00               	movlw	0
  8911  000522  6E04               	movwf	i2SetPin595@pin+1,c
  8912  000524  0E04               	movlw	4
  8913  000526  6E03               	movwf	i2SetPin595@pin,c
  8914  000528  0E00               	movlw	0
  8915  00052A  6E06               	movwf	i2SetPin595@value+1,c
  8916  00052C  0E00               	movlw	0
  8917  00052E  6E05               	movwf	i2SetPin595@value,c
  8918  000530  EC87  F00E         	call	i2_SetPin595	;wreg free
  8919                           
  8920                           ;PDU.c: 127: SetPin595(1, 3, OFF);
  8921  000534  0E00               	movlw	0
  8922  000536  6E02               	movwf	i2SetPin595@Reg+1,c
  8923  000538  0E01               	movlw	1
  8924  00053A  6E01               	movwf	i2SetPin595@Reg,c
  8925  00053C  0E00               	movlw	0
  8926  00053E  6E04               	movwf	i2SetPin595@pin+1,c
  8927  000540  0E03               	movlw	3
  8928  000542  6E03               	movwf	i2SetPin595@pin,c
  8929  000544  0E00               	movlw	0
  8930  000546  6E06               	movwf	i2SetPin595@value+1,c
  8931  000548  0E00               	movlw	0
  8932  00054A  6E05               	movwf	i2SetPin595@value,c
  8933  00054C  EC87  F00E         	call	i2_SetPin595	;wreg free
  8934                           
  8935                           ;PDU.c: 128: SetPin595(1, 2, OFF);
  8936  000550  0E00               	movlw	0
  8937  000552  6E02               	movwf	i2SetPin595@Reg+1,c
  8938  000554  0E01               	movlw	1
  8939  000556  6E01               	movwf	i2SetPin595@Reg,c
  8940  000558  0E00               	movlw	0
  8941  00055A  6E04               	movwf	i2SetPin595@pin+1,c
  8942  00055C  0E02               	movlw	2
  8943  00055E  6E03               	movwf	i2SetPin595@pin,c
  8944  000560  0E00               	movlw	0
  8945  000562  6E06               	movwf	i2SetPin595@value+1,c
  8946  000564  0E00               	movlw	0
  8947  000566  6E05               	movwf	i2SetPin595@value,c
  8948  000568  EC87  F00E         	call	i2_SetPin595	;wreg free
  8949                           
  8950                           ;PDU.c: 129: SetPin595(2, 4, ON);
  8951  00056C  0E00               	movlw	0
  8952  00056E  6E02               	movwf	i2SetPin595@Reg+1,c
  8953  000570  0E02               	movlw	2
  8954  000572  6E01               	movwf	i2SetPin595@Reg,c
  8955  000574  0E00               	movlw	0
  8956  000576  6E04               	movwf	i2SetPin595@pin+1,c
  8957  000578  0E04               	movlw	4
  8958  00057A  6E03               	movwf	i2SetPin595@pin,c
  8959  00057C  0E00               	movlw	0
  8960  00057E  6E06               	movwf	i2SetPin595@value+1,c
  8961  000580  0E01               	movlw	1
  8962  000582  6E05               	movwf	i2SetPin595@value,c
  8963  000584  EC87  F00E         	call	i2_SetPin595	;wreg free
  8964                           
  8965                           ;PDU.c: 130: SetPin595(2, 3, OFF);
  8966  000588  0E00               	movlw	0
  8967  00058A  6E02               	movwf	i2SetPin595@Reg+1,c
  8968  00058C  0E02               	movlw	2
  8969  00058E  6E01               	movwf	i2SetPin595@Reg,c
  8970  000590  0E00               	movlw	0
  8971  000592  6E04               	movwf	i2SetPin595@pin+1,c
  8972  000594  0E03               	movlw	3
  8973  000596  6E03               	movwf	i2SetPin595@pin,c
  8974  000598  0E00               	movlw	0
  8975  00059A  6E06               	movwf	i2SetPin595@value+1,c
  8976  00059C  0E00               	movlw	0
  8977  00059E  6E05               	movwf	i2SetPin595@value,c
  8978  0005A0  EC87  F00E         	call	i2_SetPin595	;wreg free
  8979                           
  8980                           ;PDU.c: 131: SetPin595(2, 2, OFF);
  8981  0005A4  0E00               	movlw	0
  8982  0005A6  6E02               	movwf	i2SetPin595@Reg+1,c
  8983  0005A8  0E02               	movlw	2
  8984  0005AA  6E01               	movwf	i2SetPin595@Reg,c
  8985  0005AC  0E00               	movlw	0
  8986  0005AE  6E04               	movwf	i2SetPin595@pin+1,c
  8987  0005B0  0E02               	movlw	2
  8988  0005B2  6E03               	movwf	i2SetPin595@pin,c
  8989  0005B4  0E00               	movlw	0
  8990  0005B6  6E06               	movwf	i2SetPin595@value+1,c
  8991  0005B8  0E00               	movlw	0
  8992  0005BA  6E05               	movwf	i2SetPin595@value,c
  8993  0005BC  EC87  F00E         	call	i2_SetPin595	;wreg free
  8994                           
  8995                           ;PDU.c: 132: SetPin595(3, 4, OFF);
  8996  0005C0  0E00               	movlw	0
  8997  0005C2  6E02               	movwf	i2SetPin595@Reg+1,c
  8998  0005C4  0E03               	movlw	3
  8999  0005C6  6E01               	movwf	i2SetPin595@Reg,c
  9000  0005C8  0E00               	movlw	0
  9001  0005CA  6E04               	movwf	i2SetPin595@pin+1,c
  9002  0005CC  0E04               	movlw	4
  9003  0005CE  6E03               	movwf	i2SetPin595@pin,c
  9004  0005D0  0E00               	movlw	0
  9005  0005D2  6E06               	movwf	i2SetPin595@value+1,c
  9006  0005D4  0E00               	movlw	0
  9007  0005D6  6E05               	movwf	i2SetPin595@value,c
  9008  0005D8  EC87  F00E         	call	i2_SetPin595	;wreg free
  9009                           
  9010                           ;PDU.c: 133: SetPin595(3, 3, OFF);
  9011  0005DC  0E00               	movlw	0
  9012  0005DE  6E02               	movwf	i2SetPin595@Reg+1,c
  9013  0005E0  0E03               	movlw	3
  9014  0005E2  6E01               	movwf	i2SetPin595@Reg,c
  9015  0005E4  0E00               	movlw	0
  9016  0005E6  6E04               	movwf	i2SetPin595@pin+1,c
  9017  0005E8  0E03               	movlw	3
  9018  0005EA  6E03               	movwf	i2SetPin595@pin,c
  9019  0005EC  0E00               	movlw	0
  9020  0005EE  6E06               	movwf	i2SetPin595@value+1,c
  9021  0005F0  0E00               	movlw	0
  9022  0005F2  6E05               	movwf	i2SetPin595@value,c
  9023  0005F4  EC87  F00E         	call	i2_SetPin595	;wreg free
  9024                           
  9025                           ;PDU.c: 134: SetPin595(3, 2, OFF);
  9026  0005F8  0E00               	movlw	0
  9027  0005FA  6E02               	movwf	i2SetPin595@Reg+1,c
  9028  0005FC  0E03               	movlw	3
  9029  0005FE  6E01               	movwf	i2SetPin595@Reg,c
  9030  000600  0E00               	movlw	0
  9031  000602  6E04               	movwf	i2SetPin595@pin+1,c
  9032  000604  0E02               	movlw	2
  9033  000606  6E03               	movwf	i2SetPin595@pin,c
  9034  000608  0E00               	movlw	0
  9035  00060A  6E06               	movwf	i2SetPin595@value+1,c
  9036  00060C  0E00               	movlw	0
  9037  00060E  6E05               	movwf	i2SetPin595@value,c
  9038  000610  EC87  F00E         	call	i2_SetPin595	;wreg free
  9039                           
  9040                           ;PDU.c: 135: Update();
  9041  000614  EC19  F011         	call	i2_Update	;wreg free
  9042                           
  9043                           ;PDU.c: 136: CurrentADC[3] = ADC_GetConversion(U8Multisense);
  9044  000618  0E16               	movlw	22
  9045  00061A  ECC3  F00F         	call	_ADC_GetConversion
  9046  00061E  C001  F0CD         	movff	?_ADC_GetConversion,_CurrentADC+6
  9047  000622  C002  F0CE         	movff	?_ADC_GetConversion+1,_CurrentADC+7
  9048                           
  9049                           ;PDU.c: 138: }
  9050  000626  0012               	return	
  9051  000628                     i2l3364:
  9052                           
  9053                           ;PDU.c: 139: else if(gather == 6){
  9054  000628  0E06               	movlw	6
  9055  00062A  180E               	xorwf	ReadCurrent@gather,w,c
  9056  00062C  A4D8               	btfss	status,2,c
  9057  00062E  0012               	return	
  9058                           
  9059                           ;PDU.c: 141: SetPin595(1, 4, OFF);
  9060  000630  0E00               	movlw	0
  9061  000632  6E02               	movwf	i2SetPin595@Reg+1,c
  9062  000634  0E01               	movlw	1
  9063  000636  6E01               	movwf	i2SetPin595@Reg,c
  9064  000638  0E00               	movlw	0
  9065  00063A  6E04               	movwf	i2SetPin595@pin+1,c
  9066  00063C  0E04               	movlw	4
  9067  00063E  6E03               	movwf	i2SetPin595@pin,c
  9068  000640  0E00               	movlw	0
  9069  000642  6E06               	movwf	i2SetPin595@value+1,c
  9070  000644  0E00               	movlw	0
  9071  000646  6E05               	movwf	i2SetPin595@value,c
  9072  000648  EC87  F00E         	call	i2_SetPin595	;wreg free
  9073                           
  9074                           ;PDU.c: 142: SetPin595(1, 3, OFF);
  9075  00064C  0E00               	movlw	0
  9076  00064E  6E02               	movwf	i2SetPin595@Reg+1,c
  9077  000650  0E01               	movlw	1
  9078  000652  6E01               	movwf	i2SetPin595@Reg,c
  9079  000654  0E00               	movlw	0
  9080  000656  6E04               	movwf	i2SetPin595@pin+1,c
  9081  000658  0E03               	movlw	3
  9082  00065A  6E03               	movwf	i2SetPin595@pin,c
  9083  00065C  0E00               	movlw	0
  9084  00065E  6E06               	movwf	i2SetPin595@value+1,c
  9085  000660  0E00               	movlw	0
  9086  000662  6E05               	movwf	i2SetPin595@value,c
  9087  000664  EC87  F00E         	call	i2_SetPin595	;wreg free
  9088                           
  9089                           ;PDU.c: 143: SetPin595(1, 2, OFF);
  9090  000668  0E00               	movlw	0
  9091  00066A  6E02               	movwf	i2SetPin595@Reg+1,c
  9092  00066C  0E01               	movlw	1
  9093  00066E  6E01               	movwf	i2SetPin595@Reg,c
  9094  000670  0E00               	movlw	0
  9095  000672  6E04               	movwf	i2SetPin595@pin+1,c
  9096  000674  0E02               	movlw	2
  9097  000676  6E03               	movwf	i2SetPin595@pin,c
  9098  000678  0E00               	movlw	0
  9099  00067A  6E06               	movwf	i2SetPin595@value+1,c
  9100  00067C  0E00               	movlw	0
  9101  00067E  6E05               	movwf	i2SetPin595@value,c
  9102  000680  EC87  F00E         	call	i2_SetPin595	;wreg free
  9103                           
  9104                           ;PDU.c: 144: SetPin595(2, 4, OFF);
  9105  000684  0E00               	movlw	0
  9106  000686  6E02               	movwf	i2SetPin595@Reg+1,c
  9107  000688  0E02               	movlw	2
  9108  00068A  6E01               	movwf	i2SetPin595@Reg,c
  9109  00068C  0E00               	movlw	0
  9110  00068E  6E04               	movwf	i2SetPin595@pin+1,c
  9111  000690  0E04               	movlw	4
  9112  000692  6E03               	movwf	i2SetPin595@pin,c
  9113  000694  0E00               	movlw	0
  9114  000696  6E06               	movwf	i2SetPin595@value+1,c
  9115  000698  0E00               	movlw	0
  9116  00069A  6E05               	movwf	i2SetPin595@value,c
  9117  00069C  EC87  F00E         	call	i2_SetPin595	;wreg free
  9118                           
  9119                           ;PDU.c: 145: SetPin595(2, 3, OFF);
  9120  0006A0  0E00               	movlw	0
  9121  0006A2  6E02               	movwf	i2SetPin595@Reg+1,c
  9122  0006A4  0E02               	movlw	2
  9123  0006A6  6E01               	movwf	i2SetPin595@Reg,c
  9124  0006A8  0E00               	movlw	0
  9125  0006AA  6E04               	movwf	i2SetPin595@pin+1,c
  9126  0006AC  0E03               	movlw	3
  9127  0006AE  6E03               	movwf	i2SetPin595@pin,c
  9128  0006B0  0E00               	movlw	0
  9129  0006B2  6E06               	movwf	i2SetPin595@value+1,c
  9130  0006B4  0E00               	movlw	0
  9131  0006B6  6E05               	movwf	i2SetPin595@value,c
  9132  0006B8  EC87  F00E         	call	i2_SetPin595	;wreg free
  9133                           
  9134                           ;PDU.c: 146: SetPin595(2, 2, OFF);
  9135  0006BC  0E00               	movlw	0
  9136  0006BE  6E02               	movwf	i2SetPin595@Reg+1,c
  9137  0006C0  0E02               	movlw	2
  9138  0006C2  6E01               	movwf	i2SetPin595@Reg,c
  9139  0006C4  0E00               	movlw	0
  9140  0006C6  6E04               	movwf	i2SetPin595@pin+1,c
  9141  0006C8  0E02               	movlw	2
  9142  0006CA  6E03               	movwf	i2SetPin595@pin,c
  9143  0006CC  0E00               	movlw	0
  9144  0006CE  6E06               	movwf	i2SetPin595@value+1,c
  9145  0006D0  0E00               	movlw	0
  9146  0006D2  6E05               	movwf	i2SetPin595@value,c
  9147  0006D4  EC87  F00E         	call	i2_SetPin595	;wreg free
  9148                           
  9149                           ;PDU.c: 147: SetPin595(3, 4, ON);
  9150  0006D8  0E00               	movlw	0
  9151  0006DA  6E02               	movwf	i2SetPin595@Reg+1,c
  9152  0006DC  0E03               	movlw	3
  9153  0006DE  6E01               	movwf	i2SetPin595@Reg,c
  9154  0006E0  0E00               	movlw	0
  9155  0006E2  6E04               	movwf	i2SetPin595@pin+1,c
  9156  0006E4  0E04               	movlw	4
  9157  0006E6  6E03               	movwf	i2SetPin595@pin,c
  9158  0006E8  0E00               	movlw	0
  9159  0006EA  6E06               	movwf	i2SetPin595@value+1,c
  9160  0006EC  0E01               	movlw	1
  9161  0006EE  6E05               	movwf	i2SetPin595@value,c
  9162  0006F0  EC87  F00E         	call	i2_SetPin595	;wreg free
  9163                           
  9164                           ;PDU.c: 148: SetPin595(3, 3, ON);
  9165  0006F4  0E00               	movlw	0
  9166  0006F6  6E02               	movwf	i2SetPin595@Reg+1,c
  9167  0006F8  0E03               	movlw	3
  9168  0006FA  6E01               	movwf	i2SetPin595@Reg,c
  9169  0006FC  0E00               	movlw	0
  9170  0006FE  6E04               	movwf	i2SetPin595@pin+1,c
  9171  000700  0E03               	movlw	3
  9172  000702  6E03               	movwf	i2SetPin595@pin,c
  9173  000704  0E00               	movlw	0
  9174  000706  6E06               	movwf	i2SetPin595@value+1,c
  9175  000708  0E01               	movlw	1
  9176  00070A  6E05               	movwf	i2SetPin595@value,c
  9177  00070C  EC87  F00E         	call	i2_SetPin595	;wreg free
  9178                           
  9179                           ;PDU.c: 149: SetPin595(3, 2, OFF);
  9180  000710  0E00               	movlw	0
  9181  000712  6E02               	movwf	i2SetPin595@Reg+1,c
  9182  000714  0E03               	movlw	3
  9183  000716  6E01               	movwf	i2SetPin595@Reg,c
  9184  000718  0E00               	movlw	0
  9185  00071A  6E04               	movwf	i2SetPin595@pin+1,c
  9186  00071C  0E02               	movlw	2
  9187  00071E  6E03               	movwf	i2SetPin595@pin,c
  9188  000720  0E00               	movlw	0
  9189  000722  6E06               	movwf	i2SetPin595@value+1,c
  9190  000724  0E00               	movlw	0
  9191  000726  6E05               	movwf	i2SetPin595@value,c
  9192  000728  EC87  F00E         	call	i2_SetPin595	;wreg free
  9193                           
  9194                           ;PDU.c: 150: Update();
  9195  00072C  EC19  F011         	call	i2_Update	;wreg free
  9196                           
  9197                           ;PDU.c: 151: CurrentADC[0] = ADC_GetConversion(U5Multisense);
  9198  000730  0E10               	movlw	16
  9199  000732  ECC3  F00F         	call	_ADC_GetConversion
  9200  000736  C001  F0C7         	movff	?_ADC_GetConversion,_CurrentADC
  9201  00073A  C002  F0C8         	movff	?_ADC_GetConversion+1,_CurrentADC+1
  9202  00073E  0012               	return	
  9203  000740                     __end_of_ReadCurrent:
  9204                           	opt stack 0
  9205                           pclatu	equ	0xFFB
  9206                           pclath	equ	0xFFA
  9207                           tblptru	equ	0xFF8
  9208                           tblptrh	equ	0xFF7
  9209                           tblptrl	equ	0xFF6
  9210                           tablat	equ	0xFF5
  9211                           prodh	equ	0xFF4
  9212                           prodl	equ	0xFF3
  9213                           intcon	equ	0xFF2
  9214                           intcon2	equ	0xFF1
  9215                           postinc0	equ	0xFEE
  9216                           fsr0h	equ	0xFEA
  9217                           fsr0l	equ	0xFE9
  9218                           wreg	equ	0xFE8
  9219                           indf1	equ	0xFE7
  9220                           postdec1	equ	0xFE5
  9221                           fsr1h	equ	0xFE2
  9222                           fsr1l	equ	0xFE1
  9223                           indf2	equ	0xFDF
  9224                           postinc2	equ	0xFDE
  9225                           postdec2	equ	0xFDD
  9226                           plusw2	equ	0xFDB
  9227                           fsr2h	equ	0xFDA
  9228                           fsr2l	equ	0xFD9
  9229                           status	equ	0xFD8
  9230                           
  9231 ;; *************** function i2_Update *****************
  9232 ;; Defined at:
  9233 ;;		line 225 in file "PDU.c"
  9234 ;; Parameters:    Size  Location     Type
  9235 ;;		None
  9236 ;; Auto vars:     Size  Location     Type
  9237 ;;		None
  9238 ;; Return value:  Size  Location     Type
  9239 ;;                  1    wreg      void 
  9240 ;; Registers used:
  9241 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9242 ;; Tracked objects:
  9243 ;;		On entry : 0/0
  9244 ;;		On exit  : 0/0
  9245 ;;		Unchanged: 0/0
  9246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9247 ;;      Params:         0       0       0       0       0       0       0
  9248 ;;      Locals:         0       0       0       0       0       0       0
  9249 ;;      Temps:          0       0       0       0       0       0       0
  9250 ;;      Totals:         0       0       0       0       0       0       0
  9251 ;;Total ram usage:        0 bytes
  9252 ;; Hardware stack levels used:    1
  9253 ;; Hardware stack levels required when called:    2
  9254 ;; This function calls:
  9255 ;;		i2_writeRegisters
  9256 ;; This function is called by:
  9257 ;;		_ReadCurrent
  9258 ;; This function uses a non-reentrant model
  9259 ;;
  9260                           
  9261                           	psect	text54
  9262  002232                     __ptext54:
  9263                           	opt stack 0
  9264  002232                     i2_Update:
  9265                           	opt stack 18
  9266                           
  9267                           ;PDU.c: 226: writeRegisters();
  9268                           
  9269                           ;incstack = 0
  9270  002232  ECB5  F00C         	call	i2_writeRegisters	;wreg free
  9271  002236  0012               	return		;funcret
  9272  002238                     __end_ofi2_Update:
  9273                           	opt stack 0
  9274                           pclatu	equ	0xFFB
  9275                           pclath	equ	0xFFA
  9276                           tblptru	equ	0xFF8
  9277                           tblptrh	equ	0xFF7
  9278                           tblptrl	equ	0xFF6
  9279                           tablat	equ	0xFF5
  9280                           prodh	equ	0xFF4
  9281                           prodl	equ	0xFF3
  9282                           intcon	equ	0xFF2
  9283                           intcon2	equ	0xFF1
  9284                           postinc0	equ	0xFEE
  9285                           fsr0h	equ	0xFEA
  9286                           fsr0l	equ	0xFE9
  9287                           wreg	equ	0xFE8
  9288                           indf1	equ	0xFE7
  9289                           postdec1	equ	0xFE5
  9290                           fsr1h	equ	0xFE2
  9291                           fsr1l	equ	0xFE1
  9292                           indf2	equ	0xFDF
  9293                           postinc2	equ	0xFDE
  9294                           postdec2	equ	0xFDD
  9295                           plusw2	equ	0xFDB
  9296                           fsr2h	equ	0xFDA
  9297                           fsr2l	equ	0xFD9
  9298                           status	equ	0xFD8
  9299                           
  9300 ;; *************** function i2_writeRegisters *****************
  9301 ;; Defined at:
  9302 ;;		line 50 in file "Shift595.c"
  9303 ;; Parameters:    Size  Location     Type
  9304 ;;		None
  9305 ;; Auto vars:     Size  Location     Type
  9306 ;;  writeRegiste    2   11[COMRAM] int 
  9307 ;;  writeRegiste    2    9[COMRAM] int 
  9308 ;; Return value:  Size  Location     Type
  9309 ;;                  1    wreg      void 
  9310 ;; Registers used:
  9311 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9312 ;; Tracked objects:
  9313 ;;		On entry : 0/0
  9314 ;;		On exit  : 0/0
  9315 ;;		Unchanged: 0/0
  9316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9317 ;;      Params:         0       0       0       0       0       0       0
  9318 ;;      Locals:         4       0       0       0       0       0       0
  9319 ;;      Temps:          0       0       0       0       0       0       0
  9320 ;;      Totals:         4       0       0       0       0       0       0
  9321 ;;Total ram usage:        4 bytes
  9322 ;; Hardware stack levels used:    1
  9323 ;; Hardware stack levels required when called:    1
  9324 ;; This function calls:
  9325 ;;		i2_Delay
  9326 ;; This function is called by:
  9327 ;;		i2_Update
  9328 ;; This function uses a non-reentrant model
  9329 ;;
  9330                           
  9331                           	psect	text55
  9332  00196A                     __ptext55:
  9333                           	opt stack 0
  9334  00196A                     i2_writeRegisters:
  9335                           	opt stack 18
  9336                           
  9337                           ;Shift595.c: 51: int val = 0;
  9338                           
  9339                           ;incstack = 0
  9340  00196A  0E00               	movlw	0
  9341  00196C  6E0B               	movwf	i2writeRegisters@val+1,c
  9342  00196E  0E00               	movlw	0
  9343  001970  6E0A               	movwf	i2writeRegisters@val,c
  9344                           
  9345                           ;Shift595.c: 52: for (int i = 3 * 8 - 1; i >= 0; i--) {
  9346  001972  0E00               	movlw	0
  9347  001974  6E0D               	movwf	i2writeRegisters@i+1,c
  9348  001976  0E17               	movlw	23
  9349  001978  6E0C               	movwf	i2writeRegisters@i,c
  9350  00197A                     i2l3008:
  9351  00197A  BE0D               	btfsc	i2writeRegisters@i+1,7,c
  9352  00197C  D01D               	goto	i2l546
  9353                           
  9354                           ;Shift595.c: 53: do { LATD7 = 0; } while(0);
  9355  00197E  9E8C               	bcf	3980,7,c	;volatile
  9356                           
  9357                           ;Shift595.c: 55: val = registers[i];
  9358  001980  90D8               	bcf	status,0,c
  9359  001982  340C               	rlcf	i2writeRegisters@i,w,c
  9360  001984  6ED9               	movwf	fsr2l,c
  9361  001986  340D               	rlcf	i2writeRegisters@i+1,w,c
  9362  001988  6EDA               	movwf	fsr2h,c
  9363  00198A  0E00               	movlw	low _registers
  9364  00198C  26D9               	addwf	fsr2l,f,c
  9365  00198E  0E01               	movlw	high _registers
  9366  001990  22DA               	addwfc	fsr2h,f,c
  9367  001992  CFDE F00A          	movff	postinc2,i2writeRegisters@val
  9368  001996  CFDD F00B          	movff	postdec2,i2writeRegisters@val+1
  9369                           
  9370                           ;Shift595.c: 56: if (val == 1) {
  9371  00199A  040A               	decf	i2writeRegisters@val,w,c
  9372  00199C  100B               	iorwf	i2writeRegisters@val+1,w,c
  9373  00199E  A4D8               	btfss	status,2,c
  9374  0019A0  D002               	goto	i2l3016
  9375                           
  9376                           ;Shift595.c: 57: do { LATD4 = 1; } while(0);
  9377  0019A2  888C               	bsf	3980,4,c	;volatile
  9378                           
  9379                           ;Shift595.c: 58: } else if (val == 0) {
  9380  0019A4  D004               	goto	i2l544
  9381  0019A6                     i2l3016:
  9382  0019A6  500A               	movf	i2writeRegisters@val,w,c
  9383  0019A8  100B               	iorwf	i2writeRegisters@val+1,w,c
  9384  0019AA  B4D8               	btfsc	status,2,c
  9385                           
  9386                           ;Shift595.c: 59: do { LATD4 = 0; } while(0);
  9387  0019AC  988C               	bcf	3980,4,c	;volatile
  9388  0019AE                     i2l544:
  9389  0019AE  8E8C               	bsf	3980,7,c	;volatile
  9390  0019B0  060C               	decf	i2writeRegisters@i,f,c
  9391  0019B2  A0D8               	btfss	status,0,c
  9392  0019B4  060D               	decf	i2writeRegisters@i+1,f,c
  9393  0019B6  D7E1               	goto	i2l3008
  9394  0019B8                     i2l546:
  9395  0019B8  9E8C               	bcf	3980,7,c	;volatile
  9396                           
  9397                           ;Shift595.c: 67: Delay(1);
  9398  0019BA  0E01               	movlw	1
  9399  0019BC  6E01               	movwf	i2Delay@wait,c
  9400  0019BE  0E00               	movlw	0
  9401  0019C0  6E02               	movwf	i2Delay@wait+1,c
  9402  0019C2  0E00               	movlw	0
  9403  0019C4  6E03               	movwf	i2Delay@wait+2,c
  9404  0019C6  0E00               	movlw	0
  9405  0019C8  6E04               	movwf	i2Delay@wait+3,c
  9406  0019CA  ECF8  F00E         	call	i2_Delay	;wreg free
  9407                           
  9408                           ;Shift595.c: 68: do { LATD6 = 1; } while(0);
  9409  0019CE  8C8C               	bsf	3980,6,c	;volatile
  9410                           
  9411                           ;Shift595.c: 69: Delay(1);
  9412  0019D0  0E01               	movlw	1
  9413  0019D2  6E01               	movwf	i2Delay@wait,c
  9414  0019D4  0E00               	movlw	0
  9415  0019D6  6E02               	movwf	i2Delay@wait+1,c
  9416  0019D8  0E00               	movlw	0
  9417  0019DA  6E03               	movwf	i2Delay@wait+2,c
  9418  0019DC  0E00               	movlw	0
  9419  0019DE  6E04               	movwf	i2Delay@wait+3,c
  9420  0019E0  ECF8  F00E         	call	i2_Delay	;wreg free
  9421                           
  9422                           ;Shift595.c: 70: do { LATD6 = 0; } while(0);
  9423  0019E4  9C8C               	bcf	3980,6,c	;volatile
  9424  0019E6  0012               	return	
  9425  0019E8                     __end_ofi2_writeRegisters:
  9426                           	opt stack 0
  9427                           pclatu	equ	0xFFB
  9428                           pclath	equ	0xFFA
  9429                           tblptru	equ	0xFF8
  9430                           tblptrh	equ	0xFF7
  9431                           tblptrl	equ	0xFF6
  9432                           tablat	equ	0xFF5
  9433                           prodh	equ	0xFF4
  9434                           prodl	equ	0xFF3
  9435                           intcon	equ	0xFF2
  9436                           intcon2	equ	0xFF1
  9437                           postinc0	equ	0xFEE
  9438                           fsr0h	equ	0xFEA
  9439                           fsr0l	equ	0xFE9
  9440                           wreg	equ	0xFE8
  9441                           indf1	equ	0xFE7
  9442                           postdec1	equ	0xFE5
  9443                           fsr1h	equ	0xFE2
  9444                           fsr1l	equ	0xFE1
  9445                           indf2	equ	0xFDF
  9446                           postinc2	equ	0xFDE
  9447                           postdec2	equ	0xFDD
  9448                           plusw2	equ	0xFDB
  9449                           fsr2h	equ	0xFDA
  9450                           fsr2l	equ	0xFD9
  9451                           status	equ	0xFD8
  9452                           
  9453 ;; *************** function i2_Delay *****************
  9454 ;; Defined at:
  9455 ;;		line 9 in file "Functions.c"
  9456 ;; Parameters:    Size  Location     Type
  9457 ;;  wait            4    0[COMRAM] long 
  9458 ;; Auto vars:     Size  Location     Type
  9459 ;;  Delay           4    5[COMRAM] long 
  9460 ;; Return value:  Size  Location     Type
  9461 ;;                  1    wreg      void 
  9462 ;; Registers used:
  9463 ;;		wreg, status,2, status,0
  9464 ;; Tracked objects:
  9465 ;;		On entry : 0/0
  9466 ;;		On exit  : 0/0
  9467 ;;		Unchanged: 0/0
  9468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9469 ;;      Params:         4       0       0       0       0       0       0
  9470 ;;      Locals:         4       0       0       0       0       0       0
  9471 ;;      Temps:          1       0       0       0       0       0       0
  9472 ;;      Totals:         9       0       0       0       0       0       0
  9473 ;;Total ram usage:        9 bytes
  9474 ;; Hardware stack levels used:    1
  9475 ;; This function calls:
  9476 ;;		Nothing
  9477 ;; This function is called by:
  9478 ;;		i2_writeRegisters
  9479 ;; This function uses a non-reentrant model
  9480 ;;
  9481                           
  9482                           	psect	text56
  9483  001DF0                     __ptext56:
  9484                           	opt stack 0
  9485  001DF0                     i2_Delay:
  9486                           	opt stack 18
  9487                           
  9488                           ;Functions.c: 10: long int i = 0;
  9489                           
  9490                           ;incstack = 0
  9491  001DF0  0E00               	movlw	0
  9492  001DF2  6E06               	movwf	i2Delay@i,c
  9493  001DF4  0E00               	movlw	0
  9494  001DF6  6E07               	movwf	i2Delay@i+1,c
  9495  001DF8  0E00               	movlw	0
  9496  001DFA  6E08               	movwf	i2Delay@i+2,c
  9497  001DFC  0E00               	movlw	0
  9498  001DFE  6E09               	movwf	i2Delay@i+3,c
  9499                           
  9500                           ;Functions.c: 11: for (; wait > i; i++) {
  9501  001E00  D00D               	goto	i2l2862
  9502  001E02                     i2l2858:
  9503                           
  9504                           ;Functions.c: 12: _delay((unsigned long)((1)*(8000000/4000.0)));
  9505  001E02  0E03               	movlw	3
  9506  001E04  6E05               	movwf	??i2_Delay& (0+255),c
  9507  001E06  0E98               	movlw	152
  9508  001E08                     i2u303_47:
  9509  001E08  2EE8               	decfsz	wreg,f,c
  9510  001E0A  D7FE               	bra	i2u303_47
  9511  001E0C  2E05               	decfsz	??i2_Delay& (0+255),f,c
  9512  001E0E  D7FC               	bra	i2u303_47
  9513  001E10  0E01               	movlw	1
  9514  001E12  2606               	addwf	i2Delay@i,f,c
  9515  001E14  0E00               	movlw	0
  9516  001E16  2207               	addwfc	i2Delay@i+1,f,c
  9517  001E18  2208               	addwfc	i2Delay@i+2,f,c
  9518  001E1A  2209               	addwfc	i2Delay@i+3,f,c
  9519  001E1C                     i2l2862:
  9520  001E1C  5001               	movf	i2Delay@wait,w,c
  9521  001E1E  5C06               	subwf	i2Delay@i,w,c
  9522  001E20  5002               	movf	i2Delay@wait+1,w,c
  9523  001E22  5807               	subwfb	i2Delay@i+1,w,c
  9524  001E24  5003               	movf	i2Delay@wait+2,w,c
  9525  001E26  5808               	subwfb	i2Delay@i+2,w,c
  9526  001E28  5009               	movf	i2Delay@i+3,w,c
  9527  001E2A  0A80               	xorlw	128
  9528  001E2C  6E05               	movwf	??i2_Delay& (0+255),c
  9529  001E2E  5004               	movf	i2Delay@wait+3,w,c
  9530  001E30  0A80               	xorlw	128
  9531  001E32  5805               	subwfb	??i2_Delay& (0+255),w,c
  9532  001E34  B0D8               	btfsc	status,0,c
  9533  001E36  0012               	return	
  9534  001E38  D7E4               	goto	i2l2858
  9535  001E3A                     __end_ofi2_Delay:
  9536                           	opt stack 0
  9537                           pclatu	equ	0xFFB
  9538                           pclath	equ	0xFFA
  9539                           tblptru	equ	0xFF8
  9540                           tblptrh	equ	0xFF7
  9541                           tblptrl	equ	0xFF6
  9542                           tablat	equ	0xFF5
  9543                           prodh	equ	0xFF4
  9544                           prodl	equ	0xFF3
  9545                           intcon	equ	0xFF2
  9546                           intcon2	equ	0xFF1
  9547                           postinc0	equ	0xFEE
  9548                           fsr0h	equ	0xFEA
  9549                           fsr0l	equ	0xFE9
  9550                           wreg	equ	0xFE8
  9551                           indf1	equ	0xFE7
  9552                           postdec1	equ	0xFE5
  9553                           fsr1h	equ	0xFE2
  9554                           fsr1l	equ	0xFE1
  9555                           indf2	equ	0xFDF
  9556                           postinc2	equ	0xFDE
  9557                           postdec2	equ	0xFDD
  9558                           plusw2	equ	0xFDB
  9559                           fsr2h	equ	0xFDA
  9560                           fsr2l	equ	0xFD9
  9561                           status	equ	0xFD8
  9562                           
  9563 ;; *************** function i2_SetPin595 *****************
  9564 ;; Defined at:
  9565 ;;		line 32 in file "Shift595.c"
  9566 ;; Parameters:    Size  Location     Type
  9567 ;;  Reg             2    0[COMRAM] int 
  9568 ;;  pin             2    2[COMRAM] int 
  9569 ;;  value           2    4[COMRAM] int 
  9570 ;; Auto vars:     Size  Location     Type
  9571 ;;		None
  9572 ;; Return value:  Size  Location     Type
  9573 ;;                  1    wreg      void 
  9574 ;; Registers used:
  9575 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9576 ;; Tracked objects:
  9577 ;;		On entry : 0/0
  9578 ;;		On exit  : 0/0
  9579 ;;		Unchanged: 0/0
  9580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9581 ;;      Params:         6       0       0       0       0       0       0
  9582 ;;      Locals:         0       0       0       0       0       0       0
  9583 ;;      Temps:          4       0       0       0       0       0       0
  9584 ;;      Totals:        10       0       0       0       0       0       0
  9585 ;;Total ram usage:       10 bytes
  9586 ;; Hardware stack levels used:    1
  9587 ;; This function calls:
  9588 ;;		Nothing
  9589 ;; This function is called by:
  9590 ;;		_ReadCurrent
  9591 ;; This function uses a non-reentrant model
  9592 ;;
  9593                           
  9594                           	psect	text57
  9595  001D0E                     __ptext57:
  9596                           	opt stack 0
  9597  001D0E                     i2_SetPin595:
  9598                           	opt stack 20
  9599                           
  9600                           ;Shift595.c: 33: registers[((Reg - 1)*8) + pin] = value;
  9601                           
  9602                           ;incstack = 0
  9603  001D0E  0EF0               	movlw	240
  9604  001D10  6E07               	movwf	??i2_SetPin595& (0+255),c
  9605  001D12  0EFF               	movlw	255
  9606  001D14  6E08               	movwf	(??i2_SetPin595+1)& (0+255),c
  9607  001D16  C001  F009         	movff	i2SetPin595@Reg,??i2_SetPin595+2
  9608  001D1A  C002  F00A         	movff	i2SetPin595@Reg+1,??i2_SetPin595+3
  9609  001D1E  90D8               	bcf	status,0,c
  9610  001D20  3609               	rlcf	??i2_SetPin595+2,f,c
  9611  001D22  360A               	rlcf	??i2_SetPin595+3,f,c
  9612  001D24  90D8               	bcf	status,0,c
  9613  001D26  3609               	rlcf	??i2_SetPin595+2,f,c
  9614  001D28  360A               	rlcf	??i2_SetPin595+3,f,c
  9615  001D2A  90D8               	bcf	status,0,c
  9616  001D2C  3609               	rlcf	??i2_SetPin595+2,f,c
  9617  001D2E  360A               	rlcf	??i2_SetPin595+3,f,c
  9618  001D30  5003               	movf	i2SetPin595@pin,w,c
  9619  001D32  2609               	addwf	??i2_SetPin595+2,f,c
  9620  001D34  5004               	movf	i2SetPin595@pin+1,w,c
  9621  001D36  220A               	addwfc	??i2_SetPin595+3,f,c
  9622  001D38  90D8               	bcf	status,0,c
  9623  001D3A  3609               	rlcf	??i2_SetPin595+2,f,c
  9624  001D3C  360A               	rlcf	??i2_SetPin595+3,f,c
  9625  001D3E  5007               	movf	??i2_SetPin595,w,c
  9626  001D40  2609               	addwf	??i2_SetPin595+2,f,c
  9627  001D42  5008               	movf	??i2_SetPin595+1,w,c
  9628  001D44  220A               	addwfc	??i2_SetPin595+3,f,c
  9629  001D46  0E00               	movlw	low _registers
  9630  001D48  2409               	addwf	??i2_SetPin595+2,w,c
  9631  001D4A  6ED9               	movwf	fsr2l,c
  9632  001D4C  0E01               	movlw	high _registers
  9633  001D4E  200A               	addwfc	??i2_SetPin595+3,w,c
  9634  001D50  6EDA               	movwf	fsr2h,c
  9635  001D52  C005  FFDE         	movff	i2SetPin595@value,postinc2
  9636  001D56  C006  FFDD         	movff	i2SetPin595@value+1,postdec2
  9637  001D5A  0012               	return		;funcret
  9638  001D5C                     __end_ofi2_SetPin595:
  9639                           	opt stack 0
  9640                           pclatu	equ	0xFFB
  9641                           pclath	equ	0xFFA
  9642                           tblptru	equ	0xFF8
  9643                           tblptrh	equ	0xFF7
  9644                           tblptrl	equ	0xFF6
  9645                           tablat	equ	0xFF5
  9646                           prodh	equ	0xFF4
  9647                           prodl	equ	0xFF3
  9648                           intcon	equ	0xFF2
  9649                           intcon2	equ	0xFF1
  9650                           postinc0	equ	0xFEE
  9651                           fsr0h	equ	0xFEA
  9652                           fsr0l	equ	0xFE9
  9653                           wreg	equ	0xFE8
  9654                           indf1	equ	0xFE7
  9655                           postdec1	equ	0xFE5
  9656                           fsr1h	equ	0xFE2
  9657                           fsr1l	equ	0xFE1
  9658                           indf2	equ	0xFDF
  9659                           postinc2	equ	0xFDE
  9660                           postdec2	equ	0xFDD
  9661                           plusw2	equ	0xFDB
  9662                           fsr2h	equ	0xFDA
  9663                           fsr2l	equ	0xFD9
  9664                           status	equ	0xFD8
  9665                           
  9666 ;; *************** function _ADC_GetConversion *****************
  9667 ;; Defined at:
  9668 ;;		line 109 in file "mcc_generated_files/adc.c"
  9669 ;; Parameters:    Size  Location     Type
  9670 ;;  channel         1    wreg     enum E6965
  9671 ;; Auto vars:     Size  Location     Type
  9672 ;;  channel         1    4[COMRAM] enum E6965
  9673 ;; Return value:  Size  Location     Type
  9674 ;;                  2    0[COMRAM] unsigned int 
  9675 ;; Registers used:
  9676 ;;		wreg, status,2, status,0
  9677 ;; Tracked objects:
  9678 ;;		On entry : 0/0
  9679 ;;		On exit  : 0/0
  9680 ;;		Unchanged: 0/0
  9681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9682 ;;      Params:         2       0       0       0       0       0       0
  9683 ;;      Locals:         1       0       0       0       0       0       0
  9684 ;;      Temps:          2       0       0       0       0       0       0
  9685 ;;      Totals:         5       0       0       0       0       0       0
  9686 ;;Total ram usage:        5 bytes
  9687 ;; Hardware stack levels used:    1
  9688 ;; This function calls:
  9689 ;;		Nothing
  9690 ;; This function is called by:
  9691 ;;		_ReadCurrent
  9692 ;; This function uses a non-reentrant model
  9693 ;;
  9694                           
  9695                           	psect	text58
  9696  001F86                     __ptext58:
  9697                           	opt stack 0
  9698  001F86                     _ADC_GetConversion:
  9699                           	opt stack 20
  9700                           
  9701                           ;incstack = 0
  9702                           ;ADC_GetConversion@channel stored from wreg
  9703  001F86  6E05               	movwf	ADC_GetConversion@channel,c
  9704                           
  9705                           ;adc.c: 112: ADCON0bits.CHS = channel;
  9706  001F88  C005  F003         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
  9707  001F8C  4603               	rlncf	??_ADC_GetConversion,f,c
  9708  001F8E  4603               	rlncf	??_ADC_GetConversion,f,c
  9709  001F90  50C2               	movf	4034,w,c	;volatile
  9710  001F92  1803               	xorwf	??_ADC_GetConversion,w,c
  9711  001F94  0B83               	andlw	-125
  9712  001F96  1803               	xorwf	??_ADC_GetConversion,w,c
  9713  001F98  6EC2               	movwf	4034,c	;volatile
  9714                           
  9715                           ;adc.c: 115: ADCON0bits.ADON = 1;
  9716  001F9A  80C2               	bsf	4034,0,c	;volatile
  9717                           
  9718                           ;adc.c: 119: ADCON0bits.GO_nDONE = 1;
  9719  001F9C  82C2               	bsf	4034,1,c	;volatile
  9720  001F9E                     i2l31:
  9721  001F9E  B2C2               	btfsc	4034,1,c	;volatile
  9722  001FA0  D7FE               	goto	i2l31
  9723                           
  9724                           ;adc.c: 124: }
  9725                           ;adc.c: 127: return ((ADRESH << 8) + ADRESL);
  9726  001FA2  50C4               	movf	4036,w,c	;volatile
  9727  001FA4  6E04               	movwf	(??_ADC_GetConversion+1)& (0+255),c
  9728  001FA6  6A03               	clrf	??_ADC_GetConversion& (0+255),c
  9729  001FA8  50C3               	movf	4035,w,c	;volatile
  9730  001FAA  2403               	addwf	??_ADC_GetConversion,w,c
  9731  001FAC  6E01               	movwf	?_ADC_GetConversion,c
  9732  001FAE  0E00               	movlw	0
  9733  001FB0  2004               	addwfc	??_ADC_GetConversion+1,w,c
  9734  001FB2  6E02               	movwf	?_ADC_GetConversion+1,c
  9735  001FB4  0012               	return	
  9736  001FB6                     __end_of_ADC_GetConversion:
  9737                           	opt stack 0
  9738                           pclatu	equ	0xFFB
  9739                           pclath	equ	0xFFA
  9740                           tblptru	equ	0xFF8
  9741                           tblptrh	equ	0xFF7
  9742                           tblptrl	equ	0xFF6
  9743                           tablat	equ	0xFF5
  9744                           prodh	equ	0xFF4
  9745                           prodl	equ	0xFF3
  9746                           intcon	equ	0xFF2
  9747                           intcon2	equ	0xFF1
  9748                           postinc0	equ	0xFEE
  9749                           fsr0h	equ	0xFEA
  9750                           fsr0l	equ	0xFE9
  9751                           wreg	equ	0xFE8
  9752                           indf1	equ	0xFE7
  9753                           postdec1	equ	0xFE5
  9754                           fsr1h	equ	0xFE2
  9755                           fsr1l	equ	0xFE1
  9756                           indf2	equ	0xFDF
  9757                           postinc2	equ	0xFDE
  9758                           postdec2	equ	0xFDD
  9759                           plusw2	equ	0xFDB
  9760                           fsr2h	equ	0xFDA
  9761                           fsr2l	equ	0xFD9
  9762                           status	equ	0xFD8
  9763                           
  9764 ;; *************** function _FuseSystem *****************
  9765 ;; Defined at:
  9766 ;;		line 175 in file "PDU.c"
  9767 ;; Parameters:    Size  Location     Type
  9768 ;;		None
  9769 ;; Auto vars:     Size  Location     Type
  9770 ;;  i               2    6[COMRAM] int 
  9771 ;;  i               2    8[COMRAM] int 
  9772 ;; Return value:  Size  Location     Type
  9773 ;;                  1    wreg      void 
  9774 ;; Registers used:
  9775 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9776 ;; Tracked objects:
  9777 ;;		On entry : 0/0
  9778 ;;		On exit  : 0/0
  9779 ;;		Unchanged: 0/0
  9780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9781 ;;      Params:         0       0       0       0       0       0       0
  9782 ;;      Locals:         4       0       0       0       0       0       0
  9783 ;;      Temps:          0       0       0       0       0       0       0
  9784 ;;      Totals:         4       0       0       0       0       0       0
  9785 ;;Total ram usage:        4 bytes
  9786 ;; Hardware stack levels used:    1
  9787 ;; Hardware stack levels required when called:    1
  9788 ;; This function calls:
  9789 ;;		___wmul
  9790 ;; This function is called by:
  9791 ;;		_TMR1_ISR
  9792 ;; This function uses a non-reentrant model
  9793 ;;
  9794                           
  9795                           	psect	text59
  9796  0019E8                     __ptext59:
  9797                           	opt stack 0
  9798  0019E8                     _FuseSystem:
  9799                           	opt stack 20
  9800                           
  9801                           ;PDU.c: 177: for (int i = 0; i < 6; i++) {
  9802                           
  9803                           ;incstack = 0
  9804  0019E8  0E00               	movlw	0
  9805  0019EA  6E0A               	movwf	FuseSystem@i+1,c
  9806  0019EC  0E00               	movlw	0
  9807  0019EE  6E09               	movwf	FuseSystem@i,c
  9808  0019F0                     i2l3314:
  9809  0019F0  BE0A               	btfsc	FuseSystem@i+1,7,c
  9810  0019F2  D006               	goto	i2l3318
  9811  0019F4  500A               	movf	FuseSystem@i+1,w,c
  9812  0019F6  E127               	bnz	i2l3324
  9813  0019F8  0E06               	movlw	6
  9814  0019FA  5C09               	subwf	FuseSystem@i,w,c
  9815  0019FC  B0D8               	btfsc	status,0,c
  9816  0019FE  D023               	goto	i2l3324
  9817  001A00                     i2l3318:
  9818                           
  9819                           ;PDU.c: 178: Current[i] = CurrentADC[i]*48;
  9820  001A00  90D8               	bcf	status,0,c
  9821  001A02  3409               	rlcf	FuseSystem@i,w,c
  9822  001A04  6ED9               	movwf	fsr2l,c
  9823  001A06  340A               	rlcf	FuseSystem@i+1,w,c
  9824  001A08  6EDA               	movwf	fsr2h,c
  9825  001A0A  0EC7               	movlw	low _CurrentADC
  9826  001A0C  26D9               	addwf	fsr2l,f,c
  9827  001A0E  0E00               	movlw	high _CurrentADC
  9828  001A10  22DA               	addwfc	fsr2h,f,c
  9829  001A12  CFDE F001          	movff	postinc2,___wmul@multiplier
  9830  001A16  CFDD F002          	movff	postdec2,___wmul@multiplier+1
  9831  001A1A  0E00               	movlw	0
  9832  001A1C  6E04               	movwf	___wmul@multiplicand+1,c
  9833  001A1E  0E30               	movlw	48
  9834  001A20  6E03               	movwf	___wmul@multiplicand,c
  9835  001A22  EC32  F010         	call	___wmul	;wreg free
  9836  001A26  90D8               	bcf	status,0,c
  9837  001A28  3409               	rlcf	FuseSystem@i,w,c
  9838  001A2A  6ED9               	movwf	fsr2l,c
  9839  001A2C  340A               	rlcf	FuseSystem@i+1,w,c
  9840  001A2E  6EDA               	movwf	fsr2h,c
  9841  001A30  0E30               	movlw	low _Current
  9842  001A32  26D9               	addwf	fsr2l,f,c
  9843  001A34  0E01               	movlw	high _Current
  9844  001A36  22DA               	addwfc	fsr2h,f,c
  9845  001A38  C001  FFDE         	movff	?___wmul,postinc2
  9846  001A3C  C002  FFDD         	movff	?___wmul+1,postdec2
  9847  001A40  4A09               	infsnz	FuseSystem@i,f,c
  9848  001A42  2A0A               	incf	FuseSystem@i+1,f,c
  9849  001A44  D7D5               	goto	i2l3314
  9850  001A46                     i2l3324:
  9851                           
  9852                           ;PDU.c: 181: }
  9853                           ;PDU.c: 183: for (int i = 0; i < 6; i++) {
  9854  001A46  0E00               	movlw	0
  9855  001A48  6E08               	movwf	FuseSystem@i_1226+1,c
  9856  001A4A  0E00               	movlw	0
  9857  001A4C  6E07               	movwf	FuseSystem@i_1226,c
  9858  001A4E                     i2l3326:
  9859  001A4E  BE08               	btfsc	FuseSystem@i_1226+1,7,c
  9860  001A50  D006               	goto	i2l3330
  9861  001A52  5008               	movf	FuseSystem@i_1226+1,w,c
  9862  001A54  E107               	bnz	i2l477
  9863  001A56  0E06               	movlw	6
  9864  001A58  5C07               	subwf	FuseSystem@i_1226,w,c
  9865  001A5A  B0D8               	btfsc	status,0,c
  9866  001A5C  0012               	return	
  9867  001A5E                     i2l3330:
  9868  001A5E  4A07               	infsnz	FuseSystem@i_1226,f,c
  9869  001A60  2A08               	incf	FuseSystem@i_1226+1,f,c
  9870  001A62  D7F5               	goto	i2l3326
  9871  001A64                     i2l477:
  9872  001A64  0012               	return		;funcret
  9873  001A66                     __end_of_FuseSystem:
  9874                           	opt stack 0
  9875                           pclatu	equ	0xFFB
  9876                           pclath	equ	0xFFA
  9877                           tblptru	equ	0xFF8
  9878                           tblptrh	equ	0xFF7
  9879                           tblptrl	equ	0xFF6
  9880                           tablat	equ	0xFF5
  9881                           prodh	equ	0xFF4
  9882                           prodl	equ	0xFF3
  9883                           intcon	equ	0xFF2
  9884                           intcon2	equ	0xFF1
  9885                           postinc0	equ	0xFEE
  9886                           fsr0h	equ	0xFEA
  9887                           fsr0l	equ	0xFE9
  9888                           wreg	equ	0xFE8
  9889                           indf1	equ	0xFE7
  9890                           postdec1	equ	0xFE5
  9891                           fsr1h	equ	0xFE2
  9892                           fsr1l	equ	0xFE1
  9893                           indf2	equ	0xFDF
  9894                           postinc2	equ	0xFDE
  9895                           postdec2	equ	0xFDD
  9896                           plusw2	equ	0xFDB
  9897                           fsr2h	equ	0xFDA
  9898                           fsr2l	equ	0xFD9
  9899                           status	equ	0xFD8
  9900                           
  9901 ;; *************** function ___wmul *****************
  9902 ;; Defined at:
  9903 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
  9904 ;; Parameters:    Size  Location     Type
  9905 ;;  multiplier      2    0[COMRAM] unsigned int 
  9906 ;;  multiplicand    2    2[COMRAM] unsigned int 
  9907 ;; Auto vars:     Size  Location     Type
  9908 ;;  product         2    4[COMRAM] unsigned int 
  9909 ;; Return value:  Size  Location     Type
  9910 ;;                  2    0[COMRAM] unsigned int 
  9911 ;; Registers used:
  9912 ;;		wreg, status,2, status,0, prodl, prodh
  9913 ;; Tracked objects:
  9914 ;;		On entry : 0/0
  9915 ;;		On exit  : 0/0
  9916 ;;		Unchanged: 0/0
  9917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9918 ;;      Params:         4       0       0       0       0       0       0
  9919 ;;      Locals:         2       0       0       0       0       0       0
  9920 ;;      Temps:          0       0       0       0       0       0       0
  9921 ;;      Totals:         6       0       0       0       0       0       0
  9922 ;;Total ram usage:        6 bytes
  9923 ;; Hardware stack levels used:    1
  9924 ;; This function calls:
  9925 ;;		Nothing
  9926 ;; This function is called by:
  9927 ;;		_FuseSystem
  9928 ;; This function uses a non-reentrant model
  9929 ;;
  9930                           
  9931                           	psect	text60
  9932  002064                     __ptext60:
  9933                           	opt stack 0
  9934  002064                     ___wmul:
  9935                           	opt stack 20
  9936                           
  9937                           ;incstack = 0
  9938  002064  5001               	movf	___wmul@multiplier,w,c
  9939  002066  0203               	mulwf	___wmul@multiplicand,c
  9940  002068  CFF3 F005          	movff	prodl,___wmul@product
  9941  00206C  CFF4 F006          	movff	prodh,___wmul@product+1
  9942  002070  5001               	movf	___wmul@multiplier,w,c
  9943  002072  0204               	mulwf	___wmul@multiplicand+1,c
  9944  002074  50F3               	movf	prodl,w,c
  9945  002076  2606               	addwf	___wmul@product+1,f,c
  9946  002078  5002               	movf	___wmul@multiplier+1,w,c
  9947  00207A  0203               	mulwf	___wmul@multiplicand,c
  9948  00207C  50F3               	movf	prodl,w,c
  9949  00207E  2606               	addwf	___wmul@product+1,f,c
  9950  002080  C005  F001         	movff	___wmul@product,?___wmul
  9951  002084  C006  F002         	movff	___wmul@product+1,?___wmul+1
  9952  002088  0012               	return	
  9953  00208A                     __end_of___wmul:
  9954                           	opt stack 0
  9955                           pclatu	equ	0xFFB
  9956                           pclath	equ	0xFFA
  9957                           tblptru	equ	0xFF8
  9958                           tblptrh	equ	0xFF7
  9959                           tblptrl	equ	0xFF6
  9960                           tablat	equ	0xFF5
  9961                           prodh	equ	0xFF4
  9962                           prodl	equ	0xFF3
  9963                           intcon	equ	0xFF2
  9964                           intcon2	equ	0xFF1
  9965                           postinc0	equ	0xFEE
  9966                           fsr0h	equ	0xFEA
  9967                           fsr0l	equ	0xFE9
  9968                           wreg	equ	0xFE8
  9969                           indf1	equ	0xFE7
  9970                           postdec1	equ	0xFE5
  9971                           fsr1h	equ	0xFE2
  9972                           fsr1l	equ	0xFE1
  9973                           indf2	equ	0xFDF
  9974                           postinc2	equ	0xFDE
  9975                           postdec2	equ	0xFDD
  9976                           plusw2	equ	0xFDB
  9977                           fsr2h	equ	0xFDA
  9978                           fsr2l	equ	0xFD9
  9979                           status	equ	0xFD8
  9980                           
  9981 ;; *************** function _EUSART1_Transmit_ISR *****************
  9982 ;; Defined at:
  9983 ;;		line 149 in file "UART.c"
  9984 ;; Parameters:    Size  Location     Type
  9985 ;;		None
  9986 ;; Auto vars:     Size  Location     Type
  9987 ;;		None
  9988 ;; Return value:  Size  Location     Type
  9989 ;;                  1    wreg      void 
  9990 ;; Registers used:
  9991 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9992 ;; Tracked objects:
  9993 ;;		On entry : 0/0
  9994 ;;		On exit  : 0/0
  9995 ;;		Unchanged: 0/0
  9996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9997 ;;      Params:         0       0       0       0       0       0       0
  9998 ;;      Locals:         0       0       0       0       0       0       0
  9999 ;;      Temps:          0       0       0       0       0       0       0
 10000 ;;      Totals:         0       0       0       0       0       0       0
 10001 ;;Total ram usage:        0 bytes
 10002 ;; Hardware stack levels used:    1
 10003 ;; Hardware stack levels required when called:    2
 10004 ;; This function calls:
 10005 ;;		i2_UART_buff_get
 10006 ;;		i2_UART_buff_size
 10007 ;; This function is called by:
 10008 ;;		_INTERRUPT_InterruptManager
 10009 ;; This function uses a non-reentrant model
 10010 ;;
 10011                           
 10012                           	psect	text61
 10013  001F24                     __ptext61:
 10014                           	opt stack 0
 10015  001F24                     _EUSART1_Transmit_ISR:
 10016                           	opt stack 20
 10017                           
 10018                           ;UART.c: 151: if (UART_buff_size(&output_buffer) > 0) {
 10019                           
 10020                           ;incstack = 0
 10021  001F24  0E00               	movlw	low _output_buffer
 10022  001F26  6E01               	movwf	i2UART_buff_size@_this,c
 10023  001F28  0E02               	movlw	high _output_buffer
 10024  001F2A  6E02               	movwf	i2UART_buff_size@_this+1,c
 10025  001F2C  ECCD  F010         	call	i2_UART_buff_size	;wreg free
 10026  001F30  BE02               	btfsc	?i2_UART_buff_size+1,7,c
 10027  001F32  D00D               	goto	i2l3566
 10028  001F34  5002               	movf	?i2_UART_buff_size+1,w,c
 10029  001F36  E103               	bnz	i2u210_40
 10030  001F38  0401               	decf	?i2_UART_buff_size,w,c
 10031  001F3A  A0D8               	btfss	status,0,c
 10032  001F3C  D008               	goto	i2l3566
 10033  001F3E                     i2u210_40:
 10034                           
 10035                           ;UART.c: 152: TXREG1 = UART_buff_get(&output_buffer);
 10036  001F3E  0E00               	movlw	low _output_buffer
 10037  001F40  6E07               	movwf	i2UART_buff_get@_this,c
 10038  001F42  0E02               	movlw	high _output_buffer
 10039  001F44  6E08               	movwf	i2UART_buff_get@_this+1,c
 10040  001F46  ECEB  F00B         	call	i2_UART_buff_get	;wreg free
 10041  001F4A  6EAD               	movwf	4013,c	;volatile
 10042                           
 10043                           ;UART.c: 153: } else {
 10044  001F4C  0012               	return	
 10045  001F4E                     i2l3566:
 10046                           
 10047                           ;UART.c: 154: Transmit_stall = 1;
 10048  001F4E  0E01               	movlw	1
 10049  001F50  6E41               	movwf	_Transmit_stall,c
 10050                           
 10051                           ;UART.c: 155: PIE1bits.TX1IE = 0;
 10052  001F52  989D               	bcf	3997,4,c	;volatile
 10053  001F54  0012               	return	
 10054  001F56                     __end_of_EUSART1_Transmit_ISR:
 10055                           	opt stack 0
 10056                           pclatu	equ	0xFFB
 10057                           pclath	equ	0xFFA
 10058                           tblptru	equ	0xFF8
 10059                           tblptrh	equ	0xFF7
 10060                           tblptrl	equ	0xFF6
 10061                           tablat	equ	0xFF5
 10062                           prodh	equ	0xFF4
 10063                           prodl	equ	0xFF3
 10064                           intcon	equ	0xFF2
 10065                           intcon2	equ	0xFF1
 10066                           postinc0	equ	0xFEE
 10067                           fsr0h	equ	0xFEA
 10068                           fsr0l	equ	0xFE9
 10069                           wreg	equ	0xFE8
 10070                           indf1	equ	0xFE7
 10071                           postdec1	equ	0xFE5
 10072                           fsr1h	equ	0xFE2
 10073                           fsr1l	equ	0xFE1
 10074                           indf2	equ	0xFDF
 10075                           postinc2	equ	0xFDE
 10076                           postdec2	equ	0xFDD
 10077                           plusw2	equ	0xFDB
 10078                           fsr2h	equ	0xFDA
 10079                           fsr2l	equ	0xFD9
 10080                           status	equ	0xFD8
 10081                           
 10082 ;; *************** function i2_UART_buff_size *****************
 10083 ;; Defined at:
 10084 ;;		line 101 in file "UART.c"
 10085 ;; Parameters:    Size  Location     Type
 10086 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
 10087 ;;		 -> output_buffer(106), input_buffer(106), 
 10088 ;; Auto vars:     Size  Location     Type
 10089 ;;		None
 10090 ;; Return value:  Size  Location     Type
 10091 ;;                  2    0[COMRAM] int 
 10092 ;; Registers used:
 10093 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10094 ;; Tracked objects:
 10095 ;;		On entry : 0/0
 10096 ;;		On exit  : 0/0
 10097 ;;		Unchanged: 0/0
 10098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10099 ;;      Params:         2       0       0       0       0       0       0
 10100 ;;      Locals:         0       0       0       0       0       0       0
 10101 ;;      Temps:          0       0       0       0       0       0       0
 10102 ;;      Totals:         2       0       0       0       0       0       0
 10103 ;;Total ram usage:        2 bytes
 10104 ;; Hardware stack levels used:    1
 10105 ;; This function calls:
 10106 ;;		Nothing
 10107 ;; This function is called by:
 10108 ;;		_EUSART1_Transmit_ISR
 10109 ;; This function uses a non-reentrant model
 10110 ;;
 10111                           
 10112                           	psect	text62
 10113  00219A                     __ptext62:
 10114                           	opt stack 0
 10115  00219A                     i2_UART_buff_size:
 10116                           	opt stack 21
 10117                           
 10118                           ;UART.c: 102: return (_this->count);
 10119                           
 10120                           ;incstack = 0
 10121  00219A  EE20 F068          	lfsr	2,104
 10122  00219E  5001               	movf	i2UART_buff_size@_this,w,c
 10123  0021A0  26D9               	addwf	fsr2l,f,c
 10124  0021A2  5002               	movf	i2UART_buff_size@_this+1,w,c
 10125  0021A4  22DA               	addwfc	fsr2h,f,c
 10126  0021A6  CFDE F001          	movff	postinc2,?i2_UART_buff_size
 10127  0021AA  CFDD F002          	movff	postdec2,?i2_UART_buff_size+1
 10128  0021AE  0012               	return	
 10129  0021B0                     __end_ofi2_UART_buff_size:
 10130                           	opt stack 0
 10131                           pclatu	equ	0xFFB
 10132                           pclath	equ	0xFFA
 10133                           tblptru	equ	0xFF8
 10134                           tblptrh	equ	0xFF7
 10135                           tblptrl	equ	0xFF6
 10136                           tablat	equ	0xFF5
 10137                           prodh	equ	0xFF4
 10138                           prodl	equ	0xFF3
 10139                           intcon	equ	0xFF2
 10140                           intcon2	equ	0xFF1
 10141                           postinc0	equ	0xFEE
 10142                           fsr0h	equ	0xFEA
 10143                           fsr0l	equ	0xFE9
 10144                           wreg	equ	0xFE8
 10145                           indf1	equ	0xFE7
 10146                           postdec1	equ	0xFE5
 10147                           fsr1h	equ	0xFE2
 10148                           fsr1l	equ	0xFE1
 10149                           indf2	equ	0xFDF
 10150                           postinc2	equ	0xFDE
 10151                           postdec2	equ	0xFDD
 10152                           plusw2	equ	0xFDB
 10153                           fsr2h	equ	0xFDA
 10154                           fsr2l	equ	0xFD9
 10155                           status	equ	0xFD8
 10156                           
 10157 ;; *************** function i2_UART_buff_get *****************
 10158 ;; Defined at:
 10159 ;;		line 80 in file "UART.c"
 10160 ;; Parameters:    Size  Location     Type
 10161 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
 10162 ;;		 -> output_buffer(106), input_buffer(106), 
 10163 ;; Auto vars:     Size  Location     Type
 10164 ;;  UART_buff_ge    1   10[COMRAM] unsigned char 
 10165 ;; Return value:  Size  Location     Type
 10166 ;;                  1    wreg      unsigned char 
 10167 ;; Registers used:
 10168 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10169 ;; Tracked objects:
 10170 ;;		On entry : 0/0
 10171 ;;		On exit  : 0/0
 10172 ;;		Unchanged: 0/0
 10173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10174 ;;      Params:         2       0       0       0       0       0       0
 10175 ;;      Locals:         1       0       0       0       0       0       0
 10176 ;;      Temps:          2       0       0       0       0       0       0
 10177 ;;      Totals:         5       0       0       0       0       0       0
 10178 ;;Total ram usage:        5 bytes
 10179 ;; Hardware stack levels used:    1
 10180 ;; Hardware stack levels required when called:    1
 10181 ;; This function calls:
 10182 ;;		i2_UART_buff_modulo_inc
 10183 ;; This function is called by:
 10184 ;;		_EUSART1_Transmit_ISR
 10185 ;; This function uses a non-reentrant model
 10186 ;;
 10187                           
 10188                           	psect	text63
 10189  0017D6                     __ptext63:
 10190                           	opt stack 0
 10191  0017D6                     i2_UART_buff_get:
 10192                           	opt stack 20
 10193                           
 10194                           ;UART.c: 81: unsigned char c;
 10195                           ;UART.c: 82: if (_this->count > 0) {
 10196                           
 10197                           ;incstack = 0
 10198  0017D6  EE20 F068          	lfsr	2,104
 10199  0017DA  5007               	movf	i2UART_buff_get@_this,w,c
 10200  0017DC  26D9               	addwf	fsr2l,f,c
 10201  0017DE  5008               	movf	i2UART_buff_get@_this+1,w,c
 10202  0017E0  22DA               	addwfc	fsr2h,f,c
 10203  0017E2  0E01               	movlw	1
 10204  0017E4  BEDB               	btfsc	plusw2,7,c
 10205  0017E6  D03C               	goto	i2l3548
 10206  0017E8  0E01               	movlw	1
 10207  0017EA  50DB               	movf	plusw2,w,c
 10208  0017EC  E103               	bnz	i2u208_40
 10209  0017EE  04DE               	decf	postinc2,w,c
 10210  0017F0  A0D8               	btfss	status,0,c
 10211  0017F2  D036               	goto	i2l3548
 10212  0017F4                     i2u208_40:
 10213                           
 10214                           ;UART.c: 83: c = _this->buf[_this->tail];
 10215  0017F4  EE20 F066          	lfsr	2,102
 10216  0017F8  5007               	movf	i2UART_buff_get@_this,w,c
 10217  0017FA  26D9               	addwf	fsr2l,f,c
 10218  0017FC  5008               	movf	i2UART_buff_get@_this+1,w,c
 10219  0017FE  22DA               	addwfc	fsr2h,f,c
 10220  001800  CFDE F009          	movff	postinc2,??i2_UART_buff_get
 10221  001804  CFDD F00A          	movff	postdec2,??i2_UART_buff_get+1
 10222  001808  5009               	movf	??i2_UART_buff_get,w,c
 10223  00180A  2407               	addwf	i2UART_buff_get@_this,w,c
 10224  00180C  6ED9               	movwf	fsr2l,c
 10225  00180E  500A               	movf	??i2_UART_buff_get+1,w,c
 10226  001810  2008               	addwfc	i2UART_buff_get@_this+1,w,c
 10227  001812  6EDA               	movwf	fsr2h,c
 10228  001814  50DF               	movf	indf2,w,c
 10229  001816  6E0B               	movwf	i2UART_buff_get@c,c
 10230                           
 10231                           ;UART.c: 84: _this->tail = UART_buff_modulo_inc(_this->tail, 100);
 10232  001818  EE20 F066          	lfsr	2,102
 10233  00181C  5007               	movf	i2UART_buff_get@_this,w,c
 10234  00181E  26D9               	addwf	fsr2l,f,c
 10235  001820  5008               	movf	i2UART_buff_get@_this+1,w,c
 10236  001822  22DA               	addwfc	fsr2h,f,c
 10237  001824  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 10238  001828  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 10239  00182C  0E00               	movlw	0
 10240  00182E  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 10241  001830  0E64               	movlw	100
 10242  001832  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 10243  001834  EC1D  F010         	call	i2_UART_buff_modulo_inc	;wreg free
 10244  001838  EE20 F066          	lfsr	2,102
 10245  00183C  5007               	movf	i2UART_buff_get@_this,w,c
 10246  00183E  26D9               	addwf	fsr2l,f,c
 10247  001840  5008               	movf	i2UART_buff_get@_this+1,w,c
 10248  001842  22DA               	addwfc	fsr2h,f,c
 10249  001844  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 10250  001848  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 10251                           
 10252                           ;UART.c: 85: --_this->count;
 10253  00184C  EE20 F068          	lfsr	2,104
 10254  001850  5007               	movf	i2UART_buff_get@_this,w,c
 10255  001852  26D9               	addwf	fsr2l,f,c
 10256  001854  5008               	movf	i2UART_buff_get@_this+1,w,c
 10257  001856  22DA               	addwfc	fsr2h,f,c
 10258  001858  06DE               	decf	postinc2,f,c
 10259  00185A  0E00               	movlw	0
 10260  00185C  5ADD               	subwfb	postdec2,f,c
 10261                           
 10262                           ;UART.c: 86: } else {
 10263  00185E  D002               	goto	i2l597
 10264  001860                     i2l3548:
 10265                           
 10266                           ;UART.c: 87: c = 0;
 10267  001860  0E00               	movlw	0
 10268  001862  6E0B               	movwf	i2UART_buff_get@c,c
 10269  001864                     i2l597:
 10270                           
 10271                           ;UART.c: 88: }
 10272                           ;UART.c: 89: return (c);
 10273  001864  500B               	movf	i2UART_buff_get@c,w,c
 10274  001866  0012               	return	
 10275  001868                     __end_ofi2_UART_buff_get:
 10276                           	opt stack 0
 10277                           pclatu	equ	0xFFB
 10278                           pclath	equ	0xFFA
 10279                           tblptru	equ	0xFF8
 10280                           tblptrh	equ	0xFF7
 10281                           tblptrl	equ	0xFF6
 10282                           tablat	equ	0xFF5
 10283                           prodh	equ	0xFF4
 10284                           prodl	equ	0xFF3
 10285                           intcon	equ	0xFF2
 10286                           intcon2	equ	0xFF1
 10287                           postinc0	equ	0xFEE
 10288                           fsr0h	equ	0xFEA
 10289                           fsr0l	equ	0xFE9
 10290                           wreg	equ	0xFE8
 10291                           indf1	equ	0xFE7
 10292                           postdec1	equ	0xFE5
 10293                           fsr1h	equ	0xFE2
 10294                           fsr1l	equ	0xFE1
 10295                           indf2	equ	0xFDF
 10296                           postinc2	equ	0xFDE
 10297                           postdec2	equ	0xFDD
 10298                           plusw2	equ	0xFDB
 10299                           fsr2h	equ	0xFDA
 10300                           fsr2l	equ	0xFD9
 10301                           status	equ	0xFD8
 10302                           
 10303 ;; *************** function _EUSART1_Receive_ISR *****************
 10304 ;; Defined at:
 10305 ;;		line 138 in file "UART.c"
 10306 ;; Parameters:    Size  Location     Type
 10307 ;;		None
 10308 ;; Auto vars:     Size  Location     Type
 10309 ;;  data            1   11[COMRAM] unsigned char 
 10310 ;; Return value:  Size  Location     Type
 10311 ;;                  1    wreg      void 
 10312 ;; Registers used:
 10313 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10314 ;; Tracked objects:
 10315 ;;		On entry : 0/0
 10316 ;;		On exit  : 0/0
 10317 ;;		Unchanged: 0/0
 10318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10319 ;;      Params:         0       0       0       0       0       0       0
 10320 ;;      Locals:         1       0       0       0       0       0       0
 10321 ;;      Temps:          0       0       0       0       0       0       0
 10322 ;;      Totals:         1       0       0       0       0       0       0
 10323 ;;Total ram usage:        1 bytes
 10324 ;; Hardware stack levels used:    1
 10325 ;; Hardware stack levels required when called:    2
 10326 ;; This function calls:
 10327 ;;		i2_UART_buff_put
 10328 ;; This function is called by:
 10329 ;;		_INTERRUPT_InterruptManager
 10330 ;; This function uses a non-reentrant model
 10331 ;;
 10332                           
 10333                           	psect	text64
 10334  00210C                     __ptext64:
 10335                           	opt stack 0
 10336  00210C                     _EUSART1_Receive_ISR:
 10337                           	opt stack 20
 10338                           
 10339                           ;UART.c: 139: if (1 == RC1STAbits.OERR) {
 10340                           
 10341                           ;incstack = 0
 10342  00210C  A2AB               	btfss	4011,1,c	;volatile
 10343  00210E  D002               	goto	i2l628
 10344                           
 10345                           ;UART.c: 142: RC1STAbits.CREN = 0;
 10346  002110  98AB               	bcf	4011,4,c	;volatile
 10347                           
 10348                           ;UART.c: 143: RC1STAbits.CREN = 1;
 10349  002112  88AB               	bsf	4011,4,c	;volatile
 10350  002114                     i2l628:
 10351                           
 10352                           ;UART.c: 144: }
 10353                           ;UART.c: 145: unsigned char data = RCREG1;
 10354  002114  CFAE F00C          	movff	4014,EUSART1_Receive_ISR@data	;volatile
 10355                           
 10356                           ;UART.c: 146: UART_buff_put(&input_buffer, data);
 10357  002118  0E3C               	movlw	low _input_buffer
 10358  00211A  6E07               	movwf	i2UART_buff_put@_this,c
 10359  00211C  0E01               	movlw	high _input_buffer
 10360  00211E  6E08               	movwf	i2UART_buff_put@_this+1,c
 10361  002120  C00C  F009         	movff	EUSART1_Receive_ISR@data,i2UART_buff_put@c
 10362  002124  ECB8  F007         	call	i2_UART_buff_put	;wreg free
 10363  002128  0012               	return		;funcret
 10364  00212A                     __end_of_EUSART1_Receive_ISR:
 10365                           	opt stack 0
 10366                           pclatu	equ	0xFFB
 10367                           pclath	equ	0xFFA
 10368                           tblptru	equ	0xFF8
 10369                           tblptrh	equ	0xFF7
 10370                           tblptrl	equ	0xFF6
 10371                           tablat	equ	0xFF5
 10372                           prodh	equ	0xFF4
 10373                           prodl	equ	0xFF3
 10374                           intcon	equ	0xFF2
 10375                           intcon2	equ	0xFF1
 10376                           postinc0	equ	0xFEE
 10377                           fsr0h	equ	0xFEA
 10378                           fsr0l	equ	0xFE9
 10379                           wreg	equ	0xFE8
 10380                           indf1	equ	0xFE7
 10381                           postdec1	equ	0xFE5
 10382                           fsr1h	equ	0xFE2
 10383                           fsr1l	equ	0xFE1
 10384                           indf2	equ	0xFDF
 10385                           postinc2	equ	0xFDE
 10386                           postdec2	equ	0xFDD
 10387                           plusw2	equ	0xFDB
 10388                           fsr2h	equ	0xFDA
 10389                           fsr2l	equ	0xFD9
 10390                           status	equ	0xFD8
 10391                           
 10392 ;; *************** function i2_UART_buff_put *****************
 10393 ;; Defined at:
 10394 ;;		line 67 in file "UART.c"
 10395 ;; Parameters:    Size  Location     Type
 10396 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
 10397 ;;		 -> output_buffer(106), input_buffer(106), 
 10398 ;;  c               1    8[COMRAM] const unsigned char 
 10399 ;; Auto vars:     Size  Location     Type
 10400 ;;		None
 10401 ;; Return value:  Size  Location     Type
 10402 ;;                  1    wreg      void 
 10403 ;; Registers used:
 10404 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10405 ;; Tracked objects:
 10406 ;;		On entry : 0/0
 10407 ;;		On exit  : 0/0
 10408 ;;		Unchanged: 0/0
 10409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10410 ;;      Params:         3       0       0       0       0       0       0
 10411 ;;      Locals:         0       0       0       0       0       0       0
 10412 ;;      Temps:          2       0       0       0       0       0       0
 10413 ;;      Totals:         5       0       0       0       0       0       0
 10414 ;;Total ram usage:        5 bytes
 10415 ;; Hardware stack levels used:    1
 10416 ;; Hardware stack levels required when called:    1
 10417 ;; This function calls:
 10418 ;;		i2_UART_buff_modulo_inc
 10419 ;; This function is called by:
 10420 ;;		_EUSART1_Receive_ISR
 10421 ;; This function uses a non-reentrant model
 10422 ;;
 10423                           
 10424                           	psect	text65
 10425  000F70                     __ptext65:
 10426                           	opt stack 0
 10427  000F70                     i2_UART_buff_put:
 10428                           	opt stack 20
 10429                           
 10430                           ;UART.c: 68: if (_this->count < 100) {
 10431                           
 10432                           ;incstack = 0
 10433  000F70  EE20 F068          	lfsr	2,104
 10434  000F74  5007               	movf	i2UART_buff_put@_this,w,c
 10435  000F76  26D9               	addwf	fsr2l,f,c
 10436  000F78  5008               	movf	i2UART_buff_put@_this+1,w,c
 10437  000F7A  22DA               	addwfc	fsr2h,f,c
 10438  000F7C  0E01               	movlw	1
 10439  000F7E  BEDB               	btfsc	plusw2,7,c
 10440  000F80  D007               	goto	i2l3528
 10441  000F82  0E01               	movlw	1
 10442  000F84  50DB               	movf	plusw2,w,c
 10443  000F86  E13A               	bnz	i2l3534
 10444  000F88  0E64               	movlw	100
 10445  000F8A  5CDE               	subwf	postinc2,w,c
 10446  000F8C  B0D8               	btfsc	status,0,c
 10447  000F8E  D036               	goto	i2l3534
 10448  000F90                     i2l3528:
 10449                           
 10450                           ;UART.c: 69: _this->buf[_this->head] = c;
 10451  000F90  EE20 F064          	lfsr	2,100
 10452  000F94  5007               	movf	i2UART_buff_put@_this,w,c
 10453  000F96  26D9               	addwf	fsr2l,f,c
 10454  000F98  5008               	movf	i2UART_buff_put@_this+1,w,c
 10455  000F9A  22DA               	addwfc	fsr2h,f,c
 10456  000F9C  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
 10457  000FA0  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
 10458  000FA4  500A               	movf	??i2_UART_buff_put,w,c
 10459  000FA6  2407               	addwf	i2UART_buff_put@_this,w,c
 10460  000FA8  6ED9               	movwf	fsr2l,c
 10461  000FAA  500B               	movf	??i2_UART_buff_put+1,w,c
 10462  000FAC  2008               	addwfc	i2UART_buff_put@_this+1,w,c
 10463  000FAE  6EDA               	movwf	fsr2h,c
 10464  000FB0  C009  FFDF         	movff	i2UART_buff_put@c,indf2
 10465                           
 10466                           ;UART.c: 70: _this->head = UART_buff_modulo_inc(_this->head, 100);
 10467  000FB4  EE20 F064          	lfsr	2,100
 10468  000FB8  5007               	movf	i2UART_buff_put@_this,w,c
 10469  000FBA  26D9               	addwf	fsr2l,f,c
 10470  000FBC  5008               	movf	i2UART_buff_put@_this+1,w,c
 10471  000FBE  22DA               	addwfc	fsr2h,f,c
 10472  000FC0  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 10473  000FC4  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 10474  000FC8  0E00               	movlw	0
 10475  000FCA  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 10476  000FCC  0E64               	movlw	100
 10477  000FCE  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 10478  000FD0  EC1D  F010         	call	i2_UART_buff_modulo_inc	;wreg free
 10479  000FD4  EE20 F064          	lfsr	2,100
 10480  000FD8  5007               	movf	i2UART_buff_put@_this,w,c
 10481  000FDA  26D9               	addwf	fsr2l,f,c
 10482  000FDC  5008               	movf	i2UART_buff_put@_this+1,w,c
 10483  000FDE  22DA               	addwfc	fsr2h,f,c
 10484  000FE0  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 10485  000FE4  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 10486                           
 10487                           ;UART.c: 71: ++_this->count;
 10488  000FE8  EE20 F068          	lfsr	2,104
 10489  000FEC  5007               	movf	i2UART_buff_put@_this,w,c
 10490  000FEE  26D9               	addwf	fsr2l,f,c
 10491  000FF0  5008               	movf	i2UART_buff_put@_this+1,w,c
 10492  000FF2  22DA               	addwfc	fsr2h,f,c
 10493  000FF4  2ADE               	incf	postinc2,f,c
 10494  000FF6  0E00               	movlw	0
 10495  000FF8  22DD               	addwfc	postdec2,f,c
 10496                           
 10497                           ;UART.c: 72: } else {
 10498  000FFA  0012               	return	
 10499  000FFC                     i2l3534:
 10500                           
 10501                           ;UART.c: 73: _this->buf[_this->head] = c;
 10502  000FFC  EE20 F064          	lfsr	2,100
 10503  001000  5007               	movf	i2UART_buff_put@_this,w,c
 10504  001002  26D9               	addwf	fsr2l,f,c
 10505  001004  5008               	movf	i2UART_buff_put@_this+1,w,c
 10506  001006  22DA               	addwfc	fsr2h,f,c
 10507  001008  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
 10508  00100C  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
 10509  001010  500A               	movf	??i2_UART_buff_put,w,c
 10510  001012  2407               	addwf	i2UART_buff_put@_this,w,c
 10511  001014  6ED9               	movwf	fsr2l,c
 10512  001016  500B               	movf	??i2_UART_buff_put+1,w,c
 10513  001018  2008               	addwfc	i2UART_buff_put@_this+1,w,c
 10514  00101A  6EDA               	movwf	fsr2h,c
 10515  00101C  C009  FFDF         	movff	i2UART_buff_put@c,indf2
 10516                           
 10517                           ;UART.c: 74: _this->head = UART_buff_modulo_inc(_this->head, 100);
 10518  001020  EE20 F064          	lfsr	2,100
 10519  001024  5007               	movf	i2UART_buff_put@_this,w,c
 10520  001026  26D9               	addwf	fsr2l,f,c
 10521  001028  5008               	movf	i2UART_buff_put@_this+1,w,c
 10522  00102A  22DA               	addwfc	fsr2h,f,c
 10523  00102C  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 10524  001030  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 10525  001034  0E00               	movlw	0
 10526  001036  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 10527  001038  0E64               	movlw	100
 10528  00103A  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 10529  00103C  EC1D  F010         	call	i2_UART_buff_modulo_inc	;wreg free
 10530  001040  EE20 F064          	lfsr	2,100
 10531  001044  5007               	movf	i2UART_buff_put@_this,w,c
 10532  001046  26D9               	addwf	fsr2l,f,c
 10533  001048  5008               	movf	i2UART_buff_put@_this+1,w,c
 10534  00104A  22DA               	addwfc	fsr2h,f,c
 10535  00104C  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 10536  001050  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 10537                           
 10538                           ;UART.c: 75: _this->tail = UART_buff_modulo_inc(_this->tail, 100);
 10539  001054  EE20 F066          	lfsr	2,102
 10540  001058  5007               	movf	i2UART_buff_put@_this,w,c
 10541  00105A  26D9               	addwf	fsr2l,f,c
 10542  00105C  5008               	movf	i2UART_buff_put@_this+1,w,c
 10543  00105E  22DA               	addwfc	fsr2h,f,c
 10544  001060  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 10545  001064  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 10546  001068  0E00               	movlw	0
 10547  00106A  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 10548  00106C  0E64               	movlw	100
 10549  00106E  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 10550  001070  EC1D  F010         	call	i2_UART_buff_modulo_inc	;wreg free
 10551  001074  EE20 F066          	lfsr	2,102
 10552  001078  5007               	movf	i2UART_buff_put@_this,w,c
 10553  00107A  26D9               	addwf	fsr2l,f,c
 10554  00107C  5008               	movf	i2UART_buff_put@_this+1,w,c
 10555  00107E  22DA               	addwfc	fsr2h,f,c
 10556  001080  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 10557  001084  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 10558  001088  0012               	return	
 10559  00108A                     __end_ofi2_UART_buff_put:
 10560                           	opt stack 0
 10561                           pclatu	equ	0xFFB
 10562                           pclath	equ	0xFFA
 10563                           tblptru	equ	0xFF8
 10564                           tblptrh	equ	0xFF7
 10565                           tblptrl	equ	0xFF6
 10566                           tablat	equ	0xFF5
 10567                           prodh	equ	0xFF4
 10568                           prodl	equ	0xFF3
 10569                           intcon	equ	0xFF2
 10570                           intcon2	equ	0xFF1
 10571                           postinc0	equ	0xFEE
 10572                           fsr0h	equ	0xFEA
 10573                           fsr0l	equ	0xFE9
 10574                           wreg	equ	0xFE8
 10575                           indf1	equ	0xFE7
 10576                           postdec1	equ	0xFE5
 10577                           fsr1h	equ	0xFE2
 10578                           fsr1l	equ	0xFE1
 10579                           indf2	equ	0xFDF
 10580                           postinc2	equ	0xFDE
 10581                           postdec2	equ	0xFDD
 10582                           plusw2	equ	0xFDB
 10583                           fsr2h	equ	0xFDA
 10584                           fsr2l	equ	0xFD9
 10585                           status	equ	0xFD8
 10586                           
 10587 ;; *************** function i2_UART_buff_modulo_inc *****************
 10588 ;; Defined at:
 10589 ;;		line 105 in file "UART.c"
 10590 ;; Parameters:    Size  Location     Type
 10591 ;;  value           2    0[COMRAM] const unsigned int 
 10592 ;;  modulus         2    2[COMRAM] const unsigned int 
 10593 ;; Auto vars:     Size  Location     Type
 10594 ;;  UART_buff_mo    2    4[COMRAM] unsigned int 
 10595 ;; Return value:  Size  Location     Type
 10596 ;;                  2    0[COMRAM] unsigned int 
 10597 ;; Registers used:
 10598 ;;		wreg, status,2, status,0
 10599 ;; Tracked objects:
 10600 ;;		On entry : 0/0
 10601 ;;		On exit  : 0/0
 10602 ;;		Unchanged: 0/0
 10603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10604 ;;      Params:         4       0       0       0       0       0       0
 10605 ;;      Locals:         2       0       0       0       0       0       0
 10606 ;;      Temps:          0       0       0       0       0       0       0
 10607 ;;      Totals:         6       0       0       0       0       0       0
 10608 ;;Total ram usage:        6 bytes
 10609 ;; Hardware stack levels used:    1
 10610 ;; This function calls:
 10611 ;;		Nothing
 10612 ;; This function is called by:
 10613 ;;		i2_UART_buff_put
 10614 ;;		i2_UART_buff_get
 10615 ;; This function uses a non-reentrant model
 10616 ;;
 10617                           
 10618                           	psect	text66
 10619  00203A                     __ptext66:
 10620                           	opt stack 0
 10621  00203A                     i2_UART_buff_modulo_inc:
 10622                           	opt stack 20
 10623                           
 10624                           ;UART.c: 106: unsigned int my_value = value + 1;
 10625                           
 10626                           ;incstack = 0
 10627  00203A  0E01               	movlw	1
 10628  00203C  2401               	addwf	i2UART_buff_modulo_inc@value,w,c
 10629  00203E  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
 10630  002040  0E00               	movlw	0
 10631  002042  2002               	addwfc	i2UART_buff_modulo_inc@value+1,w,c
 10632  002044  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
 10633                           
 10634                           ;UART.c: 107: if (my_value >= modulus) {
 10635  002046  5003               	movf	i2UART_buff_modulo_inc@modulus,w,c
 10636  002048  5C05               	subwf	i2UART_buff_modulo_inc@my_value,w,c
 10637  00204A  5004               	movf	i2UART_buff_modulo_inc@modulus+1,w,c
 10638  00204C  5806               	subwfb	i2UART_buff_modulo_inc@my_value+1,w,c
 10639  00204E  A0D8               	btfss	status,0,c
 10640  002050  D004               	goto	i2l3238
 10641                           
 10642                           ;UART.c: 108: my_value = 0;
 10643  002052  0E00               	movlw	0
 10644  002054  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
 10645  002056  0E00               	movlw	0
 10646  002058  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
 10647  00205A                     i2l3238:
 10648                           
 10649                           ;UART.c: 109: }
 10650                           ;UART.c: 110: return (my_value);
 10651  00205A  C005  F001         	movff	i2UART_buff_modulo_inc@my_value,?i2_UART_buff_modulo_inc
 10652  00205E  C006  F002         	movff	i2UART_buff_modulo_inc@my_value+1,?i2_UART_buff_modulo_inc+1
 10653  002062  0012               	return	
 10654  002064                     __end_ofi2_UART_buff_modulo_inc:
 10655                           	opt stack 0
 10656                           pclatu	equ	0xFFB
 10657                           pclath	equ	0xFFA
 10658                           tblptru	equ	0xFF8
 10659                           tblptrh	equ	0xFF7
 10660                           tblptrl	equ	0xFF6
 10661                           tablat	equ	0xFF5
 10662                           prodh	equ	0xFF4
 10663                           prodl	equ	0xFF3
 10664                           intcon	equ	0xFF2
 10665                           intcon2	equ	0xFF1
 10666                           postinc0	equ	0xFEE
 10667                           fsr0h	equ	0xFEA
 10668                           fsr0l	equ	0xFE9
 10669                           wreg	equ	0xFE8
 10670                           indf1	equ	0xFE7
 10671                           postdec1	equ	0xFE5
 10672                           fsr1h	equ	0xFE2
 10673                           fsr1l	equ	0xFE1
 10674                           indf2	equ	0xFDF
 10675                           postinc2	equ	0xFDE
 10676                           postdec2	equ	0xFDD
 10677                           plusw2	equ	0xFDB
 10678                           fsr2h	equ	0xFDA
 10679                           fsr2l	equ	0xFD9
 10680                           status	equ	0xFD8
 10681                           
 10682 ;; *************** function _ADC_ISR *****************
 10683 ;; Defined at:
 10684 ;;		line 130 in file "mcc_generated_files/adc.c"
 10685 ;; Parameters:    Size  Location     Type
 10686 ;;		None
 10687 ;; Auto vars:     Size  Location     Type
 10688 ;;		None
 10689 ;; Return value:  Size  Location     Type
 10690 ;;                  1    wreg      void 
 10691 ;; Registers used:
 10692 ;;		None
 10693 ;; Tracked objects:
 10694 ;;		On entry : 0/0
 10695 ;;		On exit  : 0/0
 10696 ;;		Unchanged: 0/0
 10697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10698 ;;      Params:         0       0       0       0       0       0       0
 10699 ;;      Locals:         0       0       0       0       0       0       0
 10700 ;;      Temps:          0       0       0       0       0       0       0
 10701 ;;      Totals:         0       0       0       0       0       0       0
 10702 ;;Total ram usage:        0 bytes
 10703 ;; Hardware stack levels used:    1
 10704 ;; This function calls:
 10705 ;;		Nothing
 10706 ;; This function is called by:
 10707 ;;		_INTERRUPT_InterruptManager
 10708 ;; This function uses a non-reentrant model
 10709 ;;
 10710                           
 10711                           	psect	text67
 10712  002244                     __ptext67:
 10713                           	opt stack 0
 10714  002244                     _ADC_ISR:
 10715                           	opt stack 22
 10716                           
 10717                           ;adc.c: 133: PIR1bits.ADIF = 0;
 10718                           
 10719                           ;incstack = 0
 10720  002244  9C9E               	bcf	3998,6,c	;volatile
 10721  002246  0012               	return		;funcret
 10722  002248                     __end_of_ADC_ISR:
 10723                           	opt stack 0
 10724  0000                     pclatu	equ	0xFFB
 10725                           pclath	equ	0xFFA
 10726                           tblptru	equ	0xFF8
 10727                           tblptrh	equ	0xFF7
 10728                           tblptrl	equ	0xFF6
 10729                           tablat	equ	0xFF5
 10730                           prodh	equ	0xFF4
 10731                           prodl	equ	0xFF3
 10732                           intcon	equ	0xFF2
 10733                           intcon2	equ	0xFF1
 10734                           postinc0	equ	0xFEE
 10735                           fsr0h	equ	0xFEA
 10736                           fsr0l	equ	0xFE9
 10737                           wreg	equ	0xFE8
 10738                           indf1	equ	0xFE7
 10739                           postdec1	equ	0xFE5
 10740                           fsr1h	equ	0xFE2
 10741                           fsr1l	equ	0xFE1
 10742                           indf2	equ	0xFDF
 10743                           postinc2	equ	0xFDE
 10744                           postdec2	equ	0xFDD
 10745                           plusw2	equ	0xFDB
 10746                           fsr2h	equ	0xFDA
 10747                           fsr2l	equ	0xFD9
 10748                           status	equ	0xFD8
 10749                           pclatu	equ	0xFFB
 10750                           pclath	equ	0xFFA
 10751                           tblptru	equ	0xFF8
 10752                           tblptrh	equ	0xFF7
 10753                           tblptrl	equ	0xFF6
 10754                           tablat	equ	0xFF5
 10755                           prodh	equ	0xFF4
 10756                           prodl	equ	0xFF3
 10757                           intcon	equ	0xFF2
 10758                           intcon2	equ	0xFF1
 10759                           postinc0	equ	0xFEE
 10760                           fsr0h	equ	0xFEA
 10761                           fsr0l	equ	0xFE9
 10762                           wreg	equ	0xFE8
 10763                           indf1	equ	0xFE7
 10764                           postdec1	equ	0xFE5
 10765                           fsr1h	equ	0xFE2
 10766                           fsr1l	equ	0xFE1
 10767                           indf2	equ	0xFDF
 10768                           postinc2	equ	0xFDE
 10769                           postdec2	equ	0xFDD
 10770                           plusw2	equ	0xFDB
 10771                           fsr2h	equ	0xFDA
 10772                           fsr2l	equ	0xFD9
 10773                           status	equ	0xFD8
 10774                           
 10775                           	psect	rparam
 10776  0000                     pclatu	equ	0xFFB
 10777                           pclath	equ	0xFFA
 10778                           tblptru	equ	0xFF8
 10779                           tblptrh	equ	0xFF7
 10780                           tblptrl	equ	0xFF6
 10781                           tablat	equ	0xFF5
 10782                           prodh	equ	0xFF4
 10783                           prodl	equ	0xFF3
 10784                           intcon	equ	0xFF2
 10785                           intcon2	equ	0xFF1
 10786                           postinc0	equ	0xFEE
 10787                           fsr0h	equ	0xFEA
 10788                           fsr0l	equ	0xFE9
 10789                           wreg	equ	0xFE8
 10790                           indf1	equ	0xFE7
 10791                           postdec1	equ	0xFE5
 10792                           fsr1h	equ	0xFE2
 10793                           fsr1l	equ	0xFE1
 10794                           indf2	equ	0xFDF
 10795                           postinc2	equ	0xFDE
 10796                           postdec2	equ	0xFDD
 10797                           plusw2	equ	0xFDB
 10798                           fsr2h	equ	0xFDA
 10799                           fsr2l	equ	0xFD9
 10800                           status	equ	0xFD8
 10801                           
 10802                           	psect	temp
 10803  000042                     btemp:
 10804                           	opt stack 0
 10805  000042                     	ds	1
 10806  0000                     int$flags	set	btemp
 10807                           pclatu	equ	0xFFB
 10808                           pclath	equ	0xFFA
 10809                           tblptru	equ	0xFF8
 10810                           tblptrh	equ	0xFF7
 10811                           tblptrl	equ	0xFF6
 10812                           tablat	equ	0xFF5
 10813                           prodh	equ	0xFF4
 10814                           prodl	equ	0xFF3
 10815                           intcon	equ	0xFF2
 10816                           intcon2	equ	0xFF1
 10817                           postinc0	equ	0xFEE
 10818                           fsr0h	equ	0xFEA
 10819                           fsr0l	equ	0xFE9
 10820                           wreg	equ	0xFE8
 10821                           indf1	equ	0xFE7
 10822                           postdec1	equ	0xFE5
 10823                           fsr1h	equ	0xFE2
 10824                           fsr1l	equ	0xFE1
 10825                           indf2	equ	0xFDF
 10826                           postinc2	equ	0xFDE
 10827                           postdec2	equ	0xFDD
 10828                           plusw2	equ	0xFDB
 10829                           fsr2h	equ	0xFDA
 10830                           fsr2l	equ	0xFD9
 10831                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        7
    BSS         400
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     44      65
    BANK0           160    103     157
    BANK1           256     25     251
    BANK2           256      0     106
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 106
		 -> output_buffer(BANK2[106]), input_buffer(BANK1[106]), 

    memset@p	PTR unsigned char  size(2) Largest target is 106
		 -> output_buffer(BANK2[106]), input_buffer(BANK1[106]), 

    SetDataDict@DataArray	PTR unsigned char  size(2) Largest target is 4
		 -> ComController@DataRecived(BANK1[4]), updateComms@DataGet(BANK0[2]), 

    GetDataDict@DataArray	PTR unsigned char  size(2) Largest target is 4
		 -> ComController@DataToSend_1658(BANK1[4]), ComController@DataToSend(BANK1[4]), updateComms@DataGet(BANK0[2]), 

    cobs_decode@dst_write_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK1[30]), 

    cobs_decode@dst_buf_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK1[30]), 

    cobs_decode@dst_buf_end_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK1[30]), 

    cobs_decode@src_ptr	PTR const unsigned char  size(2) Largest target is 30
		 -> ReciveArray(BANK1[30]), 

    cobs_decode@src_end_ptr	PTR const unsigned char  size(2) Largest target is 30
		 -> ReciveArray(BANK1[30]), 

    cobs_encode@dst_write_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> sendData@COBSArray(BANK0[30]), 

    cobs_encode@dst_code_write_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> sendData@COBSArray(BANK0[30]), 

    cobs_encode@dst_buf_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> sendData@COBSArray(BANK0[30]), 

    cobs_encode@dst_buf_end_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> sendData@COBSArray(BANK0[30]), 

    cobs_encode@src_ptr	PTR const unsigned char  size(2) Largest target is 30
		 -> sendData@SendArray(BANK0[30]), 

    cobs_encode@src_end_ptr	PTR const unsigned char  size(2) Largest target is 30
		 -> sendData@SendArray(BANK0[30]), 

    ComController@DTI	PTR unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK1[30]), 

    sendData@DTS	PTR unsigned char  size(2) Largest target is 4
		 -> ComController@DataToSend_1658(BANK1[4]), ComController@DataToSend(BANK1[4]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK1[30]), sendData@SendArray(BANK0[30]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 106
		 -> output_buffer(BANK2[106]), input_buffer(BANK1[106]), 

    UART_buff_flush@_this	PTR struct UART_ring_buff size(2) Largest target is 106
		 -> input_buffer(BANK1[106]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 106
		 -> output_buffer(BANK2[106]), input_buffer(BANK1[106]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 106
		 -> output_buffer(BANK2[106]), input_buffer(BANK1[106]), 

    sp__memset	PTR void  size(2) Largest target is 106
		 -> output_buffer(BANK2[106]), input_buffer(BANK1[106]), 

    UART_buff_init@_this	PTR struct UART_ring_buff size(2) Largest target is 106
		 -> output_buffer(BANK2[106]), input_buffer(BANK1[106]), 


Critical Paths under _main in COMRAM

    _updateComms->_processPowerRequest
    _Receive_get->_UART_buff_get
    _Receive_available->_UART_buff_size
    _ComController->_sendData
    _sendData->_Send_put
    _Send_put->_UART_buff_get
    _Send_put->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc
    _UART_buff_get->_UART_buff_modulo_inc
    _ClearBuffer->_UART_buff_flush
    _UART_buff_flush->_memset
    _processPowerRequest->_EnableSlavePower
    _FaultsCollector->_GetPDUFault
    _EUSART1_Initialize->_UART_buff_init
    _UART_buff_init->_memset
    _Update->_writeRegisters
    _StartUp595->_Clear595
    _Clear595->_writeRegisters
    _writeRegisters->_Delay
    _EnableSlavePower->_SetPin595
    _ComputeStorageData->_DATAEE_ReadByte
    _CoolingStop->_PotClear
    _CoolingStart->_PotSetpoint
    _PotSetpoint->_Delay
    _PotClear->_Delay

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR1_ISR->_ReadCurrent
    i2_Update->i2_writeRegisters
    i2_writeRegisters->i2_Delay
    _FuseSystem->___wmul
    _EUSART1_Transmit_ISR->i2_UART_buff_get
    i2_UART_buff_get->i2_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->i2_UART_buff_put
    i2_UART_buff_put->i2_UART_buff_modulo_inc

Critical Paths under _main in BANK0

    _main->_updateComms
    _updateComms->_receiveData
    _receiveData->_ComController
    _ComController->_sendData
    _sendData->_cobs_encode
    _CoolingStart->_PotSetpoint

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _updateComms->_receiveData
    _receiveData->_ComController

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   63882
                                             20 BANK1      5     5      0
                 _ComputeStorageData
                       _CoolingCheck
                       _CoolingStart
                        _CoolingStop
                         _PDUStartup
                 _PWM4_LoadDutyValue
                        _PotSetpoint
                  _SYSTEM_Initialize
                        _updateComms
 ---------------------------------------------------------------------------------
 (1) _updateComms                                          2     2      0   34757
                                            101 BANK0      2     2      0
                    _FaultsCollector
                        _GetDataDict
                        _SetDataDict
                _processPowerRequest
                        _receiveData
 ---------------------------------------------------------------------------------
 (2) _receiveData                                         12    12      0   17556
                                             96 BANK0      5     5      0
                                             13 BANK1      7     7      0
                               _CRC8
                        _ClearBuffer
                      _ComController
                  _Receive_available
                        _Receive_get
                        _cobs_decode
 ---------------------------------------------------------------------------------
 (3) _cobs_decode                                         24    16      8    1783
                                             28 COMRAM    10     2      8
                                              0 BANK0     14    14      0
 ---------------------------------------------------------------------------------
 (3) _Receive_get                                          0     0      0    1308
                      _UART_buff_get
 ---------------------------------------------------------------------------------
 (3) _Receive_available                                    2     0      2     176
                                             30 COMRAM     2     0      2
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (4) _UART_buff_size                                       2     0      2     176
                                             28 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _ComController                                       19    15      4   12407
                                             90 BANK0      6     2      4
                                              0 BANK1     13    13      0
                              _Delay
                        _GetDataDict
                        _SetDataDict
                           _sendData
 ---------------------------------------------------------------------------------
 (4) _sendData                                            81    74      7    7337
                                             40 COMRAM     4     4      0
                                             13 BANK0     77    70      7
                               _CRC8
                           _Send_put
                        _cobs_encode
 ---------------------------------------------------------------------------------
 (5) _cobs_encode                                         23    15      8    1613
                                             28 COMRAM    10     2      8
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (5) _Send_put                                             1     1      0    2913
                                             39 COMRAM     1     1      0
                      _UART_buff_get
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (6) _UART_buff_put                                        5     2      3    1574
                                             34 COMRAM     5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (4) _UART_buff_get                                        5     3      2    1308
                                             34 COMRAM     5     3      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _UART_buff_modulo_inc                                 6     2      4     850
                                             28 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _CRC8                                                 7     4      3     604
                                             28 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (4) _SetDataDict                                          8     4      4    1042
                                             28 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (4) _GetDataDict                                          8     4      4    1312
                                             28 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _ClearBuffer                                          0     0      0    1012
                    _UART_buff_flush
 ---------------------------------------------------------------------------------
 (4) _UART_buff_flush                                      4     0      4    1012
                                             36 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (2) _processPowerRequest                                  3     3      0   14501
                                             41 COMRAM     3     3      0
                   _EnableSlavePower
                             _Update
 ---------------------------------------------------------------------------------
 (2) _FaultsCollector                                      7     7      0     232
                                             29 COMRAM     7     7      0
                        _GetPDUFault
 ---------------------------------------------------------------------------------
 (3) _GetPDUFault                                          1     1      0      31
                                             28 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     888
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM4_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0     888
                     _UART_buff_init
 ---------------------------------------------------------------------------------
 (3) _UART_buff_init                                       2     0      2     888
                                             36 COMRAM     2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               8     2      6     677
                                             28 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PDUStartup                                           0     0      0   18509
                 _ComputeStorageData
                   _EnableSlavePower
                         _StartUp595
                             _Update
 ---------------------------------------------------------------------------------
 (3) _Update                                               0     0      0    2035
                     _writeRegisters
 ---------------------------------------------------------------------------------
 (2) _StartUp595                                           0     0      0    4002
                           _Clear595
                              _Delay
 ---------------------------------------------------------------------------------
 (3) _Clear595                                             2     2      0    2134
                                             41 COMRAM     2     2      0
                     _writeRegisters
 ---------------------------------------------------------------------------------
 (4) _writeRegisters                                       4     4      0    2035
                                             37 COMRAM     4     4      0
                              _Delay
 ---------------------------------------------------------------------------------
 (3) _EnableSlavePower                                     3     1      2   12311
                                             38 COMRAM     3     1      2
                          _SetPin595
 ---------------------------------------------------------------------------------
 (4) _SetPin595                                           10     4      6   10623
                                             28 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (2) _ComputeStorageData                                   4     4      0     161
                                             29 COMRAM     4     4      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_ReadByte                                      1     1      0      31
                                             28 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _CoolingStop                                          0     0      0    2268
                 _PWM4_LoadDutyValue
                           _PotClear
 ---------------------------------------------------------------------------------
 (1) _CoolingStart                                         0     0      0    4579
                 _PWM4_LoadDutyValue
                           _PotClear
                        _PotSetpoint
 ---------------------------------------------------------------------------------
 (1) _PotSetpoint                                         10     8      2    2311
                                             37 COMRAM     4     2      2
                                              0 BANK0      6     6      0
                              _Delay
 ---------------------------------------------------------------------------------
 (2) _PotClear                                             2     2      0    1936
                                             37 COMRAM     2     2      0
                              _Delay
 ---------------------------------------------------------------------------------
 (4) _Delay                                                9     5      4    1868
                                             28 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (1) _PWM4_LoadDutyValue                                   4     2      2     332
                                             28 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _CoolingCheck                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                          14    14      0    6300
                                             14 COMRAM    14    14      0
                            _ADC_ISR
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR1_ISR                                             0     0      0    5091
                         _FuseSystem
                        _ReadCurrent
 ---------------------------------------------------------------------------------
 (10) _ReadCurrent                                         1     1      0    4644
                                             13 COMRAM     1     1      0
                  _ADC_GetConversion
                        i2_SetPin595
                           i2_Update
 ---------------------------------------------------------------------------------
 (11) i2_Update                                            0     0      0     212
                   i2_writeRegisters
 ---------------------------------------------------------------------------------
 (12) i2_writeRegisters                                    4     4      0     212
                                              9 COMRAM     4     4      0
                            i2_Delay
 ---------------------------------------------------------------------------------
 (13) i2_Delay                                             9     5      4      98
                                              0 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (11) i2_SetPin595                                        10     4      6    4278
                                              0 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (11) _ADC_GetConversion                                   5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (10) _FuseSystem                                          4     4      0     447
                                              6 COMRAM     4     4      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (11) ___wmul                                              6     2      4     311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Transmit_ISR                                 0     0      0     528
                    i2_UART_buff_get
                   i2_UART_buff_size
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_size                                    2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_get                                     5     3      2     480
                                              6 COMRAM     5     3      2
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Receive_ISR                                  1     1      0     681
                                             11 COMRAM     1     1      0
                    i2_UART_buff_put
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_put                                     5     2      3     658
                                              6 COMRAM     5     2      3
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (11) i2_UART_buff_modulo_inc                              6     2      4     298
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _ADC_ISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ComputeStorageData
     _DATAEE_ReadByte
   _CoolingCheck
   _CoolingStart
     _PWM4_LoadDutyValue
     _PotClear
       _Delay
     _PotSetpoint
       _Delay
   _CoolingStop
     _PWM4_LoadDutyValue
     _PotClear
       _Delay
   _PDUStartup
     _ComputeStorageData
       _DATAEE_ReadByte
     _EnableSlavePower
       _SetPin595
     _StartUp595
       _Clear595
         _writeRegisters
           _Delay
       _Delay
     _Update
       _writeRegisters
         _Delay
   _PWM4_LoadDutyValue
   _PotSetpoint
     _Delay
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
       _UART_buff_init
         _memset
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM4_Initialize
     _TMR1_Initialize
       _TMR1_StartTimer
     _TMR2_Initialize
       _TMR2_StartTimer
   _updateComms
     _FaultsCollector
       _GetPDUFault
     _GetDataDict
     _SetDataDict
     _processPowerRequest
       _EnableSlavePower
         _SetPin595
       _Update
         _writeRegisters
           _Delay
     _receiveData
       _CRC8
       _ClearBuffer
         _UART_buff_flush
           _memset
       _ComController
         _Delay
         _GetDataDict
         _SetDataDict
         _sendData
           _CRC8
           _Send_put
             _UART_buff_get
               _UART_buff_modulo_inc
             _UART_buff_put
               _UART_buff_modulo_inc
           _cobs_encode
       _Receive_available
         _UART_buff_size
       _Receive_get
         _UART_buff_get
           _UART_buff_modulo_inc
       _cobs_decode

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
   _EUSART1_Receive_ISR
     i2_UART_buff_put
       i2_UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     i2_UART_buff_get
       i2_UART_buff_modulo_inc
     i2_UART_buff_size
   _TMR1_ISR
     _FuseSystem
       ___wmul
     _ReadCurrent
       _ADC_GetConversion
       i2_SetPin595
       i2_Update
         i2_writeRegisters
           i2_Delay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      6A       8       41.4%
BITBANK1           100      0       0       5        0.0%
BANK1              100     19      FB       6       98.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     67      9D       4       98.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2C      41       1       69.1%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     243       9        0.0%
DATA                 0      0     243      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Sat Aug 12 16:31:35 2017

                __end_of_GetDataDict 1744               i2_UART_buff_modulo_inc 203A  
                      ??_CoolingStop 0028                       ??_CoolingCheck 001D  
           cobs_encode@dst_write_ptr 0068             GetDataDict@ReturnCounter 0024  
                ___wmul@multiplicand 0003                       ??_CoolingStart 002A  
                       __CFG_CP0$OFF 000000                         __CFG_CP1$OFF 000000  
                       __CFG_CP2$OFF 000000                         __CFG_CP3$OFF 000000  
                                l544 1930                                  l722 1242  
                                l546 193A                                  l387 1386  
                                l727 15A4                                  l719 11E8  
                                l728 15DE                                  l597 17D2  
                                l768 1D8E                                  l883 1730  
                                l897 1698                         __CFG_CPB$OFF 000000  
                                _PR2 000FBB                         __CFG_CPD$OFF 000000  
                    _timer1ReloadVal 0038                      __end_of_ADC_ISR 2248  
                    _TMR2_Initialize 21B0                      _PWM4_Initialize 21C4  
                                prod 000FF3                                  wreg 000FE8  
      i2UART_buff_modulo_inc@modulus 0003          _COBS_DECODE_DST_BUF_LEN_MAX 003B  
                       __CFG_LVP$OFF 000000            SetDataDict@DataTableIndex 001D  
                    _UART_buff_flush 1AE0                                 l4022 13EE  
                               l4014 1390                                 l4030 1448  
                               l4024 140C                                 l4016 13AE  
                               l4040 1EC6                                 l4104 0BFE  
                               l4026 142A                                 l4018 13CC  
                               l4050 1EEC                                 l4106 0C02  
                               l4140 0C8C                                 l4302 1346  
                               l4118 0C2C                                 l4126 0C44  
                               l4070 0B44                                 l4312 1C7C  
                               l4304 1354                                 l4136 0C78  
                               l4322 1CBC                                 l4162 0820  
                               l4340 1478                                 l4316 1C8C  
                               l4308 1378                                 l4076 0B58  
                               l4350 14A2                                 l3702 0E76  
                               l4166 0862                                 l4158 0802  
                               l4086 0B82                                 l4078 0B60  
                               l4270 1180                                 l4344 1488  
                               l4096 0BC2                                 l4256 10B8  
                               l4290 12E8                                 l3722 17CE  
                               l3732 1DD2                                 l4364 1222  
                               l3740 1FFE                                 l4292 12F6  
                               l4284 12BA                                 l3708 0EE2  
                               l4276 119C                                 l4374 1274  
                               l3910 1928                                 l3902 18FC  
                               l4286 12C8                                 l3728 1DB8  
                               l3736 1FEE                                 l4296 131A  
                               l3760 1D78                                 l3816 0DA6  
                               l4464 18AC                                 l4298 1328  
                               l3754 1D62                                 l3770 1D9A  
                               l3842 0E18                                 l4474 18CE  
                               l3860 16EC                                 l3852 16BC  
                               l3844 0E24                                 l3836 0DF6  
                               l3870 1726                                 l3862 16F6  
                               l3854 16C4                                 l3934 093A  
                               l3864 16FE                                 l3872 1734  
                               l3768 1D94                                 l3696 2030  
                               l3792 0D36                                 l3944 0966  
                               l3794 0D3E                                 l3786 0D22  
                               l3884 1654                                 l3876 1624  
                               l3964 09D2                                 l3894 168E  
                               l3886 165E                                 l3878 162C  
                               l3798 0D58                                 l3990 0ADA  
                               l3982 0A92                                 l3958 0992  
                               l3888 1666                                 l3896 169C  
                               l3986 0ABE                                 l3978 0A54  
              __end_of_ComController 092C                                 _CRC8 1D5C  
                               _LATA 000F89                                 _LATB 000F8A  
                               _LATC 000F8B                                 _LATD 000F8C  
                               u3017 10D6                                 _LATE 000F8D  
                               u3027 1DBE                                 u2270 1762  
                               u2740 109E                                 u2780 117E  
                               u2845 135C                                 u2950 15DE  
                               u2874 1CA6                                 u2875 1CA0  
                               i2l31 1F9E                                 i2l71 0066  
                               i2l75 0070                                 i2l67 004E  
                               i2l69 005A                                 _TMR2 000FBC  
                               _WPUB 000F61                      __end_ofi2_Delay 1E3A  
                               _data 00D3                                 _main 1868  
           __end_of_EnableSlavePower 1470                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 fsr2h 000FDA  
                               fsr0l 000FE9                                 indf1 000FE7  
                               indf2 000FDF                                 fsr1l 000FE1  
                               fsr2l 000FD9                                 btemp 0042  
                      __CFG_BORV$190 000000                                 prodh 000FF4  
                               prodl 000FF3                                 start 00AC  
                      __CFG_IESO$OFF 000000                    ?i2_writeRegisters 0001  
                   ?_FaultsCollector 0001                         ___param_bank 000000  
                      ??_ReadCurrent 000E                   ??i2_writeRegisters 000A  
     i2UART_buff_modulo_inc@my_value 0005                       GetPDUFault@loc 001D  
                              ?_CRC8 001D              ComController@DataToSend 01E6  
     __size_of_OSCILLATOR_Initialize 000E        __end_of_OSCILLATOR_Initialize 221A  
                              ?_main 0001                                _EEADR 000FA9  
                              _ANSB3 0079CB                                _ANSB4 0079CC  
                    _TMR1_StartTimer 223C                                _ANSD7 0079DF  
                              _T1CON 000FCD                                _T2CON 000FBA  
                              _LATB0 007C50                                _LATA3 007C4B  
                              _LATB3 007C53                                _LATB4 007C54  
                              _LATB5 007C55                                _LATC5 007C5D  
                              _LATD4 007C64                                _LATD5 007C65  
                              _LATD6 007C66                                _LATD7 007C67  
                     __CFG_DEBUG$OFF 000000                          ?_PDUStartup 0001  
                              i2l544 19AE                                i2l546 19B8  
                              i2l628 2114                                i2l477 1A64  
                              i2l597 1864                                _MCSOn 003A  
                 _PWM4_LoadDutyValue 1F56                                _TMR1H 000FCF  
                              _TMR1L 000FCE                  __end_of_CoolingStop 21FE  
                              _TRISA 000F92                                _TRISB 000F93  
                              _TRISC 000F94                                _TRISD 000F95  
                              _TRISE 000F96                                _Delay 1DA6  
                        _GetPDUFault 2184                        __CFG_WRT0$OFF 000000  
                      __CFG_WRT1$OFF 000000                        __CFG_WRT2$OFF 000000  
                      __CFG_WRT3$OFF 000000                 _EUSART1_Transmit_ISR 1F24  
                     __CFG_EBTR0$OFF 000000                       __CFG_FCMEN$OFF 000000  
                     __CFG_EBTR1$OFF 000000                       __CFG_EBTR2$OFF 000000  
                     __CFG_EBTR3$OFF 000000                     ??_writeRegisters 0026  
                   __end_of_TMR1_ISR 1F24                        __CFG_WRTB$OFF 000000  
                      __CFG_WRTC$OFF 000000                        __CFG_WRTD$OFF 000000  
                    _DATAEE_ReadByte 21D8                       __CFG_EBTRB$OFF 000000  
                ?_PWM4_LoadDutyValue 001D                   __CFG_MCLRE$EXTMCLR 000000  
                              main@i 01F6                                main@j 01F8  
           SetDataDict@ReturnCounter 0024                          _ClearBuffer 216E  
            __end_of_TMR1_Initialize 20D0                     __end_ofi2_Update 2238  
                              pclath 000FFA                                tablat 000FF5  
                      ??_Receive_get 0028                        receiveData@CS 01EF  
                              plusw2 000FDB                                status 000FD8  
                        _GetDataDict 16AC                     __end_of_Clear595 1EF2  
                      ??_SetDataDict 0021                       __CFG_HFOFST$ON 000000  
                    _TMR2_StartTimer 2238                         ?_receiveData 0001  
                     __CFG_PBADEN$ON 000000                 PotSetpoint@new_point 0026  
                       __end_of_CRC8 1DA6                      __initialization 1C06  
         __end_of_EUSART1_Initialize 1EBE                         __end_of_main 18EC  
                         _CurrentADC 00C7           UART_buff_flush@clearBuffer 0027  
               ??_PWM4_LoadDutyValue 001F                               ??_CRC8 0020  
            __end_of_PWM4_Initialize 21D8              __end_of_TMR2_Initialize 21C4  
                          ??_ADC_ISR 0001          ?_INTERRUPT_InterruptManager 0001  
               PotSetpoint@set_point 0060                           _FuseSystem 19E8  
                             ??_main 002D             ComController@DataRecived 01E2  
                __end_of_ReadCurrent 0740                     __end_of_PotClear 1614  
                      __activetblptr 000002                     __end_of_Send_put 1FE4  
            __end_of_UART_buff_flush 1B42            __size_ofi2_UART_buff_size 0016  
                             ?_Delay 001D                ?_EUSART1_Transmit_ISR 0001  
               GetDataDict@DataArray 001E                 GetDataDict@DataCount 0023  
               GetDataDict@DataTable 0022                 SetDataDict@DataArray 001E  
               SetDataDict@DataCount 0023                 SetDataDict@DataTable 0022  
                          ??i2_Delay 0005                               _ADCON0 000FC2  
                             _ADCON1 000FC1                               _ADCON2 000FC0  
               __size_of_cobs_decode 01BE                          FuseSystem@i 0009  
                             _ADRESH 000FC4                               _ADRESL 000FC3  
                             _EEDATA 000FA8                               _CCPR2H 000F68  
                             _CCPR2L 000F67                               _EECON2 000FA7  
               __size_of_cobs_encode 0198                               _ANSELA 000F38  
                             _ANSELB 000F39                               _ANSELC 000F3A  
                             _ANSELD 000F3B                               _ANSELE 000F3C  
                             _T1GCON 000FCC                 __end_of_CoolingCheck 2244  
                    i2_UART_buff_get 17D6                               _RC1STA 000FAB  
                             i2l3016 19A6                               i2l3008 197A  
                    i2_UART_buff_put 0F70                               Delay@i 0022  
                             i2l3330 1A5E                               i2l3314 19F0  
                             i2l3324 1A46                               i2l3340 01C8  
                             i2l3238 205A                               i2l3326 1A4E  
                             i2l3318 1A00                       __CFG_WDTEN$OFF 000000  
                             i2l3352 03F8                               i2l3346 02E0  
                             i2l3364 0628                               i2l3534 0FFC  
                             i2l3358 0510                               i2l3528 0F90  
        UART_buff_modulo_inc@modulus 001F                               i2l3548 1860  
                             i2l3566 1F4E                               i2l2862 1E1C  
                             i2l3584 1F1C                               i2l2858 1E02  
                             _TABLAT 000FF5                               _RCREG1 000FAE  
                             _OSCCON 000FD3          __end_of_processPowerRequest 138C  
                             _SPBRG1 000FAF                 __end_of_CoolingStart 210C  
                             _TX1STA 000FAC                               _TRISB3 007C9B  
                             _TRISB4 007C9C                               _TRISB5 007C9D  
                             _TXREG1 000FAD                  __size_of_PDUStartup 0062  
                     __CFG_XINST$OFF 000000                        ??_PotSetpoint 0028  
                __end_of_Receive_get 220C                         _CCPTMRS1bits 000F48  
                             _Update 222C                   __size_of_SetPin595 004E  
                      _output_buffer 0200              __end_of_TMR1_StartTimer 2240  
                __end_of_SetDataDict 16AC                               ___wmul 2064  
                          CRC8@tempI 0022                       __CFG_STVREN$ON 000000  
                        _CoolingStop 21EC                               _memset 1FE4  
                             clear_0 1C2C                               clear_1 1C38  
                             clear_2 1C44                               clear_3 1C50  
                             main@UP 01FA                     __end_of_sendData 0B00  
            __end_of_DATAEE_ReadByte 21EC                         __pdataCOMRAM 003B  
             cobs_encode@dst_buf_len 001F               cobs_encode@dst_buf_ptr 001D  
                      Send_put@_data 0028                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
                         _StartUp595 1BA4             ADC_GetConversion@channel 0005  
       __end_of_UART_buff_modulo_inc 203A              __end_of_TMR2_StartTimer 223C  
      __size_of_INTERRUPT_Initialize 000A                    ReadCurrent@gather 000E  
                   ?_TMR1_Initialize 0001                    _SYSTEM_Initialize 208A  
                         __accesstop 0060              __end_of__initialization 1C56  
                       ?i2_SetPin595 0001                        sendData@count 00B7  
                      sendData@lenth 0072                   ?_SYSTEM_Initialize 0001  
                      ___rparam_used 000001              ?i2_UART_buff_modulo_inc 0001  
                       ?_updateComms 0001                        __end_of_Delay 1DF0  
                     __pcstackCOMRAM 0001                  ??_SYSTEM_Initialize 0027  
                        _ReadCurrent 00B0                            ?_TMR1_ISR 0001  
                   ?_TMR2_Initialize 0001                     ?_PWM4_Initialize 0001  
               UART_buff_flush@_this 0025                          ?_FuseSystem 0001  
                          ?i2_Update 0001                  __end_of_PotSetpoint 129C  
        __size_of_ComputeStorageData 00DC          PWM4_LoadDutyValue@dutyValue 001D  
                 UART_buff_get@_this 0023                          _Currentcomp 00DF  
              __end_of_UART_buff_get 17D6               ??_EUSART1_Transmit_ISR 000C  
              __end_of_UART_buff_put 0F70                            ?_Clear595 0001  
                   ?_UART_buff_flush 0025                              ??_Delay 0021  
            __end_ofi2_UART_buff_get 1868              __end_ofi2_UART_buff_put 108A  
        __end_of_EUSART1_Receive_ISR 212A                              CRC8@crc 0023  
                            CRC8@len 001F                              CRC8@sum 0020  
                  __end_of_SetPin595 1D0E            __end_of_SYSTEM_Initialize 20AE  
                        sendData@DTS 0070               cobs_decode@dst_buf_len 001F  
                         __pbssBANK0 00C7                           __pbssBANK1 0100  
                         __pbssBANK2 0200               cobs_decode@dst_buf_ptr 001D  
                    __CFG_PLLCFG$OFF 000000                          _Receive_get 21FE  
     __end_ofi2_UART_buff_modulo_inc 2064                          _SetDataDict 1614  
                  ?_EnableSlavePower 0027              __size_of_UART_buff_init 001E  
                        _ReciveArray 01C4              __size_of_UART_buff_size 0016  
                          ?_PotClear 0001                            ?_Send_put 0001  
                 ??_EnableSlavePower 0029                 __size_of_receiveData 0116  
                 __CFG_CCP2MX$PORTC1 000000                              ?_Update 0001  
                            ?___wmul 0001                     ?_TMR1_StartTimer 0001  
                         ??_TMR1_ISR 000F                   __CFG_CCP3MX$PORTB5 000000  
           cobs_decode@dst_write_ptr 0068           cobs_decode@remaining_bytes 0066  
                            _CCP2CON 000F66                              _ADC_ISR 2244  
                            ?_memset 001D                           ??i2_Update 000E  
            __size_of_ADC_Initialize 0018                     ?_DATAEE_ReadByte 0001  
                       ??_PDUStartup 002C                   UART_buff_put@_this 0023  
                    cobs_decode@F192 0030                           ??_Clear595 002A  
                   i2_UART_buff_size 219A            __size_ofi2_writeRegisters 007E  
        i2UART_buff_modulo_inc@value 0001                         ?_GetPDUFault 0001  
              __size_of_CoolingCheck 0004                              _OSCCON2 000FD2  
                            _TBLPTRH 000FF7                              _TBLPTRL 000FF6  
                            _TBLPTRU 000FF8                          ?_StartUp595 0001  
                  _Receive_available 2142         UART_buff_modulo_inc@my_value 0021  
                  __CFG_PRICLKEN$OFF 000000                              _OSCTUNE 000F9B  
                            _SPBRGH1 000FB0                  sendData@whereToSend 00B0  
                            i2_Delay 1DF0                __size_of_CoolingStart 001E  
                   ?_TMR2_StartTimer 0001                   ?_Receive_available 001F  
                       ?_ClearBuffer 0001                         ?_GetDataDict 001D  
       ComController@DataToSend_1658 01EA                  __size_of_FuseSystem 007E  
                   ComController@DTI 00BA                  ??_Receive_available 0021  
                          ?_sendData 006D                              _Current 0130  
                    __CFG_PWRTEN$OFF 000000                           ??_PotClear 0026  
                         ??_Send_put 0028                              __Hparam 0000  
                            __Lparam 0000                   __end_of_PDUStartup 1BA4  
             cobs_encode@src_end_ptr 0060                          _PotSetpoint 11A0  
                    __size_of_Update 0006                 _UART_buff_modulo_inc 2010  
                    __size_of___wmul 0026                         _CoolingCheck 2240  
                            __pcinit 1C06               __size_of_ComController 01EC  
                    __size_of_memset 002C                              __ramtop 0600  
                   FaultsCollector@i 0023                     i2UART_buff_get@c 000B  
                            __ptext0 1868                              __ptext1 1E3A  
                            __ptext2 108A                              __ptext3 0B00  
                            __ptext4 21FE                              __ptext5 2142  
                            __ptext6 2158                              __ptext7 0740  
                            __ptext8 092C                              __ptext9 0CBE  
           __size_of_FaultsCollector 005C                         _CoolingStart 20EE  
                   i2UART_buff_put@c 0009                            _T1CONbits 000FCD  
         cobs_encode@dst_buf_end_ptr 0063                _OSCILLATOR_Initialize 220C  
          __end_of_Receive_available 2158                            _T2CONbits 000FBA  
                cobs_encode@src_byte 0062                   _EUSART1_Initialize 1E82  
                   ?i2_UART_buff_get 0007             ??_PIN_MANAGER_Initialize 001D  
                          Clear595@i 002A                     ?i2_UART_buff_put 0007  
         __size_of_SYSTEM_Initialize 0024                 end_of_initialization 1C56  
                          Delay@wait 001D                  ?_EUSART1_Initialize 0001  
                    cobs_encode@F180 0033                              memset@c 001F  
                            memset@n 0021                              memset@p 0023  
                      __Lmediumconst 0000                           ??_sendData 0029  
               __size_ofi2_SetPin595 004E                      receiveData@Data 01F2  
                          _PDUFalult 00F5                ?_UART_buff_modulo_inc 001D  
               __size_of_updateComms 0048                              postdec1 000FE5  
                            postdec2 000FDD                  __size_of_StartUp595 0062  
                            postinc0 000FEE                              postinc2 000FDE  
        __size_of_PWM4_LoadDutyValue 0030                         ?_CoolingStop 0001  
                       SetPin595@Reg 001D                 ??_EUSART1_Initialize 0027  
                       SetPin595@pin 001F                    cobs_decode@result 006B  
             cobs_decode@src_end_ptr 0060                        ??_cobs_decode 0025  
                      ??_cobs_encode 0025                            _TRISCbits 000F94  
                          _TRISDbits 000F95                     FuseSystem@i_1226 0007  
                     sendData@result 00B2                        _ComController 0740  
              i2UART_buff_size@_this 0001                       _UART_buff_init 20D0  
                     _UART_buff_size 2158              __size_of_writeRegisters 007E  
                 updateComms@DataGet 00C5         __size_of_processPowerRequest 00F0  
                       ?_ReadCurrent 0001         __end_of_INTERRUPT_Initialize 2224  
                     __end_of_Update 2232               GetDataDict@numbofbytes 0020  
                     __end_of___wmul 208A                        __pidataCOMRAM 2224  
                       ??_FuseSystem 0007                    __size_of_TMR1_ISR 0032  
                     _ADC_Initialize 212A               ?_OSCILLATOR_Initialize 0001  
                     __end_of_memset 2010                         receiveData@i 01F0  
         __size_of_Receive_available 0016                     i2_writeRegisters 196A  
                  __size_ofi2_Update 0006                  start_initialization 1C06  
    __size_of_PIN_MANAGER_Initialize 007A                EnableSlavePower@slave 0029  
             SetDataDict@numbofbytes 0020                    __size_of_Clear595 0034  
                  ??_FaultsCollector 001E                 __size_of_GetPDUFault 0016  
                i2writeRegisters@val 000A                            PotClear@x 0026  
                 ComController@lenth 00BC                       ?_ComController 00BA  
                __end_of_cobs_decode 0CBE               __end_of_UART_buff_init 20EE  
                     UART_buff_get@c 0027               __end_of_UART_buff_size 216E  
                __end_of_cobs_encode 0E56                         ?_Receive_get 0001  
                          _SetPin595 1CC0                       UART_buff_put@c 0025  
               __size_of_ClearBuffer 0016                         ?_SetDataDict 001D  
                DATAEE_ReadByte@bAdd 001D                   __end_of_FuseSystem 1A66  
           __end_ofi2_UART_buff_size 21B0                 __size_of_GetDataDict 0098  
                     ComController@k 01EE               ??_UART_buff_modulo_inc 0021  
           __size_of_TMR1_Initialize 0022                             CRC8@data 001D  
                           ??_Update 002A                    __size_of_PotClear 00C8  
                  __size_of_Send_put 002E                             ??___wmul 0005  
             __end_of_ADC_Initialize 2142           __end_of_ComputeStorageData 154C  
                           ?_ADC_ISR 0001                             ??_memset 0023  
          __size_of_EnableSlavePower 00E4                          __pbssCOMRAM 002D  
      __size_of_EUSART1_Transmit_ISR 0032                        __pcstackBANK0 0060  
                      __pcstackBANK1 01E2                         ??_StartUp595 002C  
           __size_of_PWM4_Initialize 0014             __size_of_TMR2_Initialize 0014  
                           ?i2_Delay 0001                  UART_buff_init@_this 0025  
                  i2writeRegisters@i 000C                      ?_UART_buff_init 0025  
           __size_of_UART_buff_flush 0062                      ?_UART_buff_size 001D  
       __size_of_EUSART1_Receive_ISR 001E                           ?_SetPin595 001D  
                      ??_receiveData 00C0                           sendData@CS 00B1  
              cobs_encode@search_len 0065               __size_of_UART_buff_get 0092  
             __size_of_UART_buff_put 011A               _PIN_MANAGER_Initialize 1A66  
                  __size_of_sendData 01D4                         ?_PotSetpoint 0026  
                          __pintcode 0008                   __end_of_StartUp595 1C06  
                    ?_ADC_Initialize 0001         ??_INTERRUPT_InterruptManager 000F  
               i2UART_buff_get@_this 0007                 __size_of_CoolingStop 0012  
                     i2SetPin595@Reg 0001                       i2SetPin595@pin 0003  
                           _BAUD1CON 000FB8             __size_of_TMR1_StartTimer 0004  
                     __size_of_Delay 004A                          _cobs_decode 0B00  
                        _cobs_encode 0CBE               sendData@DataTableIndex 006F  
                    ??_ComController 00BE             __size_of_DATAEE_ReadByte 0014  
        _COBS_ENCODE_DST_BUF_LEN_MAX 003D               FaultsCollector@sendVal 0021  
               _INTERRUPT_Initialize 221A                   cobs_encode@src_len 0023  
                 cobs_encode@src_ptr 0021          processPowerRequest@powerSet 002C  
                     ___wmul@product 0005                             _LATCbits 000F8B  
                     _writeRegisters 18EC                  UART_buff_size@_this 001D  
                          _registers 0100                             _IPR1bits 000F9F  
                           _PIE1bits 000F9D             __size_of_TMR2_StartTimer 0004  
                           i2u210_40 1F3E                             i2u211_40 1F10  
                           i2Delay@i 0006  __size_of_INTERRUPT_InterruptManager 00A4  
                           i2u303_47 1E08                             i2u208_40 17F4  
                           _PIR1bits 000F9E                             _RCONbits 000FD0  
                   __CFG_WDTPS$32768 000000                  __end_of_receiveData 11A0  
                           _TMR1_ISR 1EF2                         PotSetpoint@x 0062  
                       _input_buffer 013C                 __size_of_ReadCurrent 0690  
                  ??_TMR1_Initialize 001D                     __size_of_ADC_ISR 0004  
         cobs_decode@dst_buf_end_ptr 0062                             i2_Update 2232  
                         _ADCON0bits 000FC2                           _ADCON2bits 000FC0  
                  ___wmul@multiplier 0001                 i2UART_buff_put@_this 0007  
                   i2SetPin595@value 0005                             _Clear595 1EBE  
                      _UART_buff_get 1744                        _UART_buff_put 0E56  
                  sendData@COBSArray 0074        cobs_encode@dst_code_write_ptr 0066  
                _processPowerRequest 129C             ??i2_UART_buff_modulo_inc 0005  
                        _INTCON2bits 000FF1                     __size_ofi2_Delay 004A  
                          copy_data0 1C1A                ?_INTERRUPT_Initialize 0001  
                 sendData@ComandByte 006D               __end_of_writeRegisters 196A  
                 PotSetpoint@new_pos 0064                        ??i2_SetPin595 0007  
                        ??_SetPin595 0023                 EnableSlavePower@onof 0027  
           __size_ofi2_UART_buff_get 0092                    ??_TMR2_Initialize 001D  
                  ??_PWM4_Initialize 001D             __size_ofi2_UART_buff_put 011A  
                         _EECON1bits 000FA6                        ??_updateComms 002D  
               __size_of_Receive_get 000E             __end_ofi2_writeRegisters 19E8  
                           _PotClear 154C                             __Hrparam 0000  
                           _Send_put 1FB6                 __size_of_SetDataDict 0098  
                  ??_UART_buff_flush 0029           __end_of_PWM4_LoadDutyValue 1F86  
                           __Lrparam 0000                    _ADC_GetConversion 1F86  
               ?_processPowerRequest 0001                   __CFG_BOREN$SBORDIS 000000  
                  __CFG_P2BMX$PORTD2 000000              ??_OSCILLATOR_Initialize 001D  
                 ?_ADC_GetConversion 0001          __size_of_EUSART1_Initialize 003C  
                    _FaultsCollector 1C64                     _EnableSlavePower 138C  
                         _ANSELCbits 000F3A                       ?_UART_buff_get 0023  
                     ?_UART_buff_put 0023                          CRC8@extract 0021  
                ??_ADC_GetConversion 0003                     GetDataDict@Error 0021  
                   SetDataDict@Error 0021                            sendData@i 00B9  
                          sendData@j 00B5                             __ptext10 1FB6  
                           __ptext11 0E56                             __ptext20 1C64  
                           __ptext12 1744                             __ptext21 2184  
                           __ptext13 2010                           _T1GCONbits 000FCC  
                           __ptext30 221A                             __ptext22 208A  
                           __ptext14 1D5C                             __ptext31 1E82  
                           __ptext23 21B0                             __ptext15 1614  
                           __ptext40 138C                             __ptext32 20D0  
                           __ptext24 2238                             __ptext16 16AC  
                           __ptext41 1CC0                             __ptext33 1FE4  
                           __ptext25 20AE                             __ptext17 216E  
                           __ptext50 2240                             __ptext42 1470  
                           __ptext34 212A                             __ptext26 223C  
                           __ptext18 1AE0                             __ptext43 21D8  
                           __ptext35 1B42                             __ptext27 21C4  
                           __ptext19 129C                             __ptext60 2064  
                           __ptext52 1EF2                             __ptext44 21EC  
                           __ptext36 222C                             __ptext28 1A66  
                           __ptext61 1F24                             __ptext53 00B0  
                           __ptext45 20EE                             __ptext37 1BA4  
                           __ptext29 220C                             __ptext62 219A  
                           __ptext54 2232                             __ptext46 11A0  
                           __ptext38 1EBE                             __ptext63 17D6  
                           __ptext55 196A                             __ptext47 154C  
                           __ptext39 18EC                             __ptext64 210C  
                           __ptext56 1DF0                             __ptext48 1DA6  
                           __ptext65 0F70                             __ptext57 1D0E  
                           __ptext49 1F56                             __ptext66 203A  
                           __ptext58 1F86                             __ptext67 2244  
                           __ptext59 19E8                    ??_TMR1_StartTimer 001D  
                      __size_of_CRC8 004A            GetDataDict@DataTableIndex 001D  
                        i2Delay@wait 0001              EUSART1_Receive_ISR@data 000C  
                    ?_writeRegisters 0001                        __size_of_main 0084  
                  cobs_encode@result 006A                          _receiveData 108A  
                           _readwhat 003F                       _Transmit_stall 0041  
                           _sendData 092C                    ??_DATAEE_ReadByte 001D  
          __end_of_ADC_GetConversion 1FB6                    ?i2_UART_buff_size 0001  
                  sendData@DataTable 006E                ??_processPowerRequest 002A  
                         _RC1STAbits 000FAB                  __end_ofi2_SetPin595 1D5C  
                           _prev_pos 0036                         _ProcessArray 01A6  
                 ??i2_UART_buff_size 0003                    writeRegisters@val 0026  
                           int$flags 0042                    ??_TMR2_StartTimer 001D  
                __end_of_updateComms 1E82   __end_of_INTERRUPT_InterruptManager 00AC  
         _INTERRUPT_InterruptManager 0008                 __size_of_PotSetpoint 00FC  
                _EUSART1_Receive_ISR 210C                    receiveData@result 01F3  
                      ??_GetPDUFault 001D                           _INTCONbits 000FF2  
                ComputeStorageData@i 0020                   _DataTableArrayFour 002D  
          UART_buff_modulo_inc@value 001D                     ??_UART_buff_init 0027  
                   ??_UART_buff_size 001F                   _ComputeStorageData 1470  
             ??_INTERRUPT_Initialize 001D                             memset@p1 001D  
    __size_ofi2_UART_buff_modulo_inc 002A                        ??_ClearBuffer 0029  
                           intlevel2 0000                  cobs_decode@len_code 006A  
               ?_EUSART1_Receive_ISR 0001                        ??_GetDataDict 0021  
                ?_ComputeStorageData 0001              ?_PIN_MANAGER_Initialize 0001  
                       cobs_decode@i 0065                       SetPin595@value 0021  
       __end_of_EUSART1_Transmit_ISR 1F56                     ??_ADC_Initialize 001D  
                  sendData@SendArray 0092              __end_of_FaultsCollector 1CC0  
                  ??i2_UART_buff_get 0009                    ??i2_UART_buff_put 000A  
                cobs_decode@src_byte 0064        __size_of_UART_buff_modulo_inc 002A  
                      ?_CoolingCheck 0001                    _DataTableArrayOne 00EB  
                    ??_UART_buff_get 0025                      ??_UART_buff_put 0026  
               ??_ComputeStorageData 001E                        ?_CoolingStart 0001  
                         _PDUStartup 1B42                         ?_cobs_decode 001D  
                       ?_cobs_encode 001D                    __CFG_T3CMX$PORTC0 000000  
                    writeRegisters@i 0028                   cobs_decode@src_len 0023  
                 cobs_decode@src_ptr 0021                  __end_of_GetPDUFault 219A  
              ??_EUSART1_Receive_ISR 000C       __end_of_PIN_MANAGER_Initialize 1AE0  
                        i2_SetPin595 1D0E                    __CFG_FOSC$INTIO67 000000  
                __end_of_ClearBuffer 2184           __size_of_ADC_GetConversion 0030  
                    _TMR1_Initialize 20AE                          _updateComms 1E3A  
