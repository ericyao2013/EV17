

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Sat Aug 12 07:57:57 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    79                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    80                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    81  0000                     
    82                           ; Version 1.42
    83                           ; Generated 13/04/2017 GMT
    84                           ; 
    85                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    86                           ; All rights reserved.
    87                           ; 
    88                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    89                           ; 
    90                           ; Redistribution and use in source and binary forms, with or without modification, are
    91                           ; permitted provided that the following conditions are met:
    92                           ; 
    93                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    94                           ;        conditions and the following disclaimer.
    95                           ; 
    96                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    97                           ;        of conditions and the following disclaimer in the documentation and/or other
    98                           ;        materials provided with the distribution.
    99                           ; 
   100                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   101                           ;        software without specific prior written permission.
   102                           ; 
   103                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   104                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   105                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   106                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   107                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   108                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   109                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   110                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   111                           ; 
   112                           ; 
   113                           ; Code-generator required, PIC18F45K22 Definitions
   114                           ; 
   115                           ; SFR Addresses
   116  0000                     
   117                           	psect	idataCOMRAM
   118  001EAE                     __pidataCOMRAM:
   119                           	opt stack 0
   120                           
   121                           ;initializer for _COBS_DECODE_DST_BUF_LEN_MAX
   122  001EAE  001E               	dw	30
   123                           
   124                           ;initializer for _COBS_ENCODE_DST_BUF_LEN_MAX
   125  001EB0  001E               	dw	30
   126                           
   127                           ;initializer for _readwhat
   128  001EB2  0001               	dw	1
   129                           
   130                           ;initializer for _Transmit_stall
   131  001EB4  01                 	db	1
   132  0000                     _CCPTMRS1bits	set	3912
   133  0000                     _ANSELCbits	set	3898
   134  0000                     _ANSELE	set	3900
   135  0000                     _ANSELD	set	3899
   136  0000                     _ANSELC	set	3898
   137  0000                     _ANSELB	set	3897
   138  0000                     _ANSELA	set	3896
   139  0000                     _ANSB4	set	31180
   140  0000                     _ANSD7	set	31199
   141  0000                     _ANSB3	set	31179
   142  0000                     _RC1STAbits	set	4011
   143  0000                     _RCREG1	set	4014
   144  0000                     _TXREG1	set	4013
   145  0000                     _SPBRGH1	set	4016
   146  0000                     _SPBRG1	set	4015
   147  0000                     _TX1STA	set	4012
   148  0000                     _RC1STA	set	4011
   149  0000                     _BAUD1CON	set	4024
   150  0000                     _T2CONbits	set	4026
   151  0000                     _TMR2	set	4028
   152  0000                     _PR2	set	4027
   153  0000                     _T2CON	set	4026
   154  0000                     _CCPR2H	set	3944
   155  0000                     _CCPR2L	set	3943
   156  0000                     _CCP2CON	set	3942
   157  0000                     _T1GCONbits	set	4044
   158  0000                     _T1CONbits	set	4045
   159  0000                     _TMR1L	set	4046
   160  0000                     _TMR1H	set	4047
   161  0000                     _T1GCON	set	4044
   162  0000                     _T1CON	set	4045
   163  0000                     _TRISDbits	set	3989
   164  0000                     _INTCON2bits	set	4081
   165  0000                     _LATCbits	set	3979
   166  0000                     _TRISCbits	set	3988
   167  0000                     _TRISE	set	3990
   168  0000                     _LATE	set	3981
   169  0000                     _TRISD	set	3989
   170  0000                     _LATD	set	3980
   171  0000                     _TRISC	set	3988
   172  0000                     _LATC	set	3979
   173  0000                     _WPUB	set	3937
   174  0000                     _TRISB	set	3987
   175  0000                     _LATB	set	3978
   176  0000                     _TRISA	set	3986
   177  0000                     _LATA	set	3977
   178  0000                     _EEDATA	set	4008
   179  0000                     _EEADR	set	4009
   180  0000                     _EECON2	set	4007
   181  0000                     _EECON1bits	set	4006
   182  0000                     _INTCONbits	set	4082
   183  0000                     _TABLAT	set	4085
   184  0000                     _TBLPTRL	set	4086
   185  0000                     _TBLPTRH	set	4087
   186  0000                     _TBLPTRU	set	4088
   187  0000                     _OSCTUNE	set	3995
   188  0000                     _OSCCON2	set	4050
   189  0000                     _OSCCON	set	4051
   190  0000                     _PIE1bits	set	3997
   191  0000                     _IPR1bits	set	3999
   192  0000                     _RCONbits	set	4048
   193  0000                     _PIR1bits	set	3998
   194  0000                     _ADCON0bits	set	4034
   195  0000                     _ADRESH	set	4036
   196  0000                     _ADRESL	set	4035
   197  0000                     _ADCON2bits	set	4032
   198  0000                     _ADCON2	set	4032
   199  0000                     _ADCON1	set	4033
   200  0000                     _ADCON0	set	4034
   201  0000                     _LATC5	set	31837
   202  0000                     _LATA3	set	31819
   203  0000                     _LATB3	set	31827
   204  0000                     _LATB5	set	31829
   205  0000                     _LATD6	set	31846
   206  0000                     _LATD4	set	31844
   207  0000                     _LATD7	set	31847
   208  0000                     _LATB0	set	31824
   209  0000                     _LATD5	set	31845
   210  0000                     _TRISB5	set	31901
   211  0000                     _TRISB3	set	31899
   212  0000                     _TRISB4	set	31900
   213  0000                     _LATB4	set	31828
   214                           
   215                           ; #config settings
   216  0000                     
   217                           	psect	cinit
   218  00192A                     __pcinit:
   219                           	opt stack 0
   220  00192A                     start_initialization:
   221                           	opt stack 0
   222  00192A                     __initialization:
   223                           	opt stack 0
   224                           
   225                           ; Initialize objects allocated to COMRAM (7 bytes)
   226                           ; load TBLPTR registers with __pidataCOMRAM
   227  00192A  0EAE               	movlw	low __pidataCOMRAM
   228  00192C  6EF6               	movwf	tblptrl,c
   229  00192E  0E1E               	movlw	high __pidataCOMRAM
   230  001930  6EF7               	movwf	tblptrh,c
   231  001932  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   232  001934  6EF8               	movwf	tblptru,c
   233  001936  EE00  F03C         	lfsr	0,__pdataCOMRAM
   234  00193A  EE10 F007          	lfsr	1,7
   235  00193E                     copy_data0:
   236  00193E  0009               	tblrd		*+
   237  001940  CFF5 FFEE          	movff	tablat,postinc0
   238  001944  50E5               	movf	postdec1,w,c
   239  001946  50E1               	movf	fsr1l,w,c
   240  001948  E1FA               	bnz	copy_data0
   241                           
   242                           ; Clear objects allocated to BANK2 (106 bytes)
   243  00194A  EE02  F000         	lfsr	0,__pbssBANK2
   244  00194E  0E6A               	movlw	106
   245  001950                     clear_0:
   246  001950  6AEE               	clrf	postinc0,c
   247  001952  06E8               	decf	wreg,f,c
   248  001954  E1FD               	bnz	clear_0
   249                           
   250                           ; Clear objects allocated to BANK1 (214 bytes)
   251  001956  EE01  F000         	lfsr	0,__pbssBANK1
   252  00195A  0ED6               	movlw	214
   253  00195C                     clear_1:
   254  00195C  6AEE               	clrf	postinc0,c
   255  00195E  06E8               	decf	wreg,f,c
   256  001960  E1FD               	bnz	clear_1
   257                           
   258                           ; Clear objects allocated to BANK0 (66 bytes)
   259  001962  EE00  F0BE         	lfsr	0,__pbssBANK0
   260  001966  0E42               	movlw	66
   261  001968                     clear_2:
   262  001968  6AEE               	clrf	postinc0,c
   263  00196A  06E8               	decf	wreg,f,c
   264  00196C  E1FD               	bnz	clear_2
   265                           
   266                           ; Clear objects allocated to COMRAM (14 bytes)
   267  00196E  EE00  F02E         	lfsr	0,__pbssCOMRAM
   268  001972  0E0E               	movlw	14
   269  001974                     clear_3:
   270  001974  6AEE               	clrf	postinc0,c
   271  001976  06E8               	decf	wreg,f,c
   272  001978  E1FD               	bnz	clear_3
   273  00197A                     end_of_initialization:
   274                           	opt stack 0
   275  00197A                     __end_of__initialization:
   276                           	opt stack 0
   277  00197A  9043               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   278  00197C  9243               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   279  00197E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   280  001980  6EF8               	movwf	tblptru,c
   281  001982  0100               	movlb	0
   282  001984  EFF5  F005         	goto	_main	;jump to C main() function
   283                           tblptru	equ	0xFF8
   284                           tblptrh	equ	0xFF7
   285                           tblptrl	equ	0xFF6
   286                           tablat	equ	0xFF5
   287                           postinc0	equ	0xFEE
   288                           wreg	equ	0xFE8
   289                           postdec1	equ	0xFE5
   290                           fsr1l	equ	0xFE1
   291                           
   292                           	psect	bssCOMRAM
   293  00002E                     __pbssCOMRAM:
   294                           	opt stack 0
   295  00002E                     _DataTableArrayTwo:
   296                           	opt stack 0
   297  00002E                     	ds	3
   298  000031                     cobs_decode@F192:
   299                           	opt stack 0
   300  000031                     	ds	3
   301  000034                     cobs_encode@F180:
   302                           	opt stack 0
   303  000034                     	ds	3
   304  000037                     _prev_pos:
   305                           	opt stack 0
   306  000037                     	ds	2
   307  000039                     _timer1ReloadVal:
   308                           	opt stack 0
   309  000039                     	ds	2
   310  00003B                     _MCSOn:
   311                           	opt stack 0
   312  00003B                     	ds	1
   313                           tblptru	equ	0xFF8
   314                           tblptrh	equ	0xFF7
   315                           tblptrl	equ	0xFF6
   316                           tablat	equ	0xFF5
   317                           postinc0	equ	0xFEE
   318                           wreg	equ	0xFE8
   319                           postdec1	equ	0xFE5
   320                           fsr1l	equ	0xFE1
   321                           
   322                           	psect	dataCOMRAM
   323  00003C                     __pdataCOMRAM:
   324                           	opt stack 0
   325  00003C                     _COBS_DECODE_DST_BUF_LEN_MAX:
   326                           	opt stack 0
   327  00003C                     	ds	2
   328  00003E                     _COBS_ENCODE_DST_BUF_LEN_MAX:
   329                           	opt stack 0
   330  00003E                     	ds	2
   331  000040                     _readwhat:
   332                           	opt stack 0
   333  000040                     	ds	2
   334  000042                     _Transmit_stall:
   335                           	opt stack 0
   336  000042                     	ds	1
   337                           tblptru	equ	0xFF8
   338                           tblptrh	equ	0xFF7
   339                           tblptrl	equ	0xFF6
   340                           tablat	equ	0xFF5
   341                           postinc0	equ	0xFEE
   342                           wreg	equ	0xFE8
   343                           postdec1	equ	0xFE5
   344                           fsr1l	equ	0xFE1
   345                           
   346                           	psect	bssBANK0
   347  0000BE                     __pbssBANK0:
   348                           	opt stack 0
   349  0000BE                     _Current:
   350                           	opt stack 0
   351  0000BE                     	ds	12
   352  0000CA                     _CurrentADC:
   353                           	opt stack 0
   354  0000CA                     	ds	12
   355  0000D6                     _data:
   356                           	opt stack 0
   357  0000D6                     	ds	12
   358  0000E2                     _Currentcomp:
   359                           	opt stack 0
   360  0000E2                     	ds	12
   361  0000EE                     _DataTableArrayOne:
   362                           	opt stack 0
   363  0000EE                     	ds	10
   364  0000F8                     _PDUFalult:
   365                           	opt stack 0
   366  0000F8                     	ds	8
   367                           tblptru	equ	0xFF8
   368                           tblptrh	equ	0xFF7
   369                           tblptrl	equ	0xFF6
   370                           tablat	equ	0xFF5
   371                           postinc0	equ	0xFEE
   372                           wreg	equ	0xFE8
   373                           postdec1	equ	0xFE5
   374                           fsr1l	equ	0xFE1
   375                           
   376                           	psect	bssBANK1
   377  000100                     __pbssBANK1:
   378                           	opt stack 0
   379  000100                     _registers:
   380                           	opt stack 0
   381  000100                     	ds	48
   382  000130                     _input_buffer:
   383                           	opt stack 0
   384  000130                     	ds	106
   385  00019A                     _ProcessArray:
   386                           	opt stack 0
   387  00019A                     	ds	30
   388  0001B8                     _ReciveArray:
   389                           	opt stack 0
   390  0001B8                     	ds	30
   391                           tblptru	equ	0xFF8
   392                           tblptrh	equ	0xFF7
   393                           tblptrl	equ	0xFF6
   394                           tablat	equ	0xFF5
   395                           postinc0	equ	0xFEE
   396                           wreg	equ	0xFE8
   397                           postdec1	equ	0xFE5
   398                           fsr1l	equ	0xFE1
   399                           
   400                           	psect	bssBANK2
   401  000200                     __pbssBANK2:
   402                           	opt stack 0
   403  000200                     _output_buffer:
   404                           	opt stack 0
   405  000200                     	ds	106
   406                           tblptru	equ	0xFF8
   407                           tblptrh	equ	0xFF7
   408                           tblptrl	equ	0xFF6
   409                           tablat	equ	0xFF5
   410                           postinc0	equ	0xFEE
   411                           wreg	equ	0xFE8
   412                           postdec1	equ	0xFE5
   413                           fsr1l	equ	0xFE1
   414                           
   415                           	psect	cstackBANK1
   416  0001D6                     __pcstackBANK1:
   417                           	opt stack 0
   418  0001D6                     ComController@DataToSend:
   419                           	opt stack 0
   420                           
   421                           ; 4 bytes @ 0x0
   422  0001D6                     	ds	4
   423  0001DA                     ??_receiveData:
   424                           
   425                           ; 1 bytes @ 0x4
   426  0001DA                     	ds	5
   427  0001DF                     receiveData@j:
   428                           	opt stack 0
   429                           
   430                           ; 2 bytes @ 0x9
   431  0001DF                     	ds	2
   432  0001E1                     receiveData@CS:
   433                           	opt stack 0
   434                           
   435                           ; 1 bytes @ 0xB
   436  0001E1                     	ds	1
   437  0001E2                     receiveData@i:
   438                           	opt stack 0
   439                           
   440                           ; 2 bytes @ 0xC
   441  0001E2                     	ds	2
   442  0001E4                     receiveData@Data:
   443                           	opt stack 0
   444                           
   445                           ; 1 bytes @ 0xE
   446  0001E4                     	ds	1
   447  0001E5                     receiveData@result:
   448                           	opt stack 0
   449                           
   450                           ; 3 bytes @ 0xF
   451  0001E5                     	ds	3
   452  0001E8                     main@j:
   453                           	opt stack 0
   454                           
   455                           ; 2 bytes @ 0x12
   456  0001E8                     	ds	2
   457  0001EA                     main@i:
   458                           	opt stack 0
   459                           
   460                           ; 2 bytes @ 0x14
   461  0001EA                     	ds	2
   462  0001EC                     main@UP:
   463                           	opt stack 0
   464                           
   465                           ; 1 bytes @ 0x16
   466  0001EC                     	ds	1
   467                           tblptru	equ	0xFF8
   468                           tblptrh	equ	0xFF7
   469                           tblptrl	equ	0xFF6
   470                           tablat	equ	0xFF5
   471                           postinc0	equ	0xFEE
   472                           wreg	equ	0xFE8
   473                           postdec1	equ	0xFE5
   474                           fsr1l	equ	0xFE1
   475                           
   476                           	psect	cstackBANK0
   477  000060                     __pcstackBANK0:
   478                           	opt stack 0
   479  000060                     PotSetpoint@set_point:
   480                           	opt stack 0
   481  000060                     cobs_encode@src_end_ptr:
   482                           	opt stack 0
   483  000060                     cobs_decode@src_end_ptr:
   484                           	opt stack 0
   485                           
   486                           ; 2 bytes @ 0x0
   487  000060                     	ds	2
   488  000062                     cobs_encode@src_byte:
   489                           	opt stack 0
   490  000062                     PotSetpoint@x:
   491                           	opt stack 0
   492  000062                     cobs_decode@dst_buf_end_ptr:
   493                           	opt stack 0
   494                           
   495                           ; 2 bytes @ 0x2
   496  000062                     	ds	1
   497  000063                     cobs_encode@dst_buf_end_ptr:
   498                           	opt stack 0
   499                           
   500                           ; 2 bytes @ 0x3
   501  000063                     	ds	1
   502  000064                     cobs_decode@src_byte:
   503                           	opt stack 0
   504  000064                     PotSetpoint@new_pos:
   505                           	opt stack 0
   506                           
   507                           ; 2 bytes @ 0x4
   508  000064                     	ds	1
   509  000065                     cobs_encode@search_len:
   510                           	opt stack 0
   511  000065                     cobs_decode@i:
   512                           	opt stack 0
   513                           
   514                           ; 1 bytes @ 0x5
   515  000065                     	ds	1
   516  000066                     cobs_encode@dst_code_write_ptr:
   517                           	opt stack 0
   518  000066                     cobs_decode@remaining_bytes:
   519                           	opt stack 0
   520                           
   521                           ; 2 bytes @ 0x6
   522  000066                     	ds	2
   523  000068                     cobs_encode@dst_write_ptr:
   524                           	opt stack 0
   525  000068                     cobs_decode@dst_write_ptr:
   526                           	opt stack 0
   527                           
   528                           ; 2 bytes @ 0x8
   529  000068                     	ds	2
   530  00006A                     cobs_decode@len_code:
   531                           	opt stack 0
   532  00006A                     cobs_encode@result:
   533                           	opt stack 0
   534                           
   535                           ; 3 bytes @ 0xA
   536  00006A                     	ds	1
   537  00006B                     cobs_decode@result:
   538                           	opt stack 0
   539                           
   540                           ; 3 bytes @ 0xB
   541  00006B                     	ds	2
   542  00006D                     sendData@ComandByte:
   543                           	opt stack 0
   544                           
   545                           ; 1 bytes @ 0xD
   546  00006D                     	ds	1
   547  00006E                     sendData@DataTable:
   548                           	opt stack 0
   549                           
   550                           ; 1 bytes @ 0xE
   551  00006E                     	ds	1
   552  00006F                     sendData@DataTableIndex:
   553                           	opt stack 0
   554                           
   555                           ; 1 bytes @ 0xF
   556  00006F                     	ds	1
   557  000070                     sendData@DTS:
   558                           	opt stack 0
   559                           
   560                           ; 2 bytes @ 0x10
   561  000070                     	ds	2
   562  000072                     sendData@lenth:
   563                           	opt stack 0
   564                           
   565                           ; 2 bytes @ 0x12
   566  000072                     	ds	2
   567  000074                     sendData@COBSArray:
   568                           	opt stack 0
   569                           
   570                           ; 30 bytes @ 0x14
   571  000074                     	ds	30
   572  000092                     sendData@SendArray:
   573                           	opt stack 0
   574                           
   575                           ; 30 bytes @ 0x32
   576  000092                     	ds	30
   577  0000B0                     sendData@DataLenth:
   578                           	opt stack 0
   579                           
   580                           ; 1 bytes @ 0x50
   581  0000B0                     	ds	1
   582  0000B1                     sendData@whereToSend:
   583                           	opt stack 0
   584                           
   585                           ; 1 bytes @ 0x51
   586  0000B1                     	ds	1
   587  0000B2                     sendData@count:
   588                           	opt stack 0
   589                           
   590                           ; 2 bytes @ 0x52
   591  0000B2                     	ds	2
   592  0000B4                     sendData@CS:
   593                           	opt stack 0
   594                           
   595                           ; 1 bytes @ 0x54
   596  0000B4                     	ds	1
   597  0000B5                     sendData@result:
   598                           	opt stack 0
   599                           
   600                           ; 3 bytes @ 0x55
   601  0000B5                     	ds	3
   602  0000B8                     sendData@i:
   603                           	opt stack 0
   604                           
   605                           ; 2 bytes @ 0x58
   606  0000B8                     	ds	2
   607  0000BA                     ComController@DTI:
   608                           	opt stack 0
   609                           
   610                           ; 2 bytes @ 0x5A
   611  0000BA                     	ds	2
   612  0000BC                     ComController@lenth:
   613                           	opt stack 0
   614                           
   615                           ; 2 bytes @ 0x5C
   616  0000BC                     	ds	2
   617                           tblptru	equ	0xFF8
   618                           tblptrh	equ	0xFF7
   619                           tblptrl	equ	0xFF6
   620                           tablat	equ	0xFF5
   621                           postinc0	equ	0xFEE
   622                           wreg	equ	0xFE8
   623                           postdec1	equ	0xFE5
   624                           fsr1l	equ	0xFE1
   625                           
   626                           	psect	cstackCOMRAM
   627  000001                     __pcstackCOMRAM:
   628                           	opt stack 0
   629  000001                     ?_ADC_GetConversion:
   630                           	opt stack 0
   631  000001                     ?___wmul:
   632                           	opt stack 0
   633  000001                     ?i2_UART_buff_size:
   634                           	opt stack 0
   635  000001                     ?i2_UART_buff_modulo_inc:
   636                           	opt stack 0
   637  000001                     ___wmul@multiplier:
   638                           	opt stack 0
   639  000001                     i2SetPin595@Reg:
   640                           	opt stack 0
   641  000001                     i2UART_buff_size@_this:
   642                           	opt stack 0
   643  000001                     i2UART_buff_modulo_inc@value:
   644                           	opt stack 0
   645  000001                     i2Delay@wait:
   646                           	opt stack 0
   647                           
   648                           ; 4 bytes @ 0x0
   649  000001                     	ds	2
   650  000003                     ??_ADC_GetConversion:
   651  000003                     ___wmul@multiplicand:
   652                           	opt stack 0
   653  000003                     i2SetPin595@pin:
   654                           	opt stack 0
   655  000003                     i2UART_buff_modulo_inc@modulus:
   656                           	opt stack 0
   657                           
   658                           ; 2 bytes @ 0x2
   659  000003                     	ds	2
   660  000005                     ??i2_Delay:
   661  000005                     ADC_GetConversion@channel:
   662                           	opt stack 0
   663  000005                     ___wmul@product:
   664                           	opt stack 0
   665  000005                     i2SetPin595@value:
   666                           	opt stack 0
   667  000005                     i2UART_buff_modulo_inc@my_value:
   668                           	opt stack 0
   669                           
   670                           ; 2 bytes @ 0x4
   671  000005                     	ds	1
   672  000006                     i2Delay@i:
   673                           	opt stack 0
   674                           
   675                           ; 4 bytes @ 0x5
   676  000006                     	ds	1
   677  000007                     ??i2_SetPin595:
   678  000007                     FuseSystem@i_1200:
   679                           	opt stack 0
   680  000007                     i2UART_buff_put@_this:
   681                           	opt stack 0
   682  000007                     i2UART_buff_get@_this:
   683                           	opt stack 0
   684                           
   685                           ; 2 bytes @ 0x6
   686  000007                     	ds	2
   687  000009                     ??i2_UART_buff_get:
   688  000009                     i2UART_buff_put@c:
   689                           	opt stack 0
   690  000009                     FuseSystem@i:
   691                           	opt stack 0
   692                           
   693                           ; 2 bytes @ 0x8
   694  000009                     	ds	1
   695  00000A                     ??i2_UART_buff_put:
   696  00000A                     i2writeRegisters@val:
   697                           	opt stack 0
   698                           
   699                           ; 2 bytes @ 0x9
   700  00000A                     	ds	1
   701  00000B                     i2UART_buff_get@c:
   702                           	opt stack 0
   703                           
   704                           ; 1 bytes @ 0xA
   705  00000B                     	ds	1
   706  00000C                     EUSART1_Receive_ISR@data:
   707                           	opt stack 0
   708  00000C                     i2writeRegisters@i:
   709                           	opt stack 0
   710                           
   711                           ; 2 bytes @ 0xB
   712  00000C                     	ds	2
   713  00000E                     ReadCurrent@gather:
   714                           	opt stack 0
   715                           
   716                           ; 1 bytes @ 0xD
   717  00000E                     	ds	1
   718  00000F                     ??_INTERRUPT_InterruptManager:
   719                           
   720                           ; 1 bytes @ 0xE
   721  00000F                     	ds	14
   722  00001D                     ?_UART_buff_modulo_inc:
   723                           	opt stack 0
   724  00001D                     ?_UART_buff_size:
   725                           	opt stack 0
   726  00001D                     ?_cobs_encode:
   727                           	opt stack 0
   728  00001D                     ?_cobs_decode:
   729                           	opt stack 0
   730  00001D                     DATAEE_WriteByte@bData:
   731                           	opt stack 0
   732  00001D                     DATAEE_ReadByte@bAdd:
   733                           	opt stack 0
   734  00001D                     GetDataDict@DataTableIndex:
   735                           	opt stack 0
   736  00001D                     PWM4_LoadDutyValue@dutyValue:
   737                           	opt stack 0
   738  00001D                     SetPin595@Reg:
   739                           	opt stack 0
   740  00001D                     UART_buff_size@_this:
   741                           	opt stack 0
   742  00001D                     UART_buff_modulo_inc@value:
   743                           	opt stack 0
   744  00001D                     CRC8@data:
   745                           	opt stack 0
   746  00001D                     cobs_encode@dst_buf_ptr:
   747                           	opt stack 0
   748  00001D                     cobs_decode@dst_buf_ptr:
   749                           	opt stack 0
   750  00001D                     memset@p1:
   751                           	opt stack 0
   752  00001D                     Delay@wait:
   753                           	opt stack 0
   754                           
   755                           ; 4 bytes @ 0x1C
   756  00001D                     	ds	1
   757  00001E                     ??_ComputeStorageData:
   758  00001E                     DATAEE_WriteByte@bAdd:
   759                           	opt stack 0
   760  00001E                     GetDataDict@DataArray:
   761                           	opt stack 0
   762                           
   763                           ; 2 bytes @ 0x1D
   764  00001E                     	ds	1
   765  00001F                     ??_PWM4_LoadDutyValue:
   766  00001F                     ?_Receive_available:
   767                           	opt stack 0
   768  00001F                     DATAEE_WriteByte@GIEBitValue:
   769                           	opt stack 0
   770  00001F                     CRC8@len:
   771                           	opt stack 0
   772  00001F                     SetPin595@pin:
   773                           	opt stack 0
   774  00001F                     UART_buff_modulo_inc@modulus:
   775                           	opt stack 0
   776  00001F                     cobs_encode@dst_buf_len:
   777                           	opt stack 0
   778  00001F                     cobs_decode@dst_buf_len:
   779                           	opt stack 0
   780  00001F                     memset@c:
   781                           	opt stack 0
   782                           
   783                           ; 2 bytes @ 0x1E
   784  00001F                     	ds	1
   785  000020                     CRC8@sum:
   786                           	opt stack 0
   787  000020                     GetDataDict@numbofbytes:
   788                           	opt stack 0
   789  000020                     ComputeStorageData@i:
   790                           	opt stack 0
   791                           
   792                           ; 2 bytes @ 0x1F
   793  000020                     	ds	1
   794  000021                     ??_Delay:
   795  000021                     CRC8@extract:
   796                           	opt stack 0
   797  000021                     GetDataDict@Error:
   798                           	opt stack 0
   799  000021                     SetPin595@value:
   800                           	opt stack 0
   801  000021                     UART_buff_modulo_inc@my_value:
   802                           	opt stack 0
   803  000021                     cobs_encode@src_ptr:
   804                           	opt stack 0
   805  000021                     cobs_decode@src_ptr:
   806                           	opt stack 0
   807  000021                     memset@n:
   808                           	opt stack 0
   809                           
   810                           ; 2 bytes @ 0x20
   811  000021                     	ds	1
   812  000022                     CRC8@tempI:
   813                           	opt stack 0
   814  000022                     GetDataDict@DataTable:
   815                           	opt stack 0
   816  000022                     Delay@i:
   817                           	opt stack 0
   818                           
   819                           ; 4 bytes @ 0x21
   820  000022                     	ds	1
   821  000023                     ??_SetPin595:
   822  000023                     CRC8@crc:
   823                           	opt stack 0
   824  000023                     GetDataDict@DataCount:
   825                           	opt stack 0
   826  000023                     UART_buff_put@_this:
   827                           	opt stack 0
   828  000023                     UART_buff_get@_this:
   829                           	opt stack 0
   830  000023                     cobs_encode@src_len:
   831                           	opt stack 0
   832  000023                     cobs_decode@src_len:
   833                           	opt stack 0
   834  000023                     memset@p:
   835                           	opt stack 0
   836                           
   837                           ; 2 bytes @ 0x22
   838  000023                     	ds	1
   839  000024                     GetDataDict@ReturnCounter:
   840                           	opt stack 0
   841                           
   842                           ; 1 bytes @ 0x23
   843  000024                     	ds	1
   844  000025                     ??_cobs_encode:
   845  000025                     ??_cobs_decode:
   846  000025                     ??_UART_buff_get:
   847  000025                     UART_buff_put@c:
   848                           	opt stack 0
   849  000025                     UART_buff_init@_this:
   850                           	opt stack 0
   851                           
   852                           ; 2 bytes @ 0x24
   853  000025                     	ds	1
   854  000026                     ??_UART_buff_put:
   855  000026                     writeRegisters@val:
   856                           	opt stack 0
   857  000026                     PotSetpoint@new_point:
   858                           	opt stack 0
   859  000026                     PotClear@x:
   860                           	opt stack 0
   861                           
   862                           ; 2 bytes @ 0x25
   863  000026                     	ds	1
   864  000027                     UART_buff_get@c:
   865                           	opt stack 0
   866  000027                     EnableSlavePower@onof:
   867                           	opt stack 0
   868                           
   869                           ; 2 bytes @ 0x26
   870  000027                     	ds	1
   871  000028                     ??_PotSetpoint:
   872  000028                     Send_put@_data:
   873                           	opt stack 0
   874  000028                     writeRegisters@i:
   875                           	opt stack 0
   876                           
   877                           ; 2 bytes @ 0x27
   878  000028                     	ds	1
   879  000029                     ??_sendData:
   880  000029                     EnableSlavePower@slave:
   881                           	opt stack 0
   882                           
   883                           ; 1 bytes @ 0x28
   884  000029                     	ds	1
   885  00002A                     Clear595@i:
   886                           	opt stack 0
   887                           
   888                           ; 2 bytes @ 0x29
   889  00002A                     	ds	2
   890  00002C                     
   891                           ; 1 bytes @ 0x2B
   892  00002C                     	ds	1
   893  00002D                     ??_ComController:
   894                           
   895                           ; 1 bytes @ 0x2C
   896  00002D                     	ds	1
   897  00002E                     tblptru	equ	0xFF8
   898                           tblptrh	equ	0xFF7
   899                           tblptrl	equ	0xFF6
   900                           tablat	equ	0xFF5
   901                           postinc0	equ	0xFEE
   902                           wreg	equ	0xFE8
   903                           postdec1	equ	0xFE5
   904                           fsr1l	equ	0xFE1
   905                           
   906                           ; 1 bytes @ 0x2D
   907 ;;
   908 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   909 ;;
   910 ;; *************** function _main *****************
   911 ;; Defined at:
   912 ;;		line 11 in file "main.c"
   913 ;; Parameters:    Size  Location     Type
   914 ;;		None
   915 ;; Auto vars:     Size  Location     Type
   916 ;;  i               2   20[BANK1 ] int 
   917 ;;  j               2   18[BANK1 ] int 
   918 ;;  UP              1   22[BANK1 ] unsigned char 
   919 ;; Return value:  Size  Location     Type
   920 ;;                  1    wreg      void 
   921 ;; Registers used:
   922 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   923 ;; Tracked objects:
   924 ;;		On entry : 0/0
   925 ;;		On exit  : 0/0
   926 ;;		Unchanged: 0/0
   927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   928 ;;      Params:         0       0       0       0       0       0       0
   929 ;;      Locals:         0       0       5       0       0       0       0
   930 ;;      Temps:          0       0       0       0       0       0       0
   931 ;;      Totals:         0       0       5       0       0       0       0
   932 ;;Total ram usage:        5 bytes
   933 ;; Hardware stack levels required when called:   13
   934 ;; This function calls:
   935 ;;		_ComputeStorageData
   936 ;;		_CoolingCheck
   937 ;;		_CoolingStart
   938 ;;		_CoolingStop
   939 ;;		_DATAEE_WriteByte
   940 ;;		_PDUStartup
   941 ;;		_PWM4_LoadDutyValue
   942 ;;		_PotSetpoint
   943 ;;		_SYSTEM_Initialize
   944 ;;		_updateComms
   945 ;; This function is called by:
   946 ;;		Startup code after reset
   947 ;; This function uses a non-reentrant model
   948 ;;
   949                           
   950                           	psect	text0
   951  000BEA                     __ptext0:
   952                           	opt stack 0
   953  000BEA                     _main:
   954                           	opt stack 18
   955                           
   956                           ;main.c: 13: SYSTEM_Initialize();
   957                           
   958                           ;incstack = 0
   959  000BEA  ECA0  F00E         	call	_SYSTEM_Initialize	;wreg free
   960                           
   961                           ;main.c: 14: PDUStartup();
   962  000BEE  EC33  F00C         	call	_PDUStartup	;wreg free
   963                           
   964                           ;main.c: 33: (INTCONbits.GIE = 1);
   965  000BF2  8EF2               	bsf	intcon,7,c	;volatile
   966                           
   967                           ;main.c: 36: (INTCONbits.PEIE = 1);
   968  000BF4  8CF2               	bsf	intcon,6,c	;volatile
   969                           
   970                           ;main.c: 43: DATAEE_WriteByte(0, 0x03);
   971  000BF6  0E03               	movlw	3
   972  000BF8  6E1D               	movwf	DATAEE_WriteByte@bData,c
   973  000BFA  0E00               	movlw	0
   974  000BFC  EC9F  F00D         	call	_DATAEE_WriteByte
   975                           
   976                           ;main.c: 44: DATAEE_WriteByte(1, 0xE8);
   977  000C00  0EE8               	movlw	232
   978  000C02  6E1D               	movwf	DATAEE_WriteByte@bData,c
   979  000C04  0E01               	movlw	1
   980  000C06  EC9F  F00D         	call	_DATAEE_WriteByte
   981                           
   982                           ;main.c: 45: DATAEE_WriteByte(2, 0x03);
   983  000C0A  0E03               	movlw	3
   984  000C0C  6E1D               	movwf	DATAEE_WriteByte@bData,c
   985  000C0E  0E02               	movlw	2
   986  000C10  EC9F  F00D         	call	_DATAEE_WriteByte
   987                           
   988                           ;main.c: 46: DATAEE_WriteByte(3, 0xE8);
   989  000C14  0EE8               	movlw	232
   990  000C16  6E1D               	movwf	DATAEE_WriteByte@bData,c
   991  000C18  0E03               	movlw	3
   992  000C1A  EC9F  F00D         	call	_DATAEE_WriteByte
   993                           
   994                           ;main.c: 47: DATAEE_WriteByte(4, 0x03);
   995  000C1E  0E03               	movlw	3
   996  000C20  6E1D               	movwf	DATAEE_WriteByte@bData,c
   997  000C22  0E04               	movlw	4
   998  000C24  EC9F  F00D         	call	_DATAEE_WriteByte
   999                           
  1000                           ;main.c: 48: DATAEE_WriteByte(5, 0xE8);
  1001  000C28  0EE8               	movlw	232
  1002  000C2A  6E1D               	movwf	DATAEE_WriteByte@bData,c
  1003  000C2C  0E05               	movlw	5
  1004  000C2E  EC9F  F00D         	call	_DATAEE_WriteByte
  1005                           
  1006                           ;main.c: 49: DATAEE_WriteByte(6, 0x03);
  1007  000C32  0E03               	movlw	3
  1008  000C34  6E1D               	movwf	DATAEE_WriteByte@bData,c
  1009  000C36  0E06               	movlw	6
  1010  000C38  EC9F  F00D         	call	_DATAEE_WriteByte
  1011                           
  1012                           ;main.c: 50: DATAEE_WriteByte(7, 0xE8);
  1013  000C3C  0EE8               	movlw	232
  1014  000C3E  6E1D               	movwf	DATAEE_WriteByte@bData,c
  1015  000C40  0E07               	movlw	7
  1016  000C42  EC9F  F00D         	call	_DATAEE_WriteByte
  1017                           
  1018                           ;main.c: 51: DATAEE_WriteByte(8, 0x03);
  1019  000C46  0E03               	movlw	3
  1020  000C48  6E1D               	movwf	DATAEE_WriteByte@bData,c
  1021  000C4A  0E08               	movlw	8
  1022  000C4C  EC9F  F00D         	call	_DATAEE_WriteByte
  1023                           
  1024                           ;main.c: 52: DATAEE_WriteByte(9, 0xE8);
  1025  000C50  0EE8               	movlw	232
  1026  000C52  6E1D               	movwf	DATAEE_WriteByte@bData,c
  1027  000C54  0E09               	movlw	9
  1028  000C56  EC9F  F00D         	call	_DATAEE_WriteByte
  1029                           
  1030                           ;main.c: 53: DATAEE_WriteByte(10, 0x03);
  1031  000C5A  0E03               	movlw	3
  1032  000C5C  6E1D               	movwf	DATAEE_WriteByte@bData,c
  1033  000C5E  0E0A               	movlw	10
  1034  000C60  EC9F  F00D         	call	_DATAEE_WriteByte
  1035                           
  1036                           ;main.c: 54: DATAEE_WriteByte(11, 0xE8);
  1037  000C64  0EE8               	movlw	232
  1038  000C66  6E1D               	movwf	DATAEE_WriteByte@bData,c
  1039  000C68  0E0B               	movlw	11
  1040  000C6A  EC9F  F00D         	call	_DATAEE_WriteByte
  1041                           
  1042                           ;main.c: 56: PotSetpoint(0);
  1043  000C6E  0E00               	movlw	0
  1044  000C70  6E27               	movwf	PotSetpoint@new_point+1,c
  1045  000C72  0E00               	movlw	0
  1046  000C74  6E26               	movwf	PotSetpoint@new_point,c
  1047  000C76  EC39  F008         	call	_PotSetpoint	;wreg free
  1048                           
  1049                           ;main.c: 57: PWM4_LoadDutyValue(0);
  1050  000C7A  0E00               	movlw	0
  1051  000C7C  6E1E               	movwf	PWM4_LoadDutyValue@dutyValue+1,c
  1052  000C7E  0E00               	movlw	0
  1053  000C80  6E1D               	movwf	PWM4_LoadDutyValue@dutyValue,c
  1054  000C82  EC06  F00E         	call	_PWM4_LoadDutyValue	;wreg free
  1055                           
  1056                           ;main.c: 58: LATCbits.LATC5 = 0;
  1057  000C86  9A8B               	bcf	3979,5,c	;volatile
  1058                           
  1059                           ;main.c: 59: int i = 0;
  1060  000C88  0E00               	movlw	0
  1061  000C8A  0101               	movlb	1	; () banked
  1062  000C8C  6FEB               	movwf	(main@i+1)& (0+255),b
  1063  000C8E  0E00               	movlw	0
  1064  000C90  6FEA               	movwf	main@i& (0+255),b
  1065                           
  1066                           ; BSR set to: 1
  1067                           ;main.c: 60: bool UP = 0;
  1068  000C92  0E00               	movlw	0
  1069  000C94  0101               	movlb	1	; () banked
  1070  000C96  6FEC               	movwf	main@UP& (0+255),b
  1071                           
  1072                           ;main.c: 61: ComputeStorageData();
  1073  000C98  EC29  F009         	call	_ComputeStorageData	;wreg free
  1074                           
  1075                           ;main.c: 63: int j = 1;
  1076  000C9C  0E00               	movlw	0
  1077  000C9E  0101               	movlb	1	; () banked
  1078  000CA0  6FE9               	movwf	(main@j+1)& (0+255),b
  1079  000CA2  0E01               	movlw	1
  1080  000CA4  6FE8               	movwf	main@j& (0+255),b
  1081  000CA6                     l4397:
  1082                           
  1083                           ; BSR set to: 1
  1084                           ;main.c: 65: updateComms();
  1085  000CA6  EC5B  F00F         	call	_updateComms	;wreg free
  1086                           
  1087                           ;main.c: 66: if(CoolingCheck() && UP == 0){
  1088  000CAA  EC68  F00F         	call	_CoolingCheck	;wreg free
  1089  000CAE  0900               	iorlw	0
  1090  000CB0  B4D8               	btfsc	status,2,c
  1091  000CB2  D00A               	goto	l4407
  1092  000CB4  0101               	movlb	1	; () banked
  1093  000CB6  51EC               	movf	main@UP& (0+255),w,b
  1094  000CB8  0101               	movlb	1	; () banked
  1095  000CBA  A4D8               	btfss	status,2,c
  1096  000CBC  D005               	goto	l4407
  1097                           
  1098                           ; BSR set to: 1
  1099                           ;main.c: 67: UP = 1;
  1100  000CBE  0E01               	movlw	1
  1101  000CC0  0101               	movlb	1	; () banked
  1102  000CC2  6FEC               	movwf	main@UP& (0+255),b
  1103                           
  1104                           ; BSR set to: 1
  1105                           ;main.c: 68: CoolingStart();
  1106  000CC4  ECD2  F00E         	call	_CoolingStart	;wreg free
  1107  000CC8                     l4407:
  1108                           
  1109                           ;main.c: 69: }
  1110                           ;main.c: 70: if(!CoolingCheck() && UP == 1){
  1111  000CC8  EC68  F00F         	call	_CoolingCheck	;wreg free
  1112  000CCC  0900               	iorlw	0
  1113  000CCE  A4D8               	btfss	status,2,c
  1114  000CD0  D009               	goto	l4415
  1115  000CD2  0101               	movlb	1	; () banked
  1116  000CD4  05EC               	decf	main@UP& (0+255),w,b
  1117  000CD6  A4D8               	btfss	status,2,c
  1118  000CD8  D005               	goto	l4415
  1119                           
  1120                           ; BSR set to: 1
  1121                           ;main.c: 71: UP = 0;
  1122  000CDA  0E00               	movlw	0
  1123  000CDC  0101               	movlb	1	; () banked
  1124  000CDE  6FEC               	movwf	main@UP& (0+255),b
  1125                           
  1126                           ; BSR set to: 1
  1127                           ;main.c: 72: CoolingStop();
  1128  000CE0  EC3B  F00F         	call	_CoolingStop	;wreg free
  1129  000CE4                     l4415:
  1130                           
  1131                           ;main.c: 73: }
  1132                           ;main.c: 74: i++;
  1133  000CE4  0101               	movlb	1	; () banked
  1134  000CE6  4BEA               	infsnz	main@i& (0+255),f,b
  1135  000CE8  2BEB               	incf	(main@i+1)& (0+255),f,b
  1136                           
  1137                           ; BSR set to: 1
  1138                           ;main.c: 75: PWM4_LoadDutyValue(i);
  1139  000CEA  C1EA  F01D         	movff	main@i,PWM4_LoadDutyValue@dutyValue
  1140  000CEE  C1EB  F01E         	movff	main@i+1,PWM4_LoadDutyValue@dutyValue+1
  1141  000CF2  EC06  F00E         	call	_PWM4_LoadDutyValue	;wreg free
  1142                           
  1143                           ;main.c: 76: if(i>500){
  1144  000CF6  0101               	movlb	1	; () banked
  1145  000CF8  BFEB               	btfsc	(main@i+1)& (0+255),7,b
  1146  000CFA  D7D5               	goto	l4397
  1147  000CFC  0EF5               	movlw	245
  1148  000CFE  0101               	movlb	1	; () banked
  1149  000D00  5DEA               	subwf	main@i& (0+255),w,b
  1150  000D02  0E01               	movlw	1
  1151  000D04  0101               	movlb	1	; () banked
  1152  000D06  59EB               	subwfb	(main@i+1)& (0+255),w,b
  1153  000D08  A0D8               	btfss	status,0,c
  1154  000D0A  D7CD               	goto	l4397
  1155                           
  1156                           ; BSR set to: 1
  1157                           ;main.c: 77: i = 0;
  1158  000D0C  0E00               	movlw	0
  1159  000D0E  0101               	movlb	1	; () banked
  1160  000D10  6FEB               	movwf	(main@i+1)& (0+255),b
  1161  000D12  0E00               	movlw	0
  1162  000D14  6FEA               	movwf	main@i& (0+255),b
  1163                           
  1164                           ; BSR set to: 1
  1165                           
  1166                           ; BSR set to: 1
  1167  000D16  D7C7               	goto	l4397
  1168  000D18                     __end_of_main:
  1169                           	opt stack 0
  1170                           tblptru	equ	0xFF8
  1171                           tblptrh	equ	0xFF7
  1172                           tblptrl	equ	0xFF6
  1173                           tablat	equ	0xFF5
  1174                           intcon	equ	0xFF2
  1175                           postinc0	equ	0xFEE
  1176                           wreg	equ	0xFE8
  1177                           postdec1	equ	0xFE5
  1178                           fsr1l	equ	0xFE1
  1179                           status	equ	0xFD8
  1180                           
  1181 ;; *************** function _updateComms *****************
  1182 ;; Defined at:
  1183 ;;		line 22 in file "Communications.c"
  1184 ;; Parameters:    Size  Location     Type
  1185 ;;		None
  1186 ;; Auto vars:     Size  Location     Type
  1187 ;;		None
  1188 ;; Return value:  Size  Location     Type
  1189 ;;                  1    wreg      void 
  1190 ;; Registers used:
  1191 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1192 ;; Tracked objects:
  1193 ;;		On entry : 0/0
  1194 ;;		On exit  : 0/0
  1195 ;;		Unchanged: 0/0
  1196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1197 ;;      Params:         0       0       0       0       0       0       0
  1198 ;;      Locals:         0       0       0       0       0       0       0
  1199 ;;      Temps:          0       0       0       0       0       0       0
  1200 ;;      Totals:         0       0       0       0       0       0       0
  1201 ;;Total ram usage:        0 bytes
  1202 ;; Hardware stack levels used:    1
  1203 ;; Hardware stack levels required when called:   12
  1204 ;; This function calls:
  1205 ;;		_receiveData
  1206 ;; This function is called by:
  1207 ;;		_main
  1208 ;; This function uses a non-reentrant model
  1209 ;;
  1210                           
  1211                           	psect	text1
  1212  001EB6                     __ptext1:
  1213                           	opt stack 0
  1214  001EB6                     _updateComms:
  1215                           	opt stack 18
  1216                           
  1217                           ;Communications.c: 23: if (receiveData()) {
  1218                           
  1219                           ; BSR set to: 1
  1220                           ;incstack = 0
  1221  001EB6  EC8C  F006         	call	_receiveData	;wreg free
  1222  001EBA  0012               	return	
  1223  001EBC                     __end_of_updateComms:
  1224                           	opt stack 0
  1225                           tblptru	equ	0xFF8
  1226                           tblptrh	equ	0xFF7
  1227                           tblptrl	equ	0xFF6
  1228                           tablat	equ	0xFF5
  1229                           intcon	equ	0xFF2
  1230                           postinc0	equ	0xFEE
  1231                           wreg	equ	0xFE8
  1232                           postdec1	equ	0xFE5
  1233                           fsr1l	equ	0xFE1
  1234                           status	equ	0xFD8
  1235                           
  1236 ;; *************** function _receiveData *****************
  1237 ;; Defined at:
  1238 ;;		line 94 in file "CarCom.c"
  1239 ;; Parameters:    Size  Location     Type
  1240 ;;		None
  1241 ;; Auto vars:     Size  Location     Type
  1242 ;;  result          3   15[BANK1 ] struct .
  1243 ;;  i               2   12[BANK1 ] int 
  1244 ;;  j               2    9[BANK1 ] int 
  1245 ;;  Data            1   14[BANK1 ] unsigned char 
  1246 ;;  CS              1   11[BANK1 ] unsigned char 
  1247 ;; Return value:  Size  Location     Type
  1248 ;;                  1    wreg      unsigned char 
  1249 ;; Registers used:
  1250 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1251 ;; Tracked objects:
  1252 ;;		On entry : 0/0
  1253 ;;		On exit  : 0/0
  1254 ;;		Unchanged: 0/0
  1255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1256 ;;      Params:         0       0       0       0       0       0       0
  1257 ;;      Locals:         0       0       9       0       0       0       0
  1258 ;;      Temps:          0       0       5       0       0       0       0
  1259 ;;      Totals:         0       0      14       0       0       0       0
  1260 ;;Total ram usage:       14 bytes
  1261 ;; Hardware stack levels used:    1
  1262 ;; Hardware stack levels required when called:   11
  1263 ;; This function calls:
  1264 ;;		_CRC8
  1265 ;;		_ComController
  1266 ;;		_Delay
  1267 ;;		_Receive_available
  1268 ;;		_Receive_get
  1269 ;;		_cobs_decode
  1270 ;; This function is called by:
  1271 ;;		_updateComms
  1272 ;; This function uses a non-reentrant model
  1273 ;;
  1274                           
  1275                           	psect	text2
  1276  000D18                     __ptext2:
  1277                           	opt stack 0
  1278  000D18                     _receiveData:
  1279                           	opt stack 18
  1280                           
  1281                           ;CarCom.c: 96: if(Receive_available()>5){
  1282                           
  1283                           ;incstack = 0
  1284  000D18  ECFC  F00E         	call	_Receive_available	;wreg free
  1285  000D1C  BE20               	btfsc	?_Receive_available+1,7,c
  1286  000D1E  D08D               	goto	l4159
  1287  000D20  5020               	movf	?_Receive_available+1,w,c
  1288  000D22  E104               	bnz	u2560
  1289  000D24  0E06               	movlw	6
  1290  000D26  5C1F               	subwf	?_Receive_available,w,c
  1291  000D28  A0D8               	btfss	status,0,c
  1292  000D2A  D087               	goto	l4159
  1293  000D2C                     u2560:
  1294                           
  1295                           ;CarCom.c: 97: if(Receive_get() == 5){
  1296  000D2C  EC44  F00F         	call	_Receive_get	;wreg free
  1297  000D30  0A05               	xorlw	5
  1298  000D32  A4D8               	btfss	status,2,c
  1299  000D34  D082               	goto	l4159
  1300                           
  1301                           ;CarCom.c: 98: int i = 0;
  1302  000D36  0E00               	movlw	0
  1303  000D38  0101               	movlb	1	; () banked
  1304  000D3A  6FE3               	movwf	(receiveData@i+1)& (0+255),b
  1305  000D3C  0E00               	movlw	0
  1306  000D3E  6FE2               	movwf	receiveData@i& (0+255),b
  1307                           
  1308                           ;CarCom.c: 99: char Data = 0;
  1309  000D40  0E00               	movlw	0
  1310  000D42  0101               	movlb	1	; () banked
  1311  000D44  6FE4               	movwf	receiveData@Data& (0+255),b
  1312  000D46                     l4133:
  1313                           
  1314                           ; BSR set to: 1
  1315                           ;CarCom.c: 101: Data = Receive_get();
  1316  000D46  EC44  F00F         	call	_Receive_get	;wreg free
  1317  000D4A  0101               	movlb	1	; () banked
  1318  000D4C  6FE4               	movwf	receiveData@Data& (0+255),b
  1319                           
  1320                           ; BSR set to: 1
  1321                           ;CarCom.c: 102: ReciveArray[i] = Data;
  1322  000D4E  0EB8               	movlw	low _ReciveArray
  1323  000D50  0101               	movlb	1	; () banked
  1324  000D52  25E2               	addwf	receiveData@i& (0+255),w,b
  1325  000D54  6ED9               	movwf	fsr2l,c
  1326  000D56  0E01               	movlw	high _ReciveArray
  1327  000D58  0101               	movlb	1	; () banked
  1328  000D5A  21E3               	addwfc	(receiveData@i+1)& (0+255),w,b
  1329  000D5C  6EDA               	movwf	fsr2h,c
  1330  000D5E  C1E4  FFDF         	movff	receiveData@Data,indf2
  1331                           
  1332                           ; BSR set to: 1
  1333                           ;CarCom.c: 104: Delay(1);
  1334  000D62  0E01               	movlw	1
  1335  000D64  6E1D               	movwf	Delay@wait,c
  1336  000D66  0E00               	movlw	0
  1337  000D68  6E1E               	movwf	Delay@wait+1,c
  1338  000D6A  0E00               	movlw	0
  1339  000D6C  6E1F               	movwf	Delay@wait+2,c
  1340  000D6E  0E00               	movlw	0
  1341  000D70  6E20               	movwf	Delay@wait+3,c
  1342  000D72  EC37  F00D         	call	_Delay	;wreg free
  1343                           
  1344                           ;CarCom.c: 105: i++;
  1345  000D76  0101               	movlb	1	; () banked
  1346  000D78  4BE2               	infsnz	receiveData@i& (0+255),f,b
  1347  000D7A  2BE3               	incf	(receiveData@i+1)& (0+255),f,b
  1348                           
  1349                           ; BSR set to: 1
  1350                           ;CarCom.c: 106: }while(Data != 0x00);
  1351  000D7C  0101               	movlb	1	; () banked
  1352  000D7E  51E4               	movf	receiveData@Data& (0+255),w,b
  1353  000D80  0101               	movlb	1	; () banked
  1354  000D82  A4D8               	btfss	status,2,c
  1355  000D84  D7E0               	goto	l4133
  1356                           
  1357                           ; BSR set to: 1
  1358                           ;CarCom.c: 110: int j = 0;
  1359                           
  1360                           ; BSR set to: 1
  1361  000D86  0E00               	movlw	0
  1362  000D88  0101               	movlb	1	; () banked
  1363  000D8A  6FE0               	movwf	(receiveData@j+1)& (0+255),b
  1364  000D8C  0E00               	movlw	0
  1365  000D8E  6FDF               	movwf	receiveData@j& (0+255),b
  1366                           
  1367                           ; BSR set to: 1
  1368                           ;CarCom.c: 119: cobs_decode_result result;
  1369                           ;CarCom.c: 121: result = cobs_decode(ProcessArray, sizeof(ProcessArray), ReciveArray, i)
      +                          ;
  1370  000D90  0E9A               	movlw	low _ProcessArray
  1371  000D92  6E1D               	movwf	cobs_decode@dst_buf_ptr,c
  1372  000D94  0E01               	movlw	high _ProcessArray
  1373  000D96  6E1E               	movwf	cobs_decode@dst_buf_ptr+1,c
  1374  000D98  0E00               	movlw	0
  1375  000D9A  6E20               	movwf	cobs_decode@dst_buf_len+1,c
  1376  000D9C  0E1E               	movlw	30
  1377  000D9E  6E1F               	movwf	cobs_decode@dst_buf_len,c
  1378  000DA0  0EB8               	movlw	low _ReciveArray
  1379  000DA2  6E21               	movwf	cobs_decode@src_ptr,c
  1380  000DA4  0E01               	movlw	high _ReciveArray
  1381  000DA6  6E22               	movwf	cobs_decode@src_ptr+1,c
  1382  000DA8  C1E2  F023         	movff	receiveData@i,cobs_decode@src_len
  1383  000DAC  C1E3  F024         	movff	receiveData@i+1,cobs_decode@src_len+1
  1384  000DB0  ECA0  F003         	call	_cobs_decode	;wreg free
  1385  000DB4  C01D  F1E5         	movff	?_cobs_decode,receiveData@result
  1386  000DB8  C01E  F1E6         	movff	?_cobs_decode+1,receiveData@result+1
  1387  000DBC  C01F  F1E7         	movff	?_cobs_decode+2,receiveData@result+2
  1388                           
  1389                           ;CarCom.c: 123: char CS = CRC8(ProcessArray, result.out_len-1);
  1390  000DC0  0E9A               	movlw	low _ProcessArray
  1391  000DC2  6E1D               	movwf	CRC8@data,c
  1392  000DC4  0E01               	movlw	high _ProcessArray
  1393  000DC6  6E1E               	movwf	CRC8@data+1,c
  1394  000DC8  0101               	movlb	1	; () banked
  1395  000DCA  05E5               	decf	receiveData@result& (0+255),w,b
  1396  000DCC  6E1F               	movwf	CRC8@len,c
  1397  000DCE  EC12  F00D         	call	_CRC8	;wreg free
  1398  000DD2  0101               	movlb	1	; () banked
  1399  000DD4  6FE1               	movwf	receiveData@CS& (0+255),b
  1400                           
  1401                           ; BSR set to: 1
  1402                           ;CarCom.c: 127: if(ProcessArray[result.out_len-1] == CS){
  1403  000DD6  0EFF               	movlw	255
  1404  000DD8  0101               	movlb	1	; () banked
  1405  000DDA  6FDA               	movwf	??_receiveData& (0+255),b
  1406  000DDC  0EFF               	movlw	255
  1407  000DDE  0101               	movlb	1	; () banked
  1408  000DE0  6FDB               	movwf	(??_receiveData+1)& (0+255),b
  1409  000DE2  C1E5  F1DC         	movff	receiveData@result,??_receiveData+2
  1410  000DE6  C1E6  F1DD         	movff	receiveData@result+1,??_receiveData+3
  1411  000DEA  0101               	movlb	1	; () banked
  1412  000DEC  51DA               	movf	??_receiveData& (0+255),w,b
  1413  000DEE  0101               	movlb	1	; () banked
  1414  000DF0  27DC               	addwf	(??_receiveData+2)& (0+255),f,b
  1415  000DF2  0101               	movlb	1	; () banked
  1416  000DF4  51DB               	movf	(??_receiveData+1)& (0+255),w,b
  1417  000DF6  0101               	movlb	1	; () banked
  1418  000DF8  23DD               	addwfc	(??_receiveData+3)& (0+255),f,b
  1419  000DFA  0E9A               	movlw	low _ProcessArray
  1420  000DFC  0101               	movlb	1	; () banked
  1421  000DFE  25DC               	addwf	(??_receiveData+2)& (0+255),w,b
  1422  000E00  6ED9               	movwf	fsr2l,c
  1423  000E02  0E01               	movlw	high _ProcessArray
  1424  000E04  0101               	movlb	1	; () banked
  1425  000E06  21DD               	addwfc	(??_receiveData+3)& (0+255),w,b
  1426  000E08  6EDA               	movwf	fsr2h,c
  1427  000E0A  0101               	movlb	1	; () banked
  1428  000E0C  51E1               	movf	receiveData@CS& (0+255),w,b
  1429  000E0E  18DE               	xorwf	postinc2,w,c
  1430  000E10  A4D8               	btfss	status,2,c
  1431  000E12  D013               	goto	l4159
  1432                           
  1433                           ; BSR set to: 1
  1434                           
  1435                           ;CarCom.c: 128: do { LATA3 = ~LATA3; } while(0);
  1436  000E14  B689               	btfsc	3977,3,c	;volatile
  1437  000E16  D002               	goto	u2600
  1438  000E18  8689               	bsf	3977,3,c	;volatile
  1439  000E1A  D001               	goto	l4151
  1440  000E1C                     u2600:
  1441  000E1C  9689               	bcf	3977,3,c	;volatile
  1442  000E1E                     l4151:
  1443                           
  1444                           ;CarCom.c: 129: ComController(ProcessArray,result.out_len);
  1445  000E1E  0E9A               	movlw	low _ProcessArray
  1446  000E20  0100               	movlb	0	; () banked
  1447  000E22  6FBA               	movwf	ComController@DTI& (0+255),b
  1448  000E24  0E01               	movlw	high _ProcessArray
  1449  000E26  0100               	movlb	0	; () banked
  1450  000E28  6FBB               	movwf	(ComController@DTI+1)& (0+255),b
  1451  000E2A  C1E5  F0BC         	movff	receiveData@result,ComController@lenth
  1452  000E2E  C1E6  F0BD         	movff	receiveData@result+1,ComController@lenth+1
  1453  000E32  ECFB  F009         	call	_ComController	;wreg free
  1454                           
  1455                           ;CarCom.c: 130: return 1;
  1456  000E36  0E01               	movlw	1
  1457  000E38  0012               	return	
  1458  000E3A                     l4159:
  1459                           
  1460                           ;CarCom.c: 148: }
  1461                           ;CarCom.c: 150: return 0;
  1462  000E3A  0E00               	movlw	0
  1463  000E3C  0012               	return	
  1464  000E3E                     __end_of_receiveData:
  1465                           	opt stack 0
  1466                           tblptru	equ	0xFF8
  1467                           tblptrh	equ	0xFF7
  1468                           tblptrl	equ	0xFF6
  1469                           tablat	equ	0xFF5
  1470                           intcon	equ	0xFF2
  1471                           postinc0	equ	0xFEE
  1472                           wreg	equ	0xFE8
  1473                           postdec1	equ	0xFE5
  1474                           fsr1l	equ	0xFE1
  1475                           indf2	equ	0xFDF
  1476                           postinc2	equ	0xFDE
  1477                           fsr2h	equ	0xFDA
  1478                           fsr2l	equ	0xFD9
  1479                           status	equ	0xFD8
  1480                           
  1481 ;; *************** function _cobs_decode *****************
  1482 ;; Defined at:
  1483 ;;		line 115 in file "COBS.c"
  1484 ;; Parameters:    Size  Location     Type
  1485 ;;  dst_buf_ptr     2   28[COMRAM] PTR unsigned char 
  1486 ;;		 -> ProcessArray(30), 
  1487 ;;  dst_buf_len     2   30[COMRAM] unsigned int 
  1488 ;;  src_ptr         2   32[COMRAM] PTR const unsigned char 
  1489 ;;		 -> ReciveArray(30), 
  1490 ;;  src_len         2   34[COMRAM] unsigned int 
  1491 ;; Auto vars:     Size  Location     Type
  1492 ;;  result          3   11[BANK0 ] struct .
  1493 ;;  dst_write_pt    2    8[BANK0 ] PTR unsigned char 
  1494 ;;		 -> ProcessArray(30), 
  1495 ;;  remaining_by    2    6[BANK0 ] unsigned int 
  1496 ;;  dst_buf_end_    2    2[BANK0 ] PTR unsigned char 
  1497 ;;		 -> ProcessArray(30), 
  1498 ;;  src_end_ptr     2    0[BANK0 ] PTR const unsigned char 
  1499 ;;		 -> ReciveArray(30), 
  1500 ;;  len_code        1   10[BANK0 ] unsigned char 
  1501 ;;  i               1    5[BANK0 ] unsigned char 
  1502 ;;  src_byte        1    4[BANK0 ] unsigned char 
  1503 ;; Return value:  Size  Location     Type
  1504 ;;                  3   28[COMRAM] struct .
  1505 ;; Registers used:
  1506 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1507 ;; Tracked objects:
  1508 ;;		On entry : 0/0
  1509 ;;		On exit  : 0/0
  1510 ;;		Unchanged: 0/0
  1511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1512 ;;      Params:         8       0       0       0       0       0       0
  1513 ;;      Locals:         0      14       0       0       0       0       0
  1514 ;;      Temps:          2       0       0       0       0       0       0
  1515 ;;      Totals:        10      14       0       0       0       0       0
  1516 ;;Total ram usage:       24 bytes
  1517 ;; Hardware stack levels used:    1
  1518 ;; Hardware stack levels required when called:    6
  1519 ;; This function calls:
  1520 ;;		Nothing
  1521 ;; This function is called by:
  1522 ;;		_receiveData
  1523 ;; This function uses a non-reentrant model
  1524 ;;
  1525                           
  1526                           	psect	text3
  1527  000740                     __ptext3:
  1528                           	opt stack 0
  1529  000740                     _cobs_decode:
  1530                           	opt stack 22
  1531                           
  1532                           ;COBS.c: 117: cobs_decode_result result = { 0, COBS_DECODE_OK };
  1533                           
  1534                           ;incstack = 0
  1535  000740  C031  F06B         	movff	cobs_decode@F192,cobs_decode@result
  1536  000744  C032  F06C         	movff	cobs_decode@F192+1,cobs_decode@result+1
  1537  000748  C033  F06D         	movff	cobs_decode@F192+2,cobs_decode@result+2
  1538                           
  1539                           ;COBS.c: 118: const uint8_t * src_end_ptr = src_ptr + src_len;
  1540  00074C  5023               	movf	cobs_decode@src_len,w,c
  1541  00074E  2421               	addwf	cobs_decode@src_ptr,w,c
  1542  000750  0100               	movlb	0	; () banked
  1543  000752  6F60               	movwf	cobs_decode@src_end_ptr& (0+255),b
  1544  000754  5024               	movf	cobs_decode@src_len+1,w,c
  1545  000756  2022               	addwfc	cobs_decode@src_ptr+1,w,c
  1546  000758  0100               	movlb	0	; () banked
  1547  00075A  6F61               	movwf	(cobs_decode@src_end_ptr+1)& (0+255),b
  1548                           
  1549                           ;COBS.c: 119: uint8_t * dst_buf_end_ptr = dst_buf_ptr + dst_buf_len;
  1550  00075C  501F               	movf	cobs_decode@dst_buf_len,w,c
  1551  00075E  241D               	addwf	cobs_decode@dst_buf_ptr,w,c
  1552  000760  0100               	movlb	0	; () banked
  1553  000762  6F62               	movwf	cobs_decode@dst_buf_end_ptr& (0+255),b
  1554  000764  5020               	movf	cobs_decode@dst_buf_len+1,w,c
  1555  000766  201E               	addwfc	cobs_decode@dst_buf_ptr+1,w,c
  1556  000768  0100               	movlb	0	; () banked
  1557  00076A  6F63               	movwf	(cobs_decode@dst_buf_end_ptr+1)& (0+255),b
  1558                           
  1559                           ;COBS.c: 120: uint8_t * dst_write_ptr = dst_buf_ptr;
  1560  00076C  C01D  F068         	movff	cobs_decode@dst_buf_ptr,cobs_decode@dst_write_ptr
  1561  000770  C01E  F069         	movff	cobs_decode@dst_buf_ptr+1,cobs_decode@dst_write_ptr+1
  1562                           
  1563                           ;COBS.c: 121: size_t remaining_bytes;
  1564                           ;COBS.c: 122: uint8_t src_byte;
  1565                           ;COBS.c: 123: uint8_t i;
  1566                           ;COBS.c: 124: uint8_t len_code;
  1567                           ;COBS.c: 128: if ((dst_buf_ptr == (0)) || (src_ptr == (0)))
  1568  000774  501D               	movf	cobs_decode@dst_buf_ptr,w,c
  1569  000776  101E               	iorwf	cobs_decode@dst_buf_ptr+1,w,c
  1570  000778  B4D8               	btfsc	status,2,c
  1571  00077A  D004               	goto	l3965
  1572                           
  1573                           ; BSR set to: 0
  1574  00077C  5021               	movf	cobs_decode@src_ptr,w,c
  1575  00077E  1022               	iorwf	cobs_decode@src_ptr+1,w,c
  1576  000780  A4D8               	btfss	status,2,c
  1577  000782  D00A               	goto	l3971
  1578  000784                     l3965:
  1579                           
  1580                           ; BSR set to: 0
  1581                           ;COBS.c: 129: {
  1582                           ;COBS.c: 130: result.status = COBS_DECODE_NULL_POINTER;
  1583  000784  0E01               	movlw	1
  1584  000786  0100               	movlb	0	; () banked
  1585  000788  6F6D               	movwf	(cobs_decode@result+2)& (0+255),b
  1586                           
  1587                           ; BSR set to: 0
  1588                           ;COBS.c: 131: return result;
  1589  00078A  C06B  F01D         	movff	cobs_decode@result,?_cobs_decode
  1590  00078E  C06C  F01E         	movff	cobs_decode@result+1,?_cobs_decode+1
  1591  000792  C06D  F01F         	movff	cobs_decode@result+2,?_cobs_decode+2
  1592                           
  1593                           ; BSR set to: 0
  1594  000796  0012               	return	
  1595  000798                     l3971:
  1596                           
  1597                           ; BSR set to: 0
  1598                           ;COBS.c: 132: }
  1599                           ;COBS.c: 134: if (src_len != 0)
  1600  000798  5023               	movf	cobs_decode@src_len,w,c
  1601  00079A  1024               	iorwf	cobs_decode@src_len+1,w,c
  1602  00079C  B4D8               	btfsc	status,2,c
  1603  00079E  D096               	goto	l4035
  1604  0007A0                     l3973:
  1605                           
  1606                           ; BSR set to: 0
  1607                           ;COBS.c: 137: {
  1608                           ;COBS.c: 138: len_code = *src_ptr++;
  1609  0007A0  C021  FFD9         	movff	cobs_decode@src_ptr,fsr2l
  1610  0007A4  C022  FFDA         	movff	cobs_decode@src_ptr+1,fsr2h
  1611  0007A8  50DF               	movf	indf2,w,c
  1612  0007AA  0100               	movlb	0	; () banked
  1613  0007AC  6F6A               	movwf	cobs_decode@len_code& (0+255),b
  1614                           
  1615                           ; BSR set to: 0
  1616  0007AE  4A21               	infsnz	cobs_decode@src_ptr,f,c
  1617  0007B0  2A22               	incf	cobs_decode@src_ptr+1,f,c
  1618                           
  1619                           ; BSR set to: 0
  1620                           ;COBS.c: 139: if (len_code == 0)
  1621  0007B2  0100               	movlb	0	; () banked
  1622  0007B4  516A               	movf	cobs_decode@len_code& (0+255),w,b
  1623  0007B6  0100               	movlb	0	; () banked
  1624  0007B8  A4D8               	btfss	status,2,c
  1625  0007BA  D003               	goto	l3981
  1626                           
  1627                           ; BSR set to: 0
  1628                           ;COBS.c: 140: {
  1629                           ;COBS.c: 141: result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
  1630  0007BC  0100               	movlb	0	; () banked
  1631  0007BE  856D               	bsf	(cobs_decode@result+2)& (0+255),2,b
  1632                           
  1633                           ;COBS.c: 142: break;
  1634  0007C0  D085               	goto	l4035
  1635  0007C2                     l3981:
  1636                           
  1637                           ; BSR set to: 0
  1638                           ;COBS.c: 143: }
  1639                           ;COBS.c: 144: len_code--;
  1640  0007C2  0100               	movlb	0	; () banked
  1641  0007C4  076A               	decf	cobs_decode@len_code& (0+255),f,b
  1642                           
  1643                           ; BSR set to: 0
  1644                           ;COBS.c: 147: remaining_bytes = src_end_ptr - src_ptr;
  1645  0007C6  C021  F025         	movff	cobs_decode@src_ptr,??_cobs_decode
  1646  0007CA  C022  F026         	movff	cobs_decode@src_ptr+1,??_cobs_decode+1
  1647  0007CE  1E25               	comf	??_cobs_decode,f,c
  1648  0007D0  1E26               	comf	??_cobs_decode+1,f,c
  1649  0007D2  4A25               	infsnz	??_cobs_decode,f,c
  1650  0007D4  2A26               	incf	??_cobs_decode+1,f,c
  1651  0007D6  0100               	movlb	0	; () banked
  1652  0007D8  5160               	movf	cobs_decode@src_end_ptr& (0+255),w,b
  1653  0007DA  2425               	addwf	??_cobs_decode,w,c
  1654  0007DC  0100               	movlb	0	; () banked
  1655  0007DE  6F66               	movwf	cobs_decode@remaining_bytes& (0+255),b
  1656  0007E0  0100               	movlb	0	; () banked
  1657  0007E2  5161               	movf	(cobs_decode@src_end_ptr+1)& (0+255),w,b
  1658  0007E4  2026               	addwfc	??_cobs_decode+1,w,c
  1659  0007E6  0100               	movlb	0	; () banked
  1660  0007E8  6F67               	movwf	(cobs_decode@remaining_bytes+1)& (0+255),b
  1661                           
  1662                           ; BSR set to: 0
  1663                           ;COBS.c: 148: if (len_code > remaining_bytes)
  1664  0007EA  0100               	movlb	0	; () banked
  1665  0007EC  516A               	movf	cobs_decode@len_code& (0+255),w,b
  1666  0007EE  0100               	movlb	0	; () banked
  1667  0007F0  5D66               	subwf	cobs_decode@remaining_bytes& (0+255),w,b
  1668  0007F2  0E00               	movlw	0
  1669  0007F4  5967               	subwfb	(cobs_decode@remaining_bytes+1)& (0+255),w,b
  1670  0007F6  B0D8               	btfsc	status,0,c
  1671  0007F8  D004               	goto	l3991
  1672                           
  1673                           ; BSR set to: 0
  1674                           ;COBS.c: 149: {
  1675                           ;COBS.c: 150: result.status |= COBS_DECODE_INPUT_TOO_SHORT;
  1676  0007FA  0100               	movlb	0	; () banked
  1677  0007FC  876D               	bsf	(cobs_decode@result+2)& (0+255),3,b
  1678                           
  1679                           ; BSR set to: 0
  1680                           ;COBS.c: 151: len_code = remaining_bytes;
  1681  0007FE  C066  F06A         	movff	cobs_decode@remaining_bytes,cobs_decode@len_code
  1682  000802                     l3991:
  1683                           
  1684                           ; BSR set to: 0
  1685                           ;COBS.c: 152: }
  1686                           ;COBS.c: 155: remaining_bytes = dst_buf_end_ptr - dst_write_ptr;
  1687  000802  C068  F025         	movff	cobs_decode@dst_write_ptr,??_cobs_decode
  1688  000806  C069  F026         	movff	cobs_decode@dst_write_ptr+1,??_cobs_decode+1
  1689  00080A  1E25               	comf	??_cobs_decode,f,c
  1690  00080C  1E26               	comf	??_cobs_decode+1,f,c
  1691  00080E  4A25               	infsnz	??_cobs_decode,f,c
  1692  000810  2A26               	incf	??_cobs_decode+1,f,c
  1693  000812  0100               	movlb	0	; () banked
  1694  000814  5162               	movf	cobs_decode@dst_buf_end_ptr& (0+255),w,b
  1695  000816  2425               	addwf	??_cobs_decode,w,c
  1696  000818  0100               	movlb	0	; () banked
  1697  00081A  6F66               	movwf	cobs_decode@remaining_bytes& (0+255),b
  1698  00081C  0100               	movlb	0	; () banked
  1699  00081E  5163               	movf	(cobs_decode@dst_buf_end_ptr+1)& (0+255),w,b
  1700  000820  2026               	addwfc	??_cobs_decode+1,w,c
  1701  000822  0100               	movlb	0	; () banked
  1702  000824  6F67               	movwf	(cobs_decode@remaining_bytes+1)& (0+255),b
  1703                           
  1704                           ; BSR set to: 0
  1705                           ;COBS.c: 156: if (len_code > remaining_bytes)
  1706  000826  0100               	movlb	0	; () banked
  1707  000828  516A               	movf	cobs_decode@len_code& (0+255),w,b
  1708  00082A  0100               	movlb	0	; () banked
  1709  00082C  5D66               	subwf	cobs_decode@remaining_bytes& (0+255),w,b
  1710  00082E  0E00               	movlw	0
  1711  000830  5967               	subwfb	(cobs_decode@remaining_bytes+1)& (0+255),w,b
  1712  000832  B0D8               	btfsc	status,0,c
  1713  000834  D004               	goto	l3999
  1714                           
  1715                           ; BSR set to: 0
  1716                           ;COBS.c: 157: {
  1717                           ;COBS.c: 158: result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
  1718  000836  0100               	movlb	0	; () banked
  1719  000838  836D               	bsf	(cobs_decode@result+2)& (0+255),1,b
  1720                           
  1721                           ; BSR set to: 0
  1722                           ;COBS.c: 159: len_code = remaining_bytes;
  1723  00083A  C066  F06A         	movff	cobs_decode@remaining_bytes,cobs_decode@len_code
  1724  00083E                     l3999:
  1725                           
  1726                           ; BSR set to: 0
  1727                           ;COBS.c: 160: }
  1728                           ;COBS.c: 162: for (i = len_code; i != 0; i--)
  1729  00083E  C06A  F065         	movff	cobs_decode@len_code,cobs_decode@i
  1730  000842                     l4001:
  1731                           
  1732                           ; BSR set to: 0
  1733  000842  0100               	movlb	0	; () banked
  1734  000844  5165               	movf	cobs_decode@i& (0+255),w,b
  1735  000846  0100               	movlb	0	; () banked
  1736  000848  B4D8               	btfsc	status,2,c
  1737  00084A  D01C               	goto	l4021
  1738                           
  1739                           ; BSR set to: 0
  1740                           ;COBS.c: 163: {
  1741                           ;COBS.c: 164: src_byte = *src_ptr++;
  1742                           
  1743                           ; BSR set to: 0
  1744                           
  1745                           ; BSR set to: 0
  1746  00084C  C021  FFD9         	movff	cobs_decode@src_ptr,fsr2l
  1747  000850  C022  FFDA         	movff	cobs_decode@src_ptr+1,fsr2h
  1748  000854  50DF               	movf	indf2,w,c
  1749  000856  0100               	movlb	0	; () banked
  1750  000858  6F64               	movwf	cobs_decode@src_byte& (0+255),b
  1751                           
  1752                           ; BSR set to: 0
  1753  00085A  4A21               	infsnz	cobs_decode@src_ptr,f,c
  1754  00085C  2A22               	incf	cobs_decode@src_ptr+1,f,c
  1755                           
  1756                           ; BSR set to: 0
  1757                           ;COBS.c: 165: if (src_byte == 0)
  1758  00085E  0100               	movlb	0	; () banked
  1759  000860  5164               	movf	cobs_decode@src_byte& (0+255),w,b
  1760  000862  0100               	movlb	0	; () banked
  1761  000864  A4D8               	btfss	status,2,c
  1762  000866  D002               	goto	l4013
  1763                           
  1764                           ; BSR set to: 0
  1765                           ;COBS.c: 166: {
  1766                           ;COBS.c: 167: result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
  1767  000868  0100               	movlb	0	; () banked
  1768  00086A  856D               	bsf	(cobs_decode@result+2)& (0+255),2,b
  1769  00086C                     l4013:
  1770                           
  1771                           ; BSR set to: 0
  1772                           ;COBS.c: 168: }
  1773                           ;COBS.c: 169: *dst_write_ptr++ = src_byte;
  1774  00086C  C068  FFD9         	movff	cobs_decode@dst_write_ptr,fsr2l
  1775  000870  C069  FFDA         	movff	cobs_decode@dst_write_ptr+1,fsr2h
  1776  000874  C064  FFDF         	movff	cobs_decode@src_byte,indf2
  1777                           
  1778                           ; BSR set to: 0
  1779  000878  0100               	movlb	0	; () banked
  1780  00087A  4B68               	infsnz	cobs_decode@dst_write_ptr& (0+255),f,b
  1781  00087C  2B69               	incf	(cobs_decode@dst_write_ptr+1)& (0+255),f,b
  1782                           
  1783                           ; BSR set to: 0
  1784  00087E  0100               	movlb	0	; () banked
  1785  000880  0765               	decf	cobs_decode@i& (0+255),f,b
  1786  000882  D7DF               	goto	l4001
  1787  000884                     l4021:
  1788                           
  1789                           ; BSR set to: 0
  1790                           ;COBS.c: 170: }
  1791                           ;COBS.c: 172: if (src_ptr >= src_end_ptr)
  1792  000884  0100               	movlb	0	; () banked
  1793  000886  5160               	movf	cobs_decode@src_end_ptr& (0+255),w,b
  1794  000888  5C21               	subwf	cobs_decode@src_ptr,w,c
  1795  00088A  0100               	movlb	0	; () banked
  1796  00088C  5161               	movf	(cobs_decode@src_end_ptr+1)& (0+255),w,b
  1797  00088E  5822               	subwfb	cobs_decode@src_ptr+1,w,c
  1798  000890  B0D8               	btfsc	status,0,c
  1799  000892  D01C               	goto	l4035
  1800                           
  1801                           ; BSR set to: 0
  1802                           ;COBS.c: 175: }
  1803                           ;COBS.c: 178: if (len_code != 0xFE)
  1804                           
  1805                           ; BSR set to: 0
  1806                           
  1807                           ; BSR set to: 0
  1808                           ;COBS.c: 173: {
  1809                           ;COBS.c: 174: break;
  1810  000894  0EFE               	movlw	254
  1811  000896  0100               	movlb	0	; () banked
  1812  000898  196A               	xorwf	cobs_decode@len_code& (0+255),w,b
  1813  00089A  B4D8               	btfsc	status,2,c
  1814  00089C  D781               	goto	l3973
  1815                           
  1816                           ; BSR set to: 0
  1817                           ;COBS.c: 179: {
  1818                           ;COBS.c: 180: if (dst_write_ptr >= dst_buf_end_ptr)
  1819  00089E  0100               	movlb	0	; () banked
  1820  0008A0  5162               	movf	cobs_decode@dst_buf_end_ptr& (0+255),w,b
  1821  0008A2  0100               	movlb	0	; () banked
  1822  0008A4  5D68               	subwf	cobs_decode@dst_write_ptr& (0+255),w,b
  1823  0008A6  0100               	movlb	0	; () banked
  1824  0008A8  5163               	movf	(cobs_decode@dst_buf_end_ptr+1)& (0+255),w,b
  1825  0008AA  0100               	movlb	0	; () banked
  1826  0008AC  5969               	subwfb	(cobs_decode@dst_write_ptr+1)& (0+255),w,b
  1827  0008AE  A0D8               	btfss	status,0,c
  1828  0008B0  D003               	goto	l4031
  1829                           
  1830                           ; BSR set to: 0
  1831                           ;COBS.c: 181: {
  1832                           ;COBS.c: 182: result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
  1833  0008B2  0100               	movlb	0	; () banked
  1834  0008B4  836D               	bsf	(cobs_decode@result+2)& (0+255),1,b
  1835                           
  1836                           ;COBS.c: 183: break;
  1837  0008B6  D00A               	goto	l4035
  1838  0008B8                     l4031:
  1839                           
  1840                           ; BSR set to: 0
  1841                           ;COBS.c: 184: }
  1842                           ;COBS.c: 185: *dst_write_ptr++ = 0;
  1843  0008B8  C068  FFD9         	movff	cobs_decode@dst_write_ptr,fsr2l
  1844  0008BC  C069  FFDA         	movff	cobs_decode@dst_write_ptr+1,fsr2h
  1845  0008C0  0E00               	movlw	0
  1846  0008C2  6EDF               	movwf	indf2,c
  1847                           
  1848                           ; BSR set to: 0
  1849  0008C4  0100               	movlb	0	; () banked
  1850  0008C6  4B68               	infsnz	cobs_decode@dst_write_ptr& (0+255),f,b
  1851  0008C8  2B69               	incf	(cobs_decode@dst_write_ptr+1)& (0+255),f,b
  1852                           
  1853                           ; BSR set to: 0
  1854                           ;COBS.c: 186: }
  1855                           ;COBS.c: 187: }
  1856  0008CA  D76A               	goto	l3973
  1857  0008CC                     l4035:
  1858                           
  1859                           ; BSR set to: 0
  1860                           ;COBS.c: 188: }
  1861                           ;COBS.c: 190: result.out_len = dst_write_ptr - dst_buf_ptr;
  1862  0008CC  C01D  F025         	movff	cobs_decode@dst_buf_ptr,??_cobs_decode
  1863  0008D0  C01E  F026         	movff	cobs_decode@dst_buf_ptr+1,??_cobs_decode+1
  1864  0008D4  1E25               	comf	??_cobs_decode,f,c
  1865  0008D6  1E26               	comf	??_cobs_decode+1,f,c
  1866  0008D8  4A25               	infsnz	??_cobs_decode,f,c
  1867  0008DA  2A26               	incf	??_cobs_decode+1,f,c
  1868  0008DC  0100               	movlb	0	; () banked
  1869  0008DE  5168               	movf	cobs_decode@dst_write_ptr& (0+255),w,b
  1870  0008E0  2425               	addwf	??_cobs_decode,w,c
  1871  0008E2  0100               	movlb	0	; () banked
  1872  0008E4  6F6B               	movwf	cobs_decode@result& (0+255),b
  1873  0008E6  0100               	movlb	0	; () banked
  1874  0008E8  5169               	movf	(cobs_decode@dst_write_ptr+1)& (0+255),w,b
  1875  0008EA  2026               	addwfc	??_cobs_decode+1,w,c
  1876  0008EC  0100               	movlb	0	; () banked
  1877  0008EE  6F6C               	movwf	(cobs_decode@result+1)& (0+255),b
  1878                           
  1879                           ; BSR set to: 0
  1880                           ;COBS.c: 192: return result;
  1881  0008F0  C06B  F01D         	movff	cobs_decode@result,?_cobs_decode
  1882  0008F4  C06C  F01E         	movff	cobs_decode@result+1,?_cobs_decode+1
  1883  0008F8  C06D  F01F         	movff	cobs_decode@result+2,?_cobs_decode+2
  1884  0008FC  0012               	return	
  1885  0008FE                     __end_of_cobs_decode:
  1886                           	opt stack 0
  1887                           tblptru	equ	0xFF8
  1888                           tblptrh	equ	0xFF7
  1889                           tblptrl	equ	0xFF6
  1890                           tablat	equ	0xFF5
  1891                           intcon	equ	0xFF2
  1892                           postinc0	equ	0xFEE
  1893                           wreg	equ	0xFE8
  1894                           postdec1	equ	0xFE5
  1895                           fsr1l	equ	0xFE1
  1896                           indf2	equ	0xFDF
  1897                           postinc2	equ	0xFDE
  1898                           fsr2h	equ	0xFDA
  1899                           fsr2l	equ	0xFD9
  1900                           status	equ	0xFD8
  1901                           
  1902 ;; *************** function _Receive_get *****************
  1903 ;; Defined at:
  1904 ;;		line 125 in file "UART.c"
  1905 ;; Parameters:    Size  Location     Type
  1906 ;;		None
  1907 ;; Auto vars:     Size  Location     Type
  1908 ;;		None
  1909 ;; Return value:  Size  Location     Type
  1910 ;;                  1    wreg      unsigned char 
  1911 ;; Registers used:
  1912 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1913 ;; Tracked objects:
  1914 ;;		On entry : 0/0
  1915 ;;		On exit  : 0/0
  1916 ;;		Unchanged: 0/0
  1917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1918 ;;      Params:         0       0       0       0       0       0       0
  1919 ;;      Locals:         0       0       0       0       0       0       0
  1920 ;;      Temps:          0       0       0       0       0       0       0
  1921 ;;      Totals:         0       0       0       0       0       0       0
  1922 ;;Total ram usage:        0 bytes
  1923 ;; Hardware stack levels used:    1
  1924 ;; Hardware stack levels required when called:    8
  1925 ;; This function calls:
  1926 ;;		_UART_buff_get
  1927 ;; This function is called by:
  1928 ;;		_receiveData
  1929 ;;		_getch
  1930 ;; This function uses a non-reentrant model
  1931 ;;
  1932                           
  1933                           	psect	text4
  1934  001E88                     __ptext4:
  1935                           	opt stack 0
  1936  001E88                     _Receive_get:
  1937                           	opt stack 20
  1938                           
  1939                           ;UART.c: 126: return UART_buff_get(&input_buffer);
  1940                           
  1941                           ; BSR set to: 0
  1942                           ;incstack = 0
  1943  001E88  0E30               	movlw	low _input_buffer
  1944  001E8A  6E23               	movwf	UART_buff_get@_this,c
  1945  001E8C  0E01               	movlw	high _input_buffer
  1946  001E8E  6E24               	movwf	UART_buff_get@_this+1,c
  1947  001E90  ECA7  F00A         	call	_UART_buff_get	;wreg free
  1948  001E94  0012               	return	
  1949  001E96                     __end_of_Receive_get:
  1950                           	opt stack 0
  1951                           tblptru	equ	0xFF8
  1952                           tblptrh	equ	0xFF7
  1953                           tblptrl	equ	0xFF6
  1954                           tablat	equ	0xFF5
  1955                           intcon	equ	0xFF2
  1956                           postinc0	equ	0xFEE
  1957                           wreg	equ	0xFE8
  1958                           postdec1	equ	0xFE5
  1959                           fsr1l	equ	0xFE1
  1960                           indf2	equ	0xFDF
  1961                           postinc2	equ	0xFDE
  1962                           fsr2h	equ	0xFDA
  1963                           fsr2l	equ	0xFD9
  1964                           status	equ	0xFD8
  1965                           
  1966 ;; *************** function _Receive_available *****************
  1967 ;; Defined at:
  1968 ;;		line 121 in file "UART.c"
  1969 ;; Parameters:    Size  Location     Type
  1970 ;;		None
  1971 ;; Auto vars:     Size  Location     Type
  1972 ;;		None
  1973 ;; Return value:  Size  Location     Type
  1974 ;;                  2   30[COMRAM] int 
  1975 ;; Registers used:
  1976 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1977 ;; Tracked objects:
  1978 ;;		On entry : 0/0
  1979 ;;		On exit  : 0/0
  1980 ;;		Unchanged: 0/0
  1981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1982 ;;      Params:         2       0       0       0       0       0       0
  1983 ;;      Locals:         0       0       0       0       0       0       0
  1984 ;;      Temps:          0       0       0       0       0       0       0
  1985 ;;      Totals:         2       0       0       0       0       0       0
  1986 ;;Total ram usage:        2 bytes
  1987 ;; Hardware stack levels used:    1
  1988 ;; Hardware stack levels required when called:    7
  1989 ;; This function calls:
  1990 ;;		_UART_buff_size
  1991 ;; This function is called by:
  1992 ;;		_receiveData
  1993 ;; This function uses a non-reentrant model
  1994 ;;
  1995                           
  1996                           	psect	text5
  1997  001DF8                     __ptext5:
  1998                           	opt stack 0
  1999  001DF8                     _Receive_available:
  2000                           	opt stack 21
  2001                           
  2002                           ;UART.c: 122: return UART_buff_size(&input_buffer);
  2003                           
  2004                           ;incstack = 0
  2005  001DF8  0E30               	movlw	low _input_buffer
  2006  001DFA  6E1D               	movwf	UART_buff_size@_this,c
  2007  001DFC  0E01               	movlw	high _input_buffer
  2008  001DFE  6E1E               	movwf	UART_buff_size@_this+1,c
  2009  001E00  EC07  F00F         	call	_UART_buff_size	;wreg free
  2010  001E04  C01D  F01F         	movff	?_UART_buff_size,?_Receive_available
  2011  001E08  C01E  F020         	movff	?_UART_buff_size+1,?_Receive_available+1
  2012  001E0C  0012               	return	
  2013  001E0E                     __end_of_Receive_available:
  2014                           	opt stack 0
  2015                           tblptru	equ	0xFF8
  2016                           tblptrh	equ	0xFF7
  2017                           tblptrl	equ	0xFF6
  2018                           tablat	equ	0xFF5
  2019                           intcon	equ	0xFF2
  2020                           postinc0	equ	0xFEE
  2021                           wreg	equ	0xFE8
  2022                           postdec1	equ	0xFE5
  2023                           fsr1l	equ	0xFE1
  2024                           indf2	equ	0xFDF
  2025                           postinc2	equ	0xFDE
  2026                           fsr2h	equ	0xFDA
  2027                           fsr2l	equ	0xFD9
  2028                           status	equ	0xFD8
  2029                           
  2030 ;; *************** function _UART_buff_size *****************
  2031 ;; Defined at:
  2032 ;;		line 101 in file "UART.c"
  2033 ;; Parameters:    Size  Location     Type
  2034 ;;  _this           2   28[COMRAM] PTR struct UART_ring_buf
  2035 ;;		 -> output_buffer(106), input_buffer(106), 
  2036 ;; Auto vars:     Size  Location     Type
  2037 ;;		None
  2038 ;; Return value:  Size  Location     Type
  2039 ;;                  2   28[COMRAM] int 
  2040 ;; Registers used:
  2041 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2042 ;; Tracked objects:
  2043 ;;		On entry : 0/0
  2044 ;;		On exit  : 0/0
  2045 ;;		Unchanged: 0/0
  2046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2047 ;;      Params:         2       0       0       0       0       0       0
  2048 ;;      Locals:         0       0       0       0       0       0       0
  2049 ;;      Temps:          0       0       0       0       0       0       0
  2050 ;;      Totals:         2       0       0       0       0       0       0
  2051 ;;Total ram usage:        2 bytes
  2052 ;; Hardware stack levels used:    1
  2053 ;; Hardware stack levels required when called:    6
  2054 ;; This function calls:
  2055 ;;		Nothing
  2056 ;; This function is called by:
  2057 ;;		_Receive_available
  2058 ;; This function uses a non-reentrant model
  2059 ;;
  2060                           
  2061                           	psect	text6
  2062  001E0E                     __ptext6:
  2063                           	opt stack 0
  2064  001E0E                     _UART_buff_size:
  2065                           	opt stack 21
  2066                           
  2067                           ;UART.c: 102: return (_this->count);
  2068                           
  2069                           ;incstack = 0
  2070  001E0E  EE20 F068          	lfsr	2,104
  2071  001E12  501D               	movf	UART_buff_size@_this,w,c
  2072  001E14  26D9               	addwf	fsr2l,f,c
  2073  001E16  501E               	movf	UART_buff_size@_this+1,w,c
  2074  001E18  22DA               	addwfc	fsr2h,f,c
  2075  001E1A  CFDE F01D          	movff	postinc2,?_UART_buff_size
  2076  001E1E  CFDD F01E          	movff	postdec2,?_UART_buff_size+1
  2077  001E22  0012               	return	
  2078  001E24                     __end_of_UART_buff_size:
  2079                           	opt stack 0
  2080                           tblptru	equ	0xFF8
  2081                           tblptrh	equ	0xFF7
  2082                           tblptrl	equ	0xFF6
  2083                           tablat	equ	0xFF5
  2084                           intcon	equ	0xFF2
  2085                           postinc0	equ	0xFEE
  2086                           wreg	equ	0xFE8
  2087                           postdec1	equ	0xFE5
  2088                           fsr1l	equ	0xFE1
  2089                           indf2	equ	0xFDF
  2090                           postinc2	equ	0xFDE
  2091                           postdec2	equ	0xFDD
  2092                           fsr2h	equ	0xFDA
  2093                           fsr2l	equ	0xFD9
  2094                           status	equ	0xFD8
  2095                           
  2096 ;; *************** function _ComController *****************
  2097 ;; Defined at:
  2098 ;;		line 155 in file "CarCom.c"
  2099 ;; Parameters:    Size  Location     Type
  2100 ;;  DTI             2   90[BANK0 ] PTR unsigned char 
  2101 ;;		 -> ProcessArray(30), 
  2102 ;;  lenth           2   92[BANK0 ] unsigned int 
  2103 ;; Auto vars:     Size  Location     Type
  2104 ;;  DataToSend      4    0[BANK1 ] unsigned char [4]
  2105 ;; Return value:  Size  Location     Type
  2106 ;;                  1    wreg      void 
  2107 ;; Registers used:
  2108 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2109 ;; Tracked objects:
  2110 ;;		On entry : 0/0
  2111 ;;		On exit  : 0/0
  2112 ;;		Unchanged: 0/0
  2113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2114 ;;      Params:         0       4       0       0       0       0       0
  2115 ;;      Locals:         0       0       4       0       0       0       0
  2116 ;;      Temps:          1       0       0       0       0       0       0
  2117 ;;      Totals:         1       4       4       0       0       0       0
  2118 ;;Total ram usage:        9 bytes
  2119 ;; Hardware stack levels used:    1
  2120 ;; Hardware stack levels required when called:   10
  2121 ;; This function calls:
  2122 ;;		_Delay
  2123 ;;		_GetDataDict
  2124 ;;		_sendData
  2125 ;; This function is called by:
  2126 ;;		_receiveData
  2127 ;; This function uses a non-reentrant model
  2128 ;;
  2129                           
  2130                           	psect	text7
  2131  0013F6                     __ptext7:
  2132                           	opt stack 0
  2133  0013F6                     _ComController:
  2134                           	opt stack 18
  2135                           
  2136                           ;CarCom.c: 156: if(DTI[1] == 1){
  2137                           
  2138                           ;incstack = 0
  2139  0013F6  0100               	movlb	0	; () banked
  2140  0013F8  EE20 F001          	lfsr	2,1
  2141  0013FC  51BA               	movf	ComController@DTI& (0+255),w,b
  2142  0013FE  26D9               	addwf	fsr2l,f,c
  2143  001400  51BB               	movf	(ComController@DTI+1)& (0+255),w,b
  2144  001402  22DA               	addwfc	fsr2h,f,c
  2145  001404  04DE               	decf	postinc2,w,c
  2146  001406  A4D8               	btfss	status,2,c
  2147  001408  0012               	return	
  2148                           
  2149                           ; BSR set to: 0
  2150                           ;CarCom.c: 157: unsigned char DataToSend[4];
  2151                           ;CarCom.c: 158: GetDataDict(DTI[2], DTI[3], DataToSend, DTI[4]);
  2152  00140A  0100               	movlb	0	; () banked
  2153  00140C  EE20 F003          	lfsr	2,3
  2154  001410  51BA               	movf	ComController@DTI& (0+255),w,b
  2155  001412  26D9               	addwf	fsr2l,f,c
  2156  001414  51BB               	movf	(ComController@DTI+1)& (0+255),w,b
  2157  001416  22DA               	addwfc	fsr2h,f,c
  2158  001418  50DF               	movf	indf2,w,c
  2159  00141A  6E1D               	movwf	GetDataDict@DataTableIndex,c
  2160  00141C  0ED6               	movlw	low ComController@DataToSend
  2161  00141E  6E1E               	movwf	GetDataDict@DataArray,c
  2162  001420  0E01               	movlw	high ComController@DataToSend
  2163  001422  6E1F               	movwf	GetDataDict@DataArray+1,c
  2164  001424  0100               	movlb	0	; () banked
  2165  001426  EE20 F004          	lfsr	2,4
  2166  00142A  51BA               	movf	ComController@DTI& (0+255),w,b
  2167  00142C  26D9               	addwf	fsr2l,f,c
  2168  00142E  51BB               	movf	(ComController@DTI+1)& (0+255),w,b
  2169  001430  22DA               	addwfc	fsr2h,f,c
  2170  001432  50DF               	movf	indf2,w,c
  2171  001434  6E20               	movwf	GetDataDict@numbofbytes,c
  2172  001436  0100               	movlb	0	; () banked
  2173  001438  EE20 F002          	lfsr	2,2
  2174  00143C  51BA               	movf	ComController@DTI& (0+255),w,b
  2175  00143E  26D9               	addwf	fsr2l,f,c
  2176  001440  51BB               	movf	(ComController@DTI+1)& (0+255),w,b
  2177  001442  22DA               	addwfc	fsr2h,f,c
  2178  001444  50DF               	movf	indf2,w,c
  2179  001446  EC5B  F00A         	call	_GetDataDict
  2180                           
  2181                           ;CarCom.c: 159: do { LATC5 = 1; } while(0);
  2182  00144A  8A8B               	bsf	3979,5,c	;volatile
  2183                           
  2184                           ;CarCom.c: 160: Delay(5);
  2185  00144C  0E05               	movlw	5
  2186  00144E  6E1D               	movwf	Delay@wait,c
  2187  001450  0E00               	movlw	0
  2188  001452  6E1E               	movwf	Delay@wait+1,c
  2189  001454  0E00               	movlw	0
  2190  001456  6E1F               	movwf	Delay@wait+2,c
  2191  001458  0E00               	movlw	0
  2192  00145A  6E20               	movwf	Delay@wait+3,c
  2193  00145C  EC37  F00D         	call	_Delay	;wreg free
  2194                           
  2195                           ;CarCom.c: 161: sendData(1, 2, 1, 1, DataToSend, DTI[4]);
  2196  001460  0E02               	movlw	2
  2197  001462  0100               	movlb	0	; () banked
  2198  001464  6F6D               	movwf	sendData@ComandByte& (0+255),b
  2199  001466  0E01               	movlw	1
  2200  001468  0100               	movlb	0	; () banked
  2201  00146A  6F6E               	movwf	sendData@DataTable& (0+255),b
  2202  00146C  0E01               	movlw	1
  2203  00146E  0100               	movlb	0	; () banked
  2204  001470  6F6F               	movwf	sendData@DataTableIndex& (0+255),b
  2205  001472  0ED6               	movlw	low ComController@DataToSend
  2206  001474  0100               	movlb	0	; () banked
  2207  001476  6F70               	movwf	sendData@DTS& (0+255),b
  2208  001478  0E01               	movlw	high ComController@DataToSend
  2209  00147A  0100               	movlb	0	; () banked
  2210  00147C  6F71               	movwf	(sendData@DTS+1)& (0+255),b
  2211  00147E  0100               	movlb	0	; () banked
  2212  001480  EE20 F004          	lfsr	2,4
  2213  001484  51BA               	movf	ComController@DTI& (0+255),w,b
  2214  001486  26D9               	addwf	fsr2l,f,c
  2215  001488  51BB               	movf	(ComController@DTI+1)& (0+255),w,b
  2216  00148A  22DA               	addwfc	fsr2h,f,c
  2217  00148C  50DF               	movf	indf2,w,c
  2218  00148E  6E2D               	movwf	??_ComController& (0+255),c
  2219  001490  502D               	movf	??_ComController,w,c
  2220  001492  0100               	movlb	0	; () banked
  2221  001494  6F72               	movwf	sendData@lenth& (0+255),b
  2222  001496  6B73               	clrf	(sendData@lenth+1)& (0+255),b
  2223  001498  0E01               	movlw	1
  2224  00149A  EC4B  F005         	call	_sendData
  2225                           
  2226                           ;CarCom.c: 162: Delay(3);
  2227  00149E  0E03               	movlw	3
  2228  0014A0  6E1D               	movwf	Delay@wait,c
  2229  0014A2  0E00               	movlw	0
  2230  0014A4  6E1E               	movwf	Delay@wait+1,c
  2231  0014A6  0E00               	movlw	0
  2232  0014A8  6E1F               	movwf	Delay@wait+2,c
  2233  0014AA  0E00               	movlw	0
  2234  0014AC  6E20               	movwf	Delay@wait+3,c
  2235  0014AE  EC37  F00D         	call	_Delay	;wreg free
  2236                           
  2237                           ;CarCom.c: 163: do { LATC5 = 0; } while(0);
  2238  0014B2  9A8B               	bcf	3979,5,c	;volatile
  2239  0014B4  0012               	return	
  2240  0014B6                     __end_of_ComController:
  2241                           	opt stack 0
  2242                           tblptru	equ	0xFF8
  2243                           tblptrh	equ	0xFF7
  2244                           tblptrl	equ	0xFF6
  2245                           tablat	equ	0xFF5
  2246                           intcon	equ	0xFF2
  2247                           postinc0	equ	0xFEE
  2248                           wreg	equ	0xFE8
  2249                           postdec1	equ	0xFE5
  2250                           fsr1l	equ	0xFE1
  2251                           indf2	equ	0xFDF
  2252                           postinc2	equ	0xFDE
  2253                           postdec2	equ	0xFDD
  2254                           fsr2h	equ	0xFDA
  2255                           fsr2l	equ	0xFD9
  2256                           status	equ	0xFD8
  2257                           
  2258 ;; *************** function _sendData *****************
  2259 ;; Defined at:
  2260 ;;		line 39 in file "CarCom.c"
  2261 ;; Parameters:    Size  Location     Type
  2262 ;;  whereToSend     1    wreg     unsigned char 
  2263 ;;  ComandByte      1   13[BANK0 ] unsigned char 
  2264 ;;  DataTable       1   14[BANK0 ] unsigned char 
  2265 ;;  DataTableInd    1   15[BANK0 ] unsigned char 
  2266 ;;  DTS             2   16[BANK0 ] PTR unsigned char 
  2267 ;;		 -> ComController@DataToSend(4), 
  2268 ;;  lenth           2   18[BANK0 ] unsigned int 
  2269 ;; Auto vars:     Size  Location     Type
  2270 ;;  whereToSend     1   81[BANK0 ] unsigned char 
  2271 ;;  SendArray      30   50[BANK0 ] unsigned char [30]
  2272 ;;  COBSArray      30   20[BANK0 ] unsigned char [30]
  2273 ;;  result          3   85[BANK0 ] struct .
  2274 ;;  i               2   88[BANK0 ] unsigned int 
  2275 ;;  count           2   82[BANK0 ] int 
  2276 ;;  CS              1   84[BANK0 ] unsigned char 
  2277 ;;  DataLenth       1   80[BANK0 ] unsigned char 
  2278 ;; Return value:  Size  Location     Type
  2279 ;;                  1    wreg      void 
  2280 ;; Registers used:
  2281 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2282 ;; Tracked objects:
  2283 ;;		On entry : 0/0
  2284 ;;		On exit  : 0/0
  2285 ;;		Unchanged: 0/0
  2286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2287 ;;      Params:         0       7       0       0       0       0       0
  2288 ;;      Locals:         0      70       0       0       0       0       0
  2289 ;;      Temps:          4       0       0       0       0       0       0
  2290 ;;      Totals:         4      77       0       0       0       0       0
  2291 ;;Total ram usage:       81 bytes
  2292 ;; Hardware stack levels used:    1
  2293 ;; Hardware stack levels required when called:    9
  2294 ;; This function calls:
  2295 ;;		_CRC8
  2296 ;;		_Send_put
  2297 ;;		_cobs_encode
  2298 ;; This function is called by:
  2299 ;;		_ComController
  2300 ;; This function uses a non-reentrant model
  2301 ;;
  2302                           
  2303                           	psect	text8
  2304  000A96                     __ptext8:
  2305                           	opt stack 0
  2306  000A96                     _sendData:
  2307                           	opt stack 18
  2308                           
  2309                           ;incstack = 0
  2310                           ;sendData@whereToSend stored from wreg
  2311  000A96  0100               	movlb	0	; () banked
  2312  000A98  6FB1               	movwf	sendData@whereToSend& (0+255),b
  2313                           
  2314                           ;CarCom.c: 44: unsigned char SendArray[30];
  2315                           ;CarCom.c: 45: unsigned char COBSArray[30];
  2316                           ;CarCom.c: 47: unsigned char DataLenth = 1;
  2317  000A9A  0E01               	movlw	1
  2318  000A9C  0100               	movlb	0	; () banked
  2319  000A9E  6FB0               	movwf	sendData@DataLenth& (0+255),b
  2320                           
  2321                           ;CarCom.c: 49: cobs_encode_result result;
  2322                           ;CarCom.c: 51: SendArray[0] = 4+1;
  2323  000AA0  0E05               	movlw	5
  2324  000AA2  0100               	movlb	0	; () banked
  2325  000AA4  6F92               	movwf	sendData@SendArray& (0+255),b
  2326                           
  2327                           ; BSR set to: 0
  2328                           ;CarCom.c: 52: SendArray[1] = ComandByte;
  2329  000AA6  C06D  F093         	movff	sendData@ComandByte,sendData@SendArray+1
  2330                           
  2331                           ; BSR set to: 0
  2332                           ;CarCom.c: 53: SendArray[2] = DataTable;
  2333  000AAA  C06E  F094         	movff	sendData@DataTable,sendData@SendArray+2
  2334                           
  2335                           ; BSR set to: 0
  2336                           ;CarCom.c: 54: SendArray[3] = DataTableIndex;
  2337  000AAE  C06F  F095         	movff	sendData@DataTableIndex,sendData@SendArray+3
  2338                           
  2339                           ; BSR set to: 0
  2340                           ;CarCom.c: 55: SendArray[4] = lenth;
  2341  000AB2  C072  F096         	movff	sendData@lenth,sendData@SendArray+4
  2342                           
  2343                           ;CarCom.c: 60: unsigned int i;
  2344                           ;CarCom.c: 61: int count = 5;
  2345  000AB6  0E00               	movlw	0
  2346  000AB8  0100               	movlb	0	; () banked
  2347  000ABA  6FB3               	movwf	(sendData@count+1)& (0+255),b
  2348  000ABC  0E05               	movlw	5
  2349  000ABE  6FB2               	movwf	sendData@count& (0+255),b
  2350                           
  2351                           ; BSR set to: 0
  2352                           ;CarCom.c: 62: i = count;
  2353  000AC0  C0B2  F0B8         	movff	sendData@count,sendData@i
  2354  000AC4  C0B3  F0B9         	movff	sendData@count+1,sendData@i+1
  2355                           
  2356                           ; BSR set to: 0
  2357                           ;CarCom.c: 64: SendArray[5] = DTS[0];
  2358  000AC8  C070  FFD9         	movff	sendData@DTS,fsr2l
  2359  000ACC  C071  FFDA         	movff	sendData@DTS+1,fsr2h
  2360  000AD0  50DF               	movf	indf2,w,c
  2361  000AD2  0100               	movlb	0	; () banked
  2362  000AD4  6F97               	movwf	(sendData@SendArray+5)& (0+255),b
  2363                           
  2364                           ; BSR set to: 0
  2365                           ;CarCom.c: 66: SendArray[6] = DTS[1];
  2366  000AD6  0100               	movlb	0	; () banked
  2367  000AD8  EE20 F001          	lfsr	2,1
  2368  000ADC  5170               	movf	sendData@DTS& (0+255),w,b
  2369  000ADE  26D9               	addwf	fsr2l,f,c
  2370  000AE0  5171               	movf	(sendData@DTS+1)& (0+255),w,b
  2371  000AE2  22DA               	addwfc	fsr2h,f,c
  2372  000AE4  50DF               	movf	indf2,w,c
  2373  000AE6  0100               	movlb	0	; () banked
  2374  000AE8  6F98               	movwf	(sendData@SendArray+6)& (0+255),b
  2375                           
  2376                           ; BSR set to: 0
  2377                           ;CarCom.c: 69: unsigned char CS = CRC8(SendArray, 7);
  2378  000AEA  0E92               	movlw	low sendData@SendArray
  2379  000AEC  6E1D               	movwf	CRC8@data,c
  2380  000AEE  0E00               	movlw	high sendData@SendArray
  2381  000AF0  6E1E               	movwf	CRC8@data+1,c
  2382  000AF2  0E07               	movlw	7
  2383  000AF4  6E1F               	movwf	CRC8@len,c
  2384  000AF6  EC12  F00D         	call	_CRC8	;wreg free
  2385  000AFA  0100               	movlb	0	; () banked
  2386  000AFC  6FB4               	movwf	sendData@CS& (0+255),b
  2387                           
  2388                           ; BSR set to: 0
  2389                           ;CarCom.c: 73: SendArray[7] = CS;
  2390  000AFE  C0B4  F099         	movff	sendData@CS,sendData@SendArray+7
  2391                           
  2392                           ; BSR set to: 0
  2393                           ;CarCom.c: 75: result = cobs_encode(COBSArray, sizeof(COBSArray), SendArray, 8);
  2394  000B02  0E74               	movlw	low sendData@COBSArray
  2395  000B04  6E1D               	movwf	cobs_encode@dst_buf_ptr,c
  2396  000B06  0E00               	movlw	high sendData@COBSArray
  2397  000B08  6E1E               	movwf	cobs_encode@dst_buf_ptr+1,c
  2398  000B0A  0E00               	movlw	0
  2399  000B0C  6E20               	movwf	cobs_encode@dst_buf_len+1,c
  2400  000B0E  0E1E               	movlw	30
  2401  000B10  6E1F               	movwf	cobs_encode@dst_buf_len,c
  2402  000B12  0E92               	movlw	low sendData@SendArray
  2403  000B14  6E21               	movwf	cobs_encode@src_ptr,c
  2404  000B16  0E00               	movlw	high sendData@SendArray
  2405  000B18  6E22               	movwf	cobs_encode@src_ptr+1,c
  2406  000B1A  0E00               	movlw	0
  2407  000B1C  6E24               	movwf	cobs_encode@src_len+1,c
  2408  000B1E  0E08               	movlw	8
  2409  000B20  6E23               	movwf	cobs_encode@src_len,c
  2410  000B22  EC7F  F004         	call	_cobs_encode	;wreg free
  2411  000B26  C01D  F0B5         	movff	?_cobs_encode,sendData@result
  2412  000B2A  C01E  F0B6         	movff	?_cobs_encode+1,sendData@result+1
  2413  000B2E  C01F  F0B7         	movff	?_cobs_encode+2,sendData@result+2
  2414                           
  2415                           ;CarCom.c: 77: SendArray[0] = whereToSend;
  2416  000B32  C0B1  F092         	movff	sendData@whereToSend,sendData@SendArray
  2417                           
  2418                           ;CarCom.c: 79: for(i = 1;i<result.out_len+1;i++){
  2419  000B36  0E00               	movlw	0
  2420  000B38  0100               	movlb	0	; () banked
  2421  000B3A  6FB9               	movwf	(sendData@i+1)& (0+255),b
  2422  000B3C  0E01               	movlw	1
  2423  000B3E  6FB8               	movwf	sendData@i& (0+255),b
  2424  000B40  D01F               	goto	l3879
  2425  000B42                     l3875:
  2426                           
  2427                           ; BSR set to: 0
  2428                           ;CarCom.c: 80: SendArray[i] = COBSArray[i-1];
  2429  000B42  0EFF               	movlw	255
  2430  000B44  6E29               	movwf	??_sendData& (0+255),c
  2431  000B46  0EFF               	movlw	255
  2432  000B48  6E2A               	movwf	(??_sendData+1)& (0+255),c
  2433  000B4A  C0B8  F02B         	movff	sendData@i,??_sendData+2
  2434  000B4E  C0B9  F02C         	movff	sendData@i+1,??_sendData+3
  2435  000B52  5029               	movf	??_sendData,w,c
  2436  000B54  262B               	addwf	??_sendData+2,f,c
  2437  000B56  502A               	movf	??_sendData+1,w,c
  2438  000B58  222C               	addwfc	??_sendData+3,f,c
  2439  000B5A  0E74               	movlw	low sendData@COBSArray
  2440  000B5C  242B               	addwf	??_sendData+2,w,c
  2441  000B5E  6ED9               	movwf	fsr2l,c
  2442  000B60  0E00               	movlw	high sendData@COBSArray
  2443  000B62  202C               	addwfc	??_sendData+3,w,c
  2444  000B64  6EDA               	movwf	fsr2h,c
  2445  000B66  0E92               	movlw	low sendData@SendArray
  2446  000B68  0100               	movlb	0	; () banked
  2447  000B6A  25B8               	addwf	sendData@i& (0+255),w,b
  2448  000B6C  6EE1               	movwf	fsr1l,c
  2449  000B6E  0E00               	movlw	high sendData@SendArray
  2450  000B70  0100               	movlb	0	; () banked
  2451  000B72  21B9               	addwfc	(sendData@i+1)& (0+255),w,b
  2452  000B74  6EE2               	movwf	fsr1h,c
  2453  000B76  CFDF FFE7          	movff	indf2,indf1
  2454                           
  2455                           ; BSR set to: 0
  2456  000B7A  0100               	movlb	0	; () banked
  2457  000B7C  4BB8               	infsnz	sendData@i& (0+255),f,b
  2458  000B7E  2BB9               	incf	(sendData@i+1)& (0+255),f,b
  2459  000B80                     l3879:
  2460                           
  2461                           ; BSR set to: 0
  2462  000B80  0E01               	movlw	1
  2463  000B82  0100               	movlb	0	; () banked
  2464  000B84  25B5               	addwf	sendData@result& (0+255),w,b
  2465  000B86  6E29               	movwf	??_sendData& (0+255),c
  2466  000B88  0E00               	movlw	0
  2467  000B8A  0100               	movlb	0	; () banked
  2468  000B8C  21B6               	addwfc	(sendData@result+1)& (0+255),w,b
  2469  000B8E  6E2A               	movwf	(??_sendData+1)& (0+255),c
  2470  000B90  5029               	movf	??_sendData,w,c
  2471  000B92  0100               	movlb	0	; () banked
  2472  000B94  5DB8               	subwf	sendData@i& (0+255),w,b
  2473  000B96  502A               	movf	??_sendData+1,w,c
  2474  000B98  0100               	movlb	0	; () banked
  2475  000B9A  59B9               	subwfb	(sendData@i+1)& (0+255),w,b
  2476  000B9C  A0D8               	btfss	status,0,c
  2477  000B9E  D7D1               	goto	l3875
  2478                           
  2479                           ; BSR set to: 0
  2480                           ;CarCom.c: 81: }
  2481                           ;CarCom.c: 83: for(i = 0;i<result.out_len+2;i++){
  2482                           
  2483                           ; BSR set to: 0
  2484  000BA0  0E00               	movlw	0
  2485  000BA2  0100               	movlb	0	; () banked
  2486  000BA4  6FB9               	movwf	(sendData@i+1)& (0+255),b
  2487  000BA6  0E00               	movlw	0
  2488  000BA8  6FB8               	movwf	sendData@i& (0+255),b
  2489  000BAA  D00E               	goto	l3887
  2490  000BAC                     l3883:
  2491                           
  2492                           ; BSR set to: 0
  2493                           ;CarCom.c: 84: Send_put(SendArray[i]);
  2494  000BAC  0E92               	movlw	low sendData@SendArray
  2495  000BAE  0100               	movlb	0	; () banked
  2496  000BB0  25B8               	addwf	sendData@i& (0+255),w,b
  2497  000BB2  6ED9               	movwf	fsr2l,c
  2498  000BB4  0E00               	movlw	high sendData@SendArray
  2499  000BB6  0100               	movlb	0	; () banked
  2500  000BB8  21B9               	addwfc	(sendData@i+1)& (0+255),w,b
  2501  000BBA  6EDA               	movwf	fsr2h,c
  2502  000BBC  50DF               	movf	indf2,w,c
  2503  000BBE  EC36  F00E         	call	_Send_put
  2504  000BC2  0100               	movlb	0	; () banked
  2505  000BC4  4BB8               	infsnz	sendData@i& (0+255),f,b
  2506  000BC6  2BB9               	incf	(sendData@i+1)& (0+255),f,b
  2507  000BC8                     l3887:
  2508                           
  2509                           ; BSR set to: 0
  2510  000BC8  0E02               	movlw	2
  2511  000BCA  0100               	movlb	0	; () banked
  2512  000BCC  25B5               	addwf	sendData@result& (0+255),w,b
  2513  000BCE  6E29               	movwf	??_sendData& (0+255),c
  2514  000BD0  0E00               	movlw	0
  2515  000BD2  0100               	movlb	0	; () banked
  2516  000BD4  21B6               	addwfc	(sendData@result+1)& (0+255),w,b
  2517  000BD6  6E2A               	movwf	(??_sendData+1)& (0+255),c
  2518  000BD8  5029               	movf	??_sendData,w,c
  2519  000BDA  0100               	movlb	0	; () banked
  2520  000BDC  5DB8               	subwf	sendData@i& (0+255),w,b
  2521  000BDE  502A               	movf	??_sendData+1,w,c
  2522  000BE0  0100               	movlb	0	; () banked
  2523  000BE2  59B9               	subwfb	(sendData@i+1)& (0+255),w,b
  2524  000BE4  B0D8               	btfsc	status,0,c
  2525  000BE6  0012               	return	
  2526  000BE8  D7E1               	goto	l3883
  2527  000BEA                     __end_of_sendData:
  2528                           	opt stack 0
  2529                           tblptru	equ	0xFF8
  2530                           tblptrh	equ	0xFF7
  2531                           tblptrl	equ	0xFF6
  2532                           tablat	equ	0xFF5
  2533                           intcon	equ	0xFF2
  2534                           postinc0	equ	0xFEE
  2535                           wreg	equ	0xFE8
  2536                           indf1	equ	0xFE7
  2537                           postdec1	equ	0xFE5
  2538                           fsr1h	equ	0xFE2
  2539                           fsr1l	equ	0xFE1
  2540                           indf2	equ	0xFDF
  2541                           postinc2	equ	0xFDE
  2542                           postdec2	equ	0xFDD
  2543                           fsr2h	equ	0xFDA
  2544                           fsr2l	equ	0xFD9
  2545                           status	equ	0xFD8
  2546                           
  2547 ;; *************** function _cobs_encode *****************
  2548 ;; Defined at:
  2549 ;;		line 29 in file "COBS.c"
  2550 ;; Parameters:    Size  Location     Type
  2551 ;;  dst_buf_ptr     2   28[COMRAM] PTR unsigned char 
  2552 ;;		 -> sendData@COBSArray(30), 
  2553 ;;  dst_buf_len     2   30[COMRAM] unsigned int 
  2554 ;;  src_ptr         2   32[COMRAM] PTR const unsigned char 
  2555 ;;		 -> sendData@SendArray(30), 
  2556 ;;  src_len         2   34[COMRAM] unsigned int 
  2557 ;; Auto vars:     Size  Location     Type
  2558 ;;  result          3   10[BANK0 ] struct .
  2559 ;;  dst_write_pt    2    8[BANK0 ] PTR unsigned char 
  2560 ;;		 -> sendData@COBSArray(30), 
  2561 ;;  dst_code_wri    2    6[BANK0 ] PTR unsigned char 
  2562 ;;		 -> sendData@COBSArray(30), 
  2563 ;;  dst_buf_end_    2    3[BANK0 ] PTR unsigned char 
  2564 ;;		 -> sendData@COBSArray(30), 
  2565 ;;  src_end_ptr     2    0[BANK0 ] PTR const unsigned char 
  2566 ;;		 -> sendData@SendArray(30), 
  2567 ;;  search_len      1    5[BANK0 ] unsigned char 
  2568 ;;  src_byte        1    2[BANK0 ] unsigned char 
  2569 ;; Return value:  Size  Location     Type
  2570 ;;                  3   28[COMRAM] struct .
  2571 ;; Registers used:
  2572 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2573 ;; Tracked objects:
  2574 ;;		On entry : 0/0
  2575 ;;		On exit  : 0/0
  2576 ;;		Unchanged: 0/0
  2577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2578 ;;      Params:         8       0       0       0       0       0       0
  2579 ;;      Locals:         0      13       0       0       0       0       0
  2580 ;;      Temps:          2       0       0       0       0       0       0
  2581 ;;      Totals:        10      13       0       0       0       0       0
  2582 ;;Total ram usage:       23 bytes
  2583 ;; Hardware stack levels used:    1
  2584 ;; Hardware stack levels required when called:    6
  2585 ;; This function calls:
  2586 ;;		Nothing
  2587 ;; This function is called by:
  2588 ;;		_sendData
  2589 ;; This function uses a non-reentrant model
  2590 ;;
  2591                           
  2592                           	psect	text9
  2593  0008FE                     __ptext9:
  2594                           	opt stack 0
  2595  0008FE                     _cobs_encode:
  2596                           	opt stack 20
  2597                           
  2598                           ;COBS.c: 31: cobs_encode_result result = { 0, COBS_ENCODE_OK };
  2599                           
  2600                           ; BSR set to: 0
  2601                           ;incstack = 0
  2602  0008FE  C034  F06A         	movff	cobs_encode@F180,cobs_encode@result
  2603  000902  C035  F06B         	movff	cobs_encode@F180+1,cobs_encode@result+1
  2604  000906  C036  F06C         	movff	cobs_encode@F180+2,cobs_encode@result+2
  2605                           
  2606                           ;COBS.c: 32: const uint8_t * src_end_ptr = src_ptr + src_len;
  2607  00090A  5023               	movf	cobs_encode@src_len,w,c
  2608  00090C  2421               	addwf	cobs_encode@src_ptr,w,c
  2609  00090E  0100               	movlb	0	; () banked
  2610  000910  6F60               	movwf	cobs_encode@src_end_ptr& (0+255),b
  2611  000912  5024               	movf	cobs_encode@src_len+1,w,c
  2612  000914  2022               	addwfc	cobs_encode@src_ptr+1,w,c
  2613  000916  0100               	movlb	0	; () banked
  2614  000918  6F61               	movwf	(cobs_encode@src_end_ptr+1)& (0+255),b
  2615                           
  2616                           ;COBS.c: 33: uint8_t * dst_buf_end_ptr = dst_buf_ptr + dst_buf_len;
  2617  00091A  501F               	movf	cobs_encode@dst_buf_len,w,c
  2618  00091C  241D               	addwf	cobs_encode@dst_buf_ptr,w,c
  2619  00091E  0100               	movlb	0	; () banked
  2620  000920  6F63               	movwf	cobs_encode@dst_buf_end_ptr& (0+255),b
  2621  000922  5020               	movf	cobs_encode@dst_buf_len+1,w,c
  2622  000924  201E               	addwfc	cobs_encode@dst_buf_ptr+1,w,c
  2623  000926  0100               	movlb	0	; () banked
  2624  000928  6F64               	movwf	(cobs_encode@dst_buf_end_ptr+1)& (0+255),b
  2625                           
  2626                           ;COBS.c: 34: uint8_t * dst_code_write_ptr = dst_buf_ptr;
  2627  00092A  C01D  F066         	movff	cobs_encode@dst_buf_ptr,cobs_encode@dst_code_write_ptr
  2628  00092E  C01E  F067         	movff	cobs_encode@dst_buf_ptr+1,cobs_encode@dst_code_write_ptr+1
  2629                           
  2630                           ;COBS.c: 35: uint8_t * dst_write_ptr = dst_code_write_ptr + 1;
  2631  000932  0E01               	movlw	1
  2632  000934  0100               	movlb	0	; () banked
  2633  000936  2566               	addwf	cobs_encode@dst_code_write_ptr& (0+255),w,b
  2634  000938  0100               	movlb	0	; () banked
  2635  00093A  6F68               	movwf	cobs_encode@dst_write_ptr& (0+255),b
  2636  00093C  0E00               	movlw	0
  2637  00093E  0100               	movlb	0	; () banked
  2638  000940  2167               	addwfc	(cobs_encode@dst_code_write_ptr+1)& (0+255),w,b
  2639  000942  0100               	movlb	0	; () banked
  2640  000944  6F69               	movwf	(cobs_encode@dst_write_ptr+1)& (0+255),b
  2641                           
  2642                           ; BSR set to: 0
  2643                           ;COBS.c: 36: uint8_t src_byte = 0;
  2644  000946  0E00               	movlw	0
  2645  000948  0100               	movlb	0	; () banked
  2646  00094A  6F62               	movwf	cobs_encode@src_byte& (0+255),b
  2647                           
  2648                           ; BSR set to: 0
  2649                           ;COBS.c: 37: uint8_t search_len = 1;
  2650  00094C  0E01               	movlw	1
  2651  00094E  0100               	movlb	0	; () banked
  2652  000950  6F65               	movwf	cobs_encode@search_len& (0+255),b
  2653                           
  2654                           ;COBS.c: 41: if ((dst_buf_ptr == (0)) || (src_ptr == (0)))
  2655  000952  501D               	movf	cobs_encode@dst_buf_ptr,w,c
  2656  000954  101E               	iorwf	cobs_encode@dst_buf_ptr+1,w,c
  2657  000956  B4D8               	btfsc	status,2,c
  2658  000958  D004               	goto	l3751
  2659                           
  2660                           ; BSR set to: 0
  2661  00095A  5021               	movf	cobs_encode@src_ptr,w,c
  2662  00095C  1022               	iorwf	cobs_encode@src_ptr+1,w,c
  2663  00095E  A4D8               	btfss	status,2,c
  2664  000960  D00A               	goto	l3757
  2665  000962                     l3751:
  2666                           
  2667                           ; BSR set to: 0
  2668                           ;COBS.c: 42: {
  2669                           ;COBS.c: 43: result.status = COBS_ENCODE_NULL_POINTER;
  2670  000962  0E01               	movlw	1
  2671  000964  0100               	movlb	0	; () banked
  2672  000966  6F6C               	movwf	(cobs_encode@result+2)& (0+255),b
  2673                           
  2674                           ; BSR set to: 0
  2675                           ;COBS.c: 44: return result;
  2676  000968  C06A  F01D         	movff	cobs_encode@result,?_cobs_encode
  2677  00096C  C06B  F01E         	movff	cobs_encode@result+1,?_cobs_encode+1
  2678  000970  C06C  F01F         	movff	cobs_encode@result+2,?_cobs_encode+2
  2679                           
  2680                           ; BSR set to: 0
  2681  000974  0012               	return	
  2682  000976                     l3757:
  2683                           
  2684                           ; BSR set to: 0
  2685                           ;COBS.c: 45: }
  2686                           ;COBS.c: 47: if (src_len != 0)
  2687  000976  5023               	movf	cobs_encode@src_len,w,c
  2688  000978  1024               	iorwf	cobs_encode@src_len+1,w,c
  2689  00097A  B4D8               	btfsc	status,2,c
  2690  00097C  D05C               	goto	l3801
  2691  00097E                     l3759:
  2692                           
  2693                           ; BSR set to: 0
  2694                           ;COBS.c: 51: {
  2695                           ;COBS.c: 53: if (dst_write_ptr >= dst_buf_end_ptr)
  2696  00097E  0100               	movlb	0	; () banked
  2697  000980  5163               	movf	cobs_encode@dst_buf_end_ptr& (0+255),w,b
  2698  000982  0100               	movlb	0	; () banked
  2699  000984  5D68               	subwf	cobs_encode@dst_write_ptr& (0+255),w,b
  2700  000986  0100               	movlb	0	; () banked
  2701  000988  5164               	movf	(cobs_encode@dst_buf_end_ptr+1)& (0+255),w,b
  2702  00098A  0100               	movlb	0	; () banked
  2703  00098C  5969               	subwfb	(cobs_encode@dst_write_ptr+1)& (0+255),w,b
  2704  00098E  A0D8               	btfss	status,0,c
  2705  000990  D003               	goto	l3763
  2706                           
  2707                           ; BSR set to: 0
  2708                           ;COBS.c: 54: {
  2709                           ;COBS.c: 55: result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
  2710  000992  0100               	movlb	0	; () banked
  2711  000994  836C               	bsf	(cobs_encode@result+2)& (0+255),1,b
  2712                           
  2713                           ;COBS.c: 56: break;
  2714  000996  D04F               	goto	l3801
  2715  000998                     l3763:
  2716                           
  2717                           ; BSR set to: 0
  2718                           ;COBS.c: 57: }
  2719                           ;COBS.c: 59: src_byte = *src_ptr++;
  2720  000998  C021  FFD9         	movff	cobs_encode@src_ptr,fsr2l
  2721  00099C  C022  FFDA         	movff	cobs_encode@src_ptr+1,fsr2h
  2722  0009A0  50DF               	movf	indf2,w,c
  2723  0009A2  0100               	movlb	0	; () banked
  2724  0009A4  6F62               	movwf	cobs_encode@src_byte& (0+255),b
  2725                           
  2726                           ; BSR set to: 0
  2727  0009A6  4A21               	infsnz	cobs_encode@src_ptr,f,c
  2728  0009A8  2A22               	incf	cobs_encode@src_ptr+1,f,c
  2729                           
  2730                           ; BSR set to: 0
  2731                           ;COBS.c: 60: if (src_byte == 0)
  2732  0009AA  0100               	movlb	0	; () banked
  2733  0009AC  5162               	movf	cobs_encode@src_byte& (0+255),w,b
  2734  0009AE  0100               	movlb	0	; () banked
  2735  0009B0  A4D8               	btfss	status,2,c
  2736  0009B2  D019               	goto	l3781
  2737                           
  2738                           ; BSR set to: 0
  2739                           ;COBS.c: 61: {
  2740                           ;COBS.c: 63: *dst_code_write_ptr = search_len;
  2741  0009B4  C066  FFD9         	movff	cobs_encode@dst_code_write_ptr,fsr2l
  2742  0009B8  C067  FFDA         	movff	cobs_encode@dst_code_write_ptr+1,fsr2h
  2743  0009BC  C065  FFDF         	movff	cobs_encode@search_len,indf2
  2744                           
  2745                           ; BSR set to: 0
  2746                           ;COBS.c: 64: dst_code_write_ptr = dst_write_ptr++;
  2747  0009C0  C068  F066         	movff	cobs_encode@dst_write_ptr,cobs_encode@dst_code_write_ptr
  2748  0009C4  C069  F067         	movff	cobs_encode@dst_write_ptr+1,cobs_encode@dst_code_write_ptr+1
  2749                           
  2750                           ; BSR set to: 0
  2751  0009C8  0100               	movlb	0	; () banked
  2752  0009CA  4B68               	infsnz	cobs_encode@dst_write_ptr& (0+255),f,b
  2753  0009CC  2B69               	incf	(cobs_encode@dst_write_ptr+1)& (0+255),f,b
  2754                           
  2755                           ; BSR set to: 0
  2756                           ;COBS.c: 65: search_len = 1;
  2757  0009CE  0E01               	movlw	1
  2758  0009D0  0100               	movlb	0	; () banked
  2759  0009D2  6F65               	movwf	cobs_encode@search_len& (0+255),b
  2760                           
  2761                           ; BSR set to: 0
  2762                           ;COBS.c: 66: if (src_ptr >= src_end_ptr)
  2763  0009D4  0100               	movlb	0	; () banked
  2764  0009D6  5160               	movf	cobs_encode@src_end_ptr& (0+255),w,b
  2765  0009D8  5C21               	subwf	cobs_encode@src_ptr,w,c
  2766  0009DA  0100               	movlb	0	; () banked
  2767  0009DC  5161               	movf	(cobs_encode@src_end_ptr+1)& (0+255),w,b
  2768  0009DE  5822               	subwfb	cobs_encode@src_ptr+1,w,c
  2769  0009E0  B0D8               	btfsc	status,0,c
  2770  0009E2  D029               	goto	l3801
  2771  0009E4  D7CC               	goto	l3759
  2772  0009E6                     l3781:
  2773                           
  2774                           ; BSR set to: 0
  2775                           ;COBS.c: 71: else
  2776                           ;COBS.c: 72: {
  2777                           ;COBS.c: 74: *dst_write_ptr++ = src_byte;
  2778  0009E6  C068  FFD9         	movff	cobs_encode@dst_write_ptr,fsr2l
  2779  0009EA  C069  FFDA         	movff	cobs_encode@dst_write_ptr+1,fsr2h
  2780  0009EE  C062  FFDF         	movff	cobs_encode@src_byte,indf2
  2781                           
  2782                           ; BSR set to: 0
  2783  0009F2  0100               	movlb	0	; () banked
  2784  0009F4  4B68               	infsnz	cobs_encode@dst_write_ptr& (0+255),f,b
  2785  0009F6  2B69               	incf	(cobs_encode@dst_write_ptr+1)& (0+255),f,b
  2786                           
  2787                           ; BSR set to: 0
  2788                           ;COBS.c: 75: search_len++;
  2789  0009F8  0100               	movlb	0	; () banked
  2790  0009FA  2B65               	incf	cobs_encode@search_len& (0+255),f,b
  2791                           
  2792                           ; BSR set to: 0
  2793                           ;COBS.c: 76: if (src_ptr >= src_end_ptr)
  2794  0009FC  0100               	movlb	0	; () banked
  2795  0009FE  5160               	movf	cobs_encode@src_end_ptr& (0+255),w,b
  2796  000A00  5C21               	subwf	cobs_encode@src_ptr,w,c
  2797  000A02  0100               	movlb	0	; () banked
  2798  000A04  5161               	movf	(cobs_encode@src_end_ptr+1)& (0+255),w,b
  2799  000A06  5822               	subwfb	cobs_encode@src_ptr+1,w,c
  2800  000A08  B0D8               	btfsc	status,0,c
  2801  000A0A  D015               	goto	l3801
  2802                           
  2803                           ; BSR set to: 0
  2804                           ;COBS.c: 79: }
  2805                           ;COBS.c: 80: if (search_len == 0xFF)
  2806                           
  2807                           ; BSR set to: 0
  2808                           
  2809                           ; BSR set to: 0
  2810                           ;COBS.c: 77: {
  2811                           ;COBS.c: 78: break;
  2812  000A0C  0100               	movlb	0	; () banked
  2813  000A0E  2965               	incf	cobs_encode@search_len& (0+255),w,b
  2814  000A10  A4D8               	btfss	status,2,c
  2815  000A12  D7B5               	goto	l3759
  2816                           
  2817                           ; BSR set to: 0
  2818                           ;COBS.c: 81: {
  2819                           ;COBS.c: 84: *dst_code_write_ptr = search_len;
  2820  000A14  C066  FFD9         	movff	cobs_encode@dst_code_write_ptr,fsr2l
  2821  000A18  C067  FFDA         	movff	cobs_encode@dst_code_write_ptr+1,fsr2h
  2822  000A1C  C065  FFDF         	movff	cobs_encode@search_len,indf2
  2823                           
  2824                           ; BSR set to: 0
  2825                           ;COBS.c: 85: dst_code_write_ptr = dst_write_ptr++;
  2826  000A20  C068  F066         	movff	cobs_encode@dst_write_ptr,cobs_encode@dst_code_write_ptr
  2827  000A24  C069  F067         	movff	cobs_encode@dst_write_ptr+1,cobs_encode@dst_code_write_ptr+1
  2828                           
  2829                           ; BSR set to: 0
  2830  000A28  0100               	movlb	0	; () banked
  2831  000A2A  4B68               	infsnz	cobs_encode@dst_write_ptr& (0+255),f,b
  2832  000A2C  2B69               	incf	(cobs_encode@dst_write_ptr+1)& (0+255),f,b
  2833                           
  2834                           ; BSR set to: 0
  2835                           ;COBS.c: 86: search_len = 1;
  2836  000A2E  0E01               	movlw	1
  2837  000A30  0100               	movlb	0	; () banked
  2838  000A32  6F65               	movwf	cobs_encode@search_len& (0+255),b
  2839                           
  2840                           ; BSR set to: 0
  2841                           ;COBS.c: 87: }
  2842                           ;COBS.c: 88: }
  2843                           ;COBS.c: 89: }
  2844                           
  2845                           ; BSR set to: 0
  2846  000A34  D7A4               	goto	l3759
  2847  000A36                     l3801:
  2848                           
  2849                           ; BSR set to: 0
  2850                           ;COBS.c: 90: }
  2851                           ;COBS.c: 96: if (dst_code_write_ptr >= dst_buf_end_ptr)
  2852  000A36  0100               	movlb	0	; () banked
  2853  000A38  5163               	movf	cobs_encode@dst_buf_end_ptr& (0+255),w,b
  2854  000A3A  0100               	movlb	0	; () banked
  2855  000A3C  5D66               	subwf	cobs_encode@dst_code_write_ptr& (0+255),w,b
  2856  000A3E  0100               	movlb	0	; () banked
  2857  000A40  5164               	movf	(cobs_encode@dst_buf_end_ptr+1)& (0+255),w,b
  2858  000A42  0100               	movlb	0	; () banked
  2859  000A44  5967               	subwfb	(cobs_encode@dst_code_write_ptr+1)& (0+255),w,b
  2860  000A46  A0D8               	btfss	status,0,c
  2861  000A48  D007               	goto	l3807
  2862                           
  2863                           ; BSR set to: 0
  2864                           ;COBS.c: 97: {
  2865                           ;COBS.c: 99: result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
  2866  000A4A  0100               	movlb	0	; () banked
  2867  000A4C  836C               	bsf	(cobs_encode@result+2)& (0+255),1,b
  2868                           
  2869                           ; BSR set to: 0
  2870                           ;COBS.c: 100: dst_write_ptr = dst_buf_end_ptr;
  2871  000A4E  C063  F068         	movff	cobs_encode@dst_buf_end_ptr,cobs_encode@dst_write_ptr
  2872  000A52  C064  F069         	movff	cobs_encode@dst_buf_end_ptr+1,cobs_encode@dst_write_ptr+1
  2873                           
  2874                           ;COBS.c: 101: }
  2875  000A56  D006               	goto	l3809
  2876  000A58                     l3807:
  2877                           
  2878                           ; BSR set to: 0
  2879                           ;COBS.c: 102: else
  2880                           ;COBS.c: 103: {
  2881                           ;COBS.c: 105: *dst_code_write_ptr = search_len;
  2882  000A58  C066  FFD9         	movff	cobs_encode@dst_code_write_ptr,fsr2l
  2883  000A5C  C067  FFDA         	movff	cobs_encode@dst_code_write_ptr+1,fsr2h
  2884  000A60  C065  FFDF         	movff	cobs_encode@search_len,indf2
  2885  000A64                     l3809:
  2886                           
  2887                           ; BSR set to: 0
  2888                           ;COBS.c: 106: }
  2889                           ;COBS.c: 109: result.out_len = dst_write_ptr - dst_buf_ptr;
  2890  000A64  C01D  F025         	movff	cobs_encode@dst_buf_ptr,??_cobs_encode
  2891  000A68  C01E  F026         	movff	cobs_encode@dst_buf_ptr+1,??_cobs_encode+1
  2892  000A6C  1E25               	comf	??_cobs_encode,f,c
  2893  000A6E  1E26               	comf	??_cobs_encode+1,f,c
  2894  000A70  4A25               	infsnz	??_cobs_encode,f,c
  2895  000A72  2A26               	incf	??_cobs_encode+1,f,c
  2896  000A74  0100               	movlb	0	; () banked
  2897  000A76  5168               	movf	cobs_encode@dst_write_ptr& (0+255),w,b
  2898  000A78  2425               	addwf	??_cobs_encode,w,c
  2899  000A7A  0100               	movlb	0	; () banked
  2900  000A7C  6F6A               	movwf	cobs_encode@result& (0+255),b
  2901  000A7E  0100               	movlb	0	; () banked
  2902  000A80  5169               	movf	(cobs_encode@dst_write_ptr+1)& (0+255),w,b
  2903  000A82  2026               	addwfc	??_cobs_encode+1,w,c
  2904  000A84  0100               	movlb	0	; () banked
  2905  000A86  6F6B               	movwf	(cobs_encode@result+1)& (0+255),b
  2906                           
  2907                           ; BSR set to: 0
  2908                           ;COBS.c: 111: return result;
  2909  000A88  C06A  F01D         	movff	cobs_encode@result,?_cobs_encode
  2910  000A8C  C06B  F01E         	movff	cobs_encode@result+1,?_cobs_encode+1
  2911  000A90  C06C  F01F         	movff	cobs_encode@result+2,?_cobs_encode+2
  2912  000A94  0012               	return	
  2913  000A96                     __end_of_cobs_encode:
  2914                           	opt stack 0
  2915                           tblptru	equ	0xFF8
  2916                           tblptrh	equ	0xFF7
  2917                           tblptrl	equ	0xFF6
  2918                           tablat	equ	0xFF5
  2919                           intcon	equ	0xFF2
  2920                           postinc0	equ	0xFEE
  2921                           wreg	equ	0xFE8
  2922                           indf1	equ	0xFE7
  2923                           postdec1	equ	0xFE5
  2924                           fsr1h	equ	0xFE2
  2925                           fsr1l	equ	0xFE1
  2926                           indf2	equ	0xFDF
  2927                           postinc2	equ	0xFDE
  2928                           postdec2	equ	0xFDD
  2929                           fsr2h	equ	0xFDA
  2930                           fsr2l	equ	0xFD9
  2931                           status	equ	0xFD8
  2932                           
  2933 ;; *************** function _Send_put *****************
  2934 ;; Defined at:
  2935 ;;		line 129 in file "UART.c"
  2936 ;; Parameters:    Size  Location     Type
  2937 ;;  _data           1    wreg     unsigned char 
  2938 ;; Auto vars:     Size  Location     Type
  2939 ;;  _data           1   39[COMRAM] unsigned char 
  2940 ;; Return value:  Size  Location     Type
  2941 ;;                  1    wreg      void 
  2942 ;; Registers used:
  2943 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2944 ;; Tracked objects:
  2945 ;;		On entry : 0/0
  2946 ;;		On exit  : 0/0
  2947 ;;		Unchanged: 0/0
  2948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2949 ;;      Params:         0       0       0       0       0       0       0
  2950 ;;      Locals:         1       0       0       0       0       0       0
  2951 ;;      Temps:          0       0       0       0       0       0       0
  2952 ;;      Totals:         1       0       0       0       0       0       0
  2953 ;;Total ram usage:        1 bytes
  2954 ;; Hardware stack levels used:    1
  2955 ;; Hardware stack levels required when called:    8
  2956 ;; This function calls:
  2957 ;;		_UART_buff_get
  2958 ;;		_UART_buff_put
  2959 ;; This function is called by:
  2960 ;;		_sendData
  2961 ;;		_putch
  2962 ;; This function uses a non-reentrant model
  2963 ;;
  2964                           
  2965                           	psect	text10
  2966  001C6C                     __ptext10:
  2967                           	opt stack 0
  2968  001C6C                     _Send_put:
  2969                           	opt stack 18
  2970                           
  2971                           ; BSR set to: 0
  2972                           ;incstack = 0
  2973                           ;Send_put@_data stored from wreg
  2974  001C6C  6E28               	movwf	Send_put@_data,c
  2975                           
  2976                           ;UART.c: 130: UART_buff_put(&output_buffer, _data);
  2977  001C6E  0E00               	movlw	low _output_buffer
  2978  001C70  6E23               	movwf	UART_buff_put@_this,c
  2979  001C72  0E02               	movlw	high _output_buffer
  2980  001C74  6E24               	movwf	UART_buff_put@_this+1,c
  2981  001C76  C028  F025         	movff	Send_put@_data,UART_buff_put@c
  2982  001C7A  EC1F  F007         	call	_UART_buff_put	;wreg free
  2983                           
  2984                           ;UART.c: 131: if (Transmit_stall == 1) {
  2985  001C7E  0442               	decf	_Transmit_stall,w,c
  2986  001C80  A4D8               	btfss	status,2,c
  2987  001C82  0012               	return	
  2988                           
  2989                           ;UART.c: 132: Transmit_stall = 0;
  2990  001C84  0E00               	movlw	0
  2991  001C86  6E42               	movwf	_Transmit_stall,c
  2992                           
  2993                           ;UART.c: 133: TXREG1 = UART_buff_get(&output_buffer);
  2994  001C88  0E00               	movlw	low _output_buffer
  2995  001C8A  6E23               	movwf	UART_buff_get@_this,c
  2996  001C8C  0E02               	movlw	high _output_buffer
  2997  001C8E  6E24               	movwf	UART_buff_get@_this+1,c
  2998  001C90  ECA7  F00A         	call	_UART_buff_get	;wreg free
  2999  001C94  6EAD               	movwf	4013,c	;volatile
  3000                           
  3001                           ;UART.c: 134: PIE1bits.TX1IE = 1;
  3002  001C96  889D               	bsf	3997,4,c	;volatile
  3003  001C98  0012               	return	
  3004  001C9A                     __end_of_Send_put:
  3005                           	opt stack 0
  3006                           tblptru	equ	0xFF8
  3007                           tblptrh	equ	0xFF7
  3008                           tblptrl	equ	0xFF6
  3009                           tablat	equ	0xFF5
  3010                           intcon	equ	0xFF2
  3011                           postinc0	equ	0xFEE
  3012                           wreg	equ	0xFE8
  3013                           indf1	equ	0xFE7
  3014                           postdec1	equ	0xFE5
  3015                           fsr1h	equ	0xFE2
  3016                           fsr1l	equ	0xFE1
  3017                           indf2	equ	0xFDF
  3018                           postinc2	equ	0xFDE
  3019                           postdec2	equ	0xFDD
  3020                           fsr2h	equ	0xFDA
  3021                           fsr2l	equ	0xFD9
  3022                           status	equ	0xFD8
  3023                           
  3024 ;; *************** function _UART_buff_put *****************
  3025 ;; Defined at:
  3026 ;;		line 67 in file "UART.c"
  3027 ;; Parameters:    Size  Location     Type
  3028 ;;  _this           2   34[COMRAM] PTR struct UART_ring_buf
  3029 ;;		 -> output_buffer(106), input_buffer(106), 
  3030 ;;  c               1   36[COMRAM] const unsigned char 
  3031 ;; Auto vars:     Size  Location     Type
  3032 ;;		None
  3033 ;; Return value:  Size  Location     Type
  3034 ;;                  1    wreg      void 
  3035 ;; Registers used:
  3036 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3037 ;; Tracked objects:
  3038 ;;		On entry : 0/0
  3039 ;;		On exit  : 0/0
  3040 ;;		Unchanged: 0/0
  3041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3042 ;;      Params:         3       0       0       0       0       0       0
  3043 ;;      Locals:         0       0       0       0       0       0       0
  3044 ;;      Temps:          2       0       0       0       0       0       0
  3045 ;;      Totals:         5       0       0       0       0       0       0
  3046 ;;Total ram usage:        5 bytes
  3047 ;; Hardware stack levels used:    1
  3048 ;; Hardware stack levels required when called:    7
  3049 ;; This function calls:
  3050 ;;		_UART_buff_modulo_inc
  3051 ;; This function is called by:
  3052 ;;		_Send_put
  3053 ;; This function uses a non-reentrant model
  3054 ;;
  3055                           
  3056                           	psect	text11
  3057  000E3E                     __ptext11:
  3058                           	opt stack 0
  3059  000E3E                     _UART_buff_put:
  3060                           	opt stack 18
  3061                           
  3062                           ;UART.c: 68: if (_this->count < 100) {
  3063                           
  3064                           ;incstack = 0
  3065  000E3E  EE20 F068          	lfsr	2,104
  3066  000E42  5023               	movf	UART_buff_put@_this,w,c
  3067  000E44  26D9               	addwf	fsr2l,f,c
  3068  000E46  5024               	movf	UART_buff_put@_this+1,w,c
  3069  000E48  22DA               	addwfc	fsr2h,f,c
  3070  000E4A  0E01               	movlw	1
  3071  000E4C  BEDB               	btfsc	plusw2,7,c
  3072  000E4E  D007               	goto	l3675
  3073  000E50  0E01               	movlw	1
  3074  000E52  50DB               	movf	plusw2,w,c
  3075  000E54  E13A               	bnz	l3681
  3076  000E56  0E64               	movlw	100
  3077  000E58  5CDE               	subwf	postinc2,w,c
  3078  000E5A  B0D8               	btfsc	status,0,c
  3079  000E5C  D036               	goto	l3681
  3080  000E5E                     l3675:
  3081                           
  3082                           ;UART.c: 69: _this->buf[_this->head] = c;
  3083  000E5E  EE20 F064          	lfsr	2,100
  3084  000E62  5023               	movf	UART_buff_put@_this,w,c
  3085  000E64  26D9               	addwf	fsr2l,f,c
  3086  000E66  5024               	movf	UART_buff_put@_this+1,w,c
  3087  000E68  22DA               	addwfc	fsr2h,f,c
  3088  000E6A  CFDE F026          	movff	postinc2,??_UART_buff_put
  3089  000E6E  CFDD F027          	movff	postdec2,??_UART_buff_put+1
  3090  000E72  5026               	movf	??_UART_buff_put,w,c
  3091  000E74  2423               	addwf	UART_buff_put@_this,w,c
  3092  000E76  6ED9               	movwf	fsr2l,c
  3093  000E78  5027               	movf	??_UART_buff_put+1,w,c
  3094  000E7A  2024               	addwfc	UART_buff_put@_this+1,w,c
  3095  000E7C  6EDA               	movwf	fsr2h,c
  3096  000E7E  C025  FFDF         	movff	UART_buff_put@c,indf2
  3097                           
  3098                           ;UART.c: 70: _this->head = UART_buff_modulo_inc(_this->head, 100);
  3099  000E82  EE20 F064          	lfsr	2,100
  3100  000E86  5023               	movf	UART_buff_put@_this,w,c
  3101  000E88  26D9               	addwf	fsr2l,f,c
  3102  000E8A  5024               	movf	UART_buff_put@_this+1,w,c
  3103  000E8C  22DA               	addwfc	fsr2h,f,c
  3104  000E8E  CFDE F01D          	movff	postinc2,UART_buff_modulo_inc@value
  3105  000E92  CFDD F01E          	movff	postdec2,UART_buff_modulo_inc@value+1
  3106  000E96  0E00               	movlw	0
  3107  000E98  6E20               	movwf	UART_buff_modulo_inc@modulus+1,c
  3108  000E9A  0E64               	movlw	100
  3109  000E9C  6E1F               	movwf	UART_buff_modulo_inc@modulus,c
  3110  000E9E  EC63  F00E         	call	_UART_buff_modulo_inc	;wreg free
  3111  000EA2  EE20 F064          	lfsr	2,100
  3112  000EA6  5023               	movf	UART_buff_put@_this,w,c
  3113  000EA8  26D9               	addwf	fsr2l,f,c
  3114  000EAA  5024               	movf	UART_buff_put@_this+1,w,c
  3115  000EAC  22DA               	addwfc	fsr2h,f,c
  3116  000EAE  C01D  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3117  000EB2  C01E  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3118                           
  3119                           ;UART.c: 71: ++_this->count;
  3120  000EB6  EE20 F068          	lfsr	2,104
  3121  000EBA  5023               	movf	UART_buff_put@_this,w,c
  3122  000EBC  26D9               	addwf	fsr2l,f,c
  3123  000EBE  5024               	movf	UART_buff_put@_this+1,w,c
  3124  000EC0  22DA               	addwfc	fsr2h,f,c
  3125  000EC2  2ADE               	incf	postinc2,f,c
  3126  000EC4  0E00               	movlw	0
  3127  000EC6  22DD               	addwfc	postdec2,f,c
  3128                           
  3129                           ;UART.c: 72: } else {
  3130  000EC8  0012               	return	
  3131  000ECA                     l3681:
  3132                           
  3133                           ;UART.c: 73: _this->buf[_this->head] = c;
  3134  000ECA  EE20 F064          	lfsr	2,100
  3135  000ECE  5023               	movf	UART_buff_put@_this,w,c
  3136  000ED0  26D9               	addwf	fsr2l,f,c
  3137  000ED2  5024               	movf	UART_buff_put@_this+1,w,c
  3138  000ED4  22DA               	addwfc	fsr2h,f,c
  3139  000ED6  CFDE F026          	movff	postinc2,??_UART_buff_put
  3140  000EDA  CFDD F027          	movff	postdec2,??_UART_buff_put+1
  3141  000EDE  5026               	movf	??_UART_buff_put,w,c
  3142  000EE0  2423               	addwf	UART_buff_put@_this,w,c
  3143  000EE2  6ED9               	movwf	fsr2l,c
  3144  000EE4  5027               	movf	??_UART_buff_put+1,w,c
  3145  000EE6  2024               	addwfc	UART_buff_put@_this+1,w,c
  3146  000EE8  6EDA               	movwf	fsr2h,c
  3147  000EEA  C025  FFDF         	movff	UART_buff_put@c,indf2
  3148                           
  3149                           ;UART.c: 74: _this->head = UART_buff_modulo_inc(_this->head, 100);
  3150  000EEE  EE20 F064          	lfsr	2,100
  3151  000EF2  5023               	movf	UART_buff_put@_this,w,c
  3152  000EF4  26D9               	addwf	fsr2l,f,c
  3153  000EF6  5024               	movf	UART_buff_put@_this+1,w,c
  3154  000EF8  22DA               	addwfc	fsr2h,f,c
  3155  000EFA  CFDE F01D          	movff	postinc2,UART_buff_modulo_inc@value
  3156  000EFE  CFDD F01E          	movff	postdec2,UART_buff_modulo_inc@value+1
  3157  000F02  0E00               	movlw	0
  3158  000F04  6E20               	movwf	UART_buff_modulo_inc@modulus+1,c
  3159  000F06  0E64               	movlw	100
  3160  000F08  6E1F               	movwf	UART_buff_modulo_inc@modulus,c
  3161  000F0A  EC63  F00E         	call	_UART_buff_modulo_inc	;wreg free
  3162  000F0E  EE20 F064          	lfsr	2,100
  3163  000F12  5023               	movf	UART_buff_put@_this,w,c
  3164  000F14  26D9               	addwf	fsr2l,f,c
  3165  000F16  5024               	movf	UART_buff_put@_this+1,w,c
  3166  000F18  22DA               	addwfc	fsr2h,f,c
  3167  000F1A  C01D  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3168  000F1E  C01E  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3169                           
  3170                           ;UART.c: 75: _this->tail = UART_buff_modulo_inc(_this->tail, 100);
  3171  000F22  EE20 F066          	lfsr	2,102
  3172  000F26  5023               	movf	UART_buff_put@_this,w,c
  3173  000F28  26D9               	addwf	fsr2l,f,c
  3174  000F2A  5024               	movf	UART_buff_put@_this+1,w,c
  3175  000F2C  22DA               	addwfc	fsr2h,f,c
  3176  000F2E  CFDE F01D          	movff	postinc2,UART_buff_modulo_inc@value
  3177  000F32  CFDD F01E          	movff	postdec2,UART_buff_modulo_inc@value+1
  3178  000F36  0E00               	movlw	0
  3179  000F38  6E20               	movwf	UART_buff_modulo_inc@modulus+1,c
  3180  000F3A  0E64               	movlw	100
  3181  000F3C  6E1F               	movwf	UART_buff_modulo_inc@modulus,c
  3182  000F3E  EC63  F00E         	call	_UART_buff_modulo_inc	;wreg free
  3183  000F42  EE20 F066          	lfsr	2,102
  3184  000F46  5023               	movf	UART_buff_put@_this,w,c
  3185  000F48  26D9               	addwf	fsr2l,f,c
  3186  000F4A  5024               	movf	UART_buff_put@_this+1,w,c
  3187  000F4C  22DA               	addwfc	fsr2h,f,c
  3188  000F4E  C01D  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3189  000F52  C01E  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3190  000F56  0012               	return	
  3191  000F58                     __end_of_UART_buff_put:
  3192                           	opt stack 0
  3193                           tblptru	equ	0xFF8
  3194                           tblptrh	equ	0xFF7
  3195                           tblptrl	equ	0xFF6
  3196                           tablat	equ	0xFF5
  3197                           intcon	equ	0xFF2
  3198                           postinc0	equ	0xFEE
  3199                           wreg	equ	0xFE8
  3200                           indf1	equ	0xFE7
  3201                           postdec1	equ	0xFE5
  3202                           fsr1h	equ	0xFE2
  3203                           fsr1l	equ	0xFE1
  3204                           indf2	equ	0xFDF
  3205                           postinc2	equ	0xFDE
  3206                           postdec2	equ	0xFDD
  3207                           plusw2	equ	0xFDB
  3208                           fsr2h	equ	0xFDA
  3209                           fsr2l	equ	0xFD9
  3210                           status	equ	0xFD8
  3211                           
  3212 ;; *************** function _UART_buff_get *****************
  3213 ;; Defined at:
  3214 ;;		line 80 in file "UART.c"
  3215 ;; Parameters:    Size  Location     Type
  3216 ;;  _this           2   34[COMRAM] PTR struct UART_ring_buf
  3217 ;;		 -> output_buffer(106), input_buffer(106), 
  3218 ;; Auto vars:     Size  Location     Type
  3219 ;;  c               1   38[COMRAM] unsigned char 
  3220 ;; Return value:  Size  Location     Type
  3221 ;;                  1    wreg      unsigned char 
  3222 ;; Registers used:
  3223 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3224 ;; Tracked objects:
  3225 ;;		On entry : 0/0
  3226 ;;		On exit  : 0/0
  3227 ;;		Unchanged: 0/0
  3228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3229 ;;      Params:         2       0       0       0       0       0       0
  3230 ;;      Locals:         1       0       0       0       0       0       0
  3231 ;;      Temps:          2       0       0       0       0       0       0
  3232 ;;      Totals:         5       0       0       0       0       0       0
  3233 ;;Total ram usage:        5 bytes
  3234 ;; Hardware stack levels used:    1
  3235 ;; Hardware stack levels required when called:    7
  3236 ;; This function calls:
  3237 ;;		_UART_buff_modulo_inc
  3238 ;; This function is called by:
  3239 ;;		_Receive_get
  3240 ;;		_Send_put
  3241 ;; This function uses a non-reentrant model
  3242 ;;
  3243                           
  3244                           	psect	text12
  3245  00154E                     __ptext12:
  3246                           	opt stack 0
  3247  00154E                     _UART_buff_get:
  3248                           	opt stack 20
  3249                           
  3250                           ;UART.c: 81: unsigned char c;
  3251                           ;UART.c: 82: if (_this->count > 0) {
  3252                           
  3253                           ;incstack = 0
  3254  00154E  EE20 F068          	lfsr	2,104
  3255  001552  5023               	movf	UART_buff_get@_this,w,c
  3256  001554  26D9               	addwf	fsr2l,f,c
  3257  001556  5024               	movf	UART_buff_get@_this+1,w,c
  3258  001558  22DA               	addwfc	fsr2h,f,c
  3259  00155A  0E01               	movlw	1
  3260  00155C  BEDB               	btfsc	plusw2,7,c
  3261  00155E  D03C               	goto	l3695
  3262  001560  0E01               	movlw	1
  3263  001562  50DB               	movf	plusw2,w,c
  3264  001564  E103               	bnz	u2170
  3265  001566  04DE               	decf	postinc2,w,c
  3266  001568  A0D8               	btfss	status,0,c
  3267  00156A  D036               	goto	l3695
  3268  00156C                     u2170:
  3269                           
  3270                           ;UART.c: 83: c = _this->buf[_this->tail];
  3271  00156C  EE20 F066          	lfsr	2,102
  3272  001570  5023               	movf	UART_buff_get@_this,w,c
  3273  001572  26D9               	addwf	fsr2l,f,c
  3274  001574  5024               	movf	UART_buff_get@_this+1,w,c
  3275  001576  22DA               	addwfc	fsr2h,f,c
  3276  001578  CFDE F025          	movff	postinc2,??_UART_buff_get
  3277  00157C  CFDD F026          	movff	postdec2,??_UART_buff_get+1
  3278  001580  5025               	movf	??_UART_buff_get,w,c
  3279  001582  2423               	addwf	UART_buff_get@_this,w,c
  3280  001584  6ED9               	movwf	fsr2l,c
  3281  001586  5026               	movf	??_UART_buff_get+1,w,c
  3282  001588  2024               	addwfc	UART_buff_get@_this+1,w,c
  3283  00158A  6EDA               	movwf	fsr2h,c
  3284  00158C  50DF               	movf	indf2,w,c
  3285  00158E  6E27               	movwf	UART_buff_get@c,c
  3286                           
  3287                           ;UART.c: 84: _this->tail = UART_buff_modulo_inc(_this->tail, 100);
  3288  001590  EE20 F066          	lfsr	2,102
  3289  001594  5023               	movf	UART_buff_get@_this,w,c
  3290  001596  26D9               	addwf	fsr2l,f,c
  3291  001598  5024               	movf	UART_buff_get@_this+1,w,c
  3292  00159A  22DA               	addwfc	fsr2h,f,c
  3293  00159C  CFDE F01D          	movff	postinc2,UART_buff_modulo_inc@value
  3294  0015A0  CFDD F01E          	movff	postdec2,UART_buff_modulo_inc@value+1
  3295  0015A4  0E00               	movlw	0
  3296  0015A6  6E20               	movwf	UART_buff_modulo_inc@modulus+1,c
  3297  0015A8  0E64               	movlw	100
  3298  0015AA  6E1F               	movwf	UART_buff_modulo_inc@modulus,c
  3299  0015AC  EC63  F00E         	call	_UART_buff_modulo_inc	;wreg free
  3300  0015B0  EE20 F066          	lfsr	2,102
  3301  0015B4  5023               	movf	UART_buff_get@_this,w,c
  3302  0015B6  26D9               	addwf	fsr2l,f,c
  3303  0015B8  5024               	movf	UART_buff_get@_this+1,w,c
  3304  0015BA  22DA               	addwfc	fsr2h,f,c
  3305  0015BC  C01D  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3306  0015C0  C01E  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3307                           
  3308                           ;UART.c: 85: --_this->count;
  3309  0015C4  EE20 F068          	lfsr	2,104
  3310  0015C8  5023               	movf	UART_buff_get@_this,w,c
  3311  0015CA  26D9               	addwf	fsr2l,f,c
  3312  0015CC  5024               	movf	UART_buff_get@_this+1,w,c
  3313  0015CE  22DA               	addwfc	fsr2h,f,c
  3314  0015D0  06DE               	decf	postinc2,f,c
  3315  0015D2  0E00               	movlw	0
  3316  0015D4  5ADD               	subwfb	postdec2,f,c
  3317                           
  3318                           ;UART.c: 86: } else {
  3319  0015D6  D002               	goto	l589
  3320  0015D8                     l3695:
  3321                           
  3322                           ;UART.c: 87: c = 0;
  3323  0015D8  0E00               	movlw	0
  3324  0015DA  6E27               	movwf	UART_buff_get@c,c
  3325  0015DC                     l589:
  3326                           
  3327                           ;UART.c: 88: }
  3328                           ;UART.c: 89: return (c);
  3329  0015DC  5027               	movf	UART_buff_get@c,w,c
  3330  0015DE  0012               	return	
  3331  0015E0                     __end_of_UART_buff_get:
  3332                           	opt stack 0
  3333                           tblptru	equ	0xFF8
  3334                           tblptrh	equ	0xFF7
  3335                           tblptrl	equ	0xFF6
  3336                           tablat	equ	0xFF5
  3337                           intcon	equ	0xFF2
  3338                           postinc0	equ	0xFEE
  3339                           wreg	equ	0xFE8
  3340                           indf1	equ	0xFE7
  3341                           postdec1	equ	0xFE5
  3342                           fsr1h	equ	0xFE2
  3343                           fsr1l	equ	0xFE1
  3344                           indf2	equ	0xFDF
  3345                           postinc2	equ	0xFDE
  3346                           postdec2	equ	0xFDD
  3347                           plusw2	equ	0xFDB
  3348                           fsr2h	equ	0xFDA
  3349                           fsr2l	equ	0xFD9
  3350                           status	equ	0xFD8
  3351                           
  3352 ;; *************** function _UART_buff_modulo_inc *****************
  3353 ;; Defined at:
  3354 ;;		line 105 in file "UART.c"
  3355 ;; Parameters:    Size  Location     Type
  3356 ;;  value           2   28[COMRAM] const unsigned int 
  3357 ;;  modulus         2   30[COMRAM] const unsigned int 
  3358 ;; Auto vars:     Size  Location     Type
  3359 ;;  my_value        2   32[COMRAM] unsigned int 
  3360 ;; Return value:  Size  Location     Type
  3361 ;;                  2   28[COMRAM] unsigned int 
  3362 ;; Registers used:
  3363 ;;		wreg, status,2, status,0
  3364 ;; Tracked objects:
  3365 ;;		On entry : 0/0
  3366 ;;		On exit  : 0/0
  3367 ;;		Unchanged: 0/0
  3368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3369 ;;      Params:         4       0       0       0       0       0       0
  3370 ;;      Locals:         2       0       0       0       0       0       0
  3371 ;;      Temps:          0       0       0       0       0       0       0
  3372 ;;      Totals:         6       0       0       0       0       0       0
  3373 ;;Total ram usage:        6 bytes
  3374 ;; Hardware stack levels used:    1
  3375 ;; Hardware stack levels required when called:    6
  3376 ;; This function calls:
  3377 ;;		Nothing
  3378 ;; This function is called by:
  3379 ;;		_UART_buff_put
  3380 ;;		_UART_buff_get
  3381 ;; This function uses a non-reentrant model
  3382 ;;
  3383                           
  3384                           	psect	text13
  3385  001CC6                     __ptext13:
  3386                           	opt stack 0
  3387  001CC6                     _UART_buff_modulo_inc:
  3388                           	opt stack 20
  3389                           
  3390                           ;UART.c: 106: unsigned int my_value = value + 1;
  3391                           
  3392                           ;incstack = 0
  3393  001CC6  0E01               	movlw	1
  3394  001CC8  241D               	addwf	UART_buff_modulo_inc@value,w,c
  3395  001CCA  6E21               	movwf	UART_buff_modulo_inc@my_value,c
  3396  001CCC  0E00               	movlw	0
  3397  001CCE  201E               	addwfc	UART_buff_modulo_inc@value+1,w,c
  3398  001CD0  6E22               	movwf	UART_buff_modulo_inc@my_value+1,c
  3399                           
  3400                           ;UART.c: 107: if (my_value >= modulus) {
  3401  001CD2  501F               	movf	UART_buff_modulo_inc@modulus,w,c
  3402  001CD4  5C21               	subwf	UART_buff_modulo_inc@my_value,w,c
  3403  001CD6  5020               	movf	UART_buff_modulo_inc@modulus+1,w,c
  3404  001CD8  5822               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  3405  001CDA  A0D8               	btfss	status,0,c
  3406  001CDC  D004               	goto	l3669
  3407                           
  3408                           ;UART.c: 108: my_value = 0;
  3409  001CDE  0E00               	movlw	0
  3410  001CE0  6E22               	movwf	UART_buff_modulo_inc@my_value+1,c
  3411  001CE2  0E00               	movlw	0
  3412  001CE4  6E21               	movwf	UART_buff_modulo_inc@my_value,c
  3413  001CE6                     l3669:
  3414                           
  3415                           ;UART.c: 109: }
  3416                           ;UART.c: 110: return (my_value);
  3417  001CE6  C021  F01D         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  3418  001CEA  C022  F01E         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  3419  001CEE  0012               	return	
  3420  001CF0                     __end_of_UART_buff_modulo_inc:
  3421                           	opt stack 0
  3422                           tblptru	equ	0xFF8
  3423                           tblptrh	equ	0xFF7
  3424                           tblptrl	equ	0xFF6
  3425                           tablat	equ	0xFF5
  3426                           intcon	equ	0xFF2
  3427                           postinc0	equ	0xFEE
  3428                           wreg	equ	0xFE8
  3429                           indf1	equ	0xFE7
  3430                           postdec1	equ	0xFE5
  3431                           fsr1h	equ	0xFE2
  3432                           fsr1l	equ	0xFE1
  3433                           indf2	equ	0xFDF
  3434                           postinc2	equ	0xFDE
  3435                           postdec2	equ	0xFDD
  3436                           plusw2	equ	0xFDB
  3437                           fsr2h	equ	0xFDA
  3438                           fsr2l	equ	0xFD9
  3439                           status	equ	0xFD8
  3440                           
  3441 ;; *************** function _CRC8 *****************
  3442 ;; Defined at:
  3443 ;;		line 21 in file "CarCom.c"
  3444 ;; Parameters:    Size  Location     Type
  3445 ;;  data            2   28[COMRAM] PTR const unsigned char 
  3446 ;;		 -> ProcessArray(30), sendData@SendArray(30), 
  3447 ;;  len             1   30[COMRAM] unsigned char 
  3448 ;; Auto vars:     Size  Location     Type
  3449 ;;  sum             1   31[COMRAM] unsigned char 
  3450 ;;  tempI           1   33[COMRAM] unsigned char 
  3451 ;;  extract         1   32[COMRAM] unsigned char 
  3452 ;;  crc             1   34[COMRAM] unsigned char 
  3453 ;; Return value:  Size  Location     Type
  3454 ;;                  1    wreg      unsigned char 
  3455 ;; Registers used:
  3456 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3457 ;; Tracked objects:
  3458 ;;		On entry : 0/0
  3459 ;;		On exit  : 0/0
  3460 ;;		Unchanged: 0/0
  3461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3462 ;;      Params:         3       0       0       0       0       0       0
  3463 ;;      Locals:         4       0       0       0       0       0       0
  3464 ;;      Temps:          0       0       0       0       0       0       0
  3465 ;;      Totals:         7       0       0       0       0       0       0
  3466 ;;Total ram usage:        7 bytes
  3467 ;; Hardware stack levels used:    1
  3468 ;; Hardware stack levels required when called:    6
  3469 ;; This function calls:
  3470 ;;		Nothing
  3471 ;; This function is called by:
  3472 ;;		_sendData
  3473 ;;		_receiveData
  3474 ;; This function uses a non-reentrant model
  3475 ;;
  3476                           
  3477                           	psect	text14
  3478  001A24                     __ptext14:
  3479                           	opt stack 0
  3480  001A24                     _CRC8:
  3481                           	opt stack 20
  3482                           
  3483                           ;CarCom.c: 22: unsigned char crc = 0x00;
  3484                           
  3485                           ;incstack = 0
  3486  001A24  0E00               	movlw	0
  3487  001A26  6E23               	movwf	CRC8@crc,c
  3488                           
  3489                           ;CarCom.c: 23: while (len--) {
  3490  001A28  D01C               	goto	l3735
  3491  001A2A                     l3719:
  3492                           
  3493                           ;CarCom.c: 24: unsigned char extract = *data++;
  3494  001A2A  C01D  FFD9         	movff	CRC8@data,fsr2l
  3495  001A2E  C01E  FFDA         	movff	CRC8@data+1,fsr2h
  3496  001A32  50DF               	movf	indf2,w,c
  3497  001A34  6E21               	movwf	CRC8@extract,c
  3498  001A36  4A1D               	infsnz	CRC8@data,f,c
  3499  001A38  2A1E               	incf	CRC8@data+1,f,c
  3500                           
  3501                           ;CarCom.c: 25: unsigned char tempI;
  3502                           ;CarCom.c: 26: for (tempI = 8; tempI; tempI--) {
  3503  001A3A  0E08               	movlw	8
  3504  001A3C  6E22               	movwf	CRC8@tempI,c
  3505  001A3E  D00E               	goto	l3733
  3506  001A40                     l3725:
  3507                           
  3508                           ;CarCom.c: 27: unsigned char sum = (crc ^ extract) & 0x01;
  3509  001A40  5023               	movf	CRC8@crc,w,c
  3510  001A42  1821               	xorwf	CRC8@extract,w,c
  3511  001A44  0B01               	andlw	1
  3512  001A46  6E20               	movwf	CRC8@sum,c
  3513                           
  3514                           ;CarCom.c: 28: crc >>= 1;
  3515  001A48  90D8               	bcf	status,0,c
  3516  001A4A  3223               	rrcf	CRC8@crc,f,c
  3517                           
  3518                           ;CarCom.c: 29: if (sum) {
  3519  001A4C  5020               	movf	CRC8@sum,w,c
  3520  001A4E  B4D8               	btfsc	status,2,c
  3521  001A50  D002               	goto	l757
  3522                           
  3523                           ;CarCom.c: 30: crc ^= 0x8C;
  3524  001A52  0E8C               	movlw	140
  3525  001A54  1A23               	xorwf	CRC8@crc,f,c
  3526  001A56                     l757:
  3527                           
  3528                           ;CarCom.c: 31: }
  3529                           ;CarCom.c: 32: extract >>= 1;
  3530  001A56  90D8               	bcf	status,0,c
  3531  001A58  3221               	rrcf	CRC8@extract,f,c
  3532  001A5A  0622               	decf	CRC8@tempI,f,c
  3533  001A5C                     l3733:
  3534  001A5C  5022               	movf	CRC8@tempI,w,c
  3535  001A5E  A4D8               	btfss	status,2,c
  3536  001A60  D7EF               	goto	l3725
  3537  001A62                     l3735:
  3538  001A62  061F               	decf	CRC8@len,f,c
  3539  001A64  281F               	incf	CRC8@len,w,c
  3540  001A66  A4D8               	btfss	status,2,c
  3541  001A68  D7E0               	goto	l3719
  3542                           
  3543                           ;CarCom.c: 33: }
  3544                           ;CarCom.c: 34: }
  3545                           ;CarCom.c: 35: return crc;
  3546  001A6A  5023               	movf	CRC8@crc,w,c
  3547  001A6C  0012               	return	
  3548  001A6E                     __end_of_CRC8:
  3549                           	opt stack 0
  3550                           tblptru	equ	0xFF8
  3551                           tblptrh	equ	0xFF7
  3552                           tblptrl	equ	0xFF6
  3553                           tablat	equ	0xFF5
  3554                           intcon	equ	0xFF2
  3555                           postinc0	equ	0xFEE
  3556                           wreg	equ	0xFE8
  3557                           indf1	equ	0xFE7
  3558                           postdec1	equ	0xFE5
  3559                           fsr1h	equ	0xFE2
  3560                           fsr1l	equ	0xFE1
  3561                           indf2	equ	0xFDF
  3562                           postinc2	equ	0xFDE
  3563                           postdec2	equ	0xFDD
  3564                           plusw2	equ	0xFDB
  3565                           fsr2h	equ	0xFDA
  3566                           fsr2l	equ	0xFD9
  3567                           status	equ	0xFD8
  3568                           
  3569 ;; *************** function _GetDataDict *****************
  3570 ;; Defined at:
  3571 ;;		line 7 in file "CarDataDictionary.c"
  3572 ;; Parameters:    Size  Location     Type
  3573 ;;  DataTable       1    wreg     unsigned char 
  3574 ;;  DataTableInd    1   28[COMRAM] unsigned char 
  3575 ;;  DataArray       2   29[COMRAM] PTR unsigned char 
  3576 ;;		 -> ComController@DataToSend(4), 
  3577 ;;  numbofbytes     1   31[COMRAM] unsigned char 
  3578 ;; Auto vars:     Size  Location     Type
  3579 ;;  DataTable       1   33[COMRAM] unsigned char 
  3580 ;;  ReturnCounte    1   35[COMRAM] unsigned char 
  3581 ;;  DataCount       1   34[COMRAM] unsigned char 
  3582 ;;  Error           1   32[COMRAM] unsigned char 
  3583 ;; Return value:  Size  Location     Type
  3584 ;;                  1    wreg      unsigned char 
  3585 ;; Registers used:
  3586 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3587 ;; Tracked objects:
  3588 ;;		On entry : 0/0
  3589 ;;		On exit  : 0/0
  3590 ;;		Unchanged: 0/0
  3591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3592 ;;      Params:         4       0       0       0       0       0       0
  3593 ;;      Locals:         4       0       0       0       0       0       0
  3594 ;;      Temps:          0       0       0       0       0       0       0
  3595 ;;      Totals:         8       0       0       0       0       0       0
  3596 ;;Total ram usage:        8 bytes
  3597 ;; Hardware stack levels used:    1
  3598 ;; Hardware stack levels required when called:    6
  3599 ;; This function calls:
  3600 ;;		Nothing
  3601 ;; This function is called by:
  3602 ;;		_ComController
  3603 ;; This function uses a non-reentrant model
  3604 ;;
  3605                           
  3606                           	psect	text15
  3607  0014B6                     __ptext15:
  3608                           	opt stack 0
  3609  0014B6                     _GetDataDict:
  3610                           	opt stack 21
  3611                           
  3612                           ;incstack = 0
  3613                           ;GetDataDict@DataTable stored from wreg
  3614  0014B6  6E22               	movwf	GetDataDict@DataTable,c
  3615                           
  3616                           ;CarDataDictionary.c: 8: unsigned char Error = 0;
  3617  0014B8  0E00               	movlw	0
  3618  0014BA  6E21               	movwf	GetDataDict@Error,c
  3619                           
  3620                           ;CarDataDictionary.c: 9: unsigned char DataCount = 0;
  3621  0014BC  0E00               	movlw	0
  3622  0014BE  6E23               	movwf	GetDataDict@DataCount,c
  3623                           
  3624                           ;CarDataDictionary.c: 10: unsigned char ReturnCounter = 0;
  3625  0014C0  0E00               	movlw	0
  3626  0014C2  6E24               	movwf	GetDataDict@ReturnCounter,c
  3627                           
  3628                           ;CarDataDictionary.c: 11: switch(DataTable){
  3629  0014C4  D03C               	goto	l3911
  3630  0014C6                     l3891:
  3631                           
  3632                           ;CarDataDictionary.c: 13: DataCount = DataTableIndex + numbofbytes;
  3633  0014C6  501D               	movf	GetDataDict@DataTableIndex,w,c
  3634  0014C8  2420               	addwf	GetDataDict@numbofbytes,w,c
  3635  0014CA  6E23               	movwf	GetDataDict@DataCount,c
  3636  0014CC  D014               	goto	l3899
  3637  0014CE                     l3893:
  3638                           
  3639                           ;CarDataDictionary.c: 15: DataArray[ReturnCounter] = DataTableArrayOne[DataTableIndex];
  3640  0014CE  501D               	movf	GetDataDict@DataTableIndex,w,c
  3641  0014D0  0D01               	mullw	1
  3642  0014D2  0EEE               	movlw	low _DataTableArrayOne
  3643  0014D4  24F3               	addwf	prodl,w,c
  3644  0014D6  6ED9               	movwf	fsr2l,c
  3645  0014D8  0E00               	movlw	high _DataTableArrayOne
  3646  0014DA  20F4               	addwfc	prodh,w,c
  3647  0014DC  6EDA               	movwf	fsr2h,c
  3648  0014DE  5024               	movf	GetDataDict@ReturnCounter,w,c
  3649  0014E0  0D01               	mullw	1
  3650  0014E2  50F3               	movf	prodl,w,c
  3651  0014E4  241E               	addwf	GetDataDict@DataArray,w,c
  3652  0014E6  6EE1               	movwf	fsr1l,c
  3653  0014E8  50F4               	movf	prodh,w,c
  3654  0014EA  201F               	addwfc	GetDataDict@DataArray+1,w,c
  3655  0014EC  6EE2               	movwf	fsr1h,c
  3656  0014EE  CFDF FFE7          	movff	indf2,indf1
  3657                           
  3658                           ;CarDataDictionary.c: 16: ReturnCounter++;
  3659  0014F2  2A24               	incf	GetDataDict@ReturnCounter,f,c
  3660  0014F4  2A1D               	incf	GetDataDict@DataTableIndex,f,c
  3661  0014F6                     l3899:
  3662  0014F6  5023               	movf	GetDataDict@DataCount,w,c
  3663  0014F8  5C1D               	subwf	GetDataDict@DataTableIndex,w,c
  3664  0014FA  B0D8               	btfsc	status,0,c
  3665  0014FC  0012               	return	
  3666  0014FE  D7E7               	goto	l3893
  3667  001500                     l3901:
  3668                           
  3669                           ;CarDataDictionary.c: 20: DataCount = DataTableIndex + numbofbytes;
  3670  001500  501D               	movf	GetDataDict@DataTableIndex,w,c
  3671  001502  2420               	addwf	GetDataDict@numbofbytes,w,c
  3672  001504  6E23               	movwf	GetDataDict@DataCount,c
  3673  001506  D014               	goto	l3909
  3674  001508                     l3903:
  3675                           
  3676                           ;CarDataDictionary.c: 22: DataArray[ReturnCounter] = DataTableArrayTwo[DataTableIndex];
  3677  001508  501D               	movf	GetDataDict@DataTableIndex,w,c
  3678  00150A  0D01               	mullw	1
  3679  00150C  0E2E               	movlw	low _DataTableArrayTwo
  3680  00150E  24F3               	addwf	prodl,w,c
  3681  001510  6ED9               	movwf	fsr2l,c
  3682  001512  0E00               	movlw	high _DataTableArrayTwo
  3683  001514  20F4               	addwfc	prodh,w,c
  3684  001516  6EDA               	movwf	fsr2h,c
  3685  001518  5024               	movf	GetDataDict@ReturnCounter,w,c
  3686  00151A  0D01               	mullw	1
  3687  00151C  50F3               	movf	prodl,w,c
  3688  00151E  241E               	addwf	GetDataDict@DataArray,w,c
  3689  001520  6EE1               	movwf	fsr1l,c
  3690  001522  50F4               	movf	prodh,w,c
  3691  001524  201F               	addwfc	GetDataDict@DataArray+1,w,c
  3692  001526  6EE2               	movwf	fsr1h,c
  3693  001528  CFDF FFE7          	movff	indf2,indf1
  3694                           
  3695                           ;CarDataDictionary.c: 23: ReturnCounter++;
  3696  00152C  2A24               	incf	GetDataDict@ReturnCounter,f,c
  3697  00152E  2A1D               	incf	GetDataDict@DataTableIndex,f,c
  3698  001530                     l3909:
  3699  001530  5023               	movf	GetDataDict@DataCount,w,c
  3700  001532  5C1D               	subwf	GetDataDict@DataTableIndex,w,c
  3701  001534  B0D8               	btfsc	status,0,c
  3702  001536  0012               	return	
  3703  001538  D7E7               	goto	l3903
  3704  00153A                     l860:
  3705                           
  3706                           ;CarDataDictionary.c: 27: Error = -1;
  3707  00153A  6821               	setf	GetDataDict@Error,c
  3708                           
  3709                           ;CarDataDictionary.c: 28: }
  3710  00153C  0012               	return	
  3711  00153E                     l3911:
  3712  00153E  5022               	movf	GetDataDict@DataTable,w,c
  3713                           
  3714                           ; Switch size 1, requested type "space"
  3715                           ; Number of cases is 2, Range of values is 0 to 1
  3716                           ; switch strategies available:
  3717                           ; Name         Instructions Cycles
  3718                           ; simple_byte            7     4 (average)
  3719                           ;	Chosen strategy is simple_byte
  3720  001540  0A00               	xorlw	0	; case 0
  3721  001542  B4D8               	btfsc	status,2,c
  3722  001544  D7C0               	goto	l3891
  3723  001546  0A01               	xorlw	1	; case 1
  3724  001548  B4D8               	btfsc	status,2,c
  3725  00154A  D7DA               	goto	l3901
  3726  00154C  D7F6               	goto	l860
  3727  00154E                     __end_of_GetDataDict:
  3728                           	opt stack 0
  3729                           tblptru	equ	0xFF8
  3730                           tblptrh	equ	0xFF7
  3731                           tblptrl	equ	0xFF6
  3732                           tablat	equ	0xFF5
  3733                           prodh	equ	0xFF4
  3734                           prodl	equ	0xFF3
  3735                           intcon	equ	0xFF2
  3736                           postinc0	equ	0xFEE
  3737                           wreg	equ	0xFE8
  3738                           indf1	equ	0xFE7
  3739                           postdec1	equ	0xFE5
  3740                           fsr1h	equ	0xFE2
  3741                           fsr1l	equ	0xFE1
  3742                           indf2	equ	0xFDF
  3743                           postinc2	equ	0xFDE
  3744                           postdec2	equ	0xFDD
  3745                           plusw2	equ	0xFDB
  3746                           fsr2h	equ	0xFDA
  3747                           fsr2l	equ	0xFD9
  3748                           status	equ	0xFD8
  3749                           
  3750 ;; *************** function _SYSTEM_Initialize *****************
  3751 ;; Defined at:
  3752 ;;		line 113 in file "mcc_generated_files/mcc.c"
  3753 ;; Parameters:    Size  Location     Type
  3754 ;;		None
  3755 ;; Auto vars:     Size  Location     Type
  3756 ;;		None
  3757 ;; Return value:  Size  Location     Type
  3758 ;;                  1    wreg      void 
  3759 ;; Registers used:
  3760 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3761 ;; Tracked objects:
  3762 ;;		On entry : 0/0
  3763 ;;		On exit  : 0/0
  3764 ;;		Unchanged: 0/0
  3765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3766 ;;      Params:         0       0       0       0       0       0       0
  3767 ;;      Locals:         0       0       0       0       0       0       0
  3768 ;;      Temps:          0       0       0       0       0       0       0
  3769 ;;      Totals:         0       0       0       0       0       0       0
  3770 ;;Total ram usage:        0 bytes
  3771 ;; Hardware stack levels used:    1
  3772 ;; Hardware stack levels required when called:    9
  3773 ;; This function calls:
  3774 ;;		_ADC_Initialize
  3775 ;;		_EUSART1_Initialize
  3776 ;;		_INTERRUPT_Initialize
  3777 ;;		_OSCILLATOR_Initialize
  3778 ;;		_PIN_MANAGER_Initialize
  3779 ;;		_PWM4_Initialize
  3780 ;;		_TMR1_Initialize
  3781 ;;		_TMR2_Initialize
  3782 ;; This function is called by:
  3783 ;;		_main
  3784 ;; This function uses a non-reentrant model
  3785 ;;
  3786                           
  3787                           	psect	text16
  3788  001D40                     __ptext16:
  3789                           	opt stack 0
  3790  001D40                     _SYSTEM_Initialize:
  3791                           	opt stack 21
  3792                           
  3793                           ;mcc.c: 114: OSCILLATOR_Initialize();
  3794                           
  3795                           ;incstack = 0
  3796  001D40  EC4B  F00F         	call	_OSCILLATOR_Initialize	;wreg free
  3797                           
  3798                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  3799  001D44  ECF6  F00B         	call	_PIN_MANAGER_Initialize	;wreg free
  3800                           
  3801                           ;mcc.c: 116: INTERRUPT_Initialize();
  3802  001D48  EC52  F00F         	call	_INTERRUPT_Initialize	;wreg free
  3803                           
  3804                           ;mcc.c: 117: EUSART1_Initialize();
  3805  001D4C  EC81  F00D         	call	_EUSART1_Initialize	;wreg free
  3806                           
  3807                           ;mcc.c: 118: PWM4_Initialize();
  3808  001D50  EC27  F00F         	call	_PWM4_Initialize	;wreg free
  3809                           
  3810                           ;mcc.c: 119: TMR1_Initialize();
  3811  001D54  ECB2  F00E         	call	_TMR1_Initialize	;wreg free
  3812                           
  3813                           ;mcc.c: 120: TMR2_Initialize();
  3814  001D58  EC1D  F00F         	call	_TMR2_Initialize	;wreg free
  3815                           
  3816                           ;mcc.c: 121: LATB4 = 1;
  3817  001D5C  888A               	bsf	3978,4,c	;volatile
  3818                           
  3819                           ;mcc.c: 122: ADC_Initialize();
  3820  001D5E  ECF0  F00E         	call	_ADC_Initialize	;wreg free
  3821  001D62  0012               	return		;funcret
  3822  001D64                     __end_of_SYSTEM_Initialize:
  3823                           	opt stack 0
  3824                           tblptru	equ	0xFF8
  3825                           tblptrh	equ	0xFF7
  3826                           tblptrl	equ	0xFF6
  3827                           tablat	equ	0xFF5
  3828                           prodh	equ	0xFF4
  3829                           prodl	equ	0xFF3
  3830                           intcon	equ	0xFF2
  3831                           postinc0	equ	0xFEE
  3832                           wreg	equ	0xFE8
  3833                           indf1	equ	0xFE7
  3834                           postdec1	equ	0xFE5
  3835                           fsr1h	equ	0xFE2
  3836                           fsr1l	equ	0xFE1
  3837                           indf2	equ	0xFDF
  3838                           postinc2	equ	0xFDE
  3839                           postdec2	equ	0xFDD
  3840                           plusw2	equ	0xFDB
  3841                           fsr2h	equ	0xFDA
  3842                           fsr2l	equ	0xFD9
  3843                           status	equ	0xFD8
  3844                           
  3845 ;; *************** function _TMR2_Initialize *****************
  3846 ;; Defined at:
  3847 ;;		line 9 in file "mcc_generated_files/tmr2.c"
  3848 ;; Parameters:    Size  Location     Type
  3849 ;;		None
  3850 ;; Auto vars:     Size  Location     Type
  3851 ;;		None
  3852 ;; Return value:  Size  Location     Type
  3853 ;;                  1    wreg      void 
  3854 ;; Registers used:
  3855 ;;		wreg, status,2, cstack
  3856 ;; Tracked objects:
  3857 ;;		On entry : 0/0
  3858 ;;		On exit  : 0/0
  3859 ;;		Unchanged: 0/0
  3860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3861 ;;      Params:         0       0       0       0       0       0       0
  3862 ;;      Locals:         0       0       0       0       0       0       0
  3863 ;;      Temps:          0       0       0       0       0       0       0
  3864 ;;      Totals:         0       0       0       0       0       0       0
  3865 ;;Total ram usage:        0 bytes
  3866 ;; Hardware stack levels used:    1
  3867 ;; Hardware stack levels required when called:    7
  3868 ;; This function calls:
  3869 ;;		_TMR2_StartTimer
  3870 ;; This function is called by:
  3871 ;;		_SYSTEM_Initialize
  3872 ;; This function uses a non-reentrant model
  3873 ;;
  3874                           
  3875                           	psect	text17
  3876  001E3A                     __ptext17:
  3877                           	opt stack 0
  3878  001E3A                     _TMR2_Initialize:
  3879                           	opt stack 22
  3880                           
  3881                           ;tmr2.c: 14: T2CON = 0x1A;
  3882                           
  3883                           ;incstack = 0
  3884  001E3A  0E1A               	movlw	26
  3885  001E3C  6EBA               	movwf	4026,c	;volatile
  3886                           
  3887                           ;tmr2.c: 17: PR2 = 0x7C;
  3888  001E3E  0E7C               	movlw	124
  3889  001E40  6EBB               	movwf	4027,c	;volatile
  3890                           
  3891                           ;tmr2.c: 20: TMR2 = 0x00;
  3892  001E42  0E00               	movlw	0
  3893  001E44  6EBC               	movwf	4028,c	;volatile
  3894                           
  3895                           ;tmr2.c: 23: PIR1bits.TMR2IF = 0;
  3896  001E46  929E               	bcf	3998,1,c	;volatile
  3897                           
  3898                           ;tmr2.c: 26: TMR2_StartTimer();
  3899  001E48  EC64  F00F         	call	_TMR2_StartTimer	;wreg free
  3900  001E4C  0012               	return		;funcret
  3901  001E4E                     __end_of_TMR2_Initialize:
  3902                           	opt stack 0
  3903                           tblptru	equ	0xFF8
  3904                           tblptrh	equ	0xFF7
  3905                           tblptrl	equ	0xFF6
  3906                           tablat	equ	0xFF5
  3907                           prodh	equ	0xFF4
  3908                           prodl	equ	0xFF3
  3909                           intcon	equ	0xFF2
  3910                           postinc0	equ	0xFEE
  3911                           wreg	equ	0xFE8
  3912                           indf1	equ	0xFE7
  3913                           postdec1	equ	0xFE5
  3914                           fsr1h	equ	0xFE2
  3915                           fsr1l	equ	0xFE1
  3916                           indf2	equ	0xFDF
  3917                           postinc2	equ	0xFDE
  3918                           postdec2	equ	0xFDD
  3919                           plusw2	equ	0xFDB
  3920                           fsr2h	equ	0xFDA
  3921                           fsr2l	equ	0xFD9
  3922                           status	equ	0xFD8
  3923                           
  3924 ;; *************** function _TMR2_StartTimer *****************
  3925 ;; Defined at:
  3926 ;;		line 29 in file "mcc_generated_files/tmr2.c"
  3927 ;; Parameters:    Size  Location     Type
  3928 ;;		None
  3929 ;; Auto vars:     Size  Location     Type
  3930 ;;		None
  3931 ;; Return value:  Size  Location     Type
  3932 ;;                  1    wreg      void 
  3933 ;; Registers used:
  3934 ;;		None
  3935 ;; Tracked objects:
  3936 ;;		On entry : 0/0
  3937 ;;		On exit  : 0/0
  3938 ;;		Unchanged: 0/0
  3939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3940 ;;      Params:         0       0       0       0       0       0       0
  3941 ;;      Locals:         0       0       0       0       0       0       0
  3942 ;;      Temps:          0       0       0       0       0       0       0
  3943 ;;      Totals:         0       0       0       0       0       0       0
  3944 ;;Total ram usage:        0 bytes
  3945 ;; Hardware stack levels used:    1
  3946 ;; Hardware stack levels required when called:    6
  3947 ;; This function calls:
  3948 ;;		Nothing
  3949 ;; This function is called by:
  3950 ;;		_TMR2_Initialize
  3951 ;; This function uses a non-reentrant model
  3952 ;;
  3953                           
  3954                           	psect	text18
  3955  001EC8                     __ptext18:
  3956                           	opt stack 0
  3957  001EC8                     _TMR2_StartTimer:
  3958                           	opt stack 22
  3959                           
  3960                           ;tmr2.c: 32: T2CONbits.TMR2ON = 1;
  3961                           
  3962                           ;incstack = 0
  3963  001EC8  84BA               	bsf	4026,2,c	;volatile
  3964  001ECA  0012               	return		;funcret
  3965  001ECC                     __end_of_TMR2_StartTimer:
  3966                           	opt stack 0
  3967                           tblptru	equ	0xFF8
  3968                           tblptrh	equ	0xFF7
  3969                           tblptrl	equ	0xFF6
  3970                           tablat	equ	0xFF5
  3971                           prodh	equ	0xFF4
  3972                           prodl	equ	0xFF3
  3973                           intcon	equ	0xFF2
  3974                           postinc0	equ	0xFEE
  3975                           wreg	equ	0xFE8
  3976                           indf1	equ	0xFE7
  3977                           postdec1	equ	0xFE5
  3978                           fsr1h	equ	0xFE2
  3979                           fsr1l	equ	0xFE1
  3980                           indf2	equ	0xFDF
  3981                           postinc2	equ	0xFDE
  3982                           postdec2	equ	0xFDD
  3983                           plusw2	equ	0xFDB
  3984                           fsr2h	equ	0xFDA
  3985                           fsr2l	equ	0xFD9
  3986                           status	equ	0xFD8
  3987                           
  3988 ;; *************** function _TMR1_Initialize *****************
  3989 ;; Defined at:
  3990 ;;		line 66 in file "mcc_generated_files/tmr1.c"
  3991 ;; Parameters:    Size  Location     Type
  3992 ;;		None
  3993 ;; Auto vars:     Size  Location     Type
  3994 ;;		None
  3995 ;; Return value:  Size  Location     Type
  3996 ;;                  1    wreg      void 
  3997 ;; Registers used:
  3998 ;;		wreg, status,2, cstack
  3999 ;; Tracked objects:
  4000 ;;		On entry : 0/0
  4001 ;;		On exit  : 0/0
  4002 ;;		Unchanged: 0/0
  4003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4004 ;;      Params:         0       0       0       0       0       0       0
  4005 ;;      Locals:         0       0       0       0       0       0       0
  4006 ;;      Temps:          0       0       0       0       0       0       0
  4007 ;;      Totals:         0       0       0       0       0       0       0
  4008 ;;Total ram usage:        0 bytes
  4009 ;; Hardware stack levels used:    1
  4010 ;; Hardware stack levels required when called:    7
  4011 ;; This function calls:
  4012 ;;		_TMR1_StartTimer
  4013 ;; This function is called by:
  4014 ;;		_SYSTEM_Initialize
  4015 ;; This function uses a non-reentrant model
  4016 ;;
  4017                           
  4018                           	psect	text19
  4019  001D64                     __ptext19:
  4020                           	opt stack 0
  4021  001D64                     _TMR1_Initialize:
  4022                           	opt stack 22
  4023                           
  4024                           ;tmr1.c: 71: T1CON = 0x00;
  4025                           
  4026                           ;incstack = 0
  4027  001D64  0E00               	movlw	0
  4028  001D66  6ECD               	movwf	4045,c	;volatile
  4029                           
  4030                           ;tmr1.c: 75: T1GCON = 0x00;
  4031  001D68  0E00               	movlw	0
  4032  001D6A  6ECC               	movwf	4044,c	;volatile
  4033                           
  4034                           ;tmr1.c: 78: TMR1H = 0x00;
  4035  001D6C  0E00               	movlw	0
  4036  001D6E  6ECF               	movwf	4047,c	;volatile
  4037                           
  4038                           ;tmr1.c: 81: TMR1L = 0x00;
  4039  001D70  0E00               	movlw	0
  4040  001D72  6ECE               	movwf	4046,c	;volatile
  4041                           
  4042                           ;tmr1.c: 84: timer1ReloadVal=0;
  4043  001D74  0E00               	movlw	0
  4044  001D76  6E3A               	movwf	_timer1ReloadVal+1,c	;volatile
  4045  001D78  0E00               	movlw	0
  4046  001D7A  6E39               	movwf	_timer1ReloadVal,c	;volatile
  4047                           
  4048                           ;tmr1.c: 87: PIR1bits.TMR1IF = 0;
  4049  001D7C  909E               	bcf	3998,0,c	;volatile
  4050                           
  4051                           ;tmr1.c: 90: PIE1bits.TMR1IE = 1;
  4052  001D7E  809D               	bsf	3997,0,c	;volatile
  4053                           
  4054                           ;tmr1.c: 93: TMR1_StartTimer();
  4055  001D80  EC66  F00F         	call	_TMR1_StartTimer	;wreg free
  4056  001D84  0012               	return		;funcret
  4057  001D86                     __end_of_TMR1_Initialize:
  4058                           	opt stack 0
  4059                           tblptru	equ	0xFF8
  4060                           tblptrh	equ	0xFF7
  4061                           tblptrl	equ	0xFF6
  4062                           tablat	equ	0xFF5
  4063                           prodh	equ	0xFF4
  4064                           prodl	equ	0xFF3
  4065                           intcon	equ	0xFF2
  4066                           postinc0	equ	0xFEE
  4067                           wreg	equ	0xFE8
  4068                           indf1	equ	0xFE7
  4069                           postdec1	equ	0xFE5
  4070                           fsr1h	equ	0xFE2
  4071                           fsr1l	equ	0xFE1
  4072                           indf2	equ	0xFDF
  4073                           postinc2	equ	0xFDE
  4074                           postdec2	equ	0xFDD
  4075                           plusw2	equ	0xFDB
  4076                           fsr2h	equ	0xFDA
  4077                           fsr2l	equ	0xFD9
  4078                           status	equ	0xFD8
  4079                           
  4080 ;; *************** function _TMR1_StartTimer *****************
  4081 ;; Defined at:
  4082 ;;		line 96 in file "mcc_generated_files/tmr1.c"
  4083 ;; Parameters:    Size  Location     Type
  4084 ;;		None
  4085 ;; Auto vars:     Size  Location     Type
  4086 ;;		None
  4087 ;; Return value:  Size  Location     Type
  4088 ;;                  1    wreg      void 
  4089 ;; Registers used:
  4090 ;;		None
  4091 ;; Tracked objects:
  4092 ;;		On entry : 0/0
  4093 ;;		On exit  : 0/0
  4094 ;;		Unchanged: 0/0
  4095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4096 ;;      Params:         0       0       0       0       0       0       0
  4097 ;;      Locals:         0       0       0       0       0       0       0
  4098 ;;      Temps:          0       0       0       0       0       0       0
  4099 ;;      Totals:         0       0       0       0       0       0       0
  4100 ;;Total ram usage:        0 bytes
  4101 ;; Hardware stack levels used:    1
  4102 ;; Hardware stack levels required when called:    6
  4103 ;; This function calls:
  4104 ;;		Nothing
  4105 ;; This function is called by:
  4106 ;;		_TMR1_Initialize
  4107 ;; This function uses a non-reentrant model
  4108 ;;
  4109                           
  4110                           	psect	text20
  4111  001ECC                     __ptext20:
  4112                           	opt stack 0
  4113  001ECC                     _TMR1_StartTimer:
  4114                           	opt stack 22
  4115                           
  4116                           ;tmr1.c: 99: T1CONbits.TMR1ON = 1;
  4117                           
  4118                           ;incstack = 0
  4119  001ECC  80CD               	bsf	4045,0,c	;volatile
  4120  001ECE  0012               	return		;funcret
  4121  001ED0                     __end_of_TMR1_StartTimer:
  4122                           	opt stack 0
  4123                           tblptru	equ	0xFF8
  4124                           tblptrh	equ	0xFF7
  4125                           tblptrl	equ	0xFF6
  4126                           tablat	equ	0xFF5
  4127                           prodh	equ	0xFF4
  4128                           prodl	equ	0xFF3
  4129                           intcon	equ	0xFF2
  4130                           postinc0	equ	0xFEE
  4131                           wreg	equ	0xFE8
  4132                           indf1	equ	0xFE7
  4133                           postdec1	equ	0xFE5
  4134                           fsr1h	equ	0xFE2
  4135                           fsr1l	equ	0xFE1
  4136                           indf2	equ	0xFDF
  4137                           postinc2	equ	0xFDE
  4138                           postdec2	equ	0xFDD
  4139                           plusw2	equ	0xFDB
  4140                           fsr2h	equ	0xFDA
  4141                           fsr2l	equ	0xFD9
  4142                           status	equ	0xFD8
  4143                           
  4144 ;; *************** function _PWM4_Initialize *****************
  4145 ;; Defined at:
  4146 ;;		line 64 in file "mcc_generated_files/pwm4.c"
  4147 ;; Parameters:    Size  Location     Type
  4148 ;;		None
  4149 ;; Auto vars:     Size  Location     Type
  4150 ;;		None
  4151 ;; Return value:  Size  Location     Type
  4152 ;;                  1    wreg      void 
  4153 ;; Registers used:
  4154 ;;		wreg, status,2
  4155 ;; Tracked objects:
  4156 ;;		On entry : 0/0
  4157 ;;		On exit  : 0/0
  4158 ;;		Unchanged: 0/0
  4159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4160 ;;      Params:         0       0       0       0       0       0       0
  4161 ;;      Locals:         0       0       0       0       0       0       0
  4162 ;;      Temps:          0       0       0       0       0       0       0
  4163 ;;      Totals:         0       0       0       0       0       0       0
  4164 ;;Total ram usage:        0 bytes
  4165 ;; Hardware stack levels used:    1
  4166 ;; Hardware stack levels required when called:    6
  4167 ;; This function calls:
  4168 ;;		Nothing
  4169 ;; This function is called by:
  4170 ;;		_SYSTEM_Initialize
  4171 ;; This function uses a non-reentrant model
  4172 ;;
  4173                           
  4174                           	psect	text21
  4175  001E4E                     __ptext21:
  4176                           	opt stack 0
  4177  001E4E                     _PWM4_Initialize:
  4178                           	opt stack 23
  4179                           
  4180                           ;pwm4.c: 69: CCP2CON = 0x1C;
  4181                           
  4182                           ;incstack = 0
  4183  001E4E  0E1C               	movlw	28
  4184  001E50  6E66               	movwf	3942,c	;volatile
  4185                           
  4186                           ;pwm4.c: 72: CCPR2L = 0x3E;
  4187  001E52  0E3E               	movlw	62
  4188  001E54  6E67               	movwf	3943,c	;volatile
  4189                           
  4190                           ;pwm4.c: 75: CCPR2H = 0x00;
  4191  001E56  0E00               	movlw	0
  4192  001E58  6E68               	movwf	3944,c	;volatile
  4193                           
  4194                           ;pwm4.c: 78: CCPTMRS1bits.C4TSEL = 0x0;
  4195  001E5A  0EFC               	movlw	-4
  4196  001E5C  010F               	movlb	15	; () banked
  4197  001E5E  1748               	andwf	72,f,b	;volatile
  4198                           
  4199                           ; BSR set to: 15
  4200  001E60  0012               	return		;funcret
  4201  001E62                     __end_of_PWM4_Initialize:
  4202                           	opt stack 0
  4203                           tblptru	equ	0xFF8
  4204                           tblptrh	equ	0xFF7
  4205                           tblptrl	equ	0xFF6
  4206                           tablat	equ	0xFF5
  4207                           prodh	equ	0xFF4
  4208                           prodl	equ	0xFF3
  4209                           intcon	equ	0xFF2
  4210                           postinc0	equ	0xFEE
  4211                           wreg	equ	0xFE8
  4212                           indf1	equ	0xFE7
  4213                           postdec1	equ	0xFE5
  4214                           fsr1h	equ	0xFE2
  4215                           fsr1l	equ	0xFE1
  4216                           indf2	equ	0xFDF
  4217                           postinc2	equ	0xFDE
  4218                           postdec2	equ	0xFDD
  4219                           plusw2	equ	0xFDB
  4220                           fsr2h	equ	0xFDA
  4221                           fsr2l	equ	0xFD9
  4222                           status	equ	0xFD8
  4223                           
  4224 ;; *************** function _PIN_MANAGER_Initialize *****************
  4225 ;; Defined at:
  4226 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  4227 ;; Parameters:    Size  Location     Type
  4228 ;;		None
  4229 ;; Auto vars:     Size  Location     Type
  4230 ;;		None
  4231 ;; Return value:  Size  Location     Type
  4232 ;;                  1    wreg      void 
  4233 ;; Registers used:
  4234 ;;		wreg, status,2
  4235 ;; Tracked objects:
  4236 ;;		On entry : 0/0
  4237 ;;		On exit  : 0/0
  4238 ;;		Unchanged: 0/0
  4239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4240 ;;      Params:         0       0       0       0       0       0       0
  4241 ;;      Locals:         0       0       0       0       0       0       0
  4242 ;;      Temps:          0       0       0       0       0       0       0
  4243 ;;      Totals:         0       0       0       0       0       0       0
  4244 ;;Total ram usage:        0 bytes
  4245 ;; Hardware stack levels used:    1
  4246 ;; Hardware stack levels required when called:    6
  4247 ;; This function calls:
  4248 ;;		Nothing
  4249 ;; This function is called by:
  4250 ;;		_SYSTEM_Initialize
  4251 ;; This function uses a non-reentrant model
  4252 ;;
  4253                           
  4254                           	psect	text22
  4255  0017EC                     __ptext22:
  4256                           	opt stack 0
  4257  0017EC                     _PIN_MANAGER_Initialize:
  4258                           	opt stack 23
  4259                           
  4260                           ;pin_manager.c: 52: LATA = 0x00;
  4261                           
  4262                           ; BSR set to: 15
  4263                           ;incstack = 0
  4264  0017EC  0E00               	movlw	0
  4265  0017EE  6E89               	movwf	3977,c	;volatile
  4266                           
  4267                           ;pin_manager.c: 53: TRISA = 0xF7;
  4268  0017F0  0EF7               	movlw	247
  4269  0017F2  6E92               	movwf	3986,c	;volatile
  4270                           
  4271                           ;pin_manager.c: 54: ANSELA = 0x27;
  4272  0017F4  0E27               	movlw	39
  4273  0017F6  010F               	movlb	15	; () banked
  4274  0017F8  6F38               	movwf	56,b	;volatile
  4275                           
  4276                           ;pin_manager.c: 56: LATB = 0x01;
  4277  0017FA  0E01               	movlw	1
  4278  0017FC  6E8A               	movwf	3978,c	;volatile
  4279                           
  4280                           ;pin_manager.c: 57: TRISB = 0xFE;
  4281  0017FE  0EFE               	movlw	254
  4282  001800  6E93               	movwf	3987,c	;volatile
  4283                           
  4284                           ;pin_manager.c: 58: ANSELB = 0x3E;
  4285  001802  0E3E               	movlw	62
  4286  001804  010F               	movlb	15	; () banked
  4287  001806  6F39               	movwf	57,b	;volatile
  4288                           
  4289                           ;pin_manager.c: 59: WPUB = 0x00;
  4290  001808  0E00               	movlw	0
  4291  00180A  6E61               	movwf	3937,c	;volatile
  4292                           
  4293                           ;pin_manager.c: 61: LATC = 0x00;
  4294  00180C  0E00               	movlw	0
  4295  00180E  6E8B               	movwf	3979,c	;volatile
  4296                           
  4297                           ;pin_manager.c: 62: TRISC = 0xDF;
  4298  001810  0EDF               	movlw	223
  4299  001812  6E94               	movwf	3988,c	;volatile
  4300                           
  4301                           ;pin_manager.c: 63: ANSELC = 0x1C;
  4302  001814  0E1C               	movlw	28
  4303  001816  010F               	movlb	15	; () banked
  4304  001818  6F3A               	movwf	58,b	;volatile
  4305                           
  4306                           ;pin_manager.c: 65: LATD = 0x00;
  4307  00181A  0E00               	movlw	0
  4308  00181C  6E8C               	movwf	3980,c	;volatile
  4309                           
  4310                           ;pin_manager.c: 66: TRISD = 0x0F;
  4311  00181E  0E0F               	movlw	15
  4312  001820  6E95               	movwf	3989,c	;volatile
  4313                           
  4314                           ;pin_manager.c: 67: ANSELD = 0x0F;
  4315  001822  0E0F               	movlw	15
  4316  001824  010F               	movlb	15	; () banked
  4317  001826  6F3B               	movwf	59,b	;volatile
  4318                           
  4319                           ;pin_manager.c: 69: LATE = 0x00;
  4320  001828  0E00               	movlw	0
  4321  00182A  6E8D               	movwf	3981,c	;volatile
  4322                           
  4323                           ;pin_manager.c: 70: TRISE = 0x07;
  4324  00182C  0E07               	movlw	7
  4325  00182E  6E96               	movwf	3990,c	;volatile
  4326                           
  4327                           ;pin_manager.c: 71: ANSELE = 0x07;
  4328  001830  0E07               	movlw	7
  4329  001832  010F               	movlb	15	; () banked
  4330  001834  6F3C               	movwf	60,b	;volatile
  4331                           
  4332                           ; BSR set to: 15
  4333                           ;pin_manager.c: 72: TRISCbits.RC6 = 1;
  4334  001836  8C94               	bsf	3988,6,c	;volatile
  4335                           
  4336                           ; BSR set to: 15
  4337                           ;pin_manager.c: 73: TRISCbits.RC7 = 1;
  4338  001838  8E94               	bsf	3988,7,c	;volatile
  4339                           
  4340                           ; BSR set to: 15
  4341                           ;pin_manager.c: 74: TRISCbits.RC5 = 0;
  4342  00183A  9A94               	bcf	3988,5,c	;volatile
  4343                           
  4344                           ; BSR set to: 15
  4345                           ;pin_manager.c: 75: LATCbits.LATC5 = 1;
  4346  00183C  8A8B               	bsf	3979,5,c	;volatile
  4347                           
  4348                           ; BSR set to: 15
  4349                           ;pin_manager.c: 76: LATCbits.LATC6 = 1;
  4350  00183E  8C8B               	bsf	3979,6,c	;volatile
  4351                           
  4352                           ; BSR set to: 15
  4353                           ;pin_manager.c: 77: LATCbits.LATC7 = 1;
  4354  001840  8E8B               	bsf	3979,7,c	;volatile
  4355                           
  4356                           ; BSR set to: 15
  4357                           ;pin_manager.c: 78: ANSELCbits.ANSC5 =0;
  4358  001842  010F               	movlb	15	; () banked
  4359  001844  9B3A               	bcf	58,5,b	;volatile
  4360                           
  4361                           ; BSR set to: 15
  4362                           ;pin_manager.c: 79: ANSELCbits.ANSC6 =0;
  4363  001846  010F               	movlb	15	; () banked
  4364  001848  9D3A               	bcf	58,6,b	;volatile
  4365                           
  4366                           ; BSR set to: 15
  4367                           ;pin_manager.c: 80: ANSELCbits.ANSC7 =0;
  4368  00184A  010F               	movlb	15	; () banked
  4369  00184C  9F3A               	bcf	58,7,b	;volatile
  4370                           
  4371                           ; BSR set to: 15
  4372                           ;pin_manager.c: 82: INTCON2bits.nRBPU = 0x01;
  4373  00184E  8EF1               	bsf	intcon2,7,c	;volatile
  4374                           
  4375                           ; BSR set to: 15
  4376                           
  4377                           ; BSR set to: 15
  4378                           
  4379                           ;pin_manager.c: 84: do { TRISB4 = 0; } while(0);
  4380  001850  9893               	bcf	3987,4,c	;volatile
  4381                           
  4382                           ; BSR set to: 15
  4383                           
  4384                           ; BSR set to: 15
  4385                           
  4386                           ;pin_manager.c: 85: do { TRISB3 = 0; } while(0);
  4387                           
  4388                           ; BSR set to: 15
  4389  001852  9693               	bcf	3987,3,c	;volatile
  4390                           
  4391                           ; BSR set to: 15
  4392                           
  4393                           ; BSR set to: 15
  4394                           
  4395                           ;pin_manager.c: 86: do { TRISB5 = 0; } while(0);
  4396                           
  4397                           ; BSR set to: 15
  4398  001854  9A93               	bcf	3987,5,c	;volatile
  4399                           
  4400                           ; BSR set to: 15
  4401                           ;pin_manager.c: 88: TRISDbits.RD1 = 0;
  4402                           
  4403                           ; BSR set to: 15
  4404  001856  9295               	bcf	3989,1,c	;volatile
  4405                           
  4406                           ; BSR set to: 15
  4407                           
  4408                           ; BSR set to: 15
  4409                           
  4410                           ;pin_manager.c: 90: do { ANSB3 = 0; } while(0);
  4411  001858  010F               	movlb	15	; () banked
  4412  00185A  9739               	bcf	57,3,b	;volatile
  4413                           
  4414                           ; BSR set to: 15
  4415                           
  4416                           ; BSR set to: 15
  4417                           
  4418                           ;pin_manager.c: 91: do { ANSD7 = 0; } while(0);
  4419                           
  4420                           ; BSR set to: 15
  4421  00185C  010F               	movlb	15	; () banked
  4422  00185E  9F3B               	bcf	59,7,b	;volatile
  4423                           
  4424                           ; BSR set to: 15
  4425                           
  4426                           ; BSR set to: 15
  4427                           
  4428                           ;pin_manager.c: 92: do { ANSB4 = 0; } while(0);
  4429                           
  4430                           ; BSR set to: 15
  4431  001860  010F               	movlb	15	; () banked
  4432  001862  9939               	bcf	57,4,b	;volatile
  4433  001864  0012               	return	
  4434  001866                     __end_of_PIN_MANAGER_Initialize:
  4435                           	opt stack 0
  4436                           tblptru	equ	0xFF8
  4437                           tblptrh	equ	0xFF7
  4438                           tblptrl	equ	0xFF6
  4439                           tablat	equ	0xFF5
  4440                           prodh	equ	0xFF4
  4441                           prodl	equ	0xFF3
  4442                           intcon	equ	0xFF2
  4443                           intcon2	equ	0xFF1
  4444                           postinc0	equ	0xFEE
  4445                           wreg	equ	0xFE8
  4446                           indf1	equ	0xFE7
  4447                           postdec1	equ	0xFE5
  4448                           fsr1h	equ	0xFE2
  4449                           fsr1l	equ	0xFE1
  4450                           indf2	equ	0xFDF
  4451                           postinc2	equ	0xFDE
  4452                           postdec2	equ	0xFDD
  4453                           plusw2	equ	0xFDB
  4454                           fsr2h	equ	0xFDA
  4455                           fsr2l	equ	0xFD9
  4456                           status	equ	0xFD8
  4457                           
  4458 ;; *************** function _OSCILLATOR_Initialize *****************
  4459 ;; Defined at:
  4460 ;;		line 125 in file "mcc_generated_files/mcc.c"
  4461 ;; Parameters:    Size  Location     Type
  4462 ;;		None
  4463 ;; Auto vars:     Size  Location     Type
  4464 ;;		None
  4465 ;; Return value:  Size  Location     Type
  4466 ;;                  1    wreg      void 
  4467 ;; Registers used:
  4468 ;;		wreg, status,2
  4469 ;; Tracked objects:
  4470 ;;		On entry : 0/0
  4471 ;;		On exit  : 0/0
  4472 ;;		Unchanged: 0/0
  4473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4474 ;;      Params:         0       0       0       0       0       0       0
  4475 ;;      Locals:         0       0       0       0       0       0       0
  4476 ;;      Temps:          0       0       0       0       0       0       0
  4477 ;;      Totals:         0       0       0       0       0       0       0
  4478 ;;Total ram usage:        0 bytes
  4479 ;; Hardware stack levels used:    1
  4480 ;; Hardware stack levels required when called:    6
  4481 ;; This function calls:
  4482 ;;		Nothing
  4483 ;; This function is called by:
  4484 ;;		_SYSTEM_Initialize
  4485 ;; This function uses a non-reentrant model
  4486 ;;
  4487                           
  4488                           	psect	text23
  4489  001E96                     __ptext23:
  4490                           	opt stack 0
  4491  001E96                     _OSCILLATOR_Initialize:
  4492                           	opt stack 23
  4493                           
  4494                           ;mcc.c: 127: OSCCON = 0x72;
  4495                           
  4496                           ; BSR set to: 15
  4497                           ;incstack = 0
  4498  001E96  0E72               	movlw	114
  4499  001E98  6ED3               	movwf	4051,c	;volatile
  4500                           
  4501                           ;mcc.c: 129: OSCCON2 = 0x04;
  4502  001E9A  0E04               	movlw	4
  4503  001E9C  6ED2               	movwf	4050,c	;volatile
  4504                           
  4505                           ;mcc.c: 131: OSCTUNE = 0x00;
  4506  001E9E  0E00               	movlw	0
  4507  001EA0  6E9B               	movwf	3995,c	;volatile
  4508  001EA2  0012               	return		;funcret
  4509  001EA4                     __end_of_OSCILLATOR_Initialize:
  4510                           	opt stack 0
  4511                           tblptru	equ	0xFF8
  4512                           tblptrh	equ	0xFF7
  4513                           tblptrl	equ	0xFF6
  4514                           tablat	equ	0xFF5
  4515                           prodh	equ	0xFF4
  4516                           prodl	equ	0xFF3
  4517                           intcon	equ	0xFF2
  4518                           intcon2	equ	0xFF1
  4519                           postinc0	equ	0xFEE
  4520                           wreg	equ	0xFE8
  4521                           indf1	equ	0xFE7
  4522                           postdec1	equ	0xFE5
  4523                           fsr1h	equ	0xFE2
  4524                           fsr1l	equ	0xFE1
  4525                           indf2	equ	0xFDF
  4526                           postinc2	equ	0xFDE
  4527                           postdec2	equ	0xFDD
  4528                           plusw2	equ	0xFDB
  4529                           fsr2h	equ	0xFDA
  4530                           fsr2l	equ	0xFD9
  4531                           status	equ	0xFD8
  4532                           
  4533 ;; *************** function _INTERRUPT_Initialize *****************
  4534 ;; Defined at:
  4535 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  4536 ;; Parameters:    Size  Location     Type
  4537 ;;		None
  4538 ;; Auto vars:     Size  Location     Type
  4539 ;;		None
  4540 ;; Return value:  Size  Location     Type
  4541 ;;                  1    wreg      void 
  4542 ;; Registers used:
  4543 ;;		None
  4544 ;; Tracked objects:
  4545 ;;		On entry : 0/0
  4546 ;;		On exit  : 0/0
  4547 ;;		Unchanged: 0/0
  4548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4549 ;;      Params:         0       0       0       0       0       0       0
  4550 ;;      Locals:         0       0       0       0       0       0       0
  4551 ;;      Temps:          0       0       0       0       0       0       0
  4552 ;;      Totals:         0       0       0       0       0       0       0
  4553 ;;Total ram usage:        0 bytes
  4554 ;; Hardware stack levels used:    1
  4555 ;; Hardware stack levels required when called:    6
  4556 ;; This function calls:
  4557 ;;		Nothing
  4558 ;; This function is called by:
  4559 ;;		_SYSTEM_Initialize
  4560 ;; This function uses a non-reentrant model
  4561 ;;
  4562                           
  4563                           	psect	text24
  4564  001EA4                     __ptext24:
  4565                           	opt stack 0
  4566  001EA4                     _INTERRUPT_Initialize:
  4567                           	opt stack 23
  4568                           
  4569                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  4570                           
  4571                           ;incstack = 0
  4572  001EA4  9ED0               	bcf	4048,7,c	;volatile
  4573                           
  4574                           ;interrupt_manager.c: 60: IPR1bits.RC1IP = 0;
  4575  001EA6  9A9F               	bcf	3999,5,c	;volatile
  4576                           
  4577                           ;interrupt_manager.c: 62: IPR1bits.TX1IP = 0;
  4578  001EA8  989F               	bcf	3999,4,c	;volatile
  4579                           
  4580                           ;interrupt_manager.c: 64: IPR1bits.ADIP = 0;
  4581  001EAA  9C9F               	bcf	3999,6,c	;volatile
  4582  001EAC  0012               	return		;funcret
  4583  001EAE                     __end_of_INTERRUPT_Initialize:
  4584                           	opt stack 0
  4585                           tblptru	equ	0xFF8
  4586                           tblptrh	equ	0xFF7
  4587                           tblptrl	equ	0xFF6
  4588                           tablat	equ	0xFF5
  4589                           prodh	equ	0xFF4
  4590                           prodl	equ	0xFF3
  4591                           intcon	equ	0xFF2
  4592                           intcon2	equ	0xFF1
  4593                           postinc0	equ	0xFEE
  4594                           wreg	equ	0xFE8
  4595                           indf1	equ	0xFE7
  4596                           postdec1	equ	0xFE5
  4597                           fsr1h	equ	0xFE2
  4598                           fsr1l	equ	0xFE1
  4599                           indf2	equ	0xFDF
  4600                           postinc2	equ	0xFDE
  4601                           postdec2	equ	0xFDD
  4602                           plusw2	equ	0xFDB
  4603                           fsr2h	equ	0xFDA
  4604                           fsr2l	equ	0xFD9
  4605                           status	equ	0xFD8
  4606                           
  4607 ;; *************** function _EUSART1_Initialize *****************
  4608 ;; Defined at:
  4609 ;;		line 20 in file "UART.c"
  4610 ;; Parameters:    Size  Location     Type
  4611 ;;		None
  4612 ;; Auto vars:     Size  Location     Type
  4613 ;;		None
  4614 ;; Return value:  Size  Location     Type
  4615 ;;                  1    wreg      void 
  4616 ;; Registers used:
  4617 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4618 ;; Tracked objects:
  4619 ;;		On entry : 0/0
  4620 ;;		On exit  : 0/0
  4621 ;;		Unchanged: 0/0
  4622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4623 ;;      Params:         0       0       0       0       0       0       0
  4624 ;;      Locals:         0       0       0       0       0       0       0
  4625 ;;      Temps:          0       0       0       0       0       0       0
  4626 ;;      Totals:         0       0       0       0       0       0       0
  4627 ;;Total ram usage:        0 bytes
  4628 ;; Hardware stack levels used:    1
  4629 ;; Hardware stack levels required when called:    8
  4630 ;; This function calls:
  4631 ;;		_UART_buff_init
  4632 ;; This function is called by:
  4633 ;;		_SYSTEM_Initialize
  4634 ;; This function uses a non-reentrant model
  4635 ;;
  4636                           
  4637                           	psect	text25
  4638  001B02                     __ptext25:
  4639                           	opt stack 0
  4640  001B02                     _EUSART1_Initialize:
  4641                           	opt stack 21
  4642                           
  4643                           ;UART.c: 22: PIE1bits.RC1IE = 0;
  4644                           
  4645                           ;incstack = 0
  4646  001B02  9A9D               	bcf	3997,5,c	;volatile
  4647                           
  4648                           ;UART.c: 23: PIE1bits.TX1IE = 0;
  4649  001B04  989D               	bcf	3997,4,c	;volatile
  4650                           
  4651                           ;UART.c: 28: BAUD1CON = 0x48;
  4652  001B06  0E48               	movlw	72
  4653  001B08  6EB8               	movwf	4024,c	;volatile
  4654                           
  4655                           ;UART.c: 31: RC1STA = 0x98;
  4656  001B0A  0E98               	movlw	152
  4657  001B0C  6EAB               	movwf	4011,c	;volatile
  4658                           
  4659                           ;UART.c: 34: TX1STA = 0x26;
  4660  001B0E  0E26               	movlw	38
  4661  001B10  6EAC               	movwf	4012,c	;volatile
  4662                           
  4663                           ;UART.c: 37: SPBRG1 = (((16000000/38400)/4)-1);
  4664  001B12  0E67               	movlw	103
  4665  001B14  6EAF               	movwf	4015,c	;volatile
  4666                           
  4667                           ;UART.c: 40: SPBRGH1 = 0x00;
  4668  001B16  0E00               	movlw	0
  4669  001B18  6EB0               	movwf	4016,c	;volatile
  4670                           
  4671                           ;UART.c: 43: TXREG1 = 0x00;
  4672  001B1A  0E00               	movlw	0
  4673  001B1C  6EAD               	movwf	4013,c	;volatile
  4674                           
  4675                           ;UART.c: 46: RCREG1 = 0x00;
  4676  001B1E  0E00               	movlw	0
  4677  001B20  6EAE               	movwf	4014,c	;volatile
  4678                           
  4679                           ;UART.c: 48: UART_buff_init(&input_buffer);
  4680  001B22  0E30               	movlw	low _input_buffer
  4681  001B24  6E25               	movwf	UART_buff_init@_this,c
  4682  001B26  0E01               	movlw	high _input_buffer
  4683  001B28  6E26               	movwf	UART_buff_init@_this+1,c
  4684  001B2A  ECC3  F00E         	call	_UART_buff_init	;wreg free
  4685                           
  4686                           ;UART.c: 49: UART_buff_init(&output_buffer);
  4687  001B2E  0E00               	movlw	low _output_buffer
  4688  001B30  6E25               	movwf	UART_buff_init@_this,c
  4689  001B32  0E02               	movlw	high _output_buffer
  4690  001B34  6E26               	movwf	UART_buff_init@_this+1,c
  4691  001B36  ECC3  F00E         	call	_UART_buff_init	;wreg free
  4692                           
  4693                           ;UART.c: 51: PIE1bits.RC1IE = 1;
  4694  001B3A  8A9D               	bsf	3997,5,c	;volatile
  4695  001B3C  0012               	return		;funcret
  4696  001B3E                     __end_of_EUSART1_Initialize:
  4697                           	opt stack 0
  4698                           tblptru	equ	0xFF8
  4699                           tblptrh	equ	0xFF7
  4700                           tblptrl	equ	0xFF6
  4701                           tablat	equ	0xFF5
  4702                           prodh	equ	0xFF4
  4703                           prodl	equ	0xFF3
  4704                           intcon	equ	0xFF2
  4705                           intcon2	equ	0xFF1
  4706                           postinc0	equ	0xFEE
  4707                           wreg	equ	0xFE8
  4708                           indf1	equ	0xFE7
  4709                           postdec1	equ	0xFE5
  4710                           fsr1h	equ	0xFE2
  4711                           fsr1l	equ	0xFE1
  4712                           indf2	equ	0xFDF
  4713                           postinc2	equ	0xFDE
  4714                           postdec2	equ	0xFDD
  4715                           plusw2	equ	0xFDB
  4716                           fsr2h	equ	0xFDA
  4717                           fsr2l	equ	0xFD9
  4718                           status	equ	0xFD8
  4719                           
  4720 ;; *************** function _UART_buff_init *****************
  4721 ;; Defined at:
  4722 ;;		line 55 in file "UART.c"
  4723 ;; Parameters:    Size  Location     Type
  4724 ;;  _this           2   36[COMRAM] PTR struct UART_ring_buf
  4725 ;;		 -> output_buffer(106), input_buffer(106), 
  4726 ;; Auto vars:     Size  Location     Type
  4727 ;;		None
  4728 ;; Return value:  Size  Location     Type
  4729 ;;                  1    wreg      void 
  4730 ;; Registers used:
  4731 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4732 ;; Tracked objects:
  4733 ;;		On entry : 0/0
  4734 ;;		On exit  : 0/0
  4735 ;;		Unchanged: 0/0
  4736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4737 ;;      Params:         2       0       0       0       0       0       0
  4738 ;;      Locals:         0       0       0       0       0       0       0
  4739 ;;      Temps:          0       0       0       0       0       0       0
  4740 ;;      Totals:         2       0       0       0       0       0       0
  4741 ;;Total ram usage:        2 bytes
  4742 ;; Hardware stack levels used:    1
  4743 ;; Hardware stack levels required when called:    7
  4744 ;; This function calls:
  4745 ;;		_memset
  4746 ;; This function is called by:
  4747 ;;		_EUSART1_Initialize
  4748 ;; This function uses a non-reentrant model
  4749 ;;
  4750                           
  4751                           	psect	text26
  4752  001D86                     __ptext26:
  4753                           	opt stack 0
  4754  001D86                     _UART_buff_init:
  4755                           	opt stack 21
  4756                           
  4757                           ;UART.c: 64: memset(_this, 0, sizeof (*_this));
  4758                           
  4759                           ;incstack = 0
  4760  001D86  C025  F01D         	movff	UART_buff_init@_this,memset@p1
  4761  001D8A  C026  F01E         	movff	UART_buff_init@_this+1,memset@p1+1
  4762  001D8E  0E00               	movlw	0
  4763  001D90  6E20               	movwf	memset@c+1,c
  4764  001D92  0E00               	movlw	0
  4765  001D94  6E1F               	movwf	memset@c,c
  4766  001D96  0E00               	movlw	0
  4767  001D98  6E22               	movwf	memset@n+1,c
  4768  001D9A  0E6A               	movlw	106
  4769  001D9C  6E21               	movwf	memset@n,c
  4770  001D9E  EC4D  F00E         	call	_memset	;wreg free
  4771  001DA2  0012               	return		;funcret
  4772  001DA4                     __end_of_UART_buff_init:
  4773                           	opt stack 0
  4774                           tblptru	equ	0xFF8
  4775                           tblptrh	equ	0xFF7
  4776                           tblptrl	equ	0xFF6
  4777                           tablat	equ	0xFF5
  4778                           prodh	equ	0xFF4
  4779                           prodl	equ	0xFF3
  4780                           intcon	equ	0xFF2
  4781                           intcon2	equ	0xFF1
  4782                           postinc0	equ	0xFEE
  4783                           wreg	equ	0xFE8
  4784                           indf1	equ	0xFE7
  4785                           postdec1	equ	0xFE5
  4786                           fsr1h	equ	0xFE2
  4787                           fsr1l	equ	0xFE1
  4788                           indf2	equ	0xFDF
  4789                           postinc2	equ	0xFDE
  4790                           postdec2	equ	0xFDD
  4791                           plusw2	equ	0xFDB
  4792                           fsr2h	equ	0xFDA
  4793                           fsr2l	equ	0xFD9
  4794                           status	equ	0xFD8
  4795                           
  4796 ;; *************** function _memset *****************
  4797 ;; Defined at:
  4798 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\memset.c"
  4799 ;; Parameters:    Size  Location     Type
  4800 ;;  p1              2   28[COMRAM] PTR void 
  4801 ;;		 -> output_buffer(106), input_buffer(106), 
  4802 ;;  c               2   30[COMRAM] int 
  4803 ;;  n               2   32[COMRAM] unsigned int 
  4804 ;; Auto vars:     Size  Location     Type
  4805 ;;  p               2   34[COMRAM] PTR unsigned char 
  4806 ;;		 -> output_buffer(106), input_buffer(106), 
  4807 ;; Return value:  Size  Location     Type
  4808 ;;                  2   28[COMRAM] PTR void 
  4809 ;; Registers used:
  4810 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4811 ;; Tracked objects:
  4812 ;;		On entry : 0/0
  4813 ;;		On exit  : 0/0
  4814 ;;		Unchanged: 0/0
  4815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4816 ;;      Params:         6       0       0       0       0       0       0
  4817 ;;      Locals:         2       0       0       0       0       0       0
  4818 ;;      Temps:          0       0       0       0       0       0       0
  4819 ;;      Totals:         8       0       0       0       0       0       0
  4820 ;;Total ram usage:        8 bytes
  4821 ;; Hardware stack levels used:    1
  4822 ;; Hardware stack levels required when called:    6
  4823 ;; This function calls:
  4824 ;;		Nothing
  4825 ;; This function is called by:
  4826 ;;		_UART_buff_init
  4827 ;;		_UART_buff_flush
  4828 ;; This function uses a non-reentrant model
  4829 ;;
  4830                           
  4831                           	psect	text27
  4832  001C9A                     __ptext27:
  4833                           	opt stack 0
  4834  001C9A                     _memset:
  4835                           	opt stack 21
  4836                           
  4837                           ;incstack = 0
  4838  001C9A  C01D  F023         	movff	memset@p1,memset@p
  4839  001C9E  C01E  F024         	movff	memset@p1+1,memset@p+1
  4840  001CA2  D008               	goto	l3843
  4841  001CA4                     l3839:
  4842  001CA4  C023  FFD9         	movff	memset@p,fsr2l
  4843  001CA8  C024  FFDA         	movff	memset@p+1,fsr2h
  4844  001CAC  C01F  FFDF         	movff	memset@c,indf2
  4845  001CB0  4A23               	infsnz	memset@p,f,c
  4846  001CB2  2A24               	incf	memset@p+1,f,c
  4847  001CB4                     l3843:
  4848  001CB4  0621               	decf	memset@n,f,c
  4849  001CB6  A0D8               	btfss	status,0,c
  4850  001CB8  0622               	decf	memset@n+1,f,c
  4851  001CBA  2821               	incf	memset@n,w,c
  4852  001CBC  E1F3               	bnz	l3839
  4853  001CBE  2822               	incf	memset@n+1,w,c
  4854  001CC0  B4D8               	btfsc	status,2,c
  4855  001CC2  0012               	return	
  4856  001CC4  D7EF               	goto	l3839
  4857  001CC6                     __end_of_memset:
  4858                           	opt stack 0
  4859                           tblptru	equ	0xFF8
  4860                           tblptrh	equ	0xFF7
  4861                           tblptrl	equ	0xFF6
  4862                           tablat	equ	0xFF5
  4863                           prodh	equ	0xFF4
  4864                           prodl	equ	0xFF3
  4865                           intcon	equ	0xFF2
  4866                           intcon2	equ	0xFF1
  4867                           postinc0	equ	0xFEE
  4868                           wreg	equ	0xFE8
  4869                           indf1	equ	0xFE7
  4870                           postdec1	equ	0xFE5
  4871                           fsr1h	equ	0xFE2
  4872                           fsr1l	equ	0xFE1
  4873                           indf2	equ	0xFDF
  4874                           postinc2	equ	0xFDE
  4875                           postdec2	equ	0xFDD
  4876                           plusw2	equ	0xFDB
  4877                           fsr2h	equ	0xFDA
  4878                           fsr2l	equ	0xFD9
  4879                           status	equ	0xFD8
  4880                           
  4881 ;; *************** function _ADC_Initialize *****************
  4882 ;; Defined at:
  4883 ;;		line 59 in file "mcc_generated_files/adc.c"
  4884 ;; Parameters:    Size  Location     Type
  4885 ;;		None
  4886 ;; Auto vars:     Size  Location     Type
  4887 ;;		None
  4888 ;; Return value:  Size  Location     Type
  4889 ;;                  1    wreg      void 
  4890 ;; Registers used:
  4891 ;;		wreg, status,2
  4892 ;; Tracked objects:
  4893 ;;		On entry : 0/0
  4894 ;;		On exit  : 0/0
  4895 ;;		Unchanged: 0/0
  4896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4897 ;;      Params:         0       0       0       0       0       0       0
  4898 ;;      Locals:         0       0       0       0       0       0       0
  4899 ;;      Temps:          0       0       0       0       0       0       0
  4900 ;;      Totals:         0       0       0       0       0       0       0
  4901 ;;Total ram usage:        0 bytes
  4902 ;; Hardware stack levels used:    1
  4903 ;; Hardware stack levels required when called:    6
  4904 ;; This function calls:
  4905 ;;		Nothing
  4906 ;; This function is called by:
  4907 ;;		_SYSTEM_Initialize
  4908 ;; This function uses a non-reentrant model
  4909 ;;
  4910                           
  4911                           	psect	text28
  4912  001DE0                     __ptext28:
  4913                           	opt stack 0
  4914  001DE0                     _ADC_Initialize:
  4915                           	opt stack 23
  4916                           
  4917                           ;adc.c: 64: ADCON0 = 0x01;
  4918                           
  4919                           ;incstack = 0
  4920  001DE0  0E01               	movlw	1
  4921  001DE2  6EC2               	movwf	4034,c	;volatile
  4922                           
  4923                           ;adc.c: 67: ADCON1 = 0x80;
  4924  001DE4  0E80               	movlw	128
  4925  001DE6  6EC1               	movwf	4033,c	;volatile
  4926                           
  4927                           ;adc.c: 70: ADCON2 = 0x12;
  4928  001DE8  0E12               	movlw	18
  4929  001DEA  6EC0               	movwf	4032,c	;volatile
  4930                           
  4931                           ;adc.c: 72: ADCON2bits.ADFM = 1;
  4932  001DEC  8EC0               	bsf	4032,7,c	;volatile
  4933                           
  4934                           ;adc.c: 75: ADRESL = 0x00;
  4935  001DEE  0E00               	movlw	0
  4936  001DF0  6EC3               	movwf	4035,c	;volatile
  4937                           
  4938                           ;adc.c: 78: ADRESH = 0x00;
  4939  001DF2  0E00               	movlw	0
  4940  001DF4  6EC4               	movwf	4036,c	;volatile
  4941  001DF6  0012               	return		;funcret
  4942  001DF8                     __end_of_ADC_Initialize:
  4943                           	opt stack 0
  4944                           tblptru	equ	0xFF8
  4945                           tblptrh	equ	0xFF7
  4946                           tblptrl	equ	0xFF6
  4947                           tablat	equ	0xFF5
  4948                           prodh	equ	0xFF4
  4949                           prodl	equ	0xFF3
  4950                           intcon	equ	0xFF2
  4951                           intcon2	equ	0xFF1
  4952                           postinc0	equ	0xFEE
  4953                           wreg	equ	0xFE8
  4954                           indf1	equ	0xFE7
  4955                           postdec1	equ	0xFE5
  4956                           fsr1h	equ	0xFE2
  4957                           fsr1l	equ	0xFE1
  4958                           indf2	equ	0xFDF
  4959                           postinc2	equ	0xFDE
  4960                           postdec2	equ	0xFDD
  4961                           plusw2	equ	0xFDB
  4962                           fsr2h	equ	0xFDA
  4963                           fsr2l	equ	0xFD9
  4964                           status	equ	0xFD8
  4965                           
  4966 ;; *************** function _PDUStartup *****************
  4967 ;; Defined at:
  4968 ;;		line 20 in file "PDU.c"
  4969 ;; Parameters:    Size  Location     Type
  4970 ;;		None
  4971 ;; Auto vars:     Size  Location     Type
  4972 ;;		None
  4973 ;; Return value:  Size  Location     Type
  4974 ;;                  1    wreg      void 
  4975 ;; Registers used:
  4976 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4977 ;; Tracked objects:
  4978 ;;		On entry : 0/0
  4979 ;;		On exit  : 0/0
  4980 ;;		Unchanged: 0/0
  4981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4982 ;;      Params:         0       0       0       0       0       0       0
  4983 ;;      Locals:         0       0       0       0       0       0       0
  4984 ;;      Temps:          0       0       0       0       0       0       0
  4985 ;;      Totals:         0       0       0       0       0       0       0
  4986 ;;Total ram usage:        0 bytes
  4987 ;; Hardware stack levels used:    1
  4988 ;; Hardware stack levels required when called:   10
  4989 ;; This function calls:
  4990 ;;		_ComputeStorageData
  4991 ;;		_EnableSlavePower
  4992 ;;		_StartUp595
  4993 ;;		_Update
  4994 ;; This function is called by:
  4995 ;;		_main
  4996 ;; This function uses a non-reentrant model
  4997 ;;
  4998                           
  4999                           	psect	text29
  5000  001866                     __ptext29:
  5001                           	opt stack 0
  5002  001866                     _PDUStartup:
  5003                           	opt stack 20
  5004                           
  5005                           ;PDU.c: 23: StartUp595();
  5006                           
  5007                           ;incstack = 0
  5008  001866  EC64  F00C         	call	_StartUp595	;wreg free
  5009                           
  5010                           ;PDU.c: 24: EnableSlavePower(SAS, ON);
  5011  00186A  0E00               	movlw	0
  5012  00186C  6E28               	movwf	EnableSlavePower@onof+1,c
  5013  00186E  0E01               	movlw	1
  5014  001870  6E27               	movwf	EnableSlavePower@onof,c
  5015  001872  0E03               	movlw	3
  5016  001874  ECB7  F008         	call	_EnableSlavePower
  5017                           
  5018                           ;PDU.c: 25: EnableSlavePower(DDS, ON);
  5019  001878  0E00               	movlw	0
  5020  00187A  6E28               	movwf	EnableSlavePower@onof+1,c
  5021  00187C  0E01               	movlw	1
  5022  00187E  6E27               	movwf	EnableSlavePower@onof,c
  5023  001880  0E01               	movlw	1
  5024  001882  ECB7  F008         	call	_EnableSlavePower
  5025                           
  5026                           ;PDU.c: 26: EnableSlavePower(MCS, OFF);
  5027  001886  0E00               	movlw	0
  5028  001888  6E28               	movwf	EnableSlavePower@onof+1,c
  5029  00188A  0E00               	movlw	0
  5030  00188C  6E27               	movwf	EnableSlavePower@onof,c
  5031  00188E  0E02               	movlw	2
  5032  001890  ECB7  F008         	call	_EnableSlavePower
  5033                           
  5034                           ;PDU.c: 27: EnableSlavePower(BMM, ON);
  5035  001894  0E00               	movlw	0
  5036  001896  6E28               	movwf	EnableSlavePower@onof+1,c
  5037  001898  0E01               	movlw	1
  5038  00189A  6E27               	movwf	EnableSlavePower@onof,c
  5039  00189C  0E04               	movlw	4
  5040  00189E  ECB7  F008         	call	_EnableSlavePower
  5041                           
  5042                           ;PDU.c: 28: EnableSlavePower(TSS, OFF);
  5043  0018A2  0E00               	movlw	0
  5044  0018A4  6E28               	movwf	EnableSlavePower@onof+1,c
  5045  0018A6  0E00               	movlw	0
  5046  0018A8  6E27               	movwf	EnableSlavePower@onof,c
  5047  0018AA  0E05               	movlw	5
  5048  0018AC  ECB7  F008         	call	_EnableSlavePower
  5049                           
  5050                           ;PDU.c: 29: EnableSlavePower(AUX, OFF);
  5051  0018B0  0E00               	movlw	0
  5052  0018B2  6E28               	movwf	EnableSlavePower@onof+1,c
  5053  0018B4  0E00               	movlw	0
  5054  0018B6  6E27               	movwf	EnableSlavePower@onof,c
  5055  0018B8  0E06               	movlw	6
  5056  0018BA  ECB7  F008         	call	_EnableSlavePower
  5057                           
  5058                           ;PDU.c: 30: Update();
  5059  0018BE  EC5E  F00F         	call	_Update	;wreg free
  5060                           
  5061                           ;PDU.c: 32: ComputeStorageData();
  5062  0018C2  EC29  F009         	call	_ComputeStorageData	;wreg free
  5063  0018C6  0012               	return		;funcret
  5064  0018C8                     __end_of_PDUStartup:
  5065                           	opt stack 0
  5066                           tblptru	equ	0xFF8
  5067                           tblptrh	equ	0xFF7
  5068                           tblptrl	equ	0xFF6
  5069                           tablat	equ	0xFF5
  5070                           prodh	equ	0xFF4
  5071                           prodl	equ	0xFF3
  5072                           intcon	equ	0xFF2
  5073                           intcon2	equ	0xFF1
  5074                           postinc0	equ	0xFEE
  5075                           wreg	equ	0xFE8
  5076                           indf1	equ	0xFE7
  5077                           postdec1	equ	0xFE5
  5078                           fsr1h	equ	0xFE2
  5079                           fsr1l	equ	0xFE1
  5080                           indf2	equ	0xFDF
  5081                           postinc2	equ	0xFDE
  5082                           postdec2	equ	0xFDD
  5083                           plusw2	equ	0xFDB
  5084                           fsr2h	equ	0xFDA
  5085                           fsr2l	equ	0xFD9
  5086                           status	equ	0xFD8
  5087                           
  5088 ;; *************** function _Update *****************
  5089 ;; Defined at:
  5090 ;;		line 225 in file "PDU.c"
  5091 ;; Parameters:    Size  Location     Type
  5092 ;;		None
  5093 ;; Auto vars:     Size  Location     Type
  5094 ;;		None
  5095 ;; Return value:  Size  Location     Type
  5096 ;;                  1    wreg      void 
  5097 ;; Registers used:
  5098 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5099 ;; Tracked objects:
  5100 ;;		On entry : 0/0
  5101 ;;		On exit  : 0/0
  5102 ;;		Unchanged: 0/0
  5103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5104 ;;      Params:         0       0       0       0       0       0       0
  5105 ;;      Locals:         0       0       0       0       0       0       0
  5106 ;;      Temps:          0       0       0       0       0       0       0
  5107 ;;      Totals:         0       0       0       0       0       0       0
  5108 ;;Total ram usage:        0 bytes
  5109 ;; Hardware stack levels used:    1
  5110 ;; Hardware stack levels required when called:    8
  5111 ;; This function calls:
  5112 ;;		_writeRegisters
  5113 ;; This function is called by:
  5114 ;;		_PDUStartup
  5115 ;;		_processPowerRequest
  5116 ;; This function uses a non-reentrant model
  5117 ;;
  5118                           
  5119                           	psect	text30
  5120  001EBC                     __ptext30:
  5121                           	opt stack 0
  5122  001EBC                     _Update:
  5123                           	opt stack 21
  5124                           
  5125                           ;PDU.c: 226: writeRegisters();
  5126                           
  5127                           ;incstack = 0
  5128  001EBC  EC39  F00B         	call	_writeRegisters	;wreg free
  5129  001EC0  0012               	return		;funcret
  5130  001EC2                     __end_of_Update:
  5131                           	opt stack 0
  5132                           tblptru	equ	0xFF8
  5133                           tblptrh	equ	0xFF7
  5134                           tblptrl	equ	0xFF6
  5135                           tablat	equ	0xFF5
  5136                           prodh	equ	0xFF4
  5137                           prodl	equ	0xFF3
  5138                           intcon	equ	0xFF2
  5139                           intcon2	equ	0xFF1
  5140                           postinc0	equ	0xFEE
  5141                           wreg	equ	0xFE8
  5142                           indf1	equ	0xFE7
  5143                           postdec1	equ	0xFE5
  5144                           fsr1h	equ	0xFE2
  5145                           fsr1l	equ	0xFE1
  5146                           indf2	equ	0xFDF
  5147                           postinc2	equ	0xFDE
  5148                           postdec2	equ	0xFDD
  5149                           plusw2	equ	0xFDB
  5150                           fsr2h	equ	0xFDA
  5151                           fsr2l	equ	0xFD9
  5152                           status	equ	0xFD8
  5153                           
  5154 ;; *************** function _StartUp595 *****************
  5155 ;; Defined at:
  5156 ;;		line 10 in file "Shift595.c"
  5157 ;; Parameters:    Size  Location     Type
  5158 ;;		None
  5159 ;; Auto vars:     Size  Location     Type
  5160 ;;		None
  5161 ;; Return value:  Size  Location     Type
  5162 ;;                  1    wreg      void 
  5163 ;; Registers used:
  5164 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5165 ;; Tracked objects:
  5166 ;;		On entry : 0/0
  5167 ;;		On exit  : 0/0
  5168 ;;		Unchanged: 0/0
  5169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5170 ;;      Params:         0       0       0       0       0       0       0
  5171 ;;      Locals:         0       0       0       0       0       0       0
  5172 ;;      Temps:          0       0       0       0       0       0       0
  5173 ;;      Totals:         0       0       0       0       0       0       0
  5174 ;;Total ram usage:        0 bytes
  5175 ;; Hardware stack levels used:    1
  5176 ;; Hardware stack levels required when called:    9
  5177 ;; This function calls:
  5178 ;;		_Clear595
  5179 ;;		_Delay
  5180 ;; This function is called by:
  5181 ;;		_PDUStartup
  5182 ;; This function uses a non-reentrant model
  5183 ;;
  5184                           
  5185                           	psect	text31
  5186  0018C8                     __ptext31:
  5187                           	opt stack 0
  5188  0018C8                     _StartUp595:
  5189                           	opt stack 20
  5190                           
  5191                           ;incstack = 0
  5192                           ;Shift595.c: 12: do { LATD5 = 1; } while(0);
  5193  0018C8  8A8C               	bsf	3980,5,c	;volatile
  5194                           
  5195                           ;Shift595.c: 13: do { LATB0 = 1; } while(0);
  5196  0018CA  808A               	bsf	3978,0,c	;volatile
  5197                           
  5198                           ;Shift595.c: 15: Delay(2);
  5199  0018CC  0E02               	movlw	2
  5200  0018CE  6E1D               	movwf	Delay@wait,c
  5201  0018D0  0E00               	movlw	0
  5202  0018D2  6E1E               	movwf	Delay@wait+1,c
  5203  0018D4  0E00               	movlw	0
  5204  0018D6  6E1F               	movwf	Delay@wait+2,c
  5205  0018D8  0E00               	movlw	0
  5206  0018DA  6E20               	movwf	Delay@wait+3,c
  5207  0018DC  EC37  F00D         	call	_Delay	;wreg free
  5208                           
  5209                           ;Shift595.c: 16: do { LATD5 = 0; } while(0);
  5210  0018E0  9A8C               	bcf	3980,5,c	;volatile
  5211                           
  5212                           ;Shift595.c: 17: Delay(2);
  5213  0018E2  0E02               	movlw	2
  5214  0018E4  6E1D               	movwf	Delay@wait,c
  5215  0018E6  0E00               	movlw	0
  5216  0018E8  6E1E               	movwf	Delay@wait+1,c
  5217  0018EA  0E00               	movlw	0
  5218  0018EC  6E1F               	movwf	Delay@wait+2,c
  5219  0018EE  0E00               	movlw	0
  5220  0018F0  6E20               	movwf	Delay@wait+3,c
  5221  0018F2  EC37  F00D         	call	_Delay	;wreg free
  5222                           
  5223                           ;Shift595.c: 18: do { LATB0 = 0; } while(0);
  5224  0018F6  908A               	bcf	3978,0,c	;volatile
  5225                           
  5226                           ;Shift595.c: 19: Delay(2);
  5227  0018F8  0E02               	movlw	2
  5228  0018FA  6E1D               	movwf	Delay@wait,c
  5229  0018FC  0E00               	movlw	0
  5230  0018FE  6E1E               	movwf	Delay@wait+1,c
  5231  001900  0E00               	movlw	0
  5232  001902  6E1F               	movwf	Delay@wait+2,c
  5233  001904  0E00               	movlw	0
  5234  001906  6E20               	movwf	Delay@wait+3,c
  5235  001908  EC37  F00D         	call	_Delay	;wreg free
  5236                           
  5237                           ;Shift595.c: 20: do { LATD5 = 1; } while(0);
  5238  00190C  8A8C               	bsf	3980,5,c	;volatile
  5239                           
  5240                           ;Shift595.c: 21: Delay(2);
  5241  00190E  0E02               	movlw	2
  5242  001910  6E1D               	movwf	Delay@wait,c
  5243  001912  0E00               	movlw	0
  5244  001914  6E1E               	movwf	Delay@wait+1,c
  5245  001916  0E00               	movlw	0
  5246  001918  6E1F               	movwf	Delay@wait+2,c
  5247  00191A  0E00               	movlw	0
  5248  00191C  6E20               	movwf	Delay@wait+3,c
  5249  00191E  EC37  F00D         	call	_Delay	;wreg free
  5250                           
  5251                           ;Shift595.c: 22: do { LATB0 = 1; } while(0);
  5252  001922  808A               	bsf	3978,0,c	;volatile
  5253                           
  5254                           ;Shift595.c: 24: Clear595();
  5255  001924  ECBA  F00D         	call	_Clear595	;wreg free
  5256  001928  0012               	return		;funcret
  5257  00192A                     __end_of_StartUp595:
  5258                           	opt stack 0
  5259                           tblptru	equ	0xFF8
  5260                           tblptrh	equ	0xFF7
  5261                           tblptrl	equ	0xFF6
  5262                           tablat	equ	0xFF5
  5263                           prodh	equ	0xFF4
  5264                           prodl	equ	0xFF3
  5265                           intcon	equ	0xFF2
  5266                           intcon2	equ	0xFF1
  5267                           postinc0	equ	0xFEE
  5268                           wreg	equ	0xFE8
  5269                           indf1	equ	0xFE7
  5270                           postdec1	equ	0xFE5
  5271                           fsr1h	equ	0xFE2
  5272                           fsr1l	equ	0xFE1
  5273                           indf2	equ	0xFDF
  5274                           postinc2	equ	0xFDE
  5275                           postdec2	equ	0xFDD
  5276                           plusw2	equ	0xFDB
  5277                           fsr2h	equ	0xFDA
  5278                           fsr2l	equ	0xFD9
  5279                           status	equ	0xFD8
  5280                           
  5281 ;; *************** function _Clear595 *****************
  5282 ;; Defined at:
  5283 ;;		line 39 in file "Shift595.c"
  5284 ;; Parameters:    Size  Location     Type
  5285 ;;		None
  5286 ;; Auto vars:     Size  Location     Type
  5287 ;;  i               2   41[COMRAM] int 
  5288 ;; Return value:  Size  Location     Type
  5289 ;;                  1    wreg      void 
  5290 ;; Registers used:
  5291 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5292 ;; Tracked objects:
  5293 ;;		On entry : 0/0
  5294 ;;		On exit  : 0/0
  5295 ;;		Unchanged: 0/0
  5296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5297 ;;      Params:         0       0       0       0       0       0       0
  5298 ;;      Locals:         2       0       0       0       0       0       0
  5299 ;;      Temps:          0       0       0       0       0       0       0
  5300 ;;      Totals:         2       0       0       0       0       0       0
  5301 ;;Total ram usage:        2 bytes
  5302 ;; Hardware stack levels used:    1
  5303 ;; Hardware stack levels required when called:    8
  5304 ;; This function calls:
  5305 ;;		_writeRegisters
  5306 ;; This function is called by:
  5307 ;;		_StartUp595
  5308 ;; This function uses a non-reentrant model
  5309 ;;
  5310                           
  5311                           	psect	text32
  5312  001B74                     __ptext32:
  5313                           	opt stack 0
  5314  001B74                     _Clear595:
  5315                           	opt stack 20
  5316                           
  5317                           ;Shift595.c: 40: for (int i = 3 * 8 - 1; i >= 0; i--) {
  5318                           
  5319                           ;incstack = 0
  5320  001B74  0E00               	movlw	0
  5321  001B76  6E2B               	movwf	Clear595@i+1,c
  5322  001B78  0E17               	movlw	23
  5323  001B7A  6E2A               	movwf	Clear595@i,c
  5324  001B7C                     l3937:
  5325  001B7C  BE2B               	btfsc	Clear595@i+1,7,c
  5326  001B7E  D011               	goto	l3947
  5327                           
  5328                           ;Shift595.c: 41: registers[i] = 0;
  5329  001B80  90D8               	bcf	status,0,c
  5330  001B82  342A               	rlcf	Clear595@i,w,c
  5331  001B84  6ED9               	movwf	fsr2l,c
  5332  001B86  342B               	rlcf	Clear595@i+1,w,c
  5333  001B88  6EDA               	movwf	fsr2h,c
  5334  001B8A  0E00               	movlw	low _registers
  5335  001B8C  26D9               	addwf	fsr2l,f,c
  5336  001B8E  0E01               	movlw	high _registers
  5337  001B90  22DA               	addwfc	fsr2h,f,c
  5338  001B92  0E00               	movlw	0
  5339  001B94  6EDE               	movwf	postinc2,c
  5340  001B96  0E00               	movlw	0
  5341  001B98  6EDD               	movwf	postdec2,c
  5342  001B9A  062A               	decf	Clear595@i,f,c
  5343  001B9C  A0D8               	btfss	status,0,c
  5344  001B9E  062B               	decf	Clear595@i+1,f,c
  5345  001BA0  D7ED               	goto	l3937
  5346  001BA2                     l3947:
  5347                           
  5348                           ;Shift595.c: 42: }
  5349                           ;Shift595.c: 44: writeRegisters();
  5350  001BA2  EC39  F00B         	call	_writeRegisters	;wreg free
  5351  001BA6  0012               	return		;funcret
  5352  001BA8                     __end_of_Clear595:
  5353                           	opt stack 0
  5354                           tblptru	equ	0xFF8
  5355                           tblptrh	equ	0xFF7
  5356                           tblptrl	equ	0xFF6
  5357                           tablat	equ	0xFF5
  5358                           prodh	equ	0xFF4
  5359                           prodl	equ	0xFF3
  5360                           intcon	equ	0xFF2
  5361                           intcon2	equ	0xFF1
  5362                           postinc0	equ	0xFEE
  5363                           wreg	equ	0xFE8
  5364                           indf1	equ	0xFE7
  5365                           postdec1	equ	0xFE5
  5366                           fsr1h	equ	0xFE2
  5367                           fsr1l	equ	0xFE1
  5368                           indf2	equ	0xFDF
  5369                           postinc2	equ	0xFDE
  5370                           postdec2	equ	0xFDD
  5371                           plusw2	equ	0xFDB
  5372                           fsr2h	equ	0xFDA
  5373                           fsr2l	equ	0xFD9
  5374                           status	equ	0xFD8
  5375                           
  5376 ;; *************** function _writeRegisters *****************
  5377 ;; Defined at:
  5378 ;;		line 50 in file "Shift595.c"
  5379 ;; Parameters:    Size  Location     Type
  5380 ;;		None
  5381 ;; Auto vars:     Size  Location     Type
  5382 ;;  i               2   39[COMRAM] int 
  5383 ;;  val             2   37[COMRAM] int 
  5384 ;; Return value:  Size  Location     Type
  5385 ;;                  1    wreg      void 
  5386 ;; Registers used:
  5387 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5388 ;; Tracked objects:
  5389 ;;		On entry : 0/0
  5390 ;;		On exit  : 0/0
  5391 ;;		Unchanged: 0/0
  5392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5393 ;;      Params:         0       0       0       0       0       0       0
  5394 ;;      Locals:         4       0       0       0       0       0       0
  5395 ;;      Temps:          0       0       0       0       0       0       0
  5396 ;;      Totals:         4       0       0       0       0       0       0
  5397 ;;Total ram usage:        4 bytes
  5398 ;; Hardware stack levels used:    1
  5399 ;; Hardware stack levels required when called:    7
  5400 ;; This function calls:
  5401 ;;		_Delay
  5402 ;; This function is called by:
  5403 ;;		_Update
  5404 ;;		_Clear595
  5405 ;; This function uses a non-reentrant model
  5406 ;;
  5407                           
  5408                           	psect	text33
  5409  001672                     __ptext33:
  5410                           	opt stack 0
  5411  001672                     _writeRegisters:
  5412                           	opt stack 21
  5413                           
  5414                           ;Shift595.c: 51: int val = 0;
  5415                           
  5416                           ;incstack = 0
  5417  001672  0E00               	movlw	0
  5418  001674  6E27               	movwf	writeRegisters@val+1,c
  5419  001676  0E00               	movlw	0
  5420  001678  6E26               	movwf	writeRegisters@val,c
  5421                           
  5422                           ;Shift595.c: 52: for (int i = 3 * 8 - 1; i >= 0; i--) {
  5423  00167A  0E00               	movlw	0
  5424  00167C  6E29               	movwf	writeRegisters@i+1,c
  5425  00167E  0E17               	movlw	23
  5426  001680  6E28               	movwf	writeRegisters@i,c
  5427  001682                     l3817:
  5428  001682  BE29               	btfsc	writeRegisters@i+1,7,c
  5429  001684  D01D               	goto	l538
  5430                           
  5431                           ;Shift595.c: 53: do { LATD7 = 0; } while(0);
  5432  001686  9E8C               	bcf	3980,7,c	;volatile
  5433                           
  5434                           ;Shift595.c: 55: val = registers[i];
  5435  001688  90D8               	bcf	status,0,c
  5436  00168A  3428               	rlcf	writeRegisters@i,w,c
  5437  00168C  6ED9               	movwf	fsr2l,c
  5438  00168E  3429               	rlcf	writeRegisters@i+1,w,c
  5439  001690  6EDA               	movwf	fsr2h,c
  5440  001692  0E00               	movlw	low _registers
  5441  001694  26D9               	addwf	fsr2l,f,c
  5442  001696  0E01               	movlw	high _registers
  5443  001698  22DA               	addwfc	fsr2h,f,c
  5444  00169A  CFDE F026          	movff	postinc2,writeRegisters@val
  5445  00169E  CFDD F027          	movff	postdec2,writeRegisters@val+1
  5446                           
  5447                           ;Shift595.c: 56: if (val == 1) {
  5448  0016A2  0426               	decf	writeRegisters@val,w,c
  5449  0016A4  1027               	iorwf	writeRegisters@val+1,w,c
  5450  0016A6  A4D8               	btfss	status,2,c
  5451  0016A8  D002               	goto	l3825
  5452                           
  5453                           ;Shift595.c: 57: do { LATD4 = 1; } while(0);
  5454  0016AA  888C               	bsf	3980,4,c	;volatile
  5455                           
  5456                           ;Shift595.c: 58: } else if (val == 0) {
  5457  0016AC  D004               	goto	l536
  5458  0016AE                     l3825:
  5459  0016AE  5026               	movf	writeRegisters@val,w,c
  5460  0016B0  1027               	iorwf	writeRegisters@val+1,w,c
  5461  0016B2  B4D8               	btfsc	status,2,c
  5462                           
  5463                           ;Shift595.c: 59: do { LATD4 = 0; } while(0);
  5464  0016B4  988C               	bcf	3980,4,c	;volatile
  5465  0016B6                     l536:
  5466  0016B6  8E8C               	bsf	3980,7,c	;volatile
  5467  0016B8  0628               	decf	writeRegisters@i,f,c
  5468  0016BA  A0D8               	btfss	status,0,c
  5469  0016BC  0629               	decf	writeRegisters@i+1,f,c
  5470  0016BE  D7E1               	goto	l3817
  5471  0016C0                     l538:
  5472  0016C0  9E8C               	bcf	3980,7,c	;volatile
  5473                           
  5474                           ;Shift595.c: 67: Delay(1);
  5475  0016C2  0E01               	movlw	1
  5476  0016C4  6E1D               	movwf	Delay@wait,c
  5477  0016C6  0E00               	movlw	0
  5478  0016C8  6E1E               	movwf	Delay@wait+1,c
  5479  0016CA  0E00               	movlw	0
  5480  0016CC  6E1F               	movwf	Delay@wait+2,c
  5481  0016CE  0E00               	movlw	0
  5482  0016D0  6E20               	movwf	Delay@wait+3,c
  5483  0016D2  EC37  F00D         	call	_Delay	;wreg free
  5484                           
  5485                           ;Shift595.c: 68: do { LATD6 = 1; } while(0);
  5486  0016D6  8C8C               	bsf	3980,6,c	;volatile
  5487                           
  5488                           ;Shift595.c: 69: Delay(1);
  5489  0016D8  0E01               	movlw	1
  5490  0016DA  6E1D               	movwf	Delay@wait,c
  5491  0016DC  0E00               	movlw	0
  5492  0016DE  6E1E               	movwf	Delay@wait+1,c
  5493  0016E0  0E00               	movlw	0
  5494  0016E2  6E1F               	movwf	Delay@wait+2,c
  5495  0016E4  0E00               	movlw	0
  5496  0016E6  6E20               	movwf	Delay@wait+3,c
  5497  0016E8  EC37  F00D         	call	_Delay	;wreg free
  5498                           
  5499                           ;Shift595.c: 70: do { LATD6 = 0; } while(0);
  5500  0016EC  9C8C               	bcf	3980,6,c	;volatile
  5501  0016EE  0012               	return	
  5502  0016F0                     __end_of_writeRegisters:
  5503                           	opt stack 0
  5504                           tblptru	equ	0xFF8
  5505                           tblptrh	equ	0xFF7
  5506                           tblptrl	equ	0xFF6
  5507                           tablat	equ	0xFF5
  5508                           prodh	equ	0xFF4
  5509                           prodl	equ	0xFF3
  5510                           intcon	equ	0xFF2
  5511                           intcon2	equ	0xFF1
  5512                           postinc0	equ	0xFEE
  5513                           wreg	equ	0xFE8
  5514                           indf1	equ	0xFE7
  5515                           postdec1	equ	0xFE5
  5516                           fsr1h	equ	0xFE2
  5517                           fsr1l	equ	0xFE1
  5518                           indf2	equ	0xFDF
  5519                           postinc2	equ	0xFDE
  5520                           postdec2	equ	0xFDD
  5521                           plusw2	equ	0xFDB
  5522                           fsr2h	equ	0xFDA
  5523                           fsr2l	equ	0xFD9
  5524                           status	equ	0xFD8
  5525                           
  5526 ;; *************** function _EnableSlavePower *****************
  5527 ;; Defined at:
  5528 ;;		line 37 in file "PDU.c"
  5529 ;; Parameters:    Size  Location     Type
  5530 ;;  slave           1    wreg     enum E6
  5531 ;;  onof            2   38[COMRAM] int 
  5532 ;; Auto vars:     Size  Location     Type
  5533 ;;  slave           1   40[COMRAM] enum E6
  5534 ;; Return value:  Size  Location     Type
  5535 ;;                  1    wreg      void 
  5536 ;; Registers used:
  5537 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5538 ;; Tracked objects:
  5539 ;;		On entry : 0/0
  5540 ;;		On exit  : 0/0
  5541 ;;		Unchanged: 0/0
  5542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5543 ;;      Params:         2       0       0       0       0       0       0
  5544 ;;      Locals:         1       0       0       0       0       0       0
  5545 ;;      Temps:          0       0       0       0       0       0       0
  5546 ;;      Totals:         3       0       0       0       0       0       0
  5547 ;;Total ram usage:        3 bytes
  5548 ;; Hardware stack levels used:    1
  5549 ;; Hardware stack levels required when called:    7
  5550 ;; This function calls:
  5551 ;;		_SetPin595
  5552 ;; This function is called by:
  5553 ;;		_PDUStartup
  5554 ;;		_processPowerRequest
  5555 ;; This function uses a non-reentrant model
  5556 ;;
  5557                           
  5558                           	psect	text34
  5559  00116E                     __ptext34:
  5560                           	opt stack 0
  5561  00116E                     _EnableSlavePower:
  5562                           	opt stack 22
  5563                           
  5564                           ;incstack = 0
  5565                           ;EnableSlavePower@slave stored from wreg
  5566  00116E  6E29               	movwf	EnableSlavePower@slave,c
  5567                           
  5568                           ;PDU.c: 38: switch (slave) {
  5569  001170  D05C               	goto	l4181
  5570  001172                     l4165:
  5571                           
  5572                           ;PDU.c: 40: SetPin595(2, 6, onof);
  5573  001172  0E00               	movlw	0
  5574  001174  6E1E               	movwf	SetPin595@Reg+1,c
  5575  001176  0E02               	movlw	2
  5576  001178  6E1D               	movwf	SetPin595@Reg,c
  5577  00117A  0E00               	movlw	0
  5578  00117C  6E20               	movwf	SetPin595@pin+1,c
  5579  00117E  0E06               	movlw	6
  5580  001180  6E1F               	movwf	SetPin595@pin,c
  5581  001182  C027  F021         	movff	EnableSlavePower@onof,SetPin595@value
  5582  001186  C028  F022         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  5583  00118A  ECC4  F00C         	call	_SetPin595	;wreg free
  5584                           
  5585                           ;PDU.c: 41: break;
  5586  00118E  0012               	return	
  5587  001190                     l4167:
  5588                           
  5589                           ;PDU.c: 43: SetPin595(1, 1, onof);
  5590  001190  0E00               	movlw	0
  5591  001192  6E1E               	movwf	SetPin595@Reg+1,c
  5592  001194  0E01               	movlw	1
  5593  001196  6E1D               	movwf	SetPin595@Reg,c
  5594  001198  0E00               	movlw	0
  5595  00119A  6E20               	movwf	SetPin595@pin+1,c
  5596  00119C  0E01               	movlw	1
  5597  00119E  6E1F               	movwf	SetPin595@pin,c
  5598  0011A0  C027  F021         	movff	EnableSlavePower@onof,SetPin595@value
  5599  0011A4  C028  F022         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  5600  0011A8  ECC4  F00C         	call	_SetPin595	;wreg free
  5601                           
  5602                           ;PDU.c: 44: break;
  5603  0011AC  0012               	return	
  5604  0011AE                     l4169:
  5605                           
  5606                           ;PDU.c: 46: SetPin595(1, 6, onof);
  5607  0011AE  0E00               	movlw	0
  5608  0011B0  6E1E               	movwf	SetPin595@Reg+1,c
  5609  0011B2  0E01               	movlw	1
  5610  0011B4  6E1D               	movwf	SetPin595@Reg,c
  5611  0011B6  0E00               	movlw	0
  5612  0011B8  6E20               	movwf	SetPin595@pin+1,c
  5613  0011BA  0E06               	movlw	6
  5614  0011BC  6E1F               	movwf	SetPin595@pin,c
  5615  0011BE  C027  F021         	movff	EnableSlavePower@onof,SetPin595@value
  5616  0011C2  C028  F022         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  5617  0011C6  ECC4  F00C         	call	_SetPin595	;wreg free
  5618                           
  5619                           ;PDU.c: 47: MCSOn = onof;
  5620  0011CA  C027  F03B         	movff	EnableSlavePower@onof,_MCSOn
  5621                           
  5622                           ;PDU.c: 48: break;
  5623  0011CE  0012               	return	
  5624  0011D0                     l4173:
  5625                           
  5626                           ;PDU.c: 50: SetPin595(2, 1, onof);
  5627  0011D0  0E00               	movlw	0
  5628  0011D2  6E1E               	movwf	SetPin595@Reg+1,c
  5629  0011D4  0E02               	movlw	2
  5630  0011D6  6E1D               	movwf	SetPin595@Reg,c
  5631  0011D8  0E00               	movlw	0
  5632  0011DA  6E20               	movwf	SetPin595@pin+1,c
  5633  0011DC  0E01               	movlw	1
  5634  0011DE  6E1F               	movwf	SetPin595@pin,c
  5635  0011E0  C027  F021         	movff	EnableSlavePower@onof,SetPin595@value
  5636  0011E4  C028  F022         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  5637  0011E8  ECC4  F00C         	call	_SetPin595	;wreg free
  5638                           
  5639                           ;PDU.c: 51: break;
  5640  0011EC  0012               	return	
  5641  0011EE                     l4175:
  5642                           
  5643                           ;PDU.c: 53: SetPin595(3, 6, onof);
  5644  0011EE  0E00               	movlw	0
  5645  0011F0  6E1E               	movwf	SetPin595@Reg+1,c
  5646  0011F2  0E03               	movlw	3
  5647  0011F4  6E1D               	movwf	SetPin595@Reg,c
  5648  0011F6  0E00               	movlw	0
  5649  0011F8  6E20               	movwf	SetPin595@pin+1,c
  5650  0011FA  0E06               	movlw	6
  5651  0011FC  6E1F               	movwf	SetPin595@pin,c
  5652  0011FE  C027  F021         	movff	EnableSlavePower@onof,SetPin595@value
  5653  001202  C028  F022         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  5654  001206  ECC4  F00C         	call	_SetPin595	;wreg free
  5655                           
  5656                           ;PDU.c: 54: break;
  5657  00120A  0012               	return	
  5658  00120C                     l4177:
  5659                           
  5660                           ;PDU.c: 56: SetPin595(3, 1, onof);
  5661  00120C  0E00               	movlw	0
  5662  00120E  6E1E               	movwf	SetPin595@Reg+1,c
  5663  001210  0E03               	movlw	3
  5664  001212  6E1D               	movwf	SetPin595@Reg,c
  5665  001214  0E00               	movlw	0
  5666  001216  6E20               	movwf	SetPin595@pin+1,c
  5667  001218  0E01               	movlw	1
  5668  00121A  6E1F               	movwf	SetPin595@pin,c
  5669  00121C  C027  F021         	movff	EnableSlavePower@onof,SetPin595@value
  5670  001220  C028  F022         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  5671  001224  ECC4  F00C         	call	_SetPin595	;wreg free
  5672                           
  5673                           ;PDU.c: 58: }
  5674                           
  5675                           ;PDU.c: 57: break;
  5676  001228  0012               	return	
  5677  00122A                     l4181:
  5678  00122A  5029               	movf	EnableSlavePower@slave,w,c
  5679                           
  5680                           ; Switch size 1, requested type "space"
  5681                           ; Number of cases is 6, Range of values is 1 to 6
  5682                           ; switch strategies available:
  5683                           ; Name         Instructions Cycles
  5684                           ; simple_byte           19    10 (average)
  5685                           ;	Chosen strategy is simple_byte
  5686  00122C  0A01               	xorlw	1	; case 1
  5687  00122E  B4D8               	btfsc	status,2,c
  5688  001230  D7CF               	goto	l4173
  5689  001232  0A03               	xorlw	3	; case 2
  5690  001234  B4D8               	btfsc	status,2,c
  5691  001236  D7BB               	goto	l4169
  5692  001238  0A01               	xorlw	1	; case 3
  5693  00123A  B4D8               	btfsc	status,2,c
  5694  00123C  D79A               	goto	l4165
  5695  00123E  0A07               	xorlw	7	; case 4
  5696  001240  B4D8               	btfsc	status,2,c
  5697  001242  D7A6               	goto	l4167
  5698  001244  0A01               	xorlw	1	; case 5
  5699  001246  B4D8               	btfsc	status,2,c
  5700  001248  D7D2               	goto	l4175
  5701  00124A  0A03               	xorlw	3	; case 6
  5702  00124C  A4D8               	btfss	status,2,c
  5703  00124E  0012               	return	
  5704  001250  D7DD               	goto	l4177
  5705  001252                     __end_of_EnableSlavePower:
  5706                           	opt stack 0
  5707                           tblptru	equ	0xFF8
  5708                           tblptrh	equ	0xFF7
  5709                           tblptrl	equ	0xFF6
  5710                           tablat	equ	0xFF5
  5711                           prodh	equ	0xFF4
  5712                           prodl	equ	0xFF3
  5713                           intcon	equ	0xFF2
  5714                           intcon2	equ	0xFF1
  5715                           postinc0	equ	0xFEE
  5716                           wreg	equ	0xFE8
  5717                           indf1	equ	0xFE7
  5718                           postdec1	equ	0xFE5
  5719                           fsr1h	equ	0xFE2
  5720                           fsr1l	equ	0xFE1
  5721                           indf2	equ	0xFDF
  5722                           postinc2	equ	0xFDE
  5723                           postdec2	equ	0xFDD
  5724                           plusw2	equ	0xFDB
  5725                           fsr2h	equ	0xFDA
  5726                           fsr2l	equ	0xFD9
  5727                           status	equ	0xFD8
  5728                           
  5729 ;; *************** function _SetPin595 *****************
  5730 ;; Defined at:
  5731 ;;		line 32 in file "Shift595.c"
  5732 ;; Parameters:    Size  Location     Type
  5733 ;;  Reg             2   28[COMRAM] int 
  5734 ;;  pin             2   30[COMRAM] int 
  5735 ;;  value           2   32[COMRAM] int 
  5736 ;; Auto vars:     Size  Location     Type
  5737 ;;		None
  5738 ;; Return value:  Size  Location     Type
  5739 ;;                  1    wreg      void 
  5740 ;; Registers used:
  5741 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5742 ;; Tracked objects:
  5743 ;;		On entry : 0/0
  5744 ;;		On exit  : 0/0
  5745 ;;		Unchanged: 0/0
  5746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5747 ;;      Params:         6       0       0       0       0       0       0
  5748 ;;      Locals:         0       0       0       0       0       0       0
  5749 ;;      Temps:          4       0       0       0       0       0       0
  5750 ;;      Totals:        10       0       0       0       0       0       0
  5751 ;;Total ram usage:       10 bytes
  5752 ;; Hardware stack levels used:    1
  5753 ;; Hardware stack levels required when called:    6
  5754 ;; This function calls:
  5755 ;;		Nothing
  5756 ;; This function is called by:
  5757 ;;		_EnableSlavePower
  5758 ;; This function uses a non-reentrant model
  5759 ;;
  5760                           
  5761                           	psect	text35
  5762  001988                     __ptext35:
  5763                           	opt stack 0
  5764  001988                     _SetPin595:
  5765                           	opt stack 22
  5766                           
  5767                           ;Shift595.c: 33: registers[((Reg - 1)*8) + pin] = value;
  5768                           
  5769                           ;incstack = 0
  5770  001988  0EF0               	movlw	240
  5771  00198A  6E23               	movwf	??_SetPin595& (0+255),c
  5772  00198C  0EFF               	movlw	255
  5773  00198E  6E24               	movwf	(??_SetPin595+1)& (0+255),c
  5774  001990  C01D  F025         	movff	SetPin595@Reg,??_SetPin595+2
  5775  001994  C01E  F026         	movff	SetPin595@Reg+1,??_SetPin595+3
  5776  001998  90D8               	bcf	status,0,c
  5777  00199A  3625               	rlcf	??_SetPin595+2,f,c
  5778  00199C  3626               	rlcf	??_SetPin595+3,f,c
  5779  00199E  90D8               	bcf	status,0,c
  5780  0019A0  3625               	rlcf	??_SetPin595+2,f,c
  5781  0019A2  3626               	rlcf	??_SetPin595+3,f,c
  5782  0019A4  90D8               	bcf	status,0,c
  5783  0019A6  3625               	rlcf	??_SetPin595+2,f,c
  5784  0019A8  3626               	rlcf	??_SetPin595+3,f,c
  5785  0019AA  501F               	movf	SetPin595@pin,w,c
  5786  0019AC  2625               	addwf	??_SetPin595+2,f,c
  5787  0019AE  5020               	movf	SetPin595@pin+1,w,c
  5788  0019B0  2226               	addwfc	??_SetPin595+3,f,c
  5789  0019B2  90D8               	bcf	status,0,c
  5790  0019B4  3625               	rlcf	??_SetPin595+2,f,c
  5791  0019B6  3626               	rlcf	??_SetPin595+3,f,c
  5792  0019B8  5023               	movf	??_SetPin595,w,c
  5793  0019BA  2625               	addwf	??_SetPin595+2,f,c
  5794  0019BC  5024               	movf	??_SetPin595+1,w,c
  5795  0019BE  2226               	addwfc	??_SetPin595+3,f,c
  5796  0019C0  0E00               	movlw	low _registers
  5797  0019C2  2425               	addwf	??_SetPin595+2,w,c
  5798  0019C4  6ED9               	movwf	fsr2l,c
  5799  0019C6  0E01               	movlw	high _registers
  5800  0019C8  2026               	addwfc	??_SetPin595+3,w,c
  5801  0019CA  6EDA               	movwf	fsr2h,c
  5802  0019CC  C021  FFDE         	movff	SetPin595@value,postinc2
  5803  0019D0  C022  FFDD         	movff	SetPin595@value+1,postdec2
  5804  0019D4  0012               	return		;funcret
  5805  0019D6                     __end_of_SetPin595:
  5806                           	opt stack 0
  5807                           tblptru	equ	0xFF8
  5808                           tblptrh	equ	0xFF7
  5809                           tblptrl	equ	0xFF6
  5810                           tablat	equ	0xFF5
  5811                           prodh	equ	0xFF4
  5812                           prodl	equ	0xFF3
  5813                           intcon	equ	0xFF2
  5814                           intcon2	equ	0xFF1
  5815                           postinc0	equ	0xFEE
  5816                           wreg	equ	0xFE8
  5817                           indf1	equ	0xFE7
  5818                           postdec1	equ	0xFE5
  5819                           fsr1h	equ	0xFE2
  5820                           fsr1l	equ	0xFE1
  5821                           indf2	equ	0xFDF
  5822                           postinc2	equ	0xFDE
  5823                           postdec2	equ	0xFDD
  5824                           plusw2	equ	0xFDB
  5825                           fsr2h	equ	0xFDA
  5826                           fsr2l	equ	0xFD9
  5827                           status	equ	0xFD8
  5828                           
  5829 ;; *************** function _ComputeStorageData *****************
  5830 ;; Defined at:
  5831 ;;		line 160 in file "PDU.c"
  5832 ;; Parameters:    Size  Location     Type
  5833 ;;		None
  5834 ;; Auto vars:     Size  Location     Type
  5835 ;;  i               2   31[COMRAM] int 
  5836 ;; Return value:  Size  Location     Type
  5837 ;;                  1    wreg      void 
  5838 ;; Registers used:
  5839 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5840 ;; Tracked objects:
  5841 ;;		On entry : 0/0
  5842 ;;		On exit  : 0/0
  5843 ;;		Unchanged: 0/0
  5844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5845 ;;      Params:         0       0       0       0       0       0       0
  5846 ;;      Locals:         2       0       0       0       0       0       0
  5847 ;;      Temps:          2       0       0       0       0       0       0
  5848 ;;      Totals:         4       0       0       0       0       0       0
  5849 ;;Total ram usage:        4 bytes
  5850 ;; Hardware stack levels used:    1
  5851 ;; Hardware stack levels required when called:    7
  5852 ;; This function calls:
  5853 ;;		_DATAEE_ReadByte
  5854 ;; This function is called by:
  5855 ;;		_PDUStartup
  5856 ;;		_main
  5857 ;; This function uses a non-reentrant model
  5858 ;;
  5859                           
  5860                           	psect	text36
  5861  001252                     __ptext36:
  5862                           	opt stack 0
  5863  001252                     _ComputeStorageData:
  5864                           	opt stack 22
  5865                           
  5866                           ;PDU.c: 161: for (int i = 0; i < 12; i++) {
  5867                           
  5868                           ;incstack = 0
  5869  001252  0E00               	movlw	0
  5870  001254  6E21               	movwf	ComputeStorageData@i+1,c
  5871  001256  0E00               	movlw	0
  5872  001258  6E20               	movwf	ComputeStorageData@i,c
  5873  00125A                     l4199:
  5874  00125A  BE21               	btfsc	ComputeStorageData@i+1,7,c
  5875  00125C  D006               	goto	l4203
  5876  00125E  5021               	movf	ComputeStorageData@i+1,w,c
  5877  001260  E111               	bnz	l4209
  5878  001262  0E0C               	movlw	12
  5879  001264  5C20               	subwf	ComputeStorageData@i,w,c
  5880  001266  B0D8               	btfsc	status,0,c
  5881  001268  D00D               	goto	l4209
  5882  00126A                     l4203:
  5883                           
  5884                           ;PDU.c: 162: data[i] = DATAEE_ReadByte(i);
  5885  00126A  0ED6               	movlw	low _data
  5886  00126C  2420               	addwf	ComputeStorageData@i,w,c
  5887  00126E  6ED9               	movwf	fsr2l,c
  5888  001270  0E00               	movlw	high _data
  5889  001272  2021               	addwfc	ComputeStorageData@i+1,w,c
  5890  001274  6EDA               	movwf	fsr2h,c
  5891  001276  5020               	movf	ComputeStorageData@i,w,c
  5892  001278  EC31  F00F         	call	_DATAEE_ReadByte
  5893  00127C  6EDF               	movwf	indf2,c
  5894  00127E  4A20               	infsnz	ComputeStorageData@i,f,c
  5895  001280  2A21               	incf	ComputeStorageData@i+1,f,c
  5896  001282  D7EB               	goto	l4199
  5897  001284                     l4209:
  5898                           
  5899                           ;PDU.c: 163: }
  5900                           ;PDU.c: 164: Currentcomp[0] = ((data[0] << 8) | data[1]);
  5901  001284  0100               	movlb	0	; () banked
  5902  001286  51D7               	movf	(_data+1)& (0+255),w,b
  5903  001288  C0D6  F01E         	movff	_data,??_ComputeStorageData
  5904  00128C  6A1F               	clrf	(??_ComputeStorageData+1)& (0+255),c
  5905  00128E  C01E  F01F         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  5906  001292  6A1E               	clrf	??_ComputeStorageData,c
  5907  001294  101E               	iorwf	??_ComputeStorageData,w,c
  5908  001296  0100               	movlb	0	; () banked
  5909  001298  6FE2               	movwf	_Currentcomp& (0+255),b
  5910  00129A  501F               	movf	??_ComputeStorageData+1,w,c
  5911  00129C  0100               	movlb	0	; () banked
  5912  00129E  6FE3               	movwf	(_Currentcomp+1)& (0+255),b
  5913                           
  5914                           ;PDU.c: 165: Currentcomp[1] = ((data[2] << 8) | data[3]);
  5915  0012A0  0100               	movlb	0	; () banked
  5916  0012A2  51D9               	movf	(_data+3)& (0+255),w,b
  5917  0012A4  C0D8  F01E         	movff	_data+2,??_ComputeStorageData
  5918  0012A8  6A1F               	clrf	(??_ComputeStorageData+1)& (0+255),c
  5919  0012AA  C01E  F01F         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  5920  0012AE  6A1E               	clrf	??_ComputeStorageData,c
  5921  0012B0  101E               	iorwf	??_ComputeStorageData,w,c
  5922  0012B2  0100               	movlb	0	; () banked
  5923  0012B4  6FE4               	movwf	(_Currentcomp+2)& (0+255),b
  5924  0012B6  501F               	movf	??_ComputeStorageData+1,w,c
  5925  0012B8  0100               	movlb	0	; () banked
  5926  0012BA  6FE5               	movwf	(_Currentcomp+3)& (0+255),b
  5927                           
  5928                           ;PDU.c: 166: Currentcomp[2] = ((data[4] << 8) | data[5]);
  5929  0012BC  0100               	movlb	0	; () banked
  5930  0012BE  51DB               	movf	(_data+5)& (0+255),w,b
  5931  0012C0  C0DA  F01E         	movff	_data+4,??_ComputeStorageData
  5932  0012C4  6A1F               	clrf	(??_ComputeStorageData+1)& (0+255),c
  5933  0012C6  C01E  F01F         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  5934  0012CA  6A1E               	clrf	??_ComputeStorageData,c
  5935  0012CC  101E               	iorwf	??_ComputeStorageData,w,c
  5936  0012CE  0100               	movlb	0	; () banked
  5937  0012D0  6FE6               	movwf	(_Currentcomp+4)& (0+255),b
  5938  0012D2  501F               	movf	??_ComputeStorageData+1,w,c
  5939  0012D4  0100               	movlb	0	; () banked
  5940  0012D6  6FE7               	movwf	(_Currentcomp+5)& (0+255),b
  5941                           
  5942                           ;PDU.c: 167: Currentcomp[3] = ((data[6] << 8) | data[7]);
  5943  0012D8  0100               	movlb	0	; () banked
  5944  0012DA  51DD               	movf	(_data+7)& (0+255),w,b
  5945  0012DC  C0DC  F01E         	movff	_data+6,??_ComputeStorageData
  5946  0012E0  6A1F               	clrf	(??_ComputeStorageData+1)& (0+255),c
  5947  0012E2  C01E  F01F         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  5948  0012E6  6A1E               	clrf	??_ComputeStorageData,c
  5949  0012E8  101E               	iorwf	??_ComputeStorageData,w,c
  5950  0012EA  0100               	movlb	0	; () banked
  5951  0012EC  6FE8               	movwf	(_Currentcomp+6)& (0+255),b
  5952  0012EE  501F               	movf	??_ComputeStorageData+1,w,c
  5953  0012F0  0100               	movlb	0	; () banked
  5954  0012F2  6FE9               	movwf	(_Currentcomp+7)& (0+255),b
  5955                           
  5956                           ;PDU.c: 168: Currentcomp[4] = ((data[8] << 8) | data[9]);
  5957  0012F4  0100               	movlb	0	; () banked
  5958  0012F6  51DF               	movf	(_data+9)& (0+255),w,b
  5959  0012F8  C0DE  F01E         	movff	_data+8,??_ComputeStorageData
  5960  0012FC  6A1F               	clrf	(??_ComputeStorageData+1)& (0+255),c
  5961  0012FE  C01E  F01F         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  5962  001302  6A1E               	clrf	??_ComputeStorageData,c
  5963  001304  101E               	iorwf	??_ComputeStorageData,w,c
  5964  001306  0100               	movlb	0	; () banked
  5965  001308  6FEA               	movwf	(_Currentcomp+8)& (0+255),b
  5966  00130A  501F               	movf	??_ComputeStorageData+1,w,c
  5967  00130C  0100               	movlb	0	; () banked
  5968  00130E  6FEB               	movwf	(_Currentcomp+9)& (0+255),b
  5969                           
  5970                           ;PDU.c: 169: Currentcomp[5] = ((data[10] << 8) | data[11]);
  5971  001310  0100               	movlb	0	; () banked
  5972  001312  51E1               	movf	(_data+11)& (0+255),w,b
  5973  001314  C0E0  F01E         	movff	_data+10,??_ComputeStorageData
  5974  001318  6A1F               	clrf	(??_ComputeStorageData+1)& (0+255),c
  5975  00131A  C01E  F01F         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  5976  00131E  6A1E               	clrf	??_ComputeStorageData,c
  5977  001320  101E               	iorwf	??_ComputeStorageData,w,c
  5978  001322  0100               	movlb	0	; () banked
  5979  001324  6FEC               	movwf	(_Currentcomp+10)& (0+255),b
  5980  001326  501F               	movf	??_ComputeStorageData+1,w,c
  5981  001328  0100               	movlb	0	; () banked
  5982  00132A  6FED               	movwf	(_Currentcomp+11)& (0+255),b
  5983                           
  5984                           ; BSR set to: 0
  5985  00132C  0012               	return		;funcret
  5986  00132E                     __end_of_ComputeStorageData:
  5987                           	opt stack 0
  5988                           tblptru	equ	0xFF8
  5989                           tblptrh	equ	0xFF7
  5990                           tblptrl	equ	0xFF6
  5991                           tablat	equ	0xFF5
  5992                           prodh	equ	0xFF4
  5993                           prodl	equ	0xFF3
  5994                           intcon	equ	0xFF2
  5995                           intcon2	equ	0xFF1
  5996                           postinc0	equ	0xFEE
  5997                           wreg	equ	0xFE8
  5998                           indf1	equ	0xFE7
  5999                           postdec1	equ	0xFE5
  6000                           fsr1h	equ	0xFE2
  6001                           fsr1l	equ	0xFE1
  6002                           indf2	equ	0xFDF
  6003                           postinc2	equ	0xFDE
  6004                           postdec2	equ	0xFDD
  6005                           plusw2	equ	0xFDB
  6006                           fsr2h	equ	0xFDA
  6007                           fsr2l	equ	0xFD9
  6008                           status	equ	0xFD8
  6009                           
  6010 ;; *************** function _DATAEE_ReadByte *****************
  6011 ;; Defined at:
  6012 ;;		line 143 in file "mcc_generated_files/memory.c"
  6013 ;; Parameters:    Size  Location     Type
  6014 ;;  bAdd            1    wreg     unsigned char 
  6015 ;; Auto vars:     Size  Location     Type
  6016 ;;  bAdd            1   28[COMRAM] unsigned char 
  6017 ;; Return value:  Size  Location     Type
  6018 ;;                  1    wreg      unsigned char 
  6019 ;; Registers used:
  6020 ;;		wreg, status,2
  6021 ;; Tracked objects:
  6022 ;;		On entry : 0/0
  6023 ;;		On exit  : 0/0
  6024 ;;		Unchanged: 0/0
  6025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6026 ;;      Params:         0       0       0       0       0       0       0
  6027 ;;      Locals:         1       0       0       0       0       0       0
  6028 ;;      Temps:          0       0       0       0       0       0       0
  6029 ;;      Totals:         1       0       0       0       0       0       0
  6030 ;;Total ram usage:        1 bytes
  6031 ;; Hardware stack levels used:    1
  6032 ;; Hardware stack levels required when called:    6
  6033 ;; This function calls:
  6034 ;;		Nothing
  6035 ;; This function is called by:
  6036 ;;		_ComputeStorageData
  6037 ;; This function uses a non-reentrant model
  6038 ;;
  6039                           
  6040                           	psect	text37
  6041  001E62                     __ptext37:
  6042                           	opt stack 0
  6043  001E62                     _DATAEE_ReadByte:
  6044                           	opt stack 22
  6045                           
  6046                           ; BSR set to: 0
  6047                           ;incstack = 0
  6048                           ;DATAEE_ReadByte@bAdd stored from wreg
  6049  001E62  6E1D               	movwf	DATAEE_ReadByte@bAdd,c
  6050                           
  6051                           ;memory.c: 145: EEADR = (bAdd & 0xFF);
  6052  001E64  C01D  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
  6053                           
  6054                           ;memory.c: 146: EECON1bits.CFGS = 0;
  6055  001E68  9CA6               	bcf	4006,6,c	;volatile
  6056                           
  6057                           ;memory.c: 147: EECON1bits.EEPGD = 0;
  6058  001E6A  9EA6               	bcf	4006,7,c	;volatile
  6059                           
  6060                           ;memory.c: 148: EECON1bits.RD = 1;
  6061  001E6C  80A6               	bsf	4006,0,c	;volatile
  6062                           
  6063                           ;memory.c: 149: __nop();
  6064  001E6E  F000               	nop	
  6065                           
  6066                           ;memory.c: 150: __nop();
  6067  001E70  F000               	nop	
  6068                           
  6069                           ;memory.c: 152: return (EEDATA);
  6070  001E72  50A8               	movf	4008,w,c	;volatile
  6071  001E74  0012               	return	
  6072  001E76                     __end_of_DATAEE_ReadByte:
  6073                           	opt stack 0
  6074                           tblptru	equ	0xFF8
  6075                           tblptrh	equ	0xFF7
  6076                           tblptrl	equ	0xFF6
  6077                           tablat	equ	0xFF5
  6078                           prodh	equ	0xFF4
  6079                           prodl	equ	0xFF3
  6080                           intcon	equ	0xFF2
  6081                           intcon2	equ	0xFF1
  6082                           postinc0	equ	0xFEE
  6083                           wreg	equ	0xFE8
  6084                           indf1	equ	0xFE7
  6085                           postdec1	equ	0xFE5
  6086                           fsr1h	equ	0xFE2
  6087                           fsr1l	equ	0xFE1
  6088                           indf2	equ	0xFDF
  6089                           postinc2	equ	0xFDE
  6090                           postdec2	equ	0xFDD
  6091                           plusw2	equ	0xFDB
  6092                           fsr2h	equ	0xFDA
  6093                           fsr2l	equ	0xFD9
  6094                           status	equ	0xFD8
  6095                           
  6096 ;; *************** function _DATAEE_WriteByte *****************
  6097 ;; Defined at:
  6098 ;;		line 121 in file "mcc_generated_files/memory.c"
  6099 ;; Parameters:    Size  Location     Type
  6100 ;;  bAdd            1    wreg     unsigned char 
  6101 ;;  bData           1   28[COMRAM] unsigned char 
  6102 ;; Auto vars:     Size  Location     Type
  6103 ;;  bAdd            1   29[COMRAM] unsigned char 
  6104 ;;  GIEBitValue     1   30[COMRAM] unsigned char 
  6105 ;; Return value:  Size  Location     Type
  6106 ;;                  1    wreg      void 
  6107 ;; Registers used:
  6108 ;;		wreg, status,2
  6109 ;; Tracked objects:
  6110 ;;		On entry : 0/0
  6111 ;;		On exit  : 0/0
  6112 ;;		Unchanged: 0/0
  6113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6114 ;;      Params:         1       0       0       0       0       0       0
  6115 ;;      Locals:         2       0       0       0       0       0       0
  6116 ;;      Temps:          0       0       0       0       0       0       0
  6117 ;;      Totals:         3       0       0       0       0       0       0
  6118 ;;Total ram usage:        3 bytes
  6119 ;; Hardware stack levels used:    1
  6120 ;; Hardware stack levels required when called:    6
  6121 ;; This function calls:
  6122 ;;		Nothing
  6123 ;; This function is called by:
  6124 ;;		_main
  6125 ;; This function uses a non-reentrant model
  6126 ;;
  6127                           
  6128                           	psect	text38
  6129  001B3E                     __ptext38:
  6130                           	opt stack 0
  6131  001B3E                     _DATAEE_WriteByte:
  6132                           	opt stack 24
  6133                           
  6134                           ;incstack = 0
  6135                           ;DATAEE_WriteByte@bAdd stored from wreg
  6136  001B3E  6E1E               	movwf	DATAEE_WriteByte@bAdd,c
  6137                           
  6138                           ;memory.c: 123: uint8_t GIEBitValue = INTCONbits.GIE;
  6139  001B40  0E00               	movlw	0
  6140  001B42  BEF2               	btfsc	intcon,7,c	;volatile
  6141  001B44  0E01               	movlw	1
  6142  001B46  6E1F               	movwf	DATAEE_WriteByte@GIEBitValue,c
  6143                           
  6144                           ;memory.c: 125: EEADR = (bAdd & 0xFF);
  6145  001B48  C01E  FFA9         	movff	DATAEE_WriteByte@bAdd,4009	;volatile
  6146                           
  6147                           ;memory.c: 126: EEDATA = bData;
  6148  001B4C  C01D  FFA8         	movff	DATAEE_WriteByte@bData,4008	;volatile
  6149                           
  6150                           ;memory.c: 127: EECON1bits.EEPGD = 0;
  6151  001B50  9EA6               	bcf	4006,7,c	;volatile
  6152                           
  6153                           ;memory.c: 128: EECON1bits.CFGS = 0;
  6154  001B52  9CA6               	bcf	4006,6,c	;volatile
  6155                           
  6156                           ;memory.c: 129: EECON1bits.WREN = 1;
  6157  001B54  84A6               	bsf	4006,2,c	;volatile
  6158                           
  6159                           ;memory.c: 130: INTCONbits.GIE = 0;
  6160  001B56  9EF2               	bcf	intcon,7,c	;volatile
  6161                           
  6162                           ;memory.c: 131: EECON2 = 0x55;
  6163  001B58  0E55               	movlw	85
  6164  001B5A  6EA7               	movwf	4007,c	;volatile
  6165                           
  6166                           ;memory.c: 132: EECON2 = 0xAA;
  6167  001B5C  0EAA               	movlw	170
  6168  001B5E  6EA7               	movwf	4007,c	;volatile
  6169                           
  6170                           ;memory.c: 133: EECON1bits.WR = 1;
  6171  001B60  82A6               	bsf	4006,1,c	;volatile
  6172  001B62                     l160:
  6173  001B62  B2A6               	btfsc	4006,1,c	;volatile
  6174  001B64  D7FE               	goto	l160
  6175                           
  6176                           ;memory.c: 137: }
  6177                           ;memory.c: 139: EECON1bits.WREN = 0;
  6178  001B66  94A6               	bcf	4006,2,c	;volatile
  6179                           
  6180                           ;memory.c: 140: INTCONbits.GIE = GIEBitValue;
  6181  001B68  B01F               	btfsc	DATAEE_WriteByte@GIEBitValue,0,c
  6182  001B6A  D002               	bra	u2705
  6183  001B6C  9EF2               	bcf	intcon,7,c	;volatile
  6184  001B6E  D001               	bra	u2706
  6185  001B70                     u2705:
  6186  001B70  8EF2               	bsf	intcon,7,c	;volatile
  6187  001B72                     u2706:
  6188  001B72  0012               	return		;funcret
  6189  001B74                     __end_of_DATAEE_WriteByte:
  6190                           	opt stack 0
  6191                           tblptru	equ	0xFF8
  6192                           tblptrh	equ	0xFF7
  6193                           tblptrl	equ	0xFF6
  6194                           tablat	equ	0xFF5
  6195                           prodh	equ	0xFF4
  6196                           prodl	equ	0xFF3
  6197                           intcon	equ	0xFF2
  6198                           intcon2	equ	0xFF1
  6199                           postinc0	equ	0xFEE
  6200                           wreg	equ	0xFE8
  6201                           indf1	equ	0xFE7
  6202                           postdec1	equ	0xFE5
  6203                           fsr1h	equ	0xFE2
  6204                           fsr1l	equ	0xFE1
  6205                           indf2	equ	0xFDF
  6206                           postinc2	equ	0xFDE
  6207                           postdec2	equ	0xFDD
  6208                           plusw2	equ	0xFDB
  6209                           fsr2h	equ	0xFDA
  6210                           fsr2l	equ	0xFD9
  6211                           status	equ	0xFD8
  6212                           
  6213 ;; *************** function _CoolingStop *****************
  6214 ;; Defined at:
  6215 ;;		line 30 in file "CoolingControl.c"
  6216 ;; Parameters:    Size  Location     Type
  6217 ;;		None
  6218 ;; Auto vars:     Size  Location     Type
  6219 ;;		None
  6220 ;; Return value:  Size  Location     Type
  6221 ;;                  1    wreg      void 
  6222 ;; Registers used:
  6223 ;;		wreg, status,2, status,0, cstack
  6224 ;; Tracked objects:
  6225 ;;		On entry : 0/0
  6226 ;;		On exit  : 0/0
  6227 ;;		Unchanged: 0/0
  6228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6229 ;;      Params:         0       0       0       0       0       0       0
  6230 ;;      Locals:         0       0       0       0       0       0       0
  6231 ;;      Temps:          0       0       0       0       0       0       0
  6232 ;;      Totals:         0       0       0       0       0       0       0
  6233 ;;Total ram usage:        0 bytes
  6234 ;; Hardware stack levels used:    1
  6235 ;; Hardware stack levels required when called:    8
  6236 ;; This function calls:
  6237 ;;		_PWM4_LoadDutyValue
  6238 ;;		_PotClear
  6239 ;; This function is called by:
  6240 ;;		_main
  6241 ;; This function uses a non-reentrant model
  6242 ;;
  6243                           
  6244                           	psect	text39
  6245  001E76                     __ptext39:
  6246                           	opt stack 0
  6247  001E76                     _CoolingStop:
  6248                           	opt stack 22
  6249                           
  6250                           ;CoolingControl.c: 31: PotClear();
  6251                           
  6252                           ;incstack = 0
  6253  001E76  EC97  F009         	call	_PotClear	;wreg free
  6254                           
  6255                           ;CoolingControl.c: 32: PWM4_LoadDutyValue(0);
  6256  001E7A  0E00               	movlw	0
  6257  001E7C  6E1E               	movwf	PWM4_LoadDutyValue@dutyValue+1,c
  6258  001E7E  0E00               	movlw	0
  6259  001E80  6E1D               	movwf	PWM4_LoadDutyValue@dutyValue,c
  6260  001E82  EC06  F00E         	call	_PWM4_LoadDutyValue	;wreg free
  6261  001E86  0012               	return		;funcret
  6262  001E88                     __end_of_CoolingStop:
  6263                           	opt stack 0
  6264                           tblptru	equ	0xFF8
  6265                           tblptrh	equ	0xFF7
  6266                           tblptrl	equ	0xFF6
  6267                           tablat	equ	0xFF5
  6268                           prodh	equ	0xFF4
  6269                           prodl	equ	0xFF3
  6270                           intcon	equ	0xFF2
  6271                           intcon2	equ	0xFF1
  6272                           postinc0	equ	0xFEE
  6273                           wreg	equ	0xFE8
  6274                           indf1	equ	0xFE7
  6275                           postdec1	equ	0xFE5
  6276                           fsr1h	equ	0xFE2
  6277                           fsr1l	equ	0xFE1
  6278                           indf2	equ	0xFDF
  6279                           postinc2	equ	0xFDE
  6280                           postdec2	equ	0xFDD
  6281                           plusw2	equ	0xFDB
  6282                           fsr2h	equ	0xFDA
  6283                           fsr2l	equ	0xFD9
  6284                           status	equ	0xFD8
  6285                           
  6286 ;; *************** function _CoolingStart *****************
  6287 ;; Defined at:
  6288 ;;		line 19 in file "CoolingControl.c"
  6289 ;; Parameters:    Size  Location     Type
  6290 ;;		None
  6291 ;; Auto vars:     Size  Location     Type
  6292 ;;		None
  6293 ;; Return value:  Size  Location     Type
  6294 ;;                  1    wreg      void 
  6295 ;; Registers used:
  6296 ;;		wreg, status,2, status,0, cstack
  6297 ;; Tracked objects:
  6298 ;;		On entry : 0/0
  6299 ;;		On exit  : 0/0
  6300 ;;		Unchanged: 0/0
  6301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6302 ;;      Params:         0       0       0       0       0       0       0
  6303 ;;      Locals:         0       0       0       0       0       0       0
  6304 ;;      Temps:          0       0       0       0       0       0       0
  6305 ;;      Totals:         0       0       0       0       0       0       0
  6306 ;;Total ram usage:        0 bytes
  6307 ;; Hardware stack levels used:    1
  6308 ;; Hardware stack levels required when called:    8
  6309 ;; This function calls:
  6310 ;;		_PWM4_LoadDutyValue
  6311 ;;		_PotClear
  6312 ;;		_PotSetpoint
  6313 ;; This function is called by:
  6314 ;;		_main
  6315 ;; This function uses a non-reentrant model
  6316 ;;
  6317                           
  6318                           	psect	text40
  6319  001DA4                     __ptext40:
  6320                           	opt stack 0
  6321  001DA4                     _CoolingStart:
  6322                           	opt stack 22
  6323                           
  6324                           ;CoolingControl.c: 21: PotClear();
  6325                           
  6326                           ;incstack = 0
  6327  001DA4  EC97  F009         	call	_PotClear	;wreg free
  6328                           
  6329                           ;CoolingControl.c: 22: PotSetpoint(40);
  6330  001DA8  0E00               	movlw	0
  6331  001DAA  6E27               	movwf	PotSetpoint@new_point+1,c
  6332  001DAC  0E28               	movlw	40
  6333  001DAE  6E26               	movwf	PotSetpoint@new_point,c
  6334  001DB0  EC39  F008         	call	_PotSetpoint	;wreg free
  6335                           
  6336                           ;CoolingControl.c: 23: PWM4_LoadDutyValue(1000);
  6337  001DB4  0E03               	movlw	3
  6338  001DB6  6E1E               	movwf	PWM4_LoadDutyValue@dutyValue+1,c
  6339  001DB8  0EE8               	movlw	232
  6340  001DBA  6E1D               	movwf	PWM4_LoadDutyValue@dutyValue,c
  6341  001DBC  EC06  F00E         	call	_PWM4_LoadDutyValue	;wreg free
  6342  001DC0  0012               	return		;funcret
  6343  001DC2                     __end_of_CoolingStart:
  6344                           	opt stack 0
  6345                           tblptru	equ	0xFF8
  6346                           tblptrh	equ	0xFF7
  6347                           tblptrl	equ	0xFF6
  6348                           tablat	equ	0xFF5
  6349                           prodh	equ	0xFF4
  6350                           prodl	equ	0xFF3
  6351                           intcon	equ	0xFF2
  6352                           intcon2	equ	0xFF1
  6353                           postinc0	equ	0xFEE
  6354                           wreg	equ	0xFE8
  6355                           indf1	equ	0xFE7
  6356                           postdec1	equ	0xFE5
  6357                           fsr1h	equ	0xFE2
  6358                           fsr1l	equ	0xFE1
  6359                           indf2	equ	0xFDF
  6360                           postinc2	equ	0xFDE
  6361                           postdec2	equ	0xFDD
  6362                           plusw2	equ	0xFDB
  6363                           fsr2h	equ	0xFDA
  6364                           fsr2l	equ	0xFD9
  6365                           status	equ	0xFD8
  6366                           
  6367 ;; *************** function _PotSetpoint *****************
  6368 ;; Defined at:
  6369 ;;		line 21 in file "DigiPot.c"
  6370 ;; Parameters:    Size  Location     Type
  6371 ;;  new_point       2   37[COMRAM] int 
  6372 ;; Auto vars:     Size  Location     Type
  6373 ;;  new_pos         2    4[BANK0 ] int 
  6374 ;;  x               2    2[BANK0 ] int 
  6375 ;;  set_point       2    0[BANK0 ] int 
  6376 ;; Return value:  Size  Location     Type
  6377 ;;                  1    wreg      void 
  6378 ;; Registers used:
  6379 ;;		wreg, status,2, status,0, cstack
  6380 ;; Tracked objects:
  6381 ;;		On entry : 0/0
  6382 ;;		On exit  : 0/0
  6383 ;;		Unchanged: 0/0
  6384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6385 ;;      Params:         2       0       0       0       0       0       0
  6386 ;;      Locals:         0       6       0       0       0       0       0
  6387 ;;      Temps:          2       0       0       0       0       0       0
  6388 ;;      Totals:         4       6       0       0       0       0       0
  6389 ;;Total ram usage:       10 bytes
  6390 ;; Hardware stack levels used:    1
  6391 ;; Hardware stack levels required when called:    7
  6392 ;; This function calls:
  6393 ;;		_Delay
  6394 ;; This function is called by:
  6395 ;;		_main
  6396 ;;		_CoolingStart
  6397 ;; This function uses a non-reentrant model
  6398 ;;
  6399                           
  6400                           	psect	text41
  6401  001072                     __ptext41:
  6402                           	opt stack 0
  6403  001072                     _PotSetpoint:
  6404                           	opt stack 23
  6405                           
  6406                           ;DigiPot.c: 22: int set_point;
  6407                           ;DigiPot.c: 31: int new_pos = new_point;
  6408                           
  6409                           ;incstack = 0
  6410  001072  C026  F064         	movff	PotSetpoint@new_point,PotSetpoint@new_pos
  6411  001076  C027  F065         	movff	PotSetpoint@new_point+1,PotSetpoint@new_pos+1
  6412                           
  6413                           ;DigiPot.c: 35: LATB5 = 0;
  6414  00107A  9A8A               	bcf	3978,5,c	;volatile
  6415                           
  6416                           ;DigiPot.c: 38: if (new_pos > prev_pos) {
  6417  00107C  0100               	movlb	0	; () banked
  6418  00107E  5164               	movf	PotSetpoint@new_pos& (0+255),w,b
  6419  001080  5C37               	subwf	_prev_pos,w,c
  6420  001082  5038               	movf	_prev_pos+1,w,c
  6421  001084  0A80               	xorlw	128
  6422  001086  6E28               	movwf	??_PotSetpoint& (0+255),c
  6423  001088  0100               	movlb	0	; () banked
  6424  00108A  5165               	movf	(PotSetpoint@new_pos+1)& (0+255),w,b
  6425  00108C  0A80               	xorlw	128
  6426  00108E  5828               	subwfb	??_PotSetpoint& (0+255),w,c
  6427  001090  B0D8               	btfsc	status,0,c
  6428  001092  D013               	goto	l714
  6429                           
  6430                           ; BSR set to: 0
  6431                           ;DigiPot.c: 40: LATB3 = 1;
  6432  001094  868A               	bsf	3978,3,c	;volatile
  6433                           
  6434                           ; BSR set to: 0
  6435                           ;DigiPot.c: 41: set_point = new_pos - prev_pos;
  6436  001096  C037  F028         	movff	_prev_pos,??_PotSetpoint
  6437  00109A  C038  F029         	movff	_prev_pos+1,??_PotSetpoint+1
  6438  00109E  1E28               	comf	??_PotSetpoint,f,c
  6439  0010A0  1E29               	comf	??_PotSetpoint+1,f,c
  6440  0010A2  4A28               	infsnz	??_PotSetpoint,f,c
  6441  0010A4  2A29               	incf	??_PotSetpoint+1,f,c
  6442  0010A6  0100               	movlb	0	; () banked
  6443  0010A8  5164               	movf	PotSetpoint@new_pos& (0+255),w,b
  6444  0010AA  2428               	addwf	??_PotSetpoint,w,c
  6445  0010AC  0100               	movlb	0	; () banked
  6446  0010AE  6F60               	movwf	PotSetpoint@set_point& (0+255),b
  6447  0010B0  0100               	movlb	0	; () banked
  6448  0010B2  5165               	movf	(PotSetpoint@new_pos+1)& (0+255),w,b
  6449  0010B4  2029               	addwfc	??_PotSetpoint+1,w,c
  6450  0010B6  0100               	movlb	0	; () banked
  6451  0010B8  6F61               	movwf	(PotSetpoint@set_point+1)& (0+255),b
  6452  0010BA                     l714:
  6453                           
  6454                           ; BSR set to: 0
  6455                           ;DigiPot.c: 42: }
  6456                           ;DigiPot.c: 43: if (new_pos < prev_pos) {
  6457  0010BA  5037               	movf	_prev_pos,w,c
  6458  0010BC  0100               	movlb	0	; () banked
  6459  0010BE  5D64               	subwf	PotSetpoint@new_pos& (0+255),w,b
  6460  0010C0  0100               	movlb	0	; () banked
  6461  0010C2  5165               	movf	(PotSetpoint@new_pos+1)& (0+255),w,b
  6462  0010C4  0A80               	xorlw	128
  6463  0010C6  6E28               	movwf	??_PotSetpoint& (0+255),c
  6464  0010C8  5038               	movf	_prev_pos+1,w,c
  6465  0010CA  0A80               	xorlw	128
  6466  0010CC  5828               	subwfb	??_PotSetpoint& (0+255),w,c
  6467  0010CE  B0D8               	btfsc	status,0,c
  6468  0010D0  D011               	goto	l4223
  6469                           
  6470                           ; BSR set to: 0
  6471                           ;DigiPot.c: 45: LATB3 = 0;
  6472  0010D2  968A               	bcf	3978,3,c	;volatile
  6473                           
  6474                           ; BSR set to: 0
  6475                           ;DigiPot.c: 46: set_point = prev_pos - new_pos;
  6476  0010D4  C064  F028         	movff	PotSetpoint@new_pos,??_PotSetpoint
  6477  0010D8  C065  F029         	movff	PotSetpoint@new_pos+1,??_PotSetpoint+1
  6478  0010DC  1E28               	comf	??_PotSetpoint,f,c
  6479  0010DE  1E29               	comf	??_PotSetpoint+1,f,c
  6480  0010E0  4A28               	infsnz	??_PotSetpoint,f,c
  6481  0010E2  2A29               	incf	??_PotSetpoint+1,f,c
  6482  0010E4  5037               	movf	_prev_pos,w,c
  6483  0010E6  2428               	addwf	??_PotSetpoint,w,c
  6484  0010E8  0100               	movlb	0	; () banked
  6485  0010EA  6F60               	movwf	PotSetpoint@set_point& (0+255),b
  6486  0010EC  5038               	movf	_prev_pos+1,w,c
  6487  0010EE  2029               	addwfc	??_PotSetpoint+1,w,c
  6488  0010F0  0100               	movlb	0	; () banked
  6489  0010F2  6F61               	movwf	(PotSetpoint@set_point+1)& (0+255),b
  6490  0010F4                     l4223:
  6491                           
  6492                           ; BSR set to: 0
  6493                           ;DigiPot.c: 47: }
  6494                           ;DigiPot.c: 48: Delay(1);
  6495  0010F4  0E01               	movlw	1
  6496  0010F6  6E1D               	movwf	Delay@wait,c
  6497  0010F8  0E00               	movlw	0
  6498  0010FA  6E1E               	movwf	Delay@wait+1,c
  6499  0010FC  0E00               	movlw	0
  6500  0010FE  6E1F               	movwf	Delay@wait+2,c
  6501  001100  0E00               	movlw	0
  6502  001102  6E20               	movwf	Delay@wait+3,c
  6503  001104  EC37  F00D         	call	_Delay	;wreg free
  6504                           
  6505                           ;DigiPot.c: 50: int x;
  6506                           ;DigiPot.c: 52: for (x = 0; x < set_point; x++) {
  6507  001108  0E00               	movlw	0
  6508  00110A  0100               	movlb	0	; () banked
  6509  00110C  6F63               	movwf	(PotSetpoint@x+1)& (0+255),b
  6510  00110E  0E00               	movlw	0
  6511  001110  6F62               	movwf	PotSetpoint@x& (0+255),b
  6512  001112  D019               	goto	l4233
  6513  001114                     l717:
  6514                           
  6515                           ; BSR set to: 0
  6516                           ;DigiPot.c: 53: LATB4 = 1;
  6517  001114  888A               	bsf	3978,4,c	;volatile
  6518                           
  6519                           ; BSR set to: 0
  6520                           ;DigiPot.c: 54: Delay(1);
  6521  001116  0E01               	movlw	1
  6522  001118  6E1D               	movwf	Delay@wait,c
  6523  00111A  0E00               	movlw	0
  6524  00111C  6E1E               	movwf	Delay@wait+1,c
  6525  00111E  0E00               	movlw	0
  6526  001120  6E1F               	movwf	Delay@wait+2,c
  6527  001122  0E00               	movlw	0
  6528  001124  6E20               	movwf	Delay@wait+3,c
  6529  001126  EC37  F00D         	call	_Delay	;wreg free
  6530                           
  6531                           ;DigiPot.c: 55: LATB4 = 0;
  6532  00112A  988A               	bcf	3978,4,c	;volatile
  6533                           
  6534                           ;DigiPot.c: 56: Delay(1);
  6535  00112C  0E01               	movlw	1
  6536  00112E  6E1D               	movwf	Delay@wait,c
  6537  001130  0E00               	movlw	0
  6538  001132  6E1E               	movwf	Delay@wait+1,c
  6539  001134  0E00               	movlw	0
  6540  001136  6E1F               	movwf	Delay@wait+2,c
  6541  001138  0E00               	movlw	0
  6542  00113A  6E20               	movwf	Delay@wait+3,c
  6543  00113C  EC37  F00D         	call	_Delay	;wreg free
  6544  001140  0100               	movlb	0	; () banked
  6545  001142  4B62               	infsnz	PotSetpoint@x& (0+255),f,b
  6546  001144  2B63               	incf	(PotSetpoint@x+1)& (0+255),f,b
  6547  001146                     l4233:
  6548                           
  6549                           ; BSR set to: 0
  6550  001146  0100               	movlb	0	; () banked
  6551  001148  5160               	movf	PotSetpoint@set_point& (0+255),w,b
  6552  00114A  0100               	movlb	0	; () banked
  6553  00114C  5D62               	subwf	PotSetpoint@x& (0+255),w,b
  6554  00114E  0100               	movlb	0	; () banked
  6555  001150  5163               	movf	(PotSetpoint@x+1)& (0+255),w,b
  6556  001152  0A80               	xorlw	128
  6557  001154  6E28               	movwf	??_PotSetpoint& (0+255),c
  6558  001156  0100               	movlb	0	; () banked
  6559  001158  5161               	movf	(PotSetpoint@set_point+1)& (0+255),w,b
  6560  00115A  0A80               	xorlw	128
  6561  00115C  5828               	subwfb	??_PotSetpoint& (0+255),w,c
  6562  00115E  A0D8               	btfss	status,0,c
  6563  001160  D7D9               	goto	l717
  6564                           
  6565                           ; BSR set to: 0
  6566                           ;DigiPot.c: 57: }
  6567                           ;DigiPot.c: 59: LATB5 = 1;
  6568  001162  8A8A               	bsf	3978,5,c	;volatile
  6569                           
  6570                           ;DigiPot.c: 60: prev_pos = new_pos;
  6571  001164  C064  F037         	movff	PotSetpoint@new_pos,_prev_pos
  6572  001168  C065  F038         	movff	PotSetpoint@new_pos+1,_prev_pos+1
  6573                           
  6574                           ; BSR set to: 0
  6575  00116C  0012               	return		;funcret
  6576  00116E                     __end_of_PotSetpoint:
  6577                           	opt stack 0
  6578                           tblptru	equ	0xFF8
  6579                           tblptrh	equ	0xFF7
  6580                           tblptrl	equ	0xFF6
  6581                           tablat	equ	0xFF5
  6582                           prodh	equ	0xFF4
  6583                           prodl	equ	0xFF3
  6584                           intcon	equ	0xFF2
  6585                           intcon2	equ	0xFF1
  6586                           postinc0	equ	0xFEE
  6587                           wreg	equ	0xFE8
  6588                           indf1	equ	0xFE7
  6589                           postdec1	equ	0xFE5
  6590                           fsr1h	equ	0xFE2
  6591                           fsr1l	equ	0xFE1
  6592                           indf2	equ	0xFDF
  6593                           postinc2	equ	0xFDE
  6594                           postdec2	equ	0xFDD
  6595                           plusw2	equ	0xFDB
  6596                           fsr2h	equ	0xFDA
  6597                           fsr2l	equ	0xFD9
  6598                           status	equ	0xFD8
  6599                           
  6600 ;; *************** function _PotClear *****************
  6601 ;; Defined at:
  6602 ;;		line 66 in file "DigiPot.c"
  6603 ;; Parameters:    Size  Location     Type
  6604 ;;		None
  6605 ;; Auto vars:     Size  Location     Type
  6606 ;;  x               2   37[COMRAM] int 
  6607 ;; Return value:  Size  Location     Type
  6608 ;;                  1    wreg      void 
  6609 ;; Registers used:
  6610 ;;		wreg, status,2, status,0, cstack
  6611 ;; Tracked objects:
  6612 ;;		On entry : 0/0
  6613 ;;		On exit  : 0/0
  6614 ;;		Unchanged: 0/0
  6615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6616 ;;      Params:         0       0       0       0       0       0       0
  6617 ;;      Locals:         2       0       0       0       0       0       0
  6618 ;;      Temps:          0       0       0       0       0       0       0
  6619 ;;      Totals:         2       0       0       0       0       0       0
  6620 ;;Total ram usage:        2 bytes
  6621 ;; Hardware stack levels used:    1
  6622 ;; Hardware stack levels required when called:    7
  6623 ;; This function calls:
  6624 ;;		_Delay
  6625 ;; This function is called by:
  6626 ;;		_CoolingStart
  6627 ;;		_CoolingStop
  6628 ;; This function uses a non-reentrant model
  6629 ;;
  6630                           
  6631                           	psect	text42
  6632  00132E                     __ptext42:
  6633                           	opt stack 0
  6634  00132E                     _PotClear:
  6635                           	opt stack 22
  6636                           
  6637                           ;DigiPot.c: 67: Delay(1);
  6638                           
  6639                           ; BSR set to: 0
  6640                           ;incstack = 0
  6641  00132E  0E01               	movlw	1
  6642  001330  6E1D               	movwf	Delay@wait,c
  6643  001332  0E00               	movlw	0
  6644  001334  6E1E               	movwf	Delay@wait+1,c
  6645  001336  0E00               	movlw	0
  6646  001338  6E1F               	movwf	Delay@wait+2,c
  6647  00133A  0E00               	movlw	0
  6648  00133C  6E20               	movwf	Delay@wait+3,c
  6649  00133E  EC37  F00D         	call	_Delay	;wreg free
  6650                           
  6651                           ;DigiPot.c: 69: LATB5 = 0;
  6652  001342  9A8A               	bcf	3978,5,c	;volatile
  6653                           
  6654                           ;DigiPot.c: 70: Delay(1);
  6655  001344  0E01               	movlw	1
  6656  001346  6E1D               	movwf	Delay@wait,c
  6657  001348  0E00               	movlw	0
  6658  00134A  6E1E               	movwf	Delay@wait+1,c
  6659  00134C  0E00               	movlw	0
  6660  00134E  6E1F               	movwf	Delay@wait+2,c
  6661  001350  0E00               	movlw	0
  6662  001352  6E20               	movwf	Delay@wait+3,c
  6663  001354  EC37  F00D         	call	_Delay	;wreg free
  6664                           
  6665                           ;DigiPot.c: 71: LATB3 = 0;
  6666  001358  968A               	bcf	3978,3,c	;volatile
  6667                           
  6668                           ;DigiPot.c: 72: Delay(1);
  6669  00135A  0E01               	movlw	1
  6670  00135C  6E1D               	movwf	Delay@wait,c
  6671  00135E  0E00               	movlw	0
  6672  001360  6E1E               	movwf	Delay@wait+1,c
  6673  001362  0E00               	movlw	0
  6674  001364  6E1F               	movwf	Delay@wait+2,c
  6675  001366  0E00               	movlw	0
  6676  001368  6E20               	movwf	Delay@wait+3,c
  6677  00136A  EC37  F00D         	call	_Delay	;wreg free
  6678                           
  6679                           ;DigiPot.c: 73: int x;
  6680                           ;DigiPot.c: 74: for (x = 0; x < 32; x++) {
  6681  00136E  0E00               	movlw	0
  6682  001370  6E27               	movwf	PotClear@x+1,c
  6683  001372  0E00               	movlw	0
  6684  001374  6E26               	movwf	PotClear@x,c
  6685  001376  BE27               	btfsc	PotClear@x+1,7,c
  6686  001378  D006               	goto	l722
  6687  00137A  5027               	movf	PotClear@x+1,w,c
  6688  00137C  E121               	bnz	l723
  6689  00137E  0E20               	movlw	32
  6690  001380  5C26               	subwf	PotClear@x,w,c
  6691  001382  B0D8               	btfsc	status,0,c
  6692  001384  D01D               	goto	l723
  6693  001386                     l722:
  6694                           
  6695                           ;DigiPot.c: 75: LATB4 = 1;
  6696  001386  888A               	bsf	3978,4,c	;volatile
  6697                           
  6698                           ;DigiPot.c: 76: Delay(1);
  6699  001388  0E01               	movlw	1
  6700  00138A  6E1D               	movwf	Delay@wait,c
  6701  00138C  0E00               	movlw	0
  6702  00138E  6E1E               	movwf	Delay@wait+1,c
  6703  001390  0E00               	movlw	0
  6704  001392  6E1F               	movwf	Delay@wait+2,c
  6705  001394  0E00               	movlw	0
  6706  001396  6E20               	movwf	Delay@wait+3,c
  6707  001398  EC37  F00D         	call	_Delay	;wreg free
  6708                           
  6709                           ;DigiPot.c: 77: LATB4 = 0;
  6710  00139C  988A               	bcf	3978,4,c	;volatile
  6711                           
  6712                           ;DigiPot.c: 78: Delay(1);
  6713  00139E  0E01               	movlw	1
  6714  0013A0  6E1D               	movwf	Delay@wait,c
  6715  0013A2  0E00               	movlw	0
  6716  0013A4  6E1E               	movwf	Delay@wait+1,c
  6717  0013A6  0E00               	movlw	0
  6718  0013A8  6E1F               	movwf	Delay@wait+2,c
  6719  0013AA  0E00               	movlw	0
  6720  0013AC  6E20               	movwf	Delay@wait+3,c
  6721  0013AE  EC37  F00D         	call	_Delay	;wreg free
  6722  0013B2  4A26               	infsnz	PotClear@x,f,c
  6723  0013B4  2A27               	incf	PotClear@x+1,f,c
  6724  0013B6  BE27               	btfsc	PotClear@x+1,7,c
  6725  0013B8  D7E6               	goto	l722
  6726  0013BA  5027               	movf	PotClear@x+1,w,c
  6727  0013BC  E101               	bnz	u2680
  6728  0013BE  D7DF               	goto	L1
  6729  0013C0                     u2680:
  6730  0013C0                     l723:
  6731                           
  6732                           ;DigiPot.c: 79: }
  6733                           ;DigiPot.c: 80: LATB4 = 1;
  6734  0013C0  888A               	bsf	3978,4,c	;volatile
  6735                           
  6736                           ;DigiPot.c: 81: Delay(1);
  6737  0013C2  0E01               	movlw	1
  6738  0013C4  6E1D               	movwf	Delay@wait,c
  6739  0013C6  0E00               	movlw	0
  6740  0013C8  6E1E               	movwf	Delay@wait+1,c
  6741  0013CA  0E00               	movlw	0
  6742  0013CC  6E1F               	movwf	Delay@wait+2,c
  6743  0013CE  0E00               	movlw	0
  6744  0013D0  6E20               	movwf	Delay@wait+3,c
  6745  0013D2  EC37  F00D         	call	_Delay	;wreg free
  6746                           
  6747                           ;DigiPot.c: 83: LATB5 = 1;
  6748  0013D6  8A8A               	bsf	3978,5,c	;volatile
  6749                           
  6750                           ;DigiPot.c: 84: prev_pos = 0;
  6751  0013D8  0E00               	movlw	0
  6752  0013DA  6E38               	movwf	_prev_pos+1,c
  6753  0013DC  0E00               	movlw	0
  6754  0013DE  6E37               	movwf	_prev_pos,c
  6755                           
  6756                           ;DigiPot.c: 85: Delay(1);
  6757  0013E0  0E01               	movlw	1
  6758  0013E2  6E1D               	movwf	Delay@wait,c
  6759  0013E4  0E00               	movlw	0
  6760  0013E6  6E1E               	movwf	Delay@wait+1,c
  6761  0013E8  0E00               	movlw	0
  6762  0013EA  6E1F               	movwf	Delay@wait+2,c
  6763  0013EC  0E00               	movlw	0
  6764  0013EE  6E20               	movwf	Delay@wait+3,c
  6765  0013F0  EC37  F00D         	call	_Delay	;wreg free
  6766  0013F4  0012               	return		;funcret
  6767  0013F6                     __end_of_PotClear:
  6768                           	opt stack 0
  6769                           tblptru	equ	0xFF8
  6770                           tblptrh	equ	0xFF7
  6771                           tblptrl	equ	0xFF6
  6772                           tablat	equ	0xFF5
  6773                           prodh	equ	0xFF4
  6774                           prodl	equ	0xFF3
  6775                           intcon	equ	0xFF2
  6776                           intcon2	equ	0xFF1
  6777                           postinc0	equ	0xFEE
  6778                           wreg	equ	0xFE8
  6779                           indf1	equ	0xFE7
  6780                           postdec1	equ	0xFE5
  6781                           fsr1h	equ	0xFE2
  6782                           fsr1l	equ	0xFE1
  6783                           indf2	equ	0xFDF
  6784                           postinc2	equ	0xFDE
  6785                           postdec2	equ	0xFDD
  6786                           plusw2	equ	0xFDB
  6787                           fsr2h	equ	0xFDA
  6788                           fsr2l	equ	0xFD9
  6789                           status	equ	0xFD8
  6790                           
  6791 ;; *************** function _Delay *****************
  6792 ;; Defined at:
  6793 ;;		line 9 in file "Functions.c"
  6794 ;; Parameters:    Size  Location     Type
  6795 ;;  wait            4   28[COMRAM] long 
  6796 ;; Auto vars:     Size  Location     Type
  6797 ;;  i               4   33[COMRAM] long 
  6798 ;; Return value:  Size  Location     Type
  6799 ;;                  1    wreg      void 
  6800 ;; Registers used:
  6801 ;;		wreg, status,2, status,0
  6802 ;; Tracked objects:
  6803 ;;		On entry : 0/0
  6804 ;;		On exit  : 0/0
  6805 ;;		Unchanged: 0/0
  6806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6807 ;;      Params:         4       0       0       0       0       0       0
  6808 ;;      Locals:         4       0       0       0       0       0       0
  6809 ;;      Temps:          1       0       0       0       0       0       0
  6810 ;;      Totals:         9       0       0       0       0       0       0
  6811 ;;Total ram usage:        9 bytes
  6812 ;; Hardware stack levels used:    1
  6813 ;; Hardware stack levels required when called:    6
  6814 ;; This function calls:
  6815 ;;		Nothing
  6816 ;; This function is called by:
  6817 ;;		_StartUp595
  6818 ;;		_writeRegisters
  6819 ;;		_PotSetpoint
  6820 ;;		_PotClear
  6821 ;;		_receiveData
  6822 ;;		_ComController
  6823 ;; This function uses a non-reentrant model
  6824 ;;
  6825                           
  6826                           	psect	text43
  6827  001A6E                     __ptext43:
  6828                           	opt stack 0
  6829  001A6E                     _Delay:
  6830                           	opt stack 22
  6831                           
  6832                           ;Functions.c: 10: long int i = 0;
  6833                           
  6834                           ;incstack = 0
  6835  001A6E  0E00               	movlw	0
  6836  001A70  6E22               	movwf	Delay@i,c
  6837  001A72  0E00               	movlw	0
  6838  001A74  6E23               	movwf	Delay@i+1,c
  6839  001A76  0E00               	movlw	0
  6840  001A78  6E24               	movwf	Delay@i+2,c
  6841  001A7A  0E00               	movlw	0
  6842  001A7C  6E25               	movwf	Delay@i+3,c
  6843                           
  6844                           ;Functions.c: 11: for (; wait > i; i++) {
  6845  001A7E  D00D               	goto	l3705
  6846  001A80                     l3701:
  6847                           
  6848                           ;Functions.c: 12: _delay((unsigned long)((1)*(8000000/4000.0)));
  6849  001A80  0E03               	movlw	3
  6850  001A82  6E21               	movwf	??_Delay& (0+255),c
  6851  001A84  0E98               	movlw	152
  6852  001A86                     u2827:
  6853  001A86  2EE8               	decfsz	wreg,f,c
  6854  001A88  D7FE               	bra	u2827
  6855  001A8A  2E21               	decfsz	??_Delay& (0+255),f,c
  6856  001A8C  D7FC               	bra	u2827
  6857  001A8E  0E01               	movlw	1
  6858  001A90  2622               	addwf	Delay@i,f,c
  6859  001A92  0E00               	movlw	0
  6860  001A94  2223               	addwfc	Delay@i+1,f,c
  6861  001A96  2224               	addwfc	Delay@i+2,f,c
  6862  001A98  2225               	addwfc	Delay@i+3,f,c
  6863  001A9A                     l3705:
  6864  001A9A  501D               	movf	Delay@wait,w,c
  6865  001A9C  5C22               	subwf	Delay@i,w,c
  6866  001A9E  501E               	movf	Delay@wait+1,w,c
  6867  001AA0  5823               	subwfb	Delay@i+1,w,c
  6868  001AA2  501F               	movf	Delay@wait+2,w,c
  6869  001AA4  5824               	subwfb	Delay@i+2,w,c
  6870  001AA6  5025               	movf	Delay@i+3,w,c
  6871  001AA8  0A80               	xorlw	128
  6872  001AAA  6E21               	movwf	??_Delay& (0+255),c
  6873  001AAC  5020               	movf	Delay@wait+3,w,c
  6874  001AAE  0A80               	xorlw	128
  6875  001AB0  5821               	subwfb	??_Delay& (0+255),w,c
  6876  001AB2  B0D8               	btfsc	status,0,c
  6877  001AB4  0012               	return	
  6878  001AB6  D7E4               	goto	l3701
  6879  001AB8                     __end_of_Delay:
  6880                           	opt stack 0
  6881                           tblptru	equ	0xFF8
  6882                           tblptrh	equ	0xFF7
  6883                           tblptrl	equ	0xFF6
  6884                           tablat	equ	0xFF5
  6885                           prodh	equ	0xFF4
  6886                           prodl	equ	0xFF3
  6887                           intcon	equ	0xFF2
  6888                           intcon2	equ	0xFF1
  6889                           postinc0	equ	0xFEE
  6890                           wreg	equ	0xFE8
  6891                           indf1	equ	0xFE7
  6892                           postdec1	equ	0xFE5
  6893                           fsr1h	equ	0xFE2
  6894                           fsr1l	equ	0xFE1
  6895                           indf2	equ	0xFDF
  6896                           postinc2	equ	0xFDE
  6897                           postdec2	equ	0xFDD
  6898                           plusw2	equ	0xFDB
  6899                           fsr2h	equ	0xFDA
  6900                           fsr2l	equ	0xFD9
  6901                           status	equ	0xFD8
  6902                           
  6903 ;; *************** function _PWM4_LoadDutyValue *****************
  6904 ;; Defined at:
  6905 ;;		line 81 in file "mcc_generated_files/pwm4.c"
  6906 ;; Parameters:    Size  Location     Type
  6907 ;;  dutyValue       2   28[COMRAM] unsigned int 
  6908 ;; Auto vars:     Size  Location     Type
  6909 ;;		None
  6910 ;; Return value:  Size  Location     Type
  6911 ;;                  1    wreg      void 
  6912 ;; Registers used:
  6913 ;;		wreg, status,2, status,0
  6914 ;; Tracked objects:
  6915 ;;		On entry : 0/0
  6916 ;;		On exit  : 0/0
  6917 ;;		Unchanged: 0/0
  6918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6919 ;;      Params:         2       0       0       0       0       0       0
  6920 ;;      Locals:         0       0       0       0       0       0       0
  6921 ;;      Temps:          2       0       0       0       0       0       0
  6922 ;;      Totals:         4       0       0       0       0       0       0
  6923 ;;Total ram usage:        4 bytes
  6924 ;; Hardware stack levels used:    1
  6925 ;; Hardware stack levels required when called:    6
  6926 ;; This function calls:
  6927 ;;		Nothing
  6928 ;; This function is called by:
  6929 ;;		_main
  6930 ;;		_CoolingStart
  6931 ;;		_CoolingStop
  6932 ;; This function uses a non-reentrant model
  6933 ;;
  6934                           
  6935                           	psect	text44
  6936  001C0C                     __ptext44:
  6937                           	opt stack 0
  6938  001C0C                     _PWM4_LoadDutyValue:
  6939                           	opt stack 24
  6940                           
  6941                           ;pwm4.c: 84: CCPR2L = ((dutyValue & 0x03FC)>>2);
  6942                           
  6943                           ;incstack = 0
  6944  001C0C  C01D  F01F         	movff	PWM4_LoadDutyValue@dutyValue,??_PWM4_LoadDutyValue
  6945  001C10  C01E  F020         	movff	PWM4_LoadDutyValue@dutyValue+1,??_PWM4_LoadDutyValue+1
  6946  001C14  90D8               	bcf	status,0,c
  6947  001C16  3220               	rrcf	??_PWM4_LoadDutyValue+1,f,c
  6948  001C18  321F               	rrcf	??_PWM4_LoadDutyValue,f,c
  6949  001C1A  90D8               	bcf	status,0,c
  6950  001C1C  3220               	rrcf	??_PWM4_LoadDutyValue+1,f,c
  6951  001C1E  321F               	rrcf	??_PWM4_LoadDutyValue,f,c
  6952  001C20  501F               	movf	??_PWM4_LoadDutyValue,w,c
  6953  001C22  6E67               	movwf	3943,c	;volatile
  6954                           
  6955                           ;pwm4.c: 87: CCP2CON = (CCP2CON & 0xCF) | ((dutyValue & 0x0003)<<4);
  6956  001C24  C01D  F01F         	movff	PWM4_LoadDutyValue@dutyValue,??_PWM4_LoadDutyValue
  6957  001C28  0E03               	movlw	3
  6958  001C2A  161F               	andwf	??_PWM4_LoadDutyValue,f,c
  6959  001C2C  3A1F               	swapf	??_PWM4_LoadDutyValue,f,c
  6960  001C2E  0EF0               	movlw	240
  6961  001C30  161F               	andwf	??_PWM4_LoadDutyValue,f,c
  6962  001C32  5066               	movf	3942,w,c	;volatile
  6963  001C34  0BCF               	andlw	207
  6964  001C36  101F               	iorwf	??_PWM4_LoadDutyValue,w,c
  6965  001C38  6E66               	movwf	3942,c	;volatile
  6966  001C3A  0012               	return		;funcret
  6967  001C3C                     __end_of_PWM4_LoadDutyValue:
  6968                           	opt stack 0
  6969                           tblptru	equ	0xFF8
  6970                           tblptrh	equ	0xFF7
  6971                           tblptrl	equ	0xFF6
  6972                           tablat	equ	0xFF5
  6973                           prodh	equ	0xFF4
  6974                           prodl	equ	0xFF3
  6975                           intcon	equ	0xFF2
  6976                           intcon2	equ	0xFF1
  6977                           postinc0	equ	0xFEE
  6978                           wreg	equ	0xFE8
  6979                           indf1	equ	0xFE7
  6980                           postdec1	equ	0xFE5
  6981                           fsr1h	equ	0xFE2
  6982                           fsr1l	equ	0xFE1
  6983                           indf2	equ	0xFDF
  6984                           postinc2	equ	0xFDE
  6985                           postdec2	equ	0xFDD
  6986                           plusw2	equ	0xFDB
  6987                           fsr2h	equ	0xFDA
  6988                           fsr2l	equ	0xFD9
  6989                           status	equ	0xFD8
  6990                           
  6991 ;; *************** function _CoolingCheck *****************
  6992 ;; Defined at:
  6993 ;;		line 229 in file "PDU.c"
  6994 ;; Parameters:    Size  Location     Type
  6995 ;;		None
  6996 ;; Auto vars:     Size  Location     Type
  6997 ;;		None
  6998 ;; Return value:  Size  Location     Type
  6999 ;;                  1    wreg      unsigned char 
  7000 ;; Registers used:
  7001 ;;		wreg, status,2
  7002 ;; Tracked objects:
  7003 ;;		On entry : 0/0
  7004 ;;		On exit  : 0/0
  7005 ;;		Unchanged: 0/0
  7006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7007 ;;      Params:         0       0       0       0       0       0       0
  7008 ;;      Locals:         0       0       0       0       0       0       0
  7009 ;;      Temps:          0       0       0       0       0       0       0
  7010 ;;      Totals:         0       0       0       0       0       0       0
  7011 ;;Total ram usage:        0 bytes
  7012 ;; Hardware stack levels used:    1
  7013 ;; Hardware stack levels required when called:    6
  7014 ;; This function calls:
  7015 ;;		Nothing
  7016 ;; This function is called by:
  7017 ;;		_main
  7018 ;; This function uses a non-reentrant model
  7019 ;;
  7020                           
  7021                           	psect	text45
  7022  001ED0                     __ptext45:
  7023                           	opt stack 0
  7024  001ED0                     _CoolingCheck:
  7025                           	opt stack 24
  7026                           
  7027                           ;PDU.c: 230: return MCSOn;
  7028                           
  7029                           ;incstack = 0
  7030  001ED0  503B               	movf	_MCSOn,w,c
  7031  001ED2  0012               	return	
  7032  001ED4                     __end_of_CoolingCheck:
  7033                           	opt stack 0
  7034                           tblptru	equ	0xFF8
  7035                           tblptrh	equ	0xFF7
  7036                           tblptrl	equ	0xFF6
  7037                           tablat	equ	0xFF5
  7038                           prodh	equ	0xFF4
  7039                           prodl	equ	0xFF3
  7040                           intcon	equ	0xFF2
  7041                           intcon2	equ	0xFF1
  7042                           postinc0	equ	0xFEE
  7043                           wreg	equ	0xFE8
  7044                           indf1	equ	0xFE7
  7045                           postdec1	equ	0xFE5
  7046                           fsr1h	equ	0xFE2
  7047                           fsr1l	equ	0xFE1
  7048                           indf2	equ	0xFDF
  7049                           postinc2	equ	0xFDE
  7050                           postdec2	equ	0xFDD
  7051                           plusw2	equ	0xFDB
  7052                           fsr2h	equ	0xFDA
  7053                           fsr2l	equ	0xFD9
  7054                           status	equ	0xFD8
  7055                           
  7056 ;; *************** function _INTERRUPT_InterruptManager *****************
  7057 ;; Defined at:
  7058 ;;		line 67 in file "mcc_generated_files/interrupt_manager.c"
  7059 ;; Parameters:    Size  Location     Type
  7060 ;;		None
  7061 ;; Auto vars:     Size  Location     Type
  7062 ;;		None
  7063 ;; Return value:  Size  Location     Type
  7064 ;;                  1    wreg      void 
  7065 ;; Registers used:
  7066 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7067 ;; Tracked objects:
  7068 ;;		On entry : 0/0
  7069 ;;		On exit  : 0/0
  7070 ;;		Unchanged: 0/0
  7071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7072 ;;      Params:         0       0       0       0       0       0       0
  7073 ;;      Locals:         0       0       0       0       0       0       0
  7074 ;;      Temps:         14       0       0       0       0       0       0
  7075 ;;      Totals:        14       0       0       0       0       0       0
  7076 ;;Total ram usage:       14 bytes
  7077 ;; Hardware stack levels used:    1
  7078 ;; Hardware stack levels required when called:    5
  7079 ;; This function calls:
  7080 ;;		_ADC_ISR
  7081 ;;		_EUSART1_Receive_ISR
  7082 ;;		_EUSART1_Transmit_ISR
  7083 ;;		_TMR1_ISR
  7084 ;; This function is called by:
  7085 ;;		Interrupt level 2
  7086 ;; This function uses a non-reentrant model
  7087 ;;
  7088                           
  7089                           	psect	intcode
  7090  000008                     __pintcode:
  7091                           	opt stack 0
  7092  000008                     _INTERRUPT_InterruptManager:
  7093                           	opt stack 18
  7094                           
  7095                           ;incstack = 0
  7096  000008  8243               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7097  00000A  CFFA F00F          	movff	pclath,??_INTERRUPT_InterruptManager
  7098  00000E  CFFB F010          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  7099  000012  CFE9 F011          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  7100  000016  CFEA F012          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  7101  00001A  CFE1 F013          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  7102  00001E  CFE2 F014          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  7103  000022  CFD9 F015          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  7104  000026  CFDA F016          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  7105  00002A  CFF3 F017          	movff	prodl,??_INTERRUPT_InterruptManager+8
  7106  00002E  CFF4 F018          	movff	prodh,??_INTERRUPT_InterruptManager+9
  7107  000032  CFF6 F019          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  7108  000036  CFF7 F01A          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  7109  00003A  CFF8 F01B          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  7110  00003E  CFF5 F01C          	movff	tablat,??_INTERRUPT_InterruptManager+13
  7111                           
  7112                           ;interrupt_manager.c: 70: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  7113  000042  BA9D               	btfsc	3997,5,c	;volatile
  7114  000044  AA9E               	btfss	3998,5,c	;volatile
  7115  000046  D003               	goto	i2l67
  7116                           
  7117                           ;interrupt_manager.c: 71: {
  7118                           ;interrupt_manager.c: 72: EUSART1_Receive_ISR();
  7119  000048  ECE1  F00E         	call	_EUSART1_Receive_ISR	;wreg free
  7120                           
  7121                           ;interrupt_manager.c: 73: }
  7122  00004C  D011               	goto	i2l75
  7123  00004E                     i2l67:
  7124                           
  7125                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  7126  00004E  B89D               	btfsc	3997,4,c	;volatile
  7127  000050  A89E               	btfss	3998,4,c	;volatile
  7128  000052  D003               	goto	i2l69
  7129                           
  7130                           ;interrupt_manager.c: 75: {
  7131                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
  7132  000054  ECED  F00D         	call	_EUSART1_Transmit_ISR	;wreg free
  7133                           
  7134                           ;interrupt_manager.c: 77: }
  7135  000058  D00B               	goto	i2l75
  7136  00005A                     i2l69:
  7137                           
  7138                           ;interrupt_manager.c: 78: else if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
  7139  00005A  BC9D               	btfsc	3997,6,c	;volatile
  7140  00005C  AC9E               	btfss	3998,6,c	;volatile
  7141  00005E  D003               	goto	i2l71
  7142                           
  7143                           ;interrupt_manager.c: 79: {
  7144                           ;interrupt_manager.c: 80: ADC_ISR();
  7145  000060  EC6A  F00F         	call	_ADC_ISR	;wreg free
  7146                           
  7147                           ;interrupt_manager.c: 81: }
  7148  000064  D005               	goto	i2l75
  7149  000066                     i2l71:
  7150                           
  7151                           ;interrupt_manager.c: 82: else if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
  7152  000066  B09D               	btfsc	3997,0,c	;volatile
  7153  000068  A09E               	btfss	3998,0,c	;volatile
  7154  00006A  D002               	goto	i2l75
  7155                           
  7156                           ;interrupt_manager.c: 83: {
  7157                           ;interrupt_manager.c: 84: TMR1_ISR();
  7158  00006C  ECD4  F00D         	call	_TMR1_ISR	;wreg free
  7159  000070                     i2l75:
  7160  000070  C01C  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  7161  000074  C01B  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  7162  000078  C01A  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  7163  00007C  C019  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  7164  000080  C018  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  7165  000084  C017  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  7166  000088  C016  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  7167  00008C  C015  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  7168  000090  C014  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  7169  000094  C013  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  7170  000098  C012  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  7171  00009C  C011  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  7172  0000A0  C010  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  7173  0000A4  C00F  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  7174  0000A8  9243               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7175  0000AA  0011               	retfie		f
  7176  0000AC                     __end_of_INTERRUPT_InterruptManager:
  7177                           	opt stack 0
  7178                           pclatu	equ	0xFFB
  7179                           pclath	equ	0xFFA
  7180                           tblptru	equ	0xFF8
  7181                           tblptrh	equ	0xFF7
  7182                           tblptrl	equ	0xFF6
  7183                           tablat	equ	0xFF5
  7184                           prodh	equ	0xFF4
  7185                           prodl	equ	0xFF3
  7186                           intcon	equ	0xFF2
  7187                           intcon2	equ	0xFF1
  7188                           postinc0	equ	0xFEE
  7189                           fsr0h	equ	0xFEA
  7190                           fsr0l	equ	0xFE9
  7191                           wreg	equ	0xFE8
  7192                           indf1	equ	0xFE7
  7193                           postdec1	equ	0xFE5
  7194                           fsr1h	equ	0xFE2
  7195                           fsr1l	equ	0xFE1
  7196                           indf2	equ	0xFDF
  7197                           postinc2	equ	0xFDE
  7198                           postdec2	equ	0xFDD
  7199                           plusw2	equ	0xFDB
  7200                           fsr2h	equ	0xFDA
  7201                           fsr2l	equ	0xFD9
  7202                           status	equ	0xFD8
  7203                           
  7204 ;; *************** function _TMR1_ISR *****************
  7205 ;; Defined at:
  7206 ;;		line 161 in file "mcc_generated_files/tmr1.c"
  7207 ;; Parameters:    Size  Location     Type
  7208 ;;		None
  7209 ;; Auto vars:     Size  Location     Type
  7210 ;;		None
  7211 ;; Return value:  Size  Location     Type
  7212 ;;                  1    wreg      void 
  7213 ;; Registers used:
  7214 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7215 ;; Tracked objects:
  7216 ;;		On entry : 0/0
  7217 ;;		On exit  : 0/0
  7218 ;;		Unchanged: 0/0
  7219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7220 ;;      Params:         0       0       0       0       0       0       0
  7221 ;;      Locals:         0       0       0       0       0       0       0
  7222 ;;      Temps:          0       0       0       0       0       0       0
  7223 ;;      Totals:         0       0       0       0       0       0       0
  7224 ;;Total ram usage:        0 bytes
  7225 ;; Hardware stack levels used:    1
  7226 ;; Hardware stack levels required when called:    4
  7227 ;; This function calls:
  7228 ;;		_FuseSystem
  7229 ;;		_ReadCurrent
  7230 ;; This function is called by:
  7231 ;;		_INTERRUPT_InterruptManager
  7232 ;; This function uses a non-reentrant model
  7233 ;;
  7234                           
  7235                           	psect	text47
  7236  001BA8                     __ptext47:
  7237                           	opt stack 0
  7238  001BA8                     _TMR1_ISR:
  7239                           	opt stack 18
  7240                           
  7241                           ;tmr1.c: 165: PIR1bits.TMR1IF = 0;
  7242                           
  7243                           ;incstack = 0
  7244  001BA8  909E               	bcf	3998,0,c	;volatile
  7245                           
  7246                           ;tmr1.c: 168: TMR1H = (timer1ReloadVal >> 8);
  7247  001BAA  503A               	movf	_timer1ReloadVal+1,w,c	;volatile
  7248  001BAC  6ECF               	movwf	4047,c	;volatile
  7249                           
  7250                           ;tmr1.c: 169: TMR1L = (uint8_t) timer1ReloadVal;
  7251  001BAE  C039  FFCE         	movff	_timer1ReloadVal,4046	;volatile
  7252                           
  7253                           ;tmr1.c: 170: readwhat++;
  7254  001BB2  4A40               	infsnz	_readwhat,f,c
  7255  001BB4  2A41               	incf	_readwhat+1,f,c
  7256                           
  7257                           ;tmr1.c: 171: if(readwhat > 7)
  7258  001BB6  BE41               	btfsc	_readwhat+1,7,c
  7259  001BB8  D00C               	goto	i2l3435
  7260  001BBA  5041               	movf	_readwhat+1,w,c
  7261  001BBC  E104               	bnz	i2u188_40
  7262  001BBE  0E08               	movlw	8
  7263  001BC0  5C40               	subwf	_readwhat,w,c
  7264  001BC2  A0D8               	btfss	status,0,c
  7265  001BC4  D006               	goto	i2l3435
  7266  001BC6                     i2u188_40:
  7267                           
  7268                           ;tmr1.c: 172: {
  7269                           ;tmr1.c: 173: readwhat = 1;
  7270  001BC6  0E00               	movlw	0
  7271  001BC8  6E41               	movwf	_readwhat+1,c
  7272  001BCA  0E01               	movlw	1
  7273  001BCC  6E40               	movwf	_readwhat,c
  7274                           
  7275                           ;tmr1.c: 174: FuseSystem();
  7276  001BCE  ECB7  F00B         	call	_FuseSystem	;wreg free
  7277  001BD2                     i2l3435:
  7278                           
  7279                           ;tmr1.c: 175: }
  7280                           ;tmr1.c: 176: ReadCurrent(readwhat);
  7281  001BD2  5040               	movf	_readwhat,w,c
  7282  001BD4  EC58  F000         	call	_ReadCurrent
  7283  001BD8  0012               	return		;funcret
  7284  001BDA                     __end_of_TMR1_ISR:
  7285                           	opt stack 0
  7286                           pclatu	equ	0xFFB
  7287                           pclath	equ	0xFFA
  7288                           tblptru	equ	0xFF8
  7289                           tblptrh	equ	0xFF7
  7290                           tblptrl	equ	0xFF6
  7291                           tablat	equ	0xFF5
  7292                           prodh	equ	0xFF4
  7293                           prodl	equ	0xFF3
  7294                           intcon	equ	0xFF2
  7295                           intcon2	equ	0xFF1
  7296                           postinc0	equ	0xFEE
  7297                           fsr0h	equ	0xFEA
  7298                           fsr0l	equ	0xFE9
  7299                           wreg	equ	0xFE8
  7300                           indf1	equ	0xFE7
  7301                           postdec1	equ	0xFE5
  7302                           fsr1h	equ	0xFE2
  7303                           fsr1l	equ	0xFE1
  7304                           indf2	equ	0xFDF
  7305                           postinc2	equ	0xFDE
  7306                           postdec2	equ	0xFDD
  7307                           plusw2	equ	0xFDB
  7308                           fsr2h	equ	0xFDA
  7309                           fsr2l	equ	0xFD9
  7310                           status	equ	0xFD8
  7311                           
  7312 ;; *************** function _ReadCurrent *****************
  7313 ;; Defined at:
  7314 ;;		line 63 in file "PDU.c"
  7315 ;; Parameters:    Size  Location     Type
  7316 ;;  gather          1    wreg     unsigned char 
  7317 ;; Auto vars:     Size  Location     Type
  7318 ;;  gather          1   13[COMRAM] unsigned char 
  7319 ;; Return value:  Size  Location     Type
  7320 ;;                  1    wreg      void 
  7321 ;; Registers used:
  7322 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7323 ;; Tracked objects:
  7324 ;;		On entry : 0/0
  7325 ;;		On exit  : 0/0
  7326 ;;		Unchanged: 0/0
  7327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7328 ;;      Params:         0       0       0       0       0       0       0
  7329 ;;      Locals:         1       0       0       0       0       0       0
  7330 ;;      Temps:          0       0       0       0       0       0       0
  7331 ;;      Totals:         1       0       0       0       0       0       0
  7332 ;;Total ram usage:        1 bytes
  7333 ;; Hardware stack levels used:    1
  7334 ;; Hardware stack levels required when called:    3
  7335 ;; This function calls:
  7336 ;;		_ADC_GetConversion
  7337 ;;		i2_SetPin595
  7338 ;;		i2_Update
  7339 ;; This function is called by:
  7340 ;;		_TMR1_ISR
  7341 ;; This function uses a non-reentrant model
  7342 ;;
  7343                           
  7344                           	psect	text48
  7345  0000B0                     __ptext48:
  7346                           	opt stack 0
  7347  0000B0                     _ReadCurrent:
  7348                           	opt stack 18
  7349                           
  7350                           ;incstack = 0
  7351                           ;ReadCurrent@gather stored from wreg
  7352  0000B0  6E0E               	movwf	ReadCurrent@gather,c
  7353                           
  7354                           ;PDU.c: 64: if (gather == 1) {
  7355  0000B2  040E               	decf	ReadCurrent@gather,w,c
  7356  0000B4  A4D8               	btfss	status,2,c
  7357  0000B6  D088               	goto	i2l3209
  7358                           
  7359                           ;PDU.c: 66: SetPin595(1, 4, ON);
  7360  0000B8  0E00               	movlw	0
  7361  0000BA  6E02               	movwf	i2SetPin595@Reg+1,c
  7362  0000BC  0E01               	movlw	1
  7363  0000BE  6E01               	movwf	i2SetPin595@Reg,c
  7364  0000C0  0E00               	movlw	0
  7365  0000C2  6E04               	movwf	i2SetPin595@pin+1,c
  7366  0000C4  0E04               	movlw	4
  7367  0000C6  6E03               	movwf	i2SetPin595@pin,c
  7368  0000C8  0E00               	movlw	0
  7369  0000CA  6E06               	movwf	i2SetPin595@value+1,c
  7370  0000CC  0E01               	movlw	1
  7371  0000CE  6E05               	movwf	i2SetPin595@value,c
  7372  0000D0  ECEB  F00C         	call	i2_SetPin595	;wreg free
  7373                           
  7374                           ;PDU.c: 67: SetPin595(1, 3, OFF);
  7375  0000D4  0E00               	movlw	0
  7376  0000D6  6E02               	movwf	i2SetPin595@Reg+1,c
  7377  0000D8  0E01               	movlw	1
  7378  0000DA  6E01               	movwf	i2SetPin595@Reg,c
  7379  0000DC  0E00               	movlw	0
  7380  0000DE  6E04               	movwf	i2SetPin595@pin+1,c
  7381  0000E0  0E03               	movlw	3
  7382  0000E2  6E03               	movwf	i2SetPin595@pin,c
  7383  0000E4  0E00               	movlw	0
  7384  0000E6  6E06               	movwf	i2SetPin595@value+1,c
  7385  0000E8  0E00               	movlw	0
  7386  0000EA  6E05               	movwf	i2SetPin595@value,c
  7387  0000EC  ECEB  F00C         	call	i2_SetPin595	;wreg free
  7388                           
  7389                           ;PDU.c: 68: SetPin595(1, 2, OFF);
  7390  0000F0  0E00               	movlw	0
  7391  0000F2  6E02               	movwf	i2SetPin595@Reg+1,c
  7392  0000F4  0E01               	movlw	1
  7393  0000F6  6E01               	movwf	i2SetPin595@Reg,c
  7394  0000F8  0E00               	movlw	0
  7395  0000FA  6E04               	movwf	i2SetPin595@pin+1,c
  7396  0000FC  0E02               	movlw	2
  7397  0000FE  6E03               	movwf	i2SetPin595@pin,c
  7398  000100  0E00               	movlw	0
  7399  000102  6E06               	movwf	i2SetPin595@value+1,c
  7400  000104  0E00               	movlw	0
  7401  000106  6E05               	movwf	i2SetPin595@value,c
  7402  000108  ECEB  F00C         	call	i2_SetPin595	;wreg free
  7403                           
  7404                           ;PDU.c: 69: SetPin595(2, 4, OFF);
  7405  00010C  0E00               	movlw	0
  7406  00010E  6E02               	movwf	i2SetPin595@Reg+1,c
  7407  000110  0E02               	movlw	2
  7408  000112  6E01               	movwf	i2SetPin595@Reg,c
  7409  000114  0E00               	movlw	0
  7410  000116  6E04               	movwf	i2SetPin595@pin+1,c
  7411  000118  0E04               	movlw	4
  7412  00011A  6E03               	movwf	i2SetPin595@pin,c
  7413  00011C  0E00               	movlw	0
  7414  00011E  6E06               	movwf	i2SetPin595@value+1,c
  7415  000120  0E00               	movlw	0
  7416  000122  6E05               	movwf	i2SetPin595@value,c
  7417  000124  ECEB  F00C         	call	i2_SetPin595	;wreg free
  7418                           
  7419                           ;PDU.c: 70: SetPin595(2, 3, OFF);
  7420  000128  0E00               	movlw	0
  7421  00012A  6E02               	movwf	i2SetPin595@Reg+1,c
  7422  00012C  0E02               	movlw	2
  7423  00012E  6E01               	movwf	i2SetPin595@Reg,c
  7424  000130  0E00               	movlw	0
  7425  000132  6E04               	movwf	i2SetPin595@pin+1,c
  7426  000134  0E03               	movlw	3
  7427  000136  6E03               	movwf	i2SetPin595@pin,c
  7428  000138  0E00               	movlw	0
  7429  00013A  6E06               	movwf	i2SetPin595@value+1,c
  7430  00013C  0E00               	movlw	0
  7431  00013E  6E05               	movwf	i2SetPin595@value,c
  7432  000140  ECEB  F00C         	call	i2_SetPin595	;wreg free
  7433                           
  7434                           ;PDU.c: 71: SetPin595(2, 2, OFF);
  7435  000144  0E00               	movlw	0
  7436  000146  6E02               	movwf	i2SetPin595@Reg+1,c
  7437  000148  0E02               	movlw	2
  7438  00014A  6E01               	movwf	i2SetPin595@Reg,c
  7439  00014C  0E00               	movlw	0
  7440  00014E  6E04               	movwf	i2SetPin595@pin+1,c
  7441  000150  0E02               	movlw	2
  7442  000152  6E03               	movwf	i2SetPin595@pin,c
  7443  000154  0E00               	movlw	0
  7444  000156  6E06               	movwf	i2SetPin595@value+1,c
  7445  000158  0E00               	movlw	0
  7446  00015A  6E05               	movwf	i2SetPin595@value,c
  7447  00015C  ECEB  F00C         	call	i2_SetPin595	;wreg free
  7448                           
  7449                           ;PDU.c: 72: SetPin595(3, 4, OFF);
  7450  000160  0E00               	movlw	0
  7451  000162  6E02               	movwf	i2SetPin595@Reg+1,c
  7452  000164  0E03               	movlw	3
  7453  000166  6E01               	movwf	i2SetPin595@Reg,c
  7454  000168  0E00               	movlw	0
  7455  00016A  6E04               	movwf	i2SetPin595@pin+1,c
  7456  00016C  0E04               	movlw	4
  7457  00016E  6E03               	movwf	i2SetPin595@pin,c
  7458  000170  0E00               	movlw	0
  7459  000172  6E06               	movwf	i2SetPin595@value+1,c
  7460  000174  0E00               	movlw	0
  7461  000176  6E05               	movwf	i2SetPin595@value,c
  7462  000178  ECEB  F00C         	call	i2_SetPin595	;wreg free
  7463                           
  7464                           ;PDU.c: 73: SetPin595(3, 3, OFF);
  7465  00017C  0E00               	movlw	0
  7466  00017E  6E02               	movwf	i2SetPin595@Reg+1,c
  7467  000180  0E03               	movlw	3
  7468  000182  6E01               	movwf	i2SetPin595@Reg,c
  7469  000184  0E00               	movlw	0
  7470  000186  6E04               	movwf	i2SetPin595@pin+1,c
  7471  000188  0E03               	movlw	3
  7472  00018A  6E03               	movwf	i2SetPin595@pin,c
  7473  00018C  0E00               	movlw	0
  7474  00018E  6E06               	movwf	i2SetPin595@value+1,c
  7475  000190  0E00               	movlw	0
  7476  000192  6E05               	movwf	i2SetPin595@value,c
  7477  000194  ECEB  F00C         	call	i2_SetPin595	;wreg free
  7478                           
  7479                           ;PDU.c: 74: SetPin595(3, 2, OFF);
  7480  000198  0E00               	movlw	0
  7481  00019A  6E02               	movwf	i2SetPin595@Reg+1,c
  7482  00019C  0E03               	movlw	3
  7483  00019E  6E01               	movwf	i2SetPin595@Reg,c
  7484  0001A0  0E00               	movlw	0
  7485  0001A2  6E04               	movwf	i2SetPin595@pin+1,c
  7486  0001A4  0E02               	movlw	2
  7487  0001A6  6E03               	movwf	i2SetPin595@pin,c
  7488  0001A8  0E00               	movlw	0
  7489  0001AA  6E06               	movwf	i2SetPin595@value+1,c
  7490  0001AC  0E00               	movlw	0
  7491  0001AE  6E05               	movwf	i2SetPin595@value,c
  7492  0001B0  ECEB  F00C         	call	i2_SetPin595	;wreg free
  7493                           
  7494                           ;PDU.c: 75: Update();
  7495  0001B4  EC61  F00F         	call	i2_Update	;wreg free
  7496                           
  7497                           ;PDU.c: 76: CurrentADC[5] = ADC_GetConversion(U10Multisense);
  7498  0001B8  0E17               	movlw	23
  7499  0001BA  EC1E  F00E         	call	_ADC_GetConversion
  7500  0001BE  C001  F0D4         	movff	?_ADC_GetConversion,_CurrentADC+10
  7501  0001C2  C002  F0D5         	movff	?_ADC_GetConversion+1,_CurrentADC+11
  7502                           
  7503                           ;PDU.c: 78: }
  7504  0001C6  0012               	return	
  7505  0001C8                     i2l3209:
  7506                           
  7507                           ;PDU.c: 79: else if(gather == 2){
  7508  0001C8  0E02               	movlw	2
  7509  0001CA  180E               	xorwf	ReadCurrent@gather,w,c
  7510  0001CC  A4D8               	btfss	status,2,c
  7511  0001CE  D088               	goto	i2l3215
  7512                           
  7513                           ;PDU.c: 81: SetPin595(1, 4, OFF);
  7514  0001D0  0E00               	movlw	0
  7515  0001D2  6E02               	movwf	i2SetPin595@Reg+1,c
  7516  0001D4  0E01               	movlw	1
  7517  0001D6  6E01               	movwf	i2SetPin595@Reg,c
  7518  0001D8  0E00               	movlw	0
  7519  0001DA  6E04               	movwf	i2SetPin595@pin+1,c
  7520  0001DC  0E04               	movlw	4
  7521  0001DE  6E03               	movwf	i2SetPin595@pin,c
  7522  0001E0  0E00               	movlw	0
  7523  0001E2  6E06               	movwf	i2SetPin595@value+1,c
  7524  0001E4  0E00               	movlw	0
  7525  0001E6  6E05               	movwf	i2SetPin595@value,c
  7526  0001E8  ECEB  F00C         	call	i2_SetPin595	;wreg free
  7527                           
  7528                           ;PDU.c: 82: SetPin595(1, 3, OFF);
  7529  0001EC  0E00               	movlw	0
  7530  0001EE  6E02               	movwf	i2SetPin595@Reg+1,c
  7531  0001F0  0E01               	movlw	1
  7532  0001F2  6E01               	movwf	i2SetPin595@Reg,c
  7533  0001F4  0E00               	movlw	0
  7534  0001F6  6E04               	movwf	i2SetPin595@pin+1,c
  7535  0001F8  0E03               	movlw	3
  7536  0001FA  6E03               	movwf	i2SetPin595@pin,c
  7537  0001FC  0E00               	movlw	0
  7538  0001FE  6E06               	movwf	i2SetPin595@value+1,c
  7539  000200  0E00               	movlw	0
  7540  000202  6E05               	movwf	i2SetPin595@value,c
  7541  000204  ECEB  F00C         	call	i2_SetPin595	;wreg free
  7542                           
  7543                           ;PDU.c: 83: SetPin595(1, 2, OFF);
  7544  000208  0E00               	movlw	0
  7545  00020A  6E02               	movwf	i2SetPin595@Reg+1,c
  7546  00020C  0E01               	movlw	1
  7547  00020E  6E01               	movwf	i2SetPin595@Reg,c
  7548  000210  0E00               	movlw	0
  7549  000212  6E04               	movwf	i2SetPin595@pin+1,c
  7550  000214  0E02               	movlw	2
  7551  000216  6E03               	movwf	i2SetPin595@pin,c
  7552  000218  0E00               	movlw	0
  7553  00021A  6E06               	movwf	i2SetPin595@value+1,c
  7554  00021C  0E00               	movlw	0
  7555  00021E  6E05               	movwf	i2SetPin595@value,c
  7556  000220  ECEB  F00C         	call	i2_SetPin595	;wreg free
  7557                           
  7558                           ;PDU.c: 84: SetPin595(2, 4, ON);
  7559  000224  0E00               	movlw	0
  7560  000226  6E02               	movwf	i2SetPin595@Reg+1,c
  7561  000228  0E02               	movlw	2
  7562  00022A  6E01               	movwf	i2SetPin595@Reg,c
  7563  00022C  0E00               	movlw	0
  7564  00022E  6E04               	movwf	i2SetPin595@pin+1,c
  7565  000230  0E04               	movlw	4
  7566  000232  6E03               	movwf	i2SetPin595@pin,c
  7567  000234  0E00               	movlw	0
  7568  000236  6E06               	movwf	i2SetPin595@value+1,c
  7569  000238  0E01               	movlw	1
  7570  00023A  6E05               	movwf	i2SetPin595@value,c
  7571  00023C  ECEB  F00C         	call	i2_SetPin595	;wreg free
  7572                           
  7573                           ;PDU.c: 85: SetPin595(2, 3, ON);
  7574  000240  0E00               	movlw	0
  7575  000242  6E02               	movwf	i2SetPin595@Reg+1,c
  7576  000244  0E02               	movlw	2
  7577  000246  6E01               	movwf	i2SetPin595@Reg,c
  7578  000248  0E00               	movlw	0
  7579  00024A  6E04               	movwf	i2SetPin595@pin+1,c
  7580  00024C  0E03               	movlw	3
  7581  00024E  6E03               	movwf	i2SetPin595@pin,c
  7582  000250  0E00               	movlw	0
  7583  000252  6E06               	movwf	i2SetPin595@value+1,c
  7584  000254  0E01               	movlw	1
  7585  000256  6E05               	movwf	i2SetPin595@value,c
  7586  000258  ECEB  F00C         	call	i2_SetPin595	;wreg free
  7587                           
  7588                           ;PDU.c: 86: SetPin595(2, 2, OFF);
  7589  00025C  0E00               	movlw	0
  7590  00025E  6E02               	movwf	i2SetPin595@Reg+1,c
  7591  000260  0E02               	movlw	2
  7592  000262  6E01               	movwf	i2SetPin595@Reg,c
  7593  000264  0E00               	movlw	0
  7594  000266  6E04               	movwf	i2SetPin595@pin+1,c
  7595  000268  0E02               	movlw	2
  7596  00026A  6E03               	movwf	i2SetPin595@pin,c
  7597  00026C  0E00               	movlw	0
  7598  00026E  6E06               	movwf	i2SetPin595@value+1,c
  7599  000270  0E00               	movlw	0
  7600  000272  6E05               	movwf	i2SetPin595@value,c
  7601  000274  ECEB  F00C         	call	i2_SetPin595	;wreg free
  7602                           
  7603                           ;PDU.c: 87: SetPin595(3, 4, OFF);
  7604  000278  0E00               	movlw	0
  7605  00027A  6E02               	movwf	i2SetPin595@Reg+1,c
  7606  00027C  0E03               	movlw	3
  7607  00027E  6E01               	movwf	i2SetPin595@Reg,c
  7608  000280  0E00               	movlw	0
  7609  000282  6E04               	movwf	i2SetPin595@pin+1,c
  7610  000284  0E04               	movlw	4
  7611  000286  6E03               	movwf	i2SetPin595@pin,c
  7612  000288  0E00               	movlw	0
  7613  00028A  6E06               	movwf	i2SetPin595@value+1,c
  7614  00028C  0E00               	movlw	0
  7615  00028E  6E05               	movwf	i2SetPin595@value,c
  7616  000290  ECEB  F00C         	call	i2_SetPin595	;wreg free
  7617                           
  7618                           ;PDU.c: 88: SetPin595(3, 3, OFF);
  7619  000294  0E00               	movlw	0
  7620  000296  6E02               	movwf	i2SetPin595@Reg+1,c
  7621  000298  0E03               	movlw	3
  7622  00029A  6E01               	movwf	i2SetPin595@Reg,c
  7623  00029C  0E00               	movlw	0
  7624  00029E  6E04               	movwf	i2SetPin595@pin+1,c
  7625  0002A0  0E03               	movlw	3
  7626  0002A2  6E03               	movwf	i2SetPin595@pin,c
  7627  0002A4  0E00               	movlw	0
  7628  0002A6  6E06               	movwf	i2SetPin595@value+1,c
  7629  0002A8  0E00               	movlw	0
  7630  0002AA  6E05               	movwf	i2SetPin595@value,c
  7631  0002AC  ECEB  F00C         	call	i2_SetPin595	;wreg free
  7632                           
  7633                           ;PDU.c: 89: SetPin595(3, 2, OFF);
  7634  0002B0  0E00               	movlw	0
  7635  0002B2  6E02               	movwf	i2SetPin595@Reg+1,c
  7636  0002B4  0E03               	movlw	3
  7637  0002B6  6E01               	movwf	i2SetPin595@Reg,c
  7638  0002B8  0E00               	movlw	0
  7639  0002BA  6E04               	movwf	i2SetPin595@pin+1,c
  7640  0002BC  0E02               	movlw	2
  7641  0002BE  6E03               	movwf	i2SetPin595@pin,c
  7642  0002C0  0E00               	movlw	0
  7643  0002C2  6E06               	movwf	i2SetPin595@value+1,c
  7644  0002C4  0E00               	movlw	0
  7645  0002C6  6E05               	movwf	i2SetPin595@value,c
  7646  0002C8  ECEB  F00C         	call	i2_SetPin595	;wreg free
  7647                           
  7648                           ;PDU.c: 90: Update();
  7649  0002CC  EC61  F00F         	call	i2_Update	;wreg free
  7650                           
  7651                           ;PDU.c: 91: CurrentADC[2] = ADC_GetConversion(U8Multisense);
  7652  0002D0  0E16               	movlw	22
  7653  0002D2  EC1E  F00E         	call	_ADC_GetConversion
  7654  0002D6  C001  F0CE         	movff	?_ADC_GetConversion,_CurrentADC+4
  7655  0002DA  C002  F0CF         	movff	?_ADC_GetConversion+1,_CurrentADC+5
  7656                           
  7657                           ;PDU.c: 93: }
  7658  0002DE  0012               	return	
  7659  0002E0                     i2l3215:
  7660                           
  7661                           ;PDU.c: 94: else if(gather == 3){
  7662  0002E0  0E03               	movlw	3
  7663  0002E2  180E               	xorwf	ReadCurrent@gather,w,c
  7664  0002E4  A4D8               	btfss	status,2,c
  7665  0002E6  D088               	goto	i2l3221
  7666                           
  7667                           ;PDU.c: 96: SetPin595(1, 4, OFF);
  7668  0002E8  0E00               	movlw	0
  7669  0002EA  6E02               	movwf	i2SetPin595@Reg+1,c
  7670  0002EC  0E01               	movlw	1
  7671  0002EE  6E01               	movwf	i2SetPin595@Reg,c
  7672  0002F0  0E00               	movlw	0
  7673  0002F2  6E04               	movwf	i2SetPin595@pin+1,c
  7674  0002F4  0E04               	movlw	4
  7675  0002F6  6E03               	movwf	i2SetPin595@pin,c
  7676  0002F8  0E00               	movlw	0
  7677  0002FA  6E06               	movwf	i2SetPin595@value+1,c
  7678  0002FC  0E00               	movlw	0
  7679  0002FE  6E05               	movwf	i2SetPin595@value,c
  7680  000300  ECEB  F00C         	call	i2_SetPin595	;wreg free
  7681                           
  7682                           ;PDU.c: 97: SetPin595(1, 3, OFF);
  7683  000304  0E00               	movlw	0
  7684  000306  6E02               	movwf	i2SetPin595@Reg+1,c
  7685  000308  0E01               	movlw	1
  7686  00030A  6E01               	movwf	i2SetPin595@Reg,c
  7687  00030C  0E00               	movlw	0
  7688  00030E  6E04               	movwf	i2SetPin595@pin+1,c
  7689  000310  0E03               	movlw	3
  7690  000312  6E03               	movwf	i2SetPin595@pin,c
  7691  000314  0E00               	movlw	0
  7692  000316  6E06               	movwf	i2SetPin595@value+1,c
  7693  000318  0E00               	movlw	0
  7694  00031A  6E05               	movwf	i2SetPin595@value,c
  7695  00031C  ECEB  F00C         	call	i2_SetPin595	;wreg free
  7696                           
  7697                           ;PDU.c: 98: SetPin595(1, 2, OFF);
  7698  000320  0E00               	movlw	0
  7699  000322  6E02               	movwf	i2SetPin595@Reg+1,c
  7700  000324  0E01               	movlw	1
  7701  000326  6E01               	movwf	i2SetPin595@Reg,c
  7702  000328  0E00               	movlw	0
  7703  00032A  6E04               	movwf	i2SetPin595@pin+1,c
  7704  00032C  0E02               	movlw	2
  7705  00032E  6E03               	movwf	i2SetPin595@pin,c
  7706  000330  0E00               	movlw	0
  7707  000332  6E06               	movwf	i2SetPin595@value+1,c
  7708  000334  0E00               	movlw	0
  7709  000336  6E05               	movwf	i2SetPin595@value,c
  7710  000338  ECEB  F00C         	call	i2_SetPin595	;wreg free
  7711                           
  7712                           ;PDU.c: 99: SetPin595(2, 4, OFF);
  7713  00033C  0E00               	movlw	0
  7714  00033E  6E02               	movwf	i2SetPin595@Reg+1,c
  7715  000340  0E02               	movlw	2
  7716  000342  6E01               	movwf	i2SetPin595@Reg,c
  7717  000344  0E00               	movlw	0
  7718  000346  6E04               	movwf	i2SetPin595@pin+1,c
  7719  000348  0E04               	movlw	4
  7720  00034A  6E03               	movwf	i2SetPin595@pin,c
  7721  00034C  0E00               	movlw	0
  7722  00034E  6E06               	movwf	i2SetPin595@value+1,c
  7723  000350  0E00               	movlw	0
  7724  000352  6E05               	movwf	i2SetPin595@value,c
  7725  000354  ECEB  F00C         	call	i2_SetPin595	;wreg free
  7726                           
  7727                           ;PDU.c: 100: SetPin595(2, 3, OFF);
  7728  000358  0E00               	movlw	0
  7729  00035A  6E02               	movwf	i2SetPin595@Reg+1,c
  7730  00035C  0E02               	movlw	2
  7731  00035E  6E01               	movwf	i2SetPin595@Reg,c
  7732  000360  0E00               	movlw	0
  7733  000362  6E04               	movwf	i2SetPin595@pin+1,c
  7734  000364  0E03               	movlw	3
  7735  000366  6E03               	movwf	i2SetPin595@pin,c
  7736  000368  0E00               	movlw	0
  7737  00036A  6E06               	movwf	i2SetPin595@value+1,c
  7738  00036C  0E00               	movlw	0
  7739  00036E  6E05               	movwf	i2SetPin595@value,c
  7740  000370  ECEB  F00C         	call	i2_SetPin595	;wreg free
  7741                           
  7742                           ;PDU.c: 101: SetPin595(2, 2, OFF);
  7743  000374  0E00               	movlw	0
  7744  000376  6E02               	movwf	i2SetPin595@Reg+1,c
  7745  000378  0E02               	movlw	2
  7746  00037A  6E01               	movwf	i2SetPin595@Reg,c
  7747  00037C  0E00               	movlw	0
  7748  00037E  6E04               	movwf	i2SetPin595@pin+1,c
  7749  000380  0E02               	movlw	2
  7750  000382  6E03               	movwf	i2SetPin595@pin,c
  7751  000384  0E00               	movlw	0
  7752  000386  6E06               	movwf	i2SetPin595@value+1,c
  7753  000388  0E00               	movlw	0
  7754  00038A  6E05               	movwf	i2SetPin595@value,c
  7755  00038C  ECEB  F00C         	call	i2_SetPin595	;wreg free
  7756                           
  7757                           ;PDU.c: 102: SetPin595(3, 4, ON);
  7758  000390  0E00               	movlw	0
  7759  000392  6E02               	movwf	i2SetPin595@Reg+1,c
  7760  000394  0E03               	movlw	3
  7761  000396  6E01               	movwf	i2SetPin595@Reg,c
  7762  000398  0E00               	movlw	0
  7763  00039A  6E04               	movwf	i2SetPin595@pin+1,c
  7764  00039C  0E04               	movlw	4
  7765  00039E  6E03               	movwf	i2SetPin595@pin,c
  7766  0003A0  0E00               	movlw	0
  7767  0003A2  6E06               	movwf	i2SetPin595@value+1,c
  7768  0003A4  0E01               	movlw	1
  7769  0003A6  6E05               	movwf	i2SetPin595@value,c
  7770  0003A8  ECEB  F00C         	call	i2_SetPin595	;wreg free
  7771                           
  7772                           ;PDU.c: 103: SetPin595(3, 3, OFF);
  7773  0003AC  0E00               	movlw	0
  7774  0003AE  6E02               	movwf	i2SetPin595@Reg+1,c
  7775  0003B0  0E03               	movlw	3
  7776  0003B2  6E01               	movwf	i2SetPin595@Reg,c
  7777  0003B4  0E00               	movlw	0
  7778  0003B6  6E04               	movwf	i2SetPin595@pin+1,c
  7779  0003B8  0E03               	movlw	3
  7780  0003BA  6E03               	movwf	i2SetPin595@pin,c
  7781  0003BC  0E00               	movlw	0
  7782  0003BE  6E06               	movwf	i2SetPin595@value+1,c
  7783  0003C0  0E00               	movlw	0
  7784  0003C2  6E05               	movwf	i2SetPin595@value,c
  7785  0003C4  ECEB  F00C         	call	i2_SetPin595	;wreg free
  7786                           
  7787                           ;PDU.c: 104: SetPin595(3, 2, OFF);
  7788  0003C8  0E00               	movlw	0
  7789  0003CA  6E02               	movwf	i2SetPin595@Reg+1,c
  7790  0003CC  0E03               	movlw	3
  7791  0003CE  6E01               	movwf	i2SetPin595@Reg,c
  7792  0003D0  0E00               	movlw	0
  7793  0003D2  6E04               	movwf	i2SetPin595@pin+1,c
  7794  0003D4  0E02               	movlw	2
  7795  0003D6  6E03               	movwf	i2SetPin595@pin,c
  7796  0003D8  0E00               	movlw	0
  7797  0003DA  6E06               	movwf	i2SetPin595@value+1,c
  7798  0003DC  0E00               	movlw	0
  7799  0003DE  6E05               	movwf	i2SetPin595@value,c
  7800  0003E0  ECEB  F00C         	call	i2_SetPin595	;wreg free
  7801                           
  7802                           ;PDU.c: 105: Update();
  7803  0003E4  EC61  F00F         	call	i2_Update	;wreg free
  7804                           
  7805                           ;PDU.c: 106: CurrentADC[1] = ADC_GetConversion(U5Multisense);
  7806  0003E8  0E10               	movlw	16
  7807  0003EA  EC1E  F00E         	call	_ADC_GetConversion
  7808  0003EE  C001  F0CC         	movff	?_ADC_GetConversion,_CurrentADC+2
  7809  0003F2  C002  F0CD         	movff	?_ADC_GetConversion+1,_CurrentADC+3
  7810                           
  7811                           ;PDU.c: 108: }
  7812  0003F6  0012               	return	
  7813  0003F8                     i2l3221:
  7814                           
  7815                           ;PDU.c: 109: else if(gather == 4){
  7816  0003F8  0E04               	movlw	4
  7817  0003FA  180E               	xorwf	ReadCurrent@gather,w,c
  7818  0003FC  A4D8               	btfss	status,2,c
  7819  0003FE  D088               	goto	i2l3227
  7820                           
  7821                           ;PDU.c: 111: SetPin595(1, 4, ON);
  7822  000400  0E00               	movlw	0
  7823  000402  6E02               	movwf	i2SetPin595@Reg+1,c
  7824  000404  0E01               	movlw	1
  7825  000406  6E01               	movwf	i2SetPin595@Reg,c
  7826  000408  0E00               	movlw	0
  7827  00040A  6E04               	movwf	i2SetPin595@pin+1,c
  7828  00040C  0E04               	movlw	4
  7829  00040E  6E03               	movwf	i2SetPin595@pin,c
  7830  000410  0E00               	movlw	0
  7831  000412  6E06               	movwf	i2SetPin595@value+1,c
  7832  000414  0E01               	movlw	1
  7833  000416  6E05               	movwf	i2SetPin595@value,c
  7834  000418  ECEB  F00C         	call	i2_SetPin595	;wreg free
  7835                           
  7836                           ;PDU.c: 112: SetPin595(1, 3, ON);
  7837  00041C  0E00               	movlw	0
  7838  00041E  6E02               	movwf	i2SetPin595@Reg+1,c
  7839  000420  0E01               	movlw	1
  7840  000422  6E01               	movwf	i2SetPin595@Reg,c
  7841  000424  0E00               	movlw	0
  7842  000426  6E04               	movwf	i2SetPin595@pin+1,c
  7843  000428  0E03               	movlw	3
  7844  00042A  6E03               	movwf	i2SetPin595@pin,c
  7845  00042C  0E00               	movlw	0
  7846  00042E  6E06               	movwf	i2SetPin595@value+1,c
  7847  000430  0E01               	movlw	1
  7848  000432  6E05               	movwf	i2SetPin595@value,c
  7849  000434  ECEB  F00C         	call	i2_SetPin595	;wreg free
  7850                           
  7851                           ;PDU.c: 113: SetPin595(1, 2, OFF);
  7852  000438  0E00               	movlw	0
  7853  00043A  6E02               	movwf	i2SetPin595@Reg+1,c
  7854  00043C  0E01               	movlw	1
  7855  00043E  6E01               	movwf	i2SetPin595@Reg,c
  7856  000440  0E00               	movlw	0
  7857  000442  6E04               	movwf	i2SetPin595@pin+1,c
  7858  000444  0E02               	movlw	2
  7859  000446  6E03               	movwf	i2SetPin595@pin,c
  7860  000448  0E00               	movlw	0
  7861  00044A  6E06               	movwf	i2SetPin595@value+1,c
  7862  00044C  0E00               	movlw	0
  7863  00044E  6E05               	movwf	i2SetPin595@value,c
  7864  000450  ECEB  F00C         	call	i2_SetPin595	;wreg free
  7865                           
  7866                           ;PDU.c: 114: SetPin595(2, 4, OFF);
  7867  000454  0E00               	movlw	0
  7868  000456  6E02               	movwf	i2SetPin595@Reg+1,c
  7869  000458  0E02               	movlw	2
  7870  00045A  6E01               	movwf	i2SetPin595@Reg,c
  7871  00045C  0E00               	movlw	0
  7872  00045E  6E04               	movwf	i2SetPin595@pin+1,c
  7873  000460  0E04               	movlw	4
  7874  000462  6E03               	movwf	i2SetPin595@pin,c
  7875  000464  0E00               	movlw	0
  7876  000466  6E06               	movwf	i2SetPin595@value+1,c
  7877  000468  0E00               	movlw	0
  7878  00046A  6E05               	movwf	i2SetPin595@value,c
  7879  00046C  ECEB  F00C         	call	i2_SetPin595	;wreg free
  7880                           
  7881                           ;PDU.c: 115: SetPin595(2, 3, OFF);
  7882  000470  0E00               	movlw	0
  7883  000472  6E02               	movwf	i2SetPin595@Reg+1,c
  7884  000474  0E02               	movlw	2
  7885  000476  6E01               	movwf	i2SetPin595@Reg,c
  7886  000478  0E00               	movlw	0
  7887  00047A  6E04               	movwf	i2SetPin595@pin+1,c
  7888  00047C  0E03               	movlw	3
  7889  00047E  6E03               	movwf	i2SetPin595@pin,c
  7890  000480  0E00               	movlw	0
  7891  000482  6E06               	movwf	i2SetPin595@value+1,c
  7892  000484  0E00               	movlw	0
  7893  000486  6E05               	movwf	i2SetPin595@value,c
  7894  000488  ECEB  F00C         	call	i2_SetPin595	;wreg free
  7895                           
  7896                           ;PDU.c: 116: SetPin595(2, 2, OFF);
  7897  00048C  0E00               	movlw	0
  7898  00048E  6E02               	movwf	i2SetPin595@Reg+1,c
  7899  000490  0E02               	movlw	2
  7900  000492  6E01               	movwf	i2SetPin595@Reg,c
  7901  000494  0E00               	movlw	0
  7902  000496  6E04               	movwf	i2SetPin595@pin+1,c
  7903  000498  0E02               	movlw	2
  7904  00049A  6E03               	movwf	i2SetPin595@pin,c
  7905  00049C  0E00               	movlw	0
  7906  00049E  6E06               	movwf	i2SetPin595@value+1,c
  7907  0004A0  0E00               	movlw	0
  7908  0004A2  6E05               	movwf	i2SetPin595@value,c
  7909  0004A4  ECEB  F00C         	call	i2_SetPin595	;wreg free
  7910                           
  7911                           ;PDU.c: 117: SetPin595(3, 4, OFF);
  7912  0004A8  0E00               	movlw	0
  7913  0004AA  6E02               	movwf	i2SetPin595@Reg+1,c
  7914  0004AC  0E03               	movlw	3
  7915  0004AE  6E01               	movwf	i2SetPin595@Reg,c
  7916  0004B0  0E00               	movlw	0
  7917  0004B2  6E04               	movwf	i2SetPin595@pin+1,c
  7918  0004B4  0E04               	movlw	4
  7919  0004B6  6E03               	movwf	i2SetPin595@pin,c
  7920  0004B8  0E00               	movlw	0
  7921  0004BA  6E06               	movwf	i2SetPin595@value+1,c
  7922  0004BC  0E00               	movlw	0
  7923  0004BE  6E05               	movwf	i2SetPin595@value,c
  7924  0004C0  ECEB  F00C         	call	i2_SetPin595	;wreg free
  7925                           
  7926                           ;PDU.c: 118: SetPin595(3, 3, OFF);
  7927  0004C4  0E00               	movlw	0
  7928  0004C6  6E02               	movwf	i2SetPin595@Reg+1,c
  7929  0004C8  0E03               	movlw	3
  7930  0004CA  6E01               	movwf	i2SetPin595@Reg,c
  7931  0004CC  0E00               	movlw	0
  7932  0004CE  6E04               	movwf	i2SetPin595@pin+1,c
  7933  0004D0  0E03               	movlw	3
  7934  0004D2  6E03               	movwf	i2SetPin595@pin,c
  7935  0004D4  0E00               	movlw	0
  7936  0004D6  6E06               	movwf	i2SetPin595@value+1,c
  7937  0004D8  0E00               	movlw	0
  7938  0004DA  6E05               	movwf	i2SetPin595@value,c
  7939  0004DC  ECEB  F00C         	call	i2_SetPin595	;wreg free
  7940                           
  7941                           ;PDU.c: 119: SetPin595(3, 2, OFF);
  7942  0004E0  0E00               	movlw	0
  7943  0004E2  6E02               	movwf	i2SetPin595@Reg+1,c
  7944  0004E4  0E03               	movlw	3
  7945  0004E6  6E01               	movwf	i2SetPin595@Reg,c
  7946  0004E8  0E00               	movlw	0
  7947  0004EA  6E04               	movwf	i2SetPin595@pin+1,c
  7948  0004EC  0E02               	movlw	2
  7949  0004EE  6E03               	movwf	i2SetPin595@pin,c
  7950  0004F0  0E00               	movlw	0
  7951  0004F2  6E06               	movwf	i2SetPin595@value+1,c
  7952  0004F4  0E00               	movlw	0
  7953  0004F6  6E05               	movwf	i2SetPin595@value,c
  7954  0004F8  ECEB  F00C         	call	i2_SetPin595	;wreg free
  7955                           
  7956                           ;PDU.c: 120: Update();
  7957  0004FC  EC61  F00F         	call	i2_Update	;wreg free
  7958                           
  7959                           ;PDU.c: 121: CurrentADC[4] = ADC_GetConversion(U10Multisense);
  7960  000500  0E17               	movlw	23
  7961  000502  EC1E  F00E         	call	_ADC_GetConversion
  7962  000506  C001  F0D2         	movff	?_ADC_GetConversion,_CurrentADC+8
  7963  00050A  C002  F0D3         	movff	?_ADC_GetConversion+1,_CurrentADC+9
  7964                           
  7965                           ;PDU.c: 123: }
  7966  00050E  0012               	return	
  7967  000510                     i2l3227:
  7968                           
  7969                           ;PDU.c: 124: else if(gather == 5){
  7970  000510  0E05               	movlw	5
  7971  000512  180E               	xorwf	ReadCurrent@gather,w,c
  7972  000514  A4D8               	btfss	status,2,c
  7973  000516  D088               	goto	i2l3233
  7974                           
  7975                           ;PDU.c: 126: SetPin595(1, 4, OFF);
  7976  000518  0E00               	movlw	0
  7977  00051A  6E02               	movwf	i2SetPin595@Reg+1,c
  7978  00051C  0E01               	movlw	1
  7979  00051E  6E01               	movwf	i2SetPin595@Reg,c
  7980  000520  0E00               	movlw	0
  7981  000522  6E04               	movwf	i2SetPin595@pin+1,c
  7982  000524  0E04               	movlw	4
  7983  000526  6E03               	movwf	i2SetPin595@pin,c
  7984  000528  0E00               	movlw	0
  7985  00052A  6E06               	movwf	i2SetPin595@value+1,c
  7986  00052C  0E00               	movlw	0
  7987  00052E  6E05               	movwf	i2SetPin595@value,c
  7988  000530  ECEB  F00C         	call	i2_SetPin595	;wreg free
  7989                           
  7990                           ;PDU.c: 127: SetPin595(1, 3, OFF);
  7991  000534  0E00               	movlw	0
  7992  000536  6E02               	movwf	i2SetPin595@Reg+1,c
  7993  000538  0E01               	movlw	1
  7994  00053A  6E01               	movwf	i2SetPin595@Reg,c
  7995  00053C  0E00               	movlw	0
  7996  00053E  6E04               	movwf	i2SetPin595@pin+1,c
  7997  000540  0E03               	movlw	3
  7998  000542  6E03               	movwf	i2SetPin595@pin,c
  7999  000544  0E00               	movlw	0
  8000  000546  6E06               	movwf	i2SetPin595@value+1,c
  8001  000548  0E00               	movlw	0
  8002  00054A  6E05               	movwf	i2SetPin595@value,c
  8003  00054C  ECEB  F00C         	call	i2_SetPin595	;wreg free
  8004                           
  8005                           ;PDU.c: 128: SetPin595(1, 2, OFF);
  8006  000550  0E00               	movlw	0
  8007  000552  6E02               	movwf	i2SetPin595@Reg+1,c
  8008  000554  0E01               	movlw	1
  8009  000556  6E01               	movwf	i2SetPin595@Reg,c
  8010  000558  0E00               	movlw	0
  8011  00055A  6E04               	movwf	i2SetPin595@pin+1,c
  8012  00055C  0E02               	movlw	2
  8013  00055E  6E03               	movwf	i2SetPin595@pin,c
  8014  000560  0E00               	movlw	0
  8015  000562  6E06               	movwf	i2SetPin595@value+1,c
  8016  000564  0E00               	movlw	0
  8017  000566  6E05               	movwf	i2SetPin595@value,c
  8018  000568  ECEB  F00C         	call	i2_SetPin595	;wreg free
  8019                           
  8020                           ;PDU.c: 129: SetPin595(2, 4, ON);
  8021  00056C  0E00               	movlw	0
  8022  00056E  6E02               	movwf	i2SetPin595@Reg+1,c
  8023  000570  0E02               	movlw	2
  8024  000572  6E01               	movwf	i2SetPin595@Reg,c
  8025  000574  0E00               	movlw	0
  8026  000576  6E04               	movwf	i2SetPin595@pin+1,c
  8027  000578  0E04               	movlw	4
  8028  00057A  6E03               	movwf	i2SetPin595@pin,c
  8029  00057C  0E00               	movlw	0
  8030  00057E  6E06               	movwf	i2SetPin595@value+1,c
  8031  000580  0E01               	movlw	1
  8032  000582  6E05               	movwf	i2SetPin595@value,c
  8033  000584  ECEB  F00C         	call	i2_SetPin595	;wreg free
  8034                           
  8035                           ;PDU.c: 130: SetPin595(2, 3, OFF);
  8036  000588  0E00               	movlw	0
  8037  00058A  6E02               	movwf	i2SetPin595@Reg+1,c
  8038  00058C  0E02               	movlw	2
  8039  00058E  6E01               	movwf	i2SetPin595@Reg,c
  8040  000590  0E00               	movlw	0
  8041  000592  6E04               	movwf	i2SetPin595@pin+1,c
  8042  000594  0E03               	movlw	3
  8043  000596  6E03               	movwf	i2SetPin595@pin,c
  8044  000598  0E00               	movlw	0
  8045  00059A  6E06               	movwf	i2SetPin595@value+1,c
  8046  00059C  0E00               	movlw	0
  8047  00059E  6E05               	movwf	i2SetPin595@value,c
  8048  0005A0  ECEB  F00C         	call	i2_SetPin595	;wreg free
  8049                           
  8050                           ;PDU.c: 131: SetPin595(2, 2, OFF);
  8051  0005A4  0E00               	movlw	0
  8052  0005A6  6E02               	movwf	i2SetPin595@Reg+1,c
  8053  0005A8  0E02               	movlw	2
  8054  0005AA  6E01               	movwf	i2SetPin595@Reg,c
  8055  0005AC  0E00               	movlw	0
  8056  0005AE  6E04               	movwf	i2SetPin595@pin+1,c
  8057  0005B0  0E02               	movlw	2
  8058  0005B2  6E03               	movwf	i2SetPin595@pin,c
  8059  0005B4  0E00               	movlw	0
  8060  0005B6  6E06               	movwf	i2SetPin595@value+1,c
  8061  0005B8  0E00               	movlw	0
  8062  0005BA  6E05               	movwf	i2SetPin595@value,c
  8063  0005BC  ECEB  F00C         	call	i2_SetPin595	;wreg free
  8064                           
  8065                           ;PDU.c: 132: SetPin595(3, 4, OFF);
  8066  0005C0  0E00               	movlw	0
  8067  0005C2  6E02               	movwf	i2SetPin595@Reg+1,c
  8068  0005C4  0E03               	movlw	3
  8069  0005C6  6E01               	movwf	i2SetPin595@Reg,c
  8070  0005C8  0E00               	movlw	0
  8071  0005CA  6E04               	movwf	i2SetPin595@pin+1,c
  8072  0005CC  0E04               	movlw	4
  8073  0005CE  6E03               	movwf	i2SetPin595@pin,c
  8074  0005D0  0E00               	movlw	0
  8075  0005D2  6E06               	movwf	i2SetPin595@value+1,c
  8076  0005D4  0E00               	movlw	0
  8077  0005D6  6E05               	movwf	i2SetPin595@value,c
  8078  0005D8  ECEB  F00C         	call	i2_SetPin595	;wreg free
  8079                           
  8080                           ;PDU.c: 133: SetPin595(3, 3, OFF);
  8081  0005DC  0E00               	movlw	0
  8082  0005DE  6E02               	movwf	i2SetPin595@Reg+1,c
  8083  0005E0  0E03               	movlw	3
  8084  0005E2  6E01               	movwf	i2SetPin595@Reg,c
  8085  0005E4  0E00               	movlw	0
  8086  0005E6  6E04               	movwf	i2SetPin595@pin+1,c
  8087  0005E8  0E03               	movlw	3
  8088  0005EA  6E03               	movwf	i2SetPin595@pin,c
  8089  0005EC  0E00               	movlw	0
  8090  0005EE  6E06               	movwf	i2SetPin595@value+1,c
  8091  0005F0  0E00               	movlw	0
  8092  0005F2  6E05               	movwf	i2SetPin595@value,c
  8093  0005F4  ECEB  F00C         	call	i2_SetPin595	;wreg free
  8094                           
  8095                           ;PDU.c: 134: SetPin595(3, 2, OFF);
  8096  0005F8  0E00               	movlw	0
  8097  0005FA  6E02               	movwf	i2SetPin595@Reg+1,c
  8098  0005FC  0E03               	movlw	3
  8099  0005FE  6E01               	movwf	i2SetPin595@Reg,c
  8100  000600  0E00               	movlw	0
  8101  000602  6E04               	movwf	i2SetPin595@pin+1,c
  8102  000604  0E02               	movlw	2
  8103  000606  6E03               	movwf	i2SetPin595@pin,c
  8104  000608  0E00               	movlw	0
  8105  00060A  6E06               	movwf	i2SetPin595@value+1,c
  8106  00060C  0E00               	movlw	0
  8107  00060E  6E05               	movwf	i2SetPin595@value,c
  8108  000610  ECEB  F00C         	call	i2_SetPin595	;wreg free
  8109                           
  8110                           ;PDU.c: 135: Update();
  8111  000614  EC61  F00F         	call	i2_Update	;wreg free
  8112                           
  8113                           ;PDU.c: 136: CurrentADC[3] = ADC_GetConversion(U8Multisense);
  8114  000618  0E16               	movlw	22
  8115  00061A  EC1E  F00E         	call	_ADC_GetConversion
  8116  00061E  C001  F0D0         	movff	?_ADC_GetConversion,_CurrentADC+6
  8117  000622  C002  F0D1         	movff	?_ADC_GetConversion+1,_CurrentADC+7
  8118                           
  8119                           ;PDU.c: 138: }
  8120  000626  0012               	return	
  8121  000628                     i2l3233:
  8122                           
  8123                           ;PDU.c: 139: else if(gather == 6){
  8124  000628  0E06               	movlw	6
  8125  00062A  180E               	xorwf	ReadCurrent@gather,w,c
  8126  00062C  A4D8               	btfss	status,2,c
  8127  00062E  0012               	return	
  8128                           
  8129                           ;PDU.c: 141: SetPin595(1, 4, OFF);
  8130  000630  0E00               	movlw	0
  8131  000632  6E02               	movwf	i2SetPin595@Reg+1,c
  8132  000634  0E01               	movlw	1
  8133  000636  6E01               	movwf	i2SetPin595@Reg,c
  8134  000638  0E00               	movlw	0
  8135  00063A  6E04               	movwf	i2SetPin595@pin+1,c
  8136  00063C  0E04               	movlw	4
  8137  00063E  6E03               	movwf	i2SetPin595@pin,c
  8138  000640  0E00               	movlw	0
  8139  000642  6E06               	movwf	i2SetPin595@value+1,c
  8140  000644  0E00               	movlw	0
  8141  000646  6E05               	movwf	i2SetPin595@value,c
  8142  000648  ECEB  F00C         	call	i2_SetPin595	;wreg free
  8143                           
  8144                           ;PDU.c: 142: SetPin595(1, 3, OFF);
  8145  00064C  0E00               	movlw	0
  8146  00064E  6E02               	movwf	i2SetPin595@Reg+1,c
  8147  000650  0E01               	movlw	1
  8148  000652  6E01               	movwf	i2SetPin595@Reg,c
  8149  000654  0E00               	movlw	0
  8150  000656  6E04               	movwf	i2SetPin595@pin+1,c
  8151  000658  0E03               	movlw	3
  8152  00065A  6E03               	movwf	i2SetPin595@pin,c
  8153  00065C  0E00               	movlw	0
  8154  00065E  6E06               	movwf	i2SetPin595@value+1,c
  8155  000660  0E00               	movlw	0
  8156  000662  6E05               	movwf	i2SetPin595@value,c
  8157  000664  ECEB  F00C         	call	i2_SetPin595	;wreg free
  8158                           
  8159                           ;PDU.c: 143: SetPin595(1, 2, OFF);
  8160  000668  0E00               	movlw	0
  8161  00066A  6E02               	movwf	i2SetPin595@Reg+1,c
  8162  00066C  0E01               	movlw	1
  8163  00066E  6E01               	movwf	i2SetPin595@Reg,c
  8164  000670  0E00               	movlw	0
  8165  000672  6E04               	movwf	i2SetPin595@pin+1,c
  8166  000674  0E02               	movlw	2
  8167  000676  6E03               	movwf	i2SetPin595@pin,c
  8168  000678  0E00               	movlw	0
  8169  00067A  6E06               	movwf	i2SetPin595@value+1,c
  8170  00067C  0E00               	movlw	0
  8171  00067E  6E05               	movwf	i2SetPin595@value,c
  8172  000680  ECEB  F00C         	call	i2_SetPin595	;wreg free
  8173                           
  8174                           ;PDU.c: 144: SetPin595(2, 4, OFF);
  8175  000684  0E00               	movlw	0
  8176  000686  6E02               	movwf	i2SetPin595@Reg+1,c
  8177  000688  0E02               	movlw	2
  8178  00068A  6E01               	movwf	i2SetPin595@Reg,c
  8179  00068C  0E00               	movlw	0
  8180  00068E  6E04               	movwf	i2SetPin595@pin+1,c
  8181  000690  0E04               	movlw	4
  8182  000692  6E03               	movwf	i2SetPin595@pin,c
  8183  000694  0E00               	movlw	0
  8184  000696  6E06               	movwf	i2SetPin595@value+1,c
  8185  000698  0E00               	movlw	0
  8186  00069A  6E05               	movwf	i2SetPin595@value,c
  8187  00069C  ECEB  F00C         	call	i2_SetPin595	;wreg free
  8188                           
  8189                           ;PDU.c: 145: SetPin595(2, 3, OFF);
  8190  0006A0  0E00               	movlw	0
  8191  0006A2  6E02               	movwf	i2SetPin595@Reg+1,c
  8192  0006A4  0E02               	movlw	2
  8193  0006A6  6E01               	movwf	i2SetPin595@Reg,c
  8194  0006A8  0E00               	movlw	0
  8195  0006AA  6E04               	movwf	i2SetPin595@pin+1,c
  8196  0006AC  0E03               	movlw	3
  8197  0006AE  6E03               	movwf	i2SetPin595@pin,c
  8198  0006B0  0E00               	movlw	0
  8199  0006B2  6E06               	movwf	i2SetPin595@value+1,c
  8200  0006B4  0E00               	movlw	0
  8201  0006B6  6E05               	movwf	i2SetPin595@value,c
  8202  0006B8  ECEB  F00C         	call	i2_SetPin595	;wreg free
  8203                           
  8204                           ;PDU.c: 146: SetPin595(2, 2, OFF);
  8205  0006BC  0E00               	movlw	0
  8206  0006BE  6E02               	movwf	i2SetPin595@Reg+1,c
  8207  0006C0  0E02               	movlw	2
  8208  0006C2  6E01               	movwf	i2SetPin595@Reg,c
  8209  0006C4  0E00               	movlw	0
  8210  0006C6  6E04               	movwf	i2SetPin595@pin+1,c
  8211  0006C8  0E02               	movlw	2
  8212  0006CA  6E03               	movwf	i2SetPin595@pin,c
  8213  0006CC  0E00               	movlw	0
  8214  0006CE  6E06               	movwf	i2SetPin595@value+1,c
  8215  0006D0  0E00               	movlw	0
  8216  0006D2  6E05               	movwf	i2SetPin595@value,c
  8217  0006D4  ECEB  F00C         	call	i2_SetPin595	;wreg free
  8218                           
  8219                           ;PDU.c: 147: SetPin595(3, 4, ON);
  8220  0006D8  0E00               	movlw	0
  8221  0006DA  6E02               	movwf	i2SetPin595@Reg+1,c
  8222  0006DC  0E03               	movlw	3
  8223  0006DE  6E01               	movwf	i2SetPin595@Reg,c
  8224  0006E0  0E00               	movlw	0
  8225  0006E2  6E04               	movwf	i2SetPin595@pin+1,c
  8226  0006E4  0E04               	movlw	4
  8227  0006E6  6E03               	movwf	i2SetPin595@pin,c
  8228  0006E8  0E00               	movlw	0
  8229  0006EA  6E06               	movwf	i2SetPin595@value+1,c
  8230  0006EC  0E01               	movlw	1
  8231  0006EE  6E05               	movwf	i2SetPin595@value,c
  8232  0006F0  ECEB  F00C         	call	i2_SetPin595	;wreg free
  8233                           
  8234                           ;PDU.c: 148: SetPin595(3, 3, ON);
  8235  0006F4  0E00               	movlw	0
  8236  0006F6  6E02               	movwf	i2SetPin595@Reg+1,c
  8237  0006F8  0E03               	movlw	3
  8238  0006FA  6E01               	movwf	i2SetPin595@Reg,c
  8239  0006FC  0E00               	movlw	0
  8240  0006FE  6E04               	movwf	i2SetPin595@pin+1,c
  8241  000700  0E03               	movlw	3
  8242  000702  6E03               	movwf	i2SetPin595@pin,c
  8243  000704  0E00               	movlw	0
  8244  000706  6E06               	movwf	i2SetPin595@value+1,c
  8245  000708  0E01               	movlw	1
  8246  00070A  6E05               	movwf	i2SetPin595@value,c
  8247  00070C  ECEB  F00C         	call	i2_SetPin595	;wreg free
  8248                           
  8249                           ;PDU.c: 149: SetPin595(3, 2, OFF);
  8250  000710  0E00               	movlw	0
  8251  000712  6E02               	movwf	i2SetPin595@Reg+1,c
  8252  000714  0E03               	movlw	3
  8253  000716  6E01               	movwf	i2SetPin595@Reg,c
  8254  000718  0E00               	movlw	0
  8255  00071A  6E04               	movwf	i2SetPin595@pin+1,c
  8256  00071C  0E02               	movlw	2
  8257  00071E  6E03               	movwf	i2SetPin595@pin,c
  8258  000720  0E00               	movlw	0
  8259  000722  6E06               	movwf	i2SetPin595@value+1,c
  8260  000724  0E00               	movlw	0
  8261  000726  6E05               	movwf	i2SetPin595@value,c
  8262  000728  ECEB  F00C         	call	i2_SetPin595	;wreg free
  8263                           
  8264                           ;PDU.c: 150: Update();
  8265  00072C  EC61  F00F         	call	i2_Update	;wreg free
  8266                           
  8267                           ;PDU.c: 151: CurrentADC[0] = ADC_GetConversion(U5Multisense);
  8268  000730  0E10               	movlw	16
  8269  000732  EC1E  F00E         	call	_ADC_GetConversion
  8270  000736  C001  F0CA         	movff	?_ADC_GetConversion,_CurrentADC
  8271  00073A  C002  F0CB         	movff	?_ADC_GetConversion+1,_CurrentADC+1
  8272  00073E  0012               	return	
  8273  000740                     __end_of_ReadCurrent:
  8274                           	opt stack 0
  8275                           pclatu	equ	0xFFB
  8276                           pclath	equ	0xFFA
  8277                           tblptru	equ	0xFF8
  8278                           tblptrh	equ	0xFF7
  8279                           tblptrl	equ	0xFF6
  8280                           tablat	equ	0xFF5
  8281                           prodh	equ	0xFF4
  8282                           prodl	equ	0xFF3
  8283                           intcon	equ	0xFF2
  8284                           intcon2	equ	0xFF1
  8285                           postinc0	equ	0xFEE
  8286                           fsr0h	equ	0xFEA
  8287                           fsr0l	equ	0xFE9
  8288                           wreg	equ	0xFE8
  8289                           indf1	equ	0xFE7
  8290                           postdec1	equ	0xFE5
  8291                           fsr1h	equ	0xFE2
  8292                           fsr1l	equ	0xFE1
  8293                           indf2	equ	0xFDF
  8294                           postinc2	equ	0xFDE
  8295                           postdec2	equ	0xFDD
  8296                           plusw2	equ	0xFDB
  8297                           fsr2h	equ	0xFDA
  8298                           fsr2l	equ	0xFD9
  8299                           status	equ	0xFD8
  8300                           
  8301 ;; *************** function i2_Update *****************
  8302 ;; Defined at:
  8303 ;;		line 225 in file "PDU.c"
  8304 ;; Parameters:    Size  Location     Type
  8305 ;;		None
  8306 ;; Auto vars:     Size  Location     Type
  8307 ;;		None
  8308 ;; Return value:  Size  Location     Type
  8309 ;;                  1    wreg      void 
  8310 ;; Registers used:
  8311 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8312 ;; Tracked objects:
  8313 ;;		On entry : 0/0
  8314 ;;		On exit  : 0/0
  8315 ;;		Unchanged: 0/0
  8316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8317 ;;      Params:         0       0       0       0       0       0       0
  8318 ;;      Locals:         0       0       0       0       0       0       0
  8319 ;;      Temps:          0       0       0       0       0       0       0
  8320 ;;      Totals:         0       0       0       0       0       0       0
  8321 ;;Total ram usage:        0 bytes
  8322 ;; Hardware stack levels used:    1
  8323 ;; Hardware stack levels required when called:    2
  8324 ;; This function calls:
  8325 ;;		i2_writeRegisters
  8326 ;; This function is called by:
  8327 ;;		_ReadCurrent
  8328 ;; This function uses a non-reentrant model
  8329 ;;
  8330                           
  8331                           	psect	text49
  8332  001EC2                     __ptext49:
  8333                           	opt stack 0
  8334  001EC2                     i2_Update:
  8335                           	opt stack 18
  8336                           
  8337                           ;PDU.c: 226: writeRegisters();
  8338                           
  8339                           ;incstack = 0
  8340  001EC2  EC78  F00B         	call	i2_writeRegisters	;wreg free
  8341  001EC6  0012               	return		;funcret
  8342  001EC8                     __end_ofi2_Update:
  8343                           	opt stack 0
  8344                           pclatu	equ	0xFFB
  8345                           pclath	equ	0xFFA
  8346                           tblptru	equ	0xFF8
  8347                           tblptrh	equ	0xFF7
  8348                           tblptrl	equ	0xFF6
  8349                           tablat	equ	0xFF5
  8350                           prodh	equ	0xFF4
  8351                           prodl	equ	0xFF3
  8352                           intcon	equ	0xFF2
  8353                           intcon2	equ	0xFF1
  8354                           postinc0	equ	0xFEE
  8355                           fsr0h	equ	0xFEA
  8356                           fsr0l	equ	0xFE9
  8357                           wreg	equ	0xFE8
  8358                           indf1	equ	0xFE7
  8359                           postdec1	equ	0xFE5
  8360                           fsr1h	equ	0xFE2
  8361                           fsr1l	equ	0xFE1
  8362                           indf2	equ	0xFDF
  8363                           postinc2	equ	0xFDE
  8364                           postdec2	equ	0xFDD
  8365                           plusw2	equ	0xFDB
  8366                           fsr2h	equ	0xFDA
  8367                           fsr2l	equ	0xFD9
  8368                           status	equ	0xFD8
  8369                           
  8370 ;; *************** function i2_writeRegisters *****************
  8371 ;; Defined at:
  8372 ;;		line 50 in file "Shift595.c"
  8373 ;; Parameters:    Size  Location     Type
  8374 ;;		None
  8375 ;; Auto vars:     Size  Location     Type
  8376 ;;  writeRegiste    2   11[COMRAM] int 
  8377 ;;  writeRegiste    2    9[COMRAM] int 
  8378 ;; Return value:  Size  Location     Type
  8379 ;;                  1    wreg      void 
  8380 ;; Registers used:
  8381 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8382 ;; Tracked objects:
  8383 ;;		On entry : 0/0
  8384 ;;		On exit  : 0/0
  8385 ;;		Unchanged: 0/0
  8386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8387 ;;      Params:         0       0       0       0       0       0       0
  8388 ;;      Locals:         4       0       0       0       0       0       0
  8389 ;;      Temps:          0       0       0       0       0       0       0
  8390 ;;      Totals:         4       0       0       0       0       0       0
  8391 ;;Total ram usage:        4 bytes
  8392 ;; Hardware stack levels used:    1
  8393 ;; Hardware stack levels required when called:    1
  8394 ;; This function calls:
  8395 ;;		i2_Delay
  8396 ;; This function is called by:
  8397 ;;		i2_Update
  8398 ;; This function uses a non-reentrant model
  8399 ;;
  8400                           
  8401                           	psect	text50
  8402  0016F0                     __ptext50:
  8403                           	opt stack 0
  8404  0016F0                     i2_writeRegisters:
  8405                           	opt stack 18
  8406                           
  8407                           ;Shift595.c: 51: int val = 0;
  8408                           
  8409                           ;incstack = 0
  8410  0016F0  0E00               	movlw	0
  8411  0016F2  6E0B               	movwf	i2writeRegisters@val+1,c
  8412  0016F4  0E00               	movlw	0
  8413  0016F6  6E0A               	movwf	i2writeRegisters@val,c
  8414                           
  8415                           ;Shift595.c: 52: for (int i = 3 * 8 - 1; i >= 0; i--) {
  8416  0016F8  0E00               	movlw	0
  8417  0016FA  6E0D               	movwf	i2writeRegisters@i+1,c
  8418  0016FC  0E17               	movlw	23
  8419  0016FE  6E0C               	movwf	i2writeRegisters@i,c
  8420  001700                     i2l2921:
  8421  001700  BE0D               	btfsc	i2writeRegisters@i+1,7,c
  8422  001702  D01D               	goto	i2l538
  8423                           
  8424                           ;Shift595.c: 53: do { LATD7 = 0; } while(0);
  8425  001704  9E8C               	bcf	3980,7,c	;volatile
  8426                           
  8427                           ;Shift595.c: 55: val = registers[i];
  8428  001706  90D8               	bcf	status,0,c
  8429  001708  340C               	rlcf	i2writeRegisters@i,w,c
  8430  00170A  6ED9               	movwf	fsr2l,c
  8431  00170C  340D               	rlcf	i2writeRegisters@i+1,w,c
  8432  00170E  6EDA               	movwf	fsr2h,c
  8433  001710  0E00               	movlw	low _registers
  8434  001712  26D9               	addwf	fsr2l,f,c
  8435  001714  0E01               	movlw	high _registers
  8436  001716  22DA               	addwfc	fsr2h,f,c
  8437  001718  CFDE F00A          	movff	postinc2,i2writeRegisters@val
  8438  00171C  CFDD F00B          	movff	postdec2,i2writeRegisters@val+1
  8439                           
  8440                           ;Shift595.c: 56: if (val == 1) {
  8441  001720  040A               	decf	i2writeRegisters@val,w,c
  8442  001722  100B               	iorwf	i2writeRegisters@val+1,w,c
  8443  001724  A4D8               	btfss	status,2,c
  8444  001726  D002               	goto	i2l2929
  8445                           
  8446                           ;Shift595.c: 57: do { LATD4 = 1; } while(0);
  8447  001728  888C               	bsf	3980,4,c	;volatile
  8448                           
  8449                           ;Shift595.c: 58: } else if (val == 0) {
  8450  00172A  D004               	goto	i2l536
  8451  00172C                     i2l2929:
  8452  00172C  500A               	movf	i2writeRegisters@val,w,c
  8453  00172E  100B               	iorwf	i2writeRegisters@val+1,w,c
  8454  001730  B4D8               	btfsc	status,2,c
  8455                           
  8456                           ;Shift595.c: 59: do { LATD4 = 0; } while(0);
  8457  001732  988C               	bcf	3980,4,c	;volatile
  8458  001734                     i2l536:
  8459  001734  8E8C               	bsf	3980,7,c	;volatile
  8460  001736  060C               	decf	i2writeRegisters@i,f,c
  8461  001738  A0D8               	btfss	status,0,c
  8462  00173A  060D               	decf	i2writeRegisters@i+1,f,c
  8463  00173C  D7E1               	goto	i2l2921
  8464  00173E                     i2l538:
  8465  00173E  9E8C               	bcf	3980,7,c	;volatile
  8466                           
  8467                           ;Shift595.c: 67: Delay(1);
  8468  001740  0E01               	movlw	1
  8469  001742  6E01               	movwf	i2Delay@wait,c
  8470  001744  0E00               	movlw	0
  8471  001746  6E02               	movwf	i2Delay@wait+1,c
  8472  001748  0E00               	movlw	0
  8473  00174A  6E03               	movwf	i2Delay@wait+2,c
  8474  00174C  0E00               	movlw	0
  8475  00174E  6E04               	movwf	i2Delay@wait+3,c
  8476  001750  EC5C  F00D         	call	i2_Delay	;wreg free
  8477                           
  8478                           ;Shift595.c: 68: do { LATD6 = 1; } while(0);
  8479  001754  8C8C               	bsf	3980,6,c	;volatile
  8480                           
  8481                           ;Shift595.c: 69: Delay(1);
  8482  001756  0E01               	movlw	1
  8483  001758  6E01               	movwf	i2Delay@wait,c
  8484  00175A  0E00               	movlw	0
  8485  00175C  6E02               	movwf	i2Delay@wait+1,c
  8486  00175E  0E00               	movlw	0
  8487  001760  6E03               	movwf	i2Delay@wait+2,c
  8488  001762  0E00               	movlw	0
  8489  001764  6E04               	movwf	i2Delay@wait+3,c
  8490  001766  EC5C  F00D         	call	i2_Delay	;wreg free
  8491                           
  8492                           ;Shift595.c: 70: do { LATD6 = 0; } while(0);
  8493  00176A  9C8C               	bcf	3980,6,c	;volatile
  8494  00176C  0012               	return	
  8495  00176E                     __end_ofi2_writeRegisters:
  8496                           	opt stack 0
  8497                           pclatu	equ	0xFFB
  8498                           pclath	equ	0xFFA
  8499                           tblptru	equ	0xFF8
  8500                           tblptrh	equ	0xFF7
  8501                           tblptrl	equ	0xFF6
  8502                           tablat	equ	0xFF5
  8503                           prodh	equ	0xFF4
  8504                           prodl	equ	0xFF3
  8505                           intcon	equ	0xFF2
  8506                           intcon2	equ	0xFF1
  8507                           postinc0	equ	0xFEE
  8508                           fsr0h	equ	0xFEA
  8509                           fsr0l	equ	0xFE9
  8510                           wreg	equ	0xFE8
  8511                           indf1	equ	0xFE7
  8512                           postdec1	equ	0xFE5
  8513                           fsr1h	equ	0xFE2
  8514                           fsr1l	equ	0xFE1
  8515                           indf2	equ	0xFDF
  8516                           postinc2	equ	0xFDE
  8517                           postdec2	equ	0xFDD
  8518                           plusw2	equ	0xFDB
  8519                           fsr2h	equ	0xFDA
  8520                           fsr2l	equ	0xFD9
  8521                           status	equ	0xFD8
  8522                           
  8523 ;; *************** function i2_Delay *****************
  8524 ;; Defined at:
  8525 ;;		line 9 in file "Functions.c"
  8526 ;; Parameters:    Size  Location     Type
  8527 ;;  wait            4    0[COMRAM] long 
  8528 ;; Auto vars:     Size  Location     Type
  8529 ;;  Delay           4    5[COMRAM] long 
  8530 ;; Return value:  Size  Location     Type
  8531 ;;                  1    wreg      void 
  8532 ;; Registers used:
  8533 ;;		wreg, status,2, status,0
  8534 ;; Tracked objects:
  8535 ;;		On entry : 0/0
  8536 ;;		On exit  : 0/0
  8537 ;;		Unchanged: 0/0
  8538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8539 ;;      Params:         4       0       0       0       0       0       0
  8540 ;;      Locals:         4       0       0       0       0       0       0
  8541 ;;      Temps:          1       0       0       0       0       0       0
  8542 ;;      Totals:         9       0       0       0       0       0       0
  8543 ;;Total ram usage:        9 bytes
  8544 ;; Hardware stack levels used:    1
  8545 ;; This function calls:
  8546 ;;		Nothing
  8547 ;; This function is called by:
  8548 ;;		i2_writeRegisters
  8549 ;; This function uses a non-reentrant model
  8550 ;;
  8551                           
  8552                           	psect	text51
  8553  001AB8                     __ptext51:
  8554                           	opt stack 0
  8555  001AB8                     i2_Delay:
  8556                           	opt stack 18
  8557                           
  8558                           ;Functions.c: 10: long int i = 0;
  8559                           
  8560                           ;incstack = 0
  8561  001AB8  0E00               	movlw	0
  8562  001ABA  6E06               	movwf	i2Delay@i,c
  8563  001ABC  0E00               	movlw	0
  8564  001ABE  6E07               	movwf	i2Delay@i+1,c
  8565  001AC0  0E00               	movlw	0
  8566  001AC2  6E08               	movwf	i2Delay@i+2,c
  8567  001AC4  0E00               	movlw	0
  8568  001AC6  6E09               	movwf	i2Delay@i+3,c
  8569                           
  8570                           ;Functions.c: 11: for (; wait > i; i++) {
  8571  001AC8  D00D               	goto	i2l2819
  8572  001ACA                     i2l2815:
  8573                           
  8574                           ;Functions.c: 12: _delay((unsigned long)((1)*(8000000/4000.0)));
  8575  001ACA  0E03               	movlw	3
  8576  001ACC  6E05               	movwf	??i2_Delay& (0+255),c
  8577  001ACE  0E98               	movlw	152
  8578  001AD0                     i2u283_47:
  8579  001AD0  2EE8               	decfsz	wreg,f,c
  8580  001AD2  D7FE               	bra	i2u283_47
  8581  001AD4  2E05               	decfsz	??i2_Delay& (0+255),f,c
  8582  001AD6  D7FC               	bra	i2u283_47
  8583  001AD8  0E01               	movlw	1
  8584  001ADA  2606               	addwf	i2Delay@i,f,c
  8585  001ADC  0E00               	movlw	0
  8586  001ADE  2207               	addwfc	i2Delay@i+1,f,c
  8587  001AE0  2208               	addwfc	i2Delay@i+2,f,c
  8588  001AE2  2209               	addwfc	i2Delay@i+3,f,c
  8589  001AE4                     i2l2819:
  8590  001AE4  5001               	movf	i2Delay@wait,w,c
  8591  001AE6  5C06               	subwf	i2Delay@i,w,c
  8592  001AE8  5002               	movf	i2Delay@wait+1,w,c
  8593  001AEA  5807               	subwfb	i2Delay@i+1,w,c
  8594  001AEC  5003               	movf	i2Delay@wait+2,w,c
  8595  001AEE  5808               	subwfb	i2Delay@i+2,w,c
  8596  001AF0  5009               	movf	i2Delay@i+3,w,c
  8597  001AF2  0A80               	xorlw	128
  8598  001AF4  6E05               	movwf	??i2_Delay& (0+255),c
  8599  001AF6  5004               	movf	i2Delay@wait+3,w,c
  8600  001AF8  0A80               	xorlw	128
  8601  001AFA  5805               	subwfb	??i2_Delay& (0+255),w,c
  8602  001AFC  B0D8               	btfsc	status,0,c
  8603  001AFE  0012               	return	
  8604  001B00  D7E4               	goto	i2l2815
  8605  001B02                     __end_ofi2_Delay:
  8606                           	opt stack 0
  8607                           pclatu	equ	0xFFB
  8608                           pclath	equ	0xFFA
  8609                           tblptru	equ	0xFF8
  8610                           tblptrh	equ	0xFF7
  8611                           tblptrl	equ	0xFF6
  8612                           tablat	equ	0xFF5
  8613                           prodh	equ	0xFF4
  8614                           prodl	equ	0xFF3
  8615                           intcon	equ	0xFF2
  8616                           intcon2	equ	0xFF1
  8617                           postinc0	equ	0xFEE
  8618                           fsr0h	equ	0xFEA
  8619                           fsr0l	equ	0xFE9
  8620                           wreg	equ	0xFE8
  8621                           indf1	equ	0xFE7
  8622                           postdec1	equ	0xFE5
  8623                           fsr1h	equ	0xFE2
  8624                           fsr1l	equ	0xFE1
  8625                           indf2	equ	0xFDF
  8626                           postinc2	equ	0xFDE
  8627                           postdec2	equ	0xFDD
  8628                           plusw2	equ	0xFDB
  8629                           fsr2h	equ	0xFDA
  8630                           fsr2l	equ	0xFD9
  8631                           status	equ	0xFD8
  8632                           
  8633 ;; *************** function i2_SetPin595 *****************
  8634 ;; Defined at:
  8635 ;;		line 32 in file "Shift595.c"
  8636 ;; Parameters:    Size  Location     Type
  8637 ;;  Reg             2    0[COMRAM] int 
  8638 ;;  pin             2    2[COMRAM] int 
  8639 ;;  value           2    4[COMRAM] int 
  8640 ;; Auto vars:     Size  Location     Type
  8641 ;;		None
  8642 ;; Return value:  Size  Location     Type
  8643 ;;                  1    wreg      void 
  8644 ;; Registers used:
  8645 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8646 ;; Tracked objects:
  8647 ;;		On entry : 0/0
  8648 ;;		On exit  : 0/0
  8649 ;;		Unchanged: 0/0
  8650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8651 ;;      Params:         6       0       0       0       0       0       0
  8652 ;;      Locals:         0       0       0       0       0       0       0
  8653 ;;      Temps:          4       0       0       0       0       0       0
  8654 ;;      Totals:        10       0       0       0       0       0       0
  8655 ;;Total ram usage:       10 bytes
  8656 ;; Hardware stack levels used:    1
  8657 ;; This function calls:
  8658 ;;		Nothing
  8659 ;; This function is called by:
  8660 ;;		_ReadCurrent
  8661 ;; This function uses a non-reentrant model
  8662 ;;
  8663                           
  8664                           	psect	text52
  8665  0019D6                     __ptext52:
  8666                           	opt stack 0
  8667  0019D6                     i2_SetPin595:
  8668                           	opt stack 20
  8669                           
  8670                           ;Shift595.c: 33: registers[((Reg - 1)*8) + pin] = value;
  8671                           
  8672                           ;incstack = 0
  8673  0019D6  0EF0               	movlw	240
  8674  0019D8  6E07               	movwf	??i2_SetPin595& (0+255),c
  8675  0019DA  0EFF               	movlw	255
  8676  0019DC  6E08               	movwf	(??i2_SetPin595+1)& (0+255),c
  8677  0019DE  C001  F009         	movff	i2SetPin595@Reg,??i2_SetPin595+2
  8678  0019E2  C002  F00A         	movff	i2SetPin595@Reg+1,??i2_SetPin595+3
  8679  0019E6  90D8               	bcf	status,0,c
  8680  0019E8  3609               	rlcf	??i2_SetPin595+2,f,c
  8681  0019EA  360A               	rlcf	??i2_SetPin595+3,f,c
  8682  0019EC  90D8               	bcf	status,0,c
  8683  0019EE  3609               	rlcf	??i2_SetPin595+2,f,c
  8684  0019F0  360A               	rlcf	??i2_SetPin595+3,f,c
  8685  0019F2  90D8               	bcf	status,0,c
  8686  0019F4  3609               	rlcf	??i2_SetPin595+2,f,c
  8687  0019F6  360A               	rlcf	??i2_SetPin595+3,f,c
  8688  0019F8  5003               	movf	i2SetPin595@pin,w,c
  8689  0019FA  2609               	addwf	??i2_SetPin595+2,f,c
  8690  0019FC  5004               	movf	i2SetPin595@pin+1,w,c
  8691  0019FE  220A               	addwfc	??i2_SetPin595+3,f,c
  8692  001A00  90D8               	bcf	status,0,c
  8693  001A02  3609               	rlcf	??i2_SetPin595+2,f,c
  8694  001A04  360A               	rlcf	??i2_SetPin595+3,f,c
  8695  001A06  5007               	movf	??i2_SetPin595,w,c
  8696  001A08  2609               	addwf	??i2_SetPin595+2,f,c
  8697  001A0A  5008               	movf	??i2_SetPin595+1,w,c
  8698  001A0C  220A               	addwfc	??i2_SetPin595+3,f,c
  8699  001A0E  0E00               	movlw	low _registers
  8700  001A10  2409               	addwf	??i2_SetPin595+2,w,c
  8701  001A12  6ED9               	movwf	fsr2l,c
  8702  001A14  0E01               	movlw	high _registers
  8703  001A16  200A               	addwfc	??i2_SetPin595+3,w,c
  8704  001A18  6EDA               	movwf	fsr2h,c
  8705  001A1A  C005  FFDE         	movff	i2SetPin595@value,postinc2
  8706  001A1E  C006  FFDD         	movff	i2SetPin595@value+1,postdec2
  8707  001A22  0012               	return		;funcret
  8708  001A24                     __end_ofi2_SetPin595:
  8709                           	opt stack 0
  8710                           pclatu	equ	0xFFB
  8711                           pclath	equ	0xFFA
  8712                           tblptru	equ	0xFF8
  8713                           tblptrh	equ	0xFF7
  8714                           tblptrl	equ	0xFF6
  8715                           tablat	equ	0xFF5
  8716                           prodh	equ	0xFF4
  8717                           prodl	equ	0xFF3
  8718                           intcon	equ	0xFF2
  8719                           intcon2	equ	0xFF1
  8720                           postinc0	equ	0xFEE
  8721                           fsr0h	equ	0xFEA
  8722                           fsr0l	equ	0xFE9
  8723                           wreg	equ	0xFE8
  8724                           indf1	equ	0xFE7
  8725                           postdec1	equ	0xFE5
  8726                           fsr1h	equ	0xFE2
  8727                           fsr1l	equ	0xFE1
  8728                           indf2	equ	0xFDF
  8729                           postinc2	equ	0xFDE
  8730                           postdec2	equ	0xFDD
  8731                           plusw2	equ	0xFDB
  8732                           fsr2h	equ	0xFDA
  8733                           fsr2l	equ	0xFD9
  8734                           status	equ	0xFD8
  8735                           
  8736 ;; *************** function _ADC_GetConversion *****************
  8737 ;; Defined at:
  8738 ;;		line 109 in file "mcc_generated_files/adc.c"
  8739 ;; Parameters:    Size  Location     Type
  8740 ;;  channel         1    wreg     enum E6965
  8741 ;; Auto vars:     Size  Location     Type
  8742 ;;  channel         1    4[COMRAM] enum E6965
  8743 ;; Return value:  Size  Location     Type
  8744 ;;                  2    0[COMRAM] unsigned int 
  8745 ;; Registers used:
  8746 ;;		wreg, status,2, status,0
  8747 ;; Tracked objects:
  8748 ;;		On entry : 0/0
  8749 ;;		On exit  : 0/0
  8750 ;;		Unchanged: 0/0
  8751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8752 ;;      Params:         2       0       0       0       0       0       0
  8753 ;;      Locals:         1       0       0       0       0       0       0
  8754 ;;      Temps:          2       0       0       0       0       0       0
  8755 ;;      Totals:         5       0       0       0       0       0       0
  8756 ;;Total ram usage:        5 bytes
  8757 ;; Hardware stack levels used:    1
  8758 ;; This function calls:
  8759 ;;		Nothing
  8760 ;; This function is called by:
  8761 ;;		_ReadCurrent
  8762 ;; This function uses a non-reentrant model
  8763 ;;
  8764                           
  8765                           	psect	text53
  8766  001C3C                     __ptext53:
  8767                           	opt stack 0
  8768  001C3C                     _ADC_GetConversion:
  8769                           	opt stack 20
  8770                           
  8771                           ;incstack = 0
  8772                           ;ADC_GetConversion@channel stored from wreg
  8773  001C3C  6E05               	movwf	ADC_GetConversion@channel,c
  8774                           
  8775                           ;adc.c: 112: ADCON0bits.CHS = channel;
  8776  001C3E  C005  F003         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
  8777  001C42  4603               	rlncf	??_ADC_GetConversion,f,c
  8778  001C44  4603               	rlncf	??_ADC_GetConversion,f,c
  8779  001C46  50C2               	movf	4034,w,c	;volatile
  8780  001C48  1803               	xorwf	??_ADC_GetConversion,w,c
  8781  001C4A  0B83               	andlw	-125
  8782  001C4C  1803               	xorwf	??_ADC_GetConversion,w,c
  8783  001C4E  6EC2               	movwf	4034,c	;volatile
  8784                           
  8785                           ;adc.c: 115: ADCON0bits.ADON = 1;
  8786  001C50  80C2               	bsf	4034,0,c	;volatile
  8787                           
  8788                           ;adc.c: 119: ADCON0bits.GO_nDONE = 1;
  8789  001C52  82C2               	bsf	4034,1,c	;volatile
  8790  001C54                     i2l31:
  8791  001C54  B2C2               	btfsc	4034,1,c	;volatile
  8792  001C56  D7FE               	goto	i2l31
  8793                           
  8794                           ;adc.c: 124: }
  8795                           ;adc.c: 127: return ((ADRESH << 8) + ADRESL);
  8796  001C58  50C4               	movf	4036,w,c	;volatile
  8797  001C5A  6E04               	movwf	(??_ADC_GetConversion+1)& (0+255),c
  8798  001C5C  6A03               	clrf	??_ADC_GetConversion& (0+255),c
  8799  001C5E  50C3               	movf	4035,w,c	;volatile
  8800  001C60  2403               	addwf	??_ADC_GetConversion,w,c
  8801  001C62  6E01               	movwf	?_ADC_GetConversion,c
  8802  001C64  0E00               	movlw	0
  8803  001C66  2004               	addwfc	??_ADC_GetConversion+1,w,c
  8804  001C68  6E02               	movwf	?_ADC_GetConversion+1,c
  8805  001C6A  0012               	return	
  8806  001C6C                     __end_of_ADC_GetConversion:
  8807                           	opt stack 0
  8808                           pclatu	equ	0xFFB
  8809                           pclath	equ	0xFFA
  8810                           tblptru	equ	0xFF8
  8811                           tblptrh	equ	0xFF7
  8812                           tblptrl	equ	0xFF6
  8813                           tablat	equ	0xFF5
  8814                           prodh	equ	0xFF4
  8815                           prodl	equ	0xFF3
  8816                           intcon	equ	0xFF2
  8817                           intcon2	equ	0xFF1
  8818                           postinc0	equ	0xFEE
  8819                           fsr0h	equ	0xFEA
  8820                           fsr0l	equ	0xFE9
  8821                           wreg	equ	0xFE8
  8822                           indf1	equ	0xFE7
  8823                           postdec1	equ	0xFE5
  8824                           fsr1h	equ	0xFE2
  8825                           fsr1l	equ	0xFE1
  8826                           indf2	equ	0xFDF
  8827                           postinc2	equ	0xFDE
  8828                           postdec2	equ	0xFDD
  8829                           plusw2	equ	0xFDB
  8830                           fsr2h	equ	0xFDA
  8831                           fsr2l	equ	0xFD9
  8832                           status	equ	0xFD8
  8833                           
  8834 ;; *************** function _FuseSystem *****************
  8835 ;; Defined at:
  8836 ;;		line 175 in file "PDU.c"
  8837 ;; Parameters:    Size  Location     Type
  8838 ;;		None
  8839 ;; Auto vars:     Size  Location     Type
  8840 ;;  i               2    6[COMRAM] int 
  8841 ;;  i               2    8[COMRAM] int 
  8842 ;; Return value:  Size  Location     Type
  8843 ;;                  1    wreg      void 
  8844 ;; Registers used:
  8845 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8846 ;; Tracked objects:
  8847 ;;		On entry : 0/0
  8848 ;;		On exit  : 0/0
  8849 ;;		Unchanged: 0/0
  8850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8851 ;;      Params:         0       0       0       0       0       0       0
  8852 ;;      Locals:         4       0       0       0       0       0       0
  8853 ;;      Temps:          0       0       0       0       0       0       0
  8854 ;;      Totals:         4       0       0       0       0       0       0
  8855 ;;Total ram usage:        4 bytes
  8856 ;; Hardware stack levels used:    1
  8857 ;; Hardware stack levels required when called:    1
  8858 ;; This function calls:
  8859 ;;		___wmul
  8860 ;; This function is called by:
  8861 ;;		_TMR1_ISR
  8862 ;; This function uses a non-reentrant model
  8863 ;;
  8864                           
  8865                           	psect	text54
  8866  00176E                     __ptext54:
  8867                           	opt stack 0
  8868  00176E                     _FuseSystem:
  8869                           	opt stack 20
  8870                           
  8871                           ;PDU.c: 177: for (int i = 0; i < 6; i++) {
  8872                           
  8873                           ;incstack = 0
  8874  00176E  0E00               	movlw	0
  8875  001770  6E0A               	movwf	FuseSystem@i+1,c
  8876  001772  0E00               	movlw	0
  8877  001774  6E09               	movwf	FuseSystem@i,c
  8878  001776                     i2l3183:
  8879  001776  BE0A               	btfsc	FuseSystem@i+1,7,c
  8880  001778  D006               	goto	i2l3187
  8881  00177A  500A               	movf	FuseSystem@i+1,w,c
  8882  00177C  E127               	bnz	i2l3193
  8883  00177E  0E06               	movlw	6
  8884  001780  5C09               	subwf	FuseSystem@i,w,c
  8885  001782  B0D8               	btfsc	status,0,c
  8886  001784  D023               	goto	i2l3193
  8887  001786                     i2l3187:
  8888                           
  8889                           ;PDU.c: 178: Current[i] = CurrentADC[i]*48;
  8890  001786  90D8               	bcf	status,0,c
  8891  001788  3409               	rlcf	FuseSystem@i,w,c
  8892  00178A  6ED9               	movwf	fsr2l,c
  8893  00178C  340A               	rlcf	FuseSystem@i+1,w,c
  8894  00178E  6EDA               	movwf	fsr2h,c
  8895  001790  0ECA               	movlw	low _CurrentADC
  8896  001792  26D9               	addwf	fsr2l,f,c
  8897  001794  0E00               	movlw	high _CurrentADC
  8898  001796  22DA               	addwfc	fsr2h,f,c
  8899  001798  CFDE F001          	movff	postinc2,___wmul@multiplier
  8900  00179C  CFDD F002          	movff	postdec2,___wmul@multiplier+1
  8901  0017A0  0E00               	movlw	0
  8902  0017A2  6E04               	movwf	___wmul@multiplicand+1,c
  8903  0017A4  0E30               	movlw	48
  8904  0017A6  6E03               	movwf	___wmul@multiplicand,c
  8905  0017A8  EC8D  F00E         	call	___wmul	;wreg free
  8906  0017AC  90D8               	bcf	status,0,c
  8907  0017AE  3409               	rlcf	FuseSystem@i,w,c
  8908  0017B0  6ED9               	movwf	fsr2l,c
  8909  0017B2  340A               	rlcf	FuseSystem@i+1,w,c
  8910  0017B4  6EDA               	movwf	fsr2h,c
  8911  0017B6  0EBE               	movlw	low _Current
  8912  0017B8  26D9               	addwf	fsr2l,f,c
  8913  0017BA  0E00               	movlw	high _Current
  8914  0017BC  22DA               	addwfc	fsr2h,f,c
  8915  0017BE  C001  FFDE         	movff	?___wmul,postinc2
  8916  0017C2  C002  FFDD         	movff	?___wmul+1,postdec2
  8917  0017C6  4A09               	infsnz	FuseSystem@i,f,c
  8918  0017C8  2A0A               	incf	FuseSystem@i+1,f,c
  8919  0017CA  D7D5               	goto	i2l3183
  8920  0017CC                     i2l3193:
  8921                           
  8922                           ;PDU.c: 181: }
  8923                           ;PDU.c: 183: for (int i = 0; i < 6; i++) {
  8924  0017CC  0E00               	movlw	0
  8925  0017CE  6E08               	movwf	FuseSystem@i_1200+1,c
  8926  0017D0  0E00               	movlw	0
  8927  0017D2  6E07               	movwf	FuseSystem@i_1200,c
  8928  0017D4                     i2l3195:
  8929  0017D4  BE08               	btfsc	FuseSystem@i_1200+1,7,c
  8930  0017D6  D006               	goto	i2l3199
  8931  0017D8  5008               	movf	FuseSystem@i_1200+1,w,c
  8932  0017DA  E107               	bnz	i2l469
  8933  0017DC  0E06               	movlw	6
  8934  0017DE  5C07               	subwf	FuseSystem@i_1200,w,c
  8935  0017E0  B0D8               	btfsc	status,0,c
  8936  0017E2  0012               	return	
  8937  0017E4                     i2l3199:
  8938  0017E4  4A07               	infsnz	FuseSystem@i_1200,f,c
  8939  0017E6  2A08               	incf	FuseSystem@i_1200+1,f,c
  8940  0017E8  D7F5               	goto	i2l3195
  8941  0017EA                     i2l469:
  8942  0017EA  0012               	return		;funcret
  8943  0017EC                     __end_of_FuseSystem:
  8944                           	opt stack 0
  8945                           pclatu	equ	0xFFB
  8946                           pclath	equ	0xFFA
  8947                           tblptru	equ	0xFF8
  8948                           tblptrh	equ	0xFF7
  8949                           tblptrl	equ	0xFF6
  8950                           tablat	equ	0xFF5
  8951                           prodh	equ	0xFF4
  8952                           prodl	equ	0xFF3
  8953                           intcon	equ	0xFF2
  8954                           intcon2	equ	0xFF1
  8955                           postinc0	equ	0xFEE
  8956                           fsr0h	equ	0xFEA
  8957                           fsr0l	equ	0xFE9
  8958                           wreg	equ	0xFE8
  8959                           indf1	equ	0xFE7
  8960                           postdec1	equ	0xFE5
  8961                           fsr1h	equ	0xFE2
  8962                           fsr1l	equ	0xFE1
  8963                           indf2	equ	0xFDF
  8964                           postinc2	equ	0xFDE
  8965                           postdec2	equ	0xFDD
  8966                           plusw2	equ	0xFDB
  8967                           fsr2h	equ	0xFDA
  8968                           fsr2l	equ	0xFD9
  8969                           status	equ	0xFD8
  8970                           
  8971 ;; *************** function ___wmul *****************
  8972 ;; Defined at:
  8973 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
  8974 ;; Parameters:    Size  Location     Type
  8975 ;;  multiplier      2    0[COMRAM] unsigned int 
  8976 ;;  multiplicand    2    2[COMRAM] unsigned int 
  8977 ;; Auto vars:     Size  Location     Type
  8978 ;;  product         2    4[COMRAM] unsigned int 
  8979 ;; Return value:  Size  Location     Type
  8980 ;;                  2    0[COMRAM] unsigned int 
  8981 ;; Registers used:
  8982 ;;		wreg, status,2, status,0, prodl, prodh
  8983 ;; Tracked objects:
  8984 ;;		On entry : 0/0
  8985 ;;		On exit  : 0/0
  8986 ;;		Unchanged: 0/0
  8987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8988 ;;      Params:         4       0       0       0       0       0       0
  8989 ;;      Locals:         2       0       0       0       0       0       0
  8990 ;;      Temps:          0       0       0       0       0       0       0
  8991 ;;      Totals:         6       0       0       0       0       0       0
  8992 ;;Total ram usage:        6 bytes
  8993 ;; Hardware stack levels used:    1
  8994 ;; This function calls:
  8995 ;;		Nothing
  8996 ;; This function is called by:
  8997 ;;		_FuseSystem
  8998 ;; This function uses a non-reentrant model
  8999 ;;
  9000                           
  9001                           	psect	text55
  9002  001D1A                     __ptext55:
  9003                           	opt stack 0
  9004  001D1A                     ___wmul:
  9005                           	opt stack 20
  9006                           
  9007                           ;incstack = 0
  9008  001D1A  5001               	movf	___wmul@multiplier,w,c
  9009  001D1C  0203               	mulwf	___wmul@multiplicand,c
  9010  001D1E  CFF3 F005          	movff	prodl,___wmul@product
  9011  001D22  CFF4 F006          	movff	prodh,___wmul@product+1
  9012  001D26  5001               	movf	___wmul@multiplier,w,c
  9013  001D28  0204               	mulwf	___wmul@multiplicand+1,c
  9014  001D2A  50F3               	movf	prodl,w,c
  9015  001D2C  2606               	addwf	___wmul@product+1,f,c
  9016  001D2E  5002               	movf	___wmul@multiplier+1,w,c
  9017  001D30  0203               	mulwf	___wmul@multiplicand,c
  9018  001D32  50F3               	movf	prodl,w,c
  9019  001D34  2606               	addwf	___wmul@product+1,f,c
  9020  001D36  C005  F001         	movff	___wmul@product,?___wmul
  9021  001D3A  C006  F002         	movff	___wmul@product+1,?___wmul+1
  9022  001D3E  0012               	return	
  9023  001D40                     __end_of___wmul:
  9024                           	opt stack 0
  9025                           pclatu	equ	0xFFB
  9026                           pclath	equ	0xFFA
  9027                           tblptru	equ	0xFF8
  9028                           tblptrh	equ	0xFF7
  9029                           tblptrl	equ	0xFF6
  9030                           tablat	equ	0xFF5
  9031                           prodh	equ	0xFF4
  9032                           prodl	equ	0xFF3
  9033                           intcon	equ	0xFF2
  9034                           intcon2	equ	0xFF1
  9035                           postinc0	equ	0xFEE
  9036                           fsr0h	equ	0xFEA
  9037                           fsr0l	equ	0xFE9
  9038                           wreg	equ	0xFE8
  9039                           indf1	equ	0xFE7
  9040                           postdec1	equ	0xFE5
  9041                           fsr1h	equ	0xFE2
  9042                           fsr1l	equ	0xFE1
  9043                           indf2	equ	0xFDF
  9044                           postinc2	equ	0xFDE
  9045                           postdec2	equ	0xFDD
  9046                           plusw2	equ	0xFDB
  9047                           fsr2h	equ	0xFDA
  9048                           fsr2l	equ	0xFD9
  9049                           status	equ	0xFD8
  9050                           
  9051 ;; *************** function _EUSART1_Transmit_ISR *****************
  9052 ;; Defined at:
  9053 ;;		line 149 in file "UART.c"
  9054 ;; Parameters:    Size  Location     Type
  9055 ;;		None
  9056 ;; Auto vars:     Size  Location     Type
  9057 ;;		None
  9058 ;; Return value:  Size  Location     Type
  9059 ;;                  1    wreg      void 
  9060 ;; Registers used:
  9061 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9062 ;; Tracked objects:
  9063 ;;		On entry : 0/0
  9064 ;;		On exit  : 0/0
  9065 ;;		Unchanged: 0/0
  9066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9067 ;;      Params:         0       0       0       0       0       0       0
  9068 ;;      Locals:         0       0       0       0       0       0       0
  9069 ;;      Temps:          0       0       0       0       0       0       0
  9070 ;;      Totals:         0       0       0       0       0       0       0
  9071 ;;Total ram usage:        0 bytes
  9072 ;; Hardware stack levels used:    1
  9073 ;; Hardware stack levels required when called:    2
  9074 ;; This function calls:
  9075 ;;		i2_UART_buff_get
  9076 ;;		i2_UART_buff_size
  9077 ;; This function is called by:
  9078 ;;		_INTERRUPT_InterruptManager
  9079 ;; This function uses a non-reentrant model
  9080 ;;
  9081                           
  9082                           	psect	text56
  9083  001BDA                     __ptext56:
  9084                           	opt stack 0
  9085  001BDA                     _EUSART1_Transmit_ISR:
  9086                           	opt stack 20
  9087                           
  9088                           ;UART.c: 151: if (UART_buff_size(&output_buffer) > 0) {
  9089                           
  9090                           ;incstack = 0
  9091  001BDA  0E00               	movlw	low _output_buffer
  9092  001BDC  6E01               	movwf	i2UART_buff_size@_this,c
  9093  001BDE  0E02               	movlw	high _output_buffer
  9094  001BE0  6E02               	movwf	i2UART_buff_size@_this+1,c
  9095  001BE2  EC12  F00F         	call	i2_UART_buff_size	;wreg free
  9096  001BE6  BE02               	btfsc	?i2_UART_buff_size+1,7,c
  9097  001BE8  D00D               	goto	i2l3417
  9098  001BEA  5002               	movf	?i2_UART_buff_size+1,w,c
  9099  001BEC  E103               	bnz	i2u187_40
  9100  001BEE  0401               	decf	?i2_UART_buff_size,w,c
  9101  001BF0  A0D8               	btfss	status,0,c
  9102  001BF2  D008               	goto	i2l3417
  9103  001BF4                     i2u187_40:
  9104                           
  9105                           ;UART.c: 152: TXREG1 = UART_buff_get(&output_buffer);
  9106  001BF4  0E00               	movlw	low _output_buffer
  9107  001BF6  6E07               	movwf	i2UART_buff_get@_this,c
  9108  001BF8  0E02               	movlw	high _output_buffer
  9109  001BFA  6E08               	movwf	i2UART_buff_get@_this+1,c
  9110  001BFC  ECF0  F00A         	call	i2_UART_buff_get	;wreg free
  9111  001C00  6EAD               	movwf	4013,c	;volatile
  9112                           
  9113                           ;UART.c: 153: } else {
  9114  001C02  0012               	return	
  9115  001C04                     i2l3417:
  9116                           
  9117                           ;UART.c: 154: Transmit_stall = 1;
  9118  001C04  0E01               	movlw	1
  9119  001C06  6E42               	movwf	_Transmit_stall,c
  9120                           
  9121                           ;UART.c: 155: PIE1bits.TX1IE = 0;
  9122  001C08  989D               	bcf	3997,4,c	;volatile
  9123  001C0A  0012               	return	
  9124  001C0C                     __end_of_EUSART1_Transmit_ISR:
  9125                           	opt stack 0
  9126                           pclatu	equ	0xFFB
  9127                           pclath	equ	0xFFA
  9128                           tblptru	equ	0xFF8
  9129                           tblptrh	equ	0xFF7
  9130                           tblptrl	equ	0xFF6
  9131                           tablat	equ	0xFF5
  9132                           prodh	equ	0xFF4
  9133                           prodl	equ	0xFF3
  9134                           intcon	equ	0xFF2
  9135                           intcon2	equ	0xFF1
  9136                           postinc0	equ	0xFEE
  9137                           fsr0h	equ	0xFEA
  9138                           fsr0l	equ	0xFE9
  9139                           wreg	equ	0xFE8
  9140                           indf1	equ	0xFE7
  9141                           postdec1	equ	0xFE5
  9142                           fsr1h	equ	0xFE2
  9143                           fsr1l	equ	0xFE1
  9144                           indf2	equ	0xFDF
  9145                           postinc2	equ	0xFDE
  9146                           postdec2	equ	0xFDD
  9147                           plusw2	equ	0xFDB
  9148                           fsr2h	equ	0xFDA
  9149                           fsr2l	equ	0xFD9
  9150                           status	equ	0xFD8
  9151                           
  9152 ;; *************** function i2_UART_buff_size *****************
  9153 ;; Defined at:
  9154 ;;		line 101 in file "UART.c"
  9155 ;; Parameters:    Size  Location     Type
  9156 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
  9157 ;;		 -> output_buffer(106), input_buffer(106), 
  9158 ;; Auto vars:     Size  Location     Type
  9159 ;;		None
  9160 ;; Return value:  Size  Location     Type
  9161 ;;                  2    0[COMRAM] int 
  9162 ;; Registers used:
  9163 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9164 ;; Tracked objects:
  9165 ;;		On entry : 0/0
  9166 ;;		On exit  : 0/0
  9167 ;;		Unchanged: 0/0
  9168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9169 ;;      Params:         2       0       0       0       0       0       0
  9170 ;;      Locals:         0       0       0       0       0       0       0
  9171 ;;      Temps:          0       0       0       0       0       0       0
  9172 ;;      Totals:         2       0       0       0       0       0       0
  9173 ;;Total ram usage:        2 bytes
  9174 ;; Hardware stack levels used:    1
  9175 ;; This function calls:
  9176 ;;		Nothing
  9177 ;; This function is called by:
  9178 ;;		_EUSART1_Transmit_ISR
  9179 ;; This function uses a non-reentrant model
  9180 ;;
  9181                           
  9182                           	psect	text57
  9183  001E24                     __ptext57:
  9184                           	opt stack 0
  9185  001E24                     i2_UART_buff_size:
  9186                           	opt stack 21
  9187                           
  9188                           ;UART.c: 102: return (_this->count);
  9189                           
  9190                           ;incstack = 0
  9191  001E24  EE20 F068          	lfsr	2,104
  9192  001E28  5001               	movf	i2UART_buff_size@_this,w,c
  9193  001E2A  26D9               	addwf	fsr2l,f,c
  9194  001E2C  5002               	movf	i2UART_buff_size@_this+1,w,c
  9195  001E2E  22DA               	addwfc	fsr2h,f,c
  9196  001E30  CFDE F001          	movff	postinc2,?i2_UART_buff_size
  9197  001E34  CFDD F002          	movff	postdec2,?i2_UART_buff_size+1
  9198  001E38  0012               	return	
  9199  001E3A                     __end_ofi2_UART_buff_size:
  9200                           	opt stack 0
  9201                           pclatu	equ	0xFFB
  9202                           pclath	equ	0xFFA
  9203                           tblptru	equ	0xFF8
  9204                           tblptrh	equ	0xFF7
  9205                           tblptrl	equ	0xFF6
  9206                           tablat	equ	0xFF5
  9207                           prodh	equ	0xFF4
  9208                           prodl	equ	0xFF3
  9209                           intcon	equ	0xFF2
  9210                           intcon2	equ	0xFF1
  9211                           postinc0	equ	0xFEE
  9212                           fsr0h	equ	0xFEA
  9213                           fsr0l	equ	0xFE9
  9214                           wreg	equ	0xFE8
  9215                           indf1	equ	0xFE7
  9216                           postdec1	equ	0xFE5
  9217                           fsr1h	equ	0xFE2
  9218                           fsr1l	equ	0xFE1
  9219                           indf2	equ	0xFDF
  9220                           postinc2	equ	0xFDE
  9221                           postdec2	equ	0xFDD
  9222                           plusw2	equ	0xFDB
  9223                           fsr2h	equ	0xFDA
  9224                           fsr2l	equ	0xFD9
  9225                           status	equ	0xFD8
  9226                           
  9227 ;; *************** function i2_UART_buff_get *****************
  9228 ;; Defined at:
  9229 ;;		line 80 in file "UART.c"
  9230 ;; Parameters:    Size  Location     Type
  9231 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  9232 ;;		 -> output_buffer(106), input_buffer(106), 
  9233 ;; Auto vars:     Size  Location     Type
  9234 ;;  UART_buff_ge    1   10[COMRAM] unsigned char 
  9235 ;; Return value:  Size  Location     Type
  9236 ;;                  1    wreg      unsigned char 
  9237 ;; Registers used:
  9238 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9239 ;; Tracked objects:
  9240 ;;		On entry : 0/0
  9241 ;;		On exit  : 0/0
  9242 ;;		Unchanged: 0/0
  9243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9244 ;;      Params:         2       0       0       0       0       0       0
  9245 ;;      Locals:         1       0       0       0       0       0       0
  9246 ;;      Temps:          2       0       0       0       0       0       0
  9247 ;;      Totals:         5       0       0       0       0       0       0
  9248 ;;Total ram usage:        5 bytes
  9249 ;; Hardware stack levels used:    1
  9250 ;; Hardware stack levels required when called:    1
  9251 ;; This function calls:
  9252 ;;		i2_UART_buff_modulo_inc
  9253 ;; This function is called by:
  9254 ;;		_EUSART1_Transmit_ISR
  9255 ;; This function uses a non-reentrant model
  9256 ;;
  9257                           
  9258                           	psect	text58
  9259  0015E0                     __ptext58:
  9260                           	opt stack 0
  9261  0015E0                     i2_UART_buff_get:
  9262                           	opt stack 20
  9263                           
  9264                           ;UART.c: 81: unsigned char c;
  9265                           ;UART.c: 82: if (_this->count > 0) {
  9266                           
  9267                           ;incstack = 0
  9268  0015E0  EE20 F068          	lfsr	2,104
  9269  0015E4  5007               	movf	i2UART_buff_get@_this,w,c
  9270  0015E6  26D9               	addwf	fsr2l,f,c
  9271  0015E8  5008               	movf	i2UART_buff_get@_this+1,w,c
  9272  0015EA  22DA               	addwfc	fsr2h,f,c
  9273  0015EC  0E01               	movlw	1
  9274  0015EE  BEDB               	btfsc	plusw2,7,c
  9275  0015F0  D03C               	goto	i2l3399
  9276  0015F2  0E01               	movlw	1
  9277  0015F4  50DB               	movf	plusw2,w,c
  9278  0015F6  E103               	bnz	i2u185_40
  9279  0015F8  04DE               	decf	postinc2,w,c
  9280  0015FA  A0D8               	btfss	status,0,c
  9281  0015FC  D036               	goto	i2l3399
  9282  0015FE                     i2u185_40:
  9283                           
  9284                           ;UART.c: 83: c = _this->buf[_this->tail];
  9285  0015FE  EE20 F066          	lfsr	2,102
  9286  001602  5007               	movf	i2UART_buff_get@_this,w,c
  9287  001604  26D9               	addwf	fsr2l,f,c
  9288  001606  5008               	movf	i2UART_buff_get@_this+1,w,c
  9289  001608  22DA               	addwfc	fsr2h,f,c
  9290  00160A  CFDE F009          	movff	postinc2,??i2_UART_buff_get
  9291  00160E  CFDD F00A          	movff	postdec2,??i2_UART_buff_get+1
  9292  001612  5009               	movf	??i2_UART_buff_get,w,c
  9293  001614  2407               	addwf	i2UART_buff_get@_this,w,c
  9294  001616  6ED9               	movwf	fsr2l,c
  9295  001618  500A               	movf	??i2_UART_buff_get+1,w,c
  9296  00161A  2008               	addwfc	i2UART_buff_get@_this+1,w,c
  9297  00161C  6EDA               	movwf	fsr2h,c
  9298  00161E  50DF               	movf	indf2,w,c
  9299  001620  6E0B               	movwf	i2UART_buff_get@c,c
  9300                           
  9301                           ;UART.c: 84: _this->tail = UART_buff_modulo_inc(_this->tail, 100);
  9302  001622  EE20 F066          	lfsr	2,102
  9303  001626  5007               	movf	i2UART_buff_get@_this,w,c
  9304  001628  26D9               	addwf	fsr2l,f,c
  9305  00162A  5008               	movf	i2UART_buff_get@_this+1,w,c
  9306  00162C  22DA               	addwfc	fsr2h,f,c
  9307  00162E  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  9308  001632  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  9309  001636  0E00               	movlw	0
  9310  001638  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  9311  00163A  0E64               	movlw	100
  9312  00163C  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  9313  00163E  EC78  F00E         	call	i2_UART_buff_modulo_inc	;wreg free
  9314  001642  EE20 F066          	lfsr	2,102
  9315  001646  5007               	movf	i2UART_buff_get@_this,w,c
  9316  001648  26D9               	addwf	fsr2l,f,c
  9317  00164A  5008               	movf	i2UART_buff_get@_this+1,w,c
  9318  00164C  22DA               	addwfc	fsr2h,f,c
  9319  00164E  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  9320  001652  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  9321                           
  9322                           ;UART.c: 85: --_this->count;
  9323  001656  EE20 F068          	lfsr	2,104
  9324  00165A  5007               	movf	i2UART_buff_get@_this,w,c
  9325  00165C  26D9               	addwf	fsr2l,f,c
  9326  00165E  5008               	movf	i2UART_buff_get@_this+1,w,c
  9327  001660  22DA               	addwfc	fsr2h,f,c
  9328  001662  06DE               	decf	postinc2,f,c
  9329  001664  0E00               	movlw	0
  9330  001666  5ADD               	subwfb	postdec2,f,c
  9331                           
  9332                           ;UART.c: 86: } else {
  9333  001668  D002               	goto	i2l589
  9334  00166A                     i2l3399:
  9335                           
  9336                           ;UART.c: 87: c = 0;
  9337  00166A  0E00               	movlw	0
  9338  00166C  6E0B               	movwf	i2UART_buff_get@c,c
  9339  00166E                     i2l589:
  9340                           
  9341                           ;UART.c: 88: }
  9342                           ;UART.c: 89: return (c);
  9343  00166E  500B               	movf	i2UART_buff_get@c,w,c
  9344  001670  0012               	return	
  9345  001672                     __end_ofi2_UART_buff_get:
  9346                           	opt stack 0
  9347                           pclatu	equ	0xFFB
  9348                           pclath	equ	0xFFA
  9349                           tblptru	equ	0xFF8
  9350                           tblptrh	equ	0xFF7
  9351                           tblptrl	equ	0xFF6
  9352                           tablat	equ	0xFF5
  9353                           prodh	equ	0xFF4
  9354                           prodl	equ	0xFF3
  9355                           intcon	equ	0xFF2
  9356                           intcon2	equ	0xFF1
  9357                           postinc0	equ	0xFEE
  9358                           fsr0h	equ	0xFEA
  9359                           fsr0l	equ	0xFE9
  9360                           wreg	equ	0xFE8
  9361                           indf1	equ	0xFE7
  9362                           postdec1	equ	0xFE5
  9363                           fsr1h	equ	0xFE2
  9364                           fsr1l	equ	0xFE1
  9365                           indf2	equ	0xFDF
  9366                           postinc2	equ	0xFDE
  9367                           postdec2	equ	0xFDD
  9368                           plusw2	equ	0xFDB
  9369                           fsr2h	equ	0xFDA
  9370                           fsr2l	equ	0xFD9
  9371                           status	equ	0xFD8
  9372                           
  9373 ;; *************** function _EUSART1_Receive_ISR *****************
  9374 ;; Defined at:
  9375 ;;		line 138 in file "UART.c"
  9376 ;; Parameters:    Size  Location     Type
  9377 ;;		None
  9378 ;; Auto vars:     Size  Location     Type
  9379 ;;  data            1   11[COMRAM] unsigned char 
  9380 ;; Return value:  Size  Location     Type
  9381 ;;                  1    wreg      void 
  9382 ;; Registers used:
  9383 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9384 ;; Tracked objects:
  9385 ;;		On entry : 0/0
  9386 ;;		On exit  : 0/0
  9387 ;;		Unchanged: 0/0
  9388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9389 ;;      Params:         0       0       0       0       0       0       0
  9390 ;;      Locals:         1       0       0       0       0       0       0
  9391 ;;      Temps:          0       0       0       0       0       0       0
  9392 ;;      Totals:         1       0       0       0       0       0       0
  9393 ;;Total ram usage:        1 bytes
  9394 ;; Hardware stack levels used:    1
  9395 ;; Hardware stack levels required when called:    2
  9396 ;; This function calls:
  9397 ;;		i2_UART_buff_put
  9398 ;; This function is called by:
  9399 ;;		_INTERRUPT_InterruptManager
  9400 ;; This function uses a non-reentrant model
  9401 ;;
  9402                           
  9403                           	psect	text59
  9404  001DC2                     __ptext59:
  9405                           	opt stack 0
  9406  001DC2                     _EUSART1_Receive_ISR:
  9407                           	opt stack 20
  9408                           
  9409                           ;UART.c: 139: if (1 == RC1STAbits.OERR) {
  9410                           
  9411                           ;incstack = 0
  9412  001DC2  A2AB               	btfss	4011,1,c	;volatile
  9413  001DC4  D002               	goto	i2l620
  9414                           
  9415                           ;UART.c: 142: RC1STAbits.CREN = 0;
  9416  001DC6  98AB               	bcf	4011,4,c	;volatile
  9417                           
  9418                           ;UART.c: 143: RC1STAbits.CREN = 1;
  9419  001DC8  88AB               	bsf	4011,4,c	;volatile
  9420  001DCA                     i2l620:
  9421                           
  9422                           ;UART.c: 144: }
  9423                           ;UART.c: 145: unsigned char data = RCREG1;
  9424  001DCA  CFAE F00C          	movff	4014,EUSART1_Receive_ISR@data	;volatile
  9425                           
  9426                           ;UART.c: 146: UART_buff_put(&input_buffer, data);
  9427  001DCE  0E30               	movlw	low _input_buffer
  9428  001DD0  6E07               	movwf	i2UART_buff_put@_this,c
  9429  001DD2  0E01               	movlw	high _input_buffer
  9430  001DD4  6E08               	movwf	i2UART_buff_put@_this+1,c
  9431  001DD6  C00C  F009         	movff	EUSART1_Receive_ISR@data,i2UART_buff_put@c
  9432  001DDA  ECAC  F007         	call	i2_UART_buff_put	;wreg free
  9433  001DDE  0012               	return		;funcret
  9434  001DE0                     __end_of_EUSART1_Receive_ISR:
  9435                           	opt stack 0
  9436                           pclatu	equ	0xFFB
  9437                           pclath	equ	0xFFA
  9438                           tblptru	equ	0xFF8
  9439                           tblptrh	equ	0xFF7
  9440                           tblptrl	equ	0xFF6
  9441                           tablat	equ	0xFF5
  9442                           prodh	equ	0xFF4
  9443                           prodl	equ	0xFF3
  9444                           intcon	equ	0xFF2
  9445                           intcon2	equ	0xFF1
  9446                           postinc0	equ	0xFEE
  9447                           fsr0h	equ	0xFEA
  9448                           fsr0l	equ	0xFE9
  9449                           wreg	equ	0xFE8
  9450                           indf1	equ	0xFE7
  9451                           postdec1	equ	0xFE5
  9452                           fsr1h	equ	0xFE2
  9453                           fsr1l	equ	0xFE1
  9454                           indf2	equ	0xFDF
  9455                           postinc2	equ	0xFDE
  9456                           postdec2	equ	0xFDD
  9457                           plusw2	equ	0xFDB
  9458                           fsr2h	equ	0xFDA
  9459                           fsr2l	equ	0xFD9
  9460                           status	equ	0xFD8
  9461                           
  9462 ;; *************** function i2_UART_buff_put *****************
  9463 ;; Defined at:
  9464 ;;		line 67 in file "UART.c"
  9465 ;; Parameters:    Size  Location     Type
  9466 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  9467 ;;		 -> output_buffer(106), input_buffer(106), 
  9468 ;;  c               1    8[COMRAM] const unsigned char 
  9469 ;; Auto vars:     Size  Location     Type
  9470 ;;		None
  9471 ;; Return value:  Size  Location     Type
  9472 ;;                  1    wreg      void 
  9473 ;; Registers used:
  9474 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9475 ;; Tracked objects:
  9476 ;;		On entry : 0/0
  9477 ;;		On exit  : 0/0
  9478 ;;		Unchanged: 0/0
  9479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9480 ;;      Params:         3       0       0       0       0       0       0
  9481 ;;      Locals:         0       0       0       0       0       0       0
  9482 ;;      Temps:          2       0       0       0       0       0       0
  9483 ;;      Totals:         5       0       0       0       0       0       0
  9484 ;;Total ram usage:        5 bytes
  9485 ;; Hardware stack levels used:    1
  9486 ;; Hardware stack levels required when called:    1
  9487 ;; This function calls:
  9488 ;;		i2_UART_buff_modulo_inc
  9489 ;; This function is called by:
  9490 ;;		_EUSART1_Receive_ISR
  9491 ;; This function uses a non-reentrant model
  9492 ;;
  9493                           
  9494                           	psect	text60
  9495  000F58                     __ptext60:
  9496                           	opt stack 0
  9497  000F58                     i2_UART_buff_put:
  9498                           	opt stack 20
  9499                           
  9500                           ;UART.c: 68: if (_this->count < 100) {
  9501                           
  9502                           ;incstack = 0
  9503  000F58  EE20 F068          	lfsr	2,104
  9504  000F5C  5007               	movf	i2UART_buff_put@_this,w,c
  9505  000F5E  26D9               	addwf	fsr2l,f,c
  9506  000F60  5008               	movf	i2UART_buff_put@_this+1,w,c
  9507  000F62  22DA               	addwfc	fsr2h,f,c
  9508  000F64  0E01               	movlw	1
  9509  000F66  BEDB               	btfsc	plusw2,7,c
  9510  000F68  D007               	goto	i2l3379
  9511  000F6A  0E01               	movlw	1
  9512  000F6C  50DB               	movf	plusw2,w,c
  9513  000F6E  E13A               	bnz	i2l3385
  9514  000F70  0E64               	movlw	100
  9515  000F72  5CDE               	subwf	postinc2,w,c
  9516  000F74  B0D8               	btfsc	status,0,c
  9517  000F76  D036               	goto	i2l3385
  9518  000F78                     i2l3379:
  9519                           
  9520                           ;UART.c: 69: _this->buf[_this->head] = c;
  9521  000F78  EE20 F064          	lfsr	2,100
  9522  000F7C  5007               	movf	i2UART_buff_put@_this,w,c
  9523  000F7E  26D9               	addwf	fsr2l,f,c
  9524  000F80  5008               	movf	i2UART_buff_put@_this+1,w,c
  9525  000F82  22DA               	addwfc	fsr2h,f,c
  9526  000F84  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  9527  000F88  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  9528  000F8C  500A               	movf	??i2_UART_buff_put,w,c
  9529  000F8E  2407               	addwf	i2UART_buff_put@_this,w,c
  9530  000F90  6ED9               	movwf	fsr2l,c
  9531  000F92  500B               	movf	??i2_UART_buff_put+1,w,c
  9532  000F94  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  9533  000F96  6EDA               	movwf	fsr2h,c
  9534  000F98  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  9535                           
  9536                           ;UART.c: 70: _this->head = UART_buff_modulo_inc(_this->head, 100);
  9537  000F9C  EE20 F064          	lfsr	2,100
  9538  000FA0  5007               	movf	i2UART_buff_put@_this,w,c
  9539  000FA2  26D9               	addwf	fsr2l,f,c
  9540  000FA4  5008               	movf	i2UART_buff_put@_this+1,w,c
  9541  000FA6  22DA               	addwfc	fsr2h,f,c
  9542  000FA8  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  9543  000FAC  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  9544  000FB0  0E00               	movlw	0
  9545  000FB2  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  9546  000FB4  0E64               	movlw	100
  9547  000FB6  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  9548  000FB8  EC78  F00E         	call	i2_UART_buff_modulo_inc	;wreg free
  9549  000FBC  EE20 F064          	lfsr	2,100
  9550  000FC0  5007               	movf	i2UART_buff_put@_this,w,c
  9551  000FC2  26D9               	addwf	fsr2l,f,c
  9552  000FC4  5008               	movf	i2UART_buff_put@_this+1,w,c
  9553  000FC6  22DA               	addwfc	fsr2h,f,c
  9554  000FC8  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  9555  000FCC  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  9556                           
  9557                           ;UART.c: 71: ++_this->count;
  9558  000FD0  EE20 F068          	lfsr	2,104
  9559  000FD4  5007               	movf	i2UART_buff_put@_this,w,c
  9560  000FD6  26D9               	addwf	fsr2l,f,c
  9561  000FD8  5008               	movf	i2UART_buff_put@_this+1,w,c
  9562  000FDA  22DA               	addwfc	fsr2h,f,c
  9563  000FDC  2ADE               	incf	postinc2,f,c
  9564  000FDE  0E00               	movlw	0
  9565  000FE0  22DD               	addwfc	postdec2,f,c
  9566                           
  9567                           ;UART.c: 72: } else {
  9568  000FE2  0012               	return	
  9569  000FE4                     i2l3385:
  9570                           
  9571                           ;UART.c: 73: _this->buf[_this->head] = c;
  9572  000FE4  EE20 F064          	lfsr	2,100
  9573  000FE8  5007               	movf	i2UART_buff_put@_this,w,c
  9574  000FEA  26D9               	addwf	fsr2l,f,c
  9575  000FEC  5008               	movf	i2UART_buff_put@_this+1,w,c
  9576  000FEE  22DA               	addwfc	fsr2h,f,c
  9577  000FF0  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  9578  000FF4  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  9579  000FF8  500A               	movf	??i2_UART_buff_put,w,c
  9580  000FFA  2407               	addwf	i2UART_buff_put@_this,w,c
  9581  000FFC  6ED9               	movwf	fsr2l,c
  9582  000FFE  500B               	movf	??i2_UART_buff_put+1,w,c
  9583  001000  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  9584  001002  6EDA               	movwf	fsr2h,c
  9585  001004  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  9586                           
  9587                           ;UART.c: 74: _this->head = UART_buff_modulo_inc(_this->head, 100);
  9588  001008  EE20 F064          	lfsr	2,100
  9589  00100C  5007               	movf	i2UART_buff_put@_this,w,c
  9590  00100E  26D9               	addwf	fsr2l,f,c
  9591  001010  5008               	movf	i2UART_buff_put@_this+1,w,c
  9592  001012  22DA               	addwfc	fsr2h,f,c
  9593  001014  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  9594  001018  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  9595  00101C  0E00               	movlw	0
  9596  00101E  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  9597  001020  0E64               	movlw	100
  9598  001022  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  9599  001024  EC78  F00E         	call	i2_UART_buff_modulo_inc	;wreg free
  9600  001028  EE20 F064          	lfsr	2,100
  9601  00102C  5007               	movf	i2UART_buff_put@_this,w,c
  9602  00102E  26D9               	addwf	fsr2l,f,c
  9603  001030  5008               	movf	i2UART_buff_put@_this+1,w,c
  9604  001032  22DA               	addwfc	fsr2h,f,c
  9605  001034  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  9606  001038  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  9607                           
  9608                           ;UART.c: 75: _this->tail = UART_buff_modulo_inc(_this->tail, 100);
  9609  00103C  EE20 F066          	lfsr	2,102
  9610  001040  5007               	movf	i2UART_buff_put@_this,w,c
  9611  001042  26D9               	addwf	fsr2l,f,c
  9612  001044  5008               	movf	i2UART_buff_put@_this+1,w,c
  9613  001046  22DA               	addwfc	fsr2h,f,c
  9614  001048  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  9615  00104C  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  9616  001050  0E00               	movlw	0
  9617  001052  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  9618  001054  0E64               	movlw	100
  9619  001056  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  9620  001058  EC78  F00E         	call	i2_UART_buff_modulo_inc	;wreg free
  9621  00105C  EE20 F066          	lfsr	2,102
  9622  001060  5007               	movf	i2UART_buff_put@_this,w,c
  9623  001062  26D9               	addwf	fsr2l,f,c
  9624  001064  5008               	movf	i2UART_buff_put@_this+1,w,c
  9625  001066  22DA               	addwfc	fsr2h,f,c
  9626  001068  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  9627  00106C  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  9628  001070  0012               	return	
  9629  001072                     __end_ofi2_UART_buff_put:
  9630                           	opt stack 0
  9631                           pclatu	equ	0xFFB
  9632                           pclath	equ	0xFFA
  9633                           tblptru	equ	0xFF8
  9634                           tblptrh	equ	0xFF7
  9635                           tblptrl	equ	0xFF6
  9636                           tablat	equ	0xFF5
  9637                           prodh	equ	0xFF4
  9638                           prodl	equ	0xFF3
  9639                           intcon	equ	0xFF2
  9640                           intcon2	equ	0xFF1
  9641                           postinc0	equ	0xFEE
  9642                           fsr0h	equ	0xFEA
  9643                           fsr0l	equ	0xFE9
  9644                           wreg	equ	0xFE8
  9645                           indf1	equ	0xFE7
  9646                           postdec1	equ	0xFE5
  9647                           fsr1h	equ	0xFE2
  9648                           fsr1l	equ	0xFE1
  9649                           indf2	equ	0xFDF
  9650                           postinc2	equ	0xFDE
  9651                           postdec2	equ	0xFDD
  9652                           plusw2	equ	0xFDB
  9653                           fsr2h	equ	0xFDA
  9654                           fsr2l	equ	0xFD9
  9655                           status	equ	0xFD8
  9656                           
  9657 ;; *************** function i2_UART_buff_modulo_inc *****************
  9658 ;; Defined at:
  9659 ;;		line 105 in file "UART.c"
  9660 ;; Parameters:    Size  Location     Type
  9661 ;;  value           2    0[COMRAM] const unsigned int 
  9662 ;;  modulus         2    2[COMRAM] const unsigned int 
  9663 ;; Auto vars:     Size  Location     Type
  9664 ;;  UART_buff_mo    2    4[COMRAM] unsigned int 
  9665 ;; Return value:  Size  Location     Type
  9666 ;;                  2    0[COMRAM] unsigned int 
  9667 ;; Registers used:
  9668 ;;		wreg, status,2, status,0
  9669 ;; Tracked objects:
  9670 ;;		On entry : 0/0
  9671 ;;		On exit  : 0/0
  9672 ;;		Unchanged: 0/0
  9673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9674 ;;      Params:         4       0       0       0       0       0       0
  9675 ;;      Locals:         2       0       0       0       0       0       0
  9676 ;;      Temps:          0       0       0       0       0       0       0
  9677 ;;      Totals:         6       0       0       0       0       0       0
  9678 ;;Total ram usage:        6 bytes
  9679 ;; Hardware stack levels used:    1
  9680 ;; This function calls:
  9681 ;;		Nothing
  9682 ;; This function is called by:
  9683 ;;		i2_UART_buff_put
  9684 ;;		i2_UART_buff_get
  9685 ;; This function uses a non-reentrant model
  9686 ;;
  9687                           
  9688                           	psect	text61
  9689  001CF0                     __ptext61:
  9690                           	opt stack 0
  9691  001CF0                     i2_UART_buff_modulo_inc:
  9692                           	opt stack 20
  9693                           
  9694                           ;UART.c: 106: unsigned int my_value = value + 1;
  9695                           
  9696                           ;incstack = 0
  9697  001CF0  0E01               	movlw	1
  9698  001CF2  2401               	addwf	i2UART_buff_modulo_inc@value,w,c
  9699  001CF4  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  9700  001CF6  0E00               	movlw	0
  9701  001CF8  2002               	addwfc	i2UART_buff_modulo_inc@value+1,w,c
  9702  001CFA  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  9703                           
  9704                           ;UART.c: 107: if (my_value >= modulus) {
  9705  001CFC  5003               	movf	i2UART_buff_modulo_inc@modulus,w,c
  9706  001CFE  5C05               	subwf	i2UART_buff_modulo_inc@my_value,w,c
  9707  001D00  5004               	movf	i2UART_buff_modulo_inc@modulus+1,w,c
  9708  001D02  5806               	subwfb	i2UART_buff_modulo_inc@my_value+1,w,c
  9709  001D04  A0D8               	btfss	status,0,c
  9710  001D06  D004               	goto	i2l3107
  9711                           
  9712                           ;UART.c: 108: my_value = 0;
  9713  001D08  0E00               	movlw	0
  9714  001D0A  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  9715  001D0C  0E00               	movlw	0
  9716  001D0E  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  9717  001D10                     i2l3107:
  9718                           
  9719                           ;UART.c: 109: }
  9720                           ;UART.c: 110: return (my_value);
  9721  001D10  C005  F001         	movff	i2UART_buff_modulo_inc@my_value,?i2_UART_buff_modulo_inc
  9722  001D14  C006  F002         	movff	i2UART_buff_modulo_inc@my_value+1,?i2_UART_buff_modulo_inc+1
  9723  001D18  0012               	return	
  9724  001D1A                     __end_ofi2_UART_buff_modulo_inc:
  9725                           	opt stack 0
  9726                           pclatu	equ	0xFFB
  9727                           pclath	equ	0xFFA
  9728                           tblptru	equ	0xFF8
  9729                           tblptrh	equ	0xFF7
  9730                           tblptrl	equ	0xFF6
  9731                           tablat	equ	0xFF5
  9732                           prodh	equ	0xFF4
  9733                           prodl	equ	0xFF3
  9734                           intcon	equ	0xFF2
  9735                           intcon2	equ	0xFF1
  9736                           postinc0	equ	0xFEE
  9737                           fsr0h	equ	0xFEA
  9738                           fsr0l	equ	0xFE9
  9739                           wreg	equ	0xFE8
  9740                           indf1	equ	0xFE7
  9741                           postdec1	equ	0xFE5
  9742                           fsr1h	equ	0xFE2
  9743                           fsr1l	equ	0xFE1
  9744                           indf2	equ	0xFDF
  9745                           postinc2	equ	0xFDE
  9746                           postdec2	equ	0xFDD
  9747                           plusw2	equ	0xFDB
  9748                           fsr2h	equ	0xFDA
  9749                           fsr2l	equ	0xFD9
  9750                           status	equ	0xFD8
  9751                           
  9752 ;; *************** function _ADC_ISR *****************
  9753 ;; Defined at:
  9754 ;;		line 130 in file "mcc_generated_files/adc.c"
  9755 ;; Parameters:    Size  Location     Type
  9756 ;;		None
  9757 ;; Auto vars:     Size  Location     Type
  9758 ;;		None
  9759 ;; Return value:  Size  Location     Type
  9760 ;;                  1    wreg      void 
  9761 ;; Registers used:
  9762 ;;		None
  9763 ;; Tracked objects:
  9764 ;;		On entry : 0/0
  9765 ;;		On exit  : 0/0
  9766 ;;		Unchanged: 0/0
  9767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9768 ;;      Params:         0       0       0       0       0       0       0
  9769 ;;      Locals:         0       0       0       0       0       0       0
  9770 ;;      Temps:          0       0       0       0       0       0       0
  9771 ;;      Totals:         0       0       0       0       0       0       0
  9772 ;;Total ram usage:        0 bytes
  9773 ;; Hardware stack levels used:    1
  9774 ;; This function calls:
  9775 ;;		Nothing
  9776 ;; This function is called by:
  9777 ;;		_INTERRUPT_InterruptManager
  9778 ;; This function uses a non-reentrant model
  9779 ;;
  9780                           
  9781                           	psect	text62
  9782  001ED4                     __ptext62:
  9783                           	opt stack 0
  9784  001ED4                     _ADC_ISR:
  9785                           	opt stack 22
  9786                           
  9787                           ;adc.c: 133: PIR1bits.ADIF = 0;
  9788                           
  9789                           ;incstack = 0
  9790  001ED4  9C9E               	bcf	3998,6,c	;volatile
  9791  001ED6  0012               	return		;funcret
  9792  001ED8                     __end_of_ADC_ISR:
  9793                           	opt stack 0
  9794  0000                     pclatu	equ	0xFFB
  9795                           pclath	equ	0xFFA
  9796                           tblptru	equ	0xFF8
  9797                           tblptrh	equ	0xFF7
  9798                           tblptrl	equ	0xFF6
  9799                           tablat	equ	0xFF5
  9800                           prodh	equ	0xFF4
  9801                           prodl	equ	0xFF3
  9802                           intcon	equ	0xFF2
  9803                           intcon2	equ	0xFF1
  9804                           postinc0	equ	0xFEE
  9805                           fsr0h	equ	0xFEA
  9806                           fsr0l	equ	0xFE9
  9807                           wreg	equ	0xFE8
  9808                           indf1	equ	0xFE7
  9809                           postdec1	equ	0xFE5
  9810                           fsr1h	equ	0xFE2
  9811                           fsr1l	equ	0xFE1
  9812                           indf2	equ	0xFDF
  9813                           postinc2	equ	0xFDE
  9814                           postdec2	equ	0xFDD
  9815                           plusw2	equ	0xFDB
  9816                           fsr2h	equ	0xFDA
  9817                           fsr2l	equ	0xFD9
  9818                           status	equ	0xFD8
  9819                           pclatu	equ	0xFFB
  9820                           pclath	equ	0xFFA
  9821                           tblptru	equ	0xFF8
  9822                           tblptrh	equ	0xFF7
  9823                           tblptrl	equ	0xFF6
  9824                           tablat	equ	0xFF5
  9825                           prodh	equ	0xFF4
  9826                           prodl	equ	0xFF3
  9827                           intcon	equ	0xFF2
  9828                           intcon2	equ	0xFF1
  9829                           postinc0	equ	0xFEE
  9830                           fsr0h	equ	0xFEA
  9831                           fsr0l	equ	0xFE9
  9832                           wreg	equ	0xFE8
  9833                           indf1	equ	0xFE7
  9834                           postdec1	equ	0xFE5
  9835                           fsr1h	equ	0xFE2
  9836                           fsr1l	equ	0xFE1
  9837                           indf2	equ	0xFDF
  9838                           postinc2	equ	0xFDE
  9839                           postdec2	equ	0xFDD
  9840                           plusw2	equ	0xFDB
  9841                           fsr2h	equ	0xFDA
  9842                           fsr2l	equ	0xFD9
  9843                           status	equ	0xFD8
  9844                           
  9845                           	psect	rparam
  9846  0000                     pclatu	equ	0xFFB
  9847                           pclath	equ	0xFFA
  9848                           tblptru	equ	0xFF8
  9849                           tblptrh	equ	0xFF7
  9850                           tblptrl	equ	0xFF6
  9851                           tablat	equ	0xFF5
  9852                           prodh	equ	0xFF4
  9853                           prodl	equ	0xFF3
  9854                           intcon	equ	0xFF2
  9855                           intcon2	equ	0xFF1
  9856                           postinc0	equ	0xFEE
  9857                           fsr0h	equ	0xFEA
  9858                           fsr0l	equ	0xFE9
  9859                           wreg	equ	0xFE8
  9860                           indf1	equ	0xFE7
  9861                           postdec1	equ	0xFE5
  9862                           fsr1h	equ	0xFE2
  9863                           fsr1l	equ	0xFE1
  9864                           indf2	equ	0xFDF
  9865                           postinc2	equ	0xFDE
  9866                           postdec2	equ	0xFDD
  9867                           plusw2	equ	0xFDB
  9868                           fsr2h	equ	0xFDA
  9869                           fsr2l	equ	0xFD9
  9870                           status	equ	0xFD8
  9871                           
  9872                           	psect	temp
  9873  000043                     btemp:
  9874                           	opt stack 0
  9875  000043                     	ds	1
  9876  0000                     int$flags	set	btemp
  9877                           pclatu	equ	0xFFB
  9878                           pclath	equ	0xFFA
  9879                           tblptru	equ	0xFF8
  9880                           tblptrh	equ	0xFF7
  9881                           tblptrl	equ	0xFF6
  9882                           tablat	equ	0xFF5
  9883                           prodh	equ	0xFF4
  9884                           prodl	equ	0xFF3
  9885                           intcon	equ	0xFF2
  9886                           intcon2	equ	0xFF1
  9887                           postinc0	equ	0xFEE
  9888                           fsr0h	equ	0xFEA
  9889                           fsr0l	equ	0xFE9
  9890                           wreg	equ	0xFE8
  9891                           indf1	equ	0xFE7
  9892                           postdec1	equ	0xFE5
  9893                           fsr1h	equ	0xFE2
  9894                           fsr1l	equ	0xFE1
  9895                           indf2	equ	0xFDF
  9896                           postinc2	equ	0xFDE
  9897                           postdec2	equ	0xFDD
  9898                           plusw2	equ	0xFDB
  9899                           fsr2h	equ	0xFDA
  9900                           fsr2l	equ	0xFD9
  9901                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        7
    BSS         400
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     45      66
    BANK0           160     94     160
    BANK1           256     23     237
    BANK2           256      0     106
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 106
		 -> output_buffer(BANK2[106]), input_buffer(BANK1[106]), 

    memset@p	PTR unsigned char  size(2) Largest target is 106
		 -> output_buffer(BANK2[106]), input_buffer(BANK1[106]), 

    GetDataDict@DataArray	PTR unsigned char  size(2) Largest target is 4
		 -> ComController@DataToSend(BANK1[4]), 

    cobs_decode@dst_write_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK1[30]), 

    cobs_decode@dst_buf_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK1[30]), 

    cobs_decode@dst_buf_end_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK1[30]), 

    cobs_decode@src_ptr	PTR const unsigned char  size(2) Largest target is 30
		 -> ReciveArray(BANK1[30]), 

    cobs_decode@src_end_ptr	PTR const unsigned char  size(2) Largest target is 30
		 -> ReciveArray(BANK1[30]), 

    cobs_encode@dst_write_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> sendData@COBSArray(BANK0[30]), 

    cobs_encode@dst_code_write_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> sendData@COBSArray(BANK0[30]), 

    cobs_encode@dst_buf_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> sendData@COBSArray(BANK0[30]), 

    cobs_encode@dst_buf_end_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> sendData@COBSArray(BANK0[30]), 

    cobs_encode@src_ptr	PTR const unsigned char  size(2) Largest target is 30
		 -> sendData@SendArray(BANK0[30]), 

    cobs_encode@src_end_ptr	PTR const unsigned char  size(2) Largest target is 30
		 -> sendData@SendArray(BANK0[30]), 

    ComController@DTI	PTR unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK1[30]), 

    sendData@DTS	PTR unsigned char  size(2) Largest target is 4
		 -> ComController@DataToSend(BANK1[4]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK1[30]), sendData@SendArray(BANK0[30]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 106
		 -> output_buffer(BANK2[106]), input_buffer(BANK1[106]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 106
		 -> output_buffer(BANK2[106]), input_buffer(BANK1[106]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 106
		 -> output_buffer(BANK2[106]), input_buffer(BANK1[106]), 

    sp__memset	PTR void  size(2) Largest target is 106
		 -> output_buffer(BANK2[106]), input_buffer(BANK1[106]), 

    UART_buff_init@_this	PTR struct UART_ring_buff size(2) Largest target is 106
		 -> output_buffer(BANK2[106]), input_buffer(BANK1[106]), 


Critical Paths under _main in COMRAM

    _receiveData->_ComController
    _Receive_get->_UART_buff_get
    _Receive_available->_UART_buff_size
    _ComController->_sendData
    _sendData->_Send_put
    _Send_put->_UART_buff_get
    _Send_put->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc
    _UART_buff_get->_UART_buff_modulo_inc
    _EUSART1_Initialize->_UART_buff_init
    _UART_buff_init->_memset
    _Update->_writeRegisters
    _StartUp595->_Clear595
    _Clear595->_writeRegisters
    _writeRegisters->_Delay
    _EnableSlavePower->_SetPin595
    _ComputeStorageData->_DATAEE_ReadByte
    _CoolingStop->_PotClear
    _CoolingStart->_PotSetpoint
    _PotSetpoint->_Delay
    _PotClear->_Delay

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR1_ISR->_ReadCurrent
    i2_Update->i2_writeRegisters
    i2_writeRegisters->i2_Delay
    _FuseSystem->___wmul
    _EUSART1_Transmit_ISR->i2_UART_buff_get
    i2_UART_buff_get->i2_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->i2_UART_buff_put
    i2_UART_buff_put->i2_UART_buff_modulo_inc

Critical Paths under _main in BANK0

    _receiveData->_ComController
    _ComController->_sendData
    _sendData->_cobs_encode
    _CoolingStart->_PotSetpoint

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _updateComms->_receiveData
    _receiveData->_ComController

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   45488
                                             18 BANK1      5     5      0
                 _ComputeStorageData
                       _CoolingCheck
                       _CoolingStart
                        _CoolingStop
                   _DATAEE_WriteByte
                         _PDUStartup
                 _PWM4_LoadDutyValue
                        _PotSetpoint
                  _SYSTEM_Initialize
                        _updateComms
 ---------------------------------------------------------------------------------
 (1) _updateComms                                          0     0      0   15479
                        _receiveData
 ---------------------------------------------------------------------------------
 (2) _receiveData                                         14    14      0   15479
                                              4 BANK1     14    14      0
                               _CRC8
                      _ComController
                              _Delay
                  _Receive_available
                        _Receive_get
                        _cobs_decode
 ---------------------------------------------------------------------------------
 (3) _cobs_decode                                         24    16      8    1783
                                             28 COMRAM    10     2      8
                                              0 BANK0     14    14      0
 ---------------------------------------------------------------------------------
 (3) _Receive_get                                          0     0      0    1308
                      _UART_buff_get
 ---------------------------------------------------------------------------------
 (3) _Receive_available                                    2     0      2     176
                                             30 COMRAM     2     0      2
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (4) _UART_buff_size                                       2     0      2     176
                                             28 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _ComController                                        9     5      4    9561
                                             44 COMRAM     1     1      0
                                             90 BANK0      4     0      4
                                              0 BANK1      4     4      0
                              _Delay
                        _GetDataDict
                           _sendData
 ---------------------------------------------------------------------------------
 (4) _sendData                                            81    74      7    6596
                                             40 COMRAM     4     4      0
                                             13 BANK0     77    70      7
                               _CRC8
                           _Send_put
                        _cobs_encode
 ---------------------------------------------------------------------------------
 (5) _cobs_encode                                         23    15      8    1613
                                             28 COMRAM    10     2      8
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (5) _Send_put                                             1     1      0    2913
                                             39 COMRAM     1     1      0
                      _UART_buff_get
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (6) _UART_buff_put                                        5     2      3    1574
                                             34 COMRAM     5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (4) _UART_buff_get                                        5     3      2    1308
                                             34 COMRAM     5     3      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _UART_buff_modulo_inc                                 6     2      4     850
                                             28 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _CRC8                                                 7     4      3     604
                                             28 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (4) _GetDataDict                                          8     4      4     772
                                             28 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     888
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM4_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0     888
                     _UART_buff_init
 ---------------------------------------------------------------------------------
 (3) _UART_buff_init                                       2     0      2     888
                                             36 COMRAM     2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               8     2      6     677
                                             28 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PDUStartup                                           0     0      0   18239
                 _ComputeStorageData
                   _EnableSlavePower
                         _StartUp595
                             _Update
 ---------------------------------------------------------------------------------
 (2) _Update                                               0     0      0    1945
                     _writeRegisters
 ---------------------------------------------------------------------------------
 (2) _StartUp595                                           0     0      0    3822
                           _Clear595
                              _Delay
 ---------------------------------------------------------------------------------
 (3) _Clear595                                             2     2      0    2044
                                             41 COMRAM     2     2      0
                     _writeRegisters
 ---------------------------------------------------------------------------------
 (3) _writeRegisters                                       4     4      0    1945
                                             37 COMRAM     4     4      0
                              _Delay
 ---------------------------------------------------------------------------------
 (2) _EnableSlavePower                                     3     1      2   12311
                                             38 COMRAM     3     1      2
                          _SetPin595
 ---------------------------------------------------------------------------------
 (3) _SetPin595                                           10     4      6   10623
                                             28 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (2) _ComputeStorageData                                   4     4      0     161
                                             29 COMRAM     4     4      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_ReadByte                                      1     1      0      31
                                             28 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DATAEE_WriteByte                                     3     2      1    1176
                                             28 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (1) _CoolingStop                                          0     0      0    2268
                 _PWM4_LoadDutyValue
                           _PotClear
 ---------------------------------------------------------------------------------
 (1) _CoolingStart                                         0     0      0    4489
                 _PWM4_LoadDutyValue
                           _PotClear
                        _PotSetpoint
 ---------------------------------------------------------------------------------
 (1) _PotSetpoint                                         10     8      2    2221
                                             37 COMRAM     4     2      2
                                              0 BANK0      6     6      0
                              _Delay
 ---------------------------------------------------------------------------------
 (2) _PotClear                                             2     2      0    1846
                                             37 COMRAM     2     2      0
                              _Delay
 ---------------------------------------------------------------------------------
 (3) _Delay                                                9     5      4    1778
                                             28 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (1) _PWM4_LoadDutyValue                                   4     2      2     422
                                             28 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _CoolingCheck                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                          14    14      0    6300
                                             14 COMRAM    14    14      0
                            _ADC_ISR
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR1_ISR                                             0     0      0    5091
                         _FuseSystem
                        _ReadCurrent
 ---------------------------------------------------------------------------------
 (10) _ReadCurrent                                         1     1      0    4644
                                             13 COMRAM     1     1      0
                  _ADC_GetConversion
                        i2_SetPin595
                           i2_Update
 ---------------------------------------------------------------------------------
 (11) i2_Update                                            0     0      0     212
                   i2_writeRegisters
 ---------------------------------------------------------------------------------
 (12) i2_writeRegisters                                    4     4      0     212
                                              9 COMRAM     4     4      0
                            i2_Delay
 ---------------------------------------------------------------------------------
 (13) i2_Delay                                             9     5      4      98
                                              0 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (11) i2_SetPin595                                        10     4      6    4278
                                              0 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (11) _ADC_GetConversion                                   5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (10) _FuseSystem                                          4     4      0     447
                                              6 COMRAM     4     4      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (11) ___wmul                                              6     2      4     311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Transmit_ISR                                 0     0      0     528
                    i2_UART_buff_get
                   i2_UART_buff_size
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_size                                    2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_get                                     5     3      2     480
                                              6 COMRAM     5     3      2
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Receive_ISR                                  1     1      0     681
                                             11 COMRAM     1     1      0
                    i2_UART_buff_put
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_put                                     5     2      3     658
                                              6 COMRAM     5     2      3
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (11) i2_UART_buff_modulo_inc                              6     2      4     298
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _ADC_ISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ComputeStorageData
     _DATAEE_ReadByte
   _CoolingCheck
   _CoolingStart
     _PWM4_LoadDutyValue
     _PotClear
       _Delay
     _PotSetpoint
       _Delay
   _CoolingStop
     _PWM4_LoadDutyValue
     _PotClear
       _Delay
   _DATAEE_WriteByte
   _PDUStartup
     _ComputeStorageData
       _DATAEE_ReadByte
     _EnableSlavePower
       _SetPin595
     _StartUp595
       _Clear595
         _writeRegisters
           _Delay
       _Delay
     _Update
       _writeRegisters
         _Delay
   _PWM4_LoadDutyValue
   _PotSetpoint
     _Delay
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
       _UART_buff_init
         _memset
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM4_Initialize
     _TMR1_Initialize
       _TMR1_StartTimer
     _TMR2_Initialize
       _TMR2_StartTimer
   _updateComms
     _receiveData
       _CRC8
       _ComController
         _Delay
         _GetDataDict
         _sendData
           _CRC8
           _Send_put
             _UART_buff_get
               _UART_buff_modulo_inc
             _UART_buff_put
               _UART_buff_modulo_inc
           _cobs_encode
       _Delay
       _Receive_available
         _UART_buff_size
       _Receive_get
         _UART_buff_get
           _UART_buff_modulo_inc
       _cobs_decode

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
   _EUSART1_Receive_ISR
     i2_UART_buff_put
       i2_UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     i2_UART_buff_get
       i2_UART_buff_modulo_inc
     i2_UART_buff_size
   _TMR1_ISR
     _FuseSystem
       ___wmul
     _ReadCurrent
       _ADC_GetConversion
       i2_SetPin595
       i2_Update
         i2_writeRegisters
           i2_Delay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      6A       8       41.4%
BITBANK1           100      0       0       5        0.0%
BANK1              100     17      ED       6       92.6%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     5E      A0       4      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2D      42       1       70.2%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     239       9        0.0%
DATA                 0      0     239      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Sat Aug 12 07:57:57 2017

                __end_of_GetDataDict 154E               i2_UART_buff_modulo_inc 1CF0  
                      ??_CoolingStop 0028                       ??_CoolingCheck 001D  
           cobs_encode@dst_write_ptr 0068             GetDataDict@ReturnCounter 0024  
                ___wmul@multiplicand 0003                       ??_CoolingStart 002A  
                       __CFG_CP0$OFF 000000                         __CFG_CP1$OFF 000000  
                       __CFG_CP2$OFF 000000                         __CFG_CP3$OFF 000000  
                                l160 1B62                                  l536 16B6  
                                l722 1386                                  l714 10BA  
                                l538 16C0                                  l723 13C0  
                                l717 1114                                  l860 153A  
                                l757 1A56                                  l589 15DC  
                       __CFG_CPB$OFF 000000                                  _PR2 000FBB  
                       __CFG_CPD$OFF 000000                      _timer1ReloadVal 0039  
                    __end_of_ADC_ISR 1ED8                      _TMR2_Initialize 1E3A  
                    _PWM4_Initialize 1E4E                                  prod 000FF3  
                                wreg 000FE8        i2UART_buff_modulo_inc@modulus 0003  
        _COBS_DECODE_DST_BUF_LEN_MAX 003C                         __CFG_LVP$OFF 000000  
                               l4001 0842                                 l4013 086C  
                               l4021 0884                                 l4031 08B8  
                               l4203 126A                                 l4035 08CC  
                               l4133 0D46                                 l4223 10F4  
                               l4151 0E1E                                 l4233 1146  
                               l4209 1284                                 l3701 1A80  
                               l4173 11D0                                 l4165 1172  
                               l4181 122A                                 l4175 11EE  
                               l4167 1190                                 l4159 0E3A  
                               l4415 0CE4                                 l4407 0CC8  
                               l3705 1A9A                                 l4177 120C  
                               l4169 11AE                                 l3801 0A36  
                               l3901 1500                                 l3725 1A40  
                               l3733 1A5C                                 l4199 125A  
                               l3903 1508                                 l3911 153E  
                               l3719 1A2A                                 l3735 1A62  
                               l3807 0A58                                 l3751 0962  
                               l3825 16AE                                 l3817 1682  
                               l3681 0ECA                                 l3809 0A64  
                               l3843 1CB4                                 l3675 0E5E  
                               l3763 0998                                 l3909 1530  
                               l3669 1CE6                                 l3781 09E6  
                               l3757 0976                                 l4397 0CA6  
                               l3839 1CA4                                 l3695 15D8  
                               l3759 097E                                 l3937 1B7C  
                               l3947 1BA2                                 l3891 14C6  
                               l3883 0BAC                                 l3875 0B42  
                               l3971 0798                                 l3893 14CE  
                               l3981 07C2                                 l3973 07A0  
                               l3965 0784                                 l3887 0BC8  
                               l3879 0B80                                 l3991 0802  
                               l3899 14F6                                 l3999 083E  
              __end_of_ComController 14B6                                 _CRC8 1A24  
                               _LATA 000F89                                 _LATB 000F8A  
                               _LATC 000F8B                                 _LATD 000F8C  
                               _LATE 000F8D                                 u2170 156C  
                               u2600 0E1C                                 u2560 0D2C  
                               u2705 1B70                                 u2706 1B72  
                               u2680 13C0                                 u2827 1A86  
                               i2l31 1C54                                 i2l71 0066  
                               i2l75 0070                                 i2l67 004E  
                               i2l69 005A                                 _TMR2 000FBC  
                               _WPUB 000F61                      __end_ofi2_Delay 1B02  
                               _data 00D6                                 _main 0BEA  
           __end_of_EnableSlavePower 1252                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 fsr2h 000FDA  
                               fsr0l 000FE9                                 indf1 000FE7  
                               indf2 000FDF                                 fsr1l 000FE1  
                               fsr2l 000FD9                                 btemp 0043  
                      __CFG_BORV$190 000000                                 prodh 000FF4  
                               prodl 000FF3                                 start 00AC  
                      __CFG_IESO$OFF 000000                    ?i2_writeRegisters 0001  
                       ___param_bank 000000                        ??_ReadCurrent 000E  
                 ??i2_writeRegisters 000A       i2UART_buff_modulo_inc@my_value 0005  
          __size_of_DATAEE_WriteByte 0036                                ?_CRC8 001D  
            ComController@DataToSend 01D6       __size_of_OSCILLATOR_Initialize 000E  
      __end_of_OSCILLATOR_Initialize 1EA4                                ?_main 0001  
                              _EEADR 000FA9                                _ANSB3 0079CB  
                              _ANSB4 0079CC                      _TMR1_StartTimer 1ECC  
                              _ANSD7 0079DF                                _T1CON 000FCD  
                              _T2CON 000FBA                                _LATB0 007C50  
                              _LATA3 007C4B                                _LATB3 007C53  
                              _LATB4 007C54                                _LATB5 007C55  
                              _LATC5 007C5D                                _LATD4 007C64  
                              _LATD5 007C65                                _LATD6 007C66  
                              _LATD7 007C67                       __CFG_DEBUG$OFF 000000  
                        ?_PDUStartup 0001                                i2l620 1DCA  
                              i2l536 1734                                i2l538 173E  
                              i2l469 17EA                                i2l589 166E  
                              _MCSOn 003B                   _PWM4_LoadDutyValue 1C0C  
                              _TMR1H 000FCF                                _TMR1L 000FCE  
                __end_of_CoolingStop 1E88                                _TRISA 000F92  
                              _TRISB 000F93                                _TRISC 000F94  
                              _TRISD 000F95                                _TRISE 000F96  
                              _Delay 1A6E                        __CFG_WRT0$OFF 000000  
                      __CFG_WRT1$OFF 000000                        __CFG_WRT2$OFF 000000  
                      __CFG_WRT3$OFF 000000                 _EUSART1_Transmit_ISR 1BDA  
                     __CFG_EBTR0$OFF 000000                       __CFG_FCMEN$OFF 000000  
                     __CFG_EBTR1$OFF 000000                       __CFG_EBTR2$OFF 000000  
                     __CFG_EBTR3$OFF 000000                     ??_writeRegisters 0026  
                   __end_of_TMR1_ISR 1BDA                        __CFG_WRTB$OFF 000000  
                      __CFG_WRTC$OFF 000000                        __CFG_WRTD$OFF 000000  
                    _DATAEE_ReadByte 1E62                       __CFG_EBTRB$OFF 000000  
                ?_PWM4_LoadDutyValue 001D                   __CFG_MCLRE$EXTMCLR 000000  
                              main@i 01EA                                main@j 01E8  
            __end_of_TMR1_Initialize 1D86                     __end_ofi2_Update 1EC8  
                              pclath 000FFA                                tablat 000FF5  
                      ??_Receive_get 0028                        receiveData@CS 01E1  
                              plusw2 000FDB                                status 000FD8  
                        _GetDataDict 14B6                     __end_of_Clear595 1BA8  
                     __CFG_HFOFST$ON 000000                      _TMR2_StartTimer 1EC8  
                       ?_receiveData 0001                       __CFG_PBADEN$ON 000000  
               PotSetpoint@new_point 0026                         __end_of_CRC8 1A6E  
                    __initialization 192A           __end_of_EUSART1_Initialize 1B3E  
                       __end_of_main 0D18                           _CurrentADC 00CA  
               ??_PWM4_LoadDutyValue 001F                               ??_CRC8 0020  
            __end_of_PWM4_Initialize 1E62              __end_of_TMR2_Initialize 1E4E  
                          ??_ADC_ISR 0001          ?_INTERRUPT_InterruptManager 0001  
               PotSetpoint@set_point 0060                           _FuseSystem 176E  
                             ??_main 002E                  __end_of_ReadCurrent 0740  
                   __end_of_PotClear 13F6                        __activetblptr 000002  
                   __end_of_Send_put 1C9A            __size_ofi2_UART_buff_size 0016  
                             ?_Delay 001D                ?_EUSART1_Transmit_ISR 0001  
               GetDataDict@DataArray 001E                 GetDataDict@DataCount 0023  
               GetDataDict@DataTable 0022                            ??i2_Delay 0005  
                             _ADCON0 000FC2                               _ADCON1 000FC1  
                             _ADCON2 000FC0                 __size_of_cobs_decode 01BE  
                        FuseSystem@i 0009                               _ADRESH 000FC4  
                             _ADRESL 000FC3                               _EEDATA 000FA8  
                             _CCPR2H 000F68                               _CCPR2L 000F67  
                             _EECON2 000FA7                 __size_of_cobs_encode 0198  
                             _ANSELA 000F38                               _ANSELB 000F39  
                             _ANSELC 000F3A                               _ANSELD 000F3B  
                             _ANSELE 000F3C                               _T1GCON 000FCC  
               __end_of_CoolingCheck 1ED4                      i2_UART_buff_get 15E0  
                             _RC1STA 000FAB                      i2_UART_buff_put 0F58  
                             i2l3107 1D10                               i2l3221 03F8  
                             Delay@i 0022                               i2l3215 02E0  
                             i2l3233 0628                               i2l3209 01C8  
                             i2l3227 0510                       __CFG_WDTEN$OFF 000000  
                             i2l3183 1776                               i2l3417 1C04  
                             i2l3193 17CC                               i2l3195 17D4  
                             i2l3187 1786                               i2l3435 1BD2  
                             i2l3199 17E4                               i2l2815 1ACA  
                             i2l3385 0FE4                               i2l2921 1700  
        UART_buff_modulo_inc@modulus 001F                               i2l3379 0F78  
                             i2l2819 1AE4                               i2l3399 166A  
                             i2l2929 172C                               _TABLAT 000FF5  
                             _RCREG1 000FAE                               _OSCCON 000FD3  
                             _SPBRG1 000FAF                 __end_of_CoolingStart 1DC2  
                             _TX1STA 000FAC                               _TRISB3 007C9B  
                             _TRISB4 007C9C                               _TRISB5 007C9D  
                             _TXREG1 000FAD                  __size_of_PDUStartup 0062  
                     __CFG_XINST$OFF 000000                        ??_PotSetpoint 0028  
                __end_of_Receive_get 1E96                         _CCPTMRS1bits 000F48  
                             _Update 1EBC                   __size_of_SetPin595 004E  
                      _output_buffer 0200              __end_of_TMR1_StartTimer 1ED0  
                             ___wmul 1D1A                            CRC8@tempI 0022  
                     __CFG_STVREN$ON 000000                          _CoolingStop 1E76  
                             _memset 1C9A                               clear_0 1950  
                             clear_1 195C                               clear_2 1968  
                             clear_3 1974                               main@UP 01EC  
                   __end_of_sendData 0BEA              __end_of_DATAEE_ReadByte 1E76  
                       __pdataCOMRAM 003C               cobs_encode@dst_buf_len 001F  
             cobs_encode@dst_buf_ptr 001D                        Send_put@_data 0028  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8                           _StartUp595 18C8  
           ADC_GetConversion@channel 0005         __end_of_UART_buff_modulo_inc 1CF0  
            __end_of_TMR2_StartTimer 1ECC        __size_of_INTERRUPT_Initialize 000A  
                  ReadCurrent@gather 000E                     ?_TMR1_Initialize 0001  
                  _SYSTEM_Initialize 1D40                           __accesstop 0060  
            __end_of__initialization 197A                         ?i2_SetPin595 0001  
                      sendData@count 00B2                        sendData@lenth 0072  
                 ?_SYSTEM_Initialize 0001                        ___rparam_used 000001  
            ?i2_UART_buff_modulo_inc 0001                         ?_updateComms 0001  
                      __end_of_Delay 1AB8                       __pcstackCOMRAM 0001  
                ??_SYSTEM_Initialize 0027                          _ReadCurrent 00B0  
                          ?_TMR1_ISR 0001                     _DATAEE_WriteByte 1B3E  
                   ?_TMR2_Initialize 0001                     ?_PWM4_Initialize 0001  
                        ?_FuseSystem 0001                            ?i2_Update 0001  
                __end_of_PotSetpoint 116E          __size_of_ComputeStorageData 00DC  
        PWM4_LoadDutyValue@dutyValue 001D                   UART_buff_get@_this 0023  
                        _Currentcomp 00E2                __end_of_UART_buff_get 15E0  
             ??_EUSART1_Transmit_ISR 000C                __end_of_UART_buff_put 0F58  
                          ?_Clear595 0001                              ??_Delay 0021  
            __end_ofi2_UART_buff_get 1672              __end_ofi2_UART_buff_put 1072  
        __end_of_EUSART1_Receive_ISR 1DE0                              CRC8@crc 0023  
                            CRC8@len 001F                              CRC8@sum 0020  
                  __end_of_SetPin595 19D6            __end_of_SYSTEM_Initialize 1D64  
                        sendData@DTS 0070               cobs_decode@dst_buf_len 001F  
                         __pbssBANK0 00BE                           __pbssBANK1 0100  
                         __pbssBANK2 0200               cobs_decode@dst_buf_ptr 001D  
                    __CFG_PLLCFG$OFF 000000                          _Receive_get 1E88  
     __end_ofi2_UART_buff_modulo_inc 1D1A                    ?_EnableSlavePower 0027  
            __size_of_UART_buff_init 001E                          _ReciveArray 01B8  
            __size_of_UART_buff_size 0016                            ?_PotClear 0001  
                          ?_Send_put 0001                   ??_EnableSlavePower 0029  
               __size_of_receiveData 0126                   __CFG_CCP2MX$PORTC1 000000  
                            ?_Update 0001                              ?___wmul 0001  
                   ?_TMR1_StartTimer 0001                           ??_TMR1_ISR 000F  
                 __CFG_CCP3MX$PORTB5 000000             cobs_decode@dst_write_ptr 0068  
         cobs_decode@remaining_bytes 0066                              _CCP2CON 000F66  
                            _ADC_ISR 1ED4                              ?_memset 001D  
                         ??i2_Update 000E              __size_of_ADC_Initialize 0018  
                   ?_DATAEE_ReadByte 0001                         ??_PDUStartup 002C  
                 UART_buff_put@_this 0023                      cobs_decode@F192 0031  
                         ??_Clear595 002A                     i2_UART_buff_size 1E24  
          __size_ofi2_writeRegisters 007E          i2UART_buff_modulo_inc@value 0001  
              __size_of_CoolingCheck 0004                              _OSCCON2 000FD2  
                            _TBLPTRH 000FF7                              _TBLPTRL 000FF6  
                            _TBLPTRU 000FF8                          ?_StartUp595 0001  
                  _Receive_available 1DF8         UART_buff_modulo_inc@my_value 0021  
                  __CFG_PRICLKEN$OFF 000000                              _OSCTUNE 000F9B  
                            _SPBRGH1 000FB0                  sendData@whereToSend 00B1  
                            i2_Delay 1AB8                __size_of_CoolingStart 001E  
                   ?_TMR2_StartTimer 0001                   ?_Receive_available 001F  
               DATAEE_WriteByte@bAdd 001E                         ?_GetDataDict 001D  
                __size_of_FuseSystem 007E                     ComController@DTI 00BA  
                ??_Receive_available 0021                            ?_sendData 006D  
                            _Current 00BE                      __CFG_PWRTEN$OFF 000000  
                         ??_PotClear 0026                           ??_Send_put 0028  
                            __Hparam 0000                              __Lparam 0000  
                 __end_of_PDUStartup 18C8               cobs_encode@src_end_ptr 0060  
                        _PotSetpoint 1072                      __size_of_Update 0006  
               _UART_buff_modulo_inc 1CC6                      __size_of___wmul 0026  
                       _CoolingCheck 1ED0                              __pcinit 192A  
             __size_of_ComController 00C0                      __size_of_memset 002C  
                            __ramtop 0600                     i2UART_buff_get@c 000B  
                            __ptext0 0BEA                              __ptext1 1EB6  
                            __ptext2 0D18                              __ptext3 0740  
                            __ptext4 1E88                              __ptext5 1DF8  
                            __ptext6 1E0E                              __ptext7 13F6  
                            __ptext8 0A96                              __ptext9 08FE  
                       _CoolingStart 1DA4                     i2UART_buff_put@c 0009  
                          _T1CONbits 000FCD           cobs_encode@dst_buf_end_ptr 0063  
              _OSCILLATOR_Initialize 1E96            __end_of_Receive_available 1E0E  
                          _T2CONbits 000FBA                  cobs_encode@src_byte 0062  
                 _EUSART1_Initialize 1B02                     ?i2_UART_buff_get 0007  
           ??_PIN_MANAGER_Initialize 001D                            Clear595@i 002A  
                   ?i2_UART_buff_put 0007           __size_of_SYSTEM_Initialize 0024  
               end_of_initialization 197A                            Delay@wait 001D  
                ?_EUSART1_Initialize 0001                      cobs_encode@F180 0034  
                            memset@c 001F                              memset@n 0021  
                            memset@p 0023                        __Lmediumconst 0000  
                         ??_sendData 0029                 __size_ofi2_SetPin595 004E  
                    receiveData@Data 01E4                            _PDUFalult 00F8  
              ?_UART_buff_modulo_inc 001D                 __size_of_updateComms 0006  
                            postdec1 000FE5                              postdec2 000FDD  
                __size_of_StartUp595 0062                              postinc0 000FEE  
                            postinc2 000FDE          __size_of_PWM4_LoadDutyValue 0030  
                       ?_CoolingStop 0001                         SetPin595@Reg 001D  
               ??_EUSART1_Initialize 0027                         SetPin595@pin 001F  
                  cobs_decode@result 006B               cobs_decode@src_end_ptr 0060  
                      ??_cobs_decode 0025                        ??_cobs_encode 0025  
                          _TRISCbits 000F94                            _TRISDbits 000F95  
                   FuseSystem@i_1200 0007             __end_of_DATAEE_WriteByte 1B74  
                     sendData@result 00B5                        _ComController 13F6  
              i2UART_buff_size@_this 0001                       _UART_buff_init 1D86  
                     _UART_buff_size 1E0E              __size_of_writeRegisters 007E  
                       ?_ReadCurrent 0001         __end_of_INTERRUPT_Initialize 1EAE  
                     __end_of_Update 1EC2               GetDataDict@numbofbytes 0020  
                     __end_of___wmul 1D40                        __pidataCOMRAM 1EAE  
                       ??_FuseSystem 0007                    __size_of_TMR1_ISR 0032  
                     _ADC_Initialize 1DE0               ?_OSCILLATOR_Initialize 0001  
                     __end_of_memset 1CC6                         receiveData@i 01E2  
                       receiveData@j 01DF           __size_of_Receive_available 0016  
                   i2_writeRegisters 16F0                    __size_ofi2_Update 0006  
                start_initialization 192A      __size_of_PIN_MANAGER_Initialize 007A  
              EnableSlavePower@slave 0029                    __size_of_Clear595 0034  
                i2writeRegisters@val 000A                            PotClear@x 0026  
                 ComController@lenth 00BC                       ?_ComController 00BA  
                __end_of_cobs_decode 08FE               __end_of_UART_buff_init 1DA4  
                     UART_buff_get@c 0027               __end_of_UART_buff_size 1E24  
                __end_of_cobs_encode 0A96                         ?_Receive_get 0001  
                          _SetPin595 1988                       UART_buff_put@c 0025  
                DATAEE_ReadByte@bAdd 001D                   __end_of_FuseSystem 17EC  
           __end_ofi2_UART_buff_size 1E3A                 __size_of_GetDataDict 0098  
             ??_UART_buff_modulo_inc 0021             __size_of_TMR1_Initialize 0022  
                           CRC8@data 001D                             ??_Update 002A  
                  __size_of_PotClear 00C8                    __size_of_Send_put 002E  
                           ??___wmul 0005               __end_of_ADC_Initialize 1DF8  
         __end_of_ComputeStorageData 132E                             ?_ADC_ISR 0001  
                           ??_memset 0023            __size_of_EnableSlavePower 00E4  
                        __pbssCOMRAM 002E        __size_of_EUSART1_Transmit_ISR 0032  
                      __pcstackBANK0 0060                        __pcstackBANK1 01D6  
                       ??_StartUp595 002C             __size_of_PWM4_Initialize 0014  
           __size_of_TMR2_Initialize 0014                             ?i2_Delay 0001  
                UART_buff_init@_this 0025                    i2writeRegisters@i 000C  
                    ?_UART_buff_init 0025                      ?_UART_buff_size 001D  
       __size_of_EUSART1_Receive_ISR 001E                           ?_SetPin595 001D  
                      ??_receiveData 01DA                           sendData@CS 00B4  
              cobs_encode@search_len 0065               __size_of_UART_buff_get 0092  
             __size_of_UART_buff_put 011A               _PIN_MANAGER_Initialize 17EC  
                  __size_of_sendData 0154                         ?_PotSetpoint 0026  
                          __pintcode 0008                   __end_of_StartUp595 192A  
                    ?_ADC_Initialize 0001         ??_INTERRUPT_InterruptManager 000F  
               i2UART_buff_get@_this 0007                 __size_of_CoolingStop 0012  
                     i2SetPin595@Reg 0001                       i2SetPin595@pin 0003  
                           _BAUD1CON 000FB8             __size_of_TMR1_StartTimer 0004  
                     __size_of_Delay 004A                          _cobs_decode 0740  
                        _cobs_encode 08FE               sendData@DataTableIndex 006F  
                    ??_ComController 002D             __size_of_DATAEE_ReadByte 0014  
        _COBS_ENCODE_DST_BUF_LEN_MAX 003E                 _INTERRUPT_Initialize 1EA4  
                 cobs_encode@src_len 0023                   cobs_encode@src_ptr 0021  
                     ___wmul@product 0005                             _LATCbits 000F8B  
                     _writeRegisters 1672                  UART_buff_size@_this 001D  
                          _registers 0100                             _IPR1bits 000F9F  
                           _PIE1bits 000F9D             __size_of_TMR2_StartTimer 0004  
                           i2Delay@i 0006  __size_of_INTERRUPT_InterruptManager 00A4  
                           i2u185_40 15FE                             _PIR1bits 000F9E  
                           i2u187_40 1BF4                             i2u283_47 1AD0  
                           i2u188_40 1BC6                             _RCONbits 000FD0  
                   __CFG_WDTPS$32768 000000                  __end_of_receiveData 0E3E  
                           _TMR1_ISR 1BA8                         PotSetpoint@x 0062  
                       _input_buffer 0130                 __size_of_ReadCurrent 0690  
                  ??_TMR1_Initialize 001D                     __size_of_ADC_ISR 0004  
         cobs_decode@dst_buf_end_ptr 0062                             i2_Update 1EC2  
                         _ADCON0bits 000FC2                           _ADCON2bits 000FC0  
                  ___wmul@multiplier 0001                 i2UART_buff_put@_this 0007  
                   i2SetPin595@value 0005                             _Clear595 1B74  
                      _UART_buff_get 154E                        _UART_buff_put 0E3E  
                  sendData@COBSArray 0074                DATAEE_WriteByte@bData 001D  
      cobs_encode@dst_code_write_ptr 0066             ??i2_UART_buff_modulo_inc 0005  
                        _INTCON2bits 000FF1                     __size_ofi2_Delay 004A  
                          copy_data0 193E                ?_INTERRUPT_Initialize 0001  
                 sendData@ComandByte 006D                    ?_DATAEE_WriteByte 001D  
             __end_of_writeRegisters 16F0                   PotSetpoint@new_pos 0064  
                      ??i2_SetPin595 0007                          ??_SetPin595 0023  
               EnableSlavePower@onof 0027             __size_ofi2_UART_buff_get 0092  
                  ??_TMR2_Initialize 001D                    ??_PWM4_Initialize 001D  
           __size_ofi2_UART_buff_put 011A                   ??_DATAEE_WriteByte 001E  
                         _EECON1bits 000FA6                        ??_updateComms 002E  
               __size_of_Receive_get 000E             __end_ofi2_writeRegisters 176E  
                           _PotClear 132E                             __Hrparam 0000  
                           _Send_put 1C6C           __end_of_PWM4_LoadDutyValue 1C3C  
                           __Lrparam 0000                    _ADC_GetConversion 1C3C  
                 __CFG_BOREN$SBORDIS 000000                    __CFG_P2BMX$PORTD2 000000  
            ??_OSCILLATOR_Initialize 001D                   ?_ADC_GetConversion 0001  
        __size_of_EUSART1_Initialize 003C                     _EnableSlavePower 116E  
                         _ANSELCbits 000F3A                       ?_UART_buff_get 0023  
                     ?_UART_buff_put 0023                          CRC8@extract 0021  
                ??_ADC_GetConversion 0003                     GetDataDict@Error 0021  
                          sendData@i 00B8                             __ptext10 1C6C  
                           __ptext11 0E3E                             __ptext20 1ECC  
                           __ptext12 154E                             __ptext21 1E4E  
                           __ptext13 1CC6                           _T1GCONbits 000FCC  
                           __ptext30 1EBC                             __ptext22 17EC  
                           __ptext14 1A24                             __ptext31 18C8  
                           __ptext23 1E96                             __ptext15 14B6  
                           __ptext40 1DA4                             __ptext32 1B74  
                           __ptext24 1EA4                             __ptext16 1D40  
                           __ptext41 1072                             __ptext33 1672  
                           __ptext25 1B02                             __ptext17 1E3A  
                           __ptext50 16F0                             __ptext42 132E  
                           __ptext34 116E                             __ptext26 1D86  
                           __ptext18 1EC8                             __ptext51 1AB8  
                           __ptext43 1A6E                             __ptext35 1988  
                           __ptext27 1C9A                             __ptext19 1D64  
                           __ptext60 0F58                             __ptext52 19D6  
                           __ptext44 1C0C                             __ptext36 1252  
                           __ptext28 1DE0                             __ptext61 1CF0  
                           __ptext53 1C3C                             __ptext45 1ED0  
                           __ptext37 1E62                             __ptext29 1866  
                           __ptext62 1ED4                             __ptext54 176E  
                           __ptext38 1B3E                             __ptext55 1D1A  
                           __ptext47 1BA8                             __ptext39 1E76  
                           __ptext56 1BDA                             __ptext48 00B0  
                           __ptext57 1E24                             __ptext49 1EC2  
                           __ptext58 15E0                             __ptext59 1DC2  
                  ??_TMR1_StartTimer 001D                        __size_of_CRC8 004A  
          GetDataDict@DataTableIndex 001D                          i2Delay@wait 0001  
        DATAEE_WriteByte@GIEBitValue 001F              EUSART1_Receive_ISR@data 000C  
                    ?_writeRegisters 0001                        __size_of_main 012E  
                  cobs_encode@result 006A                          _receiveData 0D18  
                           _readwhat 0040                       _Transmit_stall 0042  
                           _sendData 0A96                    ??_DATAEE_ReadByte 001D  
          __end_of_ADC_GetConversion 1C6C                    ?i2_UART_buff_size 0001  
                  sendData@DataLenth 00B0                    sendData@DataTable 006E  
                         _RC1STAbits 000FAB                  __end_ofi2_SetPin595 1A24  
                           _prev_pos 0037                         _ProcessArray 019A  
                 ??i2_UART_buff_size 0003                    writeRegisters@val 0026  
                           int$flags 0043                    ??_TMR2_StartTimer 001D  
                __end_of_updateComms 1EBC   __end_of_INTERRUPT_InterruptManager 00AC  
         _INTERRUPT_InterruptManager 0008                 __size_of_PotSetpoint 00FC  
                _EUSART1_Receive_ISR 1DC2                    receiveData@result 01E5  
                         _INTCONbits 000FF2                  ComputeStorageData@i 0020  
          UART_buff_modulo_inc@value 001D                     ??_UART_buff_init 0027  
                   ??_UART_buff_size 001F                   _ComputeStorageData 1252  
             ??_INTERRUPT_Initialize 001D                             memset@p1 001D  
    __size_ofi2_UART_buff_modulo_inc 002A                             intlevel2 0000  
                cobs_decode@len_code 006A                 ?_EUSART1_Receive_ISR 0001  
                      ??_GetDataDict 0021                  ?_ComputeStorageData 0001  
            ?_PIN_MANAGER_Initialize 0001                         cobs_decode@i 0065  
                     SetPin595@value 0021         __end_of_EUSART1_Transmit_ISR 1C0C  
                   ??_ADC_Initialize 001D                    sendData@SendArray 0092  
                  ??i2_UART_buff_get 0009                    ??i2_UART_buff_put 000A  
                cobs_decode@src_byte 0064        __size_of_UART_buff_modulo_inc 002A  
                      ?_CoolingCheck 0001                    _DataTableArrayOne 00EE  
                    ??_UART_buff_get 0025                    _DataTableArrayTwo 002E  
                    ??_UART_buff_put 0026                 ??_ComputeStorageData 001E  
                      ?_CoolingStart 0001                           _PDUStartup 1866  
                       ?_cobs_decode 001D                         ?_cobs_encode 001D  
                  __CFG_T3CMX$PORTC0 000000                      writeRegisters@i 0028  
                 cobs_decode@src_len 0023                   cobs_decode@src_ptr 0021  
              ??_EUSART1_Receive_ISR 000C       __end_of_PIN_MANAGER_Initialize 1866  
                        i2_SetPin595 19D6                    __CFG_FOSC$INTIO67 000000  
         __size_of_ADC_GetConversion 0030                      _TMR1_Initialize 1D64  
                        _updateComms 1EB6  
