

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Sat Aug 12 13:58:42 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    80                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    81                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    82  0000                     
    83                           ; Version 1.42
    84                           ; Generated 13/04/2017 GMT
    85                           ; 
    86                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    87                           ; All rights reserved.
    88                           ; 
    89                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    90                           ; 
    91                           ; Redistribution and use in source and binary forms, with or without modification, are
    92                           ; permitted provided that the following conditions are met:
    93                           ; 
    94                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    95                           ;        conditions and the following disclaimer.
    96                           ; 
    97                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    98                           ;        of conditions and the following disclaimer in the documentation and/or other
    99                           ;        materials provided with the distribution.
   100                           ; 
   101                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   102                           ;        software without specific prior written permission.
   103                           ; 
   104                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   105                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   106                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   107                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   108                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   109                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   110                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   111                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   112                           ; 
   113                           ; 
   114                           ; Code-generator required, PIC18F45K22 Definitions
   115                           ; 
   116                           ; SFR Addresses
   117  0000                     
   118                           	psect	idataCOMRAM
   119  001F4E                     __pidataCOMRAM:
   120                           	opt stack 0
   121                           
   122                           ;initializer for _COBS_DECODE_DST_BUF_LEN_MAX
   123  001F4E  001E               	dw	30
   124                           
   125                           ;initializer for _COBS_ENCODE_DST_BUF_LEN_MAX
   126  001F50  001E               	dw	30
   127                           
   128                           ;initializer for _readwhat
   129  001F52  0001               	dw	1
   130                           
   131                           ;initializer for _Transmit_stall
   132  001F54  01                 	db	1
   133  0000                     _CCPTMRS1bits	set	3912
   134  0000                     _ANSELCbits	set	3898
   135  0000                     _ANSELE	set	3900
   136  0000                     _ANSELD	set	3899
   137  0000                     _ANSELC	set	3898
   138  0000                     _ANSELB	set	3897
   139  0000                     _ANSELA	set	3896
   140  0000                     _ANSB4	set	31180
   141  0000                     _ANSD7	set	31199
   142  0000                     _ANSB3	set	31179
   143  0000                     _RC1STAbits	set	4011
   144  0000                     _RCREG1	set	4014
   145  0000                     _TXREG1	set	4013
   146  0000                     _SPBRGH1	set	4016
   147  0000                     _SPBRG1	set	4015
   148  0000                     _TX1STA	set	4012
   149  0000                     _RC1STA	set	4011
   150  0000                     _BAUD1CON	set	4024
   151  0000                     _T2CONbits	set	4026
   152  0000                     _TMR2	set	4028
   153  0000                     _PR2	set	4027
   154  0000                     _T2CON	set	4026
   155  0000                     _CCPR2H	set	3944
   156  0000                     _CCPR2L	set	3943
   157  0000                     _CCP2CON	set	3942
   158  0000                     _T1GCONbits	set	4044
   159  0000                     _T1CONbits	set	4045
   160  0000                     _TMR1L	set	4046
   161  0000                     _TMR1H	set	4047
   162  0000                     _T1GCON	set	4044
   163  0000                     _T1CON	set	4045
   164  0000                     _TRISDbits	set	3989
   165  0000                     _INTCON2bits	set	4081
   166  0000                     _LATCbits	set	3979
   167  0000                     _TRISCbits	set	3988
   168  0000                     _TRISE	set	3990
   169  0000                     _LATE	set	3981
   170  0000                     _TRISD	set	3989
   171  0000                     _LATD	set	3980
   172  0000                     _TRISC	set	3988
   173  0000                     _LATC	set	3979
   174  0000                     _WPUB	set	3937
   175  0000                     _TRISB	set	3987
   176  0000                     _LATB	set	3978
   177  0000                     _TRISA	set	3986
   178  0000                     _LATA	set	3977
   179  0000                     _EEDATA	set	4008
   180  0000                     _EEADR	set	4009
   181  0000                     _EECON2	set	4007
   182  0000                     _EECON1bits	set	4006
   183  0000                     _INTCONbits	set	4082
   184  0000                     _TABLAT	set	4085
   185  0000                     _TBLPTRL	set	4086
   186  0000                     _TBLPTRH	set	4087
   187  0000                     _TBLPTRU	set	4088
   188  0000                     _OSCTUNE	set	3995
   189  0000                     _OSCCON2	set	4050
   190  0000                     _OSCCON	set	4051
   191  0000                     _PIE1bits	set	3997
   192  0000                     _IPR1bits	set	3999
   193  0000                     _RCONbits	set	4048
   194  0000                     _PIR1bits	set	3998
   195  0000                     _ADCON0bits	set	4034
   196  0000                     _ADRESH	set	4036
   197  0000                     _ADRESL	set	4035
   198  0000                     _ADCON2bits	set	4032
   199  0000                     _ADCON2	set	4032
   200  0000                     _ADCON1	set	4033
   201  0000                     _ADCON0	set	4034
   202  0000                     _LATC5	set	31837
   203  0000                     _LATB3	set	31827
   204  0000                     _LATB5	set	31829
   205  0000                     _LATD6	set	31846
   206  0000                     _LATD4	set	31844
   207  0000                     _LATD7	set	31847
   208  0000                     _LATB0	set	31824
   209  0000                     _LATD5	set	31845
   210  0000                     _TRISB5	set	31901
   211  0000                     _TRISB3	set	31899
   212  0000                     _TRISB4	set	31900
   213  0000                     _LATB4	set	31828
   214                           
   215                           ; #config settings
   216  0000                     
   217                           	psect	cinit
   218  0019EA                     __pcinit:
   219                           	opt stack 0
   220  0019EA                     start_initialization:
   221                           	opt stack 0
   222  0019EA                     __initialization:
   223                           	opt stack 0
   224                           
   225                           ; Initialize objects allocated to COMRAM (7 bytes)
   226                           ; load TBLPTR registers with __pidataCOMRAM
   227  0019EA  0E4E               	movlw	low __pidataCOMRAM
   228  0019EC  6EF6               	movwf	tblptrl,c
   229  0019EE  0E1F               	movlw	high __pidataCOMRAM
   230  0019F0  6EF7               	movwf	tblptrh,c
   231  0019F2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   232  0019F4  6EF8               	movwf	tblptru,c
   233  0019F6  EE00  F03C         	lfsr	0,__pdataCOMRAM
   234  0019FA  EE10 F007          	lfsr	1,7
   235  0019FE                     copy_data0:
   236  0019FE  0009               	tblrd		*+
   237  001A00  CFF5 FFEE          	movff	tablat,postinc0
   238  001A04  50E5               	movf	postdec1,w,c
   239  001A06  50E1               	movf	fsr1l,w,c
   240  001A08  E1FA               	bnz	copy_data0
   241                           
   242                           ; Clear objects allocated to BANK2 (106 bytes)
   243  001A0A  EE02  F000         	lfsr	0,__pbssBANK2
   244  001A0E  0E6A               	movlw	106
   245  001A10                     clear_0:
   246  001A10  6AEE               	clrf	postinc0,c
   247  001A12  06E8               	decf	wreg,f,c
   248  001A14  E1FD               	bnz	clear_0
   249                           
   250                           ; Clear objects allocated to BANK1 (226 bytes)
   251  001A16  EE01  F000         	lfsr	0,__pbssBANK1
   252  001A1A  0EE2               	movlw	226
   253  001A1C                     clear_1:
   254  001A1C  6AEE               	clrf	postinc0,c
   255  001A1E  06E8               	decf	wreg,f,c
   256  001A20  E1FD               	bnz	clear_1
   257                           
   258                           ; Clear objects allocated to BANK0 (54 bytes)
   259  001A22  EE00  F0C6         	lfsr	0,__pbssBANK0
   260  001A26  0E36               	movlw	54
   261  001A28                     clear_2:
   262  001A28  6AEE               	clrf	postinc0,c
   263  001A2A  06E8               	decf	wreg,f,c
   264  001A2C  E1FD               	bnz	clear_2
   265                           
   266                           ; Clear objects allocated to COMRAM (14 bytes)
   267  001A2E  EE00  F02E         	lfsr	0,__pbssCOMRAM
   268  001A32  0E0E               	movlw	14
   269  001A34                     clear_3:
   270  001A34  6AEE               	clrf	postinc0,c
   271  001A36  06E8               	decf	wreg,f,c
   272  001A38  E1FD               	bnz	clear_3
   273  001A3A                     end_of_initialization:
   274                           	opt stack 0
   275  001A3A                     __end_of__initialization:
   276                           	opt stack 0
   277  001A3A  9043               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   278  001A3C  9243               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   279  001A3E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   280  001A40  6EF8               	movwf	tblptru,c
   281  001A42  0100               	movlb	0
   282  001A44  EF2F  F00A         	goto	_main	;jump to C main() function
   283                           tblptru	equ	0xFF8
   284                           tblptrh	equ	0xFF7
   285                           tblptrl	equ	0xFF6
   286                           tablat	equ	0xFF5
   287                           postinc0	equ	0xFEE
   288                           wreg	equ	0xFE8
   289                           postdec1	equ	0xFE5
   290                           fsr1l	equ	0xFE1
   291                           
   292                           	psect	bssCOMRAM
   293  00002E                     __pbssCOMRAM:
   294                           	opt stack 0
   295  00002E                     _DataTableArrayFour:
   296                           	opt stack 0
   297  00002E                     	ds	3
   298  000031                     cobs_decode@F192:
   299                           	opt stack 0
   300  000031                     	ds	3
   301  000034                     cobs_encode@F180:
   302                           	opt stack 0
   303  000034                     	ds	3
   304  000037                     _prev_pos:
   305                           	opt stack 0
   306  000037                     	ds	2
   307  000039                     _timer1ReloadVal:
   308                           	opt stack 0
   309  000039                     	ds	2
   310  00003B                     _MCSOn:
   311                           	opt stack 0
   312  00003B                     	ds	1
   313                           tblptru	equ	0xFF8
   314                           tblptrh	equ	0xFF7
   315                           tblptrl	equ	0xFF6
   316                           tablat	equ	0xFF5
   317                           postinc0	equ	0xFEE
   318                           wreg	equ	0xFE8
   319                           postdec1	equ	0xFE5
   320                           fsr1l	equ	0xFE1
   321                           
   322                           	psect	dataCOMRAM
   323  00003C                     __pdataCOMRAM:
   324                           	opt stack 0
   325  00003C                     _COBS_DECODE_DST_BUF_LEN_MAX:
   326                           	opt stack 0
   327  00003C                     	ds	2
   328  00003E                     _COBS_ENCODE_DST_BUF_LEN_MAX:
   329                           	opt stack 0
   330  00003E                     	ds	2
   331  000040                     _readwhat:
   332                           	opt stack 0
   333  000040                     	ds	2
   334  000042                     _Transmit_stall:
   335                           	opt stack 0
   336  000042                     	ds	1
   337                           tblptru	equ	0xFF8
   338                           tblptrh	equ	0xFF7
   339                           tblptrl	equ	0xFF6
   340                           tablat	equ	0xFF5
   341                           postinc0	equ	0xFEE
   342                           wreg	equ	0xFE8
   343                           postdec1	equ	0xFE5
   344                           fsr1l	equ	0xFE1
   345                           
   346                           	psect	bssBANK0
   347  0000C6                     __pbssBANK0:
   348                           	opt stack 0
   349  0000C6                     _CurrentADC:
   350                           	opt stack 0
   351  0000C6                     	ds	12
   352  0000D2                     _data:
   353                           	opt stack 0
   354  0000D2                     	ds	12
   355  0000DE                     _Currentcomp:
   356                           	opt stack 0
   357  0000DE                     	ds	12
   358  0000EA                     _DataTableArrayOne:
   359                           	opt stack 0
   360  0000EA                     	ds	10
   361  0000F4                     _PDUFalult:
   362                           	opt stack 0
   363  0000F4                     	ds	8
   364                           tblptru	equ	0xFF8
   365                           tblptrh	equ	0xFF7
   366                           tblptrl	equ	0xFF6
   367                           tablat	equ	0xFF5
   368                           postinc0	equ	0xFEE
   369                           wreg	equ	0xFE8
   370                           postdec1	equ	0xFE5
   371                           fsr1l	equ	0xFE1
   372                           
   373                           	psect	bssBANK1
   374  000100                     __pbssBANK1:
   375                           	opt stack 0
   376  000100                     _registers:
   377                           	opt stack 0
   378  000100                     	ds	48
   379  000130                     _Current:
   380                           	opt stack 0
   381  000130                     	ds	12
   382  00013C                     _input_buffer:
   383                           	opt stack 0
   384  00013C                     	ds	106
   385  0001A6                     _ProcessArray:
   386                           	opt stack 0
   387  0001A6                     	ds	30
   388  0001C4                     _ReciveArray:
   389                           	opt stack 0
   390  0001C4                     	ds	30
   391                           tblptru	equ	0xFF8
   392                           tblptrh	equ	0xFF7
   393                           tblptrl	equ	0xFF6
   394                           tablat	equ	0xFF5
   395                           postinc0	equ	0xFEE
   396                           wreg	equ	0xFE8
   397                           postdec1	equ	0xFE5
   398                           fsr1l	equ	0xFE1
   399                           
   400                           	psect	bssBANK2
   401  000200                     __pbssBANK2:
   402                           	opt stack 0
   403  000200                     _output_buffer:
   404                           	opt stack 0
   405  000200                     	ds	106
   406                           tblptru	equ	0xFF8
   407                           tblptrh	equ	0xFF7
   408                           tblptrl	equ	0xFF6
   409                           tablat	equ	0xFF5
   410                           postinc0	equ	0xFEE
   411                           wreg	equ	0xFE8
   412                           postdec1	equ	0xFE5
   413                           fsr1l	equ	0xFE1
   414                           
   415                           	psect	cstackBANK1
   416  0001E2                     __pcstackBANK1:
   417                           	opt stack 0
   418  0001E2                     ??_receiveData:
   419                           
   420                           ; 1 bytes @ 0x0
   421  0001E2                     	ds	5
   422  0001E7                     receiveData@CS:
   423                           	opt stack 0
   424                           
   425                           ; 1 bytes @ 0x5
   426  0001E7                     	ds	1
   427  0001E8                     receiveData@i:
   428                           	opt stack 0
   429                           
   430                           ; 2 bytes @ 0x6
   431  0001E8                     	ds	2
   432  0001EA                     receiveData@Data:
   433                           	opt stack 0
   434                           
   435                           ; 1 bytes @ 0x8
   436  0001EA                     	ds	1
   437  0001EB                     receiveData@result:
   438                           	opt stack 0
   439                           
   440                           ; 3 bytes @ 0x9
   441  0001EB                     	ds	3
   442  0001EE                     main@j:
   443                           	opt stack 0
   444                           
   445                           ; 2 bytes @ 0xC
   446  0001EE                     	ds	2
   447  0001F0                     main@i:
   448                           	opt stack 0
   449                           
   450                           ; 2 bytes @ 0xE
   451  0001F0                     	ds	2
   452  0001F2                     main@UP:
   453                           	opt stack 0
   454                           
   455                           ; 1 bytes @ 0x10
   456  0001F2                     	ds	1
   457                           tblptru	equ	0xFF8
   458                           tblptrh	equ	0xFF7
   459                           tblptrl	equ	0xFF6
   460                           tablat	equ	0xFF5
   461                           postinc0	equ	0xFEE
   462                           wreg	equ	0xFE8
   463                           postdec1	equ	0xFE5
   464                           fsr1l	equ	0xFE1
   465                           
   466                           	psect	cstackBANK0
   467  000060                     __pcstackBANK0:
   468                           	opt stack 0
   469  000060                     PotSetpoint@set_point:
   470                           	opt stack 0
   471  000060                     cobs_encode@src_end_ptr:
   472                           	opt stack 0
   473  000060                     cobs_decode@src_end_ptr:
   474                           	opt stack 0
   475                           
   476                           ; 2 bytes @ 0x0
   477  000060                     	ds	2
   478  000062                     cobs_encode@src_byte:
   479                           	opt stack 0
   480  000062                     PotSetpoint@x:
   481                           	opt stack 0
   482  000062                     cobs_decode@dst_buf_end_ptr:
   483                           	opt stack 0
   484                           
   485                           ; 2 bytes @ 0x2
   486  000062                     	ds	1
   487  000063                     cobs_encode@dst_buf_end_ptr:
   488                           	opt stack 0
   489                           
   490                           ; 2 bytes @ 0x3
   491  000063                     	ds	1
   492  000064                     cobs_decode@src_byte:
   493                           	opt stack 0
   494  000064                     PotSetpoint@new_pos:
   495                           	opt stack 0
   496                           
   497                           ; 2 bytes @ 0x4
   498  000064                     	ds	1
   499  000065                     cobs_encode@search_len:
   500                           	opt stack 0
   501  000065                     cobs_decode@i:
   502                           	opt stack 0
   503                           
   504                           ; 1 bytes @ 0x5
   505  000065                     	ds	1
   506  000066                     cobs_encode@dst_code_write_ptr:
   507                           	opt stack 0
   508  000066                     cobs_decode@remaining_bytes:
   509                           	opt stack 0
   510                           
   511                           ; 2 bytes @ 0x6
   512  000066                     	ds	2
   513  000068                     cobs_encode@dst_write_ptr:
   514                           	opt stack 0
   515  000068                     cobs_decode@dst_write_ptr:
   516                           	opt stack 0
   517                           
   518                           ; 2 bytes @ 0x8
   519  000068                     	ds	2
   520  00006A                     cobs_decode@len_code:
   521                           	opt stack 0
   522  00006A                     cobs_encode@result:
   523                           	opt stack 0
   524                           
   525                           ; 3 bytes @ 0xA
   526  00006A                     	ds	1
   527  00006B                     cobs_decode@result:
   528                           	opt stack 0
   529                           
   530                           ; 3 bytes @ 0xB
   531  00006B                     	ds	2
   532  00006D                     sendData@ComandByte:
   533                           	opt stack 0
   534                           
   535                           ; 1 bytes @ 0xD
   536  00006D                     	ds	1
   537  00006E                     sendData@DataTable:
   538                           	opt stack 0
   539                           
   540                           ; 1 bytes @ 0xE
   541  00006E                     	ds	1
   542  00006F                     sendData@DataTableIndex:
   543                           	opt stack 0
   544                           
   545                           ; 1 bytes @ 0xF
   546  00006F                     	ds	1
   547  000070                     sendData@DTS:
   548                           	opt stack 0
   549                           
   550                           ; 2 bytes @ 0x10
   551  000070                     	ds	2
   552  000072                     sendData@lenth:
   553                           	opt stack 0
   554                           
   555                           ; 2 bytes @ 0x12
   556  000072                     	ds	2
   557  000074                     sendData@COBSArray:
   558                           	opt stack 0
   559                           
   560                           ; 30 bytes @ 0x14
   561  000074                     	ds	30
   562  000092                     sendData@SendArray:
   563                           	opt stack 0
   564                           
   565                           ; 30 bytes @ 0x32
   566  000092                     	ds	30
   567  0000B0                     sendData@whereToSend:
   568                           	opt stack 0
   569                           
   570                           ; 1 bytes @ 0x50
   571  0000B0                     	ds	1
   572  0000B1                     sendData@CS:
   573                           	opt stack 0
   574                           
   575                           ; 1 bytes @ 0x51
   576  0000B1                     	ds	1
   577  0000B2                     sendData@result:
   578                           	opt stack 0
   579                           
   580                           ; 3 bytes @ 0x52
   581  0000B2                     	ds	3
   582  0000B5                     sendData@j:
   583                           	opt stack 0
   584                           
   585                           ; 2 bytes @ 0x55
   586  0000B5                     	ds	2
   587  0000B7                     sendData@count:
   588                           	opt stack 0
   589                           
   590                           ; 2 bytes @ 0x57
   591  0000B7                     	ds	2
   592  0000B9                     sendData@i:
   593                           	opt stack 0
   594                           
   595                           ; 1 bytes @ 0x59
   596  0000B9                     	ds	1
   597  0000BA                     ComController@DTI:
   598                           	opt stack 0
   599                           
   600                           ; 2 bytes @ 0x5A
   601  0000BA                     	ds	2
   602  0000BC                     ComController@lenth:
   603                           	opt stack 0
   604                           
   605                           ; 2 bytes @ 0x5C
   606  0000BC                     	ds	2
   607  0000BE                     ComController@DataToSend_1637:
   608                           	opt stack 0
   609                           
   610                           ; 4 bytes @ 0x5E
   611  0000BE                     	ds	4
   612  0000C2                     ComController@DataToSend:
   613                           	opt stack 0
   614                           
   615                           ; 4 bytes @ 0x62
   616  0000C2                     	ds	4
   617                           tblptru	equ	0xFF8
   618                           tblptrh	equ	0xFF7
   619                           tblptrl	equ	0xFF6
   620                           tablat	equ	0xFF5
   621                           postinc0	equ	0xFEE
   622                           wreg	equ	0xFE8
   623                           postdec1	equ	0xFE5
   624                           fsr1l	equ	0xFE1
   625                           
   626                           	psect	cstackCOMRAM
   627  000001                     __pcstackCOMRAM:
   628                           	opt stack 0
   629  000001                     ?_ADC_GetConversion:
   630                           	opt stack 0
   631  000001                     ?___wmul:
   632                           	opt stack 0
   633  000001                     ?i2_UART_buff_size:
   634                           	opt stack 0
   635  000001                     ?i2_UART_buff_modulo_inc:
   636                           	opt stack 0
   637  000001                     ___wmul@multiplier:
   638                           	opt stack 0
   639  000001                     i2SetPin595@Reg:
   640                           	opt stack 0
   641  000001                     i2UART_buff_size@_this:
   642                           	opt stack 0
   643  000001                     i2UART_buff_modulo_inc@value:
   644                           	opt stack 0
   645  000001                     i2Delay@wait:
   646                           	opt stack 0
   647                           
   648                           ; 4 bytes @ 0x0
   649  000001                     	ds	2
   650  000003                     ??_ADC_GetConversion:
   651  000003                     ___wmul@multiplicand:
   652                           	opt stack 0
   653  000003                     i2SetPin595@pin:
   654                           	opt stack 0
   655  000003                     i2UART_buff_modulo_inc@modulus:
   656                           	opt stack 0
   657                           
   658                           ; 2 bytes @ 0x2
   659  000003                     	ds	2
   660  000005                     ??i2_Delay:
   661  000005                     ADC_GetConversion@channel:
   662                           	opt stack 0
   663  000005                     ___wmul@product:
   664                           	opt stack 0
   665  000005                     i2SetPin595@value:
   666                           	opt stack 0
   667  000005                     i2UART_buff_modulo_inc@my_value:
   668                           	opt stack 0
   669                           
   670                           ; 2 bytes @ 0x4
   671  000005                     	ds	1
   672  000006                     i2Delay@i:
   673                           	opt stack 0
   674                           
   675                           ; 4 bytes @ 0x5
   676  000006                     	ds	1
   677  000007                     ??i2_SetPin595:
   678  000007                     FuseSystem@i_1200:
   679                           	opt stack 0
   680  000007                     i2UART_buff_put@_this:
   681                           	opt stack 0
   682  000007                     i2UART_buff_get@_this:
   683                           	opt stack 0
   684                           
   685                           ; 2 bytes @ 0x6
   686  000007                     	ds	2
   687  000009                     ??i2_UART_buff_get:
   688  000009                     i2UART_buff_put@c:
   689                           	opt stack 0
   690  000009                     FuseSystem@i:
   691                           	opt stack 0
   692                           
   693                           ; 2 bytes @ 0x8
   694  000009                     	ds	1
   695  00000A                     ??i2_UART_buff_put:
   696  00000A                     i2writeRegisters@val:
   697                           	opt stack 0
   698                           
   699                           ; 2 bytes @ 0x9
   700  00000A                     	ds	1
   701  00000B                     i2UART_buff_get@c:
   702                           	opt stack 0
   703                           
   704                           ; 1 bytes @ 0xA
   705  00000B                     	ds	1
   706  00000C                     EUSART1_Receive_ISR@data:
   707                           	opt stack 0
   708  00000C                     i2writeRegisters@i:
   709                           	opt stack 0
   710                           
   711                           ; 2 bytes @ 0xB
   712  00000C                     	ds	2
   713  00000E                     ReadCurrent@gather:
   714                           	opt stack 0
   715                           
   716                           ; 1 bytes @ 0xD
   717  00000E                     	ds	1
   718  00000F                     ??_INTERRUPT_InterruptManager:
   719                           
   720                           ; 1 bytes @ 0xE
   721  00000F                     	ds	14
   722  00001D                     ?_UART_buff_modulo_inc:
   723                           	opt stack 0
   724  00001D                     ?_UART_buff_size:
   725                           	opt stack 0
   726  00001D                     ?_cobs_encode:
   727                           	opt stack 0
   728  00001D                     ?_cobs_decode:
   729                           	opt stack 0
   730  00001D                     DATAEE_ReadByte@bAdd:
   731                           	opt stack 0
   732  00001D                     GetDataDict@DataTableIndex:
   733                           	opt stack 0
   734  00001D                     PWM4_LoadDutyValue@dutyValue:
   735                           	opt stack 0
   736  00001D                     SetPin595@Reg:
   737                           	opt stack 0
   738  00001D                     UART_buff_size@_this:
   739                           	opt stack 0
   740  00001D                     UART_buff_modulo_inc@value:
   741                           	opt stack 0
   742  00001D                     CRC8@data:
   743                           	opt stack 0
   744  00001D                     cobs_encode@dst_buf_ptr:
   745                           	opt stack 0
   746  00001D                     cobs_decode@dst_buf_ptr:
   747                           	opt stack 0
   748  00001D                     memset@p1:
   749                           	opt stack 0
   750  00001D                     Delay@wait:
   751                           	opt stack 0
   752                           
   753                           ; 4 bytes @ 0x1C
   754  00001D                     	ds	1
   755  00001E                     ??_ComputeStorageData:
   756  00001E                     GetDataDict@DataArray:
   757                           	opt stack 0
   758                           
   759                           ; 2 bytes @ 0x1D
   760  00001E                     	ds	1
   761  00001F                     ??_PWM4_LoadDutyValue:
   762  00001F                     ?_Receive_available:
   763                           	opt stack 0
   764  00001F                     CRC8@len:
   765                           	opt stack 0
   766  00001F                     SetPin595@pin:
   767                           	opt stack 0
   768  00001F                     UART_buff_modulo_inc@modulus:
   769                           	opt stack 0
   770  00001F                     cobs_encode@dst_buf_len:
   771                           	opt stack 0
   772  00001F                     cobs_decode@dst_buf_len:
   773                           	opt stack 0
   774  00001F                     memset@c:
   775                           	opt stack 0
   776                           
   777                           ; 2 bytes @ 0x1E
   778  00001F                     	ds	1
   779  000020                     CRC8@sum:
   780                           	opt stack 0
   781  000020                     GetDataDict@numbofbytes:
   782                           	opt stack 0
   783  000020                     ComputeStorageData@i:
   784                           	opt stack 0
   785                           
   786                           ; 2 bytes @ 0x1F
   787  000020                     	ds	1
   788  000021                     ??_Delay:
   789  000021                     CRC8@extract:
   790                           	opt stack 0
   791  000021                     GetDataDict@Error:
   792                           	opt stack 0
   793  000021                     SetPin595@value:
   794                           	opt stack 0
   795  000021                     UART_buff_modulo_inc@my_value:
   796                           	opt stack 0
   797  000021                     cobs_encode@src_ptr:
   798                           	opt stack 0
   799  000021                     cobs_decode@src_ptr:
   800                           	opt stack 0
   801  000021                     memset@n:
   802                           	opt stack 0
   803                           
   804                           ; 2 bytes @ 0x20
   805  000021                     	ds	1
   806  000022                     CRC8@tempI:
   807                           	opt stack 0
   808  000022                     GetDataDict@DataTable:
   809                           	opt stack 0
   810  000022                     Delay@i:
   811                           	opt stack 0
   812                           
   813                           ; 4 bytes @ 0x21
   814  000022                     	ds	1
   815  000023                     ??_SetPin595:
   816  000023                     CRC8@crc:
   817                           	opt stack 0
   818  000023                     GetDataDict@DataCount:
   819                           	opt stack 0
   820  000023                     UART_buff_put@_this:
   821                           	opt stack 0
   822  000023                     UART_buff_get@_this:
   823                           	opt stack 0
   824  000023                     cobs_encode@src_len:
   825                           	opt stack 0
   826  000023                     cobs_decode@src_len:
   827                           	opt stack 0
   828  000023                     memset@p:
   829                           	opt stack 0
   830                           
   831                           ; 2 bytes @ 0x22
   832  000023                     	ds	1
   833  000024                     GetDataDict@ReturnCounter:
   834                           	opt stack 0
   835                           
   836                           ; 1 bytes @ 0x23
   837  000024                     	ds	1
   838  000025                     ??_cobs_encode:
   839  000025                     ??_cobs_decode:
   840  000025                     ??_UART_buff_get:
   841  000025                     UART_buff_put@c:
   842                           	opt stack 0
   843  000025                     UART_buff_init@_this:
   844                           	opt stack 0
   845  000025                     UART_buff_flush@_this:
   846                           	opt stack 0
   847                           
   848                           ; 2 bytes @ 0x24
   849  000025                     	ds	1
   850  000026                     ??_UART_buff_put:
   851  000026                     writeRegisters@val:
   852                           	opt stack 0
   853  000026                     PotSetpoint@new_point:
   854                           	opt stack 0
   855  000026                     PotClear@x:
   856                           	opt stack 0
   857                           
   858                           ; 2 bytes @ 0x25
   859  000026                     	ds	1
   860  000027                     UART_buff_get@c:
   861                           	opt stack 0
   862  000027                     EnableSlavePower@onof:
   863                           	opt stack 0
   864  000027                     UART_buff_flush@clearBuffer:
   865                           	opt stack 0
   866                           
   867                           ; 2 bytes @ 0x26
   868  000027                     	ds	1
   869  000028                     ??_PotSetpoint:
   870  000028                     Send_put@_data:
   871                           	opt stack 0
   872  000028                     writeRegisters@i:
   873                           	opt stack 0
   874                           
   875                           ; 2 bytes @ 0x27
   876  000028                     	ds	1
   877  000029                     ??_sendData:
   878  000029                     EnableSlavePower@slave:
   879                           	opt stack 0
   880                           
   881                           ; 1 bytes @ 0x28
   882  000029                     	ds	1
   883  00002A                     Clear595@i:
   884                           	opt stack 0
   885                           
   886                           ; 2 bytes @ 0x29
   887  00002A                     	ds	2
   888  00002C                     
   889                           ; 1 bytes @ 0x2B
   890  00002C                     	ds	1
   891  00002D                     ??_ComController:
   892                           
   893                           ; 1 bytes @ 0x2C
   894  00002D                     	ds	1
   895  00002E                     tblptru	equ	0xFF8
   896                           tblptrh	equ	0xFF7
   897                           tblptrl	equ	0xFF6
   898                           tablat	equ	0xFF5
   899                           postinc0	equ	0xFEE
   900                           wreg	equ	0xFE8
   901                           postdec1	equ	0xFE5
   902                           fsr1l	equ	0xFE1
   903                           
   904                           ; 1 bytes @ 0x2D
   905 ;;
   906 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   907 ;;
   908 ;; *************** function _main *****************
   909 ;; Defined at:
   910 ;;		line 11 in file "main.c"
   911 ;; Parameters:    Size  Location     Type
   912 ;;		None
   913 ;; Auto vars:     Size  Location     Type
   914 ;;  i               2   14[BANK1 ] int 
   915 ;;  j               2   12[BANK1 ] int 
   916 ;;  UP              1   16[BANK1 ] unsigned char 
   917 ;; Return value:  Size  Location     Type
   918 ;;                  1    wreg      void 
   919 ;; Registers used:
   920 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   921 ;; Tracked objects:
   922 ;;		On entry : 0/0
   923 ;;		On exit  : 0/0
   924 ;;		Unchanged: 0/0
   925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   926 ;;      Params:         0       0       0       0       0       0       0
   927 ;;      Locals:         0       0       5       0       0       0       0
   928 ;;      Temps:          0       0       0       0       0       0       0
   929 ;;      Totals:         0       0       5       0       0       0       0
   930 ;;Total ram usage:        5 bytes
   931 ;; Hardware stack levels required when called:   13
   932 ;; This function calls:
   933 ;;		_ComputeStorageData
   934 ;;		_CoolingCheck
   935 ;;		_CoolingStart
   936 ;;		_CoolingStop
   937 ;;		_PDUStartup
   938 ;;		_PWM4_LoadDutyValue
   939 ;;		_PotSetpoint
   940 ;;		_SYSTEM_Initialize
   941 ;;		_updateComms
   942 ;; This function is called by:
   943 ;;		Startup code after reset
   944 ;; This function uses a non-reentrant model
   945 ;;
   946                           
   947                           	psect	text0
   948  00145E                     __ptext0:
   949                           	opt stack 0
   950  00145E                     _main:
   951                           	opt stack 18
   952                           
   953                           ;main.c: 13: SYSTEM_Initialize();
   954                           
   955                           ;incstack = 0
   956  00145E  ECE5  F00E         	call	_SYSTEM_Initialize	;wreg free
   957                           
   958                           ;main.c: 14: PDUStartup();
   959  001462  EC93  F00C         	call	_PDUStartup	;wreg free
   960                           
   961                           ;main.c: 33: (INTCONbits.GIE = 1);
   962  001466  8EF2               	bsf	intcon,7,c	;volatile
   963                           
   964                           ;main.c: 36: (INTCONbits.PEIE = 1);
   965  001468  8CF2               	bsf	intcon,6,c	;volatile
   966                           
   967                           ;main.c: 56: PotSetpoint(0);
   968  00146A  0E00               	movlw	0
   969  00146C  6E27               	movwf	PotSetpoint@new_point+1,c
   970  00146E  0E00               	movlw	0
   971  001470  6E26               	movwf	PotSetpoint@new_point,c
   972  001472  EC6D  F008         	call	_PotSetpoint	;wreg free
   973                           
   974                           ;main.c: 57: PWM4_LoadDutyValue(0);
   975  001476  0E00               	movlw	0
   976  001478  6E1E               	movwf	PWM4_LoadDutyValue@dutyValue+1,c
   977  00147A  0E00               	movlw	0
   978  00147C  6E1D               	movwf	PWM4_LoadDutyValue@dutyValue,c
   979  00147E  EC4B  F00E         	call	_PWM4_LoadDutyValue	;wreg free
   980                           
   981                           ;main.c: 58: LATCbits.LATC5 = 0;
   982  001482  9A8B               	bcf	3979,5,c	;volatile
   983                           
   984                           ;main.c: 59: int i = 0;
   985  001484  0E00               	movlw	0
   986  001486  0101               	movlb	1	; () banked
   987  001488  6FF1               	movwf	(main@i+1)& (0+255),b
   988  00148A  0E00               	movlw	0
   989  00148C  6FF0               	movwf	main@i& (0+255),b
   990                           
   991                           ; BSR set to: 1
   992                           ;main.c: 60: bool UP = 0;
   993  00148E  0E00               	movlw	0
   994  001490  0101               	movlb	1	; () banked
   995  001492  6FF2               	movwf	main@UP& (0+255),b
   996                           
   997                           ;main.c: 61: ComputeStorageData();
   998  001494  EC5D  F009         	call	_ComputeStorageData	;wreg free
   999                           
  1000                           ;main.c: 63: int j = 1;
  1001  001498  0E00               	movlw	0
  1002  00149A  0101               	movlb	1	; () banked
  1003  00149C  6FEF               	movwf	(main@j+1)& (0+255),b
  1004  00149E  0E01               	movlw	1
  1005  0014A0  6FEE               	movwf	main@j& (0+255),b
  1006  0014A2                     l4358:
  1007                           
  1008                           ; BSR set to: 1
  1009                           ;main.c: 65: updateComms();
  1010  0014A2  ECAB  F00F         	call	_updateComms	;wreg free
  1011                           
  1012                           ;main.c: 66: if(CoolingCheck() && UP == 0){
  1013  0014A6  ECB8  F00F         	call	_CoolingCheck	;wreg free
  1014  0014AA  0900               	iorlw	0
  1015  0014AC  B4D8               	btfsc	status,2,c
  1016  0014AE  D00A               	goto	l4368
  1017  0014B0  0101               	movlb	1	; () banked
  1018  0014B2  51F2               	movf	main@UP& (0+255),w,b
  1019  0014B4  0101               	movlb	1	; () banked
  1020  0014B6  A4D8               	btfss	status,2,c
  1021  0014B8  D005               	goto	l4368
  1022                           
  1023                           ; BSR set to: 1
  1024                           ;main.c: 67: UP = 1;
  1025  0014BA  0E01               	movlw	1
  1026  0014BC  0101               	movlb	1	; () banked
  1027  0014BE  6FF2               	movwf	main@UP& (0+255),b
  1028                           
  1029                           ; BSR set to: 1
  1030                           ;main.c: 68: CoolingStart();
  1031  0014C0  EC17  F00F         	call	_CoolingStart	;wreg free
  1032  0014C4                     l4368:
  1033                           
  1034                           ;main.c: 69: }
  1035                           ;main.c: 70: if(!CoolingCheck() && UP == 1){
  1036  0014C4  ECB8  F00F         	call	_CoolingCheck	;wreg free
  1037  0014C8  0900               	iorlw	0
  1038  0014CA  A4D8               	btfss	status,2,c
  1039  0014CC  D009               	goto	l4376
  1040  0014CE  0101               	movlb	1	; () banked
  1041  0014D0  05F2               	decf	main@UP& (0+255),w,b
  1042  0014D2  A4D8               	btfss	status,2,c
  1043  0014D4  D005               	goto	l4376
  1044                           
  1045                           ; BSR set to: 1
  1046                           ;main.c: 71: UP = 0;
  1047  0014D6  0E00               	movlw	0
  1048  0014D8  0101               	movlb	1	; () banked
  1049  0014DA  6FF2               	movwf	main@UP& (0+255),b
  1050                           
  1051                           ; BSR set to: 1
  1052                           ;main.c: 72: CoolingStop();
  1053  0014DC  EC8B  F00F         	call	_CoolingStop	;wreg free
  1054  0014E0                     l4376:
  1055                           
  1056                           ;main.c: 73: }
  1057                           ;main.c: 74: i++;
  1058  0014E0  0101               	movlb	1	; () banked
  1059  0014E2  4BF0               	infsnz	main@i& (0+255),f,b
  1060  0014E4  2BF1               	incf	(main@i+1)& (0+255),f,b
  1061                           
  1062                           ; BSR set to: 1
  1063                           ;main.c: 75: PWM4_LoadDutyValue(i);
  1064  0014E6  C1F0  F01D         	movff	main@i,PWM4_LoadDutyValue@dutyValue
  1065  0014EA  C1F1  F01E         	movff	main@i+1,PWM4_LoadDutyValue@dutyValue+1
  1066  0014EE  EC4B  F00E         	call	_PWM4_LoadDutyValue	;wreg free
  1067                           
  1068                           ;main.c: 76: if(i>500){
  1069  0014F2  0101               	movlb	1	; () banked
  1070  0014F4  BFF1               	btfsc	(main@i+1)& (0+255),7,b
  1071  0014F6  D7D5               	goto	l4358
  1072  0014F8  0EF5               	movlw	245
  1073  0014FA  0101               	movlb	1	; () banked
  1074  0014FC  5DF0               	subwf	main@i& (0+255),w,b
  1075  0014FE  0E01               	movlw	1
  1076  001500  0101               	movlb	1	; () banked
  1077  001502  59F1               	subwfb	(main@i+1)& (0+255),w,b
  1078  001504  A0D8               	btfss	status,0,c
  1079  001506  D7CD               	goto	l4358
  1080                           
  1081                           ; BSR set to: 1
  1082                           ;main.c: 77: i = 0;
  1083  001508  0E00               	movlw	0
  1084  00150A  0101               	movlb	1	; () banked
  1085  00150C  6FF1               	movwf	(main@i+1)& (0+255),b
  1086  00150E  0E00               	movlw	0
  1087  001510  6FF0               	movwf	main@i& (0+255),b
  1088                           
  1089                           ; BSR set to: 1
  1090                           
  1091                           ; BSR set to: 1
  1092  001512  D7C7               	goto	l4358
  1093  001514                     __end_of_main:
  1094                           	opt stack 0
  1095                           tblptru	equ	0xFF8
  1096                           tblptrh	equ	0xFF7
  1097                           tblptrl	equ	0xFF6
  1098                           tablat	equ	0xFF5
  1099                           intcon	equ	0xFF2
  1100                           postinc0	equ	0xFEE
  1101                           wreg	equ	0xFE8
  1102                           postdec1	equ	0xFE5
  1103                           fsr1l	equ	0xFE1
  1104                           status	equ	0xFD8
  1105                           
  1106 ;; *************** function _updateComms *****************
  1107 ;; Defined at:
  1108 ;;		line 22 in file "Communications.c"
  1109 ;; Parameters:    Size  Location     Type
  1110 ;;		None
  1111 ;; Auto vars:     Size  Location     Type
  1112 ;;		None
  1113 ;; Return value:  Size  Location     Type
  1114 ;;                  1    wreg      void 
  1115 ;; Registers used:
  1116 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1117 ;; Tracked objects:
  1118 ;;		On entry : 0/0
  1119 ;;		On exit  : 0/0
  1120 ;;		Unchanged: 0/0
  1121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1122 ;;      Params:         0       0       0       0       0       0       0
  1123 ;;      Locals:         0       0       0       0       0       0       0
  1124 ;;      Temps:          0       0       0       0       0       0       0
  1125 ;;      Totals:         0       0       0       0       0       0       0
  1126 ;;Total ram usage:        0 bytes
  1127 ;; Hardware stack levels used:    1
  1128 ;; Hardware stack levels required when called:   12
  1129 ;; This function calls:
  1130 ;;		_receiveData
  1131 ;; This function is called by:
  1132 ;;		_main
  1133 ;; This function uses a non-reentrant model
  1134 ;;
  1135                           
  1136                           	psect	text1
  1137  001F56                     __ptext1:
  1138                           	opt stack 0
  1139  001F56                     _updateComms:
  1140                           	opt stack 18
  1141                           
  1142                           ;Communications.c: 23: if (receiveData()) {
  1143                           
  1144                           ; BSR set to: 1
  1145                           ;incstack = 0
  1146  001F56  ECE7  F007         	call	_receiveData	;wreg free
  1147  001F5A  0012               	return	
  1148  001F5C                     __end_of_updateComms:
  1149                           	opt stack 0
  1150                           tblptru	equ	0xFF8
  1151                           tblptrh	equ	0xFF7
  1152                           tblptrl	equ	0xFF6
  1153                           tablat	equ	0xFF5
  1154                           intcon	equ	0xFF2
  1155                           postinc0	equ	0xFEE
  1156                           wreg	equ	0xFE8
  1157                           postdec1	equ	0xFE5
  1158                           fsr1l	equ	0xFE1
  1159                           status	equ	0xFD8
  1160                           
  1161 ;; *************** function _receiveData *****************
  1162 ;; Defined at:
  1163 ;;		line 86 in file "CarCom.c"
  1164 ;; Parameters:    Size  Location     Type
  1165 ;;		None
  1166 ;; Auto vars:     Size  Location     Type
  1167 ;;  result          3    9[BANK1 ] struct .
  1168 ;;  i               2    6[BANK1 ] int 
  1169 ;;  Data            1    8[BANK1 ] unsigned char 
  1170 ;;  CS              1    5[BANK1 ] unsigned char 
  1171 ;; Return value:  Size  Location     Type
  1172 ;;                  1    wreg      unsigned char 
  1173 ;; Registers used:
  1174 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1175 ;; Tracked objects:
  1176 ;;		On entry : 0/0
  1177 ;;		On exit  : 0/0
  1178 ;;		Unchanged: 0/0
  1179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1180 ;;      Params:         0       0       0       0       0       0       0
  1181 ;;      Locals:         0       0       7       0       0       0       0
  1182 ;;      Temps:          0       0       5       0       0       0       0
  1183 ;;      Totals:         0       0      12       0       0       0       0
  1184 ;;Total ram usage:       12 bytes
  1185 ;; Hardware stack levels used:    1
  1186 ;; Hardware stack levels required when called:   11
  1187 ;; This function calls:
  1188 ;;		_CRC8
  1189 ;;		_ClearBuffer
  1190 ;;		_ComController
  1191 ;;		_Receive_available
  1192 ;;		_Receive_get
  1193 ;;		_cobs_decode
  1194 ;; This function is called by:
  1195 ;;		_updateComms
  1196 ;; This function uses a non-reentrant model
  1197 ;;
  1198                           
  1199                           	psect	text2
  1200  000FCE                     __ptext2:
  1201                           	opt stack 0
  1202  000FCE                     _receiveData:
  1203                           	opt stack 18
  1204                           
  1205                           ;CarCom.c: 87: if(Receive_available()>5){
  1206                           
  1207                           ;incstack = 0
  1208  000FCE  EC41  F00F         	call	_Receive_available	;wreg free
  1209  000FD2  BE20               	btfsc	?_Receive_available+1,7,c
  1210  000FD4  D080               	goto	l4172
  1211  000FD6  5020               	movf	?_Receive_available+1,w,c
  1212  000FD8  E104               	bnz	u2630
  1213  000FDA  0E06               	movlw	6
  1214  000FDC  5C1F               	subwf	?_Receive_available,w,c
  1215  000FDE  A0D8               	btfss	status,0,c
  1216  000FE0  D07A               	goto	l4172
  1217  000FE2                     u2630:
  1218                           
  1219                           ;CarCom.c: 88: if(Receive_get() == 5){
  1220  000FE2  EC94  F00F         	call	_Receive_get	;wreg free
  1221  000FE6  0A05               	xorlw	5
  1222  000FE8  A4D8               	btfss	status,2,c
  1223  000FEA  D075               	goto	l4172
  1224                           
  1225                           ;CarCom.c: 89: int i = 0;
  1226  000FEC  0E00               	movlw	0
  1227  000FEE  0101               	movlb	1	; () banked
  1228  000FF0  6FE9               	movwf	(receiveData@i+1)& (0+255),b
  1229  000FF2  0E00               	movlw	0
  1230  000FF4  6FE8               	movwf	receiveData@i& (0+255),b
  1231                           
  1232                           ;CarCom.c: 90: unsigned char Data = 0;
  1233  000FF6  0E00               	movlw	0
  1234  000FF8  0101               	movlb	1	; () banked
  1235  000FFA  6FEA               	movwf	receiveData@Data& (0+255),b
  1236  000FFC                     l4152:
  1237                           
  1238                           ; BSR set to: 1
  1239                           ;CarCom.c: 92: Data = Receive_get();
  1240  000FFC  EC94  F00F         	call	_Receive_get	;wreg free
  1241  001000  0101               	movlb	1	; () banked
  1242  001002  6FEA               	movwf	receiveData@Data& (0+255),b
  1243                           
  1244                           ; BSR set to: 1
  1245                           ;CarCom.c: 93: ReciveArray[i] = Data;
  1246  001004  0EC4               	movlw	low _ReciveArray
  1247  001006  0101               	movlb	1	; () banked
  1248  001008  25E8               	addwf	receiveData@i& (0+255),w,b
  1249  00100A  6ED9               	movwf	fsr2l,c
  1250  00100C  0E01               	movlw	high _ReciveArray
  1251  00100E  0101               	movlb	1	; () banked
  1252  001010  21E9               	addwfc	(receiveData@i+1)& (0+255),w,b
  1253  001012  6EDA               	movwf	fsr2h,c
  1254  001014  C1EA  FFDF         	movff	receiveData@Data,indf2
  1255                           
  1256                           ; BSR set to: 1
  1257                           ;CarCom.c: 94: _delay((unsigned long)((200)*(8000000/4000000.0)));
  1258  001018  0E85               	movlw	133
  1259  00101A                     u2847:
  1260  00101A  2EE8               	decfsz	wreg,f,c
  1261  00101C  D7FE               	bra	u2847
  1262  00101E  F000               	nop	
  1263                           
  1264                           ;CarCom.c: 96: i++;
  1265  001020  0101               	movlb	1	; () banked
  1266  001022  4BE8               	infsnz	receiveData@i& (0+255),f,b
  1267  001024  2BE9               	incf	(receiveData@i+1)& (0+255),f,b
  1268                           
  1269                           ; BSR set to: 1
  1270                           ;CarCom.c: 97: }while(Data != 0x00);
  1271  001026  0101               	movlb	1	; () banked
  1272  001028  51EA               	movf	receiveData@Data& (0+255),w,b
  1273  00102A  0101               	movlb	1	; () banked
  1274  00102C  A4D8               	btfss	status,2,c
  1275  00102E  D7E6               	goto	l4152
  1276                           
  1277                           ; BSR set to: 1
  1278                           ;CarCom.c: 101: ClearBuffer();
  1279                           
  1280                           ; BSR set to: 1
  1281  001030  EC57  F00F         	call	_ClearBuffer	;wreg free
  1282                           
  1283                           ;CarCom.c: 103: cobs_decode_result result;
  1284                           ;CarCom.c: 105: result = cobs_decode(ProcessArray, sizeof(ProcessArray), ReciveArray, i)
      +                          ;
  1285  001034  0EA6               	movlw	low _ProcessArray
  1286  001036  6E1D               	movwf	cobs_decode@dst_buf_ptr,c
  1287  001038  0E01               	movlw	high _ProcessArray
  1288  00103A  6E1E               	movwf	cobs_decode@dst_buf_ptr+1,c
  1289  00103C  0E00               	movlw	0
  1290  00103E  6E20               	movwf	cobs_decode@dst_buf_len+1,c
  1291  001040  0E1E               	movlw	30
  1292  001042  6E1F               	movwf	cobs_decode@dst_buf_len,c
  1293  001044  0EC4               	movlw	low _ReciveArray
  1294  001046  6E21               	movwf	cobs_decode@src_ptr,c
  1295  001048  0E01               	movlw	high _ReciveArray
  1296  00104A  6E22               	movwf	cobs_decode@src_ptr+1,c
  1297  00104C  C1E8  F023         	movff	receiveData@i,cobs_decode@src_len
  1298  001050  C1E9  F024         	movff	receiveData@i+1,cobs_decode@src_len+1
  1299  001054  EC8A  F004         	call	_cobs_decode	;wreg free
  1300  001058  C01D  F1EB         	movff	?_cobs_decode,receiveData@result
  1301  00105C  C01E  F1EC         	movff	?_cobs_decode+1,receiveData@result+1
  1302  001060  C01F  F1ED         	movff	?_cobs_decode+2,receiveData@result+2
  1303                           
  1304                           ;CarCom.c: 107: unsigned char CS = CRC8(ProcessArray, result.out_len-2);
  1305  001064  0EA6               	movlw	low _ProcessArray
  1306  001066  6E1D               	movwf	CRC8@data,c
  1307  001068  0E01               	movlw	high _ProcessArray
  1308  00106A  6E1E               	movwf	CRC8@data+1,c
  1309  00106C  0101               	movlb	1	; () banked
  1310  00106E  51EB               	movf	receiveData@result& (0+255),w,b
  1311  001070  0FFE               	addlw	254
  1312  001072  6E1F               	movwf	CRC8@len,c
  1313  001074  EC72  F00D         	call	_CRC8	;wreg free
  1314  001078  0101               	movlb	1	; () banked
  1315  00107A  6FE7               	movwf	receiveData@CS& (0+255),b
  1316                           
  1317                           ; BSR set to: 1
  1318                           ;CarCom.c: 109: if(ProcessArray[result.out_len-2] == CS){
  1319  00107C  0EFE               	movlw	254
  1320  00107E  0101               	movlb	1	; () banked
  1321  001080  6FE2               	movwf	??_receiveData& (0+255),b
  1322  001082  0EFF               	movlw	255
  1323  001084  0101               	movlb	1	; () banked
  1324  001086  6FE3               	movwf	(??_receiveData+1)& (0+255),b
  1325  001088  C1EB  F1E4         	movff	receiveData@result,??_receiveData+2
  1326  00108C  C1EC  F1E5         	movff	receiveData@result+1,??_receiveData+3
  1327  001090  0101               	movlb	1	; () banked
  1328  001092  51E2               	movf	??_receiveData& (0+255),w,b
  1329  001094  0101               	movlb	1	; () banked
  1330  001096  27E4               	addwf	(??_receiveData+2)& (0+255),f,b
  1331  001098  0101               	movlb	1	; () banked
  1332  00109A  51E3               	movf	(??_receiveData+1)& (0+255),w,b
  1333  00109C  0101               	movlb	1	; () banked
  1334  00109E  23E5               	addwfc	(??_receiveData+3)& (0+255),f,b
  1335  0010A0  0EA6               	movlw	low _ProcessArray
  1336  0010A2  0101               	movlb	1	; () banked
  1337  0010A4  25E4               	addwf	(??_receiveData+2)& (0+255),w,b
  1338  0010A6  6ED9               	movwf	fsr2l,c
  1339  0010A8  0E01               	movlw	high _ProcessArray
  1340  0010AA  0101               	movlb	1	; () banked
  1341  0010AC  21E5               	addwfc	(??_receiveData+3)& (0+255),w,b
  1342  0010AE  6EDA               	movwf	fsr2h,c
  1343  0010B0  0101               	movlb	1	; () banked
  1344  0010B2  51E7               	movf	receiveData@CS& (0+255),w,b
  1345  0010B4  18DE               	xorwf	postinc2,w,c
  1346  0010B6  A4D8               	btfss	status,2,c
  1347  0010B8  D00E               	goto	l4172
  1348                           
  1349                           ; BSR set to: 1
  1350                           ;CarCom.c: 111: ComController(ProcessArray,result.out_len);
  1351  0010BA  0EA6               	movlw	low _ProcessArray
  1352  0010BC  0100               	movlb	0	; () banked
  1353  0010BE  6FBA               	movwf	ComController@DTI& (0+255),b
  1354  0010C0  0E01               	movlw	high _ProcessArray
  1355  0010C2  0100               	movlb	0	; () banked
  1356  0010C4  6FBB               	movwf	(ComController@DTI+1)& (0+255),b
  1357  0010C6  C1EB  F0BC         	movff	receiveData@result,ComController@lenth
  1358  0010CA  C1EC  F0BD         	movff	receiveData@result+1,ComController@lenth+1
  1359  0010CE  EC35  F006         	call	_ComController	;wreg free
  1360                           
  1361                           ;CarCom.c: 112: return 1;
  1362  0010D2  0E01               	movlw	1
  1363  0010D4  0012               	return	
  1364  0010D6                     l4172:
  1365                           
  1366                           ;CarCom.c: 121: }
  1367                           ;CarCom.c: 123: return 0;
  1368  0010D6  0E00               	movlw	0
  1369  0010D8  0012               	return	
  1370  0010DA                     __end_of_receiveData:
  1371                           	opt stack 0
  1372                           tblptru	equ	0xFF8
  1373                           tblptrh	equ	0xFF7
  1374                           tblptrl	equ	0xFF6
  1375                           tablat	equ	0xFF5
  1376                           intcon	equ	0xFF2
  1377                           postinc0	equ	0xFEE
  1378                           wreg	equ	0xFE8
  1379                           postdec1	equ	0xFE5
  1380                           fsr1l	equ	0xFE1
  1381                           indf2	equ	0xFDF
  1382                           postinc2	equ	0xFDE
  1383                           fsr2h	equ	0xFDA
  1384                           fsr2l	equ	0xFD9
  1385                           status	equ	0xFD8
  1386                           
  1387 ;; *************** function _cobs_decode *****************
  1388 ;; Defined at:
  1389 ;;		line 115 in file "COBS.c"
  1390 ;; Parameters:    Size  Location     Type
  1391 ;;  dst_buf_ptr     2   28[COMRAM] PTR unsigned char 
  1392 ;;		 -> ProcessArray(30), 
  1393 ;;  dst_buf_len     2   30[COMRAM] unsigned int 
  1394 ;;  src_ptr         2   32[COMRAM] PTR const unsigned char 
  1395 ;;		 -> ReciveArray(30), 
  1396 ;;  src_len         2   34[COMRAM] unsigned int 
  1397 ;; Auto vars:     Size  Location     Type
  1398 ;;  result          3   11[BANK0 ] struct .
  1399 ;;  dst_write_pt    2    8[BANK0 ] PTR unsigned char 
  1400 ;;		 -> ProcessArray(30), 
  1401 ;;  remaining_by    2    6[BANK0 ] unsigned int 
  1402 ;;  dst_buf_end_    2    2[BANK0 ] PTR unsigned char 
  1403 ;;		 -> ProcessArray(30), 
  1404 ;;  src_end_ptr     2    0[BANK0 ] PTR const unsigned char 
  1405 ;;		 -> ReciveArray(30), 
  1406 ;;  len_code        1   10[BANK0 ] unsigned char 
  1407 ;;  i               1    5[BANK0 ] unsigned char 
  1408 ;;  src_byte        1    4[BANK0 ] unsigned char 
  1409 ;; Return value:  Size  Location     Type
  1410 ;;                  3   28[COMRAM] struct .
  1411 ;; Registers used:
  1412 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1413 ;; Tracked objects:
  1414 ;;		On entry : 0/0
  1415 ;;		On exit  : 0/0
  1416 ;;		Unchanged: 0/0
  1417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1418 ;;      Params:         8       0       0       0       0       0       0
  1419 ;;      Locals:         0      14       0       0       0       0       0
  1420 ;;      Temps:          2       0       0       0       0       0       0
  1421 ;;      Totals:        10      14       0       0       0       0       0
  1422 ;;Total ram usage:       24 bytes
  1423 ;; Hardware stack levels used:    1
  1424 ;; Hardware stack levels required when called:    6
  1425 ;; This function calls:
  1426 ;;		Nothing
  1427 ;; This function is called by:
  1428 ;;		_receiveData
  1429 ;; This function uses a non-reentrant model
  1430 ;;
  1431                           
  1432                           	psect	text3
  1433  000914                     __ptext3:
  1434                           	opt stack 0
  1435  000914                     _cobs_decode:
  1436                           	opt stack 22
  1437                           
  1438                           ;COBS.c: 117: cobs_decode_result result = { 0, COBS_DECODE_OK };
  1439                           
  1440                           ;incstack = 0
  1441  000914  C031  F06B         	movff	cobs_decode@F192,cobs_decode@result
  1442  000918  C032  F06C         	movff	cobs_decode@F192+1,cobs_decode@result+1
  1443  00091C  C033  F06D         	movff	cobs_decode@F192+2,cobs_decode@result+2
  1444                           
  1445                           ;COBS.c: 118: const uint8_t * src_end_ptr = src_ptr + src_len;
  1446  000920  5023               	movf	cobs_decode@src_len,w,c
  1447  000922  2421               	addwf	cobs_decode@src_ptr,w,c
  1448  000924  0100               	movlb	0	; () banked
  1449  000926  6F60               	movwf	cobs_decode@src_end_ptr& (0+255),b
  1450  000928  5024               	movf	cobs_decode@src_len+1,w,c
  1451  00092A  2022               	addwfc	cobs_decode@src_ptr+1,w,c
  1452  00092C  0100               	movlb	0	; () banked
  1453  00092E  6F61               	movwf	(cobs_decode@src_end_ptr+1)& (0+255),b
  1454                           
  1455                           ;COBS.c: 119: uint8_t * dst_buf_end_ptr = dst_buf_ptr + dst_buf_len;
  1456  000930  501F               	movf	cobs_decode@dst_buf_len,w,c
  1457  000932  241D               	addwf	cobs_decode@dst_buf_ptr,w,c
  1458  000934  0100               	movlb	0	; () banked
  1459  000936  6F62               	movwf	cobs_decode@dst_buf_end_ptr& (0+255),b
  1460  000938  5020               	movf	cobs_decode@dst_buf_len+1,w,c
  1461  00093A  201E               	addwfc	cobs_decode@dst_buf_ptr+1,w,c
  1462  00093C  0100               	movlb	0	; () banked
  1463  00093E  6F63               	movwf	(cobs_decode@dst_buf_end_ptr+1)& (0+255),b
  1464                           
  1465                           ;COBS.c: 120: uint8_t * dst_write_ptr = dst_buf_ptr;
  1466  000940  C01D  F068         	movff	cobs_decode@dst_buf_ptr,cobs_decode@dst_write_ptr
  1467  000944  C01E  F069         	movff	cobs_decode@dst_buf_ptr+1,cobs_decode@dst_write_ptr+1
  1468                           
  1469                           ;COBS.c: 121: size_t remaining_bytes;
  1470                           ;COBS.c: 122: uint8_t src_byte;
  1471                           ;COBS.c: 123: uint8_t i;
  1472                           ;COBS.c: 124: uint8_t len_code;
  1473                           ;COBS.c: 128: if ((dst_buf_ptr == (0)) || (src_ptr == (0)))
  1474  000948  501D               	movf	cobs_decode@dst_buf_ptr,w,c
  1475  00094A  101E               	iorwf	cobs_decode@dst_buf_ptr+1,w,c
  1476  00094C  B4D8               	btfsc	status,2,c
  1477  00094E  D004               	goto	l3976
  1478                           
  1479                           ; BSR set to: 0
  1480  000950  5021               	movf	cobs_decode@src_ptr,w,c
  1481  000952  1022               	iorwf	cobs_decode@src_ptr+1,w,c
  1482  000954  A4D8               	btfss	status,2,c
  1483  000956  D00A               	goto	l3982
  1484  000958                     l3976:
  1485                           
  1486                           ; BSR set to: 0
  1487                           ;COBS.c: 129: {
  1488                           ;COBS.c: 130: result.status = COBS_DECODE_NULL_POINTER;
  1489  000958  0E01               	movlw	1
  1490  00095A  0100               	movlb	0	; () banked
  1491  00095C  6F6D               	movwf	(cobs_decode@result+2)& (0+255),b
  1492                           
  1493                           ; BSR set to: 0
  1494                           ;COBS.c: 131: return result;
  1495  00095E  C06B  F01D         	movff	cobs_decode@result,?_cobs_decode
  1496  000962  C06C  F01E         	movff	cobs_decode@result+1,?_cobs_decode+1
  1497  000966  C06D  F01F         	movff	cobs_decode@result+2,?_cobs_decode+2
  1498                           
  1499                           ; BSR set to: 0
  1500  00096A  0012               	return	
  1501  00096C                     l3982:
  1502                           
  1503                           ; BSR set to: 0
  1504                           ;COBS.c: 132: }
  1505                           ;COBS.c: 134: if (src_len != 0)
  1506  00096C  5023               	movf	cobs_decode@src_len,w,c
  1507  00096E  1024               	iorwf	cobs_decode@src_len+1,w,c
  1508  000970  B4D8               	btfsc	status,2,c
  1509  000972  D096               	goto	l4046
  1510  000974                     l3984:
  1511                           
  1512                           ; BSR set to: 0
  1513                           ;COBS.c: 137: {
  1514                           ;COBS.c: 138: len_code = *src_ptr++;
  1515  000974  C021  FFD9         	movff	cobs_decode@src_ptr,fsr2l
  1516  000978  C022  FFDA         	movff	cobs_decode@src_ptr+1,fsr2h
  1517  00097C  50DF               	movf	indf2,w,c
  1518  00097E  0100               	movlb	0	; () banked
  1519  000980  6F6A               	movwf	cobs_decode@len_code& (0+255),b
  1520                           
  1521                           ; BSR set to: 0
  1522  000982  4A21               	infsnz	cobs_decode@src_ptr,f,c
  1523  000984  2A22               	incf	cobs_decode@src_ptr+1,f,c
  1524                           
  1525                           ; BSR set to: 0
  1526                           ;COBS.c: 139: if (len_code == 0)
  1527  000986  0100               	movlb	0	; () banked
  1528  000988  516A               	movf	cobs_decode@len_code& (0+255),w,b
  1529  00098A  0100               	movlb	0	; () banked
  1530  00098C  A4D8               	btfss	status,2,c
  1531  00098E  D003               	goto	l3992
  1532                           
  1533                           ; BSR set to: 0
  1534                           ;COBS.c: 140: {
  1535                           ;COBS.c: 141: result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
  1536  000990  0100               	movlb	0	; () banked
  1537  000992  856D               	bsf	(cobs_decode@result+2)& (0+255),2,b
  1538                           
  1539                           ;COBS.c: 142: break;
  1540  000994  D085               	goto	l4046
  1541  000996                     l3992:
  1542                           
  1543                           ; BSR set to: 0
  1544                           ;COBS.c: 143: }
  1545                           ;COBS.c: 144: len_code--;
  1546  000996  0100               	movlb	0	; () banked
  1547  000998  076A               	decf	cobs_decode@len_code& (0+255),f,b
  1548                           
  1549                           ; BSR set to: 0
  1550                           ;COBS.c: 147: remaining_bytes = src_end_ptr - src_ptr;
  1551  00099A  C021  F025         	movff	cobs_decode@src_ptr,??_cobs_decode
  1552  00099E  C022  F026         	movff	cobs_decode@src_ptr+1,??_cobs_decode+1
  1553  0009A2  1E25               	comf	??_cobs_decode,f,c
  1554  0009A4  1E26               	comf	??_cobs_decode+1,f,c
  1555  0009A6  4A25               	infsnz	??_cobs_decode,f,c
  1556  0009A8  2A26               	incf	??_cobs_decode+1,f,c
  1557  0009AA  0100               	movlb	0	; () banked
  1558  0009AC  5160               	movf	cobs_decode@src_end_ptr& (0+255),w,b
  1559  0009AE  2425               	addwf	??_cobs_decode,w,c
  1560  0009B0  0100               	movlb	0	; () banked
  1561  0009B2  6F66               	movwf	cobs_decode@remaining_bytes& (0+255),b
  1562  0009B4  0100               	movlb	0	; () banked
  1563  0009B6  5161               	movf	(cobs_decode@src_end_ptr+1)& (0+255),w,b
  1564  0009B8  2026               	addwfc	??_cobs_decode+1,w,c
  1565  0009BA  0100               	movlb	0	; () banked
  1566  0009BC  6F67               	movwf	(cobs_decode@remaining_bytes+1)& (0+255),b
  1567                           
  1568                           ; BSR set to: 0
  1569                           ;COBS.c: 148: if (len_code > remaining_bytes)
  1570  0009BE  0100               	movlb	0	; () banked
  1571  0009C0  516A               	movf	cobs_decode@len_code& (0+255),w,b
  1572  0009C2  0100               	movlb	0	; () banked
  1573  0009C4  5D66               	subwf	cobs_decode@remaining_bytes& (0+255),w,b
  1574  0009C6  0E00               	movlw	0
  1575  0009C8  5967               	subwfb	(cobs_decode@remaining_bytes+1)& (0+255),w,b
  1576  0009CA  B0D8               	btfsc	status,0,c
  1577  0009CC  D004               	goto	l4002
  1578                           
  1579                           ; BSR set to: 0
  1580                           ;COBS.c: 149: {
  1581                           ;COBS.c: 150: result.status |= COBS_DECODE_INPUT_TOO_SHORT;
  1582  0009CE  0100               	movlb	0	; () banked
  1583  0009D0  876D               	bsf	(cobs_decode@result+2)& (0+255),3,b
  1584                           
  1585                           ; BSR set to: 0
  1586                           ;COBS.c: 151: len_code = remaining_bytes;
  1587  0009D2  C066  F06A         	movff	cobs_decode@remaining_bytes,cobs_decode@len_code
  1588  0009D6                     l4002:
  1589                           
  1590                           ; BSR set to: 0
  1591                           ;COBS.c: 152: }
  1592                           ;COBS.c: 155: remaining_bytes = dst_buf_end_ptr - dst_write_ptr;
  1593  0009D6  C068  F025         	movff	cobs_decode@dst_write_ptr,??_cobs_decode
  1594  0009DA  C069  F026         	movff	cobs_decode@dst_write_ptr+1,??_cobs_decode+1
  1595  0009DE  1E25               	comf	??_cobs_decode,f,c
  1596  0009E0  1E26               	comf	??_cobs_decode+1,f,c
  1597  0009E2  4A25               	infsnz	??_cobs_decode,f,c
  1598  0009E4  2A26               	incf	??_cobs_decode+1,f,c
  1599  0009E6  0100               	movlb	0	; () banked
  1600  0009E8  5162               	movf	cobs_decode@dst_buf_end_ptr& (0+255),w,b
  1601  0009EA  2425               	addwf	??_cobs_decode,w,c
  1602  0009EC  0100               	movlb	0	; () banked
  1603  0009EE  6F66               	movwf	cobs_decode@remaining_bytes& (0+255),b
  1604  0009F0  0100               	movlb	0	; () banked
  1605  0009F2  5163               	movf	(cobs_decode@dst_buf_end_ptr+1)& (0+255),w,b
  1606  0009F4  2026               	addwfc	??_cobs_decode+1,w,c
  1607  0009F6  0100               	movlb	0	; () banked
  1608  0009F8  6F67               	movwf	(cobs_decode@remaining_bytes+1)& (0+255),b
  1609                           
  1610                           ; BSR set to: 0
  1611                           ;COBS.c: 156: if (len_code > remaining_bytes)
  1612  0009FA  0100               	movlb	0	; () banked
  1613  0009FC  516A               	movf	cobs_decode@len_code& (0+255),w,b
  1614  0009FE  0100               	movlb	0	; () banked
  1615  000A00  5D66               	subwf	cobs_decode@remaining_bytes& (0+255),w,b
  1616  000A02  0E00               	movlw	0
  1617  000A04  5967               	subwfb	(cobs_decode@remaining_bytes+1)& (0+255),w,b
  1618  000A06  B0D8               	btfsc	status,0,c
  1619  000A08  D004               	goto	l4010
  1620                           
  1621                           ; BSR set to: 0
  1622                           ;COBS.c: 157: {
  1623                           ;COBS.c: 158: result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
  1624  000A0A  0100               	movlb	0	; () banked
  1625  000A0C  836D               	bsf	(cobs_decode@result+2)& (0+255),1,b
  1626                           
  1627                           ; BSR set to: 0
  1628                           ;COBS.c: 159: len_code = remaining_bytes;
  1629  000A0E  C066  F06A         	movff	cobs_decode@remaining_bytes,cobs_decode@len_code
  1630  000A12                     l4010:
  1631                           
  1632                           ; BSR set to: 0
  1633                           ;COBS.c: 160: }
  1634                           ;COBS.c: 162: for (i = len_code; i != 0; i--)
  1635  000A12  C06A  F065         	movff	cobs_decode@len_code,cobs_decode@i
  1636  000A16                     l4012:
  1637                           
  1638                           ; BSR set to: 0
  1639  000A16  0100               	movlb	0	; () banked
  1640  000A18  5165               	movf	cobs_decode@i& (0+255),w,b
  1641  000A1A  0100               	movlb	0	; () banked
  1642  000A1C  B4D8               	btfsc	status,2,c
  1643  000A1E  D01C               	goto	l4032
  1644                           
  1645                           ; BSR set to: 0
  1646                           ;COBS.c: 163: {
  1647                           ;COBS.c: 164: src_byte = *src_ptr++;
  1648                           
  1649                           ; BSR set to: 0
  1650                           
  1651                           ; BSR set to: 0
  1652  000A20  C021  FFD9         	movff	cobs_decode@src_ptr,fsr2l
  1653  000A24  C022  FFDA         	movff	cobs_decode@src_ptr+1,fsr2h
  1654  000A28  50DF               	movf	indf2,w,c
  1655  000A2A  0100               	movlb	0	; () banked
  1656  000A2C  6F64               	movwf	cobs_decode@src_byte& (0+255),b
  1657                           
  1658                           ; BSR set to: 0
  1659  000A2E  4A21               	infsnz	cobs_decode@src_ptr,f,c
  1660  000A30  2A22               	incf	cobs_decode@src_ptr+1,f,c
  1661                           
  1662                           ; BSR set to: 0
  1663                           ;COBS.c: 165: if (src_byte == 0)
  1664  000A32  0100               	movlb	0	; () banked
  1665  000A34  5164               	movf	cobs_decode@src_byte& (0+255),w,b
  1666  000A36  0100               	movlb	0	; () banked
  1667  000A38  A4D8               	btfss	status,2,c
  1668  000A3A  D002               	goto	l4024
  1669                           
  1670                           ; BSR set to: 0
  1671                           ;COBS.c: 166: {
  1672                           ;COBS.c: 167: result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
  1673  000A3C  0100               	movlb	0	; () banked
  1674  000A3E  856D               	bsf	(cobs_decode@result+2)& (0+255),2,b
  1675  000A40                     l4024:
  1676                           
  1677                           ; BSR set to: 0
  1678                           ;COBS.c: 168: }
  1679                           ;COBS.c: 169: *dst_write_ptr++ = src_byte;
  1680  000A40  C068  FFD9         	movff	cobs_decode@dst_write_ptr,fsr2l
  1681  000A44  C069  FFDA         	movff	cobs_decode@dst_write_ptr+1,fsr2h
  1682  000A48  C064  FFDF         	movff	cobs_decode@src_byte,indf2
  1683                           
  1684                           ; BSR set to: 0
  1685  000A4C  0100               	movlb	0	; () banked
  1686  000A4E  4B68               	infsnz	cobs_decode@dst_write_ptr& (0+255),f,b
  1687  000A50  2B69               	incf	(cobs_decode@dst_write_ptr+1)& (0+255),f,b
  1688                           
  1689                           ; BSR set to: 0
  1690  000A52  0100               	movlb	0	; () banked
  1691  000A54  0765               	decf	cobs_decode@i& (0+255),f,b
  1692  000A56  D7DF               	goto	l4012
  1693  000A58                     l4032:
  1694                           
  1695                           ; BSR set to: 0
  1696                           ;COBS.c: 170: }
  1697                           ;COBS.c: 172: if (src_ptr >= src_end_ptr)
  1698  000A58  0100               	movlb	0	; () banked
  1699  000A5A  5160               	movf	cobs_decode@src_end_ptr& (0+255),w,b
  1700  000A5C  5C21               	subwf	cobs_decode@src_ptr,w,c
  1701  000A5E  0100               	movlb	0	; () banked
  1702  000A60  5161               	movf	(cobs_decode@src_end_ptr+1)& (0+255),w,b
  1703  000A62  5822               	subwfb	cobs_decode@src_ptr+1,w,c
  1704  000A64  B0D8               	btfsc	status,0,c
  1705  000A66  D01C               	goto	l4046
  1706                           
  1707                           ; BSR set to: 0
  1708                           ;COBS.c: 175: }
  1709                           ;COBS.c: 178: if (len_code != 0xFE)
  1710                           
  1711                           ; BSR set to: 0
  1712                           
  1713                           ; BSR set to: 0
  1714                           ;COBS.c: 173: {
  1715                           ;COBS.c: 174: break;
  1716  000A68  0EFE               	movlw	254
  1717  000A6A  0100               	movlb	0	; () banked
  1718  000A6C  196A               	xorwf	cobs_decode@len_code& (0+255),w,b
  1719  000A6E  B4D8               	btfsc	status,2,c
  1720  000A70  D781               	goto	l3984
  1721                           
  1722                           ; BSR set to: 0
  1723                           ;COBS.c: 179: {
  1724                           ;COBS.c: 180: if (dst_write_ptr >= dst_buf_end_ptr)
  1725  000A72  0100               	movlb	0	; () banked
  1726  000A74  5162               	movf	cobs_decode@dst_buf_end_ptr& (0+255),w,b
  1727  000A76  0100               	movlb	0	; () banked
  1728  000A78  5D68               	subwf	cobs_decode@dst_write_ptr& (0+255),w,b
  1729  000A7A  0100               	movlb	0	; () banked
  1730  000A7C  5163               	movf	(cobs_decode@dst_buf_end_ptr+1)& (0+255),w,b
  1731  000A7E  0100               	movlb	0	; () banked
  1732  000A80  5969               	subwfb	(cobs_decode@dst_write_ptr+1)& (0+255),w,b
  1733  000A82  A0D8               	btfss	status,0,c
  1734  000A84  D003               	goto	l4042
  1735                           
  1736                           ; BSR set to: 0
  1737                           ;COBS.c: 181: {
  1738                           ;COBS.c: 182: result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
  1739  000A86  0100               	movlb	0	; () banked
  1740  000A88  836D               	bsf	(cobs_decode@result+2)& (0+255),1,b
  1741                           
  1742                           ;COBS.c: 183: break;
  1743  000A8A  D00A               	goto	l4046
  1744  000A8C                     l4042:
  1745                           
  1746                           ; BSR set to: 0
  1747                           ;COBS.c: 184: }
  1748                           ;COBS.c: 185: *dst_write_ptr++ = 0;
  1749  000A8C  C068  FFD9         	movff	cobs_decode@dst_write_ptr,fsr2l
  1750  000A90  C069  FFDA         	movff	cobs_decode@dst_write_ptr+1,fsr2h
  1751  000A94  0E00               	movlw	0
  1752  000A96  6EDF               	movwf	indf2,c
  1753                           
  1754                           ; BSR set to: 0
  1755  000A98  0100               	movlb	0	; () banked
  1756  000A9A  4B68               	infsnz	cobs_decode@dst_write_ptr& (0+255),f,b
  1757  000A9C  2B69               	incf	(cobs_decode@dst_write_ptr+1)& (0+255),f,b
  1758                           
  1759                           ; BSR set to: 0
  1760                           ;COBS.c: 186: }
  1761                           ;COBS.c: 187: }
  1762  000A9E  D76A               	goto	l3984
  1763  000AA0                     l4046:
  1764                           
  1765                           ; BSR set to: 0
  1766                           ;COBS.c: 188: }
  1767                           ;COBS.c: 190: result.out_len = dst_write_ptr - dst_buf_ptr;
  1768  000AA0  C01D  F025         	movff	cobs_decode@dst_buf_ptr,??_cobs_decode
  1769  000AA4  C01E  F026         	movff	cobs_decode@dst_buf_ptr+1,??_cobs_decode+1
  1770  000AA8  1E25               	comf	??_cobs_decode,f,c
  1771  000AAA  1E26               	comf	??_cobs_decode+1,f,c
  1772  000AAC  4A25               	infsnz	??_cobs_decode,f,c
  1773  000AAE  2A26               	incf	??_cobs_decode+1,f,c
  1774  000AB0  0100               	movlb	0	; () banked
  1775  000AB2  5168               	movf	cobs_decode@dst_write_ptr& (0+255),w,b
  1776  000AB4  2425               	addwf	??_cobs_decode,w,c
  1777  000AB6  0100               	movlb	0	; () banked
  1778  000AB8  6F6B               	movwf	cobs_decode@result& (0+255),b
  1779  000ABA  0100               	movlb	0	; () banked
  1780  000ABC  5169               	movf	(cobs_decode@dst_write_ptr+1)& (0+255),w,b
  1781  000ABE  2026               	addwfc	??_cobs_decode+1,w,c
  1782  000AC0  0100               	movlb	0	; () banked
  1783  000AC2  6F6C               	movwf	(cobs_decode@result+1)& (0+255),b
  1784                           
  1785                           ; BSR set to: 0
  1786                           ;COBS.c: 192: return result;
  1787  000AC4  C06B  F01D         	movff	cobs_decode@result,?_cobs_decode
  1788  000AC8  C06C  F01E         	movff	cobs_decode@result+1,?_cobs_decode+1
  1789  000ACC  C06D  F01F         	movff	cobs_decode@result+2,?_cobs_decode+2
  1790  000AD0  0012               	return	
  1791  000AD2                     __end_of_cobs_decode:
  1792                           	opt stack 0
  1793                           tblptru	equ	0xFF8
  1794                           tblptrh	equ	0xFF7
  1795                           tblptrl	equ	0xFF6
  1796                           tablat	equ	0xFF5
  1797                           intcon	equ	0xFF2
  1798                           postinc0	equ	0xFEE
  1799                           wreg	equ	0xFE8
  1800                           postdec1	equ	0xFE5
  1801                           fsr1l	equ	0xFE1
  1802                           indf2	equ	0xFDF
  1803                           postinc2	equ	0xFDE
  1804                           fsr2h	equ	0xFDA
  1805                           fsr2l	equ	0xFD9
  1806                           status	equ	0xFD8
  1807                           
  1808 ;; *************** function _Receive_get *****************
  1809 ;; Defined at:
  1810 ;;		line 125 in file "UART.c"
  1811 ;; Parameters:    Size  Location     Type
  1812 ;;		None
  1813 ;; Auto vars:     Size  Location     Type
  1814 ;;		None
  1815 ;; Return value:  Size  Location     Type
  1816 ;;                  1    wreg      unsigned char 
  1817 ;; Registers used:
  1818 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1819 ;; Tracked objects:
  1820 ;;		On entry : 0/0
  1821 ;;		On exit  : 0/0
  1822 ;;		Unchanged: 0/0
  1823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1824 ;;      Params:         0       0       0       0       0       0       0
  1825 ;;      Locals:         0       0       0       0       0       0       0
  1826 ;;      Temps:          0       0       0       0       0       0       0
  1827 ;;      Totals:         0       0       0       0       0       0       0
  1828 ;;Total ram usage:        0 bytes
  1829 ;; Hardware stack levels used:    1
  1830 ;; Hardware stack levels required when called:    8
  1831 ;; This function calls:
  1832 ;;		_UART_buff_get
  1833 ;; This function is called by:
  1834 ;;		_receiveData
  1835 ;;		_getch
  1836 ;; This function uses a non-reentrant model
  1837 ;;
  1838                           
  1839                           	psect	text4
  1840  001F28                     __ptext4:
  1841                           	opt stack 0
  1842  001F28                     _Receive_get:
  1843                           	opt stack 20
  1844                           
  1845                           ;UART.c: 126: return UART_buff_get(&input_buffer);
  1846                           
  1847                           ; BSR set to: 0
  1848                           ;incstack = 0
  1849  001F28  0E3C               	movlw	low _input_buffer
  1850  001F2A  6E23               	movwf	UART_buff_get@_this,c
  1851  001F2C  0E01               	movlw	high _input_buffer
  1852  001F2E  6E24               	movwf	UART_buff_get@_this+1,c
  1853  001F30  ECD6  F00A         	call	_UART_buff_get	;wreg free
  1854  001F34  0012               	return	
  1855  001F36                     __end_of_Receive_get:
  1856                           	opt stack 0
  1857                           tblptru	equ	0xFF8
  1858                           tblptrh	equ	0xFF7
  1859                           tblptrl	equ	0xFF6
  1860                           tablat	equ	0xFF5
  1861                           intcon	equ	0xFF2
  1862                           postinc0	equ	0xFEE
  1863                           wreg	equ	0xFE8
  1864                           postdec1	equ	0xFE5
  1865                           fsr1l	equ	0xFE1
  1866                           indf2	equ	0xFDF
  1867                           postinc2	equ	0xFDE
  1868                           fsr2h	equ	0xFDA
  1869                           fsr2l	equ	0xFD9
  1870                           status	equ	0xFD8
  1871                           
  1872 ;; *************** function _Receive_available *****************
  1873 ;; Defined at:
  1874 ;;		line 121 in file "UART.c"
  1875 ;; Parameters:    Size  Location     Type
  1876 ;;		None
  1877 ;; Auto vars:     Size  Location     Type
  1878 ;;		None
  1879 ;; Return value:  Size  Location     Type
  1880 ;;                  2   30[COMRAM] int 
  1881 ;; Registers used:
  1882 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1883 ;; Tracked objects:
  1884 ;;		On entry : 0/0
  1885 ;;		On exit  : 0/0
  1886 ;;		Unchanged: 0/0
  1887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1888 ;;      Params:         2       0       0       0       0       0       0
  1889 ;;      Locals:         0       0       0       0       0       0       0
  1890 ;;      Temps:          0       0       0       0       0       0       0
  1891 ;;      Totals:         2       0       0       0       0       0       0
  1892 ;;Total ram usage:        2 bytes
  1893 ;; Hardware stack levels used:    1
  1894 ;; Hardware stack levels required when called:    7
  1895 ;; This function calls:
  1896 ;;		_UART_buff_size
  1897 ;; This function is called by:
  1898 ;;		_receiveData
  1899 ;; This function uses a non-reentrant model
  1900 ;;
  1901                           
  1902                           	psect	text5
  1903  001E82                     __ptext5:
  1904                           	opt stack 0
  1905  001E82                     _Receive_available:
  1906                           	opt stack 21
  1907                           
  1908                           ;UART.c: 122: return UART_buff_size(&input_buffer);
  1909                           
  1910                           ;incstack = 0
  1911  001E82  0E3C               	movlw	low _input_buffer
  1912  001E84  6E1D               	movwf	UART_buff_size@_this,c
  1913  001E86  0E01               	movlw	high _input_buffer
  1914  001E88  6E1E               	movwf	UART_buff_size@_this+1,c
  1915  001E8A  EC4C  F00F         	call	_UART_buff_size	;wreg free
  1916  001E8E  C01D  F01F         	movff	?_UART_buff_size,?_Receive_available
  1917  001E92  C01E  F020         	movff	?_UART_buff_size+1,?_Receive_available+1
  1918  001E96  0012               	return	
  1919  001E98                     __end_of_Receive_available:
  1920                           	opt stack 0
  1921                           tblptru	equ	0xFF8
  1922                           tblptrh	equ	0xFF7
  1923                           tblptrl	equ	0xFF6
  1924                           tablat	equ	0xFF5
  1925                           intcon	equ	0xFF2
  1926                           postinc0	equ	0xFEE
  1927                           wreg	equ	0xFE8
  1928                           postdec1	equ	0xFE5
  1929                           fsr1l	equ	0xFE1
  1930                           indf2	equ	0xFDF
  1931                           postinc2	equ	0xFDE
  1932                           fsr2h	equ	0xFDA
  1933                           fsr2l	equ	0xFD9
  1934                           status	equ	0xFD8
  1935                           
  1936 ;; *************** function _UART_buff_size *****************
  1937 ;; Defined at:
  1938 ;;		line 101 in file "UART.c"
  1939 ;; Parameters:    Size  Location     Type
  1940 ;;  _this           2   28[COMRAM] PTR struct UART_ring_buf
  1941 ;;		 -> output_buffer(106), input_buffer(106), 
  1942 ;; Auto vars:     Size  Location     Type
  1943 ;;		None
  1944 ;; Return value:  Size  Location     Type
  1945 ;;                  2   28[COMRAM] int 
  1946 ;; Registers used:
  1947 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1948 ;; Tracked objects:
  1949 ;;		On entry : 0/0
  1950 ;;		On exit  : 0/0
  1951 ;;		Unchanged: 0/0
  1952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1953 ;;      Params:         2       0       0       0       0       0       0
  1954 ;;      Locals:         0       0       0       0       0       0       0
  1955 ;;      Temps:          0       0       0       0       0       0       0
  1956 ;;      Totals:         2       0       0       0       0       0       0
  1957 ;;Total ram usage:        2 bytes
  1958 ;; Hardware stack levels used:    1
  1959 ;; Hardware stack levels required when called:    6
  1960 ;; This function calls:
  1961 ;;		Nothing
  1962 ;; This function is called by:
  1963 ;;		_Receive_available
  1964 ;; This function uses a non-reentrant model
  1965 ;;
  1966                           
  1967                           	psect	text6
  1968  001E98                     __ptext6:
  1969                           	opt stack 0
  1970  001E98                     _UART_buff_size:
  1971                           	opt stack 21
  1972                           
  1973                           ;UART.c: 102: return (_this->count);
  1974                           
  1975                           ;incstack = 0
  1976  001E98  EE20 F068          	lfsr	2,104
  1977  001E9C  501D               	movf	UART_buff_size@_this,w,c
  1978  001E9E  26D9               	addwf	fsr2l,f,c
  1979  001EA0  501E               	movf	UART_buff_size@_this+1,w,c
  1980  001EA2  22DA               	addwfc	fsr2h,f,c
  1981  001EA4  CFDE F01D          	movff	postinc2,?_UART_buff_size
  1982  001EA8  CFDD F01E          	movff	postdec2,?_UART_buff_size+1
  1983  001EAC  0012               	return	
  1984  001EAE                     __end_of_UART_buff_size:
  1985                           	opt stack 0
  1986                           tblptru	equ	0xFF8
  1987                           tblptrh	equ	0xFF7
  1988                           tblptrl	equ	0xFF6
  1989                           tablat	equ	0xFF5
  1990                           intcon	equ	0xFF2
  1991                           postinc0	equ	0xFEE
  1992                           wreg	equ	0xFE8
  1993                           postdec1	equ	0xFE5
  1994                           fsr1l	equ	0xFE1
  1995                           indf2	equ	0xFDF
  1996                           postinc2	equ	0xFDE
  1997                           postdec2	equ	0xFDD
  1998                           fsr2h	equ	0xFDA
  1999                           fsr2l	equ	0xFD9
  2000                           status	equ	0xFD8
  2001                           
  2002 ;; *************** function _ComController *****************
  2003 ;; Defined at:
  2004 ;;		line 128 in file "CarCom.c"
  2005 ;; Parameters:    Size  Location     Type
  2006 ;;  DTI             2   90[BANK0 ] PTR unsigned char 
  2007 ;;		 -> ProcessArray(30), 
  2008 ;;  lenth           2   92[BANK0 ] unsigned int 
  2009 ;; Auto vars:     Size  Location     Type
  2010 ;;  DataToSend      4   94[BANK0 ] unsigned char [4]
  2011 ;;  DataRecived     4    0        unsigned char [4]
  2012 ;;  DataToSend      4   98[BANK0 ] unsigned char [4]
  2013 ;; Return value:  Size  Location     Type
  2014 ;;                  1    wreg      void 
  2015 ;; Registers used:
  2016 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2017 ;; Tracked objects:
  2018 ;;		On entry : 0/0
  2019 ;;		On exit  : 0/0
  2020 ;;		Unchanged: 0/0
  2021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2022 ;;      Params:         0       4       0       0       0       0       0
  2023 ;;      Locals:         0       8       0       0       0       0       0
  2024 ;;      Temps:          1       0       0       0       0       0       0
  2025 ;;      Totals:         1      12       0       0       0       0       0
  2026 ;;Total ram usage:       13 bytes
  2027 ;; Hardware stack levels used:    1
  2028 ;; Hardware stack levels required when called:   10
  2029 ;; This function calls:
  2030 ;;		_Delay
  2031 ;;		_GetDataDict
  2032 ;;		_sendData
  2033 ;; This function is called by:
  2034 ;;		_receiveData
  2035 ;; This function uses a non-reentrant model
  2036 ;;
  2037                           
  2038                           	psect	text7
  2039  000C6A                     __ptext7:
  2040                           	opt stack 0
  2041  000C6A                     _ComController:
  2042                           	opt stack 18
  2043                           
  2044                           ;CarCom.c: 129: if(DTI[1] == 1){
  2045                           
  2046                           ;incstack = 0
  2047  000C6A  0100               	movlb	0	; () banked
  2048  000C6C  EE20 F001          	lfsr	2,1
  2049  000C70  51BA               	movf	ComController@DTI& (0+255),w,b
  2050  000C72  26D9               	addwf	fsr2l,f,c
  2051  000C74  51BB               	movf	(ComController@DTI+1)& (0+255),w,b
  2052  000C76  22DA               	addwfc	fsr2h,f,c
  2053  000C78  04DE               	decf	postinc2,w,c
  2054  000C7A  A4D8               	btfss	status,2,c
  2055  000C7C  D055               	goto	l4064
  2056                           
  2057                           ; BSR set to: 0
  2058                           ;CarCom.c: 130: unsigned char DataToSend[4];
  2059                           ;CarCom.c: 131: GetDataDict(DTI[2], DTI[3], DataToSend, DTI[4]);
  2060  000C7E  0100               	movlb	0	; () banked
  2061  000C80  EE20 F003          	lfsr	2,3
  2062  000C84  51BA               	movf	ComController@DTI& (0+255),w,b
  2063  000C86  26D9               	addwf	fsr2l,f,c
  2064  000C88  51BB               	movf	(ComController@DTI+1)& (0+255),w,b
  2065  000C8A  22DA               	addwfc	fsr2h,f,c
  2066  000C8C  50DF               	movf	indf2,w,c
  2067  000C8E  6E1D               	movwf	GetDataDict@DataTableIndex,c
  2068  000C90  0EC2               	movlw	low ComController@DataToSend
  2069  000C92  6E1E               	movwf	GetDataDict@DataArray,c
  2070  000C94  0E00               	movlw	high ComController@DataToSend
  2071  000C96  6E1F               	movwf	GetDataDict@DataArray+1,c
  2072  000C98  0100               	movlb	0	; () banked
  2073  000C9A  EE20 F004          	lfsr	2,4
  2074  000C9E  51BA               	movf	ComController@DTI& (0+255),w,b
  2075  000CA0  26D9               	addwf	fsr2l,f,c
  2076  000CA2  51BB               	movf	(ComController@DTI+1)& (0+255),w,b
  2077  000CA4  22DA               	addwfc	fsr2h,f,c
  2078  000CA6  50DF               	movf	indf2,w,c
  2079  000CA8  6E20               	movwf	GetDataDict@numbofbytes,c
  2080  000CAA  0100               	movlb	0	; () banked
  2081  000CAC  EE20 F002          	lfsr	2,2
  2082  000CB0  51BA               	movf	ComController@DTI& (0+255),w,b
  2083  000CB2  26D9               	addwf	fsr2l,f,c
  2084  000CB4  51BB               	movf	(ComController@DTI+1)& (0+255),w,b
  2085  000CB6  22DA               	addwfc	fsr2h,f,c
  2086  000CB8  50DF               	movf	indf2,w,c
  2087  000CBA  EC8A  F00A         	call	_GetDataDict
  2088                           
  2089                           ;CarCom.c: 132: do { LATC5 = 1; } while(0);
  2090  000CBE  8A8B               	bsf	3979,5,c	;volatile
  2091                           
  2092                           ;CarCom.c: 133: Delay(5);
  2093  000CC0  0E05               	movlw	5
  2094  000CC2  6E1D               	movwf	Delay@wait,c
  2095  000CC4  0E00               	movlw	0
  2096  000CC6  6E1E               	movwf	Delay@wait+1,c
  2097  000CC8  0E00               	movlw	0
  2098  000CCA  6E1F               	movwf	Delay@wait+2,c
  2099  000CCC  0E00               	movlw	0
  2100  000CCE  6E20               	movwf	Delay@wait+3,c
  2101  000CD0  EC97  F00D         	call	_Delay	;wreg free
  2102                           
  2103                           ;CarCom.c: 134: sendData(1, 2, 1, 1, DataToSend, DTI[4]);
  2104  000CD4  0E02               	movlw	2
  2105  000CD6  0100               	movlb	0	; () banked
  2106  000CD8  6F6D               	movwf	sendData@ComandByte& (0+255),b
  2107  000CDA  0E01               	movlw	1
  2108  000CDC  0100               	movlb	0	; () banked
  2109  000CDE  6F6E               	movwf	sendData@DataTable& (0+255),b
  2110  000CE0  0E01               	movlw	1
  2111  000CE2  0100               	movlb	0	; () banked
  2112  000CE4  6F6F               	movwf	sendData@DataTableIndex& (0+255),b
  2113  000CE6  0EC2               	movlw	low ComController@DataToSend
  2114  000CE8  0100               	movlb	0	; () banked
  2115  000CEA  6F70               	movwf	sendData@DTS& (0+255),b
  2116  000CEC  0E00               	movlw	high ComController@DataToSend
  2117  000CEE  0100               	movlb	0	; () banked
  2118  000CF0  6F71               	movwf	(sendData@DTS+1)& (0+255),b
  2119  000CF2  0100               	movlb	0	; () banked
  2120  000CF4  EE20 F004          	lfsr	2,4
  2121  000CF8  51BA               	movf	ComController@DTI& (0+255),w,b
  2122  000CFA  26D9               	addwf	fsr2l,f,c
  2123  000CFC  51BB               	movf	(ComController@DTI+1)& (0+255),w,b
  2124  000CFE  22DA               	addwfc	fsr2h,f,c
  2125  000D00  50DF               	movf	indf2,w,c
  2126  000D02  6E2D               	movwf	??_ComController& (0+255),c
  2127  000D04  502D               	movf	??_ComController,w,c
  2128  000D06  0100               	movlb	0	; () banked
  2129  000D08  6F72               	movwf	sendData@lenth& (0+255),b
  2130  000D0A  6B73               	clrf	(sendData@lenth+1)& (0+255),b
  2131  000D0C  0E01               	movlw	1
  2132  000D0E  ECA0  F003         	call	_sendData
  2133                           
  2134                           ;CarCom.c: 135: Delay(3);
  2135  000D12  0E03               	movlw	3
  2136  000D14  6E1D               	movwf	Delay@wait,c
  2137  000D16  0E00               	movlw	0
  2138  000D18  6E1E               	movwf	Delay@wait+1,c
  2139  000D1A  0E00               	movlw	0
  2140  000D1C  6E1F               	movwf	Delay@wait+2,c
  2141  000D1E  0E00               	movlw	0
  2142  000D20  6E20               	movwf	Delay@wait+3,c
  2143  000D22  EC97  F00D         	call	_Delay	;wreg free
  2144                           
  2145                           ;CarCom.c: 136: do { LATC5 = 0; } while(0);
  2146  000D26  9A8B               	bcf	3979,5,c	;volatile
  2147  000D28                     l4064:
  2148                           
  2149                           ;CarCom.c: 137: }
  2150                           ;CarCom.c: 138: if(DTI[1] == 2){
  2151  000D28  0100               	movlb	0	; () banked
  2152  000D2A  EE20 F001          	lfsr	2,1
  2153  000D2E  51BA               	movf	ComController@DTI& (0+255),w,b
  2154  000D30  26D9               	addwf	fsr2l,f,c
  2155  000D32  51BB               	movf	(ComController@DTI+1)& (0+255),w,b
  2156  000D34  22DA               	addwfc	fsr2h,f,c
  2157  000D36  0E02               	movlw	2
  2158  000D38  18DE               	xorwf	postinc2,w,c
  2159  000D3A  A4D8               	btfss	status,2,c
  2160  000D3C  0012               	return	
  2161                           
  2162                           ; BSR set to: 0
  2163                           
  2164                           ;CarCom.c: 139: unsigned char DataToSend[4];
  2165                           ;CarCom.c: 140: unsigned char DataRecived[4];
  2166                           ;CarCom.c: 145: do { LATC5 = 1; } while(0);
  2167  000D3E  8A8B               	bsf	3979,5,c	;volatile
  2168                           
  2169                           ; BSR set to: 0
  2170                           ;CarCom.c: 146: Delay(2);
  2171                           
  2172                           ; BSR set to: 0
  2173  000D40  0E02               	movlw	2
  2174  000D42  6E1D               	movwf	Delay@wait,c
  2175  000D44  0E00               	movlw	0
  2176  000D46  6E1E               	movwf	Delay@wait+1,c
  2177  000D48  0E00               	movlw	0
  2178  000D4A  6E1F               	movwf	Delay@wait+2,c
  2179  000D4C  0E00               	movlw	0
  2180  000D4E  6E20               	movwf	Delay@wait+3,c
  2181  000D50  EC97  F00D         	call	_Delay	;wreg free
  2182                           
  2183                           ;CarCom.c: 147: sendData(1, 2, 4, 2, DataToSend, 2);
  2184  000D54  0E02               	movlw	2
  2185  000D56  0100               	movlb	0	; () banked
  2186  000D58  6F6D               	movwf	sendData@ComandByte& (0+255),b
  2187  000D5A  0E04               	movlw	4
  2188  000D5C  0100               	movlb	0	; () banked
  2189  000D5E  6F6E               	movwf	sendData@DataTable& (0+255),b
  2190  000D60  0E02               	movlw	2
  2191  000D62  0100               	movlb	0	; () banked
  2192  000D64  6F6F               	movwf	sendData@DataTableIndex& (0+255),b
  2193  000D66  0EBE               	movlw	low ComController@DataToSend_1637
  2194  000D68  0100               	movlb	0	; () banked
  2195  000D6A  6F70               	movwf	sendData@DTS& (0+255),b
  2196  000D6C  0E00               	movlw	high ComController@DataToSend_1637
  2197  000D6E  0100               	movlb	0	; () banked
  2198  000D70  6F71               	movwf	(sendData@DTS+1)& (0+255),b
  2199  000D72  0E00               	movlw	0
  2200  000D74  0100               	movlb	0	; () banked
  2201  000D76  6F73               	movwf	(sendData@lenth+1)& (0+255),b
  2202  000D78  0E02               	movlw	2
  2203  000D7A  6F72               	movwf	sendData@lenth& (0+255),b
  2204  000D7C  0E01               	movlw	1
  2205  000D7E  ECA0  F003         	call	_sendData
  2206                           
  2207                           ;CarCom.c: 148: Delay(5);
  2208  000D82  0E05               	movlw	5
  2209  000D84  6E1D               	movwf	Delay@wait,c
  2210  000D86  0E00               	movlw	0
  2211  000D88  6E1E               	movwf	Delay@wait+1,c
  2212  000D8A  0E00               	movlw	0
  2213  000D8C  6E1F               	movwf	Delay@wait+2,c
  2214  000D8E  0E00               	movlw	0
  2215  000D90  6E20               	movwf	Delay@wait+3,c
  2216  000D92  EC97  F00D         	call	_Delay	;wreg free
  2217                           
  2218                           ;CarCom.c: 149: do { LATC5 = 0; } while(0);
  2219  000D96  9A8B               	bcf	3979,5,c	;volatile
  2220  000D98  0012               	return	
  2221  000D9A                     __end_of_ComController:
  2222                           	opt stack 0
  2223                           tblptru	equ	0xFF8
  2224                           tblptrh	equ	0xFF7
  2225                           tblptrl	equ	0xFF6
  2226                           tablat	equ	0xFF5
  2227                           intcon	equ	0xFF2
  2228                           postinc0	equ	0xFEE
  2229                           wreg	equ	0xFE8
  2230                           postdec1	equ	0xFE5
  2231                           fsr1l	equ	0xFE1
  2232                           indf2	equ	0xFDF
  2233                           postinc2	equ	0xFDE
  2234                           postdec2	equ	0xFDD
  2235                           fsr2h	equ	0xFDA
  2236                           fsr2l	equ	0xFD9
  2237                           status	equ	0xFD8
  2238                           
  2239 ;; *************** function _sendData *****************
  2240 ;; Defined at:
  2241 ;;		line 39 in file "CarCom.c"
  2242 ;; Parameters:    Size  Location     Type
  2243 ;;  whereToSend     1    wreg     unsigned char 
  2244 ;;  ComandByte      1   13[BANK0 ] unsigned char 
  2245 ;;  DataTable       1   14[BANK0 ] unsigned char 
  2246 ;;  DataTableInd    1   15[BANK0 ] unsigned char 
  2247 ;;  DTS             2   16[BANK0 ] PTR unsigned char 
  2248 ;;		 -> ComController@DataToSend_1637(4), ComController@DataToSend(4), 
  2249 ;;  lenth           2   18[BANK0 ] unsigned int 
  2250 ;; Auto vars:     Size  Location     Type
  2251 ;;  whereToSend     1   80[BANK0 ] unsigned char 
  2252 ;;  SendArray      30   50[BANK0 ] unsigned char [30]
  2253 ;;  COBSArray      30   20[BANK0 ] unsigned char [30]
  2254 ;;  result          3   82[BANK0 ] struct .
  2255 ;;  count           2   87[BANK0 ] int 
  2256 ;;  j               2   85[BANK0 ] int 
  2257 ;;  i               1   89[BANK0 ] unsigned char 
  2258 ;;  CS              1   81[BANK0 ] unsigned char 
  2259 ;; Return value:  Size  Location     Type
  2260 ;;                  1    wreg      void 
  2261 ;; Registers used:
  2262 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2263 ;; Tracked objects:
  2264 ;;		On entry : 0/0
  2265 ;;		On exit  : 0/0
  2266 ;;		Unchanged: 0/0
  2267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2268 ;;      Params:         0       7       0       0       0       0       0
  2269 ;;      Locals:         0      70       0       0       0       0       0
  2270 ;;      Temps:          4       0       0       0       0       0       0
  2271 ;;      Totals:         4      77       0       0       0       0       0
  2272 ;;Total ram usage:       81 bytes
  2273 ;; Hardware stack levels used:    1
  2274 ;; Hardware stack levels required when called:    9
  2275 ;; This function calls:
  2276 ;;		_CRC8
  2277 ;;		_Send_put
  2278 ;;		_cobs_encode
  2279 ;; This function is called by:
  2280 ;;		_ComController
  2281 ;; This function uses a non-reentrant model
  2282 ;;
  2283                           
  2284                           	psect	text8
  2285  000740                     __ptext8:
  2286                           	opt stack 0
  2287  000740                     _sendData:
  2288                           	opt stack 18
  2289                           
  2290                           ;incstack = 0
  2291                           ;sendData@whereToSend stored from wreg
  2292  000740  0100               	movlb	0	; () banked
  2293  000742  6FB0               	movwf	sendData@whereToSend& (0+255),b
  2294                           
  2295                           ;CarCom.c: 40: unsigned char SendArray[30];
  2296                           ;CarCom.c: 41: unsigned char COBSArray[30];
  2297                           ;CarCom.c: 43: int j = 0;
  2298  000744  0E00               	movlw	0
  2299  000746  0100               	movlb	0	; () banked
  2300  000748  6FB6               	movwf	(sendData@j+1)& (0+255),b
  2301  00074A  0E00               	movlw	0
  2302  00074C  6FB5               	movwf	sendData@j& (0+255),b
  2303  00074E                     l3840:
  2304                           
  2305                           ; BSR set to: 0
  2306  00074E  0100               	movlb	0	; () banked
  2307  000750  51B6               	movf	(sendData@j+1)& (0+255),w,b
  2308  000752  E113               	bnz	l3850
  2309  000754  0E1E               	movlw	30
  2310  000756  0100               	movlb	0	; () banked
  2311  000758  5DB5               	subwf	sendData@j& (0+255),w,b
  2312  00075A  B0D8               	btfsc	status,0,c
  2313  00075C  D00E               	goto	l3850
  2314                           
  2315                           ; BSR set to: 0
  2316                           ;CarCom.c: 45: SendArray[j] = 0;
  2317                           
  2318                           ; BSR set to: 0
  2319                           
  2320                           ; BSR set to: 0
  2321  00075E  0E92               	movlw	low sendData@SendArray
  2322  000760  0100               	movlb	0	; () banked
  2323  000762  25B5               	addwf	sendData@j& (0+255),w,b
  2324  000764  6ED9               	movwf	fsr2l,c
  2325  000766  0E00               	movlw	high sendData@SendArray
  2326  000768  0100               	movlb	0	; () banked
  2327  00076A  21B6               	addwfc	(sendData@j+1)& (0+255),w,b
  2328  00076C  6EDA               	movwf	fsr2h,c
  2329  00076E  0E00               	movlw	0
  2330  000770  6EDF               	movwf	indf2,c
  2331                           
  2332                           ; BSR set to: 0
  2333  000772  0100               	movlb	0	; () banked
  2334  000774  4BB5               	infsnz	sendData@j& (0+255),f,b
  2335  000776  2BB6               	incf	(sendData@j+1)& (0+255),f,b
  2336  000778  D7EA               	goto	l3840
  2337  00077A                     l3850:
  2338                           
  2339                           ; BSR set to: 0
  2340                           ;CarCom.c: 46: }
  2341                           ;CarCom.c: 49: cobs_encode_result result;
  2342                           ;CarCom.c: 51: SendArray[0] = 5+lenth;
  2343  00077A  0100               	movlb	0	; () banked
  2344  00077C  5172               	movf	sendData@lenth& (0+255),w,b
  2345  00077E  0F05               	addlw	5
  2346  000780  0100               	movlb	0	; () banked
  2347  000782  6F92               	movwf	sendData@SendArray& (0+255),b
  2348                           
  2349                           ; BSR set to: 0
  2350                           ;CarCom.c: 52: SendArray[1] = ComandByte;
  2351  000784  C06D  F093         	movff	sendData@ComandByte,sendData@SendArray+1
  2352                           
  2353                           ; BSR set to: 0
  2354                           ;CarCom.c: 53: SendArray[2] = DataTable;
  2355  000788  C06E  F094         	movff	sendData@DataTable,sendData@SendArray+2
  2356                           
  2357                           ; BSR set to: 0
  2358                           ;CarCom.c: 54: SendArray[3] = DataTableIndex;
  2359  00078C  C06F  F095         	movff	sendData@DataTableIndex,sendData@SendArray+3
  2360                           
  2361                           ; BSR set to: 0
  2362                           ;CarCom.c: 55: SendArray[4] = lenth;
  2363  000790  C072  F096         	movff	sendData@lenth,sendData@SendArray+4
  2364                           
  2365                           ; BSR set to: 0
  2366                           ;CarCom.c: 57: unsigned char i = 0;
  2367  000794  0E00               	movlw	0
  2368  000796  0100               	movlb	0	; () banked
  2369  000798  6FB9               	movwf	sendData@i& (0+255),b
  2370                           
  2371                           ; BSR set to: 0
  2372                           ;CarCom.c: 58: int count = 5;
  2373  00079A  0E00               	movlw	0
  2374  00079C  0100               	movlb	0	; () banked
  2375  00079E  6FB8               	movwf	(sendData@count+1)& (0+255),b
  2376  0007A0  0E05               	movlw	5
  2377  0007A2  6FB7               	movwf	sendData@count& (0+255),b
  2378  0007A4  D020               	goto	l3870
  2379  0007A6                     l3864:
  2380                           
  2381                           ; BSR set to: 0
  2382                           ;CarCom.c: 61: SendArray[i+5] = DTS[i];
  2383  0007A6  0100               	movlb	0	; () banked
  2384  0007A8  51B9               	movf	sendData@i& (0+255),w,b
  2385  0007AA  0D01               	mullw	1
  2386  0007AC  50F3               	movf	prodl,w,c
  2387  0007AE  0100               	movlb	0	; () banked
  2388  0007B0  2570               	addwf	sendData@DTS& (0+255),w,b
  2389  0007B2  6ED9               	movwf	fsr2l,c
  2390  0007B4  50F4               	movf	prodh,w,c
  2391  0007B6  0100               	movlb	0	; () banked
  2392  0007B8  2171               	addwfc	(sendData@DTS+1)& (0+255),w,b
  2393  0007BA  6EDA               	movwf	fsr2h,c
  2394  0007BC  0100               	movlb	0	; () banked
  2395  0007BE  51B9               	movf	sendData@i& (0+255),w,b
  2396  0007C0  6E29               	movwf	??_sendData& (0+255),c
  2397  0007C2  6A2A               	clrf	(??_sendData+1)& (0+255),c
  2398  0007C4  0E05               	movlw	5
  2399  0007C6  2629               	addwf	??_sendData,f,c
  2400  0007C8  0E00               	movlw	0
  2401  0007CA  222A               	addwfc	??_sendData+1,f,c
  2402  0007CC  0E92               	movlw	low sendData@SendArray
  2403  0007CE  2429               	addwf	??_sendData,w,c
  2404  0007D0  6EE1               	movwf	fsr1l,c
  2405  0007D2  0E00               	movlw	high sendData@SendArray
  2406  0007D4  202A               	addwfc	??_sendData+1,w,c
  2407  0007D6  6EE2               	movwf	fsr1h,c
  2408  0007D8  CFDF FFE7          	movff	indf2,indf1
  2409                           
  2410                           ; BSR set to: 0
  2411                           ;CarCom.c: 62: count++;
  2412  0007DC  0100               	movlb	0	; () banked
  2413  0007DE  4BB7               	infsnz	sendData@count& (0+255),f,b
  2414  0007E0  2BB8               	incf	(sendData@count+1)& (0+255),f,b
  2415                           
  2416                           ; BSR set to: 0
  2417  0007E2  0100               	movlb	0	; () banked
  2418  0007E4  2BB9               	incf	sendData@i& (0+255),f,b
  2419  0007E6                     l3870:
  2420                           
  2421                           ; BSR set to: 0
  2422  0007E6  0100               	movlb	0	; () banked
  2423  0007E8  51B9               	movf	sendData@i& (0+255),w,b
  2424  0007EA  6E29               	movwf	??_sendData& (0+255),c
  2425  0007EC  6A2A               	clrf	(??_sendData+1)& (0+255),c
  2426  0007EE  0100               	movlb	0	; () banked
  2427  0007F0  5172               	movf	sendData@lenth& (0+255),w,b
  2428  0007F2  5C29               	subwf	??_sendData,w,c
  2429  0007F4  0100               	movlb	0	; () banked
  2430  0007F6  5173               	movf	(sendData@lenth+1)& (0+255),w,b
  2431  0007F8  582A               	subwfb	??_sendData+1,w,c
  2432  0007FA  A0D8               	btfss	status,0,c
  2433  0007FC  D7D4               	goto	l3864
  2434                           
  2435                           ; BSR set to: 0
  2436                           ;CarCom.c: 63: }
  2437                           ;CarCom.c: 65: unsigned char CS = CRC8(SendArray, count);
  2438                           
  2439                           ; BSR set to: 0
  2440  0007FE  0E92               	movlw	low sendData@SendArray
  2441  000800  6E1D               	movwf	CRC8@data,c
  2442  000802  0E00               	movlw	high sendData@SendArray
  2443  000804  6E1E               	movwf	CRC8@data+1,c
  2444  000806  C0B7  F01F         	movff	sendData@count,CRC8@len
  2445  00080A  EC72  F00D         	call	_CRC8	;wreg free
  2446  00080E  0100               	movlb	0	; () banked
  2447  000810  6FB1               	movwf	sendData@CS& (0+255),b
  2448                           
  2449                           ; BSR set to: 0
  2450                           ;CarCom.c: 66: SendArray[count] = CS;
  2451  000812  0E92               	movlw	low sendData@SendArray
  2452  000814  0100               	movlb	0	; () banked
  2453  000816  25B7               	addwf	sendData@count& (0+255),w,b
  2454  000818  6ED9               	movwf	fsr2l,c
  2455  00081A  0E00               	movlw	high sendData@SendArray
  2456  00081C  0100               	movlb	0	; () banked
  2457  00081E  21B8               	addwfc	(sendData@count+1)& (0+255),w,b
  2458  000820  6EDA               	movwf	fsr2h,c
  2459  000822  C0B1  FFDF         	movff	sendData@CS,indf2
  2460                           
  2461                           ; BSR set to: 0
  2462                           ;CarCom.c: 67: count++;
  2463  000826  0100               	movlb	0	; () banked
  2464  000828  4BB7               	infsnz	sendData@count& (0+255),f,b
  2465  00082A  2BB8               	incf	(sendData@count+1)& (0+255),f,b
  2466                           
  2467                           ; BSR set to: 0
  2468                           ;CarCom.c: 68: result = cobs_encode(COBSArray, sizeof(COBSArray), SendArray, count);
  2469  00082C  0E74               	movlw	low sendData@COBSArray
  2470  00082E  6E1D               	movwf	cobs_encode@dst_buf_ptr,c
  2471  000830  0E00               	movlw	high sendData@COBSArray
  2472  000832  6E1E               	movwf	cobs_encode@dst_buf_ptr+1,c
  2473  000834  0E00               	movlw	0
  2474  000836  6E20               	movwf	cobs_encode@dst_buf_len+1,c
  2475  000838  0E1E               	movlw	30
  2476  00083A  6E1F               	movwf	cobs_encode@dst_buf_len,c
  2477  00083C  0E92               	movlw	low sendData@SendArray
  2478  00083E  6E21               	movwf	cobs_encode@src_ptr,c
  2479  000840  0E00               	movlw	high sendData@SendArray
  2480  000842  6E22               	movwf	cobs_encode@src_ptr+1,c
  2481  000844  C0B7  F023         	movff	sendData@count,cobs_encode@src_len
  2482  000848  C0B8  F024         	movff	sendData@count+1,cobs_encode@src_len+1
  2483  00084C  EC69  F005         	call	_cobs_encode	;wreg free
  2484  000850  C01D  F0B2         	movff	?_cobs_encode,sendData@result
  2485  000854  C01E  F0B3         	movff	?_cobs_encode+1,sendData@result+1
  2486  000858  C01F  F0B4         	movff	?_cobs_encode+2,sendData@result+2
  2487                           
  2488                           ;CarCom.c: 69: SendArray[0] = whereToSend;
  2489  00085C  C0B0  F092         	movff	sendData@whereToSend,sendData@SendArray
  2490                           
  2491                           ;CarCom.c: 71: for(i = 1;i<result.out_len+1;i++){
  2492  000860  0E01               	movlw	1
  2493  000862  0100               	movlb	0	; () banked
  2494  000864  6FB9               	movwf	sendData@i& (0+255),b
  2495  000866  D01F               	goto	l3888
  2496  000868                     l3884:
  2497                           
  2498                           ; BSR set to: 0
  2499                           ;CarCom.c: 72: SendArray[i] = COBSArray[i-1];
  2500  000868  0EFF               	movlw	255
  2501  00086A  6E29               	movwf	??_sendData& (0+255),c
  2502  00086C  0EFF               	movlw	255
  2503  00086E  6E2A               	movwf	(??_sendData+1)& (0+255),c
  2504  000870  0100               	movlb	0	; () banked
  2505  000872  51B9               	movf	sendData@i& (0+255),w,b
  2506  000874  6E2B               	movwf	(??_sendData+2)& (0+255),c
  2507  000876  6A2C               	clrf	(??_sendData+3)& (0+255),c
  2508  000878  5029               	movf	??_sendData,w,c
  2509  00087A  262B               	addwf	??_sendData+2,f,c
  2510  00087C  502A               	movf	??_sendData+1,w,c
  2511  00087E  222C               	addwfc	??_sendData+3,f,c
  2512  000880  0E74               	movlw	low sendData@COBSArray
  2513  000882  242B               	addwf	??_sendData+2,w,c
  2514  000884  6ED9               	movwf	fsr2l,c
  2515  000886  0E00               	movlw	high sendData@COBSArray
  2516  000888  202C               	addwfc	??_sendData+3,w,c
  2517  00088A  6EDA               	movwf	fsr2h,c
  2518  00088C  0100               	movlb	0	; () banked
  2519  00088E  51B9               	movf	sendData@i& (0+255),w,b
  2520  000890  0D01               	mullw	1
  2521  000892  0E92               	movlw	low sendData@SendArray
  2522  000894  24F3               	addwf	prodl,w,c
  2523  000896  6EE1               	movwf	fsr1l,c
  2524  000898  0E00               	movlw	high sendData@SendArray
  2525  00089A  20F4               	addwfc	prodh,w,c
  2526  00089C  6EE2               	movwf	fsr1h,c
  2527  00089E  CFDF FFE7          	movff	indf2,indf1
  2528                           
  2529                           ; BSR set to: 0
  2530  0008A2  0100               	movlb	0	; () banked
  2531  0008A4  2BB9               	incf	sendData@i& (0+255),f,b
  2532  0008A6                     l3888:
  2533                           
  2534                           ; BSR set to: 0
  2535  0008A6  0E01               	movlw	1
  2536  0008A8  0100               	movlb	0	; () banked
  2537  0008AA  25B2               	addwf	sendData@result& (0+255),w,b
  2538  0008AC  6E29               	movwf	??_sendData& (0+255),c
  2539  0008AE  0E00               	movlw	0
  2540  0008B0  0100               	movlb	0	; () banked
  2541  0008B2  21B3               	addwfc	(sendData@result+1)& (0+255),w,b
  2542  0008B4  6E2A               	movwf	(??_sendData+1)& (0+255),c
  2543  0008B6  0100               	movlb	0	; () banked
  2544  0008B8  51B9               	movf	sendData@i& (0+255),w,b
  2545  0008BA  6E2B               	movwf	(??_sendData+2)& (0+255),c
  2546  0008BC  6A2C               	clrf	(??_sendData+3)& (0+255),c
  2547  0008BE  5029               	movf	??_sendData,w,c
  2548  0008C0  5C2B               	subwf	??_sendData+2,w,c
  2549  0008C2  502A               	movf	??_sendData+1,w,c
  2550  0008C4  582C               	subwfb	??_sendData+3,w,c
  2551  0008C6  A0D8               	btfss	status,0,c
  2552  0008C8  D7CF               	goto	l3884
  2553                           
  2554                           ; BSR set to: 0
  2555                           ;CarCom.c: 73: }
  2556                           ;CarCom.c: 75: for(i = 0;i<result.out_len+2;i++){
  2557                           
  2558                           ; BSR set to: 0
  2559  0008CA  0E00               	movlw	0
  2560  0008CC  0100               	movlb	0	; () banked
  2561  0008CE  6FB9               	movwf	sendData@i& (0+255),b
  2562  0008D0  D00E               	goto	l3896
  2563  0008D2                     l3892:
  2564                           
  2565                           ; BSR set to: 0
  2566                           ;CarCom.c: 76: Send_put(SendArray[i]);
  2567  0008D2  0100               	movlb	0	; () banked
  2568  0008D4  51B9               	movf	sendData@i& (0+255),w,b
  2569  0008D6  0D01               	mullw	1
  2570  0008D8  0E92               	movlw	low sendData@SendArray
  2571  0008DA  24F3               	addwf	prodl,w,c
  2572  0008DC  6ED9               	movwf	fsr2l,c
  2573  0008DE  0E00               	movlw	high sendData@SendArray
  2574  0008E0  20F4               	addwfc	prodh,w,c
  2575  0008E2  6EDA               	movwf	fsr2h,c
  2576  0008E4  50DF               	movf	indf2,w,c
  2577  0008E6  EC7B  F00E         	call	_Send_put
  2578  0008EA  0100               	movlb	0	; () banked
  2579  0008EC  2BB9               	incf	sendData@i& (0+255),f,b
  2580  0008EE                     l3896:
  2581                           
  2582                           ; BSR set to: 0
  2583  0008EE  0E02               	movlw	2
  2584  0008F0  0100               	movlb	0	; () banked
  2585  0008F2  25B2               	addwf	sendData@result& (0+255),w,b
  2586  0008F4  6E29               	movwf	??_sendData& (0+255),c
  2587  0008F6  0E00               	movlw	0
  2588  0008F8  0100               	movlb	0	; () banked
  2589  0008FA  21B3               	addwfc	(sendData@result+1)& (0+255),w,b
  2590  0008FC  6E2A               	movwf	(??_sendData+1)& (0+255),c
  2591  0008FE  0100               	movlb	0	; () banked
  2592  000900  51B9               	movf	sendData@i& (0+255),w,b
  2593  000902  6E2B               	movwf	(??_sendData+2)& (0+255),c
  2594  000904  6A2C               	clrf	(??_sendData+3)& (0+255),c
  2595  000906  5029               	movf	??_sendData,w,c
  2596  000908  5C2B               	subwf	??_sendData+2,w,c
  2597  00090A  502A               	movf	??_sendData+1,w,c
  2598  00090C  582C               	subwfb	??_sendData+3,w,c
  2599  00090E  B0D8               	btfsc	status,0,c
  2600  000910  0012               	return	
  2601  000912  D7DF               	goto	l3892
  2602  000914                     __end_of_sendData:
  2603                           	opt stack 0
  2604                           tblptru	equ	0xFF8
  2605                           tblptrh	equ	0xFF7
  2606                           tblptrl	equ	0xFF6
  2607                           tablat	equ	0xFF5
  2608                           prodh	equ	0xFF4
  2609                           prodl	equ	0xFF3
  2610                           intcon	equ	0xFF2
  2611                           postinc0	equ	0xFEE
  2612                           wreg	equ	0xFE8
  2613                           indf1	equ	0xFE7
  2614                           postdec1	equ	0xFE5
  2615                           fsr1h	equ	0xFE2
  2616                           fsr1l	equ	0xFE1
  2617                           indf2	equ	0xFDF
  2618                           postinc2	equ	0xFDE
  2619                           postdec2	equ	0xFDD
  2620                           fsr2h	equ	0xFDA
  2621                           fsr2l	equ	0xFD9
  2622                           status	equ	0xFD8
  2623                           
  2624 ;; *************** function _cobs_encode *****************
  2625 ;; Defined at:
  2626 ;;		line 29 in file "COBS.c"
  2627 ;; Parameters:    Size  Location     Type
  2628 ;;  dst_buf_ptr     2   28[COMRAM] PTR unsigned char 
  2629 ;;		 -> sendData@COBSArray(30), 
  2630 ;;  dst_buf_len     2   30[COMRAM] unsigned int 
  2631 ;;  src_ptr         2   32[COMRAM] PTR const unsigned char 
  2632 ;;		 -> sendData@SendArray(30), 
  2633 ;;  src_len         2   34[COMRAM] unsigned int 
  2634 ;; Auto vars:     Size  Location     Type
  2635 ;;  result          3   10[BANK0 ] struct .
  2636 ;;  dst_write_pt    2    8[BANK0 ] PTR unsigned char 
  2637 ;;		 -> sendData@COBSArray(30), 
  2638 ;;  dst_code_wri    2    6[BANK0 ] PTR unsigned char 
  2639 ;;		 -> sendData@COBSArray(30), 
  2640 ;;  dst_buf_end_    2    3[BANK0 ] PTR unsigned char 
  2641 ;;		 -> sendData@COBSArray(30), 
  2642 ;;  src_end_ptr     2    0[BANK0 ] PTR const unsigned char 
  2643 ;;		 -> sendData@SendArray(30), 
  2644 ;;  search_len      1    5[BANK0 ] unsigned char 
  2645 ;;  src_byte        1    2[BANK0 ] unsigned char 
  2646 ;; Return value:  Size  Location     Type
  2647 ;;                  3   28[COMRAM] struct .
  2648 ;; Registers used:
  2649 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2650 ;; Tracked objects:
  2651 ;;		On entry : 0/0
  2652 ;;		On exit  : 0/0
  2653 ;;		Unchanged: 0/0
  2654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2655 ;;      Params:         8       0       0       0       0       0       0
  2656 ;;      Locals:         0      13       0       0       0       0       0
  2657 ;;      Temps:          2       0       0       0       0       0       0
  2658 ;;      Totals:        10      13       0       0       0       0       0
  2659 ;;Total ram usage:       23 bytes
  2660 ;; Hardware stack levels used:    1
  2661 ;; Hardware stack levels required when called:    6
  2662 ;; This function calls:
  2663 ;;		Nothing
  2664 ;; This function is called by:
  2665 ;;		_sendData
  2666 ;; This function uses a non-reentrant model
  2667 ;;
  2668                           
  2669                           	psect	text9
  2670  000AD2                     __ptext9:
  2671                           	opt stack 0
  2672  000AD2                     _cobs_encode:
  2673                           	opt stack 20
  2674                           
  2675                           ;COBS.c: 31: cobs_encode_result result = { 0, COBS_ENCODE_OK };
  2676                           
  2677                           ; BSR set to: 0
  2678                           ;incstack = 0
  2679  000AD2  C034  F06A         	movff	cobs_encode@F180,cobs_encode@result
  2680  000AD6  C035  F06B         	movff	cobs_encode@F180+1,cobs_encode@result+1
  2681  000ADA  C036  F06C         	movff	cobs_encode@F180+2,cobs_encode@result+2
  2682                           
  2683                           ;COBS.c: 32: const uint8_t * src_end_ptr = src_ptr + src_len;
  2684  000ADE  5023               	movf	cobs_encode@src_len,w,c
  2685  000AE0  2421               	addwf	cobs_encode@src_ptr,w,c
  2686  000AE2  0100               	movlb	0	; () banked
  2687  000AE4  6F60               	movwf	cobs_encode@src_end_ptr& (0+255),b
  2688  000AE6  5024               	movf	cobs_encode@src_len+1,w,c
  2689  000AE8  2022               	addwfc	cobs_encode@src_ptr+1,w,c
  2690  000AEA  0100               	movlb	0	; () banked
  2691  000AEC  6F61               	movwf	(cobs_encode@src_end_ptr+1)& (0+255),b
  2692                           
  2693                           ;COBS.c: 33: uint8_t * dst_buf_end_ptr = dst_buf_ptr + dst_buf_len;
  2694  000AEE  501F               	movf	cobs_encode@dst_buf_len,w,c
  2695  000AF0  241D               	addwf	cobs_encode@dst_buf_ptr,w,c
  2696  000AF2  0100               	movlb	0	; () banked
  2697  000AF4  6F63               	movwf	cobs_encode@dst_buf_end_ptr& (0+255),b
  2698  000AF6  5020               	movf	cobs_encode@dst_buf_len+1,w,c
  2699  000AF8  201E               	addwfc	cobs_encode@dst_buf_ptr+1,w,c
  2700  000AFA  0100               	movlb	0	; () banked
  2701  000AFC  6F64               	movwf	(cobs_encode@dst_buf_end_ptr+1)& (0+255),b
  2702                           
  2703                           ;COBS.c: 34: uint8_t * dst_code_write_ptr = dst_buf_ptr;
  2704  000AFE  C01D  F066         	movff	cobs_encode@dst_buf_ptr,cobs_encode@dst_code_write_ptr
  2705  000B02  C01E  F067         	movff	cobs_encode@dst_buf_ptr+1,cobs_encode@dst_code_write_ptr+1
  2706                           
  2707                           ;COBS.c: 35: uint8_t * dst_write_ptr = dst_code_write_ptr + 1;
  2708  000B06  0E01               	movlw	1
  2709  000B08  0100               	movlb	0	; () banked
  2710  000B0A  2566               	addwf	cobs_encode@dst_code_write_ptr& (0+255),w,b
  2711  000B0C  0100               	movlb	0	; () banked
  2712  000B0E  6F68               	movwf	cobs_encode@dst_write_ptr& (0+255),b
  2713  000B10  0E00               	movlw	0
  2714  000B12  0100               	movlb	0	; () banked
  2715  000B14  2167               	addwfc	(cobs_encode@dst_code_write_ptr+1)& (0+255),w,b
  2716  000B16  0100               	movlb	0	; () banked
  2717  000B18  6F69               	movwf	(cobs_encode@dst_write_ptr+1)& (0+255),b
  2718                           
  2719                           ; BSR set to: 0
  2720                           ;COBS.c: 36: uint8_t src_byte = 0;
  2721  000B1A  0E00               	movlw	0
  2722  000B1C  0100               	movlb	0	; () banked
  2723  000B1E  6F62               	movwf	cobs_encode@src_byte& (0+255),b
  2724                           
  2725                           ; BSR set to: 0
  2726                           ;COBS.c: 37: uint8_t search_len = 1;
  2727  000B20  0E01               	movlw	1
  2728  000B22  0100               	movlb	0	; () banked
  2729  000B24  6F65               	movwf	cobs_encode@search_len& (0+255),b
  2730                           
  2731                           ;COBS.c: 41: if ((dst_buf_ptr == (0)) || (src_ptr == (0)))
  2732  000B26  501D               	movf	cobs_encode@dst_buf_ptr,w,c
  2733  000B28  101E               	iorwf	cobs_encode@dst_buf_ptr+1,w,c
  2734  000B2A  B4D8               	btfsc	status,2,c
  2735  000B2C  D004               	goto	l3742
  2736                           
  2737                           ; BSR set to: 0
  2738  000B2E  5021               	movf	cobs_encode@src_ptr,w,c
  2739  000B30  1022               	iorwf	cobs_encode@src_ptr+1,w,c
  2740  000B32  A4D8               	btfss	status,2,c
  2741  000B34  D00A               	goto	l3748
  2742  000B36                     l3742:
  2743                           
  2744                           ; BSR set to: 0
  2745                           ;COBS.c: 42: {
  2746                           ;COBS.c: 43: result.status = COBS_ENCODE_NULL_POINTER;
  2747  000B36  0E01               	movlw	1
  2748  000B38  0100               	movlb	0	; () banked
  2749  000B3A  6F6C               	movwf	(cobs_encode@result+2)& (0+255),b
  2750                           
  2751                           ; BSR set to: 0
  2752                           ;COBS.c: 44: return result;
  2753  000B3C  C06A  F01D         	movff	cobs_encode@result,?_cobs_encode
  2754  000B40  C06B  F01E         	movff	cobs_encode@result+1,?_cobs_encode+1
  2755  000B44  C06C  F01F         	movff	cobs_encode@result+2,?_cobs_encode+2
  2756                           
  2757                           ; BSR set to: 0
  2758  000B48  0012               	return	
  2759  000B4A                     l3748:
  2760                           
  2761                           ; BSR set to: 0
  2762                           ;COBS.c: 45: }
  2763                           ;COBS.c: 47: if (src_len != 0)
  2764  000B4A  5023               	movf	cobs_encode@src_len,w,c
  2765  000B4C  1024               	iorwf	cobs_encode@src_len+1,w,c
  2766  000B4E  B4D8               	btfsc	status,2,c
  2767  000B50  D05C               	goto	l3792
  2768  000B52                     l3750:
  2769                           
  2770                           ; BSR set to: 0
  2771                           ;COBS.c: 51: {
  2772                           ;COBS.c: 53: if (dst_write_ptr >= dst_buf_end_ptr)
  2773  000B52  0100               	movlb	0	; () banked
  2774  000B54  5163               	movf	cobs_encode@dst_buf_end_ptr& (0+255),w,b
  2775  000B56  0100               	movlb	0	; () banked
  2776  000B58  5D68               	subwf	cobs_encode@dst_write_ptr& (0+255),w,b
  2777  000B5A  0100               	movlb	0	; () banked
  2778  000B5C  5164               	movf	(cobs_encode@dst_buf_end_ptr+1)& (0+255),w,b
  2779  000B5E  0100               	movlb	0	; () banked
  2780  000B60  5969               	subwfb	(cobs_encode@dst_write_ptr+1)& (0+255),w,b
  2781  000B62  A0D8               	btfss	status,0,c
  2782  000B64  D003               	goto	l3754
  2783                           
  2784                           ; BSR set to: 0
  2785                           ;COBS.c: 54: {
  2786                           ;COBS.c: 55: result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
  2787  000B66  0100               	movlb	0	; () banked
  2788  000B68  836C               	bsf	(cobs_encode@result+2)& (0+255),1,b
  2789                           
  2790                           ;COBS.c: 56: break;
  2791  000B6A  D04F               	goto	l3792
  2792  000B6C                     l3754:
  2793                           
  2794                           ; BSR set to: 0
  2795                           ;COBS.c: 57: }
  2796                           ;COBS.c: 59: src_byte = *src_ptr++;
  2797  000B6C  C021  FFD9         	movff	cobs_encode@src_ptr,fsr2l
  2798  000B70  C022  FFDA         	movff	cobs_encode@src_ptr+1,fsr2h
  2799  000B74  50DF               	movf	indf2,w,c
  2800  000B76  0100               	movlb	0	; () banked
  2801  000B78  6F62               	movwf	cobs_encode@src_byte& (0+255),b
  2802                           
  2803                           ; BSR set to: 0
  2804  000B7A  4A21               	infsnz	cobs_encode@src_ptr,f,c
  2805  000B7C  2A22               	incf	cobs_encode@src_ptr+1,f,c
  2806                           
  2807                           ; BSR set to: 0
  2808                           ;COBS.c: 60: if (src_byte == 0)
  2809  000B7E  0100               	movlb	0	; () banked
  2810  000B80  5162               	movf	cobs_encode@src_byte& (0+255),w,b
  2811  000B82  0100               	movlb	0	; () banked
  2812  000B84  A4D8               	btfss	status,2,c
  2813  000B86  D019               	goto	l3772
  2814                           
  2815                           ; BSR set to: 0
  2816                           ;COBS.c: 61: {
  2817                           ;COBS.c: 63: *dst_code_write_ptr = search_len;
  2818  000B88  C066  FFD9         	movff	cobs_encode@dst_code_write_ptr,fsr2l
  2819  000B8C  C067  FFDA         	movff	cobs_encode@dst_code_write_ptr+1,fsr2h
  2820  000B90  C065  FFDF         	movff	cobs_encode@search_len,indf2
  2821                           
  2822                           ; BSR set to: 0
  2823                           ;COBS.c: 64: dst_code_write_ptr = dst_write_ptr++;
  2824  000B94  C068  F066         	movff	cobs_encode@dst_write_ptr,cobs_encode@dst_code_write_ptr
  2825  000B98  C069  F067         	movff	cobs_encode@dst_write_ptr+1,cobs_encode@dst_code_write_ptr+1
  2826                           
  2827                           ; BSR set to: 0
  2828  000B9C  0100               	movlb	0	; () banked
  2829  000B9E  4B68               	infsnz	cobs_encode@dst_write_ptr& (0+255),f,b
  2830  000BA0  2B69               	incf	(cobs_encode@dst_write_ptr+1)& (0+255),f,b
  2831                           
  2832                           ; BSR set to: 0
  2833                           ;COBS.c: 65: search_len = 1;
  2834  000BA2  0E01               	movlw	1
  2835  000BA4  0100               	movlb	0	; () banked
  2836  000BA6  6F65               	movwf	cobs_encode@search_len& (0+255),b
  2837                           
  2838                           ; BSR set to: 0
  2839                           ;COBS.c: 66: if (src_ptr >= src_end_ptr)
  2840  000BA8  0100               	movlb	0	; () banked
  2841  000BAA  5160               	movf	cobs_encode@src_end_ptr& (0+255),w,b
  2842  000BAC  5C21               	subwf	cobs_encode@src_ptr,w,c
  2843  000BAE  0100               	movlb	0	; () banked
  2844  000BB0  5161               	movf	(cobs_encode@src_end_ptr+1)& (0+255),w,b
  2845  000BB2  5822               	subwfb	cobs_encode@src_ptr+1,w,c
  2846  000BB4  B0D8               	btfsc	status,0,c
  2847  000BB6  D029               	goto	l3792
  2848  000BB8  D7CC               	goto	l3750
  2849  000BBA                     l3772:
  2850                           
  2851                           ; BSR set to: 0
  2852                           ;COBS.c: 71: else
  2853                           ;COBS.c: 72: {
  2854                           ;COBS.c: 74: *dst_write_ptr++ = src_byte;
  2855  000BBA  C068  FFD9         	movff	cobs_encode@dst_write_ptr,fsr2l
  2856  000BBE  C069  FFDA         	movff	cobs_encode@dst_write_ptr+1,fsr2h
  2857  000BC2  C062  FFDF         	movff	cobs_encode@src_byte,indf2
  2858                           
  2859                           ; BSR set to: 0
  2860  000BC6  0100               	movlb	0	; () banked
  2861  000BC8  4B68               	infsnz	cobs_encode@dst_write_ptr& (0+255),f,b
  2862  000BCA  2B69               	incf	(cobs_encode@dst_write_ptr+1)& (0+255),f,b
  2863                           
  2864                           ; BSR set to: 0
  2865                           ;COBS.c: 75: search_len++;
  2866  000BCC  0100               	movlb	0	; () banked
  2867  000BCE  2B65               	incf	cobs_encode@search_len& (0+255),f,b
  2868                           
  2869                           ; BSR set to: 0
  2870                           ;COBS.c: 76: if (src_ptr >= src_end_ptr)
  2871  000BD0  0100               	movlb	0	; () banked
  2872  000BD2  5160               	movf	cobs_encode@src_end_ptr& (0+255),w,b
  2873  000BD4  5C21               	subwf	cobs_encode@src_ptr,w,c
  2874  000BD6  0100               	movlb	0	; () banked
  2875  000BD8  5161               	movf	(cobs_encode@src_end_ptr+1)& (0+255),w,b
  2876  000BDA  5822               	subwfb	cobs_encode@src_ptr+1,w,c
  2877  000BDC  B0D8               	btfsc	status,0,c
  2878  000BDE  D015               	goto	l3792
  2879                           
  2880                           ; BSR set to: 0
  2881                           ;COBS.c: 79: }
  2882                           ;COBS.c: 80: if (search_len == 0xFF)
  2883                           
  2884                           ; BSR set to: 0
  2885                           
  2886                           ; BSR set to: 0
  2887                           ;COBS.c: 77: {
  2888                           ;COBS.c: 78: break;
  2889  000BE0  0100               	movlb	0	; () banked
  2890  000BE2  2965               	incf	cobs_encode@search_len& (0+255),w,b
  2891  000BE4  A4D8               	btfss	status,2,c
  2892  000BE6  D7B5               	goto	l3750
  2893                           
  2894                           ; BSR set to: 0
  2895                           ;COBS.c: 81: {
  2896                           ;COBS.c: 84: *dst_code_write_ptr = search_len;
  2897  000BE8  C066  FFD9         	movff	cobs_encode@dst_code_write_ptr,fsr2l
  2898  000BEC  C067  FFDA         	movff	cobs_encode@dst_code_write_ptr+1,fsr2h
  2899  000BF0  C065  FFDF         	movff	cobs_encode@search_len,indf2
  2900                           
  2901                           ; BSR set to: 0
  2902                           ;COBS.c: 85: dst_code_write_ptr = dst_write_ptr++;
  2903  000BF4  C068  F066         	movff	cobs_encode@dst_write_ptr,cobs_encode@dst_code_write_ptr
  2904  000BF8  C069  F067         	movff	cobs_encode@dst_write_ptr+1,cobs_encode@dst_code_write_ptr+1
  2905                           
  2906                           ; BSR set to: 0
  2907  000BFC  0100               	movlb	0	; () banked
  2908  000BFE  4B68               	infsnz	cobs_encode@dst_write_ptr& (0+255),f,b
  2909  000C00  2B69               	incf	(cobs_encode@dst_write_ptr+1)& (0+255),f,b
  2910                           
  2911                           ; BSR set to: 0
  2912                           ;COBS.c: 86: search_len = 1;
  2913  000C02  0E01               	movlw	1
  2914  000C04  0100               	movlb	0	; () banked
  2915  000C06  6F65               	movwf	cobs_encode@search_len& (0+255),b
  2916                           
  2917                           ; BSR set to: 0
  2918                           ;COBS.c: 87: }
  2919                           ;COBS.c: 88: }
  2920                           ;COBS.c: 89: }
  2921                           
  2922                           ; BSR set to: 0
  2923  000C08  D7A4               	goto	l3750
  2924  000C0A                     l3792:
  2925                           
  2926                           ; BSR set to: 0
  2927                           ;COBS.c: 90: }
  2928                           ;COBS.c: 96: if (dst_code_write_ptr >= dst_buf_end_ptr)
  2929  000C0A  0100               	movlb	0	; () banked
  2930  000C0C  5163               	movf	cobs_encode@dst_buf_end_ptr& (0+255),w,b
  2931  000C0E  0100               	movlb	0	; () banked
  2932  000C10  5D66               	subwf	cobs_encode@dst_code_write_ptr& (0+255),w,b
  2933  000C12  0100               	movlb	0	; () banked
  2934  000C14  5164               	movf	(cobs_encode@dst_buf_end_ptr+1)& (0+255),w,b
  2935  000C16  0100               	movlb	0	; () banked
  2936  000C18  5967               	subwfb	(cobs_encode@dst_code_write_ptr+1)& (0+255),w,b
  2937  000C1A  A0D8               	btfss	status,0,c
  2938  000C1C  D007               	goto	l3798
  2939                           
  2940                           ; BSR set to: 0
  2941                           ;COBS.c: 97: {
  2942                           ;COBS.c: 99: result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
  2943  000C1E  0100               	movlb	0	; () banked
  2944  000C20  836C               	bsf	(cobs_encode@result+2)& (0+255),1,b
  2945                           
  2946                           ; BSR set to: 0
  2947                           ;COBS.c: 100: dst_write_ptr = dst_buf_end_ptr;
  2948  000C22  C063  F068         	movff	cobs_encode@dst_buf_end_ptr,cobs_encode@dst_write_ptr
  2949  000C26  C064  F069         	movff	cobs_encode@dst_buf_end_ptr+1,cobs_encode@dst_write_ptr+1
  2950                           
  2951                           ;COBS.c: 101: }
  2952  000C2A  D006               	goto	l3800
  2953  000C2C                     l3798:
  2954                           
  2955                           ; BSR set to: 0
  2956                           ;COBS.c: 102: else
  2957                           ;COBS.c: 103: {
  2958                           ;COBS.c: 105: *dst_code_write_ptr = search_len;
  2959  000C2C  C066  FFD9         	movff	cobs_encode@dst_code_write_ptr,fsr2l
  2960  000C30  C067  FFDA         	movff	cobs_encode@dst_code_write_ptr+1,fsr2h
  2961  000C34  C065  FFDF         	movff	cobs_encode@search_len,indf2
  2962  000C38                     l3800:
  2963                           
  2964                           ; BSR set to: 0
  2965                           ;COBS.c: 106: }
  2966                           ;COBS.c: 109: result.out_len = dst_write_ptr - dst_buf_ptr;
  2967  000C38  C01D  F025         	movff	cobs_encode@dst_buf_ptr,??_cobs_encode
  2968  000C3C  C01E  F026         	movff	cobs_encode@dst_buf_ptr+1,??_cobs_encode+1
  2969  000C40  1E25               	comf	??_cobs_encode,f,c
  2970  000C42  1E26               	comf	??_cobs_encode+1,f,c
  2971  000C44  4A25               	infsnz	??_cobs_encode,f,c
  2972  000C46  2A26               	incf	??_cobs_encode+1,f,c
  2973  000C48  0100               	movlb	0	; () banked
  2974  000C4A  5168               	movf	cobs_encode@dst_write_ptr& (0+255),w,b
  2975  000C4C  2425               	addwf	??_cobs_encode,w,c
  2976  000C4E  0100               	movlb	0	; () banked
  2977  000C50  6F6A               	movwf	cobs_encode@result& (0+255),b
  2978  000C52  0100               	movlb	0	; () banked
  2979  000C54  5169               	movf	(cobs_encode@dst_write_ptr+1)& (0+255),w,b
  2980  000C56  2026               	addwfc	??_cobs_encode+1,w,c
  2981  000C58  0100               	movlb	0	; () banked
  2982  000C5A  6F6B               	movwf	(cobs_encode@result+1)& (0+255),b
  2983                           
  2984                           ; BSR set to: 0
  2985                           ;COBS.c: 111: return result;
  2986  000C5C  C06A  F01D         	movff	cobs_encode@result,?_cobs_encode
  2987  000C60  C06B  F01E         	movff	cobs_encode@result+1,?_cobs_encode+1
  2988  000C64  C06C  F01F         	movff	cobs_encode@result+2,?_cobs_encode+2
  2989  000C68  0012               	return	
  2990  000C6A                     __end_of_cobs_encode:
  2991                           	opt stack 0
  2992                           tblptru	equ	0xFF8
  2993                           tblptrh	equ	0xFF7
  2994                           tblptrl	equ	0xFF6
  2995                           tablat	equ	0xFF5
  2996                           prodh	equ	0xFF4
  2997                           prodl	equ	0xFF3
  2998                           intcon	equ	0xFF2
  2999                           postinc0	equ	0xFEE
  3000                           wreg	equ	0xFE8
  3001                           indf1	equ	0xFE7
  3002                           postdec1	equ	0xFE5
  3003                           fsr1h	equ	0xFE2
  3004                           fsr1l	equ	0xFE1
  3005                           indf2	equ	0xFDF
  3006                           postinc2	equ	0xFDE
  3007                           postdec2	equ	0xFDD
  3008                           fsr2h	equ	0xFDA
  3009                           fsr2l	equ	0xFD9
  3010                           status	equ	0xFD8
  3011                           
  3012 ;; *************** function _Send_put *****************
  3013 ;; Defined at:
  3014 ;;		line 129 in file "UART.c"
  3015 ;; Parameters:    Size  Location     Type
  3016 ;;  _data           1    wreg     unsigned char 
  3017 ;; Auto vars:     Size  Location     Type
  3018 ;;  _data           1   39[COMRAM] unsigned char 
  3019 ;; Return value:  Size  Location     Type
  3020 ;;                  1    wreg      void 
  3021 ;; Registers used:
  3022 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3023 ;; Tracked objects:
  3024 ;;		On entry : 0/0
  3025 ;;		On exit  : 0/0
  3026 ;;		Unchanged: 0/0
  3027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3028 ;;      Params:         0       0       0       0       0       0       0
  3029 ;;      Locals:         1       0       0       0       0       0       0
  3030 ;;      Temps:          0       0       0       0       0       0       0
  3031 ;;      Totals:         1       0       0       0       0       0       0
  3032 ;;Total ram usage:        1 bytes
  3033 ;; Hardware stack levels used:    1
  3034 ;; Hardware stack levels required when called:    8
  3035 ;; This function calls:
  3036 ;;		_UART_buff_get
  3037 ;;		_UART_buff_put
  3038 ;; This function is called by:
  3039 ;;		_sendData
  3040 ;;		_putch
  3041 ;; This function uses a non-reentrant model
  3042 ;;
  3043                           
  3044                           	psect	text10
  3045  001CF6                     __ptext10:
  3046                           	opt stack 0
  3047  001CF6                     _Send_put:
  3048                           	opt stack 18
  3049                           
  3050                           ; BSR set to: 0
  3051                           ;incstack = 0
  3052                           ;Send_put@_data stored from wreg
  3053  001CF6  6E28               	movwf	Send_put@_data,c
  3054                           
  3055                           ;UART.c: 130: UART_buff_put(&output_buffer, _data);
  3056  001CF8  0E00               	movlw	low _output_buffer
  3057  001CFA  6E23               	movwf	UART_buff_put@_this,c
  3058  001CFC  0E02               	movlw	high _output_buffer
  3059  001CFE  6E24               	movwf	UART_buff_put@_this+1,c
  3060  001D00  C028  F025         	movff	Send_put@_data,UART_buff_put@c
  3061  001D04  ECCD  F006         	call	_UART_buff_put	;wreg free
  3062                           
  3063                           ;UART.c: 131: if (Transmit_stall == 1) {
  3064  001D08  0442               	decf	_Transmit_stall,w,c
  3065  001D0A  A4D8               	btfss	status,2,c
  3066  001D0C  0012               	return	
  3067                           
  3068                           ;UART.c: 132: Transmit_stall = 0;
  3069  001D0E  0E00               	movlw	0
  3070  001D10  6E42               	movwf	_Transmit_stall,c
  3071                           
  3072                           ;UART.c: 133: TXREG1 = UART_buff_get(&output_buffer);
  3073  001D12  0E00               	movlw	low _output_buffer
  3074  001D14  6E23               	movwf	UART_buff_get@_this,c
  3075  001D16  0E02               	movlw	high _output_buffer
  3076  001D18  6E24               	movwf	UART_buff_get@_this+1,c
  3077  001D1A  ECD6  F00A         	call	_UART_buff_get	;wreg free
  3078  001D1E  6EAD               	movwf	4013,c	;volatile
  3079                           
  3080                           ;UART.c: 134: PIE1bits.TX1IE = 1;
  3081  001D20  889D               	bsf	3997,4,c	;volatile
  3082  001D22  0012               	return	
  3083  001D24                     __end_of_Send_put:
  3084                           	opt stack 0
  3085                           tblptru	equ	0xFF8
  3086                           tblptrh	equ	0xFF7
  3087                           tblptrl	equ	0xFF6
  3088                           tablat	equ	0xFF5
  3089                           prodh	equ	0xFF4
  3090                           prodl	equ	0xFF3
  3091                           intcon	equ	0xFF2
  3092                           postinc0	equ	0xFEE
  3093                           wreg	equ	0xFE8
  3094                           indf1	equ	0xFE7
  3095                           postdec1	equ	0xFE5
  3096                           fsr1h	equ	0xFE2
  3097                           fsr1l	equ	0xFE1
  3098                           indf2	equ	0xFDF
  3099                           postinc2	equ	0xFDE
  3100                           postdec2	equ	0xFDD
  3101                           fsr2h	equ	0xFDA
  3102                           fsr2l	equ	0xFD9
  3103                           status	equ	0xFD8
  3104                           
  3105 ;; *************** function _UART_buff_put *****************
  3106 ;; Defined at:
  3107 ;;		line 67 in file "UART.c"
  3108 ;; Parameters:    Size  Location     Type
  3109 ;;  _this           2   34[COMRAM] PTR struct UART_ring_buf
  3110 ;;		 -> output_buffer(106), input_buffer(106), 
  3111 ;;  c               1   36[COMRAM] const unsigned char 
  3112 ;; Auto vars:     Size  Location     Type
  3113 ;;		None
  3114 ;; Return value:  Size  Location     Type
  3115 ;;                  1    wreg      void 
  3116 ;; Registers used:
  3117 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3118 ;; Tracked objects:
  3119 ;;		On entry : 0/0
  3120 ;;		On exit  : 0/0
  3121 ;;		Unchanged: 0/0
  3122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3123 ;;      Params:         3       0       0       0       0       0       0
  3124 ;;      Locals:         0       0       0       0       0       0       0
  3125 ;;      Temps:          2       0       0       0       0       0       0
  3126 ;;      Totals:         5       0       0       0       0       0       0
  3127 ;;Total ram usage:        5 bytes
  3128 ;; Hardware stack levels used:    1
  3129 ;; Hardware stack levels required when called:    7
  3130 ;; This function calls:
  3131 ;;		_UART_buff_modulo_inc
  3132 ;; This function is called by:
  3133 ;;		_Send_put
  3134 ;; This function uses a non-reentrant model
  3135 ;;
  3136                           
  3137                           	psect	text11
  3138  000D9A                     __ptext11:
  3139                           	opt stack 0
  3140  000D9A                     _UART_buff_put:
  3141                           	opt stack 18
  3142                           
  3143                           ;UART.c: 68: if (_this->count < 100) {
  3144                           
  3145                           ;incstack = 0
  3146  000D9A  EE20 F068          	lfsr	2,104
  3147  000D9E  5023               	movf	UART_buff_put@_this,w,c
  3148  000DA0  26D9               	addwf	fsr2l,f,c
  3149  000DA2  5024               	movf	UART_buff_put@_this+1,w,c
  3150  000DA4  22DA               	addwfc	fsr2h,f,c
  3151  000DA6  0E01               	movlw	1
  3152  000DA8  BEDB               	btfsc	plusw2,7,c
  3153  000DAA  D007               	goto	l3658
  3154  000DAC  0E01               	movlw	1
  3155  000DAE  50DB               	movf	plusw2,w,c
  3156  000DB0  E13A               	bnz	l3664
  3157  000DB2  0E64               	movlw	100
  3158  000DB4  5CDE               	subwf	postinc2,w,c
  3159  000DB6  B0D8               	btfsc	status,0,c
  3160  000DB8  D036               	goto	l3664
  3161  000DBA                     l3658:
  3162                           
  3163                           ;UART.c: 69: _this->buf[_this->head] = c;
  3164  000DBA  EE20 F064          	lfsr	2,100
  3165  000DBE  5023               	movf	UART_buff_put@_this,w,c
  3166  000DC0  26D9               	addwf	fsr2l,f,c
  3167  000DC2  5024               	movf	UART_buff_put@_this+1,w,c
  3168  000DC4  22DA               	addwfc	fsr2h,f,c
  3169  000DC6  CFDE F026          	movff	postinc2,??_UART_buff_put
  3170  000DCA  CFDD F027          	movff	postdec2,??_UART_buff_put+1
  3171  000DCE  5026               	movf	??_UART_buff_put,w,c
  3172  000DD0  2423               	addwf	UART_buff_put@_this,w,c
  3173  000DD2  6ED9               	movwf	fsr2l,c
  3174  000DD4  5027               	movf	??_UART_buff_put+1,w,c
  3175  000DD6  2024               	addwfc	UART_buff_put@_this+1,w,c
  3176  000DD8  6EDA               	movwf	fsr2h,c
  3177  000DDA  C025  FFDF         	movff	UART_buff_put@c,indf2
  3178                           
  3179                           ;UART.c: 70: _this->head = UART_buff_modulo_inc(_this->head, 100);
  3180  000DDE  EE20 F064          	lfsr	2,100
  3181  000DE2  5023               	movf	UART_buff_put@_this,w,c
  3182  000DE4  26D9               	addwf	fsr2l,f,c
  3183  000DE6  5024               	movf	UART_buff_put@_this+1,w,c
  3184  000DE8  22DA               	addwfc	fsr2h,f,c
  3185  000DEA  CFDE F01D          	movff	postinc2,UART_buff_modulo_inc@value
  3186  000DEE  CFDD F01E          	movff	postdec2,UART_buff_modulo_inc@value+1
  3187  000DF2  0E00               	movlw	0
  3188  000DF4  6E20               	movwf	UART_buff_modulo_inc@modulus+1,c
  3189  000DF6  0E64               	movlw	100
  3190  000DF8  6E1F               	movwf	UART_buff_modulo_inc@modulus,c
  3191  000DFA  ECA8  F00E         	call	_UART_buff_modulo_inc	;wreg free
  3192  000DFE  EE20 F064          	lfsr	2,100
  3193  000E02  5023               	movf	UART_buff_put@_this,w,c
  3194  000E04  26D9               	addwf	fsr2l,f,c
  3195  000E06  5024               	movf	UART_buff_put@_this+1,w,c
  3196  000E08  22DA               	addwfc	fsr2h,f,c
  3197  000E0A  C01D  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3198  000E0E  C01E  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3199                           
  3200                           ;UART.c: 71: ++_this->count;
  3201  000E12  EE20 F068          	lfsr	2,104
  3202  000E16  5023               	movf	UART_buff_put@_this,w,c
  3203  000E18  26D9               	addwf	fsr2l,f,c
  3204  000E1A  5024               	movf	UART_buff_put@_this+1,w,c
  3205  000E1C  22DA               	addwfc	fsr2h,f,c
  3206  000E1E  2ADE               	incf	postinc2,f,c
  3207  000E20  0E00               	movlw	0
  3208  000E22  22DD               	addwfc	postdec2,f,c
  3209                           
  3210                           ;UART.c: 72: } else {
  3211  000E24  0012               	return	
  3212  000E26                     l3664:
  3213                           
  3214                           ;UART.c: 73: _this->buf[_this->head] = c;
  3215  000E26  EE20 F064          	lfsr	2,100
  3216  000E2A  5023               	movf	UART_buff_put@_this,w,c
  3217  000E2C  26D9               	addwf	fsr2l,f,c
  3218  000E2E  5024               	movf	UART_buff_put@_this+1,w,c
  3219  000E30  22DA               	addwfc	fsr2h,f,c
  3220  000E32  CFDE F026          	movff	postinc2,??_UART_buff_put
  3221  000E36  CFDD F027          	movff	postdec2,??_UART_buff_put+1
  3222  000E3A  5026               	movf	??_UART_buff_put,w,c
  3223  000E3C  2423               	addwf	UART_buff_put@_this,w,c
  3224  000E3E  6ED9               	movwf	fsr2l,c
  3225  000E40  5027               	movf	??_UART_buff_put+1,w,c
  3226  000E42  2024               	addwfc	UART_buff_put@_this+1,w,c
  3227  000E44  6EDA               	movwf	fsr2h,c
  3228  000E46  C025  FFDF         	movff	UART_buff_put@c,indf2
  3229                           
  3230                           ;UART.c: 74: _this->head = UART_buff_modulo_inc(_this->head, 100);
  3231  000E4A  EE20 F064          	lfsr	2,100
  3232  000E4E  5023               	movf	UART_buff_put@_this,w,c
  3233  000E50  26D9               	addwf	fsr2l,f,c
  3234  000E52  5024               	movf	UART_buff_put@_this+1,w,c
  3235  000E54  22DA               	addwfc	fsr2h,f,c
  3236  000E56  CFDE F01D          	movff	postinc2,UART_buff_modulo_inc@value
  3237  000E5A  CFDD F01E          	movff	postdec2,UART_buff_modulo_inc@value+1
  3238  000E5E  0E00               	movlw	0
  3239  000E60  6E20               	movwf	UART_buff_modulo_inc@modulus+1,c
  3240  000E62  0E64               	movlw	100
  3241  000E64  6E1F               	movwf	UART_buff_modulo_inc@modulus,c
  3242  000E66  ECA8  F00E         	call	_UART_buff_modulo_inc	;wreg free
  3243  000E6A  EE20 F064          	lfsr	2,100
  3244  000E6E  5023               	movf	UART_buff_put@_this,w,c
  3245  000E70  26D9               	addwf	fsr2l,f,c
  3246  000E72  5024               	movf	UART_buff_put@_this+1,w,c
  3247  000E74  22DA               	addwfc	fsr2h,f,c
  3248  000E76  C01D  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3249  000E7A  C01E  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3250                           
  3251                           ;UART.c: 75: _this->tail = UART_buff_modulo_inc(_this->tail, 100);
  3252  000E7E  EE20 F066          	lfsr	2,102
  3253  000E82  5023               	movf	UART_buff_put@_this,w,c
  3254  000E84  26D9               	addwf	fsr2l,f,c
  3255  000E86  5024               	movf	UART_buff_put@_this+1,w,c
  3256  000E88  22DA               	addwfc	fsr2h,f,c
  3257  000E8A  CFDE F01D          	movff	postinc2,UART_buff_modulo_inc@value
  3258  000E8E  CFDD F01E          	movff	postdec2,UART_buff_modulo_inc@value+1
  3259  000E92  0E00               	movlw	0
  3260  000E94  6E20               	movwf	UART_buff_modulo_inc@modulus+1,c
  3261  000E96  0E64               	movlw	100
  3262  000E98  6E1F               	movwf	UART_buff_modulo_inc@modulus,c
  3263  000E9A  ECA8  F00E         	call	_UART_buff_modulo_inc	;wreg free
  3264  000E9E  EE20 F066          	lfsr	2,102
  3265  000EA2  5023               	movf	UART_buff_put@_this,w,c
  3266  000EA4  26D9               	addwf	fsr2l,f,c
  3267  000EA6  5024               	movf	UART_buff_put@_this+1,w,c
  3268  000EA8  22DA               	addwfc	fsr2h,f,c
  3269  000EAA  C01D  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3270  000EAE  C01E  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3271  000EB2  0012               	return	
  3272  000EB4                     __end_of_UART_buff_put:
  3273                           	opt stack 0
  3274                           tblptru	equ	0xFF8
  3275                           tblptrh	equ	0xFF7
  3276                           tblptrl	equ	0xFF6
  3277                           tablat	equ	0xFF5
  3278                           prodh	equ	0xFF4
  3279                           prodl	equ	0xFF3
  3280                           intcon	equ	0xFF2
  3281                           postinc0	equ	0xFEE
  3282                           wreg	equ	0xFE8
  3283                           indf1	equ	0xFE7
  3284                           postdec1	equ	0xFE5
  3285                           fsr1h	equ	0xFE2
  3286                           fsr1l	equ	0xFE1
  3287                           indf2	equ	0xFDF
  3288                           postinc2	equ	0xFDE
  3289                           postdec2	equ	0xFDD
  3290                           plusw2	equ	0xFDB
  3291                           fsr2h	equ	0xFDA
  3292                           fsr2l	equ	0xFD9
  3293                           status	equ	0xFD8
  3294                           
  3295 ;; *************** function _UART_buff_get *****************
  3296 ;; Defined at:
  3297 ;;		line 80 in file "UART.c"
  3298 ;; Parameters:    Size  Location     Type
  3299 ;;  _this           2   34[COMRAM] PTR struct UART_ring_buf
  3300 ;;		 -> output_buffer(106), input_buffer(106), 
  3301 ;; Auto vars:     Size  Location     Type
  3302 ;;  c               1   38[COMRAM] unsigned char 
  3303 ;; Return value:  Size  Location     Type
  3304 ;;                  1    wreg      unsigned char 
  3305 ;; Registers used:
  3306 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3307 ;; Tracked objects:
  3308 ;;		On entry : 0/0
  3309 ;;		On exit  : 0/0
  3310 ;;		Unchanged: 0/0
  3311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3312 ;;      Params:         2       0       0       0       0       0       0
  3313 ;;      Locals:         1       0       0       0       0       0       0
  3314 ;;      Temps:          2       0       0       0       0       0       0
  3315 ;;      Totals:         5       0       0       0       0       0       0
  3316 ;;Total ram usage:        5 bytes
  3317 ;; Hardware stack levels used:    1
  3318 ;; Hardware stack levels required when called:    7
  3319 ;; This function calls:
  3320 ;;		_UART_buff_modulo_inc
  3321 ;; This function is called by:
  3322 ;;		_Receive_get
  3323 ;;		_Send_put
  3324 ;; This function uses a non-reentrant model
  3325 ;;
  3326                           
  3327                           	psect	text12
  3328  0015AC                     __ptext12:
  3329                           	opt stack 0
  3330  0015AC                     _UART_buff_get:
  3331                           	opt stack 20
  3332                           
  3333                           ;UART.c: 81: unsigned char c;
  3334                           ;UART.c: 82: if (_this->count > 0) {
  3335                           
  3336                           ;incstack = 0
  3337  0015AC  EE20 F068          	lfsr	2,104
  3338  0015B0  5023               	movf	UART_buff_get@_this,w,c
  3339  0015B2  26D9               	addwf	fsr2l,f,c
  3340  0015B4  5024               	movf	UART_buff_get@_this+1,w,c
  3341  0015B6  22DA               	addwfc	fsr2h,f,c
  3342  0015B8  0E01               	movlw	1
  3343  0015BA  BEDB               	btfsc	plusw2,7,c
  3344  0015BC  D03C               	goto	l3678
  3345  0015BE  0E01               	movlw	1
  3346  0015C0  50DB               	movf	plusw2,w,c
  3347  0015C2  E103               	bnz	u2190
  3348  0015C4  04DE               	decf	postinc2,w,c
  3349  0015C6  A0D8               	btfss	status,0,c
  3350  0015C8  D036               	goto	l3678
  3351  0015CA                     u2190:
  3352                           
  3353                           ;UART.c: 83: c = _this->buf[_this->tail];
  3354  0015CA  EE20 F066          	lfsr	2,102
  3355  0015CE  5023               	movf	UART_buff_get@_this,w,c
  3356  0015D0  26D9               	addwf	fsr2l,f,c
  3357  0015D2  5024               	movf	UART_buff_get@_this+1,w,c
  3358  0015D4  22DA               	addwfc	fsr2h,f,c
  3359  0015D6  CFDE F025          	movff	postinc2,??_UART_buff_get
  3360  0015DA  CFDD F026          	movff	postdec2,??_UART_buff_get+1
  3361  0015DE  5025               	movf	??_UART_buff_get,w,c
  3362  0015E0  2423               	addwf	UART_buff_get@_this,w,c
  3363  0015E2  6ED9               	movwf	fsr2l,c
  3364  0015E4  5026               	movf	??_UART_buff_get+1,w,c
  3365  0015E6  2024               	addwfc	UART_buff_get@_this+1,w,c
  3366  0015E8  6EDA               	movwf	fsr2h,c
  3367  0015EA  50DF               	movf	indf2,w,c
  3368  0015EC  6E27               	movwf	UART_buff_get@c,c
  3369                           
  3370                           ;UART.c: 84: _this->tail = UART_buff_modulo_inc(_this->tail, 100);
  3371  0015EE  EE20 F066          	lfsr	2,102
  3372  0015F2  5023               	movf	UART_buff_get@_this,w,c
  3373  0015F4  26D9               	addwf	fsr2l,f,c
  3374  0015F6  5024               	movf	UART_buff_get@_this+1,w,c
  3375  0015F8  22DA               	addwfc	fsr2h,f,c
  3376  0015FA  CFDE F01D          	movff	postinc2,UART_buff_modulo_inc@value
  3377  0015FE  CFDD F01E          	movff	postdec2,UART_buff_modulo_inc@value+1
  3378  001602  0E00               	movlw	0
  3379  001604  6E20               	movwf	UART_buff_modulo_inc@modulus+1,c
  3380  001606  0E64               	movlw	100
  3381  001608  6E1F               	movwf	UART_buff_modulo_inc@modulus,c
  3382  00160A  ECA8  F00E         	call	_UART_buff_modulo_inc	;wreg free
  3383  00160E  EE20 F066          	lfsr	2,102
  3384  001612  5023               	movf	UART_buff_get@_this,w,c
  3385  001614  26D9               	addwf	fsr2l,f,c
  3386  001616  5024               	movf	UART_buff_get@_this+1,w,c
  3387  001618  22DA               	addwfc	fsr2h,f,c
  3388  00161A  C01D  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3389  00161E  C01E  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3390                           
  3391                           ;UART.c: 85: --_this->count;
  3392  001622  EE20 F068          	lfsr	2,104
  3393  001626  5023               	movf	UART_buff_get@_this,w,c
  3394  001628  26D9               	addwf	fsr2l,f,c
  3395  00162A  5024               	movf	UART_buff_get@_this+1,w,c
  3396  00162C  22DA               	addwfc	fsr2h,f,c
  3397  00162E  06DE               	decf	postinc2,f,c
  3398  001630  0E00               	movlw	0
  3399  001632  5ADD               	subwfb	postdec2,f,c
  3400                           
  3401                           ;UART.c: 86: } else {
  3402  001634  D002               	goto	l589
  3403  001636                     l3678:
  3404                           
  3405                           ;UART.c: 87: c = 0;
  3406  001636  0E00               	movlw	0
  3407  001638  6E27               	movwf	UART_buff_get@c,c
  3408  00163A                     l589:
  3409                           
  3410                           ;UART.c: 88: }
  3411                           ;UART.c: 89: return (c);
  3412  00163A  5027               	movf	UART_buff_get@c,w,c
  3413  00163C  0012               	return	
  3414  00163E                     __end_of_UART_buff_get:
  3415                           	opt stack 0
  3416                           tblptru	equ	0xFF8
  3417                           tblptrh	equ	0xFF7
  3418                           tblptrl	equ	0xFF6
  3419                           tablat	equ	0xFF5
  3420                           prodh	equ	0xFF4
  3421                           prodl	equ	0xFF3
  3422                           intcon	equ	0xFF2
  3423                           postinc0	equ	0xFEE
  3424                           wreg	equ	0xFE8
  3425                           indf1	equ	0xFE7
  3426                           postdec1	equ	0xFE5
  3427                           fsr1h	equ	0xFE2
  3428                           fsr1l	equ	0xFE1
  3429                           indf2	equ	0xFDF
  3430                           postinc2	equ	0xFDE
  3431                           postdec2	equ	0xFDD
  3432                           plusw2	equ	0xFDB
  3433                           fsr2h	equ	0xFDA
  3434                           fsr2l	equ	0xFD9
  3435                           status	equ	0xFD8
  3436                           
  3437 ;; *************** function _UART_buff_modulo_inc *****************
  3438 ;; Defined at:
  3439 ;;		line 105 in file "UART.c"
  3440 ;; Parameters:    Size  Location     Type
  3441 ;;  value           2   28[COMRAM] const unsigned int 
  3442 ;;  modulus         2   30[COMRAM] const unsigned int 
  3443 ;; Auto vars:     Size  Location     Type
  3444 ;;  my_value        2   32[COMRAM] unsigned int 
  3445 ;; Return value:  Size  Location     Type
  3446 ;;                  2   28[COMRAM] unsigned int 
  3447 ;; Registers used:
  3448 ;;		wreg, status,2, status,0
  3449 ;; Tracked objects:
  3450 ;;		On entry : 0/0
  3451 ;;		On exit  : 0/0
  3452 ;;		Unchanged: 0/0
  3453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3454 ;;      Params:         4       0       0       0       0       0       0
  3455 ;;      Locals:         2       0       0       0       0       0       0
  3456 ;;      Temps:          0       0       0       0       0       0       0
  3457 ;;      Totals:         6       0       0       0       0       0       0
  3458 ;;Total ram usage:        6 bytes
  3459 ;; Hardware stack levels used:    1
  3460 ;; Hardware stack levels required when called:    6
  3461 ;; This function calls:
  3462 ;;		Nothing
  3463 ;; This function is called by:
  3464 ;;		_UART_buff_put
  3465 ;;		_UART_buff_get
  3466 ;; This function uses a non-reentrant model
  3467 ;;
  3468                           
  3469                           	psect	text13
  3470  001D50                     __ptext13:
  3471                           	opt stack 0
  3472  001D50                     _UART_buff_modulo_inc:
  3473                           	opt stack 20
  3474                           
  3475                           ;UART.c: 106: unsigned int my_value = value + 1;
  3476                           
  3477                           ;incstack = 0
  3478  001D50  0E01               	movlw	1
  3479  001D52  241D               	addwf	UART_buff_modulo_inc@value,w,c
  3480  001D54  6E21               	movwf	UART_buff_modulo_inc@my_value,c
  3481  001D56  0E00               	movlw	0
  3482  001D58  201E               	addwfc	UART_buff_modulo_inc@value+1,w,c
  3483  001D5A  6E22               	movwf	UART_buff_modulo_inc@my_value+1,c
  3484                           
  3485                           ;UART.c: 107: if (my_value >= modulus) {
  3486  001D5C  501F               	movf	UART_buff_modulo_inc@modulus,w,c
  3487  001D5E  5C21               	subwf	UART_buff_modulo_inc@my_value,w,c
  3488  001D60  5020               	movf	UART_buff_modulo_inc@modulus+1,w,c
  3489  001D62  5822               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  3490  001D64  A0D8               	btfss	status,0,c
  3491  001D66  D004               	goto	l3652
  3492                           
  3493                           ;UART.c: 108: my_value = 0;
  3494  001D68  0E00               	movlw	0
  3495  001D6A  6E22               	movwf	UART_buff_modulo_inc@my_value+1,c
  3496  001D6C  0E00               	movlw	0
  3497  001D6E  6E21               	movwf	UART_buff_modulo_inc@my_value,c
  3498  001D70                     l3652:
  3499                           
  3500                           ;UART.c: 109: }
  3501                           ;UART.c: 110: return (my_value);
  3502  001D70  C021  F01D         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  3503  001D74  C022  F01E         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  3504  001D78  0012               	return	
  3505  001D7A                     __end_of_UART_buff_modulo_inc:
  3506                           	opt stack 0
  3507                           tblptru	equ	0xFF8
  3508                           tblptrh	equ	0xFF7
  3509                           tblptrl	equ	0xFF6
  3510                           tablat	equ	0xFF5
  3511                           prodh	equ	0xFF4
  3512                           prodl	equ	0xFF3
  3513                           intcon	equ	0xFF2
  3514                           postinc0	equ	0xFEE
  3515                           wreg	equ	0xFE8
  3516                           indf1	equ	0xFE7
  3517                           postdec1	equ	0xFE5
  3518                           fsr1h	equ	0xFE2
  3519                           fsr1l	equ	0xFE1
  3520                           indf2	equ	0xFDF
  3521                           postinc2	equ	0xFDE
  3522                           postdec2	equ	0xFDD
  3523                           plusw2	equ	0xFDB
  3524                           fsr2h	equ	0xFDA
  3525                           fsr2l	equ	0xFD9
  3526                           status	equ	0xFD8
  3527                           
  3528 ;; *************** function _CRC8 *****************
  3529 ;; Defined at:
  3530 ;;		line 21 in file "CarCom.c"
  3531 ;; Parameters:    Size  Location     Type
  3532 ;;  data            2   28[COMRAM] PTR const unsigned char 
  3533 ;;		 -> ProcessArray(30), sendData@SendArray(30), 
  3534 ;;  len             1   30[COMRAM] unsigned char 
  3535 ;; Auto vars:     Size  Location     Type
  3536 ;;  sum             1   31[COMRAM] unsigned char 
  3537 ;;  tempI           1   33[COMRAM] unsigned char 
  3538 ;;  extract         1   32[COMRAM] unsigned char 
  3539 ;;  crc             1   34[COMRAM] unsigned char 
  3540 ;; Return value:  Size  Location     Type
  3541 ;;                  1    wreg      unsigned char 
  3542 ;; Registers used:
  3543 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3544 ;; Tracked objects:
  3545 ;;		On entry : 0/0
  3546 ;;		On exit  : 0/0
  3547 ;;		Unchanged: 0/0
  3548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3549 ;;      Params:         3       0       0       0       0       0       0
  3550 ;;      Locals:         4       0       0       0       0       0       0
  3551 ;;      Temps:          0       0       0       0       0       0       0
  3552 ;;      Totals:         7       0       0       0       0       0       0
  3553 ;;Total ram usage:        7 bytes
  3554 ;; Hardware stack levels used:    1
  3555 ;; Hardware stack levels required when called:    6
  3556 ;; This function calls:
  3557 ;;		Nothing
  3558 ;; This function is called by:
  3559 ;;		_sendData
  3560 ;;		_receiveData
  3561 ;; This function uses a non-reentrant model
  3562 ;;
  3563                           
  3564                           	psect	text14
  3565  001AE4                     __ptext14:
  3566                           	opt stack 0
  3567  001AE4                     _CRC8:
  3568                           	opt stack 20
  3569                           
  3570                           ;CarCom.c: 22: unsigned char crc = 0x00;
  3571                           
  3572                           ;incstack = 0
  3573  001AE4  0E00               	movlw	0
  3574  001AE6  6E23               	movwf	CRC8@crc,c
  3575                           
  3576                           ;CarCom.c: 23: while (len--) {
  3577  001AE8  D01C               	goto	l3726
  3578  001AEA                     l3710:
  3579                           
  3580                           ;CarCom.c: 24: unsigned char extract = *data++;
  3581  001AEA  C01D  FFD9         	movff	CRC8@data,fsr2l
  3582  001AEE  C01E  FFDA         	movff	CRC8@data+1,fsr2h
  3583  001AF2  50DF               	movf	indf2,w,c
  3584  001AF4  6E21               	movwf	CRC8@extract,c
  3585  001AF6  4A1D               	infsnz	CRC8@data,f,c
  3586  001AF8  2A1E               	incf	CRC8@data+1,f,c
  3587                           
  3588                           ;CarCom.c: 25: unsigned char tempI;
  3589                           ;CarCom.c: 26: for (tempI = 8; tempI; tempI--) {
  3590  001AFA  0E08               	movlw	8
  3591  001AFC  6E22               	movwf	CRC8@tempI,c
  3592  001AFE  D00E               	goto	l3724
  3593  001B00                     l3716:
  3594                           
  3595                           ;CarCom.c: 27: unsigned char sum = (crc ^ extract) & 0x01;
  3596  001B00  5023               	movf	CRC8@crc,w,c
  3597  001B02  1821               	xorwf	CRC8@extract,w,c
  3598  001B04  0B01               	andlw	1
  3599  001B06  6E20               	movwf	CRC8@sum,c
  3600                           
  3601                           ;CarCom.c: 28: crc >>= 1;
  3602  001B08  90D8               	bcf	status,0,c
  3603  001B0A  3223               	rrcf	CRC8@crc,f,c
  3604                           
  3605                           ;CarCom.c: 29: if (sum) {
  3606  001B0C  5020               	movf	CRC8@sum,w,c
  3607  001B0E  B4D8               	btfsc	status,2,c
  3608  001B10  D002               	goto	l757
  3609                           
  3610                           ;CarCom.c: 30: crc ^= 0x8C;
  3611  001B12  0E8C               	movlw	140
  3612  001B14  1A23               	xorwf	CRC8@crc,f,c
  3613  001B16                     l757:
  3614                           
  3615                           ;CarCom.c: 31: }
  3616                           ;CarCom.c: 32: extract >>= 1;
  3617  001B16  90D8               	bcf	status,0,c
  3618  001B18  3221               	rrcf	CRC8@extract,f,c
  3619  001B1A  0622               	decf	CRC8@tempI,f,c
  3620  001B1C                     l3724:
  3621  001B1C  5022               	movf	CRC8@tempI,w,c
  3622  001B1E  A4D8               	btfss	status,2,c
  3623  001B20  D7EF               	goto	l3716
  3624  001B22                     l3726:
  3625  001B22  061F               	decf	CRC8@len,f,c
  3626  001B24  281F               	incf	CRC8@len,w,c
  3627  001B26  A4D8               	btfss	status,2,c
  3628  001B28  D7E0               	goto	l3710
  3629                           
  3630                           ;CarCom.c: 33: }
  3631                           ;CarCom.c: 34: }
  3632                           ;CarCom.c: 35: return crc;
  3633  001B2A  5023               	movf	CRC8@crc,w,c
  3634  001B2C  0012               	return	
  3635  001B2E                     __end_of_CRC8:
  3636                           	opt stack 0
  3637                           tblptru	equ	0xFF8
  3638                           tblptrh	equ	0xFF7
  3639                           tblptrl	equ	0xFF6
  3640                           tablat	equ	0xFF5
  3641                           prodh	equ	0xFF4
  3642                           prodl	equ	0xFF3
  3643                           intcon	equ	0xFF2
  3644                           postinc0	equ	0xFEE
  3645                           wreg	equ	0xFE8
  3646                           indf1	equ	0xFE7
  3647                           postdec1	equ	0xFE5
  3648                           fsr1h	equ	0xFE2
  3649                           fsr1l	equ	0xFE1
  3650                           indf2	equ	0xFDF
  3651                           postinc2	equ	0xFDE
  3652                           postdec2	equ	0xFDD
  3653                           plusw2	equ	0xFDB
  3654                           fsr2h	equ	0xFDA
  3655                           fsr2l	equ	0xFD9
  3656                           status	equ	0xFD8
  3657                           
  3658 ;; *************** function _GetDataDict *****************
  3659 ;; Defined at:
  3660 ;;		line 7 in file "CarDataDictionary.c"
  3661 ;; Parameters:    Size  Location     Type
  3662 ;;  DataTable       1    wreg     unsigned char 
  3663 ;;  DataTableInd    1   28[COMRAM] unsigned char 
  3664 ;;  DataArray       2   29[COMRAM] PTR unsigned char 
  3665 ;;		 -> ComController@DataToSend(4), 
  3666 ;;  numbofbytes     1   31[COMRAM] unsigned char 
  3667 ;; Auto vars:     Size  Location     Type
  3668 ;;  DataTable       1   33[COMRAM] unsigned char 
  3669 ;;  ReturnCounte    1   35[COMRAM] unsigned char 
  3670 ;;  DataCount       1   34[COMRAM] unsigned char 
  3671 ;;  Error           1   32[COMRAM] unsigned char 
  3672 ;; Return value:  Size  Location     Type
  3673 ;;                  1    wreg      unsigned char 
  3674 ;; Registers used:
  3675 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3676 ;; Tracked objects:
  3677 ;;		On entry : 0/0
  3678 ;;		On exit  : 0/0
  3679 ;;		Unchanged: 0/0
  3680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3681 ;;      Params:         4       0       0       0       0       0       0
  3682 ;;      Locals:         4       0       0       0       0       0       0
  3683 ;;      Temps:          0       0       0       0       0       0       0
  3684 ;;      Totals:         8       0       0       0       0       0       0
  3685 ;;Total ram usage:        8 bytes
  3686 ;; Hardware stack levels used:    1
  3687 ;; Hardware stack levels required when called:    6
  3688 ;; This function calls:
  3689 ;;		Nothing
  3690 ;; This function is called by:
  3691 ;;		_ComController
  3692 ;; This function uses a non-reentrant model
  3693 ;;
  3694                           
  3695                           	psect	text15
  3696  001514                     __ptext15:
  3697                           	opt stack 0
  3698  001514                     _GetDataDict:
  3699                           	opt stack 21
  3700                           
  3701                           ;incstack = 0
  3702                           ;GetDataDict@DataTable stored from wreg
  3703  001514  6E22               	movwf	GetDataDict@DataTable,c
  3704                           
  3705                           ;CarDataDictionary.c: 8: unsigned char Error = 0;
  3706  001516  0E00               	movlw	0
  3707  001518  6E21               	movwf	GetDataDict@Error,c
  3708                           
  3709                           ;CarDataDictionary.c: 9: unsigned char DataCount = 0;
  3710  00151A  0E00               	movlw	0
  3711  00151C  6E23               	movwf	GetDataDict@DataCount,c
  3712                           
  3713                           ;CarDataDictionary.c: 10: unsigned char ReturnCounter = 0;
  3714  00151E  0E00               	movlw	0
  3715  001520  6E24               	movwf	GetDataDict@ReturnCounter,c
  3716                           
  3717                           ;CarDataDictionary.c: 11: switch(DataTable){
  3718  001522  D03C               	goto	l3920
  3719  001524                     l3900:
  3720                           
  3721                           ;CarDataDictionary.c: 13: DataCount = DataTableIndex + numbofbytes;
  3722  001524  501D               	movf	GetDataDict@DataTableIndex,w,c
  3723  001526  2420               	addwf	GetDataDict@numbofbytes,w,c
  3724  001528  6E23               	movwf	GetDataDict@DataCount,c
  3725  00152A  D014               	goto	l3908
  3726  00152C                     l3902:
  3727                           
  3728                           ;CarDataDictionary.c: 15: DataArray[ReturnCounter] = DataTableArrayOne[DataTableIndex];
  3729  00152C  501D               	movf	GetDataDict@DataTableIndex,w,c
  3730  00152E  0D01               	mullw	1
  3731  001530  0EEA               	movlw	low _DataTableArrayOne
  3732  001532  24F3               	addwf	prodl,w,c
  3733  001534  6ED9               	movwf	fsr2l,c
  3734  001536  0E00               	movlw	high _DataTableArrayOne
  3735  001538  20F4               	addwfc	prodh,w,c
  3736  00153A  6EDA               	movwf	fsr2h,c
  3737  00153C  5024               	movf	GetDataDict@ReturnCounter,w,c
  3738  00153E  0D01               	mullw	1
  3739  001540  50F3               	movf	prodl,w,c
  3740  001542  241E               	addwf	GetDataDict@DataArray,w,c
  3741  001544  6EE1               	movwf	fsr1l,c
  3742  001546  50F4               	movf	prodh,w,c
  3743  001548  201F               	addwfc	GetDataDict@DataArray+1,w,c
  3744  00154A  6EE2               	movwf	fsr1h,c
  3745  00154C  CFDF FFE7          	movff	indf2,indf1
  3746                           
  3747                           ;CarDataDictionary.c: 16: ReturnCounter++;
  3748  001550  2A24               	incf	GetDataDict@ReturnCounter,f,c
  3749  001552  2A1D               	incf	GetDataDict@DataTableIndex,f,c
  3750  001554                     l3908:
  3751  001554  5023               	movf	GetDataDict@DataCount,w,c
  3752  001556  5C1D               	subwf	GetDataDict@DataTableIndex,w,c
  3753  001558  B0D8               	btfsc	status,0,c
  3754  00155A  0012               	return	
  3755  00155C  D7E7               	goto	l3902
  3756  00155E                     l3910:
  3757                           
  3758                           ;CarDataDictionary.c: 20: DataCount = DataTableIndex + numbofbytes;
  3759  00155E  501D               	movf	GetDataDict@DataTableIndex,w,c
  3760  001560  2420               	addwf	GetDataDict@numbofbytes,w,c
  3761  001562  6E23               	movwf	GetDataDict@DataCount,c
  3762  001564  D014               	goto	l3918
  3763  001566                     l3912:
  3764                           
  3765                           ;CarDataDictionary.c: 22: DataArray[ReturnCounter] = DataTableArrayFour[DataTableIndex];
  3766  001566  501D               	movf	GetDataDict@DataTableIndex,w,c
  3767  001568  0D01               	mullw	1
  3768  00156A  0E2E               	movlw	low _DataTableArrayFour
  3769  00156C  24F3               	addwf	prodl,w,c
  3770  00156E  6ED9               	movwf	fsr2l,c
  3771  001570  0E00               	movlw	high _DataTableArrayFour
  3772  001572  20F4               	addwfc	prodh,w,c
  3773  001574  6EDA               	movwf	fsr2h,c
  3774  001576  5024               	movf	GetDataDict@ReturnCounter,w,c
  3775  001578  0D01               	mullw	1
  3776  00157A  50F3               	movf	prodl,w,c
  3777  00157C  241E               	addwf	GetDataDict@DataArray,w,c
  3778  00157E  6EE1               	movwf	fsr1l,c
  3779  001580  50F4               	movf	prodh,w,c
  3780  001582  201F               	addwfc	GetDataDict@DataArray+1,w,c
  3781  001584  6EE2               	movwf	fsr1h,c
  3782  001586  CFDF FFE7          	movff	indf2,indf1
  3783                           
  3784                           ;CarDataDictionary.c: 23: ReturnCounter++;
  3785  00158A  2A24               	incf	GetDataDict@ReturnCounter,f,c
  3786  00158C  2A1D               	incf	GetDataDict@DataTableIndex,f,c
  3787  00158E                     l3918:
  3788  00158E  5023               	movf	GetDataDict@DataCount,w,c
  3789  001590  5C1D               	subwf	GetDataDict@DataTableIndex,w,c
  3790  001592  B0D8               	btfsc	status,0,c
  3791  001594  0012               	return	
  3792  001596  D7E7               	goto	l3912
  3793  001598                     l867:
  3794                           
  3795                           ;CarDataDictionary.c: 27: Error = -1;
  3796  001598  6821               	setf	GetDataDict@Error,c
  3797                           
  3798                           ;CarDataDictionary.c: 28: }
  3799  00159A  0012               	return	
  3800  00159C                     l3920:
  3801  00159C  5022               	movf	GetDataDict@DataTable,w,c
  3802                           
  3803                           ; Switch size 1, requested type "space"
  3804                           ; Number of cases is 2, Range of values is 0 to 4
  3805                           ; switch strategies available:
  3806                           ; Name         Instructions Cycles
  3807                           ; simple_byte            7     4 (average)
  3808                           ;	Chosen strategy is simple_byte
  3809  00159E  0A00               	xorlw	0	; case 0
  3810  0015A0  B4D8               	btfsc	status,2,c
  3811  0015A2  D7C0               	goto	l3900
  3812  0015A4  0A04               	xorlw	4	; case 4
  3813  0015A6  B4D8               	btfsc	status,2,c
  3814  0015A8  D7DA               	goto	l3910
  3815  0015AA  D7F6               	goto	l867
  3816  0015AC                     __end_of_GetDataDict:
  3817                           	opt stack 0
  3818                           tblptru	equ	0xFF8
  3819                           tblptrh	equ	0xFF7
  3820                           tblptrl	equ	0xFF6
  3821                           tablat	equ	0xFF5
  3822                           prodh	equ	0xFF4
  3823                           prodl	equ	0xFF3
  3824                           intcon	equ	0xFF2
  3825                           postinc0	equ	0xFEE
  3826                           wreg	equ	0xFE8
  3827                           indf1	equ	0xFE7
  3828                           postdec1	equ	0xFE5
  3829                           fsr1h	equ	0xFE2
  3830                           fsr1l	equ	0xFE1
  3831                           indf2	equ	0xFDF
  3832                           postinc2	equ	0xFDE
  3833                           postdec2	equ	0xFDD
  3834                           plusw2	equ	0xFDB
  3835                           fsr2h	equ	0xFDA
  3836                           fsr2l	equ	0xFD9
  3837                           status	equ	0xFD8
  3838                           
  3839 ;; *************** function _ClearBuffer *****************
  3840 ;; Defined at:
  3841 ;;		line 159 in file "UART.c"
  3842 ;; Parameters:    Size  Location     Type
  3843 ;;		None
  3844 ;; Auto vars:     Size  Location     Type
  3845 ;;		None
  3846 ;; Return value:  Size  Location     Type
  3847 ;;                  1    wreg      void 
  3848 ;; Registers used:
  3849 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3850 ;; Tracked objects:
  3851 ;;		On entry : 0/0
  3852 ;;		On exit  : 0/0
  3853 ;;		Unchanged: 0/0
  3854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3855 ;;      Params:         0       0       0       0       0       0       0
  3856 ;;      Locals:         0       0       0       0       0       0       0
  3857 ;;      Temps:          0       0       0       0       0       0       0
  3858 ;;      Totals:         0       0       0       0       0       0       0
  3859 ;;Total ram usage:        0 bytes
  3860 ;; Hardware stack levels used:    1
  3861 ;; Hardware stack levels required when called:    8
  3862 ;; This function calls:
  3863 ;;		_UART_buff_flush
  3864 ;; This function is called by:
  3865 ;;		_receiveData
  3866 ;; This function uses a non-reentrant model
  3867 ;;
  3868                           
  3869                           	psect	text16
  3870  001EAE                     __ptext16:
  3871                           	opt stack 0
  3872  001EAE                     _ClearBuffer:
  3873                           	opt stack 20
  3874                           
  3875                           ;UART.c: 160: UART_buff_flush(&input_buffer, 1);
  3876                           
  3877                           ;incstack = 0
  3878  001EAE  0E3C               	movlw	low _input_buffer
  3879  001EB0  6E25               	movwf	UART_buff_flush@_this,c
  3880  001EB2  0E01               	movlw	high _input_buffer
  3881  001EB4  6E26               	movwf	UART_buff_flush@_this+1,c
  3882  001EB6  0E00               	movlw	0
  3883  001EB8  6E28               	movwf	UART_buff_flush@clearBuffer+1,c
  3884  001EBA  0E01               	movlw	1
  3885  001EBC  6E27               	movwf	UART_buff_flush@clearBuffer,c
  3886  001EBE  EC62  F00C         	call	_UART_buff_flush	;wreg free
  3887  001EC2  0012               	return		;funcret
  3888  001EC4                     __end_of_ClearBuffer:
  3889                           	opt stack 0
  3890                           tblptru	equ	0xFF8
  3891                           tblptrh	equ	0xFF7
  3892                           tblptrl	equ	0xFF6
  3893                           tablat	equ	0xFF5
  3894                           prodh	equ	0xFF4
  3895                           prodl	equ	0xFF3
  3896                           intcon	equ	0xFF2
  3897                           postinc0	equ	0xFEE
  3898                           wreg	equ	0xFE8
  3899                           indf1	equ	0xFE7
  3900                           postdec1	equ	0xFE5
  3901                           fsr1h	equ	0xFE2
  3902                           fsr1l	equ	0xFE1
  3903                           indf2	equ	0xFDF
  3904                           postinc2	equ	0xFDE
  3905                           postdec2	equ	0xFDD
  3906                           plusw2	equ	0xFDB
  3907                           fsr2h	equ	0xFDA
  3908                           fsr2l	equ	0xFD9
  3909                           status	equ	0xFD8
  3910                           
  3911 ;; *************** function _UART_buff_flush *****************
  3912 ;; Defined at:
  3913 ;;		line 92 in file "UART.c"
  3914 ;; Parameters:    Size  Location     Type
  3915 ;;  _this           2   36[COMRAM] PTR struct UART_ring_buf
  3916 ;;		 -> input_buffer(106), 
  3917 ;;  clearBuffer     2   38[COMRAM] const int 
  3918 ;; Auto vars:     Size  Location     Type
  3919 ;;		None
  3920 ;; Return value:  Size  Location     Type
  3921 ;;                  1    wreg      void 
  3922 ;; Registers used:
  3923 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3924 ;; Tracked objects:
  3925 ;;		On entry : 0/0
  3926 ;;		On exit  : 0/0
  3927 ;;		Unchanged: 0/0
  3928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3929 ;;      Params:         4       0       0       0       0       0       0
  3930 ;;      Locals:         0       0       0       0       0       0       0
  3931 ;;      Temps:          0       0       0       0       0       0       0
  3932 ;;      Totals:         4       0       0       0       0       0       0
  3933 ;;Total ram usage:        4 bytes
  3934 ;; Hardware stack levels used:    1
  3935 ;; Hardware stack levels required when called:    7
  3936 ;; This function calls:
  3937 ;;		_memset
  3938 ;; This function is called by:
  3939 ;;		_ClearBuffer
  3940 ;; This function uses a non-reentrant model
  3941 ;;
  3942                           
  3943                           	psect	text17
  3944  0018C4                     __ptext17:
  3945                           	opt stack 0
  3946  0018C4                     _UART_buff_flush:
  3947                           	opt stack 20
  3948                           
  3949                           ;UART.c: 93: _this->count = 0;
  3950                           
  3951                           ;incstack = 0
  3952  0018C4  EE20 F068          	lfsr	2,104
  3953  0018C8  5025               	movf	UART_buff_flush@_this,w,c
  3954  0018CA  26D9               	addwf	fsr2l,f,c
  3955  0018CC  5026               	movf	UART_buff_flush@_this+1,w,c
  3956  0018CE  22DA               	addwfc	fsr2h,f,c
  3957  0018D0  0E00               	movlw	0
  3958  0018D2  6EDE               	movwf	postinc2,c
  3959  0018D4  0E00               	movlw	0
  3960  0018D6  6EDD               	movwf	postdec2,c
  3961                           
  3962                           ;UART.c: 94: _this->head = 0;
  3963  0018D8  EE20 F064          	lfsr	2,100
  3964  0018DC  5025               	movf	UART_buff_flush@_this,w,c
  3965  0018DE  26D9               	addwf	fsr2l,f,c
  3966  0018E0  5026               	movf	UART_buff_flush@_this+1,w,c
  3967  0018E2  22DA               	addwfc	fsr2h,f,c
  3968  0018E4  0E00               	movlw	0
  3969  0018E6  6EDE               	movwf	postinc2,c
  3970  0018E8  0E00               	movlw	0
  3971  0018EA  6EDD               	movwf	postdec2,c
  3972                           
  3973                           ;UART.c: 95: _this->tail = 0;
  3974  0018EC  EE20 F066          	lfsr	2,102
  3975  0018F0  5025               	movf	UART_buff_flush@_this,w,c
  3976  0018F2  26D9               	addwf	fsr2l,f,c
  3977  0018F4  5026               	movf	UART_buff_flush@_this+1,w,c
  3978  0018F6  22DA               	addwfc	fsr2h,f,c
  3979  0018F8  0E00               	movlw	0
  3980  0018FA  6EDE               	movwf	postinc2,c
  3981  0018FC  0E00               	movlw	0
  3982  0018FE  6EDD               	movwf	postdec2,c
  3983                           
  3984                           ;UART.c: 96: if (clearBuffer) {
  3985  001900  5027               	movf	UART_buff_flush@clearBuffer,w,c
  3986  001902  1028               	iorwf	UART_buff_flush@clearBuffer+1,w,c
  3987  001904  B4D8               	btfsc	status,2,c
  3988  001906  0012               	return	
  3989                           
  3990                           ;UART.c: 97: memset(_this->buf, 0, sizeof (_this->buf));
  3991  001908  C025  F01D         	movff	UART_buff_flush@_this,memset@p1
  3992  00190C  C026  F01E         	movff	UART_buff_flush@_this+1,memset@p1+1
  3993  001910  0E00               	movlw	0
  3994  001912  6E20               	movwf	memset@c+1,c
  3995  001914  0E00               	movlw	0
  3996  001916  6E1F               	movwf	memset@c,c
  3997  001918  0E00               	movlw	0
  3998  00191A  6E22               	movwf	memset@n+1,c
  3999  00191C  0E64               	movlw	100
  4000  00191E  6E21               	movwf	memset@n,c
  4001  001920  EC92  F00E         	call	_memset	;wreg free
  4002  001924  0012               	return	
  4003  001926                     __end_of_UART_buff_flush:
  4004                           	opt stack 0
  4005                           tblptru	equ	0xFF8
  4006                           tblptrh	equ	0xFF7
  4007                           tblptrl	equ	0xFF6
  4008                           tablat	equ	0xFF5
  4009                           prodh	equ	0xFF4
  4010                           prodl	equ	0xFF3
  4011                           intcon	equ	0xFF2
  4012                           postinc0	equ	0xFEE
  4013                           wreg	equ	0xFE8
  4014                           indf1	equ	0xFE7
  4015                           postdec1	equ	0xFE5
  4016                           fsr1h	equ	0xFE2
  4017                           fsr1l	equ	0xFE1
  4018                           indf2	equ	0xFDF
  4019                           postinc2	equ	0xFDE
  4020                           postdec2	equ	0xFDD
  4021                           plusw2	equ	0xFDB
  4022                           fsr2h	equ	0xFDA
  4023                           fsr2l	equ	0xFD9
  4024                           status	equ	0xFD8
  4025                           
  4026 ;; *************** function _SYSTEM_Initialize *****************
  4027 ;; Defined at:
  4028 ;;		line 113 in file "mcc_generated_files/mcc.c"
  4029 ;; Parameters:    Size  Location     Type
  4030 ;;		None
  4031 ;; Auto vars:     Size  Location     Type
  4032 ;;		None
  4033 ;; Return value:  Size  Location     Type
  4034 ;;                  1    wreg      void 
  4035 ;; Registers used:
  4036 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4037 ;; Tracked objects:
  4038 ;;		On entry : 0/0
  4039 ;;		On exit  : 0/0
  4040 ;;		Unchanged: 0/0
  4041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4042 ;;      Params:         0       0       0       0       0       0       0
  4043 ;;      Locals:         0       0       0       0       0       0       0
  4044 ;;      Temps:          0       0       0       0       0       0       0
  4045 ;;      Totals:         0       0       0       0       0       0       0
  4046 ;;Total ram usage:        0 bytes
  4047 ;; Hardware stack levels used:    1
  4048 ;; Hardware stack levels required when called:    9
  4049 ;; This function calls:
  4050 ;;		_ADC_Initialize
  4051 ;;		_EUSART1_Initialize
  4052 ;;		_INTERRUPT_Initialize
  4053 ;;		_OSCILLATOR_Initialize
  4054 ;;		_PIN_MANAGER_Initialize
  4055 ;;		_PWM4_Initialize
  4056 ;;		_TMR1_Initialize
  4057 ;;		_TMR2_Initialize
  4058 ;; This function is called by:
  4059 ;;		_main
  4060 ;; This function uses a non-reentrant model
  4061 ;;
  4062                           
  4063                           	psect	text18
  4064  001DCA                     __ptext18:
  4065                           	opt stack 0
  4066  001DCA                     _SYSTEM_Initialize:
  4067                           	opt stack 21
  4068                           
  4069                           ;mcc.c: 114: OSCILLATOR_Initialize();
  4070                           
  4071                           ;incstack = 0
  4072  001DCA  EC9B  F00F         	call	_OSCILLATOR_Initialize	;wreg free
  4073                           
  4074                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  4075  001DCE  EC25  F00C         	call	_PIN_MANAGER_Initialize	;wreg free
  4076                           
  4077                           ;mcc.c: 116: INTERRUPT_Initialize();
  4078  001DD2  ECA2  F00F         	call	_INTERRUPT_Initialize	;wreg free
  4079                           
  4080                           ;mcc.c: 117: EUSART1_Initialize();
  4081  001DD6  ECE1  F00D         	call	_EUSART1_Initialize	;wreg free
  4082                           
  4083                           ;mcc.c: 118: PWM4_Initialize();
  4084  001DDA  EC77  F00F         	call	_PWM4_Initialize	;wreg free
  4085                           
  4086                           ;mcc.c: 119: TMR1_Initialize();
  4087  001DDE  ECF7  F00E         	call	_TMR1_Initialize	;wreg free
  4088                           
  4089                           ;mcc.c: 120: TMR2_Initialize();
  4090  001DE2  EC6D  F00F         	call	_TMR2_Initialize	;wreg free
  4091                           
  4092                           ;mcc.c: 121: LATB4 = 1;
  4093  001DE6  888A               	bsf	3978,4,c	;volatile
  4094                           
  4095                           ;mcc.c: 122: ADC_Initialize();
  4096  001DE8  EC35  F00F         	call	_ADC_Initialize	;wreg free
  4097  001DEC  0012               	return		;funcret
  4098  001DEE                     __end_of_SYSTEM_Initialize:
  4099                           	opt stack 0
  4100                           tblptru	equ	0xFF8
  4101                           tblptrh	equ	0xFF7
  4102                           tblptrl	equ	0xFF6
  4103                           tablat	equ	0xFF5
  4104                           prodh	equ	0xFF4
  4105                           prodl	equ	0xFF3
  4106                           intcon	equ	0xFF2
  4107                           postinc0	equ	0xFEE
  4108                           wreg	equ	0xFE8
  4109                           indf1	equ	0xFE7
  4110                           postdec1	equ	0xFE5
  4111                           fsr1h	equ	0xFE2
  4112                           fsr1l	equ	0xFE1
  4113                           indf2	equ	0xFDF
  4114                           postinc2	equ	0xFDE
  4115                           postdec2	equ	0xFDD
  4116                           plusw2	equ	0xFDB
  4117                           fsr2h	equ	0xFDA
  4118                           fsr2l	equ	0xFD9
  4119                           status	equ	0xFD8
  4120                           
  4121 ;; *************** function _TMR2_Initialize *****************
  4122 ;; Defined at:
  4123 ;;		line 9 in file "mcc_generated_files/tmr2.c"
  4124 ;; Parameters:    Size  Location     Type
  4125 ;;		None
  4126 ;; Auto vars:     Size  Location     Type
  4127 ;;		None
  4128 ;; Return value:  Size  Location     Type
  4129 ;;                  1    wreg      void 
  4130 ;; Registers used:
  4131 ;;		wreg, status,2, cstack
  4132 ;; Tracked objects:
  4133 ;;		On entry : 0/0
  4134 ;;		On exit  : 0/0
  4135 ;;		Unchanged: 0/0
  4136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4137 ;;      Params:         0       0       0       0       0       0       0
  4138 ;;      Locals:         0       0       0       0       0       0       0
  4139 ;;      Temps:          0       0       0       0       0       0       0
  4140 ;;      Totals:         0       0       0       0       0       0       0
  4141 ;;Total ram usage:        0 bytes
  4142 ;; Hardware stack levels used:    1
  4143 ;; Hardware stack levels required when called:    7
  4144 ;; This function calls:
  4145 ;;		_TMR2_StartTimer
  4146 ;; This function is called by:
  4147 ;;		_SYSTEM_Initialize
  4148 ;; This function uses a non-reentrant model
  4149 ;;
  4150                           
  4151                           	psect	text19
  4152  001EDA                     __ptext19:
  4153                           	opt stack 0
  4154  001EDA                     _TMR2_Initialize:
  4155                           	opt stack 22
  4156                           
  4157                           ;tmr2.c: 14: T2CON = 0x1A;
  4158                           
  4159                           ;incstack = 0
  4160  001EDA  0E1A               	movlw	26
  4161  001EDC  6EBA               	movwf	4026,c	;volatile
  4162                           
  4163                           ;tmr2.c: 17: PR2 = 0x7C;
  4164  001EDE  0E7C               	movlw	124
  4165  001EE0  6EBB               	movwf	4027,c	;volatile
  4166                           
  4167                           ;tmr2.c: 20: TMR2 = 0x00;
  4168  001EE2  0E00               	movlw	0
  4169  001EE4  6EBC               	movwf	4028,c	;volatile
  4170                           
  4171                           ;tmr2.c: 23: PIR1bits.TMR2IF = 0;
  4172  001EE6  929E               	bcf	3998,1,c	;volatile
  4173                           
  4174                           ;tmr2.c: 26: TMR2_StartTimer();
  4175  001EE8  ECB4  F00F         	call	_TMR2_StartTimer	;wreg free
  4176  001EEC  0012               	return		;funcret
  4177  001EEE                     __end_of_TMR2_Initialize:
  4178                           	opt stack 0
  4179                           tblptru	equ	0xFF8
  4180                           tblptrh	equ	0xFF7
  4181                           tblptrl	equ	0xFF6
  4182                           tablat	equ	0xFF5
  4183                           prodh	equ	0xFF4
  4184                           prodl	equ	0xFF3
  4185                           intcon	equ	0xFF2
  4186                           postinc0	equ	0xFEE
  4187                           wreg	equ	0xFE8
  4188                           indf1	equ	0xFE7
  4189                           postdec1	equ	0xFE5
  4190                           fsr1h	equ	0xFE2
  4191                           fsr1l	equ	0xFE1
  4192                           indf2	equ	0xFDF
  4193                           postinc2	equ	0xFDE
  4194                           postdec2	equ	0xFDD
  4195                           plusw2	equ	0xFDB
  4196                           fsr2h	equ	0xFDA
  4197                           fsr2l	equ	0xFD9
  4198                           status	equ	0xFD8
  4199                           
  4200 ;; *************** function _TMR2_StartTimer *****************
  4201 ;; Defined at:
  4202 ;;		line 29 in file "mcc_generated_files/tmr2.c"
  4203 ;; Parameters:    Size  Location     Type
  4204 ;;		None
  4205 ;; Auto vars:     Size  Location     Type
  4206 ;;		None
  4207 ;; Return value:  Size  Location     Type
  4208 ;;                  1    wreg      void 
  4209 ;; Registers used:
  4210 ;;		None
  4211 ;; Tracked objects:
  4212 ;;		On entry : 0/0
  4213 ;;		On exit  : 0/0
  4214 ;;		Unchanged: 0/0
  4215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4216 ;;      Params:         0       0       0       0       0       0       0
  4217 ;;      Locals:         0       0       0       0       0       0       0
  4218 ;;      Temps:          0       0       0       0       0       0       0
  4219 ;;      Totals:         0       0       0       0       0       0       0
  4220 ;;Total ram usage:        0 bytes
  4221 ;; Hardware stack levels used:    1
  4222 ;; Hardware stack levels required when called:    6
  4223 ;; This function calls:
  4224 ;;		Nothing
  4225 ;; This function is called by:
  4226 ;;		_TMR2_Initialize
  4227 ;; This function uses a non-reentrant model
  4228 ;;
  4229                           
  4230                           	psect	text20
  4231  001F68                     __ptext20:
  4232                           	opt stack 0
  4233  001F68                     _TMR2_StartTimer:
  4234                           	opt stack 22
  4235                           
  4236                           ;tmr2.c: 32: T2CONbits.TMR2ON = 1;
  4237                           
  4238                           ;incstack = 0
  4239  001F68  84BA               	bsf	4026,2,c	;volatile
  4240  001F6A  0012               	return		;funcret
  4241  001F6C                     __end_of_TMR2_StartTimer:
  4242                           	opt stack 0
  4243                           tblptru	equ	0xFF8
  4244                           tblptrh	equ	0xFF7
  4245                           tblptrl	equ	0xFF6
  4246                           tablat	equ	0xFF5
  4247                           prodh	equ	0xFF4
  4248                           prodl	equ	0xFF3
  4249                           intcon	equ	0xFF2
  4250                           postinc0	equ	0xFEE
  4251                           wreg	equ	0xFE8
  4252                           indf1	equ	0xFE7
  4253                           postdec1	equ	0xFE5
  4254                           fsr1h	equ	0xFE2
  4255                           fsr1l	equ	0xFE1
  4256                           indf2	equ	0xFDF
  4257                           postinc2	equ	0xFDE
  4258                           postdec2	equ	0xFDD
  4259                           plusw2	equ	0xFDB
  4260                           fsr2h	equ	0xFDA
  4261                           fsr2l	equ	0xFD9
  4262                           status	equ	0xFD8
  4263                           
  4264 ;; *************** function _TMR1_Initialize *****************
  4265 ;; Defined at:
  4266 ;;		line 66 in file "mcc_generated_files/tmr1.c"
  4267 ;; Parameters:    Size  Location     Type
  4268 ;;		None
  4269 ;; Auto vars:     Size  Location     Type
  4270 ;;		None
  4271 ;; Return value:  Size  Location     Type
  4272 ;;                  1    wreg      void 
  4273 ;; Registers used:
  4274 ;;		wreg, status,2, cstack
  4275 ;; Tracked objects:
  4276 ;;		On entry : 0/0
  4277 ;;		On exit  : 0/0
  4278 ;;		Unchanged: 0/0
  4279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4280 ;;      Params:         0       0       0       0       0       0       0
  4281 ;;      Locals:         0       0       0       0       0       0       0
  4282 ;;      Temps:          0       0       0       0       0       0       0
  4283 ;;      Totals:         0       0       0       0       0       0       0
  4284 ;;Total ram usage:        0 bytes
  4285 ;; Hardware stack levels used:    1
  4286 ;; Hardware stack levels required when called:    7
  4287 ;; This function calls:
  4288 ;;		_TMR1_StartTimer
  4289 ;; This function is called by:
  4290 ;;		_SYSTEM_Initialize
  4291 ;; This function uses a non-reentrant model
  4292 ;;
  4293                           
  4294                           	psect	text21
  4295  001DEE                     __ptext21:
  4296                           	opt stack 0
  4297  001DEE                     _TMR1_Initialize:
  4298                           	opt stack 22
  4299                           
  4300                           ;tmr1.c: 71: T1CON = 0x00;
  4301                           
  4302                           ;incstack = 0
  4303  001DEE  0E00               	movlw	0
  4304  001DF0  6ECD               	movwf	4045,c	;volatile
  4305                           
  4306                           ;tmr1.c: 75: T1GCON = 0x00;
  4307  001DF2  0E00               	movlw	0
  4308  001DF4  6ECC               	movwf	4044,c	;volatile
  4309                           
  4310                           ;tmr1.c: 78: TMR1H = 0x00;
  4311  001DF6  0E00               	movlw	0
  4312  001DF8  6ECF               	movwf	4047,c	;volatile
  4313                           
  4314                           ;tmr1.c: 81: TMR1L = 0x00;
  4315  001DFA  0E00               	movlw	0
  4316  001DFC  6ECE               	movwf	4046,c	;volatile
  4317                           
  4318                           ;tmr1.c: 84: timer1ReloadVal=0;
  4319  001DFE  0E00               	movlw	0
  4320  001E00  6E3A               	movwf	_timer1ReloadVal+1,c	;volatile
  4321  001E02  0E00               	movlw	0
  4322  001E04  6E39               	movwf	_timer1ReloadVal,c	;volatile
  4323                           
  4324                           ;tmr1.c: 87: PIR1bits.TMR1IF = 0;
  4325  001E06  909E               	bcf	3998,0,c	;volatile
  4326                           
  4327                           ;tmr1.c: 90: PIE1bits.TMR1IE = 1;
  4328  001E08  809D               	bsf	3997,0,c	;volatile
  4329                           
  4330                           ;tmr1.c: 93: TMR1_StartTimer();
  4331  001E0A  ECB6  F00F         	call	_TMR1_StartTimer	;wreg free
  4332  001E0E  0012               	return		;funcret
  4333  001E10                     __end_of_TMR1_Initialize:
  4334                           	opt stack 0
  4335                           tblptru	equ	0xFF8
  4336                           tblptrh	equ	0xFF7
  4337                           tblptrl	equ	0xFF6
  4338                           tablat	equ	0xFF5
  4339                           prodh	equ	0xFF4
  4340                           prodl	equ	0xFF3
  4341                           intcon	equ	0xFF2
  4342                           postinc0	equ	0xFEE
  4343                           wreg	equ	0xFE8
  4344                           indf1	equ	0xFE7
  4345                           postdec1	equ	0xFE5
  4346                           fsr1h	equ	0xFE2
  4347                           fsr1l	equ	0xFE1
  4348                           indf2	equ	0xFDF
  4349                           postinc2	equ	0xFDE
  4350                           postdec2	equ	0xFDD
  4351                           plusw2	equ	0xFDB
  4352                           fsr2h	equ	0xFDA
  4353                           fsr2l	equ	0xFD9
  4354                           status	equ	0xFD8
  4355                           
  4356 ;; *************** function _TMR1_StartTimer *****************
  4357 ;; Defined at:
  4358 ;;		line 96 in file "mcc_generated_files/tmr1.c"
  4359 ;; Parameters:    Size  Location     Type
  4360 ;;		None
  4361 ;; Auto vars:     Size  Location     Type
  4362 ;;		None
  4363 ;; Return value:  Size  Location     Type
  4364 ;;                  1    wreg      void 
  4365 ;; Registers used:
  4366 ;;		None
  4367 ;; Tracked objects:
  4368 ;;		On entry : 0/0
  4369 ;;		On exit  : 0/0
  4370 ;;		Unchanged: 0/0
  4371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4372 ;;      Params:         0       0       0       0       0       0       0
  4373 ;;      Locals:         0       0       0       0       0       0       0
  4374 ;;      Temps:          0       0       0       0       0       0       0
  4375 ;;      Totals:         0       0       0       0       0       0       0
  4376 ;;Total ram usage:        0 bytes
  4377 ;; Hardware stack levels used:    1
  4378 ;; Hardware stack levels required when called:    6
  4379 ;; This function calls:
  4380 ;;		Nothing
  4381 ;; This function is called by:
  4382 ;;		_TMR1_Initialize
  4383 ;; This function uses a non-reentrant model
  4384 ;;
  4385                           
  4386                           	psect	text22
  4387  001F6C                     __ptext22:
  4388                           	opt stack 0
  4389  001F6C                     _TMR1_StartTimer:
  4390                           	opt stack 22
  4391                           
  4392                           ;tmr1.c: 99: T1CONbits.TMR1ON = 1;
  4393                           
  4394                           ;incstack = 0
  4395  001F6C  80CD               	bsf	4045,0,c	;volatile
  4396  001F6E  0012               	return		;funcret
  4397  001F70                     __end_of_TMR1_StartTimer:
  4398                           	opt stack 0
  4399                           tblptru	equ	0xFF8
  4400                           tblptrh	equ	0xFF7
  4401                           tblptrl	equ	0xFF6
  4402                           tablat	equ	0xFF5
  4403                           prodh	equ	0xFF4
  4404                           prodl	equ	0xFF3
  4405                           intcon	equ	0xFF2
  4406                           postinc0	equ	0xFEE
  4407                           wreg	equ	0xFE8
  4408                           indf1	equ	0xFE7
  4409                           postdec1	equ	0xFE5
  4410                           fsr1h	equ	0xFE2
  4411                           fsr1l	equ	0xFE1
  4412                           indf2	equ	0xFDF
  4413                           postinc2	equ	0xFDE
  4414                           postdec2	equ	0xFDD
  4415                           plusw2	equ	0xFDB
  4416                           fsr2h	equ	0xFDA
  4417                           fsr2l	equ	0xFD9
  4418                           status	equ	0xFD8
  4419                           
  4420 ;; *************** function _PWM4_Initialize *****************
  4421 ;; Defined at:
  4422 ;;		line 64 in file "mcc_generated_files/pwm4.c"
  4423 ;; Parameters:    Size  Location     Type
  4424 ;;		None
  4425 ;; Auto vars:     Size  Location     Type
  4426 ;;		None
  4427 ;; Return value:  Size  Location     Type
  4428 ;;                  1    wreg      void 
  4429 ;; Registers used:
  4430 ;;		wreg, status,2
  4431 ;; Tracked objects:
  4432 ;;		On entry : 0/0
  4433 ;;		On exit  : 0/0
  4434 ;;		Unchanged: 0/0
  4435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4436 ;;      Params:         0       0       0       0       0       0       0
  4437 ;;      Locals:         0       0       0       0       0       0       0
  4438 ;;      Temps:          0       0       0       0       0       0       0
  4439 ;;      Totals:         0       0       0       0       0       0       0
  4440 ;;Total ram usage:        0 bytes
  4441 ;; Hardware stack levels used:    1
  4442 ;; Hardware stack levels required when called:    6
  4443 ;; This function calls:
  4444 ;;		Nothing
  4445 ;; This function is called by:
  4446 ;;		_SYSTEM_Initialize
  4447 ;; This function uses a non-reentrant model
  4448 ;;
  4449                           
  4450                           	psect	text23
  4451  001EEE                     __ptext23:
  4452                           	opt stack 0
  4453  001EEE                     _PWM4_Initialize:
  4454                           	opt stack 23
  4455                           
  4456                           ;pwm4.c: 69: CCP2CON = 0x1C;
  4457                           
  4458                           ;incstack = 0
  4459  001EEE  0E1C               	movlw	28
  4460  001EF0  6E66               	movwf	3942,c	;volatile
  4461                           
  4462                           ;pwm4.c: 72: CCPR2L = 0x3E;
  4463  001EF2  0E3E               	movlw	62
  4464  001EF4  6E67               	movwf	3943,c	;volatile
  4465                           
  4466                           ;pwm4.c: 75: CCPR2H = 0x00;
  4467  001EF6  0E00               	movlw	0
  4468  001EF8  6E68               	movwf	3944,c	;volatile
  4469                           
  4470                           ;pwm4.c: 78: CCPTMRS1bits.C4TSEL = 0x0;
  4471  001EFA  0EFC               	movlw	-4
  4472  001EFC  010F               	movlb	15	; () banked
  4473  001EFE  1748               	andwf	72,f,b	;volatile
  4474                           
  4475                           ; BSR set to: 15
  4476  001F00  0012               	return		;funcret
  4477  001F02                     __end_of_PWM4_Initialize:
  4478                           	opt stack 0
  4479                           tblptru	equ	0xFF8
  4480                           tblptrh	equ	0xFF7
  4481                           tblptrl	equ	0xFF6
  4482                           tablat	equ	0xFF5
  4483                           prodh	equ	0xFF4
  4484                           prodl	equ	0xFF3
  4485                           intcon	equ	0xFF2
  4486                           postinc0	equ	0xFEE
  4487                           wreg	equ	0xFE8
  4488                           indf1	equ	0xFE7
  4489                           postdec1	equ	0xFE5
  4490                           fsr1h	equ	0xFE2
  4491                           fsr1l	equ	0xFE1
  4492                           indf2	equ	0xFDF
  4493                           postinc2	equ	0xFDE
  4494                           postdec2	equ	0xFDD
  4495                           plusw2	equ	0xFDB
  4496                           fsr2h	equ	0xFDA
  4497                           fsr2l	equ	0xFD9
  4498                           status	equ	0xFD8
  4499                           
  4500 ;; *************** function _PIN_MANAGER_Initialize *****************
  4501 ;; Defined at:
  4502 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  4503 ;; Parameters:    Size  Location     Type
  4504 ;;		None
  4505 ;; Auto vars:     Size  Location     Type
  4506 ;;		None
  4507 ;; Return value:  Size  Location     Type
  4508 ;;                  1    wreg      void 
  4509 ;; Registers used:
  4510 ;;		wreg, status,2
  4511 ;; Tracked objects:
  4512 ;;		On entry : 0/0
  4513 ;;		On exit  : 0/0
  4514 ;;		Unchanged: 0/0
  4515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4516 ;;      Params:         0       0       0       0       0       0       0
  4517 ;;      Locals:         0       0       0       0       0       0       0
  4518 ;;      Temps:          0       0       0       0       0       0       0
  4519 ;;      Totals:         0       0       0       0       0       0       0
  4520 ;;Total ram usage:        0 bytes
  4521 ;; Hardware stack levels used:    1
  4522 ;; Hardware stack levels required when called:    6
  4523 ;; This function calls:
  4524 ;;		Nothing
  4525 ;; This function is called by:
  4526 ;;		_SYSTEM_Initialize
  4527 ;; This function uses a non-reentrant model
  4528 ;;
  4529                           
  4530                           	psect	text24
  4531  00184A                     __ptext24:
  4532                           	opt stack 0
  4533  00184A                     _PIN_MANAGER_Initialize:
  4534                           	opt stack 23
  4535                           
  4536                           ;pin_manager.c: 52: LATA = 0x00;
  4537                           
  4538                           ; BSR set to: 15
  4539                           ;incstack = 0
  4540  00184A  0E00               	movlw	0
  4541  00184C  6E89               	movwf	3977,c	;volatile
  4542                           
  4543                           ;pin_manager.c: 53: TRISA = 0xF7;
  4544  00184E  0EF7               	movlw	247
  4545  001850  6E92               	movwf	3986,c	;volatile
  4546                           
  4547                           ;pin_manager.c: 54: ANSELA = 0x27;
  4548  001852  0E27               	movlw	39
  4549  001854  010F               	movlb	15	; () banked
  4550  001856  6F38               	movwf	56,b	;volatile
  4551                           
  4552                           ;pin_manager.c: 56: LATB = 0x01;
  4553  001858  0E01               	movlw	1
  4554  00185A  6E8A               	movwf	3978,c	;volatile
  4555                           
  4556                           ;pin_manager.c: 57: TRISB = 0xFE;
  4557  00185C  0EFE               	movlw	254
  4558  00185E  6E93               	movwf	3987,c	;volatile
  4559                           
  4560                           ;pin_manager.c: 58: ANSELB = 0x3E;
  4561  001860  0E3E               	movlw	62
  4562  001862  010F               	movlb	15	; () banked
  4563  001864  6F39               	movwf	57,b	;volatile
  4564                           
  4565                           ;pin_manager.c: 59: WPUB = 0x00;
  4566  001866  0E00               	movlw	0
  4567  001868  6E61               	movwf	3937,c	;volatile
  4568                           
  4569                           ;pin_manager.c: 61: LATC = 0x00;
  4570  00186A  0E00               	movlw	0
  4571  00186C  6E8B               	movwf	3979,c	;volatile
  4572                           
  4573                           ;pin_manager.c: 62: TRISC = 0xDF;
  4574  00186E  0EDF               	movlw	223
  4575  001870  6E94               	movwf	3988,c	;volatile
  4576                           
  4577                           ;pin_manager.c: 63: ANSELC = 0x1C;
  4578  001872  0E1C               	movlw	28
  4579  001874  010F               	movlb	15	; () banked
  4580  001876  6F3A               	movwf	58,b	;volatile
  4581                           
  4582                           ;pin_manager.c: 65: LATD = 0x00;
  4583  001878  0E00               	movlw	0
  4584  00187A  6E8C               	movwf	3980,c	;volatile
  4585                           
  4586                           ;pin_manager.c: 66: TRISD = 0x0F;
  4587  00187C  0E0F               	movlw	15
  4588  00187E  6E95               	movwf	3989,c	;volatile
  4589                           
  4590                           ;pin_manager.c: 67: ANSELD = 0x0F;
  4591  001880  0E0F               	movlw	15
  4592  001882  010F               	movlb	15	; () banked
  4593  001884  6F3B               	movwf	59,b	;volatile
  4594                           
  4595                           ;pin_manager.c: 69: LATE = 0x00;
  4596  001886  0E00               	movlw	0
  4597  001888  6E8D               	movwf	3981,c	;volatile
  4598                           
  4599                           ;pin_manager.c: 70: TRISE = 0x07;
  4600  00188A  0E07               	movlw	7
  4601  00188C  6E96               	movwf	3990,c	;volatile
  4602                           
  4603                           ;pin_manager.c: 71: ANSELE = 0x07;
  4604  00188E  0E07               	movlw	7
  4605  001890  010F               	movlb	15	; () banked
  4606  001892  6F3C               	movwf	60,b	;volatile
  4607                           
  4608                           ; BSR set to: 15
  4609                           ;pin_manager.c: 72: TRISCbits.RC6 = 1;
  4610  001894  8C94               	bsf	3988,6,c	;volatile
  4611                           
  4612                           ; BSR set to: 15
  4613                           ;pin_manager.c: 73: TRISCbits.RC7 = 1;
  4614  001896  8E94               	bsf	3988,7,c	;volatile
  4615                           
  4616                           ; BSR set to: 15
  4617                           ;pin_manager.c: 74: TRISCbits.RC5 = 0;
  4618  001898  9A94               	bcf	3988,5,c	;volatile
  4619                           
  4620                           ; BSR set to: 15
  4621                           ;pin_manager.c: 75: LATCbits.LATC5 = 1;
  4622  00189A  8A8B               	bsf	3979,5,c	;volatile
  4623                           
  4624                           ; BSR set to: 15
  4625                           ;pin_manager.c: 76: LATCbits.LATC6 = 1;
  4626  00189C  8C8B               	bsf	3979,6,c	;volatile
  4627                           
  4628                           ; BSR set to: 15
  4629                           ;pin_manager.c: 77: LATCbits.LATC7 = 1;
  4630  00189E  8E8B               	bsf	3979,7,c	;volatile
  4631                           
  4632                           ; BSR set to: 15
  4633                           ;pin_manager.c: 78: ANSELCbits.ANSC5 =0;
  4634  0018A0  010F               	movlb	15	; () banked
  4635  0018A2  9B3A               	bcf	58,5,b	;volatile
  4636                           
  4637                           ; BSR set to: 15
  4638                           ;pin_manager.c: 79: ANSELCbits.ANSC6 =0;
  4639  0018A4  010F               	movlb	15	; () banked
  4640  0018A6  9D3A               	bcf	58,6,b	;volatile
  4641                           
  4642                           ; BSR set to: 15
  4643                           ;pin_manager.c: 80: ANSELCbits.ANSC7 =0;
  4644  0018A8  010F               	movlb	15	; () banked
  4645  0018AA  9F3A               	bcf	58,7,b	;volatile
  4646                           
  4647                           ; BSR set to: 15
  4648                           ;pin_manager.c: 82: INTCON2bits.nRBPU = 0x01;
  4649  0018AC  8EF1               	bsf	intcon2,7,c	;volatile
  4650                           
  4651                           ; BSR set to: 15
  4652                           
  4653                           ; BSR set to: 15
  4654                           
  4655                           ;pin_manager.c: 84: do { TRISB4 = 0; } while(0);
  4656  0018AE  9893               	bcf	3987,4,c	;volatile
  4657                           
  4658                           ; BSR set to: 15
  4659                           
  4660                           ; BSR set to: 15
  4661                           
  4662                           ;pin_manager.c: 85: do { TRISB3 = 0; } while(0);
  4663                           
  4664                           ; BSR set to: 15
  4665  0018B0  9693               	bcf	3987,3,c	;volatile
  4666                           
  4667                           ; BSR set to: 15
  4668                           
  4669                           ; BSR set to: 15
  4670                           
  4671                           ;pin_manager.c: 86: do { TRISB5 = 0; } while(0);
  4672                           
  4673                           ; BSR set to: 15
  4674  0018B2  9A93               	bcf	3987,5,c	;volatile
  4675                           
  4676                           ; BSR set to: 15
  4677                           ;pin_manager.c: 88: TRISDbits.RD1 = 0;
  4678                           
  4679                           ; BSR set to: 15
  4680  0018B4  9295               	bcf	3989,1,c	;volatile
  4681                           
  4682                           ; BSR set to: 15
  4683                           
  4684                           ; BSR set to: 15
  4685                           
  4686                           ;pin_manager.c: 90: do { ANSB3 = 0; } while(0);
  4687  0018B6  010F               	movlb	15	; () banked
  4688  0018B8  9739               	bcf	57,3,b	;volatile
  4689                           
  4690                           ; BSR set to: 15
  4691                           
  4692                           ; BSR set to: 15
  4693                           
  4694                           ;pin_manager.c: 91: do { ANSD7 = 0; } while(0);
  4695                           
  4696                           ; BSR set to: 15
  4697  0018BA  010F               	movlb	15	; () banked
  4698  0018BC  9F3B               	bcf	59,7,b	;volatile
  4699                           
  4700                           ; BSR set to: 15
  4701                           
  4702                           ; BSR set to: 15
  4703                           
  4704                           ;pin_manager.c: 92: do { ANSB4 = 0; } while(0);
  4705                           
  4706                           ; BSR set to: 15
  4707  0018BE  010F               	movlb	15	; () banked
  4708  0018C0  9939               	bcf	57,4,b	;volatile
  4709  0018C2  0012               	return	
  4710  0018C4                     __end_of_PIN_MANAGER_Initialize:
  4711                           	opt stack 0
  4712                           tblptru	equ	0xFF8
  4713                           tblptrh	equ	0xFF7
  4714                           tblptrl	equ	0xFF6
  4715                           tablat	equ	0xFF5
  4716                           prodh	equ	0xFF4
  4717                           prodl	equ	0xFF3
  4718                           intcon	equ	0xFF2
  4719                           intcon2	equ	0xFF1
  4720                           postinc0	equ	0xFEE
  4721                           wreg	equ	0xFE8
  4722                           indf1	equ	0xFE7
  4723                           postdec1	equ	0xFE5
  4724                           fsr1h	equ	0xFE2
  4725                           fsr1l	equ	0xFE1
  4726                           indf2	equ	0xFDF
  4727                           postinc2	equ	0xFDE
  4728                           postdec2	equ	0xFDD
  4729                           plusw2	equ	0xFDB
  4730                           fsr2h	equ	0xFDA
  4731                           fsr2l	equ	0xFD9
  4732                           status	equ	0xFD8
  4733                           
  4734 ;; *************** function _OSCILLATOR_Initialize *****************
  4735 ;; Defined at:
  4736 ;;		line 125 in file "mcc_generated_files/mcc.c"
  4737 ;; Parameters:    Size  Location     Type
  4738 ;;		None
  4739 ;; Auto vars:     Size  Location     Type
  4740 ;;		None
  4741 ;; Return value:  Size  Location     Type
  4742 ;;                  1    wreg      void 
  4743 ;; Registers used:
  4744 ;;		wreg, status,2
  4745 ;; Tracked objects:
  4746 ;;		On entry : 0/0
  4747 ;;		On exit  : 0/0
  4748 ;;		Unchanged: 0/0
  4749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4750 ;;      Params:         0       0       0       0       0       0       0
  4751 ;;      Locals:         0       0       0       0       0       0       0
  4752 ;;      Temps:          0       0       0       0       0       0       0
  4753 ;;      Totals:         0       0       0       0       0       0       0
  4754 ;;Total ram usage:        0 bytes
  4755 ;; Hardware stack levels used:    1
  4756 ;; Hardware stack levels required when called:    6
  4757 ;; This function calls:
  4758 ;;		Nothing
  4759 ;; This function is called by:
  4760 ;;		_SYSTEM_Initialize
  4761 ;; This function uses a non-reentrant model
  4762 ;;
  4763                           
  4764                           	psect	text25
  4765  001F36                     __ptext25:
  4766                           	opt stack 0
  4767  001F36                     _OSCILLATOR_Initialize:
  4768                           	opt stack 23
  4769                           
  4770                           ;mcc.c: 127: OSCCON = 0x72;
  4771                           
  4772                           ; BSR set to: 15
  4773                           ;incstack = 0
  4774  001F36  0E72               	movlw	114
  4775  001F38  6ED3               	movwf	4051,c	;volatile
  4776                           
  4777                           ;mcc.c: 129: OSCCON2 = 0x04;
  4778  001F3A  0E04               	movlw	4
  4779  001F3C  6ED2               	movwf	4050,c	;volatile
  4780                           
  4781                           ;mcc.c: 131: OSCTUNE = 0x00;
  4782  001F3E  0E00               	movlw	0
  4783  001F40  6E9B               	movwf	3995,c	;volatile
  4784  001F42  0012               	return		;funcret
  4785  001F44                     __end_of_OSCILLATOR_Initialize:
  4786                           	opt stack 0
  4787                           tblptru	equ	0xFF8
  4788                           tblptrh	equ	0xFF7
  4789                           tblptrl	equ	0xFF6
  4790                           tablat	equ	0xFF5
  4791                           prodh	equ	0xFF4
  4792                           prodl	equ	0xFF3
  4793                           intcon	equ	0xFF2
  4794                           intcon2	equ	0xFF1
  4795                           postinc0	equ	0xFEE
  4796                           wreg	equ	0xFE8
  4797                           indf1	equ	0xFE7
  4798                           postdec1	equ	0xFE5
  4799                           fsr1h	equ	0xFE2
  4800                           fsr1l	equ	0xFE1
  4801                           indf2	equ	0xFDF
  4802                           postinc2	equ	0xFDE
  4803                           postdec2	equ	0xFDD
  4804                           plusw2	equ	0xFDB
  4805                           fsr2h	equ	0xFDA
  4806                           fsr2l	equ	0xFD9
  4807                           status	equ	0xFD8
  4808                           
  4809 ;; *************** function _INTERRUPT_Initialize *****************
  4810 ;; Defined at:
  4811 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  4812 ;; Parameters:    Size  Location     Type
  4813 ;;		None
  4814 ;; Auto vars:     Size  Location     Type
  4815 ;;		None
  4816 ;; Return value:  Size  Location     Type
  4817 ;;                  1    wreg      void 
  4818 ;; Registers used:
  4819 ;;		None
  4820 ;; Tracked objects:
  4821 ;;		On entry : 0/0
  4822 ;;		On exit  : 0/0
  4823 ;;		Unchanged: 0/0
  4824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4825 ;;      Params:         0       0       0       0       0       0       0
  4826 ;;      Locals:         0       0       0       0       0       0       0
  4827 ;;      Temps:          0       0       0       0       0       0       0
  4828 ;;      Totals:         0       0       0       0       0       0       0
  4829 ;;Total ram usage:        0 bytes
  4830 ;; Hardware stack levels used:    1
  4831 ;; Hardware stack levels required when called:    6
  4832 ;; This function calls:
  4833 ;;		Nothing
  4834 ;; This function is called by:
  4835 ;;		_SYSTEM_Initialize
  4836 ;; This function uses a non-reentrant model
  4837 ;;
  4838                           
  4839                           	psect	text26
  4840  001F44                     __ptext26:
  4841                           	opt stack 0
  4842  001F44                     _INTERRUPT_Initialize:
  4843                           	opt stack 23
  4844                           
  4845                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  4846                           
  4847                           ;incstack = 0
  4848  001F44  9ED0               	bcf	4048,7,c	;volatile
  4849                           
  4850                           ;interrupt_manager.c: 60: IPR1bits.RC1IP = 0;
  4851  001F46  9A9F               	bcf	3999,5,c	;volatile
  4852                           
  4853                           ;interrupt_manager.c: 62: IPR1bits.TX1IP = 0;
  4854  001F48  989F               	bcf	3999,4,c	;volatile
  4855                           
  4856                           ;interrupt_manager.c: 64: IPR1bits.ADIP = 0;
  4857  001F4A  9C9F               	bcf	3999,6,c	;volatile
  4858  001F4C  0012               	return		;funcret
  4859  001F4E                     __end_of_INTERRUPT_Initialize:
  4860                           	opt stack 0
  4861                           tblptru	equ	0xFF8
  4862                           tblptrh	equ	0xFF7
  4863                           tblptrl	equ	0xFF6
  4864                           tablat	equ	0xFF5
  4865                           prodh	equ	0xFF4
  4866                           prodl	equ	0xFF3
  4867                           intcon	equ	0xFF2
  4868                           intcon2	equ	0xFF1
  4869                           postinc0	equ	0xFEE
  4870                           wreg	equ	0xFE8
  4871                           indf1	equ	0xFE7
  4872                           postdec1	equ	0xFE5
  4873                           fsr1h	equ	0xFE2
  4874                           fsr1l	equ	0xFE1
  4875                           indf2	equ	0xFDF
  4876                           postinc2	equ	0xFDE
  4877                           postdec2	equ	0xFDD
  4878                           plusw2	equ	0xFDB
  4879                           fsr2h	equ	0xFDA
  4880                           fsr2l	equ	0xFD9
  4881                           status	equ	0xFD8
  4882                           
  4883 ;; *************** function _EUSART1_Initialize *****************
  4884 ;; Defined at:
  4885 ;;		line 20 in file "UART.c"
  4886 ;; Parameters:    Size  Location     Type
  4887 ;;		None
  4888 ;; Auto vars:     Size  Location     Type
  4889 ;;		None
  4890 ;; Return value:  Size  Location     Type
  4891 ;;                  1    wreg      void 
  4892 ;; Registers used:
  4893 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4894 ;; Tracked objects:
  4895 ;;		On entry : 0/0
  4896 ;;		On exit  : 0/0
  4897 ;;		Unchanged: 0/0
  4898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4899 ;;      Params:         0       0       0       0       0       0       0
  4900 ;;      Locals:         0       0       0       0       0       0       0
  4901 ;;      Temps:          0       0       0       0       0       0       0
  4902 ;;      Totals:         0       0       0       0       0       0       0
  4903 ;;Total ram usage:        0 bytes
  4904 ;; Hardware stack levels used:    1
  4905 ;; Hardware stack levels required when called:    8
  4906 ;; This function calls:
  4907 ;;		_UART_buff_init
  4908 ;; This function is called by:
  4909 ;;		_SYSTEM_Initialize
  4910 ;; This function uses a non-reentrant model
  4911 ;;
  4912                           
  4913                           	psect	text27
  4914  001BC2                     __ptext27:
  4915                           	opt stack 0
  4916  001BC2                     _EUSART1_Initialize:
  4917                           	opt stack 21
  4918                           
  4919                           ;UART.c: 22: PIE1bits.RC1IE = 0;
  4920                           
  4921                           ;incstack = 0
  4922  001BC2  9A9D               	bcf	3997,5,c	;volatile
  4923                           
  4924                           ;UART.c: 23: PIE1bits.TX1IE = 0;
  4925  001BC4  989D               	bcf	3997,4,c	;volatile
  4926                           
  4927                           ;UART.c: 28: BAUD1CON = 0x48;
  4928  001BC6  0E48               	movlw	72
  4929  001BC8  6EB8               	movwf	4024,c	;volatile
  4930                           
  4931                           ;UART.c: 31: RC1STA = 0x98;
  4932  001BCA  0E98               	movlw	152
  4933  001BCC  6EAB               	movwf	4011,c	;volatile
  4934                           
  4935                           ;UART.c: 34: TX1STA = 0x26;
  4936  001BCE  0E26               	movlw	38
  4937  001BD0  6EAC               	movwf	4012,c	;volatile
  4938                           
  4939                           ;UART.c: 37: SPBRG1 = (((16000000/38400)/4)-1);
  4940  001BD2  0E67               	movlw	103
  4941  001BD4  6EAF               	movwf	4015,c	;volatile
  4942                           
  4943                           ;UART.c: 40: SPBRGH1 = 0x00;
  4944  001BD6  0E00               	movlw	0
  4945  001BD8  6EB0               	movwf	4016,c	;volatile
  4946                           
  4947                           ;UART.c: 43: TXREG1 = 0x00;
  4948  001BDA  0E00               	movlw	0
  4949  001BDC  6EAD               	movwf	4013,c	;volatile
  4950                           
  4951                           ;UART.c: 46: RCREG1 = 0x00;
  4952  001BDE  0E00               	movlw	0
  4953  001BE0  6EAE               	movwf	4014,c	;volatile
  4954                           
  4955                           ;UART.c: 48: UART_buff_init(&input_buffer);
  4956  001BE2  0E3C               	movlw	low _input_buffer
  4957  001BE4  6E25               	movwf	UART_buff_init@_this,c
  4958  001BE6  0E01               	movlw	high _input_buffer
  4959  001BE8  6E26               	movwf	UART_buff_init@_this+1,c
  4960  001BEA  EC08  F00F         	call	_UART_buff_init	;wreg free
  4961                           
  4962                           ;UART.c: 49: UART_buff_init(&output_buffer);
  4963  001BEE  0E00               	movlw	low _output_buffer
  4964  001BF0  6E25               	movwf	UART_buff_init@_this,c
  4965  001BF2  0E02               	movlw	high _output_buffer
  4966  001BF4  6E26               	movwf	UART_buff_init@_this+1,c
  4967  001BF6  EC08  F00F         	call	_UART_buff_init	;wreg free
  4968                           
  4969                           ;UART.c: 51: PIE1bits.RC1IE = 1;
  4970  001BFA  8A9D               	bsf	3997,5,c	;volatile
  4971  001BFC  0012               	return		;funcret
  4972  001BFE                     __end_of_EUSART1_Initialize:
  4973                           	opt stack 0
  4974                           tblptru	equ	0xFF8
  4975                           tblptrh	equ	0xFF7
  4976                           tblptrl	equ	0xFF6
  4977                           tablat	equ	0xFF5
  4978                           prodh	equ	0xFF4
  4979                           prodl	equ	0xFF3
  4980                           intcon	equ	0xFF2
  4981                           intcon2	equ	0xFF1
  4982                           postinc0	equ	0xFEE
  4983                           wreg	equ	0xFE8
  4984                           indf1	equ	0xFE7
  4985                           postdec1	equ	0xFE5
  4986                           fsr1h	equ	0xFE2
  4987                           fsr1l	equ	0xFE1
  4988                           indf2	equ	0xFDF
  4989                           postinc2	equ	0xFDE
  4990                           postdec2	equ	0xFDD
  4991                           plusw2	equ	0xFDB
  4992                           fsr2h	equ	0xFDA
  4993                           fsr2l	equ	0xFD9
  4994                           status	equ	0xFD8
  4995                           
  4996 ;; *************** function _UART_buff_init *****************
  4997 ;; Defined at:
  4998 ;;		line 55 in file "UART.c"
  4999 ;; Parameters:    Size  Location     Type
  5000 ;;  _this           2   36[COMRAM] PTR struct UART_ring_buf
  5001 ;;		 -> output_buffer(106), input_buffer(106), 
  5002 ;; Auto vars:     Size  Location     Type
  5003 ;;		None
  5004 ;; Return value:  Size  Location     Type
  5005 ;;                  1    wreg      void 
  5006 ;; Registers used:
  5007 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5008 ;; Tracked objects:
  5009 ;;		On entry : 0/0
  5010 ;;		On exit  : 0/0
  5011 ;;		Unchanged: 0/0
  5012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5013 ;;      Params:         2       0       0       0       0       0       0
  5014 ;;      Locals:         0       0       0       0       0       0       0
  5015 ;;      Temps:          0       0       0       0       0       0       0
  5016 ;;      Totals:         2       0       0       0       0       0       0
  5017 ;;Total ram usage:        2 bytes
  5018 ;; Hardware stack levels used:    1
  5019 ;; Hardware stack levels required when called:    7
  5020 ;; This function calls:
  5021 ;;		_memset
  5022 ;; This function is called by:
  5023 ;;		_EUSART1_Initialize
  5024 ;; This function uses a non-reentrant model
  5025 ;;
  5026                           
  5027                           	psect	text28
  5028  001E10                     __ptext28:
  5029                           	opt stack 0
  5030  001E10                     _UART_buff_init:
  5031                           	opt stack 21
  5032                           
  5033                           ;UART.c: 64: memset(_this, 0, sizeof (*_this));
  5034                           
  5035                           ;incstack = 0
  5036  001E10  C025  F01D         	movff	UART_buff_init@_this,memset@p1
  5037  001E14  C026  F01E         	movff	UART_buff_init@_this+1,memset@p1+1
  5038  001E18  0E00               	movlw	0
  5039  001E1A  6E20               	movwf	memset@c+1,c
  5040  001E1C  0E00               	movlw	0
  5041  001E1E  6E1F               	movwf	memset@c,c
  5042  001E20  0E00               	movlw	0
  5043  001E22  6E22               	movwf	memset@n+1,c
  5044  001E24  0E6A               	movlw	106
  5045  001E26  6E21               	movwf	memset@n,c
  5046  001E28  EC92  F00E         	call	_memset	;wreg free
  5047  001E2C  0012               	return		;funcret
  5048  001E2E                     __end_of_UART_buff_init:
  5049                           	opt stack 0
  5050                           tblptru	equ	0xFF8
  5051                           tblptrh	equ	0xFF7
  5052                           tblptrl	equ	0xFF6
  5053                           tablat	equ	0xFF5
  5054                           prodh	equ	0xFF4
  5055                           prodl	equ	0xFF3
  5056                           intcon	equ	0xFF2
  5057                           intcon2	equ	0xFF1
  5058                           postinc0	equ	0xFEE
  5059                           wreg	equ	0xFE8
  5060                           indf1	equ	0xFE7
  5061                           postdec1	equ	0xFE5
  5062                           fsr1h	equ	0xFE2
  5063                           fsr1l	equ	0xFE1
  5064                           indf2	equ	0xFDF
  5065                           postinc2	equ	0xFDE
  5066                           postdec2	equ	0xFDD
  5067                           plusw2	equ	0xFDB
  5068                           fsr2h	equ	0xFDA
  5069                           fsr2l	equ	0xFD9
  5070                           status	equ	0xFD8
  5071                           
  5072 ;; *************** function _memset *****************
  5073 ;; Defined at:
  5074 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\memset.c"
  5075 ;; Parameters:    Size  Location     Type
  5076 ;;  p1              2   28[COMRAM] PTR void 
  5077 ;;		 -> output_buffer(106), input_buffer(106), 
  5078 ;;  c               2   30[COMRAM] int 
  5079 ;;  n               2   32[COMRAM] unsigned int 
  5080 ;; Auto vars:     Size  Location     Type
  5081 ;;  p               2   34[COMRAM] PTR unsigned char 
  5082 ;;		 -> output_buffer(106), input_buffer(106), 
  5083 ;; Return value:  Size  Location     Type
  5084 ;;                  2   28[COMRAM] PTR void 
  5085 ;; Registers used:
  5086 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5087 ;; Tracked objects:
  5088 ;;		On entry : 0/0
  5089 ;;		On exit  : 0/0
  5090 ;;		Unchanged: 0/0
  5091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5092 ;;      Params:         6       0       0       0       0       0       0
  5093 ;;      Locals:         2       0       0       0       0       0       0
  5094 ;;      Temps:          0       0       0       0       0       0       0
  5095 ;;      Totals:         8       0       0       0       0       0       0
  5096 ;;Total ram usage:        8 bytes
  5097 ;; Hardware stack levels used:    1
  5098 ;; Hardware stack levels required when called:    6
  5099 ;; This function calls:
  5100 ;;		Nothing
  5101 ;; This function is called by:
  5102 ;;		_UART_buff_init
  5103 ;;		_UART_buff_flush
  5104 ;; This function uses a non-reentrant model
  5105 ;;
  5106                           
  5107                           	psect	text29
  5108  001D24                     __ptext29:
  5109                           	opt stack 0
  5110  001D24                     _memset:
  5111                           	opt stack 20
  5112                           
  5113                           ;incstack = 0
  5114  001D24  C01D  F023         	movff	memset@p1,memset@p
  5115  001D28  C01E  F024         	movff	memset@p1+1,memset@p+1
  5116  001D2C  D008               	goto	l3696
  5117  001D2E                     l3692:
  5118  001D2E  C023  FFD9         	movff	memset@p,fsr2l
  5119  001D32  C024  FFDA         	movff	memset@p+1,fsr2h
  5120  001D36  C01F  FFDF         	movff	memset@c,indf2
  5121  001D3A  4A23               	infsnz	memset@p,f,c
  5122  001D3C  2A24               	incf	memset@p+1,f,c
  5123  001D3E                     l3696:
  5124  001D3E  0621               	decf	memset@n,f,c
  5125  001D40  A0D8               	btfss	status,0,c
  5126  001D42  0622               	decf	memset@n+1,f,c
  5127  001D44  2821               	incf	memset@n,w,c
  5128  001D46  E1F3               	bnz	l3692
  5129  001D48  2822               	incf	memset@n+1,w,c
  5130  001D4A  B4D8               	btfsc	status,2,c
  5131  001D4C  0012               	return	
  5132  001D4E  D7EF               	goto	l3692
  5133  001D50                     __end_of_memset:
  5134                           	opt stack 0
  5135                           tblptru	equ	0xFF8
  5136                           tblptrh	equ	0xFF7
  5137                           tblptrl	equ	0xFF6
  5138                           tablat	equ	0xFF5
  5139                           prodh	equ	0xFF4
  5140                           prodl	equ	0xFF3
  5141                           intcon	equ	0xFF2
  5142                           intcon2	equ	0xFF1
  5143                           postinc0	equ	0xFEE
  5144                           wreg	equ	0xFE8
  5145                           indf1	equ	0xFE7
  5146                           postdec1	equ	0xFE5
  5147                           fsr1h	equ	0xFE2
  5148                           fsr1l	equ	0xFE1
  5149                           indf2	equ	0xFDF
  5150                           postinc2	equ	0xFDE
  5151                           postdec2	equ	0xFDD
  5152                           plusw2	equ	0xFDB
  5153                           fsr2h	equ	0xFDA
  5154                           fsr2l	equ	0xFD9
  5155                           status	equ	0xFD8
  5156                           
  5157 ;; *************** function _ADC_Initialize *****************
  5158 ;; Defined at:
  5159 ;;		line 59 in file "mcc_generated_files/adc.c"
  5160 ;; Parameters:    Size  Location     Type
  5161 ;;		None
  5162 ;; Auto vars:     Size  Location     Type
  5163 ;;		None
  5164 ;; Return value:  Size  Location     Type
  5165 ;;                  1    wreg      void 
  5166 ;; Registers used:
  5167 ;;		wreg, status,2
  5168 ;; Tracked objects:
  5169 ;;		On entry : 0/0
  5170 ;;		On exit  : 0/0
  5171 ;;		Unchanged: 0/0
  5172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5173 ;;      Params:         0       0       0       0       0       0       0
  5174 ;;      Locals:         0       0       0       0       0       0       0
  5175 ;;      Temps:          0       0       0       0       0       0       0
  5176 ;;      Totals:         0       0       0       0       0       0       0
  5177 ;;Total ram usage:        0 bytes
  5178 ;; Hardware stack levels used:    1
  5179 ;; Hardware stack levels required when called:    6
  5180 ;; This function calls:
  5181 ;;		Nothing
  5182 ;; This function is called by:
  5183 ;;		_SYSTEM_Initialize
  5184 ;; This function uses a non-reentrant model
  5185 ;;
  5186                           
  5187                           	psect	text30
  5188  001E6A                     __ptext30:
  5189                           	opt stack 0
  5190  001E6A                     _ADC_Initialize:
  5191                           	opt stack 23
  5192                           
  5193                           ;adc.c: 64: ADCON0 = 0x01;
  5194                           
  5195                           ;incstack = 0
  5196  001E6A  0E01               	movlw	1
  5197  001E6C  6EC2               	movwf	4034,c	;volatile
  5198                           
  5199                           ;adc.c: 67: ADCON1 = 0x80;
  5200  001E6E  0E80               	movlw	128
  5201  001E70  6EC1               	movwf	4033,c	;volatile
  5202                           
  5203                           ;adc.c: 70: ADCON2 = 0x12;
  5204  001E72  0E12               	movlw	18
  5205  001E74  6EC0               	movwf	4032,c	;volatile
  5206                           
  5207                           ;adc.c: 72: ADCON2bits.ADFM = 1;
  5208  001E76  8EC0               	bsf	4032,7,c	;volatile
  5209                           
  5210                           ;adc.c: 75: ADRESL = 0x00;
  5211  001E78  0E00               	movlw	0
  5212  001E7A  6EC3               	movwf	4035,c	;volatile
  5213                           
  5214                           ;adc.c: 78: ADRESH = 0x00;
  5215  001E7C  0E00               	movlw	0
  5216  001E7E  6EC4               	movwf	4036,c	;volatile
  5217  001E80  0012               	return		;funcret
  5218  001E82                     __end_of_ADC_Initialize:
  5219                           	opt stack 0
  5220                           tblptru	equ	0xFF8
  5221                           tblptrh	equ	0xFF7
  5222                           tblptrl	equ	0xFF6
  5223                           tablat	equ	0xFF5
  5224                           prodh	equ	0xFF4
  5225                           prodl	equ	0xFF3
  5226                           intcon	equ	0xFF2
  5227                           intcon2	equ	0xFF1
  5228                           postinc0	equ	0xFEE
  5229                           wreg	equ	0xFE8
  5230                           indf1	equ	0xFE7
  5231                           postdec1	equ	0xFE5
  5232                           fsr1h	equ	0xFE2
  5233                           fsr1l	equ	0xFE1
  5234                           indf2	equ	0xFDF
  5235                           postinc2	equ	0xFDE
  5236                           postdec2	equ	0xFDD
  5237                           plusw2	equ	0xFDB
  5238                           fsr2h	equ	0xFDA
  5239                           fsr2l	equ	0xFD9
  5240                           status	equ	0xFD8
  5241                           
  5242 ;; *************** function _PDUStartup *****************
  5243 ;; Defined at:
  5244 ;;		line 20 in file "PDU.c"
  5245 ;; Parameters:    Size  Location     Type
  5246 ;;		None
  5247 ;; Auto vars:     Size  Location     Type
  5248 ;;		None
  5249 ;; Return value:  Size  Location     Type
  5250 ;;                  1    wreg      void 
  5251 ;; Registers used:
  5252 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5253 ;; Tracked objects:
  5254 ;;		On entry : 0/0
  5255 ;;		On exit  : 0/0
  5256 ;;		Unchanged: 0/0
  5257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5258 ;;      Params:         0       0       0       0       0       0       0
  5259 ;;      Locals:         0       0       0       0       0       0       0
  5260 ;;      Temps:          0       0       0       0       0       0       0
  5261 ;;      Totals:         0       0       0       0       0       0       0
  5262 ;;Total ram usage:        0 bytes
  5263 ;; Hardware stack levels used:    1
  5264 ;; Hardware stack levels required when called:   10
  5265 ;; This function calls:
  5266 ;;		_ComputeStorageData
  5267 ;;		_EnableSlavePower
  5268 ;;		_StartUp595
  5269 ;;		_Update
  5270 ;; This function is called by:
  5271 ;;		_main
  5272 ;; This function uses a non-reentrant model
  5273 ;;
  5274                           
  5275                           	psect	text31
  5276  001926                     __ptext31:
  5277                           	opt stack 0
  5278  001926                     _PDUStartup:
  5279                           	opt stack 20
  5280                           
  5281                           ;PDU.c: 23: StartUp595();
  5282                           
  5283                           ;incstack = 0
  5284  001926  ECC4  F00C         	call	_StartUp595	;wreg free
  5285                           
  5286                           ;PDU.c: 24: EnableSlavePower(SAS, ON);
  5287  00192A  0E00               	movlw	0
  5288  00192C  6E28               	movwf	EnableSlavePower@onof+1,c
  5289  00192E  0E01               	movlw	1
  5290  001930  6E27               	movwf	EnableSlavePower@onof,c
  5291  001932  0E03               	movlw	3
  5292  001934  ECEB  F008         	call	_EnableSlavePower
  5293                           
  5294                           ;PDU.c: 25: EnableSlavePower(DDS, ON);
  5295  001938  0E00               	movlw	0
  5296  00193A  6E28               	movwf	EnableSlavePower@onof+1,c
  5297  00193C  0E01               	movlw	1
  5298  00193E  6E27               	movwf	EnableSlavePower@onof,c
  5299  001940  0E01               	movlw	1
  5300  001942  ECEB  F008         	call	_EnableSlavePower
  5301                           
  5302                           ;PDU.c: 26: EnableSlavePower(MCS, OFF);
  5303  001946  0E00               	movlw	0
  5304  001948  6E28               	movwf	EnableSlavePower@onof+1,c
  5305  00194A  0E00               	movlw	0
  5306  00194C  6E27               	movwf	EnableSlavePower@onof,c
  5307  00194E  0E02               	movlw	2
  5308  001950  ECEB  F008         	call	_EnableSlavePower
  5309                           
  5310                           ;PDU.c: 27: EnableSlavePower(BMM, ON);
  5311  001954  0E00               	movlw	0
  5312  001956  6E28               	movwf	EnableSlavePower@onof+1,c
  5313  001958  0E01               	movlw	1
  5314  00195A  6E27               	movwf	EnableSlavePower@onof,c
  5315  00195C  0E04               	movlw	4
  5316  00195E  ECEB  F008         	call	_EnableSlavePower
  5317                           
  5318                           ;PDU.c: 28: EnableSlavePower(TSS, OFF);
  5319  001962  0E00               	movlw	0
  5320  001964  6E28               	movwf	EnableSlavePower@onof+1,c
  5321  001966  0E00               	movlw	0
  5322  001968  6E27               	movwf	EnableSlavePower@onof,c
  5323  00196A  0E05               	movlw	5
  5324  00196C  ECEB  F008         	call	_EnableSlavePower
  5325                           
  5326                           ;PDU.c: 29: EnableSlavePower(AUX, OFF);
  5327  001970  0E00               	movlw	0
  5328  001972  6E28               	movwf	EnableSlavePower@onof+1,c
  5329  001974  0E00               	movlw	0
  5330  001976  6E27               	movwf	EnableSlavePower@onof,c
  5331  001978  0E06               	movlw	6
  5332  00197A  ECEB  F008         	call	_EnableSlavePower
  5333                           
  5334                           ;PDU.c: 30: Update();
  5335  00197E  ECAE  F00F         	call	_Update	;wreg free
  5336                           
  5337                           ;PDU.c: 32: ComputeStorageData();
  5338  001982  EC5D  F009         	call	_ComputeStorageData	;wreg free
  5339  001986  0012               	return		;funcret
  5340  001988                     __end_of_PDUStartup:
  5341                           	opt stack 0
  5342                           tblptru	equ	0xFF8
  5343                           tblptrh	equ	0xFF7
  5344                           tblptrl	equ	0xFF6
  5345                           tablat	equ	0xFF5
  5346                           prodh	equ	0xFF4
  5347                           prodl	equ	0xFF3
  5348                           intcon	equ	0xFF2
  5349                           intcon2	equ	0xFF1
  5350                           postinc0	equ	0xFEE
  5351                           wreg	equ	0xFE8
  5352                           indf1	equ	0xFE7
  5353                           postdec1	equ	0xFE5
  5354                           fsr1h	equ	0xFE2
  5355                           fsr1l	equ	0xFE1
  5356                           indf2	equ	0xFDF
  5357                           postinc2	equ	0xFDE
  5358                           postdec2	equ	0xFDD
  5359                           plusw2	equ	0xFDB
  5360                           fsr2h	equ	0xFDA
  5361                           fsr2l	equ	0xFD9
  5362                           status	equ	0xFD8
  5363                           
  5364 ;; *************** function _Update *****************
  5365 ;; Defined at:
  5366 ;;		line 225 in file "PDU.c"
  5367 ;; Parameters:    Size  Location     Type
  5368 ;;		None
  5369 ;; Auto vars:     Size  Location     Type
  5370 ;;		None
  5371 ;; Return value:  Size  Location     Type
  5372 ;;                  1    wreg      void 
  5373 ;; Registers used:
  5374 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5375 ;; Tracked objects:
  5376 ;;		On entry : 0/0
  5377 ;;		On exit  : 0/0
  5378 ;;		Unchanged: 0/0
  5379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5380 ;;      Params:         0       0       0       0       0       0       0
  5381 ;;      Locals:         0       0       0       0       0       0       0
  5382 ;;      Temps:          0       0       0       0       0       0       0
  5383 ;;      Totals:         0       0       0       0       0       0       0
  5384 ;;Total ram usage:        0 bytes
  5385 ;; Hardware stack levels used:    1
  5386 ;; Hardware stack levels required when called:    8
  5387 ;; This function calls:
  5388 ;;		_writeRegisters
  5389 ;; This function is called by:
  5390 ;;		_PDUStartup
  5391 ;;		_processPowerRequest
  5392 ;; This function uses a non-reentrant model
  5393 ;;
  5394                           
  5395                           	psect	text32
  5396  001F5C                     __ptext32:
  5397                           	opt stack 0
  5398  001F5C                     _Update:
  5399                           	opt stack 21
  5400                           
  5401                           ;PDU.c: 226: writeRegisters();
  5402                           
  5403                           ;incstack = 0
  5404  001F5C  EC68  F00B         	call	_writeRegisters	;wreg free
  5405  001F60  0012               	return		;funcret
  5406  001F62                     __end_of_Update:
  5407                           	opt stack 0
  5408                           tblptru	equ	0xFF8
  5409                           tblptrh	equ	0xFF7
  5410                           tblptrl	equ	0xFF6
  5411                           tablat	equ	0xFF5
  5412                           prodh	equ	0xFF4
  5413                           prodl	equ	0xFF3
  5414                           intcon	equ	0xFF2
  5415                           intcon2	equ	0xFF1
  5416                           postinc0	equ	0xFEE
  5417                           wreg	equ	0xFE8
  5418                           indf1	equ	0xFE7
  5419                           postdec1	equ	0xFE5
  5420                           fsr1h	equ	0xFE2
  5421                           fsr1l	equ	0xFE1
  5422                           indf2	equ	0xFDF
  5423                           postinc2	equ	0xFDE
  5424                           postdec2	equ	0xFDD
  5425                           plusw2	equ	0xFDB
  5426                           fsr2h	equ	0xFDA
  5427                           fsr2l	equ	0xFD9
  5428                           status	equ	0xFD8
  5429                           
  5430 ;; *************** function _StartUp595 *****************
  5431 ;; Defined at:
  5432 ;;		line 10 in file "Shift595.c"
  5433 ;; Parameters:    Size  Location     Type
  5434 ;;		None
  5435 ;; Auto vars:     Size  Location     Type
  5436 ;;		None
  5437 ;; Return value:  Size  Location     Type
  5438 ;;                  1    wreg      void 
  5439 ;; Registers used:
  5440 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5441 ;; Tracked objects:
  5442 ;;		On entry : 0/0
  5443 ;;		On exit  : 0/0
  5444 ;;		Unchanged: 0/0
  5445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5446 ;;      Params:         0       0       0       0       0       0       0
  5447 ;;      Locals:         0       0       0       0       0       0       0
  5448 ;;      Temps:          0       0       0       0       0       0       0
  5449 ;;      Totals:         0       0       0       0       0       0       0
  5450 ;;Total ram usage:        0 bytes
  5451 ;; Hardware stack levels used:    1
  5452 ;; Hardware stack levels required when called:    9
  5453 ;; This function calls:
  5454 ;;		_Clear595
  5455 ;;		_Delay
  5456 ;; This function is called by:
  5457 ;;		_PDUStartup
  5458 ;; This function uses a non-reentrant model
  5459 ;;
  5460                           
  5461                           	psect	text33
  5462  001988                     __ptext33:
  5463                           	opt stack 0
  5464  001988                     _StartUp595:
  5465                           	opt stack 20
  5466                           
  5467                           ;incstack = 0
  5468                           ;Shift595.c: 12: do { LATD5 = 1; } while(0);
  5469  001988  8A8C               	bsf	3980,5,c	;volatile
  5470                           
  5471                           ;Shift595.c: 13: do { LATB0 = 1; } while(0);
  5472  00198A  808A               	bsf	3978,0,c	;volatile
  5473                           
  5474                           ;Shift595.c: 15: Delay(2);
  5475  00198C  0E02               	movlw	2
  5476  00198E  6E1D               	movwf	Delay@wait,c
  5477  001990  0E00               	movlw	0
  5478  001992  6E1E               	movwf	Delay@wait+1,c
  5479  001994  0E00               	movlw	0
  5480  001996  6E1F               	movwf	Delay@wait+2,c
  5481  001998  0E00               	movlw	0
  5482  00199A  6E20               	movwf	Delay@wait+3,c
  5483  00199C  EC97  F00D         	call	_Delay	;wreg free
  5484                           
  5485                           ;Shift595.c: 16: do { LATD5 = 0; } while(0);
  5486  0019A0  9A8C               	bcf	3980,5,c	;volatile
  5487                           
  5488                           ;Shift595.c: 17: Delay(2);
  5489  0019A2  0E02               	movlw	2
  5490  0019A4  6E1D               	movwf	Delay@wait,c
  5491  0019A6  0E00               	movlw	0
  5492  0019A8  6E1E               	movwf	Delay@wait+1,c
  5493  0019AA  0E00               	movlw	0
  5494  0019AC  6E1F               	movwf	Delay@wait+2,c
  5495  0019AE  0E00               	movlw	0
  5496  0019B0  6E20               	movwf	Delay@wait+3,c
  5497  0019B2  EC97  F00D         	call	_Delay	;wreg free
  5498                           
  5499                           ;Shift595.c: 18: do { LATB0 = 0; } while(0);
  5500  0019B6  908A               	bcf	3978,0,c	;volatile
  5501                           
  5502                           ;Shift595.c: 19: Delay(2);
  5503  0019B8  0E02               	movlw	2
  5504  0019BA  6E1D               	movwf	Delay@wait,c
  5505  0019BC  0E00               	movlw	0
  5506  0019BE  6E1E               	movwf	Delay@wait+1,c
  5507  0019C0  0E00               	movlw	0
  5508  0019C2  6E1F               	movwf	Delay@wait+2,c
  5509  0019C4  0E00               	movlw	0
  5510  0019C6  6E20               	movwf	Delay@wait+3,c
  5511  0019C8  EC97  F00D         	call	_Delay	;wreg free
  5512                           
  5513                           ;Shift595.c: 20: do { LATD5 = 1; } while(0);
  5514  0019CC  8A8C               	bsf	3980,5,c	;volatile
  5515                           
  5516                           ;Shift595.c: 21: Delay(2);
  5517  0019CE  0E02               	movlw	2
  5518  0019D0  6E1D               	movwf	Delay@wait,c
  5519  0019D2  0E00               	movlw	0
  5520  0019D4  6E1E               	movwf	Delay@wait+1,c
  5521  0019D6  0E00               	movlw	0
  5522  0019D8  6E1F               	movwf	Delay@wait+2,c
  5523  0019DA  0E00               	movlw	0
  5524  0019DC  6E20               	movwf	Delay@wait+3,c
  5525  0019DE  EC97  F00D         	call	_Delay	;wreg free
  5526                           
  5527                           ;Shift595.c: 22: do { LATB0 = 1; } while(0);
  5528  0019E2  808A               	bsf	3978,0,c	;volatile
  5529                           
  5530                           ;Shift595.c: 24: Clear595();
  5531  0019E4  ECFF  F00D         	call	_Clear595	;wreg free
  5532  0019E8  0012               	return		;funcret
  5533  0019EA                     __end_of_StartUp595:
  5534                           	opt stack 0
  5535                           tblptru	equ	0xFF8
  5536                           tblptrh	equ	0xFF7
  5537                           tblptrl	equ	0xFF6
  5538                           tablat	equ	0xFF5
  5539                           prodh	equ	0xFF4
  5540                           prodl	equ	0xFF3
  5541                           intcon	equ	0xFF2
  5542                           intcon2	equ	0xFF1
  5543                           postinc0	equ	0xFEE
  5544                           wreg	equ	0xFE8
  5545                           indf1	equ	0xFE7
  5546                           postdec1	equ	0xFE5
  5547                           fsr1h	equ	0xFE2
  5548                           fsr1l	equ	0xFE1
  5549                           indf2	equ	0xFDF
  5550                           postinc2	equ	0xFDE
  5551                           postdec2	equ	0xFDD
  5552                           plusw2	equ	0xFDB
  5553                           fsr2h	equ	0xFDA
  5554                           fsr2l	equ	0xFD9
  5555                           status	equ	0xFD8
  5556                           
  5557 ;; *************** function _Clear595 *****************
  5558 ;; Defined at:
  5559 ;;		line 39 in file "Shift595.c"
  5560 ;; Parameters:    Size  Location     Type
  5561 ;;		None
  5562 ;; Auto vars:     Size  Location     Type
  5563 ;;  i               2   41[COMRAM] int 
  5564 ;; Return value:  Size  Location     Type
  5565 ;;                  1    wreg      void 
  5566 ;; Registers used:
  5567 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5568 ;; Tracked objects:
  5569 ;;		On entry : 0/0
  5570 ;;		On exit  : 0/0
  5571 ;;		Unchanged: 0/0
  5572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5573 ;;      Params:         0       0       0       0       0       0       0
  5574 ;;      Locals:         2       0       0       0       0       0       0
  5575 ;;      Temps:          0       0       0       0       0       0       0
  5576 ;;      Totals:         2       0       0       0       0       0       0
  5577 ;;Total ram usage:        2 bytes
  5578 ;; Hardware stack levels used:    1
  5579 ;; Hardware stack levels required when called:    8
  5580 ;; This function calls:
  5581 ;;		_writeRegisters
  5582 ;; This function is called by:
  5583 ;;		_StartUp595
  5584 ;; This function uses a non-reentrant model
  5585 ;;
  5586                           
  5587                           	psect	text34
  5588  001BFE                     __ptext34:
  5589                           	opt stack 0
  5590  001BFE                     _Clear595:
  5591                           	opt stack 20
  5592                           
  5593                           ;Shift595.c: 40: for (int i = 3 * 8 - 1; i >= 0; i--) {
  5594                           
  5595                           ;incstack = 0
  5596  001BFE  0E00               	movlw	0
  5597  001C00  6E2B               	movwf	Clear595@i+1,c
  5598  001C02  0E17               	movlw	23
  5599  001C04  6E2A               	movwf	Clear595@i,c
  5600  001C06                     l3946:
  5601  001C06  BE2B               	btfsc	Clear595@i+1,7,c
  5602  001C08  D011               	goto	l3956
  5603                           
  5604                           ;Shift595.c: 41: registers[i] = 0;
  5605  001C0A  90D8               	bcf	status,0,c
  5606  001C0C  342A               	rlcf	Clear595@i,w,c
  5607  001C0E  6ED9               	movwf	fsr2l,c
  5608  001C10  342B               	rlcf	Clear595@i+1,w,c
  5609  001C12  6EDA               	movwf	fsr2h,c
  5610  001C14  0E00               	movlw	low _registers
  5611  001C16  26D9               	addwf	fsr2l,f,c
  5612  001C18  0E01               	movlw	high _registers
  5613  001C1A  22DA               	addwfc	fsr2h,f,c
  5614  001C1C  0E00               	movlw	0
  5615  001C1E  6EDE               	movwf	postinc2,c
  5616  001C20  0E00               	movlw	0
  5617  001C22  6EDD               	movwf	postdec2,c
  5618  001C24  062A               	decf	Clear595@i,f,c
  5619  001C26  A0D8               	btfss	status,0,c
  5620  001C28  062B               	decf	Clear595@i+1,f,c
  5621  001C2A  D7ED               	goto	l3946
  5622  001C2C                     l3956:
  5623                           
  5624                           ;Shift595.c: 42: }
  5625                           ;Shift595.c: 44: writeRegisters();
  5626  001C2C  EC68  F00B         	call	_writeRegisters	;wreg free
  5627  001C30  0012               	return		;funcret
  5628  001C32                     __end_of_Clear595:
  5629                           	opt stack 0
  5630                           tblptru	equ	0xFF8
  5631                           tblptrh	equ	0xFF7
  5632                           tblptrl	equ	0xFF6
  5633                           tablat	equ	0xFF5
  5634                           prodh	equ	0xFF4
  5635                           prodl	equ	0xFF3
  5636                           intcon	equ	0xFF2
  5637                           intcon2	equ	0xFF1
  5638                           postinc0	equ	0xFEE
  5639                           wreg	equ	0xFE8
  5640                           indf1	equ	0xFE7
  5641                           postdec1	equ	0xFE5
  5642                           fsr1h	equ	0xFE2
  5643                           fsr1l	equ	0xFE1
  5644                           indf2	equ	0xFDF
  5645                           postinc2	equ	0xFDE
  5646                           postdec2	equ	0xFDD
  5647                           plusw2	equ	0xFDB
  5648                           fsr2h	equ	0xFDA
  5649                           fsr2l	equ	0xFD9
  5650                           status	equ	0xFD8
  5651                           
  5652 ;; *************** function _writeRegisters *****************
  5653 ;; Defined at:
  5654 ;;		line 50 in file "Shift595.c"
  5655 ;; Parameters:    Size  Location     Type
  5656 ;;		None
  5657 ;; Auto vars:     Size  Location     Type
  5658 ;;  i               2   39[COMRAM] int 
  5659 ;;  val             2   37[COMRAM] int 
  5660 ;; Return value:  Size  Location     Type
  5661 ;;                  1    wreg      void 
  5662 ;; Registers used:
  5663 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5664 ;; Tracked objects:
  5665 ;;		On entry : 0/0
  5666 ;;		On exit  : 0/0
  5667 ;;		Unchanged: 0/0
  5668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5669 ;;      Params:         0       0       0       0       0       0       0
  5670 ;;      Locals:         4       0       0       0       0       0       0
  5671 ;;      Temps:          0       0       0       0       0       0       0
  5672 ;;      Totals:         4       0       0       0       0       0       0
  5673 ;;Total ram usage:        4 bytes
  5674 ;; Hardware stack levels used:    1
  5675 ;; Hardware stack levels required when called:    7
  5676 ;; This function calls:
  5677 ;;		_Delay
  5678 ;; This function is called by:
  5679 ;;		_Update
  5680 ;;		_Clear595
  5681 ;; This function uses a non-reentrant model
  5682 ;;
  5683                           
  5684                           	psect	text35
  5685  0016D0                     __ptext35:
  5686                           	opt stack 0
  5687  0016D0                     _writeRegisters:
  5688                           	opt stack 21
  5689                           
  5690                           ;Shift595.c: 51: int val = 0;
  5691                           
  5692                           ;incstack = 0
  5693  0016D0  0E00               	movlw	0
  5694  0016D2  6E27               	movwf	writeRegisters@val+1,c
  5695  0016D4  0E00               	movlw	0
  5696  0016D6  6E26               	movwf	writeRegisters@val,c
  5697                           
  5698                           ;Shift595.c: 52: for (int i = 3 * 8 - 1; i >= 0; i--) {
  5699  0016D8  0E00               	movlw	0
  5700  0016DA  6E29               	movwf	writeRegisters@i+1,c
  5701  0016DC  0E17               	movlw	23
  5702  0016DE  6E28               	movwf	writeRegisters@i,c
  5703  0016E0                     l3808:
  5704  0016E0  BE29               	btfsc	writeRegisters@i+1,7,c
  5705  0016E2  D01D               	goto	l538
  5706                           
  5707                           ;Shift595.c: 53: do { LATD7 = 0; } while(0);
  5708  0016E4  9E8C               	bcf	3980,7,c	;volatile
  5709                           
  5710                           ;Shift595.c: 55: val = registers[i];
  5711  0016E6  90D8               	bcf	status,0,c
  5712  0016E8  3428               	rlcf	writeRegisters@i,w,c
  5713  0016EA  6ED9               	movwf	fsr2l,c
  5714  0016EC  3429               	rlcf	writeRegisters@i+1,w,c
  5715  0016EE  6EDA               	movwf	fsr2h,c
  5716  0016F0  0E00               	movlw	low _registers
  5717  0016F2  26D9               	addwf	fsr2l,f,c
  5718  0016F4  0E01               	movlw	high _registers
  5719  0016F6  22DA               	addwfc	fsr2h,f,c
  5720  0016F8  CFDE F026          	movff	postinc2,writeRegisters@val
  5721  0016FC  CFDD F027          	movff	postdec2,writeRegisters@val+1
  5722                           
  5723                           ;Shift595.c: 56: if (val == 1) {
  5724  001700  0426               	decf	writeRegisters@val,w,c
  5725  001702  1027               	iorwf	writeRegisters@val+1,w,c
  5726  001704  A4D8               	btfss	status,2,c
  5727  001706  D002               	goto	l3816
  5728                           
  5729                           ;Shift595.c: 57: do { LATD4 = 1; } while(0);
  5730  001708  888C               	bsf	3980,4,c	;volatile
  5731                           
  5732                           ;Shift595.c: 58: } else if (val == 0) {
  5733  00170A  D004               	goto	l536
  5734  00170C                     l3816:
  5735  00170C  5026               	movf	writeRegisters@val,w,c
  5736  00170E  1027               	iorwf	writeRegisters@val+1,w,c
  5737  001710  B4D8               	btfsc	status,2,c
  5738                           
  5739                           ;Shift595.c: 59: do { LATD4 = 0; } while(0);
  5740  001712  988C               	bcf	3980,4,c	;volatile
  5741  001714                     l536:
  5742  001714  8E8C               	bsf	3980,7,c	;volatile
  5743  001716  0628               	decf	writeRegisters@i,f,c
  5744  001718  A0D8               	btfss	status,0,c
  5745  00171A  0629               	decf	writeRegisters@i+1,f,c
  5746  00171C  D7E1               	goto	l3808
  5747  00171E                     l538:
  5748  00171E  9E8C               	bcf	3980,7,c	;volatile
  5749                           
  5750                           ;Shift595.c: 67: Delay(1);
  5751  001720  0E01               	movlw	1
  5752  001722  6E1D               	movwf	Delay@wait,c
  5753  001724  0E00               	movlw	0
  5754  001726  6E1E               	movwf	Delay@wait+1,c
  5755  001728  0E00               	movlw	0
  5756  00172A  6E1F               	movwf	Delay@wait+2,c
  5757  00172C  0E00               	movlw	0
  5758  00172E  6E20               	movwf	Delay@wait+3,c
  5759  001730  EC97  F00D         	call	_Delay	;wreg free
  5760                           
  5761                           ;Shift595.c: 68: do { LATD6 = 1; } while(0);
  5762  001734  8C8C               	bsf	3980,6,c	;volatile
  5763                           
  5764                           ;Shift595.c: 69: Delay(1);
  5765  001736  0E01               	movlw	1
  5766  001738  6E1D               	movwf	Delay@wait,c
  5767  00173A  0E00               	movlw	0
  5768  00173C  6E1E               	movwf	Delay@wait+1,c
  5769  00173E  0E00               	movlw	0
  5770  001740  6E1F               	movwf	Delay@wait+2,c
  5771  001742  0E00               	movlw	0
  5772  001744  6E20               	movwf	Delay@wait+3,c
  5773  001746  EC97  F00D         	call	_Delay	;wreg free
  5774                           
  5775                           ;Shift595.c: 70: do { LATD6 = 0; } while(0);
  5776  00174A  9C8C               	bcf	3980,6,c	;volatile
  5777  00174C  0012               	return	
  5778  00174E                     __end_of_writeRegisters:
  5779                           	opt stack 0
  5780                           tblptru	equ	0xFF8
  5781                           tblptrh	equ	0xFF7
  5782                           tblptrl	equ	0xFF6
  5783                           tablat	equ	0xFF5
  5784                           prodh	equ	0xFF4
  5785                           prodl	equ	0xFF3
  5786                           intcon	equ	0xFF2
  5787                           intcon2	equ	0xFF1
  5788                           postinc0	equ	0xFEE
  5789                           wreg	equ	0xFE8
  5790                           indf1	equ	0xFE7
  5791                           postdec1	equ	0xFE5
  5792                           fsr1h	equ	0xFE2
  5793                           fsr1l	equ	0xFE1
  5794                           indf2	equ	0xFDF
  5795                           postinc2	equ	0xFDE
  5796                           postdec2	equ	0xFDD
  5797                           plusw2	equ	0xFDB
  5798                           fsr2h	equ	0xFDA
  5799                           fsr2l	equ	0xFD9
  5800                           status	equ	0xFD8
  5801                           
  5802 ;; *************** function _EnableSlavePower *****************
  5803 ;; Defined at:
  5804 ;;		line 37 in file "PDU.c"
  5805 ;; Parameters:    Size  Location     Type
  5806 ;;  slave           1    wreg     enum E6
  5807 ;;  onof            2   38[COMRAM] int 
  5808 ;; Auto vars:     Size  Location     Type
  5809 ;;  slave           1   40[COMRAM] enum E6
  5810 ;; Return value:  Size  Location     Type
  5811 ;;                  1    wreg      void 
  5812 ;; Registers used:
  5813 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5814 ;; Tracked objects:
  5815 ;;		On entry : 0/0
  5816 ;;		On exit  : 0/0
  5817 ;;		Unchanged: 0/0
  5818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5819 ;;      Params:         2       0       0       0       0       0       0
  5820 ;;      Locals:         1       0       0       0       0       0       0
  5821 ;;      Temps:          0       0       0       0       0       0       0
  5822 ;;      Totals:         3       0       0       0       0       0       0
  5823 ;;Total ram usage:        3 bytes
  5824 ;; Hardware stack levels used:    1
  5825 ;; Hardware stack levels required when called:    7
  5826 ;; This function calls:
  5827 ;;		_SetPin595
  5828 ;; This function is called by:
  5829 ;;		_PDUStartup
  5830 ;;		_processPowerRequest
  5831 ;; This function uses a non-reentrant model
  5832 ;;
  5833                           
  5834                           	psect	text36
  5835  0011D6                     __ptext36:
  5836                           	opt stack 0
  5837  0011D6                     _EnableSlavePower:
  5838                           	opt stack 22
  5839                           
  5840                           ;incstack = 0
  5841                           ;EnableSlavePower@slave stored from wreg
  5842  0011D6  6E29               	movwf	EnableSlavePower@slave,c
  5843                           
  5844                           ;PDU.c: 38: switch (slave) {
  5845  0011D8  D05C               	goto	l4194
  5846  0011DA                     l4178:
  5847                           
  5848                           ;PDU.c: 40: SetPin595(2, 6, onof);
  5849  0011DA  0E00               	movlw	0
  5850  0011DC  6E1E               	movwf	SetPin595@Reg+1,c
  5851  0011DE  0E02               	movlw	2
  5852  0011E0  6E1D               	movwf	SetPin595@Reg,c
  5853  0011E2  0E00               	movlw	0
  5854  0011E4  6E20               	movwf	SetPin595@pin+1,c
  5855  0011E6  0E06               	movlw	6
  5856  0011E8  6E1F               	movwf	SetPin595@pin,c
  5857  0011EA  C027  F021         	movff	EnableSlavePower@onof,SetPin595@value
  5858  0011EE  C028  F022         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  5859  0011F2  EC24  F00D         	call	_SetPin595	;wreg free
  5860                           
  5861                           ;PDU.c: 41: break;
  5862  0011F6  0012               	return	
  5863  0011F8                     l4180:
  5864                           
  5865                           ;PDU.c: 43: SetPin595(1, 1, onof);
  5866  0011F8  0E00               	movlw	0
  5867  0011FA  6E1E               	movwf	SetPin595@Reg+1,c
  5868  0011FC  0E01               	movlw	1
  5869  0011FE  6E1D               	movwf	SetPin595@Reg,c
  5870  001200  0E00               	movlw	0
  5871  001202  6E20               	movwf	SetPin595@pin+1,c
  5872  001204  0E01               	movlw	1
  5873  001206  6E1F               	movwf	SetPin595@pin,c
  5874  001208  C027  F021         	movff	EnableSlavePower@onof,SetPin595@value
  5875  00120C  C028  F022         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  5876  001210  EC24  F00D         	call	_SetPin595	;wreg free
  5877                           
  5878                           ;PDU.c: 44: break;
  5879  001214  0012               	return	
  5880  001216                     l4182:
  5881                           
  5882                           ;PDU.c: 46: SetPin595(1, 6, onof);
  5883  001216  0E00               	movlw	0
  5884  001218  6E1E               	movwf	SetPin595@Reg+1,c
  5885  00121A  0E01               	movlw	1
  5886  00121C  6E1D               	movwf	SetPin595@Reg,c
  5887  00121E  0E00               	movlw	0
  5888  001220  6E20               	movwf	SetPin595@pin+1,c
  5889  001222  0E06               	movlw	6
  5890  001224  6E1F               	movwf	SetPin595@pin,c
  5891  001226  C027  F021         	movff	EnableSlavePower@onof,SetPin595@value
  5892  00122A  C028  F022         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  5893  00122E  EC24  F00D         	call	_SetPin595	;wreg free
  5894                           
  5895                           ;PDU.c: 47: MCSOn = onof;
  5896  001232  C027  F03B         	movff	EnableSlavePower@onof,_MCSOn
  5897                           
  5898                           ;PDU.c: 48: break;
  5899  001236  0012               	return	
  5900  001238                     l4186:
  5901                           
  5902                           ;PDU.c: 50: SetPin595(2, 1, onof);
  5903  001238  0E00               	movlw	0
  5904  00123A  6E1E               	movwf	SetPin595@Reg+1,c
  5905  00123C  0E02               	movlw	2
  5906  00123E  6E1D               	movwf	SetPin595@Reg,c
  5907  001240  0E00               	movlw	0
  5908  001242  6E20               	movwf	SetPin595@pin+1,c
  5909  001244  0E01               	movlw	1
  5910  001246  6E1F               	movwf	SetPin595@pin,c
  5911  001248  C027  F021         	movff	EnableSlavePower@onof,SetPin595@value
  5912  00124C  C028  F022         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  5913  001250  EC24  F00D         	call	_SetPin595	;wreg free
  5914                           
  5915                           ;PDU.c: 51: break;
  5916  001254  0012               	return	
  5917  001256                     l4188:
  5918                           
  5919                           ;PDU.c: 53: SetPin595(3, 6, onof);
  5920  001256  0E00               	movlw	0
  5921  001258  6E1E               	movwf	SetPin595@Reg+1,c
  5922  00125A  0E03               	movlw	3
  5923  00125C  6E1D               	movwf	SetPin595@Reg,c
  5924  00125E  0E00               	movlw	0
  5925  001260  6E20               	movwf	SetPin595@pin+1,c
  5926  001262  0E06               	movlw	6
  5927  001264  6E1F               	movwf	SetPin595@pin,c
  5928  001266  C027  F021         	movff	EnableSlavePower@onof,SetPin595@value
  5929  00126A  C028  F022         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  5930  00126E  EC24  F00D         	call	_SetPin595	;wreg free
  5931                           
  5932                           ;PDU.c: 54: break;
  5933  001272  0012               	return	
  5934  001274                     l4190:
  5935                           
  5936                           ;PDU.c: 56: SetPin595(3, 1, onof);
  5937  001274  0E00               	movlw	0
  5938  001276  6E1E               	movwf	SetPin595@Reg+1,c
  5939  001278  0E03               	movlw	3
  5940  00127A  6E1D               	movwf	SetPin595@Reg,c
  5941  00127C  0E00               	movlw	0
  5942  00127E  6E20               	movwf	SetPin595@pin+1,c
  5943  001280  0E01               	movlw	1
  5944  001282  6E1F               	movwf	SetPin595@pin,c
  5945  001284  C027  F021         	movff	EnableSlavePower@onof,SetPin595@value
  5946  001288  C028  F022         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  5947  00128C  EC24  F00D         	call	_SetPin595	;wreg free
  5948                           
  5949                           ;PDU.c: 58: }
  5950                           
  5951                           ;PDU.c: 57: break;
  5952  001290  0012               	return	
  5953  001292                     l4194:
  5954  001292  5029               	movf	EnableSlavePower@slave,w,c
  5955                           
  5956                           ; Switch size 1, requested type "space"
  5957                           ; Number of cases is 6, Range of values is 1 to 6
  5958                           ; switch strategies available:
  5959                           ; Name         Instructions Cycles
  5960                           ; simple_byte           19    10 (average)
  5961                           ;	Chosen strategy is simple_byte
  5962  001294  0A01               	xorlw	1	; case 1
  5963  001296  B4D8               	btfsc	status,2,c
  5964  001298  D7CF               	goto	l4186
  5965  00129A  0A03               	xorlw	3	; case 2
  5966  00129C  B4D8               	btfsc	status,2,c
  5967  00129E  D7BB               	goto	l4182
  5968  0012A0  0A01               	xorlw	1	; case 3
  5969  0012A2  B4D8               	btfsc	status,2,c
  5970  0012A4  D79A               	goto	l4178
  5971  0012A6  0A07               	xorlw	7	; case 4
  5972  0012A8  B4D8               	btfsc	status,2,c
  5973  0012AA  D7A6               	goto	l4180
  5974  0012AC  0A01               	xorlw	1	; case 5
  5975  0012AE  B4D8               	btfsc	status,2,c
  5976  0012B0  D7D2               	goto	l4188
  5977  0012B2  0A03               	xorlw	3	; case 6
  5978  0012B4  A4D8               	btfss	status,2,c
  5979  0012B6  0012               	return	
  5980  0012B8  D7DD               	goto	l4190
  5981  0012BA                     __end_of_EnableSlavePower:
  5982                           	opt stack 0
  5983                           tblptru	equ	0xFF8
  5984                           tblptrh	equ	0xFF7
  5985                           tblptrl	equ	0xFF6
  5986                           tablat	equ	0xFF5
  5987                           prodh	equ	0xFF4
  5988                           prodl	equ	0xFF3
  5989                           intcon	equ	0xFF2
  5990                           intcon2	equ	0xFF1
  5991                           postinc0	equ	0xFEE
  5992                           wreg	equ	0xFE8
  5993                           indf1	equ	0xFE7
  5994                           postdec1	equ	0xFE5
  5995                           fsr1h	equ	0xFE2
  5996                           fsr1l	equ	0xFE1
  5997                           indf2	equ	0xFDF
  5998                           postinc2	equ	0xFDE
  5999                           postdec2	equ	0xFDD
  6000                           plusw2	equ	0xFDB
  6001                           fsr2h	equ	0xFDA
  6002                           fsr2l	equ	0xFD9
  6003                           status	equ	0xFD8
  6004                           
  6005 ;; *************** function _SetPin595 *****************
  6006 ;; Defined at:
  6007 ;;		line 32 in file "Shift595.c"
  6008 ;; Parameters:    Size  Location     Type
  6009 ;;  Reg             2   28[COMRAM] int 
  6010 ;;  pin             2   30[COMRAM] int 
  6011 ;;  value           2   32[COMRAM] int 
  6012 ;; Auto vars:     Size  Location     Type
  6013 ;;		None
  6014 ;; Return value:  Size  Location     Type
  6015 ;;                  1    wreg      void 
  6016 ;; Registers used:
  6017 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6018 ;; Tracked objects:
  6019 ;;		On entry : 0/0
  6020 ;;		On exit  : 0/0
  6021 ;;		Unchanged: 0/0
  6022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6023 ;;      Params:         6       0       0       0       0       0       0
  6024 ;;      Locals:         0       0       0       0       0       0       0
  6025 ;;      Temps:          4       0       0       0       0       0       0
  6026 ;;      Totals:        10       0       0       0       0       0       0
  6027 ;;Total ram usage:       10 bytes
  6028 ;; Hardware stack levels used:    1
  6029 ;; Hardware stack levels required when called:    6
  6030 ;; This function calls:
  6031 ;;		Nothing
  6032 ;; This function is called by:
  6033 ;;		_EnableSlavePower
  6034 ;; This function uses a non-reentrant model
  6035 ;;
  6036                           
  6037                           	psect	text37
  6038  001A48                     __ptext37:
  6039                           	opt stack 0
  6040  001A48                     _SetPin595:
  6041                           	opt stack 22
  6042                           
  6043                           ;Shift595.c: 33: registers[((Reg - 1)*8) + pin] = value;
  6044                           
  6045                           ;incstack = 0
  6046  001A48  0EF0               	movlw	240
  6047  001A4A  6E23               	movwf	??_SetPin595& (0+255),c
  6048  001A4C  0EFF               	movlw	255
  6049  001A4E  6E24               	movwf	(??_SetPin595+1)& (0+255),c
  6050  001A50  C01D  F025         	movff	SetPin595@Reg,??_SetPin595+2
  6051  001A54  C01E  F026         	movff	SetPin595@Reg+1,??_SetPin595+3
  6052  001A58  90D8               	bcf	status,0,c
  6053  001A5A  3625               	rlcf	??_SetPin595+2,f,c
  6054  001A5C  3626               	rlcf	??_SetPin595+3,f,c
  6055  001A5E  90D8               	bcf	status,0,c
  6056  001A60  3625               	rlcf	??_SetPin595+2,f,c
  6057  001A62  3626               	rlcf	??_SetPin595+3,f,c
  6058  001A64  90D8               	bcf	status,0,c
  6059  001A66  3625               	rlcf	??_SetPin595+2,f,c
  6060  001A68  3626               	rlcf	??_SetPin595+3,f,c
  6061  001A6A  501F               	movf	SetPin595@pin,w,c
  6062  001A6C  2625               	addwf	??_SetPin595+2,f,c
  6063  001A6E  5020               	movf	SetPin595@pin+1,w,c
  6064  001A70  2226               	addwfc	??_SetPin595+3,f,c
  6065  001A72  90D8               	bcf	status,0,c
  6066  001A74  3625               	rlcf	??_SetPin595+2,f,c
  6067  001A76  3626               	rlcf	??_SetPin595+3,f,c
  6068  001A78  5023               	movf	??_SetPin595,w,c
  6069  001A7A  2625               	addwf	??_SetPin595+2,f,c
  6070  001A7C  5024               	movf	??_SetPin595+1,w,c
  6071  001A7E  2226               	addwfc	??_SetPin595+3,f,c
  6072  001A80  0E00               	movlw	low _registers
  6073  001A82  2425               	addwf	??_SetPin595+2,w,c
  6074  001A84  6ED9               	movwf	fsr2l,c
  6075  001A86  0E01               	movlw	high _registers
  6076  001A88  2026               	addwfc	??_SetPin595+3,w,c
  6077  001A8A  6EDA               	movwf	fsr2h,c
  6078  001A8C  C021  FFDE         	movff	SetPin595@value,postinc2
  6079  001A90  C022  FFDD         	movff	SetPin595@value+1,postdec2
  6080  001A94  0012               	return		;funcret
  6081  001A96                     __end_of_SetPin595:
  6082                           	opt stack 0
  6083                           tblptru	equ	0xFF8
  6084                           tblptrh	equ	0xFF7
  6085                           tblptrl	equ	0xFF6
  6086                           tablat	equ	0xFF5
  6087                           prodh	equ	0xFF4
  6088                           prodl	equ	0xFF3
  6089                           intcon	equ	0xFF2
  6090                           intcon2	equ	0xFF1
  6091                           postinc0	equ	0xFEE
  6092                           wreg	equ	0xFE8
  6093                           indf1	equ	0xFE7
  6094                           postdec1	equ	0xFE5
  6095                           fsr1h	equ	0xFE2
  6096                           fsr1l	equ	0xFE1
  6097                           indf2	equ	0xFDF
  6098                           postinc2	equ	0xFDE
  6099                           postdec2	equ	0xFDD
  6100                           plusw2	equ	0xFDB
  6101                           fsr2h	equ	0xFDA
  6102                           fsr2l	equ	0xFD9
  6103                           status	equ	0xFD8
  6104                           
  6105 ;; *************** function _ComputeStorageData *****************
  6106 ;; Defined at:
  6107 ;;		line 160 in file "PDU.c"
  6108 ;; Parameters:    Size  Location     Type
  6109 ;;		None
  6110 ;; Auto vars:     Size  Location     Type
  6111 ;;  i               2   31[COMRAM] int 
  6112 ;; Return value:  Size  Location     Type
  6113 ;;                  1    wreg      void 
  6114 ;; Registers used:
  6115 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6116 ;; Tracked objects:
  6117 ;;		On entry : 0/0
  6118 ;;		On exit  : 0/0
  6119 ;;		Unchanged: 0/0
  6120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6121 ;;      Params:         0       0       0       0       0       0       0
  6122 ;;      Locals:         2       0       0       0       0       0       0
  6123 ;;      Temps:          2       0       0       0       0       0       0
  6124 ;;      Totals:         4       0       0       0       0       0       0
  6125 ;;Total ram usage:        4 bytes
  6126 ;; Hardware stack levels used:    1
  6127 ;; Hardware stack levels required when called:    7
  6128 ;; This function calls:
  6129 ;;		_DATAEE_ReadByte
  6130 ;; This function is called by:
  6131 ;;		_PDUStartup
  6132 ;;		_main
  6133 ;; This function uses a non-reentrant model
  6134 ;;
  6135                           
  6136                           	psect	text38
  6137  0012BA                     __ptext38:
  6138                           	opt stack 0
  6139  0012BA                     _ComputeStorageData:
  6140                           	opt stack 22
  6141                           
  6142                           ;PDU.c: 161: for (int i = 0; i < 12; i++) {
  6143                           
  6144                           ;incstack = 0
  6145  0012BA  0E00               	movlw	0
  6146  0012BC  6E21               	movwf	ComputeStorageData@i+1,c
  6147  0012BE  0E00               	movlw	0
  6148  0012C0  6E20               	movwf	ComputeStorageData@i,c
  6149  0012C2                     l4212:
  6150  0012C2  BE21               	btfsc	ComputeStorageData@i+1,7,c
  6151  0012C4  D006               	goto	l4216
  6152  0012C6  5021               	movf	ComputeStorageData@i+1,w,c
  6153  0012C8  E111               	bnz	l4222
  6154  0012CA  0E0C               	movlw	12
  6155  0012CC  5C20               	subwf	ComputeStorageData@i,w,c
  6156  0012CE  B0D8               	btfsc	status,0,c
  6157  0012D0  D00D               	goto	l4222
  6158  0012D2                     l4216:
  6159                           
  6160                           ;PDU.c: 162: data[i] = DATAEE_ReadByte(i);
  6161  0012D2  0ED2               	movlw	low _data
  6162  0012D4  2420               	addwf	ComputeStorageData@i,w,c
  6163  0012D6  6ED9               	movwf	fsr2l,c
  6164  0012D8  0E00               	movlw	high _data
  6165  0012DA  2021               	addwfc	ComputeStorageData@i+1,w,c
  6166  0012DC  6EDA               	movwf	fsr2h,c
  6167  0012DE  5020               	movf	ComputeStorageData@i,w,c
  6168  0012E0  EC81  F00F         	call	_DATAEE_ReadByte
  6169  0012E4  6EDF               	movwf	indf2,c
  6170  0012E6  4A20               	infsnz	ComputeStorageData@i,f,c
  6171  0012E8  2A21               	incf	ComputeStorageData@i+1,f,c
  6172  0012EA  D7EB               	goto	l4212
  6173  0012EC                     l4222:
  6174                           
  6175                           ;PDU.c: 163: }
  6176                           ;PDU.c: 164: Currentcomp[0] = ((data[0] << 8) | data[1]);
  6177  0012EC  0100               	movlb	0	; () banked
  6178  0012EE  51D3               	movf	(_data+1)& (0+255),w,b
  6179  0012F0  C0D2  F01E         	movff	_data,??_ComputeStorageData
  6180  0012F4  6A1F               	clrf	(??_ComputeStorageData+1)& (0+255),c
  6181  0012F6  C01E  F01F         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  6182  0012FA  6A1E               	clrf	??_ComputeStorageData,c
  6183  0012FC  101E               	iorwf	??_ComputeStorageData,w,c
  6184  0012FE  0100               	movlb	0	; () banked
  6185  001300  6FDE               	movwf	_Currentcomp& (0+255),b
  6186  001302  501F               	movf	??_ComputeStorageData+1,w,c
  6187  001304  0100               	movlb	0	; () banked
  6188  001306  6FDF               	movwf	(_Currentcomp+1)& (0+255),b
  6189                           
  6190                           ;PDU.c: 165: Currentcomp[1] = ((data[2] << 8) | data[3]);
  6191  001308  0100               	movlb	0	; () banked
  6192  00130A  51D5               	movf	(_data+3)& (0+255),w,b
  6193  00130C  C0D4  F01E         	movff	_data+2,??_ComputeStorageData
  6194  001310  6A1F               	clrf	(??_ComputeStorageData+1)& (0+255),c
  6195  001312  C01E  F01F         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  6196  001316  6A1E               	clrf	??_ComputeStorageData,c
  6197  001318  101E               	iorwf	??_ComputeStorageData,w,c
  6198  00131A  0100               	movlb	0	; () banked
  6199  00131C  6FE0               	movwf	(_Currentcomp+2)& (0+255),b
  6200  00131E  501F               	movf	??_ComputeStorageData+1,w,c
  6201  001320  0100               	movlb	0	; () banked
  6202  001322  6FE1               	movwf	(_Currentcomp+3)& (0+255),b
  6203                           
  6204                           ;PDU.c: 166: Currentcomp[2] = ((data[4] << 8) | data[5]);
  6205  001324  0100               	movlb	0	; () banked
  6206  001326  51D7               	movf	(_data+5)& (0+255),w,b
  6207  001328  C0D6  F01E         	movff	_data+4,??_ComputeStorageData
  6208  00132C  6A1F               	clrf	(??_ComputeStorageData+1)& (0+255),c
  6209  00132E  C01E  F01F         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  6210  001332  6A1E               	clrf	??_ComputeStorageData,c
  6211  001334  101E               	iorwf	??_ComputeStorageData,w,c
  6212  001336  0100               	movlb	0	; () banked
  6213  001338  6FE2               	movwf	(_Currentcomp+4)& (0+255),b
  6214  00133A  501F               	movf	??_ComputeStorageData+1,w,c
  6215  00133C  0100               	movlb	0	; () banked
  6216  00133E  6FE3               	movwf	(_Currentcomp+5)& (0+255),b
  6217                           
  6218                           ;PDU.c: 167: Currentcomp[3] = ((data[6] << 8) | data[7]);
  6219  001340  0100               	movlb	0	; () banked
  6220  001342  51D9               	movf	(_data+7)& (0+255),w,b
  6221  001344  C0D8  F01E         	movff	_data+6,??_ComputeStorageData
  6222  001348  6A1F               	clrf	(??_ComputeStorageData+1)& (0+255),c
  6223  00134A  C01E  F01F         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  6224  00134E  6A1E               	clrf	??_ComputeStorageData,c
  6225  001350  101E               	iorwf	??_ComputeStorageData,w,c
  6226  001352  0100               	movlb	0	; () banked
  6227  001354  6FE4               	movwf	(_Currentcomp+6)& (0+255),b
  6228  001356  501F               	movf	??_ComputeStorageData+1,w,c
  6229  001358  0100               	movlb	0	; () banked
  6230  00135A  6FE5               	movwf	(_Currentcomp+7)& (0+255),b
  6231                           
  6232                           ;PDU.c: 168: Currentcomp[4] = ((data[8] << 8) | data[9]);
  6233  00135C  0100               	movlb	0	; () banked
  6234  00135E  51DB               	movf	(_data+9)& (0+255),w,b
  6235  001360  C0DA  F01E         	movff	_data+8,??_ComputeStorageData
  6236  001364  6A1F               	clrf	(??_ComputeStorageData+1)& (0+255),c
  6237  001366  C01E  F01F         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  6238  00136A  6A1E               	clrf	??_ComputeStorageData,c
  6239  00136C  101E               	iorwf	??_ComputeStorageData,w,c
  6240  00136E  0100               	movlb	0	; () banked
  6241  001370  6FE6               	movwf	(_Currentcomp+8)& (0+255),b
  6242  001372  501F               	movf	??_ComputeStorageData+1,w,c
  6243  001374  0100               	movlb	0	; () banked
  6244  001376  6FE7               	movwf	(_Currentcomp+9)& (0+255),b
  6245                           
  6246                           ;PDU.c: 169: Currentcomp[5] = ((data[10] << 8) | data[11]);
  6247  001378  0100               	movlb	0	; () banked
  6248  00137A  51DD               	movf	(_data+11)& (0+255),w,b
  6249  00137C  C0DC  F01E         	movff	_data+10,??_ComputeStorageData
  6250  001380  6A1F               	clrf	(??_ComputeStorageData+1)& (0+255),c
  6251  001382  C01E  F01F         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  6252  001386  6A1E               	clrf	??_ComputeStorageData,c
  6253  001388  101E               	iorwf	??_ComputeStorageData,w,c
  6254  00138A  0100               	movlb	0	; () banked
  6255  00138C  6FE8               	movwf	(_Currentcomp+10)& (0+255),b
  6256  00138E  501F               	movf	??_ComputeStorageData+1,w,c
  6257  001390  0100               	movlb	0	; () banked
  6258  001392  6FE9               	movwf	(_Currentcomp+11)& (0+255),b
  6259                           
  6260                           ; BSR set to: 0
  6261  001394  0012               	return		;funcret
  6262  001396                     __end_of_ComputeStorageData:
  6263                           	opt stack 0
  6264                           tblptru	equ	0xFF8
  6265                           tblptrh	equ	0xFF7
  6266                           tblptrl	equ	0xFF6
  6267                           tablat	equ	0xFF5
  6268                           prodh	equ	0xFF4
  6269                           prodl	equ	0xFF3
  6270                           intcon	equ	0xFF2
  6271                           intcon2	equ	0xFF1
  6272                           postinc0	equ	0xFEE
  6273                           wreg	equ	0xFE8
  6274                           indf1	equ	0xFE7
  6275                           postdec1	equ	0xFE5
  6276                           fsr1h	equ	0xFE2
  6277                           fsr1l	equ	0xFE1
  6278                           indf2	equ	0xFDF
  6279                           postinc2	equ	0xFDE
  6280                           postdec2	equ	0xFDD
  6281                           plusw2	equ	0xFDB
  6282                           fsr2h	equ	0xFDA
  6283                           fsr2l	equ	0xFD9
  6284                           status	equ	0xFD8
  6285                           
  6286 ;; *************** function _DATAEE_ReadByte *****************
  6287 ;; Defined at:
  6288 ;;		line 143 in file "mcc_generated_files/memory.c"
  6289 ;; Parameters:    Size  Location     Type
  6290 ;;  bAdd            1    wreg     unsigned char 
  6291 ;; Auto vars:     Size  Location     Type
  6292 ;;  bAdd            1   28[COMRAM] unsigned char 
  6293 ;; Return value:  Size  Location     Type
  6294 ;;                  1    wreg      unsigned char 
  6295 ;; Registers used:
  6296 ;;		wreg, status,2
  6297 ;; Tracked objects:
  6298 ;;		On entry : 0/0
  6299 ;;		On exit  : 0/0
  6300 ;;		Unchanged: 0/0
  6301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6302 ;;      Params:         0       0       0       0       0       0       0
  6303 ;;      Locals:         1       0       0       0       0       0       0
  6304 ;;      Temps:          0       0       0       0       0       0       0
  6305 ;;      Totals:         1       0       0       0       0       0       0
  6306 ;;Total ram usage:        1 bytes
  6307 ;; Hardware stack levels used:    1
  6308 ;; Hardware stack levels required when called:    6
  6309 ;; This function calls:
  6310 ;;		Nothing
  6311 ;; This function is called by:
  6312 ;;		_ComputeStorageData
  6313 ;; This function uses a non-reentrant model
  6314 ;;
  6315                           
  6316                           	psect	text39
  6317  001F02                     __ptext39:
  6318                           	opt stack 0
  6319  001F02                     _DATAEE_ReadByte:
  6320                           	opt stack 22
  6321                           
  6322                           ; BSR set to: 0
  6323                           ;incstack = 0
  6324                           ;DATAEE_ReadByte@bAdd stored from wreg
  6325  001F02  6E1D               	movwf	DATAEE_ReadByte@bAdd,c
  6326                           
  6327                           ;memory.c: 145: EEADR = (bAdd & 0xFF);
  6328  001F04  C01D  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
  6329                           
  6330                           ;memory.c: 146: EECON1bits.CFGS = 0;
  6331  001F08  9CA6               	bcf	4006,6,c	;volatile
  6332                           
  6333                           ;memory.c: 147: EECON1bits.EEPGD = 0;
  6334  001F0A  9EA6               	bcf	4006,7,c	;volatile
  6335                           
  6336                           ;memory.c: 148: EECON1bits.RD = 1;
  6337  001F0C  80A6               	bsf	4006,0,c	;volatile
  6338                           
  6339                           ;memory.c: 149: __nop();
  6340  001F0E  F000               	nop	
  6341                           
  6342                           ;memory.c: 150: __nop();
  6343  001F10  F000               	nop	
  6344                           
  6345                           ;memory.c: 152: return (EEDATA);
  6346  001F12  50A8               	movf	4008,w,c	;volatile
  6347  001F14  0012               	return	
  6348  001F16                     __end_of_DATAEE_ReadByte:
  6349                           	opt stack 0
  6350                           tblptru	equ	0xFF8
  6351                           tblptrh	equ	0xFF7
  6352                           tblptrl	equ	0xFF6
  6353                           tablat	equ	0xFF5
  6354                           prodh	equ	0xFF4
  6355                           prodl	equ	0xFF3
  6356                           intcon	equ	0xFF2
  6357                           intcon2	equ	0xFF1
  6358                           postinc0	equ	0xFEE
  6359                           wreg	equ	0xFE8
  6360                           indf1	equ	0xFE7
  6361                           postdec1	equ	0xFE5
  6362                           fsr1h	equ	0xFE2
  6363                           fsr1l	equ	0xFE1
  6364                           indf2	equ	0xFDF
  6365                           postinc2	equ	0xFDE
  6366                           postdec2	equ	0xFDD
  6367                           plusw2	equ	0xFDB
  6368                           fsr2h	equ	0xFDA
  6369                           fsr2l	equ	0xFD9
  6370                           status	equ	0xFD8
  6371                           
  6372 ;; *************** function _CoolingStop *****************
  6373 ;; Defined at:
  6374 ;;		line 30 in file "CoolingControl.c"
  6375 ;; Parameters:    Size  Location     Type
  6376 ;;		None
  6377 ;; Auto vars:     Size  Location     Type
  6378 ;;		None
  6379 ;; Return value:  Size  Location     Type
  6380 ;;                  1    wreg      void 
  6381 ;; Registers used:
  6382 ;;		wreg, status,2, status,0, cstack
  6383 ;; Tracked objects:
  6384 ;;		On entry : 0/0
  6385 ;;		On exit  : 0/0
  6386 ;;		Unchanged: 0/0
  6387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6388 ;;      Params:         0       0       0       0       0       0       0
  6389 ;;      Locals:         0       0       0       0       0       0       0
  6390 ;;      Temps:          0       0       0       0       0       0       0
  6391 ;;      Totals:         0       0       0       0       0       0       0
  6392 ;;Total ram usage:        0 bytes
  6393 ;; Hardware stack levels used:    1
  6394 ;; Hardware stack levels required when called:    8
  6395 ;; This function calls:
  6396 ;;		_PWM4_LoadDutyValue
  6397 ;;		_PotClear
  6398 ;; This function is called by:
  6399 ;;		_main
  6400 ;; This function uses a non-reentrant model
  6401 ;;
  6402                           
  6403                           	psect	text40
  6404  001F16                     __ptext40:
  6405                           	opt stack 0
  6406  001F16                     _CoolingStop:
  6407                           	opt stack 22
  6408                           
  6409                           ;CoolingControl.c: 31: PotClear();
  6410                           
  6411                           ;incstack = 0
  6412  001F16  ECCB  F009         	call	_PotClear	;wreg free
  6413                           
  6414                           ;CoolingControl.c: 32: PWM4_LoadDutyValue(0);
  6415  001F1A  0E00               	movlw	0
  6416  001F1C  6E1E               	movwf	PWM4_LoadDutyValue@dutyValue+1,c
  6417  001F1E  0E00               	movlw	0
  6418  001F20  6E1D               	movwf	PWM4_LoadDutyValue@dutyValue,c
  6419  001F22  EC4B  F00E         	call	_PWM4_LoadDutyValue	;wreg free
  6420  001F26  0012               	return		;funcret
  6421  001F28                     __end_of_CoolingStop:
  6422                           	opt stack 0
  6423                           tblptru	equ	0xFF8
  6424                           tblptrh	equ	0xFF7
  6425                           tblptrl	equ	0xFF6
  6426                           tablat	equ	0xFF5
  6427                           prodh	equ	0xFF4
  6428                           prodl	equ	0xFF3
  6429                           intcon	equ	0xFF2
  6430                           intcon2	equ	0xFF1
  6431                           postinc0	equ	0xFEE
  6432                           wreg	equ	0xFE8
  6433                           indf1	equ	0xFE7
  6434                           postdec1	equ	0xFE5
  6435                           fsr1h	equ	0xFE2
  6436                           fsr1l	equ	0xFE1
  6437                           indf2	equ	0xFDF
  6438                           postinc2	equ	0xFDE
  6439                           postdec2	equ	0xFDD
  6440                           plusw2	equ	0xFDB
  6441                           fsr2h	equ	0xFDA
  6442                           fsr2l	equ	0xFD9
  6443                           status	equ	0xFD8
  6444                           
  6445 ;; *************** function _CoolingStart *****************
  6446 ;; Defined at:
  6447 ;;		line 19 in file "CoolingControl.c"
  6448 ;; Parameters:    Size  Location     Type
  6449 ;;		None
  6450 ;; Auto vars:     Size  Location     Type
  6451 ;;		None
  6452 ;; Return value:  Size  Location     Type
  6453 ;;                  1    wreg      void 
  6454 ;; Registers used:
  6455 ;;		wreg, status,2, status,0, cstack
  6456 ;; Tracked objects:
  6457 ;;		On entry : 0/0
  6458 ;;		On exit  : 0/0
  6459 ;;		Unchanged: 0/0
  6460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6461 ;;      Params:         0       0       0       0       0       0       0
  6462 ;;      Locals:         0       0       0       0       0       0       0
  6463 ;;      Temps:          0       0       0       0       0       0       0
  6464 ;;      Totals:         0       0       0       0       0       0       0
  6465 ;;Total ram usage:        0 bytes
  6466 ;; Hardware stack levels used:    1
  6467 ;; Hardware stack levels required when called:    8
  6468 ;; This function calls:
  6469 ;;		_PWM4_LoadDutyValue
  6470 ;;		_PotClear
  6471 ;;		_PotSetpoint
  6472 ;; This function is called by:
  6473 ;;		_main
  6474 ;; This function uses a non-reentrant model
  6475 ;;
  6476                           
  6477                           	psect	text41
  6478  001E2E                     __ptext41:
  6479                           	opt stack 0
  6480  001E2E                     _CoolingStart:
  6481                           	opt stack 22
  6482                           
  6483                           ;CoolingControl.c: 21: PotClear();
  6484                           
  6485                           ;incstack = 0
  6486  001E2E  ECCB  F009         	call	_PotClear	;wreg free
  6487                           
  6488                           ;CoolingControl.c: 22: PotSetpoint(40);
  6489  001E32  0E00               	movlw	0
  6490  001E34  6E27               	movwf	PotSetpoint@new_point+1,c
  6491  001E36  0E28               	movlw	40
  6492  001E38  6E26               	movwf	PotSetpoint@new_point,c
  6493  001E3A  EC6D  F008         	call	_PotSetpoint	;wreg free
  6494                           
  6495                           ;CoolingControl.c: 23: PWM4_LoadDutyValue(1000);
  6496  001E3E  0E03               	movlw	3
  6497  001E40  6E1E               	movwf	PWM4_LoadDutyValue@dutyValue+1,c
  6498  001E42  0EE8               	movlw	232
  6499  001E44  6E1D               	movwf	PWM4_LoadDutyValue@dutyValue,c
  6500  001E46  EC4B  F00E         	call	_PWM4_LoadDutyValue	;wreg free
  6501  001E4A  0012               	return		;funcret
  6502  001E4C                     __end_of_CoolingStart:
  6503                           	opt stack 0
  6504                           tblptru	equ	0xFF8
  6505                           tblptrh	equ	0xFF7
  6506                           tblptrl	equ	0xFF6
  6507                           tablat	equ	0xFF5
  6508                           prodh	equ	0xFF4
  6509                           prodl	equ	0xFF3
  6510                           intcon	equ	0xFF2
  6511                           intcon2	equ	0xFF1
  6512                           postinc0	equ	0xFEE
  6513                           wreg	equ	0xFE8
  6514                           indf1	equ	0xFE7
  6515                           postdec1	equ	0xFE5
  6516                           fsr1h	equ	0xFE2
  6517                           fsr1l	equ	0xFE1
  6518                           indf2	equ	0xFDF
  6519                           postinc2	equ	0xFDE
  6520                           postdec2	equ	0xFDD
  6521                           plusw2	equ	0xFDB
  6522                           fsr2h	equ	0xFDA
  6523                           fsr2l	equ	0xFD9
  6524                           status	equ	0xFD8
  6525                           
  6526 ;; *************** function _PotSetpoint *****************
  6527 ;; Defined at:
  6528 ;;		line 21 in file "DigiPot.c"
  6529 ;; Parameters:    Size  Location     Type
  6530 ;;  new_point       2   37[COMRAM] int 
  6531 ;; Auto vars:     Size  Location     Type
  6532 ;;  new_pos         2    4[BANK0 ] int 
  6533 ;;  x               2    2[BANK0 ] int 
  6534 ;;  set_point       2    0[BANK0 ] int 
  6535 ;; Return value:  Size  Location     Type
  6536 ;;                  1    wreg      void 
  6537 ;; Registers used:
  6538 ;;		wreg, status,2, status,0, cstack
  6539 ;; Tracked objects:
  6540 ;;		On entry : 0/0
  6541 ;;		On exit  : 0/0
  6542 ;;		Unchanged: 0/0
  6543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6544 ;;      Params:         2       0       0       0       0       0       0
  6545 ;;      Locals:         0       6       0       0       0       0       0
  6546 ;;      Temps:          2       0       0       0       0       0       0
  6547 ;;      Totals:         4       6       0       0       0       0       0
  6548 ;;Total ram usage:       10 bytes
  6549 ;; Hardware stack levels used:    1
  6550 ;; Hardware stack levels required when called:    7
  6551 ;; This function calls:
  6552 ;;		_Delay
  6553 ;; This function is called by:
  6554 ;;		_main
  6555 ;;		_CoolingStart
  6556 ;; This function uses a non-reentrant model
  6557 ;;
  6558                           
  6559                           	psect	text42
  6560  0010DA                     __ptext42:
  6561                           	opt stack 0
  6562  0010DA                     _PotSetpoint:
  6563                           	opt stack 23
  6564                           
  6565                           ;DigiPot.c: 22: int set_point;
  6566                           ;DigiPot.c: 31: int new_pos = new_point;
  6567                           
  6568                           ;incstack = 0
  6569  0010DA  C026  F064         	movff	PotSetpoint@new_point,PotSetpoint@new_pos
  6570  0010DE  C027  F065         	movff	PotSetpoint@new_point+1,PotSetpoint@new_pos+1
  6571                           
  6572                           ;DigiPot.c: 35: LATB5 = 0;
  6573  0010E2  9A8A               	bcf	3978,5,c	;volatile
  6574                           
  6575                           ;DigiPot.c: 38: if (new_pos > prev_pos) {
  6576  0010E4  0100               	movlb	0	; () banked
  6577  0010E6  5164               	movf	PotSetpoint@new_pos& (0+255),w,b
  6578  0010E8  5C37               	subwf	_prev_pos,w,c
  6579  0010EA  5038               	movf	_prev_pos+1,w,c
  6580  0010EC  0A80               	xorlw	128
  6581  0010EE  6E28               	movwf	??_PotSetpoint& (0+255),c
  6582  0010F0  0100               	movlb	0	; () banked
  6583  0010F2  5165               	movf	(PotSetpoint@new_pos+1)& (0+255),w,b
  6584  0010F4  0A80               	xorlw	128
  6585  0010F6  5828               	subwfb	??_PotSetpoint& (0+255),w,c
  6586  0010F8  B0D8               	btfsc	status,0,c
  6587  0010FA  D013               	goto	l712
  6588                           
  6589                           ; BSR set to: 0
  6590                           ;DigiPot.c: 40: LATB3 = 1;
  6591  0010FC  868A               	bsf	3978,3,c	;volatile
  6592                           
  6593                           ; BSR set to: 0
  6594                           ;DigiPot.c: 41: set_point = new_pos - prev_pos;
  6595  0010FE  C037  F028         	movff	_prev_pos,??_PotSetpoint
  6596  001102  C038  F029         	movff	_prev_pos+1,??_PotSetpoint+1
  6597  001106  1E28               	comf	??_PotSetpoint,f,c
  6598  001108  1E29               	comf	??_PotSetpoint+1,f,c
  6599  00110A  4A28               	infsnz	??_PotSetpoint,f,c
  6600  00110C  2A29               	incf	??_PotSetpoint+1,f,c
  6601  00110E  0100               	movlb	0	; () banked
  6602  001110  5164               	movf	PotSetpoint@new_pos& (0+255),w,b
  6603  001112  2428               	addwf	??_PotSetpoint,w,c
  6604  001114  0100               	movlb	0	; () banked
  6605  001116  6F60               	movwf	PotSetpoint@set_point& (0+255),b
  6606  001118  0100               	movlb	0	; () banked
  6607  00111A  5165               	movf	(PotSetpoint@new_pos+1)& (0+255),w,b
  6608  00111C  2029               	addwfc	??_PotSetpoint+1,w,c
  6609  00111E  0100               	movlb	0	; () banked
  6610  001120  6F61               	movwf	(PotSetpoint@set_point+1)& (0+255),b
  6611  001122                     l712:
  6612                           
  6613                           ; BSR set to: 0
  6614                           ;DigiPot.c: 42: }
  6615                           ;DigiPot.c: 43: if (new_pos < prev_pos) {
  6616  001122  5037               	movf	_prev_pos,w,c
  6617  001124  0100               	movlb	0	; () banked
  6618  001126  5D64               	subwf	PotSetpoint@new_pos& (0+255),w,b
  6619  001128  0100               	movlb	0	; () banked
  6620  00112A  5165               	movf	(PotSetpoint@new_pos+1)& (0+255),w,b
  6621  00112C  0A80               	xorlw	128
  6622  00112E  6E28               	movwf	??_PotSetpoint& (0+255),c
  6623  001130  5038               	movf	_prev_pos+1,w,c
  6624  001132  0A80               	xorlw	128
  6625  001134  5828               	subwfb	??_PotSetpoint& (0+255),w,c
  6626  001136  B0D8               	btfsc	status,0,c
  6627  001138  D011               	goto	l4236
  6628                           
  6629                           ; BSR set to: 0
  6630                           ;DigiPot.c: 45: LATB3 = 0;
  6631  00113A  968A               	bcf	3978,3,c	;volatile
  6632                           
  6633                           ; BSR set to: 0
  6634                           ;DigiPot.c: 46: set_point = prev_pos - new_pos;
  6635  00113C  C064  F028         	movff	PotSetpoint@new_pos,??_PotSetpoint
  6636  001140  C065  F029         	movff	PotSetpoint@new_pos+1,??_PotSetpoint+1
  6637  001144  1E28               	comf	??_PotSetpoint,f,c
  6638  001146  1E29               	comf	??_PotSetpoint+1,f,c
  6639  001148  4A28               	infsnz	??_PotSetpoint,f,c
  6640  00114A  2A29               	incf	??_PotSetpoint+1,f,c
  6641  00114C  5037               	movf	_prev_pos,w,c
  6642  00114E  2428               	addwf	??_PotSetpoint,w,c
  6643  001150  0100               	movlb	0	; () banked
  6644  001152  6F60               	movwf	PotSetpoint@set_point& (0+255),b
  6645  001154  5038               	movf	_prev_pos+1,w,c
  6646  001156  2029               	addwfc	??_PotSetpoint+1,w,c
  6647  001158  0100               	movlb	0	; () banked
  6648  00115A  6F61               	movwf	(PotSetpoint@set_point+1)& (0+255),b
  6649  00115C                     l4236:
  6650                           
  6651                           ; BSR set to: 0
  6652                           ;DigiPot.c: 47: }
  6653                           ;DigiPot.c: 48: Delay(1);
  6654  00115C  0E01               	movlw	1
  6655  00115E  6E1D               	movwf	Delay@wait,c
  6656  001160  0E00               	movlw	0
  6657  001162  6E1E               	movwf	Delay@wait+1,c
  6658  001164  0E00               	movlw	0
  6659  001166  6E1F               	movwf	Delay@wait+2,c
  6660  001168  0E00               	movlw	0
  6661  00116A  6E20               	movwf	Delay@wait+3,c
  6662  00116C  EC97  F00D         	call	_Delay	;wreg free
  6663                           
  6664                           ;DigiPot.c: 50: int x;
  6665                           ;DigiPot.c: 52: for (x = 0; x < set_point; x++) {
  6666  001170  0E00               	movlw	0
  6667  001172  0100               	movlb	0	; () banked
  6668  001174  6F63               	movwf	(PotSetpoint@x+1)& (0+255),b
  6669  001176  0E00               	movlw	0
  6670  001178  6F62               	movwf	PotSetpoint@x& (0+255),b
  6671  00117A  D019               	goto	l4246
  6672  00117C                     l715:
  6673                           
  6674                           ; BSR set to: 0
  6675                           ;DigiPot.c: 53: LATB4 = 1;
  6676  00117C  888A               	bsf	3978,4,c	;volatile
  6677                           
  6678                           ; BSR set to: 0
  6679                           ;DigiPot.c: 54: Delay(1);
  6680  00117E  0E01               	movlw	1
  6681  001180  6E1D               	movwf	Delay@wait,c
  6682  001182  0E00               	movlw	0
  6683  001184  6E1E               	movwf	Delay@wait+1,c
  6684  001186  0E00               	movlw	0
  6685  001188  6E1F               	movwf	Delay@wait+2,c
  6686  00118A  0E00               	movlw	0
  6687  00118C  6E20               	movwf	Delay@wait+3,c
  6688  00118E  EC97  F00D         	call	_Delay	;wreg free
  6689                           
  6690                           ;DigiPot.c: 55: LATB4 = 0;
  6691  001192  988A               	bcf	3978,4,c	;volatile
  6692                           
  6693                           ;DigiPot.c: 56: Delay(1);
  6694  001194  0E01               	movlw	1
  6695  001196  6E1D               	movwf	Delay@wait,c
  6696  001198  0E00               	movlw	0
  6697  00119A  6E1E               	movwf	Delay@wait+1,c
  6698  00119C  0E00               	movlw	0
  6699  00119E  6E1F               	movwf	Delay@wait+2,c
  6700  0011A0  0E00               	movlw	0
  6701  0011A2  6E20               	movwf	Delay@wait+3,c
  6702  0011A4  EC97  F00D         	call	_Delay	;wreg free
  6703  0011A8  0100               	movlb	0	; () banked
  6704  0011AA  4B62               	infsnz	PotSetpoint@x& (0+255),f,b
  6705  0011AC  2B63               	incf	(PotSetpoint@x+1)& (0+255),f,b
  6706  0011AE                     l4246:
  6707                           
  6708                           ; BSR set to: 0
  6709  0011AE  0100               	movlb	0	; () banked
  6710  0011B0  5160               	movf	PotSetpoint@set_point& (0+255),w,b
  6711  0011B2  0100               	movlb	0	; () banked
  6712  0011B4  5D62               	subwf	PotSetpoint@x& (0+255),w,b
  6713  0011B6  0100               	movlb	0	; () banked
  6714  0011B8  5163               	movf	(PotSetpoint@x+1)& (0+255),w,b
  6715  0011BA  0A80               	xorlw	128
  6716  0011BC  6E28               	movwf	??_PotSetpoint& (0+255),c
  6717  0011BE  0100               	movlb	0	; () banked
  6718  0011C0  5161               	movf	(PotSetpoint@set_point+1)& (0+255),w,b
  6719  0011C2  0A80               	xorlw	128
  6720  0011C4  5828               	subwfb	??_PotSetpoint& (0+255),w,c
  6721  0011C6  A0D8               	btfss	status,0,c
  6722  0011C8  D7D9               	goto	l715
  6723                           
  6724                           ; BSR set to: 0
  6725                           ;DigiPot.c: 57: }
  6726                           ;DigiPot.c: 59: LATB5 = 1;
  6727  0011CA  8A8A               	bsf	3978,5,c	;volatile
  6728                           
  6729                           ;DigiPot.c: 60: prev_pos = new_pos;
  6730  0011CC  C064  F037         	movff	PotSetpoint@new_pos,_prev_pos
  6731  0011D0  C065  F038         	movff	PotSetpoint@new_pos+1,_prev_pos+1
  6732                           
  6733                           ; BSR set to: 0
  6734  0011D4  0012               	return		;funcret
  6735  0011D6                     __end_of_PotSetpoint:
  6736                           	opt stack 0
  6737                           tblptru	equ	0xFF8
  6738                           tblptrh	equ	0xFF7
  6739                           tblptrl	equ	0xFF6
  6740                           tablat	equ	0xFF5
  6741                           prodh	equ	0xFF4
  6742                           prodl	equ	0xFF3
  6743                           intcon	equ	0xFF2
  6744                           intcon2	equ	0xFF1
  6745                           postinc0	equ	0xFEE
  6746                           wreg	equ	0xFE8
  6747                           indf1	equ	0xFE7
  6748                           postdec1	equ	0xFE5
  6749                           fsr1h	equ	0xFE2
  6750                           fsr1l	equ	0xFE1
  6751                           indf2	equ	0xFDF
  6752                           postinc2	equ	0xFDE
  6753                           postdec2	equ	0xFDD
  6754                           plusw2	equ	0xFDB
  6755                           fsr2h	equ	0xFDA
  6756                           fsr2l	equ	0xFD9
  6757                           status	equ	0xFD8
  6758                           
  6759 ;; *************** function _PotClear *****************
  6760 ;; Defined at:
  6761 ;;		line 66 in file "DigiPot.c"
  6762 ;; Parameters:    Size  Location     Type
  6763 ;;		None
  6764 ;; Auto vars:     Size  Location     Type
  6765 ;;  x               2   37[COMRAM] int 
  6766 ;; Return value:  Size  Location     Type
  6767 ;;                  1    wreg      void 
  6768 ;; Registers used:
  6769 ;;		wreg, status,2, status,0, cstack
  6770 ;; Tracked objects:
  6771 ;;		On entry : 0/0
  6772 ;;		On exit  : 0/0
  6773 ;;		Unchanged: 0/0
  6774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6775 ;;      Params:         0       0       0       0       0       0       0
  6776 ;;      Locals:         2       0       0       0       0       0       0
  6777 ;;      Temps:          0       0       0       0       0       0       0
  6778 ;;      Totals:         2       0       0       0       0       0       0
  6779 ;;Total ram usage:        2 bytes
  6780 ;; Hardware stack levels used:    1
  6781 ;; Hardware stack levels required when called:    7
  6782 ;; This function calls:
  6783 ;;		_Delay
  6784 ;; This function is called by:
  6785 ;;		_CoolingStart
  6786 ;;		_CoolingStop
  6787 ;; This function uses a non-reentrant model
  6788 ;;
  6789                           
  6790                           	psect	text43
  6791  001396                     __ptext43:
  6792                           	opt stack 0
  6793  001396                     _PotClear:
  6794                           	opt stack 22
  6795                           
  6796                           ;DigiPot.c: 67: Delay(1);
  6797                           
  6798                           ; BSR set to: 0
  6799                           ;incstack = 0
  6800  001396  0E01               	movlw	1
  6801  001398  6E1D               	movwf	Delay@wait,c
  6802  00139A  0E00               	movlw	0
  6803  00139C  6E1E               	movwf	Delay@wait+1,c
  6804  00139E  0E00               	movlw	0
  6805  0013A0  6E1F               	movwf	Delay@wait+2,c
  6806  0013A2  0E00               	movlw	0
  6807  0013A4  6E20               	movwf	Delay@wait+3,c
  6808  0013A6  EC97  F00D         	call	_Delay	;wreg free
  6809                           
  6810                           ;DigiPot.c: 69: LATB5 = 0;
  6811  0013AA  9A8A               	bcf	3978,5,c	;volatile
  6812                           
  6813                           ;DigiPot.c: 70: Delay(1);
  6814  0013AC  0E01               	movlw	1
  6815  0013AE  6E1D               	movwf	Delay@wait,c
  6816  0013B0  0E00               	movlw	0
  6817  0013B2  6E1E               	movwf	Delay@wait+1,c
  6818  0013B4  0E00               	movlw	0
  6819  0013B6  6E1F               	movwf	Delay@wait+2,c
  6820  0013B8  0E00               	movlw	0
  6821  0013BA  6E20               	movwf	Delay@wait+3,c
  6822  0013BC  EC97  F00D         	call	_Delay	;wreg free
  6823                           
  6824                           ;DigiPot.c: 71: LATB3 = 0;
  6825  0013C0  968A               	bcf	3978,3,c	;volatile
  6826                           
  6827                           ;DigiPot.c: 72: Delay(1);
  6828  0013C2  0E01               	movlw	1
  6829  0013C4  6E1D               	movwf	Delay@wait,c
  6830  0013C6  0E00               	movlw	0
  6831  0013C8  6E1E               	movwf	Delay@wait+1,c
  6832  0013CA  0E00               	movlw	0
  6833  0013CC  6E1F               	movwf	Delay@wait+2,c
  6834  0013CE  0E00               	movlw	0
  6835  0013D0  6E20               	movwf	Delay@wait+3,c
  6836  0013D2  EC97  F00D         	call	_Delay	;wreg free
  6837                           
  6838                           ;DigiPot.c: 73: int x;
  6839                           ;DigiPot.c: 74: for (x = 0; x < 32; x++) {
  6840  0013D6  0E00               	movlw	0
  6841  0013D8  6E27               	movwf	PotClear@x+1,c
  6842  0013DA  0E00               	movlw	0
  6843  0013DC  6E26               	movwf	PotClear@x,c
  6844  0013DE  BE27               	btfsc	PotClear@x+1,7,c
  6845  0013E0  D006               	goto	l720
  6846  0013E2  5027               	movf	PotClear@x+1,w,c
  6847  0013E4  E121               	bnz	l721
  6848  0013E6  0E20               	movlw	32
  6849  0013E8  5C26               	subwf	PotClear@x,w,c
  6850  0013EA  B0D8               	btfsc	status,0,c
  6851  0013EC  D01D               	goto	l721
  6852  0013EE                     l720:
  6853                           
  6854                           ;DigiPot.c: 75: LATB4 = 1;
  6855  0013EE  888A               	bsf	3978,4,c	;volatile
  6856                           
  6857                           ;DigiPot.c: 76: Delay(1);
  6858  0013F0  0E01               	movlw	1
  6859  0013F2  6E1D               	movwf	Delay@wait,c
  6860  0013F4  0E00               	movlw	0
  6861  0013F6  6E1E               	movwf	Delay@wait+1,c
  6862  0013F8  0E00               	movlw	0
  6863  0013FA  6E1F               	movwf	Delay@wait+2,c
  6864  0013FC  0E00               	movlw	0
  6865  0013FE  6E20               	movwf	Delay@wait+3,c
  6866  001400  EC97  F00D         	call	_Delay	;wreg free
  6867                           
  6868                           ;DigiPot.c: 77: LATB4 = 0;
  6869  001404  988A               	bcf	3978,4,c	;volatile
  6870                           
  6871                           ;DigiPot.c: 78: Delay(1);
  6872  001406  0E01               	movlw	1
  6873  001408  6E1D               	movwf	Delay@wait,c
  6874  00140A  0E00               	movlw	0
  6875  00140C  6E1E               	movwf	Delay@wait+1,c
  6876  00140E  0E00               	movlw	0
  6877  001410  6E1F               	movwf	Delay@wait+2,c
  6878  001412  0E00               	movlw	0
  6879  001414  6E20               	movwf	Delay@wait+3,c
  6880  001416  EC97  F00D         	call	_Delay	;wreg free
  6881  00141A  4A26               	infsnz	PotClear@x,f,c
  6882  00141C  2A27               	incf	PotClear@x+1,f,c
  6883  00141E  BE27               	btfsc	PotClear@x+1,7,c
  6884  001420  D7E6               	goto	l720
  6885  001422  5027               	movf	PotClear@x+1,w,c
  6886  001424  E101               	bnz	u2730
  6887  001426  D7DF               	goto	L1
  6888  001428                     u2730:
  6889  001428                     l721:
  6890                           
  6891                           ;DigiPot.c: 79: }
  6892                           ;DigiPot.c: 80: LATB4 = 1;
  6893  001428  888A               	bsf	3978,4,c	;volatile
  6894                           
  6895                           ;DigiPot.c: 81: Delay(1);
  6896  00142A  0E01               	movlw	1
  6897  00142C  6E1D               	movwf	Delay@wait,c
  6898  00142E  0E00               	movlw	0
  6899  001430  6E1E               	movwf	Delay@wait+1,c
  6900  001432  0E00               	movlw	0
  6901  001434  6E1F               	movwf	Delay@wait+2,c
  6902  001436  0E00               	movlw	0
  6903  001438  6E20               	movwf	Delay@wait+3,c
  6904  00143A  EC97  F00D         	call	_Delay	;wreg free
  6905                           
  6906                           ;DigiPot.c: 83: LATB5 = 1;
  6907  00143E  8A8A               	bsf	3978,5,c	;volatile
  6908                           
  6909                           ;DigiPot.c: 84: prev_pos = 0;
  6910  001440  0E00               	movlw	0
  6911  001442  6E38               	movwf	_prev_pos+1,c
  6912  001444  0E00               	movlw	0
  6913  001446  6E37               	movwf	_prev_pos,c
  6914                           
  6915                           ;DigiPot.c: 85: Delay(1);
  6916  001448  0E01               	movlw	1
  6917  00144A  6E1D               	movwf	Delay@wait,c
  6918  00144C  0E00               	movlw	0
  6919  00144E  6E1E               	movwf	Delay@wait+1,c
  6920  001450  0E00               	movlw	0
  6921  001452  6E1F               	movwf	Delay@wait+2,c
  6922  001454  0E00               	movlw	0
  6923  001456  6E20               	movwf	Delay@wait+3,c
  6924  001458  EC97  F00D         	call	_Delay	;wreg free
  6925  00145C  0012               	return		;funcret
  6926  00145E                     __end_of_PotClear:
  6927                           	opt stack 0
  6928                           tblptru	equ	0xFF8
  6929                           tblptrh	equ	0xFF7
  6930                           tblptrl	equ	0xFF6
  6931                           tablat	equ	0xFF5
  6932                           prodh	equ	0xFF4
  6933                           prodl	equ	0xFF3
  6934                           intcon	equ	0xFF2
  6935                           intcon2	equ	0xFF1
  6936                           postinc0	equ	0xFEE
  6937                           wreg	equ	0xFE8
  6938                           indf1	equ	0xFE7
  6939                           postdec1	equ	0xFE5
  6940                           fsr1h	equ	0xFE2
  6941                           fsr1l	equ	0xFE1
  6942                           indf2	equ	0xFDF
  6943                           postinc2	equ	0xFDE
  6944                           postdec2	equ	0xFDD
  6945                           plusw2	equ	0xFDB
  6946                           fsr2h	equ	0xFDA
  6947                           fsr2l	equ	0xFD9
  6948                           status	equ	0xFD8
  6949                           
  6950 ;; *************** function _Delay *****************
  6951 ;; Defined at:
  6952 ;;		line 9 in file "Functions.c"
  6953 ;; Parameters:    Size  Location     Type
  6954 ;;  wait            4   28[COMRAM] long 
  6955 ;; Auto vars:     Size  Location     Type
  6956 ;;  i               4   33[COMRAM] long 
  6957 ;; Return value:  Size  Location     Type
  6958 ;;                  1    wreg      void 
  6959 ;; Registers used:
  6960 ;;		wreg, status,2, status,0
  6961 ;; Tracked objects:
  6962 ;;		On entry : 0/0
  6963 ;;		On exit  : 0/0
  6964 ;;		Unchanged: 0/0
  6965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6966 ;;      Params:         4       0       0       0       0       0       0
  6967 ;;      Locals:         4       0       0       0       0       0       0
  6968 ;;      Temps:          1       0       0       0       0       0       0
  6969 ;;      Totals:         9       0       0       0       0       0       0
  6970 ;;Total ram usage:        9 bytes
  6971 ;; Hardware stack levels used:    1
  6972 ;; Hardware stack levels required when called:    6
  6973 ;; This function calls:
  6974 ;;		Nothing
  6975 ;; This function is called by:
  6976 ;;		_StartUp595
  6977 ;;		_writeRegisters
  6978 ;;		_PotSetpoint
  6979 ;;		_PotClear
  6980 ;;		_ComController
  6981 ;; This function uses a non-reentrant model
  6982 ;;
  6983                           
  6984                           	psect	text44
  6985  001B2E                     __ptext44:
  6986                           	opt stack 0
  6987  001B2E                     _Delay:
  6988                           	opt stack 21
  6989                           
  6990                           ;Functions.c: 10: long int i = 0;
  6991                           
  6992                           ;incstack = 0
  6993  001B2E  0E00               	movlw	0
  6994  001B30  6E22               	movwf	Delay@i,c
  6995  001B32  0E00               	movlw	0
  6996  001B34  6E23               	movwf	Delay@i+1,c
  6997  001B36  0E00               	movlw	0
  6998  001B38  6E24               	movwf	Delay@i+2,c
  6999  001B3A  0E00               	movlw	0
  7000  001B3C  6E25               	movwf	Delay@i+3,c
  7001                           
  7002                           ;Functions.c: 11: for (; wait > i; i++) {
  7003  001B3E  D00D               	goto	l3688
  7004  001B40                     l3684:
  7005                           
  7006                           ;Functions.c: 12: _delay((unsigned long)((1)*(8000000/4000.0)));
  7007  001B40  0E03               	movlw	3
  7008  001B42  6E21               	movwf	??_Delay& (0+255),c
  7009  001B44  0E98               	movlw	152
  7010  001B46                     u2857:
  7011  001B46  2EE8               	decfsz	wreg,f,c
  7012  001B48  D7FE               	bra	u2857
  7013  001B4A  2E21               	decfsz	??_Delay& (0+255),f,c
  7014  001B4C  D7FC               	bra	u2857
  7015  001B4E  0E01               	movlw	1
  7016  001B50  2622               	addwf	Delay@i,f,c
  7017  001B52  0E00               	movlw	0
  7018  001B54  2223               	addwfc	Delay@i+1,f,c
  7019  001B56  2224               	addwfc	Delay@i+2,f,c
  7020  001B58  2225               	addwfc	Delay@i+3,f,c
  7021  001B5A                     l3688:
  7022  001B5A  501D               	movf	Delay@wait,w,c
  7023  001B5C  5C22               	subwf	Delay@i,w,c
  7024  001B5E  501E               	movf	Delay@wait+1,w,c
  7025  001B60  5823               	subwfb	Delay@i+1,w,c
  7026  001B62  501F               	movf	Delay@wait+2,w,c
  7027  001B64  5824               	subwfb	Delay@i+2,w,c
  7028  001B66  5025               	movf	Delay@i+3,w,c
  7029  001B68  0A80               	xorlw	128
  7030  001B6A  6E21               	movwf	??_Delay& (0+255),c
  7031  001B6C  5020               	movf	Delay@wait+3,w,c
  7032  001B6E  0A80               	xorlw	128
  7033  001B70  5821               	subwfb	??_Delay& (0+255),w,c
  7034  001B72  B0D8               	btfsc	status,0,c
  7035  001B74  0012               	return	
  7036  001B76  D7E4               	goto	l3684
  7037  001B78                     __end_of_Delay:
  7038                           	opt stack 0
  7039                           tblptru	equ	0xFF8
  7040                           tblptrh	equ	0xFF7
  7041                           tblptrl	equ	0xFF6
  7042                           tablat	equ	0xFF5
  7043                           prodh	equ	0xFF4
  7044                           prodl	equ	0xFF3
  7045                           intcon	equ	0xFF2
  7046                           intcon2	equ	0xFF1
  7047                           postinc0	equ	0xFEE
  7048                           wreg	equ	0xFE8
  7049                           indf1	equ	0xFE7
  7050                           postdec1	equ	0xFE5
  7051                           fsr1h	equ	0xFE2
  7052                           fsr1l	equ	0xFE1
  7053                           indf2	equ	0xFDF
  7054                           postinc2	equ	0xFDE
  7055                           postdec2	equ	0xFDD
  7056                           plusw2	equ	0xFDB
  7057                           fsr2h	equ	0xFDA
  7058                           fsr2l	equ	0xFD9
  7059                           status	equ	0xFD8
  7060                           
  7061 ;; *************** function _PWM4_LoadDutyValue *****************
  7062 ;; Defined at:
  7063 ;;		line 81 in file "mcc_generated_files/pwm4.c"
  7064 ;; Parameters:    Size  Location     Type
  7065 ;;  dutyValue       2   28[COMRAM] unsigned int 
  7066 ;; Auto vars:     Size  Location     Type
  7067 ;;		None
  7068 ;; Return value:  Size  Location     Type
  7069 ;;                  1    wreg      void 
  7070 ;; Registers used:
  7071 ;;		wreg, status,2, status,0
  7072 ;; Tracked objects:
  7073 ;;		On entry : 0/0
  7074 ;;		On exit  : 0/0
  7075 ;;		Unchanged: 0/0
  7076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7077 ;;      Params:         2       0       0       0       0       0       0
  7078 ;;      Locals:         0       0       0       0       0       0       0
  7079 ;;      Temps:          2       0       0       0       0       0       0
  7080 ;;      Totals:         4       0       0       0       0       0       0
  7081 ;;Total ram usage:        4 bytes
  7082 ;; Hardware stack levels used:    1
  7083 ;; Hardware stack levels required when called:    6
  7084 ;; This function calls:
  7085 ;;		Nothing
  7086 ;; This function is called by:
  7087 ;;		_main
  7088 ;;		_CoolingStart
  7089 ;;		_CoolingStop
  7090 ;; This function uses a non-reentrant model
  7091 ;;
  7092                           
  7093                           	psect	text45
  7094  001C96                     __ptext45:
  7095                           	opt stack 0
  7096  001C96                     _PWM4_LoadDutyValue:
  7097                           	opt stack 24
  7098                           
  7099                           ;pwm4.c: 84: CCPR2L = ((dutyValue & 0x03FC)>>2);
  7100                           
  7101                           ;incstack = 0
  7102  001C96  C01D  F01F         	movff	PWM4_LoadDutyValue@dutyValue,??_PWM4_LoadDutyValue
  7103  001C9A  C01E  F020         	movff	PWM4_LoadDutyValue@dutyValue+1,??_PWM4_LoadDutyValue+1
  7104  001C9E  90D8               	bcf	status,0,c
  7105  001CA0  3220               	rrcf	??_PWM4_LoadDutyValue+1,f,c
  7106  001CA2  321F               	rrcf	??_PWM4_LoadDutyValue,f,c
  7107  001CA4  90D8               	bcf	status,0,c
  7108  001CA6  3220               	rrcf	??_PWM4_LoadDutyValue+1,f,c
  7109  001CA8  321F               	rrcf	??_PWM4_LoadDutyValue,f,c
  7110  001CAA  501F               	movf	??_PWM4_LoadDutyValue,w,c
  7111  001CAC  6E67               	movwf	3943,c	;volatile
  7112                           
  7113                           ;pwm4.c: 87: CCP2CON = (CCP2CON & 0xCF) | ((dutyValue & 0x0003)<<4);
  7114  001CAE  C01D  F01F         	movff	PWM4_LoadDutyValue@dutyValue,??_PWM4_LoadDutyValue
  7115  001CB2  0E03               	movlw	3
  7116  001CB4  161F               	andwf	??_PWM4_LoadDutyValue,f,c
  7117  001CB6  3A1F               	swapf	??_PWM4_LoadDutyValue,f,c
  7118  001CB8  0EF0               	movlw	240
  7119  001CBA  161F               	andwf	??_PWM4_LoadDutyValue,f,c
  7120  001CBC  5066               	movf	3942,w,c	;volatile
  7121  001CBE  0BCF               	andlw	207
  7122  001CC0  101F               	iorwf	??_PWM4_LoadDutyValue,w,c
  7123  001CC2  6E66               	movwf	3942,c	;volatile
  7124  001CC4  0012               	return		;funcret
  7125  001CC6                     __end_of_PWM4_LoadDutyValue:
  7126                           	opt stack 0
  7127                           tblptru	equ	0xFF8
  7128                           tblptrh	equ	0xFF7
  7129                           tblptrl	equ	0xFF6
  7130                           tablat	equ	0xFF5
  7131                           prodh	equ	0xFF4
  7132                           prodl	equ	0xFF3
  7133                           intcon	equ	0xFF2
  7134                           intcon2	equ	0xFF1
  7135                           postinc0	equ	0xFEE
  7136                           wreg	equ	0xFE8
  7137                           indf1	equ	0xFE7
  7138                           postdec1	equ	0xFE5
  7139                           fsr1h	equ	0xFE2
  7140                           fsr1l	equ	0xFE1
  7141                           indf2	equ	0xFDF
  7142                           postinc2	equ	0xFDE
  7143                           postdec2	equ	0xFDD
  7144                           plusw2	equ	0xFDB
  7145                           fsr2h	equ	0xFDA
  7146                           fsr2l	equ	0xFD9
  7147                           status	equ	0xFD8
  7148                           
  7149 ;; *************** function _CoolingCheck *****************
  7150 ;; Defined at:
  7151 ;;		line 229 in file "PDU.c"
  7152 ;; Parameters:    Size  Location     Type
  7153 ;;		None
  7154 ;; Auto vars:     Size  Location     Type
  7155 ;;		None
  7156 ;; Return value:  Size  Location     Type
  7157 ;;                  1    wreg      unsigned char 
  7158 ;; Registers used:
  7159 ;;		wreg, status,2
  7160 ;; Tracked objects:
  7161 ;;		On entry : 0/0
  7162 ;;		On exit  : 0/0
  7163 ;;		Unchanged: 0/0
  7164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7165 ;;      Params:         0       0       0       0       0       0       0
  7166 ;;      Locals:         0       0       0       0       0       0       0
  7167 ;;      Temps:          0       0       0       0       0       0       0
  7168 ;;      Totals:         0       0       0       0       0       0       0
  7169 ;;Total ram usage:        0 bytes
  7170 ;; Hardware stack levels used:    1
  7171 ;; Hardware stack levels required when called:    6
  7172 ;; This function calls:
  7173 ;;		Nothing
  7174 ;; This function is called by:
  7175 ;;		_main
  7176 ;; This function uses a non-reentrant model
  7177 ;;
  7178                           
  7179                           	psect	text46
  7180  001F70                     __ptext46:
  7181                           	opt stack 0
  7182  001F70                     _CoolingCheck:
  7183                           	opt stack 24
  7184                           
  7185                           ;PDU.c: 230: return MCSOn;
  7186                           
  7187                           ;incstack = 0
  7188  001F70  503B               	movf	_MCSOn,w,c
  7189  001F72  0012               	return	
  7190  001F74                     __end_of_CoolingCheck:
  7191                           	opt stack 0
  7192                           tblptru	equ	0xFF8
  7193                           tblptrh	equ	0xFF7
  7194                           tblptrl	equ	0xFF6
  7195                           tablat	equ	0xFF5
  7196                           prodh	equ	0xFF4
  7197                           prodl	equ	0xFF3
  7198                           intcon	equ	0xFF2
  7199                           intcon2	equ	0xFF1
  7200                           postinc0	equ	0xFEE
  7201                           wreg	equ	0xFE8
  7202                           indf1	equ	0xFE7
  7203                           postdec1	equ	0xFE5
  7204                           fsr1h	equ	0xFE2
  7205                           fsr1l	equ	0xFE1
  7206                           indf2	equ	0xFDF
  7207                           postinc2	equ	0xFDE
  7208                           postdec2	equ	0xFDD
  7209                           plusw2	equ	0xFDB
  7210                           fsr2h	equ	0xFDA
  7211                           fsr2l	equ	0xFD9
  7212                           status	equ	0xFD8
  7213                           
  7214 ;; *************** function _INTERRUPT_InterruptManager *****************
  7215 ;; Defined at:
  7216 ;;		line 67 in file "mcc_generated_files/interrupt_manager.c"
  7217 ;; Parameters:    Size  Location     Type
  7218 ;;		None
  7219 ;; Auto vars:     Size  Location     Type
  7220 ;;		None
  7221 ;; Return value:  Size  Location     Type
  7222 ;;                  1    wreg      void 
  7223 ;; Registers used:
  7224 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7225 ;; Tracked objects:
  7226 ;;		On entry : 0/0
  7227 ;;		On exit  : 0/0
  7228 ;;		Unchanged: 0/0
  7229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7230 ;;      Params:         0       0       0       0       0       0       0
  7231 ;;      Locals:         0       0       0       0       0       0       0
  7232 ;;      Temps:         14       0       0       0       0       0       0
  7233 ;;      Totals:        14       0       0       0       0       0       0
  7234 ;;Total ram usage:       14 bytes
  7235 ;; Hardware stack levels used:    1
  7236 ;; Hardware stack levels required when called:    5
  7237 ;; This function calls:
  7238 ;;		_ADC_ISR
  7239 ;;		_EUSART1_Receive_ISR
  7240 ;;		_EUSART1_Transmit_ISR
  7241 ;;		_TMR1_ISR
  7242 ;; This function is called by:
  7243 ;;		Interrupt level 2
  7244 ;; This function uses a non-reentrant model
  7245 ;;
  7246                           
  7247                           	psect	intcode
  7248  000008                     __pintcode:
  7249                           	opt stack 0
  7250  000008                     _INTERRUPT_InterruptManager:
  7251                           	opt stack 18
  7252                           
  7253                           ;incstack = 0
  7254  000008  8243               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7255  00000A  CFFA F00F          	movff	pclath,??_INTERRUPT_InterruptManager
  7256  00000E  CFFB F010          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  7257  000012  CFE9 F011          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  7258  000016  CFEA F012          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  7259  00001A  CFE1 F013          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  7260  00001E  CFE2 F014          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  7261  000022  CFD9 F015          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  7262  000026  CFDA F016          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  7263  00002A  CFF3 F017          	movff	prodl,??_INTERRUPT_InterruptManager+8
  7264  00002E  CFF4 F018          	movff	prodh,??_INTERRUPT_InterruptManager+9
  7265  000032  CFF6 F019          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  7266  000036  CFF7 F01A          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  7267  00003A  CFF8 F01B          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  7268  00003E  CFF5 F01C          	movff	tablat,??_INTERRUPT_InterruptManager+13
  7269                           
  7270                           ;interrupt_manager.c: 70: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  7271  000042  BA9D               	btfsc	3997,5,c	;volatile
  7272  000044  AA9E               	btfss	3998,5,c	;volatile
  7273  000046  D003               	goto	i2l67
  7274                           
  7275                           ;interrupt_manager.c: 71: {
  7276                           ;interrupt_manager.c: 72: EUSART1_Receive_ISR();
  7277  000048  EC26  F00F         	call	_EUSART1_Receive_ISR	;wreg free
  7278                           
  7279                           ;interrupt_manager.c: 73: }
  7280  00004C  D011               	goto	i2l75
  7281  00004E                     i2l67:
  7282                           
  7283                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  7284  00004E  B89D               	btfsc	3997,4,c	;volatile
  7285  000050  A89E               	btfss	3998,4,c	;volatile
  7286  000052  D003               	goto	i2l69
  7287                           
  7288                           ;interrupt_manager.c: 75: {
  7289                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
  7290  000054  EC32  F00E         	call	_EUSART1_Transmit_ISR	;wreg free
  7291                           
  7292                           ;interrupt_manager.c: 77: }
  7293  000058  D00B               	goto	i2l75
  7294  00005A                     i2l69:
  7295                           
  7296                           ;interrupt_manager.c: 78: else if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
  7297  00005A  BC9D               	btfsc	3997,6,c	;volatile
  7298  00005C  AC9E               	btfss	3998,6,c	;volatile
  7299  00005E  D003               	goto	i2l71
  7300                           
  7301                           ;interrupt_manager.c: 79: {
  7302                           ;interrupt_manager.c: 80: ADC_ISR();
  7303  000060  ECBA  F00F         	call	_ADC_ISR	;wreg free
  7304                           
  7305                           ;interrupt_manager.c: 81: }
  7306  000064  D005               	goto	i2l75
  7307  000066                     i2l71:
  7308                           
  7309                           ;interrupt_manager.c: 82: else if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
  7310  000066  B09D               	btfsc	3997,0,c	;volatile
  7311  000068  A09E               	btfss	3998,0,c	;volatile
  7312  00006A  D002               	goto	i2l75
  7313                           
  7314                           ;interrupt_manager.c: 83: {
  7315                           ;interrupt_manager.c: 84: TMR1_ISR();
  7316  00006C  EC19  F00E         	call	_TMR1_ISR	;wreg free
  7317  000070                     i2l75:
  7318  000070  C01C  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  7319  000074  C01B  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  7320  000078  C01A  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  7321  00007C  C019  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  7322  000080  C018  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  7323  000084  C017  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  7324  000088  C016  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  7325  00008C  C015  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  7326  000090  C014  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  7327  000094  C013  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  7328  000098  C012  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  7329  00009C  C011  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  7330  0000A0  C010  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  7331  0000A4  C00F  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  7332  0000A8  9243               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7333  0000AA  0011               	retfie		f
  7334  0000AC                     __end_of_INTERRUPT_InterruptManager:
  7335                           	opt stack 0
  7336                           pclatu	equ	0xFFB
  7337                           pclath	equ	0xFFA
  7338                           tblptru	equ	0xFF8
  7339                           tblptrh	equ	0xFF7
  7340                           tblptrl	equ	0xFF6
  7341                           tablat	equ	0xFF5
  7342                           prodh	equ	0xFF4
  7343                           prodl	equ	0xFF3
  7344                           intcon	equ	0xFF2
  7345                           intcon2	equ	0xFF1
  7346                           postinc0	equ	0xFEE
  7347                           fsr0h	equ	0xFEA
  7348                           fsr0l	equ	0xFE9
  7349                           wreg	equ	0xFE8
  7350                           indf1	equ	0xFE7
  7351                           postdec1	equ	0xFE5
  7352                           fsr1h	equ	0xFE2
  7353                           fsr1l	equ	0xFE1
  7354                           indf2	equ	0xFDF
  7355                           postinc2	equ	0xFDE
  7356                           postdec2	equ	0xFDD
  7357                           plusw2	equ	0xFDB
  7358                           fsr2h	equ	0xFDA
  7359                           fsr2l	equ	0xFD9
  7360                           status	equ	0xFD8
  7361                           
  7362 ;; *************** function _TMR1_ISR *****************
  7363 ;; Defined at:
  7364 ;;		line 161 in file "mcc_generated_files/tmr1.c"
  7365 ;; Parameters:    Size  Location     Type
  7366 ;;		None
  7367 ;; Auto vars:     Size  Location     Type
  7368 ;;		None
  7369 ;; Return value:  Size  Location     Type
  7370 ;;                  1    wreg      void 
  7371 ;; Registers used:
  7372 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7373 ;; Tracked objects:
  7374 ;;		On entry : 0/0
  7375 ;;		On exit  : 0/0
  7376 ;;		Unchanged: 0/0
  7377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7378 ;;      Params:         0       0       0       0       0       0       0
  7379 ;;      Locals:         0       0       0       0       0       0       0
  7380 ;;      Temps:          0       0       0       0       0       0       0
  7381 ;;      Totals:         0       0       0       0       0       0       0
  7382 ;;Total ram usage:        0 bytes
  7383 ;; Hardware stack levels used:    1
  7384 ;; Hardware stack levels required when called:    4
  7385 ;; This function calls:
  7386 ;;		_FuseSystem
  7387 ;;		_ReadCurrent
  7388 ;; This function is called by:
  7389 ;;		_INTERRUPT_InterruptManager
  7390 ;; This function uses a non-reentrant model
  7391 ;;
  7392                           
  7393                           	psect	text48
  7394  001C32                     __ptext48:
  7395                           	opt stack 0
  7396  001C32                     _TMR1_ISR:
  7397                           	opt stack 18
  7398                           
  7399                           ;tmr1.c: 165: PIR1bits.TMR1IF = 0;
  7400                           
  7401                           ;incstack = 0
  7402  001C32  909E               	bcf	3998,0,c	;volatile
  7403                           
  7404                           ;tmr1.c: 168: TMR1H = (timer1ReloadVal >> 8);
  7405  001C34  503A               	movf	_timer1ReloadVal+1,w,c	;volatile
  7406  001C36  6ECF               	movwf	4047,c	;volatile
  7407                           
  7408                           ;tmr1.c: 169: TMR1L = (uint8_t) timer1ReloadVal;
  7409  001C38  C039  FFCE         	movff	_timer1ReloadVal,4046	;volatile
  7410                           
  7411                           ;tmr1.c: 170: readwhat++;
  7412  001C3C  4A40               	infsnz	_readwhat,f,c
  7413  001C3E  2A41               	incf	_readwhat+1,f,c
  7414                           
  7415                           ;tmr1.c: 171: if(readwhat > 7)
  7416  001C40  BE41               	btfsc	_readwhat+1,7,c
  7417  001C42  D00C               	goto	i2l3470
  7418  001C44  5041               	movf	_readwhat+1,w,c
  7419  001C46  E104               	bnz	i2u193_40
  7420  001C48  0E08               	movlw	8
  7421  001C4A  5C40               	subwf	_readwhat,w,c
  7422  001C4C  A0D8               	btfss	status,0,c
  7423  001C4E  D006               	goto	i2l3470
  7424  001C50                     i2u193_40:
  7425                           
  7426                           ;tmr1.c: 172: {
  7427                           ;tmr1.c: 173: readwhat = 1;
  7428  001C50  0E00               	movlw	0
  7429  001C52  6E41               	movwf	_readwhat+1,c
  7430  001C54  0E01               	movlw	1
  7431  001C56  6E40               	movwf	_readwhat,c
  7432                           
  7433                           ;tmr1.c: 174: FuseSystem();
  7434  001C58  ECE6  F00B         	call	_FuseSystem	;wreg free
  7435  001C5C                     i2l3470:
  7436                           
  7437                           ;tmr1.c: 175: }
  7438                           ;tmr1.c: 176: ReadCurrent(readwhat);
  7439  001C5C  5040               	movf	_readwhat,w,c
  7440  001C5E  EC58  F000         	call	_ReadCurrent
  7441  001C62  0012               	return		;funcret
  7442  001C64                     __end_of_TMR1_ISR:
  7443                           	opt stack 0
  7444                           pclatu	equ	0xFFB
  7445                           pclath	equ	0xFFA
  7446                           tblptru	equ	0xFF8
  7447                           tblptrh	equ	0xFF7
  7448                           tblptrl	equ	0xFF6
  7449                           tablat	equ	0xFF5
  7450                           prodh	equ	0xFF4
  7451                           prodl	equ	0xFF3
  7452                           intcon	equ	0xFF2
  7453                           intcon2	equ	0xFF1
  7454                           postinc0	equ	0xFEE
  7455                           fsr0h	equ	0xFEA
  7456                           fsr0l	equ	0xFE9
  7457                           wreg	equ	0xFE8
  7458                           indf1	equ	0xFE7
  7459                           postdec1	equ	0xFE5
  7460                           fsr1h	equ	0xFE2
  7461                           fsr1l	equ	0xFE1
  7462                           indf2	equ	0xFDF
  7463                           postinc2	equ	0xFDE
  7464                           postdec2	equ	0xFDD
  7465                           plusw2	equ	0xFDB
  7466                           fsr2h	equ	0xFDA
  7467                           fsr2l	equ	0xFD9
  7468                           status	equ	0xFD8
  7469                           
  7470 ;; *************** function _ReadCurrent *****************
  7471 ;; Defined at:
  7472 ;;		line 63 in file "PDU.c"
  7473 ;; Parameters:    Size  Location     Type
  7474 ;;  gather          1    wreg     unsigned char 
  7475 ;; Auto vars:     Size  Location     Type
  7476 ;;  gather          1   13[COMRAM] unsigned char 
  7477 ;; Return value:  Size  Location     Type
  7478 ;;                  1    wreg      void 
  7479 ;; Registers used:
  7480 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7481 ;; Tracked objects:
  7482 ;;		On entry : 0/0
  7483 ;;		On exit  : 0/0
  7484 ;;		Unchanged: 0/0
  7485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7486 ;;      Params:         0       0       0       0       0       0       0
  7487 ;;      Locals:         1       0       0       0       0       0       0
  7488 ;;      Temps:          0       0       0       0       0       0       0
  7489 ;;      Totals:         1       0       0       0       0       0       0
  7490 ;;Total ram usage:        1 bytes
  7491 ;; Hardware stack levels used:    1
  7492 ;; Hardware stack levels required when called:    3
  7493 ;; This function calls:
  7494 ;;		_ADC_GetConversion
  7495 ;;		i2_SetPin595
  7496 ;;		i2_Update
  7497 ;; This function is called by:
  7498 ;;		_TMR1_ISR
  7499 ;; This function uses a non-reentrant model
  7500 ;;
  7501                           
  7502                           	psect	text49
  7503  0000B0                     __ptext49:
  7504                           	opt stack 0
  7505  0000B0                     _ReadCurrent:
  7506                           	opt stack 18
  7507                           
  7508                           ;incstack = 0
  7509                           ;ReadCurrent@gather stored from wreg
  7510  0000B0  6E0E               	movwf	ReadCurrent@gather,c
  7511                           
  7512                           ;PDU.c: 64: if (gather == 1) {
  7513  0000B2  040E               	decf	ReadCurrent@gather,w,c
  7514  0000B4  A4D8               	btfss	status,2,c
  7515  0000B6  D088               	goto	i2l3250
  7516                           
  7517                           ;PDU.c: 66: SetPin595(1, 4, ON);
  7518  0000B8  0E00               	movlw	0
  7519  0000BA  6E02               	movwf	i2SetPin595@Reg+1,c
  7520  0000BC  0E01               	movlw	1
  7521  0000BE  6E01               	movwf	i2SetPin595@Reg,c
  7522  0000C0  0E00               	movlw	0
  7523  0000C2  6E04               	movwf	i2SetPin595@pin+1,c
  7524  0000C4  0E04               	movlw	4
  7525  0000C6  6E03               	movwf	i2SetPin595@pin,c
  7526  0000C8  0E00               	movlw	0
  7527  0000CA  6E06               	movwf	i2SetPin595@value+1,c
  7528  0000CC  0E01               	movlw	1
  7529  0000CE  6E05               	movwf	i2SetPin595@value,c
  7530  0000D0  EC4B  F00D         	call	i2_SetPin595	;wreg free
  7531                           
  7532                           ;PDU.c: 67: SetPin595(1, 3, OFF);
  7533  0000D4  0E00               	movlw	0
  7534  0000D6  6E02               	movwf	i2SetPin595@Reg+1,c
  7535  0000D8  0E01               	movlw	1
  7536  0000DA  6E01               	movwf	i2SetPin595@Reg,c
  7537  0000DC  0E00               	movlw	0
  7538  0000DE  6E04               	movwf	i2SetPin595@pin+1,c
  7539  0000E0  0E03               	movlw	3
  7540  0000E2  6E03               	movwf	i2SetPin595@pin,c
  7541  0000E4  0E00               	movlw	0
  7542  0000E6  6E06               	movwf	i2SetPin595@value+1,c
  7543  0000E8  0E00               	movlw	0
  7544  0000EA  6E05               	movwf	i2SetPin595@value,c
  7545  0000EC  EC4B  F00D         	call	i2_SetPin595	;wreg free
  7546                           
  7547                           ;PDU.c: 68: SetPin595(1, 2, OFF);
  7548  0000F0  0E00               	movlw	0
  7549  0000F2  6E02               	movwf	i2SetPin595@Reg+1,c
  7550  0000F4  0E01               	movlw	1
  7551  0000F6  6E01               	movwf	i2SetPin595@Reg,c
  7552  0000F8  0E00               	movlw	0
  7553  0000FA  6E04               	movwf	i2SetPin595@pin+1,c
  7554  0000FC  0E02               	movlw	2
  7555  0000FE  6E03               	movwf	i2SetPin595@pin,c
  7556  000100  0E00               	movlw	0
  7557  000102  6E06               	movwf	i2SetPin595@value+1,c
  7558  000104  0E00               	movlw	0
  7559  000106  6E05               	movwf	i2SetPin595@value,c
  7560  000108  EC4B  F00D         	call	i2_SetPin595	;wreg free
  7561                           
  7562                           ;PDU.c: 69: SetPin595(2, 4, OFF);
  7563  00010C  0E00               	movlw	0
  7564  00010E  6E02               	movwf	i2SetPin595@Reg+1,c
  7565  000110  0E02               	movlw	2
  7566  000112  6E01               	movwf	i2SetPin595@Reg,c
  7567  000114  0E00               	movlw	0
  7568  000116  6E04               	movwf	i2SetPin595@pin+1,c
  7569  000118  0E04               	movlw	4
  7570  00011A  6E03               	movwf	i2SetPin595@pin,c
  7571  00011C  0E00               	movlw	0
  7572  00011E  6E06               	movwf	i2SetPin595@value+1,c
  7573  000120  0E00               	movlw	0
  7574  000122  6E05               	movwf	i2SetPin595@value,c
  7575  000124  EC4B  F00D         	call	i2_SetPin595	;wreg free
  7576                           
  7577                           ;PDU.c: 70: SetPin595(2, 3, OFF);
  7578  000128  0E00               	movlw	0
  7579  00012A  6E02               	movwf	i2SetPin595@Reg+1,c
  7580  00012C  0E02               	movlw	2
  7581  00012E  6E01               	movwf	i2SetPin595@Reg,c
  7582  000130  0E00               	movlw	0
  7583  000132  6E04               	movwf	i2SetPin595@pin+1,c
  7584  000134  0E03               	movlw	3
  7585  000136  6E03               	movwf	i2SetPin595@pin,c
  7586  000138  0E00               	movlw	0
  7587  00013A  6E06               	movwf	i2SetPin595@value+1,c
  7588  00013C  0E00               	movlw	0
  7589  00013E  6E05               	movwf	i2SetPin595@value,c
  7590  000140  EC4B  F00D         	call	i2_SetPin595	;wreg free
  7591                           
  7592                           ;PDU.c: 71: SetPin595(2, 2, OFF);
  7593  000144  0E00               	movlw	0
  7594  000146  6E02               	movwf	i2SetPin595@Reg+1,c
  7595  000148  0E02               	movlw	2
  7596  00014A  6E01               	movwf	i2SetPin595@Reg,c
  7597  00014C  0E00               	movlw	0
  7598  00014E  6E04               	movwf	i2SetPin595@pin+1,c
  7599  000150  0E02               	movlw	2
  7600  000152  6E03               	movwf	i2SetPin595@pin,c
  7601  000154  0E00               	movlw	0
  7602  000156  6E06               	movwf	i2SetPin595@value+1,c
  7603  000158  0E00               	movlw	0
  7604  00015A  6E05               	movwf	i2SetPin595@value,c
  7605  00015C  EC4B  F00D         	call	i2_SetPin595	;wreg free
  7606                           
  7607                           ;PDU.c: 72: SetPin595(3, 4, OFF);
  7608  000160  0E00               	movlw	0
  7609  000162  6E02               	movwf	i2SetPin595@Reg+1,c
  7610  000164  0E03               	movlw	3
  7611  000166  6E01               	movwf	i2SetPin595@Reg,c
  7612  000168  0E00               	movlw	0
  7613  00016A  6E04               	movwf	i2SetPin595@pin+1,c
  7614  00016C  0E04               	movlw	4
  7615  00016E  6E03               	movwf	i2SetPin595@pin,c
  7616  000170  0E00               	movlw	0
  7617  000172  6E06               	movwf	i2SetPin595@value+1,c
  7618  000174  0E00               	movlw	0
  7619  000176  6E05               	movwf	i2SetPin595@value,c
  7620  000178  EC4B  F00D         	call	i2_SetPin595	;wreg free
  7621                           
  7622                           ;PDU.c: 73: SetPin595(3, 3, OFF);
  7623  00017C  0E00               	movlw	0
  7624  00017E  6E02               	movwf	i2SetPin595@Reg+1,c
  7625  000180  0E03               	movlw	3
  7626  000182  6E01               	movwf	i2SetPin595@Reg,c
  7627  000184  0E00               	movlw	0
  7628  000186  6E04               	movwf	i2SetPin595@pin+1,c
  7629  000188  0E03               	movlw	3
  7630  00018A  6E03               	movwf	i2SetPin595@pin,c
  7631  00018C  0E00               	movlw	0
  7632  00018E  6E06               	movwf	i2SetPin595@value+1,c
  7633  000190  0E00               	movlw	0
  7634  000192  6E05               	movwf	i2SetPin595@value,c
  7635  000194  EC4B  F00D         	call	i2_SetPin595	;wreg free
  7636                           
  7637                           ;PDU.c: 74: SetPin595(3, 2, OFF);
  7638  000198  0E00               	movlw	0
  7639  00019A  6E02               	movwf	i2SetPin595@Reg+1,c
  7640  00019C  0E03               	movlw	3
  7641  00019E  6E01               	movwf	i2SetPin595@Reg,c
  7642  0001A0  0E00               	movlw	0
  7643  0001A2  6E04               	movwf	i2SetPin595@pin+1,c
  7644  0001A4  0E02               	movlw	2
  7645  0001A6  6E03               	movwf	i2SetPin595@pin,c
  7646  0001A8  0E00               	movlw	0
  7647  0001AA  6E06               	movwf	i2SetPin595@value+1,c
  7648  0001AC  0E00               	movlw	0
  7649  0001AE  6E05               	movwf	i2SetPin595@value,c
  7650  0001B0  EC4B  F00D         	call	i2_SetPin595	;wreg free
  7651                           
  7652                           ;PDU.c: 75: Update();
  7653  0001B4  ECB1  F00F         	call	i2_Update	;wreg free
  7654                           
  7655                           ;PDU.c: 76: CurrentADC[5] = ADC_GetConversion(U10Multisense);
  7656  0001B8  0E17               	movlw	23
  7657  0001BA  EC63  F00E         	call	_ADC_GetConversion
  7658  0001BE  C001  F0D0         	movff	?_ADC_GetConversion,_CurrentADC+10
  7659  0001C2  C002  F0D1         	movff	?_ADC_GetConversion+1,_CurrentADC+11
  7660                           
  7661                           ;PDU.c: 78: }
  7662  0001C6  0012               	return	
  7663  0001C8                     i2l3250:
  7664                           
  7665                           ;PDU.c: 79: else if(gather == 2){
  7666  0001C8  0E02               	movlw	2
  7667  0001CA  180E               	xorwf	ReadCurrent@gather,w,c
  7668  0001CC  A4D8               	btfss	status,2,c
  7669  0001CE  D088               	goto	i2l3256
  7670                           
  7671                           ;PDU.c: 81: SetPin595(1, 4, OFF);
  7672  0001D0  0E00               	movlw	0
  7673  0001D2  6E02               	movwf	i2SetPin595@Reg+1,c
  7674  0001D4  0E01               	movlw	1
  7675  0001D6  6E01               	movwf	i2SetPin595@Reg,c
  7676  0001D8  0E00               	movlw	0
  7677  0001DA  6E04               	movwf	i2SetPin595@pin+1,c
  7678  0001DC  0E04               	movlw	4
  7679  0001DE  6E03               	movwf	i2SetPin595@pin,c
  7680  0001E0  0E00               	movlw	0
  7681  0001E2  6E06               	movwf	i2SetPin595@value+1,c
  7682  0001E4  0E00               	movlw	0
  7683  0001E6  6E05               	movwf	i2SetPin595@value,c
  7684  0001E8  EC4B  F00D         	call	i2_SetPin595	;wreg free
  7685                           
  7686                           ;PDU.c: 82: SetPin595(1, 3, OFF);
  7687  0001EC  0E00               	movlw	0
  7688  0001EE  6E02               	movwf	i2SetPin595@Reg+1,c
  7689  0001F0  0E01               	movlw	1
  7690  0001F2  6E01               	movwf	i2SetPin595@Reg,c
  7691  0001F4  0E00               	movlw	0
  7692  0001F6  6E04               	movwf	i2SetPin595@pin+1,c
  7693  0001F8  0E03               	movlw	3
  7694  0001FA  6E03               	movwf	i2SetPin595@pin,c
  7695  0001FC  0E00               	movlw	0
  7696  0001FE  6E06               	movwf	i2SetPin595@value+1,c
  7697  000200  0E00               	movlw	0
  7698  000202  6E05               	movwf	i2SetPin595@value,c
  7699  000204  EC4B  F00D         	call	i2_SetPin595	;wreg free
  7700                           
  7701                           ;PDU.c: 83: SetPin595(1, 2, OFF);
  7702  000208  0E00               	movlw	0
  7703  00020A  6E02               	movwf	i2SetPin595@Reg+1,c
  7704  00020C  0E01               	movlw	1
  7705  00020E  6E01               	movwf	i2SetPin595@Reg,c
  7706  000210  0E00               	movlw	0
  7707  000212  6E04               	movwf	i2SetPin595@pin+1,c
  7708  000214  0E02               	movlw	2
  7709  000216  6E03               	movwf	i2SetPin595@pin,c
  7710  000218  0E00               	movlw	0
  7711  00021A  6E06               	movwf	i2SetPin595@value+1,c
  7712  00021C  0E00               	movlw	0
  7713  00021E  6E05               	movwf	i2SetPin595@value,c
  7714  000220  EC4B  F00D         	call	i2_SetPin595	;wreg free
  7715                           
  7716                           ;PDU.c: 84: SetPin595(2, 4, ON);
  7717  000224  0E00               	movlw	0
  7718  000226  6E02               	movwf	i2SetPin595@Reg+1,c
  7719  000228  0E02               	movlw	2
  7720  00022A  6E01               	movwf	i2SetPin595@Reg,c
  7721  00022C  0E00               	movlw	0
  7722  00022E  6E04               	movwf	i2SetPin595@pin+1,c
  7723  000230  0E04               	movlw	4
  7724  000232  6E03               	movwf	i2SetPin595@pin,c
  7725  000234  0E00               	movlw	0
  7726  000236  6E06               	movwf	i2SetPin595@value+1,c
  7727  000238  0E01               	movlw	1
  7728  00023A  6E05               	movwf	i2SetPin595@value,c
  7729  00023C  EC4B  F00D         	call	i2_SetPin595	;wreg free
  7730                           
  7731                           ;PDU.c: 85: SetPin595(2, 3, ON);
  7732  000240  0E00               	movlw	0
  7733  000242  6E02               	movwf	i2SetPin595@Reg+1,c
  7734  000244  0E02               	movlw	2
  7735  000246  6E01               	movwf	i2SetPin595@Reg,c
  7736  000248  0E00               	movlw	0
  7737  00024A  6E04               	movwf	i2SetPin595@pin+1,c
  7738  00024C  0E03               	movlw	3
  7739  00024E  6E03               	movwf	i2SetPin595@pin,c
  7740  000250  0E00               	movlw	0
  7741  000252  6E06               	movwf	i2SetPin595@value+1,c
  7742  000254  0E01               	movlw	1
  7743  000256  6E05               	movwf	i2SetPin595@value,c
  7744  000258  EC4B  F00D         	call	i2_SetPin595	;wreg free
  7745                           
  7746                           ;PDU.c: 86: SetPin595(2, 2, OFF);
  7747  00025C  0E00               	movlw	0
  7748  00025E  6E02               	movwf	i2SetPin595@Reg+1,c
  7749  000260  0E02               	movlw	2
  7750  000262  6E01               	movwf	i2SetPin595@Reg,c
  7751  000264  0E00               	movlw	0
  7752  000266  6E04               	movwf	i2SetPin595@pin+1,c
  7753  000268  0E02               	movlw	2
  7754  00026A  6E03               	movwf	i2SetPin595@pin,c
  7755  00026C  0E00               	movlw	0
  7756  00026E  6E06               	movwf	i2SetPin595@value+1,c
  7757  000270  0E00               	movlw	0
  7758  000272  6E05               	movwf	i2SetPin595@value,c
  7759  000274  EC4B  F00D         	call	i2_SetPin595	;wreg free
  7760                           
  7761                           ;PDU.c: 87: SetPin595(3, 4, OFF);
  7762  000278  0E00               	movlw	0
  7763  00027A  6E02               	movwf	i2SetPin595@Reg+1,c
  7764  00027C  0E03               	movlw	3
  7765  00027E  6E01               	movwf	i2SetPin595@Reg,c
  7766  000280  0E00               	movlw	0
  7767  000282  6E04               	movwf	i2SetPin595@pin+1,c
  7768  000284  0E04               	movlw	4
  7769  000286  6E03               	movwf	i2SetPin595@pin,c
  7770  000288  0E00               	movlw	0
  7771  00028A  6E06               	movwf	i2SetPin595@value+1,c
  7772  00028C  0E00               	movlw	0
  7773  00028E  6E05               	movwf	i2SetPin595@value,c
  7774  000290  EC4B  F00D         	call	i2_SetPin595	;wreg free
  7775                           
  7776                           ;PDU.c: 88: SetPin595(3, 3, OFF);
  7777  000294  0E00               	movlw	0
  7778  000296  6E02               	movwf	i2SetPin595@Reg+1,c
  7779  000298  0E03               	movlw	3
  7780  00029A  6E01               	movwf	i2SetPin595@Reg,c
  7781  00029C  0E00               	movlw	0
  7782  00029E  6E04               	movwf	i2SetPin595@pin+1,c
  7783  0002A0  0E03               	movlw	3
  7784  0002A2  6E03               	movwf	i2SetPin595@pin,c
  7785  0002A4  0E00               	movlw	0
  7786  0002A6  6E06               	movwf	i2SetPin595@value+1,c
  7787  0002A8  0E00               	movlw	0
  7788  0002AA  6E05               	movwf	i2SetPin595@value,c
  7789  0002AC  EC4B  F00D         	call	i2_SetPin595	;wreg free
  7790                           
  7791                           ;PDU.c: 89: SetPin595(3, 2, OFF);
  7792  0002B0  0E00               	movlw	0
  7793  0002B2  6E02               	movwf	i2SetPin595@Reg+1,c
  7794  0002B4  0E03               	movlw	3
  7795  0002B6  6E01               	movwf	i2SetPin595@Reg,c
  7796  0002B8  0E00               	movlw	0
  7797  0002BA  6E04               	movwf	i2SetPin595@pin+1,c
  7798  0002BC  0E02               	movlw	2
  7799  0002BE  6E03               	movwf	i2SetPin595@pin,c
  7800  0002C0  0E00               	movlw	0
  7801  0002C2  6E06               	movwf	i2SetPin595@value+1,c
  7802  0002C4  0E00               	movlw	0
  7803  0002C6  6E05               	movwf	i2SetPin595@value,c
  7804  0002C8  EC4B  F00D         	call	i2_SetPin595	;wreg free
  7805                           
  7806                           ;PDU.c: 90: Update();
  7807  0002CC  ECB1  F00F         	call	i2_Update	;wreg free
  7808                           
  7809                           ;PDU.c: 91: CurrentADC[2] = ADC_GetConversion(U8Multisense);
  7810  0002D0  0E16               	movlw	22
  7811  0002D2  EC63  F00E         	call	_ADC_GetConversion
  7812  0002D6  C001  F0CA         	movff	?_ADC_GetConversion,_CurrentADC+4
  7813  0002DA  C002  F0CB         	movff	?_ADC_GetConversion+1,_CurrentADC+5
  7814                           
  7815                           ;PDU.c: 93: }
  7816  0002DE  0012               	return	
  7817  0002E0                     i2l3256:
  7818                           
  7819                           ;PDU.c: 94: else if(gather == 3){
  7820  0002E0  0E03               	movlw	3
  7821  0002E2  180E               	xorwf	ReadCurrent@gather,w,c
  7822  0002E4  A4D8               	btfss	status,2,c
  7823  0002E6  D088               	goto	i2l3262
  7824                           
  7825                           ;PDU.c: 96: SetPin595(1, 4, OFF);
  7826  0002E8  0E00               	movlw	0
  7827  0002EA  6E02               	movwf	i2SetPin595@Reg+1,c
  7828  0002EC  0E01               	movlw	1
  7829  0002EE  6E01               	movwf	i2SetPin595@Reg,c
  7830  0002F0  0E00               	movlw	0
  7831  0002F2  6E04               	movwf	i2SetPin595@pin+1,c
  7832  0002F4  0E04               	movlw	4
  7833  0002F6  6E03               	movwf	i2SetPin595@pin,c
  7834  0002F8  0E00               	movlw	0
  7835  0002FA  6E06               	movwf	i2SetPin595@value+1,c
  7836  0002FC  0E00               	movlw	0
  7837  0002FE  6E05               	movwf	i2SetPin595@value,c
  7838  000300  EC4B  F00D         	call	i2_SetPin595	;wreg free
  7839                           
  7840                           ;PDU.c: 97: SetPin595(1, 3, OFF);
  7841  000304  0E00               	movlw	0
  7842  000306  6E02               	movwf	i2SetPin595@Reg+1,c
  7843  000308  0E01               	movlw	1
  7844  00030A  6E01               	movwf	i2SetPin595@Reg,c
  7845  00030C  0E00               	movlw	0
  7846  00030E  6E04               	movwf	i2SetPin595@pin+1,c
  7847  000310  0E03               	movlw	3
  7848  000312  6E03               	movwf	i2SetPin595@pin,c
  7849  000314  0E00               	movlw	0
  7850  000316  6E06               	movwf	i2SetPin595@value+1,c
  7851  000318  0E00               	movlw	0
  7852  00031A  6E05               	movwf	i2SetPin595@value,c
  7853  00031C  EC4B  F00D         	call	i2_SetPin595	;wreg free
  7854                           
  7855                           ;PDU.c: 98: SetPin595(1, 2, OFF);
  7856  000320  0E00               	movlw	0
  7857  000322  6E02               	movwf	i2SetPin595@Reg+1,c
  7858  000324  0E01               	movlw	1
  7859  000326  6E01               	movwf	i2SetPin595@Reg,c
  7860  000328  0E00               	movlw	0
  7861  00032A  6E04               	movwf	i2SetPin595@pin+1,c
  7862  00032C  0E02               	movlw	2
  7863  00032E  6E03               	movwf	i2SetPin595@pin,c
  7864  000330  0E00               	movlw	0
  7865  000332  6E06               	movwf	i2SetPin595@value+1,c
  7866  000334  0E00               	movlw	0
  7867  000336  6E05               	movwf	i2SetPin595@value,c
  7868  000338  EC4B  F00D         	call	i2_SetPin595	;wreg free
  7869                           
  7870                           ;PDU.c: 99: SetPin595(2, 4, OFF);
  7871  00033C  0E00               	movlw	0
  7872  00033E  6E02               	movwf	i2SetPin595@Reg+1,c
  7873  000340  0E02               	movlw	2
  7874  000342  6E01               	movwf	i2SetPin595@Reg,c
  7875  000344  0E00               	movlw	0
  7876  000346  6E04               	movwf	i2SetPin595@pin+1,c
  7877  000348  0E04               	movlw	4
  7878  00034A  6E03               	movwf	i2SetPin595@pin,c
  7879  00034C  0E00               	movlw	0
  7880  00034E  6E06               	movwf	i2SetPin595@value+1,c
  7881  000350  0E00               	movlw	0
  7882  000352  6E05               	movwf	i2SetPin595@value,c
  7883  000354  EC4B  F00D         	call	i2_SetPin595	;wreg free
  7884                           
  7885                           ;PDU.c: 100: SetPin595(2, 3, OFF);
  7886  000358  0E00               	movlw	0
  7887  00035A  6E02               	movwf	i2SetPin595@Reg+1,c
  7888  00035C  0E02               	movlw	2
  7889  00035E  6E01               	movwf	i2SetPin595@Reg,c
  7890  000360  0E00               	movlw	0
  7891  000362  6E04               	movwf	i2SetPin595@pin+1,c
  7892  000364  0E03               	movlw	3
  7893  000366  6E03               	movwf	i2SetPin595@pin,c
  7894  000368  0E00               	movlw	0
  7895  00036A  6E06               	movwf	i2SetPin595@value+1,c
  7896  00036C  0E00               	movlw	0
  7897  00036E  6E05               	movwf	i2SetPin595@value,c
  7898  000370  EC4B  F00D         	call	i2_SetPin595	;wreg free
  7899                           
  7900                           ;PDU.c: 101: SetPin595(2, 2, OFF);
  7901  000374  0E00               	movlw	0
  7902  000376  6E02               	movwf	i2SetPin595@Reg+1,c
  7903  000378  0E02               	movlw	2
  7904  00037A  6E01               	movwf	i2SetPin595@Reg,c
  7905  00037C  0E00               	movlw	0
  7906  00037E  6E04               	movwf	i2SetPin595@pin+1,c
  7907  000380  0E02               	movlw	2
  7908  000382  6E03               	movwf	i2SetPin595@pin,c
  7909  000384  0E00               	movlw	0
  7910  000386  6E06               	movwf	i2SetPin595@value+1,c
  7911  000388  0E00               	movlw	0
  7912  00038A  6E05               	movwf	i2SetPin595@value,c
  7913  00038C  EC4B  F00D         	call	i2_SetPin595	;wreg free
  7914                           
  7915                           ;PDU.c: 102: SetPin595(3, 4, ON);
  7916  000390  0E00               	movlw	0
  7917  000392  6E02               	movwf	i2SetPin595@Reg+1,c
  7918  000394  0E03               	movlw	3
  7919  000396  6E01               	movwf	i2SetPin595@Reg,c
  7920  000398  0E00               	movlw	0
  7921  00039A  6E04               	movwf	i2SetPin595@pin+1,c
  7922  00039C  0E04               	movlw	4
  7923  00039E  6E03               	movwf	i2SetPin595@pin,c
  7924  0003A0  0E00               	movlw	0
  7925  0003A2  6E06               	movwf	i2SetPin595@value+1,c
  7926  0003A4  0E01               	movlw	1
  7927  0003A6  6E05               	movwf	i2SetPin595@value,c
  7928  0003A8  EC4B  F00D         	call	i2_SetPin595	;wreg free
  7929                           
  7930                           ;PDU.c: 103: SetPin595(3, 3, OFF);
  7931  0003AC  0E00               	movlw	0
  7932  0003AE  6E02               	movwf	i2SetPin595@Reg+1,c
  7933  0003B0  0E03               	movlw	3
  7934  0003B2  6E01               	movwf	i2SetPin595@Reg,c
  7935  0003B4  0E00               	movlw	0
  7936  0003B6  6E04               	movwf	i2SetPin595@pin+1,c
  7937  0003B8  0E03               	movlw	3
  7938  0003BA  6E03               	movwf	i2SetPin595@pin,c
  7939  0003BC  0E00               	movlw	0
  7940  0003BE  6E06               	movwf	i2SetPin595@value+1,c
  7941  0003C0  0E00               	movlw	0
  7942  0003C2  6E05               	movwf	i2SetPin595@value,c
  7943  0003C4  EC4B  F00D         	call	i2_SetPin595	;wreg free
  7944                           
  7945                           ;PDU.c: 104: SetPin595(3, 2, OFF);
  7946  0003C8  0E00               	movlw	0
  7947  0003CA  6E02               	movwf	i2SetPin595@Reg+1,c
  7948  0003CC  0E03               	movlw	3
  7949  0003CE  6E01               	movwf	i2SetPin595@Reg,c
  7950  0003D0  0E00               	movlw	0
  7951  0003D2  6E04               	movwf	i2SetPin595@pin+1,c
  7952  0003D4  0E02               	movlw	2
  7953  0003D6  6E03               	movwf	i2SetPin595@pin,c
  7954  0003D8  0E00               	movlw	0
  7955  0003DA  6E06               	movwf	i2SetPin595@value+1,c
  7956  0003DC  0E00               	movlw	0
  7957  0003DE  6E05               	movwf	i2SetPin595@value,c
  7958  0003E0  EC4B  F00D         	call	i2_SetPin595	;wreg free
  7959                           
  7960                           ;PDU.c: 105: Update();
  7961  0003E4  ECB1  F00F         	call	i2_Update	;wreg free
  7962                           
  7963                           ;PDU.c: 106: CurrentADC[1] = ADC_GetConversion(U5Multisense);
  7964  0003E8  0E10               	movlw	16
  7965  0003EA  EC63  F00E         	call	_ADC_GetConversion
  7966  0003EE  C001  F0C8         	movff	?_ADC_GetConversion,_CurrentADC+2
  7967  0003F2  C002  F0C9         	movff	?_ADC_GetConversion+1,_CurrentADC+3
  7968                           
  7969                           ;PDU.c: 108: }
  7970  0003F6  0012               	return	
  7971  0003F8                     i2l3262:
  7972                           
  7973                           ;PDU.c: 109: else if(gather == 4){
  7974  0003F8  0E04               	movlw	4
  7975  0003FA  180E               	xorwf	ReadCurrent@gather,w,c
  7976  0003FC  A4D8               	btfss	status,2,c
  7977  0003FE  D088               	goto	i2l3268
  7978                           
  7979                           ;PDU.c: 111: SetPin595(1, 4, ON);
  7980  000400  0E00               	movlw	0
  7981  000402  6E02               	movwf	i2SetPin595@Reg+1,c
  7982  000404  0E01               	movlw	1
  7983  000406  6E01               	movwf	i2SetPin595@Reg,c
  7984  000408  0E00               	movlw	0
  7985  00040A  6E04               	movwf	i2SetPin595@pin+1,c
  7986  00040C  0E04               	movlw	4
  7987  00040E  6E03               	movwf	i2SetPin595@pin,c
  7988  000410  0E00               	movlw	0
  7989  000412  6E06               	movwf	i2SetPin595@value+1,c
  7990  000414  0E01               	movlw	1
  7991  000416  6E05               	movwf	i2SetPin595@value,c
  7992  000418  EC4B  F00D         	call	i2_SetPin595	;wreg free
  7993                           
  7994                           ;PDU.c: 112: SetPin595(1, 3, ON);
  7995  00041C  0E00               	movlw	0
  7996  00041E  6E02               	movwf	i2SetPin595@Reg+1,c
  7997  000420  0E01               	movlw	1
  7998  000422  6E01               	movwf	i2SetPin595@Reg,c
  7999  000424  0E00               	movlw	0
  8000  000426  6E04               	movwf	i2SetPin595@pin+1,c
  8001  000428  0E03               	movlw	3
  8002  00042A  6E03               	movwf	i2SetPin595@pin,c
  8003  00042C  0E00               	movlw	0
  8004  00042E  6E06               	movwf	i2SetPin595@value+1,c
  8005  000430  0E01               	movlw	1
  8006  000432  6E05               	movwf	i2SetPin595@value,c
  8007  000434  EC4B  F00D         	call	i2_SetPin595	;wreg free
  8008                           
  8009                           ;PDU.c: 113: SetPin595(1, 2, OFF);
  8010  000438  0E00               	movlw	0
  8011  00043A  6E02               	movwf	i2SetPin595@Reg+1,c
  8012  00043C  0E01               	movlw	1
  8013  00043E  6E01               	movwf	i2SetPin595@Reg,c
  8014  000440  0E00               	movlw	0
  8015  000442  6E04               	movwf	i2SetPin595@pin+1,c
  8016  000444  0E02               	movlw	2
  8017  000446  6E03               	movwf	i2SetPin595@pin,c
  8018  000448  0E00               	movlw	0
  8019  00044A  6E06               	movwf	i2SetPin595@value+1,c
  8020  00044C  0E00               	movlw	0
  8021  00044E  6E05               	movwf	i2SetPin595@value,c
  8022  000450  EC4B  F00D         	call	i2_SetPin595	;wreg free
  8023                           
  8024                           ;PDU.c: 114: SetPin595(2, 4, OFF);
  8025  000454  0E00               	movlw	0
  8026  000456  6E02               	movwf	i2SetPin595@Reg+1,c
  8027  000458  0E02               	movlw	2
  8028  00045A  6E01               	movwf	i2SetPin595@Reg,c
  8029  00045C  0E00               	movlw	0
  8030  00045E  6E04               	movwf	i2SetPin595@pin+1,c
  8031  000460  0E04               	movlw	4
  8032  000462  6E03               	movwf	i2SetPin595@pin,c
  8033  000464  0E00               	movlw	0
  8034  000466  6E06               	movwf	i2SetPin595@value+1,c
  8035  000468  0E00               	movlw	0
  8036  00046A  6E05               	movwf	i2SetPin595@value,c
  8037  00046C  EC4B  F00D         	call	i2_SetPin595	;wreg free
  8038                           
  8039                           ;PDU.c: 115: SetPin595(2, 3, OFF);
  8040  000470  0E00               	movlw	0
  8041  000472  6E02               	movwf	i2SetPin595@Reg+1,c
  8042  000474  0E02               	movlw	2
  8043  000476  6E01               	movwf	i2SetPin595@Reg,c
  8044  000478  0E00               	movlw	0
  8045  00047A  6E04               	movwf	i2SetPin595@pin+1,c
  8046  00047C  0E03               	movlw	3
  8047  00047E  6E03               	movwf	i2SetPin595@pin,c
  8048  000480  0E00               	movlw	0
  8049  000482  6E06               	movwf	i2SetPin595@value+1,c
  8050  000484  0E00               	movlw	0
  8051  000486  6E05               	movwf	i2SetPin595@value,c
  8052  000488  EC4B  F00D         	call	i2_SetPin595	;wreg free
  8053                           
  8054                           ;PDU.c: 116: SetPin595(2, 2, OFF);
  8055  00048C  0E00               	movlw	0
  8056  00048E  6E02               	movwf	i2SetPin595@Reg+1,c
  8057  000490  0E02               	movlw	2
  8058  000492  6E01               	movwf	i2SetPin595@Reg,c
  8059  000494  0E00               	movlw	0
  8060  000496  6E04               	movwf	i2SetPin595@pin+1,c
  8061  000498  0E02               	movlw	2
  8062  00049A  6E03               	movwf	i2SetPin595@pin,c
  8063  00049C  0E00               	movlw	0
  8064  00049E  6E06               	movwf	i2SetPin595@value+1,c
  8065  0004A0  0E00               	movlw	0
  8066  0004A2  6E05               	movwf	i2SetPin595@value,c
  8067  0004A4  EC4B  F00D         	call	i2_SetPin595	;wreg free
  8068                           
  8069                           ;PDU.c: 117: SetPin595(3, 4, OFF);
  8070  0004A8  0E00               	movlw	0
  8071  0004AA  6E02               	movwf	i2SetPin595@Reg+1,c
  8072  0004AC  0E03               	movlw	3
  8073  0004AE  6E01               	movwf	i2SetPin595@Reg,c
  8074  0004B0  0E00               	movlw	0
  8075  0004B2  6E04               	movwf	i2SetPin595@pin+1,c
  8076  0004B4  0E04               	movlw	4
  8077  0004B6  6E03               	movwf	i2SetPin595@pin,c
  8078  0004B8  0E00               	movlw	0
  8079  0004BA  6E06               	movwf	i2SetPin595@value+1,c
  8080  0004BC  0E00               	movlw	0
  8081  0004BE  6E05               	movwf	i2SetPin595@value,c
  8082  0004C0  EC4B  F00D         	call	i2_SetPin595	;wreg free
  8083                           
  8084                           ;PDU.c: 118: SetPin595(3, 3, OFF);
  8085  0004C4  0E00               	movlw	0
  8086  0004C6  6E02               	movwf	i2SetPin595@Reg+1,c
  8087  0004C8  0E03               	movlw	3
  8088  0004CA  6E01               	movwf	i2SetPin595@Reg,c
  8089  0004CC  0E00               	movlw	0
  8090  0004CE  6E04               	movwf	i2SetPin595@pin+1,c
  8091  0004D0  0E03               	movlw	3
  8092  0004D2  6E03               	movwf	i2SetPin595@pin,c
  8093  0004D4  0E00               	movlw	0
  8094  0004D6  6E06               	movwf	i2SetPin595@value+1,c
  8095  0004D8  0E00               	movlw	0
  8096  0004DA  6E05               	movwf	i2SetPin595@value,c
  8097  0004DC  EC4B  F00D         	call	i2_SetPin595	;wreg free
  8098                           
  8099                           ;PDU.c: 119: SetPin595(3, 2, OFF);
  8100  0004E0  0E00               	movlw	0
  8101  0004E2  6E02               	movwf	i2SetPin595@Reg+1,c
  8102  0004E4  0E03               	movlw	3
  8103  0004E6  6E01               	movwf	i2SetPin595@Reg,c
  8104  0004E8  0E00               	movlw	0
  8105  0004EA  6E04               	movwf	i2SetPin595@pin+1,c
  8106  0004EC  0E02               	movlw	2
  8107  0004EE  6E03               	movwf	i2SetPin595@pin,c
  8108  0004F0  0E00               	movlw	0
  8109  0004F2  6E06               	movwf	i2SetPin595@value+1,c
  8110  0004F4  0E00               	movlw	0
  8111  0004F6  6E05               	movwf	i2SetPin595@value,c
  8112  0004F8  EC4B  F00D         	call	i2_SetPin595	;wreg free
  8113                           
  8114                           ;PDU.c: 120: Update();
  8115  0004FC  ECB1  F00F         	call	i2_Update	;wreg free
  8116                           
  8117                           ;PDU.c: 121: CurrentADC[4] = ADC_GetConversion(U10Multisense);
  8118  000500  0E17               	movlw	23
  8119  000502  EC63  F00E         	call	_ADC_GetConversion
  8120  000506  C001  F0CE         	movff	?_ADC_GetConversion,_CurrentADC+8
  8121  00050A  C002  F0CF         	movff	?_ADC_GetConversion+1,_CurrentADC+9
  8122                           
  8123                           ;PDU.c: 123: }
  8124  00050E  0012               	return	
  8125  000510                     i2l3268:
  8126                           
  8127                           ;PDU.c: 124: else if(gather == 5){
  8128  000510  0E05               	movlw	5
  8129  000512  180E               	xorwf	ReadCurrent@gather,w,c
  8130  000514  A4D8               	btfss	status,2,c
  8131  000516  D088               	goto	i2l3274
  8132                           
  8133                           ;PDU.c: 126: SetPin595(1, 4, OFF);
  8134  000518  0E00               	movlw	0
  8135  00051A  6E02               	movwf	i2SetPin595@Reg+1,c
  8136  00051C  0E01               	movlw	1
  8137  00051E  6E01               	movwf	i2SetPin595@Reg,c
  8138  000520  0E00               	movlw	0
  8139  000522  6E04               	movwf	i2SetPin595@pin+1,c
  8140  000524  0E04               	movlw	4
  8141  000526  6E03               	movwf	i2SetPin595@pin,c
  8142  000528  0E00               	movlw	0
  8143  00052A  6E06               	movwf	i2SetPin595@value+1,c
  8144  00052C  0E00               	movlw	0
  8145  00052E  6E05               	movwf	i2SetPin595@value,c
  8146  000530  EC4B  F00D         	call	i2_SetPin595	;wreg free
  8147                           
  8148                           ;PDU.c: 127: SetPin595(1, 3, OFF);
  8149  000534  0E00               	movlw	0
  8150  000536  6E02               	movwf	i2SetPin595@Reg+1,c
  8151  000538  0E01               	movlw	1
  8152  00053A  6E01               	movwf	i2SetPin595@Reg,c
  8153  00053C  0E00               	movlw	0
  8154  00053E  6E04               	movwf	i2SetPin595@pin+1,c
  8155  000540  0E03               	movlw	3
  8156  000542  6E03               	movwf	i2SetPin595@pin,c
  8157  000544  0E00               	movlw	0
  8158  000546  6E06               	movwf	i2SetPin595@value+1,c
  8159  000548  0E00               	movlw	0
  8160  00054A  6E05               	movwf	i2SetPin595@value,c
  8161  00054C  EC4B  F00D         	call	i2_SetPin595	;wreg free
  8162                           
  8163                           ;PDU.c: 128: SetPin595(1, 2, OFF);
  8164  000550  0E00               	movlw	0
  8165  000552  6E02               	movwf	i2SetPin595@Reg+1,c
  8166  000554  0E01               	movlw	1
  8167  000556  6E01               	movwf	i2SetPin595@Reg,c
  8168  000558  0E00               	movlw	0
  8169  00055A  6E04               	movwf	i2SetPin595@pin+1,c
  8170  00055C  0E02               	movlw	2
  8171  00055E  6E03               	movwf	i2SetPin595@pin,c
  8172  000560  0E00               	movlw	0
  8173  000562  6E06               	movwf	i2SetPin595@value+1,c
  8174  000564  0E00               	movlw	0
  8175  000566  6E05               	movwf	i2SetPin595@value,c
  8176  000568  EC4B  F00D         	call	i2_SetPin595	;wreg free
  8177                           
  8178                           ;PDU.c: 129: SetPin595(2, 4, ON);
  8179  00056C  0E00               	movlw	0
  8180  00056E  6E02               	movwf	i2SetPin595@Reg+1,c
  8181  000570  0E02               	movlw	2
  8182  000572  6E01               	movwf	i2SetPin595@Reg,c
  8183  000574  0E00               	movlw	0
  8184  000576  6E04               	movwf	i2SetPin595@pin+1,c
  8185  000578  0E04               	movlw	4
  8186  00057A  6E03               	movwf	i2SetPin595@pin,c
  8187  00057C  0E00               	movlw	0
  8188  00057E  6E06               	movwf	i2SetPin595@value+1,c
  8189  000580  0E01               	movlw	1
  8190  000582  6E05               	movwf	i2SetPin595@value,c
  8191  000584  EC4B  F00D         	call	i2_SetPin595	;wreg free
  8192                           
  8193                           ;PDU.c: 130: SetPin595(2, 3, OFF);
  8194  000588  0E00               	movlw	0
  8195  00058A  6E02               	movwf	i2SetPin595@Reg+1,c
  8196  00058C  0E02               	movlw	2
  8197  00058E  6E01               	movwf	i2SetPin595@Reg,c
  8198  000590  0E00               	movlw	0
  8199  000592  6E04               	movwf	i2SetPin595@pin+1,c
  8200  000594  0E03               	movlw	3
  8201  000596  6E03               	movwf	i2SetPin595@pin,c
  8202  000598  0E00               	movlw	0
  8203  00059A  6E06               	movwf	i2SetPin595@value+1,c
  8204  00059C  0E00               	movlw	0
  8205  00059E  6E05               	movwf	i2SetPin595@value,c
  8206  0005A0  EC4B  F00D         	call	i2_SetPin595	;wreg free
  8207                           
  8208                           ;PDU.c: 131: SetPin595(2, 2, OFF);
  8209  0005A4  0E00               	movlw	0
  8210  0005A6  6E02               	movwf	i2SetPin595@Reg+1,c
  8211  0005A8  0E02               	movlw	2
  8212  0005AA  6E01               	movwf	i2SetPin595@Reg,c
  8213  0005AC  0E00               	movlw	0
  8214  0005AE  6E04               	movwf	i2SetPin595@pin+1,c
  8215  0005B0  0E02               	movlw	2
  8216  0005B2  6E03               	movwf	i2SetPin595@pin,c
  8217  0005B4  0E00               	movlw	0
  8218  0005B6  6E06               	movwf	i2SetPin595@value+1,c
  8219  0005B8  0E00               	movlw	0
  8220  0005BA  6E05               	movwf	i2SetPin595@value,c
  8221  0005BC  EC4B  F00D         	call	i2_SetPin595	;wreg free
  8222                           
  8223                           ;PDU.c: 132: SetPin595(3, 4, OFF);
  8224  0005C0  0E00               	movlw	0
  8225  0005C2  6E02               	movwf	i2SetPin595@Reg+1,c
  8226  0005C4  0E03               	movlw	3
  8227  0005C6  6E01               	movwf	i2SetPin595@Reg,c
  8228  0005C8  0E00               	movlw	0
  8229  0005CA  6E04               	movwf	i2SetPin595@pin+1,c
  8230  0005CC  0E04               	movlw	4
  8231  0005CE  6E03               	movwf	i2SetPin595@pin,c
  8232  0005D0  0E00               	movlw	0
  8233  0005D2  6E06               	movwf	i2SetPin595@value+1,c
  8234  0005D4  0E00               	movlw	0
  8235  0005D6  6E05               	movwf	i2SetPin595@value,c
  8236  0005D8  EC4B  F00D         	call	i2_SetPin595	;wreg free
  8237                           
  8238                           ;PDU.c: 133: SetPin595(3, 3, OFF);
  8239  0005DC  0E00               	movlw	0
  8240  0005DE  6E02               	movwf	i2SetPin595@Reg+1,c
  8241  0005E0  0E03               	movlw	3
  8242  0005E2  6E01               	movwf	i2SetPin595@Reg,c
  8243  0005E4  0E00               	movlw	0
  8244  0005E6  6E04               	movwf	i2SetPin595@pin+1,c
  8245  0005E8  0E03               	movlw	3
  8246  0005EA  6E03               	movwf	i2SetPin595@pin,c
  8247  0005EC  0E00               	movlw	0
  8248  0005EE  6E06               	movwf	i2SetPin595@value+1,c
  8249  0005F0  0E00               	movlw	0
  8250  0005F2  6E05               	movwf	i2SetPin595@value,c
  8251  0005F4  EC4B  F00D         	call	i2_SetPin595	;wreg free
  8252                           
  8253                           ;PDU.c: 134: SetPin595(3, 2, OFF);
  8254  0005F8  0E00               	movlw	0
  8255  0005FA  6E02               	movwf	i2SetPin595@Reg+1,c
  8256  0005FC  0E03               	movlw	3
  8257  0005FE  6E01               	movwf	i2SetPin595@Reg,c
  8258  000600  0E00               	movlw	0
  8259  000602  6E04               	movwf	i2SetPin595@pin+1,c
  8260  000604  0E02               	movlw	2
  8261  000606  6E03               	movwf	i2SetPin595@pin,c
  8262  000608  0E00               	movlw	0
  8263  00060A  6E06               	movwf	i2SetPin595@value+1,c
  8264  00060C  0E00               	movlw	0
  8265  00060E  6E05               	movwf	i2SetPin595@value,c
  8266  000610  EC4B  F00D         	call	i2_SetPin595	;wreg free
  8267                           
  8268                           ;PDU.c: 135: Update();
  8269  000614  ECB1  F00F         	call	i2_Update	;wreg free
  8270                           
  8271                           ;PDU.c: 136: CurrentADC[3] = ADC_GetConversion(U8Multisense);
  8272  000618  0E16               	movlw	22
  8273  00061A  EC63  F00E         	call	_ADC_GetConversion
  8274  00061E  C001  F0CC         	movff	?_ADC_GetConversion,_CurrentADC+6
  8275  000622  C002  F0CD         	movff	?_ADC_GetConversion+1,_CurrentADC+7
  8276                           
  8277                           ;PDU.c: 138: }
  8278  000626  0012               	return	
  8279  000628                     i2l3274:
  8280                           
  8281                           ;PDU.c: 139: else if(gather == 6){
  8282  000628  0E06               	movlw	6
  8283  00062A  180E               	xorwf	ReadCurrent@gather,w,c
  8284  00062C  A4D8               	btfss	status,2,c
  8285  00062E  0012               	return	
  8286                           
  8287                           ;PDU.c: 141: SetPin595(1, 4, OFF);
  8288  000630  0E00               	movlw	0
  8289  000632  6E02               	movwf	i2SetPin595@Reg+1,c
  8290  000634  0E01               	movlw	1
  8291  000636  6E01               	movwf	i2SetPin595@Reg,c
  8292  000638  0E00               	movlw	0
  8293  00063A  6E04               	movwf	i2SetPin595@pin+1,c
  8294  00063C  0E04               	movlw	4
  8295  00063E  6E03               	movwf	i2SetPin595@pin,c
  8296  000640  0E00               	movlw	0
  8297  000642  6E06               	movwf	i2SetPin595@value+1,c
  8298  000644  0E00               	movlw	0
  8299  000646  6E05               	movwf	i2SetPin595@value,c
  8300  000648  EC4B  F00D         	call	i2_SetPin595	;wreg free
  8301                           
  8302                           ;PDU.c: 142: SetPin595(1, 3, OFF);
  8303  00064C  0E00               	movlw	0
  8304  00064E  6E02               	movwf	i2SetPin595@Reg+1,c
  8305  000650  0E01               	movlw	1
  8306  000652  6E01               	movwf	i2SetPin595@Reg,c
  8307  000654  0E00               	movlw	0
  8308  000656  6E04               	movwf	i2SetPin595@pin+1,c
  8309  000658  0E03               	movlw	3
  8310  00065A  6E03               	movwf	i2SetPin595@pin,c
  8311  00065C  0E00               	movlw	0
  8312  00065E  6E06               	movwf	i2SetPin595@value+1,c
  8313  000660  0E00               	movlw	0
  8314  000662  6E05               	movwf	i2SetPin595@value,c
  8315  000664  EC4B  F00D         	call	i2_SetPin595	;wreg free
  8316                           
  8317                           ;PDU.c: 143: SetPin595(1, 2, OFF);
  8318  000668  0E00               	movlw	0
  8319  00066A  6E02               	movwf	i2SetPin595@Reg+1,c
  8320  00066C  0E01               	movlw	1
  8321  00066E  6E01               	movwf	i2SetPin595@Reg,c
  8322  000670  0E00               	movlw	0
  8323  000672  6E04               	movwf	i2SetPin595@pin+1,c
  8324  000674  0E02               	movlw	2
  8325  000676  6E03               	movwf	i2SetPin595@pin,c
  8326  000678  0E00               	movlw	0
  8327  00067A  6E06               	movwf	i2SetPin595@value+1,c
  8328  00067C  0E00               	movlw	0
  8329  00067E  6E05               	movwf	i2SetPin595@value,c
  8330  000680  EC4B  F00D         	call	i2_SetPin595	;wreg free
  8331                           
  8332                           ;PDU.c: 144: SetPin595(2, 4, OFF);
  8333  000684  0E00               	movlw	0
  8334  000686  6E02               	movwf	i2SetPin595@Reg+1,c
  8335  000688  0E02               	movlw	2
  8336  00068A  6E01               	movwf	i2SetPin595@Reg,c
  8337  00068C  0E00               	movlw	0
  8338  00068E  6E04               	movwf	i2SetPin595@pin+1,c
  8339  000690  0E04               	movlw	4
  8340  000692  6E03               	movwf	i2SetPin595@pin,c
  8341  000694  0E00               	movlw	0
  8342  000696  6E06               	movwf	i2SetPin595@value+1,c
  8343  000698  0E00               	movlw	0
  8344  00069A  6E05               	movwf	i2SetPin595@value,c
  8345  00069C  EC4B  F00D         	call	i2_SetPin595	;wreg free
  8346                           
  8347                           ;PDU.c: 145: SetPin595(2, 3, OFF);
  8348  0006A0  0E00               	movlw	0
  8349  0006A2  6E02               	movwf	i2SetPin595@Reg+1,c
  8350  0006A4  0E02               	movlw	2
  8351  0006A6  6E01               	movwf	i2SetPin595@Reg,c
  8352  0006A8  0E00               	movlw	0
  8353  0006AA  6E04               	movwf	i2SetPin595@pin+1,c
  8354  0006AC  0E03               	movlw	3
  8355  0006AE  6E03               	movwf	i2SetPin595@pin,c
  8356  0006B0  0E00               	movlw	0
  8357  0006B2  6E06               	movwf	i2SetPin595@value+1,c
  8358  0006B4  0E00               	movlw	0
  8359  0006B6  6E05               	movwf	i2SetPin595@value,c
  8360  0006B8  EC4B  F00D         	call	i2_SetPin595	;wreg free
  8361                           
  8362                           ;PDU.c: 146: SetPin595(2, 2, OFF);
  8363  0006BC  0E00               	movlw	0
  8364  0006BE  6E02               	movwf	i2SetPin595@Reg+1,c
  8365  0006C0  0E02               	movlw	2
  8366  0006C2  6E01               	movwf	i2SetPin595@Reg,c
  8367  0006C4  0E00               	movlw	0
  8368  0006C6  6E04               	movwf	i2SetPin595@pin+1,c
  8369  0006C8  0E02               	movlw	2
  8370  0006CA  6E03               	movwf	i2SetPin595@pin,c
  8371  0006CC  0E00               	movlw	0
  8372  0006CE  6E06               	movwf	i2SetPin595@value+1,c
  8373  0006D0  0E00               	movlw	0
  8374  0006D2  6E05               	movwf	i2SetPin595@value,c
  8375  0006D4  EC4B  F00D         	call	i2_SetPin595	;wreg free
  8376                           
  8377                           ;PDU.c: 147: SetPin595(3, 4, ON);
  8378  0006D8  0E00               	movlw	0
  8379  0006DA  6E02               	movwf	i2SetPin595@Reg+1,c
  8380  0006DC  0E03               	movlw	3
  8381  0006DE  6E01               	movwf	i2SetPin595@Reg,c
  8382  0006E0  0E00               	movlw	0
  8383  0006E2  6E04               	movwf	i2SetPin595@pin+1,c
  8384  0006E4  0E04               	movlw	4
  8385  0006E6  6E03               	movwf	i2SetPin595@pin,c
  8386  0006E8  0E00               	movlw	0
  8387  0006EA  6E06               	movwf	i2SetPin595@value+1,c
  8388  0006EC  0E01               	movlw	1
  8389  0006EE  6E05               	movwf	i2SetPin595@value,c
  8390  0006F0  EC4B  F00D         	call	i2_SetPin595	;wreg free
  8391                           
  8392                           ;PDU.c: 148: SetPin595(3, 3, ON);
  8393  0006F4  0E00               	movlw	0
  8394  0006F6  6E02               	movwf	i2SetPin595@Reg+1,c
  8395  0006F8  0E03               	movlw	3
  8396  0006FA  6E01               	movwf	i2SetPin595@Reg,c
  8397  0006FC  0E00               	movlw	0
  8398  0006FE  6E04               	movwf	i2SetPin595@pin+1,c
  8399  000700  0E03               	movlw	3
  8400  000702  6E03               	movwf	i2SetPin595@pin,c
  8401  000704  0E00               	movlw	0
  8402  000706  6E06               	movwf	i2SetPin595@value+1,c
  8403  000708  0E01               	movlw	1
  8404  00070A  6E05               	movwf	i2SetPin595@value,c
  8405  00070C  EC4B  F00D         	call	i2_SetPin595	;wreg free
  8406                           
  8407                           ;PDU.c: 149: SetPin595(3, 2, OFF);
  8408  000710  0E00               	movlw	0
  8409  000712  6E02               	movwf	i2SetPin595@Reg+1,c
  8410  000714  0E03               	movlw	3
  8411  000716  6E01               	movwf	i2SetPin595@Reg,c
  8412  000718  0E00               	movlw	0
  8413  00071A  6E04               	movwf	i2SetPin595@pin+1,c
  8414  00071C  0E02               	movlw	2
  8415  00071E  6E03               	movwf	i2SetPin595@pin,c
  8416  000720  0E00               	movlw	0
  8417  000722  6E06               	movwf	i2SetPin595@value+1,c
  8418  000724  0E00               	movlw	0
  8419  000726  6E05               	movwf	i2SetPin595@value,c
  8420  000728  EC4B  F00D         	call	i2_SetPin595	;wreg free
  8421                           
  8422                           ;PDU.c: 150: Update();
  8423  00072C  ECB1  F00F         	call	i2_Update	;wreg free
  8424                           
  8425                           ;PDU.c: 151: CurrentADC[0] = ADC_GetConversion(U5Multisense);
  8426  000730  0E10               	movlw	16
  8427  000732  EC63  F00E         	call	_ADC_GetConversion
  8428  000736  C001  F0C6         	movff	?_ADC_GetConversion,_CurrentADC
  8429  00073A  C002  F0C7         	movff	?_ADC_GetConversion+1,_CurrentADC+1
  8430  00073E  0012               	return	
  8431  000740                     __end_of_ReadCurrent:
  8432                           	opt stack 0
  8433                           pclatu	equ	0xFFB
  8434                           pclath	equ	0xFFA
  8435                           tblptru	equ	0xFF8
  8436                           tblptrh	equ	0xFF7
  8437                           tblptrl	equ	0xFF6
  8438                           tablat	equ	0xFF5
  8439                           prodh	equ	0xFF4
  8440                           prodl	equ	0xFF3
  8441                           intcon	equ	0xFF2
  8442                           intcon2	equ	0xFF1
  8443                           postinc0	equ	0xFEE
  8444                           fsr0h	equ	0xFEA
  8445                           fsr0l	equ	0xFE9
  8446                           wreg	equ	0xFE8
  8447                           indf1	equ	0xFE7
  8448                           postdec1	equ	0xFE5
  8449                           fsr1h	equ	0xFE2
  8450                           fsr1l	equ	0xFE1
  8451                           indf2	equ	0xFDF
  8452                           postinc2	equ	0xFDE
  8453                           postdec2	equ	0xFDD
  8454                           plusw2	equ	0xFDB
  8455                           fsr2h	equ	0xFDA
  8456                           fsr2l	equ	0xFD9
  8457                           status	equ	0xFD8
  8458                           
  8459 ;; *************** function i2_Update *****************
  8460 ;; Defined at:
  8461 ;;		line 225 in file "PDU.c"
  8462 ;; Parameters:    Size  Location     Type
  8463 ;;		None
  8464 ;; Auto vars:     Size  Location     Type
  8465 ;;		None
  8466 ;; Return value:  Size  Location     Type
  8467 ;;                  1    wreg      void 
  8468 ;; Registers used:
  8469 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8470 ;; Tracked objects:
  8471 ;;		On entry : 0/0
  8472 ;;		On exit  : 0/0
  8473 ;;		Unchanged: 0/0
  8474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8475 ;;      Params:         0       0       0       0       0       0       0
  8476 ;;      Locals:         0       0       0       0       0       0       0
  8477 ;;      Temps:          0       0       0       0       0       0       0
  8478 ;;      Totals:         0       0       0       0       0       0       0
  8479 ;;Total ram usage:        0 bytes
  8480 ;; Hardware stack levels used:    1
  8481 ;; Hardware stack levels required when called:    2
  8482 ;; This function calls:
  8483 ;;		i2_writeRegisters
  8484 ;; This function is called by:
  8485 ;;		_ReadCurrent
  8486 ;; This function uses a non-reentrant model
  8487 ;;
  8488                           
  8489                           	psect	text50
  8490  001F62                     __ptext50:
  8491                           	opt stack 0
  8492  001F62                     i2_Update:
  8493                           	opt stack 18
  8494                           
  8495                           ;PDU.c: 226: writeRegisters();
  8496                           
  8497                           ;incstack = 0
  8498  001F62  ECA7  F00B         	call	i2_writeRegisters	;wreg free
  8499  001F66  0012               	return		;funcret
  8500  001F68                     __end_ofi2_Update:
  8501                           	opt stack 0
  8502                           pclatu	equ	0xFFB
  8503                           pclath	equ	0xFFA
  8504                           tblptru	equ	0xFF8
  8505                           tblptrh	equ	0xFF7
  8506                           tblptrl	equ	0xFF6
  8507                           tablat	equ	0xFF5
  8508                           prodh	equ	0xFF4
  8509                           prodl	equ	0xFF3
  8510                           intcon	equ	0xFF2
  8511                           intcon2	equ	0xFF1
  8512                           postinc0	equ	0xFEE
  8513                           fsr0h	equ	0xFEA
  8514                           fsr0l	equ	0xFE9
  8515                           wreg	equ	0xFE8
  8516                           indf1	equ	0xFE7
  8517                           postdec1	equ	0xFE5
  8518                           fsr1h	equ	0xFE2
  8519                           fsr1l	equ	0xFE1
  8520                           indf2	equ	0xFDF
  8521                           postinc2	equ	0xFDE
  8522                           postdec2	equ	0xFDD
  8523                           plusw2	equ	0xFDB
  8524                           fsr2h	equ	0xFDA
  8525                           fsr2l	equ	0xFD9
  8526                           status	equ	0xFD8
  8527                           
  8528 ;; *************** function i2_writeRegisters *****************
  8529 ;; Defined at:
  8530 ;;		line 50 in file "Shift595.c"
  8531 ;; Parameters:    Size  Location     Type
  8532 ;;		None
  8533 ;; Auto vars:     Size  Location     Type
  8534 ;;  writeRegiste    2   11[COMRAM] int 
  8535 ;;  writeRegiste    2    9[COMRAM] int 
  8536 ;; Return value:  Size  Location     Type
  8537 ;;                  1    wreg      void 
  8538 ;; Registers used:
  8539 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8540 ;; Tracked objects:
  8541 ;;		On entry : 0/0
  8542 ;;		On exit  : 0/0
  8543 ;;		Unchanged: 0/0
  8544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8545 ;;      Params:         0       0       0       0       0       0       0
  8546 ;;      Locals:         4       0       0       0       0       0       0
  8547 ;;      Temps:          0       0       0       0       0       0       0
  8548 ;;      Totals:         4       0       0       0       0       0       0
  8549 ;;Total ram usage:        4 bytes
  8550 ;; Hardware stack levels used:    1
  8551 ;; Hardware stack levels required when called:    1
  8552 ;; This function calls:
  8553 ;;		i2_Delay
  8554 ;; This function is called by:
  8555 ;;		i2_Update
  8556 ;; This function uses a non-reentrant model
  8557 ;;
  8558                           
  8559                           	psect	text51
  8560  00174E                     __ptext51:
  8561                           	opt stack 0
  8562  00174E                     i2_writeRegisters:
  8563                           	opt stack 18
  8564                           
  8565                           ;Shift595.c: 51: int val = 0;
  8566                           
  8567                           ;incstack = 0
  8568  00174E  0E00               	movlw	0
  8569  001750  6E0B               	movwf	i2writeRegisters@val+1,c
  8570  001752  0E00               	movlw	0
  8571  001754  6E0A               	movwf	i2writeRegisters@val,c
  8572                           
  8573                           ;Shift595.c: 52: for (int i = 3 * 8 - 1; i >= 0; i--) {
  8574  001756  0E00               	movlw	0
  8575  001758  6E0D               	movwf	i2writeRegisters@i+1,c
  8576  00175A  0E17               	movlw	23
  8577  00175C  6E0C               	movwf	i2writeRegisters@i,c
  8578  00175E                     i2l2952:
  8579  00175E  BE0D               	btfsc	i2writeRegisters@i+1,7,c
  8580  001760  D01D               	goto	i2l538
  8581                           
  8582                           ;Shift595.c: 53: do { LATD7 = 0; } while(0);
  8583  001762  9E8C               	bcf	3980,7,c	;volatile
  8584                           
  8585                           ;Shift595.c: 55: val = registers[i];
  8586  001764  90D8               	bcf	status,0,c
  8587  001766  340C               	rlcf	i2writeRegisters@i,w,c
  8588  001768  6ED9               	movwf	fsr2l,c
  8589  00176A  340D               	rlcf	i2writeRegisters@i+1,w,c
  8590  00176C  6EDA               	movwf	fsr2h,c
  8591  00176E  0E00               	movlw	low _registers
  8592  001770  26D9               	addwf	fsr2l,f,c
  8593  001772  0E01               	movlw	high _registers
  8594  001774  22DA               	addwfc	fsr2h,f,c
  8595  001776  CFDE F00A          	movff	postinc2,i2writeRegisters@val
  8596  00177A  CFDD F00B          	movff	postdec2,i2writeRegisters@val+1
  8597                           
  8598                           ;Shift595.c: 56: if (val == 1) {
  8599  00177E  040A               	decf	i2writeRegisters@val,w,c
  8600  001780  100B               	iorwf	i2writeRegisters@val+1,w,c
  8601  001782  A4D8               	btfss	status,2,c
  8602  001784  D002               	goto	i2l2960
  8603                           
  8604                           ;Shift595.c: 57: do { LATD4 = 1; } while(0);
  8605  001786  888C               	bsf	3980,4,c	;volatile
  8606                           
  8607                           ;Shift595.c: 58: } else if (val == 0) {
  8608  001788  D004               	goto	i2l536
  8609  00178A                     i2l2960:
  8610  00178A  500A               	movf	i2writeRegisters@val,w,c
  8611  00178C  100B               	iorwf	i2writeRegisters@val+1,w,c
  8612  00178E  B4D8               	btfsc	status,2,c
  8613                           
  8614                           ;Shift595.c: 59: do { LATD4 = 0; } while(0);
  8615  001790  988C               	bcf	3980,4,c	;volatile
  8616  001792                     i2l536:
  8617  001792  8E8C               	bsf	3980,7,c	;volatile
  8618  001794  060C               	decf	i2writeRegisters@i,f,c
  8619  001796  A0D8               	btfss	status,0,c
  8620  001798  060D               	decf	i2writeRegisters@i+1,f,c
  8621  00179A  D7E1               	goto	i2l2952
  8622  00179C                     i2l538:
  8623  00179C  9E8C               	bcf	3980,7,c	;volatile
  8624                           
  8625                           ;Shift595.c: 67: Delay(1);
  8626  00179E  0E01               	movlw	1
  8627  0017A0  6E01               	movwf	i2Delay@wait,c
  8628  0017A2  0E00               	movlw	0
  8629  0017A4  6E02               	movwf	i2Delay@wait+1,c
  8630  0017A6  0E00               	movlw	0
  8631  0017A8  6E03               	movwf	i2Delay@wait+2,c
  8632  0017AA  0E00               	movlw	0
  8633  0017AC  6E04               	movwf	i2Delay@wait+3,c
  8634  0017AE  ECBC  F00D         	call	i2_Delay	;wreg free
  8635                           
  8636                           ;Shift595.c: 68: do { LATD6 = 1; } while(0);
  8637  0017B2  8C8C               	bsf	3980,6,c	;volatile
  8638                           
  8639                           ;Shift595.c: 69: Delay(1);
  8640  0017B4  0E01               	movlw	1
  8641  0017B6  6E01               	movwf	i2Delay@wait,c
  8642  0017B8  0E00               	movlw	0
  8643  0017BA  6E02               	movwf	i2Delay@wait+1,c
  8644  0017BC  0E00               	movlw	0
  8645  0017BE  6E03               	movwf	i2Delay@wait+2,c
  8646  0017C0  0E00               	movlw	0
  8647  0017C2  6E04               	movwf	i2Delay@wait+3,c
  8648  0017C4  ECBC  F00D         	call	i2_Delay	;wreg free
  8649                           
  8650                           ;Shift595.c: 70: do { LATD6 = 0; } while(0);
  8651  0017C8  9C8C               	bcf	3980,6,c	;volatile
  8652  0017CA  0012               	return	
  8653  0017CC                     __end_ofi2_writeRegisters:
  8654                           	opt stack 0
  8655                           pclatu	equ	0xFFB
  8656                           pclath	equ	0xFFA
  8657                           tblptru	equ	0xFF8
  8658                           tblptrh	equ	0xFF7
  8659                           tblptrl	equ	0xFF6
  8660                           tablat	equ	0xFF5
  8661                           prodh	equ	0xFF4
  8662                           prodl	equ	0xFF3
  8663                           intcon	equ	0xFF2
  8664                           intcon2	equ	0xFF1
  8665                           postinc0	equ	0xFEE
  8666                           fsr0h	equ	0xFEA
  8667                           fsr0l	equ	0xFE9
  8668                           wreg	equ	0xFE8
  8669                           indf1	equ	0xFE7
  8670                           postdec1	equ	0xFE5
  8671                           fsr1h	equ	0xFE2
  8672                           fsr1l	equ	0xFE1
  8673                           indf2	equ	0xFDF
  8674                           postinc2	equ	0xFDE
  8675                           postdec2	equ	0xFDD
  8676                           plusw2	equ	0xFDB
  8677                           fsr2h	equ	0xFDA
  8678                           fsr2l	equ	0xFD9
  8679                           status	equ	0xFD8
  8680                           
  8681 ;; *************** function i2_Delay *****************
  8682 ;; Defined at:
  8683 ;;		line 9 in file "Functions.c"
  8684 ;; Parameters:    Size  Location     Type
  8685 ;;  wait            4    0[COMRAM] long 
  8686 ;; Auto vars:     Size  Location     Type
  8687 ;;  Delay           4    5[COMRAM] long 
  8688 ;; Return value:  Size  Location     Type
  8689 ;;                  1    wreg      void 
  8690 ;; Registers used:
  8691 ;;		wreg, status,2, status,0
  8692 ;; Tracked objects:
  8693 ;;		On entry : 0/0
  8694 ;;		On exit  : 0/0
  8695 ;;		Unchanged: 0/0
  8696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8697 ;;      Params:         4       0       0       0       0       0       0
  8698 ;;      Locals:         4       0       0       0       0       0       0
  8699 ;;      Temps:          1       0       0       0       0       0       0
  8700 ;;      Totals:         9       0       0       0       0       0       0
  8701 ;;Total ram usage:        9 bytes
  8702 ;; Hardware stack levels used:    1
  8703 ;; This function calls:
  8704 ;;		Nothing
  8705 ;; This function is called by:
  8706 ;;		i2_writeRegisters
  8707 ;; This function uses a non-reentrant model
  8708 ;;
  8709                           
  8710                           	psect	text52
  8711  001B78                     __ptext52:
  8712                           	opt stack 0
  8713  001B78                     i2_Delay:
  8714                           	opt stack 18
  8715                           
  8716                           ;Functions.c: 10: long int i = 0;
  8717                           
  8718                           ;incstack = 0
  8719  001B78  0E00               	movlw	0
  8720  001B7A  6E06               	movwf	i2Delay@i,c
  8721  001B7C  0E00               	movlw	0
  8722  001B7E  6E07               	movwf	i2Delay@i+1,c
  8723  001B80  0E00               	movlw	0
  8724  001B82  6E08               	movwf	i2Delay@i+2,c
  8725  001B84  0E00               	movlw	0
  8726  001B86  6E09               	movwf	i2Delay@i+3,c
  8727                           
  8728                           ;Functions.c: 11: for (; wait > i; i++) {
  8729  001B88  D00D               	goto	i2l2832
  8730  001B8A                     i2l2828:
  8731                           
  8732                           ;Functions.c: 12: _delay((unsigned long)((1)*(8000000/4000.0)));
  8733  001B8A  0E03               	movlw	3
  8734  001B8C  6E05               	movwf	??i2_Delay& (0+255),c
  8735  001B8E  0E98               	movlw	152
  8736  001B90                     i2u286_47:
  8737  001B90  2EE8               	decfsz	wreg,f,c
  8738  001B92  D7FE               	bra	i2u286_47
  8739  001B94  2E05               	decfsz	??i2_Delay& (0+255),f,c
  8740  001B96  D7FC               	bra	i2u286_47
  8741  001B98  0E01               	movlw	1
  8742  001B9A  2606               	addwf	i2Delay@i,f,c
  8743  001B9C  0E00               	movlw	0
  8744  001B9E  2207               	addwfc	i2Delay@i+1,f,c
  8745  001BA0  2208               	addwfc	i2Delay@i+2,f,c
  8746  001BA2  2209               	addwfc	i2Delay@i+3,f,c
  8747  001BA4                     i2l2832:
  8748  001BA4  5001               	movf	i2Delay@wait,w,c
  8749  001BA6  5C06               	subwf	i2Delay@i,w,c
  8750  001BA8  5002               	movf	i2Delay@wait+1,w,c
  8751  001BAA  5807               	subwfb	i2Delay@i+1,w,c
  8752  001BAC  5003               	movf	i2Delay@wait+2,w,c
  8753  001BAE  5808               	subwfb	i2Delay@i+2,w,c
  8754  001BB0  5009               	movf	i2Delay@i+3,w,c
  8755  001BB2  0A80               	xorlw	128
  8756  001BB4  6E05               	movwf	??i2_Delay& (0+255),c
  8757  001BB6  5004               	movf	i2Delay@wait+3,w,c
  8758  001BB8  0A80               	xorlw	128
  8759  001BBA  5805               	subwfb	??i2_Delay& (0+255),w,c
  8760  001BBC  B0D8               	btfsc	status,0,c
  8761  001BBE  0012               	return	
  8762  001BC0  D7E4               	goto	i2l2828
  8763  001BC2                     __end_ofi2_Delay:
  8764                           	opt stack 0
  8765                           pclatu	equ	0xFFB
  8766                           pclath	equ	0xFFA
  8767                           tblptru	equ	0xFF8
  8768                           tblptrh	equ	0xFF7
  8769                           tblptrl	equ	0xFF6
  8770                           tablat	equ	0xFF5
  8771                           prodh	equ	0xFF4
  8772                           prodl	equ	0xFF3
  8773                           intcon	equ	0xFF2
  8774                           intcon2	equ	0xFF1
  8775                           postinc0	equ	0xFEE
  8776                           fsr0h	equ	0xFEA
  8777                           fsr0l	equ	0xFE9
  8778                           wreg	equ	0xFE8
  8779                           indf1	equ	0xFE7
  8780                           postdec1	equ	0xFE5
  8781                           fsr1h	equ	0xFE2
  8782                           fsr1l	equ	0xFE1
  8783                           indf2	equ	0xFDF
  8784                           postinc2	equ	0xFDE
  8785                           postdec2	equ	0xFDD
  8786                           plusw2	equ	0xFDB
  8787                           fsr2h	equ	0xFDA
  8788                           fsr2l	equ	0xFD9
  8789                           status	equ	0xFD8
  8790                           
  8791 ;; *************** function i2_SetPin595 *****************
  8792 ;; Defined at:
  8793 ;;		line 32 in file "Shift595.c"
  8794 ;; Parameters:    Size  Location     Type
  8795 ;;  Reg             2    0[COMRAM] int 
  8796 ;;  pin             2    2[COMRAM] int 
  8797 ;;  value           2    4[COMRAM] int 
  8798 ;; Auto vars:     Size  Location     Type
  8799 ;;		None
  8800 ;; Return value:  Size  Location     Type
  8801 ;;                  1    wreg      void 
  8802 ;; Registers used:
  8803 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8804 ;; Tracked objects:
  8805 ;;		On entry : 0/0
  8806 ;;		On exit  : 0/0
  8807 ;;		Unchanged: 0/0
  8808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8809 ;;      Params:         6       0       0       0       0       0       0
  8810 ;;      Locals:         0       0       0       0       0       0       0
  8811 ;;      Temps:          4       0       0       0       0       0       0
  8812 ;;      Totals:        10       0       0       0       0       0       0
  8813 ;;Total ram usage:       10 bytes
  8814 ;; Hardware stack levels used:    1
  8815 ;; This function calls:
  8816 ;;		Nothing
  8817 ;; This function is called by:
  8818 ;;		_ReadCurrent
  8819 ;; This function uses a non-reentrant model
  8820 ;;
  8821                           
  8822                           	psect	text53
  8823  001A96                     __ptext53:
  8824                           	opt stack 0
  8825  001A96                     i2_SetPin595:
  8826                           	opt stack 20
  8827                           
  8828                           ;Shift595.c: 33: registers[((Reg - 1)*8) + pin] = value;
  8829                           
  8830                           ;incstack = 0
  8831  001A96  0EF0               	movlw	240
  8832  001A98  6E07               	movwf	??i2_SetPin595& (0+255),c
  8833  001A9A  0EFF               	movlw	255
  8834  001A9C  6E08               	movwf	(??i2_SetPin595+1)& (0+255),c
  8835  001A9E  C001  F009         	movff	i2SetPin595@Reg,??i2_SetPin595+2
  8836  001AA2  C002  F00A         	movff	i2SetPin595@Reg+1,??i2_SetPin595+3
  8837  001AA6  90D8               	bcf	status,0,c
  8838  001AA8  3609               	rlcf	??i2_SetPin595+2,f,c
  8839  001AAA  360A               	rlcf	??i2_SetPin595+3,f,c
  8840  001AAC  90D8               	bcf	status,0,c
  8841  001AAE  3609               	rlcf	??i2_SetPin595+2,f,c
  8842  001AB0  360A               	rlcf	??i2_SetPin595+3,f,c
  8843  001AB2  90D8               	bcf	status,0,c
  8844  001AB4  3609               	rlcf	??i2_SetPin595+2,f,c
  8845  001AB6  360A               	rlcf	??i2_SetPin595+3,f,c
  8846  001AB8  5003               	movf	i2SetPin595@pin,w,c
  8847  001ABA  2609               	addwf	??i2_SetPin595+2,f,c
  8848  001ABC  5004               	movf	i2SetPin595@pin+1,w,c
  8849  001ABE  220A               	addwfc	??i2_SetPin595+3,f,c
  8850  001AC0  90D8               	bcf	status,0,c
  8851  001AC2  3609               	rlcf	??i2_SetPin595+2,f,c
  8852  001AC4  360A               	rlcf	??i2_SetPin595+3,f,c
  8853  001AC6  5007               	movf	??i2_SetPin595,w,c
  8854  001AC8  2609               	addwf	??i2_SetPin595+2,f,c
  8855  001ACA  5008               	movf	??i2_SetPin595+1,w,c
  8856  001ACC  220A               	addwfc	??i2_SetPin595+3,f,c
  8857  001ACE  0E00               	movlw	low _registers
  8858  001AD0  2409               	addwf	??i2_SetPin595+2,w,c
  8859  001AD2  6ED9               	movwf	fsr2l,c
  8860  001AD4  0E01               	movlw	high _registers
  8861  001AD6  200A               	addwfc	??i2_SetPin595+3,w,c
  8862  001AD8  6EDA               	movwf	fsr2h,c
  8863  001ADA  C005  FFDE         	movff	i2SetPin595@value,postinc2
  8864  001ADE  C006  FFDD         	movff	i2SetPin595@value+1,postdec2
  8865  001AE2  0012               	return		;funcret
  8866  001AE4                     __end_ofi2_SetPin595:
  8867                           	opt stack 0
  8868                           pclatu	equ	0xFFB
  8869                           pclath	equ	0xFFA
  8870                           tblptru	equ	0xFF8
  8871                           tblptrh	equ	0xFF7
  8872                           tblptrl	equ	0xFF6
  8873                           tablat	equ	0xFF5
  8874                           prodh	equ	0xFF4
  8875                           prodl	equ	0xFF3
  8876                           intcon	equ	0xFF2
  8877                           intcon2	equ	0xFF1
  8878                           postinc0	equ	0xFEE
  8879                           fsr0h	equ	0xFEA
  8880                           fsr0l	equ	0xFE9
  8881                           wreg	equ	0xFE8
  8882                           indf1	equ	0xFE7
  8883                           postdec1	equ	0xFE5
  8884                           fsr1h	equ	0xFE2
  8885                           fsr1l	equ	0xFE1
  8886                           indf2	equ	0xFDF
  8887                           postinc2	equ	0xFDE
  8888                           postdec2	equ	0xFDD
  8889                           plusw2	equ	0xFDB
  8890                           fsr2h	equ	0xFDA
  8891                           fsr2l	equ	0xFD9
  8892                           status	equ	0xFD8
  8893                           
  8894 ;; *************** function _ADC_GetConversion *****************
  8895 ;; Defined at:
  8896 ;;		line 109 in file "mcc_generated_files/adc.c"
  8897 ;; Parameters:    Size  Location     Type
  8898 ;;  channel         1    wreg     enum E6965
  8899 ;; Auto vars:     Size  Location     Type
  8900 ;;  channel         1    4[COMRAM] enum E6965
  8901 ;; Return value:  Size  Location     Type
  8902 ;;                  2    0[COMRAM] unsigned int 
  8903 ;; Registers used:
  8904 ;;		wreg, status,2, status,0
  8905 ;; Tracked objects:
  8906 ;;		On entry : 0/0
  8907 ;;		On exit  : 0/0
  8908 ;;		Unchanged: 0/0
  8909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8910 ;;      Params:         2       0       0       0       0       0       0
  8911 ;;      Locals:         1       0       0       0       0       0       0
  8912 ;;      Temps:          2       0       0       0       0       0       0
  8913 ;;      Totals:         5       0       0       0       0       0       0
  8914 ;;Total ram usage:        5 bytes
  8915 ;; Hardware stack levels used:    1
  8916 ;; This function calls:
  8917 ;;		Nothing
  8918 ;; This function is called by:
  8919 ;;		_ReadCurrent
  8920 ;; This function uses a non-reentrant model
  8921 ;;
  8922                           
  8923                           	psect	text54
  8924  001CC6                     __ptext54:
  8925                           	opt stack 0
  8926  001CC6                     _ADC_GetConversion:
  8927                           	opt stack 20
  8928                           
  8929                           ;incstack = 0
  8930                           ;ADC_GetConversion@channel stored from wreg
  8931  001CC6  6E05               	movwf	ADC_GetConversion@channel,c
  8932                           
  8933                           ;adc.c: 112: ADCON0bits.CHS = channel;
  8934  001CC8  C005  F003         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
  8935  001CCC  4603               	rlncf	??_ADC_GetConversion,f,c
  8936  001CCE  4603               	rlncf	??_ADC_GetConversion,f,c
  8937  001CD0  50C2               	movf	4034,w,c	;volatile
  8938  001CD2  1803               	xorwf	??_ADC_GetConversion,w,c
  8939  001CD4  0B83               	andlw	-125
  8940  001CD6  1803               	xorwf	??_ADC_GetConversion,w,c
  8941  001CD8  6EC2               	movwf	4034,c	;volatile
  8942                           
  8943                           ;adc.c: 115: ADCON0bits.ADON = 1;
  8944  001CDA  80C2               	bsf	4034,0,c	;volatile
  8945                           
  8946                           ;adc.c: 119: ADCON0bits.GO_nDONE = 1;
  8947  001CDC  82C2               	bsf	4034,1,c	;volatile
  8948  001CDE                     i2l31:
  8949  001CDE  B2C2               	btfsc	4034,1,c	;volatile
  8950  001CE0  D7FE               	goto	i2l31
  8951                           
  8952                           ;adc.c: 124: }
  8953                           ;adc.c: 127: return ((ADRESH << 8) + ADRESL);
  8954  001CE2  50C4               	movf	4036,w,c	;volatile
  8955  001CE4  6E04               	movwf	(??_ADC_GetConversion+1)& (0+255),c
  8956  001CE6  6A03               	clrf	??_ADC_GetConversion& (0+255),c
  8957  001CE8  50C3               	movf	4035,w,c	;volatile
  8958  001CEA  2403               	addwf	??_ADC_GetConversion,w,c
  8959  001CEC  6E01               	movwf	?_ADC_GetConversion,c
  8960  001CEE  0E00               	movlw	0
  8961  001CF0  2004               	addwfc	??_ADC_GetConversion+1,w,c
  8962  001CF2  6E02               	movwf	?_ADC_GetConversion+1,c
  8963  001CF4  0012               	return	
  8964  001CF6                     __end_of_ADC_GetConversion:
  8965                           	opt stack 0
  8966                           pclatu	equ	0xFFB
  8967                           pclath	equ	0xFFA
  8968                           tblptru	equ	0xFF8
  8969                           tblptrh	equ	0xFF7
  8970                           tblptrl	equ	0xFF6
  8971                           tablat	equ	0xFF5
  8972                           prodh	equ	0xFF4
  8973                           prodl	equ	0xFF3
  8974                           intcon	equ	0xFF2
  8975                           intcon2	equ	0xFF1
  8976                           postinc0	equ	0xFEE
  8977                           fsr0h	equ	0xFEA
  8978                           fsr0l	equ	0xFE9
  8979                           wreg	equ	0xFE8
  8980                           indf1	equ	0xFE7
  8981                           postdec1	equ	0xFE5
  8982                           fsr1h	equ	0xFE2
  8983                           fsr1l	equ	0xFE1
  8984                           indf2	equ	0xFDF
  8985                           postinc2	equ	0xFDE
  8986                           postdec2	equ	0xFDD
  8987                           plusw2	equ	0xFDB
  8988                           fsr2h	equ	0xFDA
  8989                           fsr2l	equ	0xFD9
  8990                           status	equ	0xFD8
  8991                           
  8992 ;; *************** function _FuseSystem *****************
  8993 ;; Defined at:
  8994 ;;		line 175 in file "PDU.c"
  8995 ;; Parameters:    Size  Location     Type
  8996 ;;		None
  8997 ;; Auto vars:     Size  Location     Type
  8998 ;;  i               2    6[COMRAM] int 
  8999 ;;  i               2    8[COMRAM] int 
  9000 ;; Return value:  Size  Location     Type
  9001 ;;                  1    wreg      void 
  9002 ;; Registers used:
  9003 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9004 ;; Tracked objects:
  9005 ;;		On entry : 0/0
  9006 ;;		On exit  : 0/0
  9007 ;;		Unchanged: 0/0
  9008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9009 ;;      Params:         0       0       0       0       0       0       0
  9010 ;;      Locals:         4       0       0       0       0       0       0
  9011 ;;      Temps:          0       0       0       0       0       0       0
  9012 ;;      Totals:         4       0       0       0       0       0       0
  9013 ;;Total ram usage:        4 bytes
  9014 ;; Hardware stack levels used:    1
  9015 ;; Hardware stack levels required when called:    1
  9016 ;; This function calls:
  9017 ;;		___wmul
  9018 ;; This function is called by:
  9019 ;;		_TMR1_ISR
  9020 ;; This function uses a non-reentrant model
  9021 ;;
  9022                           
  9023                           	psect	text55
  9024  0017CC                     __ptext55:
  9025                           	opt stack 0
  9026  0017CC                     _FuseSystem:
  9027                           	opt stack 20
  9028                           
  9029                           ;PDU.c: 177: for (int i = 0; i < 6; i++) {
  9030                           
  9031                           ;incstack = 0
  9032  0017CC  0E00               	movlw	0
  9033  0017CE  6E0A               	movwf	FuseSystem@i+1,c
  9034  0017D0  0E00               	movlw	0
  9035  0017D2  6E09               	movwf	FuseSystem@i,c
  9036  0017D4                     i2l3224:
  9037  0017D4  BE0A               	btfsc	FuseSystem@i+1,7,c
  9038  0017D6  D006               	goto	i2l3228
  9039  0017D8  500A               	movf	FuseSystem@i+1,w,c
  9040  0017DA  E127               	bnz	i2l3234
  9041  0017DC  0E06               	movlw	6
  9042  0017DE  5C09               	subwf	FuseSystem@i,w,c
  9043  0017E0  B0D8               	btfsc	status,0,c
  9044  0017E2  D023               	goto	i2l3234
  9045  0017E4                     i2l3228:
  9046                           
  9047                           ;PDU.c: 178: Current[i] = CurrentADC[i]*48;
  9048  0017E4  90D8               	bcf	status,0,c
  9049  0017E6  3409               	rlcf	FuseSystem@i,w,c
  9050  0017E8  6ED9               	movwf	fsr2l,c
  9051  0017EA  340A               	rlcf	FuseSystem@i+1,w,c
  9052  0017EC  6EDA               	movwf	fsr2h,c
  9053  0017EE  0EC6               	movlw	low _CurrentADC
  9054  0017F0  26D9               	addwf	fsr2l,f,c
  9055  0017F2  0E00               	movlw	high _CurrentADC
  9056  0017F4  22DA               	addwfc	fsr2h,f,c
  9057  0017F6  CFDE F001          	movff	postinc2,___wmul@multiplier
  9058  0017FA  CFDD F002          	movff	postdec2,___wmul@multiplier+1
  9059  0017FE  0E00               	movlw	0
  9060  001800  6E04               	movwf	___wmul@multiplicand+1,c
  9061  001802  0E30               	movlw	48
  9062  001804  6E03               	movwf	___wmul@multiplicand,c
  9063  001806  ECD2  F00E         	call	___wmul	;wreg free
  9064  00180A  90D8               	bcf	status,0,c
  9065  00180C  3409               	rlcf	FuseSystem@i,w,c
  9066  00180E  6ED9               	movwf	fsr2l,c
  9067  001810  340A               	rlcf	FuseSystem@i+1,w,c
  9068  001812  6EDA               	movwf	fsr2h,c
  9069  001814  0E30               	movlw	low _Current
  9070  001816  26D9               	addwf	fsr2l,f,c
  9071  001818  0E01               	movlw	high _Current
  9072  00181A  22DA               	addwfc	fsr2h,f,c
  9073  00181C  C001  FFDE         	movff	?___wmul,postinc2
  9074  001820  C002  FFDD         	movff	?___wmul+1,postdec2
  9075  001824  4A09               	infsnz	FuseSystem@i,f,c
  9076  001826  2A0A               	incf	FuseSystem@i+1,f,c
  9077  001828  D7D5               	goto	i2l3224
  9078  00182A                     i2l3234:
  9079                           
  9080                           ;PDU.c: 181: }
  9081                           ;PDU.c: 183: for (int i = 0; i < 6; i++) {
  9082  00182A  0E00               	movlw	0
  9083  00182C  6E08               	movwf	FuseSystem@i_1200+1,c
  9084  00182E  0E00               	movlw	0
  9085  001830  6E07               	movwf	FuseSystem@i_1200,c
  9086  001832                     i2l3236:
  9087  001832  BE08               	btfsc	FuseSystem@i_1200+1,7,c
  9088  001834  D006               	goto	i2l3240
  9089  001836  5008               	movf	FuseSystem@i_1200+1,w,c
  9090  001838  E107               	bnz	i2l469
  9091  00183A  0E06               	movlw	6
  9092  00183C  5C07               	subwf	FuseSystem@i_1200,w,c
  9093  00183E  B0D8               	btfsc	status,0,c
  9094  001840  0012               	return	
  9095  001842                     i2l3240:
  9096  001842  4A07               	infsnz	FuseSystem@i_1200,f,c
  9097  001844  2A08               	incf	FuseSystem@i_1200+1,f,c
  9098  001846  D7F5               	goto	i2l3236
  9099  001848                     i2l469:
  9100  001848  0012               	return		;funcret
  9101  00184A                     __end_of_FuseSystem:
  9102                           	opt stack 0
  9103                           pclatu	equ	0xFFB
  9104                           pclath	equ	0xFFA
  9105                           tblptru	equ	0xFF8
  9106                           tblptrh	equ	0xFF7
  9107                           tblptrl	equ	0xFF6
  9108                           tablat	equ	0xFF5
  9109                           prodh	equ	0xFF4
  9110                           prodl	equ	0xFF3
  9111                           intcon	equ	0xFF2
  9112                           intcon2	equ	0xFF1
  9113                           postinc0	equ	0xFEE
  9114                           fsr0h	equ	0xFEA
  9115                           fsr0l	equ	0xFE9
  9116                           wreg	equ	0xFE8
  9117                           indf1	equ	0xFE7
  9118                           postdec1	equ	0xFE5
  9119                           fsr1h	equ	0xFE2
  9120                           fsr1l	equ	0xFE1
  9121                           indf2	equ	0xFDF
  9122                           postinc2	equ	0xFDE
  9123                           postdec2	equ	0xFDD
  9124                           plusw2	equ	0xFDB
  9125                           fsr2h	equ	0xFDA
  9126                           fsr2l	equ	0xFD9
  9127                           status	equ	0xFD8
  9128                           
  9129 ;; *************** function ___wmul *****************
  9130 ;; Defined at:
  9131 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
  9132 ;; Parameters:    Size  Location     Type
  9133 ;;  multiplier      2    0[COMRAM] unsigned int 
  9134 ;;  multiplicand    2    2[COMRAM] unsigned int 
  9135 ;; Auto vars:     Size  Location     Type
  9136 ;;  product         2    4[COMRAM] unsigned int 
  9137 ;; Return value:  Size  Location     Type
  9138 ;;                  2    0[COMRAM] unsigned int 
  9139 ;; Registers used:
  9140 ;;		wreg, status,2, status,0, prodl, prodh
  9141 ;; Tracked objects:
  9142 ;;		On entry : 0/0
  9143 ;;		On exit  : 0/0
  9144 ;;		Unchanged: 0/0
  9145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9146 ;;      Params:         4       0       0       0       0       0       0
  9147 ;;      Locals:         2       0       0       0       0       0       0
  9148 ;;      Temps:          0       0       0       0       0       0       0
  9149 ;;      Totals:         6       0       0       0       0       0       0
  9150 ;;Total ram usage:        6 bytes
  9151 ;; Hardware stack levels used:    1
  9152 ;; This function calls:
  9153 ;;		Nothing
  9154 ;; This function is called by:
  9155 ;;		_FuseSystem
  9156 ;; This function uses a non-reentrant model
  9157 ;;
  9158                           
  9159                           	psect	text56
  9160  001DA4                     __ptext56:
  9161                           	opt stack 0
  9162  001DA4                     ___wmul:
  9163                           	opt stack 20
  9164                           
  9165                           ;incstack = 0
  9166  001DA4  5001               	movf	___wmul@multiplier,w,c
  9167  001DA6  0203               	mulwf	___wmul@multiplicand,c
  9168  001DA8  CFF3 F005          	movff	prodl,___wmul@product
  9169  001DAC  CFF4 F006          	movff	prodh,___wmul@product+1
  9170  001DB0  5001               	movf	___wmul@multiplier,w,c
  9171  001DB2  0204               	mulwf	___wmul@multiplicand+1,c
  9172  001DB4  50F3               	movf	prodl,w,c
  9173  001DB6  2606               	addwf	___wmul@product+1,f,c
  9174  001DB8  5002               	movf	___wmul@multiplier+1,w,c
  9175  001DBA  0203               	mulwf	___wmul@multiplicand,c
  9176  001DBC  50F3               	movf	prodl,w,c
  9177  001DBE  2606               	addwf	___wmul@product+1,f,c
  9178  001DC0  C005  F001         	movff	___wmul@product,?___wmul
  9179  001DC4  C006  F002         	movff	___wmul@product+1,?___wmul+1
  9180  001DC8  0012               	return	
  9181  001DCA                     __end_of___wmul:
  9182                           	opt stack 0
  9183                           pclatu	equ	0xFFB
  9184                           pclath	equ	0xFFA
  9185                           tblptru	equ	0xFF8
  9186                           tblptrh	equ	0xFF7
  9187                           tblptrl	equ	0xFF6
  9188                           tablat	equ	0xFF5
  9189                           prodh	equ	0xFF4
  9190                           prodl	equ	0xFF3
  9191                           intcon	equ	0xFF2
  9192                           intcon2	equ	0xFF1
  9193                           postinc0	equ	0xFEE
  9194                           fsr0h	equ	0xFEA
  9195                           fsr0l	equ	0xFE9
  9196                           wreg	equ	0xFE8
  9197                           indf1	equ	0xFE7
  9198                           postdec1	equ	0xFE5
  9199                           fsr1h	equ	0xFE2
  9200                           fsr1l	equ	0xFE1
  9201                           indf2	equ	0xFDF
  9202                           postinc2	equ	0xFDE
  9203                           postdec2	equ	0xFDD
  9204                           plusw2	equ	0xFDB
  9205                           fsr2h	equ	0xFDA
  9206                           fsr2l	equ	0xFD9
  9207                           status	equ	0xFD8
  9208                           
  9209 ;; *************** function _EUSART1_Transmit_ISR *****************
  9210 ;; Defined at:
  9211 ;;		line 149 in file "UART.c"
  9212 ;; Parameters:    Size  Location     Type
  9213 ;;		None
  9214 ;; Auto vars:     Size  Location     Type
  9215 ;;		None
  9216 ;; Return value:  Size  Location     Type
  9217 ;;                  1    wreg      void 
  9218 ;; Registers used:
  9219 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9220 ;; Tracked objects:
  9221 ;;		On entry : 0/0
  9222 ;;		On exit  : 0/0
  9223 ;;		Unchanged: 0/0
  9224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9225 ;;      Params:         0       0       0       0       0       0       0
  9226 ;;      Locals:         0       0       0       0       0       0       0
  9227 ;;      Temps:          0       0       0       0       0       0       0
  9228 ;;      Totals:         0       0       0       0       0       0       0
  9229 ;;Total ram usage:        0 bytes
  9230 ;; Hardware stack levels used:    1
  9231 ;; Hardware stack levels required when called:    2
  9232 ;; This function calls:
  9233 ;;		i2_UART_buff_get
  9234 ;;		i2_UART_buff_size
  9235 ;; This function is called by:
  9236 ;;		_INTERRUPT_InterruptManager
  9237 ;; This function uses a non-reentrant model
  9238 ;;
  9239                           
  9240                           	psect	text57
  9241  001C64                     __ptext57:
  9242                           	opt stack 0
  9243  001C64                     _EUSART1_Transmit_ISR:
  9244                           	opt stack 20
  9245                           
  9246                           ;UART.c: 151: if (UART_buff_size(&output_buffer) > 0) {
  9247                           
  9248                           ;incstack = 0
  9249  001C64  0E00               	movlw	low _output_buffer
  9250  001C66  6E01               	movwf	i2UART_buff_size@_this,c
  9251  001C68  0E02               	movlw	high _output_buffer
  9252  001C6A  6E02               	movwf	i2UART_buff_size@_this+1,c
  9253  001C6C  EC62  F00F         	call	i2_UART_buff_size	;wreg free
  9254  001C70  BE02               	btfsc	?i2_UART_buff_size+1,7,c
  9255  001C72  D00D               	goto	i2l3452
  9256  001C74  5002               	movf	?i2_UART_buff_size+1,w,c
  9257  001C76  E103               	bnz	i2u192_40
  9258  001C78  0401               	decf	?i2_UART_buff_size,w,c
  9259  001C7A  A0D8               	btfss	status,0,c
  9260  001C7C  D008               	goto	i2l3452
  9261  001C7E                     i2u192_40:
  9262                           
  9263                           ;UART.c: 152: TXREG1 = UART_buff_get(&output_buffer);
  9264  001C7E  0E00               	movlw	low _output_buffer
  9265  001C80  6E07               	movwf	i2UART_buff_get@_this,c
  9266  001C82  0E02               	movlw	high _output_buffer
  9267  001C84  6E08               	movwf	i2UART_buff_get@_this+1,c
  9268  001C86  EC1F  F00B         	call	i2_UART_buff_get	;wreg free
  9269  001C8A  6EAD               	movwf	4013,c	;volatile
  9270                           
  9271                           ;UART.c: 153: } else {
  9272  001C8C  0012               	return	
  9273  001C8E                     i2l3452:
  9274                           
  9275                           ;UART.c: 154: Transmit_stall = 1;
  9276  001C8E  0E01               	movlw	1
  9277  001C90  6E42               	movwf	_Transmit_stall,c
  9278                           
  9279                           ;UART.c: 155: PIE1bits.TX1IE = 0;
  9280  001C92  989D               	bcf	3997,4,c	;volatile
  9281  001C94  0012               	return	
  9282  001C96                     __end_of_EUSART1_Transmit_ISR:
  9283                           	opt stack 0
  9284                           pclatu	equ	0xFFB
  9285                           pclath	equ	0xFFA
  9286                           tblptru	equ	0xFF8
  9287                           tblptrh	equ	0xFF7
  9288                           tblptrl	equ	0xFF6
  9289                           tablat	equ	0xFF5
  9290                           prodh	equ	0xFF4
  9291                           prodl	equ	0xFF3
  9292                           intcon	equ	0xFF2
  9293                           intcon2	equ	0xFF1
  9294                           postinc0	equ	0xFEE
  9295                           fsr0h	equ	0xFEA
  9296                           fsr0l	equ	0xFE9
  9297                           wreg	equ	0xFE8
  9298                           indf1	equ	0xFE7
  9299                           postdec1	equ	0xFE5
  9300                           fsr1h	equ	0xFE2
  9301                           fsr1l	equ	0xFE1
  9302                           indf2	equ	0xFDF
  9303                           postinc2	equ	0xFDE
  9304                           postdec2	equ	0xFDD
  9305                           plusw2	equ	0xFDB
  9306                           fsr2h	equ	0xFDA
  9307                           fsr2l	equ	0xFD9
  9308                           status	equ	0xFD8
  9309                           
  9310 ;; *************** function i2_UART_buff_size *****************
  9311 ;; Defined at:
  9312 ;;		line 101 in file "UART.c"
  9313 ;; Parameters:    Size  Location     Type
  9314 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
  9315 ;;		 -> output_buffer(106), input_buffer(106), 
  9316 ;; Auto vars:     Size  Location     Type
  9317 ;;		None
  9318 ;; Return value:  Size  Location     Type
  9319 ;;                  2    0[COMRAM] int 
  9320 ;; Registers used:
  9321 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9322 ;; Tracked objects:
  9323 ;;		On entry : 0/0
  9324 ;;		On exit  : 0/0
  9325 ;;		Unchanged: 0/0
  9326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9327 ;;      Params:         2       0       0       0       0       0       0
  9328 ;;      Locals:         0       0       0       0       0       0       0
  9329 ;;      Temps:          0       0       0       0       0       0       0
  9330 ;;      Totals:         2       0       0       0       0       0       0
  9331 ;;Total ram usage:        2 bytes
  9332 ;; Hardware stack levels used:    1
  9333 ;; This function calls:
  9334 ;;		Nothing
  9335 ;; This function is called by:
  9336 ;;		_EUSART1_Transmit_ISR
  9337 ;; This function uses a non-reentrant model
  9338 ;;
  9339                           
  9340                           	psect	text58
  9341  001EC4                     __ptext58:
  9342                           	opt stack 0
  9343  001EC4                     i2_UART_buff_size:
  9344                           	opt stack 21
  9345                           
  9346                           ;UART.c: 102: return (_this->count);
  9347                           
  9348                           ;incstack = 0
  9349  001EC4  EE20 F068          	lfsr	2,104
  9350  001EC8  5001               	movf	i2UART_buff_size@_this,w,c
  9351  001ECA  26D9               	addwf	fsr2l,f,c
  9352  001ECC  5002               	movf	i2UART_buff_size@_this+1,w,c
  9353  001ECE  22DA               	addwfc	fsr2h,f,c
  9354  001ED0  CFDE F001          	movff	postinc2,?i2_UART_buff_size
  9355  001ED4  CFDD F002          	movff	postdec2,?i2_UART_buff_size+1
  9356  001ED8  0012               	return	
  9357  001EDA                     __end_ofi2_UART_buff_size:
  9358                           	opt stack 0
  9359                           pclatu	equ	0xFFB
  9360                           pclath	equ	0xFFA
  9361                           tblptru	equ	0xFF8
  9362                           tblptrh	equ	0xFF7
  9363                           tblptrl	equ	0xFF6
  9364                           tablat	equ	0xFF5
  9365                           prodh	equ	0xFF4
  9366                           prodl	equ	0xFF3
  9367                           intcon	equ	0xFF2
  9368                           intcon2	equ	0xFF1
  9369                           postinc0	equ	0xFEE
  9370                           fsr0h	equ	0xFEA
  9371                           fsr0l	equ	0xFE9
  9372                           wreg	equ	0xFE8
  9373                           indf1	equ	0xFE7
  9374                           postdec1	equ	0xFE5
  9375                           fsr1h	equ	0xFE2
  9376                           fsr1l	equ	0xFE1
  9377                           indf2	equ	0xFDF
  9378                           postinc2	equ	0xFDE
  9379                           postdec2	equ	0xFDD
  9380                           plusw2	equ	0xFDB
  9381                           fsr2h	equ	0xFDA
  9382                           fsr2l	equ	0xFD9
  9383                           status	equ	0xFD8
  9384                           
  9385 ;; *************** function i2_UART_buff_get *****************
  9386 ;; Defined at:
  9387 ;;		line 80 in file "UART.c"
  9388 ;; Parameters:    Size  Location     Type
  9389 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  9390 ;;		 -> output_buffer(106), input_buffer(106), 
  9391 ;; Auto vars:     Size  Location     Type
  9392 ;;  UART_buff_ge    1   10[COMRAM] unsigned char 
  9393 ;; Return value:  Size  Location     Type
  9394 ;;                  1    wreg      unsigned char 
  9395 ;; Registers used:
  9396 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9397 ;; Tracked objects:
  9398 ;;		On entry : 0/0
  9399 ;;		On exit  : 0/0
  9400 ;;		Unchanged: 0/0
  9401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9402 ;;      Params:         2       0       0       0       0       0       0
  9403 ;;      Locals:         1       0       0       0       0       0       0
  9404 ;;      Temps:          2       0       0       0       0       0       0
  9405 ;;      Totals:         5       0       0       0       0       0       0
  9406 ;;Total ram usage:        5 bytes
  9407 ;; Hardware stack levels used:    1
  9408 ;; Hardware stack levels required when called:    1
  9409 ;; This function calls:
  9410 ;;		i2_UART_buff_modulo_inc
  9411 ;; This function is called by:
  9412 ;;		_EUSART1_Transmit_ISR
  9413 ;; This function uses a non-reentrant model
  9414 ;;
  9415                           
  9416                           	psect	text59
  9417  00163E                     __ptext59:
  9418                           	opt stack 0
  9419  00163E                     i2_UART_buff_get:
  9420                           	opt stack 20
  9421                           
  9422                           ;UART.c: 81: unsigned char c;
  9423                           ;UART.c: 82: if (_this->count > 0) {
  9424                           
  9425                           ;incstack = 0
  9426  00163E  EE20 F068          	lfsr	2,104
  9427  001642  5007               	movf	i2UART_buff_get@_this,w,c
  9428  001644  26D9               	addwf	fsr2l,f,c
  9429  001646  5008               	movf	i2UART_buff_get@_this+1,w,c
  9430  001648  22DA               	addwfc	fsr2h,f,c
  9431  00164A  0E01               	movlw	1
  9432  00164C  BEDB               	btfsc	plusw2,7,c
  9433  00164E  D03C               	goto	i2l3434
  9434  001650  0E01               	movlw	1
  9435  001652  50DB               	movf	plusw2,w,c
  9436  001654  E103               	bnz	i2u190_40
  9437  001656  04DE               	decf	postinc2,w,c
  9438  001658  A0D8               	btfss	status,0,c
  9439  00165A  D036               	goto	i2l3434
  9440  00165C                     i2u190_40:
  9441                           
  9442                           ;UART.c: 83: c = _this->buf[_this->tail];
  9443  00165C  EE20 F066          	lfsr	2,102
  9444  001660  5007               	movf	i2UART_buff_get@_this,w,c
  9445  001662  26D9               	addwf	fsr2l,f,c
  9446  001664  5008               	movf	i2UART_buff_get@_this+1,w,c
  9447  001666  22DA               	addwfc	fsr2h,f,c
  9448  001668  CFDE F009          	movff	postinc2,??i2_UART_buff_get
  9449  00166C  CFDD F00A          	movff	postdec2,??i2_UART_buff_get+1
  9450  001670  5009               	movf	??i2_UART_buff_get,w,c
  9451  001672  2407               	addwf	i2UART_buff_get@_this,w,c
  9452  001674  6ED9               	movwf	fsr2l,c
  9453  001676  500A               	movf	??i2_UART_buff_get+1,w,c
  9454  001678  2008               	addwfc	i2UART_buff_get@_this+1,w,c
  9455  00167A  6EDA               	movwf	fsr2h,c
  9456  00167C  50DF               	movf	indf2,w,c
  9457  00167E  6E0B               	movwf	i2UART_buff_get@c,c
  9458                           
  9459                           ;UART.c: 84: _this->tail = UART_buff_modulo_inc(_this->tail, 100);
  9460  001680  EE20 F066          	lfsr	2,102
  9461  001684  5007               	movf	i2UART_buff_get@_this,w,c
  9462  001686  26D9               	addwf	fsr2l,f,c
  9463  001688  5008               	movf	i2UART_buff_get@_this+1,w,c
  9464  00168A  22DA               	addwfc	fsr2h,f,c
  9465  00168C  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  9466  001690  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  9467  001694  0E00               	movlw	0
  9468  001696  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  9469  001698  0E64               	movlw	100
  9470  00169A  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  9471  00169C  ECBD  F00E         	call	i2_UART_buff_modulo_inc	;wreg free
  9472  0016A0  EE20 F066          	lfsr	2,102
  9473  0016A4  5007               	movf	i2UART_buff_get@_this,w,c
  9474  0016A6  26D9               	addwf	fsr2l,f,c
  9475  0016A8  5008               	movf	i2UART_buff_get@_this+1,w,c
  9476  0016AA  22DA               	addwfc	fsr2h,f,c
  9477  0016AC  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  9478  0016B0  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  9479                           
  9480                           ;UART.c: 85: --_this->count;
  9481  0016B4  EE20 F068          	lfsr	2,104
  9482  0016B8  5007               	movf	i2UART_buff_get@_this,w,c
  9483  0016BA  26D9               	addwf	fsr2l,f,c
  9484  0016BC  5008               	movf	i2UART_buff_get@_this+1,w,c
  9485  0016BE  22DA               	addwfc	fsr2h,f,c
  9486  0016C0  06DE               	decf	postinc2,f,c
  9487  0016C2  0E00               	movlw	0
  9488  0016C4  5ADD               	subwfb	postdec2,f,c
  9489                           
  9490                           ;UART.c: 86: } else {
  9491  0016C6  D002               	goto	i2l589
  9492  0016C8                     i2l3434:
  9493                           
  9494                           ;UART.c: 87: c = 0;
  9495  0016C8  0E00               	movlw	0
  9496  0016CA  6E0B               	movwf	i2UART_buff_get@c,c
  9497  0016CC                     i2l589:
  9498                           
  9499                           ;UART.c: 88: }
  9500                           ;UART.c: 89: return (c);
  9501  0016CC  500B               	movf	i2UART_buff_get@c,w,c
  9502  0016CE  0012               	return	
  9503  0016D0                     __end_ofi2_UART_buff_get:
  9504                           	opt stack 0
  9505                           pclatu	equ	0xFFB
  9506                           pclath	equ	0xFFA
  9507                           tblptru	equ	0xFF8
  9508                           tblptrh	equ	0xFF7
  9509                           tblptrl	equ	0xFF6
  9510                           tablat	equ	0xFF5
  9511                           prodh	equ	0xFF4
  9512                           prodl	equ	0xFF3
  9513                           intcon	equ	0xFF2
  9514                           intcon2	equ	0xFF1
  9515                           postinc0	equ	0xFEE
  9516                           fsr0h	equ	0xFEA
  9517                           fsr0l	equ	0xFE9
  9518                           wreg	equ	0xFE8
  9519                           indf1	equ	0xFE7
  9520                           postdec1	equ	0xFE5
  9521                           fsr1h	equ	0xFE2
  9522                           fsr1l	equ	0xFE1
  9523                           indf2	equ	0xFDF
  9524                           postinc2	equ	0xFDE
  9525                           postdec2	equ	0xFDD
  9526                           plusw2	equ	0xFDB
  9527                           fsr2h	equ	0xFDA
  9528                           fsr2l	equ	0xFD9
  9529                           status	equ	0xFD8
  9530                           
  9531 ;; *************** function _EUSART1_Receive_ISR *****************
  9532 ;; Defined at:
  9533 ;;		line 138 in file "UART.c"
  9534 ;; Parameters:    Size  Location     Type
  9535 ;;		None
  9536 ;; Auto vars:     Size  Location     Type
  9537 ;;  data            1   11[COMRAM] unsigned char 
  9538 ;; Return value:  Size  Location     Type
  9539 ;;                  1    wreg      void 
  9540 ;; Registers used:
  9541 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9542 ;; Tracked objects:
  9543 ;;		On entry : 0/0
  9544 ;;		On exit  : 0/0
  9545 ;;		Unchanged: 0/0
  9546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9547 ;;      Params:         0       0       0       0       0       0       0
  9548 ;;      Locals:         1       0       0       0       0       0       0
  9549 ;;      Temps:          0       0       0       0       0       0       0
  9550 ;;      Totals:         1       0       0       0       0       0       0
  9551 ;;Total ram usage:        1 bytes
  9552 ;; Hardware stack levels used:    1
  9553 ;; Hardware stack levels required when called:    2
  9554 ;; This function calls:
  9555 ;;		i2_UART_buff_put
  9556 ;; This function is called by:
  9557 ;;		_INTERRUPT_InterruptManager
  9558 ;; This function uses a non-reentrant model
  9559 ;;
  9560                           
  9561                           	psect	text60
  9562  001E4C                     __ptext60:
  9563                           	opt stack 0
  9564  001E4C                     _EUSART1_Receive_ISR:
  9565                           	opt stack 20
  9566                           
  9567                           ;UART.c: 139: if (1 == RC1STAbits.OERR) {
  9568                           
  9569                           ;incstack = 0
  9570  001E4C  A2AB               	btfss	4011,1,c	;volatile
  9571  001E4E  D002               	goto	i2l620
  9572                           
  9573                           ;UART.c: 142: RC1STAbits.CREN = 0;
  9574  001E50  98AB               	bcf	4011,4,c	;volatile
  9575                           
  9576                           ;UART.c: 143: RC1STAbits.CREN = 1;
  9577  001E52  88AB               	bsf	4011,4,c	;volatile
  9578  001E54                     i2l620:
  9579                           
  9580                           ;UART.c: 144: }
  9581                           ;UART.c: 145: unsigned char data = RCREG1;
  9582  001E54  CFAE F00C          	movff	4014,EUSART1_Receive_ISR@data	;volatile
  9583                           
  9584                           ;UART.c: 146: UART_buff_put(&input_buffer, data);
  9585  001E58  0E3C               	movlw	low _input_buffer
  9586  001E5A  6E07               	movwf	i2UART_buff_put@_this,c
  9587  001E5C  0E01               	movlw	high _input_buffer
  9588  001E5E  6E08               	movwf	i2UART_buff_put@_this+1,c
  9589  001E60  C00C  F009         	movff	EUSART1_Receive_ISR@data,i2UART_buff_put@c
  9590  001E64  EC5A  F007         	call	i2_UART_buff_put	;wreg free
  9591  001E68  0012               	return		;funcret
  9592  001E6A                     __end_of_EUSART1_Receive_ISR:
  9593                           	opt stack 0
  9594                           pclatu	equ	0xFFB
  9595                           pclath	equ	0xFFA
  9596                           tblptru	equ	0xFF8
  9597                           tblptrh	equ	0xFF7
  9598                           tblptrl	equ	0xFF6
  9599                           tablat	equ	0xFF5
  9600                           prodh	equ	0xFF4
  9601                           prodl	equ	0xFF3
  9602                           intcon	equ	0xFF2
  9603                           intcon2	equ	0xFF1
  9604                           postinc0	equ	0xFEE
  9605                           fsr0h	equ	0xFEA
  9606                           fsr0l	equ	0xFE9
  9607                           wreg	equ	0xFE8
  9608                           indf1	equ	0xFE7
  9609                           postdec1	equ	0xFE5
  9610                           fsr1h	equ	0xFE2
  9611                           fsr1l	equ	0xFE1
  9612                           indf2	equ	0xFDF
  9613                           postinc2	equ	0xFDE
  9614                           postdec2	equ	0xFDD
  9615                           plusw2	equ	0xFDB
  9616                           fsr2h	equ	0xFDA
  9617                           fsr2l	equ	0xFD9
  9618                           status	equ	0xFD8
  9619                           
  9620 ;; *************** function i2_UART_buff_put *****************
  9621 ;; Defined at:
  9622 ;;		line 67 in file "UART.c"
  9623 ;; Parameters:    Size  Location     Type
  9624 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  9625 ;;		 -> output_buffer(106), input_buffer(106), 
  9626 ;;  c               1    8[COMRAM] const unsigned char 
  9627 ;; Auto vars:     Size  Location     Type
  9628 ;;		None
  9629 ;; Return value:  Size  Location     Type
  9630 ;;                  1    wreg      void 
  9631 ;; Registers used:
  9632 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9633 ;; Tracked objects:
  9634 ;;		On entry : 0/0
  9635 ;;		On exit  : 0/0
  9636 ;;		Unchanged: 0/0
  9637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9638 ;;      Params:         3       0       0       0       0       0       0
  9639 ;;      Locals:         0       0       0       0       0       0       0
  9640 ;;      Temps:          2       0       0       0       0       0       0
  9641 ;;      Totals:         5       0       0       0       0       0       0
  9642 ;;Total ram usage:        5 bytes
  9643 ;; Hardware stack levels used:    1
  9644 ;; Hardware stack levels required when called:    1
  9645 ;; This function calls:
  9646 ;;		i2_UART_buff_modulo_inc
  9647 ;; This function is called by:
  9648 ;;		_EUSART1_Receive_ISR
  9649 ;; This function uses a non-reentrant model
  9650 ;;
  9651                           
  9652                           	psect	text61
  9653  000EB4                     __ptext61:
  9654                           	opt stack 0
  9655  000EB4                     i2_UART_buff_put:
  9656                           	opt stack 20
  9657                           
  9658                           ;UART.c: 68: if (_this->count < 100) {
  9659                           
  9660                           ;incstack = 0
  9661  000EB4  EE20 F068          	lfsr	2,104
  9662  000EB8  5007               	movf	i2UART_buff_put@_this,w,c
  9663  000EBA  26D9               	addwf	fsr2l,f,c
  9664  000EBC  5008               	movf	i2UART_buff_put@_this+1,w,c
  9665  000EBE  22DA               	addwfc	fsr2h,f,c
  9666  000EC0  0E01               	movlw	1
  9667  000EC2  BEDB               	btfsc	plusw2,7,c
  9668  000EC4  D007               	goto	i2l3414
  9669  000EC6  0E01               	movlw	1
  9670  000EC8  50DB               	movf	plusw2,w,c
  9671  000ECA  E13A               	bnz	i2l3420
  9672  000ECC  0E64               	movlw	100
  9673  000ECE  5CDE               	subwf	postinc2,w,c
  9674  000ED0  B0D8               	btfsc	status,0,c
  9675  000ED2  D036               	goto	i2l3420
  9676  000ED4                     i2l3414:
  9677                           
  9678                           ;UART.c: 69: _this->buf[_this->head] = c;
  9679  000ED4  EE20 F064          	lfsr	2,100
  9680  000ED8  5007               	movf	i2UART_buff_put@_this,w,c
  9681  000EDA  26D9               	addwf	fsr2l,f,c
  9682  000EDC  5008               	movf	i2UART_buff_put@_this+1,w,c
  9683  000EDE  22DA               	addwfc	fsr2h,f,c
  9684  000EE0  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  9685  000EE4  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  9686  000EE8  500A               	movf	??i2_UART_buff_put,w,c
  9687  000EEA  2407               	addwf	i2UART_buff_put@_this,w,c
  9688  000EEC  6ED9               	movwf	fsr2l,c
  9689  000EEE  500B               	movf	??i2_UART_buff_put+1,w,c
  9690  000EF0  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  9691  000EF2  6EDA               	movwf	fsr2h,c
  9692  000EF4  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  9693                           
  9694                           ;UART.c: 70: _this->head = UART_buff_modulo_inc(_this->head, 100);
  9695  000EF8  EE20 F064          	lfsr	2,100
  9696  000EFC  5007               	movf	i2UART_buff_put@_this,w,c
  9697  000EFE  26D9               	addwf	fsr2l,f,c
  9698  000F00  5008               	movf	i2UART_buff_put@_this+1,w,c
  9699  000F02  22DA               	addwfc	fsr2h,f,c
  9700  000F04  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  9701  000F08  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  9702  000F0C  0E00               	movlw	0
  9703  000F0E  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  9704  000F10  0E64               	movlw	100
  9705  000F12  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  9706  000F14  ECBD  F00E         	call	i2_UART_buff_modulo_inc	;wreg free
  9707  000F18  EE20 F064          	lfsr	2,100
  9708  000F1C  5007               	movf	i2UART_buff_put@_this,w,c
  9709  000F1E  26D9               	addwf	fsr2l,f,c
  9710  000F20  5008               	movf	i2UART_buff_put@_this+1,w,c
  9711  000F22  22DA               	addwfc	fsr2h,f,c
  9712  000F24  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  9713  000F28  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  9714                           
  9715                           ;UART.c: 71: ++_this->count;
  9716  000F2C  EE20 F068          	lfsr	2,104
  9717  000F30  5007               	movf	i2UART_buff_put@_this,w,c
  9718  000F32  26D9               	addwf	fsr2l,f,c
  9719  000F34  5008               	movf	i2UART_buff_put@_this+1,w,c
  9720  000F36  22DA               	addwfc	fsr2h,f,c
  9721  000F38  2ADE               	incf	postinc2,f,c
  9722  000F3A  0E00               	movlw	0
  9723  000F3C  22DD               	addwfc	postdec2,f,c
  9724                           
  9725                           ;UART.c: 72: } else {
  9726  000F3E  0012               	return	
  9727  000F40                     i2l3420:
  9728                           
  9729                           ;UART.c: 73: _this->buf[_this->head] = c;
  9730  000F40  EE20 F064          	lfsr	2,100
  9731  000F44  5007               	movf	i2UART_buff_put@_this,w,c
  9732  000F46  26D9               	addwf	fsr2l,f,c
  9733  000F48  5008               	movf	i2UART_buff_put@_this+1,w,c
  9734  000F4A  22DA               	addwfc	fsr2h,f,c
  9735  000F4C  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  9736  000F50  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  9737  000F54  500A               	movf	??i2_UART_buff_put,w,c
  9738  000F56  2407               	addwf	i2UART_buff_put@_this,w,c
  9739  000F58  6ED9               	movwf	fsr2l,c
  9740  000F5A  500B               	movf	??i2_UART_buff_put+1,w,c
  9741  000F5C  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  9742  000F5E  6EDA               	movwf	fsr2h,c
  9743  000F60  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  9744                           
  9745                           ;UART.c: 74: _this->head = UART_buff_modulo_inc(_this->head, 100);
  9746  000F64  EE20 F064          	lfsr	2,100
  9747  000F68  5007               	movf	i2UART_buff_put@_this,w,c
  9748  000F6A  26D9               	addwf	fsr2l,f,c
  9749  000F6C  5008               	movf	i2UART_buff_put@_this+1,w,c
  9750  000F6E  22DA               	addwfc	fsr2h,f,c
  9751  000F70  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  9752  000F74  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  9753  000F78  0E00               	movlw	0
  9754  000F7A  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  9755  000F7C  0E64               	movlw	100
  9756  000F7E  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  9757  000F80  ECBD  F00E         	call	i2_UART_buff_modulo_inc	;wreg free
  9758  000F84  EE20 F064          	lfsr	2,100
  9759  000F88  5007               	movf	i2UART_buff_put@_this,w,c
  9760  000F8A  26D9               	addwf	fsr2l,f,c
  9761  000F8C  5008               	movf	i2UART_buff_put@_this+1,w,c
  9762  000F8E  22DA               	addwfc	fsr2h,f,c
  9763  000F90  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  9764  000F94  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  9765                           
  9766                           ;UART.c: 75: _this->tail = UART_buff_modulo_inc(_this->tail, 100);
  9767  000F98  EE20 F066          	lfsr	2,102
  9768  000F9C  5007               	movf	i2UART_buff_put@_this,w,c
  9769  000F9E  26D9               	addwf	fsr2l,f,c
  9770  000FA0  5008               	movf	i2UART_buff_put@_this+1,w,c
  9771  000FA2  22DA               	addwfc	fsr2h,f,c
  9772  000FA4  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  9773  000FA8  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  9774  000FAC  0E00               	movlw	0
  9775  000FAE  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  9776  000FB0  0E64               	movlw	100
  9777  000FB2  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  9778  000FB4  ECBD  F00E         	call	i2_UART_buff_modulo_inc	;wreg free
  9779  000FB8  EE20 F066          	lfsr	2,102
  9780  000FBC  5007               	movf	i2UART_buff_put@_this,w,c
  9781  000FBE  26D9               	addwf	fsr2l,f,c
  9782  000FC0  5008               	movf	i2UART_buff_put@_this+1,w,c
  9783  000FC2  22DA               	addwfc	fsr2h,f,c
  9784  000FC4  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  9785  000FC8  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  9786  000FCC  0012               	return	
  9787  000FCE                     __end_ofi2_UART_buff_put:
  9788                           	opt stack 0
  9789                           pclatu	equ	0xFFB
  9790                           pclath	equ	0xFFA
  9791                           tblptru	equ	0xFF8
  9792                           tblptrh	equ	0xFF7
  9793                           tblptrl	equ	0xFF6
  9794                           tablat	equ	0xFF5
  9795                           prodh	equ	0xFF4
  9796                           prodl	equ	0xFF3
  9797                           intcon	equ	0xFF2
  9798                           intcon2	equ	0xFF1
  9799                           postinc0	equ	0xFEE
  9800                           fsr0h	equ	0xFEA
  9801                           fsr0l	equ	0xFE9
  9802                           wreg	equ	0xFE8
  9803                           indf1	equ	0xFE7
  9804                           postdec1	equ	0xFE5
  9805                           fsr1h	equ	0xFE2
  9806                           fsr1l	equ	0xFE1
  9807                           indf2	equ	0xFDF
  9808                           postinc2	equ	0xFDE
  9809                           postdec2	equ	0xFDD
  9810                           plusw2	equ	0xFDB
  9811                           fsr2h	equ	0xFDA
  9812                           fsr2l	equ	0xFD9
  9813                           status	equ	0xFD8
  9814                           
  9815 ;; *************** function i2_UART_buff_modulo_inc *****************
  9816 ;; Defined at:
  9817 ;;		line 105 in file "UART.c"
  9818 ;; Parameters:    Size  Location     Type
  9819 ;;  value           2    0[COMRAM] const unsigned int 
  9820 ;;  modulus         2    2[COMRAM] const unsigned int 
  9821 ;; Auto vars:     Size  Location     Type
  9822 ;;  UART_buff_mo    2    4[COMRAM] unsigned int 
  9823 ;; Return value:  Size  Location     Type
  9824 ;;                  2    0[COMRAM] unsigned int 
  9825 ;; Registers used:
  9826 ;;		wreg, status,2, status,0
  9827 ;; Tracked objects:
  9828 ;;		On entry : 0/0
  9829 ;;		On exit  : 0/0
  9830 ;;		Unchanged: 0/0
  9831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9832 ;;      Params:         4       0       0       0       0       0       0
  9833 ;;      Locals:         2       0       0       0       0       0       0
  9834 ;;      Temps:          0       0       0       0       0       0       0
  9835 ;;      Totals:         6       0       0       0       0       0       0
  9836 ;;Total ram usage:        6 bytes
  9837 ;; Hardware stack levels used:    1
  9838 ;; This function calls:
  9839 ;;		Nothing
  9840 ;; This function is called by:
  9841 ;;		i2_UART_buff_put
  9842 ;;		i2_UART_buff_get
  9843 ;; This function uses a non-reentrant model
  9844 ;;
  9845                           
  9846                           	psect	text62
  9847  001D7A                     __ptext62:
  9848                           	opt stack 0
  9849  001D7A                     i2_UART_buff_modulo_inc:
  9850                           	opt stack 20
  9851                           
  9852                           ;UART.c: 106: unsigned int my_value = value + 1;
  9853                           
  9854                           ;incstack = 0
  9855  001D7A  0E01               	movlw	1
  9856  001D7C  2401               	addwf	i2UART_buff_modulo_inc@value,w,c
  9857  001D7E  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  9858  001D80  0E00               	movlw	0
  9859  001D82  2002               	addwfc	i2UART_buff_modulo_inc@value+1,w,c
  9860  001D84  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  9861                           
  9862                           ;UART.c: 107: if (my_value >= modulus) {
  9863  001D86  5003               	movf	i2UART_buff_modulo_inc@modulus,w,c
  9864  001D88  5C05               	subwf	i2UART_buff_modulo_inc@my_value,w,c
  9865  001D8A  5004               	movf	i2UART_buff_modulo_inc@modulus+1,w,c
  9866  001D8C  5806               	subwfb	i2UART_buff_modulo_inc@my_value+1,w,c
  9867  001D8E  A0D8               	btfss	status,0,c
  9868  001D90  D004               	goto	i2l3148
  9869                           
  9870                           ;UART.c: 108: my_value = 0;
  9871  001D92  0E00               	movlw	0
  9872  001D94  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  9873  001D96  0E00               	movlw	0
  9874  001D98  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  9875  001D9A                     i2l3148:
  9876                           
  9877                           ;UART.c: 109: }
  9878                           ;UART.c: 110: return (my_value);
  9879  001D9A  C005  F001         	movff	i2UART_buff_modulo_inc@my_value,?i2_UART_buff_modulo_inc
  9880  001D9E  C006  F002         	movff	i2UART_buff_modulo_inc@my_value+1,?i2_UART_buff_modulo_inc+1
  9881  001DA2  0012               	return	
  9882  001DA4                     __end_ofi2_UART_buff_modulo_inc:
  9883                           	opt stack 0
  9884                           pclatu	equ	0xFFB
  9885                           pclath	equ	0xFFA
  9886                           tblptru	equ	0xFF8
  9887                           tblptrh	equ	0xFF7
  9888                           tblptrl	equ	0xFF6
  9889                           tablat	equ	0xFF5
  9890                           prodh	equ	0xFF4
  9891                           prodl	equ	0xFF3
  9892                           intcon	equ	0xFF2
  9893                           intcon2	equ	0xFF1
  9894                           postinc0	equ	0xFEE
  9895                           fsr0h	equ	0xFEA
  9896                           fsr0l	equ	0xFE9
  9897                           wreg	equ	0xFE8
  9898                           indf1	equ	0xFE7
  9899                           postdec1	equ	0xFE5
  9900                           fsr1h	equ	0xFE2
  9901                           fsr1l	equ	0xFE1
  9902                           indf2	equ	0xFDF
  9903                           postinc2	equ	0xFDE
  9904                           postdec2	equ	0xFDD
  9905                           plusw2	equ	0xFDB
  9906                           fsr2h	equ	0xFDA
  9907                           fsr2l	equ	0xFD9
  9908                           status	equ	0xFD8
  9909                           
  9910 ;; *************** function _ADC_ISR *****************
  9911 ;; Defined at:
  9912 ;;		line 130 in file "mcc_generated_files/adc.c"
  9913 ;; Parameters:    Size  Location     Type
  9914 ;;		None
  9915 ;; Auto vars:     Size  Location     Type
  9916 ;;		None
  9917 ;; Return value:  Size  Location     Type
  9918 ;;                  1    wreg      void 
  9919 ;; Registers used:
  9920 ;;		None
  9921 ;; Tracked objects:
  9922 ;;		On entry : 0/0
  9923 ;;		On exit  : 0/0
  9924 ;;		Unchanged: 0/0
  9925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9926 ;;      Params:         0       0       0       0       0       0       0
  9927 ;;      Locals:         0       0       0       0       0       0       0
  9928 ;;      Temps:          0       0       0       0       0       0       0
  9929 ;;      Totals:         0       0       0       0       0       0       0
  9930 ;;Total ram usage:        0 bytes
  9931 ;; Hardware stack levels used:    1
  9932 ;; This function calls:
  9933 ;;		Nothing
  9934 ;; This function is called by:
  9935 ;;		_INTERRUPT_InterruptManager
  9936 ;; This function uses a non-reentrant model
  9937 ;;
  9938                           
  9939                           	psect	text63
  9940  001F74                     __ptext63:
  9941                           	opt stack 0
  9942  001F74                     _ADC_ISR:
  9943                           	opt stack 22
  9944                           
  9945                           ;adc.c: 133: PIR1bits.ADIF = 0;
  9946                           
  9947                           ;incstack = 0
  9948  001F74  9C9E               	bcf	3998,6,c	;volatile
  9949  001F76  0012               	return		;funcret
  9950  001F78                     __end_of_ADC_ISR:
  9951                           	opt stack 0
  9952  0000                     pclatu	equ	0xFFB
  9953                           pclath	equ	0xFFA
  9954                           tblptru	equ	0xFF8
  9955                           tblptrh	equ	0xFF7
  9956                           tblptrl	equ	0xFF6
  9957                           tablat	equ	0xFF5
  9958                           prodh	equ	0xFF4
  9959                           prodl	equ	0xFF3
  9960                           intcon	equ	0xFF2
  9961                           intcon2	equ	0xFF1
  9962                           postinc0	equ	0xFEE
  9963                           fsr0h	equ	0xFEA
  9964                           fsr0l	equ	0xFE9
  9965                           wreg	equ	0xFE8
  9966                           indf1	equ	0xFE7
  9967                           postdec1	equ	0xFE5
  9968                           fsr1h	equ	0xFE2
  9969                           fsr1l	equ	0xFE1
  9970                           indf2	equ	0xFDF
  9971                           postinc2	equ	0xFDE
  9972                           postdec2	equ	0xFDD
  9973                           plusw2	equ	0xFDB
  9974                           fsr2h	equ	0xFDA
  9975                           fsr2l	equ	0xFD9
  9976                           status	equ	0xFD8
  9977                           pclatu	equ	0xFFB
  9978                           pclath	equ	0xFFA
  9979                           tblptru	equ	0xFF8
  9980                           tblptrh	equ	0xFF7
  9981                           tblptrl	equ	0xFF6
  9982                           tablat	equ	0xFF5
  9983                           prodh	equ	0xFF4
  9984                           prodl	equ	0xFF3
  9985                           intcon	equ	0xFF2
  9986                           intcon2	equ	0xFF1
  9987                           postinc0	equ	0xFEE
  9988                           fsr0h	equ	0xFEA
  9989                           fsr0l	equ	0xFE9
  9990                           wreg	equ	0xFE8
  9991                           indf1	equ	0xFE7
  9992                           postdec1	equ	0xFE5
  9993                           fsr1h	equ	0xFE2
  9994                           fsr1l	equ	0xFE1
  9995                           indf2	equ	0xFDF
  9996                           postinc2	equ	0xFDE
  9997                           postdec2	equ	0xFDD
  9998                           plusw2	equ	0xFDB
  9999                           fsr2h	equ	0xFDA
 10000                           fsr2l	equ	0xFD9
 10001                           status	equ	0xFD8
 10002                           
 10003                           	psect	rparam
 10004  0000                     pclatu	equ	0xFFB
 10005                           pclath	equ	0xFFA
 10006                           tblptru	equ	0xFF8
 10007                           tblptrh	equ	0xFF7
 10008                           tblptrl	equ	0xFF6
 10009                           tablat	equ	0xFF5
 10010                           prodh	equ	0xFF4
 10011                           prodl	equ	0xFF3
 10012                           intcon	equ	0xFF2
 10013                           intcon2	equ	0xFF1
 10014                           postinc0	equ	0xFEE
 10015                           fsr0h	equ	0xFEA
 10016                           fsr0l	equ	0xFE9
 10017                           wreg	equ	0xFE8
 10018                           indf1	equ	0xFE7
 10019                           postdec1	equ	0xFE5
 10020                           fsr1h	equ	0xFE2
 10021                           fsr1l	equ	0xFE1
 10022                           indf2	equ	0xFDF
 10023                           postinc2	equ	0xFDE
 10024                           postdec2	equ	0xFDD
 10025                           plusw2	equ	0xFDB
 10026                           fsr2h	equ	0xFDA
 10027                           fsr2l	equ	0xFD9
 10028                           status	equ	0xFD8
 10029                           
 10030                           	psect	temp
 10031  000043                     btemp:
 10032                           	opt stack 0
 10033  000043                     	ds	1
 10034  0000                     int$flags	set	btemp
 10035                           pclatu	equ	0xFFB
 10036                           pclath	equ	0xFFA
 10037                           tblptru	equ	0xFF8
 10038                           tblptrh	equ	0xFF7
 10039                           tblptrl	equ	0xFF6
 10040                           tablat	equ	0xFF5
 10041                           prodh	equ	0xFF4
 10042                           prodl	equ	0xFF3
 10043                           intcon	equ	0xFF2
 10044                           intcon2	equ	0xFF1
 10045                           postinc0	equ	0xFEE
 10046                           fsr0h	equ	0xFEA
 10047                           fsr0l	equ	0xFE9
 10048                           wreg	equ	0xFE8
 10049                           indf1	equ	0xFE7
 10050                           postdec1	equ	0xFE5
 10051                           fsr1h	equ	0xFE2
 10052                           fsr1l	equ	0xFE1
 10053                           indf2	equ	0xFDF
 10054                           postinc2	equ	0xFDE
 10055                           postdec2	equ	0xFDD
 10056                           plusw2	equ	0xFDB
 10057                           fsr2h	equ	0xFDA
 10058                           fsr2l	equ	0xFD9
 10059                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        7
    BSS         400
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     45      66
    BANK0           160    102     156
    BANK1           256     17     243
    BANK2           256      0     106
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 106
		 -> output_buffer(BANK2[106]), input_buffer(BANK1[106]), 

    memset@p	PTR unsigned char  size(2) Largest target is 106
		 -> output_buffer(BANK2[106]), input_buffer(BANK1[106]), 

    GetDataDict@DataArray	PTR unsigned char  size(2) Largest target is 4
		 -> ComController@DataToSend(BANK0[4]), 

    cobs_decode@dst_write_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK1[30]), 

    cobs_decode@dst_buf_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK1[30]), 

    cobs_decode@dst_buf_end_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK1[30]), 

    cobs_decode@src_ptr	PTR const unsigned char  size(2) Largest target is 30
		 -> ReciveArray(BANK1[30]), 

    cobs_decode@src_end_ptr	PTR const unsigned char  size(2) Largest target is 30
		 -> ReciveArray(BANK1[30]), 

    cobs_encode@dst_write_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> sendData@COBSArray(BANK0[30]), 

    cobs_encode@dst_code_write_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> sendData@COBSArray(BANK0[30]), 

    cobs_encode@dst_buf_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> sendData@COBSArray(BANK0[30]), 

    cobs_encode@dst_buf_end_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> sendData@COBSArray(BANK0[30]), 

    cobs_encode@src_ptr	PTR const unsigned char  size(2) Largest target is 30
		 -> sendData@SendArray(BANK0[30]), 

    cobs_encode@src_end_ptr	PTR const unsigned char  size(2) Largest target is 30
		 -> sendData@SendArray(BANK0[30]), 

    ComController@DTI	PTR unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK1[30]), 

    sendData@DTS	PTR unsigned char  size(2) Largest target is 4
		 -> ComController@DataToSend_1637(BANK0[4]), ComController@DataToSend(BANK0[4]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK1[30]), sendData@SendArray(BANK0[30]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 106
		 -> output_buffer(BANK2[106]), input_buffer(BANK1[106]), 

    UART_buff_flush@_this	PTR struct UART_ring_buff size(2) Largest target is 106
		 -> input_buffer(BANK1[106]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 106
		 -> output_buffer(BANK2[106]), input_buffer(BANK1[106]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 106
		 -> output_buffer(BANK2[106]), input_buffer(BANK1[106]), 

    sp__memset	PTR void  size(2) Largest target is 106
		 -> output_buffer(BANK2[106]), input_buffer(BANK1[106]), 

    UART_buff_init@_this	PTR struct UART_ring_buff size(2) Largest target is 106
		 -> output_buffer(BANK2[106]), input_buffer(BANK1[106]), 


Critical Paths under _main in COMRAM

    _receiveData->_ComController
    _Receive_get->_UART_buff_get
    _Receive_available->_UART_buff_size
    _ComController->_sendData
    _sendData->_Send_put
    _Send_put->_UART_buff_get
    _Send_put->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc
    _UART_buff_get->_UART_buff_modulo_inc
    _ClearBuffer->_UART_buff_flush
    _UART_buff_flush->_memset
    _EUSART1_Initialize->_UART_buff_init
    _UART_buff_init->_memset
    _Update->_writeRegisters
    _StartUp595->_Clear595
    _Clear595->_writeRegisters
    _writeRegisters->_Delay
    _EnableSlavePower->_SetPin595
    _ComputeStorageData->_DATAEE_ReadByte
    _CoolingStop->_PotClear
    _CoolingStart->_PotSetpoint
    _PotSetpoint->_Delay
    _PotClear->_Delay

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR1_ISR->_ReadCurrent
    i2_Update->i2_writeRegisters
    i2_writeRegisters->i2_Delay
    _FuseSystem->___wmul
    _EUSART1_Transmit_ISR->i2_UART_buff_get
    i2_UART_buff_get->i2_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->i2_UART_buff_put
    i2_UART_buff_put->i2_UART_buff_modulo_inc

Critical Paths under _main in BANK0

    _receiveData->_ComController
    _ComController->_sendData
    _sendData->_cobs_encode
    _CoolingStart->_PotSetpoint

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _updateComms->_receiveData

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   45066
                                             12 BANK1      5     5      0
                 _ComputeStorageData
                       _CoolingCheck
                       _CoolingStart
                        _CoolingStop
                         _PDUStartup
                 _PWM4_LoadDutyValue
                        _PotSetpoint
                  _SYSTEM_Initialize
                        _updateComms
 ---------------------------------------------------------------------------------
 (1) _updateComms                                          0     0      0   15603
                        _receiveData
 ---------------------------------------------------------------------------------
 (2) _receiveData                                         12    12      0   15603
                                              0 BANK1     12    12      0
                               _CRC8
                        _ClearBuffer
                      _ComController
                  _Receive_available
                        _Receive_get
                        _cobs_decode
 ---------------------------------------------------------------------------------
 (3) _cobs_decode                                         24    16      8    1783
                                             28 COMRAM    10     2      8
                                              0 BANK0     14    14      0
 ---------------------------------------------------------------------------------
 (3) _Receive_get                                          0     0      0    1308
                      _UART_buff_get
 ---------------------------------------------------------------------------------
 (3) _Receive_available                                    2     0      2     176
                                             30 COMRAM     2     0      2
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (4) _UART_buff_size                                       2     0      2     176
                                             28 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _ComController                                       17    13      4   10454
                                             44 COMRAM     1     1      0
                                             90 BANK0     12     8      4
                              _Delay
                        _GetDataDict
                           _sendData
 ---------------------------------------------------------------------------------
 (4) _sendData                                            81    74      7    7337
                                             40 COMRAM     4     4      0
                                             13 BANK0     77    70      7
                               _CRC8
                           _Send_put
                        _cobs_encode
 ---------------------------------------------------------------------------------
 (5) _cobs_encode                                         23    15      8    1613
                                             28 COMRAM    10     2      8
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (5) _Send_put                                             1     1      0    2913
                                             39 COMRAM     1     1      0
                      _UART_buff_get
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (6) _UART_buff_put                                        5     2      3    1574
                                             34 COMRAM     5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (4) _UART_buff_get                                        5     3      2    1308
                                             34 COMRAM     5     3      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _UART_buff_modulo_inc                                 6     2      4     850
                                             28 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _CRC8                                                 7     4      3     604
                                             28 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (4) _GetDataDict                                          8     4      4     772
                                             28 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _ClearBuffer                                          0     0      0    1012
                    _UART_buff_flush
 ---------------------------------------------------------------------------------
 (4) _UART_buff_flush                                      4     0      4    1012
                                             36 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     888
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM4_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0     888
                     _UART_buff_init
 ---------------------------------------------------------------------------------
 (3) _UART_buff_init                                       2     0      2     888
                                             36 COMRAM     2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               8     2      6     677
                                             28 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PDUStartup                                           0     0      0   18509
                 _ComputeStorageData
                   _EnableSlavePower
                         _StartUp595
                             _Update
 ---------------------------------------------------------------------------------
 (2) _Update                                               0     0      0    2035
                     _writeRegisters
 ---------------------------------------------------------------------------------
 (2) _StartUp595                                           0     0      0    4002
                           _Clear595
                              _Delay
 ---------------------------------------------------------------------------------
 (3) _Clear595                                             2     2      0    2134
                                             41 COMRAM     2     2      0
                     _writeRegisters
 ---------------------------------------------------------------------------------
 (3) _writeRegisters                                       4     4      0    2035
                                             37 COMRAM     4     4      0
                              _Delay
 ---------------------------------------------------------------------------------
 (2) _EnableSlavePower                                     3     1      2   12311
                                             38 COMRAM     3     1      2
                          _SetPin595
 ---------------------------------------------------------------------------------
 (3) _SetPin595                                           10     4      6   10623
                                             28 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (2) _ComputeStorageData                                   4     4      0     161
                                             29 COMRAM     4     4      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_ReadByte                                      1     1      0      31
                                             28 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _CoolingStop                                          0     0      0    2358
                 _PWM4_LoadDutyValue
                           _PotClear
 ---------------------------------------------------------------------------------
 (1) _CoolingStart                                         0     0      0    4669
                 _PWM4_LoadDutyValue
                           _PotClear
                        _PotSetpoint
 ---------------------------------------------------------------------------------
 (1) _PotSetpoint                                         10     8      2    2311
                                             37 COMRAM     4     2      2
                                              0 BANK0      6     6      0
                              _Delay
 ---------------------------------------------------------------------------------
 (2) _PotClear                                             2     2      0    1936
                                             37 COMRAM     2     2      0
                              _Delay
 ---------------------------------------------------------------------------------
 (4) _Delay                                                9     5      4    1868
                                             28 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (1) _PWM4_LoadDutyValue                                   4     2      2     422
                                             28 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _CoolingCheck                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                          14    14      0    6300
                                             14 COMRAM    14    14      0
                            _ADC_ISR
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR1_ISR                                             0     0      0    5091
                         _FuseSystem
                        _ReadCurrent
 ---------------------------------------------------------------------------------
 (10) _ReadCurrent                                         1     1      0    4644
                                             13 COMRAM     1     1      0
                  _ADC_GetConversion
                        i2_SetPin595
                           i2_Update
 ---------------------------------------------------------------------------------
 (11) i2_Update                                            0     0      0     212
                   i2_writeRegisters
 ---------------------------------------------------------------------------------
 (12) i2_writeRegisters                                    4     4      0     212
                                              9 COMRAM     4     4      0
                            i2_Delay
 ---------------------------------------------------------------------------------
 (13) i2_Delay                                             9     5      4      98
                                              0 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (11) i2_SetPin595                                        10     4      6    4278
                                              0 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (11) _ADC_GetConversion                                   5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (10) _FuseSystem                                          4     4      0     447
                                              6 COMRAM     4     4      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (11) ___wmul                                              6     2      4     311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Transmit_ISR                                 0     0      0     528
                    i2_UART_buff_get
                   i2_UART_buff_size
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_size                                    2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_get                                     5     3      2     480
                                              6 COMRAM     5     3      2
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Receive_ISR                                  1     1      0     681
                                             11 COMRAM     1     1      0
                    i2_UART_buff_put
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_put                                     5     2      3     658
                                              6 COMRAM     5     2      3
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (11) i2_UART_buff_modulo_inc                              6     2      4     298
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _ADC_ISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ComputeStorageData
     _DATAEE_ReadByte
   _CoolingCheck
   _CoolingStart
     _PWM4_LoadDutyValue
     _PotClear
       _Delay
     _PotSetpoint
       _Delay
   _CoolingStop
     _PWM4_LoadDutyValue
     _PotClear
       _Delay
   _PDUStartup
     _ComputeStorageData
       _DATAEE_ReadByte
     _EnableSlavePower
       _SetPin595
     _StartUp595
       _Clear595
         _writeRegisters
           _Delay
       _Delay
     _Update
       _writeRegisters
         _Delay
   _PWM4_LoadDutyValue
   _PotSetpoint
     _Delay
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
       _UART_buff_init
         _memset
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM4_Initialize
     _TMR1_Initialize
       _TMR1_StartTimer
     _TMR2_Initialize
       _TMR2_StartTimer
   _updateComms
     _receiveData
       _CRC8
       _ClearBuffer
         _UART_buff_flush
           _memset
       _ComController
         _Delay
         _GetDataDict
         _sendData
           _CRC8
           _Send_put
             _UART_buff_get
               _UART_buff_modulo_inc
             _UART_buff_put
               _UART_buff_modulo_inc
           _cobs_encode
       _Receive_available
         _UART_buff_size
       _Receive_get
         _UART_buff_get
           _UART_buff_modulo_inc
       _cobs_decode

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
   _EUSART1_Receive_ISR
     i2_UART_buff_put
       i2_UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     i2_UART_buff_get
       i2_UART_buff_modulo_inc
     i2_UART_buff_size
   _TMR1_ISR
     _FuseSystem
       ___wmul
     _ReadCurrent
       _ADC_GetConversion
       i2_SetPin595
       i2_Update
         i2_writeRegisters
           i2_Delay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      6A       8       41.4%
BITBANK1           100      0       0       5        0.0%
BANK1              100     11      F3       6       94.9%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     66      9C       4       97.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2D      42       1       70.2%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     23B       9        0.0%
DATA                 0      0     23B      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Sat Aug 12 13:58:42 2017

                __end_of_GetDataDict 15AC               i2_UART_buff_modulo_inc 1D7A  
                      ??_CoolingStop 0028                       ??_CoolingCheck 001D  
           cobs_encode@dst_write_ptr 0068             GetDataDict@ReturnCounter 0024  
                ___wmul@multiplicand 0003                       ??_CoolingStart 002A  
                       __CFG_CP0$OFF 000000                         __CFG_CP1$OFF 000000  
                       __CFG_CP2$OFF 000000                         __CFG_CP3$OFF 000000  
                                l720 13EE                                  l712 1122  
                                l536 1714                                  l721 1428  
                                l538 171E                                  l715 117C  
                                l757 1B16                                  l589 163A  
                                l867 1598                         __CFG_CPB$OFF 000000  
                                _PR2 000FBB                         __CFG_CPD$OFF 000000  
                    _timer1ReloadVal 0039                      __end_of_ADC_ISR 1F78  
                    _TMR2_Initialize 1EDA                      _PWM4_Initialize 1EEE  
                                prod 000FF3                                  wreg 000FE8  
      i2UART_buff_modulo_inc@modulus 0003          _COBS_DECODE_DST_BUF_LEN_MAX 003C  
                       __CFG_LVP$OFF 000000                      _UART_buff_flush 18C4  
                               l4010 0A12                                 l4002 09D6  
                               l4012 0A16                                 l4024 0A40  
                               l4032 0A58                                 l4042 0A8C  
                               l4212 12C2                                 l4222 12EC  
                               l4046 0AA0                                 l4216 12D2  
                               l4064 0D28                                 l4152 0FFC  
                               l4236 115C                                 l4180 11F8  
                               l4172 10D6                                 l4246 11AE  
                               l4190 1274                                 l4182 1216  
                               l3710 1AEA                                 l3800 0C38  
                               l4186 1238                                 l4178 11DA  
                               l4194 1292                                 l4188 1256  
                               l3900 1524                                 l3716 1B00  
                               l3724 1B1C                                 l3652 1D70  
                               l3910 155E                                 l3902 152C  
                               l3726 1B22                                 l3750 0B52  
                               l3742 0B36                                 l4358 14A2  
                               l3816 170C                                 l3808 16E0  
                               l3912 1566                                 l3920 159C  
                               l3664 0E26                                 l3840 074E  
                               l4376 14E0                                 l4368 14C4  
                               l3658 0DBA                                 l3754 0B6C  
                               l3850 077A                                 l3684 1B40  
                               l3692 1D2E                                 l3908 1554  
                               l3772 0BBA                                 l3748 0B4A  
                               l3918 158E                                 l3678 1636  
                               l3870 07E6                                 l3688 1B5A  
                               l3696 1D3E                                 l3792 0C0A  
                               l3864 07A6                                 l3946 1C06  
                               l3956 1C2C                                 l3892 08D2  
                               l3884 0868                                 l3798 0C2C  
                               l3982 096C                                 l3896 08EE  
                               l3888 08A6                                 l3992 0996  
                               l3984 0974                                 l3976 0958  
              __end_of_ComController 0D9A                                 _CRC8 1AE4  
                               _LATA 000F89                                 _LATB 000F8A  
                               _LATC 000F8B                                 _LATD 000F8C  
                               _LATE 000F8D                                 u2190 15CA  
                               u2630 0FE2                                 u2730 1428  
                               u2847 101A                                 u2857 1B46  
                               i2l31 1CDE                                 i2l71 0066  
                               i2l75 0070                                 i2l67 004E  
                               i2l69 005A                                 _TMR2 000FBC  
                               _WPUB 000F61                      __end_ofi2_Delay 1BC2  
                               _data 00D2                                 _main 145E  
           __end_of_EnableSlavePower 12BA                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 fsr2h 000FDA  
                               fsr0l 000FE9                                 indf1 000FE7  
                               indf2 000FDF                                 fsr1l 000FE1  
                               fsr2l 000FD9                                 btemp 0043  
                      __CFG_BORV$190 000000                                 prodh 000FF4  
                               prodl 000FF3                                 start 00AC  
                      __CFG_IESO$OFF 000000                    ?i2_writeRegisters 0001  
                       ___param_bank 000000                        ??_ReadCurrent 000E  
                 ??i2_writeRegisters 000A       i2UART_buff_modulo_inc@my_value 0005  
                              ?_CRC8 001D              ComController@DataToSend 00C2  
     __size_of_OSCILLATOR_Initialize 000E        __end_of_OSCILLATOR_Initialize 1F44  
                              ?_main 0001                                _EEADR 000FA9  
                              _ANSB3 0079CB                                _ANSB4 0079CC  
                    _TMR1_StartTimer 1F6C                                _ANSD7 0079DF  
                              _T1CON 000FCD                                _T2CON 000FBA  
                              _LATB0 007C50                                _LATB3 007C53  
                              _LATB4 007C54                                _LATB5 007C55  
                              _LATC5 007C5D                                _LATD4 007C64  
                              _LATD5 007C65                                _LATD6 007C66  
                              _LATD7 007C67                       __CFG_DEBUG$OFF 000000  
                        ?_PDUStartup 0001                                i2l620 1E54  
                              i2l536 1792                                i2l538 179C  
                              i2l469 1848                                i2l589 16CC  
                              _MCSOn 003B                   _PWM4_LoadDutyValue 1C96  
                              _TMR1H 000FCF                                _TMR1L 000FCE  
                __end_of_CoolingStop 1F28                                _TRISA 000F92  
                              _TRISB 000F93                                _TRISC 000F94  
                              _TRISD 000F95                                _TRISE 000F96  
                              _Delay 1B2E                        __CFG_WRT0$OFF 000000  
                      __CFG_WRT1$OFF 000000                        __CFG_WRT2$OFF 000000  
                      __CFG_WRT3$OFF 000000                 _EUSART1_Transmit_ISR 1C64  
                     __CFG_EBTR0$OFF 000000                       __CFG_FCMEN$OFF 000000  
                     __CFG_EBTR1$OFF 000000                       __CFG_EBTR2$OFF 000000  
                     __CFG_EBTR3$OFF 000000                     ??_writeRegisters 0026  
                   __end_of_TMR1_ISR 1C64                        __CFG_WRTB$OFF 000000  
                      __CFG_WRTC$OFF 000000                        __CFG_WRTD$OFF 000000  
                    _DATAEE_ReadByte 1F02                       __CFG_EBTRB$OFF 000000  
                ?_PWM4_LoadDutyValue 001D                   __CFG_MCLRE$EXTMCLR 000000  
                              main@i 01F0                                main@j 01EE  
                        _ClearBuffer 1EAE              __end_of_TMR1_Initialize 1E10  
                   __end_ofi2_Update 1F68                                pclath 000FFA  
                              tablat 000FF5                        ??_Receive_get 0028  
                      receiveData@CS 01E7                                plusw2 000FDB  
                              status 000FD8                          _GetDataDict 1514  
                   __end_of_Clear595 1C32                       __CFG_HFOFST$ON 000000  
                    _TMR2_StartTimer 1F68                         ?_receiveData 0001  
                     __CFG_PBADEN$ON 000000                 PotSetpoint@new_point 0026  
                       __end_of_CRC8 1B2E                      __initialization 19EA  
         __end_of_EUSART1_Initialize 1BFE                         __end_of_main 1514  
                         _CurrentADC 00C6           UART_buff_flush@clearBuffer 0027  
               ??_PWM4_LoadDutyValue 001F                               ??_CRC8 0020  
            __end_of_PWM4_Initialize 1F02              __end_of_TMR2_Initialize 1EEE  
                          ??_ADC_ISR 0001          ?_INTERRUPT_InterruptManager 0001  
               PotSetpoint@set_point 0060                           _FuseSystem 17CC  
                             ??_main 002E                  __end_of_ReadCurrent 0740  
                   __end_of_PotClear 145E                        __activetblptr 000002  
                   __end_of_Send_put 1D24              __end_of_UART_buff_flush 1926  
          __size_ofi2_UART_buff_size 0016                               ?_Delay 001D  
              ?_EUSART1_Transmit_ISR 0001                 GetDataDict@DataArray 001E  
               GetDataDict@DataCount 0023                 GetDataDict@DataTable 0022  
                          ??i2_Delay 0005                               _ADCON0 000FC2  
                             _ADCON1 000FC1                               _ADCON2 000FC0  
               __size_of_cobs_decode 01BE                          FuseSystem@i 0009  
                             _ADRESH 000FC4                               _ADRESL 000FC3  
                             _EEDATA 000FA8                               _CCPR2H 000F68  
                             _CCPR2L 000F67                               _EECON2 000FA7  
               __size_of_cobs_encode 0198                               _ANSELA 000F38  
                             _ANSELB 000F39                               _ANSELC 000F3A  
                             _ANSELD 000F3B                               _ANSELE 000F3C  
                             _T1GCON 000FCC                 __end_of_CoolingCheck 1F74  
                    i2_UART_buff_get 163E                               _RC1STA 000FAB  
                    i2_UART_buff_put 0EB4                               Delay@i 0022  
                             i2l3240 1842                               i2l3224 17D4  
                             i2l3234 182A                               i2l3250 01C8  
                             i2l3148 1D9A                               i2l3420 0F40  
                             i2l3236 1832                               i2l3228 17E4  
                             i2l3414 0ED4                               i2l3262 03F8  
                     __CFG_WDTEN$OFF 000000                               i2l3256 02E0  
                             i2l3434 16C8                               i2l3274 0628  
                             i2l3452 1C8E                               i2l3268 0510  
                             i2l3470 1C5C                               i2l2832 1BA4  
        UART_buff_modulo_inc@modulus 001F                               i2l2828 1B8A  
                             i2l2960 178A                               i2l2952 175E  
                             _TABLAT 000FF5                               _RCREG1 000FAE  
                             _OSCCON 000FD3                               _SPBRG1 000FAF  
               __end_of_CoolingStart 1E4C                               _TX1STA 000FAC  
                             _TRISB3 007C9B                               _TRISB4 007C9C  
                             _TRISB5 007C9D                               _TXREG1 000FAD  
                __size_of_PDUStartup 0062                       __CFG_XINST$OFF 000000  
                      ??_PotSetpoint 0028                  __end_of_Receive_get 1F36  
                       _CCPTMRS1bits 000F48                               _Update 1F5C  
                 __size_of_SetPin595 004E                        _output_buffer 0200  
            __end_of_TMR1_StartTimer 1F70                               ___wmul 1DA4  
                          CRC8@tempI 0022                       __CFG_STVREN$ON 000000  
                        _CoolingStop 1F16                               _memset 1D24  
                             clear_0 1A10                               clear_1 1A1C  
                             clear_2 1A28                               clear_3 1A34  
                             main@UP 01F2                     __end_of_sendData 0914  
            __end_of_DATAEE_ReadByte 1F16                         __pdataCOMRAM 003C  
             cobs_encode@dst_buf_len 001F               cobs_encode@dst_buf_ptr 001D  
                      Send_put@_data 0028                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
                         _StartUp595 1988             ADC_GetConversion@channel 0005  
       __end_of_UART_buff_modulo_inc 1D7A              __end_of_TMR2_StartTimer 1F6C  
      __size_of_INTERRUPT_Initialize 000A                    ReadCurrent@gather 000E  
                   ?_TMR1_Initialize 0001                    _SYSTEM_Initialize 1DCA  
                         __accesstop 0060              __end_of__initialization 1A3A  
                       ?i2_SetPin595 0001                        sendData@count 00B7  
                      sendData@lenth 0072                   ?_SYSTEM_Initialize 0001  
                      ___rparam_used 000001              ?i2_UART_buff_modulo_inc 0001  
                       ?_updateComms 0001                        __end_of_Delay 1B78  
                     __pcstackCOMRAM 0001                  ??_SYSTEM_Initialize 0027  
                        _ReadCurrent 00B0                            ?_TMR1_ISR 0001  
                   ?_TMR2_Initialize 0001                     ?_PWM4_Initialize 0001  
               UART_buff_flush@_this 0025                          ?_FuseSystem 0001  
                          ?i2_Update 0001                  __end_of_PotSetpoint 11D6  
        __size_of_ComputeStorageData 00DC          PWM4_LoadDutyValue@dutyValue 001D  
                 UART_buff_get@_this 0023                          _Currentcomp 00DE  
              __end_of_UART_buff_get 163E               ??_EUSART1_Transmit_ISR 000C  
              __end_of_UART_buff_put 0EB4                            ?_Clear595 0001  
                   ?_UART_buff_flush 0025                              ??_Delay 0021  
            __end_ofi2_UART_buff_get 16D0              __end_ofi2_UART_buff_put 0FCE  
        __end_of_EUSART1_Receive_ISR 1E6A                              CRC8@crc 0023  
                            CRC8@len 001F                              CRC8@sum 0020  
                  __end_of_SetPin595 1A96            __end_of_SYSTEM_Initialize 1DEE  
                        sendData@DTS 0070               cobs_decode@dst_buf_len 001F  
                         __pbssBANK0 00C6                           __pbssBANK1 0100  
                         __pbssBANK2 0200               cobs_decode@dst_buf_ptr 001D  
                    __CFG_PLLCFG$OFF 000000                          _Receive_get 1F28  
     __end_ofi2_UART_buff_modulo_inc 1DA4                    ?_EnableSlavePower 0027  
            __size_of_UART_buff_init 001E                          _ReciveArray 01C4  
            __size_of_UART_buff_size 0016                            ?_PotClear 0001  
                          ?_Send_put 0001                   ??_EnableSlavePower 0029  
               __size_of_receiveData 010C                   __CFG_CCP2MX$PORTC1 000000  
                            ?_Update 0001                              ?___wmul 0001  
                   ?_TMR1_StartTimer 0001                           ??_TMR1_ISR 000F  
                 __CFG_CCP3MX$PORTB5 000000             cobs_decode@dst_write_ptr 0068  
         cobs_decode@remaining_bytes 0066                              _CCP2CON 000F66  
                            _ADC_ISR 1F74                              ?_memset 001D  
                         ??i2_Update 000E              __size_of_ADC_Initialize 0018  
                   ?_DATAEE_ReadByte 0001                         ??_PDUStartup 002C  
                 UART_buff_put@_this 0023                      cobs_decode@F192 0031  
                         ??_Clear595 002A                     i2_UART_buff_size 1EC4  
          __size_ofi2_writeRegisters 007E          i2UART_buff_modulo_inc@value 0001  
              __size_of_CoolingCheck 0004                              _OSCCON2 000FD2  
                            _TBLPTRH 000FF7                              _TBLPTRL 000FF6  
                            _TBLPTRU 000FF8                          ?_StartUp595 0001  
                  _Receive_available 1E82         UART_buff_modulo_inc@my_value 0021  
                  __CFG_PRICLKEN$OFF 000000                              _OSCTUNE 000F9B  
                            _SPBRGH1 000FB0                  sendData@whereToSend 00B0  
                            i2_Delay 1B78                __size_of_CoolingStart 001E  
                   ?_TMR2_StartTimer 0001                   ?_Receive_available 001F  
                       ?_ClearBuffer 0001                         ?_GetDataDict 001D  
       ComController@DataToSend_1637 00BE                  __size_of_FuseSystem 007E  
                   ComController@DTI 00BA                  ??_Receive_available 0021  
                          ?_sendData 006D                              _Current 0130  
                    __CFG_PWRTEN$OFF 000000                           ??_PotClear 0026  
                         ??_Send_put 0028                              __Hparam 0000  
                            __Lparam 0000                   __end_of_PDUStartup 1988  
             cobs_encode@src_end_ptr 0060                          _PotSetpoint 10DA  
                    __size_of_Update 0006                 _UART_buff_modulo_inc 1D50  
                    __size_of___wmul 0026                         _CoolingCheck 1F70  
                            __pcinit 19EA               __size_of_ComController 0130  
                    __size_of_memset 002C                              __ramtop 0600  
                   i2UART_buff_get@c 000B                              __ptext0 145E  
                            __ptext1 1F56                              __ptext2 0FCE  
                            __ptext3 0914                              __ptext4 1F28  
                            __ptext5 1E82                              __ptext6 1E98  
                            __ptext7 0C6A                              __ptext8 0740  
                            __ptext9 0AD2                         _CoolingStart 1E2E  
                   i2UART_buff_put@c 0009                            _T1CONbits 000FCD  
         cobs_encode@dst_buf_end_ptr 0063                _OSCILLATOR_Initialize 1F36  
          __end_of_Receive_available 1E98                            _T2CONbits 000FBA  
                cobs_encode@src_byte 0062                   _EUSART1_Initialize 1BC2  
                   ?i2_UART_buff_get 0007             ??_PIN_MANAGER_Initialize 001D  
                          Clear595@i 002A                     ?i2_UART_buff_put 0007  
         __size_of_SYSTEM_Initialize 0024                 end_of_initialization 1A3A  
                          Delay@wait 001D                  ?_EUSART1_Initialize 0001  
                    cobs_encode@F180 0034                              memset@c 001F  
                            memset@n 0021                              memset@p 0023  
                      __Lmediumconst 0000                           ??_sendData 0029  
               __size_ofi2_SetPin595 004E                      receiveData@Data 01EA  
                          _PDUFalult 00F4                ?_UART_buff_modulo_inc 001D  
               __size_of_updateComms 0006                              postdec1 000FE5  
                            postdec2 000FDD                  __size_of_StartUp595 0062  
                            postinc0 000FEE                              postinc2 000FDE  
        __size_of_PWM4_LoadDutyValue 0030                         ?_CoolingStop 0001  
                       SetPin595@Reg 001D                 ??_EUSART1_Initialize 0027  
                       SetPin595@pin 001F                    cobs_decode@result 006B  
             cobs_decode@src_end_ptr 0060                        ??_cobs_decode 0025  
                      ??_cobs_encode 0025                            _TRISCbits 000F94  
                          _TRISDbits 000F95                     FuseSystem@i_1200 0007  
                     sendData@result 00B2                        _ComController 0C6A  
              i2UART_buff_size@_this 0001                       _UART_buff_init 1E10  
                     _UART_buff_size 1E98              __size_of_writeRegisters 007E  
                       ?_ReadCurrent 0001         __end_of_INTERRUPT_Initialize 1F4E  
                     __end_of_Update 1F62               GetDataDict@numbofbytes 0020  
                     __end_of___wmul 1DCA                        __pidataCOMRAM 1F4E  
                       ??_FuseSystem 0007                    __size_of_TMR1_ISR 0032  
                     _ADC_Initialize 1E6A               ?_OSCILLATOR_Initialize 0001  
                     __end_of_memset 1D50                         receiveData@i 01E8  
         __size_of_Receive_available 0016                     i2_writeRegisters 174E  
                  __size_ofi2_Update 0006                  start_initialization 19EA  
    __size_of_PIN_MANAGER_Initialize 007A                EnableSlavePower@slave 0029  
                  __size_of_Clear595 0034                  i2writeRegisters@val 000A  
                          PotClear@x 0026                   ComController@lenth 00BC  
                     ?_ComController 00BA                  __end_of_cobs_decode 0AD2  
             __end_of_UART_buff_init 1E2E                       UART_buff_get@c 0027  
             __end_of_UART_buff_size 1EAE                  __end_of_cobs_encode 0C6A  
                       ?_Receive_get 0001                            _SetPin595 1A48  
                     UART_buff_put@c 0025                 __size_of_ClearBuffer 0016  
                DATAEE_ReadByte@bAdd 001D                   __end_of_FuseSystem 184A  
           __end_ofi2_UART_buff_size 1EDA                 __size_of_GetDataDict 0098  
             ??_UART_buff_modulo_inc 0021             __size_of_TMR1_Initialize 0022  
                           CRC8@data 001D                             ??_Update 002A  
                  __size_of_PotClear 00C8                    __size_of_Send_put 002E  
                           ??___wmul 0005               __end_of_ADC_Initialize 1E82  
         __end_of_ComputeStorageData 1396                             ?_ADC_ISR 0001  
                           ??_memset 0023            __size_of_EnableSlavePower 00E4  
                        __pbssCOMRAM 002E        __size_of_EUSART1_Transmit_ISR 0032  
                      __pcstackBANK0 0060                        __pcstackBANK1 01E2  
                       ??_StartUp595 002C             __size_of_PWM4_Initialize 0014  
           __size_of_TMR2_Initialize 0014                             ?i2_Delay 0001  
                UART_buff_init@_this 0025                    i2writeRegisters@i 000C  
                    ?_UART_buff_init 0025             __size_of_UART_buff_flush 0062  
                    ?_UART_buff_size 001D         __size_of_EUSART1_Receive_ISR 001E  
                         ?_SetPin595 001D                        ??_receiveData 01E2  
                         sendData@CS 00B1                cobs_encode@search_len 0065  
             __size_of_UART_buff_get 0092               __size_of_UART_buff_put 011A  
             _PIN_MANAGER_Initialize 184A                    __size_of_sendData 01D4  
                       ?_PotSetpoint 0026                            __pintcode 0008  
                 __end_of_StartUp595 19EA                      ?_ADC_Initialize 0001  
       ??_INTERRUPT_InterruptManager 000F                 i2UART_buff_get@_this 0007  
               __size_of_CoolingStop 0012                       i2SetPin595@Reg 0001  
                     i2SetPin595@pin 0003                             _BAUD1CON 000FB8  
           __size_of_TMR1_StartTimer 0004                       __size_of_Delay 004A  
                        _cobs_decode 0914                          _cobs_encode 0AD2  
             sendData@DataTableIndex 006F                      ??_ComController 002D  
           __size_of_DATAEE_ReadByte 0014          _COBS_ENCODE_DST_BUF_LEN_MAX 003E  
               _INTERRUPT_Initialize 1F44                   cobs_encode@src_len 0023  
                 cobs_encode@src_ptr 0021                       ___wmul@product 0005  
                           _LATCbits 000F8B                       _writeRegisters 16D0  
                UART_buff_size@_this 001D                            _registers 0100  
                           _IPR1bits 000F9F                             _PIE1bits 000F9D  
           __size_of_TMR2_StartTimer 0004                             i2Delay@i 0006  
__size_of_INTERRUPT_InterruptManager 00A4                             i2u190_40 165C  
                           i2u192_40 1C7E                             i2u193_40 1C50  
                           _PIR1bits 000F9E                             i2u286_47 1B90  
                           _RCONbits 000FD0                     __CFG_WDTPS$32768 000000  
                __end_of_receiveData 10DA                             _TMR1_ISR 1C32  
                       PotSetpoint@x 0062                         _input_buffer 013C  
               __size_of_ReadCurrent 0690                    ??_TMR1_Initialize 001D  
                   __size_of_ADC_ISR 0004           cobs_decode@dst_buf_end_ptr 0062  
                           i2_Update 1F62                           _ADCON0bits 000FC2  
                         _ADCON2bits 000FC0                    ___wmul@multiplier 0001  
               i2UART_buff_put@_this 0007                     i2SetPin595@value 0005  
                           _Clear595 1BFE                        _UART_buff_get 15AC  
                      _UART_buff_put 0D9A                    sendData@COBSArray 0074  
      cobs_encode@dst_code_write_ptr 0066             ??i2_UART_buff_modulo_inc 0005  
                        _INTCON2bits 000FF1                     __size_ofi2_Delay 004A  
                          copy_data0 19FE                ?_INTERRUPT_Initialize 0001  
                 sendData@ComandByte 006D               __end_of_writeRegisters 174E  
                 PotSetpoint@new_pos 0064                        ??i2_SetPin595 0007  
                        ??_SetPin595 0023                 EnableSlavePower@onof 0027  
           __size_ofi2_UART_buff_get 0092                    ??_TMR2_Initialize 001D  
                  ??_PWM4_Initialize 001D             __size_ofi2_UART_buff_put 011A  
                         _EECON1bits 000FA6                        ??_updateComms 002E  
               __size_of_Receive_get 000E             __end_ofi2_writeRegisters 17CC  
                           _PotClear 1396                             __Hrparam 0000  
                           _Send_put 1CF6                    ??_UART_buff_flush 0029  
         __end_of_PWM4_LoadDutyValue 1CC6                             __Lrparam 0000  
                  _ADC_GetConversion 1CC6                   __CFG_BOREN$SBORDIS 000000  
                  __CFG_P2BMX$PORTD2 000000              ??_OSCILLATOR_Initialize 001D  
                 ?_ADC_GetConversion 0001          __size_of_EUSART1_Initialize 003C  
                   _EnableSlavePower 11D6                           _ANSELCbits 000F3A  
                     ?_UART_buff_get 0023                       ?_UART_buff_put 0023  
                        CRC8@extract 0021                  ??_ADC_GetConversion 0003  
                   GetDataDict@Error 0021                            sendData@i 00B9  
                          sendData@j 00B5                             __ptext10 1CF6  
                           __ptext11 0D9A                             __ptext20 1F68  
                           __ptext12 15AC                             __ptext21 1DEE  
                           __ptext13 1D50                           _T1GCONbits 000FCC  
                           __ptext30 1E6A                             __ptext22 1F6C  
                           __ptext14 1AE4                             __ptext31 1926  
                           __ptext23 1EEE                             __ptext15 1514  
                           __ptext40 1F16                             __ptext32 1F5C  
                           __ptext24 184A                             __ptext16 1EAE  
                           __ptext41 1E2E                             __ptext33 1988  
                           __ptext25 1F36                             __ptext17 18C4  
                           __ptext50 1F62                             __ptext42 10DA  
                           __ptext34 1BFE                             __ptext26 1F44  
                           __ptext18 1DCA                             __ptext51 174E  
                           __ptext43 1396                             __ptext35 16D0  
                           __ptext27 1BC2                             __ptext19 1EDA  
                           __ptext60 1E4C                             __ptext52 1B78  
                           __ptext44 1B2E                             __ptext36 11D6  
                           __ptext28 1E10                             __ptext61 0EB4  
                           __ptext53 1A96                             __ptext45 1C96  
                           __ptext37 1A48                             __ptext29 1D24  
                           __ptext62 1D7A                             __ptext54 1CC6  
                           __ptext46 1F70                             __ptext38 12BA  
                           __ptext63 1F74                             __ptext55 17CC  
                           __ptext39 1F02                             __ptext56 1DA4  
                           __ptext48 1C32                             __ptext57 1C64  
                           __ptext49 00B0                             __ptext58 1EC4  
                           __ptext59 163E                    ??_TMR1_StartTimer 001D  
                      __size_of_CRC8 004A            GetDataDict@DataTableIndex 001D  
                        i2Delay@wait 0001              EUSART1_Receive_ISR@data 000C  
                    ?_writeRegisters 0001                        __size_of_main 00B6  
                  cobs_encode@result 006A                          _receiveData 0FCE  
                           _readwhat 0040                       _Transmit_stall 0042  
                           _sendData 0740                    ??_DATAEE_ReadByte 001D  
          __end_of_ADC_GetConversion 1CF6                    ?i2_UART_buff_size 0001  
                  sendData@DataTable 006E                           _RC1STAbits 000FAB  
                __end_ofi2_SetPin595 1AE4                             _prev_pos 0037  
                       _ProcessArray 01A6                   ??i2_UART_buff_size 0003  
                  writeRegisters@val 0026                             int$flags 0043  
                  ??_TMR2_StartTimer 001D                  __end_of_updateComms 1F5C  
 __end_of_INTERRUPT_InterruptManager 00AC           _INTERRUPT_InterruptManager 0008  
               __size_of_PotSetpoint 00FC                  _EUSART1_Receive_ISR 1E4C  
                  receiveData@result 01EB                           _INTCONbits 000FF2  
                ComputeStorageData@i 0020                   _DataTableArrayFour 002E  
          UART_buff_modulo_inc@value 001D                     ??_UART_buff_init 0027  
                   ??_UART_buff_size 001F                   _ComputeStorageData 12BA  
             ??_INTERRUPT_Initialize 001D                             memset@p1 001D  
    __size_ofi2_UART_buff_modulo_inc 002A                        ??_ClearBuffer 0029  
                           intlevel2 0000                  cobs_decode@len_code 006A  
               ?_EUSART1_Receive_ISR 0001                        ??_GetDataDict 0021  
                ?_ComputeStorageData 0001              ?_PIN_MANAGER_Initialize 0001  
                       cobs_decode@i 0065                       SetPin595@value 0021  
       __end_of_EUSART1_Transmit_ISR 1C96                     ??_ADC_Initialize 001D  
                  sendData@SendArray 0092                    ??i2_UART_buff_get 0009  
                  ??i2_UART_buff_put 000A                  cobs_decode@src_byte 0064  
      __size_of_UART_buff_modulo_inc 002A                        ?_CoolingCheck 0001  
                  _DataTableArrayOne 00EA                      ??_UART_buff_get 0025  
                    ??_UART_buff_put 0026                 ??_ComputeStorageData 001E  
                      ?_CoolingStart 0001                           _PDUStartup 1926  
                       ?_cobs_decode 001D                         ?_cobs_encode 001D  
                  __CFG_T3CMX$PORTC0 000000                      writeRegisters@i 0028  
                 cobs_decode@src_len 0023                   cobs_decode@src_ptr 0021  
              ??_EUSART1_Receive_ISR 000C       __end_of_PIN_MANAGER_Initialize 18C4  
                        i2_SetPin595 1A96                    __CFG_FOSC$INTIO67 000000  
                __end_of_ClearBuffer 1EC4           __size_of_ADC_GetConversion 0030  
                    _TMR1_Initialize 1DEE                          _updateComms 1F56  
