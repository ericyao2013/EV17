

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Sun Aug 13 21:11:44 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    84                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    85                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    86  0000                     
    87                           ; Version 1.42
    88                           ; Generated 13/04/2017 GMT
    89                           ; 
    90                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    91                           ; All rights reserved.
    92                           ; 
    93                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    94                           ; 
    95                           ; Redistribution and use in source and binary forms, with or without modification, are
    96                           ; permitted provided that the following conditions are met:
    97                           ; 
    98                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    99                           ;        conditions and the following disclaimer.
   100                           ; 
   101                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   102                           ;        of conditions and the following disclaimer in the documentation and/or other
   103                           ;        materials provided with the distribution.
   104                           ; 
   105                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   106                           ;        software without specific prior written permission.
   107                           ; 
   108                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   109                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   110                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   111                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   112                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   113                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   114                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   115                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   116                           ; 
   117                           ; 
   118                           ; Code-generator required, PIC18F45K22 Definitions
   119                           ; 
   120                           ; SFR Addresses
   121  0000                     
   122                           	psect	idataCOMRAM
   123  002256                     __pidataCOMRAM:
   124                           	opt stack 0
   125                           
   126                           ;initializer for _COBS_DECODE_DST_BUF_LEN_MAX
   127  002256  001E               	dw	30
   128                           
   129                           ;initializer for _COBS_ENCODE_DST_BUF_LEN_MAX
   130  002258  001E               	dw	30
   131                           
   132                           ;initializer for _readwhat
   133  00225A  0001               	dw	1
   134                           
   135                           ;initializer for _Transmit_stall
   136  00225C  01                 	db	1
   137  0000                     _CCPTMRS1bits	set	3912
   138  0000                     _ANSELCbits	set	3898
   139  0000                     _ANSELE	set	3900
   140  0000                     _ANSELD	set	3899
   141  0000                     _ANSELC	set	3898
   142  0000                     _ANSELB	set	3897
   143  0000                     _ANSELA	set	3896
   144  0000                     _ANSB4	set	31180
   145  0000                     _ANSD7	set	31199
   146  0000                     _ANSB3	set	31179
   147  0000                     _RC1STAbits	set	4011
   148  0000                     _RCREG1	set	4014
   149  0000                     _TXREG1	set	4013
   150  0000                     _SPBRGH1	set	4016
   151  0000                     _SPBRG1	set	4015
   152  0000                     _TX1STA	set	4012
   153  0000                     _RC1STA	set	4011
   154  0000                     _BAUD1CON	set	4024
   155  0000                     _T2CONbits	set	4026
   156  0000                     _TMR2	set	4028
   157  0000                     _PR2	set	4027
   158  0000                     _T2CON	set	4026
   159  0000                     _CCPR2H	set	3944
   160  0000                     _CCPR2L	set	3943
   161  0000                     _CCP2CON	set	3942
   162  0000                     _T1GCONbits	set	4044
   163  0000                     _T1CONbits	set	4045
   164  0000                     _TMR1L	set	4046
   165  0000                     _TMR1H	set	4047
   166  0000                     _T1GCON	set	4044
   167  0000                     _T1CON	set	4045
   168  0000                     _TRISDbits	set	3989
   169  0000                     _INTCON2bits	set	4081
   170  0000                     _LATCbits	set	3979
   171  0000                     _TRISCbits	set	3988
   172  0000                     _TRISE	set	3990
   173  0000                     _LATE	set	3981
   174  0000                     _TRISD	set	3989
   175  0000                     _LATD	set	3980
   176  0000                     _TRISC	set	3988
   177  0000                     _LATC	set	3979
   178  0000                     _WPUB	set	3937
   179  0000                     _TRISB	set	3987
   180  0000                     _LATB	set	3978
   181  0000                     _TRISA	set	3986
   182  0000                     _LATA	set	3977
   183  0000                     _EEDATA	set	4008
   184  0000                     _EEADR	set	4009
   185  0000                     _EECON2	set	4007
   186  0000                     _EECON1bits	set	4006
   187  0000                     _INTCONbits	set	4082
   188  0000                     _TABLAT	set	4085
   189  0000                     _TBLPTRL	set	4086
   190  0000                     _TBLPTRH	set	4087
   191  0000                     _TBLPTRU	set	4088
   192  0000                     _OSCTUNE	set	3995
   193  0000                     _OSCCON2	set	4050
   194  0000                     _OSCCON	set	4051
   195  0000                     _PIE1bits	set	3997
   196  0000                     _IPR1bits	set	3999
   197  0000                     _RCONbits	set	4048
   198  0000                     _PIR1bits	set	3998
   199  0000                     _ADCON0bits	set	4034
   200  0000                     _ADRESH	set	4036
   201  0000                     _ADRESL	set	4035
   202  0000                     _ADCON2bits	set	4032
   203  0000                     _ADCON2	set	4032
   204  0000                     _ADCON1	set	4033
   205  0000                     _ADCON0	set	4034
   206  0000                     _LATC5	set	31837
   207  0000                     _LATA3	set	31819
   208  0000                     _LATB3	set	31827
   209  0000                     _LATB5	set	31829
   210  0000                     _LATD6	set	31846
   211  0000                     _LATD4	set	31844
   212  0000                     _LATD7	set	31847
   213  0000                     _LATB0	set	31824
   214  0000                     _LATD5	set	31845
   215  0000                     _TRISB5	set	31901
   216  0000                     _TRISB3	set	31899
   217  0000                     _TRISB4	set	31900
   218  0000                     _LATB4	set	31828
   219                           
   220                           ; #config settings
   221  0000                     
   222                           	psect	cinit
   223  001C38                     __pcinit:
   224                           	opt stack 0
   225  001C38                     start_initialization:
   226                           	opt stack 0
   227  001C38                     __initialization:
   228                           	opt stack 0
   229                           
   230                           ; Initialize objects allocated to COMRAM (7 bytes)
   231                           ; load TBLPTR registers with __pidataCOMRAM
   232  001C38  0E56               	movlw	low __pidataCOMRAM
   233  001C3A  6EF6               	movwf	tblptrl,c
   234  001C3C  0E22               	movlw	high __pidataCOMRAM
   235  001C3E  6EF7               	movwf	tblptrh,c
   236  001C40  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   237  001C42  6EF8               	movwf	tblptru,c
   238  001C44  EE00  F03B         	lfsr	0,__pdataCOMRAM
   239  001C48  EE10 F007          	lfsr	1,7
   240  001C4C                     copy_data0:
   241  001C4C  0009               	tblrd		*+
   242  001C4E  CFF5 FFEE          	movff	tablat,postinc0
   243  001C52  50E5               	movf	postdec1,w,c
   244  001C54  50E1               	movf	fsr1l,w,c
   245  001C56  E1FA               	bnz	copy_data0
   246                           
   247                           ; Clear objects allocated to BANK2 (106 bytes)
   248  001C58  EE02  F000         	lfsr	0,__pbssBANK2
   249  001C5C  0E6A               	movlw	106
   250  001C5E                     clear_0:
   251  001C5E  6AEE               	clrf	postinc0,c
   252  001C60  06E8               	decf	wreg,f,c
   253  001C62  E1FD               	bnz	clear_0
   254                           
   255                           ; Clear objects allocated to BANK1 (226 bytes)
   256  001C64  EE01  F000         	lfsr	0,__pbssBANK1
   257  001C68  0EE2               	movlw	226
   258  001C6A                     clear_1:
   259  001C6A  6AEE               	clrf	postinc0,c
   260  001C6C  06E8               	decf	wreg,f,c
   261  001C6E  E1FD               	bnz	clear_1
   262                           
   263                           ; Clear objects allocated to BANK0 (54 bytes)
   264  001C70  EE00  F0C7         	lfsr	0,__pbssBANK0
   265  001C74  0E36               	movlw	54
   266  001C76                     clear_2:
   267  001C76  6AEE               	clrf	postinc0,c
   268  001C78  06E8               	decf	wreg,f,c
   269  001C7A  E1FD               	bnz	clear_2
   270                           
   271                           ; Clear objects allocated to COMRAM (14 bytes)
   272  001C7C  EE00  F02D         	lfsr	0,__pbssCOMRAM
   273  001C80  0E0E               	movlw	14
   274  001C82                     clear_3:
   275  001C82  6AEE               	clrf	postinc0,c
   276  001C84  06E8               	decf	wreg,f,c
   277  001C86  E1FD               	bnz	clear_3
   278  001C88                     end_of_initialization:
   279                           	opt stack 0
   280  001C88                     __end_of__initialization:
   281                           	opt stack 0
   282  001C88  9042               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   283  001C8A  9242               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   284  001C8C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   285  001C8E  6EF8               	movwf	tblptru,c
   286  001C90  0100               	movlb	0
   287  001C92  EF4D  F00C         	goto	_main	;jump to C main() function
   288                           tblptru	equ	0xFF8
   289                           tblptrh	equ	0xFF7
   290                           tblptrl	equ	0xFF6
   291                           tablat	equ	0xFF5
   292                           postinc0	equ	0xFEE
   293                           wreg	equ	0xFE8
   294                           postdec1	equ	0xFE5
   295                           fsr1l	equ	0xFE1
   296                           
   297                           	psect	bssCOMRAM
   298  00002D                     __pbssCOMRAM:
   299                           	opt stack 0
   300  00002D                     _DataTableArrayFour:
   301                           	opt stack 0
   302  00002D                     	ds	3
   303  000030                     cobs_decode@F192:
   304                           	opt stack 0
   305  000030                     	ds	3
   306  000033                     cobs_encode@F180:
   307                           	opt stack 0
   308  000033                     	ds	3
   309  000036                     _prev_pos:
   310                           	opt stack 0
   311  000036                     	ds	2
   312  000038                     _timer1ReloadVal:
   313                           	opt stack 0
   314  000038                     	ds	2
   315  00003A                     _MCSOn:
   316                           	opt stack 0
   317  00003A                     	ds	1
   318                           tblptru	equ	0xFF8
   319                           tblptrh	equ	0xFF7
   320                           tblptrl	equ	0xFF6
   321                           tablat	equ	0xFF5
   322                           postinc0	equ	0xFEE
   323                           wreg	equ	0xFE8
   324                           postdec1	equ	0xFE5
   325                           fsr1l	equ	0xFE1
   326                           
   327                           	psect	dataCOMRAM
   328  00003B                     __pdataCOMRAM:
   329                           	opt stack 0
   330  00003B                     _COBS_DECODE_DST_BUF_LEN_MAX:
   331                           	opt stack 0
   332  00003B                     	ds	2
   333  00003D                     _COBS_ENCODE_DST_BUF_LEN_MAX:
   334                           	opt stack 0
   335  00003D                     	ds	2
   336  00003F                     _readwhat:
   337                           	opt stack 0
   338  00003F                     	ds	2
   339  000041                     _Transmit_stall:
   340                           	opt stack 0
   341  000041                     	ds	1
   342                           tblptru	equ	0xFF8
   343                           tblptrh	equ	0xFF7
   344                           tblptrl	equ	0xFF6
   345                           tablat	equ	0xFF5
   346                           postinc0	equ	0xFEE
   347                           wreg	equ	0xFE8
   348                           postdec1	equ	0xFE5
   349                           fsr1l	equ	0xFE1
   350                           
   351                           	psect	bssBANK0
   352  0000C7                     __pbssBANK0:
   353                           	opt stack 0
   354  0000C7                     _CurrentADC:
   355                           	opt stack 0
   356  0000C7                     	ds	12
   357  0000D3                     _data:
   358                           	opt stack 0
   359  0000D3                     	ds	12
   360  0000DF                     _Currentcomp:
   361                           	opt stack 0
   362  0000DF                     	ds	12
   363  0000EB                     _DataTableArrayOne:
   364                           	opt stack 0
   365  0000EB                     	ds	10
   366  0000F5                     _PDUFalult:
   367                           	opt stack 0
   368  0000F5                     	ds	8
   369                           tblptru	equ	0xFF8
   370                           tblptrh	equ	0xFF7
   371                           tblptrl	equ	0xFF6
   372                           tablat	equ	0xFF5
   373                           postinc0	equ	0xFEE
   374                           wreg	equ	0xFE8
   375                           postdec1	equ	0xFE5
   376                           fsr1l	equ	0xFE1
   377                           
   378                           	psect	bssBANK1
   379  000100                     __pbssBANK1:
   380                           	opt stack 0
   381  000100                     _registers:
   382                           	opt stack 0
   383  000100                     	ds	48
   384  000130                     _Current:
   385                           	opt stack 0
   386  000130                     	ds	12
   387  00013C                     _input_buffer:
   388                           	opt stack 0
   389  00013C                     	ds	106
   390  0001A6                     _ProcessArray:
   391                           	opt stack 0
   392  0001A6                     	ds	30
   393  0001C4                     _ReciveArray:
   394                           	opt stack 0
   395  0001C4                     	ds	30
   396                           tblptru	equ	0xFF8
   397                           tblptrh	equ	0xFF7
   398                           tblptrl	equ	0xFF6
   399                           tablat	equ	0xFF5
   400                           postinc0	equ	0xFEE
   401                           wreg	equ	0xFE8
   402                           postdec1	equ	0xFE5
   403                           fsr1l	equ	0xFE1
   404                           
   405                           	psect	bssBANK2
   406  000200                     __pbssBANK2:
   407                           	opt stack 0
   408  000200                     _output_buffer:
   409                           	opt stack 0
   410  000200                     	ds	106
   411                           tblptru	equ	0xFF8
   412                           tblptrh	equ	0xFF7
   413                           tblptrl	equ	0xFF6
   414                           tablat	equ	0xFF5
   415                           postinc0	equ	0xFEE
   416                           wreg	equ	0xFE8
   417                           postdec1	equ	0xFE5
   418                           fsr1l	equ	0xFE1
   419                           
   420                           	psect	cstackBANK1
   421  0001E2                     __pcstackBANK1:
   422                           	opt stack 0
   423  0001E2                     ComController@DataRecived:
   424                           	opt stack 0
   425                           
   426                           ; 4 bytes @ 0x0
   427  0001E2                     	ds	4
   428  0001E6                     ComController@DataToSend:
   429                           	opt stack 0
   430                           
   431                           ; 4 bytes @ 0x4
   432  0001E6                     	ds	4
   433  0001EA                     ComController@DataToSend_1658:
   434                           	opt stack 0
   435                           
   436                           ; 4 bytes @ 0x8
   437  0001EA                     	ds	4
   438  0001EE                     ComController@k:
   439                           	opt stack 0
   440                           
   441                           ; 1 bytes @ 0xC
   442  0001EE                     	ds	1
   443  0001EF                     receiveData@CS:
   444                           	opt stack 0
   445                           
   446                           ; 1 bytes @ 0xD
   447  0001EF                     	ds	1
   448  0001F0                     receiveData@i:
   449                           	opt stack 0
   450                           
   451                           ; 2 bytes @ 0xE
   452  0001F0                     	ds	2
   453  0001F2                     receiveData@Data:
   454                           	opt stack 0
   455                           
   456                           ; 1 bytes @ 0x10
   457  0001F2                     	ds	1
   458  0001F3                     receiveData@result:
   459                           	opt stack 0
   460                           
   461                           ; 3 bytes @ 0x11
   462  0001F3                     	ds	3
   463  0001F6                     main@i:
   464                           	opt stack 0
   465                           
   466                           ; 2 bytes @ 0x14
   467  0001F6                     	ds	2
   468  0001F8                     main@j:
   469                           	opt stack 0
   470                           
   471                           ; 2 bytes @ 0x16
   472  0001F8                     	ds	2
   473  0001FA                     main@UP:
   474                           	opt stack 0
   475                           
   476                           ; 1 bytes @ 0x18
   477  0001FA                     	ds	1
   478                           tblptru	equ	0xFF8
   479                           tblptrh	equ	0xFF7
   480                           tblptrl	equ	0xFF6
   481                           tablat	equ	0xFF5
   482                           postinc0	equ	0xFEE
   483                           wreg	equ	0xFE8
   484                           postdec1	equ	0xFE5
   485                           fsr1l	equ	0xFE1
   486                           
   487                           	psect	cstackBANK0
   488  000060                     __pcstackBANK0:
   489                           	opt stack 0
   490  000060                     PotSetpoint@set_point:
   491                           	opt stack 0
   492  000060                     cobs_encode@src_end_ptr:
   493                           	opt stack 0
   494  000060                     cobs_decode@src_end_ptr:
   495                           	opt stack 0
   496                           
   497                           ; 2 bytes @ 0x0
   498  000060                     	ds	2
   499  000062                     cobs_encode@src_byte:
   500                           	opt stack 0
   501  000062                     PotSetpoint@x:
   502                           	opt stack 0
   503  000062                     cobs_decode@dst_buf_end_ptr:
   504                           	opt stack 0
   505                           
   506                           ; 2 bytes @ 0x2
   507  000062                     	ds	1
   508  000063                     cobs_encode@dst_buf_end_ptr:
   509                           	opt stack 0
   510                           
   511                           ; 2 bytes @ 0x3
   512  000063                     	ds	1
   513  000064                     cobs_decode@src_byte:
   514                           	opt stack 0
   515  000064                     PotSetpoint@new_pos:
   516                           	opt stack 0
   517                           
   518                           ; 2 bytes @ 0x4
   519  000064                     	ds	1
   520  000065                     cobs_encode@search_len:
   521                           	opt stack 0
   522  000065                     cobs_decode@i:
   523                           	opt stack 0
   524                           
   525                           ; 1 bytes @ 0x5
   526  000065                     	ds	1
   527  000066                     cobs_encode@dst_code_write_ptr:
   528                           	opt stack 0
   529  000066                     cobs_decode@remaining_bytes:
   530                           	opt stack 0
   531                           
   532                           ; 2 bytes @ 0x6
   533  000066                     	ds	2
   534  000068                     cobs_encode@dst_write_ptr:
   535                           	opt stack 0
   536  000068                     cobs_decode@dst_write_ptr:
   537                           	opt stack 0
   538                           
   539                           ; 2 bytes @ 0x8
   540  000068                     	ds	2
   541  00006A                     cobs_decode@len_code:
   542                           	opt stack 0
   543  00006A                     cobs_encode@result:
   544                           	opt stack 0
   545                           
   546                           ; 3 bytes @ 0xA
   547  00006A                     	ds	1
   548  00006B                     cobs_decode@result:
   549                           	opt stack 0
   550                           
   551                           ; 3 bytes @ 0xB
   552  00006B                     	ds	2
   553  00006D                     sendData@ComandByte:
   554                           	opt stack 0
   555                           
   556                           ; 1 bytes @ 0xD
   557  00006D                     	ds	1
   558  00006E                     sendData@DataTable:
   559                           	opt stack 0
   560                           
   561                           ; 1 bytes @ 0xE
   562  00006E                     	ds	1
   563  00006F                     sendData@DataTableIndex:
   564                           	opt stack 0
   565                           
   566                           ; 1 bytes @ 0xF
   567  00006F                     	ds	1
   568  000070                     sendData@DTS:
   569                           	opt stack 0
   570                           
   571                           ; 2 bytes @ 0x10
   572  000070                     	ds	2
   573  000072                     sendData@lenth:
   574                           	opt stack 0
   575                           
   576                           ; 2 bytes @ 0x12
   577  000072                     	ds	2
   578  000074                     sendData@COBSArray:
   579                           	opt stack 0
   580                           
   581                           ; 30 bytes @ 0x14
   582  000074                     	ds	30
   583  000092                     sendData@SendArray:
   584                           	opt stack 0
   585                           
   586                           ; 30 bytes @ 0x32
   587  000092                     	ds	30
   588  0000B0                     sendData@whereToSend:
   589                           	opt stack 0
   590                           
   591                           ; 1 bytes @ 0x50
   592  0000B0                     	ds	1
   593  0000B1                     sendData@CS:
   594                           	opt stack 0
   595                           
   596                           ; 1 bytes @ 0x51
   597  0000B1                     	ds	1
   598  0000B2                     sendData@result:
   599                           	opt stack 0
   600                           
   601                           ; 3 bytes @ 0x52
   602  0000B2                     	ds	3
   603  0000B5                     sendData@j:
   604                           	opt stack 0
   605                           
   606                           ; 2 bytes @ 0x55
   607  0000B5                     	ds	2
   608  0000B7                     sendData@count:
   609                           	opt stack 0
   610                           
   611                           ; 2 bytes @ 0x57
   612  0000B7                     	ds	2
   613  0000B9                     sendData@i:
   614                           	opt stack 0
   615                           
   616                           ; 1 bytes @ 0x59
   617  0000B9                     	ds	1
   618  0000BA                     ComController@DTI:
   619                           	opt stack 0
   620                           
   621                           ; 2 bytes @ 0x5A
   622  0000BA                     	ds	2
   623  0000BC                     ComController@lenth:
   624                           	opt stack 0
   625                           
   626                           ; 2 bytes @ 0x5C
   627  0000BC                     	ds	2
   628  0000BE                     ??_ComController:
   629                           
   630                           ; 1 bytes @ 0x5E
   631  0000BE                     	ds	2
   632  0000C0                     ??_receiveData:
   633                           
   634                           ; 1 bytes @ 0x60
   635  0000C0                     	ds	5
   636  0000C5                     updateComms@DataGet:
   637                           	opt stack 0
   638                           
   639                           ; 2 bytes @ 0x65
   640  0000C5                     	ds	2
   641                           tblptru	equ	0xFF8
   642                           tblptrh	equ	0xFF7
   643                           tblptrl	equ	0xFF6
   644                           tablat	equ	0xFF5
   645                           postinc0	equ	0xFEE
   646                           wreg	equ	0xFE8
   647                           postdec1	equ	0xFE5
   648                           fsr1l	equ	0xFE1
   649                           
   650                           	psect	cstackCOMRAM
   651  000001                     __pcstackCOMRAM:
   652                           	opt stack 0
   653  000001                     ?_ADC_GetConversion:
   654                           	opt stack 0
   655  000001                     ?___wmul:
   656                           	opt stack 0
   657  000001                     ?i2_UART_buff_size:
   658                           	opt stack 0
   659  000001                     ?i2_UART_buff_modulo_inc:
   660                           	opt stack 0
   661  000001                     ___wmul@multiplier:
   662                           	opt stack 0
   663  000001                     i2SetPin595@Reg:
   664                           	opt stack 0
   665  000001                     i2UART_buff_size@_this:
   666                           	opt stack 0
   667  000001                     i2UART_buff_modulo_inc@value:
   668                           	opt stack 0
   669  000001                     i2Delay@wait:
   670                           	opt stack 0
   671                           
   672                           ; 4 bytes @ 0x0
   673  000001                     	ds	2
   674  000003                     ??_ADC_GetConversion:
   675  000003                     ___wmul@multiplicand:
   676                           	opt stack 0
   677  000003                     i2SetPin595@pin:
   678                           	opt stack 0
   679  000003                     i2UART_buff_modulo_inc@modulus:
   680                           	opt stack 0
   681                           
   682                           ; 2 bytes @ 0x2
   683  000003                     	ds	2
   684  000005                     ??i2_Delay:
   685  000005                     ADC_GetConversion@channel:
   686                           	opt stack 0
   687  000005                     ___wmul@product:
   688                           	opt stack 0
   689  000005                     i2SetPin595@value:
   690                           	opt stack 0
   691  000005                     i2UART_buff_modulo_inc@my_value:
   692                           	opt stack 0
   693                           
   694                           ; 2 bytes @ 0x4
   695  000005                     	ds	1
   696  000006                     i2Delay@i:
   697                           	opt stack 0
   698                           
   699                           ; 4 bytes @ 0x5
   700  000006                     	ds	1
   701  000007                     ??i2_SetPin595:
   702  000007                     FuseSystem@i_1226:
   703                           	opt stack 0
   704  000007                     i2UART_buff_put@_this:
   705                           	opt stack 0
   706  000007                     i2UART_buff_get@_this:
   707                           	opt stack 0
   708                           
   709                           ; 2 bytes @ 0x6
   710  000007                     	ds	2
   711  000009                     ??i2_UART_buff_get:
   712  000009                     i2UART_buff_put@c:
   713                           	opt stack 0
   714  000009                     FuseSystem@i:
   715                           	opt stack 0
   716                           
   717                           ; 2 bytes @ 0x8
   718  000009                     	ds	1
   719  00000A                     ??i2_UART_buff_put:
   720  00000A                     i2writeRegisters@val:
   721                           	opt stack 0
   722                           
   723                           ; 2 bytes @ 0x9
   724  00000A                     	ds	1
   725  00000B                     i2UART_buff_get@c:
   726                           	opt stack 0
   727                           
   728                           ; 1 bytes @ 0xA
   729  00000B                     	ds	1
   730  00000C                     EUSART1_Receive_ISR@data:
   731                           	opt stack 0
   732  00000C                     i2writeRegisters@i:
   733                           	opt stack 0
   734                           
   735                           ; 2 bytes @ 0xB
   736  00000C                     	ds	2
   737  00000E                     ReadCurrent@gather:
   738                           	opt stack 0
   739                           
   740                           ; 1 bytes @ 0xD
   741  00000E                     	ds	1
   742  00000F                     ??_INTERRUPT_InterruptManager:
   743                           
   744                           ; 1 bytes @ 0xE
   745  00000F                     	ds	14
   746  00001D                     ?_UART_buff_modulo_inc:
   747                           	opt stack 0
   748  00001D                     ?_UART_buff_size:
   749                           	opt stack 0
   750  00001D                     ?_cobs_encode:
   751                           	opt stack 0
   752  00001D                     ?_cobs_decode:
   753                           	opt stack 0
   754  00001D                     DATAEE_ReadByte@bAdd:
   755                           	opt stack 0
   756  00001D                     GetPDUFault@loc:
   757                           	opt stack 0
   758  00001D                     GetDataDict@DataTableIndex:
   759                           	opt stack 0
   760  00001D                     SetDataDict@DataTableIndex:
   761                           	opt stack 0
   762  00001D                     PWM4_LoadDutyValue@dutyValue:
   763                           	opt stack 0
   764  00001D                     SetPin595@Reg:
   765                           	opt stack 0
   766  00001D                     UART_buff_size@_this:
   767                           	opt stack 0
   768  00001D                     UART_buff_modulo_inc@value:
   769                           	opt stack 0
   770  00001D                     CRC8@data:
   771                           	opt stack 0
   772  00001D                     cobs_encode@dst_buf_ptr:
   773                           	opt stack 0
   774  00001D                     cobs_decode@dst_buf_ptr:
   775                           	opt stack 0
   776  00001D                     memset@p1:
   777                           	opt stack 0
   778  00001D                     Delay@wait:
   779                           	opt stack 0
   780                           
   781                           ; 4 bytes @ 0x1C
   782  00001D                     	ds	1
   783  00001E                     ??_FaultsCollector:
   784  00001E                     ??_ComputeStorageData:
   785  00001E                     GetDataDict@DataArray:
   786                           	opt stack 0
   787  00001E                     SetDataDict@DataArray:
   788                           	opt stack 0
   789                           
   790                           ; 2 bytes @ 0x1D
   791  00001E                     	ds	1
   792  00001F                     ??_PWM4_LoadDutyValue:
   793  00001F                     ?_Receive_available:
   794                           	opt stack 0
   795  00001F                     CRC8@len:
   796                           	opt stack 0
   797  00001F                     SetPin595@pin:
   798                           	opt stack 0
   799  00001F                     UART_buff_modulo_inc@modulus:
   800                           	opt stack 0
   801  00001F                     cobs_encode@dst_buf_len:
   802                           	opt stack 0
   803  00001F                     cobs_decode@dst_buf_len:
   804                           	opt stack 0
   805  00001F                     memset@c:
   806                           	opt stack 0
   807                           
   808                           ; 2 bytes @ 0x1E
   809  00001F                     	ds	1
   810  000020                     CRC8@sum:
   811                           	opt stack 0
   812  000020                     GetDataDict@numbofbytes:
   813                           	opt stack 0
   814  000020                     SetDataDict@numbofbytes:
   815                           	opt stack 0
   816  000020                     ComputeStorageData@i:
   817                           	opt stack 0
   818                           
   819                           ; 2 bytes @ 0x1F
   820  000020                     	ds	1
   821  000021                     ??_Delay:
   822  000021                     CRC8@extract:
   823                           	opt stack 0
   824  000021                     GetDataDict@Error:
   825                           	opt stack 0
   826  000021                     SetDataDict@Error:
   827                           	opt stack 0
   828  000021                     FaultsCollector@sendVal:
   829                           	opt stack 0
   830  000021                     SetPin595@value:
   831                           	opt stack 0
   832  000021                     UART_buff_modulo_inc@my_value:
   833                           	opt stack 0
   834  000021                     cobs_encode@src_ptr:
   835                           	opt stack 0
   836  000021                     cobs_decode@src_ptr:
   837                           	opt stack 0
   838  000021                     memset@n:
   839                           	opt stack 0
   840                           
   841                           ; 2 bytes @ 0x20
   842  000021                     	ds	1
   843  000022                     CRC8@tempI:
   844                           	opt stack 0
   845  000022                     GetDataDict@DataTable:
   846                           	opt stack 0
   847  000022                     SetDataDict@DataTable:
   848                           	opt stack 0
   849  000022                     Delay@i:
   850                           	opt stack 0
   851                           
   852                           ; 4 bytes @ 0x21
   853  000022                     	ds	1
   854  000023                     ??_SetPin595:
   855  000023                     CRC8@crc:
   856                           	opt stack 0
   857  000023                     GetDataDict@DataCount:
   858                           	opt stack 0
   859  000023                     SetDataDict@DataCount:
   860                           	opt stack 0
   861  000023                     FaultsCollector@i:
   862                           	opt stack 0
   863  000023                     UART_buff_put@_this:
   864                           	opt stack 0
   865  000023                     UART_buff_get@_this:
   866                           	opt stack 0
   867  000023                     cobs_encode@src_len:
   868                           	opt stack 0
   869  000023                     cobs_decode@src_len:
   870                           	opt stack 0
   871  000023                     memset@p:
   872                           	opt stack 0
   873                           
   874                           ; 2 bytes @ 0x22
   875  000023                     	ds	1
   876  000024                     GetDataDict@ReturnCounter:
   877                           	opt stack 0
   878  000024                     SetDataDict@ReturnCounter:
   879                           	opt stack 0
   880                           
   881                           ; 1 bytes @ 0x23
   882  000024                     	ds	1
   883  000025                     ??_cobs_encode:
   884  000025                     ??_cobs_decode:
   885  000025                     ??_UART_buff_get:
   886  000025                     UART_buff_put@c:
   887                           	opt stack 0
   888  000025                     UART_buff_init@_this:
   889                           	opt stack 0
   890  000025                     UART_buff_flush@_this:
   891                           	opt stack 0
   892                           
   893                           ; 2 bytes @ 0x24
   894  000025                     	ds	1
   895  000026                     ??_UART_buff_put:
   896  000026                     writeRegisters@val:
   897                           	opt stack 0
   898  000026                     PotSetpoint@new_point:
   899                           	opt stack 0
   900  000026                     PotClear@x:
   901                           	opt stack 0
   902                           
   903                           ; 2 bytes @ 0x25
   904  000026                     	ds	1
   905  000027                     UART_buff_get@c:
   906                           	opt stack 0
   907  000027                     EnableSlavePower@onof:
   908                           	opt stack 0
   909  000027                     UART_buff_flush@clearBuffer:
   910                           	opt stack 0
   911                           
   912                           ; 2 bytes @ 0x26
   913  000027                     	ds	1
   914  000028                     ??_PotSetpoint:
   915  000028                     Send_put@_data:
   916                           	opt stack 0
   917  000028                     writeRegisters@i:
   918                           	opt stack 0
   919                           
   920                           ; 2 bytes @ 0x27
   921  000028                     	ds	1
   922  000029                     ??_sendData:
   923  000029                     EnableSlavePower@slave:
   924                           	opt stack 0
   925                           
   926                           ; 1 bytes @ 0x28
   927  000029                     	ds	1
   928  00002A                     ??_processPowerRequest:
   929  00002A                     Clear595@i:
   930                           	opt stack 0
   931                           
   932                           ; 2 bytes @ 0x29
   933  00002A                     	ds	2
   934  00002C                     processPowerRequest@powerSet:
   935                           	opt stack 0
   936                           
   937                           ; 1 bytes @ 0x2B
   938  00002C                     	ds	1
   939  00002D                     tblptru	equ	0xFF8
   940                           tblptrh	equ	0xFF7
   941                           tblptrl	equ	0xFF6
   942                           tablat	equ	0xFF5
   943                           postinc0	equ	0xFEE
   944                           wreg	equ	0xFE8
   945                           postdec1	equ	0xFE5
   946                           fsr1l	equ	0xFE1
   947                           
   948                           ; 1 bytes @ 0x2C
   949 ;;
   950 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   951 ;;
   952 ;; *************** function _main *****************
   953 ;; Defined at:
   954 ;;		line 11 in file "main.c"
   955 ;; Parameters:    Size  Location     Type
   956 ;;		None
   957 ;; Auto vars:     Size  Location     Type
   958 ;;  j               2   22[BANK1 ] int 
   959 ;;  i               2   20[BANK1 ] int 
   960 ;;  UP              1   24[BANK1 ] unsigned char 
   961 ;; Return value:  Size  Location     Type
   962 ;;                  1    wreg      void 
   963 ;; Registers used:
   964 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   965 ;; Tracked objects:
   966 ;;		On entry : 0/0
   967 ;;		On exit  : 0/0
   968 ;;		Unchanged: 0/0
   969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   970 ;;      Params:         0       0       0       0       0       0       0
   971 ;;      Locals:         0       0       5       0       0       0       0
   972 ;;      Temps:          0       0       0       0       0       0       0
   973 ;;      Totals:         0       0       5       0       0       0       0
   974 ;;Total ram usage:        5 bytes
   975 ;; Hardware stack levels required when called:   13
   976 ;; This function calls:
   977 ;;		_ComputeStorageData
   978 ;;		_CoolingCheck
   979 ;;		_CoolingStart
   980 ;;		_CoolingStop
   981 ;;		_PDUStartup
   982 ;;		_PWM4_LoadDutyValue
   983 ;;		_PotSetpoint
   984 ;;		_SYSTEM_Initialize
   985 ;;		_updateComms
   986 ;; This function is called by:
   987 ;;		Startup code after reset
   988 ;; This function uses a non-reentrant model
   989 ;;
   990                           
   991                           	psect	text0
   992  00189A                     __ptext0:
   993                           	opt stack 0
   994  00189A                     _main:
   995                           	opt stack 18
   996                           
   997                           ;main.c: 13: SYSTEM_Initialize();
   998                           
   999                           ;incstack = 0
  1000  00189A  EC5E  F010         	call	_SYSTEM_Initialize	;wreg free
  1001                           
  1002                           ;main.c: 14: PDUStartup();
  1003  00189E  ECBA  F00D         	call	_PDUStartup	;wreg free
  1004                           
  1005                           ;main.c: 33: (INTCONbits.GIE = 1);
  1006  0018A2  8EF2               	bsf	intcon,7,c	;volatile
  1007                           
  1008                           ;main.c: 36: (INTCONbits.PEIE = 1);
  1009  0018A4  8CF2               	bsf	intcon,6,c	;volatile
  1010                           
  1011                           ;main.c: 56: PotSetpoint(0);
  1012  0018A6  0E00               	movlw	0
  1013  0018A8  6E27               	movwf	PotSetpoint@new_point+1,c
  1014  0018AA  0E00               	movlw	0
  1015  0018AC  6E26               	movwf	PotSetpoint@new_point,c
  1016  0018AE  EC61  F009         	call	_PotSetpoint	;wreg free
  1017                           
  1018                           ;main.c: 57: PWM4_LoadDutyValue(0);
  1019  0018B2  0E00               	movlw	0
  1020  0018B4  6E1E               	movwf	PWM4_LoadDutyValue@dutyValue+1,c
  1021  0018B6  0E00               	movlw	0
  1022  0018B8  6E1D               	movwf	PWM4_LoadDutyValue@dutyValue,c
  1023  0018BA  ECC4  F00F         	call	_PWM4_LoadDutyValue	;wreg free
  1024                           
  1025                           ;main.c: 58: LATCbits.LATC5 = 0;
  1026  0018BE  9A8B               	bcf	3979,5,c	;volatile
  1027                           
  1028                           ;main.c: 59: int i = 0;
  1029  0018C0  0E00               	movlw	0
  1030  0018C2  0101               	movlb	1	; () banked
  1031  0018C4  6FF7               	movwf	(main@i+1)& (0+255),b
  1032  0018C6  0E00               	movlw	0
  1033  0018C8  6FF6               	movwf	main@i& (0+255),b
  1034                           
  1035                           ; BSR set to: 1
  1036                           ;main.c: 60: bool UP = 0;
  1037  0018CA  0E00               	movlw	0
  1038  0018CC  0101               	movlb	1	; () banked
  1039  0018CE  6FFA               	movwf	main@UP& (0+255),b
  1040                           
  1041                           ;main.c: 61: ComputeStorageData();
  1042  0018D0  EC51  F00A         	call	_ComputeStorageData	;wreg free
  1043                           
  1044                           ;main.c: 63: int j = 1;
  1045  0018D4  0E00               	movlw	0
  1046  0018D6  0101               	movlb	1	; () banked
  1047  0018D8  6FF9               	movwf	(main@j+1)& (0+255),b
  1048  0018DA  0E01               	movlw	1
  1049  0018DC  6FF8               	movwf	main@j& (0+255),b
  1050  0018DE                     l4484:
  1051                           
  1052                           ;main.c: 65: updateComms();
  1053  0018DE  EC36  F00F         	call	_updateComms	;wreg free
  1054                           
  1055                           ;main.c: 66: if(CoolingCheck() && UP == 0){
  1056  0018E2  EC39  F011         	call	_CoolingCheck	;wreg free
  1057  0018E6  0900               	iorlw	0
  1058  0018E8  B4D8               	btfsc	status,2,c
  1059  0018EA  D00A               	goto	l4494
  1060  0018EC  0101               	movlb	1	; () banked
  1061  0018EE  51FA               	movf	main@UP& (0+255),w,b
  1062  0018F0  0101               	movlb	1	; () banked
  1063  0018F2  A4D8               	btfss	status,2,c
  1064  0018F4  D005               	goto	l4494
  1065                           
  1066                           ; BSR set to: 1
  1067                           ;main.c: 67: UP = 1;
  1068  0018F6  0E01               	movlw	1
  1069  0018F8  0101               	movlb	1	; () banked
  1070  0018FA  6FFA               	movwf	main@UP& (0+255),b
  1071                           
  1072                           ; BSR set to: 1
  1073                           ;main.c: 68: CoolingStart();
  1074  0018FC  EC90  F010         	call	_CoolingStart	;wreg free
  1075  001900                     l4494:
  1076                           
  1077                           ;main.c: 69: }
  1078                           ;main.c: 70: if(!CoolingCheck() && UP == 1){
  1079  001900  EC39  F011         	call	_CoolingCheck	;wreg free
  1080  001904  0900               	iorlw	0
  1081  001906  A4D8               	btfss	status,2,c
  1082  001908  D7EA               	goto	l4484
  1083  00190A  0101               	movlb	1	; () banked
  1084  00190C  05FA               	decf	main@UP& (0+255),w,b
  1085  00190E  A4D8               	btfss	status,2,c
  1086  001910  D7E6               	goto	l4484
  1087                           
  1088                           ; BSR set to: 1
  1089                           ;main.c: 71: UP = 0;
  1090  001912  0E00               	movlw	0
  1091  001914  0101               	movlb	1	; () banked
  1092  001916  6FFA               	movwf	main@UP& (0+255),b
  1093                           
  1094                           ; BSR set to: 1
  1095                           ;main.c: 72: CoolingStop();
  1096  001918  EC0F  F011         	call	_CoolingStop	;wreg free
  1097  00191C  D7E0               	goto	l4484
  1098  00191E                     __end_of_main:
  1099                           	opt stack 0
  1100                           tblptru	equ	0xFF8
  1101                           tblptrh	equ	0xFF7
  1102                           tblptrl	equ	0xFF6
  1103                           tablat	equ	0xFF5
  1104                           intcon	equ	0xFF2
  1105                           postinc0	equ	0xFEE
  1106                           wreg	equ	0xFE8
  1107                           postdec1	equ	0xFE5
  1108                           fsr1l	equ	0xFE1
  1109                           status	equ	0xFD8
  1110                           
  1111 ;; *************** function _updateComms *****************
  1112 ;; Defined at:
  1113 ;;		line 18 in file "Communications.c"
  1114 ;; Parameters:    Size  Location     Type
  1115 ;;		None
  1116 ;; Auto vars:     Size  Location     Type
  1117 ;;  DataGet         2  101[BANK0 ] unsigned char [2]
  1118 ;; Return value:  Size  Location     Type
  1119 ;;                  1    wreg      void 
  1120 ;; Registers used:
  1121 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1122 ;; Tracked objects:
  1123 ;;		On entry : 0/0
  1124 ;;		On exit  : 0/0
  1125 ;;		Unchanged: 0/0
  1126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1127 ;;      Params:         0       0       0       0       0       0       0
  1128 ;;      Locals:         0       2       0       0       0       0       0
  1129 ;;      Temps:          0       0       0       0       0       0       0
  1130 ;;      Totals:         0       2       0       0       0       0       0
  1131 ;;Total ram usage:        2 bytes
  1132 ;; Hardware stack levels used:    1
  1133 ;; Hardware stack levels required when called:   12
  1134 ;; This function calls:
  1135 ;;		_FaultsCollector
  1136 ;;		_GetDataDict
  1137 ;;		_SetDataDict
  1138 ;;		_processPowerRequest
  1139 ;;		_receiveData
  1140 ;; This function is called by:
  1141 ;;		_main
  1142 ;; This function uses a non-reentrant model
  1143 ;;
  1144                           
  1145                           	psect	text1
  1146  001E6C                     __ptext1:
  1147                           	opt stack 0
  1148  001E6C                     _updateComms:
  1149                           	opt stack 18
  1150                           
  1151                           ;Communications.c: 19: if (receiveData()){
  1152                           
  1153                           ;incstack = 0
  1154  001E6C  ECD6  F008         	call	_receiveData	;wreg free
  1155  001E70  0900               	iorlw	0
  1156  001E72  B4D8               	btfsc	status,2,c
  1157  001E74  0012               	return	
  1158                           
  1159                           ;Communications.c: 20: unsigned char DataGet[2];
  1160                           ;Communications.c: 21: GetDataDict(4, 1, DataGet, 1);
  1161  001E76  0E01               	movlw	1
  1162  001E78  6E1D               	movwf	GetDataDict@DataTableIndex,c
  1163  001E7A  0EC5               	movlw	low updateComms@DataGet
  1164  001E7C  6E1E               	movwf	GetDataDict@DataArray,c
  1165  001E7E  0E00               	movlw	high updateComms@DataGet
  1166  001E80  6E1F               	movwf	GetDataDict@DataArray+1,c
  1167  001E82  0E01               	movlw	1
  1168  001E84  6E20               	movwf	GetDataDict@numbofbytes,c
  1169  001E86  0E04               	movlw	4
  1170  001E88  EC6F  F00B         	call	_GetDataDict
  1171                           
  1172                           ;Communications.c: 22: processPowerRequest(DataGet[0]);
  1173  001E8C  0100               	movlb	0	; () banked
  1174  001E8E  51C5               	movf	updateComms@DataGet& (0+255),w,b
  1175  001E90  EC2B  F007         	call	_processPowerRequest
  1176                           
  1177                           ;Communications.c: 23: DataGet[0] = FaultsCollector();
  1178  001E94  EC4B  F00E         	call	_FaultsCollector	;wreg free
  1179  001E98  0100               	movlb	0	; () banked
  1180  001E9A  6FC5               	movwf	updateComms@DataGet& (0+255),b
  1181                           
  1182                           ; BSR set to: 0
  1183                           ;Communications.c: 24: SetDataDict(4, 2, DataGet, 1);
  1184  001E9C  0E02               	movlw	2
  1185  001E9E  6E1D               	movwf	SetDataDict@DataTableIndex,c
  1186  001EA0  0EC5               	movlw	low updateComms@DataGet
  1187  001EA2  6E1E               	movwf	SetDataDict@DataArray,c
  1188  001EA4  0E00               	movlw	high updateComms@DataGet
  1189  001EA6  6E1F               	movwf	SetDataDict@DataArray+1,c
  1190  001EA8  0E01               	movlw	1
  1191  001EAA  6E20               	movwf	SetDataDict@numbofbytes,c
  1192  001EAC  0E04               	movlw	4
  1193  001EAE  EC23  F00B         	call	_SetDataDict
  1194  001EB2  0012               	return	
  1195  001EB4                     __end_of_updateComms:
  1196                           	opt stack 0
  1197                           tblptru	equ	0xFF8
  1198                           tblptrh	equ	0xFF7
  1199                           tblptrl	equ	0xFF6
  1200                           tablat	equ	0xFF5
  1201                           intcon	equ	0xFF2
  1202                           postinc0	equ	0xFEE
  1203                           wreg	equ	0xFE8
  1204                           postdec1	equ	0xFE5
  1205                           fsr1l	equ	0xFE1
  1206                           status	equ	0xFD8
  1207                           
  1208 ;; *************** function _receiveData *****************
  1209 ;; Defined at:
  1210 ;;		line 85 in file "CarCom.c"
  1211 ;; Parameters:    Size  Location     Type
  1212 ;;		None
  1213 ;; Auto vars:     Size  Location     Type
  1214 ;;  result          3   17[BANK1 ] struct .
  1215 ;;  i               2   14[BANK1 ] int 
  1216 ;;  Data            1   16[BANK1 ] unsigned char 
  1217 ;;  CS              1   13[BANK1 ] unsigned char 
  1218 ;; Return value:  Size  Location     Type
  1219 ;;                  1    wreg      unsigned char 
  1220 ;; Registers used:
  1221 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1222 ;; Tracked objects:
  1223 ;;		On entry : 0/0
  1224 ;;		On exit  : 0/0
  1225 ;;		Unchanged: 0/0
  1226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1227 ;;      Params:         0       0       0       0       0       0       0
  1228 ;;      Locals:         0       0       7       0       0       0       0
  1229 ;;      Temps:          0       5       0       0       0       0       0
  1230 ;;      Totals:         0       5       7       0       0       0       0
  1231 ;;Total ram usage:       12 bytes
  1232 ;; Hardware stack levels used:    1
  1233 ;; Hardware stack levels required when called:   11
  1234 ;; This function calls:
  1235 ;;		_CRC8
  1236 ;;		_ClearBuffer
  1237 ;;		_ComController
  1238 ;;		_Receive_available
  1239 ;;		_Receive_get
  1240 ;;		_cobs_decode
  1241 ;; This function is called by:
  1242 ;;		_updateComms
  1243 ;; This function uses a non-reentrant model
  1244 ;;
  1245                           
  1246                           	psect	text2
  1247  0011AC                     __ptext2:
  1248                           	opt stack 0
  1249  0011AC                     _receiveData:
  1250                           	opt stack 18
  1251                           
  1252                           ;CarCom.c: 86: if(Receive_available()>5){
  1253                           
  1254                           ;incstack = 0
  1255  0011AC  ECBA  F010         	call	_Receive_available	;wreg free
  1256  0011B0  BE20               	btfsc	?_Receive_available+1,7,c
  1257  0011B2  D085               	goto	l4290
  1258  0011B4  5020               	movf	?_Receive_available+1,w,c
  1259  0011B6  E104               	bnz	u2780
  1260  0011B8  0E06               	movlw	6
  1261  0011BA  5C1F               	subwf	?_Receive_available,w,c
  1262  0011BC  A0D8               	btfss	status,0,c
  1263  0011BE  D07F               	goto	l4290
  1264  0011C0                     u2780:
  1265                           
  1266                           ;CarCom.c: 87: if(Receive_get() == 5){
  1267  0011C0  EC18  F011         	call	_Receive_get	;wreg free
  1268  0011C4  0A05               	xorlw	5
  1269  0011C6  A4D8               	btfss	status,2,c
  1270  0011C8  D07A               	goto	l4290
  1271                           
  1272                           ;CarCom.c: 88: int i = 0;
  1273  0011CA  0E00               	movlw	0
  1274  0011CC  0101               	movlb	1	; () banked
  1275  0011CE  6FF1               	movwf	(receiveData@i+1)& (0+255),b
  1276  0011D0  0E00               	movlw	0
  1277  0011D2  6FF0               	movwf	receiveData@i& (0+255),b
  1278                           
  1279                           ;CarCom.c: 89: unsigned char Data = 0;
  1280  0011D4  0E00               	movlw	0
  1281  0011D6  0101               	movlb	1	; () banked
  1282  0011D8  6FF2               	movwf	receiveData@Data& (0+255),b
  1283  0011DA                     l4270:
  1284                           
  1285                           ; BSR set to: 1
  1286                           ;CarCom.c: 91: Data = Receive_get();
  1287  0011DA  EC18  F011         	call	_Receive_get	;wreg free
  1288  0011DE  0101               	movlb	1	; () banked
  1289  0011E0  6FF2               	movwf	receiveData@Data& (0+255),b
  1290                           
  1291                           ; BSR set to: 1
  1292                           ;CarCom.c: 92: ReciveArray[i] = Data;
  1293  0011E2  0EC4               	movlw	low _ReciveArray
  1294  0011E4  0101               	movlb	1	; () banked
  1295  0011E6  25F0               	addwf	receiveData@i& (0+255),w,b
  1296  0011E8  6ED9               	movwf	fsr2l,c
  1297  0011EA  0E01               	movlw	high _ReciveArray
  1298  0011EC  0101               	movlb	1	; () banked
  1299  0011EE  21F1               	addwfc	(receiveData@i+1)& (0+255),w,b
  1300  0011F0  6EDA               	movwf	fsr2h,c
  1301  0011F2  C1F2  FFDF         	movff	receiveData@Data,indf2
  1302                           
  1303                           ; BSR set to: 1
  1304                           ;CarCom.c: 93: _delay((unsigned long)((200)*(8000000/4000000.0)));
  1305  0011F6  0E85               	movlw	133
  1306  0011F8                     u3077:
  1307  0011F8  2EE8               	decfsz	wreg,f,c
  1308  0011FA  D7FE               	bra	u3077
  1309  0011FC  F000               	nop	
  1310                           
  1311                           ;CarCom.c: 95: i++;
  1312  0011FE  0101               	movlb	1	; () banked
  1313  001200  4BF0               	infsnz	receiveData@i& (0+255),f,b
  1314  001202  2BF1               	incf	(receiveData@i+1)& (0+255),f,b
  1315                           
  1316                           ; BSR set to: 1
  1317                           ;CarCom.c: 96: }while(Data != 0x00);
  1318  001204  0101               	movlb	1	; () banked
  1319  001206  51F2               	movf	receiveData@Data& (0+255),w,b
  1320  001208  0101               	movlb	1	; () banked
  1321  00120A  A4D8               	btfss	status,2,c
  1322  00120C  D7E6               	goto	l4270
  1323                           
  1324                           ; BSR set to: 1
  1325                           ;CarCom.c: 100: ClearBuffer();
  1326                           
  1327                           ; BSR set to: 1
  1328  00120E  ECD0  F010         	call	_ClearBuffer	;wreg free
  1329                           
  1330                           ;CarCom.c: 102: cobs_decode_result result;
  1331                           ;CarCom.c: 104: result = cobs_decode(ProcessArray, sizeof(ProcessArray), ReciveArray, i)
      +                          ;
  1332  001212  0EA6               	movlw	low _ProcessArray
  1333  001214  6E1D               	movwf	cobs_decode@dst_buf_ptr,c
  1334  001216  0E01               	movlw	high _ProcessArray
  1335  001218  6E1E               	movwf	cobs_decode@dst_buf_ptr+1,c
  1336  00121A  0E00               	movlw	0
  1337  00121C  6E20               	movwf	cobs_decode@dst_buf_len+1,c
  1338  00121E  0E1E               	movlw	30
  1339  001220  6E1F               	movwf	cobs_decode@dst_buf_len,c
  1340  001222  0EC4               	movlw	low _ReciveArray
  1341  001224  6E21               	movwf	cobs_decode@src_ptr,c
  1342  001226  0E01               	movlw	high _ReciveArray
  1343  001228  6E22               	movwf	cobs_decode@src_ptr+1,c
  1344  00122A  C1F0  F023         	movff	receiveData@i,cobs_decode@src_len
  1345  00122E  C1F1  F024         	movff	receiveData@i+1,cobs_decode@src_len+1
  1346  001232  EC80  F005         	call	_cobs_decode	;wreg free
  1347  001236  C01D  F1F3         	movff	?_cobs_decode,receiveData@result
  1348  00123A  C01E  F1F4         	movff	?_cobs_decode+1,receiveData@result+1
  1349  00123E  C01F  F1F5         	movff	?_cobs_decode+2,receiveData@result+2
  1350                           
  1351                           ;CarCom.c: 106: unsigned char CS = CRC8(ProcessArray, result.out_len-2);
  1352  001242  0EA6               	movlw	low _ProcessArray
  1353  001244  6E1D               	movwf	CRC8@data,c
  1354  001246  0E01               	movlw	high _ProcessArray
  1355  001248  6E1E               	movwf	CRC8@data+1,c
  1356  00124A  0101               	movlb	1	; () banked
  1357  00124C  51F3               	movf	receiveData@result& (0+255),w,b
  1358  00124E  0FFE               	addlw	254
  1359  001250  6E1F               	movwf	CRC8@len,c
  1360  001252  ECC7  F00E         	call	_CRC8	;wreg free
  1361  001256  0101               	movlb	1	; () banked
  1362  001258  6FEF               	movwf	receiveData@CS& (0+255),b
  1363                           
  1364                           ; BSR set to: 1
  1365                           ;CarCom.c: 108: if(ProcessArray[result.out_len-2] == CS){
  1366  00125A  0EFE               	movlw	254
  1367  00125C  0100               	movlb	0	; () banked
  1368  00125E  6FC0               	movwf	??_receiveData& (0+255),b
  1369  001260  0EFF               	movlw	255
  1370  001262  0100               	movlb	0	; () banked
  1371  001264  6FC1               	movwf	(??_receiveData+1)& (0+255),b
  1372  001266  C1F3  F0C2         	movff	receiveData@result,??_receiveData+2
  1373  00126A  C1F4  F0C3         	movff	receiveData@result+1,??_receiveData+3
  1374  00126E  0100               	movlb	0	; () banked
  1375  001270  51C0               	movf	??_receiveData& (0+255),w,b
  1376  001272  0100               	movlb	0	; () banked
  1377  001274  27C2               	addwf	(??_receiveData+2)& (0+255),f,b
  1378  001276  0100               	movlb	0	; () banked
  1379  001278  51C1               	movf	(??_receiveData+1)& (0+255),w,b
  1380  00127A  0100               	movlb	0	; () banked
  1381  00127C  23C3               	addwfc	(??_receiveData+3)& (0+255),f,b
  1382  00127E  0EA6               	movlw	low _ProcessArray
  1383  001280  0100               	movlb	0	; () banked
  1384  001282  25C2               	addwf	(??_receiveData+2)& (0+255),w,b
  1385  001284  6ED9               	movwf	fsr2l,c
  1386  001286  0E01               	movlw	high _ProcessArray
  1387  001288  0100               	movlb	0	; () banked
  1388  00128A  21C3               	addwfc	(??_receiveData+3)& (0+255),w,b
  1389  00128C  6EDA               	movwf	fsr2h,c
  1390  00128E  0101               	movlb	1	; () banked
  1391  001290  51EF               	movf	receiveData@CS& (0+255),w,b
  1392  001292  18DE               	xorwf	postinc2,w,c
  1393  001294  A4D8               	btfss	status,2,c
  1394  001296  D013               	goto	l4290
  1395                           
  1396                           ; BSR set to: 1
  1397                           
  1398                           ;CarCom.c: 109: do { LATA3 = ~LATA3; } while(0);
  1399  001298  B689               	btfsc	3977,3,c	;volatile
  1400  00129A  D002               	goto	u2820
  1401  00129C  8689               	bsf	3977,3,c	;volatile
  1402  00129E  D001               	goto	l4284
  1403  0012A0                     u2820:
  1404  0012A0  9689               	bcf	3977,3,c	;volatile
  1405  0012A2                     l4284:
  1406                           
  1407                           ;CarCom.c: 110: ComController(ProcessArray,result.out_len);
  1408  0012A2  0EA6               	movlw	low _ProcessArray
  1409  0012A4  0100               	movlb	0	; () banked
  1410  0012A6  6FBA               	movwf	ComController@DTI& (0+255),b
  1411  0012A8  0E01               	movlw	high _ProcessArray
  1412  0012AA  0100               	movlb	0	; () banked
  1413  0012AC  6FBB               	movwf	(ComController@DTI+1)& (0+255),b
  1414  0012AE  C1F3  F0BC         	movff	receiveData@result,ComController@lenth
  1415  0012B2  C1F4  F0BD         	movff	receiveData@result+1,ComController@lenth+1
  1416  0012B6  ECA0  F003         	call	_ComController	;wreg free
  1417                           
  1418                           ;CarCom.c: 111: return 1;
  1419  0012BA  0E01               	movlw	1
  1420  0012BC  0012               	return	
  1421  0012BE                     l4290:
  1422                           
  1423                           ;CarCom.c: 120: }
  1424                           ;CarCom.c: 122: return 0;
  1425  0012BE  0E00               	movlw	0
  1426  0012C0  0012               	return	
  1427  0012C2                     __end_of_receiveData:
  1428                           	opt stack 0
  1429                           tblptru	equ	0xFF8
  1430                           tblptrh	equ	0xFF7
  1431                           tblptrl	equ	0xFF6
  1432                           tablat	equ	0xFF5
  1433                           intcon	equ	0xFF2
  1434                           postinc0	equ	0xFEE
  1435                           wreg	equ	0xFE8
  1436                           postdec1	equ	0xFE5
  1437                           fsr1l	equ	0xFE1
  1438                           indf2	equ	0xFDF
  1439                           postinc2	equ	0xFDE
  1440                           fsr2h	equ	0xFDA
  1441                           fsr2l	equ	0xFD9
  1442                           status	equ	0xFD8
  1443                           
  1444 ;; *************** function _cobs_decode *****************
  1445 ;; Defined at:
  1446 ;;		line 115 in file "COBS.c"
  1447 ;; Parameters:    Size  Location     Type
  1448 ;;  dst_buf_ptr     2   28[COMRAM] PTR unsigned char 
  1449 ;;		 -> ProcessArray(30), 
  1450 ;;  dst_buf_len     2   30[COMRAM] unsigned int 
  1451 ;;  src_ptr         2   32[COMRAM] PTR const unsigned char 
  1452 ;;		 -> ReciveArray(30), 
  1453 ;;  src_len         2   34[COMRAM] unsigned int 
  1454 ;; Auto vars:     Size  Location     Type
  1455 ;;  result          3   11[BANK0 ] struct .
  1456 ;;  dst_write_pt    2    8[BANK0 ] PTR unsigned char 
  1457 ;;		 -> ProcessArray(30), 
  1458 ;;  remaining_by    2    6[BANK0 ] unsigned int 
  1459 ;;  dst_buf_end_    2    2[BANK0 ] PTR unsigned char 
  1460 ;;		 -> ProcessArray(30), 
  1461 ;;  src_end_ptr     2    0[BANK0 ] PTR const unsigned char 
  1462 ;;		 -> ReciveArray(30), 
  1463 ;;  len_code        1   10[BANK0 ] unsigned char 
  1464 ;;  i               1    5[BANK0 ] unsigned char 
  1465 ;;  src_byte        1    4[BANK0 ] unsigned char 
  1466 ;; Return value:  Size  Location     Type
  1467 ;;                  3   28[COMRAM] struct .
  1468 ;; Registers used:
  1469 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1470 ;; Tracked objects:
  1471 ;;		On entry : 0/0
  1472 ;;		On exit  : 0/0
  1473 ;;		Unchanged: 0/0
  1474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1475 ;;      Params:         8       0       0       0       0       0       0
  1476 ;;      Locals:         0      14       0       0       0       0       0
  1477 ;;      Temps:          2       0       0       0       0       0       0
  1478 ;;      Totals:        10      14       0       0       0       0       0
  1479 ;;Total ram usage:       24 bytes
  1480 ;; Hardware stack levels used:    1
  1481 ;; Hardware stack levels required when called:    6
  1482 ;; This function calls:
  1483 ;;		Nothing
  1484 ;; This function is called by:
  1485 ;;		_receiveData
  1486 ;; This function uses a non-reentrant model
  1487 ;;
  1488                           
  1489                           	psect	text3
  1490  000B00                     __ptext3:
  1491                           	opt stack 0
  1492  000B00                     _cobs_decode:
  1493                           	opt stack 22
  1494                           
  1495                           ;COBS.c: 117: cobs_decode_result result = { 0, COBS_DECODE_OK };
  1496                           
  1497                           ;incstack = 0
  1498  000B00  C030  F06B         	movff	cobs_decode@F192,cobs_decode@result
  1499  000B04  C031  F06C         	movff	cobs_decode@F192+1,cobs_decode@result+1
  1500  000B08  C032  F06D         	movff	cobs_decode@F192+2,cobs_decode@result+2
  1501                           
  1502                           ;COBS.c: 118: const uint8_t * src_end_ptr = src_ptr + src_len;
  1503  000B0C  5023               	movf	cobs_decode@src_len,w,c
  1504  000B0E  2421               	addwf	cobs_decode@src_ptr,w,c
  1505  000B10  0100               	movlb	0	; () banked
  1506  000B12  6F60               	movwf	cobs_decode@src_end_ptr& (0+255),b
  1507  000B14  5024               	movf	cobs_decode@src_len+1,w,c
  1508  000B16  2022               	addwfc	cobs_decode@src_ptr+1,w,c
  1509  000B18  0100               	movlb	0	; () banked
  1510  000B1A  6F61               	movwf	(cobs_decode@src_end_ptr+1)& (0+255),b
  1511                           
  1512                           ;COBS.c: 119: uint8_t * dst_buf_end_ptr = dst_buf_ptr + dst_buf_len;
  1513  000B1C  501F               	movf	cobs_decode@dst_buf_len,w,c
  1514  000B1E  241D               	addwf	cobs_decode@dst_buf_ptr,w,c
  1515  000B20  0100               	movlb	0	; () banked
  1516  000B22  6F62               	movwf	cobs_decode@dst_buf_end_ptr& (0+255),b
  1517  000B24  5020               	movf	cobs_decode@dst_buf_len+1,w,c
  1518  000B26  201E               	addwfc	cobs_decode@dst_buf_ptr+1,w,c
  1519  000B28  0100               	movlb	0	; () banked
  1520  000B2A  6F63               	movwf	(cobs_decode@dst_buf_end_ptr+1)& (0+255),b
  1521                           
  1522                           ;COBS.c: 120: uint8_t * dst_write_ptr = dst_buf_ptr;
  1523  000B2C  C01D  F068         	movff	cobs_decode@dst_buf_ptr,cobs_decode@dst_write_ptr
  1524  000B30  C01E  F069         	movff	cobs_decode@dst_buf_ptr+1,cobs_decode@dst_write_ptr+1
  1525                           
  1526                           ;COBS.c: 121: size_t remaining_bytes;
  1527                           ;COBS.c: 122: uint8_t src_byte;
  1528                           ;COBS.c: 123: uint8_t i;
  1529                           ;COBS.c: 124: uint8_t len_code;
  1530                           ;COBS.c: 128: if ((dst_buf_ptr == (0)) || (src_ptr == (0)))
  1531  000B34  501D               	movf	cobs_decode@dst_buf_ptr,w,c
  1532  000B36  101E               	iorwf	cobs_decode@dst_buf_ptr+1,w,c
  1533  000B38  B4D8               	btfsc	status,2,c
  1534  000B3A  D004               	goto	l4084
  1535                           
  1536                           ; BSR set to: 0
  1537  000B3C  5021               	movf	cobs_decode@src_ptr,w,c
  1538  000B3E  1022               	iorwf	cobs_decode@src_ptr+1,w,c
  1539  000B40  A4D8               	btfss	status,2,c
  1540  000B42  D00A               	goto	l4090
  1541  000B44                     l4084:
  1542                           
  1543                           ; BSR set to: 0
  1544                           ;COBS.c: 129: {
  1545                           ;COBS.c: 130: result.status = COBS_DECODE_NULL_POINTER;
  1546  000B44  0E01               	movlw	1
  1547  000B46  0100               	movlb	0	; () banked
  1548  000B48  6F6D               	movwf	(cobs_decode@result+2)& (0+255),b
  1549                           
  1550                           ; BSR set to: 0
  1551                           ;COBS.c: 131: return result;
  1552  000B4A  C06B  F01D         	movff	cobs_decode@result,?_cobs_decode
  1553  000B4E  C06C  F01E         	movff	cobs_decode@result+1,?_cobs_decode+1
  1554  000B52  C06D  F01F         	movff	cobs_decode@result+2,?_cobs_decode+2
  1555                           
  1556                           ; BSR set to: 0
  1557  000B56  0012               	return	
  1558  000B58                     l4090:
  1559                           
  1560                           ; BSR set to: 0
  1561                           ;COBS.c: 132: }
  1562                           ;COBS.c: 134: if (src_len != 0)
  1563  000B58  5023               	movf	cobs_decode@src_len,w,c
  1564  000B5A  1024               	iorwf	cobs_decode@src_len+1,w,c
  1565  000B5C  B4D8               	btfsc	status,2,c
  1566  000B5E  D096               	goto	l4154
  1567  000B60                     l4092:
  1568                           
  1569                           ; BSR set to: 0
  1570                           ;COBS.c: 137: {
  1571                           ;COBS.c: 138: len_code = *src_ptr++;
  1572  000B60  C021  FFD9         	movff	cobs_decode@src_ptr,fsr2l
  1573  000B64  C022  FFDA         	movff	cobs_decode@src_ptr+1,fsr2h
  1574  000B68  50DF               	movf	indf2,w,c
  1575  000B6A  0100               	movlb	0	; () banked
  1576  000B6C  6F6A               	movwf	cobs_decode@len_code& (0+255),b
  1577                           
  1578                           ; BSR set to: 0
  1579  000B6E  4A21               	infsnz	cobs_decode@src_ptr,f,c
  1580  000B70  2A22               	incf	cobs_decode@src_ptr+1,f,c
  1581                           
  1582                           ; BSR set to: 0
  1583                           ;COBS.c: 139: if (len_code == 0)
  1584  000B72  0100               	movlb	0	; () banked
  1585  000B74  516A               	movf	cobs_decode@len_code& (0+255),w,b
  1586  000B76  0100               	movlb	0	; () banked
  1587  000B78  A4D8               	btfss	status,2,c
  1588  000B7A  D003               	goto	l4100
  1589                           
  1590                           ; BSR set to: 0
  1591                           ;COBS.c: 140: {
  1592                           ;COBS.c: 141: result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
  1593  000B7C  0100               	movlb	0	; () banked
  1594  000B7E  856D               	bsf	(cobs_decode@result+2)& (0+255),2,b
  1595                           
  1596                           ;COBS.c: 142: break;
  1597  000B80  D085               	goto	l4154
  1598  000B82                     l4100:
  1599                           
  1600                           ; BSR set to: 0
  1601                           ;COBS.c: 143: }
  1602                           ;COBS.c: 144: len_code--;
  1603  000B82  0100               	movlb	0	; () banked
  1604  000B84  076A               	decf	cobs_decode@len_code& (0+255),f,b
  1605                           
  1606                           ; BSR set to: 0
  1607                           ;COBS.c: 147: remaining_bytes = src_end_ptr - src_ptr;
  1608  000B86  C021  F025         	movff	cobs_decode@src_ptr,??_cobs_decode
  1609  000B8A  C022  F026         	movff	cobs_decode@src_ptr+1,??_cobs_decode+1
  1610  000B8E  1E25               	comf	??_cobs_decode,f,c
  1611  000B90  1E26               	comf	??_cobs_decode+1,f,c
  1612  000B92  4A25               	infsnz	??_cobs_decode,f,c
  1613  000B94  2A26               	incf	??_cobs_decode+1,f,c
  1614  000B96  0100               	movlb	0	; () banked
  1615  000B98  5160               	movf	cobs_decode@src_end_ptr& (0+255),w,b
  1616  000B9A  2425               	addwf	??_cobs_decode,w,c
  1617  000B9C  0100               	movlb	0	; () banked
  1618  000B9E  6F66               	movwf	cobs_decode@remaining_bytes& (0+255),b
  1619  000BA0  0100               	movlb	0	; () banked
  1620  000BA2  5161               	movf	(cobs_decode@src_end_ptr+1)& (0+255),w,b
  1621  000BA4  2026               	addwfc	??_cobs_decode+1,w,c
  1622  000BA6  0100               	movlb	0	; () banked
  1623  000BA8  6F67               	movwf	(cobs_decode@remaining_bytes+1)& (0+255),b
  1624                           
  1625                           ; BSR set to: 0
  1626                           ;COBS.c: 148: if (len_code > remaining_bytes)
  1627  000BAA  0100               	movlb	0	; () banked
  1628  000BAC  516A               	movf	cobs_decode@len_code& (0+255),w,b
  1629  000BAE  0100               	movlb	0	; () banked
  1630  000BB0  5D66               	subwf	cobs_decode@remaining_bytes& (0+255),w,b
  1631  000BB2  0E00               	movlw	0
  1632  000BB4  5967               	subwfb	(cobs_decode@remaining_bytes+1)& (0+255),w,b
  1633  000BB6  B0D8               	btfsc	status,0,c
  1634  000BB8  D004               	goto	l4110
  1635                           
  1636                           ; BSR set to: 0
  1637                           ;COBS.c: 149: {
  1638                           ;COBS.c: 150: result.status |= COBS_DECODE_INPUT_TOO_SHORT;
  1639  000BBA  0100               	movlb	0	; () banked
  1640  000BBC  876D               	bsf	(cobs_decode@result+2)& (0+255),3,b
  1641                           
  1642                           ; BSR set to: 0
  1643                           ;COBS.c: 151: len_code = remaining_bytes;
  1644  000BBE  C066  F06A         	movff	cobs_decode@remaining_bytes,cobs_decode@len_code
  1645  000BC2                     l4110:
  1646                           
  1647                           ; BSR set to: 0
  1648                           ;COBS.c: 152: }
  1649                           ;COBS.c: 155: remaining_bytes = dst_buf_end_ptr - dst_write_ptr;
  1650  000BC2  C068  F025         	movff	cobs_decode@dst_write_ptr,??_cobs_decode
  1651  000BC6  C069  F026         	movff	cobs_decode@dst_write_ptr+1,??_cobs_decode+1
  1652  000BCA  1E25               	comf	??_cobs_decode,f,c
  1653  000BCC  1E26               	comf	??_cobs_decode+1,f,c
  1654  000BCE  4A25               	infsnz	??_cobs_decode,f,c
  1655  000BD0  2A26               	incf	??_cobs_decode+1,f,c
  1656  000BD2  0100               	movlb	0	; () banked
  1657  000BD4  5162               	movf	cobs_decode@dst_buf_end_ptr& (0+255),w,b
  1658  000BD6  2425               	addwf	??_cobs_decode,w,c
  1659  000BD8  0100               	movlb	0	; () banked
  1660  000BDA  6F66               	movwf	cobs_decode@remaining_bytes& (0+255),b
  1661  000BDC  0100               	movlb	0	; () banked
  1662  000BDE  5163               	movf	(cobs_decode@dst_buf_end_ptr+1)& (0+255),w,b
  1663  000BE0  2026               	addwfc	??_cobs_decode+1,w,c
  1664  000BE2  0100               	movlb	0	; () banked
  1665  000BE4  6F67               	movwf	(cobs_decode@remaining_bytes+1)& (0+255),b
  1666                           
  1667                           ; BSR set to: 0
  1668                           ;COBS.c: 156: if (len_code > remaining_bytes)
  1669  000BE6  0100               	movlb	0	; () banked
  1670  000BE8  516A               	movf	cobs_decode@len_code& (0+255),w,b
  1671  000BEA  0100               	movlb	0	; () banked
  1672  000BEC  5D66               	subwf	cobs_decode@remaining_bytes& (0+255),w,b
  1673  000BEE  0E00               	movlw	0
  1674  000BF0  5967               	subwfb	(cobs_decode@remaining_bytes+1)& (0+255),w,b
  1675  000BF2  B0D8               	btfsc	status,0,c
  1676  000BF4  D004               	goto	l4118
  1677                           
  1678                           ; BSR set to: 0
  1679                           ;COBS.c: 157: {
  1680                           ;COBS.c: 158: result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
  1681  000BF6  0100               	movlb	0	; () banked
  1682  000BF8  836D               	bsf	(cobs_decode@result+2)& (0+255),1,b
  1683                           
  1684                           ; BSR set to: 0
  1685                           ;COBS.c: 159: len_code = remaining_bytes;
  1686  000BFA  C066  F06A         	movff	cobs_decode@remaining_bytes,cobs_decode@len_code
  1687  000BFE                     l4118:
  1688                           
  1689                           ; BSR set to: 0
  1690                           ;COBS.c: 160: }
  1691                           ;COBS.c: 162: for (i = len_code; i != 0; i--)
  1692  000BFE  C06A  F065         	movff	cobs_decode@len_code,cobs_decode@i
  1693  000C02                     l4120:
  1694                           
  1695                           ; BSR set to: 0
  1696  000C02  0100               	movlb	0	; () banked
  1697  000C04  5165               	movf	cobs_decode@i& (0+255),w,b
  1698  000C06  0100               	movlb	0	; () banked
  1699  000C08  B4D8               	btfsc	status,2,c
  1700  000C0A  D01C               	goto	l4140
  1701                           
  1702                           ; BSR set to: 0
  1703                           ;COBS.c: 163: {
  1704                           ;COBS.c: 164: src_byte = *src_ptr++;
  1705                           
  1706                           ; BSR set to: 0
  1707                           
  1708                           ; BSR set to: 0
  1709  000C0C  C021  FFD9         	movff	cobs_decode@src_ptr,fsr2l
  1710  000C10  C022  FFDA         	movff	cobs_decode@src_ptr+1,fsr2h
  1711  000C14  50DF               	movf	indf2,w,c
  1712  000C16  0100               	movlb	0	; () banked
  1713  000C18  6F64               	movwf	cobs_decode@src_byte& (0+255),b
  1714                           
  1715                           ; BSR set to: 0
  1716  000C1A  4A21               	infsnz	cobs_decode@src_ptr,f,c
  1717  000C1C  2A22               	incf	cobs_decode@src_ptr+1,f,c
  1718                           
  1719                           ; BSR set to: 0
  1720                           ;COBS.c: 165: if (src_byte == 0)
  1721  000C1E  0100               	movlb	0	; () banked
  1722  000C20  5164               	movf	cobs_decode@src_byte& (0+255),w,b
  1723  000C22  0100               	movlb	0	; () banked
  1724  000C24  A4D8               	btfss	status,2,c
  1725  000C26  D002               	goto	l4132
  1726                           
  1727                           ; BSR set to: 0
  1728                           ;COBS.c: 166: {
  1729                           ;COBS.c: 167: result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
  1730  000C28  0100               	movlb	0	; () banked
  1731  000C2A  856D               	bsf	(cobs_decode@result+2)& (0+255),2,b
  1732  000C2C                     l4132:
  1733                           
  1734                           ; BSR set to: 0
  1735                           ;COBS.c: 168: }
  1736                           ;COBS.c: 169: *dst_write_ptr++ = src_byte;
  1737  000C2C  C068  FFD9         	movff	cobs_decode@dst_write_ptr,fsr2l
  1738  000C30  C069  FFDA         	movff	cobs_decode@dst_write_ptr+1,fsr2h
  1739  000C34  C064  FFDF         	movff	cobs_decode@src_byte,indf2
  1740                           
  1741                           ; BSR set to: 0
  1742  000C38  0100               	movlb	0	; () banked
  1743  000C3A  4B68               	infsnz	cobs_decode@dst_write_ptr& (0+255),f,b
  1744  000C3C  2B69               	incf	(cobs_decode@dst_write_ptr+1)& (0+255),f,b
  1745                           
  1746                           ; BSR set to: 0
  1747  000C3E  0100               	movlb	0	; () banked
  1748  000C40  0765               	decf	cobs_decode@i& (0+255),f,b
  1749  000C42  D7DF               	goto	l4120
  1750  000C44                     l4140:
  1751                           
  1752                           ; BSR set to: 0
  1753                           ;COBS.c: 170: }
  1754                           ;COBS.c: 172: if (src_ptr >= src_end_ptr)
  1755  000C44  0100               	movlb	0	; () banked
  1756  000C46  5160               	movf	cobs_decode@src_end_ptr& (0+255),w,b
  1757  000C48  5C21               	subwf	cobs_decode@src_ptr,w,c
  1758  000C4A  0100               	movlb	0	; () banked
  1759  000C4C  5161               	movf	(cobs_decode@src_end_ptr+1)& (0+255),w,b
  1760  000C4E  5822               	subwfb	cobs_decode@src_ptr+1,w,c
  1761  000C50  B0D8               	btfsc	status,0,c
  1762  000C52  D01C               	goto	l4154
  1763                           
  1764                           ; BSR set to: 0
  1765                           ;COBS.c: 175: }
  1766                           ;COBS.c: 178: if (len_code != 0xFE)
  1767                           
  1768                           ; BSR set to: 0
  1769                           
  1770                           ; BSR set to: 0
  1771                           ;COBS.c: 173: {
  1772                           ;COBS.c: 174: break;
  1773  000C54  0EFE               	movlw	254
  1774  000C56  0100               	movlb	0	; () banked
  1775  000C58  196A               	xorwf	cobs_decode@len_code& (0+255),w,b
  1776  000C5A  B4D8               	btfsc	status,2,c
  1777  000C5C  D781               	goto	l4092
  1778                           
  1779                           ; BSR set to: 0
  1780                           ;COBS.c: 179: {
  1781                           ;COBS.c: 180: if (dst_write_ptr >= dst_buf_end_ptr)
  1782  000C5E  0100               	movlb	0	; () banked
  1783  000C60  5162               	movf	cobs_decode@dst_buf_end_ptr& (0+255),w,b
  1784  000C62  0100               	movlb	0	; () banked
  1785  000C64  5D68               	subwf	cobs_decode@dst_write_ptr& (0+255),w,b
  1786  000C66  0100               	movlb	0	; () banked
  1787  000C68  5163               	movf	(cobs_decode@dst_buf_end_ptr+1)& (0+255),w,b
  1788  000C6A  0100               	movlb	0	; () banked
  1789  000C6C  5969               	subwfb	(cobs_decode@dst_write_ptr+1)& (0+255),w,b
  1790  000C6E  A0D8               	btfss	status,0,c
  1791  000C70  D003               	goto	l4150
  1792                           
  1793                           ; BSR set to: 0
  1794                           ;COBS.c: 181: {
  1795                           ;COBS.c: 182: result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
  1796  000C72  0100               	movlb	0	; () banked
  1797  000C74  836D               	bsf	(cobs_decode@result+2)& (0+255),1,b
  1798                           
  1799                           ;COBS.c: 183: break;
  1800  000C76  D00A               	goto	l4154
  1801  000C78                     l4150:
  1802                           
  1803                           ; BSR set to: 0
  1804                           ;COBS.c: 184: }
  1805                           ;COBS.c: 185: *dst_write_ptr++ = 0;
  1806  000C78  C068  FFD9         	movff	cobs_decode@dst_write_ptr,fsr2l
  1807  000C7C  C069  FFDA         	movff	cobs_decode@dst_write_ptr+1,fsr2h
  1808  000C80  0E00               	movlw	0
  1809  000C82  6EDF               	movwf	indf2,c
  1810                           
  1811                           ; BSR set to: 0
  1812  000C84  0100               	movlb	0	; () banked
  1813  000C86  4B68               	infsnz	cobs_decode@dst_write_ptr& (0+255),f,b
  1814  000C88  2B69               	incf	(cobs_decode@dst_write_ptr+1)& (0+255),f,b
  1815                           
  1816                           ; BSR set to: 0
  1817                           ;COBS.c: 186: }
  1818                           ;COBS.c: 187: }
  1819  000C8A  D76A               	goto	l4092
  1820  000C8C                     l4154:
  1821                           
  1822                           ; BSR set to: 0
  1823                           ;COBS.c: 188: }
  1824                           ;COBS.c: 190: result.out_len = dst_write_ptr - dst_buf_ptr;
  1825  000C8C  C01D  F025         	movff	cobs_decode@dst_buf_ptr,??_cobs_decode
  1826  000C90  C01E  F026         	movff	cobs_decode@dst_buf_ptr+1,??_cobs_decode+1
  1827  000C94  1E25               	comf	??_cobs_decode,f,c
  1828  000C96  1E26               	comf	??_cobs_decode+1,f,c
  1829  000C98  4A25               	infsnz	??_cobs_decode,f,c
  1830  000C9A  2A26               	incf	??_cobs_decode+1,f,c
  1831  000C9C  0100               	movlb	0	; () banked
  1832  000C9E  5168               	movf	cobs_decode@dst_write_ptr& (0+255),w,b
  1833  000CA0  2425               	addwf	??_cobs_decode,w,c
  1834  000CA2  0100               	movlb	0	; () banked
  1835  000CA4  6F6B               	movwf	cobs_decode@result& (0+255),b
  1836  000CA6  0100               	movlb	0	; () banked
  1837  000CA8  5169               	movf	(cobs_decode@dst_write_ptr+1)& (0+255),w,b
  1838  000CAA  2026               	addwfc	??_cobs_decode+1,w,c
  1839  000CAC  0100               	movlb	0	; () banked
  1840  000CAE  6F6C               	movwf	(cobs_decode@result+1)& (0+255),b
  1841                           
  1842                           ; BSR set to: 0
  1843                           ;COBS.c: 192: return result;
  1844  000CB0  C06B  F01D         	movff	cobs_decode@result,?_cobs_decode
  1845  000CB4  C06C  F01E         	movff	cobs_decode@result+1,?_cobs_decode+1
  1846  000CB8  C06D  F01F         	movff	cobs_decode@result+2,?_cobs_decode+2
  1847  000CBC  0012               	return	
  1848  000CBE                     __end_of_cobs_decode:
  1849                           	opt stack 0
  1850                           tblptru	equ	0xFF8
  1851                           tblptrh	equ	0xFF7
  1852                           tblptrl	equ	0xFF6
  1853                           tablat	equ	0xFF5
  1854                           intcon	equ	0xFF2
  1855                           postinc0	equ	0xFEE
  1856                           wreg	equ	0xFE8
  1857                           postdec1	equ	0xFE5
  1858                           fsr1l	equ	0xFE1
  1859                           indf2	equ	0xFDF
  1860                           postinc2	equ	0xFDE
  1861                           fsr2h	equ	0xFDA
  1862                           fsr2l	equ	0xFD9
  1863                           status	equ	0xFD8
  1864                           
  1865 ;; *************** function _Receive_get *****************
  1866 ;; Defined at:
  1867 ;;		line 125 in file "UART.c"
  1868 ;; Parameters:    Size  Location     Type
  1869 ;;		None
  1870 ;; Auto vars:     Size  Location     Type
  1871 ;;		None
  1872 ;; Return value:  Size  Location     Type
  1873 ;;                  1    wreg      unsigned char 
  1874 ;; Registers used:
  1875 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1876 ;; Tracked objects:
  1877 ;;		On entry : 0/0
  1878 ;;		On exit  : 0/0
  1879 ;;		Unchanged: 0/0
  1880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1881 ;;      Params:         0       0       0       0       0       0       0
  1882 ;;      Locals:         0       0       0       0       0       0       0
  1883 ;;      Temps:          0       0       0       0       0       0       0
  1884 ;;      Totals:         0       0       0       0       0       0       0
  1885 ;;Total ram usage:        0 bytes
  1886 ;; Hardware stack levels used:    1
  1887 ;; Hardware stack levels required when called:    8
  1888 ;; This function calls:
  1889 ;;		_UART_buff_get
  1890 ;; This function is called by:
  1891 ;;		_receiveData
  1892 ;;		_getch
  1893 ;; This function uses a non-reentrant model
  1894 ;;
  1895                           
  1896                           	psect	text4
  1897  002230                     __ptext4:
  1898                           	opt stack 0
  1899  002230                     _Receive_get:
  1900                           	opt stack 20
  1901                           
  1902                           ;UART.c: 126: return UART_buff_get(&input_buffer);
  1903                           
  1904                           ; BSR set to: 0
  1905                           ;incstack = 0
  1906  002230  0E3C               	movlw	low _input_buffer
  1907  002232  6E23               	movwf	UART_buff_get@_this,c
  1908  002234  0E01               	movlw	high _input_buffer
  1909  002236  6E24               	movwf	UART_buff_get@_this+1,c
  1910  002238  ECBB  F00B         	call	_UART_buff_get	;wreg free
  1911  00223C  0012               	return	
  1912  00223E                     __end_of_Receive_get:
  1913                           	opt stack 0
  1914                           tblptru	equ	0xFF8
  1915                           tblptrh	equ	0xFF7
  1916                           tblptrl	equ	0xFF6
  1917                           tablat	equ	0xFF5
  1918                           intcon	equ	0xFF2
  1919                           postinc0	equ	0xFEE
  1920                           wreg	equ	0xFE8
  1921                           postdec1	equ	0xFE5
  1922                           fsr1l	equ	0xFE1
  1923                           indf2	equ	0xFDF
  1924                           postinc2	equ	0xFDE
  1925                           fsr2h	equ	0xFDA
  1926                           fsr2l	equ	0xFD9
  1927                           status	equ	0xFD8
  1928                           
  1929 ;; *************** function _Receive_available *****************
  1930 ;; Defined at:
  1931 ;;		line 121 in file "UART.c"
  1932 ;; Parameters:    Size  Location     Type
  1933 ;;		None
  1934 ;; Auto vars:     Size  Location     Type
  1935 ;;		None
  1936 ;; Return value:  Size  Location     Type
  1937 ;;                  2   30[COMRAM] int 
  1938 ;; Registers used:
  1939 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1940 ;; Tracked objects:
  1941 ;;		On entry : 0/0
  1942 ;;		On exit  : 0/0
  1943 ;;		Unchanged: 0/0
  1944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1945 ;;      Params:         2       0       0       0       0       0       0
  1946 ;;      Locals:         0       0       0       0       0       0       0
  1947 ;;      Temps:          0       0       0       0       0       0       0
  1948 ;;      Totals:         2       0       0       0       0       0       0
  1949 ;;Total ram usage:        2 bytes
  1950 ;; Hardware stack levels used:    1
  1951 ;; Hardware stack levels required when called:    7
  1952 ;; This function calls:
  1953 ;;		_UART_buff_size
  1954 ;; This function is called by:
  1955 ;;		_receiveData
  1956 ;; This function uses a non-reentrant model
  1957 ;;
  1958                           
  1959                           	psect	text5
  1960  002174                     __ptext5:
  1961                           	opt stack 0
  1962  002174                     _Receive_available:
  1963                           	opt stack 21
  1964                           
  1965                           ;UART.c: 122: return UART_buff_size(&input_buffer);
  1966                           
  1967                           ;incstack = 0
  1968  002174  0E3C               	movlw	low _input_buffer
  1969  002176  6E1D               	movwf	UART_buff_size@_this,c
  1970  002178  0E01               	movlw	high _input_buffer
  1971  00217A  6E1E               	movwf	UART_buff_size@_this+1,c
  1972  00217C  ECC5  F010         	call	_UART_buff_size	;wreg free
  1973  002180  C01D  F01F         	movff	?_UART_buff_size,?_Receive_available
  1974  002184  C01E  F020         	movff	?_UART_buff_size+1,?_Receive_available+1
  1975  002188  0012               	return	
  1976  00218A                     __end_of_Receive_available:
  1977                           	opt stack 0
  1978                           tblptru	equ	0xFF8
  1979                           tblptrh	equ	0xFF7
  1980                           tblptrl	equ	0xFF6
  1981                           tablat	equ	0xFF5
  1982                           intcon	equ	0xFF2
  1983                           postinc0	equ	0xFEE
  1984                           wreg	equ	0xFE8
  1985                           postdec1	equ	0xFE5
  1986                           fsr1l	equ	0xFE1
  1987                           indf2	equ	0xFDF
  1988                           postinc2	equ	0xFDE
  1989                           fsr2h	equ	0xFDA
  1990                           fsr2l	equ	0xFD9
  1991                           status	equ	0xFD8
  1992                           
  1993 ;; *************** function _UART_buff_size *****************
  1994 ;; Defined at:
  1995 ;;		line 101 in file "UART.c"
  1996 ;; Parameters:    Size  Location     Type
  1997 ;;  _this           2   28[COMRAM] PTR struct UART_ring_buf
  1998 ;;		 -> output_buffer(106), input_buffer(106), 
  1999 ;; Auto vars:     Size  Location     Type
  2000 ;;		None
  2001 ;; Return value:  Size  Location     Type
  2002 ;;                  2   28[COMRAM] int 
  2003 ;; Registers used:
  2004 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2005 ;; Tracked objects:
  2006 ;;		On entry : 0/0
  2007 ;;		On exit  : 0/0
  2008 ;;		Unchanged: 0/0
  2009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2010 ;;      Params:         2       0       0       0       0       0       0
  2011 ;;      Locals:         0       0       0       0       0       0       0
  2012 ;;      Temps:          0       0       0       0       0       0       0
  2013 ;;      Totals:         2       0       0       0       0       0       0
  2014 ;;Total ram usage:        2 bytes
  2015 ;; Hardware stack levels used:    1
  2016 ;; Hardware stack levels required when called:    6
  2017 ;; This function calls:
  2018 ;;		Nothing
  2019 ;; This function is called by:
  2020 ;;		_Receive_available
  2021 ;; This function uses a non-reentrant model
  2022 ;;
  2023                           
  2024                           	psect	text6
  2025  00218A                     __ptext6:
  2026                           	opt stack 0
  2027  00218A                     _UART_buff_size:
  2028                           	opt stack 21
  2029                           
  2030                           ;UART.c: 102: return (_this->count);
  2031                           
  2032                           ;incstack = 0
  2033  00218A  EE20 F068          	lfsr	2,104
  2034  00218E  501D               	movf	UART_buff_size@_this,w,c
  2035  002190  26D9               	addwf	fsr2l,f,c
  2036  002192  501E               	movf	UART_buff_size@_this+1,w,c
  2037  002194  22DA               	addwfc	fsr2h,f,c
  2038  002196  CFDE F01D          	movff	postinc2,?_UART_buff_size
  2039  00219A  CFDD F01E          	movff	postdec2,?_UART_buff_size+1
  2040  00219E  0012               	return	
  2041  0021A0                     __end_of_UART_buff_size:
  2042                           	opt stack 0
  2043                           tblptru	equ	0xFF8
  2044                           tblptrh	equ	0xFF7
  2045                           tblptrl	equ	0xFF6
  2046                           tablat	equ	0xFF5
  2047                           intcon	equ	0xFF2
  2048                           postinc0	equ	0xFEE
  2049                           wreg	equ	0xFE8
  2050                           postdec1	equ	0xFE5
  2051                           fsr1l	equ	0xFE1
  2052                           indf2	equ	0xFDF
  2053                           postinc2	equ	0xFDE
  2054                           postdec2	equ	0xFDD
  2055                           fsr2h	equ	0xFDA
  2056                           fsr2l	equ	0xFD9
  2057                           status	equ	0xFD8
  2058                           
  2059 ;; *************** function _ComController *****************
  2060 ;; Defined at:
  2061 ;;		line 127 in file "CarCom.c"
  2062 ;; Parameters:    Size  Location     Type
  2063 ;;  DTI             2   90[BANK0 ] PTR unsigned char 
  2064 ;;		 -> ProcessArray(30), 
  2065 ;;  lenth           2   92[BANK0 ] unsigned int 
  2066 ;; Auto vars:     Size  Location     Type
  2067 ;;  k               1   12[BANK1 ] unsigned char 
  2068 ;;  DataToSend      4    8[BANK1 ] unsigned char [4]
  2069 ;;  DataRecived     4    0[BANK1 ] unsigned char [4]
  2070 ;;  DataToSend      4    4[BANK1 ] unsigned char [4]
  2071 ;; Return value:  Size  Location     Type
  2072 ;;                  1    wreg      void 
  2073 ;; Registers used:
  2074 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2075 ;; Tracked objects:
  2076 ;;		On entry : 0/0
  2077 ;;		On exit  : 0/0
  2078 ;;		Unchanged: 0/0
  2079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2080 ;;      Params:         0       4       0       0       0       0       0
  2081 ;;      Locals:         0       0      13       0       0       0       0
  2082 ;;      Temps:          0       2       0       0       0       0       0
  2083 ;;      Totals:         0       6      13       0       0       0       0
  2084 ;;Total ram usage:       19 bytes
  2085 ;; Hardware stack levels used:    1
  2086 ;; Hardware stack levels required when called:   10
  2087 ;; This function calls:
  2088 ;;		_Delay
  2089 ;;		_GetDataDict
  2090 ;;		_SetDataDict
  2091 ;;		_sendData
  2092 ;; This function is called by:
  2093 ;;		_receiveData
  2094 ;; This function uses a non-reentrant model
  2095 ;;
  2096                           
  2097                           	psect	text7
  2098  000740                     __ptext7:
  2099                           	opt stack 0
  2100  000740                     _ComController:
  2101                           	opt stack 18
  2102                           
  2103                           ;CarCom.c: 128: if(DTI[1] == 1){
  2104                           
  2105                           ;incstack = 0
  2106  000740  0100               	movlb	0	; () banked
  2107  000742  EE20 F001          	lfsr	2,1
  2108  000746  51BA               	movf	ComController@DTI& (0+255),w,b
  2109  000748  26D9               	addwf	fsr2l,f,c
  2110  00074A  51BB               	movf	(ComController@DTI+1)& (0+255),w,b
  2111  00074C  22DA               	addwfc	fsr2h,f,c
  2112  00074E  04DE               	decf	postinc2,w,c
  2113  000750  A4D8               	btfss	status,2,c
  2114  000752  D057               	goto	l4172
  2115                           
  2116                           ; BSR set to: 0
  2117                           ;CarCom.c: 129: unsigned char DataToSend[4];
  2118                           ;CarCom.c: 130: GetDataDict(DTI[2], DTI[3], DataToSend, DTI[4]);
  2119  000754  0100               	movlb	0	; () banked
  2120  000756  EE20 F003          	lfsr	2,3
  2121  00075A  51BA               	movf	ComController@DTI& (0+255),w,b
  2122  00075C  26D9               	addwf	fsr2l,f,c
  2123  00075E  51BB               	movf	(ComController@DTI+1)& (0+255),w,b
  2124  000760  22DA               	addwfc	fsr2h,f,c
  2125  000762  50DF               	movf	indf2,w,c
  2126  000764  6E1D               	movwf	GetDataDict@DataTableIndex,c
  2127  000766  0EE6               	movlw	low ComController@DataToSend
  2128  000768  6E1E               	movwf	GetDataDict@DataArray,c
  2129  00076A  0E01               	movlw	high ComController@DataToSend
  2130  00076C  6E1F               	movwf	GetDataDict@DataArray+1,c
  2131  00076E  0100               	movlb	0	; () banked
  2132  000770  EE20 F004          	lfsr	2,4
  2133  000774  51BA               	movf	ComController@DTI& (0+255),w,b
  2134  000776  26D9               	addwf	fsr2l,f,c
  2135  000778  51BB               	movf	(ComController@DTI+1)& (0+255),w,b
  2136  00077A  22DA               	addwfc	fsr2h,f,c
  2137  00077C  50DF               	movf	indf2,w,c
  2138  00077E  6E20               	movwf	GetDataDict@numbofbytes,c
  2139  000780  0100               	movlb	0	; () banked
  2140  000782  EE20 F002          	lfsr	2,2
  2141  000786  51BA               	movf	ComController@DTI& (0+255),w,b
  2142  000788  26D9               	addwf	fsr2l,f,c
  2143  00078A  51BB               	movf	(ComController@DTI+1)& (0+255),w,b
  2144  00078C  22DA               	addwfc	fsr2h,f,c
  2145  00078E  50DF               	movf	indf2,w,c
  2146  000790  EC6F  F00B         	call	_GetDataDict
  2147                           
  2148                           ;CarCom.c: 131: do { LATC5 = 1; } while(0);
  2149  000794  8A8B               	bsf	3979,5,c	;volatile
  2150                           
  2151                           ;CarCom.c: 132: Delay(5);
  2152  000796  0E05               	movlw	5
  2153  000798  6E1D               	movwf	Delay@wait,c
  2154  00079A  0E00               	movlw	0
  2155  00079C  6E1E               	movwf	Delay@wait+1,c
  2156  00079E  0E00               	movlw	0
  2157  0007A0  6E1F               	movwf	Delay@wait+2,c
  2158  0007A2  0E00               	movlw	0
  2159  0007A4  6E20               	movwf	Delay@wait+3,c
  2160  0007A6  ECEC  F00E         	call	_Delay	;wreg free
  2161                           
  2162                           ;CarCom.c: 133: sendData(1, 2, 1, 1, DataToSend, DTI[4]);
  2163  0007AA  0E02               	movlw	2
  2164  0007AC  0100               	movlb	0	; () banked
  2165  0007AE  6F6D               	movwf	sendData@ComandByte& (0+255),b
  2166  0007B0  0E01               	movlw	1
  2167  0007B2  0100               	movlb	0	; () banked
  2168  0007B4  6F6E               	movwf	sendData@DataTable& (0+255),b
  2169  0007B6  0E01               	movlw	1
  2170  0007B8  0100               	movlb	0	; () banked
  2171  0007BA  6F6F               	movwf	sendData@DataTableIndex& (0+255),b
  2172  0007BC  0EE6               	movlw	low ComController@DataToSend
  2173  0007BE  0100               	movlb	0	; () banked
  2174  0007C0  6F70               	movwf	sendData@DTS& (0+255),b
  2175  0007C2  0E01               	movlw	high ComController@DataToSend
  2176  0007C4  0100               	movlb	0	; () banked
  2177  0007C6  6F71               	movwf	(sendData@DTS+1)& (0+255),b
  2178  0007C8  0100               	movlb	0	; () banked
  2179  0007CA  EE20 F004          	lfsr	2,4
  2180  0007CE  51BA               	movf	ComController@DTI& (0+255),w,b
  2181  0007D0  26D9               	addwf	fsr2l,f,c
  2182  0007D2  51BB               	movf	(ComController@DTI+1)& (0+255),w,b
  2183  0007D4  22DA               	addwfc	fsr2h,f,c
  2184  0007D6  50DF               	movf	indf2,w,c
  2185  0007D8  0100               	movlb	0	; () banked
  2186  0007DA  6FBE               	movwf	??_ComController& (0+255),b
  2187  0007DC  0100               	movlb	0	; () banked
  2188  0007DE  51BE               	movf	??_ComController& (0+255),w,b
  2189  0007E0  0100               	movlb	0	; () banked
  2190  0007E2  6F72               	movwf	sendData@lenth& (0+255),b
  2191  0007E4  6B73               	clrf	(sendData@lenth+1)& (0+255),b
  2192  0007E6  0E01               	movlw	1
  2193  0007E8  EC96  F004         	call	_sendData
  2194                           
  2195                           ;CarCom.c: 134: Delay(3);
  2196  0007EC  0E03               	movlw	3
  2197  0007EE  6E1D               	movwf	Delay@wait,c
  2198  0007F0  0E00               	movlw	0
  2199  0007F2  6E1E               	movwf	Delay@wait+1,c
  2200  0007F4  0E00               	movlw	0
  2201  0007F6  6E1F               	movwf	Delay@wait+2,c
  2202  0007F8  0E00               	movlw	0
  2203  0007FA  6E20               	movwf	Delay@wait+3,c
  2204  0007FC  ECEC  F00E         	call	_Delay	;wreg free
  2205                           
  2206                           ;CarCom.c: 135: do { LATC5 = 0; } while(0);
  2207  000800  9A8B               	bcf	3979,5,c	;volatile
  2208  000802                     l4172:
  2209                           
  2210                           ;CarCom.c: 136: }
  2211                           ;CarCom.c: 137: if(DTI[1] == 2){
  2212  000802  0100               	movlb	0	; () banked
  2213  000804  EE20 F001          	lfsr	2,1
  2214  000808  51BA               	movf	ComController@DTI& (0+255),w,b
  2215  00080A  26D9               	addwf	fsr2l,f,c
  2216  00080C  51BB               	movf	(ComController@DTI+1)& (0+255),w,b
  2217  00080E  22DA               	addwfc	fsr2h,f,c
  2218  000810  0E02               	movlw	2
  2219  000812  18DE               	xorwf	postinc2,w,c
  2220  000814  A4D8               	btfss	status,2,c
  2221  000816  0012               	return	
  2222                           
  2223                           ; BSR set to: 0
  2224                           ;CarCom.c: 138: unsigned char DataToSend[4];
  2225                           ;CarCom.c: 139: unsigned char DataRecived[4];
  2226                           ;CarCom.c: 140: for(char k = 0;k<DTI[4];k++){
  2227  000818  0E00               	movlw	0
  2228  00081A  0101               	movlb	1	; () banked
  2229  00081C  6FEE               	movwf	ComController@k& (0+255),b
  2230  00081E  D021               	goto	l4180
  2231  000820                     l4176:
  2232                           
  2233                           ; BSR set to: 1
  2234                           ;CarCom.c: 141: DataRecived[k] = DTI[5+k];
  2235  000820  0101               	movlb	1	; () banked
  2236  000822  51EE               	movf	ComController@k& (0+255),w,b
  2237  000824  0100               	movlb	0	; () banked
  2238  000826  6FBE               	movwf	??_ComController& (0+255),b
  2239  000828  6BBF               	clrf	(??_ComController+1)& (0+255),b
  2240  00082A  0E05               	movlw	5
  2241  00082C  0100               	movlb	0	; () banked
  2242  00082E  27BE               	addwf	??_ComController& (0+255),f,b
  2243  000830  0E00               	movlw	0
  2244  000832  23BF               	addwfc	(??_ComController+1)& (0+255),f,b
  2245  000834  0100               	movlb	0	; () banked
  2246  000836  51BE               	movf	??_ComController& (0+255),w,b
  2247  000838  0100               	movlb	0	; () banked
  2248  00083A  25BA               	addwf	ComController@DTI& (0+255),w,b
  2249  00083C  6ED9               	movwf	fsr2l,c
  2250  00083E  0100               	movlb	0	; () banked
  2251  000840  51BF               	movf	(??_ComController+1)& (0+255),w,b
  2252  000842  0100               	movlb	0	; () banked
  2253  000844  21BB               	addwfc	(ComController@DTI+1)& (0+255),w,b
  2254  000846  6EDA               	movwf	fsr2h,c
  2255  000848  0101               	movlb	1	; () banked
  2256  00084A  51EE               	movf	ComController@k& (0+255),w,b
  2257  00084C  0D01               	mullw	1
  2258  00084E  0EE2               	movlw	low ComController@DataRecived
  2259  000850  24F3               	addwf	prodl,w,c
  2260  000852  6EE1               	movwf	fsr1l,c
  2261  000854  0E01               	movlw	high ComController@DataRecived
  2262  000856  20F4               	addwfc	prodh,w,c
  2263  000858  6EE2               	movwf	fsr1h,c
  2264  00085A  CFDF FFE7          	movff	indf2,indf1
  2265                           
  2266                           ; BSR set to: 1
  2267  00085E  0101               	movlb	1	; () banked
  2268  000860  2BEE               	incf	ComController@k& (0+255),f,b
  2269  000862                     l4180:
  2270                           
  2271                           ; BSR set to: 1
  2272  000862  0100               	movlb	0	; () banked
  2273  000864  EE20 F004          	lfsr	2,4
  2274  000868  51BA               	movf	ComController@DTI& (0+255),w,b
  2275  00086A  26D9               	addwf	fsr2l,f,c
  2276  00086C  51BB               	movf	(ComController@DTI+1)& (0+255),w,b
  2277  00086E  22DA               	addwfc	fsr2h,f,c
  2278  000870  50DE               	movf	postinc2,w,c
  2279  000872  0101               	movlb	1	; () banked
  2280  000874  5DEE               	subwf	ComController@k& (0+255),w,b
  2281  000876  A0D8               	btfss	status,0,c
  2282  000878  D7D3               	goto	l4176
  2283                           
  2284                           ; BSR set to: 1
  2285                           ;CarCom.c: 142: }
  2286                           ;CarCom.c: 143: SetDataDict(DTI[2], DTI[3], DataRecived, DTI[4]);
  2287                           
  2288                           ; BSR set to: 1
  2289  00087A  0100               	movlb	0	; () banked
  2290  00087C  EE20 F003          	lfsr	2,3
  2291  000880  51BA               	movf	ComController@DTI& (0+255),w,b
  2292  000882  26D9               	addwf	fsr2l,f,c
  2293  000884  51BB               	movf	(ComController@DTI+1)& (0+255),w,b
  2294  000886  22DA               	addwfc	fsr2h,f,c
  2295  000888  50DF               	movf	indf2,w,c
  2296  00088A  6E1D               	movwf	SetDataDict@DataTableIndex,c
  2297  00088C  0EE2               	movlw	low ComController@DataRecived
  2298  00088E  6E1E               	movwf	SetDataDict@DataArray,c
  2299  000890  0E01               	movlw	high ComController@DataRecived
  2300  000892  6E1F               	movwf	SetDataDict@DataArray+1,c
  2301  000894  0100               	movlb	0	; () banked
  2302  000896  EE20 F004          	lfsr	2,4
  2303  00089A  51BA               	movf	ComController@DTI& (0+255),w,b
  2304  00089C  26D9               	addwf	fsr2l,f,c
  2305  00089E  51BB               	movf	(ComController@DTI+1)& (0+255),w,b
  2306  0008A0  22DA               	addwfc	fsr2h,f,c
  2307  0008A2  50DF               	movf	indf2,w,c
  2308  0008A4  6E20               	movwf	SetDataDict@numbofbytes,c
  2309  0008A6  0100               	movlb	0	; () banked
  2310  0008A8  EE20 F002          	lfsr	2,2
  2311  0008AC  51BA               	movf	ComController@DTI& (0+255),w,b
  2312  0008AE  26D9               	addwf	fsr2l,f,c
  2313  0008B0  51BB               	movf	(ComController@DTI+1)& (0+255),w,b
  2314  0008B2  22DA               	addwfc	fsr2h,f,c
  2315  0008B4  50DF               	movf	indf2,w,c
  2316  0008B6  EC23  F00B         	call	_SetDataDict
  2317                           
  2318                           ;CarCom.c: 144: GetDataDict(4, 2, DataToSend, 1);
  2319  0008BA  0E02               	movlw	2
  2320  0008BC  6E1D               	movwf	GetDataDict@DataTableIndex,c
  2321  0008BE  0EEA               	movlw	low ComController@DataToSend_1658
  2322  0008C0  6E1E               	movwf	GetDataDict@DataArray,c
  2323  0008C2  0E01               	movlw	high ComController@DataToSend_1658
  2324  0008C4  6E1F               	movwf	GetDataDict@DataArray+1,c
  2325  0008C6  0E01               	movlw	1
  2326  0008C8  6E20               	movwf	GetDataDict@numbofbytes,c
  2327  0008CA  0E04               	movlw	4
  2328  0008CC  EC6F  F00B         	call	_GetDataDict
  2329                           
  2330                           ;CarCom.c: 145: do { LATC5 = 1; } while(0);
  2331  0008D0  8A8B               	bsf	3979,5,c	;volatile
  2332                           
  2333                           ;CarCom.c: 146: Delay(2);
  2334  0008D2  0E02               	movlw	2
  2335  0008D4  6E1D               	movwf	Delay@wait,c
  2336  0008D6  0E00               	movlw	0
  2337  0008D8  6E1E               	movwf	Delay@wait+1,c
  2338  0008DA  0E00               	movlw	0
  2339  0008DC  6E1F               	movwf	Delay@wait+2,c
  2340  0008DE  0E00               	movlw	0
  2341  0008E0  6E20               	movwf	Delay@wait+3,c
  2342  0008E2  ECEC  F00E         	call	_Delay	;wreg free
  2343                           
  2344                           ;CarCom.c: 147: sendData(1, 2, 4, 2, DataToSend, 1);
  2345  0008E6  0E02               	movlw	2
  2346  0008E8  0100               	movlb	0	; () banked
  2347  0008EA  6F6D               	movwf	sendData@ComandByte& (0+255),b
  2348  0008EC  0E04               	movlw	4
  2349  0008EE  0100               	movlb	0	; () banked
  2350  0008F0  6F6E               	movwf	sendData@DataTable& (0+255),b
  2351  0008F2  0E02               	movlw	2
  2352  0008F4  0100               	movlb	0	; () banked
  2353  0008F6  6F6F               	movwf	sendData@DataTableIndex& (0+255),b
  2354  0008F8  0EEA               	movlw	low ComController@DataToSend_1658
  2355  0008FA  0100               	movlb	0	; () banked
  2356  0008FC  6F70               	movwf	sendData@DTS& (0+255),b
  2357  0008FE  0E01               	movlw	high ComController@DataToSend_1658
  2358  000900  0100               	movlb	0	; () banked
  2359  000902  6F71               	movwf	(sendData@DTS+1)& (0+255),b
  2360  000904  0E00               	movlw	0
  2361  000906  0100               	movlb	0	; () banked
  2362  000908  6F73               	movwf	(sendData@lenth+1)& (0+255),b
  2363  00090A  0E01               	movlw	1
  2364  00090C  6F72               	movwf	sendData@lenth& (0+255),b
  2365  00090E  0E01               	movlw	1
  2366  000910  EC96  F004         	call	_sendData
  2367                           
  2368                           ;CarCom.c: 148: Delay(5);
  2369  000914  0E05               	movlw	5
  2370  000916  6E1D               	movwf	Delay@wait,c
  2371  000918  0E00               	movlw	0
  2372  00091A  6E1E               	movwf	Delay@wait+1,c
  2373  00091C  0E00               	movlw	0
  2374  00091E  6E1F               	movwf	Delay@wait+2,c
  2375  000920  0E00               	movlw	0
  2376  000922  6E20               	movwf	Delay@wait+3,c
  2377  000924  ECEC  F00E         	call	_Delay	;wreg free
  2378                           
  2379                           ;CarCom.c: 149: do { LATC5 = 0; } while(0);
  2380  000928  9A8B               	bcf	3979,5,c	;volatile
  2381  00092A  0012               	return	
  2382  00092C                     __end_of_ComController:
  2383                           	opt stack 0
  2384                           tblptru	equ	0xFF8
  2385                           tblptrh	equ	0xFF7
  2386                           tblptrl	equ	0xFF6
  2387                           tablat	equ	0xFF5
  2388                           prodh	equ	0xFF4
  2389                           prodl	equ	0xFF3
  2390                           intcon	equ	0xFF2
  2391                           postinc0	equ	0xFEE
  2392                           wreg	equ	0xFE8
  2393                           indf1	equ	0xFE7
  2394                           postdec1	equ	0xFE5
  2395                           fsr1h	equ	0xFE2
  2396                           fsr1l	equ	0xFE1
  2397                           indf2	equ	0xFDF
  2398                           postinc2	equ	0xFDE
  2399                           postdec2	equ	0xFDD
  2400                           fsr2h	equ	0xFDA
  2401                           fsr2l	equ	0xFD9
  2402                           status	equ	0xFD8
  2403                           
  2404 ;; *************** function _sendData *****************
  2405 ;; Defined at:
  2406 ;;		line 39 in file "CarCom.c"
  2407 ;; Parameters:    Size  Location     Type
  2408 ;;  whereToSend     1    wreg     unsigned char 
  2409 ;;  ComandByte      1   13[BANK0 ] unsigned char 
  2410 ;;  DataTable       1   14[BANK0 ] unsigned char 
  2411 ;;  DataTableInd    1   15[BANK0 ] unsigned char 
  2412 ;;  DTS             2   16[BANK0 ] PTR unsigned char 
  2413 ;;		 -> ComController@DataToSend_1658(4), ComController@DataToSend(4), 
  2414 ;;  lenth           2   18[BANK0 ] unsigned int 
  2415 ;; Auto vars:     Size  Location     Type
  2416 ;;  whereToSend     1   80[BANK0 ] unsigned char 
  2417 ;;  SendArray      30   50[BANK0 ] unsigned char [30]
  2418 ;;  COBSArray      30   20[BANK0 ] unsigned char [30]
  2419 ;;  result          3   82[BANK0 ] struct .
  2420 ;;  count           2   87[BANK0 ] int 
  2421 ;;  j               2   85[BANK0 ] int 
  2422 ;;  i               1   89[BANK0 ] unsigned char 
  2423 ;;  CS              1   81[BANK0 ] unsigned char 
  2424 ;; Return value:  Size  Location     Type
  2425 ;;                  1    wreg      void 
  2426 ;; Registers used:
  2427 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2428 ;; Tracked objects:
  2429 ;;		On entry : 0/0
  2430 ;;		On exit  : 0/0
  2431 ;;		Unchanged: 0/0
  2432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2433 ;;      Params:         0       7       0       0       0       0       0
  2434 ;;      Locals:         0      70       0       0       0       0       0
  2435 ;;      Temps:          4       0       0       0       0       0       0
  2436 ;;      Totals:         4      77       0       0       0       0       0
  2437 ;;Total ram usage:       81 bytes
  2438 ;; Hardware stack levels used:    1
  2439 ;; Hardware stack levels required when called:    9
  2440 ;; This function calls:
  2441 ;;		_CRC8
  2442 ;;		_Send_put
  2443 ;;		_cobs_encode
  2444 ;; This function is called by:
  2445 ;;		_ComController
  2446 ;; This function uses a non-reentrant model
  2447 ;;
  2448                           
  2449                           	psect	text8
  2450  00092C                     __ptext8:
  2451                           	opt stack 0
  2452  00092C                     _sendData:
  2453                           	opt stack 18
  2454                           
  2455                           ;incstack = 0
  2456                           ;sendData@whereToSend stored from wreg
  2457  00092C  0100               	movlb	0	; () banked
  2458  00092E  6FB0               	movwf	sendData@whereToSend& (0+255),b
  2459                           
  2460                           ;CarCom.c: 40: unsigned char SendArray[30];
  2461                           ;CarCom.c: 41: unsigned char COBSArray[30];
  2462                           ;CarCom.c: 43: int j = 0;
  2463  000930  0E00               	movlw	0
  2464  000932  0100               	movlb	0	; () banked
  2465  000934  6FB6               	movwf	(sendData@j+1)& (0+255),b
  2466  000936  0E00               	movlw	0
  2467  000938  6FB5               	movwf	sendData@j& (0+255),b
  2468  00093A                     l3948:
  2469                           
  2470                           ; BSR set to: 0
  2471  00093A  0100               	movlb	0	; () banked
  2472  00093C  51B6               	movf	(sendData@j+1)& (0+255),w,b
  2473  00093E  E113               	bnz	l3958
  2474  000940  0E1E               	movlw	30
  2475  000942  0100               	movlb	0	; () banked
  2476  000944  5DB5               	subwf	sendData@j& (0+255),w,b
  2477  000946  B0D8               	btfsc	status,0,c
  2478  000948  D00E               	goto	l3958
  2479                           
  2480                           ; BSR set to: 0
  2481                           ;CarCom.c: 45: SendArray[j] = 0;
  2482                           
  2483                           ; BSR set to: 0
  2484                           
  2485                           ; BSR set to: 0
  2486  00094A  0E92               	movlw	low sendData@SendArray
  2487  00094C  0100               	movlb	0	; () banked
  2488  00094E  25B5               	addwf	sendData@j& (0+255),w,b
  2489  000950  6ED9               	movwf	fsr2l,c
  2490  000952  0E00               	movlw	high sendData@SendArray
  2491  000954  0100               	movlb	0	; () banked
  2492  000956  21B6               	addwfc	(sendData@j+1)& (0+255),w,b
  2493  000958  6EDA               	movwf	fsr2h,c
  2494  00095A  0E00               	movlw	0
  2495  00095C  6EDF               	movwf	indf2,c
  2496                           
  2497                           ; BSR set to: 0
  2498  00095E  0100               	movlb	0	; () banked
  2499  000960  4BB5               	infsnz	sendData@j& (0+255),f,b
  2500  000962  2BB6               	incf	(sendData@j+1)& (0+255),f,b
  2501  000964  D7EA               	goto	l3948
  2502  000966                     l3958:
  2503                           
  2504                           ; BSR set to: 0
  2505                           ;CarCom.c: 46: }
  2506                           ;CarCom.c: 48: cobs_encode_result result;
  2507                           ;CarCom.c: 50: SendArray[0] = 5+lenth;
  2508  000966  0100               	movlb	0	; () banked
  2509  000968  5172               	movf	sendData@lenth& (0+255),w,b
  2510  00096A  0F05               	addlw	5
  2511  00096C  0100               	movlb	0	; () banked
  2512  00096E  6F92               	movwf	sendData@SendArray& (0+255),b
  2513                           
  2514                           ; BSR set to: 0
  2515                           ;CarCom.c: 51: SendArray[1] = ComandByte;
  2516  000970  C06D  F093         	movff	sendData@ComandByte,sendData@SendArray+1
  2517                           
  2518                           ; BSR set to: 0
  2519                           ;CarCom.c: 52: SendArray[2] = DataTable;
  2520  000974  C06E  F094         	movff	sendData@DataTable,sendData@SendArray+2
  2521                           
  2522                           ; BSR set to: 0
  2523                           ;CarCom.c: 53: SendArray[3] = DataTableIndex;
  2524  000978  C06F  F095         	movff	sendData@DataTableIndex,sendData@SendArray+3
  2525                           
  2526                           ; BSR set to: 0
  2527                           ;CarCom.c: 54: SendArray[4] = lenth;
  2528  00097C  C072  F096         	movff	sendData@lenth,sendData@SendArray+4
  2529                           
  2530                           ; BSR set to: 0
  2531                           ;CarCom.c: 56: unsigned char i = 0;
  2532  000980  0E00               	movlw	0
  2533  000982  0100               	movlb	0	; () banked
  2534  000984  6FB9               	movwf	sendData@i& (0+255),b
  2535                           
  2536                           ; BSR set to: 0
  2537                           ;CarCom.c: 57: int count = 5;
  2538  000986  0E00               	movlw	0
  2539  000988  0100               	movlb	0	; () banked
  2540  00098A  6FB8               	movwf	(sendData@count+1)& (0+255),b
  2541  00098C  0E05               	movlw	5
  2542  00098E  6FB7               	movwf	sendData@count& (0+255),b
  2543  000990  D020               	goto	l3978
  2544  000992                     l3972:
  2545                           
  2546                           ; BSR set to: 0
  2547                           ;CarCom.c: 60: SendArray[i+5] = DTS[i];
  2548  000992  0100               	movlb	0	; () banked
  2549  000994  51B9               	movf	sendData@i& (0+255),w,b
  2550  000996  0D01               	mullw	1
  2551  000998  50F3               	movf	prodl,w,c
  2552  00099A  0100               	movlb	0	; () banked
  2553  00099C  2570               	addwf	sendData@DTS& (0+255),w,b
  2554  00099E  6ED9               	movwf	fsr2l,c
  2555  0009A0  50F4               	movf	prodh,w,c
  2556  0009A2  0100               	movlb	0	; () banked
  2557  0009A4  2171               	addwfc	(sendData@DTS+1)& (0+255),w,b
  2558  0009A6  6EDA               	movwf	fsr2h,c
  2559  0009A8  0100               	movlb	0	; () banked
  2560  0009AA  51B9               	movf	sendData@i& (0+255),w,b
  2561  0009AC  6E29               	movwf	??_sendData& (0+255),c
  2562  0009AE  6A2A               	clrf	(??_sendData+1)& (0+255),c
  2563  0009B0  0E05               	movlw	5
  2564  0009B2  2629               	addwf	??_sendData,f,c
  2565  0009B4  0E00               	movlw	0
  2566  0009B6  222A               	addwfc	??_sendData+1,f,c
  2567  0009B8  0E92               	movlw	low sendData@SendArray
  2568  0009BA  2429               	addwf	??_sendData,w,c
  2569  0009BC  6EE1               	movwf	fsr1l,c
  2570  0009BE  0E00               	movlw	high sendData@SendArray
  2571  0009C0  202A               	addwfc	??_sendData+1,w,c
  2572  0009C2  6EE2               	movwf	fsr1h,c
  2573  0009C4  CFDF FFE7          	movff	indf2,indf1
  2574                           
  2575                           ; BSR set to: 0
  2576                           ;CarCom.c: 61: count++;
  2577  0009C8  0100               	movlb	0	; () banked
  2578  0009CA  4BB7               	infsnz	sendData@count& (0+255),f,b
  2579  0009CC  2BB8               	incf	(sendData@count+1)& (0+255),f,b
  2580                           
  2581                           ; BSR set to: 0
  2582  0009CE  0100               	movlb	0	; () banked
  2583  0009D0  2BB9               	incf	sendData@i& (0+255),f,b
  2584  0009D2                     l3978:
  2585                           
  2586                           ; BSR set to: 0
  2587  0009D2  0100               	movlb	0	; () banked
  2588  0009D4  51B9               	movf	sendData@i& (0+255),w,b
  2589  0009D6  6E29               	movwf	??_sendData& (0+255),c
  2590  0009D8  6A2A               	clrf	(??_sendData+1)& (0+255),c
  2591  0009DA  0100               	movlb	0	; () banked
  2592  0009DC  5172               	movf	sendData@lenth& (0+255),w,b
  2593  0009DE  5C29               	subwf	??_sendData,w,c
  2594  0009E0  0100               	movlb	0	; () banked
  2595  0009E2  5173               	movf	(sendData@lenth+1)& (0+255),w,b
  2596  0009E4  582A               	subwfb	??_sendData+1,w,c
  2597  0009E6  A0D8               	btfss	status,0,c
  2598  0009E8  D7D4               	goto	l3972
  2599                           
  2600                           ; BSR set to: 0
  2601                           ;CarCom.c: 62: }
  2602                           ;CarCom.c: 64: unsigned char CS = CRC8(SendArray, count);
  2603                           
  2604                           ; BSR set to: 0
  2605  0009EA  0E92               	movlw	low sendData@SendArray
  2606  0009EC  6E1D               	movwf	CRC8@data,c
  2607  0009EE  0E00               	movlw	high sendData@SendArray
  2608  0009F0  6E1E               	movwf	CRC8@data+1,c
  2609  0009F2  C0B7  F01F         	movff	sendData@count,CRC8@len
  2610  0009F6  ECC7  F00E         	call	_CRC8	;wreg free
  2611  0009FA  0100               	movlb	0	; () banked
  2612  0009FC  6FB1               	movwf	sendData@CS& (0+255),b
  2613                           
  2614                           ; BSR set to: 0
  2615                           ;CarCom.c: 65: SendArray[count] = CS;
  2616  0009FE  0E92               	movlw	low sendData@SendArray
  2617  000A00  0100               	movlb	0	; () banked
  2618  000A02  25B7               	addwf	sendData@count& (0+255),w,b
  2619  000A04  6ED9               	movwf	fsr2l,c
  2620  000A06  0E00               	movlw	high sendData@SendArray
  2621  000A08  0100               	movlb	0	; () banked
  2622  000A0A  21B8               	addwfc	(sendData@count+1)& (0+255),w,b
  2623  000A0C  6EDA               	movwf	fsr2h,c
  2624  000A0E  C0B1  FFDF         	movff	sendData@CS,indf2
  2625                           
  2626                           ; BSR set to: 0
  2627                           ;CarCom.c: 66: count++;
  2628  000A12  0100               	movlb	0	; () banked
  2629  000A14  4BB7               	infsnz	sendData@count& (0+255),f,b
  2630  000A16  2BB8               	incf	(sendData@count+1)& (0+255),f,b
  2631                           
  2632                           ; BSR set to: 0
  2633                           ;CarCom.c: 67: result = cobs_encode(COBSArray, sizeof(COBSArray), SendArray, count);
  2634  000A18  0E74               	movlw	low sendData@COBSArray
  2635  000A1A  6E1D               	movwf	cobs_encode@dst_buf_ptr,c
  2636  000A1C  0E00               	movlw	high sendData@COBSArray
  2637  000A1E  6E1E               	movwf	cobs_encode@dst_buf_ptr+1,c
  2638  000A20  0E00               	movlw	0
  2639  000A22  6E20               	movwf	cobs_encode@dst_buf_len+1,c
  2640  000A24  0E1E               	movlw	30
  2641  000A26  6E1F               	movwf	cobs_encode@dst_buf_len,c
  2642  000A28  0E92               	movlw	low sendData@SendArray
  2643  000A2A  6E21               	movwf	cobs_encode@src_ptr,c
  2644  000A2C  0E00               	movlw	high sendData@SendArray
  2645  000A2E  6E22               	movwf	cobs_encode@src_ptr+1,c
  2646  000A30  C0B7  F023         	movff	sendData@count,cobs_encode@src_len
  2647  000A34  C0B8  F024         	movff	sendData@count+1,cobs_encode@src_len+1
  2648  000A38  EC5F  F006         	call	_cobs_encode	;wreg free
  2649  000A3C  C01D  F0B2         	movff	?_cobs_encode,sendData@result
  2650  000A40  C01E  F0B3         	movff	?_cobs_encode+1,sendData@result+1
  2651  000A44  C01F  F0B4         	movff	?_cobs_encode+2,sendData@result+2
  2652                           
  2653                           ;CarCom.c: 68: SendArray[0] = whereToSend;
  2654  000A48  C0B0  F092         	movff	sendData@whereToSend,sendData@SendArray
  2655                           
  2656                           ;CarCom.c: 70: for(i = 1;i<result.out_len+1;i++){
  2657  000A4C  0E01               	movlw	1
  2658  000A4E  0100               	movlb	0	; () banked
  2659  000A50  6FB9               	movwf	sendData@i& (0+255),b
  2660  000A52  D01F               	goto	l3996
  2661  000A54                     l3992:
  2662                           
  2663                           ; BSR set to: 0
  2664                           ;CarCom.c: 71: SendArray[i] = COBSArray[i-1];
  2665  000A54  0EFF               	movlw	255
  2666  000A56  6E29               	movwf	??_sendData& (0+255),c
  2667  000A58  0EFF               	movlw	255
  2668  000A5A  6E2A               	movwf	(??_sendData+1)& (0+255),c
  2669  000A5C  0100               	movlb	0	; () banked
  2670  000A5E  51B9               	movf	sendData@i& (0+255),w,b
  2671  000A60  6E2B               	movwf	(??_sendData+2)& (0+255),c
  2672  000A62  6A2C               	clrf	(??_sendData+3)& (0+255),c
  2673  000A64  5029               	movf	??_sendData,w,c
  2674  000A66  262B               	addwf	??_sendData+2,f,c
  2675  000A68  502A               	movf	??_sendData+1,w,c
  2676  000A6A  222C               	addwfc	??_sendData+3,f,c
  2677  000A6C  0E74               	movlw	low sendData@COBSArray
  2678  000A6E  242B               	addwf	??_sendData+2,w,c
  2679  000A70  6ED9               	movwf	fsr2l,c
  2680  000A72  0E00               	movlw	high sendData@COBSArray
  2681  000A74  202C               	addwfc	??_sendData+3,w,c
  2682  000A76  6EDA               	movwf	fsr2h,c
  2683  000A78  0100               	movlb	0	; () banked
  2684  000A7A  51B9               	movf	sendData@i& (0+255),w,b
  2685  000A7C  0D01               	mullw	1
  2686  000A7E  0E92               	movlw	low sendData@SendArray
  2687  000A80  24F3               	addwf	prodl,w,c
  2688  000A82  6EE1               	movwf	fsr1l,c
  2689  000A84  0E00               	movlw	high sendData@SendArray
  2690  000A86  20F4               	addwfc	prodh,w,c
  2691  000A88  6EE2               	movwf	fsr1h,c
  2692  000A8A  CFDF FFE7          	movff	indf2,indf1
  2693                           
  2694                           ; BSR set to: 0
  2695  000A8E  0100               	movlb	0	; () banked
  2696  000A90  2BB9               	incf	sendData@i& (0+255),f,b
  2697  000A92                     l3996:
  2698                           
  2699                           ; BSR set to: 0
  2700  000A92  0E01               	movlw	1
  2701  000A94  0100               	movlb	0	; () banked
  2702  000A96  25B2               	addwf	sendData@result& (0+255),w,b
  2703  000A98  6E29               	movwf	??_sendData& (0+255),c
  2704  000A9A  0E00               	movlw	0
  2705  000A9C  0100               	movlb	0	; () banked
  2706  000A9E  21B3               	addwfc	(sendData@result+1)& (0+255),w,b
  2707  000AA0  6E2A               	movwf	(??_sendData+1)& (0+255),c
  2708  000AA2  0100               	movlb	0	; () banked
  2709  000AA4  51B9               	movf	sendData@i& (0+255),w,b
  2710  000AA6  6E2B               	movwf	(??_sendData+2)& (0+255),c
  2711  000AA8  6A2C               	clrf	(??_sendData+3)& (0+255),c
  2712  000AAA  5029               	movf	??_sendData,w,c
  2713  000AAC  5C2B               	subwf	??_sendData+2,w,c
  2714  000AAE  502A               	movf	??_sendData+1,w,c
  2715  000AB0  582C               	subwfb	??_sendData+3,w,c
  2716  000AB2  A0D8               	btfss	status,0,c
  2717  000AB4  D7CF               	goto	l3992
  2718                           
  2719                           ; BSR set to: 0
  2720                           ;CarCom.c: 72: }
  2721                           ;CarCom.c: 74: for(i = 0;i<result.out_len+2;i++){
  2722                           
  2723                           ; BSR set to: 0
  2724  000AB6  0E00               	movlw	0
  2725  000AB8  0100               	movlb	0	; () banked
  2726  000ABA  6FB9               	movwf	sendData@i& (0+255),b
  2727  000ABC  D00E               	goto	l4004
  2728  000ABE                     l4000:
  2729                           
  2730                           ; BSR set to: 0
  2731                           ;CarCom.c: 75: Send_put(SendArray[i]);
  2732  000ABE  0100               	movlb	0	; () banked
  2733  000AC0  51B9               	movf	sendData@i& (0+255),w,b
  2734  000AC2  0D01               	mullw	1
  2735  000AC4  0E92               	movlw	low sendData@SendArray
  2736  000AC6  24F3               	addwf	prodl,w,c
  2737  000AC8  6ED9               	movwf	fsr2l,c
  2738  000ACA  0E00               	movlw	high sendData@SendArray
  2739  000ACC  20F4               	addwfc	prodh,w,c
  2740  000ACE  6EDA               	movwf	fsr2h,c
  2741  000AD0  50DF               	movf	indf2,w,c
  2742  000AD2  ECF4  F00F         	call	_Send_put
  2743  000AD6  0100               	movlb	0	; () banked
  2744  000AD8  2BB9               	incf	sendData@i& (0+255),f,b
  2745  000ADA                     l4004:
  2746                           
  2747                           ; BSR set to: 0
  2748  000ADA  0E02               	movlw	2
  2749  000ADC  0100               	movlb	0	; () banked
  2750  000ADE  25B2               	addwf	sendData@result& (0+255),w,b
  2751  000AE0  6E29               	movwf	??_sendData& (0+255),c
  2752  000AE2  0E00               	movlw	0
  2753  000AE4  0100               	movlb	0	; () banked
  2754  000AE6  21B3               	addwfc	(sendData@result+1)& (0+255),w,b
  2755  000AE8  6E2A               	movwf	(??_sendData+1)& (0+255),c
  2756  000AEA  0100               	movlb	0	; () banked
  2757  000AEC  51B9               	movf	sendData@i& (0+255),w,b
  2758  000AEE  6E2B               	movwf	(??_sendData+2)& (0+255),c
  2759  000AF0  6A2C               	clrf	(??_sendData+3)& (0+255),c
  2760  000AF2  5029               	movf	??_sendData,w,c
  2761  000AF4  5C2B               	subwf	??_sendData+2,w,c
  2762  000AF6  502A               	movf	??_sendData+1,w,c
  2763  000AF8  582C               	subwfb	??_sendData+3,w,c
  2764  000AFA  B0D8               	btfsc	status,0,c
  2765  000AFC  0012               	return	
  2766  000AFE  D7DF               	goto	l4000
  2767  000B00                     __end_of_sendData:
  2768                           	opt stack 0
  2769                           tblptru	equ	0xFF8
  2770                           tblptrh	equ	0xFF7
  2771                           tblptrl	equ	0xFF6
  2772                           tablat	equ	0xFF5
  2773                           prodh	equ	0xFF4
  2774                           prodl	equ	0xFF3
  2775                           intcon	equ	0xFF2
  2776                           postinc0	equ	0xFEE
  2777                           wreg	equ	0xFE8
  2778                           indf1	equ	0xFE7
  2779                           postdec1	equ	0xFE5
  2780                           fsr1h	equ	0xFE2
  2781                           fsr1l	equ	0xFE1
  2782                           indf2	equ	0xFDF
  2783                           postinc2	equ	0xFDE
  2784                           postdec2	equ	0xFDD
  2785                           fsr2h	equ	0xFDA
  2786                           fsr2l	equ	0xFD9
  2787                           status	equ	0xFD8
  2788                           
  2789 ;; *************** function _cobs_encode *****************
  2790 ;; Defined at:
  2791 ;;		line 29 in file "COBS.c"
  2792 ;; Parameters:    Size  Location     Type
  2793 ;;  dst_buf_ptr     2   28[COMRAM] PTR unsigned char 
  2794 ;;		 -> sendData@COBSArray(30), 
  2795 ;;  dst_buf_len     2   30[COMRAM] unsigned int 
  2796 ;;  src_ptr         2   32[COMRAM] PTR const unsigned char 
  2797 ;;		 -> sendData@SendArray(30), 
  2798 ;;  src_len         2   34[COMRAM] unsigned int 
  2799 ;; Auto vars:     Size  Location     Type
  2800 ;;  result          3   10[BANK0 ] struct .
  2801 ;;  dst_write_pt    2    8[BANK0 ] PTR unsigned char 
  2802 ;;		 -> sendData@COBSArray(30), 
  2803 ;;  dst_code_wri    2    6[BANK0 ] PTR unsigned char 
  2804 ;;		 -> sendData@COBSArray(30), 
  2805 ;;  dst_buf_end_    2    3[BANK0 ] PTR unsigned char 
  2806 ;;		 -> sendData@COBSArray(30), 
  2807 ;;  src_end_ptr     2    0[BANK0 ] PTR const unsigned char 
  2808 ;;		 -> sendData@SendArray(30), 
  2809 ;;  search_len      1    5[BANK0 ] unsigned char 
  2810 ;;  src_byte        1    2[BANK0 ] unsigned char 
  2811 ;; Return value:  Size  Location     Type
  2812 ;;                  3   28[COMRAM] struct .
  2813 ;; Registers used:
  2814 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2815 ;; Tracked objects:
  2816 ;;		On entry : 0/0
  2817 ;;		On exit  : 0/0
  2818 ;;		Unchanged: 0/0
  2819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2820 ;;      Params:         8       0       0       0       0       0       0
  2821 ;;      Locals:         0      13       0       0       0       0       0
  2822 ;;      Temps:          2       0       0       0       0       0       0
  2823 ;;      Totals:        10      13       0       0       0       0       0
  2824 ;;Total ram usage:       23 bytes
  2825 ;; Hardware stack levels used:    1
  2826 ;; Hardware stack levels required when called:    6
  2827 ;; This function calls:
  2828 ;;		Nothing
  2829 ;; This function is called by:
  2830 ;;		_sendData
  2831 ;; This function uses a non-reentrant model
  2832 ;;
  2833                           
  2834                           	psect	text9
  2835  000CBE                     __ptext9:
  2836                           	opt stack 0
  2837  000CBE                     _cobs_encode:
  2838                           	opt stack 20
  2839                           
  2840                           ;COBS.c: 31: cobs_encode_result result = { 0, COBS_ENCODE_OK };
  2841                           
  2842                           ; BSR set to: 0
  2843                           ;incstack = 0
  2844  000CBE  C033  F06A         	movff	cobs_encode@F180,cobs_encode@result
  2845  000CC2  C034  F06B         	movff	cobs_encode@F180+1,cobs_encode@result+1
  2846  000CC6  C035  F06C         	movff	cobs_encode@F180+2,cobs_encode@result+2
  2847                           
  2848                           ;COBS.c: 32: const uint8_t * src_end_ptr = src_ptr + src_len;
  2849  000CCA  5023               	movf	cobs_encode@src_len,w,c
  2850  000CCC  2421               	addwf	cobs_encode@src_ptr,w,c
  2851  000CCE  0100               	movlb	0	; () banked
  2852  000CD0  6F60               	movwf	cobs_encode@src_end_ptr& (0+255),b
  2853  000CD2  5024               	movf	cobs_encode@src_len+1,w,c
  2854  000CD4  2022               	addwfc	cobs_encode@src_ptr+1,w,c
  2855  000CD6  0100               	movlb	0	; () banked
  2856  000CD8  6F61               	movwf	(cobs_encode@src_end_ptr+1)& (0+255),b
  2857                           
  2858                           ;COBS.c: 33: uint8_t * dst_buf_end_ptr = dst_buf_ptr + dst_buf_len;
  2859  000CDA  501F               	movf	cobs_encode@dst_buf_len,w,c
  2860  000CDC  241D               	addwf	cobs_encode@dst_buf_ptr,w,c
  2861  000CDE  0100               	movlb	0	; () banked
  2862  000CE0  6F63               	movwf	cobs_encode@dst_buf_end_ptr& (0+255),b
  2863  000CE2  5020               	movf	cobs_encode@dst_buf_len+1,w,c
  2864  000CE4  201E               	addwfc	cobs_encode@dst_buf_ptr+1,w,c
  2865  000CE6  0100               	movlb	0	; () banked
  2866  000CE8  6F64               	movwf	(cobs_encode@dst_buf_end_ptr+1)& (0+255),b
  2867                           
  2868                           ;COBS.c: 34: uint8_t * dst_code_write_ptr = dst_buf_ptr;
  2869  000CEA  C01D  F066         	movff	cobs_encode@dst_buf_ptr,cobs_encode@dst_code_write_ptr
  2870  000CEE  C01E  F067         	movff	cobs_encode@dst_buf_ptr+1,cobs_encode@dst_code_write_ptr+1
  2871                           
  2872                           ;COBS.c: 35: uint8_t * dst_write_ptr = dst_code_write_ptr + 1;
  2873  000CF2  0E01               	movlw	1
  2874  000CF4  0100               	movlb	0	; () banked
  2875  000CF6  2566               	addwf	cobs_encode@dst_code_write_ptr& (0+255),w,b
  2876  000CF8  0100               	movlb	0	; () banked
  2877  000CFA  6F68               	movwf	cobs_encode@dst_write_ptr& (0+255),b
  2878  000CFC  0E00               	movlw	0
  2879  000CFE  0100               	movlb	0	; () banked
  2880  000D00  2167               	addwfc	(cobs_encode@dst_code_write_ptr+1)& (0+255),w,b
  2881  000D02  0100               	movlb	0	; () banked
  2882  000D04  6F69               	movwf	(cobs_encode@dst_write_ptr+1)& (0+255),b
  2883                           
  2884                           ; BSR set to: 0
  2885                           ;COBS.c: 36: uint8_t src_byte = 0;
  2886  000D06  0E00               	movlw	0
  2887  000D08  0100               	movlb	0	; () banked
  2888  000D0A  6F62               	movwf	cobs_encode@src_byte& (0+255),b
  2889                           
  2890                           ; BSR set to: 0
  2891                           ;COBS.c: 37: uint8_t search_len = 1;
  2892  000D0C  0E01               	movlw	1
  2893  000D0E  0100               	movlb	0	; () banked
  2894  000D10  6F65               	movwf	cobs_encode@search_len& (0+255),b
  2895                           
  2896                           ;COBS.c: 41: if ((dst_buf_ptr == (0)) || (src_ptr == (0)))
  2897  000D12  501D               	movf	cobs_encode@dst_buf_ptr,w,c
  2898  000D14  101E               	iorwf	cobs_encode@dst_buf_ptr+1,w,c
  2899  000D16  B4D8               	btfsc	status,2,c
  2900  000D18  D004               	goto	l3800
  2901                           
  2902                           ; BSR set to: 0
  2903  000D1A  5021               	movf	cobs_encode@src_ptr,w,c
  2904  000D1C  1022               	iorwf	cobs_encode@src_ptr+1,w,c
  2905  000D1E  A4D8               	btfss	status,2,c
  2906  000D20  D00A               	goto	l3806
  2907  000D22                     l3800:
  2908                           
  2909                           ; BSR set to: 0
  2910                           ;COBS.c: 42: {
  2911                           ;COBS.c: 43: result.status = COBS_ENCODE_NULL_POINTER;
  2912  000D22  0E01               	movlw	1
  2913  000D24  0100               	movlb	0	; () banked
  2914  000D26  6F6C               	movwf	(cobs_encode@result+2)& (0+255),b
  2915                           
  2916                           ; BSR set to: 0
  2917                           ;COBS.c: 44: return result;
  2918  000D28  C06A  F01D         	movff	cobs_encode@result,?_cobs_encode
  2919  000D2C  C06B  F01E         	movff	cobs_encode@result+1,?_cobs_encode+1
  2920  000D30  C06C  F01F         	movff	cobs_encode@result+2,?_cobs_encode+2
  2921                           
  2922                           ; BSR set to: 0
  2923  000D34  0012               	return	
  2924  000D36                     l3806:
  2925                           
  2926                           ; BSR set to: 0
  2927                           ;COBS.c: 45: }
  2928                           ;COBS.c: 47: if (src_len != 0)
  2929  000D36  5023               	movf	cobs_encode@src_len,w,c
  2930  000D38  1024               	iorwf	cobs_encode@src_len+1,w,c
  2931  000D3A  B4D8               	btfsc	status,2,c
  2932  000D3C  D05C               	goto	l3850
  2933  000D3E                     l3808:
  2934                           
  2935                           ; BSR set to: 0
  2936                           ;COBS.c: 51: {
  2937                           ;COBS.c: 53: if (dst_write_ptr >= dst_buf_end_ptr)
  2938  000D3E  0100               	movlb	0	; () banked
  2939  000D40  5163               	movf	cobs_encode@dst_buf_end_ptr& (0+255),w,b
  2940  000D42  0100               	movlb	0	; () banked
  2941  000D44  5D68               	subwf	cobs_encode@dst_write_ptr& (0+255),w,b
  2942  000D46  0100               	movlb	0	; () banked
  2943  000D48  5164               	movf	(cobs_encode@dst_buf_end_ptr+1)& (0+255),w,b
  2944  000D4A  0100               	movlb	0	; () banked
  2945  000D4C  5969               	subwfb	(cobs_encode@dst_write_ptr+1)& (0+255),w,b
  2946  000D4E  A0D8               	btfss	status,0,c
  2947  000D50  D003               	goto	l3812
  2948                           
  2949                           ; BSR set to: 0
  2950                           ;COBS.c: 54: {
  2951                           ;COBS.c: 55: result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
  2952  000D52  0100               	movlb	0	; () banked
  2953  000D54  836C               	bsf	(cobs_encode@result+2)& (0+255),1,b
  2954                           
  2955                           ;COBS.c: 56: break;
  2956  000D56  D04F               	goto	l3850
  2957  000D58                     l3812:
  2958                           
  2959                           ; BSR set to: 0
  2960                           ;COBS.c: 57: }
  2961                           ;COBS.c: 59: src_byte = *src_ptr++;
  2962  000D58  C021  FFD9         	movff	cobs_encode@src_ptr,fsr2l
  2963  000D5C  C022  FFDA         	movff	cobs_encode@src_ptr+1,fsr2h
  2964  000D60  50DF               	movf	indf2,w,c
  2965  000D62  0100               	movlb	0	; () banked
  2966  000D64  6F62               	movwf	cobs_encode@src_byte& (0+255),b
  2967                           
  2968                           ; BSR set to: 0
  2969  000D66  4A21               	infsnz	cobs_encode@src_ptr,f,c
  2970  000D68  2A22               	incf	cobs_encode@src_ptr+1,f,c
  2971                           
  2972                           ; BSR set to: 0
  2973                           ;COBS.c: 60: if (src_byte == 0)
  2974  000D6A  0100               	movlb	0	; () banked
  2975  000D6C  5162               	movf	cobs_encode@src_byte& (0+255),w,b
  2976  000D6E  0100               	movlb	0	; () banked
  2977  000D70  A4D8               	btfss	status,2,c
  2978  000D72  D019               	goto	l3830
  2979                           
  2980                           ; BSR set to: 0
  2981                           ;COBS.c: 61: {
  2982                           ;COBS.c: 63: *dst_code_write_ptr = search_len;
  2983  000D74  C066  FFD9         	movff	cobs_encode@dst_code_write_ptr,fsr2l
  2984  000D78  C067  FFDA         	movff	cobs_encode@dst_code_write_ptr+1,fsr2h
  2985  000D7C  C065  FFDF         	movff	cobs_encode@search_len,indf2
  2986                           
  2987                           ; BSR set to: 0
  2988                           ;COBS.c: 64: dst_code_write_ptr = dst_write_ptr++;
  2989  000D80  C068  F066         	movff	cobs_encode@dst_write_ptr,cobs_encode@dst_code_write_ptr
  2990  000D84  C069  F067         	movff	cobs_encode@dst_write_ptr+1,cobs_encode@dst_code_write_ptr+1
  2991                           
  2992                           ; BSR set to: 0
  2993  000D88  0100               	movlb	0	; () banked
  2994  000D8A  4B68               	infsnz	cobs_encode@dst_write_ptr& (0+255),f,b
  2995  000D8C  2B69               	incf	(cobs_encode@dst_write_ptr+1)& (0+255),f,b
  2996                           
  2997                           ; BSR set to: 0
  2998                           ;COBS.c: 65: search_len = 1;
  2999  000D8E  0E01               	movlw	1
  3000  000D90  0100               	movlb	0	; () banked
  3001  000D92  6F65               	movwf	cobs_encode@search_len& (0+255),b
  3002                           
  3003                           ; BSR set to: 0
  3004                           ;COBS.c: 66: if (src_ptr >= src_end_ptr)
  3005  000D94  0100               	movlb	0	; () banked
  3006  000D96  5160               	movf	cobs_encode@src_end_ptr& (0+255),w,b
  3007  000D98  5C21               	subwf	cobs_encode@src_ptr,w,c
  3008  000D9A  0100               	movlb	0	; () banked
  3009  000D9C  5161               	movf	(cobs_encode@src_end_ptr+1)& (0+255),w,b
  3010  000D9E  5822               	subwfb	cobs_encode@src_ptr+1,w,c
  3011  000DA0  B0D8               	btfsc	status,0,c
  3012  000DA2  D029               	goto	l3850
  3013  000DA4  D7CC               	goto	l3808
  3014  000DA6                     l3830:
  3015                           
  3016                           ; BSR set to: 0
  3017                           ;COBS.c: 71: else
  3018                           ;COBS.c: 72: {
  3019                           ;COBS.c: 74: *dst_write_ptr++ = src_byte;
  3020  000DA6  C068  FFD9         	movff	cobs_encode@dst_write_ptr,fsr2l
  3021  000DAA  C069  FFDA         	movff	cobs_encode@dst_write_ptr+1,fsr2h
  3022  000DAE  C062  FFDF         	movff	cobs_encode@src_byte,indf2
  3023                           
  3024                           ; BSR set to: 0
  3025  000DB2  0100               	movlb	0	; () banked
  3026  000DB4  4B68               	infsnz	cobs_encode@dst_write_ptr& (0+255),f,b
  3027  000DB6  2B69               	incf	(cobs_encode@dst_write_ptr+1)& (0+255),f,b
  3028                           
  3029                           ; BSR set to: 0
  3030                           ;COBS.c: 75: search_len++;
  3031  000DB8  0100               	movlb	0	; () banked
  3032  000DBA  2B65               	incf	cobs_encode@search_len& (0+255),f,b
  3033                           
  3034                           ; BSR set to: 0
  3035                           ;COBS.c: 76: if (src_ptr >= src_end_ptr)
  3036  000DBC  0100               	movlb	0	; () banked
  3037  000DBE  5160               	movf	cobs_encode@src_end_ptr& (0+255),w,b
  3038  000DC0  5C21               	subwf	cobs_encode@src_ptr,w,c
  3039  000DC2  0100               	movlb	0	; () banked
  3040  000DC4  5161               	movf	(cobs_encode@src_end_ptr+1)& (0+255),w,b
  3041  000DC6  5822               	subwfb	cobs_encode@src_ptr+1,w,c
  3042  000DC8  B0D8               	btfsc	status,0,c
  3043  000DCA  D015               	goto	l3850
  3044                           
  3045                           ; BSR set to: 0
  3046                           ;COBS.c: 79: }
  3047                           ;COBS.c: 80: if (search_len == 0xFF)
  3048                           
  3049                           ; BSR set to: 0
  3050                           
  3051                           ; BSR set to: 0
  3052                           ;COBS.c: 77: {
  3053                           ;COBS.c: 78: break;
  3054  000DCC  0100               	movlb	0	; () banked
  3055  000DCE  2965               	incf	cobs_encode@search_len& (0+255),w,b
  3056  000DD0  A4D8               	btfss	status,2,c
  3057  000DD2  D7B5               	goto	l3808
  3058                           
  3059                           ; BSR set to: 0
  3060                           ;COBS.c: 81: {
  3061                           ;COBS.c: 84: *dst_code_write_ptr = search_len;
  3062  000DD4  C066  FFD9         	movff	cobs_encode@dst_code_write_ptr,fsr2l
  3063  000DD8  C067  FFDA         	movff	cobs_encode@dst_code_write_ptr+1,fsr2h
  3064  000DDC  C065  FFDF         	movff	cobs_encode@search_len,indf2
  3065                           
  3066                           ; BSR set to: 0
  3067                           ;COBS.c: 85: dst_code_write_ptr = dst_write_ptr++;
  3068  000DE0  C068  F066         	movff	cobs_encode@dst_write_ptr,cobs_encode@dst_code_write_ptr
  3069  000DE4  C069  F067         	movff	cobs_encode@dst_write_ptr+1,cobs_encode@dst_code_write_ptr+1
  3070                           
  3071                           ; BSR set to: 0
  3072  000DE8  0100               	movlb	0	; () banked
  3073  000DEA  4B68               	infsnz	cobs_encode@dst_write_ptr& (0+255),f,b
  3074  000DEC  2B69               	incf	(cobs_encode@dst_write_ptr+1)& (0+255),f,b
  3075                           
  3076                           ; BSR set to: 0
  3077                           ;COBS.c: 86: search_len = 1;
  3078  000DEE  0E01               	movlw	1
  3079  000DF0  0100               	movlb	0	; () banked
  3080  000DF2  6F65               	movwf	cobs_encode@search_len& (0+255),b
  3081                           
  3082                           ; BSR set to: 0
  3083                           ;COBS.c: 87: }
  3084                           ;COBS.c: 88: }
  3085                           ;COBS.c: 89: }
  3086                           
  3087                           ; BSR set to: 0
  3088  000DF4  D7A4               	goto	l3808
  3089  000DF6                     l3850:
  3090                           
  3091                           ; BSR set to: 0
  3092                           ;COBS.c: 90: }
  3093                           ;COBS.c: 96: if (dst_code_write_ptr >= dst_buf_end_ptr)
  3094  000DF6  0100               	movlb	0	; () banked
  3095  000DF8  5163               	movf	cobs_encode@dst_buf_end_ptr& (0+255),w,b
  3096  000DFA  0100               	movlb	0	; () banked
  3097  000DFC  5D66               	subwf	cobs_encode@dst_code_write_ptr& (0+255),w,b
  3098  000DFE  0100               	movlb	0	; () banked
  3099  000E00  5164               	movf	(cobs_encode@dst_buf_end_ptr+1)& (0+255),w,b
  3100  000E02  0100               	movlb	0	; () banked
  3101  000E04  5967               	subwfb	(cobs_encode@dst_code_write_ptr+1)& (0+255),w,b
  3102  000E06  A0D8               	btfss	status,0,c
  3103  000E08  D007               	goto	l3856
  3104                           
  3105                           ; BSR set to: 0
  3106                           ;COBS.c: 97: {
  3107                           ;COBS.c: 99: result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
  3108  000E0A  0100               	movlb	0	; () banked
  3109  000E0C  836C               	bsf	(cobs_encode@result+2)& (0+255),1,b
  3110                           
  3111                           ; BSR set to: 0
  3112                           ;COBS.c: 100: dst_write_ptr = dst_buf_end_ptr;
  3113  000E0E  C063  F068         	movff	cobs_encode@dst_buf_end_ptr,cobs_encode@dst_write_ptr
  3114  000E12  C064  F069         	movff	cobs_encode@dst_buf_end_ptr+1,cobs_encode@dst_write_ptr+1
  3115                           
  3116                           ;COBS.c: 101: }
  3117  000E16  D006               	goto	l3858
  3118  000E18                     l3856:
  3119                           
  3120                           ; BSR set to: 0
  3121                           ;COBS.c: 102: else
  3122                           ;COBS.c: 103: {
  3123                           ;COBS.c: 105: *dst_code_write_ptr = search_len;
  3124  000E18  C066  FFD9         	movff	cobs_encode@dst_code_write_ptr,fsr2l
  3125  000E1C  C067  FFDA         	movff	cobs_encode@dst_code_write_ptr+1,fsr2h
  3126  000E20  C065  FFDF         	movff	cobs_encode@search_len,indf2
  3127  000E24                     l3858:
  3128                           
  3129                           ; BSR set to: 0
  3130                           ;COBS.c: 106: }
  3131                           ;COBS.c: 109: result.out_len = dst_write_ptr - dst_buf_ptr;
  3132  000E24  C01D  F025         	movff	cobs_encode@dst_buf_ptr,??_cobs_encode
  3133  000E28  C01E  F026         	movff	cobs_encode@dst_buf_ptr+1,??_cobs_encode+1
  3134  000E2C  1E25               	comf	??_cobs_encode,f,c
  3135  000E2E  1E26               	comf	??_cobs_encode+1,f,c
  3136  000E30  4A25               	infsnz	??_cobs_encode,f,c
  3137  000E32  2A26               	incf	??_cobs_encode+1,f,c
  3138  000E34  0100               	movlb	0	; () banked
  3139  000E36  5168               	movf	cobs_encode@dst_write_ptr& (0+255),w,b
  3140  000E38  2425               	addwf	??_cobs_encode,w,c
  3141  000E3A  0100               	movlb	0	; () banked
  3142  000E3C  6F6A               	movwf	cobs_encode@result& (0+255),b
  3143  000E3E  0100               	movlb	0	; () banked
  3144  000E40  5169               	movf	(cobs_encode@dst_write_ptr+1)& (0+255),w,b
  3145  000E42  2026               	addwfc	??_cobs_encode+1,w,c
  3146  000E44  0100               	movlb	0	; () banked
  3147  000E46  6F6B               	movwf	(cobs_encode@result+1)& (0+255),b
  3148                           
  3149                           ; BSR set to: 0
  3150                           ;COBS.c: 111: return result;
  3151  000E48  C06A  F01D         	movff	cobs_encode@result,?_cobs_encode
  3152  000E4C  C06B  F01E         	movff	cobs_encode@result+1,?_cobs_encode+1
  3153  000E50  C06C  F01F         	movff	cobs_encode@result+2,?_cobs_encode+2
  3154  000E54  0012               	return	
  3155  000E56                     __end_of_cobs_encode:
  3156                           	opt stack 0
  3157                           tblptru	equ	0xFF8
  3158                           tblptrh	equ	0xFF7
  3159                           tblptrl	equ	0xFF6
  3160                           tablat	equ	0xFF5
  3161                           prodh	equ	0xFF4
  3162                           prodl	equ	0xFF3
  3163                           intcon	equ	0xFF2
  3164                           postinc0	equ	0xFEE
  3165                           wreg	equ	0xFE8
  3166                           indf1	equ	0xFE7
  3167                           postdec1	equ	0xFE5
  3168                           fsr1h	equ	0xFE2
  3169                           fsr1l	equ	0xFE1
  3170                           indf2	equ	0xFDF
  3171                           postinc2	equ	0xFDE
  3172                           postdec2	equ	0xFDD
  3173                           fsr2h	equ	0xFDA
  3174                           fsr2l	equ	0xFD9
  3175                           status	equ	0xFD8
  3176                           
  3177 ;; *************** function _Send_put *****************
  3178 ;; Defined at:
  3179 ;;		line 129 in file "UART.c"
  3180 ;; Parameters:    Size  Location     Type
  3181 ;;  _data           1    wreg     unsigned char 
  3182 ;; Auto vars:     Size  Location     Type
  3183 ;;  _data           1   39[COMRAM] unsigned char 
  3184 ;; Return value:  Size  Location     Type
  3185 ;;                  1    wreg      void 
  3186 ;; Registers used:
  3187 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3188 ;; Tracked objects:
  3189 ;;		On entry : 0/0
  3190 ;;		On exit  : 0/0
  3191 ;;		Unchanged: 0/0
  3192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3193 ;;      Params:         0       0       0       0       0       0       0
  3194 ;;      Locals:         1       0       0       0       0       0       0
  3195 ;;      Temps:          0       0       0       0       0       0       0
  3196 ;;      Totals:         1       0       0       0       0       0       0
  3197 ;;Total ram usage:        1 bytes
  3198 ;; Hardware stack levels used:    1
  3199 ;; Hardware stack levels required when called:    8
  3200 ;; This function calls:
  3201 ;;		_UART_buff_get
  3202 ;;		_UART_buff_put
  3203 ;; This function is called by:
  3204 ;;		_sendData
  3205 ;;		_putch
  3206 ;; This function uses a non-reentrant model
  3207 ;;
  3208                           
  3209                           	psect	text10
  3210  001FE8                     __ptext10:
  3211                           	opt stack 0
  3212  001FE8                     _Send_put:
  3213                           	opt stack 18
  3214                           
  3215                           ; BSR set to: 0
  3216                           ;incstack = 0
  3217                           ;Send_put@_data stored from wreg
  3218  001FE8  6E28               	movwf	Send_put@_data,c
  3219                           
  3220                           ;UART.c: 130: UART_buff_put(&output_buffer, _data);
  3221  001FEA  0E00               	movlw	low _output_buffer
  3222  001FEC  6E23               	movwf	UART_buff_put@_this,c
  3223  001FEE  0E02               	movlw	high _output_buffer
  3224  001FF0  6E24               	movwf	UART_buff_put@_this+1,c
  3225  001FF2  C028  F025         	movff	Send_put@_data,UART_buff_put@c
  3226  001FF6  ECBC  F007         	call	_UART_buff_put	;wreg free
  3227                           
  3228                           ;UART.c: 131: if (Transmit_stall == 1) {
  3229  001FFA  0441               	decf	_Transmit_stall,w,c
  3230  001FFC  A4D8               	btfss	status,2,c
  3231  001FFE  0012               	return	
  3232                           
  3233                           ;UART.c: 132: Transmit_stall = 0;
  3234  002000  0E00               	movlw	0
  3235  002002  6E41               	movwf	_Transmit_stall,c
  3236                           
  3237                           ;UART.c: 133: TXREG1 = UART_buff_get(&output_buffer);
  3238  002004  0E00               	movlw	low _output_buffer
  3239  002006  6E23               	movwf	UART_buff_get@_this,c
  3240  002008  0E02               	movlw	high _output_buffer
  3241  00200A  6E24               	movwf	UART_buff_get@_this+1,c
  3242  00200C  ECBB  F00B         	call	_UART_buff_get	;wreg free
  3243  002010  6EAD               	movwf	4013,c	;volatile
  3244                           
  3245                           ;UART.c: 134: PIE1bits.TX1IE = 1;
  3246  002012  889D               	bsf	3997,4,c	;volatile
  3247  002014  0012               	return	
  3248  002016                     __end_of_Send_put:
  3249                           	opt stack 0
  3250                           tblptru	equ	0xFF8
  3251                           tblptrh	equ	0xFF7
  3252                           tblptrl	equ	0xFF6
  3253                           tablat	equ	0xFF5
  3254                           prodh	equ	0xFF4
  3255                           prodl	equ	0xFF3
  3256                           intcon	equ	0xFF2
  3257                           postinc0	equ	0xFEE
  3258                           wreg	equ	0xFE8
  3259                           indf1	equ	0xFE7
  3260                           postdec1	equ	0xFE5
  3261                           fsr1h	equ	0xFE2
  3262                           fsr1l	equ	0xFE1
  3263                           indf2	equ	0xFDF
  3264                           postinc2	equ	0xFDE
  3265                           postdec2	equ	0xFDD
  3266                           fsr2h	equ	0xFDA
  3267                           fsr2l	equ	0xFD9
  3268                           status	equ	0xFD8
  3269                           
  3270 ;; *************** function _UART_buff_put *****************
  3271 ;; Defined at:
  3272 ;;		line 67 in file "UART.c"
  3273 ;; Parameters:    Size  Location     Type
  3274 ;;  _this           2   34[COMRAM] PTR struct UART_ring_buf
  3275 ;;		 -> output_buffer(106), input_buffer(106), 
  3276 ;;  c               1   36[COMRAM] const unsigned char 
  3277 ;; Auto vars:     Size  Location     Type
  3278 ;;		None
  3279 ;; Return value:  Size  Location     Type
  3280 ;;                  1    wreg      void 
  3281 ;; Registers used:
  3282 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3283 ;; Tracked objects:
  3284 ;;		On entry : 0/0
  3285 ;;		On exit  : 0/0
  3286 ;;		Unchanged: 0/0
  3287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3288 ;;      Params:         3       0       0       0       0       0       0
  3289 ;;      Locals:         0       0       0       0       0       0       0
  3290 ;;      Temps:          2       0       0       0       0       0       0
  3291 ;;      Totals:         5       0       0       0       0       0       0
  3292 ;;Total ram usage:        5 bytes
  3293 ;; Hardware stack levels used:    1
  3294 ;; Hardware stack levels required when called:    7
  3295 ;; This function calls:
  3296 ;;		_UART_buff_modulo_inc
  3297 ;; This function is called by:
  3298 ;;		_Send_put
  3299 ;; This function uses a non-reentrant model
  3300 ;;
  3301                           
  3302                           	psect	text11
  3303  000F78                     __ptext11:
  3304                           	opt stack 0
  3305  000F78                     _UART_buff_put:
  3306                           	opt stack 18
  3307                           
  3308                           ;UART.c: 68: if (_this->count < 100) {
  3309                           
  3310                           ;incstack = 0
  3311  000F78  EE20 F068          	lfsr	2,104
  3312  000F7C  5023               	movf	UART_buff_put@_this,w,c
  3313  000F7E  26D9               	addwf	fsr2l,f,c
  3314  000F80  5024               	movf	UART_buff_put@_this+1,w,c
  3315  000F82  22DA               	addwfc	fsr2h,f,c
  3316  000F84  0E01               	movlw	1
  3317  000F86  BEDB               	btfsc	plusw2,7,c
  3318  000F88  D007               	goto	l3716
  3319  000F8A  0E01               	movlw	1
  3320  000F8C  50DB               	movf	plusw2,w,c
  3321  000F8E  E13A               	bnz	l3722
  3322  000F90  0E64               	movlw	100
  3323  000F92  5CDE               	subwf	postinc2,w,c
  3324  000F94  B0D8               	btfsc	status,0,c
  3325  000F96  D036               	goto	l3722
  3326  000F98                     l3716:
  3327                           
  3328                           ;UART.c: 69: _this->buf[_this->head] = c;
  3329  000F98  EE20 F064          	lfsr	2,100
  3330  000F9C  5023               	movf	UART_buff_put@_this,w,c
  3331  000F9E  26D9               	addwf	fsr2l,f,c
  3332  000FA0  5024               	movf	UART_buff_put@_this+1,w,c
  3333  000FA2  22DA               	addwfc	fsr2h,f,c
  3334  000FA4  CFDE F026          	movff	postinc2,??_UART_buff_put
  3335  000FA8  CFDD F027          	movff	postdec2,??_UART_buff_put+1
  3336  000FAC  5026               	movf	??_UART_buff_put,w,c
  3337  000FAE  2423               	addwf	UART_buff_put@_this,w,c
  3338  000FB0  6ED9               	movwf	fsr2l,c
  3339  000FB2  5027               	movf	??_UART_buff_put+1,w,c
  3340  000FB4  2024               	addwfc	UART_buff_put@_this+1,w,c
  3341  000FB6  6EDA               	movwf	fsr2h,c
  3342  000FB8  C025  FFDF         	movff	UART_buff_put@c,indf2
  3343                           
  3344                           ;UART.c: 70: _this->head = UART_buff_modulo_inc(_this->head, 100);
  3345  000FBC  EE20 F064          	lfsr	2,100
  3346  000FC0  5023               	movf	UART_buff_put@_this,w,c
  3347  000FC2  26D9               	addwf	fsr2l,f,c
  3348  000FC4  5024               	movf	UART_buff_put@_this+1,w,c
  3349  000FC6  22DA               	addwfc	fsr2h,f,c
  3350  000FC8  CFDE F01D          	movff	postinc2,UART_buff_modulo_inc@value
  3351  000FCC  CFDD F01E          	movff	postdec2,UART_buff_modulo_inc@value+1
  3352  000FD0  0E00               	movlw	0
  3353  000FD2  6E20               	movwf	UART_buff_modulo_inc@modulus+1,c
  3354  000FD4  0E64               	movlw	100
  3355  000FD6  6E1F               	movwf	UART_buff_modulo_inc@modulus,c
  3356  000FD8  EC21  F010         	call	_UART_buff_modulo_inc	;wreg free
  3357  000FDC  EE20 F064          	lfsr	2,100
  3358  000FE0  5023               	movf	UART_buff_put@_this,w,c
  3359  000FE2  26D9               	addwf	fsr2l,f,c
  3360  000FE4  5024               	movf	UART_buff_put@_this+1,w,c
  3361  000FE6  22DA               	addwfc	fsr2h,f,c
  3362  000FE8  C01D  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3363  000FEC  C01E  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3364                           
  3365                           ;UART.c: 71: ++_this->count;
  3366  000FF0  EE20 F068          	lfsr	2,104
  3367  000FF4  5023               	movf	UART_buff_put@_this,w,c
  3368  000FF6  26D9               	addwf	fsr2l,f,c
  3369  000FF8  5024               	movf	UART_buff_put@_this+1,w,c
  3370  000FFA  22DA               	addwfc	fsr2h,f,c
  3371  000FFC  2ADE               	incf	postinc2,f,c
  3372  000FFE  0E00               	movlw	0
  3373  001000  22DD               	addwfc	postdec2,f,c
  3374                           
  3375                           ;UART.c: 72: } else {
  3376  001002  0012               	return	
  3377  001004                     l3722:
  3378                           
  3379                           ;UART.c: 73: _this->buf[_this->head] = c;
  3380  001004  EE20 F064          	lfsr	2,100
  3381  001008  5023               	movf	UART_buff_put@_this,w,c
  3382  00100A  26D9               	addwf	fsr2l,f,c
  3383  00100C  5024               	movf	UART_buff_put@_this+1,w,c
  3384  00100E  22DA               	addwfc	fsr2h,f,c
  3385  001010  CFDE F026          	movff	postinc2,??_UART_buff_put
  3386  001014  CFDD F027          	movff	postdec2,??_UART_buff_put+1
  3387  001018  5026               	movf	??_UART_buff_put,w,c
  3388  00101A  2423               	addwf	UART_buff_put@_this,w,c
  3389  00101C  6ED9               	movwf	fsr2l,c
  3390  00101E  5027               	movf	??_UART_buff_put+1,w,c
  3391  001020  2024               	addwfc	UART_buff_put@_this+1,w,c
  3392  001022  6EDA               	movwf	fsr2h,c
  3393  001024  C025  FFDF         	movff	UART_buff_put@c,indf2
  3394                           
  3395                           ;UART.c: 74: _this->head = UART_buff_modulo_inc(_this->head, 100);
  3396  001028  EE20 F064          	lfsr	2,100
  3397  00102C  5023               	movf	UART_buff_put@_this,w,c
  3398  00102E  26D9               	addwf	fsr2l,f,c
  3399  001030  5024               	movf	UART_buff_put@_this+1,w,c
  3400  001032  22DA               	addwfc	fsr2h,f,c
  3401  001034  CFDE F01D          	movff	postinc2,UART_buff_modulo_inc@value
  3402  001038  CFDD F01E          	movff	postdec2,UART_buff_modulo_inc@value+1
  3403  00103C  0E00               	movlw	0
  3404  00103E  6E20               	movwf	UART_buff_modulo_inc@modulus+1,c
  3405  001040  0E64               	movlw	100
  3406  001042  6E1F               	movwf	UART_buff_modulo_inc@modulus,c
  3407  001044  EC21  F010         	call	_UART_buff_modulo_inc	;wreg free
  3408  001048  EE20 F064          	lfsr	2,100
  3409  00104C  5023               	movf	UART_buff_put@_this,w,c
  3410  00104E  26D9               	addwf	fsr2l,f,c
  3411  001050  5024               	movf	UART_buff_put@_this+1,w,c
  3412  001052  22DA               	addwfc	fsr2h,f,c
  3413  001054  C01D  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3414  001058  C01E  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3415                           
  3416                           ;UART.c: 75: _this->tail = UART_buff_modulo_inc(_this->tail, 100);
  3417  00105C  EE20 F066          	lfsr	2,102
  3418  001060  5023               	movf	UART_buff_put@_this,w,c
  3419  001062  26D9               	addwf	fsr2l,f,c
  3420  001064  5024               	movf	UART_buff_put@_this+1,w,c
  3421  001066  22DA               	addwfc	fsr2h,f,c
  3422  001068  CFDE F01D          	movff	postinc2,UART_buff_modulo_inc@value
  3423  00106C  CFDD F01E          	movff	postdec2,UART_buff_modulo_inc@value+1
  3424  001070  0E00               	movlw	0
  3425  001072  6E20               	movwf	UART_buff_modulo_inc@modulus+1,c
  3426  001074  0E64               	movlw	100
  3427  001076  6E1F               	movwf	UART_buff_modulo_inc@modulus,c
  3428  001078  EC21  F010         	call	_UART_buff_modulo_inc	;wreg free
  3429  00107C  EE20 F066          	lfsr	2,102
  3430  001080  5023               	movf	UART_buff_put@_this,w,c
  3431  001082  26D9               	addwf	fsr2l,f,c
  3432  001084  5024               	movf	UART_buff_put@_this+1,w,c
  3433  001086  22DA               	addwfc	fsr2h,f,c
  3434  001088  C01D  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3435  00108C  C01E  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3436  001090  0012               	return	
  3437  001092                     __end_of_UART_buff_put:
  3438                           	opt stack 0
  3439                           tblptru	equ	0xFF8
  3440                           tblptrh	equ	0xFF7
  3441                           tblptrl	equ	0xFF6
  3442                           tablat	equ	0xFF5
  3443                           prodh	equ	0xFF4
  3444                           prodl	equ	0xFF3
  3445                           intcon	equ	0xFF2
  3446                           postinc0	equ	0xFEE
  3447                           wreg	equ	0xFE8
  3448                           indf1	equ	0xFE7
  3449                           postdec1	equ	0xFE5
  3450                           fsr1h	equ	0xFE2
  3451                           fsr1l	equ	0xFE1
  3452                           indf2	equ	0xFDF
  3453                           postinc2	equ	0xFDE
  3454                           postdec2	equ	0xFDD
  3455                           plusw2	equ	0xFDB
  3456                           fsr2h	equ	0xFDA
  3457                           fsr2l	equ	0xFD9
  3458                           status	equ	0xFD8
  3459                           
  3460 ;; *************** function _UART_buff_get *****************
  3461 ;; Defined at:
  3462 ;;		line 80 in file "UART.c"
  3463 ;; Parameters:    Size  Location     Type
  3464 ;;  _this           2   34[COMRAM] PTR struct UART_ring_buf
  3465 ;;		 -> output_buffer(106), input_buffer(106), 
  3466 ;; Auto vars:     Size  Location     Type
  3467 ;;  c               1   38[COMRAM] unsigned char 
  3468 ;; Return value:  Size  Location     Type
  3469 ;;                  1    wreg      unsigned char 
  3470 ;; Registers used:
  3471 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3472 ;; Tracked objects:
  3473 ;;		On entry : 0/0
  3474 ;;		On exit  : 0/0
  3475 ;;		Unchanged: 0/0
  3476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3477 ;;      Params:         2       0       0       0       0       0       0
  3478 ;;      Locals:         1       0       0       0       0       0       0
  3479 ;;      Temps:          2       0       0       0       0       0       0
  3480 ;;      Totals:         5       0       0       0       0       0       0
  3481 ;;Total ram usage:        5 bytes
  3482 ;; Hardware stack levels used:    1
  3483 ;; Hardware stack levels required when called:    7
  3484 ;; This function calls:
  3485 ;;		_UART_buff_modulo_inc
  3486 ;; This function is called by:
  3487 ;;		_Receive_get
  3488 ;;		_Send_put
  3489 ;; This function uses a non-reentrant model
  3490 ;;
  3491                           
  3492                           	psect	text12
  3493  001776                     __ptext12:
  3494                           	opt stack 0
  3495  001776                     _UART_buff_get:
  3496                           	opt stack 20
  3497                           
  3498                           ;UART.c: 81: unsigned char c;
  3499                           ;UART.c: 82: if (_this->count > 0) {
  3500                           
  3501                           ;incstack = 0
  3502  001776  EE20 F068          	lfsr	2,104
  3503  00177A  5023               	movf	UART_buff_get@_this,w,c
  3504  00177C  26D9               	addwf	fsr2l,f,c
  3505  00177E  5024               	movf	UART_buff_get@_this+1,w,c
  3506  001780  22DA               	addwfc	fsr2h,f,c
  3507  001782  0E01               	movlw	1
  3508  001784  BEDB               	btfsc	plusw2,7,c
  3509  001786  D03C               	goto	l3736
  3510  001788  0E01               	movlw	1
  3511  00178A  50DB               	movf	plusw2,w,c
  3512  00178C  E103               	bnz	u2310
  3513  00178E  04DE               	decf	postinc2,w,c
  3514  001790  A0D8               	btfss	status,0,c
  3515  001792  D036               	goto	l3736
  3516  001794                     u2310:
  3517                           
  3518                           ;UART.c: 83: c = _this->buf[_this->tail];
  3519  001794  EE20 F066          	lfsr	2,102
  3520  001798  5023               	movf	UART_buff_get@_this,w,c
  3521  00179A  26D9               	addwf	fsr2l,f,c
  3522  00179C  5024               	movf	UART_buff_get@_this+1,w,c
  3523  00179E  22DA               	addwfc	fsr2h,f,c
  3524  0017A0  CFDE F025          	movff	postinc2,??_UART_buff_get
  3525  0017A4  CFDD F026          	movff	postdec2,??_UART_buff_get+1
  3526  0017A8  5025               	movf	??_UART_buff_get,w,c
  3527  0017AA  2423               	addwf	UART_buff_get@_this,w,c
  3528  0017AC  6ED9               	movwf	fsr2l,c
  3529  0017AE  5026               	movf	??_UART_buff_get+1,w,c
  3530  0017B0  2024               	addwfc	UART_buff_get@_this+1,w,c
  3531  0017B2  6EDA               	movwf	fsr2h,c
  3532  0017B4  50DF               	movf	indf2,w,c
  3533  0017B6  6E27               	movwf	UART_buff_get@c,c
  3534                           
  3535                           ;UART.c: 84: _this->tail = UART_buff_modulo_inc(_this->tail, 100);
  3536  0017B8  EE20 F066          	lfsr	2,102
  3537  0017BC  5023               	movf	UART_buff_get@_this,w,c
  3538  0017BE  26D9               	addwf	fsr2l,f,c
  3539  0017C0  5024               	movf	UART_buff_get@_this+1,w,c
  3540  0017C2  22DA               	addwfc	fsr2h,f,c
  3541  0017C4  CFDE F01D          	movff	postinc2,UART_buff_modulo_inc@value
  3542  0017C8  CFDD F01E          	movff	postdec2,UART_buff_modulo_inc@value+1
  3543  0017CC  0E00               	movlw	0
  3544  0017CE  6E20               	movwf	UART_buff_modulo_inc@modulus+1,c
  3545  0017D0  0E64               	movlw	100
  3546  0017D2  6E1F               	movwf	UART_buff_modulo_inc@modulus,c
  3547  0017D4  EC21  F010         	call	_UART_buff_modulo_inc	;wreg free
  3548  0017D8  EE20 F066          	lfsr	2,102
  3549  0017DC  5023               	movf	UART_buff_get@_this,w,c
  3550  0017DE  26D9               	addwf	fsr2l,f,c
  3551  0017E0  5024               	movf	UART_buff_get@_this+1,w,c
  3552  0017E2  22DA               	addwfc	fsr2h,f,c
  3553  0017E4  C01D  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3554  0017E8  C01E  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3555                           
  3556                           ;UART.c: 85: --_this->count;
  3557  0017EC  EE20 F068          	lfsr	2,104
  3558  0017F0  5023               	movf	UART_buff_get@_this,w,c
  3559  0017F2  26D9               	addwf	fsr2l,f,c
  3560  0017F4  5024               	movf	UART_buff_get@_this+1,w,c
  3561  0017F6  22DA               	addwfc	fsr2h,f,c
  3562  0017F8  06DE               	decf	postinc2,f,c
  3563  0017FA  0E00               	movlw	0
  3564  0017FC  5ADD               	subwfb	postdec2,f,c
  3565                           
  3566                           ;UART.c: 86: } else {
  3567  0017FE  D002               	goto	l599
  3568  001800                     l3736:
  3569                           
  3570                           ;UART.c: 87: c = 0;
  3571  001800  0E00               	movlw	0
  3572  001802  6E27               	movwf	UART_buff_get@c,c
  3573  001804                     l599:
  3574                           
  3575                           ;UART.c: 88: }
  3576                           ;UART.c: 89: return (c);
  3577  001804  5027               	movf	UART_buff_get@c,w,c
  3578  001806  0012               	return	
  3579  001808                     __end_of_UART_buff_get:
  3580                           	opt stack 0
  3581                           tblptru	equ	0xFF8
  3582                           tblptrh	equ	0xFF7
  3583                           tblptrl	equ	0xFF6
  3584                           tablat	equ	0xFF5
  3585                           prodh	equ	0xFF4
  3586                           prodl	equ	0xFF3
  3587                           intcon	equ	0xFF2
  3588                           postinc0	equ	0xFEE
  3589                           wreg	equ	0xFE8
  3590                           indf1	equ	0xFE7
  3591                           postdec1	equ	0xFE5
  3592                           fsr1h	equ	0xFE2
  3593                           fsr1l	equ	0xFE1
  3594                           indf2	equ	0xFDF
  3595                           postinc2	equ	0xFDE
  3596                           postdec2	equ	0xFDD
  3597                           plusw2	equ	0xFDB
  3598                           fsr2h	equ	0xFDA
  3599                           fsr2l	equ	0xFD9
  3600                           status	equ	0xFD8
  3601                           
  3602 ;; *************** function _UART_buff_modulo_inc *****************
  3603 ;; Defined at:
  3604 ;;		line 105 in file "UART.c"
  3605 ;; Parameters:    Size  Location     Type
  3606 ;;  value           2   28[COMRAM] const unsigned int 
  3607 ;;  modulus         2   30[COMRAM] const unsigned int 
  3608 ;; Auto vars:     Size  Location     Type
  3609 ;;  my_value        2   32[COMRAM] unsigned int 
  3610 ;; Return value:  Size  Location     Type
  3611 ;;                  2   28[COMRAM] unsigned int 
  3612 ;; Registers used:
  3613 ;;		wreg, status,2, status,0
  3614 ;; Tracked objects:
  3615 ;;		On entry : 0/0
  3616 ;;		On exit  : 0/0
  3617 ;;		Unchanged: 0/0
  3618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3619 ;;      Params:         4       0       0       0       0       0       0
  3620 ;;      Locals:         2       0       0       0       0       0       0
  3621 ;;      Temps:          0       0       0       0       0       0       0
  3622 ;;      Totals:         6       0       0       0       0       0       0
  3623 ;;Total ram usage:        6 bytes
  3624 ;; Hardware stack levels used:    1
  3625 ;; Hardware stack levels required when called:    6
  3626 ;; This function calls:
  3627 ;;		Nothing
  3628 ;; This function is called by:
  3629 ;;		_UART_buff_put
  3630 ;;		_UART_buff_get
  3631 ;; This function uses a non-reentrant model
  3632 ;;
  3633                           
  3634                           	psect	text13
  3635  002042                     __ptext13:
  3636                           	opt stack 0
  3637  002042                     _UART_buff_modulo_inc:
  3638                           	opt stack 20
  3639                           
  3640                           ;UART.c: 106: unsigned int my_value = value + 1;
  3641                           
  3642                           ;incstack = 0
  3643  002042  0E01               	movlw	1
  3644  002044  241D               	addwf	UART_buff_modulo_inc@value,w,c
  3645  002046  6E21               	movwf	UART_buff_modulo_inc@my_value,c
  3646  002048  0E00               	movlw	0
  3647  00204A  201E               	addwfc	UART_buff_modulo_inc@value+1,w,c
  3648  00204C  6E22               	movwf	UART_buff_modulo_inc@my_value+1,c
  3649                           
  3650                           ;UART.c: 107: if (my_value >= modulus) {
  3651  00204E  501F               	movf	UART_buff_modulo_inc@modulus,w,c
  3652  002050  5C21               	subwf	UART_buff_modulo_inc@my_value,w,c
  3653  002052  5020               	movf	UART_buff_modulo_inc@modulus+1,w,c
  3654  002054  5822               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  3655  002056  A0D8               	btfss	status,0,c
  3656  002058  D004               	goto	l3710
  3657                           
  3658                           ;UART.c: 108: my_value = 0;
  3659  00205A  0E00               	movlw	0
  3660  00205C  6E22               	movwf	UART_buff_modulo_inc@my_value+1,c
  3661  00205E  0E00               	movlw	0
  3662  002060  6E21               	movwf	UART_buff_modulo_inc@my_value,c
  3663  002062                     l3710:
  3664                           
  3665                           ;UART.c: 109: }
  3666                           ;UART.c: 110: return (my_value);
  3667  002062  C021  F01D         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  3668  002066  C022  F01E         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  3669  00206A  0012               	return	
  3670  00206C                     __end_of_UART_buff_modulo_inc:
  3671                           	opt stack 0
  3672                           tblptru	equ	0xFF8
  3673                           tblptrh	equ	0xFF7
  3674                           tblptrl	equ	0xFF6
  3675                           tablat	equ	0xFF5
  3676                           prodh	equ	0xFF4
  3677                           prodl	equ	0xFF3
  3678                           intcon	equ	0xFF2
  3679                           postinc0	equ	0xFEE
  3680                           wreg	equ	0xFE8
  3681                           indf1	equ	0xFE7
  3682                           postdec1	equ	0xFE5
  3683                           fsr1h	equ	0xFE2
  3684                           fsr1l	equ	0xFE1
  3685                           indf2	equ	0xFDF
  3686                           postinc2	equ	0xFDE
  3687                           postdec2	equ	0xFDD
  3688                           plusw2	equ	0xFDB
  3689                           fsr2h	equ	0xFDA
  3690                           fsr2l	equ	0xFD9
  3691                           status	equ	0xFD8
  3692                           
  3693 ;; *************** function _CRC8 *****************
  3694 ;; Defined at:
  3695 ;;		line 21 in file "CarCom.c"
  3696 ;; Parameters:    Size  Location     Type
  3697 ;;  data            2   28[COMRAM] PTR const unsigned char 
  3698 ;;		 -> ProcessArray(30), sendData@SendArray(30), 
  3699 ;;  len             1   30[COMRAM] unsigned char 
  3700 ;; Auto vars:     Size  Location     Type
  3701 ;;  sum             1   31[COMRAM] unsigned char 
  3702 ;;  tempI           1   33[COMRAM] unsigned char 
  3703 ;;  extract         1   32[COMRAM] unsigned char 
  3704 ;;  crc             1   34[COMRAM] unsigned char 
  3705 ;; Return value:  Size  Location     Type
  3706 ;;                  1    wreg      unsigned char 
  3707 ;; Registers used:
  3708 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3709 ;; Tracked objects:
  3710 ;;		On entry : 0/0
  3711 ;;		On exit  : 0/0
  3712 ;;		Unchanged: 0/0
  3713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3714 ;;      Params:         3       0       0       0       0       0       0
  3715 ;;      Locals:         4       0       0       0       0       0       0
  3716 ;;      Temps:          0       0       0       0       0       0       0
  3717 ;;      Totals:         7       0       0       0       0       0       0
  3718 ;;Total ram usage:        7 bytes
  3719 ;; Hardware stack levels used:    1
  3720 ;; Hardware stack levels required when called:    6
  3721 ;; This function calls:
  3722 ;;		Nothing
  3723 ;; This function is called by:
  3724 ;;		_sendData
  3725 ;;		_receiveData
  3726 ;; This function uses a non-reentrant model
  3727 ;;
  3728                           
  3729                           	psect	text14
  3730  001D8E                     __ptext14:
  3731                           	opt stack 0
  3732  001D8E                     _CRC8:
  3733                           	opt stack 20
  3734                           
  3735                           ;CarCom.c: 22: unsigned char crc = 0x00;
  3736                           
  3737                           ;incstack = 0
  3738  001D8E  0E00               	movlw	0
  3739  001D90  6E23               	movwf	CRC8@crc,c
  3740                           
  3741                           ;CarCom.c: 23: while (len--) {
  3742  001D92  D01C               	goto	l3784
  3743  001D94                     l3768:
  3744                           
  3745                           ;CarCom.c: 24: unsigned char extract = *data++;
  3746  001D94  C01D  FFD9         	movff	CRC8@data,fsr2l
  3747  001D98  C01E  FFDA         	movff	CRC8@data+1,fsr2h
  3748  001D9C  50DF               	movf	indf2,w,c
  3749  001D9E  6E21               	movwf	CRC8@extract,c
  3750  001DA0  4A1D               	infsnz	CRC8@data,f,c
  3751  001DA2  2A1E               	incf	CRC8@data+1,f,c
  3752                           
  3753                           ;CarCom.c: 25: unsigned char tempI;
  3754                           ;CarCom.c: 26: for (tempI = 8; tempI; tempI--) {
  3755  001DA4  0E08               	movlw	8
  3756  001DA6  6E22               	movwf	CRC8@tempI,c
  3757  001DA8  D00E               	goto	l3782
  3758  001DAA                     l3774:
  3759                           
  3760                           ;CarCom.c: 27: unsigned char sum = (crc ^ extract) & 0x01;
  3761  001DAA  5023               	movf	CRC8@crc,w,c
  3762  001DAC  1821               	xorwf	CRC8@extract,w,c
  3763  001DAE  0B01               	andlw	1
  3764  001DB0  6E20               	movwf	CRC8@sum,c
  3765                           
  3766                           ;CarCom.c: 28: crc >>= 1;
  3767  001DB2  90D8               	bcf	status,0,c
  3768  001DB4  3223               	rrcf	CRC8@crc,f,c
  3769                           
  3770                           ;CarCom.c: 29: if (sum) {
  3771  001DB6  5020               	movf	CRC8@sum,w,c
  3772  001DB8  B4D8               	btfsc	status,2,c
  3773  001DBA  D002               	goto	l770
  3774                           
  3775                           ;CarCom.c: 30: crc ^= 0x8C;
  3776  001DBC  0E8C               	movlw	140
  3777  001DBE  1A23               	xorwf	CRC8@crc,f,c
  3778  001DC0                     l770:
  3779                           
  3780                           ;CarCom.c: 31: }
  3781                           ;CarCom.c: 32: extract >>= 1;
  3782  001DC0  90D8               	bcf	status,0,c
  3783  001DC2  3221               	rrcf	CRC8@extract,f,c
  3784  001DC4  0622               	decf	CRC8@tempI,f,c
  3785  001DC6                     l3782:
  3786  001DC6  5022               	movf	CRC8@tempI,w,c
  3787  001DC8  A4D8               	btfss	status,2,c
  3788  001DCA  D7EF               	goto	l3774
  3789  001DCC                     l3784:
  3790  001DCC  061F               	decf	CRC8@len,f,c
  3791  001DCE  281F               	incf	CRC8@len,w,c
  3792  001DD0  A4D8               	btfss	status,2,c
  3793  001DD2  D7E0               	goto	l3768
  3794                           
  3795                           ;CarCom.c: 33: }
  3796                           ;CarCom.c: 34: }
  3797                           ;CarCom.c: 35: return crc;
  3798  001DD4  5023               	movf	CRC8@crc,w,c
  3799  001DD6  0012               	return	
  3800  001DD8                     __end_of_CRC8:
  3801                           	opt stack 0
  3802                           tblptru	equ	0xFF8
  3803                           tblptrh	equ	0xFF7
  3804                           tblptrl	equ	0xFF6
  3805                           tablat	equ	0xFF5
  3806                           prodh	equ	0xFF4
  3807                           prodl	equ	0xFF3
  3808                           intcon	equ	0xFF2
  3809                           postinc0	equ	0xFEE
  3810                           wreg	equ	0xFE8
  3811                           indf1	equ	0xFE7
  3812                           postdec1	equ	0xFE5
  3813                           fsr1h	equ	0xFE2
  3814                           fsr1l	equ	0xFE1
  3815                           indf2	equ	0xFDF
  3816                           postinc2	equ	0xFDE
  3817                           postdec2	equ	0xFDD
  3818                           plusw2	equ	0xFDB
  3819                           fsr2h	equ	0xFDA
  3820                           fsr2l	equ	0xFD9
  3821                           status	equ	0xFD8
  3822                           
  3823 ;; *************** function _SetDataDict *****************
  3824 ;; Defined at:
  3825 ;;		line 32 in file "CarDataDictionary.c"
  3826 ;; Parameters:    Size  Location     Type
  3827 ;;  DataTable       1    wreg     unsigned char 
  3828 ;;  DataTableInd    1   28[COMRAM] unsigned char 
  3829 ;;  DataArray       2   29[COMRAM] PTR unsigned char 
  3830 ;;		 -> ComController@DataRecived(4), updateComms@DataGet(2), 
  3831 ;;  numbofbytes     1   31[COMRAM] unsigned char 
  3832 ;; Auto vars:     Size  Location     Type
  3833 ;;  DataTable       1   33[COMRAM] unsigned char 
  3834 ;;  ReturnCounte    1   35[COMRAM] unsigned char 
  3835 ;;  DataCount       1   34[COMRAM] unsigned char 
  3836 ;;  Error           1   32[COMRAM] unsigned char 
  3837 ;; Return value:  Size  Location     Type
  3838 ;;                  1    wreg      unsigned char 
  3839 ;; Registers used:
  3840 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3841 ;; Tracked objects:
  3842 ;;		On entry : 0/0
  3843 ;;		On exit  : 0/0
  3844 ;;		Unchanged: 0/0
  3845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3846 ;;      Params:         4       0       0       0       0       0       0
  3847 ;;      Locals:         4       0       0       0       0       0       0
  3848 ;;      Temps:          0       0       0       0       0       0       0
  3849 ;;      Totals:         8       0       0       0       0       0       0
  3850 ;;Total ram usage:        8 bytes
  3851 ;; Hardware stack levels used:    1
  3852 ;; Hardware stack levels required when called:    6
  3853 ;; This function calls:
  3854 ;;		Nothing
  3855 ;; This function is called by:
  3856 ;;		_updateComms
  3857 ;;		_ComController
  3858 ;; This function uses a non-reentrant model
  3859 ;;
  3860                           
  3861                           	psect	text15
  3862  001646                     __ptext15:
  3863                           	opt stack 0
  3864  001646                     _SetDataDict:
  3865                           	opt stack 21
  3866                           
  3867                           ;incstack = 0
  3868                           ;SetDataDict@DataTable stored from wreg
  3869  001646  6E22               	movwf	SetDataDict@DataTable,c
  3870                           
  3871                           ;CarDataDictionary.c: 33: unsigned char Error = 0;
  3872  001648  0E00               	movlw	0
  3873  00164A  6E21               	movwf	SetDataDict@Error,c
  3874                           
  3875                           ;CarDataDictionary.c: 34: unsigned char DataCount = 0;
  3876  00164C  0E00               	movlw	0
  3877  00164E  6E23               	movwf	SetDataDict@DataCount,c
  3878                           
  3879                           ;CarDataDictionary.c: 35: unsigned char ReturnCounter = 0;
  3880  001650  0E00               	movlw	0
  3881  001652  6E24               	movwf	SetDataDict@ReturnCounter,c
  3882                           
  3883                           ;CarDataDictionary.c: 36: switch(DataTable){
  3884  001654  D03C               	goto	l3910
  3885  001656                     l3890:
  3886                           
  3887                           ;CarDataDictionary.c: 38: DataCount = DataTableIndex + numbofbytes;
  3888  001656  501D               	movf	SetDataDict@DataTableIndex,w,c
  3889  001658  2420               	addwf	SetDataDict@numbofbytes,w,c
  3890  00165A  6E23               	movwf	SetDataDict@DataCount,c
  3891  00165C  D014               	goto	l3898
  3892  00165E                     l3892:
  3893                           
  3894                           ;CarDataDictionary.c: 40: DataTableArrayOne[DataTableIndex] = DataArray[ReturnCounter];
  3895  00165E  5024               	movf	SetDataDict@ReturnCounter,w,c
  3896  001660  0D01               	mullw	1
  3897  001662  50F3               	movf	prodl,w,c
  3898  001664  241E               	addwf	SetDataDict@DataArray,w,c
  3899  001666  6ED9               	movwf	fsr2l,c
  3900  001668  50F4               	movf	prodh,w,c
  3901  00166A  201F               	addwfc	SetDataDict@DataArray+1,w,c
  3902  00166C  6EDA               	movwf	fsr2h,c
  3903  00166E  501D               	movf	SetDataDict@DataTableIndex,w,c
  3904  001670  0D01               	mullw	1
  3905  001672  0EEB               	movlw	low _DataTableArrayOne
  3906  001674  24F3               	addwf	prodl,w,c
  3907  001676  6EE1               	movwf	fsr1l,c
  3908  001678  0E00               	movlw	high _DataTableArrayOne
  3909  00167A  20F4               	addwfc	prodh,w,c
  3910  00167C  6EE2               	movwf	fsr1h,c
  3911  00167E  CFDF FFE7          	movff	indf2,indf1
  3912                           
  3913                           ;CarDataDictionary.c: 41: ReturnCounter++;
  3914  001682  2A24               	incf	SetDataDict@ReturnCounter,f,c
  3915  001684  2A1D               	incf	SetDataDict@DataTableIndex,f,c
  3916  001686                     l3898:
  3917  001686  5023               	movf	SetDataDict@DataCount,w,c
  3918  001688  5C1D               	subwf	SetDataDict@DataTableIndex,w,c
  3919  00168A  B0D8               	btfsc	status,0,c
  3920  00168C  0012               	return	
  3921  00168E  D7E7               	goto	l3892
  3922  001690                     l3900:
  3923                           
  3924                           ;CarDataDictionary.c: 45: DataCount = DataTableIndex + numbofbytes;
  3925  001690  501D               	movf	SetDataDict@DataTableIndex,w,c
  3926  001692  2420               	addwf	SetDataDict@numbofbytes,w,c
  3927  001694  6E23               	movwf	SetDataDict@DataCount,c
  3928  001696  D014               	goto	l3908
  3929  001698                     l3902:
  3930                           
  3931                           ;CarDataDictionary.c: 47: DataTableArrayFour[DataTableIndex] = DataArray[ReturnCounter];
  3932  001698  5024               	movf	SetDataDict@ReturnCounter,w,c
  3933  00169A  0D01               	mullw	1
  3934  00169C  50F3               	movf	prodl,w,c
  3935  00169E  241E               	addwf	SetDataDict@DataArray,w,c
  3936  0016A0  6ED9               	movwf	fsr2l,c
  3937  0016A2  50F4               	movf	prodh,w,c
  3938  0016A4  201F               	addwfc	SetDataDict@DataArray+1,w,c
  3939  0016A6  6EDA               	movwf	fsr2h,c
  3940  0016A8  501D               	movf	SetDataDict@DataTableIndex,w,c
  3941  0016AA  0D01               	mullw	1
  3942  0016AC  0E2D               	movlw	low _DataTableArrayFour
  3943  0016AE  24F3               	addwf	prodl,w,c
  3944  0016B0  6EE1               	movwf	fsr1l,c
  3945  0016B2  0E00               	movlw	high _DataTableArrayFour
  3946  0016B4  20F4               	addwfc	prodh,w,c
  3947  0016B6  6EE2               	movwf	fsr1h,c
  3948  0016B8  CFDF FFE7          	movff	indf2,indf1
  3949                           
  3950                           ;CarDataDictionary.c: 48: ReturnCounter++;
  3951  0016BC  2A24               	incf	SetDataDict@ReturnCounter,f,c
  3952  0016BE  2A1D               	incf	SetDataDict@DataTableIndex,f,c
  3953  0016C0                     l3908:
  3954  0016C0  5023               	movf	SetDataDict@DataCount,w,c
  3955  0016C2  5C1D               	subwf	SetDataDict@DataTableIndex,w,c
  3956  0016C4  B0D8               	btfsc	status,0,c
  3957  0016C6  0012               	return	
  3958  0016C8  D7E7               	goto	l3902
  3959  0016CA                     l899:
  3960                           
  3961                           ;CarDataDictionary.c: 52: Error = -1;
  3962  0016CA  6821               	setf	SetDataDict@Error,c
  3963                           
  3964                           ;CarDataDictionary.c: 53: }
  3965  0016CC  0012               	return	
  3966  0016CE                     l3910:
  3967  0016CE  5022               	movf	SetDataDict@DataTable,w,c
  3968                           
  3969                           ; Switch size 1, requested type "space"
  3970                           ; Number of cases is 2, Range of values is 0 to 4
  3971                           ; switch strategies available:
  3972                           ; Name         Instructions Cycles
  3973                           ; simple_byte            7     4 (average)
  3974                           ;	Chosen strategy is simple_byte
  3975  0016D0  0A00               	xorlw	0	; case 0
  3976  0016D2  B4D8               	btfsc	status,2,c
  3977  0016D4  D7C0               	goto	l3890
  3978  0016D6  0A04               	xorlw	4	; case 4
  3979  0016D8  B4D8               	btfsc	status,2,c
  3980  0016DA  D7DA               	goto	l3900
  3981  0016DC  D7F6               	goto	l899
  3982  0016DE                     __end_of_SetDataDict:
  3983                           	opt stack 0
  3984                           tblptru	equ	0xFF8
  3985                           tblptrh	equ	0xFF7
  3986                           tblptrl	equ	0xFF6
  3987                           tablat	equ	0xFF5
  3988                           prodh	equ	0xFF4
  3989                           prodl	equ	0xFF3
  3990                           intcon	equ	0xFF2
  3991                           postinc0	equ	0xFEE
  3992                           wreg	equ	0xFE8
  3993                           indf1	equ	0xFE7
  3994                           postdec1	equ	0xFE5
  3995                           fsr1h	equ	0xFE2
  3996                           fsr1l	equ	0xFE1
  3997                           indf2	equ	0xFDF
  3998                           postinc2	equ	0xFDE
  3999                           postdec2	equ	0xFDD
  4000                           plusw2	equ	0xFDB
  4001                           fsr2h	equ	0xFDA
  4002                           fsr2l	equ	0xFD9
  4003                           status	equ	0xFD8
  4004                           
  4005 ;; *************** function _GetDataDict *****************
  4006 ;; Defined at:
  4007 ;;		line 7 in file "CarDataDictionary.c"
  4008 ;; Parameters:    Size  Location     Type
  4009 ;;  DataTable       1    wreg     unsigned char 
  4010 ;;  DataTableInd    1   28[COMRAM] unsigned char 
  4011 ;;  DataArray       2   29[COMRAM] PTR unsigned char 
  4012 ;;		 -> ComController@DataToSend_1658(4), ComController@DataToSend(4), updateComms@DataGet(2), 
  4013 ;;  numbofbytes     1   31[COMRAM] unsigned char 
  4014 ;; Auto vars:     Size  Location     Type
  4015 ;;  DataTable       1   33[COMRAM] unsigned char 
  4016 ;;  ReturnCounte    1   35[COMRAM] unsigned char 
  4017 ;;  DataCount       1   34[COMRAM] unsigned char 
  4018 ;;  Error           1   32[COMRAM] unsigned char 
  4019 ;; Return value:  Size  Location     Type
  4020 ;;                  1    wreg      unsigned char 
  4021 ;; Registers used:
  4022 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4023 ;; Tracked objects:
  4024 ;;		On entry : 0/0
  4025 ;;		On exit  : 0/0
  4026 ;;		Unchanged: 0/0
  4027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4028 ;;      Params:         4       0       0       0       0       0       0
  4029 ;;      Locals:         4       0       0       0       0       0       0
  4030 ;;      Temps:          0       0       0       0       0       0       0
  4031 ;;      Totals:         8       0       0       0       0       0       0
  4032 ;;Total ram usage:        8 bytes
  4033 ;; Hardware stack levels used:    1
  4034 ;; Hardware stack levels required when called:    6
  4035 ;; This function calls:
  4036 ;;		Nothing
  4037 ;; This function is called by:
  4038 ;;		_updateComms
  4039 ;;		_ComController
  4040 ;; This function uses a non-reentrant model
  4041 ;;
  4042                           
  4043                           	psect	text16
  4044  0016DE                     __ptext16:
  4045                           	opt stack 0
  4046  0016DE                     _GetDataDict:
  4047                           	opt stack 21
  4048                           
  4049                           ;incstack = 0
  4050                           ;GetDataDict@DataTable stored from wreg
  4051  0016DE  6E22               	movwf	GetDataDict@DataTable,c
  4052                           
  4053                           ;CarDataDictionary.c: 8: unsigned char Error = 0;
  4054  0016E0  0E00               	movlw	0
  4055  0016E2  6E21               	movwf	GetDataDict@Error,c
  4056                           
  4057                           ;CarDataDictionary.c: 9: unsigned char DataCount = 0;
  4058  0016E4  0E00               	movlw	0
  4059  0016E6  6E23               	movwf	GetDataDict@DataCount,c
  4060                           
  4061                           ;CarDataDictionary.c: 10: unsigned char ReturnCounter = 0;
  4062  0016E8  0E00               	movlw	0
  4063  0016EA  6E24               	movwf	GetDataDict@ReturnCounter,c
  4064                           
  4065                           ;CarDataDictionary.c: 11: switch(DataTable){
  4066  0016EC  D03C               	goto	l3886
  4067  0016EE                     l3866:
  4068                           
  4069                           ;CarDataDictionary.c: 13: DataCount = DataTableIndex + numbofbytes;
  4070  0016EE  501D               	movf	GetDataDict@DataTableIndex,w,c
  4071  0016F0  2420               	addwf	GetDataDict@numbofbytes,w,c
  4072  0016F2  6E23               	movwf	GetDataDict@DataCount,c
  4073  0016F4  D014               	goto	l3874
  4074  0016F6                     l3868:
  4075                           
  4076                           ;CarDataDictionary.c: 15: DataArray[ReturnCounter] = DataTableArrayOne[DataTableIndex];
  4077  0016F6  501D               	movf	GetDataDict@DataTableIndex,w,c
  4078  0016F8  0D01               	mullw	1
  4079  0016FA  0EEB               	movlw	low _DataTableArrayOne
  4080  0016FC  24F3               	addwf	prodl,w,c
  4081  0016FE  6ED9               	movwf	fsr2l,c
  4082  001700  0E00               	movlw	high _DataTableArrayOne
  4083  001702  20F4               	addwfc	prodh,w,c
  4084  001704  6EDA               	movwf	fsr2h,c
  4085  001706  5024               	movf	GetDataDict@ReturnCounter,w,c
  4086  001708  0D01               	mullw	1
  4087  00170A  50F3               	movf	prodl,w,c
  4088  00170C  241E               	addwf	GetDataDict@DataArray,w,c
  4089  00170E  6EE1               	movwf	fsr1l,c
  4090  001710  50F4               	movf	prodh,w,c
  4091  001712  201F               	addwfc	GetDataDict@DataArray+1,w,c
  4092  001714  6EE2               	movwf	fsr1h,c
  4093  001716  CFDF FFE7          	movff	indf2,indf1
  4094                           
  4095                           ;CarDataDictionary.c: 16: ReturnCounter++;
  4096  00171A  2A24               	incf	GetDataDict@ReturnCounter,f,c
  4097  00171C  2A1D               	incf	GetDataDict@DataTableIndex,f,c
  4098  00171E                     l3874:
  4099  00171E  5023               	movf	GetDataDict@DataCount,w,c
  4100  001720  5C1D               	subwf	GetDataDict@DataTableIndex,w,c
  4101  001722  B0D8               	btfsc	status,0,c
  4102  001724  0012               	return	
  4103  001726  D7E7               	goto	l3868
  4104  001728                     l3876:
  4105                           
  4106                           ;CarDataDictionary.c: 20: DataCount = DataTableIndex + numbofbytes;
  4107  001728  501D               	movf	GetDataDict@DataTableIndex,w,c
  4108  00172A  2420               	addwf	GetDataDict@numbofbytes,w,c
  4109  00172C  6E23               	movwf	GetDataDict@DataCount,c
  4110  00172E  D014               	goto	l3884
  4111  001730                     l3878:
  4112                           
  4113                           ;CarDataDictionary.c: 22: DataArray[ReturnCounter] = DataTableArrayFour[DataTableIndex];
  4114  001730  501D               	movf	GetDataDict@DataTableIndex,w,c
  4115  001732  0D01               	mullw	1
  4116  001734  0E2D               	movlw	low _DataTableArrayFour
  4117  001736  24F3               	addwf	prodl,w,c
  4118  001738  6ED9               	movwf	fsr2l,c
  4119  00173A  0E00               	movlw	high _DataTableArrayFour
  4120  00173C  20F4               	addwfc	prodh,w,c
  4121  00173E  6EDA               	movwf	fsr2h,c
  4122  001740  5024               	movf	GetDataDict@ReturnCounter,w,c
  4123  001742  0D01               	mullw	1
  4124  001744  50F3               	movf	prodl,w,c
  4125  001746  241E               	addwf	GetDataDict@DataArray,w,c
  4126  001748  6EE1               	movwf	fsr1l,c
  4127  00174A  50F4               	movf	prodh,w,c
  4128  00174C  201F               	addwfc	GetDataDict@DataArray+1,w,c
  4129  00174E  6EE2               	movwf	fsr1h,c
  4130  001750  CFDF FFE7          	movff	indf2,indf1
  4131                           
  4132                           ;CarDataDictionary.c: 23: ReturnCounter++;
  4133  001754  2A24               	incf	GetDataDict@ReturnCounter,f,c
  4134  001756  2A1D               	incf	GetDataDict@DataTableIndex,f,c
  4135  001758                     l3884:
  4136  001758  5023               	movf	GetDataDict@DataCount,w,c
  4137  00175A  5C1D               	subwf	GetDataDict@DataTableIndex,w,c
  4138  00175C  B0D8               	btfsc	status,0,c
  4139  00175E  0012               	return	
  4140  001760  D7E7               	goto	l3878
  4141  001762                     l885:
  4142                           
  4143                           ;CarDataDictionary.c: 27: Error = -1;
  4144  001762  6821               	setf	GetDataDict@Error,c
  4145                           
  4146                           ;CarDataDictionary.c: 28: }
  4147  001764  0012               	return	
  4148  001766                     l3886:
  4149  001766  5022               	movf	GetDataDict@DataTable,w,c
  4150                           
  4151                           ; Switch size 1, requested type "space"
  4152                           ; Number of cases is 2, Range of values is 0 to 4
  4153                           ; switch strategies available:
  4154                           ; Name         Instructions Cycles
  4155                           ; simple_byte            7     4 (average)
  4156                           ;	Chosen strategy is simple_byte
  4157  001768  0A00               	xorlw	0	; case 0
  4158  00176A  B4D8               	btfsc	status,2,c
  4159  00176C  D7C0               	goto	l3866
  4160  00176E  0A04               	xorlw	4	; case 4
  4161  001770  B4D8               	btfsc	status,2,c
  4162  001772  D7DA               	goto	l3876
  4163  001774  D7F6               	goto	l885
  4164  001776                     __end_of_GetDataDict:
  4165                           	opt stack 0
  4166                           tblptru	equ	0xFF8
  4167                           tblptrh	equ	0xFF7
  4168                           tblptrl	equ	0xFF6
  4169                           tablat	equ	0xFF5
  4170                           prodh	equ	0xFF4
  4171                           prodl	equ	0xFF3
  4172                           intcon	equ	0xFF2
  4173                           postinc0	equ	0xFEE
  4174                           wreg	equ	0xFE8
  4175                           indf1	equ	0xFE7
  4176                           postdec1	equ	0xFE5
  4177                           fsr1h	equ	0xFE2
  4178                           fsr1l	equ	0xFE1
  4179                           indf2	equ	0xFDF
  4180                           postinc2	equ	0xFDE
  4181                           postdec2	equ	0xFDD
  4182                           plusw2	equ	0xFDB
  4183                           fsr2h	equ	0xFDA
  4184                           fsr2l	equ	0xFD9
  4185                           status	equ	0xFD8
  4186                           
  4187 ;; *************** function _ClearBuffer *****************
  4188 ;; Defined at:
  4189 ;;		line 159 in file "UART.c"
  4190 ;; Parameters:    Size  Location     Type
  4191 ;;		None
  4192 ;; Auto vars:     Size  Location     Type
  4193 ;;		None
  4194 ;; Return value:  Size  Location     Type
  4195 ;;                  1    wreg      void 
  4196 ;; Registers used:
  4197 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4198 ;; Tracked objects:
  4199 ;;		On entry : 0/0
  4200 ;;		On exit  : 0/0
  4201 ;;		Unchanged: 0/0
  4202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4203 ;;      Params:         0       0       0       0       0       0       0
  4204 ;;      Locals:         0       0       0       0       0       0       0
  4205 ;;      Temps:          0       0       0       0       0       0       0
  4206 ;;      Totals:         0       0       0       0       0       0       0
  4207 ;;Total ram usage:        0 bytes
  4208 ;; Hardware stack levels used:    1
  4209 ;; Hardware stack levels required when called:    8
  4210 ;; This function calls:
  4211 ;;		_UART_buff_flush
  4212 ;; This function is called by:
  4213 ;;		_receiveData
  4214 ;; This function uses a non-reentrant model
  4215 ;;
  4216                           
  4217                           	psect	text17
  4218  0021A0                     __ptext17:
  4219                           	opt stack 0
  4220  0021A0                     _ClearBuffer:
  4221                           	opt stack 20
  4222                           
  4223                           ;UART.c: 160: UART_buff_flush(&input_buffer, 1);
  4224                           
  4225                           ;incstack = 0
  4226  0021A0  0E3C               	movlw	low _input_buffer
  4227  0021A2  6E25               	movwf	UART_buff_flush@_this,c
  4228  0021A4  0E01               	movlw	high _input_buffer
  4229  0021A6  6E26               	movwf	UART_buff_flush@_this+1,c
  4230  0021A8  0E00               	movlw	0
  4231  0021AA  6E28               	movwf	UART_buff_flush@clearBuffer+1,c
  4232  0021AC  0E01               	movlw	1
  4233  0021AE  6E27               	movwf	UART_buff_flush@clearBuffer,c
  4234  0021B0  EC89  F00D         	call	_UART_buff_flush	;wreg free
  4235  0021B4  0012               	return		;funcret
  4236  0021B6                     __end_of_ClearBuffer:
  4237                           	opt stack 0
  4238                           tblptru	equ	0xFF8
  4239                           tblptrh	equ	0xFF7
  4240                           tblptrl	equ	0xFF6
  4241                           tablat	equ	0xFF5
  4242                           prodh	equ	0xFF4
  4243                           prodl	equ	0xFF3
  4244                           intcon	equ	0xFF2
  4245                           postinc0	equ	0xFEE
  4246                           wreg	equ	0xFE8
  4247                           indf1	equ	0xFE7
  4248                           postdec1	equ	0xFE5
  4249                           fsr1h	equ	0xFE2
  4250                           fsr1l	equ	0xFE1
  4251                           indf2	equ	0xFDF
  4252                           postinc2	equ	0xFDE
  4253                           postdec2	equ	0xFDD
  4254                           plusw2	equ	0xFDB
  4255                           fsr2h	equ	0xFDA
  4256                           fsr2l	equ	0xFD9
  4257                           status	equ	0xFD8
  4258                           
  4259 ;; *************** function _UART_buff_flush *****************
  4260 ;; Defined at:
  4261 ;;		line 92 in file "UART.c"
  4262 ;; Parameters:    Size  Location     Type
  4263 ;;  _this           2   36[COMRAM] PTR struct UART_ring_buf
  4264 ;;		 -> input_buffer(106), 
  4265 ;;  clearBuffer     2   38[COMRAM] const int 
  4266 ;; Auto vars:     Size  Location     Type
  4267 ;;		None
  4268 ;; Return value:  Size  Location     Type
  4269 ;;                  1    wreg      void 
  4270 ;; Registers used:
  4271 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4272 ;; Tracked objects:
  4273 ;;		On entry : 0/0
  4274 ;;		On exit  : 0/0
  4275 ;;		Unchanged: 0/0
  4276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4277 ;;      Params:         4       0       0       0       0       0       0
  4278 ;;      Locals:         0       0       0       0       0       0       0
  4279 ;;      Temps:          0       0       0       0       0       0       0
  4280 ;;      Totals:         4       0       0       0       0       0       0
  4281 ;;Total ram usage:        4 bytes
  4282 ;; Hardware stack levels used:    1
  4283 ;; Hardware stack levels required when called:    7
  4284 ;; This function calls:
  4285 ;;		_memset
  4286 ;; This function is called by:
  4287 ;;		_ClearBuffer
  4288 ;; This function uses a non-reentrant model
  4289 ;;
  4290                           
  4291                           	psect	text18
  4292  001B12                     __ptext18:
  4293                           	opt stack 0
  4294  001B12                     _UART_buff_flush:
  4295                           	opt stack 20
  4296                           
  4297                           ;UART.c: 93: _this->count = 0;
  4298                           
  4299                           ;incstack = 0
  4300  001B12  EE20 F068          	lfsr	2,104
  4301  001B16  5025               	movf	UART_buff_flush@_this,w,c
  4302  001B18  26D9               	addwf	fsr2l,f,c
  4303  001B1A  5026               	movf	UART_buff_flush@_this+1,w,c
  4304  001B1C  22DA               	addwfc	fsr2h,f,c
  4305  001B1E  0E00               	movlw	0
  4306  001B20  6EDE               	movwf	postinc2,c
  4307  001B22  0E00               	movlw	0
  4308  001B24  6EDD               	movwf	postdec2,c
  4309                           
  4310                           ;UART.c: 94: _this->head = 0;
  4311  001B26  EE20 F064          	lfsr	2,100
  4312  001B2A  5025               	movf	UART_buff_flush@_this,w,c
  4313  001B2C  26D9               	addwf	fsr2l,f,c
  4314  001B2E  5026               	movf	UART_buff_flush@_this+1,w,c
  4315  001B30  22DA               	addwfc	fsr2h,f,c
  4316  001B32  0E00               	movlw	0
  4317  001B34  6EDE               	movwf	postinc2,c
  4318  001B36  0E00               	movlw	0
  4319  001B38  6EDD               	movwf	postdec2,c
  4320                           
  4321                           ;UART.c: 95: _this->tail = 0;
  4322  001B3A  EE20 F066          	lfsr	2,102
  4323  001B3E  5025               	movf	UART_buff_flush@_this,w,c
  4324  001B40  26D9               	addwf	fsr2l,f,c
  4325  001B42  5026               	movf	UART_buff_flush@_this+1,w,c
  4326  001B44  22DA               	addwfc	fsr2h,f,c
  4327  001B46  0E00               	movlw	0
  4328  001B48  6EDE               	movwf	postinc2,c
  4329  001B4A  0E00               	movlw	0
  4330  001B4C  6EDD               	movwf	postdec2,c
  4331                           
  4332                           ;UART.c: 96: if (clearBuffer) {
  4333  001B4E  5027               	movf	UART_buff_flush@clearBuffer,w,c
  4334  001B50  1028               	iorwf	UART_buff_flush@clearBuffer+1,w,c
  4335  001B52  B4D8               	btfsc	status,2,c
  4336  001B54  0012               	return	
  4337                           
  4338                           ;UART.c: 97: memset(_this->buf, 0, sizeof (_this->buf));
  4339  001B56  C025  F01D         	movff	UART_buff_flush@_this,memset@p1
  4340  001B5A  C026  F01E         	movff	UART_buff_flush@_this+1,memset@p1+1
  4341  001B5E  0E00               	movlw	0
  4342  001B60  6E20               	movwf	memset@c+1,c
  4343  001B62  0E00               	movlw	0
  4344  001B64  6E1F               	movwf	memset@c,c
  4345  001B66  0E00               	movlw	0
  4346  001B68  6E22               	movwf	memset@n+1,c
  4347  001B6A  0E64               	movlw	100
  4348  001B6C  6E21               	movwf	memset@n,c
  4349  001B6E  EC0B  F010         	call	_memset	;wreg free
  4350  001B72  0012               	return	
  4351  001B74                     __end_of_UART_buff_flush:
  4352                           	opt stack 0
  4353                           tblptru	equ	0xFF8
  4354                           tblptrh	equ	0xFF7
  4355                           tblptrl	equ	0xFF6
  4356                           tablat	equ	0xFF5
  4357                           prodh	equ	0xFF4
  4358                           prodl	equ	0xFF3
  4359                           intcon	equ	0xFF2
  4360                           postinc0	equ	0xFEE
  4361                           wreg	equ	0xFE8
  4362                           indf1	equ	0xFE7
  4363                           postdec1	equ	0xFE5
  4364                           fsr1h	equ	0xFE2
  4365                           fsr1l	equ	0xFE1
  4366                           indf2	equ	0xFDF
  4367                           postinc2	equ	0xFDE
  4368                           postdec2	equ	0xFDD
  4369                           plusw2	equ	0xFDB
  4370                           fsr2h	equ	0xFDA
  4371                           fsr2l	equ	0xFD9
  4372                           status	equ	0xFD8
  4373                           
  4374 ;; *************** function _processPowerRequest *****************
  4375 ;; Defined at:
  4376 ;;		line 29 in file "Communications.c"
  4377 ;; Parameters:    Size  Location     Type
  4378 ;;  powerSet        1    wreg     unsigned char 
  4379 ;; Auto vars:     Size  Location     Type
  4380 ;;  powerSet        1   43[COMRAM] unsigned char 
  4381 ;; Return value:  Size  Location     Type
  4382 ;;                  1    wreg      void 
  4383 ;; Registers used:
  4384 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4385 ;; Tracked objects:
  4386 ;;		On entry : 0/0
  4387 ;;		On exit  : 0/0
  4388 ;;		Unchanged: 0/0
  4389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4390 ;;      Params:         0       0       0       0       0       0       0
  4391 ;;      Locals:         1       0       0       0       0       0       0
  4392 ;;      Temps:          2       0       0       0       0       0       0
  4393 ;;      Totals:         3       0       0       0       0       0       0
  4394 ;;Total ram usage:        3 bytes
  4395 ;; Hardware stack levels used:    1
  4396 ;; Hardware stack levels required when called:    9
  4397 ;; This function calls:
  4398 ;;		_EnableSlavePower
  4399 ;;		_Update
  4400 ;; This function is called by:
  4401 ;;		_updateComms
  4402 ;; This function uses a non-reentrant model
  4403 ;;
  4404                           
  4405                           	psect	text19
  4406  000E56                     __ptext19:
  4407                           	opt stack 0
  4408  000E56                     _processPowerRequest:
  4409                           	opt stack 20
  4410                           
  4411                           ;incstack = 0
  4412                           ;processPowerRequest@powerSet stored from wreg
  4413  000E56  6E2C               	movwf	processPowerRequest@powerSet,c
  4414                           
  4415                           ;Communications.c: 31: if (((powerSet >> 1) & 0x01)){
  4416  000E58  C02C  F02A         	movff	processPowerRequest@powerSet,??_processPowerRequest
  4417  000E5C  90D8               	bcf	status,0,c
  4418  000E5E  322A               	rrcf	??_processPowerRequest,f,c
  4419  000E60  A02A               	btfss	??_processPowerRequest,0,c
  4420  000E62  D008               	goto	l4298
  4421                           
  4422                           ;Communications.c: 32: EnableSlavePower(BMM, ON);
  4423  000E64  0E00               	movlw	0
  4424  000E66  6E28               	movwf	EnableSlavePower@onof+1,c
  4425  000E68  0E01               	movlw	1
  4426  000E6A  6E27               	movwf	EnableSlavePower@onof,c
  4427  000E6C  0E04               	movlw	4
  4428  000E6E  ECDF  F009         	call	_EnableSlavePower
  4429                           
  4430                           ;Communications.c: 33: }
  4431  000E72  D007               	goto	l4300
  4432  000E74                     l4298:
  4433                           
  4434                           ;Communications.c: 34: else{
  4435                           ;Communications.c: 35: EnableSlavePower(BMM, OFF);
  4436  000E74  0E00               	movlw	0
  4437  000E76  6E28               	movwf	EnableSlavePower@onof+1,c
  4438  000E78  0E00               	movlw	0
  4439  000E7A  6E27               	movwf	EnableSlavePower@onof,c
  4440  000E7C  0E04               	movlw	4
  4441  000E7E  ECDF  F009         	call	_EnableSlavePower
  4442  000E82                     l4300:
  4443                           
  4444                           ;Communications.c: 36: }
  4445                           ;Communications.c: 37: if (((powerSet >> 2) & 0x01)){
  4446  000E82  C02C  F02A         	movff	processPowerRequest@powerSet,??_processPowerRequest
  4447  000E86  90D8               	bcf	status,0,c
  4448  000E88  322A               	rrcf	??_processPowerRequest,f,c
  4449  000E8A  90D8               	bcf	status,0,c
  4450  000E8C  322A               	rrcf	??_processPowerRequest,f,c
  4451  000E8E  A02A               	btfss	??_processPowerRequest,0,c
  4452  000E90  D008               	goto	l4304
  4453                           
  4454                           ;Communications.c: 38: EnableSlavePower(MCS, ON);
  4455  000E92  0E00               	movlw	0
  4456  000E94  6E28               	movwf	EnableSlavePower@onof+1,c
  4457  000E96  0E01               	movlw	1
  4458  000E98  6E27               	movwf	EnableSlavePower@onof,c
  4459  000E9A  0E02               	movlw	2
  4460  000E9C  ECDF  F009         	call	_EnableSlavePower
  4461                           
  4462                           ;Communications.c: 39: }
  4463  000EA0  D007               	goto	l4306
  4464  000EA2                     l4304:
  4465                           
  4466                           ;Communications.c: 40: else{
  4467                           ;Communications.c: 41: EnableSlavePower(MCS,OFF);
  4468  000EA2  0E00               	movlw	0
  4469  000EA4  6E28               	movwf	EnableSlavePower@onof+1,c
  4470  000EA6  0E00               	movlw	0
  4471  000EA8  6E27               	movwf	EnableSlavePower@onof,c
  4472  000EAA  0E02               	movlw	2
  4473  000EAC  ECDF  F009         	call	_EnableSlavePower
  4474  000EB0                     l4306:
  4475                           
  4476                           ;Communications.c: 42: }
  4477                           ;Communications.c: 43: if (((powerSet >> 3) & 0x01)){
  4478  000EB0  C02C  F02A         	movff	processPowerRequest@powerSet,??_processPowerRequest
  4479  000EB4  90D8               	bcf	status,0,c
  4480  000EB6  322A               	rrcf	??_processPowerRequest,f,c
  4481  000EB8  90D8               	bcf	status,0,c
  4482  000EBA  322A               	rrcf	??_processPowerRequest,f,c
  4483  000EBC  90D8               	bcf	status,0,c
  4484  000EBE  322A               	rrcf	??_processPowerRequest,f,c
  4485  000EC0  A02A               	btfss	??_processPowerRequest,0,c
  4486  000EC2  D008               	goto	l4310
  4487                           
  4488                           ;Communications.c: 44: EnableSlavePower(DDS,ON);
  4489  000EC4  0E00               	movlw	0
  4490  000EC6  6E28               	movwf	EnableSlavePower@onof+1,c
  4491  000EC8  0E01               	movlw	1
  4492  000ECA  6E27               	movwf	EnableSlavePower@onof,c
  4493  000ECC  0E01               	movlw	1
  4494  000ECE  ECDF  F009         	call	_EnableSlavePower
  4495                           
  4496                           ;Communications.c: 45: }
  4497  000ED2  D007               	goto	l4312
  4498  000ED4                     l4310:
  4499                           
  4500                           ;Communications.c: 46: else{
  4501                           ;Communications.c: 47: EnableSlavePower(DDS,OFF);
  4502  000ED4  0E00               	movlw	0
  4503  000ED6  6E28               	movwf	EnableSlavePower@onof+1,c
  4504  000ED8  0E00               	movlw	0
  4505  000EDA  6E27               	movwf	EnableSlavePower@onof,c
  4506  000EDC  0E01               	movlw	1
  4507  000EDE  ECDF  F009         	call	_EnableSlavePower
  4508  000EE2                     l4312:
  4509                           
  4510                           ;Communications.c: 48: }
  4511                           ;Communications.c: 49: if(((powerSet >> 4) & 0x01)){
  4512  000EE2  C02C  F02A         	movff	processPowerRequest@powerSet,??_processPowerRequest
  4513  000EE6  3A2A               	swapf	??_processPowerRequest,f,c
  4514  000EE8  0E0F               	movlw	15
  4515  000EEA  162A               	andwf	??_processPowerRequest,f,c
  4516  000EEC  A02A               	btfss	??_processPowerRequest,0,c
  4517  000EEE  D008               	goto	l4316
  4518                           
  4519                           ;Communications.c: 50: EnableSlavePower(SAS,ON);
  4520  000EF0  0E00               	movlw	0
  4521  000EF2  6E28               	movwf	EnableSlavePower@onof+1,c
  4522  000EF4  0E01               	movlw	1
  4523  000EF6  6E27               	movwf	EnableSlavePower@onof,c
  4524  000EF8  0E03               	movlw	3
  4525  000EFA  ECDF  F009         	call	_EnableSlavePower
  4526                           
  4527                           ;Communications.c: 51: }
  4528  000EFE  D007               	goto	l4318
  4529  000F00                     l4316:
  4530                           
  4531                           ;Communications.c: 52: else{
  4532                           ;Communications.c: 53: EnableSlavePower(SAS,OFF);
  4533  000F00  0E00               	movlw	0
  4534  000F02  6E28               	movwf	EnableSlavePower@onof+1,c
  4535  000F04  0E00               	movlw	0
  4536  000F06  6E27               	movwf	EnableSlavePower@onof,c
  4537  000F08  0E03               	movlw	3
  4538  000F0A  ECDF  F009         	call	_EnableSlavePower
  4539  000F0E                     l4318:
  4540                           
  4541                           ;Communications.c: 54: }
  4542                           ;Communications.c: 55: if(((powerSet >> 5) & 0x01)){
  4543  000F0E  C02C  F02A         	movff	processPowerRequest@powerSet,??_processPowerRequest
  4544  000F12  0E05               	movlw	5
  4545  000F14  6E2B               	movwf	(??_processPowerRequest+1)& (0+255),c
  4546  000F16                     u2885:
  4547  000F16  90D8               	bcf	status,0,c
  4548  000F18  322A               	rrcf	??_processPowerRequest,f,c
  4549  000F1A  2E2B               	decfsz	(??_processPowerRequest+1)& (0+255),f,c
  4550  000F1C  D7FC               	goto	u2885
  4551  000F1E  A02A               	btfss	??_processPowerRequest,0,c
  4552  000F20  D008               	goto	l4322
  4553                           
  4554                           ;Communications.c: 56: EnableSlavePower(TSS, ON);
  4555  000F22  0E00               	movlw	0
  4556  000F24  6E28               	movwf	EnableSlavePower@onof+1,c
  4557  000F26  0E01               	movlw	1
  4558  000F28  6E27               	movwf	EnableSlavePower@onof,c
  4559  000F2A  0E05               	movlw	5
  4560  000F2C  ECDF  F009         	call	_EnableSlavePower
  4561                           
  4562                           ;Communications.c: 57: }
  4563  000F30  D007               	goto	l4324
  4564  000F32                     l4322:
  4565                           
  4566                           ;Communications.c: 58: else{
  4567                           ;Communications.c: 59: EnableSlavePower(TSS,OFF);
  4568  000F32  0E00               	movlw	0
  4569  000F34  6E28               	movwf	EnableSlavePower@onof+1,c
  4570  000F36  0E00               	movlw	0
  4571  000F38  6E27               	movwf	EnableSlavePower@onof,c
  4572  000F3A  0E05               	movlw	5
  4573  000F3C  ECDF  F009         	call	_EnableSlavePower
  4574  000F40                     l4324:
  4575                           
  4576                           ;Communications.c: 60: }
  4577                           ;Communications.c: 61: if(((powerSet >> 6) & 0x01)){
  4578  000F40  C02C  F02A         	movff	processPowerRequest@powerSet,??_processPowerRequest
  4579  000F44  0E06               	movlw	6
  4580  000F46  6E2B               	movwf	(??_processPowerRequest+1)& (0+255),c
  4581  000F48                     u2905:
  4582  000F48  90D8               	bcf	status,0,c
  4583  000F4A  322A               	rrcf	??_processPowerRequest,f,c
  4584  000F4C  2E2B               	decfsz	(??_processPowerRequest+1)& (0+255),f,c
  4585  000F4E  D7FC               	goto	u2905
  4586  000F50  A02A               	btfss	??_processPowerRequest,0,c
  4587  000F52  D008               	goto	l4328
  4588                           
  4589                           ;Communications.c: 62: EnableSlavePower(AUX, ON);
  4590  000F54  0E00               	movlw	0
  4591  000F56  6E28               	movwf	EnableSlavePower@onof+1,c
  4592  000F58  0E01               	movlw	1
  4593  000F5A  6E27               	movwf	EnableSlavePower@onof,c
  4594  000F5C  0E06               	movlw	6
  4595  000F5E  ECDF  F009         	call	_EnableSlavePower
  4596                           
  4597                           ;Communications.c: 63: }
  4598  000F62  D007               	goto	l389
  4599  000F64                     l4328:
  4600                           
  4601                           ;Communications.c: 64: else{
  4602                           ;Communications.c: 65: EnableSlavePower(AUX,OFF);
  4603  000F64  0E00               	movlw	0
  4604  000F66  6E28               	movwf	EnableSlavePower@onof+1,c
  4605  000F68  0E00               	movlw	0
  4606  000F6A  6E27               	movwf	EnableSlavePower@onof,c
  4607  000F6C  0E06               	movlw	6
  4608  000F6E  ECDF  F009         	call	_EnableSlavePower
  4609  000F72                     l389:
  4610                           
  4611                           ;Communications.c: 66: }
  4612                           ;Communications.c: 67: Update();
  4613  000F72  EC2F  F011         	call	_Update	;wreg free
  4614  000F76  0012               	return		;funcret
  4615  000F78                     __end_of_processPowerRequest:
  4616                           	opt stack 0
  4617                           tblptru	equ	0xFF8
  4618                           tblptrh	equ	0xFF7
  4619                           tblptrl	equ	0xFF6
  4620                           tablat	equ	0xFF5
  4621                           prodh	equ	0xFF4
  4622                           prodl	equ	0xFF3
  4623                           intcon	equ	0xFF2
  4624                           postinc0	equ	0xFEE
  4625                           wreg	equ	0xFE8
  4626                           indf1	equ	0xFE7
  4627                           postdec1	equ	0xFE5
  4628                           fsr1h	equ	0xFE2
  4629                           fsr1l	equ	0xFE1
  4630                           indf2	equ	0xFDF
  4631                           postinc2	equ	0xFDE
  4632                           postdec2	equ	0xFDD
  4633                           plusw2	equ	0xFDB
  4634                           fsr2h	equ	0xFDA
  4635                           fsr2l	equ	0xFD9
  4636                           status	equ	0xFD8
  4637                           
  4638 ;; *************** function _FaultsCollector *****************
  4639 ;; Defined at:
  4640 ;;		line 70 in file "Communications.c"
  4641 ;; Parameters:    Size  Location     Type
  4642 ;;		None
  4643 ;; Auto vars:     Size  Location     Type
  4644 ;;  i               2   34[COMRAM] int 
  4645 ;;  sendVal         2   32[COMRAM] unsigned int 
  4646 ;; Return value:  Size  Location     Type
  4647 ;;                  1    wreg      unsigned char 
  4648 ;; Registers used:
  4649 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4650 ;; Tracked objects:
  4651 ;;		On entry : 0/0
  4652 ;;		On exit  : 0/0
  4653 ;;		Unchanged: 0/0
  4654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4655 ;;      Params:         0       0       0       0       0       0       0
  4656 ;;      Locals:         4       0       0       0       0       0       0
  4657 ;;      Temps:          3       0       0       0       0       0       0
  4658 ;;      Totals:         7       0       0       0       0       0       0
  4659 ;;Total ram usage:        7 bytes
  4660 ;; Hardware stack levels used:    1
  4661 ;; Hardware stack levels required when called:    7
  4662 ;; This function calls:
  4663 ;;		_GetPDUFault
  4664 ;; This function is called by:
  4665 ;;		_updateComms
  4666 ;; This function uses a non-reentrant model
  4667 ;;
  4668                           
  4669                           	psect	text20
  4670  001C96                     __ptext20:
  4671                           	opt stack 0
  4672  001C96                     _FaultsCollector:
  4673                           	opt stack 22
  4674                           
  4675                           ;Communications.c: 71: unsigned int sendVal = 0;
  4676                           
  4677                           ;incstack = 0
  4678  001C96  0E00               	movlw	0
  4679  001C98  6E22               	movwf	FaultsCollector@sendVal+1,c
  4680  001C9A  0E00               	movlw	0
  4681  001C9C  6E21               	movwf	FaultsCollector@sendVal,c
  4682                           
  4683                           ;Communications.c: 72: int i = 0;
  4684  001C9E  0E00               	movlw	0
  4685  001CA0  6E24               	movwf	FaultsCollector@i+1,c
  4686  001CA2  0E00               	movlw	0
  4687  001CA4  6E23               	movwf	FaultsCollector@i,c
  4688                           
  4689                           ;Communications.c: 73: for (i = 0; i < 5; i++) {
  4690  001CA6  0E00               	movlw	0
  4691  001CA8  6E24               	movwf	FaultsCollector@i+1,c
  4692  001CAA  0E00               	movlw	0
  4693  001CAC  6E23               	movwf	FaultsCollector@i,c
  4694  001CAE                     l4332:
  4695  001CAE  BE24               	btfsc	FaultsCollector@i+1,7,c
  4696  001CB0  D006               	goto	l4336
  4697  001CB2  5024               	movf	FaultsCollector@i+1,w,c
  4698  001CB4  E11C               	bnz	l4342
  4699  001CB6  0E05               	movlw	5
  4700  001CB8  5C23               	subwf	FaultsCollector@i,w,c
  4701  001CBA  B0D8               	btfsc	status,0,c
  4702  001CBC  D018               	goto	l4342
  4703  001CBE                     l4336:
  4704                           
  4705                           ;Communications.c: 74: sendVal = sendVal | ((GetPDUFault(i)&0x01) << i);
  4706  001CBE  C023  F01E         	movff	FaultsCollector@i,??_FaultsCollector
  4707  001CC2  5023               	movf	FaultsCollector@i,w,c
  4708  001CC4  ECDB  F010         	call	_GetPDUFault
  4709  001CC8  0B01               	andlw	1
  4710  001CCA  6E1F               	movwf	(??_FaultsCollector+1)& (0+255),c
  4711  001CCC  6A20               	clrf	(??_FaultsCollector+2)& (0+255),c
  4712  001CCE  2A1E               	incf	??_FaultsCollector,f,c
  4713  001CD0  D003               	goto	u2934
  4714  001CD2                     u2935:
  4715  001CD2  90D8               	bcf	status,0,c
  4716  001CD4  361F               	rlcf	??_FaultsCollector+1,f,c
  4717  001CD6  3620               	rlcf	??_FaultsCollector+2,f,c
  4718  001CD8                     u2934:
  4719  001CD8  2E1E               	decfsz	??_FaultsCollector,f,c
  4720  001CDA  D7FB               	goto	u2935
  4721  001CDC  5021               	movf	FaultsCollector@sendVal,w,c
  4722  001CDE  101F               	iorwf	??_FaultsCollector+1,w,c
  4723  001CE0  6E21               	movwf	FaultsCollector@sendVal,c
  4724  001CE2  5022               	movf	FaultsCollector@sendVal+1,w,c
  4725  001CE4  1020               	iorwf	??_FaultsCollector+2,w,c
  4726  001CE6  6E22               	movwf	FaultsCollector@sendVal+1,c
  4727  001CE8  4A23               	infsnz	FaultsCollector@i,f,c
  4728  001CEA  2A24               	incf	FaultsCollector@i+1,f,c
  4729  001CEC  D7E0               	goto	l4332
  4730  001CEE                     l4342:
  4731                           
  4732                           ;Communications.c: 75: }
  4733                           ;Communications.c: 76: return sendVal;
  4734  001CEE  5021               	movf	FaultsCollector@sendVal,w,c
  4735  001CF0  0012               	return	
  4736  001CF2                     __end_of_FaultsCollector:
  4737                           	opt stack 0
  4738                           tblptru	equ	0xFF8
  4739                           tblptrh	equ	0xFF7
  4740                           tblptrl	equ	0xFF6
  4741                           tablat	equ	0xFF5
  4742                           prodh	equ	0xFF4
  4743                           prodl	equ	0xFF3
  4744                           intcon	equ	0xFF2
  4745                           postinc0	equ	0xFEE
  4746                           wreg	equ	0xFE8
  4747                           indf1	equ	0xFE7
  4748                           postdec1	equ	0xFE5
  4749                           fsr1h	equ	0xFE2
  4750                           fsr1l	equ	0xFE1
  4751                           indf2	equ	0xFDF
  4752                           postinc2	equ	0xFDE
  4753                           postdec2	equ	0xFDD
  4754                           plusw2	equ	0xFDB
  4755                           fsr2h	equ	0xFDA
  4756                           fsr2l	equ	0xFD9
  4757                           status	equ	0xFD8
  4758                           
  4759 ;; *************** function _GetPDUFault *****************
  4760 ;; Defined at:
  4761 ;;		line 221 in file "PDU.c"
  4762 ;; Parameters:    Size  Location     Type
  4763 ;;  loc             1    wreg     unsigned char 
  4764 ;; Auto vars:     Size  Location     Type
  4765 ;;  loc             1   28[COMRAM] unsigned char 
  4766 ;; Return value:  Size  Location     Type
  4767 ;;                  1    wreg      unsigned char 
  4768 ;; Registers used:
  4769 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4770 ;; Tracked objects:
  4771 ;;		On entry : 0/0
  4772 ;;		On exit  : 0/0
  4773 ;;		Unchanged: 0/0
  4774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4775 ;;      Params:         0       0       0       0       0       0       0
  4776 ;;      Locals:         1       0       0       0       0       0       0
  4777 ;;      Temps:          0       0       0       0       0       0       0
  4778 ;;      Totals:         1       0       0       0       0       0       0
  4779 ;;Total ram usage:        1 bytes
  4780 ;; Hardware stack levels used:    1
  4781 ;; Hardware stack levels required when called:    6
  4782 ;; This function calls:
  4783 ;;		Nothing
  4784 ;; This function is called by:
  4785 ;;		_FaultsCollector
  4786 ;; This function uses a non-reentrant model
  4787 ;;
  4788                           
  4789                           	psect	text21
  4790  0021B6                     __ptext21:
  4791                           	opt stack 0
  4792  0021B6                     _GetPDUFault:
  4793                           	opt stack 22
  4794                           
  4795                           ;incstack = 0
  4796                           ;GetPDUFault@loc stored from wreg
  4797  0021B6  6E1D               	movwf	GetPDUFault@loc,c
  4798                           
  4799                           ;PDU.c: 222: return PDUFalult[loc];
  4800  0021B8  501D               	movf	GetPDUFault@loc,w,c
  4801  0021BA  0D01               	mullw	1
  4802  0021BC  0EF5               	movlw	low _PDUFalult
  4803  0021BE  24F3               	addwf	prodl,w,c
  4804  0021C0  6ED9               	movwf	fsr2l,c
  4805  0021C2  0E00               	movlw	high _PDUFalult
  4806  0021C4  20F4               	addwfc	prodh,w,c
  4807  0021C6  6EDA               	movwf	fsr2h,c
  4808  0021C8  50DF               	movf	indf2,w,c
  4809  0021CA  0012               	return	
  4810  0021CC                     __end_of_GetPDUFault:
  4811                           	opt stack 0
  4812                           tblptru	equ	0xFF8
  4813                           tblptrh	equ	0xFF7
  4814                           tblptrl	equ	0xFF6
  4815                           tablat	equ	0xFF5
  4816                           prodh	equ	0xFF4
  4817                           prodl	equ	0xFF3
  4818                           intcon	equ	0xFF2
  4819                           postinc0	equ	0xFEE
  4820                           wreg	equ	0xFE8
  4821                           indf1	equ	0xFE7
  4822                           postdec1	equ	0xFE5
  4823                           fsr1h	equ	0xFE2
  4824                           fsr1l	equ	0xFE1
  4825                           indf2	equ	0xFDF
  4826                           postinc2	equ	0xFDE
  4827                           postdec2	equ	0xFDD
  4828                           plusw2	equ	0xFDB
  4829                           fsr2h	equ	0xFDA
  4830                           fsr2l	equ	0xFD9
  4831                           status	equ	0xFD8
  4832                           
  4833 ;; *************** function _SYSTEM_Initialize *****************
  4834 ;; Defined at:
  4835 ;;		line 113 in file "mcc_generated_files/mcc.c"
  4836 ;; Parameters:    Size  Location     Type
  4837 ;;		None
  4838 ;; Auto vars:     Size  Location     Type
  4839 ;;		None
  4840 ;; Return value:  Size  Location     Type
  4841 ;;                  1    wreg      void 
  4842 ;; Registers used:
  4843 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4844 ;; Tracked objects:
  4845 ;;		On entry : 0/0
  4846 ;;		On exit  : 0/0
  4847 ;;		Unchanged: 0/0
  4848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4849 ;;      Params:         0       0       0       0       0       0       0
  4850 ;;      Locals:         0       0       0       0       0       0       0
  4851 ;;      Temps:          0       0       0       0       0       0       0
  4852 ;;      Totals:         0       0       0       0       0       0       0
  4853 ;;Total ram usage:        0 bytes
  4854 ;; Hardware stack levels used:    1
  4855 ;; Hardware stack levels required when called:    9
  4856 ;; This function calls:
  4857 ;;		_ADC_Initialize
  4858 ;;		_EUSART1_Initialize
  4859 ;;		_INTERRUPT_Initialize
  4860 ;;		_OSCILLATOR_Initialize
  4861 ;;		_PIN_MANAGER_Initialize
  4862 ;;		_PWM4_Initialize
  4863 ;;		_TMR1_Initialize
  4864 ;;		_TMR2_Initialize
  4865 ;; This function is called by:
  4866 ;;		_main
  4867 ;; This function uses a non-reentrant model
  4868 ;;
  4869                           
  4870                           	psect	text22
  4871  0020BC                     __ptext22:
  4872                           	opt stack 0
  4873  0020BC                     _SYSTEM_Initialize:
  4874                           	opt stack 21
  4875                           
  4876                           ;mcc.c: 114: OSCILLATOR_Initialize();
  4877                           
  4878                           ;incstack = 0
  4879  0020BC  EC1F  F011         	call	_OSCILLATOR_Initialize	;wreg free
  4880                           
  4881                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  4882  0020C0  EC4C  F00D         	call	_PIN_MANAGER_Initialize	;wreg free
  4883                           
  4884                           ;mcc.c: 116: INTERRUPT_Initialize();
  4885  0020C4  EC26  F011         	call	_INTERRUPT_Initialize	;wreg free
  4886                           
  4887                           ;mcc.c: 117: EUSART1_Initialize();
  4888  0020C8  EC5A  F00F         	call	_EUSART1_Initialize	;wreg free
  4889                           
  4890                           ;mcc.c: 118: PWM4_Initialize();
  4891  0020CC  ECFB  F010         	call	_PWM4_Initialize	;wreg free
  4892                           
  4893                           ;mcc.c: 119: TMR1_Initialize();
  4894  0020D0  EC70  F010         	call	_TMR1_Initialize	;wreg free
  4895                           
  4896                           ;mcc.c: 120: TMR2_Initialize();
  4897  0020D4  ECF1  F010         	call	_TMR2_Initialize	;wreg free
  4898                           
  4899                           ;mcc.c: 121: LATB4 = 1;
  4900  0020D8  888A               	bsf	3978,4,c	;volatile
  4901                           
  4902                           ;mcc.c: 122: ADC_Initialize();
  4903  0020DA  ECAE  F010         	call	_ADC_Initialize	;wreg free
  4904  0020DE  0012               	return		;funcret
  4905  0020E0                     __end_of_SYSTEM_Initialize:
  4906                           	opt stack 0
  4907                           tblptru	equ	0xFF8
  4908                           tblptrh	equ	0xFF7
  4909                           tblptrl	equ	0xFF6
  4910                           tablat	equ	0xFF5
  4911                           prodh	equ	0xFF4
  4912                           prodl	equ	0xFF3
  4913                           intcon	equ	0xFF2
  4914                           postinc0	equ	0xFEE
  4915                           wreg	equ	0xFE8
  4916                           indf1	equ	0xFE7
  4917                           postdec1	equ	0xFE5
  4918                           fsr1h	equ	0xFE2
  4919                           fsr1l	equ	0xFE1
  4920                           indf2	equ	0xFDF
  4921                           postinc2	equ	0xFDE
  4922                           postdec2	equ	0xFDD
  4923                           plusw2	equ	0xFDB
  4924                           fsr2h	equ	0xFDA
  4925                           fsr2l	equ	0xFD9
  4926                           status	equ	0xFD8
  4927                           
  4928 ;; *************** function _TMR2_Initialize *****************
  4929 ;; Defined at:
  4930 ;;		line 9 in file "mcc_generated_files/tmr2.c"
  4931 ;; Parameters:    Size  Location     Type
  4932 ;;		None
  4933 ;; Auto vars:     Size  Location     Type
  4934 ;;		None
  4935 ;; Return value:  Size  Location     Type
  4936 ;;                  1    wreg      void 
  4937 ;; Registers used:
  4938 ;;		wreg, status,2, cstack
  4939 ;; Tracked objects:
  4940 ;;		On entry : 0/0
  4941 ;;		On exit  : 0/0
  4942 ;;		Unchanged: 0/0
  4943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4944 ;;      Params:         0       0       0       0       0       0       0
  4945 ;;      Locals:         0       0       0       0       0       0       0
  4946 ;;      Temps:          0       0       0       0       0       0       0
  4947 ;;      Totals:         0       0       0       0       0       0       0
  4948 ;;Total ram usage:        0 bytes
  4949 ;; Hardware stack levels used:    1
  4950 ;; Hardware stack levels required when called:    7
  4951 ;; This function calls:
  4952 ;;		_TMR2_StartTimer
  4953 ;; This function is called by:
  4954 ;;		_SYSTEM_Initialize
  4955 ;; This function uses a non-reentrant model
  4956 ;;
  4957                           
  4958                           	psect	text23
  4959  0021E2                     __ptext23:
  4960                           	opt stack 0
  4961  0021E2                     _TMR2_Initialize:
  4962                           	opt stack 22
  4963                           
  4964                           ;tmr2.c: 14: T2CON = 0x1A;
  4965                           
  4966                           ;incstack = 0
  4967  0021E2  0E1A               	movlw	26
  4968  0021E4  6EBA               	movwf	4026,c	;volatile
  4969                           
  4970                           ;tmr2.c: 17: PR2 = 0x7C;
  4971  0021E6  0E7C               	movlw	124
  4972  0021E8  6EBB               	movwf	4027,c	;volatile
  4973                           
  4974                           ;tmr2.c: 20: TMR2 = 0x00;
  4975  0021EA  0E00               	movlw	0
  4976  0021EC  6EBC               	movwf	4028,c	;volatile
  4977                           
  4978                           ;tmr2.c: 23: PIR1bits.TMR2IF = 0;
  4979  0021EE  929E               	bcf	3998,1,c	;volatile
  4980                           
  4981                           ;tmr2.c: 26: TMR2_StartTimer();
  4982  0021F0  EC35  F011         	call	_TMR2_StartTimer	;wreg free
  4983  0021F4  0012               	return		;funcret
  4984  0021F6                     __end_of_TMR2_Initialize:
  4985                           	opt stack 0
  4986                           tblptru	equ	0xFF8
  4987                           tblptrh	equ	0xFF7
  4988                           tblptrl	equ	0xFF6
  4989                           tablat	equ	0xFF5
  4990                           prodh	equ	0xFF4
  4991                           prodl	equ	0xFF3
  4992                           intcon	equ	0xFF2
  4993                           postinc0	equ	0xFEE
  4994                           wreg	equ	0xFE8
  4995                           indf1	equ	0xFE7
  4996                           postdec1	equ	0xFE5
  4997                           fsr1h	equ	0xFE2
  4998                           fsr1l	equ	0xFE1
  4999                           indf2	equ	0xFDF
  5000                           postinc2	equ	0xFDE
  5001                           postdec2	equ	0xFDD
  5002                           plusw2	equ	0xFDB
  5003                           fsr2h	equ	0xFDA
  5004                           fsr2l	equ	0xFD9
  5005                           status	equ	0xFD8
  5006                           
  5007 ;; *************** function _TMR2_StartTimer *****************
  5008 ;; Defined at:
  5009 ;;		line 29 in file "mcc_generated_files/tmr2.c"
  5010 ;; Parameters:    Size  Location     Type
  5011 ;;		None
  5012 ;; Auto vars:     Size  Location     Type
  5013 ;;		None
  5014 ;; Return value:  Size  Location     Type
  5015 ;;                  1    wreg      void 
  5016 ;; Registers used:
  5017 ;;		None
  5018 ;; Tracked objects:
  5019 ;;		On entry : 0/0
  5020 ;;		On exit  : 0/0
  5021 ;;		Unchanged: 0/0
  5022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5023 ;;      Params:         0       0       0       0       0       0       0
  5024 ;;      Locals:         0       0       0       0       0       0       0
  5025 ;;      Temps:          0       0       0       0       0       0       0
  5026 ;;      Totals:         0       0       0       0       0       0       0
  5027 ;;Total ram usage:        0 bytes
  5028 ;; Hardware stack levels used:    1
  5029 ;; Hardware stack levels required when called:    6
  5030 ;; This function calls:
  5031 ;;		Nothing
  5032 ;; This function is called by:
  5033 ;;		_TMR2_Initialize
  5034 ;; This function uses a non-reentrant model
  5035 ;;
  5036                           
  5037                           	psect	text24
  5038  00226A                     __ptext24:
  5039                           	opt stack 0
  5040  00226A                     _TMR2_StartTimer:
  5041                           	opt stack 22
  5042                           
  5043                           ;tmr2.c: 32: T2CONbits.TMR2ON = 1;
  5044                           
  5045                           ;incstack = 0
  5046  00226A  84BA               	bsf	4026,2,c	;volatile
  5047  00226C  0012               	return		;funcret
  5048  00226E                     __end_of_TMR2_StartTimer:
  5049                           	opt stack 0
  5050                           tblptru	equ	0xFF8
  5051                           tblptrh	equ	0xFF7
  5052                           tblptrl	equ	0xFF6
  5053                           tablat	equ	0xFF5
  5054                           prodh	equ	0xFF4
  5055                           prodl	equ	0xFF3
  5056                           intcon	equ	0xFF2
  5057                           postinc0	equ	0xFEE
  5058                           wreg	equ	0xFE8
  5059                           indf1	equ	0xFE7
  5060                           postdec1	equ	0xFE5
  5061                           fsr1h	equ	0xFE2
  5062                           fsr1l	equ	0xFE1
  5063                           indf2	equ	0xFDF
  5064                           postinc2	equ	0xFDE
  5065                           postdec2	equ	0xFDD
  5066                           plusw2	equ	0xFDB
  5067                           fsr2h	equ	0xFDA
  5068                           fsr2l	equ	0xFD9
  5069                           status	equ	0xFD8
  5070                           
  5071 ;; *************** function _TMR1_Initialize *****************
  5072 ;; Defined at:
  5073 ;;		line 66 in file "mcc_generated_files/tmr1.c"
  5074 ;; Parameters:    Size  Location     Type
  5075 ;;		None
  5076 ;; Auto vars:     Size  Location     Type
  5077 ;;		None
  5078 ;; Return value:  Size  Location     Type
  5079 ;;                  1    wreg      void 
  5080 ;; Registers used:
  5081 ;;		wreg, status,2, cstack
  5082 ;; Tracked objects:
  5083 ;;		On entry : 0/0
  5084 ;;		On exit  : 0/0
  5085 ;;		Unchanged: 0/0
  5086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5087 ;;      Params:         0       0       0       0       0       0       0
  5088 ;;      Locals:         0       0       0       0       0       0       0
  5089 ;;      Temps:          0       0       0       0       0       0       0
  5090 ;;      Totals:         0       0       0       0       0       0       0
  5091 ;;Total ram usage:        0 bytes
  5092 ;; Hardware stack levels used:    1
  5093 ;; Hardware stack levels required when called:    7
  5094 ;; This function calls:
  5095 ;;		_TMR1_StartTimer
  5096 ;; This function is called by:
  5097 ;;		_SYSTEM_Initialize
  5098 ;; This function uses a non-reentrant model
  5099 ;;
  5100                           
  5101                           	psect	text25
  5102  0020E0                     __ptext25:
  5103                           	opt stack 0
  5104  0020E0                     _TMR1_Initialize:
  5105                           	opt stack 22
  5106                           
  5107                           ;tmr1.c: 71: T1CON = 0x00;
  5108                           
  5109                           ;incstack = 0
  5110  0020E0  0E00               	movlw	0
  5111  0020E2  6ECD               	movwf	4045,c	;volatile
  5112                           
  5113                           ;tmr1.c: 75: T1GCON = 0x00;
  5114  0020E4  0E00               	movlw	0
  5115  0020E6  6ECC               	movwf	4044,c	;volatile
  5116                           
  5117                           ;tmr1.c: 78: TMR1H = 0x00;
  5118  0020E8  0E00               	movlw	0
  5119  0020EA  6ECF               	movwf	4047,c	;volatile
  5120                           
  5121                           ;tmr1.c: 81: TMR1L = 0x00;
  5122  0020EC  0E00               	movlw	0
  5123  0020EE  6ECE               	movwf	4046,c	;volatile
  5124                           
  5125                           ;tmr1.c: 84: timer1ReloadVal=0;
  5126  0020F0  0E00               	movlw	0
  5127  0020F2  6E39               	movwf	_timer1ReloadVal+1,c	;volatile
  5128  0020F4  0E00               	movlw	0
  5129  0020F6  6E38               	movwf	_timer1ReloadVal,c	;volatile
  5130                           
  5131                           ;tmr1.c: 87: PIR1bits.TMR1IF = 0;
  5132  0020F8  909E               	bcf	3998,0,c	;volatile
  5133                           
  5134                           ;tmr1.c: 90: PIE1bits.TMR1IE = 1;
  5135  0020FA  809D               	bsf	3997,0,c	;volatile
  5136                           
  5137                           ;tmr1.c: 93: TMR1_StartTimer();
  5138  0020FC  EC37  F011         	call	_TMR1_StartTimer	;wreg free
  5139  002100  0012               	return		;funcret
  5140  002102                     __end_of_TMR1_Initialize:
  5141                           	opt stack 0
  5142                           tblptru	equ	0xFF8
  5143                           tblptrh	equ	0xFF7
  5144                           tblptrl	equ	0xFF6
  5145                           tablat	equ	0xFF5
  5146                           prodh	equ	0xFF4
  5147                           prodl	equ	0xFF3
  5148                           intcon	equ	0xFF2
  5149                           postinc0	equ	0xFEE
  5150                           wreg	equ	0xFE8
  5151                           indf1	equ	0xFE7
  5152                           postdec1	equ	0xFE5
  5153                           fsr1h	equ	0xFE2
  5154                           fsr1l	equ	0xFE1
  5155                           indf2	equ	0xFDF
  5156                           postinc2	equ	0xFDE
  5157                           postdec2	equ	0xFDD
  5158                           plusw2	equ	0xFDB
  5159                           fsr2h	equ	0xFDA
  5160                           fsr2l	equ	0xFD9
  5161                           status	equ	0xFD8
  5162                           
  5163 ;; *************** function _TMR1_StartTimer *****************
  5164 ;; Defined at:
  5165 ;;		line 96 in file "mcc_generated_files/tmr1.c"
  5166 ;; Parameters:    Size  Location     Type
  5167 ;;		None
  5168 ;; Auto vars:     Size  Location     Type
  5169 ;;		None
  5170 ;; Return value:  Size  Location     Type
  5171 ;;                  1    wreg      void 
  5172 ;; Registers used:
  5173 ;;		None
  5174 ;; Tracked objects:
  5175 ;;		On entry : 0/0
  5176 ;;		On exit  : 0/0
  5177 ;;		Unchanged: 0/0
  5178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5179 ;;      Params:         0       0       0       0       0       0       0
  5180 ;;      Locals:         0       0       0       0       0       0       0
  5181 ;;      Temps:          0       0       0       0       0       0       0
  5182 ;;      Totals:         0       0       0       0       0       0       0
  5183 ;;Total ram usage:        0 bytes
  5184 ;; Hardware stack levels used:    1
  5185 ;; Hardware stack levels required when called:    6
  5186 ;; This function calls:
  5187 ;;		Nothing
  5188 ;; This function is called by:
  5189 ;;		_TMR1_Initialize
  5190 ;; This function uses a non-reentrant model
  5191 ;;
  5192                           
  5193                           	psect	text26
  5194  00226E                     __ptext26:
  5195                           	opt stack 0
  5196  00226E                     _TMR1_StartTimer:
  5197                           	opt stack 22
  5198                           
  5199                           ;tmr1.c: 99: T1CONbits.TMR1ON = 1;
  5200                           
  5201                           ;incstack = 0
  5202  00226E  80CD               	bsf	4045,0,c	;volatile
  5203  002270  0012               	return		;funcret
  5204  002272                     __end_of_TMR1_StartTimer:
  5205                           	opt stack 0
  5206                           tblptru	equ	0xFF8
  5207                           tblptrh	equ	0xFF7
  5208                           tblptrl	equ	0xFF6
  5209                           tablat	equ	0xFF5
  5210                           prodh	equ	0xFF4
  5211                           prodl	equ	0xFF3
  5212                           intcon	equ	0xFF2
  5213                           postinc0	equ	0xFEE
  5214                           wreg	equ	0xFE8
  5215                           indf1	equ	0xFE7
  5216                           postdec1	equ	0xFE5
  5217                           fsr1h	equ	0xFE2
  5218                           fsr1l	equ	0xFE1
  5219                           indf2	equ	0xFDF
  5220                           postinc2	equ	0xFDE
  5221                           postdec2	equ	0xFDD
  5222                           plusw2	equ	0xFDB
  5223                           fsr2h	equ	0xFDA
  5224                           fsr2l	equ	0xFD9
  5225                           status	equ	0xFD8
  5226                           
  5227 ;; *************** function _PWM4_Initialize *****************
  5228 ;; Defined at:
  5229 ;;		line 64 in file "mcc_generated_files/pwm4.c"
  5230 ;; Parameters:    Size  Location     Type
  5231 ;;		None
  5232 ;; Auto vars:     Size  Location     Type
  5233 ;;		None
  5234 ;; Return value:  Size  Location     Type
  5235 ;;                  1    wreg      void 
  5236 ;; Registers used:
  5237 ;;		wreg, status,2
  5238 ;; Tracked objects:
  5239 ;;		On entry : 0/0
  5240 ;;		On exit  : 0/0
  5241 ;;		Unchanged: 0/0
  5242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5243 ;;      Params:         0       0       0       0       0       0       0
  5244 ;;      Locals:         0       0       0       0       0       0       0
  5245 ;;      Temps:          0       0       0       0       0       0       0
  5246 ;;      Totals:         0       0       0       0       0       0       0
  5247 ;;Total ram usage:        0 bytes
  5248 ;; Hardware stack levels used:    1
  5249 ;; Hardware stack levels required when called:    6
  5250 ;; This function calls:
  5251 ;;		Nothing
  5252 ;; This function is called by:
  5253 ;;		_SYSTEM_Initialize
  5254 ;; This function uses a non-reentrant model
  5255 ;;
  5256                           
  5257                           	psect	text27
  5258  0021F6                     __ptext27:
  5259                           	opt stack 0
  5260  0021F6                     _PWM4_Initialize:
  5261                           	opt stack 23
  5262                           
  5263                           ;pwm4.c: 69: CCP2CON = 0x1C;
  5264                           
  5265                           ;incstack = 0
  5266  0021F6  0E1C               	movlw	28
  5267  0021F8  6E66               	movwf	3942,c	;volatile
  5268                           
  5269                           ;pwm4.c: 72: CCPR2L = 0x3E;
  5270  0021FA  0E3E               	movlw	62
  5271  0021FC  6E67               	movwf	3943,c	;volatile
  5272                           
  5273                           ;pwm4.c: 75: CCPR2H = 0x00;
  5274  0021FE  0E00               	movlw	0
  5275  002200  6E68               	movwf	3944,c	;volatile
  5276                           
  5277                           ;pwm4.c: 78: CCPTMRS1bits.C4TSEL = 0x0;
  5278  002202  0EFC               	movlw	-4
  5279  002204  010F               	movlb	15	; () banked
  5280  002206  1748               	andwf	72,f,b	;volatile
  5281                           
  5282                           ; BSR set to: 15
  5283  002208  0012               	return		;funcret
  5284  00220A                     __end_of_PWM4_Initialize:
  5285                           	opt stack 0
  5286                           tblptru	equ	0xFF8
  5287                           tblptrh	equ	0xFF7
  5288                           tblptrl	equ	0xFF6
  5289                           tablat	equ	0xFF5
  5290                           prodh	equ	0xFF4
  5291                           prodl	equ	0xFF3
  5292                           intcon	equ	0xFF2
  5293                           postinc0	equ	0xFEE
  5294                           wreg	equ	0xFE8
  5295                           indf1	equ	0xFE7
  5296                           postdec1	equ	0xFE5
  5297                           fsr1h	equ	0xFE2
  5298                           fsr1l	equ	0xFE1
  5299                           indf2	equ	0xFDF
  5300                           postinc2	equ	0xFDE
  5301                           postdec2	equ	0xFDD
  5302                           plusw2	equ	0xFDB
  5303                           fsr2h	equ	0xFDA
  5304                           fsr2l	equ	0xFD9
  5305                           status	equ	0xFD8
  5306                           
  5307 ;; *************** function _PIN_MANAGER_Initialize *****************
  5308 ;; Defined at:
  5309 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  5310 ;; Parameters:    Size  Location     Type
  5311 ;;		None
  5312 ;; Auto vars:     Size  Location     Type
  5313 ;;		None
  5314 ;; Return value:  Size  Location     Type
  5315 ;;                  1    wreg      void 
  5316 ;; Registers used:
  5317 ;;		wreg, status,2
  5318 ;; Tracked objects:
  5319 ;;		On entry : 0/0
  5320 ;;		On exit  : 0/0
  5321 ;;		Unchanged: 0/0
  5322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5323 ;;      Params:         0       0       0       0       0       0       0
  5324 ;;      Locals:         0       0       0       0       0       0       0
  5325 ;;      Temps:          0       0       0       0       0       0       0
  5326 ;;      Totals:         0       0       0       0       0       0       0
  5327 ;;Total ram usage:        0 bytes
  5328 ;; Hardware stack levels used:    1
  5329 ;; Hardware stack levels required when called:    6
  5330 ;; This function calls:
  5331 ;;		Nothing
  5332 ;; This function is called by:
  5333 ;;		_SYSTEM_Initialize
  5334 ;; This function uses a non-reentrant model
  5335 ;;
  5336                           
  5337                           	psect	text28
  5338  001A98                     __ptext28:
  5339                           	opt stack 0
  5340  001A98                     _PIN_MANAGER_Initialize:
  5341                           	opt stack 23
  5342                           
  5343                           ;pin_manager.c: 52: LATA = 0x00;
  5344                           
  5345                           ; BSR set to: 15
  5346                           ;incstack = 0
  5347  001A98  0E00               	movlw	0
  5348  001A9A  6E89               	movwf	3977,c	;volatile
  5349                           
  5350                           ;pin_manager.c: 53: TRISA = 0xF7;
  5351  001A9C  0EF7               	movlw	247
  5352  001A9E  6E92               	movwf	3986,c	;volatile
  5353                           
  5354                           ;pin_manager.c: 54: ANSELA = 0x27;
  5355  001AA0  0E27               	movlw	39
  5356  001AA2  010F               	movlb	15	; () banked
  5357  001AA4  6F38               	movwf	56,b	;volatile
  5358                           
  5359                           ;pin_manager.c: 56: LATB = 0x01;
  5360  001AA6  0E01               	movlw	1
  5361  001AA8  6E8A               	movwf	3978,c	;volatile
  5362                           
  5363                           ;pin_manager.c: 57: TRISB = 0xFE;
  5364  001AAA  0EFE               	movlw	254
  5365  001AAC  6E93               	movwf	3987,c	;volatile
  5366                           
  5367                           ;pin_manager.c: 58: ANSELB = 0x3E;
  5368  001AAE  0E3E               	movlw	62
  5369  001AB0  010F               	movlb	15	; () banked
  5370  001AB2  6F39               	movwf	57,b	;volatile
  5371                           
  5372                           ;pin_manager.c: 59: WPUB = 0x00;
  5373  001AB4  0E00               	movlw	0
  5374  001AB6  6E61               	movwf	3937,c	;volatile
  5375                           
  5376                           ;pin_manager.c: 61: LATC = 0x00;
  5377  001AB8  0E00               	movlw	0
  5378  001ABA  6E8B               	movwf	3979,c	;volatile
  5379                           
  5380                           ;pin_manager.c: 62: TRISC = 0xDF;
  5381  001ABC  0EDF               	movlw	223
  5382  001ABE  6E94               	movwf	3988,c	;volatile
  5383                           
  5384                           ;pin_manager.c: 63: ANSELC = 0x1C;
  5385  001AC0  0E1C               	movlw	28
  5386  001AC2  010F               	movlb	15	; () banked
  5387  001AC4  6F3A               	movwf	58,b	;volatile
  5388                           
  5389                           ;pin_manager.c: 65: LATD = 0x00;
  5390  001AC6  0E00               	movlw	0
  5391  001AC8  6E8C               	movwf	3980,c	;volatile
  5392                           
  5393                           ;pin_manager.c: 66: TRISD = 0x0F;
  5394  001ACA  0E0F               	movlw	15
  5395  001ACC  6E95               	movwf	3989,c	;volatile
  5396                           
  5397                           ;pin_manager.c: 67: ANSELD = 0x0F;
  5398  001ACE  0E0F               	movlw	15
  5399  001AD0  010F               	movlb	15	; () banked
  5400  001AD2  6F3B               	movwf	59,b	;volatile
  5401                           
  5402                           ;pin_manager.c: 69: LATE = 0x00;
  5403  001AD4  0E00               	movlw	0
  5404  001AD6  6E8D               	movwf	3981,c	;volatile
  5405                           
  5406                           ;pin_manager.c: 70: TRISE = 0x07;
  5407  001AD8  0E07               	movlw	7
  5408  001ADA  6E96               	movwf	3990,c	;volatile
  5409                           
  5410                           ;pin_manager.c: 71: ANSELE = 0x07;
  5411  001ADC  0E07               	movlw	7
  5412  001ADE  010F               	movlb	15	; () banked
  5413  001AE0  6F3C               	movwf	60,b	;volatile
  5414                           
  5415                           ; BSR set to: 15
  5416                           ;pin_manager.c: 72: TRISCbits.RC6 = 1;
  5417  001AE2  8C94               	bsf	3988,6,c	;volatile
  5418                           
  5419                           ; BSR set to: 15
  5420                           ;pin_manager.c: 73: TRISCbits.RC7 = 1;
  5421  001AE4  8E94               	bsf	3988,7,c	;volatile
  5422                           
  5423                           ; BSR set to: 15
  5424                           ;pin_manager.c: 74: TRISCbits.RC5 = 0;
  5425  001AE6  9A94               	bcf	3988,5,c	;volatile
  5426                           
  5427                           ; BSR set to: 15
  5428                           ;pin_manager.c: 75: LATCbits.LATC5 = 1;
  5429  001AE8  8A8B               	bsf	3979,5,c	;volatile
  5430                           
  5431                           ; BSR set to: 15
  5432                           ;pin_manager.c: 76: LATCbits.LATC6 = 1;
  5433  001AEA  8C8B               	bsf	3979,6,c	;volatile
  5434                           
  5435                           ; BSR set to: 15
  5436                           ;pin_manager.c: 77: LATCbits.LATC7 = 1;
  5437  001AEC  8E8B               	bsf	3979,7,c	;volatile
  5438                           
  5439                           ; BSR set to: 15
  5440                           ;pin_manager.c: 78: ANSELCbits.ANSC5 =0;
  5441  001AEE  010F               	movlb	15	; () banked
  5442  001AF0  9B3A               	bcf	58,5,b	;volatile
  5443                           
  5444                           ; BSR set to: 15
  5445                           ;pin_manager.c: 79: ANSELCbits.ANSC6 =0;
  5446  001AF2  010F               	movlb	15	; () banked
  5447  001AF4  9D3A               	bcf	58,6,b	;volatile
  5448                           
  5449                           ; BSR set to: 15
  5450                           ;pin_manager.c: 80: ANSELCbits.ANSC7 =0;
  5451  001AF6  010F               	movlb	15	; () banked
  5452  001AF8  9F3A               	bcf	58,7,b	;volatile
  5453                           
  5454                           ; BSR set to: 15
  5455                           ;pin_manager.c: 82: INTCON2bits.nRBPU = 0x01;
  5456  001AFA  8EF1               	bsf	intcon2,7,c	;volatile
  5457                           
  5458                           ; BSR set to: 15
  5459                           
  5460                           ; BSR set to: 15
  5461                           
  5462                           ;pin_manager.c: 84: do { TRISB4 = 0; } while(0);
  5463  001AFC  9893               	bcf	3987,4,c	;volatile
  5464                           
  5465                           ; BSR set to: 15
  5466                           
  5467                           ; BSR set to: 15
  5468                           
  5469                           ;pin_manager.c: 85: do { TRISB3 = 0; } while(0);
  5470                           
  5471                           ; BSR set to: 15
  5472  001AFE  9693               	bcf	3987,3,c	;volatile
  5473                           
  5474                           ; BSR set to: 15
  5475                           
  5476                           ; BSR set to: 15
  5477                           
  5478                           ;pin_manager.c: 86: do { TRISB5 = 0; } while(0);
  5479                           
  5480                           ; BSR set to: 15
  5481  001B00  9A93               	bcf	3987,5,c	;volatile
  5482                           
  5483                           ; BSR set to: 15
  5484                           ;pin_manager.c: 88: TRISDbits.RD1 = 0;
  5485                           
  5486                           ; BSR set to: 15
  5487  001B02  9295               	bcf	3989,1,c	;volatile
  5488                           
  5489                           ; BSR set to: 15
  5490                           
  5491                           ; BSR set to: 15
  5492                           
  5493                           ;pin_manager.c: 90: do { ANSB3 = 0; } while(0);
  5494  001B04  010F               	movlb	15	; () banked
  5495  001B06  9739               	bcf	57,3,b	;volatile
  5496                           
  5497                           ; BSR set to: 15
  5498                           
  5499                           ; BSR set to: 15
  5500                           
  5501                           ;pin_manager.c: 91: do { ANSD7 = 0; } while(0);
  5502                           
  5503                           ; BSR set to: 15
  5504  001B08  010F               	movlb	15	; () banked
  5505  001B0A  9F3B               	bcf	59,7,b	;volatile
  5506                           
  5507                           ; BSR set to: 15
  5508                           
  5509                           ; BSR set to: 15
  5510                           
  5511                           ;pin_manager.c: 92: do { ANSB4 = 0; } while(0);
  5512                           
  5513                           ; BSR set to: 15
  5514  001B0C  010F               	movlb	15	; () banked
  5515  001B0E  9939               	bcf	57,4,b	;volatile
  5516  001B10  0012               	return	
  5517  001B12                     __end_of_PIN_MANAGER_Initialize:
  5518                           	opt stack 0
  5519                           tblptru	equ	0xFF8
  5520                           tblptrh	equ	0xFF7
  5521                           tblptrl	equ	0xFF6
  5522                           tablat	equ	0xFF5
  5523                           prodh	equ	0xFF4
  5524                           prodl	equ	0xFF3
  5525                           intcon	equ	0xFF2
  5526                           intcon2	equ	0xFF1
  5527                           postinc0	equ	0xFEE
  5528                           wreg	equ	0xFE8
  5529                           indf1	equ	0xFE7
  5530                           postdec1	equ	0xFE5
  5531                           fsr1h	equ	0xFE2
  5532                           fsr1l	equ	0xFE1
  5533                           indf2	equ	0xFDF
  5534                           postinc2	equ	0xFDE
  5535                           postdec2	equ	0xFDD
  5536                           plusw2	equ	0xFDB
  5537                           fsr2h	equ	0xFDA
  5538                           fsr2l	equ	0xFD9
  5539                           status	equ	0xFD8
  5540                           
  5541 ;; *************** function _OSCILLATOR_Initialize *****************
  5542 ;; Defined at:
  5543 ;;		line 125 in file "mcc_generated_files/mcc.c"
  5544 ;; Parameters:    Size  Location     Type
  5545 ;;		None
  5546 ;; Auto vars:     Size  Location     Type
  5547 ;;		None
  5548 ;; Return value:  Size  Location     Type
  5549 ;;                  1    wreg      void 
  5550 ;; Registers used:
  5551 ;;		wreg, status,2
  5552 ;; Tracked objects:
  5553 ;;		On entry : 0/0
  5554 ;;		On exit  : 0/0
  5555 ;;		Unchanged: 0/0
  5556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5557 ;;      Params:         0       0       0       0       0       0       0
  5558 ;;      Locals:         0       0       0       0       0       0       0
  5559 ;;      Temps:          0       0       0       0       0       0       0
  5560 ;;      Totals:         0       0       0       0       0       0       0
  5561 ;;Total ram usage:        0 bytes
  5562 ;; Hardware stack levels used:    1
  5563 ;; Hardware stack levels required when called:    6
  5564 ;; This function calls:
  5565 ;;		Nothing
  5566 ;; This function is called by:
  5567 ;;		_SYSTEM_Initialize
  5568 ;; This function uses a non-reentrant model
  5569 ;;
  5570                           
  5571                           	psect	text29
  5572  00223E                     __ptext29:
  5573                           	opt stack 0
  5574  00223E                     _OSCILLATOR_Initialize:
  5575                           	opt stack 23
  5576                           
  5577                           ;mcc.c: 127: OSCCON = 0x72;
  5578                           
  5579                           ; BSR set to: 15
  5580                           ;incstack = 0
  5581  00223E  0E72               	movlw	114
  5582  002240  6ED3               	movwf	4051,c	;volatile
  5583                           
  5584                           ;mcc.c: 129: OSCCON2 = 0x04;
  5585  002242  0E04               	movlw	4
  5586  002244  6ED2               	movwf	4050,c	;volatile
  5587                           
  5588                           ;mcc.c: 131: OSCTUNE = 0x00;
  5589  002246  0E00               	movlw	0
  5590  002248  6E9B               	movwf	3995,c	;volatile
  5591  00224A  0012               	return		;funcret
  5592  00224C                     __end_of_OSCILLATOR_Initialize:
  5593                           	opt stack 0
  5594                           tblptru	equ	0xFF8
  5595                           tblptrh	equ	0xFF7
  5596                           tblptrl	equ	0xFF6
  5597                           tablat	equ	0xFF5
  5598                           prodh	equ	0xFF4
  5599                           prodl	equ	0xFF3
  5600                           intcon	equ	0xFF2
  5601                           intcon2	equ	0xFF1
  5602                           postinc0	equ	0xFEE
  5603                           wreg	equ	0xFE8
  5604                           indf1	equ	0xFE7
  5605                           postdec1	equ	0xFE5
  5606                           fsr1h	equ	0xFE2
  5607                           fsr1l	equ	0xFE1
  5608                           indf2	equ	0xFDF
  5609                           postinc2	equ	0xFDE
  5610                           postdec2	equ	0xFDD
  5611                           plusw2	equ	0xFDB
  5612                           fsr2h	equ	0xFDA
  5613                           fsr2l	equ	0xFD9
  5614                           status	equ	0xFD8
  5615                           
  5616 ;; *************** function _INTERRUPT_Initialize *****************
  5617 ;; Defined at:
  5618 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  5619 ;; Parameters:    Size  Location     Type
  5620 ;;		None
  5621 ;; Auto vars:     Size  Location     Type
  5622 ;;		None
  5623 ;; Return value:  Size  Location     Type
  5624 ;;                  1    wreg      void 
  5625 ;; Registers used:
  5626 ;;		None
  5627 ;; Tracked objects:
  5628 ;;		On entry : 0/0
  5629 ;;		On exit  : 0/0
  5630 ;;		Unchanged: 0/0
  5631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5632 ;;      Params:         0       0       0       0       0       0       0
  5633 ;;      Locals:         0       0       0       0       0       0       0
  5634 ;;      Temps:          0       0       0       0       0       0       0
  5635 ;;      Totals:         0       0       0       0       0       0       0
  5636 ;;Total ram usage:        0 bytes
  5637 ;; Hardware stack levels used:    1
  5638 ;; Hardware stack levels required when called:    6
  5639 ;; This function calls:
  5640 ;;		Nothing
  5641 ;; This function is called by:
  5642 ;;		_SYSTEM_Initialize
  5643 ;; This function uses a non-reentrant model
  5644 ;;
  5645                           
  5646                           	psect	text30
  5647  00224C                     __ptext30:
  5648                           	opt stack 0
  5649  00224C                     _INTERRUPT_Initialize:
  5650                           	opt stack 23
  5651                           
  5652                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  5653                           
  5654                           ;incstack = 0
  5655  00224C  9ED0               	bcf	4048,7,c	;volatile
  5656                           
  5657                           ;interrupt_manager.c: 60: IPR1bits.RC1IP = 0;
  5658  00224E  9A9F               	bcf	3999,5,c	;volatile
  5659                           
  5660                           ;interrupt_manager.c: 62: IPR1bits.TX1IP = 0;
  5661  002250  989F               	bcf	3999,4,c	;volatile
  5662                           
  5663                           ;interrupt_manager.c: 64: IPR1bits.ADIP = 0;
  5664  002252  9C9F               	bcf	3999,6,c	;volatile
  5665  002254  0012               	return		;funcret
  5666  002256                     __end_of_INTERRUPT_Initialize:
  5667                           	opt stack 0
  5668                           tblptru	equ	0xFF8
  5669                           tblptrh	equ	0xFF7
  5670                           tblptrl	equ	0xFF6
  5671                           tablat	equ	0xFF5
  5672                           prodh	equ	0xFF4
  5673                           prodl	equ	0xFF3
  5674                           intcon	equ	0xFF2
  5675                           intcon2	equ	0xFF1
  5676                           postinc0	equ	0xFEE
  5677                           wreg	equ	0xFE8
  5678                           indf1	equ	0xFE7
  5679                           postdec1	equ	0xFE5
  5680                           fsr1h	equ	0xFE2
  5681                           fsr1l	equ	0xFE1
  5682                           indf2	equ	0xFDF
  5683                           postinc2	equ	0xFDE
  5684                           postdec2	equ	0xFDD
  5685                           plusw2	equ	0xFDB
  5686                           fsr2h	equ	0xFDA
  5687                           fsr2l	equ	0xFD9
  5688                           status	equ	0xFD8
  5689                           
  5690 ;; *************** function _EUSART1_Initialize *****************
  5691 ;; Defined at:
  5692 ;;		line 20 in file "UART.c"
  5693 ;; Parameters:    Size  Location     Type
  5694 ;;		None
  5695 ;; Auto vars:     Size  Location     Type
  5696 ;;		None
  5697 ;; Return value:  Size  Location     Type
  5698 ;;                  1    wreg      void 
  5699 ;; Registers used:
  5700 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5701 ;; Tracked objects:
  5702 ;;		On entry : 0/0
  5703 ;;		On exit  : 0/0
  5704 ;;		Unchanged: 0/0
  5705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5706 ;;      Params:         0       0       0       0       0       0       0
  5707 ;;      Locals:         0       0       0       0       0       0       0
  5708 ;;      Temps:          0       0       0       0       0       0       0
  5709 ;;      Totals:         0       0       0       0       0       0       0
  5710 ;;Total ram usage:        0 bytes
  5711 ;; Hardware stack levels used:    1
  5712 ;; Hardware stack levels required when called:    8
  5713 ;; This function calls:
  5714 ;;		_UART_buff_init
  5715 ;; This function is called by:
  5716 ;;		_SYSTEM_Initialize
  5717 ;; This function uses a non-reentrant model
  5718 ;;
  5719                           
  5720                           	psect	text31
  5721  001EB4                     __ptext31:
  5722                           	opt stack 0
  5723  001EB4                     _EUSART1_Initialize:
  5724                           	opt stack 21
  5725                           
  5726                           ;UART.c: 22: PIE1bits.RC1IE = 0;
  5727                           
  5728                           ;incstack = 0
  5729  001EB4  9A9D               	bcf	3997,5,c	;volatile
  5730                           
  5731                           ;UART.c: 23: PIE1bits.TX1IE = 0;
  5732  001EB6  989D               	bcf	3997,4,c	;volatile
  5733                           
  5734                           ;UART.c: 28: BAUD1CON = 0x48;
  5735  001EB8  0E48               	movlw	72
  5736  001EBA  6EB8               	movwf	4024,c	;volatile
  5737                           
  5738                           ;UART.c: 31: RC1STA = 0x98;
  5739  001EBC  0E98               	movlw	152
  5740  001EBE  6EAB               	movwf	4011,c	;volatile
  5741                           
  5742                           ;UART.c: 34: TX1STA = 0x26;
  5743  001EC0  0E26               	movlw	38
  5744  001EC2  6EAC               	movwf	4012,c	;volatile
  5745                           
  5746                           ;UART.c: 37: SPBRG1 = (((16000000/38400)/4)-1);
  5747  001EC4  0E67               	movlw	103
  5748  001EC6  6EAF               	movwf	4015,c	;volatile
  5749                           
  5750                           ;UART.c: 40: SPBRGH1 = 0x00;
  5751  001EC8  0E00               	movlw	0
  5752  001ECA  6EB0               	movwf	4016,c	;volatile
  5753                           
  5754                           ;UART.c: 43: TXREG1 = 0x00;
  5755  001ECC  0E00               	movlw	0
  5756  001ECE  6EAD               	movwf	4013,c	;volatile
  5757                           
  5758                           ;UART.c: 46: RCREG1 = 0x00;
  5759  001ED0  0E00               	movlw	0
  5760  001ED2  6EAE               	movwf	4014,c	;volatile
  5761                           
  5762                           ;UART.c: 48: UART_buff_init(&input_buffer);
  5763  001ED4  0E3C               	movlw	low _input_buffer
  5764  001ED6  6E25               	movwf	UART_buff_init@_this,c
  5765  001ED8  0E01               	movlw	high _input_buffer
  5766  001EDA  6E26               	movwf	UART_buff_init@_this+1,c
  5767  001EDC  EC81  F010         	call	_UART_buff_init	;wreg free
  5768                           
  5769                           ;UART.c: 49: UART_buff_init(&output_buffer);
  5770  001EE0  0E00               	movlw	low _output_buffer
  5771  001EE2  6E25               	movwf	UART_buff_init@_this,c
  5772  001EE4  0E02               	movlw	high _output_buffer
  5773  001EE6  6E26               	movwf	UART_buff_init@_this+1,c
  5774  001EE8  EC81  F010         	call	_UART_buff_init	;wreg free
  5775                           
  5776                           ;UART.c: 51: PIE1bits.RC1IE = 1;
  5777  001EEC  8A9D               	bsf	3997,5,c	;volatile
  5778  001EEE  0012               	return		;funcret
  5779  001EF0                     __end_of_EUSART1_Initialize:
  5780                           	opt stack 0
  5781                           tblptru	equ	0xFF8
  5782                           tblptrh	equ	0xFF7
  5783                           tblptrl	equ	0xFF6
  5784                           tablat	equ	0xFF5
  5785                           prodh	equ	0xFF4
  5786                           prodl	equ	0xFF3
  5787                           intcon	equ	0xFF2
  5788                           intcon2	equ	0xFF1
  5789                           postinc0	equ	0xFEE
  5790                           wreg	equ	0xFE8
  5791                           indf1	equ	0xFE7
  5792                           postdec1	equ	0xFE5
  5793                           fsr1h	equ	0xFE2
  5794                           fsr1l	equ	0xFE1
  5795                           indf2	equ	0xFDF
  5796                           postinc2	equ	0xFDE
  5797                           postdec2	equ	0xFDD
  5798                           plusw2	equ	0xFDB
  5799                           fsr2h	equ	0xFDA
  5800                           fsr2l	equ	0xFD9
  5801                           status	equ	0xFD8
  5802                           
  5803 ;; *************** function _UART_buff_init *****************
  5804 ;; Defined at:
  5805 ;;		line 55 in file "UART.c"
  5806 ;; Parameters:    Size  Location     Type
  5807 ;;  _this           2   36[COMRAM] PTR struct UART_ring_buf
  5808 ;;		 -> output_buffer(106), input_buffer(106), 
  5809 ;; Auto vars:     Size  Location     Type
  5810 ;;		None
  5811 ;; Return value:  Size  Location     Type
  5812 ;;                  1    wreg      void 
  5813 ;; Registers used:
  5814 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5815 ;; Tracked objects:
  5816 ;;		On entry : 0/0
  5817 ;;		On exit  : 0/0
  5818 ;;		Unchanged: 0/0
  5819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5820 ;;      Params:         2       0       0       0       0       0       0
  5821 ;;      Locals:         0       0       0       0       0       0       0
  5822 ;;      Temps:          0       0       0       0       0       0       0
  5823 ;;      Totals:         2       0       0       0       0       0       0
  5824 ;;Total ram usage:        2 bytes
  5825 ;; Hardware stack levels used:    1
  5826 ;; Hardware stack levels required when called:    7
  5827 ;; This function calls:
  5828 ;;		_memset
  5829 ;; This function is called by:
  5830 ;;		_EUSART1_Initialize
  5831 ;; This function uses a non-reentrant model
  5832 ;;
  5833                           
  5834                           	psect	text32
  5835  002102                     __ptext32:
  5836                           	opt stack 0
  5837  002102                     _UART_buff_init:
  5838                           	opt stack 21
  5839                           
  5840                           ;UART.c: 64: memset(_this, 0, sizeof (*_this));
  5841                           
  5842                           ;incstack = 0
  5843  002102  C025  F01D         	movff	UART_buff_init@_this,memset@p1
  5844  002106  C026  F01E         	movff	UART_buff_init@_this+1,memset@p1+1
  5845  00210A  0E00               	movlw	0
  5846  00210C  6E20               	movwf	memset@c+1,c
  5847  00210E  0E00               	movlw	0
  5848  002110  6E1F               	movwf	memset@c,c
  5849  002112  0E00               	movlw	0
  5850  002114  6E22               	movwf	memset@n+1,c
  5851  002116  0E6A               	movlw	106
  5852  002118  6E21               	movwf	memset@n,c
  5853  00211A  EC0B  F010         	call	_memset	;wreg free
  5854  00211E  0012               	return		;funcret
  5855  002120                     __end_of_UART_buff_init:
  5856                           	opt stack 0
  5857                           tblptru	equ	0xFF8
  5858                           tblptrh	equ	0xFF7
  5859                           tblptrl	equ	0xFF6
  5860                           tablat	equ	0xFF5
  5861                           prodh	equ	0xFF4
  5862                           prodl	equ	0xFF3
  5863                           intcon	equ	0xFF2
  5864                           intcon2	equ	0xFF1
  5865                           postinc0	equ	0xFEE
  5866                           wreg	equ	0xFE8
  5867                           indf1	equ	0xFE7
  5868                           postdec1	equ	0xFE5
  5869                           fsr1h	equ	0xFE2
  5870                           fsr1l	equ	0xFE1
  5871                           indf2	equ	0xFDF
  5872                           postinc2	equ	0xFDE
  5873                           postdec2	equ	0xFDD
  5874                           plusw2	equ	0xFDB
  5875                           fsr2h	equ	0xFDA
  5876                           fsr2l	equ	0xFD9
  5877                           status	equ	0xFD8
  5878                           
  5879 ;; *************** function _memset *****************
  5880 ;; Defined at:
  5881 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\memset.c"
  5882 ;; Parameters:    Size  Location     Type
  5883 ;;  p1              2   28[COMRAM] PTR void 
  5884 ;;		 -> output_buffer(106), input_buffer(106), 
  5885 ;;  c               2   30[COMRAM] int 
  5886 ;;  n               2   32[COMRAM] unsigned int 
  5887 ;; Auto vars:     Size  Location     Type
  5888 ;;  p               2   34[COMRAM] PTR unsigned char 
  5889 ;;		 -> output_buffer(106), input_buffer(106), 
  5890 ;; Return value:  Size  Location     Type
  5891 ;;                  2   28[COMRAM] PTR void 
  5892 ;; Registers used:
  5893 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5894 ;; Tracked objects:
  5895 ;;		On entry : 0/0
  5896 ;;		On exit  : 0/0
  5897 ;;		Unchanged: 0/0
  5898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5899 ;;      Params:         6       0       0       0       0       0       0
  5900 ;;      Locals:         2       0       0       0       0       0       0
  5901 ;;      Temps:          0       0       0       0       0       0       0
  5902 ;;      Totals:         8       0       0       0       0       0       0
  5903 ;;Total ram usage:        8 bytes
  5904 ;; Hardware stack levels used:    1
  5905 ;; Hardware stack levels required when called:    6
  5906 ;; This function calls:
  5907 ;;		Nothing
  5908 ;; This function is called by:
  5909 ;;		_UART_buff_init
  5910 ;;		_UART_buff_flush
  5911 ;; This function uses a non-reentrant model
  5912 ;;
  5913                           
  5914                           	psect	text33
  5915  002016                     __ptext33:
  5916                           	opt stack 0
  5917  002016                     _memset:
  5918                           	opt stack 20
  5919                           
  5920                           ;incstack = 0
  5921  002016  C01D  F023         	movff	memset@p1,memset@p
  5922  00201A  C01E  F024         	movff	memset@p1+1,memset@p+1
  5923  00201E  D008               	goto	l3754
  5924  002020                     l3750:
  5925  002020  C023  FFD9         	movff	memset@p,fsr2l
  5926  002024  C024  FFDA         	movff	memset@p+1,fsr2h
  5927  002028  C01F  FFDF         	movff	memset@c,indf2
  5928  00202C  4A23               	infsnz	memset@p,f,c
  5929  00202E  2A24               	incf	memset@p+1,f,c
  5930  002030                     l3754:
  5931  002030  0621               	decf	memset@n,f,c
  5932  002032  A0D8               	btfss	status,0,c
  5933  002034  0622               	decf	memset@n+1,f,c
  5934  002036  2821               	incf	memset@n,w,c
  5935  002038  E1F3               	bnz	l3750
  5936  00203A  2822               	incf	memset@n+1,w,c
  5937  00203C  B4D8               	btfsc	status,2,c
  5938  00203E  0012               	return	
  5939  002040  D7EF               	goto	l3750
  5940  002042                     __end_of_memset:
  5941                           	opt stack 0
  5942                           tblptru	equ	0xFF8
  5943                           tblptrh	equ	0xFF7
  5944                           tblptrl	equ	0xFF6
  5945                           tablat	equ	0xFF5
  5946                           prodh	equ	0xFF4
  5947                           prodl	equ	0xFF3
  5948                           intcon	equ	0xFF2
  5949                           intcon2	equ	0xFF1
  5950                           postinc0	equ	0xFEE
  5951                           wreg	equ	0xFE8
  5952                           indf1	equ	0xFE7
  5953                           postdec1	equ	0xFE5
  5954                           fsr1h	equ	0xFE2
  5955                           fsr1l	equ	0xFE1
  5956                           indf2	equ	0xFDF
  5957                           postinc2	equ	0xFDE
  5958                           postdec2	equ	0xFDD
  5959                           plusw2	equ	0xFDB
  5960                           fsr2h	equ	0xFDA
  5961                           fsr2l	equ	0xFD9
  5962                           status	equ	0xFD8
  5963                           
  5964 ;; *************** function _ADC_Initialize *****************
  5965 ;; Defined at:
  5966 ;;		line 59 in file "mcc_generated_files/adc.c"
  5967 ;; Parameters:    Size  Location     Type
  5968 ;;		None
  5969 ;; Auto vars:     Size  Location     Type
  5970 ;;		None
  5971 ;; Return value:  Size  Location     Type
  5972 ;;                  1    wreg      void 
  5973 ;; Registers used:
  5974 ;;		wreg, status,2
  5975 ;; Tracked objects:
  5976 ;;		On entry : 0/0
  5977 ;;		On exit  : 0/0
  5978 ;;		Unchanged: 0/0
  5979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5980 ;;      Params:         0       0       0       0       0       0       0
  5981 ;;      Locals:         0       0       0       0       0       0       0
  5982 ;;      Temps:          0       0       0       0       0       0       0
  5983 ;;      Totals:         0       0       0       0       0       0       0
  5984 ;;Total ram usage:        0 bytes
  5985 ;; Hardware stack levels used:    1
  5986 ;; Hardware stack levels required when called:    6
  5987 ;; This function calls:
  5988 ;;		Nothing
  5989 ;; This function is called by:
  5990 ;;		_SYSTEM_Initialize
  5991 ;; This function uses a non-reentrant model
  5992 ;;
  5993                           
  5994                           	psect	text34
  5995  00215C                     __ptext34:
  5996                           	opt stack 0
  5997  00215C                     _ADC_Initialize:
  5998                           	opt stack 23
  5999                           
  6000                           ;adc.c: 64: ADCON0 = 0x01;
  6001                           
  6002                           ;incstack = 0
  6003  00215C  0E01               	movlw	1
  6004  00215E  6EC2               	movwf	4034,c	;volatile
  6005                           
  6006                           ;adc.c: 67: ADCON1 = 0x80;
  6007  002160  0E80               	movlw	128
  6008  002162  6EC1               	movwf	4033,c	;volatile
  6009                           
  6010                           ;adc.c: 70: ADCON2 = 0x12;
  6011  002164  0E12               	movlw	18
  6012  002166  6EC0               	movwf	4032,c	;volatile
  6013                           
  6014                           ;adc.c: 72: ADCON2bits.ADFM = 1;
  6015  002168  8EC0               	bsf	4032,7,c	;volatile
  6016                           
  6017                           ;adc.c: 75: ADRESL = 0x00;
  6018  00216A  0E00               	movlw	0
  6019  00216C  6EC3               	movwf	4035,c	;volatile
  6020                           
  6021                           ;adc.c: 78: ADRESH = 0x00;
  6022  00216E  0E00               	movlw	0
  6023  002170  6EC4               	movwf	4036,c	;volatile
  6024  002172  0012               	return		;funcret
  6025  002174                     __end_of_ADC_Initialize:
  6026                           	opt stack 0
  6027                           tblptru	equ	0xFF8
  6028                           tblptrh	equ	0xFF7
  6029                           tblptrl	equ	0xFF6
  6030                           tablat	equ	0xFF5
  6031                           prodh	equ	0xFF4
  6032                           prodl	equ	0xFF3
  6033                           intcon	equ	0xFF2
  6034                           intcon2	equ	0xFF1
  6035                           postinc0	equ	0xFEE
  6036                           wreg	equ	0xFE8
  6037                           indf1	equ	0xFE7
  6038                           postdec1	equ	0xFE5
  6039                           fsr1h	equ	0xFE2
  6040                           fsr1l	equ	0xFE1
  6041                           indf2	equ	0xFDF
  6042                           postinc2	equ	0xFDE
  6043                           postdec2	equ	0xFDD
  6044                           plusw2	equ	0xFDB
  6045                           fsr2h	equ	0xFDA
  6046                           fsr2l	equ	0xFD9
  6047                           status	equ	0xFD8
  6048                           
  6049 ;; *************** function _PDUStartup *****************
  6050 ;; Defined at:
  6051 ;;		line 20 in file "PDU.c"
  6052 ;; Parameters:    Size  Location     Type
  6053 ;;		None
  6054 ;; Auto vars:     Size  Location     Type
  6055 ;;		None
  6056 ;; Return value:  Size  Location     Type
  6057 ;;                  1    wreg      void 
  6058 ;; Registers used:
  6059 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6060 ;; Tracked objects:
  6061 ;;		On entry : 0/0
  6062 ;;		On exit  : 0/0
  6063 ;;		Unchanged: 0/0
  6064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6065 ;;      Params:         0       0       0       0       0       0       0
  6066 ;;      Locals:         0       0       0       0       0       0       0
  6067 ;;      Temps:          0       0       0       0       0       0       0
  6068 ;;      Totals:         0       0       0       0       0       0       0
  6069 ;;Total ram usage:        0 bytes
  6070 ;; Hardware stack levels used:    1
  6071 ;; Hardware stack levels required when called:   10
  6072 ;; This function calls:
  6073 ;;		_ComputeStorageData
  6074 ;;		_EnableSlavePower
  6075 ;;		_StartUp595
  6076 ;;		_Update
  6077 ;; This function is called by:
  6078 ;;		_main
  6079 ;; This function uses a non-reentrant model
  6080 ;;
  6081                           
  6082                           	psect	text35
  6083  001B74                     __ptext35:
  6084                           	opt stack 0
  6085  001B74                     _PDUStartup:
  6086                           	opt stack 20
  6087                           
  6088                           ;PDU.c: 23: StartUp595();
  6089                           
  6090                           ;incstack = 0
  6091  001B74  ECEB  F00D         	call	_StartUp595	;wreg free
  6092                           
  6093                           ;PDU.c: 24: EnableSlavePower(SAS, ON);
  6094  001B78  0E00               	movlw	0
  6095  001B7A  6E28               	movwf	EnableSlavePower@onof+1,c
  6096  001B7C  0E01               	movlw	1
  6097  001B7E  6E27               	movwf	EnableSlavePower@onof,c
  6098  001B80  0E03               	movlw	3
  6099  001B82  ECDF  F009         	call	_EnableSlavePower
  6100                           
  6101                           ;PDU.c: 25: EnableSlavePower(DDS, ON);
  6102  001B86  0E00               	movlw	0
  6103  001B88  6E28               	movwf	EnableSlavePower@onof+1,c
  6104  001B8A  0E01               	movlw	1
  6105  001B8C  6E27               	movwf	EnableSlavePower@onof,c
  6106  001B8E  0E01               	movlw	1
  6107  001B90  ECDF  F009         	call	_EnableSlavePower
  6108                           
  6109                           ;PDU.c: 26: EnableSlavePower(MCS, OFF);
  6110  001B94  0E00               	movlw	0
  6111  001B96  6E28               	movwf	EnableSlavePower@onof+1,c
  6112  001B98  0E00               	movlw	0
  6113  001B9A  6E27               	movwf	EnableSlavePower@onof,c
  6114  001B9C  0E02               	movlw	2
  6115  001B9E  ECDF  F009         	call	_EnableSlavePower
  6116                           
  6117                           ;PDU.c: 27: EnableSlavePower(BMM, ON);
  6118  001BA2  0E00               	movlw	0
  6119  001BA4  6E28               	movwf	EnableSlavePower@onof+1,c
  6120  001BA6  0E01               	movlw	1
  6121  001BA8  6E27               	movwf	EnableSlavePower@onof,c
  6122  001BAA  0E04               	movlw	4
  6123  001BAC  ECDF  F009         	call	_EnableSlavePower
  6124                           
  6125                           ;PDU.c: 28: EnableSlavePower(TSS, OFF);
  6126  001BB0  0E00               	movlw	0
  6127  001BB2  6E28               	movwf	EnableSlavePower@onof+1,c
  6128  001BB4  0E00               	movlw	0
  6129  001BB6  6E27               	movwf	EnableSlavePower@onof,c
  6130  001BB8  0E05               	movlw	5
  6131  001BBA  ECDF  F009         	call	_EnableSlavePower
  6132                           
  6133                           ;PDU.c: 29: EnableSlavePower(AUX, OFF);
  6134  001BBE  0E00               	movlw	0
  6135  001BC0  6E28               	movwf	EnableSlavePower@onof+1,c
  6136  001BC2  0E00               	movlw	0
  6137  001BC4  6E27               	movwf	EnableSlavePower@onof,c
  6138  001BC6  0E06               	movlw	6
  6139  001BC8  ECDF  F009         	call	_EnableSlavePower
  6140                           
  6141                           ;PDU.c: 30: Update();
  6142  001BCC  EC2F  F011         	call	_Update	;wreg free
  6143                           
  6144                           ;PDU.c: 32: ComputeStorageData();
  6145  001BD0  EC51  F00A         	call	_ComputeStorageData	;wreg free
  6146  001BD4  0012               	return		;funcret
  6147  001BD6                     __end_of_PDUStartup:
  6148                           	opt stack 0
  6149                           tblptru	equ	0xFF8
  6150                           tblptrh	equ	0xFF7
  6151                           tblptrl	equ	0xFF6
  6152                           tablat	equ	0xFF5
  6153                           prodh	equ	0xFF4
  6154                           prodl	equ	0xFF3
  6155                           intcon	equ	0xFF2
  6156                           intcon2	equ	0xFF1
  6157                           postinc0	equ	0xFEE
  6158                           wreg	equ	0xFE8
  6159                           indf1	equ	0xFE7
  6160                           postdec1	equ	0xFE5
  6161                           fsr1h	equ	0xFE2
  6162                           fsr1l	equ	0xFE1
  6163                           indf2	equ	0xFDF
  6164                           postinc2	equ	0xFDE
  6165                           postdec2	equ	0xFDD
  6166                           plusw2	equ	0xFDB
  6167                           fsr2h	equ	0xFDA
  6168                           fsr2l	equ	0xFD9
  6169                           status	equ	0xFD8
  6170                           
  6171 ;; *************** function _Update *****************
  6172 ;; Defined at:
  6173 ;;		line 225 in file "PDU.c"
  6174 ;; Parameters:    Size  Location     Type
  6175 ;;		None
  6176 ;; Auto vars:     Size  Location     Type
  6177 ;;		None
  6178 ;; Return value:  Size  Location     Type
  6179 ;;                  1    wreg      void 
  6180 ;; Registers used:
  6181 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6182 ;; Tracked objects:
  6183 ;;		On entry : 0/0
  6184 ;;		On exit  : 0/0
  6185 ;;		Unchanged: 0/0
  6186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6187 ;;      Params:         0       0       0       0       0       0       0
  6188 ;;      Locals:         0       0       0       0       0       0       0
  6189 ;;      Temps:          0       0       0       0       0       0       0
  6190 ;;      Totals:         0       0       0       0       0       0       0
  6191 ;;Total ram usage:        0 bytes
  6192 ;; Hardware stack levels used:    1
  6193 ;; Hardware stack levels required when called:    8
  6194 ;; This function calls:
  6195 ;;		_writeRegisters
  6196 ;; This function is called by:
  6197 ;;		_processPowerRequest
  6198 ;;		_PDUStartup
  6199 ;; This function uses a non-reentrant model
  6200 ;;
  6201                           
  6202                           	psect	text36
  6203  00225E                     __ptext36:
  6204                           	opt stack 0
  6205  00225E                     _Update:
  6206                           	opt stack 20
  6207                           
  6208                           ;PDU.c: 226: writeRegisters();
  6209                           
  6210                           ;incstack = 0
  6211  00225E  EC8F  F00C         	call	_writeRegisters	;wreg free
  6212  002262  0012               	return		;funcret
  6213  002264                     __end_of_Update:
  6214                           	opt stack 0
  6215                           tblptru	equ	0xFF8
  6216                           tblptrh	equ	0xFF7
  6217                           tblptrl	equ	0xFF6
  6218                           tablat	equ	0xFF5
  6219                           prodh	equ	0xFF4
  6220                           prodl	equ	0xFF3
  6221                           intcon	equ	0xFF2
  6222                           intcon2	equ	0xFF1
  6223                           postinc0	equ	0xFEE
  6224                           wreg	equ	0xFE8
  6225                           indf1	equ	0xFE7
  6226                           postdec1	equ	0xFE5
  6227                           fsr1h	equ	0xFE2
  6228                           fsr1l	equ	0xFE1
  6229                           indf2	equ	0xFDF
  6230                           postinc2	equ	0xFDE
  6231                           postdec2	equ	0xFDD
  6232                           plusw2	equ	0xFDB
  6233                           fsr2h	equ	0xFDA
  6234                           fsr2l	equ	0xFD9
  6235                           status	equ	0xFD8
  6236                           
  6237 ;; *************** function _StartUp595 *****************
  6238 ;; Defined at:
  6239 ;;		line 10 in file "Shift595.c"
  6240 ;; Parameters:    Size  Location     Type
  6241 ;;		None
  6242 ;; Auto vars:     Size  Location     Type
  6243 ;;		None
  6244 ;; Return value:  Size  Location     Type
  6245 ;;                  1    wreg      void 
  6246 ;; Registers used:
  6247 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6248 ;; Tracked objects:
  6249 ;;		On entry : 0/0
  6250 ;;		On exit  : 0/0
  6251 ;;		Unchanged: 0/0
  6252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6253 ;;      Params:         0       0       0       0       0       0       0
  6254 ;;      Locals:         0       0       0       0       0       0       0
  6255 ;;      Temps:          0       0       0       0       0       0       0
  6256 ;;      Totals:         0       0       0       0       0       0       0
  6257 ;;Total ram usage:        0 bytes
  6258 ;; Hardware stack levels used:    1
  6259 ;; Hardware stack levels required when called:    9
  6260 ;; This function calls:
  6261 ;;		_Clear595
  6262 ;;		_Delay
  6263 ;; This function is called by:
  6264 ;;		_PDUStartup
  6265 ;; This function uses a non-reentrant model
  6266 ;;
  6267                           
  6268                           	psect	text37
  6269  001BD6                     __ptext37:
  6270                           	opt stack 0
  6271  001BD6                     _StartUp595:
  6272                           	opt stack 20
  6273                           
  6274                           ;incstack = 0
  6275                           ;Shift595.c: 12: do { LATD5 = 1; } while(0);
  6276  001BD6  8A8C               	bsf	3980,5,c	;volatile
  6277                           
  6278                           ;Shift595.c: 13: do { LATB0 = 1; } while(0);
  6279  001BD8  808A               	bsf	3978,0,c	;volatile
  6280                           
  6281                           ;Shift595.c: 15: Delay(2);
  6282  001BDA  0E02               	movlw	2
  6283  001BDC  6E1D               	movwf	Delay@wait,c
  6284  001BDE  0E00               	movlw	0
  6285  001BE0  6E1E               	movwf	Delay@wait+1,c
  6286  001BE2  0E00               	movlw	0
  6287  001BE4  6E1F               	movwf	Delay@wait+2,c
  6288  001BE6  0E00               	movlw	0
  6289  001BE8  6E20               	movwf	Delay@wait+3,c
  6290  001BEA  ECEC  F00E         	call	_Delay	;wreg free
  6291                           
  6292                           ;Shift595.c: 16: do { LATD5 = 0; } while(0);
  6293  001BEE  9A8C               	bcf	3980,5,c	;volatile
  6294                           
  6295                           ;Shift595.c: 17: Delay(2);
  6296  001BF0  0E02               	movlw	2
  6297  001BF2  6E1D               	movwf	Delay@wait,c
  6298  001BF4  0E00               	movlw	0
  6299  001BF6  6E1E               	movwf	Delay@wait+1,c
  6300  001BF8  0E00               	movlw	0
  6301  001BFA  6E1F               	movwf	Delay@wait+2,c
  6302  001BFC  0E00               	movlw	0
  6303  001BFE  6E20               	movwf	Delay@wait+3,c
  6304  001C00  ECEC  F00E         	call	_Delay	;wreg free
  6305                           
  6306                           ;Shift595.c: 18: do { LATB0 = 0; } while(0);
  6307  001C04  908A               	bcf	3978,0,c	;volatile
  6308                           
  6309                           ;Shift595.c: 19: Delay(2);
  6310  001C06  0E02               	movlw	2
  6311  001C08  6E1D               	movwf	Delay@wait,c
  6312  001C0A  0E00               	movlw	0
  6313  001C0C  6E1E               	movwf	Delay@wait+1,c
  6314  001C0E  0E00               	movlw	0
  6315  001C10  6E1F               	movwf	Delay@wait+2,c
  6316  001C12  0E00               	movlw	0
  6317  001C14  6E20               	movwf	Delay@wait+3,c
  6318  001C16  ECEC  F00E         	call	_Delay	;wreg free
  6319                           
  6320                           ;Shift595.c: 20: do { LATD5 = 1; } while(0);
  6321  001C1A  8A8C               	bsf	3980,5,c	;volatile
  6322                           
  6323                           ;Shift595.c: 21: Delay(2);
  6324  001C1C  0E02               	movlw	2
  6325  001C1E  6E1D               	movwf	Delay@wait,c
  6326  001C20  0E00               	movlw	0
  6327  001C22  6E1E               	movwf	Delay@wait+1,c
  6328  001C24  0E00               	movlw	0
  6329  001C26  6E1F               	movwf	Delay@wait+2,c
  6330  001C28  0E00               	movlw	0
  6331  001C2A  6E20               	movwf	Delay@wait+3,c
  6332  001C2C  ECEC  F00E         	call	_Delay	;wreg free
  6333                           
  6334                           ;Shift595.c: 22: do { LATB0 = 1; } while(0);
  6335  001C30  808A               	bsf	3978,0,c	;volatile
  6336                           
  6337                           ;Shift595.c: 24: Clear595();
  6338  001C32  EC78  F00F         	call	_Clear595	;wreg free
  6339  001C36  0012               	return		;funcret
  6340  001C38                     __end_of_StartUp595:
  6341                           	opt stack 0
  6342                           tblptru	equ	0xFF8
  6343                           tblptrh	equ	0xFF7
  6344                           tblptrl	equ	0xFF6
  6345                           tablat	equ	0xFF5
  6346                           prodh	equ	0xFF4
  6347                           prodl	equ	0xFF3
  6348                           intcon	equ	0xFF2
  6349                           intcon2	equ	0xFF1
  6350                           postinc0	equ	0xFEE
  6351                           wreg	equ	0xFE8
  6352                           indf1	equ	0xFE7
  6353                           postdec1	equ	0xFE5
  6354                           fsr1h	equ	0xFE2
  6355                           fsr1l	equ	0xFE1
  6356                           indf2	equ	0xFDF
  6357                           postinc2	equ	0xFDE
  6358                           postdec2	equ	0xFDD
  6359                           plusw2	equ	0xFDB
  6360                           fsr2h	equ	0xFDA
  6361                           fsr2l	equ	0xFD9
  6362                           status	equ	0xFD8
  6363                           
  6364 ;; *************** function _Clear595 *****************
  6365 ;; Defined at:
  6366 ;;		line 39 in file "Shift595.c"
  6367 ;; Parameters:    Size  Location     Type
  6368 ;;		None
  6369 ;; Auto vars:     Size  Location     Type
  6370 ;;  i               2   41[COMRAM] int 
  6371 ;; Return value:  Size  Location     Type
  6372 ;;                  1    wreg      void 
  6373 ;; Registers used:
  6374 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6375 ;; Tracked objects:
  6376 ;;		On entry : 0/0
  6377 ;;		On exit  : 0/0
  6378 ;;		Unchanged: 0/0
  6379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6380 ;;      Params:         0       0       0       0       0       0       0
  6381 ;;      Locals:         2       0       0       0       0       0       0
  6382 ;;      Temps:          0       0       0       0       0       0       0
  6383 ;;      Totals:         2       0       0       0       0       0       0
  6384 ;;Total ram usage:        2 bytes
  6385 ;; Hardware stack levels used:    1
  6386 ;; Hardware stack levels required when called:    8
  6387 ;; This function calls:
  6388 ;;		_writeRegisters
  6389 ;; This function is called by:
  6390 ;;		_StartUp595
  6391 ;; This function uses a non-reentrant model
  6392 ;;
  6393                           
  6394                           	psect	text38
  6395  001EF0                     __ptext38:
  6396                           	opt stack 0
  6397  001EF0                     _Clear595:
  6398                           	opt stack 20
  6399                           
  6400                           ;Shift595.c: 40: for (int i = 3 * 8 - 1; i >= 0; i--) {
  6401                           
  6402                           ;incstack = 0
  6403  001EF0  0E00               	movlw	0
  6404  001EF2  6E2B               	movwf	Clear595@i+1,c
  6405  001EF4  0E17               	movlw	23
  6406  001EF6  6E2A               	movwf	Clear595@i,c
  6407  001EF8                     l4054:
  6408  001EF8  BE2B               	btfsc	Clear595@i+1,7,c
  6409  001EFA  D011               	goto	l4064
  6410                           
  6411                           ;Shift595.c: 41: registers[i] = 0;
  6412  001EFC  90D8               	bcf	status,0,c
  6413  001EFE  342A               	rlcf	Clear595@i,w,c
  6414  001F00  6ED9               	movwf	fsr2l,c
  6415  001F02  342B               	rlcf	Clear595@i+1,w,c
  6416  001F04  6EDA               	movwf	fsr2h,c
  6417  001F06  0E00               	movlw	low _registers
  6418  001F08  26D9               	addwf	fsr2l,f,c
  6419  001F0A  0E01               	movlw	high _registers
  6420  001F0C  22DA               	addwfc	fsr2h,f,c
  6421  001F0E  0E00               	movlw	0
  6422  001F10  6EDE               	movwf	postinc2,c
  6423  001F12  0E00               	movlw	0
  6424  001F14  6EDD               	movwf	postdec2,c
  6425  001F16  062A               	decf	Clear595@i,f,c
  6426  001F18  A0D8               	btfss	status,0,c
  6427  001F1A  062B               	decf	Clear595@i+1,f,c
  6428  001F1C  D7ED               	goto	l4054
  6429  001F1E                     l4064:
  6430                           
  6431                           ;Shift595.c: 42: }
  6432                           ;Shift595.c: 44: writeRegisters();
  6433  001F1E  EC8F  F00C         	call	_writeRegisters	;wreg free
  6434  001F22  0012               	return		;funcret
  6435  001F24                     __end_of_Clear595:
  6436                           	opt stack 0
  6437                           tblptru	equ	0xFF8
  6438                           tblptrh	equ	0xFF7
  6439                           tblptrl	equ	0xFF6
  6440                           tablat	equ	0xFF5
  6441                           prodh	equ	0xFF4
  6442                           prodl	equ	0xFF3
  6443                           intcon	equ	0xFF2
  6444                           intcon2	equ	0xFF1
  6445                           postinc0	equ	0xFEE
  6446                           wreg	equ	0xFE8
  6447                           indf1	equ	0xFE7
  6448                           postdec1	equ	0xFE5
  6449                           fsr1h	equ	0xFE2
  6450                           fsr1l	equ	0xFE1
  6451                           indf2	equ	0xFDF
  6452                           postinc2	equ	0xFDE
  6453                           postdec2	equ	0xFDD
  6454                           plusw2	equ	0xFDB
  6455                           fsr2h	equ	0xFDA
  6456                           fsr2l	equ	0xFD9
  6457                           status	equ	0xFD8
  6458                           
  6459 ;; *************** function _writeRegisters *****************
  6460 ;; Defined at:
  6461 ;;		line 50 in file "Shift595.c"
  6462 ;; Parameters:    Size  Location     Type
  6463 ;;		None
  6464 ;; Auto vars:     Size  Location     Type
  6465 ;;  i               2   39[COMRAM] int 
  6466 ;;  val             2   37[COMRAM] int 
  6467 ;; Return value:  Size  Location     Type
  6468 ;;                  1    wreg      void 
  6469 ;; Registers used:
  6470 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6471 ;; Tracked objects:
  6472 ;;		On entry : 0/0
  6473 ;;		On exit  : 0/0
  6474 ;;		Unchanged: 0/0
  6475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6476 ;;      Params:         0       0       0       0       0       0       0
  6477 ;;      Locals:         4       0       0       0       0       0       0
  6478 ;;      Temps:          0       0       0       0       0       0       0
  6479 ;;      Totals:         4       0       0       0       0       0       0
  6480 ;;Total ram usage:        4 bytes
  6481 ;; Hardware stack levels used:    1
  6482 ;; Hardware stack levels required when called:    7
  6483 ;; This function calls:
  6484 ;;		_Delay
  6485 ;; This function is called by:
  6486 ;;		_Update
  6487 ;;		_Clear595
  6488 ;; This function uses a non-reentrant model
  6489 ;;
  6490                           
  6491                           	psect	text39
  6492  00191E                     __ptext39:
  6493                           	opt stack 0
  6494  00191E                     _writeRegisters:
  6495                           	opt stack 20
  6496                           
  6497                           ;Shift595.c: 51: int val = 0;
  6498                           
  6499                           ;incstack = 0
  6500  00191E  0E00               	movlw	0
  6501  001920  6E27               	movwf	writeRegisters@val+1,c
  6502  001922  0E00               	movlw	0
  6503  001924  6E26               	movwf	writeRegisters@val,c
  6504                           
  6505                           ;Shift595.c: 52: for (int i = 3 * 8 - 1; i >= 0; i--) {
  6506  001926  0E00               	movlw	0
  6507  001928  6E29               	movwf	writeRegisters@i+1,c
  6508  00192A  0E17               	movlw	23
  6509  00192C  6E28               	movwf	writeRegisters@i,c
  6510  00192E                     l3916:
  6511  00192E  BE29               	btfsc	writeRegisters@i+1,7,c
  6512  001930  D01D               	goto	l548
  6513                           
  6514                           ;Shift595.c: 53: do { LATD7 = 0; } while(0);
  6515  001932  9E8C               	bcf	3980,7,c	;volatile
  6516                           
  6517                           ;Shift595.c: 55: val = registers[i];
  6518  001934  90D8               	bcf	status,0,c
  6519  001936  3428               	rlcf	writeRegisters@i,w,c
  6520  001938  6ED9               	movwf	fsr2l,c
  6521  00193A  3429               	rlcf	writeRegisters@i+1,w,c
  6522  00193C  6EDA               	movwf	fsr2h,c
  6523  00193E  0E00               	movlw	low _registers
  6524  001940  26D9               	addwf	fsr2l,f,c
  6525  001942  0E01               	movlw	high _registers
  6526  001944  22DA               	addwfc	fsr2h,f,c
  6527  001946  CFDE F026          	movff	postinc2,writeRegisters@val
  6528  00194A  CFDD F027          	movff	postdec2,writeRegisters@val+1
  6529                           
  6530                           ;Shift595.c: 56: if (val == 1) {
  6531  00194E  0426               	decf	writeRegisters@val,w,c
  6532  001950  1027               	iorwf	writeRegisters@val+1,w,c
  6533  001952  A4D8               	btfss	status,2,c
  6534  001954  D002               	goto	l3924
  6535                           
  6536                           ;Shift595.c: 57: do { LATD4 = 1; } while(0);
  6537  001956  888C               	bsf	3980,4,c	;volatile
  6538                           
  6539                           ;Shift595.c: 58: } else if (val == 0) {
  6540  001958  D004               	goto	l546
  6541  00195A                     l3924:
  6542  00195A  5026               	movf	writeRegisters@val,w,c
  6543  00195C  1027               	iorwf	writeRegisters@val+1,w,c
  6544  00195E  B4D8               	btfsc	status,2,c
  6545                           
  6546                           ;Shift595.c: 59: do { LATD4 = 0; } while(0);
  6547  001960  988C               	bcf	3980,4,c	;volatile
  6548  001962                     l546:
  6549  001962  8E8C               	bsf	3980,7,c	;volatile
  6550  001964  0628               	decf	writeRegisters@i,f,c
  6551  001966  A0D8               	btfss	status,0,c
  6552  001968  0629               	decf	writeRegisters@i+1,f,c
  6553  00196A  D7E1               	goto	l3916
  6554  00196C                     l548:
  6555  00196C  9E8C               	bcf	3980,7,c	;volatile
  6556                           
  6557                           ;Shift595.c: 67: Delay(1);
  6558  00196E  0E01               	movlw	1
  6559  001970  6E1D               	movwf	Delay@wait,c
  6560  001972  0E00               	movlw	0
  6561  001974  6E1E               	movwf	Delay@wait+1,c
  6562  001976  0E00               	movlw	0
  6563  001978  6E1F               	movwf	Delay@wait+2,c
  6564  00197A  0E00               	movlw	0
  6565  00197C  6E20               	movwf	Delay@wait+3,c
  6566  00197E  ECEC  F00E         	call	_Delay	;wreg free
  6567                           
  6568                           ;Shift595.c: 68: do { LATD6 = 1; } while(0);
  6569  001982  8C8C               	bsf	3980,6,c	;volatile
  6570                           
  6571                           ;Shift595.c: 69: Delay(1);
  6572  001984  0E01               	movlw	1
  6573  001986  6E1D               	movwf	Delay@wait,c
  6574  001988  0E00               	movlw	0
  6575  00198A  6E1E               	movwf	Delay@wait+1,c
  6576  00198C  0E00               	movlw	0
  6577  00198E  6E1F               	movwf	Delay@wait+2,c
  6578  001990  0E00               	movlw	0
  6579  001992  6E20               	movwf	Delay@wait+3,c
  6580  001994  ECEC  F00E         	call	_Delay	;wreg free
  6581                           
  6582                           ;Shift595.c: 70: do { LATD6 = 0; } while(0);
  6583  001998  9C8C               	bcf	3980,6,c	;volatile
  6584  00199A  0012               	return	
  6585  00199C                     __end_of_writeRegisters:
  6586                           	opt stack 0
  6587                           tblptru	equ	0xFF8
  6588                           tblptrh	equ	0xFF7
  6589                           tblptrl	equ	0xFF6
  6590                           tablat	equ	0xFF5
  6591                           prodh	equ	0xFF4
  6592                           prodl	equ	0xFF3
  6593                           intcon	equ	0xFF2
  6594                           intcon2	equ	0xFF1
  6595                           postinc0	equ	0xFEE
  6596                           wreg	equ	0xFE8
  6597                           indf1	equ	0xFE7
  6598                           postdec1	equ	0xFE5
  6599                           fsr1h	equ	0xFE2
  6600                           fsr1l	equ	0xFE1
  6601                           indf2	equ	0xFDF
  6602                           postinc2	equ	0xFDE
  6603                           postdec2	equ	0xFDD
  6604                           plusw2	equ	0xFDB
  6605                           fsr2h	equ	0xFDA
  6606                           fsr2l	equ	0xFD9
  6607                           status	equ	0xFD8
  6608                           
  6609 ;; *************** function _EnableSlavePower *****************
  6610 ;; Defined at:
  6611 ;;		line 37 in file "PDU.c"
  6612 ;; Parameters:    Size  Location     Type
  6613 ;;  slave           1    wreg     enum E6
  6614 ;;  onof            2   38[COMRAM] int 
  6615 ;; Auto vars:     Size  Location     Type
  6616 ;;  slave           1   40[COMRAM] enum E6
  6617 ;; Return value:  Size  Location     Type
  6618 ;;                  1    wreg      void 
  6619 ;; Registers used:
  6620 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6621 ;; Tracked objects:
  6622 ;;		On entry : 0/0
  6623 ;;		On exit  : 0/0
  6624 ;;		Unchanged: 0/0
  6625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6626 ;;      Params:         2       0       0       0       0       0       0
  6627 ;;      Locals:         1       0       0       0       0       0       0
  6628 ;;      Temps:          0       0       0       0       0       0       0
  6629 ;;      Totals:         3       0       0       0       0       0       0
  6630 ;;Total ram usage:        3 bytes
  6631 ;; Hardware stack levels used:    1
  6632 ;; Hardware stack levels required when called:    7
  6633 ;; This function calls:
  6634 ;;		_SetPin595
  6635 ;; This function is called by:
  6636 ;;		_processPowerRequest
  6637 ;;		_PDUStartup
  6638 ;; This function uses a non-reentrant model
  6639 ;;
  6640                           
  6641                           	psect	text40
  6642  0013BE                     __ptext40:
  6643                           	opt stack 0
  6644  0013BE                     _EnableSlavePower:
  6645                           	opt stack 21
  6646                           
  6647                           ;incstack = 0
  6648                           ;EnableSlavePower@slave stored from wreg
  6649  0013BE  6E29               	movwf	EnableSlavePower@slave,c
  6650                           
  6651                           ;PDU.c: 38: switch (slave) {
  6652  0013C0  D05C               	goto	l4044
  6653  0013C2                     l4028:
  6654                           
  6655                           ;PDU.c: 40: SetPin595(2, 6, onof);
  6656  0013C2  0E00               	movlw	0
  6657  0013C4  6E1E               	movwf	SetPin595@Reg+1,c
  6658  0013C6  0E02               	movlw	2
  6659  0013C8  6E1D               	movwf	SetPin595@Reg,c
  6660  0013CA  0E00               	movlw	0
  6661  0013CC  6E20               	movwf	SetPin595@pin+1,c
  6662  0013CE  0E06               	movlw	6
  6663  0013D0  6E1F               	movwf	SetPin595@pin,c
  6664  0013D2  C027  F021         	movff	EnableSlavePower@onof,SetPin595@value
  6665  0013D6  C028  F022         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  6666  0013DA  EC79  F00E         	call	_SetPin595	;wreg free
  6667                           
  6668                           ;PDU.c: 41: break;
  6669  0013DE  0012               	return	
  6670  0013E0                     l4030:
  6671                           
  6672                           ;PDU.c: 43: SetPin595(1, 1, onof);
  6673  0013E0  0E00               	movlw	0
  6674  0013E2  6E1E               	movwf	SetPin595@Reg+1,c
  6675  0013E4  0E01               	movlw	1
  6676  0013E6  6E1D               	movwf	SetPin595@Reg,c
  6677  0013E8  0E00               	movlw	0
  6678  0013EA  6E20               	movwf	SetPin595@pin+1,c
  6679  0013EC  0E01               	movlw	1
  6680  0013EE  6E1F               	movwf	SetPin595@pin,c
  6681  0013F0  C027  F021         	movff	EnableSlavePower@onof,SetPin595@value
  6682  0013F4  C028  F022         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  6683  0013F8  EC79  F00E         	call	_SetPin595	;wreg free
  6684                           
  6685                           ;PDU.c: 44: break;
  6686  0013FC  0012               	return	
  6687  0013FE                     l4032:
  6688                           
  6689                           ;PDU.c: 46: SetPin595(1, 6, onof);
  6690  0013FE  0E00               	movlw	0
  6691  001400  6E1E               	movwf	SetPin595@Reg+1,c
  6692  001402  0E01               	movlw	1
  6693  001404  6E1D               	movwf	SetPin595@Reg,c
  6694  001406  0E00               	movlw	0
  6695  001408  6E20               	movwf	SetPin595@pin+1,c
  6696  00140A  0E06               	movlw	6
  6697  00140C  6E1F               	movwf	SetPin595@pin,c
  6698  00140E  C027  F021         	movff	EnableSlavePower@onof,SetPin595@value
  6699  001412  C028  F022         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  6700  001416  EC79  F00E         	call	_SetPin595	;wreg free
  6701                           
  6702                           ;PDU.c: 47: MCSOn = onof;
  6703  00141A  C027  F03A         	movff	EnableSlavePower@onof,_MCSOn
  6704                           
  6705                           ;PDU.c: 48: break;
  6706  00141E  0012               	return	
  6707  001420                     l4036:
  6708                           
  6709                           ;PDU.c: 50: SetPin595(2, 1, onof);
  6710  001420  0E00               	movlw	0
  6711  001422  6E1E               	movwf	SetPin595@Reg+1,c
  6712  001424  0E02               	movlw	2
  6713  001426  6E1D               	movwf	SetPin595@Reg,c
  6714  001428  0E00               	movlw	0
  6715  00142A  6E20               	movwf	SetPin595@pin+1,c
  6716  00142C  0E01               	movlw	1
  6717  00142E  6E1F               	movwf	SetPin595@pin,c
  6718  001430  C027  F021         	movff	EnableSlavePower@onof,SetPin595@value
  6719  001434  C028  F022         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  6720  001438  EC79  F00E         	call	_SetPin595	;wreg free
  6721                           
  6722                           ;PDU.c: 51: break;
  6723  00143C  0012               	return	
  6724  00143E                     l4038:
  6725                           
  6726                           ;PDU.c: 53: SetPin595(3, 6, onof);
  6727  00143E  0E00               	movlw	0
  6728  001440  6E1E               	movwf	SetPin595@Reg+1,c
  6729  001442  0E03               	movlw	3
  6730  001444  6E1D               	movwf	SetPin595@Reg,c
  6731  001446  0E00               	movlw	0
  6732  001448  6E20               	movwf	SetPin595@pin+1,c
  6733  00144A  0E06               	movlw	6
  6734  00144C  6E1F               	movwf	SetPin595@pin,c
  6735  00144E  C027  F021         	movff	EnableSlavePower@onof,SetPin595@value
  6736  001452  C028  F022         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  6737  001456  EC79  F00E         	call	_SetPin595	;wreg free
  6738                           
  6739                           ;PDU.c: 54: break;
  6740  00145A  0012               	return	
  6741  00145C                     l4040:
  6742                           
  6743                           ;PDU.c: 56: SetPin595(3, 1, onof);
  6744  00145C  0E00               	movlw	0
  6745  00145E  6E1E               	movwf	SetPin595@Reg+1,c
  6746  001460  0E03               	movlw	3
  6747  001462  6E1D               	movwf	SetPin595@Reg,c
  6748  001464  0E00               	movlw	0
  6749  001466  6E20               	movwf	SetPin595@pin+1,c
  6750  001468  0E01               	movlw	1
  6751  00146A  6E1F               	movwf	SetPin595@pin,c
  6752  00146C  C027  F021         	movff	EnableSlavePower@onof,SetPin595@value
  6753  001470  C028  F022         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  6754  001474  EC79  F00E         	call	_SetPin595	;wreg free
  6755                           
  6756                           ;PDU.c: 58: }
  6757                           
  6758                           ;PDU.c: 57: break;
  6759  001478  0012               	return	
  6760  00147A                     l4044:
  6761  00147A  5029               	movf	EnableSlavePower@slave,w,c
  6762                           
  6763                           ; Switch size 1, requested type "space"
  6764                           ; Number of cases is 6, Range of values is 1 to 6
  6765                           ; switch strategies available:
  6766                           ; Name         Instructions Cycles
  6767                           ; simple_byte           19    10 (average)
  6768                           ;	Chosen strategy is simple_byte
  6769  00147C  0A01               	xorlw	1	; case 1
  6770  00147E  B4D8               	btfsc	status,2,c
  6771  001480  D7CF               	goto	l4036
  6772  001482  0A03               	xorlw	3	; case 2
  6773  001484  B4D8               	btfsc	status,2,c
  6774  001486  D7BB               	goto	l4032
  6775  001488  0A01               	xorlw	1	; case 3
  6776  00148A  B4D8               	btfsc	status,2,c
  6777  00148C  D79A               	goto	l4028
  6778  00148E  0A07               	xorlw	7	; case 4
  6779  001490  B4D8               	btfsc	status,2,c
  6780  001492  D7A6               	goto	l4030
  6781  001494  0A01               	xorlw	1	; case 5
  6782  001496  B4D8               	btfsc	status,2,c
  6783  001498  D7D2               	goto	l4038
  6784  00149A  0A03               	xorlw	3	; case 6
  6785  00149C  A4D8               	btfss	status,2,c
  6786  00149E  0012               	return	
  6787  0014A0  D7DD               	goto	l4040
  6788  0014A2                     __end_of_EnableSlavePower:
  6789                           	opt stack 0
  6790                           tblptru	equ	0xFF8
  6791                           tblptrh	equ	0xFF7
  6792                           tblptrl	equ	0xFF6
  6793                           tablat	equ	0xFF5
  6794                           prodh	equ	0xFF4
  6795                           prodl	equ	0xFF3
  6796                           intcon	equ	0xFF2
  6797                           intcon2	equ	0xFF1
  6798                           postinc0	equ	0xFEE
  6799                           wreg	equ	0xFE8
  6800                           indf1	equ	0xFE7
  6801                           postdec1	equ	0xFE5
  6802                           fsr1h	equ	0xFE2
  6803                           fsr1l	equ	0xFE1
  6804                           indf2	equ	0xFDF
  6805                           postinc2	equ	0xFDE
  6806                           postdec2	equ	0xFDD
  6807                           plusw2	equ	0xFDB
  6808                           fsr2h	equ	0xFDA
  6809                           fsr2l	equ	0xFD9
  6810                           status	equ	0xFD8
  6811                           
  6812 ;; *************** function _SetPin595 *****************
  6813 ;; Defined at:
  6814 ;;		line 32 in file "Shift595.c"
  6815 ;; Parameters:    Size  Location     Type
  6816 ;;  Reg             2   28[COMRAM] int 
  6817 ;;  pin             2   30[COMRAM] int 
  6818 ;;  value           2   32[COMRAM] int 
  6819 ;; Auto vars:     Size  Location     Type
  6820 ;;		None
  6821 ;; Return value:  Size  Location     Type
  6822 ;;                  1    wreg      void 
  6823 ;; Registers used:
  6824 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6825 ;; Tracked objects:
  6826 ;;		On entry : 0/0
  6827 ;;		On exit  : 0/0
  6828 ;;		Unchanged: 0/0
  6829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6830 ;;      Params:         6       0       0       0       0       0       0
  6831 ;;      Locals:         0       0       0       0       0       0       0
  6832 ;;      Temps:          4       0       0       0       0       0       0
  6833 ;;      Totals:        10       0       0       0       0       0       0
  6834 ;;Total ram usage:       10 bytes
  6835 ;; Hardware stack levels used:    1
  6836 ;; Hardware stack levels required when called:    6
  6837 ;; This function calls:
  6838 ;;		Nothing
  6839 ;; This function is called by:
  6840 ;;		_EnableSlavePower
  6841 ;; This function uses a non-reentrant model
  6842 ;;
  6843                           
  6844                           	psect	text41
  6845  001CF2                     __ptext41:
  6846                           	opt stack 0
  6847  001CF2                     _SetPin595:
  6848                           	opt stack 21
  6849                           
  6850                           ;Shift595.c: 33: registers[((Reg - 1)*8) + pin] = value;
  6851                           
  6852                           ;incstack = 0
  6853  001CF2  0EF0               	movlw	240
  6854  001CF4  6E23               	movwf	??_SetPin595& (0+255),c
  6855  001CF6  0EFF               	movlw	255
  6856  001CF8  6E24               	movwf	(??_SetPin595+1)& (0+255),c
  6857  001CFA  C01D  F025         	movff	SetPin595@Reg,??_SetPin595+2
  6858  001CFE  C01E  F026         	movff	SetPin595@Reg+1,??_SetPin595+3
  6859  001D02  90D8               	bcf	status,0,c
  6860  001D04  3625               	rlcf	??_SetPin595+2,f,c
  6861  001D06  3626               	rlcf	??_SetPin595+3,f,c
  6862  001D08  90D8               	bcf	status,0,c
  6863  001D0A  3625               	rlcf	??_SetPin595+2,f,c
  6864  001D0C  3626               	rlcf	??_SetPin595+3,f,c
  6865  001D0E  90D8               	bcf	status,0,c
  6866  001D10  3625               	rlcf	??_SetPin595+2,f,c
  6867  001D12  3626               	rlcf	??_SetPin595+3,f,c
  6868  001D14  501F               	movf	SetPin595@pin,w,c
  6869  001D16  2625               	addwf	??_SetPin595+2,f,c
  6870  001D18  5020               	movf	SetPin595@pin+1,w,c
  6871  001D1A  2226               	addwfc	??_SetPin595+3,f,c
  6872  001D1C  90D8               	bcf	status,0,c
  6873  001D1E  3625               	rlcf	??_SetPin595+2,f,c
  6874  001D20  3626               	rlcf	??_SetPin595+3,f,c
  6875  001D22  5023               	movf	??_SetPin595,w,c
  6876  001D24  2625               	addwf	??_SetPin595+2,f,c
  6877  001D26  5024               	movf	??_SetPin595+1,w,c
  6878  001D28  2226               	addwfc	??_SetPin595+3,f,c
  6879  001D2A  0E00               	movlw	low _registers
  6880  001D2C  2425               	addwf	??_SetPin595+2,w,c
  6881  001D2E  6ED9               	movwf	fsr2l,c
  6882  001D30  0E01               	movlw	high _registers
  6883  001D32  2026               	addwfc	??_SetPin595+3,w,c
  6884  001D34  6EDA               	movwf	fsr2h,c
  6885  001D36  C021  FFDE         	movff	SetPin595@value,postinc2
  6886  001D3A  C022  FFDD         	movff	SetPin595@value+1,postdec2
  6887  001D3E  0012               	return		;funcret
  6888  001D40                     __end_of_SetPin595:
  6889                           	opt stack 0
  6890                           tblptru	equ	0xFF8
  6891                           tblptrh	equ	0xFF7
  6892                           tblptrl	equ	0xFF6
  6893                           tablat	equ	0xFF5
  6894                           prodh	equ	0xFF4
  6895                           prodl	equ	0xFF3
  6896                           intcon	equ	0xFF2
  6897                           intcon2	equ	0xFF1
  6898                           postinc0	equ	0xFEE
  6899                           wreg	equ	0xFE8
  6900                           indf1	equ	0xFE7
  6901                           postdec1	equ	0xFE5
  6902                           fsr1h	equ	0xFE2
  6903                           fsr1l	equ	0xFE1
  6904                           indf2	equ	0xFDF
  6905                           postinc2	equ	0xFDE
  6906                           postdec2	equ	0xFDD
  6907                           plusw2	equ	0xFDB
  6908                           fsr2h	equ	0xFDA
  6909                           fsr2l	equ	0xFD9
  6910                           status	equ	0xFD8
  6911                           
  6912 ;; *************** function _ComputeStorageData *****************
  6913 ;; Defined at:
  6914 ;;		line 160 in file "PDU.c"
  6915 ;; Parameters:    Size  Location     Type
  6916 ;;		None
  6917 ;; Auto vars:     Size  Location     Type
  6918 ;;  i               2   31[COMRAM] int 
  6919 ;; Return value:  Size  Location     Type
  6920 ;;                  1    wreg      void 
  6921 ;; Registers used:
  6922 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6923 ;; Tracked objects:
  6924 ;;		On entry : 0/0
  6925 ;;		On exit  : 0/0
  6926 ;;		Unchanged: 0/0
  6927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6928 ;;      Params:         0       0       0       0       0       0       0
  6929 ;;      Locals:         2       0       0       0       0       0       0
  6930 ;;      Temps:          2       0       0       0       0       0       0
  6931 ;;      Totals:         4       0       0       0       0       0       0
  6932 ;;Total ram usage:        4 bytes
  6933 ;; Hardware stack levels used:    1
  6934 ;; Hardware stack levels required when called:    7
  6935 ;; This function calls:
  6936 ;;		_DATAEE_ReadByte
  6937 ;; This function is called by:
  6938 ;;		_PDUStartup
  6939 ;;		_main
  6940 ;; This function uses a non-reentrant model
  6941 ;;
  6942                           
  6943                           	psect	text42
  6944  0014A2                     __ptext42:
  6945                           	opt stack 0
  6946  0014A2                     _ComputeStorageData:
  6947                           	opt stack 22
  6948                           
  6949                           ;PDU.c: 161: for (int i = 0; i < 12; i++) {
  6950                           
  6951                           ;incstack = 0
  6952  0014A2  0E00               	movlw	0
  6953  0014A4  6E21               	movwf	ComputeStorageData@i+1,c
  6954  0014A6  0E00               	movlw	0
  6955  0014A8  6E20               	movwf	ComputeStorageData@i,c
  6956  0014AA                     l4360:
  6957  0014AA  BE21               	btfsc	ComputeStorageData@i+1,7,c
  6958  0014AC  D006               	goto	l4364
  6959  0014AE  5021               	movf	ComputeStorageData@i+1,w,c
  6960  0014B0  E111               	bnz	l4370
  6961  0014B2  0E0C               	movlw	12
  6962  0014B4  5C20               	subwf	ComputeStorageData@i,w,c
  6963  0014B6  B0D8               	btfsc	status,0,c
  6964  0014B8  D00D               	goto	l4370
  6965  0014BA                     l4364:
  6966                           
  6967                           ;PDU.c: 162: data[i] = DATAEE_ReadByte(i);
  6968  0014BA  0ED3               	movlw	low _data
  6969  0014BC  2420               	addwf	ComputeStorageData@i,w,c
  6970  0014BE  6ED9               	movwf	fsr2l,c
  6971  0014C0  0E00               	movlw	high _data
  6972  0014C2  2021               	addwfc	ComputeStorageData@i+1,w,c
  6973  0014C4  6EDA               	movwf	fsr2h,c
  6974  0014C6  5020               	movf	ComputeStorageData@i,w,c
  6975  0014C8  EC05  F011         	call	_DATAEE_ReadByte
  6976  0014CC  6EDF               	movwf	indf2,c
  6977  0014CE  4A20               	infsnz	ComputeStorageData@i,f,c
  6978  0014D0  2A21               	incf	ComputeStorageData@i+1,f,c
  6979  0014D2  D7EB               	goto	l4360
  6980  0014D4                     l4370:
  6981                           
  6982                           ;PDU.c: 163: }
  6983                           ;PDU.c: 164: Currentcomp[0] = ((data[0] << 8) | data[1]);
  6984  0014D4  0100               	movlb	0	; () banked
  6985  0014D6  51D4               	movf	(_data+1)& (0+255),w,b
  6986  0014D8  C0D3  F01E         	movff	_data,??_ComputeStorageData
  6987  0014DC  6A1F               	clrf	(??_ComputeStorageData+1)& (0+255),c
  6988  0014DE  C01E  F01F         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  6989  0014E2  6A1E               	clrf	??_ComputeStorageData,c
  6990  0014E4  101E               	iorwf	??_ComputeStorageData,w,c
  6991  0014E6  0100               	movlb	0	; () banked
  6992  0014E8  6FDF               	movwf	_Currentcomp& (0+255),b
  6993  0014EA  501F               	movf	??_ComputeStorageData+1,w,c
  6994  0014EC  0100               	movlb	0	; () banked
  6995  0014EE  6FE0               	movwf	(_Currentcomp+1)& (0+255),b
  6996                           
  6997                           ;PDU.c: 165: Currentcomp[1] = ((data[2] << 8) | data[3]);
  6998  0014F0  0100               	movlb	0	; () banked
  6999  0014F2  51D6               	movf	(_data+3)& (0+255),w,b
  7000  0014F4  C0D5  F01E         	movff	_data+2,??_ComputeStorageData
  7001  0014F8  6A1F               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7002  0014FA  C01E  F01F         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7003  0014FE  6A1E               	clrf	??_ComputeStorageData,c
  7004  001500  101E               	iorwf	??_ComputeStorageData,w,c
  7005  001502  0100               	movlb	0	; () banked
  7006  001504  6FE1               	movwf	(_Currentcomp+2)& (0+255),b
  7007  001506  501F               	movf	??_ComputeStorageData+1,w,c
  7008  001508  0100               	movlb	0	; () banked
  7009  00150A  6FE2               	movwf	(_Currentcomp+3)& (0+255),b
  7010                           
  7011                           ;PDU.c: 166: Currentcomp[2] = ((data[4] << 8) | data[5]);
  7012  00150C  0100               	movlb	0	; () banked
  7013  00150E  51D8               	movf	(_data+5)& (0+255),w,b
  7014  001510  C0D7  F01E         	movff	_data+4,??_ComputeStorageData
  7015  001514  6A1F               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7016  001516  C01E  F01F         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7017  00151A  6A1E               	clrf	??_ComputeStorageData,c
  7018  00151C  101E               	iorwf	??_ComputeStorageData,w,c
  7019  00151E  0100               	movlb	0	; () banked
  7020  001520  6FE3               	movwf	(_Currentcomp+4)& (0+255),b
  7021  001522  501F               	movf	??_ComputeStorageData+1,w,c
  7022  001524  0100               	movlb	0	; () banked
  7023  001526  6FE4               	movwf	(_Currentcomp+5)& (0+255),b
  7024                           
  7025                           ;PDU.c: 167: Currentcomp[3] = ((data[6] << 8) | data[7]);
  7026  001528  0100               	movlb	0	; () banked
  7027  00152A  51DA               	movf	(_data+7)& (0+255),w,b
  7028  00152C  C0D9  F01E         	movff	_data+6,??_ComputeStorageData
  7029  001530  6A1F               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7030  001532  C01E  F01F         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7031  001536  6A1E               	clrf	??_ComputeStorageData,c
  7032  001538  101E               	iorwf	??_ComputeStorageData,w,c
  7033  00153A  0100               	movlb	0	; () banked
  7034  00153C  6FE5               	movwf	(_Currentcomp+6)& (0+255),b
  7035  00153E  501F               	movf	??_ComputeStorageData+1,w,c
  7036  001540  0100               	movlb	0	; () banked
  7037  001542  6FE6               	movwf	(_Currentcomp+7)& (0+255),b
  7038                           
  7039                           ;PDU.c: 168: Currentcomp[4] = ((data[8] << 8) | data[9]);
  7040  001544  0100               	movlb	0	; () banked
  7041  001546  51DC               	movf	(_data+9)& (0+255),w,b
  7042  001548  C0DB  F01E         	movff	_data+8,??_ComputeStorageData
  7043  00154C  6A1F               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7044  00154E  C01E  F01F         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7045  001552  6A1E               	clrf	??_ComputeStorageData,c
  7046  001554  101E               	iorwf	??_ComputeStorageData,w,c
  7047  001556  0100               	movlb	0	; () banked
  7048  001558  6FE7               	movwf	(_Currentcomp+8)& (0+255),b
  7049  00155A  501F               	movf	??_ComputeStorageData+1,w,c
  7050  00155C  0100               	movlb	0	; () banked
  7051  00155E  6FE8               	movwf	(_Currentcomp+9)& (0+255),b
  7052                           
  7053                           ;PDU.c: 169: Currentcomp[5] = ((data[10] << 8) | data[11]);
  7054  001560  0100               	movlb	0	; () banked
  7055  001562  51DE               	movf	(_data+11)& (0+255),w,b
  7056  001564  C0DD  F01E         	movff	_data+10,??_ComputeStorageData
  7057  001568  6A1F               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7058  00156A  C01E  F01F         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7059  00156E  6A1E               	clrf	??_ComputeStorageData,c
  7060  001570  101E               	iorwf	??_ComputeStorageData,w,c
  7061  001572  0100               	movlb	0	; () banked
  7062  001574  6FE9               	movwf	(_Currentcomp+10)& (0+255),b
  7063  001576  501F               	movf	??_ComputeStorageData+1,w,c
  7064  001578  0100               	movlb	0	; () banked
  7065  00157A  6FEA               	movwf	(_Currentcomp+11)& (0+255),b
  7066                           
  7067                           ; BSR set to: 0
  7068  00157C  0012               	return		;funcret
  7069  00157E                     __end_of_ComputeStorageData:
  7070                           	opt stack 0
  7071                           tblptru	equ	0xFF8
  7072                           tblptrh	equ	0xFF7
  7073                           tblptrl	equ	0xFF6
  7074                           tablat	equ	0xFF5
  7075                           prodh	equ	0xFF4
  7076                           prodl	equ	0xFF3
  7077                           intcon	equ	0xFF2
  7078                           intcon2	equ	0xFF1
  7079                           postinc0	equ	0xFEE
  7080                           wreg	equ	0xFE8
  7081                           indf1	equ	0xFE7
  7082                           postdec1	equ	0xFE5
  7083                           fsr1h	equ	0xFE2
  7084                           fsr1l	equ	0xFE1
  7085                           indf2	equ	0xFDF
  7086                           postinc2	equ	0xFDE
  7087                           postdec2	equ	0xFDD
  7088                           plusw2	equ	0xFDB
  7089                           fsr2h	equ	0xFDA
  7090                           fsr2l	equ	0xFD9
  7091                           status	equ	0xFD8
  7092                           
  7093 ;; *************** function _DATAEE_ReadByte *****************
  7094 ;; Defined at:
  7095 ;;		line 143 in file "mcc_generated_files/memory.c"
  7096 ;; Parameters:    Size  Location     Type
  7097 ;;  bAdd            1    wreg     unsigned char 
  7098 ;; Auto vars:     Size  Location     Type
  7099 ;;  bAdd            1   28[COMRAM] unsigned char 
  7100 ;; Return value:  Size  Location     Type
  7101 ;;                  1    wreg      unsigned char 
  7102 ;; Registers used:
  7103 ;;		wreg, status,2
  7104 ;; Tracked objects:
  7105 ;;		On entry : 0/0
  7106 ;;		On exit  : 0/0
  7107 ;;		Unchanged: 0/0
  7108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7109 ;;      Params:         0       0       0       0       0       0       0
  7110 ;;      Locals:         1       0       0       0       0       0       0
  7111 ;;      Temps:          0       0       0       0       0       0       0
  7112 ;;      Totals:         1       0       0       0       0       0       0
  7113 ;;Total ram usage:        1 bytes
  7114 ;; Hardware stack levels used:    1
  7115 ;; Hardware stack levels required when called:    6
  7116 ;; This function calls:
  7117 ;;		Nothing
  7118 ;; This function is called by:
  7119 ;;		_ComputeStorageData
  7120 ;; This function uses a non-reentrant model
  7121 ;;
  7122                           
  7123                           	psect	text43
  7124  00220A                     __ptext43:
  7125                           	opt stack 0
  7126  00220A                     _DATAEE_ReadByte:
  7127                           	opt stack 22
  7128                           
  7129                           ; BSR set to: 0
  7130                           ;incstack = 0
  7131                           ;DATAEE_ReadByte@bAdd stored from wreg
  7132  00220A  6E1D               	movwf	DATAEE_ReadByte@bAdd,c
  7133                           
  7134                           ;memory.c: 145: EEADR = (bAdd & 0xFF);
  7135  00220C  C01D  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
  7136                           
  7137                           ;memory.c: 146: EECON1bits.CFGS = 0;
  7138  002210  9CA6               	bcf	4006,6,c	;volatile
  7139                           
  7140                           ;memory.c: 147: EECON1bits.EEPGD = 0;
  7141  002212  9EA6               	bcf	4006,7,c	;volatile
  7142                           
  7143                           ;memory.c: 148: EECON1bits.RD = 1;
  7144  002214  80A6               	bsf	4006,0,c	;volatile
  7145                           
  7146                           ;memory.c: 149: __nop();
  7147  002216  F000               	nop	
  7148                           
  7149                           ;memory.c: 150: __nop();
  7150  002218  F000               	nop	
  7151                           
  7152                           ;memory.c: 152: return (EEDATA);
  7153  00221A  50A8               	movf	4008,w,c	;volatile
  7154  00221C  0012               	return	
  7155  00221E                     __end_of_DATAEE_ReadByte:
  7156                           	opt stack 0
  7157                           tblptru	equ	0xFF8
  7158                           tblptrh	equ	0xFF7
  7159                           tblptrl	equ	0xFF6
  7160                           tablat	equ	0xFF5
  7161                           prodh	equ	0xFF4
  7162                           prodl	equ	0xFF3
  7163                           intcon	equ	0xFF2
  7164                           intcon2	equ	0xFF1
  7165                           postinc0	equ	0xFEE
  7166                           wreg	equ	0xFE8
  7167                           indf1	equ	0xFE7
  7168                           postdec1	equ	0xFE5
  7169                           fsr1h	equ	0xFE2
  7170                           fsr1l	equ	0xFE1
  7171                           indf2	equ	0xFDF
  7172                           postinc2	equ	0xFDE
  7173                           postdec2	equ	0xFDD
  7174                           plusw2	equ	0xFDB
  7175                           fsr2h	equ	0xFDA
  7176                           fsr2l	equ	0xFD9
  7177                           status	equ	0xFD8
  7178                           
  7179 ;; *************** function _CoolingStop *****************
  7180 ;; Defined at:
  7181 ;;		line 30 in file "CoolingControl.c"
  7182 ;; Parameters:    Size  Location     Type
  7183 ;;		None
  7184 ;; Auto vars:     Size  Location     Type
  7185 ;;		None
  7186 ;; Return value:  Size  Location     Type
  7187 ;;                  1    wreg      void 
  7188 ;; Registers used:
  7189 ;;		wreg, status,2, status,0, cstack
  7190 ;; Tracked objects:
  7191 ;;		On entry : 0/0
  7192 ;;		On exit  : 0/0
  7193 ;;		Unchanged: 0/0
  7194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7195 ;;      Params:         0       0       0       0       0       0       0
  7196 ;;      Locals:         0       0       0       0       0       0       0
  7197 ;;      Temps:          0       0       0       0       0       0       0
  7198 ;;      Totals:         0       0       0       0       0       0       0
  7199 ;;Total ram usage:        0 bytes
  7200 ;; Hardware stack levels used:    1
  7201 ;; Hardware stack levels required when called:    8
  7202 ;; This function calls:
  7203 ;;		_PWM4_LoadDutyValue
  7204 ;;		_PotClear
  7205 ;; This function is called by:
  7206 ;;		_main
  7207 ;; This function uses a non-reentrant model
  7208 ;;
  7209                           
  7210                           	psect	text44
  7211  00221E                     __ptext44:
  7212                           	opt stack 0
  7213  00221E                     _CoolingStop:
  7214                           	opt stack 22
  7215                           
  7216                           ;CoolingControl.c: 31: PotClear();
  7217                           
  7218                           ;incstack = 0
  7219  00221E  ECBF  F00A         	call	_PotClear	;wreg free
  7220                           
  7221                           ;CoolingControl.c: 32: PWM4_LoadDutyValue(0);
  7222  002222  0E00               	movlw	0
  7223  002224  6E1E               	movwf	PWM4_LoadDutyValue@dutyValue+1,c
  7224  002226  0E00               	movlw	0
  7225  002228  6E1D               	movwf	PWM4_LoadDutyValue@dutyValue,c
  7226  00222A  ECC4  F00F         	call	_PWM4_LoadDutyValue	;wreg free
  7227  00222E  0012               	return		;funcret
  7228  002230                     __end_of_CoolingStop:
  7229                           	opt stack 0
  7230                           tblptru	equ	0xFF8
  7231                           tblptrh	equ	0xFF7
  7232                           tblptrl	equ	0xFF6
  7233                           tablat	equ	0xFF5
  7234                           prodh	equ	0xFF4
  7235                           prodl	equ	0xFF3
  7236                           intcon	equ	0xFF2
  7237                           intcon2	equ	0xFF1
  7238                           postinc0	equ	0xFEE
  7239                           wreg	equ	0xFE8
  7240                           indf1	equ	0xFE7
  7241                           postdec1	equ	0xFE5
  7242                           fsr1h	equ	0xFE2
  7243                           fsr1l	equ	0xFE1
  7244                           indf2	equ	0xFDF
  7245                           postinc2	equ	0xFDE
  7246                           postdec2	equ	0xFDD
  7247                           plusw2	equ	0xFDB
  7248                           fsr2h	equ	0xFDA
  7249                           fsr2l	equ	0xFD9
  7250                           status	equ	0xFD8
  7251                           
  7252 ;; *************** function _CoolingStart *****************
  7253 ;; Defined at:
  7254 ;;		line 19 in file "CoolingControl.c"
  7255 ;; Parameters:    Size  Location     Type
  7256 ;;		None
  7257 ;; Auto vars:     Size  Location     Type
  7258 ;;		None
  7259 ;; Return value:  Size  Location     Type
  7260 ;;                  1    wreg      void 
  7261 ;; Registers used:
  7262 ;;		wreg, status,2, status,0, cstack
  7263 ;; Tracked objects:
  7264 ;;		On entry : 0/0
  7265 ;;		On exit  : 0/0
  7266 ;;		Unchanged: 0/0
  7267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7268 ;;      Params:         0       0       0       0       0       0       0
  7269 ;;      Locals:         0       0       0       0       0       0       0
  7270 ;;      Temps:          0       0       0       0       0       0       0
  7271 ;;      Totals:         0       0       0       0       0       0       0
  7272 ;;Total ram usage:        0 bytes
  7273 ;; Hardware stack levels used:    1
  7274 ;; Hardware stack levels required when called:    8
  7275 ;; This function calls:
  7276 ;;		_PWM4_LoadDutyValue
  7277 ;;		_PotClear
  7278 ;;		_PotSetpoint
  7279 ;; This function is called by:
  7280 ;;		_main
  7281 ;; This function uses a non-reentrant model
  7282 ;;
  7283                           
  7284                           	psect	text45
  7285  002120                     __ptext45:
  7286                           	opt stack 0
  7287  002120                     _CoolingStart:
  7288                           	opt stack 22
  7289                           
  7290                           ;CoolingControl.c: 21: PotClear();
  7291                           
  7292                           ;incstack = 0
  7293  002120  ECBF  F00A         	call	_PotClear	;wreg free
  7294                           
  7295                           ;CoolingControl.c: 22: PotSetpoint(40);
  7296  002124  0E00               	movlw	0
  7297  002126  6E27               	movwf	PotSetpoint@new_point+1,c
  7298  002128  0E28               	movlw	40
  7299  00212A  6E26               	movwf	PotSetpoint@new_point,c
  7300  00212C  EC61  F009         	call	_PotSetpoint	;wreg free
  7301                           
  7302                           ;CoolingControl.c: 23: PWM4_LoadDutyValue(1000);
  7303  002130  0E03               	movlw	3
  7304  002132  6E1E               	movwf	PWM4_LoadDutyValue@dutyValue+1,c
  7305  002134  0EE8               	movlw	232
  7306  002136  6E1D               	movwf	PWM4_LoadDutyValue@dutyValue,c
  7307  002138  ECC4  F00F         	call	_PWM4_LoadDutyValue	;wreg free
  7308  00213C  0012               	return		;funcret
  7309  00213E                     __end_of_CoolingStart:
  7310                           	opt stack 0
  7311                           tblptru	equ	0xFF8
  7312                           tblptrh	equ	0xFF7
  7313                           tblptrl	equ	0xFF6
  7314                           tablat	equ	0xFF5
  7315                           prodh	equ	0xFF4
  7316                           prodl	equ	0xFF3
  7317                           intcon	equ	0xFF2
  7318                           intcon2	equ	0xFF1
  7319                           postinc0	equ	0xFEE
  7320                           wreg	equ	0xFE8
  7321                           indf1	equ	0xFE7
  7322                           postdec1	equ	0xFE5
  7323                           fsr1h	equ	0xFE2
  7324                           fsr1l	equ	0xFE1
  7325                           indf2	equ	0xFDF
  7326                           postinc2	equ	0xFDE
  7327                           postdec2	equ	0xFDD
  7328                           plusw2	equ	0xFDB
  7329                           fsr2h	equ	0xFDA
  7330                           fsr2l	equ	0xFD9
  7331                           status	equ	0xFD8
  7332                           
  7333 ;; *************** function _PotSetpoint *****************
  7334 ;; Defined at:
  7335 ;;		line 21 in file "DigiPot.c"
  7336 ;; Parameters:    Size  Location     Type
  7337 ;;  new_point       2   37[COMRAM] int 
  7338 ;; Auto vars:     Size  Location     Type
  7339 ;;  new_pos         2    4[BANK0 ] int 
  7340 ;;  x               2    2[BANK0 ] int 
  7341 ;;  set_point       2    0[BANK0 ] int 
  7342 ;; Return value:  Size  Location     Type
  7343 ;;                  1    wreg      void 
  7344 ;; Registers used:
  7345 ;;		wreg, status,2, status,0, cstack
  7346 ;; Tracked objects:
  7347 ;;		On entry : 0/0
  7348 ;;		On exit  : 0/0
  7349 ;;		Unchanged: 0/0
  7350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7351 ;;      Params:         2       0       0       0       0       0       0
  7352 ;;      Locals:         0       6       0       0       0       0       0
  7353 ;;      Temps:          2       0       0       0       0       0       0
  7354 ;;      Totals:         4       6       0       0       0       0       0
  7355 ;;Total ram usage:       10 bytes
  7356 ;; Hardware stack levels used:    1
  7357 ;; Hardware stack levels required when called:    7
  7358 ;; This function calls:
  7359 ;;		_Delay
  7360 ;; This function is called by:
  7361 ;;		_main
  7362 ;;		_CoolingStart
  7363 ;; This function uses a non-reentrant model
  7364 ;;
  7365                           
  7366                           	psect	text46
  7367  0012C2                     __ptext46:
  7368                           	opt stack 0
  7369  0012C2                     _PotSetpoint:
  7370                           	opt stack 23
  7371                           
  7372                           ;DigiPot.c: 22: int set_point;
  7373                           ;DigiPot.c: 31: int new_pos = new_point;
  7374                           
  7375                           ;incstack = 0
  7376  0012C2  C026  F064         	movff	PotSetpoint@new_point,PotSetpoint@new_pos
  7377  0012C6  C027  F065         	movff	PotSetpoint@new_point+1,PotSetpoint@new_pos+1
  7378                           
  7379                           ;DigiPot.c: 35: LATB5 = 0;
  7380  0012CA  9A8A               	bcf	3978,5,c	;volatile
  7381                           
  7382                           ;DigiPot.c: 38: if (new_pos > prev_pos) {
  7383  0012CC  0100               	movlb	0	; () banked
  7384  0012CE  5164               	movf	PotSetpoint@new_pos& (0+255),w,b
  7385  0012D0  5C36               	subwf	_prev_pos,w,c
  7386  0012D2  5037               	movf	_prev_pos+1,w,c
  7387  0012D4  0A80               	xorlw	128
  7388  0012D6  6E28               	movwf	??_PotSetpoint& (0+255),c
  7389  0012D8  0100               	movlb	0	; () banked
  7390  0012DA  5165               	movf	(PotSetpoint@new_pos+1)& (0+255),w,b
  7391  0012DC  0A80               	xorlw	128
  7392  0012DE  5828               	subwfb	??_PotSetpoint& (0+255),w,c
  7393  0012E0  B0D8               	btfsc	status,0,c
  7394  0012E2  D013               	goto	l721
  7395                           
  7396                           ; BSR set to: 0
  7397                           ;DigiPot.c: 40: LATB3 = 1;
  7398  0012E4  868A               	bsf	3978,3,c	;volatile
  7399                           
  7400                           ; BSR set to: 0
  7401                           ;DigiPot.c: 41: set_point = new_pos - prev_pos;
  7402  0012E6  C036  F028         	movff	_prev_pos,??_PotSetpoint
  7403  0012EA  C037  F029         	movff	_prev_pos+1,??_PotSetpoint+1
  7404  0012EE  1E28               	comf	??_PotSetpoint,f,c
  7405  0012F0  1E29               	comf	??_PotSetpoint+1,f,c
  7406  0012F2  4A28               	infsnz	??_PotSetpoint,f,c
  7407  0012F4  2A29               	incf	??_PotSetpoint+1,f,c
  7408  0012F6  0100               	movlb	0	; () banked
  7409  0012F8  5164               	movf	PotSetpoint@new_pos& (0+255),w,b
  7410  0012FA  2428               	addwf	??_PotSetpoint,w,c
  7411  0012FC  0100               	movlb	0	; () banked
  7412  0012FE  6F60               	movwf	PotSetpoint@set_point& (0+255),b
  7413  001300  0100               	movlb	0	; () banked
  7414  001302  5165               	movf	(PotSetpoint@new_pos+1)& (0+255),w,b
  7415  001304  2029               	addwfc	??_PotSetpoint+1,w,c
  7416  001306  0100               	movlb	0	; () banked
  7417  001308  6F61               	movwf	(PotSetpoint@set_point+1)& (0+255),b
  7418  00130A                     l721:
  7419                           
  7420                           ; BSR set to: 0
  7421                           ;DigiPot.c: 42: }
  7422                           ;DigiPot.c: 43: if (new_pos < prev_pos) {
  7423  00130A  5036               	movf	_prev_pos,w,c
  7424  00130C  0100               	movlb	0	; () banked
  7425  00130E  5D64               	subwf	PotSetpoint@new_pos& (0+255),w,b
  7426  001310  0100               	movlb	0	; () banked
  7427  001312  5165               	movf	(PotSetpoint@new_pos+1)& (0+255),w,b
  7428  001314  0A80               	xorlw	128
  7429  001316  6E28               	movwf	??_PotSetpoint& (0+255),c
  7430  001318  5037               	movf	_prev_pos+1,w,c
  7431  00131A  0A80               	xorlw	128
  7432  00131C  5828               	subwfb	??_PotSetpoint& (0+255),w,c
  7433  00131E  B0D8               	btfsc	status,0,c
  7434  001320  D011               	goto	l4384
  7435                           
  7436                           ; BSR set to: 0
  7437                           ;DigiPot.c: 45: LATB3 = 0;
  7438  001322  968A               	bcf	3978,3,c	;volatile
  7439                           
  7440                           ; BSR set to: 0
  7441                           ;DigiPot.c: 46: set_point = prev_pos - new_pos;
  7442  001324  C064  F028         	movff	PotSetpoint@new_pos,??_PotSetpoint
  7443  001328  C065  F029         	movff	PotSetpoint@new_pos+1,??_PotSetpoint+1
  7444  00132C  1E28               	comf	??_PotSetpoint,f,c
  7445  00132E  1E29               	comf	??_PotSetpoint+1,f,c
  7446  001330  4A28               	infsnz	??_PotSetpoint,f,c
  7447  001332  2A29               	incf	??_PotSetpoint+1,f,c
  7448  001334  5036               	movf	_prev_pos,w,c
  7449  001336  2428               	addwf	??_PotSetpoint,w,c
  7450  001338  0100               	movlb	0	; () banked
  7451  00133A  6F60               	movwf	PotSetpoint@set_point& (0+255),b
  7452  00133C  5037               	movf	_prev_pos+1,w,c
  7453  00133E  2029               	addwfc	??_PotSetpoint+1,w,c
  7454  001340  0100               	movlb	0	; () banked
  7455  001342  6F61               	movwf	(PotSetpoint@set_point+1)& (0+255),b
  7456  001344                     l4384:
  7457                           
  7458                           ; BSR set to: 0
  7459                           ;DigiPot.c: 47: }
  7460                           ;DigiPot.c: 48: Delay(1);
  7461  001344  0E01               	movlw	1
  7462  001346  6E1D               	movwf	Delay@wait,c
  7463  001348  0E00               	movlw	0
  7464  00134A  6E1E               	movwf	Delay@wait+1,c
  7465  00134C  0E00               	movlw	0
  7466  00134E  6E1F               	movwf	Delay@wait+2,c
  7467  001350  0E00               	movlw	0
  7468  001352  6E20               	movwf	Delay@wait+3,c
  7469  001354  ECEC  F00E         	call	_Delay	;wreg free
  7470                           
  7471                           ;DigiPot.c: 50: int x;
  7472                           ;DigiPot.c: 52: for (x = 0; x < set_point; x++) {
  7473  001358  0E00               	movlw	0
  7474  00135A  0100               	movlb	0	; () banked
  7475  00135C  6F63               	movwf	(PotSetpoint@x+1)& (0+255),b
  7476  00135E  0E00               	movlw	0
  7477  001360  6F62               	movwf	PotSetpoint@x& (0+255),b
  7478  001362  D019               	goto	l4394
  7479  001364                     l724:
  7480                           
  7481                           ; BSR set to: 0
  7482                           ;DigiPot.c: 53: LATB4 = 1;
  7483  001364  888A               	bsf	3978,4,c	;volatile
  7484                           
  7485                           ; BSR set to: 0
  7486                           ;DigiPot.c: 54: Delay(1);
  7487  001366  0E01               	movlw	1
  7488  001368  6E1D               	movwf	Delay@wait,c
  7489  00136A  0E00               	movlw	0
  7490  00136C  6E1E               	movwf	Delay@wait+1,c
  7491  00136E  0E00               	movlw	0
  7492  001370  6E1F               	movwf	Delay@wait+2,c
  7493  001372  0E00               	movlw	0
  7494  001374  6E20               	movwf	Delay@wait+3,c
  7495  001376  ECEC  F00E         	call	_Delay	;wreg free
  7496                           
  7497                           ;DigiPot.c: 55: LATB4 = 0;
  7498  00137A  988A               	bcf	3978,4,c	;volatile
  7499                           
  7500                           ;DigiPot.c: 56: Delay(1);
  7501  00137C  0E01               	movlw	1
  7502  00137E  6E1D               	movwf	Delay@wait,c
  7503  001380  0E00               	movlw	0
  7504  001382  6E1E               	movwf	Delay@wait+1,c
  7505  001384  0E00               	movlw	0
  7506  001386  6E1F               	movwf	Delay@wait+2,c
  7507  001388  0E00               	movlw	0
  7508  00138A  6E20               	movwf	Delay@wait+3,c
  7509  00138C  ECEC  F00E         	call	_Delay	;wreg free
  7510  001390  0100               	movlb	0	; () banked
  7511  001392  4B62               	infsnz	PotSetpoint@x& (0+255),f,b
  7512  001394  2B63               	incf	(PotSetpoint@x+1)& (0+255),f,b
  7513  001396                     l4394:
  7514                           
  7515                           ; BSR set to: 0
  7516  001396  0100               	movlb	0	; () banked
  7517  001398  5160               	movf	PotSetpoint@set_point& (0+255),w,b
  7518  00139A  0100               	movlb	0	; () banked
  7519  00139C  5D62               	subwf	PotSetpoint@x& (0+255),w,b
  7520  00139E  0100               	movlb	0	; () banked
  7521  0013A0  5163               	movf	(PotSetpoint@x+1)& (0+255),w,b
  7522  0013A2  0A80               	xorlw	128
  7523  0013A4  6E28               	movwf	??_PotSetpoint& (0+255),c
  7524  0013A6  0100               	movlb	0	; () banked
  7525  0013A8  5161               	movf	(PotSetpoint@set_point+1)& (0+255),w,b
  7526  0013AA  0A80               	xorlw	128
  7527  0013AC  5828               	subwfb	??_PotSetpoint& (0+255),w,c
  7528  0013AE  A0D8               	btfss	status,0,c
  7529  0013B0  D7D9               	goto	l724
  7530                           
  7531                           ; BSR set to: 0
  7532                           ;DigiPot.c: 57: }
  7533                           ;DigiPot.c: 59: LATB5 = 1;
  7534  0013B2  8A8A               	bsf	3978,5,c	;volatile
  7535                           
  7536                           ;DigiPot.c: 60: prev_pos = new_pos;
  7537  0013B4  C064  F036         	movff	PotSetpoint@new_pos,_prev_pos
  7538  0013B8  C065  F037         	movff	PotSetpoint@new_pos+1,_prev_pos+1
  7539                           
  7540                           ; BSR set to: 0
  7541  0013BC  0012               	return		;funcret
  7542  0013BE                     __end_of_PotSetpoint:
  7543                           	opt stack 0
  7544                           tblptru	equ	0xFF8
  7545                           tblptrh	equ	0xFF7
  7546                           tblptrl	equ	0xFF6
  7547                           tablat	equ	0xFF5
  7548                           prodh	equ	0xFF4
  7549                           prodl	equ	0xFF3
  7550                           intcon	equ	0xFF2
  7551                           intcon2	equ	0xFF1
  7552                           postinc0	equ	0xFEE
  7553                           wreg	equ	0xFE8
  7554                           indf1	equ	0xFE7
  7555                           postdec1	equ	0xFE5
  7556                           fsr1h	equ	0xFE2
  7557                           fsr1l	equ	0xFE1
  7558                           indf2	equ	0xFDF
  7559                           postinc2	equ	0xFDE
  7560                           postdec2	equ	0xFDD
  7561                           plusw2	equ	0xFDB
  7562                           fsr2h	equ	0xFDA
  7563                           fsr2l	equ	0xFD9
  7564                           status	equ	0xFD8
  7565                           
  7566 ;; *************** function _PotClear *****************
  7567 ;; Defined at:
  7568 ;;		line 66 in file "DigiPot.c"
  7569 ;; Parameters:    Size  Location     Type
  7570 ;;		None
  7571 ;; Auto vars:     Size  Location     Type
  7572 ;;  x               2   37[COMRAM] int 
  7573 ;; Return value:  Size  Location     Type
  7574 ;;                  1    wreg      void 
  7575 ;; Registers used:
  7576 ;;		wreg, status,2, status,0, cstack
  7577 ;; Tracked objects:
  7578 ;;		On entry : 0/0
  7579 ;;		On exit  : 0/0
  7580 ;;		Unchanged: 0/0
  7581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7582 ;;      Params:         0       0       0       0       0       0       0
  7583 ;;      Locals:         2       0       0       0       0       0       0
  7584 ;;      Temps:          0       0       0       0       0       0       0
  7585 ;;      Totals:         2       0       0       0       0       0       0
  7586 ;;Total ram usage:        2 bytes
  7587 ;; Hardware stack levels used:    1
  7588 ;; Hardware stack levels required when called:    7
  7589 ;; This function calls:
  7590 ;;		_Delay
  7591 ;; This function is called by:
  7592 ;;		_CoolingStart
  7593 ;;		_CoolingStop
  7594 ;; This function uses a non-reentrant model
  7595 ;;
  7596                           
  7597                           	psect	text47
  7598  00157E                     __ptext47:
  7599                           	opt stack 0
  7600  00157E                     _PotClear:
  7601                           	opt stack 22
  7602                           
  7603                           ;DigiPot.c: 67: Delay(1);
  7604                           
  7605                           ; BSR set to: 0
  7606                           ;incstack = 0
  7607  00157E  0E01               	movlw	1
  7608  001580  6E1D               	movwf	Delay@wait,c
  7609  001582  0E00               	movlw	0
  7610  001584  6E1E               	movwf	Delay@wait+1,c
  7611  001586  0E00               	movlw	0
  7612  001588  6E1F               	movwf	Delay@wait+2,c
  7613  00158A  0E00               	movlw	0
  7614  00158C  6E20               	movwf	Delay@wait+3,c
  7615  00158E  ECEC  F00E         	call	_Delay	;wreg free
  7616                           
  7617                           ;DigiPot.c: 69: LATB5 = 0;
  7618  001592  9A8A               	bcf	3978,5,c	;volatile
  7619                           
  7620                           ;DigiPot.c: 70: Delay(1);
  7621  001594  0E01               	movlw	1
  7622  001596  6E1D               	movwf	Delay@wait,c
  7623  001598  0E00               	movlw	0
  7624  00159A  6E1E               	movwf	Delay@wait+1,c
  7625  00159C  0E00               	movlw	0
  7626  00159E  6E1F               	movwf	Delay@wait+2,c
  7627  0015A0  0E00               	movlw	0
  7628  0015A2  6E20               	movwf	Delay@wait+3,c
  7629  0015A4  ECEC  F00E         	call	_Delay	;wreg free
  7630                           
  7631                           ;DigiPot.c: 71: LATB3 = 0;
  7632  0015A8  968A               	bcf	3978,3,c	;volatile
  7633                           
  7634                           ;DigiPot.c: 72: Delay(1);
  7635  0015AA  0E01               	movlw	1
  7636  0015AC  6E1D               	movwf	Delay@wait,c
  7637  0015AE  0E00               	movlw	0
  7638  0015B0  6E1E               	movwf	Delay@wait+1,c
  7639  0015B2  0E00               	movlw	0
  7640  0015B4  6E1F               	movwf	Delay@wait+2,c
  7641  0015B6  0E00               	movlw	0
  7642  0015B8  6E20               	movwf	Delay@wait+3,c
  7643  0015BA  ECEC  F00E         	call	_Delay	;wreg free
  7644                           
  7645                           ;DigiPot.c: 73: int x;
  7646                           ;DigiPot.c: 74: for (x = 0; x < 32; x++) {
  7647  0015BE  0E00               	movlw	0
  7648  0015C0  6E27               	movwf	PotClear@x+1,c
  7649  0015C2  0E00               	movlw	0
  7650  0015C4  6E26               	movwf	PotClear@x,c
  7651  0015C6  BE27               	btfsc	PotClear@x+1,7,c
  7652  0015C8  D006               	goto	l729
  7653  0015CA  5027               	movf	PotClear@x+1,w,c
  7654  0015CC  E121               	bnz	l730
  7655  0015CE  0E20               	movlw	32
  7656  0015D0  5C26               	subwf	PotClear@x,w,c
  7657  0015D2  B0D8               	btfsc	status,0,c
  7658  0015D4  D01D               	goto	l730
  7659  0015D6                     l729:
  7660                           
  7661                           ;DigiPot.c: 75: LATB4 = 1;
  7662  0015D6  888A               	bsf	3978,4,c	;volatile
  7663                           
  7664                           ;DigiPot.c: 76: Delay(1);
  7665  0015D8  0E01               	movlw	1
  7666  0015DA  6E1D               	movwf	Delay@wait,c
  7667  0015DC  0E00               	movlw	0
  7668  0015DE  6E1E               	movwf	Delay@wait+1,c
  7669  0015E0  0E00               	movlw	0
  7670  0015E2  6E1F               	movwf	Delay@wait+2,c
  7671  0015E4  0E00               	movlw	0
  7672  0015E6  6E20               	movwf	Delay@wait+3,c
  7673  0015E8  ECEC  F00E         	call	_Delay	;wreg free
  7674                           
  7675                           ;DigiPot.c: 77: LATB4 = 0;
  7676  0015EC  988A               	bcf	3978,4,c	;volatile
  7677                           
  7678                           ;DigiPot.c: 78: Delay(1);
  7679  0015EE  0E01               	movlw	1
  7680  0015F0  6E1D               	movwf	Delay@wait,c
  7681  0015F2  0E00               	movlw	0
  7682  0015F4  6E1E               	movwf	Delay@wait+1,c
  7683  0015F6  0E00               	movlw	0
  7684  0015F8  6E1F               	movwf	Delay@wait+2,c
  7685  0015FA  0E00               	movlw	0
  7686  0015FC  6E20               	movwf	Delay@wait+3,c
  7687  0015FE  ECEC  F00E         	call	_Delay	;wreg free
  7688  001602  4A26               	infsnz	PotClear@x,f,c
  7689  001604  2A27               	incf	PotClear@x+1,f,c
  7690  001606  BE27               	btfsc	PotClear@x+1,7,c
  7691  001608  D7E6               	goto	l729
  7692  00160A  5027               	movf	PotClear@x+1,w,c
  7693  00160C  E101               	bnz	u3010
  7694  00160E  D7DF               	goto	L1
  7695  001610                     u3010:
  7696  001610                     l730:
  7697                           
  7698                           ;DigiPot.c: 79: }
  7699                           ;DigiPot.c: 80: LATB4 = 1;
  7700  001610  888A               	bsf	3978,4,c	;volatile
  7701                           
  7702                           ;DigiPot.c: 81: Delay(1);
  7703  001612  0E01               	movlw	1
  7704  001614  6E1D               	movwf	Delay@wait,c
  7705  001616  0E00               	movlw	0
  7706  001618  6E1E               	movwf	Delay@wait+1,c
  7707  00161A  0E00               	movlw	0
  7708  00161C  6E1F               	movwf	Delay@wait+2,c
  7709  00161E  0E00               	movlw	0
  7710  001620  6E20               	movwf	Delay@wait+3,c
  7711  001622  ECEC  F00E         	call	_Delay	;wreg free
  7712                           
  7713                           ;DigiPot.c: 83: LATB5 = 1;
  7714  001626  8A8A               	bsf	3978,5,c	;volatile
  7715                           
  7716                           ;DigiPot.c: 84: prev_pos = 0;
  7717  001628  0E00               	movlw	0
  7718  00162A  6E37               	movwf	_prev_pos+1,c
  7719  00162C  0E00               	movlw	0
  7720  00162E  6E36               	movwf	_prev_pos,c
  7721                           
  7722                           ;DigiPot.c: 85: Delay(1);
  7723  001630  0E01               	movlw	1
  7724  001632  6E1D               	movwf	Delay@wait,c
  7725  001634  0E00               	movlw	0
  7726  001636  6E1E               	movwf	Delay@wait+1,c
  7727  001638  0E00               	movlw	0
  7728  00163A  6E1F               	movwf	Delay@wait+2,c
  7729  00163C  0E00               	movlw	0
  7730  00163E  6E20               	movwf	Delay@wait+3,c
  7731  001640  ECEC  F00E         	call	_Delay	;wreg free
  7732  001644  0012               	return		;funcret
  7733  001646                     __end_of_PotClear:
  7734                           	opt stack 0
  7735                           tblptru	equ	0xFF8
  7736                           tblptrh	equ	0xFF7
  7737                           tblptrl	equ	0xFF6
  7738                           tablat	equ	0xFF5
  7739                           prodh	equ	0xFF4
  7740                           prodl	equ	0xFF3
  7741                           intcon	equ	0xFF2
  7742                           intcon2	equ	0xFF1
  7743                           postinc0	equ	0xFEE
  7744                           wreg	equ	0xFE8
  7745                           indf1	equ	0xFE7
  7746                           postdec1	equ	0xFE5
  7747                           fsr1h	equ	0xFE2
  7748                           fsr1l	equ	0xFE1
  7749                           indf2	equ	0xFDF
  7750                           postinc2	equ	0xFDE
  7751                           postdec2	equ	0xFDD
  7752                           plusw2	equ	0xFDB
  7753                           fsr2h	equ	0xFDA
  7754                           fsr2l	equ	0xFD9
  7755                           status	equ	0xFD8
  7756                           
  7757 ;; *************** function _Delay *****************
  7758 ;; Defined at:
  7759 ;;		line 9 in file "Functions.c"
  7760 ;; Parameters:    Size  Location     Type
  7761 ;;  wait            4   28[COMRAM] long 
  7762 ;; Auto vars:     Size  Location     Type
  7763 ;;  i               4   33[COMRAM] long 
  7764 ;; Return value:  Size  Location     Type
  7765 ;;                  1    wreg      void 
  7766 ;; Registers used:
  7767 ;;		wreg, status,2, status,0
  7768 ;; Tracked objects:
  7769 ;;		On entry : 0/0
  7770 ;;		On exit  : 0/0
  7771 ;;		Unchanged: 0/0
  7772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7773 ;;      Params:         4       0       0       0       0       0       0
  7774 ;;      Locals:         4       0       0       0       0       0       0
  7775 ;;      Temps:          1       0       0       0       0       0       0
  7776 ;;      Totals:         9       0       0       0       0       0       0
  7777 ;;Total ram usage:        9 bytes
  7778 ;; Hardware stack levels used:    1
  7779 ;; Hardware stack levels required when called:    6
  7780 ;; This function calls:
  7781 ;;		Nothing
  7782 ;; This function is called by:
  7783 ;;		_StartUp595
  7784 ;;		_writeRegisters
  7785 ;;		_PotSetpoint
  7786 ;;		_PotClear
  7787 ;;		_ComController
  7788 ;; This function uses a non-reentrant model
  7789 ;;
  7790                           
  7791                           	psect	text48
  7792  001DD8                     __ptext48:
  7793                           	opt stack 0
  7794  001DD8                     _Delay:
  7795                           	opt stack 21
  7796                           
  7797                           ;Functions.c: 10: long int i = 0;
  7798                           
  7799                           ;incstack = 0
  7800  001DD8  0E00               	movlw	0
  7801  001DDA  6E22               	movwf	Delay@i,c
  7802  001DDC  0E00               	movlw	0
  7803  001DDE  6E23               	movwf	Delay@i+1,c
  7804  001DE0  0E00               	movlw	0
  7805  001DE2  6E24               	movwf	Delay@i+2,c
  7806  001DE4  0E00               	movlw	0
  7807  001DE6  6E25               	movwf	Delay@i+3,c
  7808                           
  7809                           ;Functions.c: 11: for (; wait > i; i++) {
  7810  001DE8  D00D               	goto	l3746
  7811  001DEA                     l3742:
  7812                           
  7813                           ;Functions.c: 12: _delay((unsigned long)((1)*(8000000/4000.0)));
  7814  001DEA  0E03               	movlw	3
  7815  001DEC  6E21               	movwf	??_Delay& (0+255),c
  7816  001DEE  0E98               	movlw	152
  7817  001DF0                     u3087:
  7818  001DF0  2EE8               	decfsz	wreg,f,c
  7819  001DF2  D7FE               	bra	u3087
  7820  001DF4  2E21               	decfsz	??_Delay& (0+255),f,c
  7821  001DF6  D7FC               	bra	u3087
  7822  001DF8  0E01               	movlw	1
  7823  001DFA  2622               	addwf	Delay@i,f,c
  7824  001DFC  0E00               	movlw	0
  7825  001DFE  2223               	addwfc	Delay@i+1,f,c
  7826  001E00  2224               	addwfc	Delay@i+2,f,c
  7827  001E02  2225               	addwfc	Delay@i+3,f,c
  7828  001E04                     l3746:
  7829  001E04  501D               	movf	Delay@wait,w,c
  7830  001E06  5C22               	subwf	Delay@i,w,c
  7831  001E08  501E               	movf	Delay@wait+1,w,c
  7832  001E0A  5823               	subwfb	Delay@i+1,w,c
  7833  001E0C  501F               	movf	Delay@wait+2,w,c
  7834  001E0E  5824               	subwfb	Delay@i+2,w,c
  7835  001E10  5025               	movf	Delay@i+3,w,c
  7836  001E12  0A80               	xorlw	128
  7837  001E14  6E21               	movwf	??_Delay& (0+255),c
  7838  001E16  5020               	movf	Delay@wait+3,w,c
  7839  001E18  0A80               	xorlw	128
  7840  001E1A  5821               	subwfb	??_Delay& (0+255),w,c
  7841  001E1C  B0D8               	btfsc	status,0,c
  7842  001E1E  0012               	return	
  7843  001E20  D7E4               	goto	l3742
  7844  001E22                     __end_of_Delay:
  7845                           	opt stack 0
  7846                           tblptru	equ	0xFF8
  7847                           tblptrh	equ	0xFF7
  7848                           tblptrl	equ	0xFF6
  7849                           tablat	equ	0xFF5
  7850                           prodh	equ	0xFF4
  7851                           prodl	equ	0xFF3
  7852                           intcon	equ	0xFF2
  7853                           intcon2	equ	0xFF1
  7854                           postinc0	equ	0xFEE
  7855                           wreg	equ	0xFE8
  7856                           indf1	equ	0xFE7
  7857                           postdec1	equ	0xFE5
  7858                           fsr1h	equ	0xFE2
  7859                           fsr1l	equ	0xFE1
  7860                           indf2	equ	0xFDF
  7861                           postinc2	equ	0xFDE
  7862                           postdec2	equ	0xFDD
  7863                           plusw2	equ	0xFDB
  7864                           fsr2h	equ	0xFDA
  7865                           fsr2l	equ	0xFD9
  7866                           status	equ	0xFD8
  7867                           
  7868 ;; *************** function _PWM4_LoadDutyValue *****************
  7869 ;; Defined at:
  7870 ;;		line 81 in file "mcc_generated_files/pwm4.c"
  7871 ;; Parameters:    Size  Location     Type
  7872 ;;  dutyValue       2   28[COMRAM] unsigned int 
  7873 ;; Auto vars:     Size  Location     Type
  7874 ;;		None
  7875 ;; Return value:  Size  Location     Type
  7876 ;;                  1    wreg      void 
  7877 ;; Registers used:
  7878 ;;		wreg, status,2, status,0
  7879 ;; Tracked objects:
  7880 ;;		On entry : 0/0
  7881 ;;		On exit  : 0/0
  7882 ;;		Unchanged: 0/0
  7883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7884 ;;      Params:         2       0       0       0       0       0       0
  7885 ;;      Locals:         0       0       0       0       0       0       0
  7886 ;;      Temps:          2       0       0       0       0       0       0
  7887 ;;      Totals:         4       0       0       0       0       0       0
  7888 ;;Total ram usage:        4 bytes
  7889 ;; Hardware stack levels used:    1
  7890 ;; Hardware stack levels required when called:    6
  7891 ;; This function calls:
  7892 ;;		Nothing
  7893 ;; This function is called by:
  7894 ;;		_main
  7895 ;;		_CoolingStart
  7896 ;;		_CoolingStop
  7897 ;; This function uses a non-reentrant model
  7898 ;;
  7899                           
  7900                           	psect	text49
  7901  001F88                     __ptext49:
  7902                           	opt stack 0
  7903  001F88                     _PWM4_LoadDutyValue:
  7904                           	opt stack 24
  7905                           
  7906                           ;pwm4.c: 84: CCPR2L = ((dutyValue & 0x03FC)>>2);
  7907                           
  7908                           ;incstack = 0
  7909  001F88  C01D  F01F         	movff	PWM4_LoadDutyValue@dutyValue,??_PWM4_LoadDutyValue
  7910  001F8C  C01E  F020         	movff	PWM4_LoadDutyValue@dutyValue+1,??_PWM4_LoadDutyValue+1
  7911  001F90  90D8               	bcf	status,0,c
  7912  001F92  3220               	rrcf	??_PWM4_LoadDutyValue+1,f,c
  7913  001F94  321F               	rrcf	??_PWM4_LoadDutyValue,f,c
  7914  001F96  90D8               	bcf	status,0,c
  7915  001F98  3220               	rrcf	??_PWM4_LoadDutyValue+1,f,c
  7916  001F9A  321F               	rrcf	??_PWM4_LoadDutyValue,f,c
  7917  001F9C  501F               	movf	??_PWM4_LoadDutyValue,w,c
  7918  001F9E  6E67               	movwf	3943,c	;volatile
  7919                           
  7920                           ;pwm4.c: 87: CCP2CON = (CCP2CON & 0xCF) | ((dutyValue & 0x0003)<<4);
  7921  001FA0  C01D  F01F         	movff	PWM4_LoadDutyValue@dutyValue,??_PWM4_LoadDutyValue
  7922  001FA4  0E03               	movlw	3
  7923  001FA6  161F               	andwf	??_PWM4_LoadDutyValue,f,c
  7924  001FA8  3A1F               	swapf	??_PWM4_LoadDutyValue,f,c
  7925  001FAA  0EF0               	movlw	240
  7926  001FAC  161F               	andwf	??_PWM4_LoadDutyValue,f,c
  7927  001FAE  5066               	movf	3942,w,c	;volatile
  7928  001FB0  0BCF               	andlw	207
  7929  001FB2  101F               	iorwf	??_PWM4_LoadDutyValue,w,c
  7930  001FB4  6E66               	movwf	3942,c	;volatile
  7931  001FB6  0012               	return		;funcret
  7932  001FB8                     __end_of_PWM4_LoadDutyValue:
  7933                           	opt stack 0
  7934                           tblptru	equ	0xFF8
  7935                           tblptrh	equ	0xFF7
  7936                           tblptrl	equ	0xFF6
  7937                           tablat	equ	0xFF5
  7938                           prodh	equ	0xFF4
  7939                           prodl	equ	0xFF3
  7940                           intcon	equ	0xFF2
  7941                           intcon2	equ	0xFF1
  7942                           postinc0	equ	0xFEE
  7943                           wreg	equ	0xFE8
  7944                           indf1	equ	0xFE7
  7945                           postdec1	equ	0xFE5
  7946                           fsr1h	equ	0xFE2
  7947                           fsr1l	equ	0xFE1
  7948                           indf2	equ	0xFDF
  7949                           postinc2	equ	0xFDE
  7950                           postdec2	equ	0xFDD
  7951                           plusw2	equ	0xFDB
  7952                           fsr2h	equ	0xFDA
  7953                           fsr2l	equ	0xFD9
  7954                           status	equ	0xFD8
  7955                           
  7956 ;; *************** function _CoolingCheck *****************
  7957 ;; Defined at:
  7958 ;;		line 229 in file "PDU.c"
  7959 ;; Parameters:    Size  Location     Type
  7960 ;;		None
  7961 ;; Auto vars:     Size  Location     Type
  7962 ;;		None
  7963 ;; Return value:  Size  Location     Type
  7964 ;;                  1    wreg      unsigned char 
  7965 ;; Registers used:
  7966 ;;		wreg, status,2
  7967 ;; Tracked objects:
  7968 ;;		On entry : 0/0
  7969 ;;		On exit  : 0/0
  7970 ;;		Unchanged: 0/0
  7971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7972 ;;      Params:         0       0       0       0       0       0       0
  7973 ;;      Locals:         0       0       0       0       0       0       0
  7974 ;;      Temps:          0       0       0       0       0       0       0
  7975 ;;      Totals:         0       0       0       0       0       0       0
  7976 ;;Total ram usage:        0 bytes
  7977 ;; Hardware stack levels used:    1
  7978 ;; Hardware stack levels required when called:    6
  7979 ;; This function calls:
  7980 ;;		Nothing
  7981 ;; This function is called by:
  7982 ;;		_main
  7983 ;; This function uses a non-reentrant model
  7984 ;;
  7985                           
  7986                           	psect	text50
  7987  002272                     __ptext50:
  7988                           	opt stack 0
  7989  002272                     _CoolingCheck:
  7990                           	opt stack 24
  7991                           
  7992                           ;PDU.c: 230: return MCSOn;
  7993                           
  7994                           ;incstack = 0
  7995  002272  503A               	movf	_MCSOn,w,c
  7996  002274  0012               	return	
  7997  002276                     __end_of_CoolingCheck:
  7998                           	opt stack 0
  7999                           tblptru	equ	0xFF8
  8000                           tblptrh	equ	0xFF7
  8001                           tblptrl	equ	0xFF6
  8002                           tablat	equ	0xFF5
  8003                           prodh	equ	0xFF4
  8004                           prodl	equ	0xFF3
  8005                           intcon	equ	0xFF2
  8006                           intcon2	equ	0xFF1
  8007                           postinc0	equ	0xFEE
  8008                           wreg	equ	0xFE8
  8009                           indf1	equ	0xFE7
  8010                           postdec1	equ	0xFE5
  8011                           fsr1h	equ	0xFE2
  8012                           fsr1l	equ	0xFE1
  8013                           indf2	equ	0xFDF
  8014                           postinc2	equ	0xFDE
  8015                           postdec2	equ	0xFDD
  8016                           plusw2	equ	0xFDB
  8017                           fsr2h	equ	0xFDA
  8018                           fsr2l	equ	0xFD9
  8019                           status	equ	0xFD8
  8020                           
  8021 ;; *************** function _INTERRUPT_InterruptManager *****************
  8022 ;; Defined at:
  8023 ;;		line 67 in file "mcc_generated_files/interrupt_manager.c"
  8024 ;; Parameters:    Size  Location     Type
  8025 ;;		None
  8026 ;; Auto vars:     Size  Location     Type
  8027 ;;		None
  8028 ;; Return value:  Size  Location     Type
  8029 ;;                  1    wreg      void 
  8030 ;; Registers used:
  8031 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8032 ;; Tracked objects:
  8033 ;;		On entry : 0/0
  8034 ;;		On exit  : 0/0
  8035 ;;		Unchanged: 0/0
  8036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8037 ;;      Params:         0       0       0       0       0       0       0
  8038 ;;      Locals:         0       0       0       0       0       0       0
  8039 ;;      Temps:         14       0       0       0       0       0       0
  8040 ;;      Totals:        14       0       0       0       0       0       0
  8041 ;;Total ram usage:       14 bytes
  8042 ;; Hardware stack levels used:    1
  8043 ;; Hardware stack levels required when called:    5
  8044 ;; This function calls:
  8045 ;;		_ADC_ISR
  8046 ;;		_EUSART1_Receive_ISR
  8047 ;;		_EUSART1_Transmit_ISR
  8048 ;;		_TMR1_ISR
  8049 ;; This function is called by:
  8050 ;;		Interrupt level 2
  8051 ;; This function uses a non-reentrant model
  8052 ;;
  8053                           
  8054                           	psect	intcode
  8055  000008                     __pintcode:
  8056                           	opt stack 0
  8057  000008                     _INTERRUPT_InterruptManager:
  8058                           	opt stack 18
  8059                           
  8060                           ;incstack = 0
  8061  000008  8242               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8062  00000A  CFFA F00F          	movff	pclath,??_INTERRUPT_InterruptManager
  8063  00000E  CFFB F010          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  8064  000012  CFE9 F011          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  8065  000016  CFEA F012          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  8066  00001A  CFE1 F013          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  8067  00001E  CFE2 F014          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  8068  000022  CFD9 F015          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  8069  000026  CFDA F016          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  8070  00002A  CFF3 F017          	movff	prodl,??_INTERRUPT_InterruptManager+8
  8071  00002E  CFF4 F018          	movff	prodh,??_INTERRUPT_InterruptManager+9
  8072  000032  CFF6 F019          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  8073  000036  CFF7 F01A          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  8074  00003A  CFF8 F01B          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  8075  00003E  CFF5 F01C          	movff	tablat,??_INTERRUPT_InterruptManager+13
  8076                           
  8077                           ;interrupt_manager.c: 70: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  8078  000042  BA9D               	btfsc	3997,5,c	;volatile
  8079  000044  AA9E               	btfss	3998,5,c	;volatile
  8080  000046  D003               	goto	i2l67
  8081                           
  8082                           ;interrupt_manager.c: 71: {
  8083                           ;interrupt_manager.c: 72: EUSART1_Receive_ISR();
  8084  000048  EC9F  F010         	call	_EUSART1_Receive_ISR	;wreg free
  8085                           
  8086                           ;interrupt_manager.c: 73: }
  8087  00004C  D011               	goto	i2l75
  8088  00004E                     i2l67:
  8089                           
  8090                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  8091  00004E  B89D               	btfsc	3997,4,c	;volatile
  8092  000050  A89E               	btfss	3998,4,c	;volatile
  8093  000052  D003               	goto	i2l69
  8094                           
  8095                           ;interrupt_manager.c: 75: {
  8096                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
  8097  000054  ECAB  F00F         	call	_EUSART1_Transmit_ISR	;wreg free
  8098                           
  8099                           ;interrupt_manager.c: 77: }
  8100  000058  D00B               	goto	i2l75
  8101  00005A                     i2l69:
  8102                           
  8103                           ;interrupt_manager.c: 78: else if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
  8104  00005A  BC9D               	btfsc	3997,6,c	;volatile
  8105  00005C  AC9E               	btfss	3998,6,c	;volatile
  8106  00005E  D003               	goto	i2l71
  8107                           
  8108                           ;interrupt_manager.c: 79: {
  8109                           ;interrupt_manager.c: 80: ADC_ISR();
  8110  000060  EC3B  F011         	call	_ADC_ISR	;wreg free
  8111                           
  8112                           ;interrupt_manager.c: 81: }
  8113  000064  D005               	goto	i2l75
  8114  000066                     i2l71:
  8115                           
  8116                           ;interrupt_manager.c: 82: else if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
  8117  000066  B09D               	btfsc	3997,0,c	;volatile
  8118  000068  A09E               	btfss	3998,0,c	;volatile
  8119  00006A  D002               	goto	i2l75
  8120                           
  8121                           ;interrupt_manager.c: 83: {
  8122                           ;interrupt_manager.c: 84: TMR1_ISR();
  8123  00006C  EC92  F00F         	call	_TMR1_ISR	;wreg free
  8124  000070                     i2l75:
  8125  000070  C01C  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  8126  000074  C01B  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  8127  000078  C01A  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  8128  00007C  C019  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  8129  000080  C018  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  8130  000084  C017  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  8131  000088  C016  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  8132  00008C  C015  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  8133  000090  C014  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  8134  000094  C013  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  8135  000098  C012  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  8136  00009C  C011  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  8137  0000A0  C010  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  8138  0000A4  C00F  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  8139  0000A8  9242               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8140  0000AA  0011               	retfie		f
  8141  0000AC                     __end_of_INTERRUPT_InterruptManager:
  8142                           	opt stack 0
  8143                           pclatu	equ	0xFFB
  8144                           pclath	equ	0xFFA
  8145                           tblptru	equ	0xFF8
  8146                           tblptrh	equ	0xFF7
  8147                           tblptrl	equ	0xFF6
  8148                           tablat	equ	0xFF5
  8149                           prodh	equ	0xFF4
  8150                           prodl	equ	0xFF3
  8151                           intcon	equ	0xFF2
  8152                           intcon2	equ	0xFF1
  8153                           postinc0	equ	0xFEE
  8154                           fsr0h	equ	0xFEA
  8155                           fsr0l	equ	0xFE9
  8156                           wreg	equ	0xFE8
  8157                           indf1	equ	0xFE7
  8158                           postdec1	equ	0xFE5
  8159                           fsr1h	equ	0xFE2
  8160                           fsr1l	equ	0xFE1
  8161                           indf2	equ	0xFDF
  8162                           postinc2	equ	0xFDE
  8163                           postdec2	equ	0xFDD
  8164                           plusw2	equ	0xFDB
  8165                           fsr2h	equ	0xFDA
  8166                           fsr2l	equ	0xFD9
  8167                           status	equ	0xFD8
  8168                           
  8169 ;; *************** function _TMR1_ISR *****************
  8170 ;; Defined at:
  8171 ;;		line 161 in file "mcc_generated_files/tmr1.c"
  8172 ;; Parameters:    Size  Location     Type
  8173 ;;		None
  8174 ;; Auto vars:     Size  Location     Type
  8175 ;;		None
  8176 ;; Return value:  Size  Location     Type
  8177 ;;                  1    wreg      void 
  8178 ;; Registers used:
  8179 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8180 ;; Tracked objects:
  8181 ;;		On entry : 0/0
  8182 ;;		On exit  : 0/0
  8183 ;;		Unchanged: 0/0
  8184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8185 ;;      Params:         0       0       0       0       0       0       0
  8186 ;;      Locals:         0       0       0       0       0       0       0
  8187 ;;      Temps:          0       0       0       0       0       0       0
  8188 ;;      Totals:         0       0       0       0       0       0       0
  8189 ;;Total ram usage:        0 bytes
  8190 ;; Hardware stack levels used:    1
  8191 ;; Hardware stack levels required when called:    4
  8192 ;; This function calls:
  8193 ;;		_FuseSystem
  8194 ;;		_ReadCurrent
  8195 ;; This function is called by:
  8196 ;;		_INTERRUPT_InterruptManager
  8197 ;; This function uses a non-reentrant model
  8198 ;;
  8199                           
  8200                           	psect	text52
  8201  001F24                     __ptext52:
  8202                           	opt stack 0
  8203  001F24                     _TMR1_ISR:
  8204                           	opt stack 18
  8205                           
  8206                           ;tmr1.c: 165: PIR1bits.TMR1IF = 0;
  8207                           
  8208                           ;incstack = 0
  8209  001F24  909E               	bcf	3998,0,c	;volatile
  8210                           
  8211                           ;tmr1.c: 168: TMR1H = (timer1ReloadVal >> 8);
  8212  001F26  5039               	movf	_timer1ReloadVal+1,w,c	;volatile
  8213  001F28  6ECF               	movwf	4047,c	;volatile
  8214                           
  8215                           ;tmr1.c: 169: TMR1L = (uint8_t) timer1ReloadVal;
  8216  001F2A  C038  FFCE         	movff	_timer1ReloadVal,4046	;volatile
  8217                           
  8218                           ;tmr1.c: 170: readwhat++;
  8219  001F2E  4A3F               	infsnz	_readwhat,f,c
  8220  001F30  2A40               	incf	_readwhat+1,f,c
  8221                           
  8222                           ;tmr1.c: 171: if(readwhat > 7)
  8223  001F32  BE40               	btfsc	_readwhat+1,7,c
  8224  001F34  D00C               	goto	i2l3598
  8225  001F36  5040               	movf	_readwhat+1,w,c
  8226  001F38  E104               	bnz	i2u215_40
  8227  001F3A  0E08               	movlw	8
  8228  001F3C  5C3F               	subwf	_readwhat,w,c
  8229  001F3E  A0D8               	btfss	status,0,c
  8230  001F40  D006               	goto	i2l3598
  8231  001F42                     i2u215_40:
  8232                           
  8233                           ;tmr1.c: 172: {
  8234                           ;tmr1.c: 173: readwhat = 1;
  8235  001F42  0E00               	movlw	0
  8236  001F44  6E40               	movwf	_readwhat+1,c
  8237  001F46  0E01               	movlw	1
  8238  001F48  6E3F               	movwf	_readwhat,c
  8239                           
  8240                           ;tmr1.c: 174: FuseSystem();
  8241  001F4A  EC0D  F00D         	call	_FuseSystem	;wreg free
  8242  001F4E                     i2l3598:
  8243                           
  8244                           ;tmr1.c: 175: }
  8245                           ;tmr1.c: 176: ReadCurrent(readwhat);
  8246  001F4E  503F               	movf	_readwhat,w,c
  8247  001F50  EC58  F000         	call	_ReadCurrent
  8248  001F54  0012               	return		;funcret
  8249  001F56                     __end_of_TMR1_ISR:
  8250                           	opt stack 0
  8251                           pclatu	equ	0xFFB
  8252                           pclath	equ	0xFFA
  8253                           tblptru	equ	0xFF8
  8254                           tblptrh	equ	0xFF7
  8255                           tblptrl	equ	0xFF6
  8256                           tablat	equ	0xFF5
  8257                           prodh	equ	0xFF4
  8258                           prodl	equ	0xFF3
  8259                           intcon	equ	0xFF2
  8260                           intcon2	equ	0xFF1
  8261                           postinc0	equ	0xFEE
  8262                           fsr0h	equ	0xFEA
  8263                           fsr0l	equ	0xFE9
  8264                           wreg	equ	0xFE8
  8265                           indf1	equ	0xFE7
  8266                           postdec1	equ	0xFE5
  8267                           fsr1h	equ	0xFE2
  8268                           fsr1l	equ	0xFE1
  8269                           indf2	equ	0xFDF
  8270                           postinc2	equ	0xFDE
  8271                           postdec2	equ	0xFDD
  8272                           plusw2	equ	0xFDB
  8273                           fsr2h	equ	0xFDA
  8274                           fsr2l	equ	0xFD9
  8275                           status	equ	0xFD8
  8276                           
  8277 ;; *************** function _ReadCurrent *****************
  8278 ;; Defined at:
  8279 ;;		line 63 in file "PDU.c"
  8280 ;; Parameters:    Size  Location     Type
  8281 ;;  gather          1    wreg     unsigned char 
  8282 ;; Auto vars:     Size  Location     Type
  8283 ;;  gather          1   13[COMRAM] unsigned char 
  8284 ;; Return value:  Size  Location     Type
  8285 ;;                  1    wreg      void 
  8286 ;; Registers used:
  8287 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8288 ;; Tracked objects:
  8289 ;;		On entry : 0/0
  8290 ;;		On exit  : 0/0
  8291 ;;		Unchanged: 0/0
  8292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8293 ;;      Params:         0       0       0       0       0       0       0
  8294 ;;      Locals:         1       0       0       0       0       0       0
  8295 ;;      Temps:          0       0       0       0       0       0       0
  8296 ;;      Totals:         1       0       0       0       0       0       0
  8297 ;;Total ram usage:        1 bytes
  8298 ;; Hardware stack levels used:    1
  8299 ;; Hardware stack levels required when called:    3
  8300 ;; This function calls:
  8301 ;;		_ADC_GetConversion
  8302 ;;		i2_SetPin595
  8303 ;;		i2_Update
  8304 ;; This function is called by:
  8305 ;;		_TMR1_ISR
  8306 ;; This function uses a non-reentrant model
  8307 ;;
  8308                           
  8309                           	psect	text53
  8310  0000B0                     __ptext53:
  8311                           	opt stack 0
  8312  0000B0                     _ReadCurrent:
  8313                           	opt stack 18
  8314                           
  8315                           ;incstack = 0
  8316                           ;ReadCurrent@gather stored from wreg
  8317  0000B0  6E0E               	movwf	ReadCurrent@gather,c
  8318                           
  8319                           ;PDU.c: 64: if (gather == 1) {
  8320  0000B2  040E               	decf	ReadCurrent@gather,w,c
  8321  0000B4  A4D8               	btfss	status,2,c
  8322  0000B6  D088               	goto	i2l3348
  8323                           
  8324                           ;PDU.c: 66: SetPin595(1, 4, ON);
  8325  0000B8  0E00               	movlw	0
  8326  0000BA  6E02               	movwf	i2SetPin595@Reg+1,c
  8327  0000BC  0E01               	movlw	1
  8328  0000BE  6E01               	movwf	i2SetPin595@Reg,c
  8329  0000C0  0E00               	movlw	0
  8330  0000C2  6E04               	movwf	i2SetPin595@pin+1,c
  8331  0000C4  0E04               	movlw	4
  8332  0000C6  6E03               	movwf	i2SetPin595@pin,c
  8333  0000C8  0E00               	movlw	0
  8334  0000CA  6E06               	movwf	i2SetPin595@value+1,c
  8335  0000CC  0E01               	movlw	1
  8336  0000CE  6E05               	movwf	i2SetPin595@value,c
  8337  0000D0  ECA0  F00E         	call	i2_SetPin595	;wreg free
  8338                           
  8339                           ;PDU.c: 67: SetPin595(1, 3, OFF);
  8340  0000D4  0E00               	movlw	0
  8341  0000D6  6E02               	movwf	i2SetPin595@Reg+1,c
  8342  0000D8  0E01               	movlw	1
  8343  0000DA  6E01               	movwf	i2SetPin595@Reg,c
  8344  0000DC  0E00               	movlw	0
  8345  0000DE  6E04               	movwf	i2SetPin595@pin+1,c
  8346  0000E0  0E03               	movlw	3
  8347  0000E2  6E03               	movwf	i2SetPin595@pin,c
  8348  0000E4  0E00               	movlw	0
  8349  0000E6  6E06               	movwf	i2SetPin595@value+1,c
  8350  0000E8  0E00               	movlw	0
  8351  0000EA  6E05               	movwf	i2SetPin595@value,c
  8352  0000EC  ECA0  F00E         	call	i2_SetPin595	;wreg free
  8353                           
  8354                           ;PDU.c: 68: SetPin595(1, 2, OFF);
  8355  0000F0  0E00               	movlw	0
  8356  0000F2  6E02               	movwf	i2SetPin595@Reg+1,c
  8357  0000F4  0E01               	movlw	1
  8358  0000F6  6E01               	movwf	i2SetPin595@Reg,c
  8359  0000F8  0E00               	movlw	0
  8360  0000FA  6E04               	movwf	i2SetPin595@pin+1,c
  8361  0000FC  0E02               	movlw	2
  8362  0000FE  6E03               	movwf	i2SetPin595@pin,c
  8363  000100  0E00               	movlw	0
  8364  000102  6E06               	movwf	i2SetPin595@value+1,c
  8365  000104  0E00               	movlw	0
  8366  000106  6E05               	movwf	i2SetPin595@value,c
  8367  000108  ECA0  F00E         	call	i2_SetPin595	;wreg free
  8368                           
  8369                           ;PDU.c: 69: SetPin595(2, 4, OFF);
  8370  00010C  0E00               	movlw	0
  8371  00010E  6E02               	movwf	i2SetPin595@Reg+1,c
  8372  000110  0E02               	movlw	2
  8373  000112  6E01               	movwf	i2SetPin595@Reg,c
  8374  000114  0E00               	movlw	0
  8375  000116  6E04               	movwf	i2SetPin595@pin+1,c
  8376  000118  0E04               	movlw	4
  8377  00011A  6E03               	movwf	i2SetPin595@pin,c
  8378  00011C  0E00               	movlw	0
  8379  00011E  6E06               	movwf	i2SetPin595@value+1,c
  8380  000120  0E00               	movlw	0
  8381  000122  6E05               	movwf	i2SetPin595@value,c
  8382  000124  ECA0  F00E         	call	i2_SetPin595	;wreg free
  8383                           
  8384                           ;PDU.c: 70: SetPin595(2, 3, OFF);
  8385  000128  0E00               	movlw	0
  8386  00012A  6E02               	movwf	i2SetPin595@Reg+1,c
  8387  00012C  0E02               	movlw	2
  8388  00012E  6E01               	movwf	i2SetPin595@Reg,c
  8389  000130  0E00               	movlw	0
  8390  000132  6E04               	movwf	i2SetPin595@pin+1,c
  8391  000134  0E03               	movlw	3
  8392  000136  6E03               	movwf	i2SetPin595@pin,c
  8393  000138  0E00               	movlw	0
  8394  00013A  6E06               	movwf	i2SetPin595@value+1,c
  8395  00013C  0E00               	movlw	0
  8396  00013E  6E05               	movwf	i2SetPin595@value,c
  8397  000140  ECA0  F00E         	call	i2_SetPin595	;wreg free
  8398                           
  8399                           ;PDU.c: 71: SetPin595(2, 2, OFF);
  8400  000144  0E00               	movlw	0
  8401  000146  6E02               	movwf	i2SetPin595@Reg+1,c
  8402  000148  0E02               	movlw	2
  8403  00014A  6E01               	movwf	i2SetPin595@Reg,c
  8404  00014C  0E00               	movlw	0
  8405  00014E  6E04               	movwf	i2SetPin595@pin+1,c
  8406  000150  0E02               	movlw	2
  8407  000152  6E03               	movwf	i2SetPin595@pin,c
  8408  000154  0E00               	movlw	0
  8409  000156  6E06               	movwf	i2SetPin595@value+1,c
  8410  000158  0E00               	movlw	0
  8411  00015A  6E05               	movwf	i2SetPin595@value,c
  8412  00015C  ECA0  F00E         	call	i2_SetPin595	;wreg free
  8413                           
  8414                           ;PDU.c: 72: SetPin595(3, 4, OFF);
  8415  000160  0E00               	movlw	0
  8416  000162  6E02               	movwf	i2SetPin595@Reg+1,c
  8417  000164  0E03               	movlw	3
  8418  000166  6E01               	movwf	i2SetPin595@Reg,c
  8419  000168  0E00               	movlw	0
  8420  00016A  6E04               	movwf	i2SetPin595@pin+1,c
  8421  00016C  0E04               	movlw	4
  8422  00016E  6E03               	movwf	i2SetPin595@pin,c
  8423  000170  0E00               	movlw	0
  8424  000172  6E06               	movwf	i2SetPin595@value+1,c
  8425  000174  0E00               	movlw	0
  8426  000176  6E05               	movwf	i2SetPin595@value,c
  8427  000178  ECA0  F00E         	call	i2_SetPin595	;wreg free
  8428                           
  8429                           ;PDU.c: 73: SetPin595(3, 3, OFF);
  8430  00017C  0E00               	movlw	0
  8431  00017E  6E02               	movwf	i2SetPin595@Reg+1,c
  8432  000180  0E03               	movlw	3
  8433  000182  6E01               	movwf	i2SetPin595@Reg,c
  8434  000184  0E00               	movlw	0
  8435  000186  6E04               	movwf	i2SetPin595@pin+1,c
  8436  000188  0E03               	movlw	3
  8437  00018A  6E03               	movwf	i2SetPin595@pin,c
  8438  00018C  0E00               	movlw	0
  8439  00018E  6E06               	movwf	i2SetPin595@value+1,c
  8440  000190  0E00               	movlw	0
  8441  000192  6E05               	movwf	i2SetPin595@value,c
  8442  000194  ECA0  F00E         	call	i2_SetPin595	;wreg free
  8443                           
  8444                           ;PDU.c: 74: SetPin595(3, 2, OFF);
  8445  000198  0E00               	movlw	0
  8446  00019A  6E02               	movwf	i2SetPin595@Reg+1,c
  8447  00019C  0E03               	movlw	3
  8448  00019E  6E01               	movwf	i2SetPin595@Reg,c
  8449  0001A0  0E00               	movlw	0
  8450  0001A2  6E04               	movwf	i2SetPin595@pin+1,c
  8451  0001A4  0E02               	movlw	2
  8452  0001A6  6E03               	movwf	i2SetPin595@pin,c
  8453  0001A8  0E00               	movlw	0
  8454  0001AA  6E06               	movwf	i2SetPin595@value+1,c
  8455  0001AC  0E00               	movlw	0
  8456  0001AE  6E05               	movwf	i2SetPin595@value,c
  8457  0001B0  ECA0  F00E         	call	i2_SetPin595	;wreg free
  8458                           
  8459                           ;PDU.c: 75: Update();
  8460  0001B4  EC32  F011         	call	i2_Update	;wreg free
  8461                           
  8462                           ;PDU.c: 76: CurrentADC[5] = ADC_GetConversion(U10Multisense);
  8463  0001B8  0E17               	movlw	23
  8464  0001BA  ECDC  F00F         	call	_ADC_GetConversion
  8465  0001BE  C001  F0D1         	movff	?_ADC_GetConversion,_CurrentADC+10
  8466  0001C2  C002  F0D2         	movff	?_ADC_GetConversion+1,_CurrentADC+11
  8467                           
  8468                           ;PDU.c: 78: }
  8469  0001C6  0012               	return	
  8470  0001C8                     i2l3348:
  8471                           
  8472                           ;PDU.c: 79: else if(gather == 2){
  8473  0001C8  0E02               	movlw	2
  8474  0001CA  180E               	xorwf	ReadCurrent@gather,w,c
  8475  0001CC  A4D8               	btfss	status,2,c
  8476  0001CE  D088               	goto	i2l3354
  8477                           
  8478                           ;PDU.c: 81: SetPin595(1, 4, OFF);
  8479  0001D0  0E00               	movlw	0
  8480  0001D2  6E02               	movwf	i2SetPin595@Reg+1,c
  8481  0001D4  0E01               	movlw	1
  8482  0001D6  6E01               	movwf	i2SetPin595@Reg,c
  8483  0001D8  0E00               	movlw	0
  8484  0001DA  6E04               	movwf	i2SetPin595@pin+1,c
  8485  0001DC  0E04               	movlw	4
  8486  0001DE  6E03               	movwf	i2SetPin595@pin,c
  8487  0001E0  0E00               	movlw	0
  8488  0001E2  6E06               	movwf	i2SetPin595@value+1,c
  8489  0001E4  0E00               	movlw	0
  8490  0001E6  6E05               	movwf	i2SetPin595@value,c
  8491  0001E8  ECA0  F00E         	call	i2_SetPin595	;wreg free
  8492                           
  8493                           ;PDU.c: 82: SetPin595(1, 3, OFF);
  8494  0001EC  0E00               	movlw	0
  8495  0001EE  6E02               	movwf	i2SetPin595@Reg+1,c
  8496  0001F0  0E01               	movlw	1
  8497  0001F2  6E01               	movwf	i2SetPin595@Reg,c
  8498  0001F4  0E00               	movlw	0
  8499  0001F6  6E04               	movwf	i2SetPin595@pin+1,c
  8500  0001F8  0E03               	movlw	3
  8501  0001FA  6E03               	movwf	i2SetPin595@pin,c
  8502  0001FC  0E00               	movlw	0
  8503  0001FE  6E06               	movwf	i2SetPin595@value+1,c
  8504  000200  0E00               	movlw	0
  8505  000202  6E05               	movwf	i2SetPin595@value,c
  8506  000204  ECA0  F00E         	call	i2_SetPin595	;wreg free
  8507                           
  8508                           ;PDU.c: 83: SetPin595(1, 2, OFF);
  8509  000208  0E00               	movlw	0
  8510  00020A  6E02               	movwf	i2SetPin595@Reg+1,c
  8511  00020C  0E01               	movlw	1
  8512  00020E  6E01               	movwf	i2SetPin595@Reg,c
  8513  000210  0E00               	movlw	0
  8514  000212  6E04               	movwf	i2SetPin595@pin+1,c
  8515  000214  0E02               	movlw	2
  8516  000216  6E03               	movwf	i2SetPin595@pin,c
  8517  000218  0E00               	movlw	0
  8518  00021A  6E06               	movwf	i2SetPin595@value+1,c
  8519  00021C  0E00               	movlw	0
  8520  00021E  6E05               	movwf	i2SetPin595@value,c
  8521  000220  ECA0  F00E         	call	i2_SetPin595	;wreg free
  8522                           
  8523                           ;PDU.c: 84: SetPin595(2, 4, ON);
  8524  000224  0E00               	movlw	0
  8525  000226  6E02               	movwf	i2SetPin595@Reg+1,c
  8526  000228  0E02               	movlw	2
  8527  00022A  6E01               	movwf	i2SetPin595@Reg,c
  8528  00022C  0E00               	movlw	0
  8529  00022E  6E04               	movwf	i2SetPin595@pin+1,c
  8530  000230  0E04               	movlw	4
  8531  000232  6E03               	movwf	i2SetPin595@pin,c
  8532  000234  0E00               	movlw	0
  8533  000236  6E06               	movwf	i2SetPin595@value+1,c
  8534  000238  0E01               	movlw	1
  8535  00023A  6E05               	movwf	i2SetPin595@value,c
  8536  00023C  ECA0  F00E         	call	i2_SetPin595	;wreg free
  8537                           
  8538                           ;PDU.c: 85: SetPin595(2, 3, ON);
  8539  000240  0E00               	movlw	0
  8540  000242  6E02               	movwf	i2SetPin595@Reg+1,c
  8541  000244  0E02               	movlw	2
  8542  000246  6E01               	movwf	i2SetPin595@Reg,c
  8543  000248  0E00               	movlw	0
  8544  00024A  6E04               	movwf	i2SetPin595@pin+1,c
  8545  00024C  0E03               	movlw	3
  8546  00024E  6E03               	movwf	i2SetPin595@pin,c
  8547  000250  0E00               	movlw	0
  8548  000252  6E06               	movwf	i2SetPin595@value+1,c
  8549  000254  0E01               	movlw	1
  8550  000256  6E05               	movwf	i2SetPin595@value,c
  8551  000258  ECA0  F00E         	call	i2_SetPin595	;wreg free
  8552                           
  8553                           ;PDU.c: 86: SetPin595(2, 2, OFF);
  8554  00025C  0E00               	movlw	0
  8555  00025E  6E02               	movwf	i2SetPin595@Reg+1,c
  8556  000260  0E02               	movlw	2
  8557  000262  6E01               	movwf	i2SetPin595@Reg,c
  8558  000264  0E00               	movlw	0
  8559  000266  6E04               	movwf	i2SetPin595@pin+1,c
  8560  000268  0E02               	movlw	2
  8561  00026A  6E03               	movwf	i2SetPin595@pin,c
  8562  00026C  0E00               	movlw	0
  8563  00026E  6E06               	movwf	i2SetPin595@value+1,c
  8564  000270  0E00               	movlw	0
  8565  000272  6E05               	movwf	i2SetPin595@value,c
  8566  000274  ECA0  F00E         	call	i2_SetPin595	;wreg free
  8567                           
  8568                           ;PDU.c: 87: SetPin595(3, 4, OFF);
  8569  000278  0E00               	movlw	0
  8570  00027A  6E02               	movwf	i2SetPin595@Reg+1,c
  8571  00027C  0E03               	movlw	3
  8572  00027E  6E01               	movwf	i2SetPin595@Reg,c
  8573  000280  0E00               	movlw	0
  8574  000282  6E04               	movwf	i2SetPin595@pin+1,c
  8575  000284  0E04               	movlw	4
  8576  000286  6E03               	movwf	i2SetPin595@pin,c
  8577  000288  0E00               	movlw	0
  8578  00028A  6E06               	movwf	i2SetPin595@value+1,c
  8579  00028C  0E00               	movlw	0
  8580  00028E  6E05               	movwf	i2SetPin595@value,c
  8581  000290  ECA0  F00E         	call	i2_SetPin595	;wreg free
  8582                           
  8583                           ;PDU.c: 88: SetPin595(3, 3, OFF);
  8584  000294  0E00               	movlw	0
  8585  000296  6E02               	movwf	i2SetPin595@Reg+1,c
  8586  000298  0E03               	movlw	3
  8587  00029A  6E01               	movwf	i2SetPin595@Reg,c
  8588  00029C  0E00               	movlw	0
  8589  00029E  6E04               	movwf	i2SetPin595@pin+1,c
  8590  0002A0  0E03               	movlw	3
  8591  0002A2  6E03               	movwf	i2SetPin595@pin,c
  8592  0002A4  0E00               	movlw	0
  8593  0002A6  6E06               	movwf	i2SetPin595@value+1,c
  8594  0002A8  0E00               	movlw	0
  8595  0002AA  6E05               	movwf	i2SetPin595@value,c
  8596  0002AC  ECA0  F00E         	call	i2_SetPin595	;wreg free
  8597                           
  8598                           ;PDU.c: 89: SetPin595(3, 2, OFF);
  8599  0002B0  0E00               	movlw	0
  8600  0002B2  6E02               	movwf	i2SetPin595@Reg+1,c
  8601  0002B4  0E03               	movlw	3
  8602  0002B6  6E01               	movwf	i2SetPin595@Reg,c
  8603  0002B8  0E00               	movlw	0
  8604  0002BA  6E04               	movwf	i2SetPin595@pin+1,c
  8605  0002BC  0E02               	movlw	2
  8606  0002BE  6E03               	movwf	i2SetPin595@pin,c
  8607  0002C0  0E00               	movlw	0
  8608  0002C2  6E06               	movwf	i2SetPin595@value+1,c
  8609  0002C4  0E00               	movlw	0
  8610  0002C6  6E05               	movwf	i2SetPin595@value,c
  8611  0002C8  ECA0  F00E         	call	i2_SetPin595	;wreg free
  8612                           
  8613                           ;PDU.c: 90: Update();
  8614  0002CC  EC32  F011         	call	i2_Update	;wreg free
  8615                           
  8616                           ;PDU.c: 91: CurrentADC[2] = ADC_GetConversion(U8Multisense);
  8617  0002D0  0E16               	movlw	22
  8618  0002D2  ECDC  F00F         	call	_ADC_GetConversion
  8619  0002D6  C001  F0CB         	movff	?_ADC_GetConversion,_CurrentADC+4
  8620  0002DA  C002  F0CC         	movff	?_ADC_GetConversion+1,_CurrentADC+5
  8621                           
  8622                           ;PDU.c: 93: }
  8623  0002DE  0012               	return	
  8624  0002E0                     i2l3354:
  8625                           
  8626                           ;PDU.c: 94: else if(gather == 3){
  8627  0002E0  0E03               	movlw	3
  8628  0002E2  180E               	xorwf	ReadCurrent@gather,w,c
  8629  0002E4  A4D8               	btfss	status,2,c
  8630  0002E6  D088               	goto	i2l3360
  8631                           
  8632                           ;PDU.c: 96: SetPin595(1, 4, OFF);
  8633  0002E8  0E00               	movlw	0
  8634  0002EA  6E02               	movwf	i2SetPin595@Reg+1,c
  8635  0002EC  0E01               	movlw	1
  8636  0002EE  6E01               	movwf	i2SetPin595@Reg,c
  8637  0002F0  0E00               	movlw	0
  8638  0002F2  6E04               	movwf	i2SetPin595@pin+1,c
  8639  0002F4  0E04               	movlw	4
  8640  0002F6  6E03               	movwf	i2SetPin595@pin,c
  8641  0002F8  0E00               	movlw	0
  8642  0002FA  6E06               	movwf	i2SetPin595@value+1,c
  8643  0002FC  0E00               	movlw	0
  8644  0002FE  6E05               	movwf	i2SetPin595@value,c
  8645  000300  ECA0  F00E         	call	i2_SetPin595	;wreg free
  8646                           
  8647                           ;PDU.c: 97: SetPin595(1, 3, OFF);
  8648  000304  0E00               	movlw	0
  8649  000306  6E02               	movwf	i2SetPin595@Reg+1,c
  8650  000308  0E01               	movlw	1
  8651  00030A  6E01               	movwf	i2SetPin595@Reg,c
  8652  00030C  0E00               	movlw	0
  8653  00030E  6E04               	movwf	i2SetPin595@pin+1,c
  8654  000310  0E03               	movlw	3
  8655  000312  6E03               	movwf	i2SetPin595@pin,c
  8656  000314  0E00               	movlw	0
  8657  000316  6E06               	movwf	i2SetPin595@value+1,c
  8658  000318  0E00               	movlw	0
  8659  00031A  6E05               	movwf	i2SetPin595@value,c
  8660  00031C  ECA0  F00E         	call	i2_SetPin595	;wreg free
  8661                           
  8662                           ;PDU.c: 98: SetPin595(1, 2, OFF);
  8663  000320  0E00               	movlw	0
  8664  000322  6E02               	movwf	i2SetPin595@Reg+1,c
  8665  000324  0E01               	movlw	1
  8666  000326  6E01               	movwf	i2SetPin595@Reg,c
  8667  000328  0E00               	movlw	0
  8668  00032A  6E04               	movwf	i2SetPin595@pin+1,c
  8669  00032C  0E02               	movlw	2
  8670  00032E  6E03               	movwf	i2SetPin595@pin,c
  8671  000330  0E00               	movlw	0
  8672  000332  6E06               	movwf	i2SetPin595@value+1,c
  8673  000334  0E00               	movlw	0
  8674  000336  6E05               	movwf	i2SetPin595@value,c
  8675  000338  ECA0  F00E         	call	i2_SetPin595	;wreg free
  8676                           
  8677                           ;PDU.c: 99: SetPin595(2, 4, OFF);
  8678  00033C  0E00               	movlw	0
  8679  00033E  6E02               	movwf	i2SetPin595@Reg+1,c
  8680  000340  0E02               	movlw	2
  8681  000342  6E01               	movwf	i2SetPin595@Reg,c
  8682  000344  0E00               	movlw	0
  8683  000346  6E04               	movwf	i2SetPin595@pin+1,c
  8684  000348  0E04               	movlw	4
  8685  00034A  6E03               	movwf	i2SetPin595@pin,c
  8686  00034C  0E00               	movlw	0
  8687  00034E  6E06               	movwf	i2SetPin595@value+1,c
  8688  000350  0E00               	movlw	0
  8689  000352  6E05               	movwf	i2SetPin595@value,c
  8690  000354  ECA0  F00E         	call	i2_SetPin595	;wreg free
  8691                           
  8692                           ;PDU.c: 100: SetPin595(2, 3, OFF);
  8693  000358  0E00               	movlw	0
  8694  00035A  6E02               	movwf	i2SetPin595@Reg+1,c
  8695  00035C  0E02               	movlw	2
  8696  00035E  6E01               	movwf	i2SetPin595@Reg,c
  8697  000360  0E00               	movlw	0
  8698  000362  6E04               	movwf	i2SetPin595@pin+1,c
  8699  000364  0E03               	movlw	3
  8700  000366  6E03               	movwf	i2SetPin595@pin,c
  8701  000368  0E00               	movlw	0
  8702  00036A  6E06               	movwf	i2SetPin595@value+1,c
  8703  00036C  0E00               	movlw	0
  8704  00036E  6E05               	movwf	i2SetPin595@value,c
  8705  000370  ECA0  F00E         	call	i2_SetPin595	;wreg free
  8706                           
  8707                           ;PDU.c: 101: SetPin595(2, 2, OFF);
  8708  000374  0E00               	movlw	0
  8709  000376  6E02               	movwf	i2SetPin595@Reg+1,c
  8710  000378  0E02               	movlw	2
  8711  00037A  6E01               	movwf	i2SetPin595@Reg,c
  8712  00037C  0E00               	movlw	0
  8713  00037E  6E04               	movwf	i2SetPin595@pin+1,c
  8714  000380  0E02               	movlw	2
  8715  000382  6E03               	movwf	i2SetPin595@pin,c
  8716  000384  0E00               	movlw	0
  8717  000386  6E06               	movwf	i2SetPin595@value+1,c
  8718  000388  0E00               	movlw	0
  8719  00038A  6E05               	movwf	i2SetPin595@value,c
  8720  00038C  ECA0  F00E         	call	i2_SetPin595	;wreg free
  8721                           
  8722                           ;PDU.c: 102: SetPin595(3, 4, ON);
  8723  000390  0E00               	movlw	0
  8724  000392  6E02               	movwf	i2SetPin595@Reg+1,c
  8725  000394  0E03               	movlw	3
  8726  000396  6E01               	movwf	i2SetPin595@Reg,c
  8727  000398  0E00               	movlw	0
  8728  00039A  6E04               	movwf	i2SetPin595@pin+1,c
  8729  00039C  0E04               	movlw	4
  8730  00039E  6E03               	movwf	i2SetPin595@pin,c
  8731  0003A0  0E00               	movlw	0
  8732  0003A2  6E06               	movwf	i2SetPin595@value+1,c
  8733  0003A4  0E01               	movlw	1
  8734  0003A6  6E05               	movwf	i2SetPin595@value,c
  8735  0003A8  ECA0  F00E         	call	i2_SetPin595	;wreg free
  8736                           
  8737                           ;PDU.c: 103: SetPin595(3, 3, OFF);
  8738  0003AC  0E00               	movlw	0
  8739  0003AE  6E02               	movwf	i2SetPin595@Reg+1,c
  8740  0003B0  0E03               	movlw	3
  8741  0003B2  6E01               	movwf	i2SetPin595@Reg,c
  8742  0003B4  0E00               	movlw	0
  8743  0003B6  6E04               	movwf	i2SetPin595@pin+1,c
  8744  0003B8  0E03               	movlw	3
  8745  0003BA  6E03               	movwf	i2SetPin595@pin,c
  8746  0003BC  0E00               	movlw	0
  8747  0003BE  6E06               	movwf	i2SetPin595@value+1,c
  8748  0003C0  0E00               	movlw	0
  8749  0003C2  6E05               	movwf	i2SetPin595@value,c
  8750  0003C4  ECA0  F00E         	call	i2_SetPin595	;wreg free
  8751                           
  8752                           ;PDU.c: 104: SetPin595(3, 2, OFF);
  8753  0003C8  0E00               	movlw	0
  8754  0003CA  6E02               	movwf	i2SetPin595@Reg+1,c
  8755  0003CC  0E03               	movlw	3
  8756  0003CE  6E01               	movwf	i2SetPin595@Reg,c
  8757  0003D0  0E00               	movlw	0
  8758  0003D2  6E04               	movwf	i2SetPin595@pin+1,c
  8759  0003D4  0E02               	movlw	2
  8760  0003D6  6E03               	movwf	i2SetPin595@pin,c
  8761  0003D8  0E00               	movlw	0
  8762  0003DA  6E06               	movwf	i2SetPin595@value+1,c
  8763  0003DC  0E00               	movlw	0
  8764  0003DE  6E05               	movwf	i2SetPin595@value,c
  8765  0003E0  ECA0  F00E         	call	i2_SetPin595	;wreg free
  8766                           
  8767                           ;PDU.c: 105: Update();
  8768  0003E4  EC32  F011         	call	i2_Update	;wreg free
  8769                           
  8770                           ;PDU.c: 106: CurrentADC[1] = ADC_GetConversion(U5Multisense);
  8771  0003E8  0E10               	movlw	16
  8772  0003EA  ECDC  F00F         	call	_ADC_GetConversion
  8773  0003EE  C001  F0C9         	movff	?_ADC_GetConversion,_CurrentADC+2
  8774  0003F2  C002  F0CA         	movff	?_ADC_GetConversion+1,_CurrentADC+3
  8775                           
  8776                           ;PDU.c: 108: }
  8777  0003F6  0012               	return	
  8778  0003F8                     i2l3360:
  8779                           
  8780                           ;PDU.c: 109: else if(gather == 4){
  8781  0003F8  0E04               	movlw	4
  8782  0003FA  180E               	xorwf	ReadCurrent@gather,w,c
  8783  0003FC  A4D8               	btfss	status,2,c
  8784  0003FE  D088               	goto	i2l3366
  8785                           
  8786                           ;PDU.c: 111: SetPin595(1, 4, ON);
  8787  000400  0E00               	movlw	0
  8788  000402  6E02               	movwf	i2SetPin595@Reg+1,c
  8789  000404  0E01               	movlw	1
  8790  000406  6E01               	movwf	i2SetPin595@Reg,c
  8791  000408  0E00               	movlw	0
  8792  00040A  6E04               	movwf	i2SetPin595@pin+1,c
  8793  00040C  0E04               	movlw	4
  8794  00040E  6E03               	movwf	i2SetPin595@pin,c
  8795  000410  0E00               	movlw	0
  8796  000412  6E06               	movwf	i2SetPin595@value+1,c
  8797  000414  0E01               	movlw	1
  8798  000416  6E05               	movwf	i2SetPin595@value,c
  8799  000418  ECA0  F00E         	call	i2_SetPin595	;wreg free
  8800                           
  8801                           ;PDU.c: 112: SetPin595(1, 3, ON);
  8802  00041C  0E00               	movlw	0
  8803  00041E  6E02               	movwf	i2SetPin595@Reg+1,c
  8804  000420  0E01               	movlw	1
  8805  000422  6E01               	movwf	i2SetPin595@Reg,c
  8806  000424  0E00               	movlw	0
  8807  000426  6E04               	movwf	i2SetPin595@pin+1,c
  8808  000428  0E03               	movlw	3
  8809  00042A  6E03               	movwf	i2SetPin595@pin,c
  8810  00042C  0E00               	movlw	0
  8811  00042E  6E06               	movwf	i2SetPin595@value+1,c
  8812  000430  0E01               	movlw	1
  8813  000432  6E05               	movwf	i2SetPin595@value,c
  8814  000434  ECA0  F00E         	call	i2_SetPin595	;wreg free
  8815                           
  8816                           ;PDU.c: 113: SetPin595(1, 2, OFF);
  8817  000438  0E00               	movlw	0
  8818  00043A  6E02               	movwf	i2SetPin595@Reg+1,c
  8819  00043C  0E01               	movlw	1
  8820  00043E  6E01               	movwf	i2SetPin595@Reg,c
  8821  000440  0E00               	movlw	0
  8822  000442  6E04               	movwf	i2SetPin595@pin+1,c
  8823  000444  0E02               	movlw	2
  8824  000446  6E03               	movwf	i2SetPin595@pin,c
  8825  000448  0E00               	movlw	0
  8826  00044A  6E06               	movwf	i2SetPin595@value+1,c
  8827  00044C  0E00               	movlw	0
  8828  00044E  6E05               	movwf	i2SetPin595@value,c
  8829  000450  ECA0  F00E         	call	i2_SetPin595	;wreg free
  8830                           
  8831                           ;PDU.c: 114: SetPin595(2, 4, OFF);
  8832  000454  0E00               	movlw	0
  8833  000456  6E02               	movwf	i2SetPin595@Reg+1,c
  8834  000458  0E02               	movlw	2
  8835  00045A  6E01               	movwf	i2SetPin595@Reg,c
  8836  00045C  0E00               	movlw	0
  8837  00045E  6E04               	movwf	i2SetPin595@pin+1,c
  8838  000460  0E04               	movlw	4
  8839  000462  6E03               	movwf	i2SetPin595@pin,c
  8840  000464  0E00               	movlw	0
  8841  000466  6E06               	movwf	i2SetPin595@value+1,c
  8842  000468  0E00               	movlw	0
  8843  00046A  6E05               	movwf	i2SetPin595@value,c
  8844  00046C  ECA0  F00E         	call	i2_SetPin595	;wreg free
  8845                           
  8846                           ;PDU.c: 115: SetPin595(2, 3, OFF);
  8847  000470  0E00               	movlw	0
  8848  000472  6E02               	movwf	i2SetPin595@Reg+1,c
  8849  000474  0E02               	movlw	2
  8850  000476  6E01               	movwf	i2SetPin595@Reg,c
  8851  000478  0E00               	movlw	0
  8852  00047A  6E04               	movwf	i2SetPin595@pin+1,c
  8853  00047C  0E03               	movlw	3
  8854  00047E  6E03               	movwf	i2SetPin595@pin,c
  8855  000480  0E00               	movlw	0
  8856  000482  6E06               	movwf	i2SetPin595@value+1,c
  8857  000484  0E00               	movlw	0
  8858  000486  6E05               	movwf	i2SetPin595@value,c
  8859  000488  ECA0  F00E         	call	i2_SetPin595	;wreg free
  8860                           
  8861                           ;PDU.c: 116: SetPin595(2, 2, OFF);
  8862  00048C  0E00               	movlw	0
  8863  00048E  6E02               	movwf	i2SetPin595@Reg+1,c
  8864  000490  0E02               	movlw	2
  8865  000492  6E01               	movwf	i2SetPin595@Reg,c
  8866  000494  0E00               	movlw	0
  8867  000496  6E04               	movwf	i2SetPin595@pin+1,c
  8868  000498  0E02               	movlw	2
  8869  00049A  6E03               	movwf	i2SetPin595@pin,c
  8870  00049C  0E00               	movlw	0
  8871  00049E  6E06               	movwf	i2SetPin595@value+1,c
  8872  0004A0  0E00               	movlw	0
  8873  0004A2  6E05               	movwf	i2SetPin595@value,c
  8874  0004A4  ECA0  F00E         	call	i2_SetPin595	;wreg free
  8875                           
  8876                           ;PDU.c: 117: SetPin595(3, 4, OFF);
  8877  0004A8  0E00               	movlw	0
  8878  0004AA  6E02               	movwf	i2SetPin595@Reg+1,c
  8879  0004AC  0E03               	movlw	3
  8880  0004AE  6E01               	movwf	i2SetPin595@Reg,c
  8881  0004B0  0E00               	movlw	0
  8882  0004B2  6E04               	movwf	i2SetPin595@pin+1,c
  8883  0004B4  0E04               	movlw	4
  8884  0004B6  6E03               	movwf	i2SetPin595@pin,c
  8885  0004B8  0E00               	movlw	0
  8886  0004BA  6E06               	movwf	i2SetPin595@value+1,c
  8887  0004BC  0E00               	movlw	0
  8888  0004BE  6E05               	movwf	i2SetPin595@value,c
  8889  0004C0  ECA0  F00E         	call	i2_SetPin595	;wreg free
  8890                           
  8891                           ;PDU.c: 118: SetPin595(3, 3, OFF);
  8892  0004C4  0E00               	movlw	0
  8893  0004C6  6E02               	movwf	i2SetPin595@Reg+1,c
  8894  0004C8  0E03               	movlw	3
  8895  0004CA  6E01               	movwf	i2SetPin595@Reg,c
  8896  0004CC  0E00               	movlw	0
  8897  0004CE  6E04               	movwf	i2SetPin595@pin+1,c
  8898  0004D0  0E03               	movlw	3
  8899  0004D2  6E03               	movwf	i2SetPin595@pin,c
  8900  0004D4  0E00               	movlw	0
  8901  0004D6  6E06               	movwf	i2SetPin595@value+1,c
  8902  0004D8  0E00               	movlw	0
  8903  0004DA  6E05               	movwf	i2SetPin595@value,c
  8904  0004DC  ECA0  F00E         	call	i2_SetPin595	;wreg free
  8905                           
  8906                           ;PDU.c: 119: SetPin595(3, 2, OFF);
  8907  0004E0  0E00               	movlw	0
  8908  0004E2  6E02               	movwf	i2SetPin595@Reg+1,c
  8909  0004E4  0E03               	movlw	3
  8910  0004E6  6E01               	movwf	i2SetPin595@Reg,c
  8911  0004E8  0E00               	movlw	0
  8912  0004EA  6E04               	movwf	i2SetPin595@pin+1,c
  8913  0004EC  0E02               	movlw	2
  8914  0004EE  6E03               	movwf	i2SetPin595@pin,c
  8915  0004F0  0E00               	movlw	0
  8916  0004F2  6E06               	movwf	i2SetPin595@value+1,c
  8917  0004F4  0E00               	movlw	0
  8918  0004F6  6E05               	movwf	i2SetPin595@value,c
  8919  0004F8  ECA0  F00E         	call	i2_SetPin595	;wreg free
  8920                           
  8921                           ;PDU.c: 120: Update();
  8922  0004FC  EC32  F011         	call	i2_Update	;wreg free
  8923                           
  8924                           ;PDU.c: 121: CurrentADC[4] = ADC_GetConversion(U10Multisense);
  8925  000500  0E17               	movlw	23
  8926  000502  ECDC  F00F         	call	_ADC_GetConversion
  8927  000506  C001  F0CF         	movff	?_ADC_GetConversion,_CurrentADC+8
  8928  00050A  C002  F0D0         	movff	?_ADC_GetConversion+1,_CurrentADC+9
  8929                           
  8930                           ;PDU.c: 123: }
  8931  00050E  0012               	return	
  8932  000510                     i2l3366:
  8933                           
  8934                           ;PDU.c: 124: else if(gather == 5){
  8935  000510  0E05               	movlw	5
  8936  000512  180E               	xorwf	ReadCurrent@gather,w,c
  8937  000514  A4D8               	btfss	status,2,c
  8938  000516  D088               	goto	i2l3372
  8939                           
  8940                           ;PDU.c: 126: SetPin595(1, 4, OFF);
  8941  000518  0E00               	movlw	0
  8942  00051A  6E02               	movwf	i2SetPin595@Reg+1,c
  8943  00051C  0E01               	movlw	1
  8944  00051E  6E01               	movwf	i2SetPin595@Reg,c
  8945  000520  0E00               	movlw	0
  8946  000522  6E04               	movwf	i2SetPin595@pin+1,c
  8947  000524  0E04               	movlw	4
  8948  000526  6E03               	movwf	i2SetPin595@pin,c
  8949  000528  0E00               	movlw	0
  8950  00052A  6E06               	movwf	i2SetPin595@value+1,c
  8951  00052C  0E00               	movlw	0
  8952  00052E  6E05               	movwf	i2SetPin595@value,c
  8953  000530  ECA0  F00E         	call	i2_SetPin595	;wreg free
  8954                           
  8955                           ;PDU.c: 127: SetPin595(1, 3, OFF);
  8956  000534  0E00               	movlw	0
  8957  000536  6E02               	movwf	i2SetPin595@Reg+1,c
  8958  000538  0E01               	movlw	1
  8959  00053A  6E01               	movwf	i2SetPin595@Reg,c
  8960  00053C  0E00               	movlw	0
  8961  00053E  6E04               	movwf	i2SetPin595@pin+1,c
  8962  000540  0E03               	movlw	3
  8963  000542  6E03               	movwf	i2SetPin595@pin,c
  8964  000544  0E00               	movlw	0
  8965  000546  6E06               	movwf	i2SetPin595@value+1,c
  8966  000548  0E00               	movlw	0
  8967  00054A  6E05               	movwf	i2SetPin595@value,c
  8968  00054C  ECA0  F00E         	call	i2_SetPin595	;wreg free
  8969                           
  8970                           ;PDU.c: 128: SetPin595(1, 2, OFF);
  8971  000550  0E00               	movlw	0
  8972  000552  6E02               	movwf	i2SetPin595@Reg+1,c
  8973  000554  0E01               	movlw	1
  8974  000556  6E01               	movwf	i2SetPin595@Reg,c
  8975  000558  0E00               	movlw	0
  8976  00055A  6E04               	movwf	i2SetPin595@pin+1,c
  8977  00055C  0E02               	movlw	2
  8978  00055E  6E03               	movwf	i2SetPin595@pin,c
  8979  000560  0E00               	movlw	0
  8980  000562  6E06               	movwf	i2SetPin595@value+1,c
  8981  000564  0E00               	movlw	0
  8982  000566  6E05               	movwf	i2SetPin595@value,c
  8983  000568  ECA0  F00E         	call	i2_SetPin595	;wreg free
  8984                           
  8985                           ;PDU.c: 129: SetPin595(2, 4, ON);
  8986  00056C  0E00               	movlw	0
  8987  00056E  6E02               	movwf	i2SetPin595@Reg+1,c
  8988  000570  0E02               	movlw	2
  8989  000572  6E01               	movwf	i2SetPin595@Reg,c
  8990  000574  0E00               	movlw	0
  8991  000576  6E04               	movwf	i2SetPin595@pin+1,c
  8992  000578  0E04               	movlw	4
  8993  00057A  6E03               	movwf	i2SetPin595@pin,c
  8994  00057C  0E00               	movlw	0
  8995  00057E  6E06               	movwf	i2SetPin595@value+1,c
  8996  000580  0E01               	movlw	1
  8997  000582  6E05               	movwf	i2SetPin595@value,c
  8998  000584  ECA0  F00E         	call	i2_SetPin595	;wreg free
  8999                           
  9000                           ;PDU.c: 130: SetPin595(2, 3, OFF);
  9001  000588  0E00               	movlw	0
  9002  00058A  6E02               	movwf	i2SetPin595@Reg+1,c
  9003  00058C  0E02               	movlw	2
  9004  00058E  6E01               	movwf	i2SetPin595@Reg,c
  9005  000590  0E00               	movlw	0
  9006  000592  6E04               	movwf	i2SetPin595@pin+1,c
  9007  000594  0E03               	movlw	3
  9008  000596  6E03               	movwf	i2SetPin595@pin,c
  9009  000598  0E00               	movlw	0
  9010  00059A  6E06               	movwf	i2SetPin595@value+1,c
  9011  00059C  0E00               	movlw	0
  9012  00059E  6E05               	movwf	i2SetPin595@value,c
  9013  0005A0  ECA0  F00E         	call	i2_SetPin595	;wreg free
  9014                           
  9015                           ;PDU.c: 131: SetPin595(2, 2, OFF);
  9016  0005A4  0E00               	movlw	0
  9017  0005A6  6E02               	movwf	i2SetPin595@Reg+1,c
  9018  0005A8  0E02               	movlw	2
  9019  0005AA  6E01               	movwf	i2SetPin595@Reg,c
  9020  0005AC  0E00               	movlw	0
  9021  0005AE  6E04               	movwf	i2SetPin595@pin+1,c
  9022  0005B0  0E02               	movlw	2
  9023  0005B2  6E03               	movwf	i2SetPin595@pin,c
  9024  0005B4  0E00               	movlw	0
  9025  0005B6  6E06               	movwf	i2SetPin595@value+1,c
  9026  0005B8  0E00               	movlw	0
  9027  0005BA  6E05               	movwf	i2SetPin595@value,c
  9028  0005BC  ECA0  F00E         	call	i2_SetPin595	;wreg free
  9029                           
  9030                           ;PDU.c: 132: SetPin595(3, 4, OFF);
  9031  0005C0  0E00               	movlw	0
  9032  0005C2  6E02               	movwf	i2SetPin595@Reg+1,c
  9033  0005C4  0E03               	movlw	3
  9034  0005C6  6E01               	movwf	i2SetPin595@Reg,c
  9035  0005C8  0E00               	movlw	0
  9036  0005CA  6E04               	movwf	i2SetPin595@pin+1,c
  9037  0005CC  0E04               	movlw	4
  9038  0005CE  6E03               	movwf	i2SetPin595@pin,c
  9039  0005D0  0E00               	movlw	0
  9040  0005D2  6E06               	movwf	i2SetPin595@value+1,c
  9041  0005D4  0E00               	movlw	0
  9042  0005D6  6E05               	movwf	i2SetPin595@value,c
  9043  0005D8  ECA0  F00E         	call	i2_SetPin595	;wreg free
  9044                           
  9045                           ;PDU.c: 133: SetPin595(3, 3, OFF);
  9046  0005DC  0E00               	movlw	0
  9047  0005DE  6E02               	movwf	i2SetPin595@Reg+1,c
  9048  0005E0  0E03               	movlw	3
  9049  0005E2  6E01               	movwf	i2SetPin595@Reg,c
  9050  0005E4  0E00               	movlw	0
  9051  0005E6  6E04               	movwf	i2SetPin595@pin+1,c
  9052  0005E8  0E03               	movlw	3
  9053  0005EA  6E03               	movwf	i2SetPin595@pin,c
  9054  0005EC  0E00               	movlw	0
  9055  0005EE  6E06               	movwf	i2SetPin595@value+1,c
  9056  0005F0  0E00               	movlw	0
  9057  0005F2  6E05               	movwf	i2SetPin595@value,c
  9058  0005F4  ECA0  F00E         	call	i2_SetPin595	;wreg free
  9059                           
  9060                           ;PDU.c: 134: SetPin595(3, 2, OFF);
  9061  0005F8  0E00               	movlw	0
  9062  0005FA  6E02               	movwf	i2SetPin595@Reg+1,c
  9063  0005FC  0E03               	movlw	3
  9064  0005FE  6E01               	movwf	i2SetPin595@Reg,c
  9065  000600  0E00               	movlw	0
  9066  000602  6E04               	movwf	i2SetPin595@pin+1,c
  9067  000604  0E02               	movlw	2
  9068  000606  6E03               	movwf	i2SetPin595@pin,c
  9069  000608  0E00               	movlw	0
  9070  00060A  6E06               	movwf	i2SetPin595@value+1,c
  9071  00060C  0E00               	movlw	0
  9072  00060E  6E05               	movwf	i2SetPin595@value,c
  9073  000610  ECA0  F00E         	call	i2_SetPin595	;wreg free
  9074                           
  9075                           ;PDU.c: 135: Update();
  9076  000614  EC32  F011         	call	i2_Update	;wreg free
  9077                           
  9078                           ;PDU.c: 136: CurrentADC[3] = ADC_GetConversion(U8Multisense);
  9079  000618  0E16               	movlw	22
  9080  00061A  ECDC  F00F         	call	_ADC_GetConversion
  9081  00061E  C001  F0CD         	movff	?_ADC_GetConversion,_CurrentADC+6
  9082  000622  C002  F0CE         	movff	?_ADC_GetConversion+1,_CurrentADC+7
  9083                           
  9084                           ;PDU.c: 138: }
  9085  000626  0012               	return	
  9086  000628                     i2l3372:
  9087                           
  9088                           ;PDU.c: 139: else if(gather == 6){
  9089  000628  0E06               	movlw	6
  9090  00062A  180E               	xorwf	ReadCurrent@gather,w,c
  9091  00062C  A4D8               	btfss	status,2,c
  9092  00062E  0012               	return	
  9093                           
  9094                           ;PDU.c: 141: SetPin595(1, 4, OFF);
  9095  000630  0E00               	movlw	0
  9096  000632  6E02               	movwf	i2SetPin595@Reg+1,c
  9097  000634  0E01               	movlw	1
  9098  000636  6E01               	movwf	i2SetPin595@Reg,c
  9099  000638  0E00               	movlw	0
  9100  00063A  6E04               	movwf	i2SetPin595@pin+1,c
  9101  00063C  0E04               	movlw	4
  9102  00063E  6E03               	movwf	i2SetPin595@pin,c
  9103  000640  0E00               	movlw	0
  9104  000642  6E06               	movwf	i2SetPin595@value+1,c
  9105  000644  0E00               	movlw	0
  9106  000646  6E05               	movwf	i2SetPin595@value,c
  9107  000648  ECA0  F00E         	call	i2_SetPin595	;wreg free
  9108                           
  9109                           ;PDU.c: 142: SetPin595(1, 3, OFF);
  9110  00064C  0E00               	movlw	0
  9111  00064E  6E02               	movwf	i2SetPin595@Reg+1,c
  9112  000650  0E01               	movlw	1
  9113  000652  6E01               	movwf	i2SetPin595@Reg,c
  9114  000654  0E00               	movlw	0
  9115  000656  6E04               	movwf	i2SetPin595@pin+1,c
  9116  000658  0E03               	movlw	3
  9117  00065A  6E03               	movwf	i2SetPin595@pin,c
  9118  00065C  0E00               	movlw	0
  9119  00065E  6E06               	movwf	i2SetPin595@value+1,c
  9120  000660  0E00               	movlw	0
  9121  000662  6E05               	movwf	i2SetPin595@value,c
  9122  000664  ECA0  F00E         	call	i2_SetPin595	;wreg free
  9123                           
  9124                           ;PDU.c: 143: SetPin595(1, 2, OFF);
  9125  000668  0E00               	movlw	0
  9126  00066A  6E02               	movwf	i2SetPin595@Reg+1,c
  9127  00066C  0E01               	movlw	1
  9128  00066E  6E01               	movwf	i2SetPin595@Reg,c
  9129  000670  0E00               	movlw	0
  9130  000672  6E04               	movwf	i2SetPin595@pin+1,c
  9131  000674  0E02               	movlw	2
  9132  000676  6E03               	movwf	i2SetPin595@pin,c
  9133  000678  0E00               	movlw	0
  9134  00067A  6E06               	movwf	i2SetPin595@value+1,c
  9135  00067C  0E00               	movlw	0
  9136  00067E  6E05               	movwf	i2SetPin595@value,c
  9137  000680  ECA0  F00E         	call	i2_SetPin595	;wreg free
  9138                           
  9139                           ;PDU.c: 144: SetPin595(2, 4, OFF);
  9140  000684  0E00               	movlw	0
  9141  000686  6E02               	movwf	i2SetPin595@Reg+1,c
  9142  000688  0E02               	movlw	2
  9143  00068A  6E01               	movwf	i2SetPin595@Reg,c
  9144  00068C  0E00               	movlw	0
  9145  00068E  6E04               	movwf	i2SetPin595@pin+1,c
  9146  000690  0E04               	movlw	4
  9147  000692  6E03               	movwf	i2SetPin595@pin,c
  9148  000694  0E00               	movlw	0
  9149  000696  6E06               	movwf	i2SetPin595@value+1,c
  9150  000698  0E00               	movlw	0
  9151  00069A  6E05               	movwf	i2SetPin595@value,c
  9152  00069C  ECA0  F00E         	call	i2_SetPin595	;wreg free
  9153                           
  9154                           ;PDU.c: 145: SetPin595(2, 3, OFF);
  9155  0006A0  0E00               	movlw	0
  9156  0006A2  6E02               	movwf	i2SetPin595@Reg+1,c
  9157  0006A4  0E02               	movlw	2
  9158  0006A6  6E01               	movwf	i2SetPin595@Reg,c
  9159  0006A8  0E00               	movlw	0
  9160  0006AA  6E04               	movwf	i2SetPin595@pin+1,c
  9161  0006AC  0E03               	movlw	3
  9162  0006AE  6E03               	movwf	i2SetPin595@pin,c
  9163  0006B0  0E00               	movlw	0
  9164  0006B2  6E06               	movwf	i2SetPin595@value+1,c
  9165  0006B4  0E00               	movlw	0
  9166  0006B6  6E05               	movwf	i2SetPin595@value,c
  9167  0006B8  ECA0  F00E         	call	i2_SetPin595	;wreg free
  9168                           
  9169                           ;PDU.c: 146: SetPin595(2, 2, OFF);
  9170  0006BC  0E00               	movlw	0
  9171  0006BE  6E02               	movwf	i2SetPin595@Reg+1,c
  9172  0006C0  0E02               	movlw	2
  9173  0006C2  6E01               	movwf	i2SetPin595@Reg,c
  9174  0006C4  0E00               	movlw	0
  9175  0006C6  6E04               	movwf	i2SetPin595@pin+1,c
  9176  0006C8  0E02               	movlw	2
  9177  0006CA  6E03               	movwf	i2SetPin595@pin,c
  9178  0006CC  0E00               	movlw	0
  9179  0006CE  6E06               	movwf	i2SetPin595@value+1,c
  9180  0006D0  0E00               	movlw	0
  9181  0006D2  6E05               	movwf	i2SetPin595@value,c
  9182  0006D4  ECA0  F00E         	call	i2_SetPin595	;wreg free
  9183                           
  9184                           ;PDU.c: 147: SetPin595(3, 4, ON);
  9185  0006D8  0E00               	movlw	0
  9186  0006DA  6E02               	movwf	i2SetPin595@Reg+1,c
  9187  0006DC  0E03               	movlw	3
  9188  0006DE  6E01               	movwf	i2SetPin595@Reg,c
  9189  0006E0  0E00               	movlw	0
  9190  0006E2  6E04               	movwf	i2SetPin595@pin+1,c
  9191  0006E4  0E04               	movlw	4
  9192  0006E6  6E03               	movwf	i2SetPin595@pin,c
  9193  0006E8  0E00               	movlw	0
  9194  0006EA  6E06               	movwf	i2SetPin595@value+1,c
  9195  0006EC  0E01               	movlw	1
  9196  0006EE  6E05               	movwf	i2SetPin595@value,c
  9197  0006F0  ECA0  F00E         	call	i2_SetPin595	;wreg free
  9198                           
  9199                           ;PDU.c: 148: SetPin595(3, 3, ON);
  9200  0006F4  0E00               	movlw	0
  9201  0006F6  6E02               	movwf	i2SetPin595@Reg+1,c
  9202  0006F8  0E03               	movlw	3
  9203  0006FA  6E01               	movwf	i2SetPin595@Reg,c
  9204  0006FC  0E00               	movlw	0
  9205  0006FE  6E04               	movwf	i2SetPin595@pin+1,c
  9206  000700  0E03               	movlw	3
  9207  000702  6E03               	movwf	i2SetPin595@pin,c
  9208  000704  0E00               	movlw	0
  9209  000706  6E06               	movwf	i2SetPin595@value+1,c
  9210  000708  0E01               	movlw	1
  9211  00070A  6E05               	movwf	i2SetPin595@value,c
  9212  00070C  ECA0  F00E         	call	i2_SetPin595	;wreg free
  9213                           
  9214                           ;PDU.c: 149: SetPin595(3, 2, OFF);
  9215  000710  0E00               	movlw	0
  9216  000712  6E02               	movwf	i2SetPin595@Reg+1,c
  9217  000714  0E03               	movlw	3
  9218  000716  6E01               	movwf	i2SetPin595@Reg,c
  9219  000718  0E00               	movlw	0
  9220  00071A  6E04               	movwf	i2SetPin595@pin+1,c
  9221  00071C  0E02               	movlw	2
  9222  00071E  6E03               	movwf	i2SetPin595@pin,c
  9223  000720  0E00               	movlw	0
  9224  000722  6E06               	movwf	i2SetPin595@value+1,c
  9225  000724  0E00               	movlw	0
  9226  000726  6E05               	movwf	i2SetPin595@value,c
  9227  000728  ECA0  F00E         	call	i2_SetPin595	;wreg free
  9228                           
  9229                           ;PDU.c: 150: Update();
  9230  00072C  EC32  F011         	call	i2_Update	;wreg free
  9231                           
  9232                           ;PDU.c: 151: CurrentADC[0] = ADC_GetConversion(U5Multisense);
  9233  000730  0E10               	movlw	16
  9234  000732  ECDC  F00F         	call	_ADC_GetConversion
  9235  000736  C001  F0C7         	movff	?_ADC_GetConversion,_CurrentADC
  9236  00073A  C002  F0C8         	movff	?_ADC_GetConversion+1,_CurrentADC+1
  9237  00073E  0012               	return	
  9238  000740                     __end_of_ReadCurrent:
  9239                           	opt stack 0
  9240                           pclatu	equ	0xFFB
  9241                           pclath	equ	0xFFA
  9242                           tblptru	equ	0xFF8
  9243                           tblptrh	equ	0xFF7
  9244                           tblptrl	equ	0xFF6
  9245                           tablat	equ	0xFF5
  9246                           prodh	equ	0xFF4
  9247                           prodl	equ	0xFF3
  9248                           intcon	equ	0xFF2
  9249                           intcon2	equ	0xFF1
  9250                           postinc0	equ	0xFEE
  9251                           fsr0h	equ	0xFEA
  9252                           fsr0l	equ	0xFE9
  9253                           wreg	equ	0xFE8
  9254                           indf1	equ	0xFE7
  9255                           postdec1	equ	0xFE5
  9256                           fsr1h	equ	0xFE2
  9257                           fsr1l	equ	0xFE1
  9258                           indf2	equ	0xFDF
  9259                           postinc2	equ	0xFDE
  9260                           postdec2	equ	0xFDD
  9261                           plusw2	equ	0xFDB
  9262                           fsr2h	equ	0xFDA
  9263                           fsr2l	equ	0xFD9
  9264                           status	equ	0xFD8
  9265                           
  9266 ;; *************** function i2_Update *****************
  9267 ;; Defined at:
  9268 ;;		line 225 in file "PDU.c"
  9269 ;; Parameters:    Size  Location     Type
  9270 ;;		None
  9271 ;; Auto vars:     Size  Location     Type
  9272 ;;		None
  9273 ;; Return value:  Size  Location     Type
  9274 ;;                  1    wreg      void 
  9275 ;; Registers used:
  9276 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9277 ;; Tracked objects:
  9278 ;;		On entry : 0/0
  9279 ;;		On exit  : 0/0
  9280 ;;		Unchanged: 0/0
  9281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9282 ;;      Params:         0       0       0       0       0       0       0
  9283 ;;      Locals:         0       0       0       0       0       0       0
  9284 ;;      Temps:          0       0       0       0       0       0       0
  9285 ;;      Totals:         0       0       0       0       0       0       0
  9286 ;;Total ram usage:        0 bytes
  9287 ;; Hardware stack levels used:    1
  9288 ;; Hardware stack levels required when called:    2
  9289 ;; This function calls:
  9290 ;;		i2_writeRegisters
  9291 ;; This function is called by:
  9292 ;;		_ReadCurrent
  9293 ;; This function uses a non-reentrant model
  9294 ;;
  9295                           
  9296                           	psect	text54
  9297  002264                     __ptext54:
  9298                           	opt stack 0
  9299  002264                     i2_Update:
  9300                           	opt stack 18
  9301                           
  9302                           ;PDU.c: 226: writeRegisters();
  9303                           
  9304                           ;incstack = 0
  9305  002264  ECCE  F00C         	call	i2_writeRegisters	;wreg free
  9306  002268  0012               	return		;funcret
  9307  00226A                     __end_ofi2_Update:
  9308                           	opt stack 0
  9309                           pclatu	equ	0xFFB
  9310                           pclath	equ	0xFFA
  9311                           tblptru	equ	0xFF8
  9312                           tblptrh	equ	0xFF7
  9313                           tblptrl	equ	0xFF6
  9314                           tablat	equ	0xFF5
  9315                           prodh	equ	0xFF4
  9316                           prodl	equ	0xFF3
  9317                           intcon	equ	0xFF2
  9318                           intcon2	equ	0xFF1
  9319                           postinc0	equ	0xFEE
  9320                           fsr0h	equ	0xFEA
  9321                           fsr0l	equ	0xFE9
  9322                           wreg	equ	0xFE8
  9323                           indf1	equ	0xFE7
  9324                           postdec1	equ	0xFE5
  9325                           fsr1h	equ	0xFE2
  9326                           fsr1l	equ	0xFE1
  9327                           indf2	equ	0xFDF
  9328                           postinc2	equ	0xFDE
  9329                           postdec2	equ	0xFDD
  9330                           plusw2	equ	0xFDB
  9331                           fsr2h	equ	0xFDA
  9332                           fsr2l	equ	0xFD9
  9333                           status	equ	0xFD8
  9334                           
  9335 ;; *************** function i2_writeRegisters *****************
  9336 ;; Defined at:
  9337 ;;		line 50 in file "Shift595.c"
  9338 ;; Parameters:    Size  Location     Type
  9339 ;;		None
  9340 ;; Auto vars:     Size  Location     Type
  9341 ;;  writeRegiste    2   11[COMRAM] int 
  9342 ;;  writeRegiste    2    9[COMRAM] int 
  9343 ;; Return value:  Size  Location     Type
  9344 ;;                  1    wreg      void 
  9345 ;; Registers used:
  9346 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9347 ;; Tracked objects:
  9348 ;;		On entry : 0/0
  9349 ;;		On exit  : 0/0
  9350 ;;		Unchanged: 0/0
  9351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9352 ;;      Params:         0       0       0       0       0       0       0
  9353 ;;      Locals:         4       0       0       0       0       0       0
  9354 ;;      Temps:          0       0       0       0       0       0       0
  9355 ;;      Totals:         4       0       0       0       0       0       0
  9356 ;;Total ram usage:        4 bytes
  9357 ;; Hardware stack levels used:    1
  9358 ;; Hardware stack levels required when called:    1
  9359 ;; This function calls:
  9360 ;;		i2_Delay
  9361 ;; This function is called by:
  9362 ;;		i2_Update
  9363 ;; This function uses a non-reentrant model
  9364 ;;
  9365                           
  9366                           	psect	text55
  9367  00199C                     __ptext55:
  9368                           	opt stack 0
  9369  00199C                     i2_writeRegisters:
  9370                           	opt stack 18
  9371                           
  9372                           ;Shift595.c: 51: int val = 0;
  9373                           
  9374                           ;incstack = 0
  9375  00199C  0E00               	movlw	0
  9376  00199E  6E0B               	movwf	i2writeRegisters@val+1,c
  9377  0019A0  0E00               	movlw	0
  9378  0019A2  6E0A               	movwf	i2writeRegisters@val,c
  9379                           
  9380                           ;Shift595.c: 52: for (int i = 3 * 8 - 1; i >= 0; i--) {
  9381  0019A4  0E00               	movlw	0
  9382  0019A6  6E0D               	movwf	i2writeRegisters@i+1,c
  9383  0019A8  0E17               	movlw	23
  9384  0019AA  6E0C               	movwf	i2writeRegisters@i,c
  9385  0019AC                     i2l3016:
  9386  0019AC  BE0D               	btfsc	i2writeRegisters@i+1,7,c
  9387  0019AE  D01D               	goto	i2l548
  9388                           
  9389                           ;Shift595.c: 53: do { LATD7 = 0; } while(0);
  9390  0019B0  9E8C               	bcf	3980,7,c	;volatile
  9391                           
  9392                           ;Shift595.c: 55: val = registers[i];
  9393  0019B2  90D8               	bcf	status,0,c
  9394  0019B4  340C               	rlcf	i2writeRegisters@i,w,c
  9395  0019B6  6ED9               	movwf	fsr2l,c
  9396  0019B8  340D               	rlcf	i2writeRegisters@i+1,w,c
  9397  0019BA  6EDA               	movwf	fsr2h,c
  9398  0019BC  0E00               	movlw	low _registers
  9399  0019BE  26D9               	addwf	fsr2l,f,c
  9400  0019C0  0E01               	movlw	high _registers
  9401  0019C2  22DA               	addwfc	fsr2h,f,c
  9402  0019C4  CFDE F00A          	movff	postinc2,i2writeRegisters@val
  9403  0019C8  CFDD F00B          	movff	postdec2,i2writeRegisters@val+1
  9404                           
  9405                           ;Shift595.c: 56: if (val == 1) {
  9406  0019CC  040A               	decf	i2writeRegisters@val,w,c
  9407  0019CE  100B               	iorwf	i2writeRegisters@val+1,w,c
  9408  0019D0  A4D8               	btfss	status,2,c
  9409  0019D2  D002               	goto	i2l3024
  9410                           
  9411                           ;Shift595.c: 57: do { LATD4 = 1; } while(0);
  9412  0019D4  888C               	bsf	3980,4,c	;volatile
  9413                           
  9414                           ;Shift595.c: 58: } else if (val == 0) {
  9415  0019D6  D004               	goto	i2l546
  9416  0019D8                     i2l3024:
  9417  0019D8  500A               	movf	i2writeRegisters@val,w,c
  9418  0019DA  100B               	iorwf	i2writeRegisters@val+1,w,c
  9419  0019DC  B4D8               	btfsc	status,2,c
  9420                           
  9421                           ;Shift595.c: 59: do { LATD4 = 0; } while(0);
  9422  0019DE  988C               	bcf	3980,4,c	;volatile
  9423  0019E0                     i2l546:
  9424  0019E0  8E8C               	bsf	3980,7,c	;volatile
  9425  0019E2  060C               	decf	i2writeRegisters@i,f,c
  9426  0019E4  A0D8               	btfss	status,0,c
  9427  0019E6  060D               	decf	i2writeRegisters@i+1,f,c
  9428  0019E8  D7E1               	goto	i2l3016
  9429  0019EA                     i2l548:
  9430  0019EA  9E8C               	bcf	3980,7,c	;volatile
  9431                           
  9432                           ;Shift595.c: 67: Delay(1);
  9433  0019EC  0E01               	movlw	1
  9434  0019EE  6E01               	movwf	i2Delay@wait,c
  9435  0019F0  0E00               	movlw	0
  9436  0019F2  6E02               	movwf	i2Delay@wait+1,c
  9437  0019F4  0E00               	movlw	0
  9438  0019F6  6E03               	movwf	i2Delay@wait+2,c
  9439  0019F8  0E00               	movlw	0
  9440  0019FA  6E04               	movwf	i2Delay@wait+3,c
  9441  0019FC  EC11  F00F         	call	i2_Delay	;wreg free
  9442                           
  9443                           ;Shift595.c: 68: do { LATD6 = 1; } while(0);
  9444  001A00  8C8C               	bsf	3980,6,c	;volatile
  9445                           
  9446                           ;Shift595.c: 69: Delay(1);
  9447  001A02  0E01               	movlw	1
  9448  001A04  6E01               	movwf	i2Delay@wait,c
  9449  001A06  0E00               	movlw	0
  9450  001A08  6E02               	movwf	i2Delay@wait+1,c
  9451  001A0A  0E00               	movlw	0
  9452  001A0C  6E03               	movwf	i2Delay@wait+2,c
  9453  001A0E  0E00               	movlw	0
  9454  001A10  6E04               	movwf	i2Delay@wait+3,c
  9455  001A12  EC11  F00F         	call	i2_Delay	;wreg free
  9456                           
  9457                           ;Shift595.c: 70: do { LATD6 = 0; } while(0);
  9458  001A16  9C8C               	bcf	3980,6,c	;volatile
  9459  001A18  0012               	return	
  9460  001A1A                     __end_ofi2_writeRegisters:
  9461                           	opt stack 0
  9462                           pclatu	equ	0xFFB
  9463                           pclath	equ	0xFFA
  9464                           tblptru	equ	0xFF8
  9465                           tblptrh	equ	0xFF7
  9466                           tblptrl	equ	0xFF6
  9467                           tablat	equ	0xFF5
  9468                           prodh	equ	0xFF4
  9469                           prodl	equ	0xFF3
  9470                           intcon	equ	0xFF2
  9471                           intcon2	equ	0xFF1
  9472                           postinc0	equ	0xFEE
  9473                           fsr0h	equ	0xFEA
  9474                           fsr0l	equ	0xFE9
  9475                           wreg	equ	0xFE8
  9476                           indf1	equ	0xFE7
  9477                           postdec1	equ	0xFE5
  9478                           fsr1h	equ	0xFE2
  9479                           fsr1l	equ	0xFE1
  9480                           indf2	equ	0xFDF
  9481                           postinc2	equ	0xFDE
  9482                           postdec2	equ	0xFDD
  9483                           plusw2	equ	0xFDB
  9484                           fsr2h	equ	0xFDA
  9485                           fsr2l	equ	0xFD9
  9486                           status	equ	0xFD8
  9487                           
  9488 ;; *************** function i2_Delay *****************
  9489 ;; Defined at:
  9490 ;;		line 9 in file "Functions.c"
  9491 ;; Parameters:    Size  Location     Type
  9492 ;;  wait            4    0[COMRAM] long 
  9493 ;; Auto vars:     Size  Location     Type
  9494 ;;  Delay           4    5[COMRAM] long 
  9495 ;; Return value:  Size  Location     Type
  9496 ;;                  1    wreg      void 
  9497 ;; Registers used:
  9498 ;;		wreg, status,2, status,0
  9499 ;; Tracked objects:
  9500 ;;		On entry : 0/0
  9501 ;;		On exit  : 0/0
  9502 ;;		Unchanged: 0/0
  9503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9504 ;;      Params:         4       0       0       0       0       0       0
  9505 ;;      Locals:         4       0       0       0       0       0       0
  9506 ;;      Temps:          1       0       0       0       0       0       0
  9507 ;;      Totals:         9       0       0       0       0       0       0
  9508 ;;Total ram usage:        9 bytes
  9509 ;; Hardware stack levels used:    1
  9510 ;; This function calls:
  9511 ;;		Nothing
  9512 ;; This function is called by:
  9513 ;;		i2_writeRegisters
  9514 ;; This function uses a non-reentrant model
  9515 ;;
  9516                           
  9517                           	psect	text56
  9518  001E22                     __ptext56:
  9519                           	opt stack 0
  9520  001E22                     i2_Delay:
  9521                           	opt stack 18
  9522                           
  9523                           ;Functions.c: 10: long int i = 0;
  9524                           
  9525                           ;incstack = 0
  9526  001E22  0E00               	movlw	0
  9527  001E24  6E06               	movwf	i2Delay@i,c
  9528  001E26  0E00               	movlw	0
  9529  001E28  6E07               	movwf	i2Delay@i+1,c
  9530  001E2A  0E00               	movlw	0
  9531  001E2C  6E08               	movwf	i2Delay@i+2,c
  9532  001E2E  0E00               	movlw	0
  9533  001E30  6E09               	movwf	i2Delay@i+3,c
  9534                           
  9535                           ;Functions.c: 11: for (; wait > i; i++) {
  9536  001E32  D00D               	goto	i2l2870
  9537  001E34                     i2l2866:
  9538                           
  9539                           ;Functions.c: 12: _delay((unsigned long)((1)*(8000000/4000.0)));
  9540  001E34  0E03               	movlw	3
  9541  001E36  6E05               	movwf	??i2_Delay& (0+255),c
  9542  001E38  0E98               	movlw	152
  9543  001E3A                     i2u309_47:
  9544  001E3A  2EE8               	decfsz	wreg,f,c
  9545  001E3C  D7FE               	bra	i2u309_47
  9546  001E3E  2E05               	decfsz	??i2_Delay& (0+255),f,c
  9547  001E40  D7FC               	bra	i2u309_47
  9548  001E42  0E01               	movlw	1
  9549  001E44  2606               	addwf	i2Delay@i,f,c
  9550  001E46  0E00               	movlw	0
  9551  001E48  2207               	addwfc	i2Delay@i+1,f,c
  9552  001E4A  2208               	addwfc	i2Delay@i+2,f,c
  9553  001E4C  2209               	addwfc	i2Delay@i+3,f,c
  9554  001E4E                     i2l2870:
  9555  001E4E  5001               	movf	i2Delay@wait,w,c
  9556  001E50  5C06               	subwf	i2Delay@i,w,c
  9557  001E52  5002               	movf	i2Delay@wait+1,w,c
  9558  001E54  5807               	subwfb	i2Delay@i+1,w,c
  9559  001E56  5003               	movf	i2Delay@wait+2,w,c
  9560  001E58  5808               	subwfb	i2Delay@i+2,w,c
  9561  001E5A  5009               	movf	i2Delay@i+3,w,c
  9562  001E5C  0A80               	xorlw	128
  9563  001E5E  6E05               	movwf	??i2_Delay& (0+255),c
  9564  001E60  5004               	movf	i2Delay@wait+3,w,c
  9565  001E62  0A80               	xorlw	128
  9566  001E64  5805               	subwfb	??i2_Delay& (0+255),w,c
  9567  001E66  B0D8               	btfsc	status,0,c
  9568  001E68  0012               	return	
  9569  001E6A  D7E4               	goto	i2l2866
  9570  001E6C                     __end_ofi2_Delay:
  9571                           	opt stack 0
  9572                           pclatu	equ	0xFFB
  9573                           pclath	equ	0xFFA
  9574                           tblptru	equ	0xFF8
  9575                           tblptrh	equ	0xFF7
  9576                           tblptrl	equ	0xFF6
  9577                           tablat	equ	0xFF5
  9578                           prodh	equ	0xFF4
  9579                           prodl	equ	0xFF3
  9580                           intcon	equ	0xFF2
  9581                           intcon2	equ	0xFF1
  9582                           postinc0	equ	0xFEE
  9583                           fsr0h	equ	0xFEA
  9584                           fsr0l	equ	0xFE9
  9585                           wreg	equ	0xFE8
  9586                           indf1	equ	0xFE7
  9587                           postdec1	equ	0xFE5
  9588                           fsr1h	equ	0xFE2
  9589                           fsr1l	equ	0xFE1
  9590                           indf2	equ	0xFDF
  9591                           postinc2	equ	0xFDE
  9592                           postdec2	equ	0xFDD
  9593                           plusw2	equ	0xFDB
  9594                           fsr2h	equ	0xFDA
  9595                           fsr2l	equ	0xFD9
  9596                           status	equ	0xFD8
  9597                           
  9598 ;; *************** function i2_SetPin595 *****************
  9599 ;; Defined at:
  9600 ;;		line 32 in file "Shift595.c"
  9601 ;; Parameters:    Size  Location     Type
  9602 ;;  Reg             2    0[COMRAM] int 
  9603 ;;  pin             2    2[COMRAM] int 
  9604 ;;  value           2    4[COMRAM] int 
  9605 ;; Auto vars:     Size  Location     Type
  9606 ;;		None
  9607 ;; Return value:  Size  Location     Type
  9608 ;;                  1    wreg      void 
  9609 ;; Registers used:
  9610 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9611 ;; Tracked objects:
  9612 ;;		On entry : 0/0
  9613 ;;		On exit  : 0/0
  9614 ;;		Unchanged: 0/0
  9615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9616 ;;      Params:         6       0       0       0       0       0       0
  9617 ;;      Locals:         0       0       0       0       0       0       0
  9618 ;;      Temps:          4       0       0       0       0       0       0
  9619 ;;      Totals:        10       0       0       0       0       0       0
  9620 ;;Total ram usage:       10 bytes
  9621 ;; Hardware stack levels used:    1
  9622 ;; This function calls:
  9623 ;;		Nothing
  9624 ;; This function is called by:
  9625 ;;		_ReadCurrent
  9626 ;; This function uses a non-reentrant model
  9627 ;;
  9628                           
  9629                           	psect	text57
  9630  001D40                     __ptext57:
  9631                           	opt stack 0
  9632  001D40                     i2_SetPin595:
  9633                           	opt stack 20
  9634                           
  9635                           ;Shift595.c: 33: registers[((Reg - 1)*8) + pin] = value;
  9636                           
  9637                           ;incstack = 0
  9638  001D40  0EF0               	movlw	240
  9639  001D42  6E07               	movwf	??i2_SetPin595& (0+255),c
  9640  001D44  0EFF               	movlw	255
  9641  001D46  6E08               	movwf	(??i2_SetPin595+1)& (0+255),c
  9642  001D48  C001  F009         	movff	i2SetPin595@Reg,??i2_SetPin595+2
  9643  001D4C  C002  F00A         	movff	i2SetPin595@Reg+1,??i2_SetPin595+3
  9644  001D50  90D8               	bcf	status,0,c
  9645  001D52  3609               	rlcf	??i2_SetPin595+2,f,c
  9646  001D54  360A               	rlcf	??i2_SetPin595+3,f,c
  9647  001D56  90D8               	bcf	status,0,c
  9648  001D58  3609               	rlcf	??i2_SetPin595+2,f,c
  9649  001D5A  360A               	rlcf	??i2_SetPin595+3,f,c
  9650  001D5C  90D8               	bcf	status,0,c
  9651  001D5E  3609               	rlcf	??i2_SetPin595+2,f,c
  9652  001D60  360A               	rlcf	??i2_SetPin595+3,f,c
  9653  001D62  5003               	movf	i2SetPin595@pin,w,c
  9654  001D64  2609               	addwf	??i2_SetPin595+2,f,c
  9655  001D66  5004               	movf	i2SetPin595@pin+1,w,c
  9656  001D68  220A               	addwfc	??i2_SetPin595+3,f,c
  9657  001D6A  90D8               	bcf	status,0,c
  9658  001D6C  3609               	rlcf	??i2_SetPin595+2,f,c
  9659  001D6E  360A               	rlcf	??i2_SetPin595+3,f,c
  9660  001D70  5007               	movf	??i2_SetPin595,w,c
  9661  001D72  2609               	addwf	??i2_SetPin595+2,f,c
  9662  001D74  5008               	movf	??i2_SetPin595+1,w,c
  9663  001D76  220A               	addwfc	??i2_SetPin595+3,f,c
  9664  001D78  0E00               	movlw	low _registers
  9665  001D7A  2409               	addwf	??i2_SetPin595+2,w,c
  9666  001D7C  6ED9               	movwf	fsr2l,c
  9667  001D7E  0E01               	movlw	high _registers
  9668  001D80  200A               	addwfc	??i2_SetPin595+3,w,c
  9669  001D82  6EDA               	movwf	fsr2h,c
  9670  001D84  C005  FFDE         	movff	i2SetPin595@value,postinc2
  9671  001D88  C006  FFDD         	movff	i2SetPin595@value+1,postdec2
  9672  001D8C  0012               	return		;funcret
  9673  001D8E                     __end_ofi2_SetPin595:
  9674                           	opt stack 0
  9675                           pclatu	equ	0xFFB
  9676                           pclath	equ	0xFFA
  9677                           tblptru	equ	0xFF8
  9678                           tblptrh	equ	0xFF7
  9679                           tblptrl	equ	0xFF6
  9680                           tablat	equ	0xFF5
  9681                           prodh	equ	0xFF4
  9682                           prodl	equ	0xFF3
  9683                           intcon	equ	0xFF2
  9684                           intcon2	equ	0xFF1
  9685                           postinc0	equ	0xFEE
  9686                           fsr0h	equ	0xFEA
  9687                           fsr0l	equ	0xFE9
  9688                           wreg	equ	0xFE8
  9689                           indf1	equ	0xFE7
  9690                           postdec1	equ	0xFE5
  9691                           fsr1h	equ	0xFE2
  9692                           fsr1l	equ	0xFE1
  9693                           indf2	equ	0xFDF
  9694                           postinc2	equ	0xFDE
  9695                           postdec2	equ	0xFDD
  9696                           plusw2	equ	0xFDB
  9697                           fsr2h	equ	0xFDA
  9698                           fsr2l	equ	0xFD9
  9699                           status	equ	0xFD8
  9700                           
  9701 ;; *************** function _ADC_GetConversion *****************
  9702 ;; Defined at:
  9703 ;;		line 109 in file "mcc_generated_files/adc.c"
  9704 ;; Parameters:    Size  Location     Type
  9705 ;;  channel         1    wreg     enum E6965
  9706 ;; Auto vars:     Size  Location     Type
  9707 ;;  channel         1    4[COMRAM] enum E6965
  9708 ;; Return value:  Size  Location     Type
  9709 ;;                  2    0[COMRAM] unsigned int 
  9710 ;; Registers used:
  9711 ;;		wreg, status,2, status,0
  9712 ;; Tracked objects:
  9713 ;;		On entry : 0/0
  9714 ;;		On exit  : 0/0
  9715 ;;		Unchanged: 0/0
  9716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9717 ;;      Params:         2       0       0       0       0       0       0
  9718 ;;      Locals:         1       0       0       0       0       0       0
  9719 ;;      Temps:          2       0       0       0       0       0       0
  9720 ;;      Totals:         5       0       0       0       0       0       0
  9721 ;;Total ram usage:        5 bytes
  9722 ;; Hardware stack levels used:    1
  9723 ;; This function calls:
  9724 ;;		Nothing
  9725 ;; This function is called by:
  9726 ;;		_ReadCurrent
  9727 ;; This function uses a non-reentrant model
  9728 ;;
  9729                           
  9730                           	psect	text58
  9731  001FB8                     __ptext58:
  9732                           	opt stack 0
  9733  001FB8                     _ADC_GetConversion:
  9734                           	opt stack 20
  9735                           
  9736                           ;incstack = 0
  9737                           ;ADC_GetConversion@channel stored from wreg
  9738  001FB8  6E05               	movwf	ADC_GetConversion@channel,c
  9739                           
  9740                           ;adc.c: 112: ADCON0bits.CHS = channel;
  9741  001FBA  C005  F003         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
  9742  001FBE  4603               	rlncf	??_ADC_GetConversion,f,c
  9743  001FC0  4603               	rlncf	??_ADC_GetConversion,f,c
  9744  001FC2  50C2               	movf	4034,w,c	;volatile
  9745  001FC4  1803               	xorwf	??_ADC_GetConversion,w,c
  9746  001FC6  0B83               	andlw	-125
  9747  001FC8  1803               	xorwf	??_ADC_GetConversion,w,c
  9748  001FCA  6EC2               	movwf	4034,c	;volatile
  9749                           
  9750                           ;adc.c: 115: ADCON0bits.ADON = 1;
  9751  001FCC  80C2               	bsf	4034,0,c	;volatile
  9752                           
  9753                           ;adc.c: 119: ADCON0bits.GO_nDONE = 1;
  9754  001FCE  82C2               	bsf	4034,1,c	;volatile
  9755  001FD0                     i2l31:
  9756  001FD0  B2C2               	btfsc	4034,1,c	;volatile
  9757  001FD2  D7FE               	goto	i2l31
  9758                           
  9759                           ;adc.c: 124: }
  9760                           ;adc.c: 127: return ((ADRESH << 8) + ADRESL);
  9761  001FD4  50C4               	movf	4036,w,c	;volatile
  9762  001FD6  6E04               	movwf	(??_ADC_GetConversion+1)& (0+255),c
  9763  001FD8  6A03               	clrf	??_ADC_GetConversion& (0+255),c
  9764  001FDA  50C3               	movf	4035,w,c	;volatile
  9765  001FDC  2403               	addwf	??_ADC_GetConversion,w,c
  9766  001FDE  6E01               	movwf	?_ADC_GetConversion,c
  9767  001FE0  0E00               	movlw	0
  9768  001FE2  2004               	addwfc	??_ADC_GetConversion+1,w,c
  9769  001FE4  6E02               	movwf	?_ADC_GetConversion+1,c
  9770  001FE6  0012               	return	
  9771  001FE8                     __end_of_ADC_GetConversion:
  9772                           	opt stack 0
  9773                           pclatu	equ	0xFFB
  9774                           pclath	equ	0xFFA
  9775                           tblptru	equ	0xFF8
  9776                           tblptrh	equ	0xFF7
  9777                           tblptrl	equ	0xFF6
  9778                           tablat	equ	0xFF5
  9779                           prodh	equ	0xFF4
  9780                           prodl	equ	0xFF3
  9781                           intcon	equ	0xFF2
  9782                           intcon2	equ	0xFF1
  9783                           postinc0	equ	0xFEE
  9784                           fsr0h	equ	0xFEA
  9785                           fsr0l	equ	0xFE9
  9786                           wreg	equ	0xFE8
  9787                           indf1	equ	0xFE7
  9788                           postdec1	equ	0xFE5
  9789                           fsr1h	equ	0xFE2
  9790                           fsr1l	equ	0xFE1
  9791                           indf2	equ	0xFDF
  9792                           postinc2	equ	0xFDE
  9793                           postdec2	equ	0xFDD
  9794                           plusw2	equ	0xFDB
  9795                           fsr2h	equ	0xFDA
  9796                           fsr2l	equ	0xFD9
  9797                           status	equ	0xFD8
  9798                           
  9799 ;; *************** function _FuseSystem *****************
  9800 ;; Defined at:
  9801 ;;		line 175 in file "PDU.c"
  9802 ;; Parameters:    Size  Location     Type
  9803 ;;		None
  9804 ;; Auto vars:     Size  Location     Type
  9805 ;;  i               2    6[COMRAM] int 
  9806 ;;  i               2    8[COMRAM] int 
  9807 ;; Return value:  Size  Location     Type
  9808 ;;                  1    wreg      void 
  9809 ;; Registers used:
  9810 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9811 ;; Tracked objects:
  9812 ;;		On entry : 0/0
  9813 ;;		On exit  : 0/0
  9814 ;;		Unchanged: 0/0
  9815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9816 ;;      Params:         0       0       0       0       0       0       0
  9817 ;;      Locals:         4       0       0       0       0       0       0
  9818 ;;      Temps:          0       0       0       0       0       0       0
  9819 ;;      Totals:         4       0       0       0       0       0       0
  9820 ;;Total ram usage:        4 bytes
  9821 ;; Hardware stack levels used:    1
  9822 ;; Hardware stack levels required when called:    1
  9823 ;; This function calls:
  9824 ;;		___wmul
  9825 ;; This function is called by:
  9826 ;;		_TMR1_ISR
  9827 ;; This function uses a non-reentrant model
  9828 ;;
  9829                           
  9830                           	psect	text59
  9831  001A1A                     __ptext59:
  9832                           	opt stack 0
  9833  001A1A                     _FuseSystem:
  9834                           	opt stack 20
  9835                           
  9836                           ;PDU.c: 177: for (int i = 0; i < 6; i++) {
  9837                           
  9838                           ;incstack = 0
  9839  001A1A  0E00               	movlw	0
  9840  001A1C  6E0A               	movwf	FuseSystem@i+1,c
  9841  001A1E  0E00               	movlw	0
  9842  001A20  6E09               	movwf	FuseSystem@i,c
  9843  001A22                     i2l3322:
  9844  001A22  BE0A               	btfsc	FuseSystem@i+1,7,c
  9845  001A24  D006               	goto	i2l3326
  9846  001A26  500A               	movf	FuseSystem@i+1,w,c
  9847  001A28  E127               	bnz	i2l3332
  9848  001A2A  0E06               	movlw	6
  9849  001A2C  5C09               	subwf	FuseSystem@i,w,c
  9850  001A2E  B0D8               	btfsc	status,0,c
  9851  001A30  D023               	goto	i2l3332
  9852  001A32                     i2l3326:
  9853                           
  9854                           ;PDU.c: 178: Current[i] = CurrentADC[i]*48;
  9855  001A32  90D8               	bcf	status,0,c
  9856  001A34  3409               	rlcf	FuseSystem@i,w,c
  9857  001A36  6ED9               	movwf	fsr2l,c
  9858  001A38  340A               	rlcf	FuseSystem@i+1,w,c
  9859  001A3A  6EDA               	movwf	fsr2h,c
  9860  001A3C  0EC7               	movlw	low _CurrentADC
  9861  001A3E  26D9               	addwf	fsr2l,f,c
  9862  001A40  0E00               	movlw	high _CurrentADC
  9863  001A42  22DA               	addwfc	fsr2h,f,c
  9864  001A44  CFDE F001          	movff	postinc2,___wmul@multiplier
  9865  001A48  CFDD F002          	movff	postdec2,___wmul@multiplier+1
  9866  001A4C  0E00               	movlw	0
  9867  001A4E  6E04               	movwf	___wmul@multiplicand+1,c
  9868  001A50  0E30               	movlw	48
  9869  001A52  6E03               	movwf	___wmul@multiplicand,c
  9870  001A54  EC4B  F010         	call	___wmul	;wreg free
  9871  001A58  90D8               	bcf	status,0,c
  9872  001A5A  3409               	rlcf	FuseSystem@i,w,c
  9873  001A5C  6ED9               	movwf	fsr2l,c
  9874  001A5E  340A               	rlcf	FuseSystem@i+1,w,c
  9875  001A60  6EDA               	movwf	fsr2h,c
  9876  001A62  0E30               	movlw	low _Current
  9877  001A64  26D9               	addwf	fsr2l,f,c
  9878  001A66  0E01               	movlw	high _Current
  9879  001A68  22DA               	addwfc	fsr2h,f,c
  9880  001A6A  C001  FFDE         	movff	?___wmul,postinc2
  9881  001A6E  C002  FFDD         	movff	?___wmul+1,postdec2
  9882  001A72  4A09               	infsnz	FuseSystem@i,f,c
  9883  001A74  2A0A               	incf	FuseSystem@i+1,f,c
  9884  001A76  D7D5               	goto	i2l3322
  9885  001A78                     i2l3332:
  9886                           
  9887                           ;PDU.c: 181: }
  9888                           ;PDU.c: 183: for (int i = 0; i < 6; i++) {
  9889  001A78  0E00               	movlw	0
  9890  001A7A  6E08               	movwf	FuseSystem@i_1226+1,c
  9891  001A7C  0E00               	movlw	0
  9892  001A7E  6E07               	movwf	FuseSystem@i_1226,c
  9893  001A80                     i2l3334:
  9894  001A80  BE08               	btfsc	FuseSystem@i_1226+1,7,c
  9895  001A82  D006               	goto	i2l3338
  9896  001A84  5008               	movf	FuseSystem@i_1226+1,w,c
  9897  001A86  E107               	bnz	i2l479
  9898  001A88  0E06               	movlw	6
  9899  001A8A  5C07               	subwf	FuseSystem@i_1226,w,c
  9900  001A8C  B0D8               	btfsc	status,0,c
  9901  001A8E  0012               	return	
  9902  001A90                     i2l3338:
  9903  001A90  4A07               	infsnz	FuseSystem@i_1226,f,c
  9904  001A92  2A08               	incf	FuseSystem@i_1226+1,f,c
  9905  001A94  D7F5               	goto	i2l3334
  9906  001A96                     i2l479:
  9907  001A96  0012               	return		;funcret
  9908  001A98                     __end_of_FuseSystem:
  9909                           	opt stack 0
  9910                           pclatu	equ	0xFFB
  9911                           pclath	equ	0xFFA
  9912                           tblptru	equ	0xFF8
  9913                           tblptrh	equ	0xFF7
  9914                           tblptrl	equ	0xFF6
  9915                           tablat	equ	0xFF5
  9916                           prodh	equ	0xFF4
  9917                           prodl	equ	0xFF3
  9918                           intcon	equ	0xFF2
  9919                           intcon2	equ	0xFF1
  9920                           postinc0	equ	0xFEE
  9921                           fsr0h	equ	0xFEA
  9922                           fsr0l	equ	0xFE9
  9923                           wreg	equ	0xFE8
  9924                           indf1	equ	0xFE7
  9925                           postdec1	equ	0xFE5
  9926                           fsr1h	equ	0xFE2
  9927                           fsr1l	equ	0xFE1
  9928                           indf2	equ	0xFDF
  9929                           postinc2	equ	0xFDE
  9930                           postdec2	equ	0xFDD
  9931                           plusw2	equ	0xFDB
  9932                           fsr2h	equ	0xFDA
  9933                           fsr2l	equ	0xFD9
  9934                           status	equ	0xFD8
  9935                           
  9936 ;; *************** function ___wmul *****************
  9937 ;; Defined at:
  9938 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
  9939 ;; Parameters:    Size  Location     Type
  9940 ;;  multiplier      2    0[COMRAM] unsigned int 
  9941 ;;  multiplicand    2    2[COMRAM] unsigned int 
  9942 ;; Auto vars:     Size  Location     Type
  9943 ;;  product         2    4[COMRAM] unsigned int 
  9944 ;; Return value:  Size  Location     Type
  9945 ;;                  2    0[COMRAM] unsigned int 
  9946 ;; Registers used:
  9947 ;;		wreg, status,2, status,0, prodl, prodh
  9948 ;; Tracked objects:
  9949 ;;		On entry : 0/0
  9950 ;;		On exit  : 0/0
  9951 ;;		Unchanged: 0/0
  9952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9953 ;;      Params:         4       0       0       0       0       0       0
  9954 ;;      Locals:         2       0       0       0       0       0       0
  9955 ;;      Temps:          0       0       0       0       0       0       0
  9956 ;;      Totals:         6       0       0       0       0       0       0
  9957 ;;Total ram usage:        6 bytes
  9958 ;; Hardware stack levels used:    1
  9959 ;; This function calls:
  9960 ;;		Nothing
  9961 ;; This function is called by:
  9962 ;;		_FuseSystem
  9963 ;; This function uses a non-reentrant model
  9964 ;;
  9965                           
  9966                           	psect	text60
  9967  002096                     __ptext60:
  9968                           	opt stack 0
  9969  002096                     ___wmul:
  9970                           	opt stack 20
  9971                           
  9972                           ;incstack = 0
  9973  002096  5001               	movf	___wmul@multiplier,w,c
  9974  002098  0203               	mulwf	___wmul@multiplicand,c
  9975  00209A  CFF3 F005          	movff	prodl,___wmul@product
  9976  00209E  CFF4 F006          	movff	prodh,___wmul@product+1
  9977  0020A2  5001               	movf	___wmul@multiplier,w,c
  9978  0020A4  0204               	mulwf	___wmul@multiplicand+1,c
  9979  0020A6  50F3               	movf	prodl,w,c
  9980  0020A8  2606               	addwf	___wmul@product+1,f,c
  9981  0020AA  5002               	movf	___wmul@multiplier+1,w,c
  9982  0020AC  0203               	mulwf	___wmul@multiplicand,c
  9983  0020AE  50F3               	movf	prodl,w,c
  9984  0020B0  2606               	addwf	___wmul@product+1,f,c
  9985  0020B2  C005  F001         	movff	___wmul@product,?___wmul
  9986  0020B6  C006  F002         	movff	___wmul@product+1,?___wmul+1
  9987  0020BA  0012               	return	
  9988  0020BC                     __end_of___wmul:
  9989                           	opt stack 0
  9990                           pclatu	equ	0xFFB
  9991                           pclath	equ	0xFFA
  9992                           tblptru	equ	0xFF8
  9993                           tblptrh	equ	0xFF7
  9994                           tblptrl	equ	0xFF6
  9995                           tablat	equ	0xFF5
  9996                           prodh	equ	0xFF4
  9997                           prodl	equ	0xFF3
  9998                           intcon	equ	0xFF2
  9999                           intcon2	equ	0xFF1
 10000                           postinc0	equ	0xFEE
 10001                           fsr0h	equ	0xFEA
 10002                           fsr0l	equ	0xFE9
 10003                           wreg	equ	0xFE8
 10004                           indf1	equ	0xFE7
 10005                           postdec1	equ	0xFE5
 10006                           fsr1h	equ	0xFE2
 10007                           fsr1l	equ	0xFE1
 10008                           indf2	equ	0xFDF
 10009                           postinc2	equ	0xFDE
 10010                           postdec2	equ	0xFDD
 10011                           plusw2	equ	0xFDB
 10012                           fsr2h	equ	0xFDA
 10013                           fsr2l	equ	0xFD9
 10014                           status	equ	0xFD8
 10015                           
 10016 ;; *************** function _EUSART1_Transmit_ISR *****************
 10017 ;; Defined at:
 10018 ;;		line 149 in file "UART.c"
 10019 ;; Parameters:    Size  Location     Type
 10020 ;;		None
 10021 ;; Auto vars:     Size  Location     Type
 10022 ;;		None
 10023 ;; Return value:  Size  Location     Type
 10024 ;;                  1    wreg      void 
 10025 ;; Registers used:
 10026 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10027 ;; Tracked objects:
 10028 ;;		On entry : 0/0
 10029 ;;		On exit  : 0/0
 10030 ;;		Unchanged: 0/0
 10031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10032 ;;      Params:         0       0       0       0       0       0       0
 10033 ;;      Locals:         0       0       0       0       0       0       0
 10034 ;;      Temps:          0       0       0       0       0       0       0
 10035 ;;      Totals:         0       0       0       0       0       0       0
 10036 ;;Total ram usage:        0 bytes
 10037 ;; Hardware stack levels used:    1
 10038 ;; Hardware stack levels required when called:    2
 10039 ;; This function calls:
 10040 ;;		i2_UART_buff_get
 10041 ;;		i2_UART_buff_size
 10042 ;; This function is called by:
 10043 ;;		_INTERRUPT_InterruptManager
 10044 ;; This function uses a non-reentrant model
 10045 ;;
 10046                           
 10047                           	psect	text61
 10048  001F56                     __ptext61:
 10049                           	opt stack 0
 10050  001F56                     _EUSART1_Transmit_ISR:
 10051                           	opt stack 20
 10052                           
 10053                           ;UART.c: 151: if (UART_buff_size(&output_buffer) > 0) {
 10054                           
 10055                           ;incstack = 0
 10056  001F56  0E00               	movlw	low _output_buffer
 10057  001F58  6E01               	movwf	i2UART_buff_size@_this,c
 10058  001F5A  0E02               	movlw	high _output_buffer
 10059  001F5C  6E02               	movwf	i2UART_buff_size@_this+1,c
 10060  001F5E  ECE6  F010         	call	i2_UART_buff_size	;wreg free
 10061  001F62  BE02               	btfsc	?i2_UART_buff_size+1,7,c
 10062  001F64  D00D               	goto	i2l3580
 10063  001F66  5002               	movf	?i2_UART_buff_size+1,w,c
 10064  001F68  E103               	bnz	i2u214_40
 10065  001F6A  0401               	decf	?i2_UART_buff_size,w,c
 10066  001F6C  A0D8               	btfss	status,0,c
 10067  001F6E  D008               	goto	i2l3580
 10068  001F70                     i2u214_40:
 10069                           
 10070                           ;UART.c: 152: TXREG1 = UART_buff_get(&output_buffer);
 10071  001F70  0E00               	movlw	low _output_buffer
 10072  001F72  6E07               	movwf	i2UART_buff_get@_this,c
 10073  001F74  0E02               	movlw	high _output_buffer
 10074  001F76  6E08               	movwf	i2UART_buff_get@_this+1,c
 10075  001F78  EC04  F00C         	call	i2_UART_buff_get	;wreg free
 10076  001F7C  6EAD               	movwf	4013,c	;volatile
 10077                           
 10078                           ;UART.c: 153: } else {
 10079  001F7E  0012               	return	
 10080  001F80                     i2l3580:
 10081                           
 10082                           ;UART.c: 154: Transmit_stall = 1;
 10083  001F80  0E01               	movlw	1
 10084  001F82  6E41               	movwf	_Transmit_stall,c
 10085                           
 10086                           ;UART.c: 155: PIE1bits.TX1IE = 0;
 10087  001F84  989D               	bcf	3997,4,c	;volatile
 10088  001F86  0012               	return	
 10089  001F88                     __end_of_EUSART1_Transmit_ISR:
 10090                           	opt stack 0
 10091                           pclatu	equ	0xFFB
 10092                           pclath	equ	0xFFA
 10093                           tblptru	equ	0xFF8
 10094                           tblptrh	equ	0xFF7
 10095                           tblptrl	equ	0xFF6
 10096                           tablat	equ	0xFF5
 10097                           prodh	equ	0xFF4
 10098                           prodl	equ	0xFF3
 10099                           intcon	equ	0xFF2
 10100                           intcon2	equ	0xFF1
 10101                           postinc0	equ	0xFEE
 10102                           fsr0h	equ	0xFEA
 10103                           fsr0l	equ	0xFE9
 10104                           wreg	equ	0xFE8
 10105                           indf1	equ	0xFE7
 10106                           postdec1	equ	0xFE5
 10107                           fsr1h	equ	0xFE2
 10108                           fsr1l	equ	0xFE1
 10109                           indf2	equ	0xFDF
 10110                           postinc2	equ	0xFDE
 10111                           postdec2	equ	0xFDD
 10112                           plusw2	equ	0xFDB
 10113                           fsr2h	equ	0xFDA
 10114                           fsr2l	equ	0xFD9
 10115                           status	equ	0xFD8
 10116                           
 10117 ;; *************** function i2_UART_buff_size *****************
 10118 ;; Defined at:
 10119 ;;		line 101 in file "UART.c"
 10120 ;; Parameters:    Size  Location     Type
 10121 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
 10122 ;;		 -> output_buffer(106), input_buffer(106), 
 10123 ;; Auto vars:     Size  Location     Type
 10124 ;;		None
 10125 ;; Return value:  Size  Location     Type
 10126 ;;                  2    0[COMRAM] int 
 10127 ;; Registers used:
 10128 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10129 ;; Tracked objects:
 10130 ;;		On entry : 0/0
 10131 ;;		On exit  : 0/0
 10132 ;;		Unchanged: 0/0
 10133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10134 ;;      Params:         2       0       0       0       0       0       0
 10135 ;;      Locals:         0       0       0       0       0       0       0
 10136 ;;      Temps:          0       0       0       0       0       0       0
 10137 ;;      Totals:         2       0       0       0       0       0       0
 10138 ;;Total ram usage:        2 bytes
 10139 ;; Hardware stack levels used:    1
 10140 ;; This function calls:
 10141 ;;		Nothing
 10142 ;; This function is called by:
 10143 ;;		_EUSART1_Transmit_ISR
 10144 ;; This function uses a non-reentrant model
 10145 ;;
 10146                           
 10147                           	psect	text62
 10148  0021CC                     __ptext62:
 10149                           	opt stack 0
 10150  0021CC                     i2_UART_buff_size:
 10151                           	opt stack 21
 10152                           
 10153                           ;UART.c: 102: return (_this->count);
 10154                           
 10155                           ;incstack = 0
 10156  0021CC  EE20 F068          	lfsr	2,104
 10157  0021D0  5001               	movf	i2UART_buff_size@_this,w,c
 10158  0021D2  26D9               	addwf	fsr2l,f,c
 10159  0021D4  5002               	movf	i2UART_buff_size@_this+1,w,c
 10160  0021D6  22DA               	addwfc	fsr2h,f,c
 10161  0021D8  CFDE F001          	movff	postinc2,?i2_UART_buff_size
 10162  0021DC  CFDD F002          	movff	postdec2,?i2_UART_buff_size+1
 10163  0021E0  0012               	return	
 10164  0021E2                     __end_ofi2_UART_buff_size:
 10165                           	opt stack 0
 10166                           pclatu	equ	0xFFB
 10167                           pclath	equ	0xFFA
 10168                           tblptru	equ	0xFF8
 10169                           tblptrh	equ	0xFF7
 10170                           tblptrl	equ	0xFF6
 10171                           tablat	equ	0xFF5
 10172                           prodh	equ	0xFF4
 10173                           prodl	equ	0xFF3
 10174                           intcon	equ	0xFF2
 10175                           intcon2	equ	0xFF1
 10176                           postinc0	equ	0xFEE
 10177                           fsr0h	equ	0xFEA
 10178                           fsr0l	equ	0xFE9
 10179                           wreg	equ	0xFE8
 10180                           indf1	equ	0xFE7
 10181                           postdec1	equ	0xFE5
 10182                           fsr1h	equ	0xFE2
 10183                           fsr1l	equ	0xFE1
 10184                           indf2	equ	0xFDF
 10185                           postinc2	equ	0xFDE
 10186                           postdec2	equ	0xFDD
 10187                           plusw2	equ	0xFDB
 10188                           fsr2h	equ	0xFDA
 10189                           fsr2l	equ	0xFD9
 10190                           status	equ	0xFD8
 10191                           
 10192 ;; *************** function i2_UART_buff_get *****************
 10193 ;; Defined at:
 10194 ;;		line 80 in file "UART.c"
 10195 ;; Parameters:    Size  Location     Type
 10196 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
 10197 ;;		 -> output_buffer(106), input_buffer(106), 
 10198 ;; Auto vars:     Size  Location     Type
 10199 ;;  UART_buff_ge    1   10[COMRAM] unsigned char 
 10200 ;; Return value:  Size  Location     Type
 10201 ;;                  1    wreg      unsigned char 
 10202 ;; Registers used:
 10203 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10204 ;; Tracked objects:
 10205 ;;		On entry : 0/0
 10206 ;;		On exit  : 0/0
 10207 ;;		Unchanged: 0/0
 10208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10209 ;;      Params:         2       0       0       0       0       0       0
 10210 ;;      Locals:         1       0       0       0       0       0       0
 10211 ;;      Temps:          2       0       0       0       0       0       0
 10212 ;;      Totals:         5       0       0       0       0       0       0
 10213 ;;Total ram usage:        5 bytes
 10214 ;; Hardware stack levels used:    1
 10215 ;; Hardware stack levels required when called:    1
 10216 ;; This function calls:
 10217 ;;		i2_UART_buff_modulo_inc
 10218 ;; This function is called by:
 10219 ;;		_EUSART1_Transmit_ISR
 10220 ;; This function uses a non-reentrant model
 10221 ;;
 10222                           
 10223                           	psect	text63
 10224  001808                     __ptext63:
 10225                           	opt stack 0
 10226  001808                     i2_UART_buff_get:
 10227                           	opt stack 20
 10228                           
 10229                           ;UART.c: 81: unsigned char c;
 10230                           ;UART.c: 82: if (_this->count > 0) {
 10231                           
 10232                           ;incstack = 0
 10233  001808  EE20 F068          	lfsr	2,104
 10234  00180C  5007               	movf	i2UART_buff_get@_this,w,c
 10235  00180E  26D9               	addwf	fsr2l,f,c
 10236  001810  5008               	movf	i2UART_buff_get@_this+1,w,c
 10237  001812  22DA               	addwfc	fsr2h,f,c
 10238  001814  0E01               	movlw	1
 10239  001816  BEDB               	btfsc	plusw2,7,c
 10240  001818  D03C               	goto	i2l3562
 10241  00181A  0E01               	movlw	1
 10242  00181C  50DB               	movf	plusw2,w,c
 10243  00181E  E103               	bnz	i2u212_40
 10244  001820  04DE               	decf	postinc2,w,c
 10245  001822  A0D8               	btfss	status,0,c
 10246  001824  D036               	goto	i2l3562
 10247  001826                     i2u212_40:
 10248                           
 10249                           ;UART.c: 83: c = _this->buf[_this->tail];
 10250  001826  EE20 F066          	lfsr	2,102
 10251  00182A  5007               	movf	i2UART_buff_get@_this,w,c
 10252  00182C  26D9               	addwf	fsr2l,f,c
 10253  00182E  5008               	movf	i2UART_buff_get@_this+1,w,c
 10254  001830  22DA               	addwfc	fsr2h,f,c
 10255  001832  CFDE F009          	movff	postinc2,??i2_UART_buff_get
 10256  001836  CFDD F00A          	movff	postdec2,??i2_UART_buff_get+1
 10257  00183A  5009               	movf	??i2_UART_buff_get,w,c
 10258  00183C  2407               	addwf	i2UART_buff_get@_this,w,c
 10259  00183E  6ED9               	movwf	fsr2l,c
 10260  001840  500A               	movf	??i2_UART_buff_get+1,w,c
 10261  001842  2008               	addwfc	i2UART_buff_get@_this+1,w,c
 10262  001844  6EDA               	movwf	fsr2h,c
 10263  001846  50DF               	movf	indf2,w,c
 10264  001848  6E0B               	movwf	i2UART_buff_get@c,c
 10265                           
 10266                           ;UART.c: 84: _this->tail = UART_buff_modulo_inc(_this->tail, 100);
 10267  00184A  EE20 F066          	lfsr	2,102
 10268  00184E  5007               	movf	i2UART_buff_get@_this,w,c
 10269  001850  26D9               	addwf	fsr2l,f,c
 10270  001852  5008               	movf	i2UART_buff_get@_this+1,w,c
 10271  001854  22DA               	addwfc	fsr2h,f,c
 10272  001856  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 10273  00185A  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 10274  00185E  0E00               	movlw	0
 10275  001860  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 10276  001862  0E64               	movlw	100
 10277  001864  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 10278  001866  EC36  F010         	call	i2_UART_buff_modulo_inc	;wreg free
 10279  00186A  EE20 F066          	lfsr	2,102
 10280  00186E  5007               	movf	i2UART_buff_get@_this,w,c
 10281  001870  26D9               	addwf	fsr2l,f,c
 10282  001872  5008               	movf	i2UART_buff_get@_this+1,w,c
 10283  001874  22DA               	addwfc	fsr2h,f,c
 10284  001876  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 10285  00187A  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 10286                           
 10287                           ;UART.c: 85: --_this->count;
 10288  00187E  EE20 F068          	lfsr	2,104
 10289  001882  5007               	movf	i2UART_buff_get@_this,w,c
 10290  001884  26D9               	addwf	fsr2l,f,c
 10291  001886  5008               	movf	i2UART_buff_get@_this+1,w,c
 10292  001888  22DA               	addwfc	fsr2h,f,c
 10293  00188A  06DE               	decf	postinc2,f,c
 10294  00188C  0E00               	movlw	0
 10295  00188E  5ADD               	subwfb	postdec2,f,c
 10296                           
 10297                           ;UART.c: 86: } else {
 10298  001890  D002               	goto	i2l599
 10299  001892                     i2l3562:
 10300                           
 10301                           ;UART.c: 87: c = 0;
 10302  001892  0E00               	movlw	0
 10303  001894  6E0B               	movwf	i2UART_buff_get@c,c
 10304  001896                     i2l599:
 10305                           
 10306                           ;UART.c: 88: }
 10307                           ;UART.c: 89: return (c);
 10308  001896  500B               	movf	i2UART_buff_get@c,w,c
 10309  001898  0012               	return	
 10310  00189A                     __end_ofi2_UART_buff_get:
 10311                           	opt stack 0
 10312                           pclatu	equ	0xFFB
 10313                           pclath	equ	0xFFA
 10314                           tblptru	equ	0xFF8
 10315                           tblptrh	equ	0xFF7
 10316                           tblptrl	equ	0xFF6
 10317                           tablat	equ	0xFF5
 10318                           prodh	equ	0xFF4
 10319                           prodl	equ	0xFF3
 10320                           intcon	equ	0xFF2
 10321                           intcon2	equ	0xFF1
 10322                           postinc0	equ	0xFEE
 10323                           fsr0h	equ	0xFEA
 10324                           fsr0l	equ	0xFE9
 10325                           wreg	equ	0xFE8
 10326                           indf1	equ	0xFE7
 10327                           postdec1	equ	0xFE5
 10328                           fsr1h	equ	0xFE2
 10329                           fsr1l	equ	0xFE1
 10330                           indf2	equ	0xFDF
 10331                           postinc2	equ	0xFDE
 10332                           postdec2	equ	0xFDD
 10333                           plusw2	equ	0xFDB
 10334                           fsr2h	equ	0xFDA
 10335                           fsr2l	equ	0xFD9
 10336                           status	equ	0xFD8
 10337                           
 10338 ;; *************** function _EUSART1_Receive_ISR *****************
 10339 ;; Defined at:
 10340 ;;		line 138 in file "UART.c"
 10341 ;; Parameters:    Size  Location     Type
 10342 ;;		None
 10343 ;; Auto vars:     Size  Location     Type
 10344 ;;  data            1   11[COMRAM] unsigned char 
 10345 ;; Return value:  Size  Location     Type
 10346 ;;                  1    wreg      void 
 10347 ;; Registers used:
 10348 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10349 ;; Tracked objects:
 10350 ;;		On entry : 0/0
 10351 ;;		On exit  : 0/0
 10352 ;;		Unchanged: 0/0
 10353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10354 ;;      Params:         0       0       0       0       0       0       0
 10355 ;;      Locals:         1       0       0       0       0       0       0
 10356 ;;      Temps:          0       0       0       0       0       0       0
 10357 ;;      Totals:         1       0       0       0       0       0       0
 10358 ;;Total ram usage:        1 bytes
 10359 ;; Hardware stack levels used:    1
 10360 ;; Hardware stack levels required when called:    2
 10361 ;; This function calls:
 10362 ;;		i2_UART_buff_put
 10363 ;; This function is called by:
 10364 ;;		_INTERRUPT_InterruptManager
 10365 ;; This function uses a non-reentrant model
 10366 ;;
 10367                           
 10368                           	psect	text64
 10369  00213E                     __ptext64:
 10370                           	opt stack 0
 10371  00213E                     _EUSART1_Receive_ISR:
 10372                           	opt stack 20
 10373                           
 10374                           ;UART.c: 139: if (1 == RC1STAbits.OERR) {
 10375                           
 10376                           ;incstack = 0
 10377  00213E  A2AB               	btfss	4011,1,c	;volatile
 10378  002140  D002               	goto	i2l630
 10379                           
 10380                           ;UART.c: 142: RC1STAbits.CREN = 0;
 10381  002142  98AB               	bcf	4011,4,c	;volatile
 10382                           
 10383                           ;UART.c: 143: RC1STAbits.CREN = 1;
 10384  002144  88AB               	bsf	4011,4,c	;volatile
 10385  002146                     i2l630:
 10386                           
 10387                           ;UART.c: 144: }
 10388                           ;UART.c: 145: unsigned char data = RCREG1;
 10389  002146  CFAE F00C          	movff	4014,EUSART1_Receive_ISR@data	;volatile
 10390                           
 10391                           ;UART.c: 146: UART_buff_put(&input_buffer, data);
 10392  00214A  0E3C               	movlw	low _input_buffer
 10393  00214C  6E07               	movwf	i2UART_buff_put@_this,c
 10394  00214E  0E01               	movlw	high _input_buffer
 10395  002150  6E08               	movwf	i2UART_buff_put@_this+1,c
 10396  002152  C00C  F009         	movff	EUSART1_Receive_ISR@data,i2UART_buff_put@c
 10397  002156  EC49  F008         	call	i2_UART_buff_put	;wreg free
 10398  00215A  0012               	return		;funcret
 10399  00215C                     __end_of_EUSART1_Receive_ISR:
 10400                           	opt stack 0
 10401                           pclatu	equ	0xFFB
 10402                           pclath	equ	0xFFA
 10403                           tblptru	equ	0xFF8
 10404                           tblptrh	equ	0xFF7
 10405                           tblptrl	equ	0xFF6
 10406                           tablat	equ	0xFF5
 10407                           prodh	equ	0xFF4
 10408                           prodl	equ	0xFF3
 10409                           intcon	equ	0xFF2
 10410                           intcon2	equ	0xFF1
 10411                           postinc0	equ	0xFEE
 10412                           fsr0h	equ	0xFEA
 10413                           fsr0l	equ	0xFE9
 10414                           wreg	equ	0xFE8
 10415                           indf1	equ	0xFE7
 10416                           postdec1	equ	0xFE5
 10417                           fsr1h	equ	0xFE2
 10418                           fsr1l	equ	0xFE1
 10419                           indf2	equ	0xFDF
 10420                           postinc2	equ	0xFDE
 10421                           postdec2	equ	0xFDD
 10422                           plusw2	equ	0xFDB
 10423                           fsr2h	equ	0xFDA
 10424                           fsr2l	equ	0xFD9
 10425                           status	equ	0xFD8
 10426                           
 10427 ;; *************** function i2_UART_buff_put *****************
 10428 ;; Defined at:
 10429 ;;		line 67 in file "UART.c"
 10430 ;; Parameters:    Size  Location     Type
 10431 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
 10432 ;;		 -> output_buffer(106), input_buffer(106), 
 10433 ;;  c               1    8[COMRAM] const unsigned char 
 10434 ;; Auto vars:     Size  Location     Type
 10435 ;;		None
 10436 ;; Return value:  Size  Location     Type
 10437 ;;                  1    wreg      void 
 10438 ;; Registers used:
 10439 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10440 ;; Tracked objects:
 10441 ;;		On entry : 0/0
 10442 ;;		On exit  : 0/0
 10443 ;;		Unchanged: 0/0
 10444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10445 ;;      Params:         3       0       0       0       0       0       0
 10446 ;;      Locals:         0       0       0       0       0       0       0
 10447 ;;      Temps:          2       0       0       0       0       0       0
 10448 ;;      Totals:         5       0       0       0       0       0       0
 10449 ;;Total ram usage:        5 bytes
 10450 ;; Hardware stack levels used:    1
 10451 ;; Hardware stack levels required when called:    1
 10452 ;; This function calls:
 10453 ;;		i2_UART_buff_modulo_inc
 10454 ;; This function is called by:
 10455 ;;		_EUSART1_Receive_ISR
 10456 ;; This function uses a non-reentrant model
 10457 ;;
 10458                           
 10459                           	psect	text65
 10460  001092                     __ptext65:
 10461                           	opt stack 0
 10462  001092                     i2_UART_buff_put:
 10463                           	opt stack 20
 10464                           
 10465                           ;UART.c: 68: if (_this->count < 100) {
 10466                           
 10467                           ;incstack = 0
 10468  001092  EE20 F068          	lfsr	2,104
 10469  001096  5007               	movf	i2UART_buff_put@_this,w,c
 10470  001098  26D9               	addwf	fsr2l,f,c
 10471  00109A  5008               	movf	i2UART_buff_put@_this+1,w,c
 10472  00109C  22DA               	addwfc	fsr2h,f,c
 10473  00109E  0E01               	movlw	1
 10474  0010A0  BEDB               	btfsc	plusw2,7,c
 10475  0010A2  D007               	goto	i2l3542
 10476  0010A4  0E01               	movlw	1
 10477  0010A6  50DB               	movf	plusw2,w,c
 10478  0010A8  E13A               	bnz	i2l3548
 10479  0010AA  0E64               	movlw	100
 10480  0010AC  5CDE               	subwf	postinc2,w,c
 10481  0010AE  B0D8               	btfsc	status,0,c
 10482  0010B0  D036               	goto	i2l3548
 10483  0010B2                     i2l3542:
 10484                           
 10485                           ;UART.c: 69: _this->buf[_this->head] = c;
 10486  0010B2  EE20 F064          	lfsr	2,100
 10487  0010B6  5007               	movf	i2UART_buff_put@_this,w,c
 10488  0010B8  26D9               	addwf	fsr2l,f,c
 10489  0010BA  5008               	movf	i2UART_buff_put@_this+1,w,c
 10490  0010BC  22DA               	addwfc	fsr2h,f,c
 10491  0010BE  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
 10492  0010C2  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
 10493  0010C6  500A               	movf	??i2_UART_buff_put,w,c
 10494  0010C8  2407               	addwf	i2UART_buff_put@_this,w,c
 10495  0010CA  6ED9               	movwf	fsr2l,c
 10496  0010CC  500B               	movf	??i2_UART_buff_put+1,w,c
 10497  0010CE  2008               	addwfc	i2UART_buff_put@_this+1,w,c
 10498  0010D0  6EDA               	movwf	fsr2h,c
 10499  0010D2  C009  FFDF         	movff	i2UART_buff_put@c,indf2
 10500                           
 10501                           ;UART.c: 70: _this->head = UART_buff_modulo_inc(_this->head, 100);
 10502  0010D6  EE20 F064          	lfsr	2,100
 10503  0010DA  5007               	movf	i2UART_buff_put@_this,w,c
 10504  0010DC  26D9               	addwf	fsr2l,f,c
 10505  0010DE  5008               	movf	i2UART_buff_put@_this+1,w,c
 10506  0010E0  22DA               	addwfc	fsr2h,f,c
 10507  0010E2  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 10508  0010E6  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 10509  0010EA  0E00               	movlw	0
 10510  0010EC  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 10511  0010EE  0E64               	movlw	100
 10512  0010F0  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 10513  0010F2  EC36  F010         	call	i2_UART_buff_modulo_inc	;wreg free
 10514  0010F6  EE20 F064          	lfsr	2,100
 10515  0010FA  5007               	movf	i2UART_buff_put@_this,w,c
 10516  0010FC  26D9               	addwf	fsr2l,f,c
 10517  0010FE  5008               	movf	i2UART_buff_put@_this+1,w,c
 10518  001100  22DA               	addwfc	fsr2h,f,c
 10519  001102  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 10520  001106  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 10521                           
 10522                           ;UART.c: 71: ++_this->count;
 10523  00110A  EE20 F068          	lfsr	2,104
 10524  00110E  5007               	movf	i2UART_buff_put@_this,w,c
 10525  001110  26D9               	addwf	fsr2l,f,c
 10526  001112  5008               	movf	i2UART_buff_put@_this+1,w,c
 10527  001114  22DA               	addwfc	fsr2h,f,c
 10528  001116  2ADE               	incf	postinc2,f,c
 10529  001118  0E00               	movlw	0
 10530  00111A  22DD               	addwfc	postdec2,f,c
 10531                           
 10532                           ;UART.c: 72: } else {
 10533  00111C  0012               	return	
 10534  00111E                     i2l3548:
 10535                           
 10536                           ;UART.c: 73: _this->buf[_this->head] = c;
 10537  00111E  EE20 F064          	lfsr	2,100
 10538  001122  5007               	movf	i2UART_buff_put@_this,w,c
 10539  001124  26D9               	addwf	fsr2l,f,c
 10540  001126  5008               	movf	i2UART_buff_put@_this+1,w,c
 10541  001128  22DA               	addwfc	fsr2h,f,c
 10542  00112A  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
 10543  00112E  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
 10544  001132  500A               	movf	??i2_UART_buff_put,w,c
 10545  001134  2407               	addwf	i2UART_buff_put@_this,w,c
 10546  001136  6ED9               	movwf	fsr2l,c
 10547  001138  500B               	movf	??i2_UART_buff_put+1,w,c
 10548  00113A  2008               	addwfc	i2UART_buff_put@_this+1,w,c
 10549  00113C  6EDA               	movwf	fsr2h,c
 10550  00113E  C009  FFDF         	movff	i2UART_buff_put@c,indf2
 10551                           
 10552                           ;UART.c: 74: _this->head = UART_buff_modulo_inc(_this->head, 100);
 10553  001142  EE20 F064          	lfsr	2,100
 10554  001146  5007               	movf	i2UART_buff_put@_this,w,c
 10555  001148  26D9               	addwf	fsr2l,f,c
 10556  00114A  5008               	movf	i2UART_buff_put@_this+1,w,c
 10557  00114C  22DA               	addwfc	fsr2h,f,c
 10558  00114E  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 10559  001152  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 10560  001156  0E00               	movlw	0
 10561  001158  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 10562  00115A  0E64               	movlw	100
 10563  00115C  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 10564  00115E  EC36  F010         	call	i2_UART_buff_modulo_inc	;wreg free
 10565  001162  EE20 F064          	lfsr	2,100
 10566  001166  5007               	movf	i2UART_buff_put@_this,w,c
 10567  001168  26D9               	addwf	fsr2l,f,c
 10568  00116A  5008               	movf	i2UART_buff_put@_this+1,w,c
 10569  00116C  22DA               	addwfc	fsr2h,f,c
 10570  00116E  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 10571  001172  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 10572                           
 10573                           ;UART.c: 75: _this->tail = UART_buff_modulo_inc(_this->tail, 100);
 10574  001176  EE20 F066          	lfsr	2,102
 10575  00117A  5007               	movf	i2UART_buff_put@_this,w,c
 10576  00117C  26D9               	addwf	fsr2l,f,c
 10577  00117E  5008               	movf	i2UART_buff_put@_this+1,w,c
 10578  001180  22DA               	addwfc	fsr2h,f,c
 10579  001182  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 10580  001186  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 10581  00118A  0E00               	movlw	0
 10582  00118C  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 10583  00118E  0E64               	movlw	100
 10584  001190  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 10585  001192  EC36  F010         	call	i2_UART_buff_modulo_inc	;wreg free
 10586  001196  EE20 F066          	lfsr	2,102
 10587  00119A  5007               	movf	i2UART_buff_put@_this,w,c
 10588  00119C  26D9               	addwf	fsr2l,f,c
 10589  00119E  5008               	movf	i2UART_buff_put@_this+1,w,c
 10590  0011A0  22DA               	addwfc	fsr2h,f,c
 10591  0011A2  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 10592  0011A6  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 10593  0011AA  0012               	return	
 10594  0011AC                     __end_ofi2_UART_buff_put:
 10595                           	opt stack 0
 10596                           pclatu	equ	0xFFB
 10597                           pclath	equ	0xFFA
 10598                           tblptru	equ	0xFF8
 10599                           tblptrh	equ	0xFF7
 10600                           tblptrl	equ	0xFF6
 10601                           tablat	equ	0xFF5
 10602                           prodh	equ	0xFF4
 10603                           prodl	equ	0xFF3
 10604                           intcon	equ	0xFF2
 10605                           intcon2	equ	0xFF1
 10606                           postinc0	equ	0xFEE
 10607                           fsr0h	equ	0xFEA
 10608                           fsr0l	equ	0xFE9
 10609                           wreg	equ	0xFE8
 10610                           indf1	equ	0xFE7
 10611                           postdec1	equ	0xFE5
 10612                           fsr1h	equ	0xFE2
 10613                           fsr1l	equ	0xFE1
 10614                           indf2	equ	0xFDF
 10615                           postinc2	equ	0xFDE
 10616                           postdec2	equ	0xFDD
 10617                           plusw2	equ	0xFDB
 10618                           fsr2h	equ	0xFDA
 10619                           fsr2l	equ	0xFD9
 10620                           status	equ	0xFD8
 10621                           
 10622 ;; *************** function i2_UART_buff_modulo_inc *****************
 10623 ;; Defined at:
 10624 ;;		line 105 in file "UART.c"
 10625 ;; Parameters:    Size  Location     Type
 10626 ;;  value           2    0[COMRAM] const unsigned int 
 10627 ;;  modulus         2    2[COMRAM] const unsigned int 
 10628 ;; Auto vars:     Size  Location     Type
 10629 ;;  UART_buff_mo    2    4[COMRAM] unsigned int 
 10630 ;; Return value:  Size  Location     Type
 10631 ;;                  2    0[COMRAM] unsigned int 
 10632 ;; Registers used:
 10633 ;;		wreg, status,2, status,0
 10634 ;; Tracked objects:
 10635 ;;		On entry : 0/0
 10636 ;;		On exit  : 0/0
 10637 ;;		Unchanged: 0/0
 10638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10639 ;;      Params:         4       0       0       0       0       0       0
 10640 ;;      Locals:         2       0       0       0       0       0       0
 10641 ;;      Temps:          0       0       0       0       0       0       0
 10642 ;;      Totals:         6       0       0       0       0       0       0
 10643 ;;Total ram usage:        6 bytes
 10644 ;; Hardware stack levels used:    1
 10645 ;; This function calls:
 10646 ;;		Nothing
 10647 ;; This function is called by:
 10648 ;;		i2_UART_buff_put
 10649 ;;		i2_UART_buff_get
 10650 ;; This function uses a non-reentrant model
 10651 ;;
 10652                           
 10653                           	psect	text66
 10654  00206C                     __ptext66:
 10655                           	opt stack 0
 10656  00206C                     i2_UART_buff_modulo_inc:
 10657                           	opt stack 20
 10658                           
 10659                           ;UART.c: 106: unsigned int my_value = value + 1;
 10660                           
 10661                           ;incstack = 0
 10662  00206C  0E01               	movlw	1
 10663  00206E  2401               	addwf	i2UART_buff_modulo_inc@value,w,c
 10664  002070  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
 10665  002072  0E00               	movlw	0
 10666  002074  2002               	addwfc	i2UART_buff_modulo_inc@value+1,w,c
 10667  002076  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
 10668                           
 10669                           ;UART.c: 107: if (my_value >= modulus) {
 10670  002078  5003               	movf	i2UART_buff_modulo_inc@modulus,w,c
 10671  00207A  5C05               	subwf	i2UART_buff_modulo_inc@my_value,w,c
 10672  00207C  5004               	movf	i2UART_buff_modulo_inc@modulus+1,w,c
 10673  00207E  5806               	subwfb	i2UART_buff_modulo_inc@my_value+1,w,c
 10674  002080  A0D8               	btfss	status,0,c
 10675  002082  D004               	goto	i2l3246
 10676                           
 10677                           ;UART.c: 108: my_value = 0;
 10678  002084  0E00               	movlw	0
 10679  002086  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
 10680  002088  0E00               	movlw	0
 10681  00208A  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
 10682  00208C                     i2l3246:
 10683                           
 10684                           ;UART.c: 109: }
 10685                           ;UART.c: 110: return (my_value);
 10686  00208C  C005  F001         	movff	i2UART_buff_modulo_inc@my_value,?i2_UART_buff_modulo_inc
 10687  002090  C006  F002         	movff	i2UART_buff_modulo_inc@my_value+1,?i2_UART_buff_modulo_inc+1
 10688  002094  0012               	return	
 10689  002096                     __end_ofi2_UART_buff_modulo_inc:
 10690                           	opt stack 0
 10691                           pclatu	equ	0xFFB
 10692                           pclath	equ	0xFFA
 10693                           tblptru	equ	0xFF8
 10694                           tblptrh	equ	0xFF7
 10695                           tblptrl	equ	0xFF6
 10696                           tablat	equ	0xFF5
 10697                           prodh	equ	0xFF4
 10698                           prodl	equ	0xFF3
 10699                           intcon	equ	0xFF2
 10700                           intcon2	equ	0xFF1
 10701                           postinc0	equ	0xFEE
 10702                           fsr0h	equ	0xFEA
 10703                           fsr0l	equ	0xFE9
 10704                           wreg	equ	0xFE8
 10705                           indf1	equ	0xFE7
 10706                           postdec1	equ	0xFE5
 10707                           fsr1h	equ	0xFE2
 10708                           fsr1l	equ	0xFE1
 10709                           indf2	equ	0xFDF
 10710                           postinc2	equ	0xFDE
 10711                           postdec2	equ	0xFDD
 10712                           plusw2	equ	0xFDB
 10713                           fsr2h	equ	0xFDA
 10714                           fsr2l	equ	0xFD9
 10715                           status	equ	0xFD8
 10716                           
 10717 ;; *************** function _ADC_ISR *****************
 10718 ;; Defined at:
 10719 ;;		line 130 in file "mcc_generated_files/adc.c"
 10720 ;; Parameters:    Size  Location     Type
 10721 ;;		None
 10722 ;; Auto vars:     Size  Location     Type
 10723 ;;		None
 10724 ;; Return value:  Size  Location     Type
 10725 ;;                  1    wreg      void 
 10726 ;; Registers used:
 10727 ;;		None
 10728 ;; Tracked objects:
 10729 ;;		On entry : 0/0
 10730 ;;		On exit  : 0/0
 10731 ;;		Unchanged: 0/0
 10732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10733 ;;      Params:         0       0       0       0       0       0       0
 10734 ;;      Locals:         0       0       0       0       0       0       0
 10735 ;;      Temps:          0       0       0       0       0       0       0
 10736 ;;      Totals:         0       0       0       0       0       0       0
 10737 ;;Total ram usage:        0 bytes
 10738 ;; Hardware stack levels used:    1
 10739 ;; This function calls:
 10740 ;;		Nothing
 10741 ;; This function is called by:
 10742 ;;		_INTERRUPT_InterruptManager
 10743 ;; This function uses a non-reentrant model
 10744 ;;
 10745                           
 10746                           	psect	text67
 10747  002276                     __ptext67:
 10748                           	opt stack 0
 10749  002276                     _ADC_ISR:
 10750                           	opt stack 22
 10751                           
 10752                           ;adc.c: 133: PIR1bits.ADIF = 0;
 10753                           
 10754                           ;incstack = 0
 10755  002276  9C9E               	bcf	3998,6,c	;volatile
 10756  002278  0012               	return		;funcret
 10757  00227A                     __end_of_ADC_ISR:
 10758                           	opt stack 0
 10759  0000                     pclatu	equ	0xFFB
 10760                           pclath	equ	0xFFA
 10761                           tblptru	equ	0xFF8
 10762                           tblptrh	equ	0xFF7
 10763                           tblptrl	equ	0xFF6
 10764                           tablat	equ	0xFF5
 10765                           prodh	equ	0xFF4
 10766                           prodl	equ	0xFF3
 10767                           intcon	equ	0xFF2
 10768                           intcon2	equ	0xFF1
 10769                           postinc0	equ	0xFEE
 10770                           fsr0h	equ	0xFEA
 10771                           fsr0l	equ	0xFE9
 10772                           wreg	equ	0xFE8
 10773                           indf1	equ	0xFE7
 10774                           postdec1	equ	0xFE5
 10775                           fsr1h	equ	0xFE2
 10776                           fsr1l	equ	0xFE1
 10777                           indf2	equ	0xFDF
 10778                           postinc2	equ	0xFDE
 10779                           postdec2	equ	0xFDD
 10780                           plusw2	equ	0xFDB
 10781                           fsr2h	equ	0xFDA
 10782                           fsr2l	equ	0xFD9
 10783                           status	equ	0xFD8
 10784                           pclatu	equ	0xFFB
 10785                           pclath	equ	0xFFA
 10786                           tblptru	equ	0xFF8
 10787                           tblptrh	equ	0xFF7
 10788                           tblptrl	equ	0xFF6
 10789                           tablat	equ	0xFF5
 10790                           prodh	equ	0xFF4
 10791                           prodl	equ	0xFF3
 10792                           intcon	equ	0xFF2
 10793                           intcon2	equ	0xFF1
 10794                           postinc0	equ	0xFEE
 10795                           fsr0h	equ	0xFEA
 10796                           fsr0l	equ	0xFE9
 10797                           wreg	equ	0xFE8
 10798                           indf1	equ	0xFE7
 10799                           postdec1	equ	0xFE5
 10800                           fsr1h	equ	0xFE2
 10801                           fsr1l	equ	0xFE1
 10802                           indf2	equ	0xFDF
 10803                           postinc2	equ	0xFDE
 10804                           postdec2	equ	0xFDD
 10805                           plusw2	equ	0xFDB
 10806                           fsr2h	equ	0xFDA
 10807                           fsr2l	equ	0xFD9
 10808                           status	equ	0xFD8
 10809                           
 10810                           	psect	rparam
 10811  0000                     pclatu	equ	0xFFB
 10812                           pclath	equ	0xFFA
 10813                           tblptru	equ	0xFF8
 10814                           tblptrh	equ	0xFF7
 10815                           tblptrl	equ	0xFF6
 10816                           tablat	equ	0xFF5
 10817                           prodh	equ	0xFF4
 10818                           prodl	equ	0xFF3
 10819                           intcon	equ	0xFF2
 10820                           intcon2	equ	0xFF1
 10821                           postinc0	equ	0xFEE
 10822                           fsr0h	equ	0xFEA
 10823                           fsr0l	equ	0xFE9
 10824                           wreg	equ	0xFE8
 10825                           indf1	equ	0xFE7
 10826                           postdec1	equ	0xFE5
 10827                           fsr1h	equ	0xFE2
 10828                           fsr1l	equ	0xFE1
 10829                           indf2	equ	0xFDF
 10830                           postinc2	equ	0xFDE
 10831                           postdec2	equ	0xFDD
 10832                           plusw2	equ	0xFDB
 10833                           fsr2h	equ	0xFDA
 10834                           fsr2l	equ	0xFD9
 10835                           status	equ	0xFD8
 10836                           
 10837                           	psect	temp
 10838  000042                     btemp:
 10839                           	opt stack 0
 10840  000042                     	ds	1
 10841  0000                     int$flags	set	btemp
 10842                           pclatu	equ	0xFFB
 10843                           pclath	equ	0xFFA
 10844                           tblptru	equ	0xFF8
 10845                           tblptrh	equ	0xFF7
 10846                           tblptrl	equ	0xFF6
 10847                           tablat	equ	0xFF5
 10848                           prodh	equ	0xFF4
 10849                           prodl	equ	0xFF3
 10850                           intcon	equ	0xFF2
 10851                           intcon2	equ	0xFF1
 10852                           postinc0	equ	0xFEE
 10853                           fsr0h	equ	0xFEA
 10854                           fsr0l	equ	0xFE9
 10855                           wreg	equ	0xFE8
 10856                           indf1	equ	0xFE7
 10857                           postdec1	equ	0xFE5
 10858                           fsr1h	equ	0xFE2
 10859                           fsr1l	equ	0xFE1
 10860                           indf2	equ	0xFDF
 10861                           postinc2	equ	0xFDE
 10862                           postdec2	equ	0xFDD
 10863                           plusw2	equ	0xFDB
 10864                           fsr2h	equ	0xFDA
 10865                           fsr2l	equ	0xFD9
 10866                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        7
    BSS         400
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     44      65
    BANK0           160    103     157
    BANK1           256     25     251
    BANK2           256      0     106
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 106
		 -> output_buffer(BANK2[106]), input_buffer(BANK1[106]), 

    memset@p	PTR unsigned char  size(2) Largest target is 106
		 -> output_buffer(BANK2[106]), input_buffer(BANK1[106]), 

    SetDataDict@DataArray	PTR unsigned char  size(2) Largest target is 4
		 -> ComController@DataRecived(BANK1[4]), updateComms@DataGet(BANK0[2]), 

    GetDataDict@DataArray	PTR unsigned char  size(2) Largest target is 4
		 -> ComController@DataToSend_1658(BANK1[4]), ComController@DataToSend(BANK1[4]), updateComms@DataGet(BANK0[2]), 

    cobs_decode@dst_write_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK1[30]), 

    cobs_decode@dst_buf_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK1[30]), 

    cobs_decode@dst_buf_end_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK1[30]), 

    cobs_decode@src_ptr	PTR const unsigned char  size(2) Largest target is 30
		 -> ReciveArray(BANK1[30]), 

    cobs_decode@src_end_ptr	PTR const unsigned char  size(2) Largest target is 30
		 -> ReciveArray(BANK1[30]), 

    cobs_encode@dst_write_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> sendData@COBSArray(BANK0[30]), 

    cobs_encode@dst_code_write_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> sendData@COBSArray(BANK0[30]), 

    cobs_encode@dst_buf_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> sendData@COBSArray(BANK0[30]), 

    cobs_encode@dst_buf_end_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> sendData@COBSArray(BANK0[30]), 

    cobs_encode@src_ptr	PTR const unsigned char  size(2) Largest target is 30
		 -> sendData@SendArray(BANK0[30]), 

    cobs_encode@src_end_ptr	PTR const unsigned char  size(2) Largest target is 30
		 -> sendData@SendArray(BANK0[30]), 

    ComController@DTI	PTR unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK1[30]), 

    sendData@DTS	PTR unsigned char  size(2) Largest target is 4
		 -> ComController@DataToSend_1658(BANK1[4]), ComController@DataToSend(BANK1[4]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK1[30]), sendData@SendArray(BANK0[30]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 106
		 -> output_buffer(BANK2[106]), input_buffer(BANK1[106]), 

    UART_buff_flush@_this	PTR struct UART_ring_buff size(2) Largest target is 106
		 -> input_buffer(BANK1[106]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 106
		 -> output_buffer(BANK2[106]), input_buffer(BANK1[106]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 106
		 -> output_buffer(BANK2[106]), input_buffer(BANK1[106]), 

    sp__memset	PTR void  size(2) Largest target is 106
		 -> output_buffer(BANK2[106]), input_buffer(BANK1[106]), 

    UART_buff_init@_this	PTR struct UART_ring_buff size(2) Largest target is 106
		 -> output_buffer(BANK2[106]), input_buffer(BANK1[106]), 


Critical Paths under _main in COMRAM

    _updateComms->_processPowerRequest
    _Receive_get->_UART_buff_get
    _Receive_available->_UART_buff_size
    _ComController->_sendData
    _sendData->_Send_put
    _Send_put->_UART_buff_get
    _Send_put->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc
    _UART_buff_get->_UART_buff_modulo_inc
    _ClearBuffer->_UART_buff_flush
    _UART_buff_flush->_memset
    _processPowerRequest->_EnableSlavePower
    _FaultsCollector->_GetPDUFault
    _EUSART1_Initialize->_UART_buff_init
    _UART_buff_init->_memset
    _Update->_writeRegisters
    _StartUp595->_Clear595
    _Clear595->_writeRegisters
    _writeRegisters->_Delay
    _EnableSlavePower->_SetPin595
    _ComputeStorageData->_DATAEE_ReadByte
    _CoolingStop->_PotClear
    _CoolingStart->_PotSetpoint
    _PotSetpoint->_Delay
    _PotClear->_Delay

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR1_ISR->_ReadCurrent
    i2_Update->i2_writeRegisters
    i2_writeRegisters->i2_Delay
    _FuseSystem->___wmul
    _EUSART1_Transmit_ISR->i2_UART_buff_get
    i2_UART_buff_get->i2_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->i2_UART_buff_put
    i2_UART_buff_put->i2_UART_buff_modulo_inc

Critical Paths under _main in BANK0

    _main->_updateComms
    _updateComms->_receiveData
    _receiveData->_ComController
    _ComController->_sendData
    _sendData->_cobs_encode
    _CoolingStart->_PotSetpoint

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _updateComms->_receiveData
    _receiveData->_ComController

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   64273
                                             20 BANK1      5     5      0
                 _ComputeStorageData
                       _CoolingCheck
                       _CoolingStart
                        _CoolingStop
                         _PDUStartup
                 _PWM4_LoadDutyValue
                        _PotSetpoint
                  _SYSTEM_Initialize
                        _updateComms
 ---------------------------------------------------------------------------------
 (1) _updateComms                                          2     2      0   34968
                                            101 BANK0      2     2      0
                    _FaultsCollector
                        _GetDataDict
                        _SetDataDict
                _processPowerRequest
                        _receiveData
 ---------------------------------------------------------------------------------
 (2) _receiveData                                         12    12      0   17556
                                             96 BANK0      5     5      0
                                             13 BANK1      7     7      0
                               _CRC8
                        _ClearBuffer
                      _ComController
                  _Receive_available
                        _Receive_get
                        _cobs_decode
 ---------------------------------------------------------------------------------
 (3) _cobs_decode                                         24    16      8    1783
                                             28 COMRAM    10     2      8
                                              0 BANK0     14    14      0
 ---------------------------------------------------------------------------------
 (3) _Receive_get                                          0     0      0    1308
                      _UART_buff_get
 ---------------------------------------------------------------------------------
 (3) _Receive_available                                    2     0      2     176
                                             30 COMRAM     2     0      2
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (4) _UART_buff_size                                       2     0      2     176
                                             28 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _ComController                                       19    15      4   12407
                                             90 BANK0      6     2      4
                                              0 BANK1     13    13      0
                              _Delay
                        _GetDataDict
                        _SetDataDict
                           _sendData
 ---------------------------------------------------------------------------------
 (4) _sendData                                            81    74      7    7337
                                             40 COMRAM     4     4      0
                                             13 BANK0     77    70      7
                               _CRC8
                           _Send_put
                        _cobs_encode
 ---------------------------------------------------------------------------------
 (5) _cobs_encode                                         23    15      8    1613
                                             28 COMRAM    10     2      8
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (5) _Send_put                                             1     1      0    2913
                                             39 COMRAM     1     1      0
                      _UART_buff_get
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (6) _UART_buff_put                                        5     2      3    1574
                                             34 COMRAM     5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (4) _UART_buff_get                                        5     3      2    1308
                                             34 COMRAM     5     3      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _UART_buff_modulo_inc                                 6     2      4     850
                                             28 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _CRC8                                                 7     4      3     604
                                             28 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (4) _SetDataDict                                          8     4      4    1042
                                             28 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (4) _GetDataDict                                          8     4      4    1312
                                             28 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _ClearBuffer                                          0     0      0    1012
                    _UART_buff_flush
 ---------------------------------------------------------------------------------
 (4) _UART_buff_flush                                      4     0      4    1012
                                             36 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (2) _processPowerRequest                                  3     3      0   14712
                                             41 COMRAM     3     3      0
                   _EnableSlavePower
                             _Update
 ---------------------------------------------------------------------------------
 (2) _FaultsCollector                                      7     7      0     232
                                             29 COMRAM     7     7      0
                        _GetPDUFault
 ---------------------------------------------------------------------------------
 (3) _GetPDUFault                                          1     1      0      31
                                             28 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     888
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM4_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0     888
                     _UART_buff_init
 ---------------------------------------------------------------------------------
 (3) _UART_buff_init                                       2     0      2     888
                                             36 COMRAM     2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               8     2      6     677
                                             28 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PDUStartup                                           0     0      0   18689
                 _ComputeStorageData
                   _EnableSlavePower
                         _StartUp595
                             _Update
 ---------------------------------------------------------------------------------
 (3) _Update                                               0     0      0    2035
                     _writeRegisters
 ---------------------------------------------------------------------------------
 (2) _StartUp595                                           0     0      0    4002
                           _Clear595
                              _Delay
 ---------------------------------------------------------------------------------
 (3) _Clear595                                             2     2      0    2134
                                             41 COMRAM     2     2      0
                     _writeRegisters
 ---------------------------------------------------------------------------------
 (4) _writeRegisters                                       4     4      0    2035
                                             37 COMRAM     4     4      0
                              _Delay
 ---------------------------------------------------------------------------------
 (3) _EnableSlavePower                                     3     1      2   12491
                                             38 COMRAM     3     1      2
                          _SetPin595
 ---------------------------------------------------------------------------------
 (4) _SetPin595                                           10     4      6   10623
                                             28 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (2) _ComputeStorageData                                   4     4      0     161
                                             29 COMRAM     4     4      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_ReadByte                                      1     1      0      31
                                             28 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _CoolingStop                                          0     0      0    2268
                 _PWM4_LoadDutyValue
                           _PotClear
 ---------------------------------------------------------------------------------
 (1) _CoolingStart                                         0     0      0    4579
                 _PWM4_LoadDutyValue
                           _PotClear
                        _PotSetpoint
 ---------------------------------------------------------------------------------
 (1) _PotSetpoint                                         10     8      2    2311
                                             37 COMRAM     4     2      2
                                              0 BANK0      6     6      0
                              _Delay
 ---------------------------------------------------------------------------------
 (2) _PotClear                                             2     2      0    1936
                                             37 COMRAM     2     2      0
                              _Delay
 ---------------------------------------------------------------------------------
 (4) _Delay                                                9     5      4    1868
                                             28 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (1) _PWM4_LoadDutyValue                                   4     2      2     332
                                             28 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _CoolingCheck                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                          14    14      0    6300
                                             14 COMRAM    14    14      0
                            _ADC_ISR
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR1_ISR                                             0     0      0    5091
                         _FuseSystem
                        _ReadCurrent
 ---------------------------------------------------------------------------------
 (10) _ReadCurrent                                         1     1      0    4644
                                             13 COMRAM     1     1      0
                  _ADC_GetConversion
                        i2_SetPin595
                           i2_Update
 ---------------------------------------------------------------------------------
 (11) i2_Update                                            0     0      0     212
                   i2_writeRegisters
 ---------------------------------------------------------------------------------
 (12) i2_writeRegisters                                    4     4      0     212
                                              9 COMRAM     4     4      0
                            i2_Delay
 ---------------------------------------------------------------------------------
 (13) i2_Delay                                             9     5      4      98
                                              0 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (11) i2_SetPin595                                        10     4      6    4278
                                              0 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (11) _ADC_GetConversion                                   5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (10) _FuseSystem                                          4     4      0     447
                                              6 COMRAM     4     4      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (11) ___wmul                                              6     2      4     311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Transmit_ISR                                 0     0      0     528
                    i2_UART_buff_get
                   i2_UART_buff_size
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_size                                    2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_get                                     5     3      2     480
                                              6 COMRAM     5     3      2
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Receive_ISR                                  1     1      0     681
                                             11 COMRAM     1     1      0
                    i2_UART_buff_put
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_put                                     5     2      3     658
                                              6 COMRAM     5     2      3
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (11) i2_UART_buff_modulo_inc                              6     2      4     298
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _ADC_ISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ComputeStorageData
     _DATAEE_ReadByte
   _CoolingCheck
   _CoolingStart
     _PWM4_LoadDutyValue
     _PotClear
       _Delay
     _PotSetpoint
       _Delay
   _CoolingStop
     _PWM4_LoadDutyValue
     _PotClear
       _Delay
   _PDUStartup
     _ComputeStorageData
       _DATAEE_ReadByte
     _EnableSlavePower
       _SetPin595
     _StartUp595
       _Clear595
         _writeRegisters
           _Delay
       _Delay
     _Update
       _writeRegisters
         _Delay
   _PWM4_LoadDutyValue
   _PotSetpoint
     _Delay
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
       _UART_buff_init
         _memset
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM4_Initialize
     _TMR1_Initialize
       _TMR1_StartTimer
     _TMR2_Initialize
       _TMR2_StartTimer
   _updateComms
     _FaultsCollector
       _GetPDUFault
     _GetDataDict
     _SetDataDict
     _processPowerRequest
       _EnableSlavePower
         _SetPin595
       _Update
         _writeRegisters
           _Delay
     _receiveData
       _CRC8
       _ClearBuffer
         _UART_buff_flush
           _memset
       _ComController
         _Delay
         _GetDataDict
         _SetDataDict
         _sendData
           _CRC8
           _Send_put
             _UART_buff_get
               _UART_buff_modulo_inc
             _UART_buff_put
               _UART_buff_modulo_inc
           _cobs_encode
       _Receive_available
         _UART_buff_size
       _Receive_get
         _UART_buff_get
           _UART_buff_modulo_inc
       _cobs_decode

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
   _EUSART1_Receive_ISR
     i2_UART_buff_put
       i2_UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     i2_UART_buff_get
       i2_UART_buff_modulo_inc
     i2_UART_buff_size
   _TMR1_ISR
     _FuseSystem
       ___wmul
     _ReadCurrent
       _ADC_GetConversion
       i2_SetPin595
       i2_Update
         i2_writeRegisters
           i2_Delay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      6A       8       41.4%
BITBANK1           100      0       0       5        0.0%
BANK1              100     19      FB       6       98.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     67      9D       4       98.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2C      41       1       69.1%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     243       9        0.0%
DATA                 0      0     243      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Sun Aug 13 21:11:44 2017

                __end_of_GetDataDict 1776               i2_UART_buff_modulo_inc 206C  
                      ??_CoolingStop 0028                       ??_CoolingCheck 001D  
           cobs_encode@dst_write_ptr 0068             GetDataDict@ReturnCounter 0024  
                ___wmul@multiplicand 0003                       ??_CoolingStart 002A  
                       __CFG_CP0$OFF 000000                         __CFG_CP1$OFF 000000  
                       __CFG_CP2$OFF 000000                         __CFG_CP3$OFF 000000  
                                l721 130A                                  l730 1610  
                                l546 1962                                  l724 1364  
                                l548 196C                                  l389 0F72  
                                l729 15D6                                  l770 1DC0  
                                l599 1804                                  l885 1762  
                                l899 16CA                         __CFG_CPB$OFF 000000  
                                _PR2 000FBB                         __CFG_CPD$OFF 000000  
                    _timer1ReloadVal 0038                      __end_of_ADC_ISR 227A  
                    _TMR2_Initialize 21E2                      _PWM4_Initialize 21F6  
                                prod 000FF3                                  wreg 000FE8  
      i2UART_buff_modulo_inc@modulus 0003          _COBS_DECODE_DST_BUF_LEN_MAX 003B  
                       __CFG_LVP$OFF 000000            SetDataDict@DataTableIndex 001D  
                    _UART_buff_flush 1B12                                 l4000 0ABE  
                               l4004 0ADA                                 l4100 0B82  
                               l4030 13E0                                 l4110 0BC2  
                               l4040 145C                                 l4032 13FE  
                               l4120 0C02                                 l4036 1420  
                               l4028 13C2                                 l4044 147A  
                               l4300 0E82                                 l4132 0C2C  
                               l4140 0C44                                 l4038 143E  
                               l4054 1EF8                                 l4310 0ED4  
                               l4150 0C78                                 l4118 0BFE  
                               l4064 1F1E                                 l4312 0EE2  
                               l4304 0EA2                                 l4322 0F32  
                               l4306 0EB0                                 l4154 0C8C  
                               l4090 0B58                                 l4332 1CAE  
                               l4324 0F40                                 l4316 0F00  
                               l4180 0862                                 l4172 0802  
                               l4092 0B60                                 l4084 0B44  
                               l4342 1CEE                                 l4318 0F0E  
                               l3710 2062                                 l4270 11DA  
                               l4360 14AA                                 l4336 1CBE  
                               l4328 0F64                                 l3800 0D22  
                               l4176 0820                                 l4370 14D4  
                               l3722 1004                                 l4290 12BE  
                               l4364 14BA                                 l3900 1690  
                               l3716 0F98                                 l3812 0D58  
                               l4284 12A2                                 l3742 1DEA  
                               l3750 2020                                 l3902 1698  
                               l3910 16CE                                 l3830 0DA6  
                               l3806 0D36                                 l4384 1344  
                               l3736 1800                                 l3808 0D3E  
                               l3746 1E04                                 l4394 1396  
                               l3754 2030                                 l4298 0E74  
                               l3850 0DF6                                 l3924 195A  
                               l3916 192E                                 l3908 16C0  
                               l4484 18DE                                 l3774 1DAA  
                               l3782 1DC6                                 l4494 1900  
                               l3768 1D94                                 l3784 1DCC  
                               l3856 0E18                                 l3874 171E  
                               l3866 16EE                                 l3890 1656  
                               l3858 0E24                                 l3884 1758  
                               l3876 1728                                 l3868 16F6  
                               l3892 165E                                 l3972 0992  
                               l3948 093A                                 l3878 1730  
                               l3886 1766                                 l3958 0966  
                               l3992 0A54                                 l3898 1686  
                               l3978 09D2                                 l3996 0A92  
              __end_of_ComController 092C                                 _CRC8 1D8E  
                               u3010 1610                                 _LATA 000F89  
                               u2310 1794                                 _LATB 000F8A  
                               _LATC 000F8B                                 _LATD 000F8C  
                               _LATE 000F8D                                 u3077 11F8  
                               u3087 1DF0                                 u2820 12A0  
                               u2905 0F48                                 u2780 11C0  
                               u2934 1CD8                                 u2935 1CD2  
                               u2885 0F16                                 i2l31 1FD0  
                               i2l71 0066                                 i2l75 0070  
                               i2l67 004E                                 i2l69 005A  
                               _TMR2 000FBC                                 _WPUB 000F61  
                    __end_ofi2_Delay 1E6C                                 _data 00D3  
                               _main 189A             __end_of_EnableSlavePower 14A2  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                               fsr2h 000FDA                                 fsr0l 000FE9  
                               indf1 000FE7                                 indf2 000FDF  
                               fsr1l 000FE1                                 fsr2l 000FD9  
                               btemp 0042                        __CFG_BORV$190 000000  
                               prodh 000FF4                                 prodl 000FF3  
                               start 00AC                        __CFG_IESO$OFF 000000  
                  ?i2_writeRegisters 0001                     ?_FaultsCollector 0001  
                       ___param_bank 000000                        ??_ReadCurrent 000E  
                 ??i2_writeRegisters 000A       i2UART_buff_modulo_inc@my_value 0005  
                     GetPDUFault@loc 001D                                ?_CRC8 001D  
            ComController@DataToSend 01E6       __size_of_OSCILLATOR_Initialize 000E  
      __end_of_OSCILLATOR_Initialize 224C                                ?_main 0001  
                              _EEADR 000FA9                                _ANSB3 0079CB  
                              _ANSB4 0079CC                      _TMR1_StartTimer 226E  
                              _ANSD7 0079DF                                _T1CON 000FCD  
                              _T2CON 000FBA                                _LATB0 007C50  
                              _LATA3 007C4B                                _LATB3 007C53  
                              _LATB4 007C54                                _LATB5 007C55  
                              _LATC5 007C5D                                _LATD4 007C64  
                              _LATD5 007C65                                _LATD6 007C66  
                              _LATD7 007C67                       __CFG_DEBUG$OFF 000000  
                        ?_PDUStartup 0001                                i2l630 2146  
                              i2l546 19E0                                i2l548 19EA  
                              i2l479 1A96                                i2l599 1896  
                              _MCSOn 003A                   _PWM4_LoadDutyValue 1F88  
                              _TMR1H 000FCF                                _TMR1L 000FCE  
                __end_of_CoolingStop 2230                                _TRISA 000F92  
                              _TRISB 000F93                                _TRISC 000F94  
                              _TRISD 000F95                                _TRISE 000F96  
                              _Delay 1DD8                          _GetPDUFault 21B6  
                      __CFG_WRT0$OFF 000000                        __CFG_WRT1$OFF 000000  
                      __CFG_WRT2$OFF 000000                        __CFG_WRT3$OFF 000000  
               _EUSART1_Transmit_ISR 1F56                       __CFG_EBTR0$OFF 000000  
                     __CFG_FCMEN$OFF 000000                       __CFG_EBTR1$OFF 000000  
                     __CFG_EBTR2$OFF 000000                       __CFG_EBTR3$OFF 000000  
                   ??_writeRegisters 0026                     __end_of_TMR1_ISR 1F56  
                      __CFG_WRTB$OFF 000000                        __CFG_WRTC$OFF 000000  
                      __CFG_WRTD$OFF 000000                      _DATAEE_ReadByte 220A  
                     __CFG_EBTRB$OFF 000000                  ?_PWM4_LoadDutyValue 001D  
                 __CFG_MCLRE$EXTMCLR 000000                                main@i 01F6  
                              main@j 01F8             SetDataDict@ReturnCounter 0024  
                        _ClearBuffer 21A0              __end_of_TMR1_Initialize 2102  
                   __end_ofi2_Update 226A                                pclath 000FFA  
                              tablat 000FF5                        ??_Receive_get 0028  
                      receiveData@CS 01EF                                plusw2 000FDB  
                              status 000FD8                          _GetDataDict 16DE  
                   __end_of_Clear595 1F24                        ??_SetDataDict 0021  
                     __CFG_HFOFST$ON 000000                      _TMR2_StartTimer 226A  
                       ?_receiveData 0001                       __CFG_PBADEN$ON 000000  
               PotSetpoint@new_point 0026                         __end_of_CRC8 1DD8  
                    __initialization 1C38           __end_of_EUSART1_Initialize 1EF0  
                       __end_of_main 191E                           _CurrentADC 00C7  
         UART_buff_flush@clearBuffer 0027                 ??_PWM4_LoadDutyValue 001F  
                             ??_CRC8 0020              __end_of_PWM4_Initialize 220A  
            __end_of_TMR2_Initialize 21F6                            ??_ADC_ISR 0001  
        ?_INTERRUPT_InterruptManager 0001                 PotSetpoint@set_point 0060  
                         _FuseSystem 1A1A                               ??_main 002D  
           ComController@DataRecived 01E2                  __end_of_ReadCurrent 0740  
                   __end_of_PotClear 1646                        __activetblptr 000002  
                   __end_of_Send_put 2016              __end_of_UART_buff_flush 1B74  
          __size_ofi2_UART_buff_size 0016                               ?_Delay 001D  
              ?_EUSART1_Transmit_ISR 0001                 GetDataDict@DataArray 001E  
               GetDataDict@DataCount 0023                 GetDataDict@DataTable 0022  
               SetDataDict@DataArray 001E                 SetDataDict@DataCount 0023  
               SetDataDict@DataTable 0022                            ??i2_Delay 0005  
                             _ADCON0 000FC2                               _ADCON1 000FC1  
                             _ADCON2 000FC0                 __size_of_cobs_decode 01BE  
                        FuseSystem@i 0009                               _ADRESH 000FC4  
                             _ADRESL 000FC3                               _EEDATA 000FA8  
                             _CCPR2H 000F68                               _CCPR2L 000F67  
                             _EECON2 000FA7                 __size_of_cobs_encode 0198  
                             _ANSELA 000F38                               _ANSELB 000F39  
                             _ANSELC 000F3A                               _ANSELD 000F3B  
                             _ANSELE 000F3C                               _T1GCON 000FCC  
               __end_of_CoolingCheck 2276                      i2_UART_buff_get 1808  
                             _RC1STA 000FAB                               i2l3024 19D8  
                             i2l3016 19AC                      i2_UART_buff_put 1092  
                             Delay@i 0022                               i2l3322 1A22  
                             i2l3332 1A78                               i2l3246 208C  
                             i2l3334 1A80                               i2l3326 1A32  
                     __CFG_WDTEN$OFF 000000                               i2l3360 03F8  
                             i2l3338 1A90                               i2l3354 02E0  
                             i2l3372 0628                               i2l3348 01C8  
                             i2l3542 10B2                               i2l3366 0510  
        UART_buff_modulo_inc@modulus 001F                               i2l3562 1892  
                             i2l3548 111E                               i2l3580 1F80  
                             i2l2870 1E4E                               i2l2866 1E34  
                             i2l3598 1F4E                               _TABLAT 000FF5  
                             _RCREG1 000FAE                               _OSCCON 000FD3  
        __end_of_processPowerRequest 0F78                               _SPBRG1 000FAF  
               __end_of_CoolingStart 213E                               _TX1STA 000FAC  
                             _TRISB3 007C9B                               _TRISB4 007C9C  
                             _TRISB5 007C9D                               _TXREG1 000FAD  
                __size_of_PDUStartup 0062                       __CFG_XINST$OFF 000000  
                      ??_PotSetpoint 0028                  __end_of_Receive_get 223E  
                       _CCPTMRS1bits 000F48                               _Update 225E  
                 __size_of_SetPin595 004E                        _output_buffer 0200  
            __end_of_TMR1_StartTimer 2272                  __end_of_SetDataDict 16DE  
                             ___wmul 2096                            CRC8@tempI 0022  
                     __CFG_STVREN$ON 000000                          _CoolingStop 221E  
                             _memset 2016                               clear_0 1C5E  
                             clear_1 1C6A                               clear_2 1C76  
                             clear_3 1C82                               main@UP 01FA  
                   __end_of_sendData 0B00              __end_of_DATAEE_ReadByte 221E  
                       __pdataCOMRAM 003B               cobs_encode@dst_buf_len 001F  
             cobs_encode@dst_buf_ptr 001D                        Send_put@_data 0028  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8                           _StartUp595 1BD6  
           ADC_GetConversion@channel 0005         __end_of_UART_buff_modulo_inc 206C  
            __end_of_TMR2_StartTimer 226E        __size_of_INTERRUPT_Initialize 000A  
                  ReadCurrent@gather 000E                     ?_TMR1_Initialize 0001  
                  _SYSTEM_Initialize 20BC                           __accesstop 0060  
            __end_of__initialization 1C88                         ?i2_SetPin595 0001  
                      sendData@count 00B7                        sendData@lenth 0072  
                 ?_SYSTEM_Initialize 0001                        ___rparam_used 000001  
            ?i2_UART_buff_modulo_inc 0001                         ?_updateComms 0001  
                      __end_of_Delay 1E22                       __pcstackCOMRAM 0001  
                ??_SYSTEM_Initialize 0027                          _ReadCurrent 00B0  
                          ?_TMR1_ISR 0001                     ?_TMR2_Initialize 0001  
                   ?_PWM4_Initialize 0001                 UART_buff_flush@_this 0025  
                        ?_FuseSystem 0001                            ?i2_Update 0001  
                __end_of_PotSetpoint 13BE          __size_of_ComputeStorageData 00DC  
        PWM4_LoadDutyValue@dutyValue 001D                   UART_buff_get@_this 0023  
                        _Currentcomp 00DF                __end_of_UART_buff_get 1808  
             ??_EUSART1_Transmit_ISR 000C                __end_of_UART_buff_put 1092  
                          ?_Clear595 0001                     ?_UART_buff_flush 0025  
                            ??_Delay 0021              __end_ofi2_UART_buff_get 189A  
            __end_ofi2_UART_buff_put 11AC          __end_of_EUSART1_Receive_ISR 215C  
                            CRC8@crc 0023                              CRC8@len 001F  
                            CRC8@sum 0020                    __end_of_SetPin595 1D40  
          __end_of_SYSTEM_Initialize 20E0                          sendData@DTS 0070  
             cobs_decode@dst_buf_len 001F                           __pbssBANK0 00C7  
                         __pbssBANK1 0100                           __pbssBANK2 0200  
             cobs_decode@dst_buf_ptr 001D                      __CFG_PLLCFG$OFF 000000  
                        _Receive_get 2230       __end_ofi2_UART_buff_modulo_inc 2096  
                        _SetDataDict 1646                    ?_EnableSlavePower 0027  
            __size_of_UART_buff_init 001E                          _ReciveArray 01C4  
            __size_of_UART_buff_size 0016                            ?_PotClear 0001  
                          ?_Send_put 0001                   ??_EnableSlavePower 0029  
               __size_of_receiveData 0116                   __CFG_CCP2MX$PORTC1 000000  
                            ?_Update 0001                              ?___wmul 0001  
                   ?_TMR1_StartTimer 0001                           ??_TMR1_ISR 000F  
                 __CFG_CCP3MX$PORTB5 000000             cobs_decode@dst_write_ptr 0068  
         cobs_decode@remaining_bytes 0066                              _CCP2CON 000F66  
                            _ADC_ISR 2276                              ?_memset 001D  
                         ??i2_Update 000E              __size_of_ADC_Initialize 0018  
                   ?_DATAEE_ReadByte 0001                         ??_PDUStartup 002C  
                 UART_buff_put@_this 0023                      cobs_decode@F192 0030  
                         ??_Clear595 002A                     i2_UART_buff_size 21CC  
          __size_ofi2_writeRegisters 007E          i2UART_buff_modulo_inc@value 0001  
                       ?_GetPDUFault 0001                __size_of_CoolingCheck 0004  
                            _OSCCON2 000FD2                              _TBLPTRH 000FF7  
                            _TBLPTRL 000FF6                              _TBLPTRU 000FF8  
                        ?_StartUp595 0001                    _Receive_available 2174  
       UART_buff_modulo_inc@my_value 0021                    __CFG_PRICLKEN$OFF 000000  
                            _OSCTUNE 000F9B                              _SPBRGH1 000FB0  
                sendData@whereToSend 00B0                              i2_Delay 1E22  
              __size_of_CoolingStart 001E                     ?_TMR2_StartTimer 0001  
                 ?_Receive_available 001F                         ?_ClearBuffer 0001  
                       ?_GetDataDict 001D         ComController@DataToSend_1658 01EA  
                __size_of_FuseSystem 007E                     ComController@DTI 00BA  
                ??_Receive_available 0021                            ?_sendData 006D  
                            _Current 0130                      __CFG_PWRTEN$OFF 000000  
                         ??_PotClear 0026                           ??_Send_put 0028  
                            __Hparam 0000                              __Lparam 0000  
                 __end_of_PDUStartup 1BD6               cobs_encode@src_end_ptr 0060  
                        _PotSetpoint 12C2                      __size_of_Update 0006  
               _UART_buff_modulo_inc 2042                      __size_of___wmul 0026  
                       _CoolingCheck 2272                              __pcinit 1C38  
             __size_of_ComController 01EC                      __size_of_memset 002C  
                            __ramtop 0600                     FaultsCollector@i 0023  
                   i2UART_buff_get@c 000B                              __ptext0 189A  
                            __ptext1 1E6C                              __ptext2 11AC  
                            __ptext3 0B00                              __ptext4 2230  
                            __ptext5 2174                              __ptext6 218A  
                            __ptext7 0740                              __ptext8 092C  
                            __ptext9 0CBE             __size_of_FaultsCollector 005C  
                       _CoolingStart 2120                     i2UART_buff_put@c 0009  
                          _T1CONbits 000FCD           cobs_encode@dst_buf_end_ptr 0063  
              _OSCILLATOR_Initialize 223E            __end_of_Receive_available 218A  
                          _T2CONbits 000FBA                  cobs_encode@src_byte 0062  
                 _EUSART1_Initialize 1EB4                     ?i2_UART_buff_get 0007  
           ??_PIN_MANAGER_Initialize 001D                            Clear595@i 002A  
                   ?i2_UART_buff_put 0007           __size_of_SYSTEM_Initialize 0024  
               end_of_initialization 1C88                            Delay@wait 001D  
                ?_EUSART1_Initialize 0001                      cobs_encode@F180 0033  
                            memset@c 001F                              memset@n 0021  
                            memset@p 0023                        __Lmediumconst 0000  
                         ??_sendData 0029                 __size_ofi2_SetPin595 004E  
                    receiveData@Data 01F2                            _PDUFalult 00F5  
              ?_UART_buff_modulo_inc 001D                 __size_of_updateComms 0048  
                            postdec1 000FE5                              postdec2 000FDD  
                __size_of_StartUp595 0062                              postinc0 000FEE  
                            postinc2 000FDE          __size_of_PWM4_LoadDutyValue 0030  
                       ?_CoolingStop 0001                         SetPin595@Reg 001D  
               ??_EUSART1_Initialize 0027                         SetPin595@pin 001F  
                  cobs_decode@result 006B               cobs_decode@src_end_ptr 0060  
                      ??_cobs_decode 0025                        ??_cobs_encode 0025  
                          _TRISCbits 000F94                            _TRISDbits 000F95  
                   FuseSystem@i_1226 0007                       sendData@result 00B2  
                      _ComController 0740                i2UART_buff_size@_this 0001  
                     _UART_buff_init 2102                       _UART_buff_size 218A  
            __size_of_writeRegisters 007E                   updateComms@DataGet 00C5  
       __size_of_processPowerRequest 0122                         ?_ReadCurrent 0001  
       __end_of_INTERRUPT_Initialize 2256                       __end_of_Update 2264  
             GetDataDict@numbofbytes 0020                       __end_of___wmul 20BC  
                      __pidataCOMRAM 2256                         ??_FuseSystem 0007  
                  __size_of_TMR1_ISR 0032                       _ADC_Initialize 215C  
             ?_OSCILLATOR_Initialize 0001                       __end_of_memset 2042  
                       receiveData@i 01F0           __size_of_Receive_available 0016  
                   i2_writeRegisters 199C                    __size_ofi2_Update 0006  
                start_initialization 1C38      __size_of_PIN_MANAGER_Initialize 007A  
              EnableSlavePower@slave 0029               SetDataDict@numbofbytes 0020  
                  __size_of_Clear595 0034                    ??_FaultsCollector 001E  
               __size_of_GetPDUFault 0016                  i2writeRegisters@val 000A  
                          PotClear@x 0026                   ComController@lenth 00BC  
                     ?_ComController 00BA                  __end_of_cobs_decode 0CBE  
             __end_of_UART_buff_init 2120                       UART_buff_get@c 0027  
             __end_of_UART_buff_size 21A0                  __end_of_cobs_encode 0E56  
                       ?_Receive_get 0001                            _SetPin595 1CF2  
                     UART_buff_put@c 0025                 __size_of_ClearBuffer 0016  
                       ?_SetDataDict 001D                  DATAEE_ReadByte@bAdd 001D  
                 __end_of_FuseSystem 1A98             __end_ofi2_UART_buff_size 21E2  
               __size_of_GetDataDict 0098                       ComController@k 01EE  
             ??_UART_buff_modulo_inc 0021             __size_of_TMR1_Initialize 0022  
                           CRC8@data 001D                             ??_Update 002A  
                  __size_of_PotClear 00C8                    __size_of_Send_put 002E  
                           ??___wmul 0005               __end_of_ADC_Initialize 2174  
         __end_of_ComputeStorageData 157E                             ?_ADC_ISR 0001  
                           ??_memset 0023            __size_of_EnableSlavePower 00E4  
                        __pbssCOMRAM 002D        __size_of_EUSART1_Transmit_ISR 0032  
                      __pcstackBANK0 0060                        __pcstackBANK1 01E2  
                       ??_StartUp595 002C             __size_of_PWM4_Initialize 0014  
           __size_of_TMR2_Initialize 0014                             ?i2_Delay 0001  
                UART_buff_init@_this 0025                    i2writeRegisters@i 000C  
                    ?_UART_buff_init 0025             __size_of_UART_buff_flush 0062  
                    ?_UART_buff_size 001D         __size_of_EUSART1_Receive_ISR 001E  
                         ?_SetPin595 001D                        ??_receiveData 00C0  
                         sendData@CS 00B1                cobs_encode@search_len 0065  
             __size_of_UART_buff_get 0092               __size_of_UART_buff_put 011A  
             _PIN_MANAGER_Initialize 1A98                    __size_of_sendData 01D4  
                       ?_PotSetpoint 0026                            __pintcode 0008  
                 __end_of_StartUp595 1C38                      ?_ADC_Initialize 0001  
       ??_INTERRUPT_InterruptManager 000F                 i2UART_buff_get@_this 0007  
               __size_of_CoolingStop 0012                       i2SetPin595@Reg 0001  
                     i2SetPin595@pin 0003                             _BAUD1CON 000FB8  
           __size_of_TMR1_StartTimer 0004                       __size_of_Delay 004A  
                        _cobs_decode 0B00                          _cobs_encode 0CBE  
             sendData@DataTableIndex 006F                      ??_ComController 00BE  
           __size_of_DATAEE_ReadByte 0014          _COBS_ENCODE_DST_BUF_LEN_MAX 003D  
             FaultsCollector@sendVal 0021                 _INTERRUPT_Initialize 224C  
                 cobs_encode@src_len 0023                   cobs_encode@src_ptr 0021  
        processPowerRequest@powerSet 002C                       ___wmul@product 0005  
                           _LATCbits 000F8B                       _writeRegisters 191E  
                UART_buff_size@_this 001D                            _registers 0100  
                           _IPR1bits 000F9F                             _PIE1bits 000F9D  
           __size_of_TMR2_StartTimer 0004                             i2u212_40 1826  
                           i2Delay@i 0006                             i2u214_40 1F70  
                           i2u215_40 1F42  __size_of_INTERRUPT_InterruptManager 00A4  
                           i2u309_47 1E3A                             _PIR1bits 000F9E  
                           _RCONbits 000FD0                     __CFG_WDTPS$32768 000000  
                __end_of_receiveData 12C2                             _TMR1_ISR 1F24  
                       PotSetpoint@x 0062                         _input_buffer 013C  
               __size_of_ReadCurrent 0690                    ??_TMR1_Initialize 001D  
                   __size_of_ADC_ISR 0004           cobs_decode@dst_buf_end_ptr 0062  
                           i2_Update 2264                           _ADCON0bits 000FC2  
                         _ADCON2bits 000FC0                    ___wmul@multiplier 0001  
               i2UART_buff_put@_this 0007                     i2SetPin595@value 0005  
                           _Clear595 1EF0                        _UART_buff_get 1776  
                      _UART_buff_put 0F78                    sendData@COBSArray 0074  
      cobs_encode@dst_code_write_ptr 0066                  _processPowerRequest 0E56  
           ??i2_UART_buff_modulo_inc 0005                          _INTCON2bits 000FF1  
                   __size_ofi2_Delay 004A                            copy_data0 1C4C  
              ?_INTERRUPT_Initialize 0001                   sendData@ComandByte 006D  
             __end_of_writeRegisters 199C                   PotSetpoint@new_pos 0064  
                      ??i2_SetPin595 0007                          ??_SetPin595 0023  
               EnableSlavePower@onof 0027             __size_ofi2_UART_buff_get 0092  
                  ??_TMR2_Initialize 001D                    ??_PWM4_Initialize 001D  
           __size_ofi2_UART_buff_put 011A                           _EECON1bits 000FA6  
                      ??_updateComms 002D                 __size_of_Receive_get 000E  
           __end_ofi2_writeRegisters 1A1A                             _PotClear 157E  
                           __Hrparam 0000                             _Send_put 1FE8  
               __size_of_SetDataDict 0098                    ??_UART_buff_flush 0029  
         __end_of_PWM4_LoadDutyValue 1FB8                             __Lrparam 0000  
                  _ADC_GetConversion 1FB8                 ?_processPowerRequest 0001  
                 __CFG_BOREN$SBORDIS 000000                    __CFG_P2BMX$PORTD2 000000  
            ??_OSCILLATOR_Initialize 001D                   ?_ADC_GetConversion 0001  
        __size_of_EUSART1_Initialize 003C                      _FaultsCollector 1C96  
                   _EnableSlavePower 13BE                           _ANSELCbits 000F3A  
                     ?_UART_buff_get 0023                       ?_UART_buff_put 0023  
                        CRC8@extract 0021                  ??_ADC_GetConversion 0003  
                   GetDataDict@Error 0021                     SetDataDict@Error 0021  
                          sendData@i 00B9                            sendData@j 00B5  
                           __ptext10 1FE8                             __ptext11 0F78  
                           __ptext20 1C96                             __ptext12 1776  
                           __ptext21 21B6                             __ptext13 2042  
                         _T1GCONbits 000FCC                             __ptext30 224C  
                           __ptext22 20BC                             __ptext14 1D8E  
                           __ptext31 1EB4                             __ptext23 21E2  
                           __ptext15 1646                             __ptext40 13BE  
                           __ptext32 2102                             __ptext24 226A  
                           __ptext16 16DE                             __ptext41 1CF2  
                           __ptext33 2016                             __ptext25 20E0  
                           __ptext17 21A0                             __ptext50 2272  
                           __ptext42 14A2                             __ptext34 215C  
                           __ptext26 226E                             __ptext18 1B12  
                           __ptext43 220A                             __ptext35 1B74  
                           __ptext27 21F6                             __ptext19 0E56  
                           __ptext60 2096                             __ptext52 1F24  
                           __ptext44 221E                             __ptext36 225E  
                           __ptext28 1A98                             __ptext61 1F56  
                           __ptext53 00B0                             __ptext45 2120  
                           __ptext37 1BD6                             __ptext29 223E  
                           __ptext62 21CC                             __ptext54 2264  
                           __ptext46 12C2                             __ptext38 1EF0  
                           __ptext63 1808                             __ptext55 199C  
                           __ptext47 157E                             __ptext39 191E  
                           __ptext64 213E                             __ptext56 1E22  
                           __ptext48 1DD8                             __ptext65 1092  
                           __ptext57 1D40                             __ptext49 1F88  
                           __ptext66 206C                             __ptext58 1FB8  
                           __ptext67 2276                             __ptext59 1A1A  
                  ??_TMR1_StartTimer 001D                        __size_of_CRC8 004A  
          GetDataDict@DataTableIndex 001D                          i2Delay@wait 0001  
            EUSART1_Receive_ISR@data 000C                      ?_writeRegisters 0001  
                      __size_of_main 0084                    cobs_encode@result 006A  
                        _receiveData 11AC                             _readwhat 003F  
                     _Transmit_stall 0041                             _sendData 092C  
                  ??_DATAEE_ReadByte 001D            __end_of_ADC_GetConversion 1FE8  
                  ?i2_UART_buff_size 0001                    sendData@DataTable 006E  
              ??_processPowerRequest 002A                           _RC1STAbits 000FAB  
                __end_ofi2_SetPin595 1D8E                             _prev_pos 0036  
                       _ProcessArray 01A6                   ??i2_UART_buff_size 0003  
                  writeRegisters@val 0026                             int$flags 0042  
                  ??_TMR2_StartTimer 001D                  __end_of_updateComms 1EB4  
 __end_of_INTERRUPT_InterruptManager 00AC           _INTERRUPT_InterruptManager 0008  
               __size_of_PotSetpoint 00FC                  _EUSART1_Receive_ISR 213E  
                  receiveData@result 01F3                        ??_GetPDUFault 001D  
                         _INTCONbits 000FF2                  ComputeStorageData@i 0020  
                 _DataTableArrayFour 002D            UART_buff_modulo_inc@value 001D  
                   ??_UART_buff_init 0027                     ??_UART_buff_size 001F  
                 _ComputeStorageData 14A2               ??_INTERRUPT_Initialize 001D  
                           memset@p1 001D      __size_ofi2_UART_buff_modulo_inc 002A  
                      ??_ClearBuffer 0029                             intlevel2 0000  
                cobs_decode@len_code 006A                 ?_EUSART1_Receive_ISR 0001  
                      ??_GetDataDict 0021                  ?_ComputeStorageData 0001  
            ?_PIN_MANAGER_Initialize 0001                         cobs_decode@i 0065  
                     SetPin595@value 0021         __end_of_EUSART1_Transmit_ISR 1F88  
                   ??_ADC_Initialize 001D                    sendData@SendArray 0092  
            __end_of_FaultsCollector 1CF2                    ??i2_UART_buff_get 0009  
                  ??i2_UART_buff_put 000A                  cobs_decode@src_byte 0064  
      __size_of_UART_buff_modulo_inc 002A                        ?_CoolingCheck 0001  
                  _DataTableArrayOne 00EB                      ??_UART_buff_get 0025  
                    ??_UART_buff_put 0026                 ??_ComputeStorageData 001E  
                      ?_CoolingStart 0001                           _PDUStartup 1B74  
                       ?_cobs_decode 001D                         ?_cobs_encode 001D  
                  __CFG_T3CMX$PORTC0 000000                      writeRegisters@i 0028  
                 cobs_decode@src_len 0023                   cobs_decode@src_ptr 0021  
                __end_of_GetPDUFault 21CC                ??_EUSART1_Receive_ISR 000C  
     __end_of_PIN_MANAGER_Initialize 1B12                          i2_SetPin595 1D40  
                  __CFG_FOSC$INTIO67 000000                  __end_of_ClearBuffer 21B6  
         __size_of_ADC_GetConversion 0030                      _TMR1_Initialize 20E0  
                        _updateComms 1E6C  
