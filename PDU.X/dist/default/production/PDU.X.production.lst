

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Sun Aug 13 21:24:22 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    83                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    84                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    85  0000                     
    86                           ; Version 1.42
    87                           ; Generated 13/04/2017 GMT
    88                           ; 
    89                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    90                           ; All rights reserved.
    91                           ; 
    92                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    93                           ; 
    94                           ; Redistribution and use in source and binary forms, with or without modification, are
    95                           ; permitted provided that the following conditions are met:
    96                           ; 
    97                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    98                           ;        conditions and the following disclaimer.
    99                           ; 
   100                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   101                           ;        of conditions and the following disclaimer in the documentation and/or other
   102                           ;        materials provided with the distribution.
   103                           ; 
   104                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   105                           ;        software without specific prior written permission.
   106                           ; 
   107                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   108                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   109                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   110                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   111                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   112                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   113                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   114                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   115                           ; 
   116                           ; 
   117                           ; Code-generator required, PIC18F45K22 Definitions
   118                           ; 
   119                           ; SFR Addresses
   120  0000                     
   121                           	psect	idataCOMRAM
   122  002232                     __pidataCOMRAM:
   123                           	opt stack 0
   124                           
   125                           ;initializer for _COBS_DECODE_DST_BUF_LEN_MAX
   126  002232  001E               	dw	30
   127                           
   128                           ;initializer for _COBS_ENCODE_DST_BUF_LEN_MAX
   129  002234  001E               	dw	30
   130                           
   131                           ;initializer for _readwhat
   132  002236  0001               	dw	1
   133                           
   134                           ;initializer for _Transmit_stall
   135  002238  01                 	db	1
   136  0000                     _CCPTMRS1bits	set	3912
   137  0000                     _ANSELCbits	set	3898
   138  0000                     _ANSELE	set	3900
   139  0000                     _ANSELD	set	3899
   140  0000                     _ANSELC	set	3898
   141  0000                     _ANSELB	set	3897
   142  0000                     _ANSELA	set	3896
   143  0000                     _ANSB4	set	31180
   144  0000                     _ANSD7	set	31199
   145  0000                     _ANSB3	set	31179
   146  0000                     _RC1STAbits	set	4011
   147  0000                     _RCREG1	set	4014
   148  0000                     _TXREG1	set	4013
   149  0000                     _SPBRGH1	set	4016
   150  0000                     _SPBRG1	set	4015
   151  0000                     _TX1STA	set	4012
   152  0000                     _RC1STA	set	4011
   153  0000                     _BAUD1CON	set	4024
   154  0000                     _T2CONbits	set	4026
   155  0000                     _TMR2	set	4028
   156  0000                     _PR2	set	4027
   157  0000                     _T2CON	set	4026
   158  0000                     _CCPR2H	set	3944
   159  0000                     _CCPR2L	set	3943
   160  0000                     _CCP2CON	set	3942
   161  0000                     _T1GCONbits	set	4044
   162  0000                     _T1CONbits	set	4045
   163  0000                     _TMR1L	set	4046
   164  0000                     _TMR1H	set	4047
   165  0000                     _T1GCON	set	4044
   166  0000                     _T1CON	set	4045
   167  0000                     _TRISDbits	set	3989
   168  0000                     _INTCON2bits	set	4081
   169  0000                     _LATCbits	set	3979
   170  0000                     _TRISCbits	set	3988
   171  0000                     _TRISE	set	3990
   172  0000                     _LATE	set	3981
   173  0000                     _TRISD	set	3989
   174  0000                     _LATD	set	3980
   175  0000                     _TRISC	set	3988
   176  0000                     _LATC	set	3979
   177  0000                     _WPUB	set	3937
   178  0000                     _TRISB	set	3987
   179  0000                     _LATB	set	3978
   180  0000                     _TRISA	set	3986
   181  0000                     _LATA	set	3977
   182  0000                     _EEDATA	set	4008
   183  0000                     _EEADR	set	4009
   184  0000                     _EECON2	set	4007
   185  0000                     _EECON1bits	set	4006
   186  0000                     _INTCONbits	set	4082
   187  0000                     _TABLAT	set	4085
   188  0000                     _TBLPTRL	set	4086
   189  0000                     _TBLPTRH	set	4087
   190  0000                     _TBLPTRU	set	4088
   191  0000                     _OSCTUNE	set	3995
   192  0000                     _OSCCON2	set	4050
   193  0000                     _OSCCON	set	4051
   194  0000                     _PIE1bits	set	3997
   195  0000                     _IPR1bits	set	3999
   196  0000                     _RCONbits	set	4048
   197  0000                     _PIR1bits	set	3998
   198  0000                     _ADCON0bits	set	4034
   199  0000                     _ADRESH	set	4036
   200  0000                     _ADRESL	set	4035
   201  0000                     _ADCON2bits	set	4032
   202  0000                     _ADCON2	set	4032
   203  0000                     _ADCON1	set	4033
   204  0000                     _ADCON0	set	4034
   205  0000                     _LATC5	set	31837
   206  0000                     _LATA3	set	31819
   207  0000                     _LATB3	set	31827
   208  0000                     _LATB5	set	31829
   209  0000                     _LATD6	set	31846
   210  0000                     _LATD4	set	31844
   211  0000                     _LATD7	set	31847
   212  0000                     _LATB0	set	31824
   213  0000                     _LATD5	set	31845
   214  0000                     _TRISB5	set	31901
   215  0000                     _TRISB3	set	31899
   216  0000                     _TRISB4	set	31900
   217  0000                     _LATB4	set	31828
   218                           
   219                           ; #config settings
   220  0000                     
   221                           	psect	cinit
   222  001BCA                     __pcinit:
   223                           	opt stack 0
   224  001BCA                     start_initialization:
   225                           	opt stack 0
   226  001BCA                     __initialization:
   227                           	opt stack 0
   228                           
   229                           ; Initialize objects allocated to COMRAM (7 bytes)
   230                           ; load TBLPTR registers with __pidataCOMRAM
   231  001BCA  0E32               	movlw	low __pidataCOMRAM
   232  001BCC  6EF6               	movwf	tblptrl,c
   233  001BCE  0E22               	movlw	high __pidataCOMRAM
   234  001BD0  6EF7               	movwf	tblptrh,c
   235  001BD2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   236  001BD4  6EF8               	movwf	tblptru,c
   237  001BD6  EE00  F03B         	lfsr	0,__pdataCOMRAM
   238  001BDA  EE10 F007          	lfsr	1,7
   239  001BDE                     copy_data0:
   240  001BDE  0009               	tblrd		*+
   241  001BE0  CFF5 FFEE          	movff	tablat,postinc0
   242  001BE4  50E5               	movf	postdec1,w,c
   243  001BE6  50E1               	movf	fsr1l,w,c
   244  001BE8  E1FA               	bnz	copy_data0
   245                           
   246                           ; Clear objects allocated to BANK2 (106 bytes)
   247  001BEA  EE02  F000         	lfsr	0,__pbssBANK2
   248  001BEE  0E6A               	movlw	106
   249  001BF0                     clear_0:
   250  001BF0  6AEE               	clrf	postinc0,c
   251  001BF2  06E8               	decf	wreg,f,c
   252  001BF4  E1FD               	bnz	clear_0
   253                           
   254                           ; Clear objects allocated to BANK1 (226 bytes)
   255  001BF6  EE01  F000         	lfsr	0,__pbssBANK1
   256  001BFA  0EE2               	movlw	226
   257  001BFC                     clear_1:
   258  001BFC  6AEE               	clrf	postinc0,c
   259  001BFE  06E8               	decf	wreg,f,c
   260  001C00  E1FD               	bnz	clear_1
   261                           
   262                           ; Clear objects allocated to BANK0 (54 bytes)
   263  001C02  EE00  F0C7         	lfsr	0,__pbssBANK0
   264  001C06  0E36               	movlw	54
   265  001C08                     clear_2:
   266  001C08  6AEE               	clrf	postinc0,c
   267  001C0A  06E8               	decf	wreg,f,c
   268  001C0C  E1FD               	bnz	clear_2
   269                           
   270                           ; Clear objects allocated to COMRAM (14 bytes)
   271  001C0E  EE00  F02D         	lfsr	0,__pbssCOMRAM
   272  001C12  0E0E               	movlw	14
   273  001C14                     clear_3:
   274  001C14  6AEE               	clrf	postinc0,c
   275  001C16  06E8               	decf	wreg,f,c
   276  001C18  E1FD               	bnz	clear_3
   277  001C1A                     end_of_initialization:
   278                           	opt stack 0
   279  001C1A                     __end_of__initialization:
   280                           	opt stack 0
   281  001C1A  9042               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   282  001C1C  9242               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   283  001C1E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   284  001C20  6EF8               	movwf	tblptru,c
   285  001C22  0100               	movlb	0
   286  001C24  EF90  F00E         	goto	_main	;jump to C main() function
   287                           tblptru	equ	0xFF8
   288                           tblptrh	equ	0xFF7
   289                           tblptrl	equ	0xFF6
   290                           tablat	equ	0xFF5
   291                           postinc0	equ	0xFEE
   292                           wreg	equ	0xFE8
   293                           postdec1	equ	0xFE5
   294                           fsr1l	equ	0xFE1
   295                           
   296                           	psect	bssCOMRAM
   297  00002D                     __pbssCOMRAM:
   298                           	opt stack 0
   299  00002D                     _DataTableArrayFour:
   300                           	opt stack 0
   301  00002D                     	ds	3
   302  000030                     cobs_decode@F192:
   303                           	opt stack 0
   304  000030                     	ds	3
   305  000033                     cobs_encode@F180:
   306                           	opt stack 0
   307  000033                     	ds	3
   308  000036                     _prev_pos:
   309                           	opt stack 0
   310  000036                     	ds	2
   311  000038                     _timer1ReloadVal:
   312                           	opt stack 0
   313  000038                     	ds	2
   314  00003A                     _MCSOn:
   315                           	opt stack 0
   316  00003A                     	ds	1
   317                           tblptru	equ	0xFF8
   318                           tblptrh	equ	0xFF7
   319                           tblptrl	equ	0xFF6
   320                           tablat	equ	0xFF5
   321                           postinc0	equ	0xFEE
   322                           wreg	equ	0xFE8
   323                           postdec1	equ	0xFE5
   324                           fsr1l	equ	0xFE1
   325                           
   326                           	psect	dataCOMRAM
   327  00003B                     __pdataCOMRAM:
   328                           	opt stack 0
   329  00003B                     _COBS_DECODE_DST_BUF_LEN_MAX:
   330                           	opt stack 0
   331  00003B                     	ds	2
   332  00003D                     _COBS_ENCODE_DST_BUF_LEN_MAX:
   333                           	opt stack 0
   334  00003D                     	ds	2
   335  00003F                     _readwhat:
   336                           	opt stack 0
   337  00003F                     	ds	2
   338  000041                     _Transmit_stall:
   339                           	opt stack 0
   340  000041                     	ds	1
   341                           tblptru	equ	0xFF8
   342                           tblptrh	equ	0xFF7
   343                           tblptrl	equ	0xFF6
   344                           tablat	equ	0xFF5
   345                           postinc0	equ	0xFEE
   346                           wreg	equ	0xFE8
   347                           postdec1	equ	0xFE5
   348                           fsr1l	equ	0xFE1
   349                           
   350                           	psect	bssBANK0
   351  0000C7                     __pbssBANK0:
   352                           	opt stack 0
   353  0000C7                     _CurrentADC:
   354                           	opt stack 0
   355  0000C7                     	ds	12
   356  0000D3                     _data:
   357                           	opt stack 0
   358  0000D3                     	ds	12
   359  0000DF                     _Currentcomp:
   360                           	opt stack 0
   361  0000DF                     	ds	12
   362  0000EB                     _DataTableArrayOne:
   363                           	opt stack 0
   364  0000EB                     	ds	10
   365  0000F5                     _PDUFalult:
   366                           	opt stack 0
   367  0000F5                     	ds	8
   368                           tblptru	equ	0xFF8
   369                           tblptrh	equ	0xFF7
   370                           tblptrl	equ	0xFF6
   371                           tablat	equ	0xFF5
   372                           postinc0	equ	0xFEE
   373                           wreg	equ	0xFE8
   374                           postdec1	equ	0xFE5
   375                           fsr1l	equ	0xFE1
   376                           
   377                           	psect	bssBANK1
   378  000100                     __pbssBANK1:
   379                           	opt stack 0
   380  000100                     _registers:
   381                           	opt stack 0
   382  000100                     	ds	48
   383  000130                     _Current:
   384                           	opt stack 0
   385  000130                     	ds	12
   386  00013C                     _input_buffer:
   387                           	opt stack 0
   388  00013C                     	ds	106
   389  0001A6                     _ProcessArray:
   390                           	opt stack 0
   391  0001A6                     	ds	30
   392  0001C4                     _ReciveArray:
   393                           	opt stack 0
   394  0001C4                     	ds	30
   395                           tblptru	equ	0xFF8
   396                           tblptrh	equ	0xFF7
   397                           tblptrl	equ	0xFF6
   398                           tablat	equ	0xFF5
   399                           postinc0	equ	0xFEE
   400                           wreg	equ	0xFE8
   401                           postdec1	equ	0xFE5
   402                           fsr1l	equ	0xFE1
   403                           
   404                           	psect	bssBANK2
   405  000200                     __pbssBANK2:
   406                           	opt stack 0
   407  000200                     _output_buffer:
   408                           	opt stack 0
   409  000200                     	ds	106
   410                           tblptru	equ	0xFF8
   411                           tblptrh	equ	0xFF7
   412                           tblptrl	equ	0xFF6
   413                           tablat	equ	0xFF5
   414                           postinc0	equ	0xFEE
   415                           wreg	equ	0xFE8
   416                           postdec1	equ	0xFE5
   417                           fsr1l	equ	0xFE1
   418                           
   419                           	psect	cstackBANK1
   420  0001E2                     __pcstackBANK1:
   421                           	opt stack 0
   422  0001E2                     ComController@DataRecived:
   423                           	opt stack 0
   424                           
   425                           ; 4 bytes @ 0x0
   426  0001E2                     	ds	4
   427  0001E6                     ComController@DataToSend:
   428                           	opt stack 0
   429                           
   430                           ; 4 bytes @ 0x4
   431  0001E6                     	ds	4
   432  0001EA                     ComController@DataToSend_1656:
   433                           	opt stack 0
   434                           
   435                           ; 4 bytes @ 0x8
   436  0001EA                     	ds	4
   437  0001EE                     ComController@k:
   438                           	opt stack 0
   439                           
   440                           ; 1 bytes @ 0xC
   441  0001EE                     	ds	1
   442  0001EF                     receiveData@CS:
   443                           	opt stack 0
   444                           
   445                           ; 1 bytes @ 0xD
   446  0001EF                     	ds	1
   447  0001F0                     receiveData@i:
   448                           	opt stack 0
   449                           
   450                           ; 2 bytes @ 0xE
   451  0001F0                     	ds	2
   452  0001F2                     receiveData@Data:
   453                           	opt stack 0
   454                           
   455                           ; 1 bytes @ 0x10
   456  0001F2                     	ds	1
   457  0001F3                     receiveData@result:
   458                           	opt stack 0
   459                           
   460                           ; 3 bytes @ 0x11
   461  0001F3                     	ds	3
   462  0001F6                     main@i:
   463                           	opt stack 0
   464                           
   465                           ; 2 bytes @ 0x14
   466  0001F6                     	ds	2
   467  0001F8                     main@j:
   468                           	opt stack 0
   469                           
   470                           ; 2 bytes @ 0x16
   471  0001F8                     	ds	2
   472  0001FA                     main@UP:
   473                           	opt stack 0
   474                           
   475                           ; 1 bytes @ 0x18
   476  0001FA                     	ds	1
   477                           tblptru	equ	0xFF8
   478                           tblptrh	equ	0xFF7
   479                           tblptrl	equ	0xFF6
   480                           tablat	equ	0xFF5
   481                           postinc0	equ	0xFEE
   482                           wreg	equ	0xFE8
   483                           postdec1	equ	0xFE5
   484                           fsr1l	equ	0xFE1
   485                           
   486                           	psect	cstackBANK0
   487  000060                     __pcstackBANK0:
   488                           	opt stack 0
   489  000060                     PotSetpoint@set_point:
   490                           	opt stack 0
   491  000060                     cobs_encode@src_end_ptr:
   492                           	opt stack 0
   493  000060                     cobs_decode@src_end_ptr:
   494                           	opt stack 0
   495                           
   496                           ; 2 bytes @ 0x0
   497  000060                     	ds	2
   498  000062                     cobs_encode@src_byte:
   499                           	opt stack 0
   500  000062                     PotSetpoint@x:
   501                           	opt stack 0
   502  000062                     cobs_decode@dst_buf_end_ptr:
   503                           	opt stack 0
   504                           
   505                           ; 2 bytes @ 0x2
   506  000062                     	ds	1
   507  000063                     cobs_encode@dst_buf_end_ptr:
   508                           	opt stack 0
   509                           
   510                           ; 2 bytes @ 0x3
   511  000063                     	ds	1
   512  000064                     cobs_decode@src_byte:
   513                           	opt stack 0
   514  000064                     PotSetpoint@new_pos:
   515                           	opt stack 0
   516                           
   517                           ; 2 bytes @ 0x4
   518  000064                     	ds	1
   519  000065                     cobs_encode@search_len:
   520                           	opt stack 0
   521  000065                     cobs_decode@i:
   522                           	opt stack 0
   523                           
   524                           ; 1 bytes @ 0x5
   525  000065                     	ds	1
   526  000066                     cobs_encode@dst_code_write_ptr:
   527                           	opt stack 0
   528  000066                     cobs_decode@remaining_bytes:
   529                           	opt stack 0
   530                           
   531                           ; 2 bytes @ 0x6
   532  000066                     	ds	2
   533  000068                     cobs_encode@dst_write_ptr:
   534                           	opt stack 0
   535  000068                     cobs_decode@dst_write_ptr:
   536                           	opt stack 0
   537                           
   538                           ; 2 bytes @ 0x8
   539  000068                     	ds	2
   540  00006A                     cobs_decode@len_code:
   541                           	opt stack 0
   542  00006A                     cobs_encode@result:
   543                           	opt stack 0
   544                           
   545                           ; 3 bytes @ 0xA
   546  00006A                     	ds	1
   547  00006B                     cobs_decode@result:
   548                           	opt stack 0
   549                           
   550                           ; 3 bytes @ 0xB
   551  00006B                     	ds	2
   552  00006D                     sendData@ComandByte:
   553                           	opt stack 0
   554                           
   555                           ; 1 bytes @ 0xD
   556  00006D                     	ds	1
   557  00006E                     sendData@DataTable:
   558                           	opt stack 0
   559                           
   560                           ; 1 bytes @ 0xE
   561  00006E                     	ds	1
   562  00006F                     sendData@DataTableIndex:
   563                           	opt stack 0
   564                           
   565                           ; 1 bytes @ 0xF
   566  00006F                     	ds	1
   567  000070                     sendData@DTS:
   568                           	opt stack 0
   569                           
   570                           ; 2 bytes @ 0x10
   571  000070                     	ds	2
   572  000072                     sendData@lenth:
   573                           	opt stack 0
   574                           
   575                           ; 2 bytes @ 0x12
   576  000072                     	ds	2
   577  000074                     sendData@COBSArray:
   578                           	opt stack 0
   579                           
   580                           ; 30 bytes @ 0x14
   581  000074                     	ds	30
   582  000092                     sendData@SendArray:
   583                           	opt stack 0
   584                           
   585                           ; 30 bytes @ 0x32
   586  000092                     	ds	30
   587  0000B0                     sendData@whereToSend:
   588                           	opt stack 0
   589                           
   590                           ; 1 bytes @ 0x50
   591  0000B0                     	ds	1
   592  0000B1                     sendData@CS:
   593                           	opt stack 0
   594                           
   595                           ; 1 bytes @ 0x51
   596  0000B1                     	ds	1
   597  0000B2                     sendData@result:
   598                           	opt stack 0
   599                           
   600                           ; 3 bytes @ 0x52
   601  0000B2                     	ds	3
   602  0000B5                     sendData@j:
   603                           	opt stack 0
   604                           
   605                           ; 2 bytes @ 0x55
   606  0000B5                     	ds	2
   607  0000B7                     sendData@count:
   608                           	opt stack 0
   609                           
   610                           ; 2 bytes @ 0x57
   611  0000B7                     	ds	2
   612  0000B9                     sendData@i:
   613                           	opt stack 0
   614                           
   615                           ; 1 bytes @ 0x59
   616  0000B9                     	ds	1
   617  0000BA                     ComController@DTI:
   618                           	opt stack 0
   619                           
   620                           ; 2 bytes @ 0x5A
   621  0000BA                     	ds	2
   622  0000BC                     ComController@lenth:
   623                           	opt stack 0
   624                           
   625                           ; 2 bytes @ 0x5C
   626  0000BC                     	ds	2
   627  0000BE                     ??_ComController:
   628                           
   629                           ; 1 bytes @ 0x5E
   630  0000BE                     	ds	2
   631  0000C0                     ??_receiveData:
   632                           
   633                           ; 1 bytes @ 0x60
   634  0000C0                     	ds	5
   635  0000C5                     updateComms@DataGet:
   636                           	opt stack 0
   637                           
   638                           ; 2 bytes @ 0x65
   639  0000C5                     	ds	2
   640                           tblptru	equ	0xFF8
   641                           tblptrh	equ	0xFF7
   642                           tblptrl	equ	0xFF6
   643                           tablat	equ	0xFF5
   644                           postinc0	equ	0xFEE
   645                           wreg	equ	0xFE8
   646                           postdec1	equ	0xFE5
   647                           fsr1l	equ	0xFE1
   648                           
   649                           	psect	cstackCOMRAM
   650  000001                     __pcstackCOMRAM:
   651                           	opt stack 0
   652  000001                     ?_ADC_GetConversion:
   653                           	opt stack 0
   654  000001                     ?___wmul:
   655                           	opt stack 0
   656  000001                     ?i2_UART_buff_size:
   657                           	opt stack 0
   658  000001                     ?i2_UART_buff_modulo_inc:
   659                           	opt stack 0
   660  000001                     ___wmul@multiplier:
   661                           	opt stack 0
   662  000001                     i2SetPin595@Reg:
   663                           	opt stack 0
   664  000001                     i2UART_buff_size@_this:
   665                           	opt stack 0
   666  000001                     i2UART_buff_modulo_inc@value:
   667                           	opt stack 0
   668  000001                     i2Delay@wait:
   669                           	opt stack 0
   670                           
   671                           ; 4 bytes @ 0x0
   672  000001                     	ds	2
   673  000003                     ??_ADC_GetConversion:
   674  000003                     ___wmul@multiplicand:
   675                           	opt stack 0
   676  000003                     i2SetPin595@pin:
   677                           	opt stack 0
   678  000003                     i2UART_buff_modulo_inc@modulus:
   679                           	opt stack 0
   680                           
   681                           ; 2 bytes @ 0x2
   682  000003                     	ds	2
   683  000005                     ??i2_Delay:
   684  000005                     ADC_GetConversion@channel:
   685                           	opt stack 0
   686  000005                     ___wmul@product:
   687                           	opt stack 0
   688  000005                     i2SetPin595@value:
   689                           	opt stack 0
   690  000005                     i2UART_buff_modulo_inc@my_value:
   691                           	opt stack 0
   692                           
   693                           ; 2 bytes @ 0x4
   694  000005                     	ds	1
   695  000006                     i2Delay@i:
   696                           	opt stack 0
   697                           
   698                           ; 4 bytes @ 0x5
   699  000006                     	ds	1
   700  000007                     ??i2_SetPin595:
   701  000007                     FuseSystem@i_1234:
   702                           	opt stack 0
   703  000007                     i2UART_buff_put@_this:
   704                           	opt stack 0
   705  000007                     i2UART_buff_get@_this:
   706                           	opt stack 0
   707                           
   708                           ; 2 bytes @ 0x6
   709  000007                     	ds	2
   710  000009                     ??i2_UART_buff_get:
   711  000009                     i2UART_buff_put@c:
   712                           	opt stack 0
   713  000009                     FuseSystem@i:
   714                           	opt stack 0
   715                           
   716                           ; 2 bytes @ 0x8
   717  000009                     	ds	1
   718  00000A                     ??i2_UART_buff_put:
   719  00000A                     i2writeRegisters@val:
   720                           	opt stack 0
   721                           
   722                           ; 2 bytes @ 0x9
   723  00000A                     	ds	1
   724  00000B                     i2UART_buff_get@c:
   725                           	opt stack 0
   726                           
   727                           ; 1 bytes @ 0xA
   728  00000B                     	ds	1
   729  00000C                     EUSART1_Receive_ISR@data:
   730                           	opt stack 0
   731  00000C                     i2writeRegisters@i:
   732                           	opt stack 0
   733                           
   734                           ; 2 bytes @ 0xB
   735  00000C                     	ds	2
   736  00000E                     ReadCurrent@gather:
   737                           	opt stack 0
   738                           
   739                           ; 1 bytes @ 0xD
   740  00000E                     	ds	1
   741  00000F                     ??_INTERRUPT_InterruptManager:
   742                           
   743                           ; 1 bytes @ 0xE
   744  00000F                     	ds	14
   745  00001D                     ?_UART_buff_modulo_inc:
   746                           	opt stack 0
   747  00001D                     ?_UART_buff_size:
   748                           	opt stack 0
   749  00001D                     ?_cobs_encode:
   750                           	opt stack 0
   751  00001D                     ?_cobs_decode:
   752                           	opt stack 0
   753  00001D                     DATAEE_ReadByte@bAdd:
   754                           	opt stack 0
   755  00001D                     GetPDUFault@loc:
   756                           	opt stack 0
   757  00001D                     GetDataDict@DataTableIndex:
   758                           	opt stack 0
   759  00001D                     SetDataDict@DataTableIndex:
   760                           	opt stack 0
   761  00001D                     PWM4_LoadDutyValue@dutyValue:
   762                           	opt stack 0
   763  00001D                     SetPin595@Reg:
   764                           	opt stack 0
   765  00001D                     UART_buff_size@_this:
   766                           	opt stack 0
   767  00001D                     UART_buff_modulo_inc@value:
   768                           	opt stack 0
   769  00001D                     CRC8@data:
   770                           	opt stack 0
   771  00001D                     cobs_encode@dst_buf_ptr:
   772                           	opt stack 0
   773  00001D                     cobs_decode@dst_buf_ptr:
   774                           	opt stack 0
   775  00001D                     memset@p1:
   776                           	opt stack 0
   777  00001D                     Delay@wait:
   778                           	opt stack 0
   779                           
   780                           ; 4 bytes @ 0x1C
   781  00001D                     	ds	1
   782  00001E                     ??_FaultsCollector:
   783  00001E                     ??_ComputeStorageData:
   784  00001E                     GetDataDict@DataArray:
   785                           	opt stack 0
   786  00001E                     SetDataDict@DataArray:
   787                           	opt stack 0
   788                           
   789                           ; 2 bytes @ 0x1D
   790  00001E                     	ds	1
   791  00001F                     ??_PWM4_LoadDutyValue:
   792  00001F                     ?_Receive_available:
   793                           	opt stack 0
   794  00001F                     CRC8@len:
   795                           	opt stack 0
   796  00001F                     SetPin595@pin:
   797                           	opt stack 0
   798  00001F                     UART_buff_modulo_inc@modulus:
   799                           	opt stack 0
   800  00001F                     cobs_encode@dst_buf_len:
   801                           	opt stack 0
   802  00001F                     cobs_decode@dst_buf_len:
   803                           	opt stack 0
   804  00001F                     memset@c:
   805                           	opt stack 0
   806                           
   807                           ; 2 bytes @ 0x1E
   808  00001F                     	ds	1
   809  000020                     CRC8@sum:
   810                           	opt stack 0
   811  000020                     GetDataDict@numbofbytes:
   812                           	opt stack 0
   813  000020                     SetDataDict@numbofbytes:
   814                           	opt stack 0
   815  000020                     ComputeStorageData@i:
   816                           	opt stack 0
   817                           
   818                           ; 2 bytes @ 0x1F
   819  000020                     	ds	1
   820  000021                     ??_Delay:
   821  000021                     CRC8@extract:
   822                           	opt stack 0
   823  000021                     GetDataDict@Error:
   824                           	opt stack 0
   825  000021                     SetDataDict@Error:
   826                           	opt stack 0
   827  000021                     FaultsCollector@sendVal:
   828                           	opt stack 0
   829  000021                     SetPin595@value:
   830                           	opt stack 0
   831  000021                     UART_buff_modulo_inc@my_value:
   832                           	opt stack 0
   833  000021                     cobs_encode@src_ptr:
   834                           	opt stack 0
   835  000021                     cobs_decode@src_ptr:
   836                           	opt stack 0
   837  000021                     memset@n:
   838                           	opt stack 0
   839                           
   840                           ; 2 bytes @ 0x20
   841  000021                     	ds	1
   842  000022                     CRC8@tempI:
   843                           	opt stack 0
   844  000022                     GetDataDict@DataTable:
   845                           	opt stack 0
   846  000022                     SetDataDict@DataTable:
   847                           	opt stack 0
   848  000022                     Delay@i:
   849                           	opt stack 0
   850                           
   851                           ; 4 bytes @ 0x21
   852  000022                     	ds	1
   853  000023                     ??_SetPin595:
   854  000023                     CRC8@crc:
   855                           	opt stack 0
   856  000023                     GetDataDict@DataCount:
   857                           	opt stack 0
   858  000023                     SetDataDict@DataCount:
   859                           	opt stack 0
   860  000023                     FaultsCollector@i:
   861                           	opt stack 0
   862  000023                     UART_buff_put@_this:
   863                           	opt stack 0
   864  000023                     UART_buff_get@_this:
   865                           	opt stack 0
   866  000023                     cobs_encode@src_len:
   867                           	opt stack 0
   868  000023                     cobs_decode@src_len:
   869                           	opt stack 0
   870  000023                     memset@p:
   871                           	opt stack 0
   872                           
   873                           ; 2 bytes @ 0x22
   874  000023                     	ds	1
   875  000024                     GetDataDict@ReturnCounter:
   876                           	opt stack 0
   877  000024                     SetDataDict@ReturnCounter:
   878                           	opt stack 0
   879                           
   880                           ; 1 bytes @ 0x23
   881  000024                     	ds	1
   882  000025                     ??_cobs_encode:
   883  000025                     ??_cobs_decode:
   884  000025                     ??_UART_buff_get:
   885  000025                     UART_buff_put@c:
   886                           	opt stack 0
   887  000025                     UART_buff_init@_this:
   888                           	opt stack 0
   889  000025                     UART_buff_flush@_this:
   890                           	opt stack 0
   891                           
   892                           ; 2 bytes @ 0x24
   893  000025                     	ds	1
   894  000026                     ??_UART_buff_put:
   895  000026                     writeRegisters@val:
   896                           	opt stack 0
   897  000026                     PotSetpoint@new_point:
   898                           	opt stack 0
   899  000026                     PotClear@x:
   900                           	opt stack 0
   901                           
   902                           ; 2 bytes @ 0x25
   903  000026                     	ds	1
   904  000027                     UART_buff_get@c:
   905                           	opt stack 0
   906  000027                     EnableSlavePower@onof:
   907                           	opt stack 0
   908  000027                     UART_buff_flush@clearBuffer:
   909                           	opt stack 0
   910                           
   911                           ; 2 bytes @ 0x26
   912  000027                     	ds	1
   913  000028                     ??_PotSetpoint:
   914  000028                     Send_put@_data:
   915                           	opt stack 0
   916  000028                     writeRegisters@i:
   917                           	opt stack 0
   918                           
   919                           ; 2 bytes @ 0x27
   920  000028                     	ds	1
   921  000029                     ??_sendData:
   922  000029                     EnableSlavePower@slave:
   923                           	opt stack 0
   924                           
   925                           ; 1 bytes @ 0x28
   926  000029                     	ds	1
   927  00002A                     ??_processPowerRequest:
   928  00002A                     Clear595@i:
   929                           	opt stack 0
   930                           
   931                           ; 2 bytes @ 0x29
   932  00002A                     	ds	2
   933  00002C                     processPowerRequest@powerSet:
   934                           	opt stack 0
   935                           
   936                           ; 1 bytes @ 0x2B
   937  00002C                     	ds	1
   938  00002D                     tblptru	equ	0xFF8
   939                           tblptrh	equ	0xFF7
   940                           tblptrl	equ	0xFF6
   941                           tablat	equ	0xFF5
   942                           postinc0	equ	0xFEE
   943                           wreg	equ	0xFE8
   944                           postdec1	equ	0xFE5
   945                           fsr1l	equ	0xFE1
   946                           
   947                           ; 1 bytes @ 0x2C
   948 ;;
   949 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   950 ;;
   951 ;; *************** function _main *****************
   952 ;; Defined at:
   953 ;;		line 11 in file "main.c"
   954 ;; Parameters:    Size  Location     Type
   955 ;;		None
   956 ;; Auto vars:     Size  Location     Type
   957 ;;  j               2   22[BANK1 ] int 
   958 ;;  i               2   20[BANK1 ] int 
   959 ;;  UP              1   24[BANK1 ] unsigned char 
   960 ;; Return value:  Size  Location     Type
   961 ;;                  1    wreg      void 
   962 ;; Registers used:
   963 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   964 ;; Tracked objects:
   965 ;;		On entry : 0/0
   966 ;;		On exit  : 0/0
   967 ;;		Unchanged: 0/0
   968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   969 ;;      Params:         0       0       0       0       0       0       0
   970 ;;      Locals:         0       0       5       0       0       0       0
   971 ;;      Temps:          0       0       0       0       0       0       0
   972 ;;      Totals:         0       0       5       0       0       0       0
   973 ;;Total ram usage:        5 bytes
   974 ;; Hardware stack levels required when called:   13
   975 ;; This function calls:
   976 ;;		_ComputeStorageData
   977 ;;		_PDUStartup
   978 ;;		_PWM4_LoadDutyValue
   979 ;;		_PotSetpoint
   980 ;;		_SYSTEM_Initialize
   981 ;;		_updateComms
   982 ;; This function is called by:
   983 ;;		Startup code after reset
   984 ;; This function uses a non-reentrant model
   985 ;;
   986                           
   987                           	psect	text0
   988  001D20                     __ptext0:
   989                           	opt stack 0
   990  001D20                     _main:
   991                           	opt stack 18
   992                           
   993                           ;main.c: 13: SYSTEM_Initialize();
   994                           
   995                           ;incstack = 0
   996  001D20  EC4C  F010         	call	_SYSTEM_Initialize	;wreg free
   997                           
   998                           ;main.c: 14: PDUStartup();
   999  001D24  EC83  F00D         	call	_PDUStartup	;wreg free
  1000                           
  1001                           ;main.c: 33: (INTCONbits.GIE = 1);
  1002  001D28  8EF2               	bsf	intcon,7,c	;volatile
  1003                           
  1004                           ;main.c: 36: (INTCONbits.PEIE = 1);
  1005  001D2A  8CF2               	bsf	intcon,6,c	;volatile
  1006                           
  1007                           ;main.c: 56: PotSetpoint(0);
  1008  001D2C  0E00               	movlw	0
  1009  001D2E  6E27               	movwf	PotSetpoint@new_point+1,c
  1010  001D30  0E00               	movlw	0
  1011  001D32  6E26               	movwf	PotSetpoint@new_point,c
  1012  001D34  EC6C  F009         	call	_PotSetpoint	;wreg free
  1013                           
  1014                           ;main.c: 57: PWM4_LoadDutyValue(0);
  1015  001D38  0E00               	movlw	0
  1016  001D3A  6E1E               	movwf	PWM4_LoadDutyValue@dutyValue+1,c
  1017  001D3C  0E00               	movlw	0
  1018  001D3E  6E1D               	movwf	PWM4_LoadDutyValue@dutyValue,c
  1019  001D40  ECB2  F00F         	call	_PWM4_LoadDutyValue	;wreg free
  1020                           
  1021                           ;main.c: 58: LATCbits.LATC5 = 0;
  1022  001D44  9A8B               	bcf	3979,5,c	;volatile
  1023                           
  1024                           ;main.c: 59: int i = 0;
  1025  001D46  0E00               	movlw	0
  1026  001D48  0101               	movlb	1	; () banked
  1027  001D4A  6FF7               	movwf	(main@i+1)& (0+255),b
  1028  001D4C  0E00               	movlw	0
  1029  001D4E  6FF6               	movwf	main@i& (0+255),b
  1030                           
  1031                           ; BSR set to: 1
  1032                           ;main.c: 60: bool UP = 0;
  1033  001D50  0E00               	movlw	0
  1034  001D52  0101               	movlb	1	; () banked
  1035  001D54  6FFA               	movwf	main@UP& (0+255),b
  1036                           
  1037                           ;main.c: 61: ComputeStorageData();
  1038  001D56  EC5C  F00A         	call	_ComputeStorageData	;wreg free
  1039                           
  1040                           ;main.c: 63: int j = 1;
  1041  001D5A  0E00               	movlw	0
  1042  001D5C  0101               	movlb	1	; () banked
  1043  001D5E  6FF9               	movwf	(main@j+1)& (0+255),b
  1044  001D60  0E01               	movlw	1
  1045  001D62  6FF8               	movwf	main@j& (0+255),b
  1046  001D64                     l4464:
  1047                           
  1048                           ;main.c: 65: updateComms();
  1049  001D64  EC24  F00F         	call	_updateComms	;wreg free
  1050  001D68  D7FD               	goto	l4464
  1051  001D6A                     __end_of_main:
  1052                           	opt stack 0
  1053                           tblptru	equ	0xFF8
  1054                           tblptrh	equ	0xFF7
  1055                           tblptrl	equ	0xFF6
  1056                           tablat	equ	0xFF5
  1057                           intcon	equ	0xFF2
  1058                           postinc0	equ	0xFEE
  1059                           wreg	equ	0xFE8
  1060                           postdec1	equ	0xFE5
  1061                           fsr1l	equ	0xFE1
  1062                           
  1063 ;; *************** function _updateComms *****************
  1064 ;; Defined at:
  1065 ;;		line 19 in file "Communications.c"
  1066 ;; Parameters:    Size  Location     Type
  1067 ;;		None
  1068 ;; Auto vars:     Size  Location     Type
  1069 ;;  DataGet         2  101[BANK0 ] unsigned char [2]
  1070 ;; Return value:  Size  Location     Type
  1071 ;;                  1    wreg      void 
  1072 ;; Registers used:
  1073 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1074 ;; Tracked objects:
  1075 ;;		On entry : 0/0
  1076 ;;		On exit  : 0/0
  1077 ;;		Unchanged: 0/0
  1078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1079 ;;      Params:         0       0       0       0       0       0       0
  1080 ;;      Locals:         0       2       0       0       0       0       0
  1081 ;;      Temps:          0       0       0       0       0       0       0
  1082 ;;      Totals:         0       2       0       0       0       0       0
  1083 ;;Total ram usage:        2 bytes
  1084 ;; Hardware stack levels used:    1
  1085 ;; Hardware stack levels required when called:   12
  1086 ;; This function calls:
  1087 ;;		_FaultsCollector
  1088 ;;		_GetDataDict
  1089 ;;		_SetDataDict
  1090 ;;		_processPowerRequest
  1091 ;;		_receiveData
  1092 ;; This function is called by:
  1093 ;;		_main
  1094 ;; This function uses a non-reentrant model
  1095 ;;
  1096                           
  1097                           	psect	text1
  1098  001E48                     __ptext1:
  1099                           	opt stack 0
  1100  001E48                     _updateComms:
  1101                           	opt stack 18
  1102                           
  1103                           ;Communications.c: 20: if (receiveData()){
  1104                           
  1105                           ;incstack = 0
  1106  001E48  ECE1  F008         	call	_receiveData	;wreg free
  1107  001E4C  0900               	iorlw	0
  1108  001E4E  B4D8               	btfsc	status,2,c
  1109  001E50  0012               	return	
  1110                           
  1111                           ;Communications.c: 21: unsigned char DataGet[2];
  1112                           ;Communications.c: 22: GetDataDict(4, 1, DataGet, 1);
  1113  001E52  0E01               	movlw	1
  1114  001E54  6E1D               	movwf	GetDataDict@DataTableIndex,c
  1115  001E56  0EC5               	movlw	low updateComms@DataGet
  1116  001E58  6E1E               	movwf	GetDataDict@DataArray,c
  1117  001E5A  0E00               	movlw	high updateComms@DataGet
  1118  001E5C  6E1F               	movwf	GetDataDict@DataArray+1,c
  1119  001E5E  0E01               	movlw	1
  1120  001E60  6E20               	movwf	GetDataDict@numbofbytes,c
  1121  001E62  0E04               	movlw	4
  1122  001E64  EC7A  F00B         	call	_GetDataDict
  1123                           
  1124                           ;Communications.c: 23: processPowerRequest(DataGet[0]);
  1125  001E68  0100               	movlb	0	; () banked
  1126  001E6A  51C5               	movf	updateComms@DataGet& (0+255),w,b
  1127  001E6C  EC2B  F007         	call	_processPowerRequest
  1128                           
  1129                           ;Communications.c: 24: DataGet[0] = FaultsCollector();
  1130  001E70  EC14  F00E         	call	_FaultsCollector	;wreg free
  1131  001E74  0100               	movlb	0	; () banked
  1132  001E76  6FC5               	movwf	updateComms@DataGet& (0+255),b
  1133                           
  1134                           ; BSR set to: 0
  1135                           ;Communications.c: 25: SetDataDict(4, 2, DataGet, 1);
  1136  001E78  0E02               	movlw	2
  1137  001E7A  6E1D               	movwf	SetDataDict@DataTableIndex,c
  1138  001E7C  0EC5               	movlw	low updateComms@DataGet
  1139  001E7E  6E1E               	movwf	SetDataDict@DataArray,c
  1140  001E80  0E00               	movlw	high updateComms@DataGet
  1141  001E82  6E1F               	movwf	SetDataDict@DataArray+1,c
  1142  001E84  0E01               	movlw	1
  1143  001E86  6E20               	movwf	SetDataDict@numbofbytes,c
  1144  001E88  0E04               	movlw	4
  1145  001E8A  EC2E  F00B         	call	_SetDataDict
  1146  001E8E  0012               	return	
  1147  001E90                     __end_of_updateComms:
  1148                           	opt stack 0
  1149                           tblptru	equ	0xFF8
  1150                           tblptrh	equ	0xFF7
  1151                           tblptrl	equ	0xFF6
  1152                           tablat	equ	0xFF5
  1153                           intcon	equ	0xFF2
  1154                           postinc0	equ	0xFEE
  1155                           wreg	equ	0xFE8
  1156                           postdec1	equ	0xFE5
  1157                           fsr1l	equ	0xFE1
  1158                           status	equ	0xFD8
  1159                           
  1160 ;; *************** function _receiveData *****************
  1161 ;; Defined at:
  1162 ;;		line 85 in file "CarCom.c"
  1163 ;; Parameters:    Size  Location     Type
  1164 ;;		None
  1165 ;; Auto vars:     Size  Location     Type
  1166 ;;  result          3   17[BANK1 ] struct .
  1167 ;;  i               2   14[BANK1 ] int 
  1168 ;;  Data            1   16[BANK1 ] unsigned char 
  1169 ;;  CS              1   13[BANK1 ] unsigned char 
  1170 ;; Return value:  Size  Location     Type
  1171 ;;                  1    wreg      unsigned char 
  1172 ;; Registers used:
  1173 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1174 ;; Tracked objects:
  1175 ;;		On entry : 0/0
  1176 ;;		On exit  : 0/0
  1177 ;;		Unchanged: 0/0
  1178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1179 ;;      Params:         0       0       0       0       0       0       0
  1180 ;;      Locals:         0       0       7       0       0       0       0
  1181 ;;      Temps:          0       5       0       0       0       0       0
  1182 ;;      Totals:         0       5       7       0       0       0       0
  1183 ;;Total ram usage:       12 bytes
  1184 ;; Hardware stack levels used:    1
  1185 ;; Hardware stack levels required when called:   11
  1186 ;; This function calls:
  1187 ;;		_CRC8
  1188 ;;		_ClearBuffer
  1189 ;;		_ComController
  1190 ;;		_Receive_available
  1191 ;;		_Receive_get
  1192 ;;		_cobs_decode
  1193 ;; This function is called by:
  1194 ;;		_updateComms
  1195 ;; This function uses a non-reentrant model
  1196 ;;
  1197                           
  1198                           	psect	text2
  1199  0011C2                     __ptext2:
  1200                           	opt stack 0
  1201  0011C2                     _receiveData:
  1202                           	opt stack 18
  1203                           
  1204                           ;CarCom.c: 86: if(Receive_available()>5){
  1205                           
  1206                           ;incstack = 0
  1207  0011C2  ECA8  F010         	call	_Receive_available	;wreg free
  1208  0011C6  BE20               	btfsc	?_Receive_available+1,7,c
  1209  0011C8  D085               	goto	l4322
  1210  0011CA  5020               	movf	?_Receive_available+1,w,c
  1211  0011CC  E104               	bnz	u2790
  1212  0011CE  0E06               	movlw	6
  1213  0011D0  5C1F               	subwf	?_Receive_available,w,c
  1214  0011D2  A0D8               	btfss	status,0,c
  1215  0011D4  D07F               	goto	l4322
  1216  0011D6                     u2790:
  1217                           
  1218                           ;CarCom.c: 87: if(Receive_get() == 5){
  1219  0011D6  EC06  F011         	call	_Receive_get	;wreg free
  1220  0011DA  0A05               	xorlw	5
  1221  0011DC  A4D8               	btfss	status,2,c
  1222  0011DE  D07A               	goto	l4322
  1223                           
  1224                           ;CarCom.c: 88: int i = 0;
  1225  0011E0  0E00               	movlw	0
  1226  0011E2  0101               	movlb	1	; () banked
  1227  0011E4  6FF1               	movwf	(receiveData@i+1)& (0+255),b
  1228  0011E6  0E00               	movlw	0
  1229  0011E8  6FF0               	movwf	receiveData@i& (0+255),b
  1230                           
  1231                           ;CarCom.c: 89: unsigned char Data = 0;
  1232  0011EA  0E00               	movlw	0
  1233  0011EC  0101               	movlb	1	; () banked
  1234  0011EE  6FF2               	movwf	receiveData@Data& (0+255),b
  1235  0011F0                     l4302:
  1236                           
  1237                           ; BSR set to: 1
  1238                           ;CarCom.c: 91: Data = Receive_get();
  1239  0011F0  EC06  F011         	call	_Receive_get	;wreg free
  1240  0011F4  0101               	movlb	1	; () banked
  1241  0011F6  6FF2               	movwf	receiveData@Data& (0+255),b
  1242                           
  1243                           ; BSR set to: 1
  1244                           ;CarCom.c: 92: ReciveArray[i] = Data;
  1245  0011F8  0EC4               	movlw	low _ReciveArray
  1246  0011FA  0101               	movlb	1	; () banked
  1247  0011FC  25F0               	addwf	receiveData@i& (0+255),w,b
  1248  0011FE  6ED9               	movwf	fsr2l,c
  1249  001200  0E01               	movlw	high _ReciveArray
  1250  001202  0101               	movlb	1	; () banked
  1251  001204  21F1               	addwfc	(receiveData@i+1)& (0+255),w,b
  1252  001206  6EDA               	movwf	fsr2h,c
  1253  001208  C1F2  FFDF         	movff	receiveData@Data,indf2
  1254                           
  1255                           ; BSR set to: 1
  1256                           ;CarCom.c: 93: _delay((unsigned long)((200)*(8000000/4000000.0)));
  1257  00120C  0E85               	movlw	133
  1258  00120E                     u3017:
  1259  00120E  2EE8               	decfsz	wreg,f,c
  1260  001210  D7FE               	bra	u3017
  1261  001212  F000               	nop	
  1262                           
  1263                           ;CarCom.c: 95: i++;
  1264  001214  0101               	movlb	1	; () banked
  1265  001216  4BF0               	infsnz	receiveData@i& (0+255),f,b
  1266  001218  2BF1               	incf	(receiveData@i+1)& (0+255),f,b
  1267                           
  1268                           ; BSR set to: 1
  1269                           ;CarCom.c: 96: }while(Data != 0x00);
  1270  00121A  0101               	movlb	1	; () banked
  1271  00121C  51F2               	movf	receiveData@Data& (0+255),w,b
  1272  00121E  0101               	movlb	1	; () banked
  1273  001220  A4D8               	btfss	status,2,c
  1274  001222  D7E6               	goto	l4302
  1275                           
  1276                           ; BSR set to: 1
  1277                           ;CarCom.c: 100: ClearBuffer();
  1278                           
  1279                           ; BSR set to: 1
  1280  001224  ECBE  F010         	call	_ClearBuffer	;wreg free
  1281                           
  1282                           ;CarCom.c: 102: cobs_decode_result result;
  1283                           ;CarCom.c: 104: result = cobs_decode(ProcessArray, sizeof(ProcessArray), ReciveArray, i)
      +                          ;
  1284  001228  0EA6               	movlw	low _ProcessArray
  1285  00122A  6E1D               	movwf	cobs_decode@dst_buf_ptr,c
  1286  00122C  0E01               	movlw	high _ProcessArray
  1287  00122E  6E1E               	movwf	cobs_decode@dst_buf_ptr+1,c
  1288  001230  0E00               	movlw	0
  1289  001232  6E20               	movwf	cobs_decode@dst_buf_len+1,c
  1290  001234  0E1E               	movlw	30
  1291  001236  6E1F               	movwf	cobs_decode@dst_buf_len,c
  1292  001238  0EC4               	movlw	low _ReciveArray
  1293  00123A  6E21               	movwf	cobs_decode@src_ptr,c
  1294  00123C  0E01               	movlw	high _ReciveArray
  1295  00123E  6E22               	movwf	cobs_decode@src_ptr+1,c
  1296  001240  C1F0  F023         	movff	receiveData@i,cobs_decode@src_len
  1297  001244  C1F1  F024         	movff	receiveData@i+1,cobs_decode@src_len+1
  1298  001248  EC80  F005         	call	_cobs_decode	;wreg free
  1299  00124C  C01D  F1F3         	movff	?_cobs_decode,receiveData@result
  1300  001250  C01E  F1F4         	movff	?_cobs_decode+1,receiveData@result+1
  1301  001254  C01F  F1F5         	movff	?_cobs_decode+2,receiveData@result+2
  1302                           
  1303                           ;CarCom.c: 106: unsigned char CS = CRC8(ProcessArray, result.out_len-2);
  1304  001258  0EA6               	movlw	low _ProcessArray
  1305  00125A  6E1D               	movwf	CRC8@data,c
  1306  00125C  0E01               	movlw	high _ProcessArray
  1307  00125E  6E1E               	movwf	CRC8@data+1,c
  1308  001260  0101               	movlb	1	; () banked
  1309  001262  51F3               	movf	receiveData@result& (0+255),w,b
  1310  001264  0FFE               	addlw	254
  1311  001266  6E1F               	movwf	CRC8@len,c
  1312  001268  ECB5  F00E         	call	_CRC8	;wreg free
  1313  00126C  0101               	movlb	1	; () banked
  1314  00126E  6FEF               	movwf	receiveData@CS& (0+255),b
  1315                           
  1316                           ; BSR set to: 1
  1317                           ;CarCom.c: 108: if(ProcessArray[result.out_len-2] == CS){
  1318  001270  0EFE               	movlw	254
  1319  001272  0100               	movlb	0	; () banked
  1320  001274  6FC0               	movwf	??_receiveData& (0+255),b
  1321  001276  0EFF               	movlw	255
  1322  001278  0100               	movlb	0	; () banked
  1323  00127A  6FC1               	movwf	(??_receiveData+1)& (0+255),b
  1324  00127C  C1F3  F0C2         	movff	receiveData@result,??_receiveData+2
  1325  001280  C1F4  F0C3         	movff	receiveData@result+1,??_receiveData+3
  1326  001284  0100               	movlb	0	; () banked
  1327  001286  51C0               	movf	??_receiveData& (0+255),w,b
  1328  001288  0100               	movlb	0	; () banked
  1329  00128A  27C2               	addwf	(??_receiveData+2)& (0+255),f,b
  1330  00128C  0100               	movlb	0	; () banked
  1331  00128E  51C1               	movf	(??_receiveData+1)& (0+255),w,b
  1332  001290  0100               	movlb	0	; () banked
  1333  001292  23C3               	addwfc	(??_receiveData+3)& (0+255),f,b
  1334  001294  0EA6               	movlw	low _ProcessArray
  1335  001296  0100               	movlb	0	; () banked
  1336  001298  25C2               	addwf	(??_receiveData+2)& (0+255),w,b
  1337  00129A  6ED9               	movwf	fsr2l,c
  1338  00129C  0E01               	movlw	high _ProcessArray
  1339  00129E  0100               	movlb	0	; () banked
  1340  0012A0  21C3               	addwfc	(??_receiveData+3)& (0+255),w,b
  1341  0012A2  6EDA               	movwf	fsr2h,c
  1342  0012A4  0101               	movlb	1	; () banked
  1343  0012A6  51EF               	movf	receiveData@CS& (0+255),w,b
  1344  0012A8  18DE               	xorwf	postinc2,w,c
  1345  0012AA  A4D8               	btfss	status,2,c
  1346  0012AC  D013               	goto	l4322
  1347                           
  1348                           ; BSR set to: 1
  1349                           
  1350                           ;CarCom.c: 109: do { LATA3 = ~LATA3; } while(0);
  1351  0012AE  B689               	btfsc	3977,3,c	;volatile
  1352  0012B0  D002               	goto	u2830
  1353  0012B2  8689               	bsf	3977,3,c	;volatile
  1354  0012B4  D001               	goto	l4316
  1355  0012B6                     u2830:
  1356  0012B6  9689               	bcf	3977,3,c	;volatile
  1357  0012B8                     l4316:
  1358                           
  1359                           ;CarCom.c: 110: ComController(ProcessArray,result.out_len);
  1360  0012B8  0EA6               	movlw	low _ProcessArray
  1361  0012BA  0100               	movlb	0	; () banked
  1362  0012BC  6FBA               	movwf	ComController@DTI& (0+255),b
  1363  0012BE  0E01               	movlw	high _ProcessArray
  1364  0012C0  0100               	movlb	0	; () banked
  1365  0012C2  6FBB               	movwf	(ComController@DTI+1)& (0+255),b
  1366  0012C4  C1F3  F0BC         	movff	receiveData@result,ComController@lenth
  1367  0012C8  C1F4  F0BD         	movff	receiveData@result+1,ComController@lenth+1
  1368  0012CC  ECA0  F003         	call	_ComController	;wreg free
  1369                           
  1370                           ;CarCom.c: 111: return 1;
  1371  0012D0  0E01               	movlw	1
  1372  0012D2  0012               	return	
  1373  0012D4                     l4322:
  1374                           
  1375                           ;CarCom.c: 120: }
  1376                           ;CarCom.c: 122: return 0;
  1377  0012D4  0E00               	movlw	0
  1378  0012D6  0012               	return	
  1379  0012D8                     __end_of_receiveData:
  1380                           	opt stack 0
  1381                           tblptru	equ	0xFF8
  1382                           tblptrh	equ	0xFF7
  1383                           tblptrl	equ	0xFF6
  1384                           tablat	equ	0xFF5
  1385                           intcon	equ	0xFF2
  1386                           postinc0	equ	0xFEE
  1387                           wreg	equ	0xFE8
  1388                           postdec1	equ	0xFE5
  1389                           fsr1l	equ	0xFE1
  1390                           indf2	equ	0xFDF
  1391                           postinc2	equ	0xFDE
  1392                           fsr2h	equ	0xFDA
  1393                           fsr2l	equ	0xFD9
  1394                           status	equ	0xFD8
  1395                           
  1396 ;; *************** function _cobs_decode *****************
  1397 ;; Defined at:
  1398 ;;		line 115 in file "COBS.c"
  1399 ;; Parameters:    Size  Location     Type
  1400 ;;  dst_buf_ptr     2   28[COMRAM] PTR unsigned char 
  1401 ;;		 -> ProcessArray(30), 
  1402 ;;  dst_buf_len     2   30[COMRAM] unsigned int 
  1403 ;;  src_ptr         2   32[COMRAM] PTR const unsigned char 
  1404 ;;		 -> ReciveArray(30), 
  1405 ;;  src_len         2   34[COMRAM] unsigned int 
  1406 ;; Auto vars:     Size  Location     Type
  1407 ;;  result          3   11[BANK0 ] struct .
  1408 ;;  dst_write_pt    2    8[BANK0 ] PTR unsigned char 
  1409 ;;		 -> ProcessArray(30), 
  1410 ;;  remaining_by    2    6[BANK0 ] unsigned int 
  1411 ;;  dst_buf_end_    2    2[BANK0 ] PTR unsigned char 
  1412 ;;		 -> ProcessArray(30), 
  1413 ;;  src_end_ptr     2    0[BANK0 ] PTR const unsigned char 
  1414 ;;		 -> ReciveArray(30), 
  1415 ;;  len_code        1   10[BANK0 ] unsigned char 
  1416 ;;  i               1    5[BANK0 ] unsigned char 
  1417 ;;  src_byte        1    4[BANK0 ] unsigned char 
  1418 ;; Return value:  Size  Location     Type
  1419 ;;                  3   28[COMRAM] struct .
  1420 ;; Registers used:
  1421 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1422 ;; Tracked objects:
  1423 ;;		On entry : 0/0
  1424 ;;		On exit  : 0/0
  1425 ;;		Unchanged: 0/0
  1426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1427 ;;      Params:         8       0       0       0       0       0       0
  1428 ;;      Locals:         0      14       0       0       0       0       0
  1429 ;;      Temps:          2       0       0       0       0       0       0
  1430 ;;      Totals:        10      14       0       0       0       0       0
  1431 ;;Total ram usage:       24 bytes
  1432 ;; Hardware stack levels used:    1
  1433 ;; Hardware stack levels required when called:    6
  1434 ;; This function calls:
  1435 ;;		Nothing
  1436 ;; This function is called by:
  1437 ;;		_receiveData
  1438 ;; This function uses a non-reentrant model
  1439 ;;
  1440                           
  1441                           	psect	text3
  1442  000B00                     __ptext3:
  1443                           	opt stack 0
  1444  000B00                     _cobs_decode:
  1445                           	opt stack 22
  1446                           
  1447                           ;COBS.c: 117: cobs_decode_result result = { 0, COBS_DECODE_OK };
  1448                           
  1449                           ;incstack = 0
  1450  000B00  C030  F06B         	movff	cobs_decode@F192,cobs_decode@result
  1451  000B04  C031  F06C         	movff	cobs_decode@F192+1,cobs_decode@result+1
  1452  000B08  C032  F06D         	movff	cobs_decode@F192+2,cobs_decode@result+2
  1453                           
  1454                           ;COBS.c: 118: const uint8_t * src_end_ptr = src_ptr + src_len;
  1455  000B0C  5023               	movf	cobs_decode@src_len,w,c
  1456  000B0E  2421               	addwf	cobs_decode@src_ptr,w,c
  1457  000B10  0100               	movlb	0	; () banked
  1458  000B12  6F60               	movwf	cobs_decode@src_end_ptr& (0+255),b
  1459  000B14  5024               	movf	cobs_decode@src_len+1,w,c
  1460  000B16  2022               	addwfc	cobs_decode@src_ptr+1,w,c
  1461  000B18  0100               	movlb	0	; () banked
  1462  000B1A  6F61               	movwf	(cobs_decode@src_end_ptr+1)& (0+255),b
  1463                           
  1464                           ;COBS.c: 119: uint8_t * dst_buf_end_ptr = dst_buf_ptr + dst_buf_len;
  1465  000B1C  501F               	movf	cobs_decode@dst_buf_len,w,c
  1466  000B1E  241D               	addwf	cobs_decode@dst_buf_ptr,w,c
  1467  000B20  0100               	movlb	0	; () banked
  1468  000B22  6F62               	movwf	cobs_decode@dst_buf_end_ptr& (0+255),b
  1469  000B24  5020               	movf	cobs_decode@dst_buf_len+1,w,c
  1470  000B26  201E               	addwfc	cobs_decode@dst_buf_ptr+1,w,c
  1471  000B28  0100               	movlb	0	; () banked
  1472  000B2A  6F63               	movwf	(cobs_decode@dst_buf_end_ptr+1)& (0+255),b
  1473                           
  1474                           ;COBS.c: 120: uint8_t * dst_write_ptr = dst_buf_ptr;
  1475  000B2C  C01D  F068         	movff	cobs_decode@dst_buf_ptr,cobs_decode@dst_write_ptr
  1476  000B30  C01E  F069         	movff	cobs_decode@dst_buf_ptr+1,cobs_decode@dst_write_ptr+1
  1477                           
  1478                           ;COBS.c: 121: size_t remaining_bytes;
  1479                           ;COBS.c: 122: uint8_t src_byte;
  1480                           ;COBS.c: 123: uint8_t i;
  1481                           ;COBS.c: 124: uint8_t len_code;
  1482                           ;COBS.c: 128: if ((dst_buf_ptr == (0)) || (src_ptr == (0)))
  1483  000B34  501D               	movf	cobs_decode@dst_buf_ptr,w,c
  1484  000B36  101E               	iorwf	cobs_decode@dst_buf_ptr+1,w,c
  1485  000B38  B4D8               	btfsc	status,2,c
  1486  000B3A  D004               	goto	l4118
  1487                           
  1488                           ; BSR set to: 0
  1489  000B3C  5021               	movf	cobs_decode@src_ptr,w,c
  1490  000B3E  1022               	iorwf	cobs_decode@src_ptr+1,w,c
  1491  000B40  A4D8               	btfss	status,2,c
  1492  000B42  D00A               	goto	l4124
  1493  000B44                     l4118:
  1494                           
  1495                           ; BSR set to: 0
  1496                           ;COBS.c: 129: {
  1497                           ;COBS.c: 130: result.status = COBS_DECODE_NULL_POINTER;
  1498  000B44  0E01               	movlw	1
  1499  000B46  0100               	movlb	0	; () banked
  1500  000B48  6F6D               	movwf	(cobs_decode@result+2)& (0+255),b
  1501                           
  1502                           ; BSR set to: 0
  1503                           ;COBS.c: 131: return result;
  1504  000B4A  C06B  F01D         	movff	cobs_decode@result,?_cobs_decode
  1505  000B4E  C06C  F01E         	movff	cobs_decode@result+1,?_cobs_decode+1
  1506  000B52  C06D  F01F         	movff	cobs_decode@result+2,?_cobs_decode+2
  1507                           
  1508                           ; BSR set to: 0
  1509  000B56  0012               	return	
  1510  000B58                     l4124:
  1511                           
  1512                           ; BSR set to: 0
  1513                           ;COBS.c: 132: }
  1514                           ;COBS.c: 134: if (src_len != 0)
  1515  000B58  5023               	movf	cobs_decode@src_len,w,c
  1516  000B5A  1024               	iorwf	cobs_decode@src_len+1,w,c
  1517  000B5C  B4D8               	btfsc	status,2,c
  1518  000B5E  D096               	goto	l4188
  1519  000B60                     l4126:
  1520                           
  1521                           ; BSR set to: 0
  1522                           ;COBS.c: 137: {
  1523                           ;COBS.c: 138: len_code = *src_ptr++;
  1524  000B60  C021  FFD9         	movff	cobs_decode@src_ptr,fsr2l
  1525  000B64  C022  FFDA         	movff	cobs_decode@src_ptr+1,fsr2h
  1526  000B68  50DF               	movf	indf2,w,c
  1527  000B6A  0100               	movlb	0	; () banked
  1528  000B6C  6F6A               	movwf	cobs_decode@len_code& (0+255),b
  1529                           
  1530                           ; BSR set to: 0
  1531  000B6E  4A21               	infsnz	cobs_decode@src_ptr,f,c
  1532  000B70  2A22               	incf	cobs_decode@src_ptr+1,f,c
  1533                           
  1534                           ; BSR set to: 0
  1535                           ;COBS.c: 139: if (len_code == 0)
  1536  000B72  0100               	movlb	0	; () banked
  1537  000B74  516A               	movf	cobs_decode@len_code& (0+255),w,b
  1538  000B76  0100               	movlb	0	; () banked
  1539  000B78  A4D8               	btfss	status,2,c
  1540  000B7A  D003               	goto	l4134
  1541                           
  1542                           ; BSR set to: 0
  1543                           ;COBS.c: 140: {
  1544                           ;COBS.c: 141: result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
  1545  000B7C  0100               	movlb	0	; () banked
  1546  000B7E  856D               	bsf	(cobs_decode@result+2)& (0+255),2,b
  1547                           
  1548                           ;COBS.c: 142: break;
  1549  000B80  D085               	goto	l4188
  1550  000B82                     l4134:
  1551                           
  1552                           ; BSR set to: 0
  1553                           ;COBS.c: 143: }
  1554                           ;COBS.c: 144: len_code--;
  1555  000B82  0100               	movlb	0	; () banked
  1556  000B84  076A               	decf	cobs_decode@len_code& (0+255),f,b
  1557                           
  1558                           ; BSR set to: 0
  1559                           ;COBS.c: 147: remaining_bytes = src_end_ptr - src_ptr;
  1560  000B86  C021  F025         	movff	cobs_decode@src_ptr,??_cobs_decode
  1561  000B8A  C022  F026         	movff	cobs_decode@src_ptr+1,??_cobs_decode+1
  1562  000B8E  1E25               	comf	??_cobs_decode,f,c
  1563  000B90  1E26               	comf	??_cobs_decode+1,f,c
  1564  000B92  4A25               	infsnz	??_cobs_decode,f,c
  1565  000B94  2A26               	incf	??_cobs_decode+1,f,c
  1566  000B96  0100               	movlb	0	; () banked
  1567  000B98  5160               	movf	cobs_decode@src_end_ptr& (0+255),w,b
  1568  000B9A  2425               	addwf	??_cobs_decode,w,c
  1569  000B9C  0100               	movlb	0	; () banked
  1570  000B9E  6F66               	movwf	cobs_decode@remaining_bytes& (0+255),b
  1571  000BA0  0100               	movlb	0	; () banked
  1572  000BA2  5161               	movf	(cobs_decode@src_end_ptr+1)& (0+255),w,b
  1573  000BA4  2026               	addwfc	??_cobs_decode+1,w,c
  1574  000BA6  0100               	movlb	0	; () banked
  1575  000BA8  6F67               	movwf	(cobs_decode@remaining_bytes+1)& (0+255),b
  1576                           
  1577                           ; BSR set to: 0
  1578                           ;COBS.c: 148: if (len_code > remaining_bytes)
  1579  000BAA  0100               	movlb	0	; () banked
  1580  000BAC  516A               	movf	cobs_decode@len_code& (0+255),w,b
  1581  000BAE  0100               	movlb	0	; () banked
  1582  000BB0  5D66               	subwf	cobs_decode@remaining_bytes& (0+255),w,b
  1583  000BB2  0E00               	movlw	0
  1584  000BB4  5967               	subwfb	(cobs_decode@remaining_bytes+1)& (0+255),w,b
  1585  000BB6  B0D8               	btfsc	status,0,c
  1586  000BB8  D004               	goto	l4144
  1587                           
  1588                           ; BSR set to: 0
  1589                           ;COBS.c: 149: {
  1590                           ;COBS.c: 150: result.status |= COBS_DECODE_INPUT_TOO_SHORT;
  1591  000BBA  0100               	movlb	0	; () banked
  1592  000BBC  876D               	bsf	(cobs_decode@result+2)& (0+255),3,b
  1593                           
  1594                           ; BSR set to: 0
  1595                           ;COBS.c: 151: len_code = remaining_bytes;
  1596  000BBE  C066  F06A         	movff	cobs_decode@remaining_bytes,cobs_decode@len_code
  1597  000BC2                     l4144:
  1598                           
  1599                           ; BSR set to: 0
  1600                           ;COBS.c: 152: }
  1601                           ;COBS.c: 155: remaining_bytes = dst_buf_end_ptr - dst_write_ptr;
  1602  000BC2  C068  F025         	movff	cobs_decode@dst_write_ptr,??_cobs_decode
  1603  000BC6  C069  F026         	movff	cobs_decode@dst_write_ptr+1,??_cobs_decode+1
  1604  000BCA  1E25               	comf	??_cobs_decode,f,c
  1605  000BCC  1E26               	comf	??_cobs_decode+1,f,c
  1606  000BCE  4A25               	infsnz	??_cobs_decode,f,c
  1607  000BD0  2A26               	incf	??_cobs_decode+1,f,c
  1608  000BD2  0100               	movlb	0	; () banked
  1609  000BD4  5162               	movf	cobs_decode@dst_buf_end_ptr& (0+255),w,b
  1610  000BD6  2425               	addwf	??_cobs_decode,w,c
  1611  000BD8  0100               	movlb	0	; () banked
  1612  000BDA  6F66               	movwf	cobs_decode@remaining_bytes& (0+255),b
  1613  000BDC  0100               	movlb	0	; () banked
  1614  000BDE  5163               	movf	(cobs_decode@dst_buf_end_ptr+1)& (0+255),w,b
  1615  000BE0  2026               	addwfc	??_cobs_decode+1,w,c
  1616  000BE2  0100               	movlb	0	; () banked
  1617  000BE4  6F67               	movwf	(cobs_decode@remaining_bytes+1)& (0+255),b
  1618                           
  1619                           ; BSR set to: 0
  1620                           ;COBS.c: 156: if (len_code > remaining_bytes)
  1621  000BE6  0100               	movlb	0	; () banked
  1622  000BE8  516A               	movf	cobs_decode@len_code& (0+255),w,b
  1623  000BEA  0100               	movlb	0	; () banked
  1624  000BEC  5D66               	subwf	cobs_decode@remaining_bytes& (0+255),w,b
  1625  000BEE  0E00               	movlw	0
  1626  000BF0  5967               	subwfb	(cobs_decode@remaining_bytes+1)& (0+255),w,b
  1627  000BF2  B0D8               	btfsc	status,0,c
  1628  000BF4  D004               	goto	l4152
  1629                           
  1630                           ; BSR set to: 0
  1631                           ;COBS.c: 157: {
  1632                           ;COBS.c: 158: result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
  1633  000BF6  0100               	movlb	0	; () banked
  1634  000BF8  836D               	bsf	(cobs_decode@result+2)& (0+255),1,b
  1635                           
  1636                           ; BSR set to: 0
  1637                           ;COBS.c: 159: len_code = remaining_bytes;
  1638  000BFA  C066  F06A         	movff	cobs_decode@remaining_bytes,cobs_decode@len_code
  1639  000BFE                     l4152:
  1640                           
  1641                           ; BSR set to: 0
  1642                           ;COBS.c: 160: }
  1643                           ;COBS.c: 162: for (i = len_code; i != 0; i--)
  1644  000BFE  C06A  F065         	movff	cobs_decode@len_code,cobs_decode@i
  1645  000C02                     l4154:
  1646                           
  1647                           ; BSR set to: 0
  1648  000C02  0100               	movlb	0	; () banked
  1649  000C04  5165               	movf	cobs_decode@i& (0+255),w,b
  1650  000C06  0100               	movlb	0	; () banked
  1651  000C08  B4D8               	btfsc	status,2,c
  1652  000C0A  D01C               	goto	l4174
  1653                           
  1654                           ; BSR set to: 0
  1655                           ;COBS.c: 163: {
  1656                           ;COBS.c: 164: src_byte = *src_ptr++;
  1657                           
  1658                           ; BSR set to: 0
  1659                           
  1660                           ; BSR set to: 0
  1661  000C0C  C021  FFD9         	movff	cobs_decode@src_ptr,fsr2l
  1662  000C10  C022  FFDA         	movff	cobs_decode@src_ptr+1,fsr2h
  1663  000C14  50DF               	movf	indf2,w,c
  1664  000C16  0100               	movlb	0	; () banked
  1665  000C18  6F64               	movwf	cobs_decode@src_byte& (0+255),b
  1666                           
  1667                           ; BSR set to: 0
  1668  000C1A  4A21               	infsnz	cobs_decode@src_ptr,f,c
  1669  000C1C  2A22               	incf	cobs_decode@src_ptr+1,f,c
  1670                           
  1671                           ; BSR set to: 0
  1672                           ;COBS.c: 165: if (src_byte == 0)
  1673  000C1E  0100               	movlb	0	; () banked
  1674  000C20  5164               	movf	cobs_decode@src_byte& (0+255),w,b
  1675  000C22  0100               	movlb	0	; () banked
  1676  000C24  A4D8               	btfss	status,2,c
  1677  000C26  D002               	goto	l4166
  1678                           
  1679                           ; BSR set to: 0
  1680                           ;COBS.c: 166: {
  1681                           ;COBS.c: 167: result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
  1682  000C28  0100               	movlb	0	; () banked
  1683  000C2A  856D               	bsf	(cobs_decode@result+2)& (0+255),2,b
  1684  000C2C                     l4166:
  1685                           
  1686                           ; BSR set to: 0
  1687                           ;COBS.c: 168: }
  1688                           ;COBS.c: 169: *dst_write_ptr++ = src_byte;
  1689  000C2C  C068  FFD9         	movff	cobs_decode@dst_write_ptr,fsr2l
  1690  000C30  C069  FFDA         	movff	cobs_decode@dst_write_ptr+1,fsr2h
  1691  000C34  C064  FFDF         	movff	cobs_decode@src_byte,indf2
  1692                           
  1693                           ; BSR set to: 0
  1694  000C38  0100               	movlb	0	; () banked
  1695  000C3A  4B68               	infsnz	cobs_decode@dst_write_ptr& (0+255),f,b
  1696  000C3C  2B69               	incf	(cobs_decode@dst_write_ptr+1)& (0+255),f,b
  1697                           
  1698                           ; BSR set to: 0
  1699  000C3E  0100               	movlb	0	; () banked
  1700  000C40  0765               	decf	cobs_decode@i& (0+255),f,b
  1701  000C42  D7DF               	goto	l4154
  1702  000C44                     l4174:
  1703                           
  1704                           ; BSR set to: 0
  1705                           ;COBS.c: 170: }
  1706                           ;COBS.c: 172: if (src_ptr >= src_end_ptr)
  1707  000C44  0100               	movlb	0	; () banked
  1708  000C46  5160               	movf	cobs_decode@src_end_ptr& (0+255),w,b
  1709  000C48  5C21               	subwf	cobs_decode@src_ptr,w,c
  1710  000C4A  0100               	movlb	0	; () banked
  1711  000C4C  5161               	movf	(cobs_decode@src_end_ptr+1)& (0+255),w,b
  1712  000C4E  5822               	subwfb	cobs_decode@src_ptr+1,w,c
  1713  000C50  B0D8               	btfsc	status,0,c
  1714  000C52  D01C               	goto	l4188
  1715                           
  1716                           ; BSR set to: 0
  1717                           ;COBS.c: 175: }
  1718                           ;COBS.c: 178: if (len_code != 0xFE)
  1719                           
  1720                           ; BSR set to: 0
  1721                           
  1722                           ; BSR set to: 0
  1723                           ;COBS.c: 173: {
  1724                           ;COBS.c: 174: break;
  1725  000C54  0EFE               	movlw	254
  1726  000C56  0100               	movlb	0	; () banked
  1727  000C58  196A               	xorwf	cobs_decode@len_code& (0+255),w,b
  1728  000C5A  B4D8               	btfsc	status,2,c
  1729  000C5C  D781               	goto	l4126
  1730                           
  1731                           ; BSR set to: 0
  1732                           ;COBS.c: 179: {
  1733                           ;COBS.c: 180: if (dst_write_ptr >= dst_buf_end_ptr)
  1734  000C5E  0100               	movlb	0	; () banked
  1735  000C60  5162               	movf	cobs_decode@dst_buf_end_ptr& (0+255),w,b
  1736  000C62  0100               	movlb	0	; () banked
  1737  000C64  5D68               	subwf	cobs_decode@dst_write_ptr& (0+255),w,b
  1738  000C66  0100               	movlb	0	; () banked
  1739  000C68  5163               	movf	(cobs_decode@dst_buf_end_ptr+1)& (0+255),w,b
  1740  000C6A  0100               	movlb	0	; () banked
  1741  000C6C  5969               	subwfb	(cobs_decode@dst_write_ptr+1)& (0+255),w,b
  1742  000C6E  A0D8               	btfss	status,0,c
  1743  000C70  D003               	goto	l4184
  1744                           
  1745                           ; BSR set to: 0
  1746                           ;COBS.c: 181: {
  1747                           ;COBS.c: 182: result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
  1748  000C72  0100               	movlb	0	; () banked
  1749  000C74  836D               	bsf	(cobs_decode@result+2)& (0+255),1,b
  1750                           
  1751                           ;COBS.c: 183: break;
  1752  000C76  D00A               	goto	l4188
  1753  000C78                     l4184:
  1754                           
  1755                           ; BSR set to: 0
  1756                           ;COBS.c: 184: }
  1757                           ;COBS.c: 185: *dst_write_ptr++ = 0;
  1758  000C78  C068  FFD9         	movff	cobs_decode@dst_write_ptr,fsr2l
  1759  000C7C  C069  FFDA         	movff	cobs_decode@dst_write_ptr+1,fsr2h
  1760  000C80  0E00               	movlw	0
  1761  000C82  6EDF               	movwf	indf2,c
  1762                           
  1763                           ; BSR set to: 0
  1764  000C84  0100               	movlb	0	; () banked
  1765  000C86  4B68               	infsnz	cobs_decode@dst_write_ptr& (0+255),f,b
  1766  000C88  2B69               	incf	(cobs_decode@dst_write_ptr+1)& (0+255),f,b
  1767                           
  1768                           ; BSR set to: 0
  1769                           ;COBS.c: 186: }
  1770                           ;COBS.c: 187: }
  1771  000C8A  D76A               	goto	l4126
  1772  000C8C                     l4188:
  1773                           
  1774                           ; BSR set to: 0
  1775                           ;COBS.c: 188: }
  1776                           ;COBS.c: 190: result.out_len = dst_write_ptr - dst_buf_ptr;
  1777  000C8C  C01D  F025         	movff	cobs_decode@dst_buf_ptr,??_cobs_decode
  1778  000C90  C01E  F026         	movff	cobs_decode@dst_buf_ptr+1,??_cobs_decode+1
  1779  000C94  1E25               	comf	??_cobs_decode,f,c
  1780  000C96  1E26               	comf	??_cobs_decode+1,f,c
  1781  000C98  4A25               	infsnz	??_cobs_decode,f,c
  1782  000C9A  2A26               	incf	??_cobs_decode+1,f,c
  1783  000C9C  0100               	movlb	0	; () banked
  1784  000C9E  5168               	movf	cobs_decode@dst_write_ptr& (0+255),w,b
  1785  000CA0  2425               	addwf	??_cobs_decode,w,c
  1786  000CA2  0100               	movlb	0	; () banked
  1787  000CA4  6F6B               	movwf	cobs_decode@result& (0+255),b
  1788  000CA6  0100               	movlb	0	; () banked
  1789  000CA8  5169               	movf	(cobs_decode@dst_write_ptr+1)& (0+255),w,b
  1790  000CAA  2026               	addwfc	??_cobs_decode+1,w,c
  1791  000CAC  0100               	movlb	0	; () banked
  1792  000CAE  6F6C               	movwf	(cobs_decode@result+1)& (0+255),b
  1793                           
  1794                           ; BSR set to: 0
  1795                           ;COBS.c: 192: return result;
  1796  000CB0  C06B  F01D         	movff	cobs_decode@result,?_cobs_decode
  1797  000CB4  C06C  F01E         	movff	cobs_decode@result+1,?_cobs_decode+1
  1798  000CB8  C06D  F01F         	movff	cobs_decode@result+2,?_cobs_decode+2
  1799  000CBC  0012               	return	
  1800  000CBE                     __end_of_cobs_decode:
  1801                           	opt stack 0
  1802                           tblptru	equ	0xFF8
  1803                           tblptrh	equ	0xFF7
  1804                           tblptrl	equ	0xFF6
  1805                           tablat	equ	0xFF5
  1806                           intcon	equ	0xFF2
  1807                           postinc0	equ	0xFEE
  1808                           wreg	equ	0xFE8
  1809                           postdec1	equ	0xFE5
  1810                           fsr1l	equ	0xFE1
  1811                           indf2	equ	0xFDF
  1812                           postinc2	equ	0xFDE
  1813                           fsr2h	equ	0xFDA
  1814                           fsr2l	equ	0xFD9
  1815                           status	equ	0xFD8
  1816                           
  1817 ;; *************** function _Receive_get *****************
  1818 ;; Defined at:
  1819 ;;		line 125 in file "UART.c"
  1820 ;; Parameters:    Size  Location     Type
  1821 ;;		None
  1822 ;; Auto vars:     Size  Location     Type
  1823 ;;		None
  1824 ;; Return value:  Size  Location     Type
  1825 ;;                  1    wreg      unsigned char 
  1826 ;; Registers used:
  1827 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1828 ;; Tracked objects:
  1829 ;;		On entry : 0/0
  1830 ;;		On exit  : 0/0
  1831 ;;		Unchanged: 0/0
  1832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1833 ;;      Params:         0       0       0       0       0       0       0
  1834 ;;      Locals:         0       0       0       0       0       0       0
  1835 ;;      Temps:          0       0       0       0       0       0       0
  1836 ;;      Totals:         0       0       0       0       0       0       0
  1837 ;;Total ram usage:        0 bytes
  1838 ;; Hardware stack levels used:    1
  1839 ;; Hardware stack levels required when called:    8
  1840 ;; This function calls:
  1841 ;;		_UART_buff_get
  1842 ;; This function is called by:
  1843 ;;		_receiveData
  1844 ;;		_getch
  1845 ;; This function uses a non-reentrant model
  1846 ;;
  1847                           
  1848                           	psect	text4
  1849  00220C                     __ptext4:
  1850                           	opt stack 0
  1851  00220C                     _Receive_get:
  1852                           	opt stack 20
  1853                           
  1854                           ;UART.c: 126: return UART_buff_get(&input_buffer);
  1855                           
  1856                           ; BSR set to: 0
  1857                           ;incstack = 0
  1858  00220C  0E3C               	movlw	low _input_buffer
  1859  00220E  6E23               	movwf	UART_buff_get@_this,c
  1860  002210  0E01               	movlw	high _input_buffer
  1861  002212  6E24               	movwf	UART_buff_get@_this+1,c
  1862  002214  ECC6  F00B         	call	_UART_buff_get	;wreg free
  1863  002218  0012               	return	
  1864  00221A                     __end_of_Receive_get:
  1865                           	opt stack 0
  1866                           tblptru	equ	0xFF8
  1867                           tblptrh	equ	0xFF7
  1868                           tblptrl	equ	0xFF6
  1869                           tablat	equ	0xFF5
  1870                           intcon	equ	0xFF2
  1871                           postinc0	equ	0xFEE
  1872                           wreg	equ	0xFE8
  1873                           postdec1	equ	0xFE5
  1874                           fsr1l	equ	0xFE1
  1875                           indf2	equ	0xFDF
  1876                           postinc2	equ	0xFDE
  1877                           fsr2h	equ	0xFDA
  1878                           fsr2l	equ	0xFD9
  1879                           status	equ	0xFD8
  1880                           
  1881 ;; *************** function _Receive_available *****************
  1882 ;; Defined at:
  1883 ;;		line 121 in file "UART.c"
  1884 ;; Parameters:    Size  Location     Type
  1885 ;;		None
  1886 ;; Auto vars:     Size  Location     Type
  1887 ;;		None
  1888 ;; Return value:  Size  Location     Type
  1889 ;;                  2   30[COMRAM] int 
  1890 ;; Registers used:
  1891 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1892 ;; Tracked objects:
  1893 ;;		On entry : 0/0
  1894 ;;		On exit  : 0/0
  1895 ;;		Unchanged: 0/0
  1896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1897 ;;      Params:         2       0       0       0       0       0       0
  1898 ;;      Locals:         0       0       0       0       0       0       0
  1899 ;;      Temps:          0       0       0       0       0       0       0
  1900 ;;      Totals:         2       0       0       0       0       0       0
  1901 ;;Total ram usage:        2 bytes
  1902 ;; Hardware stack levels used:    1
  1903 ;; Hardware stack levels required when called:    7
  1904 ;; This function calls:
  1905 ;;		_UART_buff_size
  1906 ;; This function is called by:
  1907 ;;		_receiveData
  1908 ;; This function uses a non-reentrant model
  1909 ;;
  1910                           
  1911                           	psect	text5
  1912  002150                     __ptext5:
  1913                           	opt stack 0
  1914  002150                     _Receive_available:
  1915                           	opt stack 21
  1916                           
  1917                           ;UART.c: 122: return UART_buff_size(&input_buffer);
  1918                           
  1919                           ;incstack = 0
  1920  002150  0E3C               	movlw	low _input_buffer
  1921  002152  6E1D               	movwf	UART_buff_size@_this,c
  1922  002154  0E01               	movlw	high _input_buffer
  1923  002156  6E1E               	movwf	UART_buff_size@_this+1,c
  1924  002158  ECB3  F010         	call	_UART_buff_size	;wreg free
  1925  00215C  C01D  F01F         	movff	?_UART_buff_size,?_Receive_available
  1926  002160  C01E  F020         	movff	?_UART_buff_size+1,?_Receive_available+1
  1927  002164  0012               	return	
  1928  002166                     __end_of_Receive_available:
  1929                           	opt stack 0
  1930                           tblptru	equ	0xFF8
  1931                           tblptrh	equ	0xFF7
  1932                           tblptrl	equ	0xFF6
  1933                           tablat	equ	0xFF5
  1934                           intcon	equ	0xFF2
  1935                           postinc0	equ	0xFEE
  1936                           wreg	equ	0xFE8
  1937                           postdec1	equ	0xFE5
  1938                           fsr1l	equ	0xFE1
  1939                           indf2	equ	0xFDF
  1940                           postinc2	equ	0xFDE
  1941                           fsr2h	equ	0xFDA
  1942                           fsr2l	equ	0xFD9
  1943                           status	equ	0xFD8
  1944                           
  1945 ;; *************** function _UART_buff_size *****************
  1946 ;; Defined at:
  1947 ;;		line 101 in file "UART.c"
  1948 ;; Parameters:    Size  Location     Type
  1949 ;;  _this           2   28[COMRAM] PTR struct UART_ring_buf
  1950 ;;		 -> output_buffer(106), input_buffer(106), 
  1951 ;; Auto vars:     Size  Location     Type
  1952 ;;		None
  1953 ;; Return value:  Size  Location     Type
  1954 ;;                  2   28[COMRAM] int 
  1955 ;; Registers used:
  1956 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1957 ;; Tracked objects:
  1958 ;;		On entry : 0/0
  1959 ;;		On exit  : 0/0
  1960 ;;		Unchanged: 0/0
  1961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1962 ;;      Params:         2       0       0       0       0       0       0
  1963 ;;      Locals:         0       0       0       0       0       0       0
  1964 ;;      Temps:          0       0       0       0       0       0       0
  1965 ;;      Totals:         2       0       0       0       0       0       0
  1966 ;;Total ram usage:        2 bytes
  1967 ;; Hardware stack levels used:    1
  1968 ;; Hardware stack levels required when called:    6
  1969 ;; This function calls:
  1970 ;;		Nothing
  1971 ;; This function is called by:
  1972 ;;		_Receive_available
  1973 ;; This function uses a non-reentrant model
  1974 ;;
  1975                           
  1976                           	psect	text6
  1977  002166                     __ptext6:
  1978                           	opt stack 0
  1979  002166                     _UART_buff_size:
  1980                           	opt stack 21
  1981                           
  1982                           ;UART.c: 102: return (_this->count);
  1983                           
  1984                           ;incstack = 0
  1985  002166  EE20 F068          	lfsr	2,104
  1986  00216A  501D               	movf	UART_buff_size@_this,w,c
  1987  00216C  26D9               	addwf	fsr2l,f,c
  1988  00216E  501E               	movf	UART_buff_size@_this+1,w,c
  1989  002170  22DA               	addwfc	fsr2h,f,c
  1990  002172  CFDE F01D          	movff	postinc2,?_UART_buff_size
  1991  002176  CFDD F01E          	movff	postdec2,?_UART_buff_size+1
  1992  00217A  0012               	return	
  1993  00217C                     __end_of_UART_buff_size:
  1994                           	opt stack 0
  1995                           tblptru	equ	0xFF8
  1996                           tblptrh	equ	0xFF7
  1997                           tblptrl	equ	0xFF6
  1998                           tablat	equ	0xFF5
  1999                           intcon	equ	0xFF2
  2000                           postinc0	equ	0xFEE
  2001                           wreg	equ	0xFE8
  2002                           postdec1	equ	0xFE5
  2003                           fsr1l	equ	0xFE1
  2004                           indf2	equ	0xFDF
  2005                           postinc2	equ	0xFDE
  2006                           postdec2	equ	0xFDD
  2007                           fsr2h	equ	0xFDA
  2008                           fsr2l	equ	0xFD9
  2009                           status	equ	0xFD8
  2010                           
  2011 ;; *************** function _ComController *****************
  2012 ;; Defined at:
  2013 ;;		line 127 in file "CarCom.c"
  2014 ;; Parameters:    Size  Location     Type
  2015 ;;  DTI             2   90[BANK0 ] PTR unsigned char 
  2016 ;;		 -> ProcessArray(30), 
  2017 ;;  lenth           2   92[BANK0 ] unsigned int 
  2018 ;; Auto vars:     Size  Location     Type
  2019 ;;  k               1   12[BANK1 ] unsigned char 
  2020 ;;  DataToSend      4    8[BANK1 ] unsigned char [4]
  2021 ;;  DataRecived     4    0[BANK1 ] unsigned char [4]
  2022 ;;  DataToSend      4    4[BANK1 ] unsigned char [4]
  2023 ;; Return value:  Size  Location     Type
  2024 ;;                  1    wreg      void 
  2025 ;; Registers used:
  2026 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2027 ;; Tracked objects:
  2028 ;;		On entry : 0/0
  2029 ;;		On exit  : 0/0
  2030 ;;		Unchanged: 0/0
  2031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2032 ;;      Params:         0       4       0       0       0       0       0
  2033 ;;      Locals:         0       0      13       0       0       0       0
  2034 ;;      Temps:          0       2       0       0       0       0       0
  2035 ;;      Totals:         0       6      13       0       0       0       0
  2036 ;;Total ram usage:       19 bytes
  2037 ;; Hardware stack levels used:    1
  2038 ;; Hardware stack levels required when called:   10
  2039 ;; This function calls:
  2040 ;;		_Delay
  2041 ;;		_GetDataDict
  2042 ;;		_SetDataDict
  2043 ;;		_sendData
  2044 ;; This function is called by:
  2045 ;;		_receiveData
  2046 ;; This function uses a non-reentrant model
  2047 ;;
  2048                           
  2049                           	psect	text7
  2050  000740                     __ptext7:
  2051                           	opt stack 0
  2052  000740                     _ComController:
  2053                           	opt stack 18
  2054                           
  2055                           ;CarCom.c: 128: if(DTI[1] == 1){
  2056                           
  2057                           ;incstack = 0
  2058  000740  0100               	movlb	0	; () banked
  2059  000742  EE20 F001          	lfsr	2,1
  2060  000746  51BA               	movf	ComController@DTI& (0+255),w,b
  2061  000748  26D9               	addwf	fsr2l,f,c
  2062  00074A  51BB               	movf	(ComController@DTI+1)& (0+255),w,b
  2063  00074C  22DA               	addwfc	fsr2h,f,c
  2064  00074E  04DE               	decf	postinc2,w,c
  2065  000750  A4D8               	btfss	status,2,c
  2066  000752  D057               	goto	l4206
  2067                           
  2068                           ; BSR set to: 0
  2069                           ;CarCom.c: 129: unsigned char DataToSend[4];
  2070                           ;CarCom.c: 130: GetDataDict(DTI[2], DTI[3], DataToSend, DTI[4]);
  2071  000754  0100               	movlb	0	; () banked
  2072  000756  EE20 F003          	lfsr	2,3
  2073  00075A  51BA               	movf	ComController@DTI& (0+255),w,b
  2074  00075C  26D9               	addwf	fsr2l,f,c
  2075  00075E  51BB               	movf	(ComController@DTI+1)& (0+255),w,b
  2076  000760  22DA               	addwfc	fsr2h,f,c
  2077  000762  50DF               	movf	indf2,w,c
  2078  000764  6E1D               	movwf	GetDataDict@DataTableIndex,c
  2079  000766  0EE6               	movlw	low ComController@DataToSend
  2080  000768  6E1E               	movwf	GetDataDict@DataArray,c
  2081  00076A  0E01               	movlw	high ComController@DataToSend
  2082  00076C  6E1F               	movwf	GetDataDict@DataArray+1,c
  2083  00076E  0100               	movlb	0	; () banked
  2084  000770  EE20 F004          	lfsr	2,4
  2085  000774  51BA               	movf	ComController@DTI& (0+255),w,b
  2086  000776  26D9               	addwf	fsr2l,f,c
  2087  000778  51BB               	movf	(ComController@DTI+1)& (0+255),w,b
  2088  00077A  22DA               	addwfc	fsr2h,f,c
  2089  00077C  50DF               	movf	indf2,w,c
  2090  00077E  6E20               	movwf	GetDataDict@numbofbytes,c
  2091  000780  0100               	movlb	0	; () banked
  2092  000782  EE20 F002          	lfsr	2,2
  2093  000786  51BA               	movf	ComController@DTI& (0+255),w,b
  2094  000788  26D9               	addwf	fsr2l,f,c
  2095  00078A  51BB               	movf	(ComController@DTI+1)& (0+255),w,b
  2096  00078C  22DA               	addwfc	fsr2h,f,c
  2097  00078E  50DF               	movf	indf2,w,c
  2098  000790  EC7A  F00B         	call	_GetDataDict
  2099                           
  2100                           ;CarCom.c: 131: do { LATC5 = 1; } while(0);
  2101  000794  8A8B               	bsf	3979,5,c	;volatile
  2102                           
  2103                           ;CarCom.c: 132: Delay(5);
  2104  000796  0E05               	movlw	5
  2105  000798  6E1D               	movwf	Delay@wait,c
  2106  00079A  0E00               	movlw	0
  2107  00079C  6E1E               	movwf	Delay@wait+1,c
  2108  00079E  0E00               	movlw	0
  2109  0007A0  6E1F               	movwf	Delay@wait+2,c
  2110  0007A2  0E00               	movlw	0
  2111  0007A4  6E20               	movwf	Delay@wait+3,c
  2112  0007A6  ECDA  F00E         	call	_Delay	;wreg free
  2113                           
  2114                           ;CarCom.c: 133: sendData(1, 2, 1, 1, DataToSend, DTI[4]);
  2115  0007AA  0E02               	movlw	2
  2116  0007AC  0100               	movlb	0	; () banked
  2117  0007AE  6F6D               	movwf	sendData@ComandByte& (0+255),b
  2118  0007B0  0E01               	movlw	1
  2119  0007B2  0100               	movlb	0	; () banked
  2120  0007B4  6F6E               	movwf	sendData@DataTable& (0+255),b
  2121  0007B6  0E01               	movlw	1
  2122  0007B8  0100               	movlb	0	; () banked
  2123  0007BA  6F6F               	movwf	sendData@DataTableIndex& (0+255),b
  2124  0007BC  0EE6               	movlw	low ComController@DataToSend
  2125  0007BE  0100               	movlb	0	; () banked
  2126  0007C0  6F70               	movwf	sendData@DTS& (0+255),b
  2127  0007C2  0E01               	movlw	high ComController@DataToSend
  2128  0007C4  0100               	movlb	0	; () banked
  2129  0007C6  6F71               	movwf	(sendData@DTS+1)& (0+255),b
  2130  0007C8  0100               	movlb	0	; () banked
  2131  0007CA  EE20 F004          	lfsr	2,4
  2132  0007CE  51BA               	movf	ComController@DTI& (0+255),w,b
  2133  0007D0  26D9               	addwf	fsr2l,f,c
  2134  0007D2  51BB               	movf	(ComController@DTI+1)& (0+255),w,b
  2135  0007D4  22DA               	addwfc	fsr2h,f,c
  2136  0007D6  50DF               	movf	indf2,w,c
  2137  0007D8  0100               	movlb	0	; () banked
  2138  0007DA  6FBE               	movwf	??_ComController& (0+255),b
  2139  0007DC  0100               	movlb	0	; () banked
  2140  0007DE  51BE               	movf	??_ComController& (0+255),w,b
  2141  0007E0  0100               	movlb	0	; () banked
  2142  0007E2  6F72               	movwf	sendData@lenth& (0+255),b
  2143  0007E4  6B73               	clrf	(sendData@lenth+1)& (0+255),b
  2144  0007E6  0E01               	movlw	1
  2145  0007E8  EC96  F004         	call	_sendData
  2146                           
  2147                           ;CarCom.c: 134: Delay(3);
  2148  0007EC  0E03               	movlw	3
  2149  0007EE  6E1D               	movwf	Delay@wait,c
  2150  0007F0  0E00               	movlw	0
  2151  0007F2  6E1E               	movwf	Delay@wait+1,c
  2152  0007F4  0E00               	movlw	0
  2153  0007F6  6E1F               	movwf	Delay@wait+2,c
  2154  0007F8  0E00               	movlw	0
  2155  0007FA  6E20               	movwf	Delay@wait+3,c
  2156  0007FC  ECDA  F00E         	call	_Delay	;wreg free
  2157                           
  2158                           ;CarCom.c: 135: do { LATC5 = 0; } while(0);
  2159  000800  9A8B               	bcf	3979,5,c	;volatile
  2160  000802                     l4206:
  2161                           
  2162                           ;CarCom.c: 136: }
  2163                           ;CarCom.c: 137: if(DTI[1] == 2){
  2164  000802  0100               	movlb	0	; () banked
  2165  000804  EE20 F001          	lfsr	2,1
  2166  000808  51BA               	movf	ComController@DTI& (0+255),w,b
  2167  00080A  26D9               	addwf	fsr2l,f,c
  2168  00080C  51BB               	movf	(ComController@DTI+1)& (0+255),w,b
  2169  00080E  22DA               	addwfc	fsr2h,f,c
  2170  000810  0E02               	movlw	2
  2171  000812  18DE               	xorwf	postinc2,w,c
  2172  000814  A4D8               	btfss	status,2,c
  2173  000816  0012               	return	
  2174                           
  2175                           ; BSR set to: 0
  2176                           ;CarCom.c: 138: unsigned char DataToSend[4];
  2177                           ;CarCom.c: 139: unsigned char DataRecived[4];
  2178                           ;CarCom.c: 140: for(char k = 0;k<DTI[4];k++){
  2179  000818  0E00               	movlw	0
  2180  00081A  0101               	movlb	1	; () banked
  2181  00081C  6FEE               	movwf	ComController@k& (0+255),b
  2182  00081E  D021               	goto	l4214
  2183  000820                     l4210:
  2184                           
  2185                           ; BSR set to: 1
  2186                           ;CarCom.c: 141: DataRecived[k] = DTI[5+k];
  2187  000820  0101               	movlb	1	; () banked
  2188  000822  51EE               	movf	ComController@k& (0+255),w,b
  2189  000824  0100               	movlb	0	; () banked
  2190  000826  6FBE               	movwf	??_ComController& (0+255),b
  2191  000828  6BBF               	clrf	(??_ComController+1)& (0+255),b
  2192  00082A  0E05               	movlw	5
  2193  00082C  0100               	movlb	0	; () banked
  2194  00082E  27BE               	addwf	??_ComController& (0+255),f,b
  2195  000830  0E00               	movlw	0
  2196  000832  23BF               	addwfc	(??_ComController+1)& (0+255),f,b
  2197  000834  0100               	movlb	0	; () banked
  2198  000836  51BE               	movf	??_ComController& (0+255),w,b
  2199  000838  0100               	movlb	0	; () banked
  2200  00083A  25BA               	addwf	ComController@DTI& (0+255),w,b
  2201  00083C  6ED9               	movwf	fsr2l,c
  2202  00083E  0100               	movlb	0	; () banked
  2203  000840  51BF               	movf	(??_ComController+1)& (0+255),w,b
  2204  000842  0100               	movlb	0	; () banked
  2205  000844  21BB               	addwfc	(ComController@DTI+1)& (0+255),w,b
  2206  000846  6EDA               	movwf	fsr2h,c
  2207  000848  0101               	movlb	1	; () banked
  2208  00084A  51EE               	movf	ComController@k& (0+255),w,b
  2209  00084C  0D01               	mullw	1
  2210  00084E  0EE2               	movlw	low ComController@DataRecived
  2211  000850  24F3               	addwf	prodl,w,c
  2212  000852  6EE1               	movwf	fsr1l,c
  2213  000854  0E01               	movlw	high ComController@DataRecived
  2214  000856  20F4               	addwfc	prodh,w,c
  2215  000858  6EE2               	movwf	fsr1h,c
  2216  00085A  CFDF FFE7          	movff	indf2,indf1
  2217                           
  2218                           ; BSR set to: 1
  2219  00085E  0101               	movlb	1	; () banked
  2220  000860  2BEE               	incf	ComController@k& (0+255),f,b
  2221  000862                     l4214:
  2222                           
  2223                           ; BSR set to: 1
  2224  000862  0100               	movlb	0	; () banked
  2225  000864  EE20 F004          	lfsr	2,4
  2226  000868  51BA               	movf	ComController@DTI& (0+255),w,b
  2227  00086A  26D9               	addwf	fsr2l,f,c
  2228  00086C  51BB               	movf	(ComController@DTI+1)& (0+255),w,b
  2229  00086E  22DA               	addwfc	fsr2h,f,c
  2230  000870  50DE               	movf	postinc2,w,c
  2231  000872  0101               	movlb	1	; () banked
  2232  000874  5DEE               	subwf	ComController@k& (0+255),w,b
  2233  000876  A0D8               	btfss	status,0,c
  2234  000878  D7D3               	goto	l4210
  2235                           
  2236                           ; BSR set to: 1
  2237                           ;CarCom.c: 142: }
  2238                           ;CarCom.c: 143: SetDataDict(DTI[2], DTI[3], DataRecived, DTI[4]);
  2239                           
  2240                           ; BSR set to: 1
  2241  00087A  0100               	movlb	0	; () banked
  2242  00087C  EE20 F003          	lfsr	2,3
  2243  000880  51BA               	movf	ComController@DTI& (0+255),w,b
  2244  000882  26D9               	addwf	fsr2l,f,c
  2245  000884  51BB               	movf	(ComController@DTI+1)& (0+255),w,b
  2246  000886  22DA               	addwfc	fsr2h,f,c
  2247  000888  50DF               	movf	indf2,w,c
  2248  00088A  6E1D               	movwf	SetDataDict@DataTableIndex,c
  2249  00088C  0EE2               	movlw	low ComController@DataRecived
  2250  00088E  6E1E               	movwf	SetDataDict@DataArray,c
  2251  000890  0E01               	movlw	high ComController@DataRecived
  2252  000892  6E1F               	movwf	SetDataDict@DataArray+1,c
  2253  000894  0100               	movlb	0	; () banked
  2254  000896  EE20 F004          	lfsr	2,4
  2255  00089A  51BA               	movf	ComController@DTI& (0+255),w,b
  2256  00089C  26D9               	addwf	fsr2l,f,c
  2257  00089E  51BB               	movf	(ComController@DTI+1)& (0+255),w,b
  2258  0008A0  22DA               	addwfc	fsr2h,f,c
  2259  0008A2  50DF               	movf	indf2,w,c
  2260  0008A4  6E20               	movwf	SetDataDict@numbofbytes,c
  2261  0008A6  0100               	movlb	0	; () banked
  2262  0008A8  EE20 F002          	lfsr	2,2
  2263  0008AC  51BA               	movf	ComController@DTI& (0+255),w,b
  2264  0008AE  26D9               	addwf	fsr2l,f,c
  2265  0008B0  51BB               	movf	(ComController@DTI+1)& (0+255),w,b
  2266  0008B2  22DA               	addwfc	fsr2h,f,c
  2267  0008B4  50DF               	movf	indf2,w,c
  2268  0008B6  EC2E  F00B         	call	_SetDataDict
  2269                           
  2270                           ;CarCom.c: 144: GetDataDict(4, 2, DataToSend, 1);
  2271  0008BA  0E02               	movlw	2
  2272  0008BC  6E1D               	movwf	GetDataDict@DataTableIndex,c
  2273  0008BE  0EEA               	movlw	low ComController@DataToSend_1656
  2274  0008C0  6E1E               	movwf	GetDataDict@DataArray,c
  2275  0008C2  0E01               	movlw	high ComController@DataToSend_1656
  2276  0008C4  6E1F               	movwf	GetDataDict@DataArray+1,c
  2277  0008C6  0E01               	movlw	1
  2278  0008C8  6E20               	movwf	GetDataDict@numbofbytes,c
  2279  0008CA  0E04               	movlw	4
  2280  0008CC  EC7A  F00B         	call	_GetDataDict
  2281                           
  2282                           ;CarCom.c: 145: do { LATC5 = 1; } while(0);
  2283  0008D0  8A8B               	bsf	3979,5,c	;volatile
  2284                           
  2285                           ;CarCom.c: 146: Delay(2);
  2286  0008D2  0E02               	movlw	2
  2287  0008D4  6E1D               	movwf	Delay@wait,c
  2288  0008D6  0E00               	movlw	0
  2289  0008D8  6E1E               	movwf	Delay@wait+1,c
  2290  0008DA  0E00               	movlw	0
  2291  0008DC  6E1F               	movwf	Delay@wait+2,c
  2292  0008DE  0E00               	movlw	0
  2293  0008E0  6E20               	movwf	Delay@wait+3,c
  2294  0008E2  ECDA  F00E         	call	_Delay	;wreg free
  2295                           
  2296                           ;CarCom.c: 147: sendData(1, 2, 4, 2, DataToSend, 1);
  2297  0008E6  0E02               	movlw	2
  2298  0008E8  0100               	movlb	0	; () banked
  2299  0008EA  6F6D               	movwf	sendData@ComandByte& (0+255),b
  2300  0008EC  0E04               	movlw	4
  2301  0008EE  0100               	movlb	0	; () banked
  2302  0008F0  6F6E               	movwf	sendData@DataTable& (0+255),b
  2303  0008F2  0E02               	movlw	2
  2304  0008F4  0100               	movlb	0	; () banked
  2305  0008F6  6F6F               	movwf	sendData@DataTableIndex& (0+255),b
  2306  0008F8  0EEA               	movlw	low ComController@DataToSend_1656
  2307  0008FA  0100               	movlb	0	; () banked
  2308  0008FC  6F70               	movwf	sendData@DTS& (0+255),b
  2309  0008FE  0E01               	movlw	high ComController@DataToSend_1656
  2310  000900  0100               	movlb	0	; () banked
  2311  000902  6F71               	movwf	(sendData@DTS+1)& (0+255),b
  2312  000904  0E00               	movlw	0
  2313  000906  0100               	movlb	0	; () banked
  2314  000908  6F73               	movwf	(sendData@lenth+1)& (0+255),b
  2315  00090A  0E01               	movlw	1
  2316  00090C  6F72               	movwf	sendData@lenth& (0+255),b
  2317  00090E  0E01               	movlw	1
  2318  000910  EC96  F004         	call	_sendData
  2319                           
  2320                           ;CarCom.c: 148: Delay(5);
  2321  000914  0E05               	movlw	5
  2322  000916  6E1D               	movwf	Delay@wait,c
  2323  000918  0E00               	movlw	0
  2324  00091A  6E1E               	movwf	Delay@wait+1,c
  2325  00091C  0E00               	movlw	0
  2326  00091E  6E1F               	movwf	Delay@wait+2,c
  2327  000920  0E00               	movlw	0
  2328  000922  6E20               	movwf	Delay@wait+3,c
  2329  000924  ECDA  F00E         	call	_Delay	;wreg free
  2330                           
  2331                           ;CarCom.c: 149: do { LATC5 = 0; } while(0);
  2332  000928  9A8B               	bcf	3979,5,c	;volatile
  2333  00092A  0012               	return	
  2334  00092C                     __end_of_ComController:
  2335                           	opt stack 0
  2336                           tblptru	equ	0xFF8
  2337                           tblptrh	equ	0xFF7
  2338                           tblptrl	equ	0xFF6
  2339                           tablat	equ	0xFF5
  2340                           prodh	equ	0xFF4
  2341                           prodl	equ	0xFF3
  2342                           intcon	equ	0xFF2
  2343                           postinc0	equ	0xFEE
  2344                           wreg	equ	0xFE8
  2345                           indf1	equ	0xFE7
  2346                           postdec1	equ	0xFE5
  2347                           fsr1h	equ	0xFE2
  2348                           fsr1l	equ	0xFE1
  2349                           indf2	equ	0xFDF
  2350                           postinc2	equ	0xFDE
  2351                           postdec2	equ	0xFDD
  2352                           fsr2h	equ	0xFDA
  2353                           fsr2l	equ	0xFD9
  2354                           status	equ	0xFD8
  2355                           
  2356 ;; *************** function _sendData *****************
  2357 ;; Defined at:
  2358 ;;		line 39 in file "CarCom.c"
  2359 ;; Parameters:    Size  Location     Type
  2360 ;;  whereToSend     1    wreg     unsigned char 
  2361 ;;  ComandByte      1   13[BANK0 ] unsigned char 
  2362 ;;  DataTable       1   14[BANK0 ] unsigned char 
  2363 ;;  DataTableInd    1   15[BANK0 ] unsigned char 
  2364 ;;  DTS             2   16[BANK0 ] PTR unsigned char 
  2365 ;;		 -> ComController@DataToSend_1656(4), ComController@DataToSend(4), 
  2366 ;;  lenth           2   18[BANK0 ] unsigned int 
  2367 ;; Auto vars:     Size  Location     Type
  2368 ;;  whereToSend     1   80[BANK0 ] unsigned char 
  2369 ;;  SendArray      30   50[BANK0 ] unsigned char [30]
  2370 ;;  COBSArray      30   20[BANK0 ] unsigned char [30]
  2371 ;;  result          3   82[BANK0 ] struct .
  2372 ;;  count           2   87[BANK0 ] int 
  2373 ;;  j               2   85[BANK0 ] int 
  2374 ;;  i               1   89[BANK0 ] unsigned char 
  2375 ;;  CS              1   81[BANK0 ] unsigned char 
  2376 ;; Return value:  Size  Location     Type
  2377 ;;                  1    wreg      void 
  2378 ;; Registers used:
  2379 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2380 ;; Tracked objects:
  2381 ;;		On entry : 0/0
  2382 ;;		On exit  : 0/0
  2383 ;;		Unchanged: 0/0
  2384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2385 ;;      Params:         0       7       0       0       0       0       0
  2386 ;;      Locals:         0      70       0       0       0       0       0
  2387 ;;      Temps:          4       0       0       0       0       0       0
  2388 ;;      Totals:         4      77       0       0       0       0       0
  2389 ;;Total ram usage:       81 bytes
  2390 ;; Hardware stack levels used:    1
  2391 ;; Hardware stack levels required when called:    9
  2392 ;; This function calls:
  2393 ;;		_CRC8
  2394 ;;		_Send_put
  2395 ;;		_cobs_encode
  2396 ;; This function is called by:
  2397 ;;		_ComController
  2398 ;; This function uses a non-reentrant model
  2399 ;;
  2400                           
  2401                           	psect	text8
  2402  00092C                     __ptext8:
  2403                           	opt stack 0
  2404  00092C                     _sendData:
  2405                           	opt stack 18
  2406                           
  2407                           ;incstack = 0
  2408                           ;sendData@whereToSend stored from wreg
  2409  00092C  0100               	movlb	0	; () banked
  2410  00092E  6FB0               	movwf	sendData@whereToSend& (0+255),b
  2411                           
  2412                           ;CarCom.c: 40: unsigned char SendArray[30];
  2413                           ;CarCom.c: 41: unsigned char COBSArray[30];
  2414                           ;CarCom.c: 43: int j = 0;
  2415  000930  0E00               	movlw	0
  2416  000932  0100               	movlb	0	; () banked
  2417  000934  6FB6               	movwf	(sendData@j+1)& (0+255),b
  2418  000936  0E00               	movlw	0
  2419  000938  6FB5               	movwf	sendData@j& (0+255),b
  2420  00093A                     l3978:
  2421                           
  2422                           ; BSR set to: 0
  2423  00093A  0100               	movlb	0	; () banked
  2424  00093C  51B6               	movf	(sendData@j+1)& (0+255),w,b
  2425  00093E  E113               	bnz	l3988
  2426  000940  0E1E               	movlw	30
  2427  000942  0100               	movlb	0	; () banked
  2428  000944  5DB5               	subwf	sendData@j& (0+255),w,b
  2429  000946  B0D8               	btfsc	status,0,c
  2430  000948  D00E               	goto	l3988
  2431                           
  2432                           ; BSR set to: 0
  2433                           ;CarCom.c: 45: SendArray[j] = 0;
  2434                           
  2435                           ; BSR set to: 0
  2436                           
  2437                           ; BSR set to: 0
  2438  00094A  0E92               	movlw	low sendData@SendArray
  2439  00094C  0100               	movlb	0	; () banked
  2440  00094E  25B5               	addwf	sendData@j& (0+255),w,b
  2441  000950  6ED9               	movwf	fsr2l,c
  2442  000952  0E00               	movlw	high sendData@SendArray
  2443  000954  0100               	movlb	0	; () banked
  2444  000956  21B6               	addwfc	(sendData@j+1)& (0+255),w,b
  2445  000958  6EDA               	movwf	fsr2h,c
  2446  00095A  0E00               	movlw	0
  2447  00095C  6EDF               	movwf	indf2,c
  2448                           
  2449                           ; BSR set to: 0
  2450  00095E  0100               	movlb	0	; () banked
  2451  000960  4BB5               	infsnz	sendData@j& (0+255),f,b
  2452  000962  2BB6               	incf	(sendData@j+1)& (0+255),f,b
  2453  000964  D7EA               	goto	l3978
  2454  000966                     l3988:
  2455                           
  2456                           ; BSR set to: 0
  2457                           ;CarCom.c: 46: }
  2458                           ;CarCom.c: 48: cobs_encode_result result;
  2459                           ;CarCom.c: 50: SendArray[0] = 5+lenth;
  2460  000966  0100               	movlb	0	; () banked
  2461  000968  5172               	movf	sendData@lenth& (0+255),w,b
  2462  00096A  0F05               	addlw	5
  2463  00096C  0100               	movlb	0	; () banked
  2464  00096E  6F92               	movwf	sendData@SendArray& (0+255),b
  2465                           
  2466                           ; BSR set to: 0
  2467                           ;CarCom.c: 51: SendArray[1] = ComandByte;
  2468  000970  C06D  F093         	movff	sendData@ComandByte,sendData@SendArray+1
  2469                           
  2470                           ; BSR set to: 0
  2471                           ;CarCom.c: 52: SendArray[2] = DataTable;
  2472  000974  C06E  F094         	movff	sendData@DataTable,sendData@SendArray+2
  2473                           
  2474                           ; BSR set to: 0
  2475                           ;CarCom.c: 53: SendArray[3] = DataTableIndex;
  2476  000978  C06F  F095         	movff	sendData@DataTableIndex,sendData@SendArray+3
  2477                           
  2478                           ; BSR set to: 0
  2479                           ;CarCom.c: 54: SendArray[4] = lenth;
  2480  00097C  C072  F096         	movff	sendData@lenth,sendData@SendArray+4
  2481                           
  2482                           ; BSR set to: 0
  2483                           ;CarCom.c: 56: unsigned char i = 0;
  2484  000980  0E00               	movlw	0
  2485  000982  0100               	movlb	0	; () banked
  2486  000984  6FB9               	movwf	sendData@i& (0+255),b
  2487                           
  2488                           ; BSR set to: 0
  2489                           ;CarCom.c: 57: int count = 5;
  2490  000986  0E00               	movlw	0
  2491  000988  0100               	movlb	0	; () banked
  2492  00098A  6FB8               	movwf	(sendData@count+1)& (0+255),b
  2493  00098C  0E05               	movlw	5
  2494  00098E  6FB7               	movwf	sendData@count& (0+255),b
  2495  000990  D020               	goto	l4008
  2496  000992                     l4002:
  2497                           
  2498                           ; BSR set to: 0
  2499                           ;CarCom.c: 60: SendArray[i+5] = DTS[i];
  2500  000992  0100               	movlb	0	; () banked
  2501  000994  51B9               	movf	sendData@i& (0+255),w,b
  2502  000996  0D01               	mullw	1
  2503  000998  50F3               	movf	prodl,w,c
  2504  00099A  0100               	movlb	0	; () banked
  2505  00099C  2570               	addwf	sendData@DTS& (0+255),w,b
  2506  00099E  6ED9               	movwf	fsr2l,c
  2507  0009A0  50F4               	movf	prodh,w,c
  2508  0009A2  0100               	movlb	0	; () banked
  2509  0009A4  2171               	addwfc	(sendData@DTS+1)& (0+255),w,b
  2510  0009A6  6EDA               	movwf	fsr2h,c
  2511  0009A8  0100               	movlb	0	; () banked
  2512  0009AA  51B9               	movf	sendData@i& (0+255),w,b
  2513  0009AC  6E29               	movwf	??_sendData& (0+255),c
  2514  0009AE  6A2A               	clrf	(??_sendData+1)& (0+255),c
  2515  0009B0  0E05               	movlw	5
  2516  0009B2  2629               	addwf	??_sendData,f,c
  2517  0009B4  0E00               	movlw	0
  2518  0009B6  222A               	addwfc	??_sendData+1,f,c
  2519  0009B8  0E92               	movlw	low sendData@SendArray
  2520  0009BA  2429               	addwf	??_sendData,w,c
  2521  0009BC  6EE1               	movwf	fsr1l,c
  2522  0009BE  0E00               	movlw	high sendData@SendArray
  2523  0009C0  202A               	addwfc	??_sendData+1,w,c
  2524  0009C2  6EE2               	movwf	fsr1h,c
  2525  0009C4  CFDF FFE7          	movff	indf2,indf1
  2526                           
  2527                           ; BSR set to: 0
  2528                           ;CarCom.c: 61: count++;
  2529  0009C8  0100               	movlb	0	; () banked
  2530  0009CA  4BB7               	infsnz	sendData@count& (0+255),f,b
  2531  0009CC  2BB8               	incf	(sendData@count+1)& (0+255),f,b
  2532                           
  2533                           ; BSR set to: 0
  2534  0009CE  0100               	movlb	0	; () banked
  2535  0009D0  2BB9               	incf	sendData@i& (0+255),f,b
  2536  0009D2                     l4008:
  2537                           
  2538                           ; BSR set to: 0
  2539  0009D2  0100               	movlb	0	; () banked
  2540  0009D4  51B9               	movf	sendData@i& (0+255),w,b
  2541  0009D6  6E29               	movwf	??_sendData& (0+255),c
  2542  0009D8  6A2A               	clrf	(??_sendData+1)& (0+255),c
  2543  0009DA  0100               	movlb	0	; () banked
  2544  0009DC  5172               	movf	sendData@lenth& (0+255),w,b
  2545  0009DE  5C29               	subwf	??_sendData,w,c
  2546  0009E0  0100               	movlb	0	; () banked
  2547  0009E2  5173               	movf	(sendData@lenth+1)& (0+255),w,b
  2548  0009E4  582A               	subwfb	??_sendData+1,w,c
  2549  0009E6  A0D8               	btfss	status,0,c
  2550  0009E8  D7D4               	goto	l4002
  2551                           
  2552                           ; BSR set to: 0
  2553                           ;CarCom.c: 62: }
  2554                           ;CarCom.c: 64: unsigned char CS = CRC8(SendArray, count);
  2555                           
  2556                           ; BSR set to: 0
  2557  0009EA  0E92               	movlw	low sendData@SendArray
  2558  0009EC  6E1D               	movwf	CRC8@data,c
  2559  0009EE  0E00               	movlw	high sendData@SendArray
  2560  0009F0  6E1E               	movwf	CRC8@data+1,c
  2561  0009F2  C0B7  F01F         	movff	sendData@count,CRC8@len
  2562  0009F6  ECB5  F00E         	call	_CRC8	;wreg free
  2563  0009FA  0100               	movlb	0	; () banked
  2564  0009FC  6FB1               	movwf	sendData@CS& (0+255),b
  2565                           
  2566                           ; BSR set to: 0
  2567                           ;CarCom.c: 65: SendArray[count] = CS;
  2568  0009FE  0E92               	movlw	low sendData@SendArray
  2569  000A00  0100               	movlb	0	; () banked
  2570  000A02  25B7               	addwf	sendData@count& (0+255),w,b
  2571  000A04  6ED9               	movwf	fsr2l,c
  2572  000A06  0E00               	movlw	high sendData@SendArray
  2573  000A08  0100               	movlb	0	; () banked
  2574  000A0A  21B8               	addwfc	(sendData@count+1)& (0+255),w,b
  2575  000A0C  6EDA               	movwf	fsr2h,c
  2576  000A0E  C0B1  FFDF         	movff	sendData@CS,indf2
  2577                           
  2578                           ; BSR set to: 0
  2579                           ;CarCom.c: 66: count++;
  2580  000A12  0100               	movlb	0	; () banked
  2581  000A14  4BB7               	infsnz	sendData@count& (0+255),f,b
  2582  000A16  2BB8               	incf	(sendData@count+1)& (0+255),f,b
  2583                           
  2584                           ; BSR set to: 0
  2585                           ;CarCom.c: 67: result = cobs_encode(COBSArray, sizeof(COBSArray), SendArray, count);
  2586  000A18  0E74               	movlw	low sendData@COBSArray
  2587  000A1A  6E1D               	movwf	cobs_encode@dst_buf_ptr,c
  2588  000A1C  0E00               	movlw	high sendData@COBSArray
  2589  000A1E  6E1E               	movwf	cobs_encode@dst_buf_ptr+1,c
  2590  000A20  0E00               	movlw	0
  2591  000A22  6E20               	movwf	cobs_encode@dst_buf_len+1,c
  2592  000A24  0E1E               	movlw	30
  2593  000A26  6E1F               	movwf	cobs_encode@dst_buf_len,c
  2594  000A28  0E92               	movlw	low sendData@SendArray
  2595  000A2A  6E21               	movwf	cobs_encode@src_ptr,c
  2596  000A2C  0E00               	movlw	high sendData@SendArray
  2597  000A2E  6E22               	movwf	cobs_encode@src_ptr+1,c
  2598  000A30  C0B7  F023         	movff	sendData@count,cobs_encode@src_len
  2599  000A34  C0B8  F024         	movff	sendData@count+1,cobs_encode@src_len+1
  2600  000A38  EC5F  F006         	call	_cobs_encode	;wreg free
  2601  000A3C  C01D  F0B2         	movff	?_cobs_encode,sendData@result
  2602  000A40  C01E  F0B3         	movff	?_cobs_encode+1,sendData@result+1
  2603  000A44  C01F  F0B4         	movff	?_cobs_encode+2,sendData@result+2
  2604                           
  2605                           ;CarCom.c: 68: SendArray[0] = whereToSend;
  2606  000A48  C0B0  F092         	movff	sendData@whereToSend,sendData@SendArray
  2607                           
  2608                           ;CarCom.c: 70: for(i = 1;i<result.out_len+1;i++){
  2609  000A4C  0E01               	movlw	1
  2610  000A4E  0100               	movlb	0	; () banked
  2611  000A50  6FB9               	movwf	sendData@i& (0+255),b
  2612  000A52  D01F               	goto	l4026
  2613  000A54                     l4022:
  2614                           
  2615                           ; BSR set to: 0
  2616                           ;CarCom.c: 71: SendArray[i] = COBSArray[i-1];
  2617  000A54  0EFF               	movlw	255
  2618  000A56  6E29               	movwf	??_sendData& (0+255),c
  2619  000A58  0EFF               	movlw	255
  2620  000A5A  6E2A               	movwf	(??_sendData+1)& (0+255),c
  2621  000A5C  0100               	movlb	0	; () banked
  2622  000A5E  51B9               	movf	sendData@i& (0+255),w,b
  2623  000A60  6E2B               	movwf	(??_sendData+2)& (0+255),c
  2624  000A62  6A2C               	clrf	(??_sendData+3)& (0+255),c
  2625  000A64  5029               	movf	??_sendData,w,c
  2626  000A66  262B               	addwf	??_sendData+2,f,c
  2627  000A68  502A               	movf	??_sendData+1,w,c
  2628  000A6A  222C               	addwfc	??_sendData+3,f,c
  2629  000A6C  0E74               	movlw	low sendData@COBSArray
  2630  000A6E  242B               	addwf	??_sendData+2,w,c
  2631  000A70  6ED9               	movwf	fsr2l,c
  2632  000A72  0E00               	movlw	high sendData@COBSArray
  2633  000A74  202C               	addwfc	??_sendData+3,w,c
  2634  000A76  6EDA               	movwf	fsr2h,c
  2635  000A78  0100               	movlb	0	; () banked
  2636  000A7A  51B9               	movf	sendData@i& (0+255),w,b
  2637  000A7C  0D01               	mullw	1
  2638  000A7E  0E92               	movlw	low sendData@SendArray
  2639  000A80  24F3               	addwf	prodl,w,c
  2640  000A82  6EE1               	movwf	fsr1l,c
  2641  000A84  0E00               	movlw	high sendData@SendArray
  2642  000A86  20F4               	addwfc	prodh,w,c
  2643  000A88  6EE2               	movwf	fsr1h,c
  2644  000A8A  CFDF FFE7          	movff	indf2,indf1
  2645                           
  2646                           ; BSR set to: 0
  2647  000A8E  0100               	movlb	0	; () banked
  2648  000A90  2BB9               	incf	sendData@i& (0+255),f,b
  2649  000A92                     l4026:
  2650                           
  2651                           ; BSR set to: 0
  2652  000A92  0E01               	movlw	1
  2653  000A94  0100               	movlb	0	; () banked
  2654  000A96  25B2               	addwf	sendData@result& (0+255),w,b
  2655  000A98  6E29               	movwf	??_sendData& (0+255),c
  2656  000A9A  0E00               	movlw	0
  2657  000A9C  0100               	movlb	0	; () banked
  2658  000A9E  21B3               	addwfc	(sendData@result+1)& (0+255),w,b
  2659  000AA0  6E2A               	movwf	(??_sendData+1)& (0+255),c
  2660  000AA2  0100               	movlb	0	; () banked
  2661  000AA4  51B9               	movf	sendData@i& (0+255),w,b
  2662  000AA6  6E2B               	movwf	(??_sendData+2)& (0+255),c
  2663  000AA8  6A2C               	clrf	(??_sendData+3)& (0+255),c
  2664  000AAA  5029               	movf	??_sendData,w,c
  2665  000AAC  5C2B               	subwf	??_sendData+2,w,c
  2666  000AAE  502A               	movf	??_sendData+1,w,c
  2667  000AB0  582C               	subwfb	??_sendData+3,w,c
  2668  000AB2  A0D8               	btfss	status,0,c
  2669  000AB4  D7CF               	goto	l4022
  2670                           
  2671                           ; BSR set to: 0
  2672                           ;CarCom.c: 72: }
  2673                           ;CarCom.c: 74: for(i = 0;i<result.out_len+2;i++){
  2674                           
  2675                           ; BSR set to: 0
  2676  000AB6  0E00               	movlw	0
  2677  000AB8  0100               	movlb	0	; () banked
  2678  000ABA  6FB9               	movwf	sendData@i& (0+255),b
  2679  000ABC  D00E               	goto	l4034
  2680  000ABE                     l4030:
  2681                           
  2682                           ; BSR set to: 0
  2683                           ;CarCom.c: 75: Send_put(SendArray[i]);
  2684  000ABE  0100               	movlb	0	; () banked
  2685  000AC0  51B9               	movf	sendData@i& (0+255),w,b
  2686  000AC2  0D01               	mullw	1
  2687  000AC4  0E92               	movlw	low sendData@SendArray
  2688  000AC6  24F3               	addwf	prodl,w,c
  2689  000AC8  6ED9               	movwf	fsr2l,c
  2690  000ACA  0E00               	movlw	high sendData@SendArray
  2691  000ACC  20F4               	addwfc	prodh,w,c
  2692  000ACE  6EDA               	movwf	fsr2h,c
  2693  000AD0  50DF               	movf	indf2,w,c
  2694  000AD2  ECE2  F00F         	call	_Send_put
  2695  000AD6  0100               	movlb	0	; () banked
  2696  000AD8  2BB9               	incf	sendData@i& (0+255),f,b
  2697  000ADA                     l4034:
  2698                           
  2699                           ; BSR set to: 0
  2700  000ADA  0E02               	movlw	2
  2701  000ADC  0100               	movlb	0	; () banked
  2702  000ADE  25B2               	addwf	sendData@result& (0+255),w,b
  2703  000AE0  6E29               	movwf	??_sendData& (0+255),c
  2704  000AE2  0E00               	movlw	0
  2705  000AE4  0100               	movlb	0	; () banked
  2706  000AE6  21B3               	addwfc	(sendData@result+1)& (0+255),w,b
  2707  000AE8  6E2A               	movwf	(??_sendData+1)& (0+255),c
  2708  000AEA  0100               	movlb	0	; () banked
  2709  000AEC  51B9               	movf	sendData@i& (0+255),w,b
  2710  000AEE  6E2B               	movwf	(??_sendData+2)& (0+255),c
  2711  000AF0  6A2C               	clrf	(??_sendData+3)& (0+255),c
  2712  000AF2  5029               	movf	??_sendData,w,c
  2713  000AF4  5C2B               	subwf	??_sendData+2,w,c
  2714  000AF6  502A               	movf	??_sendData+1,w,c
  2715  000AF8  582C               	subwfb	??_sendData+3,w,c
  2716  000AFA  B0D8               	btfsc	status,0,c
  2717  000AFC  0012               	return	
  2718  000AFE  D7DF               	goto	l4030
  2719  000B00                     __end_of_sendData:
  2720                           	opt stack 0
  2721                           tblptru	equ	0xFF8
  2722                           tblptrh	equ	0xFF7
  2723                           tblptrl	equ	0xFF6
  2724                           tablat	equ	0xFF5
  2725                           prodh	equ	0xFF4
  2726                           prodl	equ	0xFF3
  2727                           intcon	equ	0xFF2
  2728                           postinc0	equ	0xFEE
  2729                           wreg	equ	0xFE8
  2730                           indf1	equ	0xFE7
  2731                           postdec1	equ	0xFE5
  2732                           fsr1h	equ	0xFE2
  2733                           fsr1l	equ	0xFE1
  2734                           indf2	equ	0xFDF
  2735                           postinc2	equ	0xFDE
  2736                           postdec2	equ	0xFDD
  2737                           fsr2h	equ	0xFDA
  2738                           fsr2l	equ	0xFD9
  2739                           status	equ	0xFD8
  2740                           
  2741 ;; *************** function _cobs_encode *****************
  2742 ;; Defined at:
  2743 ;;		line 29 in file "COBS.c"
  2744 ;; Parameters:    Size  Location     Type
  2745 ;;  dst_buf_ptr     2   28[COMRAM] PTR unsigned char 
  2746 ;;		 -> sendData@COBSArray(30), 
  2747 ;;  dst_buf_len     2   30[COMRAM] unsigned int 
  2748 ;;  src_ptr         2   32[COMRAM] PTR const unsigned char 
  2749 ;;		 -> sendData@SendArray(30), 
  2750 ;;  src_len         2   34[COMRAM] unsigned int 
  2751 ;; Auto vars:     Size  Location     Type
  2752 ;;  result          3   10[BANK0 ] struct .
  2753 ;;  dst_write_pt    2    8[BANK0 ] PTR unsigned char 
  2754 ;;		 -> sendData@COBSArray(30), 
  2755 ;;  dst_code_wri    2    6[BANK0 ] PTR unsigned char 
  2756 ;;		 -> sendData@COBSArray(30), 
  2757 ;;  dst_buf_end_    2    3[BANK0 ] PTR unsigned char 
  2758 ;;		 -> sendData@COBSArray(30), 
  2759 ;;  src_end_ptr     2    0[BANK0 ] PTR const unsigned char 
  2760 ;;		 -> sendData@SendArray(30), 
  2761 ;;  search_len      1    5[BANK0 ] unsigned char 
  2762 ;;  src_byte        1    2[BANK0 ] unsigned char 
  2763 ;; Return value:  Size  Location     Type
  2764 ;;                  3   28[COMRAM] struct .
  2765 ;; Registers used:
  2766 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2767 ;; Tracked objects:
  2768 ;;		On entry : 0/0
  2769 ;;		On exit  : 0/0
  2770 ;;		Unchanged: 0/0
  2771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2772 ;;      Params:         8       0       0       0       0       0       0
  2773 ;;      Locals:         0      13       0       0       0       0       0
  2774 ;;      Temps:          2       0       0       0       0       0       0
  2775 ;;      Totals:        10      13       0       0       0       0       0
  2776 ;;Total ram usage:       23 bytes
  2777 ;; Hardware stack levels used:    1
  2778 ;; Hardware stack levels required when called:    6
  2779 ;; This function calls:
  2780 ;;		Nothing
  2781 ;; This function is called by:
  2782 ;;		_sendData
  2783 ;; This function uses a non-reentrant model
  2784 ;;
  2785                           
  2786                           	psect	text9
  2787  000CBE                     __ptext9:
  2788                           	opt stack 0
  2789  000CBE                     _cobs_encode:
  2790                           	opt stack 20
  2791                           
  2792                           ;COBS.c: 31: cobs_encode_result result = { 0, COBS_ENCODE_OK };
  2793                           
  2794                           ; BSR set to: 0
  2795                           ;incstack = 0
  2796  000CBE  C033  F06A         	movff	cobs_encode@F180,cobs_encode@result
  2797  000CC2  C034  F06B         	movff	cobs_encode@F180+1,cobs_encode@result+1
  2798  000CC6  C035  F06C         	movff	cobs_encode@F180+2,cobs_encode@result+2
  2799                           
  2800                           ;COBS.c: 32: const uint8_t * src_end_ptr = src_ptr + src_len;
  2801  000CCA  5023               	movf	cobs_encode@src_len,w,c
  2802  000CCC  2421               	addwf	cobs_encode@src_ptr,w,c
  2803  000CCE  0100               	movlb	0	; () banked
  2804  000CD0  6F60               	movwf	cobs_encode@src_end_ptr& (0+255),b
  2805  000CD2  5024               	movf	cobs_encode@src_len+1,w,c
  2806  000CD4  2022               	addwfc	cobs_encode@src_ptr+1,w,c
  2807  000CD6  0100               	movlb	0	; () banked
  2808  000CD8  6F61               	movwf	(cobs_encode@src_end_ptr+1)& (0+255),b
  2809                           
  2810                           ;COBS.c: 33: uint8_t * dst_buf_end_ptr = dst_buf_ptr + dst_buf_len;
  2811  000CDA  501F               	movf	cobs_encode@dst_buf_len,w,c
  2812  000CDC  241D               	addwf	cobs_encode@dst_buf_ptr,w,c
  2813  000CDE  0100               	movlb	0	; () banked
  2814  000CE0  6F63               	movwf	cobs_encode@dst_buf_end_ptr& (0+255),b
  2815  000CE2  5020               	movf	cobs_encode@dst_buf_len+1,w,c
  2816  000CE4  201E               	addwfc	cobs_encode@dst_buf_ptr+1,w,c
  2817  000CE6  0100               	movlb	0	; () banked
  2818  000CE8  6F64               	movwf	(cobs_encode@dst_buf_end_ptr+1)& (0+255),b
  2819                           
  2820                           ;COBS.c: 34: uint8_t * dst_code_write_ptr = dst_buf_ptr;
  2821  000CEA  C01D  F066         	movff	cobs_encode@dst_buf_ptr,cobs_encode@dst_code_write_ptr
  2822  000CEE  C01E  F067         	movff	cobs_encode@dst_buf_ptr+1,cobs_encode@dst_code_write_ptr+1
  2823                           
  2824                           ;COBS.c: 35: uint8_t * dst_write_ptr = dst_code_write_ptr + 1;
  2825  000CF2  0E01               	movlw	1
  2826  000CF4  0100               	movlb	0	; () banked
  2827  000CF6  2566               	addwf	cobs_encode@dst_code_write_ptr& (0+255),w,b
  2828  000CF8  0100               	movlb	0	; () banked
  2829  000CFA  6F68               	movwf	cobs_encode@dst_write_ptr& (0+255),b
  2830  000CFC  0E00               	movlw	0
  2831  000CFE  0100               	movlb	0	; () banked
  2832  000D00  2167               	addwfc	(cobs_encode@dst_code_write_ptr+1)& (0+255),w,b
  2833  000D02  0100               	movlb	0	; () banked
  2834  000D04  6F69               	movwf	(cobs_encode@dst_write_ptr+1)& (0+255),b
  2835                           
  2836                           ; BSR set to: 0
  2837                           ;COBS.c: 36: uint8_t src_byte = 0;
  2838  000D06  0E00               	movlw	0
  2839  000D08  0100               	movlb	0	; () banked
  2840  000D0A  6F62               	movwf	cobs_encode@src_byte& (0+255),b
  2841                           
  2842                           ; BSR set to: 0
  2843                           ;COBS.c: 37: uint8_t search_len = 1;
  2844  000D0C  0E01               	movlw	1
  2845  000D0E  0100               	movlb	0	; () banked
  2846  000D10  6F65               	movwf	cobs_encode@search_len& (0+255),b
  2847                           
  2848                           ;COBS.c: 41: if ((dst_buf_ptr == (0)) || (src_ptr == (0)))
  2849  000D12  501D               	movf	cobs_encode@dst_buf_ptr,w,c
  2850  000D14  101E               	iorwf	cobs_encode@dst_buf_ptr+1,w,c
  2851  000D16  B4D8               	btfsc	status,2,c
  2852  000D18  D004               	goto	l3776
  2853                           
  2854                           ; BSR set to: 0
  2855  000D1A  5021               	movf	cobs_encode@src_ptr,w,c
  2856  000D1C  1022               	iorwf	cobs_encode@src_ptr+1,w,c
  2857  000D1E  A4D8               	btfss	status,2,c
  2858  000D20  D00A               	goto	l3782
  2859  000D22                     l3776:
  2860                           
  2861                           ; BSR set to: 0
  2862                           ;COBS.c: 42: {
  2863                           ;COBS.c: 43: result.status = COBS_ENCODE_NULL_POINTER;
  2864  000D22  0E01               	movlw	1
  2865  000D24  0100               	movlb	0	; () banked
  2866  000D26  6F6C               	movwf	(cobs_encode@result+2)& (0+255),b
  2867                           
  2868                           ; BSR set to: 0
  2869                           ;COBS.c: 44: return result;
  2870  000D28  C06A  F01D         	movff	cobs_encode@result,?_cobs_encode
  2871  000D2C  C06B  F01E         	movff	cobs_encode@result+1,?_cobs_encode+1
  2872  000D30  C06C  F01F         	movff	cobs_encode@result+2,?_cobs_encode+2
  2873                           
  2874                           ; BSR set to: 0
  2875  000D34  0012               	return	
  2876  000D36                     l3782:
  2877                           
  2878                           ; BSR set to: 0
  2879                           ;COBS.c: 45: }
  2880                           ;COBS.c: 47: if (src_len != 0)
  2881  000D36  5023               	movf	cobs_encode@src_len,w,c
  2882  000D38  1024               	iorwf	cobs_encode@src_len+1,w,c
  2883  000D3A  B4D8               	btfsc	status,2,c
  2884  000D3C  D05C               	goto	l3826
  2885  000D3E                     l3784:
  2886                           
  2887                           ; BSR set to: 0
  2888                           ;COBS.c: 51: {
  2889                           ;COBS.c: 53: if (dst_write_ptr >= dst_buf_end_ptr)
  2890  000D3E  0100               	movlb	0	; () banked
  2891  000D40  5163               	movf	cobs_encode@dst_buf_end_ptr& (0+255),w,b
  2892  000D42  0100               	movlb	0	; () banked
  2893  000D44  5D68               	subwf	cobs_encode@dst_write_ptr& (0+255),w,b
  2894  000D46  0100               	movlb	0	; () banked
  2895  000D48  5164               	movf	(cobs_encode@dst_buf_end_ptr+1)& (0+255),w,b
  2896  000D4A  0100               	movlb	0	; () banked
  2897  000D4C  5969               	subwfb	(cobs_encode@dst_write_ptr+1)& (0+255),w,b
  2898  000D4E  A0D8               	btfss	status,0,c
  2899  000D50  D003               	goto	l3788
  2900                           
  2901                           ; BSR set to: 0
  2902                           ;COBS.c: 54: {
  2903                           ;COBS.c: 55: result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
  2904  000D52  0100               	movlb	0	; () banked
  2905  000D54  836C               	bsf	(cobs_encode@result+2)& (0+255),1,b
  2906                           
  2907                           ;COBS.c: 56: break;
  2908  000D56  D04F               	goto	l3826
  2909  000D58                     l3788:
  2910                           
  2911                           ; BSR set to: 0
  2912                           ;COBS.c: 57: }
  2913                           ;COBS.c: 59: src_byte = *src_ptr++;
  2914  000D58  C021  FFD9         	movff	cobs_encode@src_ptr,fsr2l
  2915  000D5C  C022  FFDA         	movff	cobs_encode@src_ptr+1,fsr2h
  2916  000D60  50DF               	movf	indf2,w,c
  2917  000D62  0100               	movlb	0	; () banked
  2918  000D64  6F62               	movwf	cobs_encode@src_byte& (0+255),b
  2919                           
  2920                           ; BSR set to: 0
  2921  000D66  4A21               	infsnz	cobs_encode@src_ptr,f,c
  2922  000D68  2A22               	incf	cobs_encode@src_ptr+1,f,c
  2923                           
  2924                           ; BSR set to: 0
  2925                           ;COBS.c: 60: if (src_byte == 0)
  2926  000D6A  0100               	movlb	0	; () banked
  2927  000D6C  5162               	movf	cobs_encode@src_byte& (0+255),w,b
  2928  000D6E  0100               	movlb	0	; () banked
  2929  000D70  A4D8               	btfss	status,2,c
  2930  000D72  D019               	goto	l3806
  2931                           
  2932                           ; BSR set to: 0
  2933                           ;COBS.c: 61: {
  2934                           ;COBS.c: 63: *dst_code_write_ptr = search_len;
  2935  000D74  C066  FFD9         	movff	cobs_encode@dst_code_write_ptr,fsr2l
  2936  000D78  C067  FFDA         	movff	cobs_encode@dst_code_write_ptr+1,fsr2h
  2937  000D7C  C065  FFDF         	movff	cobs_encode@search_len,indf2
  2938                           
  2939                           ; BSR set to: 0
  2940                           ;COBS.c: 64: dst_code_write_ptr = dst_write_ptr++;
  2941  000D80  C068  F066         	movff	cobs_encode@dst_write_ptr,cobs_encode@dst_code_write_ptr
  2942  000D84  C069  F067         	movff	cobs_encode@dst_write_ptr+1,cobs_encode@dst_code_write_ptr+1
  2943                           
  2944                           ; BSR set to: 0
  2945  000D88  0100               	movlb	0	; () banked
  2946  000D8A  4B68               	infsnz	cobs_encode@dst_write_ptr& (0+255),f,b
  2947  000D8C  2B69               	incf	(cobs_encode@dst_write_ptr+1)& (0+255),f,b
  2948                           
  2949                           ; BSR set to: 0
  2950                           ;COBS.c: 65: search_len = 1;
  2951  000D8E  0E01               	movlw	1
  2952  000D90  0100               	movlb	0	; () banked
  2953  000D92  6F65               	movwf	cobs_encode@search_len& (0+255),b
  2954                           
  2955                           ; BSR set to: 0
  2956                           ;COBS.c: 66: if (src_ptr >= src_end_ptr)
  2957  000D94  0100               	movlb	0	; () banked
  2958  000D96  5160               	movf	cobs_encode@src_end_ptr& (0+255),w,b
  2959  000D98  5C21               	subwf	cobs_encode@src_ptr,w,c
  2960  000D9A  0100               	movlb	0	; () banked
  2961  000D9C  5161               	movf	(cobs_encode@src_end_ptr+1)& (0+255),w,b
  2962  000D9E  5822               	subwfb	cobs_encode@src_ptr+1,w,c
  2963  000DA0  B0D8               	btfsc	status,0,c
  2964  000DA2  D029               	goto	l3826
  2965  000DA4  D7CC               	goto	l3784
  2966  000DA6                     l3806:
  2967                           
  2968                           ; BSR set to: 0
  2969                           ;COBS.c: 71: else
  2970                           ;COBS.c: 72: {
  2971                           ;COBS.c: 74: *dst_write_ptr++ = src_byte;
  2972  000DA6  C068  FFD9         	movff	cobs_encode@dst_write_ptr,fsr2l
  2973  000DAA  C069  FFDA         	movff	cobs_encode@dst_write_ptr+1,fsr2h
  2974  000DAE  C062  FFDF         	movff	cobs_encode@src_byte,indf2
  2975                           
  2976                           ; BSR set to: 0
  2977  000DB2  0100               	movlb	0	; () banked
  2978  000DB4  4B68               	infsnz	cobs_encode@dst_write_ptr& (0+255),f,b
  2979  000DB6  2B69               	incf	(cobs_encode@dst_write_ptr+1)& (0+255),f,b
  2980                           
  2981                           ; BSR set to: 0
  2982                           ;COBS.c: 75: search_len++;
  2983  000DB8  0100               	movlb	0	; () banked
  2984  000DBA  2B65               	incf	cobs_encode@search_len& (0+255),f,b
  2985                           
  2986                           ; BSR set to: 0
  2987                           ;COBS.c: 76: if (src_ptr >= src_end_ptr)
  2988  000DBC  0100               	movlb	0	; () banked
  2989  000DBE  5160               	movf	cobs_encode@src_end_ptr& (0+255),w,b
  2990  000DC0  5C21               	subwf	cobs_encode@src_ptr,w,c
  2991  000DC2  0100               	movlb	0	; () banked
  2992  000DC4  5161               	movf	(cobs_encode@src_end_ptr+1)& (0+255),w,b
  2993  000DC6  5822               	subwfb	cobs_encode@src_ptr+1,w,c
  2994  000DC8  B0D8               	btfsc	status,0,c
  2995  000DCA  D015               	goto	l3826
  2996                           
  2997                           ; BSR set to: 0
  2998                           ;COBS.c: 79: }
  2999                           ;COBS.c: 80: if (search_len == 0xFF)
  3000                           
  3001                           ; BSR set to: 0
  3002                           
  3003                           ; BSR set to: 0
  3004                           ;COBS.c: 77: {
  3005                           ;COBS.c: 78: break;
  3006  000DCC  0100               	movlb	0	; () banked
  3007  000DCE  2965               	incf	cobs_encode@search_len& (0+255),w,b
  3008  000DD0  A4D8               	btfss	status,2,c
  3009  000DD2  D7B5               	goto	l3784
  3010                           
  3011                           ; BSR set to: 0
  3012                           ;COBS.c: 81: {
  3013                           ;COBS.c: 84: *dst_code_write_ptr = search_len;
  3014  000DD4  C066  FFD9         	movff	cobs_encode@dst_code_write_ptr,fsr2l
  3015  000DD8  C067  FFDA         	movff	cobs_encode@dst_code_write_ptr+1,fsr2h
  3016  000DDC  C065  FFDF         	movff	cobs_encode@search_len,indf2
  3017                           
  3018                           ; BSR set to: 0
  3019                           ;COBS.c: 85: dst_code_write_ptr = dst_write_ptr++;
  3020  000DE0  C068  F066         	movff	cobs_encode@dst_write_ptr,cobs_encode@dst_code_write_ptr
  3021  000DE4  C069  F067         	movff	cobs_encode@dst_write_ptr+1,cobs_encode@dst_code_write_ptr+1
  3022                           
  3023                           ; BSR set to: 0
  3024  000DE8  0100               	movlb	0	; () banked
  3025  000DEA  4B68               	infsnz	cobs_encode@dst_write_ptr& (0+255),f,b
  3026  000DEC  2B69               	incf	(cobs_encode@dst_write_ptr+1)& (0+255),f,b
  3027                           
  3028                           ; BSR set to: 0
  3029                           ;COBS.c: 86: search_len = 1;
  3030  000DEE  0E01               	movlw	1
  3031  000DF0  0100               	movlb	0	; () banked
  3032  000DF2  6F65               	movwf	cobs_encode@search_len& (0+255),b
  3033                           
  3034                           ; BSR set to: 0
  3035                           ;COBS.c: 87: }
  3036                           ;COBS.c: 88: }
  3037                           ;COBS.c: 89: }
  3038                           
  3039                           ; BSR set to: 0
  3040  000DF4  D7A4               	goto	l3784
  3041  000DF6                     l3826:
  3042                           
  3043                           ; BSR set to: 0
  3044                           ;COBS.c: 90: }
  3045                           ;COBS.c: 96: if (dst_code_write_ptr >= dst_buf_end_ptr)
  3046  000DF6  0100               	movlb	0	; () banked
  3047  000DF8  5163               	movf	cobs_encode@dst_buf_end_ptr& (0+255),w,b
  3048  000DFA  0100               	movlb	0	; () banked
  3049  000DFC  5D66               	subwf	cobs_encode@dst_code_write_ptr& (0+255),w,b
  3050  000DFE  0100               	movlb	0	; () banked
  3051  000E00  5164               	movf	(cobs_encode@dst_buf_end_ptr+1)& (0+255),w,b
  3052  000E02  0100               	movlb	0	; () banked
  3053  000E04  5967               	subwfb	(cobs_encode@dst_code_write_ptr+1)& (0+255),w,b
  3054  000E06  A0D8               	btfss	status,0,c
  3055  000E08  D007               	goto	l3832
  3056                           
  3057                           ; BSR set to: 0
  3058                           ;COBS.c: 97: {
  3059                           ;COBS.c: 99: result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
  3060  000E0A  0100               	movlb	0	; () banked
  3061  000E0C  836C               	bsf	(cobs_encode@result+2)& (0+255),1,b
  3062                           
  3063                           ; BSR set to: 0
  3064                           ;COBS.c: 100: dst_write_ptr = dst_buf_end_ptr;
  3065  000E0E  C063  F068         	movff	cobs_encode@dst_buf_end_ptr,cobs_encode@dst_write_ptr
  3066  000E12  C064  F069         	movff	cobs_encode@dst_buf_end_ptr+1,cobs_encode@dst_write_ptr+1
  3067                           
  3068                           ;COBS.c: 101: }
  3069  000E16  D006               	goto	l3834
  3070  000E18                     l3832:
  3071                           
  3072                           ; BSR set to: 0
  3073                           ;COBS.c: 102: else
  3074                           ;COBS.c: 103: {
  3075                           ;COBS.c: 105: *dst_code_write_ptr = search_len;
  3076  000E18  C066  FFD9         	movff	cobs_encode@dst_code_write_ptr,fsr2l
  3077  000E1C  C067  FFDA         	movff	cobs_encode@dst_code_write_ptr+1,fsr2h
  3078  000E20  C065  FFDF         	movff	cobs_encode@search_len,indf2
  3079  000E24                     l3834:
  3080                           
  3081                           ; BSR set to: 0
  3082                           ;COBS.c: 106: }
  3083                           ;COBS.c: 109: result.out_len = dst_write_ptr - dst_buf_ptr;
  3084  000E24  C01D  F025         	movff	cobs_encode@dst_buf_ptr,??_cobs_encode
  3085  000E28  C01E  F026         	movff	cobs_encode@dst_buf_ptr+1,??_cobs_encode+1
  3086  000E2C  1E25               	comf	??_cobs_encode,f,c
  3087  000E2E  1E26               	comf	??_cobs_encode+1,f,c
  3088  000E30  4A25               	infsnz	??_cobs_encode,f,c
  3089  000E32  2A26               	incf	??_cobs_encode+1,f,c
  3090  000E34  0100               	movlb	0	; () banked
  3091  000E36  5168               	movf	cobs_encode@dst_write_ptr& (0+255),w,b
  3092  000E38  2425               	addwf	??_cobs_encode,w,c
  3093  000E3A  0100               	movlb	0	; () banked
  3094  000E3C  6F6A               	movwf	cobs_encode@result& (0+255),b
  3095  000E3E  0100               	movlb	0	; () banked
  3096  000E40  5169               	movf	(cobs_encode@dst_write_ptr+1)& (0+255),w,b
  3097  000E42  2026               	addwfc	??_cobs_encode+1,w,c
  3098  000E44  0100               	movlb	0	; () banked
  3099  000E46  6F6B               	movwf	(cobs_encode@result+1)& (0+255),b
  3100                           
  3101                           ; BSR set to: 0
  3102                           ;COBS.c: 111: return result;
  3103  000E48  C06A  F01D         	movff	cobs_encode@result,?_cobs_encode
  3104  000E4C  C06B  F01E         	movff	cobs_encode@result+1,?_cobs_encode+1
  3105  000E50  C06C  F01F         	movff	cobs_encode@result+2,?_cobs_encode+2
  3106  000E54  0012               	return	
  3107  000E56                     __end_of_cobs_encode:
  3108                           	opt stack 0
  3109                           tblptru	equ	0xFF8
  3110                           tblptrh	equ	0xFF7
  3111                           tblptrl	equ	0xFF6
  3112                           tablat	equ	0xFF5
  3113                           prodh	equ	0xFF4
  3114                           prodl	equ	0xFF3
  3115                           intcon	equ	0xFF2
  3116                           postinc0	equ	0xFEE
  3117                           wreg	equ	0xFE8
  3118                           indf1	equ	0xFE7
  3119                           postdec1	equ	0xFE5
  3120                           fsr1h	equ	0xFE2
  3121                           fsr1l	equ	0xFE1
  3122                           indf2	equ	0xFDF
  3123                           postinc2	equ	0xFDE
  3124                           postdec2	equ	0xFDD
  3125                           fsr2h	equ	0xFDA
  3126                           fsr2l	equ	0xFD9
  3127                           status	equ	0xFD8
  3128                           
  3129 ;; *************** function _Send_put *****************
  3130 ;; Defined at:
  3131 ;;		line 129 in file "UART.c"
  3132 ;; Parameters:    Size  Location     Type
  3133 ;;  _data           1    wreg     unsigned char 
  3134 ;; Auto vars:     Size  Location     Type
  3135 ;;  _data           1   39[COMRAM] unsigned char 
  3136 ;; Return value:  Size  Location     Type
  3137 ;;                  1    wreg      void 
  3138 ;; Registers used:
  3139 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3140 ;; Tracked objects:
  3141 ;;		On entry : 0/0
  3142 ;;		On exit  : 0/0
  3143 ;;		Unchanged: 0/0
  3144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3145 ;;      Params:         0       0       0       0       0       0       0
  3146 ;;      Locals:         1       0       0       0       0       0       0
  3147 ;;      Temps:          0       0       0       0       0       0       0
  3148 ;;      Totals:         1       0       0       0       0       0       0
  3149 ;;Total ram usage:        1 bytes
  3150 ;; Hardware stack levels used:    1
  3151 ;; Hardware stack levels required when called:    8
  3152 ;; This function calls:
  3153 ;;		_UART_buff_get
  3154 ;;		_UART_buff_put
  3155 ;; This function is called by:
  3156 ;;		_sendData
  3157 ;;		_putch
  3158 ;; This function uses a non-reentrant model
  3159 ;;
  3160                           
  3161                           	psect	text10
  3162  001FC4                     __ptext10:
  3163                           	opt stack 0
  3164  001FC4                     _Send_put:
  3165                           	opt stack 18
  3166                           
  3167                           ; BSR set to: 0
  3168                           ;incstack = 0
  3169                           ;Send_put@_data stored from wreg
  3170  001FC4  6E28               	movwf	Send_put@_data,c
  3171                           
  3172                           ;UART.c: 130: UART_buff_put(&output_buffer, _data);
  3173  001FC6  0E00               	movlw	low _output_buffer
  3174  001FC8  6E23               	movwf	UART_buff_put@_this,c
  3175  001FCA  0E02               	movlw	high _output_buffer
  3176  001FCC  6E24               	movwf	UART_buff_put@_this+1,c
  3177  001FCE  C028  F025         	movff	Send_put@_data,UART_buff_put@c
  3178  001FD2  ECC7  F007         	call	_UART_buff_put	;wreg free
  3179                           
  3180                           ;UART.c: 131: if (Transmit_stall == 1) {
  3181  001FD6  0441               	decf	_Transmit_stall,w,c
  3182  001FD8  A4D8               	btfss	status,2,c
  3183  001FDA  0012               	return	
  3184                           
  3185                           ;UART.c: 132: Transmit_stall = 0;
  3186  001FDC  0E00               	movlw	0
  3187  001FDE  6E41               	movwf	_Transmit_stall,c
  3188                           
  3189                           ;UART.c: 133: TXREG1 = UART_buff_get(&output_buffer);
  3190  001FE0  0E00               	movlw	low _output_buffer
  3191  001FE2  6E23               	movwf	UART_buff_get@_this,c
  3192  001FE4  0E02               	movlw	high _output_buffer
  3193  001FE6  6E24               	movwf	UART_buff_get@_this+1,c
  3194  001FE8  ECC6  F00B         	call	_UART_buff_get	;wreg free
  3195  001FEC  6EAD               	movwf	4013,c	;volatile
  3196                           
  3197                           ;UART.c: 134: PIE1bits.TX1IE = 1;
  3198  001FEE  889D               	bsf	3997,4,c	;volatile
  3199  001FF0  0012               	return	
  3200  001FF2                     __end_of_Send_put:
  3201                           	opt stack 0
  3202                           tblptru	equ	0xFF8
  3203                           tblptrh	equ	0xFF7
  3204                           tblptrl	equ	0xFF6
  3205                           tablat	equ	0xFF5
  3206                           prodh	equ	0xFF4
  3207                           prodl	equ	0xFF3
  3208                           intcon	equ	0xFF2
  3209                           postinc0	equ	0xFEE
  3210                           wreg	equ	0xFE8
  3211                           indf1	equ	0xFE7
  3212                           postdec1	equ	0xFE5
  3213                           fsr1h	equ	0xFE2
  3214                           fsr1l	equ	0xFE1
  3215                           indf2	equ	0xFDF
  3216                           postinc2	equ	0xFDE
  3217                           postdec2	equ	0xFDD
  3218                           fsr2h	equ	0xFDA
  3219                           fsr2l	equ	0xFD9
  3220                           status	equ	0xFD8
  3221                           
  3222 ;; *************** function _UART_buff_put *****************
  3223 ;; Defined at:
  3224 ;;		line 67 in file "UART.c"
  3225 ;; Parameters:    Size  Location     Type
  3226 ;;  _this           2   34[COMRAM] PTR struct UART_ring_buf
  3227 ;;		 -> output_buffer(106), input_buffer(106), 
  3228 ;;  c               1   36[COMRAM] const unsigned char 
  3229 ;; Auto vars:     Size  Location     Type
  3230 ;;		None
  3231 ;; Return value:  Size  Location     Type
  3232 ;;                  1    wreg      void 
  3233 ;; Registers used:
  3234 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3235 ;; Tracked objects:
  3236 ;;		On entry : 0/0
  3237 ;;		On exit  : 0/0
  3238 ;;		Unchanged: 0/0
  3239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3240 ;;      Params:         3       0       0       0       0       0       0
  3241 ;;      Locals:         0       0       0       0       0       0       0
  3242 ;;      Temps:          2       0       0       0       0       0       0
  3243 ;;      Totals:         5       0       0       0       0       0       0
  3244 ;;Total ram usage:        5 bytes
  3245 ;; Hardware stack levels used:    1
  3246 ;; Hardware stack levels required when called:    7
  3247 ;; This function calls:
  3248 ;;		_UART_buff_modulo_inc
  3249 ;; This function is called by:
  3250 ;;		_Send_put
  3251 ;; This function uses a non-reentrant model
  3252 ;;
  3253                           
  3254                           	psect	text11
  3255  000F8E                     __ptext11:
  3256                           	opt stack 0
  3257  000F8E                     _UART_buff_put:
  3258                           	opt stack 18
  3259                           
  3260                           ;UART.c: 68: if (_this->count < 100) {
  3261                           
  3262                           ;incstack = 0
  3263  000F8E  EE20 F068          	lfsr	2,104
  3264  000F92  5023               	movf	UART_buff_put@_this,w,c
  3265  000F94  26D9               	addwf	fsr2l,f,c
  3266  000F96  5024               	movf	UART_buff_put@_this+1,w,c
  3267  000F98  22DA               	addwfc	fsr2h,f,c
  3268  000F9A  0E01               	movlw	1
  3269  000F9C  BEDB               	btfsc	plusw2,7,c
  3270  000F9E  D007               	goto	l3692
  3271  000FA0  0E01               	movlw	1
  3272  000FA2  50DB               	movf	plusw2,w,c
  3273  000FA4  E13A               	bnz	l3698
  3274  000FA6  0E64               	movlw	100
  3275  000FA8  5CDE               	subwf	postinc2,w,c
  3276  000FAA  B0D8               	btfsc	status,0,c
  3277  000FAC  D036               	goto	l3698
  3278  000FAE                     l3692:
  3279                           
  3280                           ;UART.c: 69: _this->buf[_this->head] = c;
  3281  000FAE  EE20 F064          	lfsr	2,100
  3282  000FB2  5023               	movf	UART_buff_put@_this,w,c
  3283  000FB4  26D9               	addwf	fsr2l,f,c
  3284  000FB6  5024               	movf	UART_buff_put@_this+1,w,c
  3285  000FB8  22DA               	addwfc	fsr2h,f,c
  3286  000FBA  CFDE F026          	movff	postinc2,??_UART_buff_put
  3287  000FBE  CFDD F027          	movff	postdec2,??_UART_buff_put+1
  3288  000FC2  5026               	movf	??_UART_buff_put,w,c
  3289  000FC4  2423               	addwf	UART_buff_put@_this,w,c
  3290  000FC6  6ED9               	movwf	fsr2l,c
  3291  000FC8  5027               	movf	??_UART_buff_put+1,w,c
  3292  000FCA  2024               	addwfc	UART_buff_put@_this+1,w,c
  3293  000FCC  6EDA               	movwf	fsr2h,c
  3294  000FCE  C025  FFDF         	movff	UART_buff_put@c,indf2
  3295                           
  3296                           ;UART.c: 70: _this->head = UART_buff_modulo_inc(_this->head, 100);
  3297  000FD2  EE20 F064          	lfsr	2,100
  3298  000FD6  5023               	movf	UART_buff_put@_this,w,c
  3299  000FD8  26D9               	addwf	fsr2l,f,c
  3300  000FDA  5024               	movf	UART_buff_put@_this+1,w,c
  3301  000FDC  22DA               	addwfc	fsr2h,f,c
  3302  000FDE  CFDE F01D          	movff	postinc2,UART_buff_modulo_inc@value
  3303  000FE2  CFDD F01E          	movff	postdec2,UART_buff_modulo_inc@value+1
  3304  000FE6  0E00               	movlw	0
  3305  000FE8  6E20               	movwf	UART_buff_modulo_inc@modulus+1,c
  3306  000FEA  0E64               	movlw	100
  3307  000FEC  6E1F               	movwf	UART_buff_modulo_inc@modulus,c
  3308  000FEE  EC0F  F010         	call	_UART_buff_modulo_inc	;wreg free
  3309  000FF2  EE20 F064          	lfsr	2,100
  3310  000FF6  5023               	movf	UART_buff_put@_this,w,c
  3311  000FF8  26D9               	addwf	fsr2l,f,c
  3312  000FFA  5024               	movf	UART_buff_put@_this+1,w,c
  3313  000FFC  22DA               	addwfc	fsr2h,f,c
  3314  000FFE  C01D  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3315  001002  C01E  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3316                           
  3317                           ;UART.c: 71: ++_this->count;
  3318  001006  EE20 F068          	lfsr	2,104
  3319  00100A  5023               	movf	UART_buff_put@_this,w,c
  3320  00100C  26D9               	addwf	fsr2l,f,c
  3321  00100E  5024               	movf	UART_buff_put@_this+1,w,c
  3322  001010  22DA               	addwfc	fsr2h,f,c
  3323  001012  2ADE               	incf	postinc2,f,c
  3324  001014  0E00               	movlw	0
  3325  001016  22DD               	addwfc	postdec2,f,c
  3326                           
  3327                           ;UART.c: 72: } else {
  3328  001018  0012               	return	
  3329  00101A                     l3698:
  3330                           
  3331                           ;UART.c: 73: _this->buf[_this->head] = c;
  3332  00101A  EE20 F064          	lfsr	2,100
  3333  00101E  5023               	movf	UART_buff_put@_this,w,c
  3334  001020  26D9               	addwf	fsr2l,f,c
  3335  001022  5024               	movf	UART_buff_put@_this+1,w,c
  3336  001024  22DA               	addwfc	fsr2h,f,c
  3337  001026  CFDE F026          	movff	postinc2,??_UART_buff_put
  3338  00102A  CFDD F027          	movff	postdec2,??_UART_buff_put+1
  3339  00102E  5026               	movf	??_UART_buff_put,w,c
  3340  001030  2423               	addwf	UART_buff_put@_this,w,c
  3341  001032  6ED9               	movwf	fsr2l,c
  3342  001034  5027               	movf	??_UART_buff_put+1,w,c
  3343  001036  2024               	addwfc	UART_buff_put@_this+1,w,c
  3344  001038  6EDA               	movwf	fsr2h,c
  3345  00103A  C025  FFDF         	movff	UART_buff_put@c,indf2
  3346                           
  3347                           ;UART.c: 74: _this->head = UART_buff_modulo_inc(_this->head, 100);
  3348  00103E  EE20 F064          	lfsr	2,100
  3349  001042  5023               	movf	UART_buff_put@_this,w,c
  3350  001044  26D9               	addwf	fsr2l,f,c
  3351  001046  5024               	movf	UART_buff_put@_this+1,w,c
  3352  001048  22DA               	addwfc	fsr2h,f,c
  3353  00104A  CFDE F01D          	movff	postinc2,UART_buff_modulo_inc@value
  3354  00104E  CFDD F01E          	movff	postdec2,UART_buff_modulo_inc@value+1
  3355  001052  0E00               	movlw	0
  3356  001054  6E20               	movwf	UART_buff_modulo_inc@modulus+1,c
  3357  001056  0E64               	movlw	100
  3358  001058  6E1F               	movwf	UART_buff_modulo_inc@modulus,c
  3359  00105A  EC0F  F010         	call	_UART_buff_modulo_inc	;wreg free
  3360  00105E  EE20 F064          	lfsr	2,100
  3361  001062  5023               	movf	UART_buff_put@_this,w,c
  3362  001064  26D9               	addwf	fsr2l,f,c
  3363  001066  5024               	movf	UART_buff_put@_this+1,w,c
  3364  001068  22DA               	addwfc	fsr2h,f,c
  3365  00106A  C01D  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3366  00106E  C01E  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3367                           
  3368                           ;UART.c: 75: _this->tail = UART_buff_modulo_inc(_this->tail, 100);
  3369  001072  EE20 F066          	lfsr	2,102
  3370  001076  5023               	movf	UART_buff_put@_this,w,c
  3371  001078  26D9               	addwf	fsr2l,f,c
  3372  00107A  5024               	movf	UART_buff_put@_this+1,w,c
  3373  00107C  22DA               	addwfc	fsr2h,f,c
  3374  00107E  CFDE F01D          	movff	postinc2,UART_buff_modulo_inc@value
  3375  001082  CFDD F01E          	movff	postdec2,UART_buff_modulo_inc@value+1
  3376  001086  0E00               	movlw	0
  3377  001088  6E20               	movwf	UART_buff_modulo_inc@modulus+1,c
  3378  00108A  0E64               	movlw	100
  3379  00108C  6E1F               	movwf	UART_buff_modulo_inc@modulus,c
  3380  00108E  EC0F  F010         	call	_UART_buff_modulo_inc	;wreg free
  3381  001092  EE20 F066          	lfsr	2,102
  3382  001096  5023               	movf	UART_buff_put@_this,w,c
  3383  001098  26D9               	addwf	fsr2l,f,c
  3384  00109A  5024               	movf	UART_buff_put@_this+1,w,c
  3385  00109C  22DA               	addwfc	fsr2h,f,c
  3386  00109E  C01D  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3387  0010A2  C01E  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3388  0010A6  0012               	return	
  3389  0010A8                     __end_of_UART_buff_put:
  3390                           	opt stack 0
  3391                           tblptru	equ	0xFF8
  3392                           tblptrh	equ	0xFF7
  3393                           tblptrl	equ	0xFF6
  3394                           tablat	equ	0xFF5
  3395                           prodh	equ	0xFF4
  3396                           prodl	equ	0xFF3
  3397                           intcon	equ	0xFF2
  3398                           postinc0	equ	0xFEE
  3399                           wreg	equ	0xFE8
  3400                           indf1	equ	0xFE7
  3401                           postdec1	equ	0xFE5
  3402                           fsr1h	equ	0xFE2
  3403                           fsr1l	equ	0xFE1
  3404                           indf2	equ	0xFDF
  3405                           postinc2	equ	0xFDE
  3406                           postdec2	equ	0xFDD
  3407                           plusw2	equ	0xFDB
  3408                           fsr2h	equ	0xFDA
  3409                           fsr2l	equ	0xFD9
  3410                           status	equ	0xFD8
  3411                           
  3412 ;; *************** function _UART_buff_get *****************
  3413 ;; Defined at:
  3414 ;;		line 80 in file "UART.c"
  3415 ;; Parameters:    Size  Location     Type
  3416 ;;  _this           2   34[COMRAM] PTR struct UART_ring_buf
  3417 ;;		 -> output_buffer(106), input_buffer(106), 
  3418 ;; Auto vars:     Size  Location     Type
  3419 ;;  c               1   38[COMRAM] unsigned char 
  3420 ;; Return value:  Size  Location     Type
  3421 ;;                  1    wreg      unsigned char 
  3422 ;; Registers used:
  3423 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3424 ;; Tracked objects:
  3425 ;;		On entry : 0/0
  3426 ;;		On exit  : 0/0
  3427 ;;		Unchanged: 0/0
  3428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3429 ;;      Params:         2       0       0       0       0       0       0
  3430 ;;      Locals:         1       0       0       0       0       0       0
  3431 ;;      Temps:          2       0       0       0       0       0       0
  3432 ;;      Totals:         5       0       0       0       0       0       0
  3433 ;;Total ram usage:        5 bytes
  3434 ;; Hardware stack levels used:    1
  3435 ;; Hardware stack levels required when called:    7
  3436 ;; This function calls:
  3437 ;;		_UART_buff_modulo_inc
  3438 ;; This function is called by:
  3439 ;;		_Receive_get
  3440 ;;		_Send_put
  3441 ;; This function uses a non-reentrant model
  3442 ;;
  3443                           
  3444                           	psect	text12
  3445  00178C                     __ptext12:
  3446                           	opt stack 0
  3447  00178C                     _UART_buff_get:
  3448                           	opt stack 20
  3449                           
  3450                           ;UART.c: 81: unsigned char c;
  3451                           ;UART.c: 82: if (_this->count > 0) {
  3452                           
  3453                           ;incstack = 0
  3454  00178C  EE20 F068          	lfsr	2,104
  3455  001790  5023               	movf	UART_buff_get@_this,w,c
  3456  001792  26D9               	addwf	fsr2l,f,c
  3457  001794  5024               	movf	UART_buff_get@_this+1,w,c
  3458  001796  22DA               	addwfc	fsr2h,f,c
  3459  001798  0E01               	movlw	1
  3460  00179A  BEDB               	btfsc	plusw2,7,c
  3461  00179C  D03C               	goto	l3712
  3462  00179E  0E01               	movlw	1
  3463  0017A0  50DB               	movf	plusw2,w,c
  3464  0017A2  E103               	bnz	u2270
  3465  0017A4  04DE               	decf	postinc2,w,c
  3466  0017A6  A0D8               	btfss	status,0,c
  3467  0017A8  D036               	goto	l3712
  3468  0017AA                     u2270:
  3469                           
  3470                           ;UART.c: 83: c = _this->buf[_this->tail];
  3471  0017AA  EE20 F066          	lfsr	2,102
  3472  0017AE  5023               	movf	UART_buff_get@_this,w,c
  3473  0017B0  26D9               	addwf	fsr2l,f,c
  3474  0017B2  5024               	movf	UART_buff_get@_this+1,w,c
  3475  0017B4  22DA               	addwfc	fsr2h,f,c
  3476  0017B6  CFDE F025          	movff	postinc2,??_UART_buff_get
  3477  0017BA  CFDD F026          	movff	postdec2,??_UART_buff_get+1
  3478  0017BE  5025               	movf	??_UART_buff_get,w,c
  3479  0017C0  2423               	addwf	UART_buff_get@_this,w,c
  3480  0017C2  6ED9               	movwf	fsr2l,c
  3481  0017C4  5026               	movf	??_UART_buff_get+1,w,c
  3482  0017C6  2024               	addwfc	UART_buff_get@_this+1,w,c
  3483  0017C8  6EDA               	movwf	fsr2h,c
  3484  0017CA  50DF               	movf	indf2,w,c
  3485  0017CC  6E27               	movwf	UART_buff_get@c,c
  3486                           
  3487                           ;UART.c: 84: _this->tail = UART_buff_modulo_inc(_this->tail, 100);
  3488  0017CE  EE20 F066          	lfsr	2,102
  3489  0017D2  5023               	movf	UART_buff_get@_this,w,c
  3490  0017D4  26D9               	addwf	fsr2l,f,c
  3491  0017D6  5024               	movf	UART_buff_get@_this+1,w,c
  3492  0017D8  22DA               	addwfc	fsr2h,f,c
  3493  0017DA  CFDE F01D          	movff	postinc2,UART_buff_modulo_inc@value
  3494  0017DE  CFDD F01E          	movff	postdec2,UART_buff_modulo_inc@value+1
  3495  0017E2  0E00               	movlw	0
  3496  0017E4  6E20               	movwf	UART_buff_modulo_inc@modulus+1,c
  3497  0017E6  0E64               	movlw	100
  3498  0017E8  6E1F               	movwf	UART_buff_modulo_inc@modulus,c
  3499  0017EA  EC0F  F010         	call	_UART_buff_modulo_inc	;wreg free
  3500  0017EE  EE20 F066          	lfsr	2,102
  3501  0017F2  5023               	movf	UART_buff_get@_this,w,c
  3502  0017F4  26D9               	addwf	fsr2l,f,c
  3503  0017F6  5024               	movf	UART_buff_get@_this+1,w,c
  3504  0017F8  22DA               	addwfc	fsr2h,f,c
  3505  0017FA  C01D  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3506  0017FE  C01E  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3507                           
  3508                           ;UART.c: 85: --_this->count;
  3509  001802  EE20 F068          	lfsr	2,104
  3510  001806  5023               	movf	UART_buff_get@_this,w,c
  3511  001808  26D9               	addwf	fsr2l,f,c
  3512  00180A  5024               	movf	UART_buff_get@_this+1,w,c
  3513  00180C  22DA               	addwfc	fsr2h,f,c
  3514  00180E  06DE               	decf	postinc2,f,c
  3515  001810  0E00               	movlw	0
  3516  001812  5ADD               	subwfb	postdec2,f,c
  3517                           
  3518                           ;UART.c: 86: } else {
  3519  001814  D002               	goto	l605
  3520  001816                     l3712:
  3521                           
  3522                           ;UART.c: 87: c = 0;
  3523  001816  0E00               	movlw	0
  3524  001818  6E27               	movwf	UART_buff_get@c,c
  3525  00181A                     l605:
  3526                           
  3527                           ;UART.c: 88: }
  3528                           ;UART.c: 89: return (c);
  3529  00181A  5027               	movf	UART_buff_get@c,w,c
  3530  00181C  0012               	return	
  3531  00181E                     __end_of_UART_buff_get:
  3532                           	opt stack 0
  3533                           tblptru	equ	0xFF8
  3534                           tblptrh	equ	0xFF7
  3535                           tblptrl	equ	0xFF6
  3536                           tablat	equ	0xFF5
  3537                           prodh	equ	0xFF4
  3538                           prodl	equ	0xFF3
  3539                           intcon	equ	0xFF2
  3540                           postinc0	equ	0xFEE
  3541                           wreg	equ	0xFE8
  3542                           indf1	equ	0xFE7
  3543                           postdec1	equ	0xFE5
  3544                           fsr1h	equ	0xFE2
  3545                           fsr1l	equ	0xFE1
  3546                           indf2	equ	0xFDF
  3547                           postinc2	equ	0xFDE
  3548                           postdec2	equ	0xFDD
  3549                           plusw2	equ	0xFDB
  3550                           fsr2h	equ	0xFDA
  3551                           fsr2l	equ	0xFD9
  3552                           status	equ	0xFD8
  3553                           
  3554 ;; *************** function _UART_buff_modulo_inc *****************
  3555 ;; Defined at:
  3556 ;;		line 105 in file "UART.c"
  3557 ;; Parameters:    Size  Location     Type
  3558 ;;  value           2   28[COMRAM] const unsigned int 
  3559 ;;  modulus         2   30[COMRAM] const unsigned int 
  3560 ;; Auto vars:     Size  Location     Type
  3561 ;;  my_value        2   32[COMRAM] unsigned int 
  3562 ;; Return value:  Size  Location     Type
  3563 ;;                  2   28[COMRAM] unsigned int 
  3564 ;; Registers used:
  3565 ;;		wreg, status,2, status,0
  3566 ;; Tracked objects:
  3567 ;;		On entry : 0/0
  3568 ;;		On exit  : 0/0
  3569 ;;		Unchanged: 0/0
  3570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3571 ;;      Params:         4       0       0       0       0       0       0
  3572 ;;      Locals:         2       0       0       0       0       0       0
  3573 ;;      Temps:          0       0       0       0       0       0       0
  3574 ;;      Totals:         6       0       0       0       0       0       0
  3575 ;;Total ram usage:        6 bytes
  3576 ;; Hardware stack levels used:    1
  3577 ;; Hardware stack levels required when called:    6
  3578 ;; This function calls:
  3579 ;;		Nothing
  3580 ;; This function is called by:
  3581 ;;		_UART_buff_put
  3582 ;;		_UART_buff_get
  3583 ;; This function uses a non-reentrant model
  3584 ;;
  3585                           
  3586                           	psect	text13
  3587  00201E                     __ptext13:
  3588                           	opt stack 0
  3589  00201E                     _UART_buff_modulo_inc:
  3590                           	opt stack 20
  3591                           
  3592                           ;UART.c: 106: unsigned int my_value = value + 1;
  3593                           
  3594                           ;incstack = 0
  3595  00201E  0E01               	movlw	1
  3596  002020  241D               	addwf	UART_buff_modulo_inc@value,w,c
  3597  002022  6E21               	movwf	UART_buff_modulo_inc@my_value,c
  3598  002024  0E00               	movlw	0
  3599  002026  201E               	addwfc	UART_buff_modulo_inc@value+1,w,c
  3600  002028  6E22               	movwf	UART_buff_modulo_inc@my_value+1,c
  3601                           
  3602                           ;UART.c: 107: if (my_value >= modulus) {
  3603  00202A  501F               	movf	UART_buff_modulo_inc@modulus,w,c
  3604  00202C  5C21               	subwf	UART_buff_modulo_inc@my_value,w,c
  3605  00202E  5020               	movf	UART_buff_modulo_inc@modulus+1,w,c
  3606  002030  5822               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  3607  002032  A0D8               	btfss	status,0,c
  3608  002034  D004               	goto	l3686
  3609                           
  3610                           ;UART.c: 108: my_value = 0;
  3611  002036  0E00               	movlw	0
  3612  002038  6E22               	movwf	UART_buff_modulo_inc@my_value+1,c
  3613  00203A  0E00               	movlw	0
  3614  00203C  6E21               	movwf	UART_buff_modulo_inc@my_value,c
  3615  00203E                     l3686:
  3616                           
  3617                           ;UART.c: 109: }
  3618                           ;UART.c: 110: return (my_value);
  3619  00203E  C021  F01D         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  3620  002042  C022  F01E         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  3621  002046  0012               	return	
  3622  002048                     __end_of_UART_buff_modulo_inc:
  3623                           	opt stack 0
  3624                           tblptru	equ	0xFF8
  3625                           tblptrh	equ	0xFF7
  3626                           tblptrl	equ	0xFF6
  3627                           tablat	equ	0xFF5
  3628                           prodh	equ	0xFF4
  3629                           prodl	equ	0xFF3
  3630                           intcon	equ	0xFF2
  3631                           postinc0	equ	0xFEE
  3632                           wreg	equ	0xFE8
  3633                           indf1	equ	0xFE7
  3634                           postdec1	equ	0xFE5
  3635                           fsr1h	equ	0xFE2
  3636                           fsr1l	equ	0xFE1
  3637                           indf2	equ	0xFDF
  3638                           postinc2	equ	0xFDE
  3639                           postdec2	equ	0xFDD
  3640                           plusw2	equ	0xFDB
  3641                           fsr2h	equ	0xFDA
  3642                           fsr2l	equ	0xFD9
  3643                           status	equ	0xFD8
  3644                           
  3645 ;; *************** function _CRC8 *****************
  3646 ;; Defined at:
  3647 ;;		line 21 in file "CarCom.c"
  3648 ;; Parameters:    Size  Location     Type
  3649 ;;  data            2   28[COMRAM] PTR const unsigned char 
  3650 ;;		 -> ProcessArray(30), sendData@SendArray(30), 
  3651 ;;  len             1   30[COMRAM] unsigned char 
  3652 ;; Auto vars:     Size  Location     Type
  3653 ;;  sum             1   31[COMRAM] unsigned char 
  3654 ;;  tempI           1   33[COMRAM] unsigned char 
  3655 ;;  extract         1   32[COMRAM] unsigned char 
  3656 ;;  crc             1   34[COMRAM] unsigned char 
  3657 ;; Return value:  Size  Location     Type
  3658 ;;                  1    wreg      unsigned char 
  3659 ;; Registers used:
  3660 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3661 ;; Tracked objects:
  3662 ;;		On entry : 0/0
  3663 ;;		On exit  : 0/0
  3664 ;;		Unchanged: 0/0
  3665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3666 ;;      Params:         3       0       0       0       0       0       0
  3667 ;;      Locals:         4       0       0       0       0       0       0
  3668 ;;      Temps:          0       0       0       0       0       0       0
  3669 ;;      Totals:         7       0       0       0       0       0       0
  3670 ;;Total ram usage:        7 bytes
  3671 ;; Hardware stack levels used:    1
  3672 ;; Hardware stack levels required when called:    6
  3673 ;; This function calls:
  3674 ;;		Nothing
  3675 ;; This function is called by:
  3676 ;;		_sendData
  3677 ;;		_receiveData
  3678 ;; This function uses a non-reentrant model
  3679 ;;
  3680                           
  3681                           	psect	text14
  3682  001D6A                     __ptext14:
  3683                           	opt stack 0
  3684  001D6A                     _CRC8:
  3685                           	opt stack 20
  3686                           
  3687                           ;CarCom.c: 22: unsigned char crc = 0x00;
  3688                           
  3689                           ;incstack = 0
  3690  001D6A  0E00               	movlw	0
  3691  001D6C  6E23               	movwf	CRC8@crc,c
  3692                           
  3693                           ;CarCom.c: 23: while (len--) {
  3694  001D6E  D01C               	goto	l3760
  3695  001D70                     l3744:
  3696                           
  3697                           ;CarCom.c: 24: unsigned char extract = *data++;
  3698  001D70  C01D  FFD9         	movff	CRC8@data,fsr2l
  3699  001D74  C01E  FFDA         	movff	CRC8@data+1,fsr2h
  3700  001D78  50DF               	movf	indf2,w,c
  3701  001D7A  6E21               	movwf	CRC8@extract,c
  3702  001D7C  4A1D               	infsnz	CRC8@data,f,c
  3703  001D7E  2A1E               	incf	CRC8@data+1,f,c
  3704                           
  3705                           ;CarCom.c: 25: unsigned char tempI;
  3706                           ;CarCom.c: 26: for (tempI = 8; tempI; tempI--) {
  3707  001D80  0E08               	movlw	8
  3708  001D82  6E22               	movwf	CRC8@tempI,c
  3709  001D84  D00E               	goto	l3758
  3710  001D86                     l3750:
  3711                           
  3712                           ;CarCom.c: 27: unsigned char sum = (crc ^ extract) & 0x01;
  3713  001D86  5023               	movf	CRC8@crc,w,c
  3714  001D88  1821               	xorwf	CRC8@extract,w,c
  3715  001D8A  0B01               	andlw	1
  3716  001D8C  6E20               	movwf	CRC8@sum,c
  3717                           
  3718                           ;CarCom.c: 28: crc >>= 1;
  3719  001D8E  90D8               	bcf	status,0,c
  3720  001D90  3223               	rrcf	CRC8@crc,f,c
  3721                           
  3722                           ;CarCom.c: 29: if (sum) {
  3723  001D92  5020               	movf	CRC8@sum,w,c
  3724  001D94  B4D8               	btfsc	status,2,c
  3725  001D96  D002               	goto	l768
  3726                           
  3727                           ;CarCom.c: 30: crc ^= 0x8C;
  3728  001D98  0E8C               	movlw	140
  3729  001D9A  1A23               	xorwf	CRC8@crc,f,c
  3730  001D9C                     l768:
  3731                           
  3732                           ;CarCom.c: 31: }
  3733                           ;CarCom.c: 32: extract >>= 1;
  3734  001D9C  90D8               	bcf	status,0,c
  3735  001D9E  3221               	rrcf	CRC8@extract,f,c
  3736  001DA0  0622               	decf	CRC8@tempI,f,c
  3737  001DA2                     l3758:
  3738  001DA2  5022               	movf	CRC8@tempI,w,c
  3739  001DA4  A4D8               	btfss	status,2,c
  3740  001DA6  D7EF               	goto	l3750
  3741  001DA8                     l3760:
  3742  001DA8  061F               	decf	CRC8@len,f,c
  3743  001DAA  281F               	incf	CRC8@len,w,c
  3744  001DAC  A4D8               	btfss	status,2,c
  3745  001DAE  D7E0               	goto	l3744
  3746                           
  3747                           ;CarCom.c: 33: }
  3748                           ;CarCom.c: 34: }
  3749                           ;CarCom.c: 35: return crc;
  3750  001DB0  5023               	movf	CRC8@crc,w,c
  3751  001DB2  0012               	return	
  3752  001DB4                     __end_of_CRC8:
  3753                           	opt stack 0
  3754                           tblptru	equ	0xFF8
  3755                           tblptrh	equ	0xFF7
  3756                           tblptrl	equ	0xFF6
  3757                           tablat	equ	0xFF5
  3758                           prodh	equ	0xFF4
  3759                           prodl	equ	0xFF3
  3760                           intcon	equ	0xFF2
  3761                           postinc0	equ	0xFEE
  3762                           wreg	equ	0xFE8
  3763                           indf1	equ	0xFE7
  3764                           postdec1	equ	0xFE5
  3765                           fsr1h	equ	0xFE2
  3766                           fsr1l	equ	0xFE1
  3767                           indf2	equ	0xFDF
  3768                           postinc2	equ	0xFDE
  3769                           postdec2	equ	0xFDD
  3770                           plusw2	equ	0xFDB
  3771                           fsr2h	equ	0xFDA
  3772                           fsr2l	equ	0xFD9
  3773                           status	equ	0xFD8
  3774                           
  3775 ;; *************** function _SetDataDict *****************
  3776 ;; Defined at:
  3777 ;;		line 32 in file "CarDataDictionary.c"
  3778 ;; Parameters:    Size  Location     Type
  3779 ;;  DataTable       1    wreg     unsigned char 
  3780 ;;  DataTableInd    1   28[COMRAM] unsigned char 
  3781 ;;  DataArray       2   29[COMRAM] PTR unsigned char 
  3782 ;;		 -> ComController@DataRecived(4), updateComms@DataGet(2), 
  3783 ;;  numbofbytes     1   31[COMRAM] unsigned char 
  3784 ;; Auto vars:     Size  Location     Type
  3785 ;;  DataTable       1   33[COMRAM] unsigned char 
  3786 ;;  ReturnCounte    1   35[COMRAM] unsigned char 
  3787 ;;  DataCount       1   34[COMRAM] unsigned char 
  3788 ;;  Error           1   32[COMRAM] unsigned char 
  3789 ;; Return value:  Size  Location     Type
  3790 ;;                  1    wreg      unsigned char 
  3791 ;; Registers used:
  3792 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3793 ;; Tracked objects:
  3794 ;;		On entry : 0/0
  3795 ;;		On exit  : 0/0
  3796 ;;		Unchanged: 0/0
  3797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3798 ;;      Params:         4       0       0       0       0       0       0
  3799 ;;      Locals:         4       0       0       0       0       0       0
  3800 ;;      Temps:          0       0       0       0       0       0       0
  3801 ;;      Totals:         8       0       0       0       0       0       0
  3802 ;;Total ram usage:        8 bytes
  3803 ;; Hardware stack levels used:    1
  3804 ;; Hardware stack levels required when called:    6
  3805 ;; This function calls:
  3806 ;;		Nothing
  3807 ;; This function is called by:
  3808 ;;		_updateComms
  3809 ;;		_ComController
  3810 ;; This function uses a non-reentrant model
  3811 ;;
  3812                           
  3813                           	psect	text15
  3814  00165C                     __ptext15:
  3815                           	opt stack 0
  3816  00165C                     _SetDataDict:
  3817                           	opt stack 21
  3818                           
  3819                           ;incstack = 0
  3820                           ;SetDataDict@DataTable stored from wreg
  3821  00165C  6E22               	movwf	SetDataDict@DataTable,c
  3822                           
  3823                           ;CarDataDictionary.c: 33: unsigned char Error = 0;
  3824  00165E  0E00               	movlw	0
  3825  001660  6E21               	movwf	SetDataDict@Error,c
  3826                           
  3827                           ;CarDataDictionary.c: 34: unsigned char DataCount = 0;
  3828  001662  0E00               	movlw	0
  3829  001664  6E23               	movwf	SetDataDict@DataCount,c
  3830                           
  3831                           ;CarDataDictionary.c: 35: unsigned char ReturnCounter = 0;
  3832  001666  0E00               	movlw	0
  3833  001668  6E24               	movwf	SetDataDict@ReturnCounter,c
  3834                           
  3835                           ;CarDataDictionary.c: 36: switch(DataTable){
  3836  00166A  D03C               	goto	l3888
  3837  00166C                     l3868:
  3838                           
  3839                           ;CarDataDictionary.c: 38: DataCount = DataTableIndex + numbofbytes;
  3840  00166C  501D               	movf	SetDataDict@DataTableIndex,w,c
  3841  00166E  2420               	addwf	SetDataDict@numbofbytes,w,c
  3842  001670  6E23               	movwf	SetDataDict@DataCount,c
  3843  001672  D014               	goto	l3876
  3844  001674                     l3870:
  3845                           
  3846                           ;CarDataDictionary.c: 40: DataTableArrayOne[DataTableIndex] = DataArray[ReturnCounter];
  3847  001674  5024               	movf	SetDataDict@ReturnCounter,w,c
  3848  001676  0D01               	mullw	1
  3849  001678  50F3               	movf	prodl,w,c
  3850  00167A  241E               	addwf	SetDataDict@DataArray,w,c
  3851  00167C  6ED9               	movwf	fsr2l,c
  3852  00167E  50F4               	movf	prodh,w,c
  3853  001680  201F               	addwfc	SetDataDict@DataArray+1,w,c
  3854  001682  6EDA               	movwf	fsr2h,c
  3855  001684  501D               	movf	SetDataDict@DataTableIndex,w,c
  3856  001686  0D01               	mullw	1
  3857  001688  0EEB               	movlw	low _DataTableArrayOne
  3858  00168A  24F3               	addwf	prodl,w,c
  3859  00168C  6EE1               	movwf	fsr1l,c
  3860  00168E  0E00               	movlw	high _DataTableArrayOne
  3861  001690  20F4               	addwfc	prodh,w,c
  3862  001692  6EE2               	movwf	fsr1h,c
  3863  001694  CFDF FFE7          	movff	indf2,indf1
  3864                           
  3865                           ;CarDataDictionary.c: 41: ReturnCounter++;
  3866  001698  2A24               	incf	SetDataDict@ReturnCounter,f,c
  3867  00169A  2A1D               	incf	SetDataDict@DataTableIndex,f,c
  3868  00169C                     l3876:
  3869  00169C  5023               	movf	SetDataDict@DataCount,w,c
  3870  00169E  5C1D               	subwf	SetDataDict@DataTableIndex,w,c
  3871  0016A0  B0D8               	btfsc	status,0,c
  3872  0016A2  0012               	return	
  3873  0016A4  D7E7               	goto	l3870
  3874  0016A6                     l3878:
  3875                           
  3876                           ;CarDataDictionary.c: 45: DataCount = DataTableIndex + numbofbytes;
  3877  0016A6  501D               	movf	SetDataDict@DataTableIndex,w,c
  3878  0016A8  2420               	addwf	SetDataDict@numbofbytes,w,c
  3879  0016AA  6E23               	movwf	SetDataDict@DataCount,c
  3880  0016AC  D014               	goto	l3886
  3881  0016AE                     l3880:
  3882                           
  3883                           ;CarDataDictionary.c: 47: DataTableArrayFour[DataTableIndex] = DataArray[ReturnCounter];
  3884  0016AE  5024               	movf	SetDataDict@ReturnCounter,w,c
  3885  0016B0  0D01               	mullw	1
  3886  0016B2  50F3               	movf	prodl,w,c
  3887  0016B4  241E               	addwf	SetDataDict@DataArray,w,c
  3888  0016B6  6ED9               	movwf	fsr2l,c
  3889  0016B8  50F4               	movf	prodh,w,c
  3890  0016BA  201F               	addwfc	SetDataDict@DataArray+1,w,c
  3891  0016BC  6EDA               	movwf	fsr2h,c
  3892  0016BE  501D               	movf	SetDataDict@DataTableIndex,w,c
  3893  0016C0  0D01               	mullw	1
  3894  0016C2  0E2D               	movlw	low _DataTableArrayFour
  3895  0016C4  24F3               	addwf	prodl,w,c
  3896  0016C6  6EE1               	movwf	fsr1l,c
  3897  0016C8  0E00               	movlw	high _DataTableArrayFour
  3898  0016CA  20F4               	addwfc	prodh,w,c
  3899  0016CC  6EE2               	movwf	fsr1h,c
  3900  0016CE  CFDF FFE7          	movff	indf2,indf1
  3901                           
  3902                           ;CarDataDictionary.c: 48: ReturnCounter++;
  3903  0016D2  2A24               	incf	SetDataDict@ReturnCounter,f,c
  3904  0016D4  2A1D               	incf	SetDataDict@DataTableIndex,f,c
  3905  0016D6                     l3886:
  3906  0016D6  5023               	movf	SetDataDict@DataCount,w,c
  3907  0016D8  5C1D               	subwf	SetDataDict@DataTableIndex,w,c
  3908  0016DA  B0D8               	btfsc	status,0,c
  3909  0016DC  0012               	return	
  3910  0016DE  D7E7               	goto	l3880
  3911  0016E0                     l897:
  3912                           
  3913                           ;CarDataDictionary.c: 52: Error = -1;
  3914  0016E0  6821               	setf	SetDataDict@Error,c
  3915                           
  3916                           ;CarDataDictionary.c: 53: }
  3917  0016E2  0012               	return	
  3918  0016E4                     l3888:
  3919  0016E4  5022               	movf	SetDataDict@DataTable,w,c
  3920                           
  3921                           ; Switch size 1, requested type "space"
  3922                           ; Number of cases is 2, Range of values is 0 to 4
  3923                           ; switch strategies available:
  3924                           ; Name         Instructions Cycles
  3925                           ; simple_byte            7     4 (average)
  3926                           ;	Chosen strategy is simple_byte
  3927  0016E6  0A00               	xorlw	0	; case 0
  3928  0016E8  B4D8               	btfsc	status,2,c
  3929  0016EA  D7C0               	goto	l3868
  3930  0016EC  0A04               	xorlw	4	; case 4
  3931  0016EE  B4D8               	btfsc	status,2,c
  3932  0016F0  D7DA               	goto	l3878
  3933  0016F2  D7F6               	goto	l897
  3934  0016F4                     __end_of_SetDataDict:
  3935                           	opt stack 0
  3936                           tblptru	equ	0xFF8
  3937                           tblptrh	equ	0xFF7
  3938                           tblptrl	equ	0xFF6
  3939                           tablat	equ	0xFF5
  3940                           prodh	equ	0xFF4
  3941                           prodl	equ	0xFF3
  3942                           intcon	equ	0xFF2
  3943                           postinc0	equ	0xFEE
  3944                           wreg	equ	0xFE8
  3945                           indf1	equ	0xFE7
  3946                           postdec1	equ	0xFE5
  3947                           fsr1h	equ	0xFE2
  3948                           fsr1l	equ	0xFE1
  3949                           indf2	equ	0xFDF
  3950                           postinc2	equ	0xFDE
  3951                           postdec2	equ	0xFDD
  3952                           plusw2	equ	0xFDB
  3953                           fsr2h	equ	0xFDA
  3954                           fsr2l	equ	0xFD9
  3955                           status	equ	0xFD8
  3956                           
  3957 ;; *************** function _GetDataDict *****************
  3958 ;; Defined at:
  3959 ;;		line 7 in file "CarDataDictionary.c"
  3960 ;; Parameters:    Size  Location     Type
  3961 ;;  DataTable       1    wreg     unsigned char 
  3962 ;;  DataTableInd    1   28[COMRAM] unsigned char 
  3963 ;;  DataArray       2   29[COMRAM] PTR unsigned char 
  3964 ;;		 -> ComController@DataToSend_1656(4), ComController@DataToSend(4), updateComms@DataGet(2), 
  3965 ;;  numbofbytes     1   31[COMRAM] unsigned char 
  3966 ;; Auto vars:     Size  Location     Type
  3967 ;;  DataTable       1   33[COMRAM] unsigned char 
  3968 ;;  ReturnCounte    1   35[COMRAM] unsigned char 
  3969 ;;  DataCount       1   34[COMRAM] unsigned char 
  3970 ;;  Error           1   32[COMRAM] unsigned char 
  3971 ;; Return value:  Size  Location     Type
  3972 ;;                  1    wreg      unsigned char 
  3973 ;; Registers used:
  3974 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3975 ;; Tracked objects:
  3976 ;;		On entry : 0/0
  3977 ;;		On exit  : 0/0
  3978 ;;		Unchanged: 0/0
  3979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3980 ;;      Params:         4       0       0       0       0       0       0
  3981 ;;      Locals:         4       0       0       0       0       0       0
  3982 ;;      Temps:          0       0       0       0       0       0       0
  3983 ;;      Totals:         8       0       0       0       0       0       0
  3984 ;;Total ram usage:        8 bytes
  3985 ;; Hardware stack levels used:    1
  3986 ;; Hardware stack levels required when called:    6
  3987 ;; This function calls:
  3988 ;;		Nothing
  3989 ;; This function is called by:
  3990 ;;		_updateComms
  3991 ;;		_ComController
  3992 ;; This function uses a non-reentrant model
  3993 ;;
  3994                           
  3995                           	psect	text16
  3996  0016F4                     __ptext16:
  3997                           	opt stack 0
  3998  0016F4                     _GetDataDict:
  3999                           	opt stack 21
  4000                           
  4001                           ;incstack = 0
  4002                           ;GetDataDict@DataTable stored from wreg
  4003  0016F4  6E22               	movwf	GetDataDict@DataTable,c
  4004                           
  4005                           ;CarDataDictionary.c: 8: unsigned char Error = 0;
  4006  0016F6  0E00               	movlw	0
  4007  0016F8  6E21               	movwf	GetDataDict@Error,c
  4008                           
  4009                           ;CarDataDictionary.c: 9: unsigned char DataCount = 0;
  4010  0016FA  0E00               	movlw	0
  4011  0016FC  6E23               	movwf	GetDataDict@DataCount,c
  4012                           
  4013                           ;CarDataDictionary.c: 10: unsigned char ReturnCounter = 0;
  4014  0016FE  0E00               	movlw	0
  4015  001700  6E24               	movwf	GetDataDict@ReturnCounter,c
  4016                           
  4017                           ;CarDataDictionary.c: 11: switch(DataTable){
  4018  001702  D03C               	goto	l3864
  4019  001704                     l3844:
  4020                           
  4021                           ;CarDataDictionary.c: 13: DataCount = DataTableIndex + numbofbytes;
  4022  001704  501D               	movf	GetDataDict@DataTableIndex,w,c
  4023  001706  2420               	addwf	GetDataDict@numbofbytes,w,c
  4024  001708  6E23               	movwf	GetDataDict@DataCount,c
  4025  00170A  D014               	goto	l3852
  4026  00170C                     l3846:
  4027                           
  4028                           ;CarDataDictionary.c: 15: DataArray[ReturnCounter] = DataTableArrayOne[DataTableIndex];
  4029  00170C  501D               	movf	GetDataDict@DataTableIndex,w,c
  4030  00170E  0D01               	mullw	1
  4031  001710  0EEB               	movlw	low _DataTableArrayOne
  4032  001712  24F3               	addwf	prodl,w,c
  4033  001714  6ED9               	movwf	fsr2l,c
  4034  001716  0E00               	movlw	high _DataTableArrayOne
  4035  001718  20F4               	addwfc	prodh,w,c
  4036  00171A  6EDA               	movwf	fsr2h,c
  4037  00171C  5024               	movf	GetDataDict@ReturnCounter,w,c
  4038  00171E  0D01               	mullw	1
  4039  001720  50F3               	movf	prodl,w,c
  4040  001722  241E               	addwf	GetDataDict@DataArray,w,c
  4041  001724  6EE1               	movwf	fsr1l,c
  4042  001726  50F4               	movf	prodh,w,c
  4043  001728  201F               	addwfc	GetDataDict@DataArray+1,w,c
  4044  00172A  6EE2               	movwf	fsr1h,c
  4045  00172C  CFDF FFE7          	movff	indf2,indf1
  4046                           
  4047                           ;CarDataDictionary.c: 16: ReturnCounter++;
  4048  001730  2A24               	incf	GetDataDict@ReturnCounter,f,c
  4049  001732  2A1D               	incf	GetDataDict@DataTableIndex,f,c
  4050  001734                     l3852:
  4051  001734  5023               	movf	GetDataDict@DataCount,w,c
  4052  001736  5C1D               	subwf	GetDataDict@DataTableIndex,w,c
  4053  001738  B0D8               	btfsc	status,0,c
  4054  00173A  0012               	return	
  4055  00173C  D7E7               	goto	l3846
  4056  00173E                     l3854:
  4057                           
  4058                           ;CarDataDictionary.c: 20: DataCount = DataTableIndex + numbofbytes;
  4059  00173E  501D               	movf	GetDataDict@DataTableIndex,w,c
  4060  001740  2420               	addwf	GetDataDict@numbofbytes,w,c
  4061  001742  6E23               	movwf	GetDataDict@DataCount,c
  4062  001744  D014               	goto	l3862
  4063  001746                     l3856:
  4064                           
  4065                           ;CarDataDictionary.c: 22: DataArray[ReturnCounter] = DataTableArrayFour[DataTableIndex];
  4066  001746  501D               	movf	GetDataDict@DataTableIndex,w,c
  4067  001748  0D01               	mullw	1
  4068  00174A  0E2D               	movlw	low _DataTableArrayFour
  4069  00174C  24F3               	addwf	prodl,w,c
  4070  00174E  6ED9               	movwf	fsr2l,c
  4071  001750  0E00               	movlw	high _DataTableArrayFour
  4072  001752  20F4               	addwfc	prodh,w,c
  4073  001754  6EDA               	movwf	fsr2h,c
  4074  001756  5024               	movf	GetDataDict@ReturnCounter,w,c
  4075  001758  0D01               	mullw	1
  4076  00175A  50F3               	movf	prodl,w,c
  4077  00175C  241E               	addwf	GetDataDict@DataArray,w,c
  4078  00175E  6EE1               	movwf	fsr1l,c
  4079  001760  50F4               	movf	prodh,w,c
  4080  001762  201F               	addwfc	GetDataDict@DataArray+1,w,c
  4081  001764  6EE2               	movwf	fsr1h,c
  4082  001766  CFDF FFE7          	movff	indf2,indf1
  4083                           
  4084                           ;CarDataDictionary.c: 23: ReturnCounter++;
  4085  00176A  2A24               	incf	GetDataDict@ReturnCounter,f,c
  4086  00176C  2A1D               	incf	GetDataDict@DataTableIndex,f,c
  4087  00176E                     l3862:
  4088  00176E  5023               	movf	GetDataDict@DataCount,w,c
  4089  001770  5C1D               	subwf	GetDataDict@DataTableIndex,w,c
  4090  001772  B0D8               	btfsc	status,0,c
  4091  001774  0012               	return	
  4092  001776  D7E7               	goto	l3856
  4093  001778                     l883:
  4094                           
  4095                           ;CarDataDictionary.c: 27: Error = -1;
  4096  001778  6821               	setf	GetDataDict@Error,c
  4097                           
  4098                           ;CarDataDictionary.c: 28: }
  4099  00177A  0012               	return	
  4100  00177C                     l3864:
  4101  00177C  5022               	movf	GetDataDict@DataTable,w,c
  4102                           
  4103                           ; Switch size 1, requested type "space"
  4104                           ; Number of cases is 2, Range of values is 0 to 4
  4105                           ; switch strategies available:
  4106                           ; Name         Instructions Cycles
  4107                           ; simple_byte            7     4 (average)
  4108                           ;	Chosen strategy is simple_byte
  4109  00177E  0A00               	xorlw	0	; case 0
  4110  001780  B4D8               	btfsc	status,2,c
  4111  001782  D7C0               	goto	l3844
  4112  001784  0A04               	xorlw	4	; case 4
  4113  001786  B4D8               	btfsc	status,2,c
  4114  001788  D7DA               	goto	l3854
  4115  00178A  D7F6               	goto	l883
  4116  00178C                     __end_of_GetDataDict:
  4117                           	opt stack 0
  4118                           tblptru	equ	0xFF8
  4119                           tblptrh	equ	0xFF7
  4120                           tblptrl	equ	0xFF6
  4121                           tablat	equ	0xFF5
  4122                           prodh	equ	0xFF4
  4123                           prodl	equ	0xFF3
  4124                           intcon	equ	0xFF2
  4125                           postinc0	equ	0xFEE
  4126                           wreg	equ	0xFE8
  4127                           indf1	equ	0xFE7
  4128                           postdec1	equ	0xFE5
  4129                           fsr1h	equ	0xFE2
  4130                           fsr1l	equ	0xFE1
  4131                           indf2	equ	0xFDF
  4132                           postinc2	equ	0xFDE
  4133                           postdec2	equ	0xFDD
  4134                           plusw2	equ	0xFDB
  4135                           fsr2h	equ	0xFDA
  4136                           fsr2l	equ	0xFD9
  4137                           status	equ	0xFD8
  4138                           
  4139 ;; *************** function _ClearBuffer *****************
  4140 ;; Defined at:
  4141 ;;		line 159 in file "UART.c"
  4142 ;; Parameters:    Size  Location     Type
  4143 ;;		None
  4144 ;; Auto vars:     Size  Location     Type
  4145 ;;		None
  4146 ;; Return value:  Size  Location     Type
  4147 ;;                  1    wreg      void 
  4148 ;; Registers used:
  4149 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4150 ;; Tracked objects:
  4151 ;;		On entry : 0/0
  4152 ;;		On exit  : 0/0
  4153 ;;		Unchanged: 0/0
  4154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4155 ;;      Params:         0       0       0       0       0       0       0
  4156 ;;      Locals:         0       0       0       0       0       0       0
  4157 ;;      Temps:          0       0       0       0       0       0       0
  4158 ;;      Totals:         0       0       0       0       0       0       0
  4159 ;;Total ram usage:        0 bytes
  4160 ;; Hardware stack levels used:    1
  4161 ;; Hardware stack levels required when called:    8
  4162 ;; This function calls:
  4163 ;;		_UART_buff_flush
  4164 ;; This function is called by:
  4165 ;;		_receiveData
  4166 ;; This function uses a non-reentrant model
  4167 ;;
  4168                           
  4169                           	psect	text17
  4170  00217C                     __ptext17:
  4171                           	opt stack 0
  4172  00217C                     _ClearBuffer:
  4173                           	opt stack 20
  4174                           
  4175                           ;UART.c: 160: UART_buff_flush(&input_buffer, 1);
  4176                           
  4177                           ;incstack = 0
  4178  00217C  0E3C               	movlw	low _input_buffer
  4179  00217E  6E25               	movwf	UART_buff_flush@_this,c
  4180  002180  0E01               	movlw	high _input_buffer
  4181  002182  6E26               	movwf	UART_buff_flush@_this+1,c
  4182  002184  0E00               	movlw	0
  4183  002186  6E28               	movwf	UART_buff_flush@clearBuffer+1,c
  4184  002188  0E01               	movlw	1
  4185  00218A  6E27               	movwf	UART_buff_flush@clearBuffer,c
  4186  00218C  EC52  F00D         	call	_UART_buff_flush	;wreg free
  4187  002190  0012               	return		;funcret
  4188  002192                     __end_of_ClearBuffer:
  4189                           	opt stack 0
  4190                           tblptru	equ	0xFF8
  4191                           tblptrh	equ	0xFF7
  4192                           tblptrl	equ	0xFF6
  4193                           tablat	equ	0xFF5
  4194                           prodh	equ	0xFF4
  4195                           prodl	equ	0xFF3
  4196                           intcon	equ	0xFF2
  4197                           postinc0	equ	0xFEE
  4198                           wreg	equ	0xFE8
  4199                           indf1	equ	0xFE7
  4200                           postdec1	equ	0xFE5
  4201                           fsr1h	equ	0xFE2
  4202                           fsr1l	equ	0xFE1
  4203                           indf2	equ	0xFDF
  4204                           postinc2	equ	0xFDE
  4205                           postdec2	equ	0xFDD
  4206                           plusw2	equ	0xFDB
  4207                           fsr2h	equ	0xFDA
  4208                           fsr2l	equ	0xFD9
  4209                           status	equ	0xFD8
  4210                           
  4211 ;; *************** function _UART_buff_flush *****************
  4212 ;; Defined at:
  4213 ;;		line 92 in file "UART.c"
  4214 ;; Parameters:    Size  Location     Type
  4215 ;;  _this           2   36[COMRAM] PTR struct UART_ring_buf
  4216 ;;		 -> input_buffer(106), 
  4217 ;;  clearBuffer     2   38[COMRAM] const int 
  4218 ;; Auto vars:     Size  Location     Type
  4219 ;;		None
  4220 ;; Return value:  Size  Location     Type
  4221 ;;                  1    wreg      void 
  4222 ;; Registers used:
  4223 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4224 ;; Tracked objects:
  4225 ;;		On entry : 0/0
  4226 ;;		On exit  : 0/0
  4227 ;;		Unchanged: 0/0
  4228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4229 ;;      Params:         4       0       0       0       0       0       0
  4230 ;;      Locals:         0       0       0       0       0       0       0
  4231 ;;      Temps:          0       0       0       0       0       0       0
  4232 ;;      Totals:         4       0       0       0       0       0       0
  4233 ;;Total ram usage:        4 bytes
  4234 ;; Hardware stack levels used:    1
  4235 ;; Hardware stack levels required when called:    7
  4236 ;; This function calls:
  4237 ;;		_memset
  4238 ;; This function is called by:
  4239 ;;		_ClearBuffer
  4240 ;; This function uses a non-reentrant model
  4241 ;;
  4242                           
  4243                           	psect	text18
  4244  001AA4                     __ptext18:
  4245                           	opt stack 0
  4246  001AA4                     _UART_buff_flush:
  4247                           	opt stack 20
  4248                           
  4249                           ;UART.c: 93: _this->count = 0;
  4250                           
  4251                           ;incstack = 0
  4252  001AA4  EE20 F068          	lfsr	2,104
  4253  001AA8  5025               	movf	UART_buff_flush@_this,w,c
  4254  001AAA  26D9               	addwf	fsr2l,f,c
  4255  001AAC  5026               	movf	UART_buff_flush@_this+1,w,c
  4256  001AAE  22DA               	addwfc	fsr2h,f,c
  4257  001AB0  0E00               	movlw	0
  4258  001AB2  6EDE               	movwf	postinc2,c
  4259  001AB4  0E00               	movlw	0
  4260  001AB6  6EDD               	movwf	postdec2,c
  4261                           
  4262                           ;UART.c: 94: _this->head = 0;
  4263  001AB8  EE20 F064          	lfsr	2,100
  4264  001ABC  5025               	movf	UART_buff_flush@_this,w,c
  4265  001ABE  26D9               	addwf	fsr2l,f,c
  4266  001AC0  5026               	movf	UART_buff_flush@_this+1,w,c
  4267  001AC2  22DA               	addwfc	fsr2h,f,c
  4268  001AC4  0E00               	movlw	0
  4269  001AC6  6EDE               	movwf	postinc2,c
  4270  001AC8  0E00               	movlw	0
  4271  001ACA  6EDD               	movwf	postdec2,c
  4272                           
  4273                           ;UART.c: 95: _this->tail = 0;
  4274  001ACC  EE20 F066          	lfsr	2,102
  4275  001AD0  5025               	movf	UART_buff_flush@_this,w,c
  4276  001AD2  26D9               	addwf	fsr2l,f,c
  4277  001AD4  5026               	movf	UART_buff_flush@_this+1,w,c
  4278  001AD6  22DA               	addwfc	fsr2h,f,c
  4279  001AD8  0E00               	movlw	0
  4280  001ADA  6EDE               	movwf	postinc2,c
  4281  001ADC  0E00               	movlw	0
  4282  001ADE  6EDD               	movwf	postdec2,c
  4283                           
  4284                           ;UART.c: 96: if (clearBuffer) {
  4285  001AE0  5027               	movf	UART_buff_flush@clearBuffer,w,c
  4286  001AE2  1028               	iorwf	UART_buff_flush@clearBuffer+1,w,c
  4287  001AE4  B4D8               	btfsc	status,2,c
  4288  001AE6  0012               	return	
  4289                           
  4290                           ;UART.c: 97: memset(_this->buf, 0, sizeof (_this->buf));
  4291  001AE8  C025  F01D         	movff	UART_buff_flush@_this,memset@p1
  4292  001AEC  C026  F01E         	movff	UART_buff_flush@_this+1,memset@p1+1
  4293  001AF0  0E00               	movlw	0
  4294  001AF2  6E20               	movwf	memset@c+1,c
  4295  001AF4  0E00               	movlw	0
  4296  001AF6  6E1F               	movwf	memset@c,c
  4297  001AF8  0E00               	movlw	0
  4298  001AFA  6E22               	movwf	memset@n+1,c
  4299  001AFC  0E64               	movlw	100
  4300  001AFE  6E21               	movwf	memset@n,c
  4301  001B00  ECF9  F00F         	call	_memset	;wreg free
  4302  001B04  0012               	return	
  4303  001B06                     __end_of_UART_buff_flush:
  4304                           	opt stack 0
  4305                           tblptru	equ	0xFF8
  4306                           tblptrh	equ	0xFF7
  4307                           tblptrl	equ	0xFF6
  4308                           tablat	equ	0xFF5
  4309                           prodh	equ	0xFF4
  4310                           prodl	equ	0xFF3
  4311                           intcon	equ	0xFF2
  4312                           postinc0	equ	0xFEE
  4313                           wreg	equ	0xFE8
  4314                           indf1	equ	0xFE7
  4315                           postdec1	equ	0xFE5
  4316                           fsr1h	equ	0xFE2
  4317                           fsr1l	equ	0xFE1
  4318                           indf2	equ	0xFDF
  4319                           postinc2	equ	0xFDE
  4320                           postdec2	equ	0xFDD
  4321                           plusw2	equ	0xFDB
  4322                           fsr2h	equ	0xFDA
  4323                           fsr2l	equ	0xFD9
  4324                           status	equ	0xFD8
  4325                           
  4326 ;; *************** function _processPowerRequest *****************
  4327 ;; Defined at:
  4328 ;;		line 30 in file "Communications.c"
  4329 ;; Parameters:    Size  Location     Type
  4330 ;;  powerSet        1    wreg     unsigned char 
  4331 ;; Auto vars:     Size  Location     Type
  4332 ;;  powerSet        1   43[COMRAM] unsigned char 
  4333 ;; Return value:  Size  Location     Type
  4334 ;;                  1    wreg      void 
  4335 ;; Registers used:
  4336 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4337 ;; Tracked objects:
  4338 ;;		On entry : 0/0
  4339 ;;		On exit  : 0/0
  4340 ;;		Unchanged: 0/0
  4341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4342 ;;      Params:         0       0       0       0       0       0       0
  4343 ;;      Locals:         1       0       0       0       0       0       0
  4344 ;;      Temps:          2       0       0       0       0       0       0
  4345 ;;      Totals:         3       0       0       0       0       0       0
  4346 ;;Total ram usage:        3 bytes
  4347 ;; Hardware stack levels used:    1
  4348 ;; Hardware stack levels required when called:    9
  4349 ;; This function calls:
  4350 ;;		_CoolingStart
  4351 ;;		_CoolingStop
  4352 ;;		_EnableSlavePower
  4353 ;;		_Update
  4354 ;; This function is called by:
  4355 ;;		_updateComms
  4356 ;; This function uses a non-reentrant model
  4357 ;;
  4358                           
  4359                           	psect	text19
  4360  000E56                     __ptext19:
  4361                           	opt stack 0
  4362  000E56                     _processPowerRequest:
  4363                           	opt stack 20
  4364                           
  4365                           ;incstack = 0
  4366                           ;processPowerRequest@powerSet stored from wreg
  4367  000E56  6E2C               	movwf	processPowerRequest@powerSet,c
  4368                           
  4369                           ;Communications.c: 32: if (((powerSet >> 1) & 0x01)){
  4370  000E58  C02C  F02A         	movff	processPowerRequest@powerSet,??_processPowerRequest
  4371  000E5C  90D8               	bcf	status,0,c
  4372  000E5E  322A               	rrcf	??_processPowerRequest,f,c
  4373  000E60  A02A               	btfss	??_processPowerRequest,0,c
  4374  000E62  D008               	goto	l4330
  4375                           
  4376                           ;Communications.c: 33: EnableSlavePower(BMM, ON);
  4377  000E64  0E00               	movlw	0
  4378  000E66  6E28               	movwf	EnableSlavePower@onof+1,c
  4379  000E68  0E01               	movlw	1
  4380  000E6A  6E27               	movwf	EnableSlavePower@onof,c
  4381  000E6C  0E04               	movlw	4
  4382  000E6E  ECEA  F009         	call	_EnableSlavePower
  4383                           
  4384                           ;Communications.c: 34: }
  4385  000E72  D007               	goto	l4332
  4386  000E74                     l4330:
  4387                           
  4388                           ;Communications.c: 35: else{
  4389                           ;Communications.c: 36: EnableSlavePower(BMM, OFF);
  4390  000E74  0E00               	movlw	0
  4391  000E76  6E28               	movwf	EnableSlavePower@onof+1,c
  4392  000E78  0E00               	movlw	0
  4393  000E7A  6E27               	movwf	EnableSlavePower@onof,c
  4394  000E7C  0E04               	movlw	4
  4395  000E7E  ECEA  F009         	call	_EnableSlavePower
  4396  000E82                     l4332:
  4397                           
  4398                           ;Communications.c: 37: }
  4399                           ;Communications.c: 38: if (((powerSet >> 2) & 0x01)){
  4400  000E82  C02C  F02A         	movff	processPowerRequest@powerSet,??_processPowerRequest
  4401  000E86  90D8               	bcf	status,0,c
  4402  000E88  322A               	rrcf	??_processPowerRequest,f,c
  4403  000E8A  90D8               	bcf	status,0,c
  4404  000E8C  322A               	rrcf	??_processPowerRequest,f,c
  4405  000E8E  A02A               	btfss	??_processPowerRequest,0,c
  4406  000E90  D008               	goto	l4336
  4407                           
  4408                           ;Communications.c: 39: EnableSlavePower(MCS, ON);
  4409  000E92  0E00               	movlw	0
  4410  000E94  6E28               	movwf	EnableSlavePower@onof+1,c
  4411  000E96  0E01               	movlw	1
  4412  000E98  6E27               	movwf	EnableSlavePower@onof,c
  4413  000E9A  0E02               	movlw	2
  4414  000E9C  ECEA  F009         	call	_EnableSlavePower
  4415                           
  4416                           ;Communications.c: 40: }
  4417  000EA0  D007               	goto	l4338
  4418  000EA2                     l4336:
  4419                           
  4420                           ;Communications.c: 41: else{
  4421                           ;Communications.c: 42: EnableSlavePower(MCS,OFF);
  4422  000EA2  0E00               	movlw	0
  4423  000EA4  6E28               	movwf	EnableSlavePower@onof+1,c
  4424  000EA6  0E00               	movlw	0
  4425  000EA8  6E27               	movwf	EnableSlavePower@onof,c
  4426  000EAA  0E02               	movlw	2
  4427  000EAC  ECEA  F009         	call	_EnableSlavePower
  4428  000EB0                     l4338:
  4429                           
  4430                           ;Communications.c: 43: }
  4431                           ;Communications.c: 44: if (((powerSet >> 3) & 0x01)){
  4432  000EB0  C02C  F02A         	movff	processPowerRequest@powerSet,??_processPowerRequest
  4433  000EB4  90D8               	bcf	status,0,c
  4434  000EB6  322A               	rrcf	??_processPowerRequest,f,c
  4435  000EB8  90D8               	bcf	status,0,c
  4436  000EBA  322A               	rrcf	??_processPowerRequest,f,c
  4437  000EBC  90D8               	bcf	status,0,c
  4438  000EBE  322A               	rrcf	??_processPowerRequest,f,c
  4439  000EC0  A02A               	btfss	??_processPowerRequest,0,c
  4440  000EC2  D008               	goto	l4342
  4441                           
  4442                           ;Communications.c: 45: EnableSlavePower(DDS,ON);
  4443  000EC4  0E00               	movlw	0
  4444  000EC6  6E28               	movwf	EnableSlavePower@onof+1,c
  4445  000EC8  0E01               	movlw	1
  4446  000ECA  6E27               	movwf	EnableSlavePower@onof,c
  4447  000ECC  0E01               	movlw	1
  4448  000ECE  ECEA  F009         	call	_EnableSlavePower
  4449                           
  4450                           ;Communications.c: 46: }
  4451  000ED2  D007               	goto	l4344
  4452  000ED4                     l4342:
  4453                           
  4454                           ;Communications.c: 47: else{
  4455                           ;Communications.c: 48: EnableSlavePower(DDS,OFF);
  4456  000ED4  0E00               	movlw	0
  4457  000ED6  6E28               	movwf	EnableSlavePower@onof+1,c
  4458  000ED8  0E00               	movlw	0
  4459  000EDA  6E27               	movwf	EnableSlavePower@onof,c
  4460  000EDC  0E01               	movlw	1
  4461  000EDE  ECEA  F009         	call	_EnableSlavePower
  4462  000EE2                     l4344:
  4463                           
  4464                           ;Communications.c: 49: }
  4465                           ;Communications.c: 50: if(((powerSet >> 4) & 0x01)){
  4466  000EE2  C02C  F02A         	movff	processPowerRequest@powerSet,??_processPowerRequest
  4467  000EE6  3A2A               	swapf	??_processPowerRequest,f,c
  4468  000EE8  0E0F               	movlw	15
  4469  000EEA  162A               	andwf	??_processPowerRequest,f,c
  4470  000EEC  A02A               	btfss	??_processPowerRequest,0,c
  4471  000EEE  D008               	goto	l4348
  4472                           
  4473                           ;Communications.c: 51: EnableSlavePower(SAS,ON);
  4474  000EF0  0E00               	movlw	0
  4475  000EF2  6E28               	movwf	EnableSlavePower@onof+1,c
  4476  000EF4  0E01               	movlw	1
  4477  000EF6  6E27               	movwf	EnableSlavePower@onof,c
  4478  000EF8  0E03               	movlw	3
  4479  000EFA  ECEA  F009         	call	_EnableSlavePower
  4480                           
  4481                           ;Communications.c: 52: }
  4482  000EFE  D007               	goto	l4350
  4483  000F00                     l4348:
  4484                           
  4485                           ;Communications.c: 53: else{
  4486                           ;Communications.c: 54: EnableSlavePower(SAS,OFF);
  4487  000F00  0E00               	movlw	0
  4488  000F02  6E28               	movwf	EnableSlavePower@onof+1,c
  4489  000F04  0E00               	movlw	0
  4490  000F06  6E27               	movwf	EnableSlavePower@onof,c
  4491  000F08  0E03               	movlw	3
  4492  000F0A  ECEA  F009         	call	_EnableSlavePower
  4493  000F0E                     l4350:
  4494                           
  4495                           ;Communications.c: 55: }
  4496                           ;Communications.c: 56: if(((powerSet >> 5) & 0x01)){
  4497  000F0E  C02C  F02A         	movff	processPowerRequest@powerSet,??_processPowerRequest
  4498  000F12  0E05               	movlw	5
  4499  000F14  6E2B               	movwf	(??_processPowerRequest+1)& (0+255),c
  4500  000F16                     u2895:
  4501  000F16  90D8               	bcf	status,0,c
  4502  000F18  322A               	rrcf	??_processPowerRequest,f,c
  4503  000F1A  2E2B               	decfsz	(??_processPowerRequest+1)& (0+255),f,c
  4504  000F1C  D7FC               	goto	u2895
  4505  000F1E  A02A               	btfss	??_processPowerRequest,0,c
  4506  000F20  D008               	goto	l4354
  4507                           
  4508                           ;Communications.c: 57: EnableSlavePower(TSS, ON);
  4509  000F22  0E00               	movlw	0
  4510  000F24  6E28               	movwf	EnableSlavePower@onof+1,c
  4511  000F26  0E01               	movlw	1
  4512  000F28  6E27               	movwf	EnableSlavePower@onof,c
  4513  000F2A  0E05               	movlw	5
  4514  000F2C  ECEA  F009         	call	_EnableSlavePower
  4515                           
  4516                           ;Communications.c: 58: }
  4517  000F30  D007               	goto	l4356
  4518  000F32                     l4354:
  4519                           
  4520                           ;Communications.c: 59: else{
  4521                           ;Communications.c: 60: EnableSlavePower(TSS,OFF);
  4522  000F32  0E00               	movlw	0
  4523  000F34  6E28               	movwf	EnableSlavePower@onof+1,c
  4524  000F36  0E00               	movlw	0
  4525  000F38  6E27               	movwf	EnableSlavePower@onof,c
  4526  000F3A  0E05               	movlw	5
  4527  000F3C  ECEA  F009         	call	_EnableSlavePower
  4528  000F40                     l4356:
  4529                           
  4530                           ;Communications.c: 61: }
  4531                           ;Communications.c: 62: if(((powerSet >> 6) & 0x01)){
  4532  000F40  C02C  F02A         	movff	processPowerRequest@powerSet,??_processPowerRequest
  4533  000F44  0E06               	movlw	6
  4534  000F46  6E2B               	movwf	(??_processPowerRequest+1)& (0+255),c
  4535  000F48                     u2915:
  4536  000F48  90D8               	bcf	status,0,c
  4537  000F4A  322A               	rrcf	??_processPowerRequest,f,c
  4538  000F4C  2E2B               	decfsz	(??_processPowerRequest+1)& (0+255),f,c
  4539  000F4E  D7FC               	goto	u2915
  4540  000F50  A02A               	btfss	??_processPowerRequest,0,c
  4541  000F52  D008               	goto	l4360
  4542                           
  4543                           ;Communications.c: 63: EnableSlavePower(AUX, ON);
  4544  000F54  0E00               	movlw	0
  4545  000F56  6E28               	movwf	EnableSlavePower@onof+1,c
  4546  000F58  0E01               	movlw	1
  4547  000F5A  6E27               	movwf	EnableSlavePower@onof,c
  4548  000F5C  0E06               	movlw	6
  4549  000F5E  ECEA  F009         	call	_EnableSlavePower
  4550                           
  4551                           ;Communications.c: 64: }
  4552  000F62  D007               	goto	l4362
  4553  000F64                     l4360:
  4554                           
  4555                           ;Communications.c: 65: else{
  4556                           ;Communications.c: 66: EnableSlavePower(AUX,OFF);
  4557  000F64  0E00               	movlw	0
  4558  000F66  6E28               	movwf	EnableSlavePower@onof+1,c
  4559  000F68  0E00               	movlw	0
  4560  000F6A  6E27               	movwf	EnableSlavePower@onof,c
  4561  000F6C  0E06               	movlw	6
  4562  000F6E  ECEA  F009         	call	_EnableSlavePower
  4563  000F72                     l4362:
  4564                           
  4565                           ;Communications.c: 67: }
  4566                           ;Communications.c: 68: if(((powerSet >> 7) & 0x01)){
  4567  000F72  6A2A               	clrf	??_processPowerRequest& (0+255),c
  4568  000F74  AE2C               	btfss	processPowerRequest@powerSet,7,c
  4569  000F76  D001               	bra	u2935
  4570  000F78  2A2A               	incf	??_processPowerRequest& (0+255),f,c
  4571  000F7A                     u2935:
  4572  000F7A  A02A               	btfss	??_processPowerRequest,0,c
  4573  000F7C  D003               	goto	l4366
  4574                           
  4575                           ;Communications.c: 70: CoolingStart();
  4576  000F7E  EC6F  F010         	call	_CoolingStart	;wreg free
  4577                           
  4578                           ;Communications.c: 71: }
  4579  000F82  D002               	goto	l4368
  4580  000F84                     l4366:
  4581                           
  4582                           ;Communications.c: 72: else{
  4583                           ;Communications.c: 74: CoolingStop();
  4584  000F84  ECFD  F010         	call	_CoolingStop	;wreg free
  4585  000F88                     l4368:
  4586                           
  4587                           ;Communications.c: 75: }
  4588                           ;Communications.c: 76: Update();
  4589  000F88  EC1D  F011         	call	_Update	;wreg free
  4590  000F8C  0012               	return		;funcret
  4591  000F8E                     __end_of_processPowerRequest:
  4592                           	opt stack 0
  4593                           tblptru	equ	0xFF8
  4594                           tblptrh	equ	0xFF7
  4595                           tblptrl	equ	0xFF6
  4596                           tablat	equ	0xFF5
  4597                           prodh	equ	0xFF4
  4598                           prodl	equ	0xFF3
  4599                           intcon	equ	0xFF2
  4600                           postinc0	equ	0xFEE
  4601                           wreg	equ	0xFE8
  4602                           indf1	equ	0xFE7
  4603                           postdec1	equ	0xFE5
  4604                           fsr1h	equ	0xFE2
  4605                           fsr1l	equ	0xFE1
  4606                           indf2	equ	0xFDF
  4607                           postinc2	equ	0xFDE
  4608                           postdec2	equ	0xFDD
  4609                           plusw2	equ	0xFDB
  4610                           fsr2h	equ	0xFDA
  4611                           fsr2l	equ	0xFD9
  4612                           status	equ	0xFD8
  4613                           
  4614 ;; *************** function _CoolingStop *****************
  4615 ;; Defined at:
  4616 ;;		line 30 in file "CoolingControl.c"
  4617 ;; Parameters:    Size  Location     Type
  4618 ;;		None
  4619 ;; Auto vars:     Size  Location     Type
  4620 ;;		None
  4621 ;; Return value:  Size  Location     Type
  4622 ;;                  1    wreg      void 
  4623 ;; Registers used:
  4624 ;;		wreg, status,2, status,0, cstack
  4625 ;; Tracked objects:
  4626 ;;		On entry : 0/0
  4627 ;;		On exit  : 0/0
  4628 ;;		Unchanged: 0/0
  4629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4630 ;;      Params:         0       0       0       0       0       0       0
  4631 ;;      Locals:         0       0       0       0       0       0       0
  4632 ;;      Temps:          0       0       0       0       0       0       0
  4633 ;;      Totals:         0       0       0       0       0       0       0
  4634 ;;Total ram usage:        0 bytes
  4635 ;; Hardware stack levels used:    1
  4636 ;; Hardware stack levels required when called:    8
  4637 ;; This function calls:
  4638 ;;		_PWM4_LoadDutyValue
  4639 ;;		_PotClear
  4640 ;; This function is called by:
  4641 ;;		_processPowerRequest
  4642 ;; This function uses a non-reentrant model
  4643 ;;
  4644                           
  4645                           	psect	text20
  4646  0021FA                     __ptext20:
  4647                           	opt stack 0
  4648  0021FA                     _CoolingStop:
  4649                           	opt stack 20
  4650                           
  4651                           ;CoolingControl.c: 31: PotClear();
  4652                           
  4653                           ;incstack = 0
  4654  0021FA  ECCA  F00A         	call	_PotClear	;wreg free
  4655                           
  4656                           ;CoolingControl.c: 32: PWM4_LoadDutyValue(0);
  4657  0021FE  0E00               	movlw	0
  4658  002200  6E1E               	movwf	PWM4_LoadDutyValue@dutyValue+1,c
  4659  002202  0E00               	movlw	0
  4660  002204  6E1D               	movwf	PWM4_LoadDutyValue@dutyValue,c
  4661  002206  ECB2  F00F         	call	_PWM4_LoadDutyValue	;wreg free
  4662  00220A  0012               	return		;funcret
  4663  00220C                     __end_of_CoolingStop:
  4664                           	opt stack 0
  4665                           tblptru	equ	0xFF8
  4666                           tblptrh	equ	0xFF7
  4667                           tblptrl	equ	0xFF6
  4668                           tablat	equ	0xFF5
  4669                           prodh	equ	0xFF4
  4670                           prodl	equ	0xFF3
  4671                           intcon	equ	0xFF2
  4672                           postinc0	equ	0xFEE
  4673                           wreg	equ	0xFE8
  4674                           indf1	equ	0xFE7
  4675                           postdec1	equ	0xFE5
  4676                           fsr1h	equ	0xFE2
  4677                           fsr1l	equ	0xFE1
  4678                           indf2	equ	0xFDF
  4679                           postinc2	equ	0xFDE
  4680                           postdec2	equ	0xFDD
  4681                           plusw2	equ	0xFDB
  4682                           fsr2h	equ	0xFDA
  4683                           fsr2l	equ	0xFD9
  4684                           status	equ	0xFD8
  4685                           
  4686 ;; *************** function _CoolingStart *****************
  4687 ;; Defined at:
  4688 ;;		line 19 in file "CoolingControl.c"
  4689 ;; Parameters:    Size  Location     Type
  4690 ;;		None
  4691 ;; Auto vars:     Size  Location     Type
  4692 ;;		None
  4693 ;; Return value:  Size  Location     Type
  4694 ;;                  1    wreg      void 
  4695 ;; Registers used:
  4696 ;;		wreg, status,2, status,0, cstack
  4697 ;; Tracked objects:
  4698 ;;		On entry : 0/0
  4699 ;;		On exit  : 0/0
  4700 ;;		Unchanged: 0/0
  4701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4702 ;;      Params:         0       0       0       0       0       0       0
  4703 ;;      Locals:         0       0       0       0       0       0       0
  4704 ;;      Temps:          0       0       0       0       0       0       0
  4705 ;;      Totals:         0       0       0       0       0       0       0
  4706 ;;Total ram usage:        0 bytes
  4707 ;; Hardware stack levels used:    1
  4708 ;; Hardware stack levels required when called:    8
  4709 ;; This function calls:
  4710 ;;		_PWM4_LoadDutyValue
  4711 ;;		_PotClear
  4712 ;;		_PotSetpoint
  4713 ;; This function is called by:
  4714 ;;		_processPowerRequest
  4715 ;; This function uses a non-reentrant model
  4716 ;;
  4717                           
  4718                           	psect	text21
  4719  0020DE                     __ptext21:
  4720                           	opt stack 0
  4721  0020DE                     _CoolingStart:
  4722                           	opt stack 20
  4723                           
  4724                           ;CoolingControl.c: 21: PotClear();
  4725                           
  4726                           ;incstack = 0
  4727  0020DE  ECCA  F00A         	call	_PotClear	;wreg free
  4728                           
  4729                           ;CoolingControl.c: 22: PotSetpoint(40);
  4730  0020E2  0E00               	movlw	0
  4731  0020E4  6E27               	movwf	PotSetpoint@new_point+1,c
  4732  0020E6  0E28               	movlw	40
  4733  0020E8  6E26               	movwf	PotSetpoint@new_point,c
  4734  0020EA  EC6C  F009         	call	_PotSetpoint	;wreg free
  4735                           
  4736                           ;CoolingControl.c: 23: PWM4_LoadDutyValue(1000);
  4737  0020EE  0E03               	movlw	3
  4738  0020F0  6E1E               	movwf	PWM4_LoadDutyValue@dutyValue+1,c
  4739  0020F2  0EE8               	movlw	232
  4740  0020F4  6E1D               	movwf	PWM4_LoadDutyValue@dutyValue,c
  4741  0020F6  ECB2  F00F         	call	_PWM4_LoadDutyValue	;wreg free
  4742  0020FA  0012               	return		;funcret
  4743  0020FC                     __end_of_CoolingStart:
  4744                           	opt stack 0
  4745                           tblptru	equ	0xFF8
  4746                           tblptrh	equ	0xFF7
  4747                           tblptrl	equ	0xFF6
  4748                           tablat	equ	0xFF5
  4749                           prodh	equ	0xFF4
  4750                           prodl	equ	0xFF3
  4751                           intcon	equ	0xFF2
  4752                           postinc0	equ	0xFEE
  4753                           wreg	equ	0xFE8
  4754                           indf1	equ	0xFE7
  4755                           postdec1	equ	0xFE5
  4756                           fsr1h	equ	0xFE2
  4757                           fsr1l	equ	0xFE1
  4758                           indf2	equ	0xFDF
  4759                           postinc2	equ	0xFDE
  4760                           postdec2	equ	0xFDD
  4761                           plusw2	equ	0xFDB
  4762                           fsr2h	equ	0xFDA
  4763                           fsr2l	equ	0xFD9
  4764                           status	equ	0xFD8
  4765                           
  4766 ;; *************** function _PotSetpoint *****************
  4767 ;; Defined at:
  4768 ;;		line 21 in file "DigiPot.c"
  4769 ;; Parameters:    Size  Location     Type
  4770 ;;  new_point       2   37[COMRAM] int 
  4771 ;; Auto vars:     Size  Location     Type
  4772 ;;  new_pos         2    4[BANK0 ] int 
  4773 ;;  x               2    2[BANK0 ] int 
  4774 ;;  set_point       2    0[BANK0 ] int 
  4775 ;; Return value:  Size  Location     Type
  4776 ;;                  1    wreg      void 
  4777 ;; Registers used:
  4778 ;;		wreg, status,2, status,0, cstack
  4779 ;; Tracked objects:
  4780 ;;		On entry : 0/0
  4781 ;;		On exit  : 0/0
  4782 ;;		Unchanged: 0/0
  4783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4784 ;;      Params:         2       0       0       0       0       0       0
  4785 ;;      Locals:         0       6       0       0       0       0       0
  4786 ;;      Temps:          2       0       0       0       0       0       0
  4787 ;;      Totals:         4       6       0       0       0       0       0
  4788 ;;Total ram usage:       10 bytes
  4789 ;; Hardware stack levels used:    1
  4790 ;; Hardware stack levels required when called:    7
  4791 ;; This function calls:
  4792 ;;		_Delay
  4793 ;; This function is called by:
  4794 ;;		_main
  4795 ;;		_CoolingStart
  4796 ;; This function uses a non-reentrant model
  4797 ;;
  4798                           
  4799                           	psect	text22
  4800  0012D8                     __ptext22:
  4801                           	opt stack 0
  4802  0012D8                     _PotSetpoint:
  4803                           	opt stack 20
  4804                           
  4805                           ;DigiPot.c: 22: int set_point;
  4806                           ;DigiPot.c: 31: int new_pos = new_point;
  4807                           
  4808                           ;incstack = 0
  4809  0012D8  C026  F064         	movff	PotSetpoint@new_point,PotSetpoint@new_pos
  4810  0012DC  C027  F065         	movff	PotSetpoint@new_point+1,PotSetpoint@new_pos+1
  4811                           
  4812                           ;DigiPot.c: 35: LATB5 = 0;
  4813  0012E0  9A8A               	bcf	3978,5,c	;volatile
  4814                           
  4815                           ;DigiPot.c: 38: if (new_pos > prev_pos) {
  4816  0012E2  0100               	movlb	0	; () banked
  4817  0012E4  5164               	movf	PotSetpoint@new_pos& (0+255),w,b
  4818  0012E6  5C36               	subwf	_prev_pos,w,c
  4819  0012E8  5037               	movf	_prev_pos+1,w,c
  4820  0012EA  0A80               	xorlw	128
  4821  0012EC  6E28               	movwf	??_PotSetpoint& (0+255),c
  4822  0012EE  0100               	movlb	0	; () banked
  4823  0012F0  5165               	movf	(PotSetpoint@new_pos+1)& (0+255),w,b
  4824  0012F2  0A80               	xorlw	128
  4825  0012F4  5828               	subwfb	??_PotSetpoint& (0+255),w,c
  4826  0012F6  B0D8               	btfsc	status,0,c
  4827  0012F8  D013               	goto	l719
  4828                           
  4829                           ; BSR set to: 0
  4830                           ;DigiPot.c: 40: LATB3 = 1;
  4831  0012FA  868A               	bsf	3978,3,c	;volatile
  4832                           
  4833                           ; BSR set to: 0
  4834                           ;DigiPot.c: 41: set_point = new_pos - prev_pos;
  4835  0012FC  C036  F028         	movff	_prev_pos,??_PotSetpoint
  4836  001300  C037  F029         	movff	_prev_pos+1,??_PotSetpoint+1
  4837  001304  1E28               	comf	??_PotSetpoint,f,c
  4838  001306  1E29               	comf	??_PotSetpoint+1,f,c
  4839  001308  4A28               	infsnz	??_PotSetpoint,f,c
  4840  00130A  2A29               	incf	??_PotSetpoint+1,f,c
  4841  00130C  0100               	movlb	0	; () banked
  4842  00130E  5164               	movf	PotSetpoint@new_pos& (0+255),w,b
  4843  001310  2428               	addwf	??_PotSetpoint,w,c
  4844  001312  0100               	movlb	0	; () banked
  4845  001314  6F60               	movwf	PotSetpoint@set_point& (0+255),b
  4846  001316  0100               	movlb	0	; () banked
  4847  001318  5165               	movf	(PotSetpoint@new_pos+1)& (0+255),w,b
  4848  00131A  2029               	addwfc	??_PotSetpoint+1,w,c
  4849  00131C  0100               	movlb	0	; () banked
  4850  00131E  6F61               	movwf	(PotSetpoint@set_point+1)& (0+255),b
  4851  001320                     l719:
  4852                           
  4853                           ; BSR set to: 0
  4854                           ;DigiPot.c: 42: }
  4855                           ;DigiPot.c: 43: if (new_pos < prev_pos) {
  4856  001320  5036               	movf	_prev_pos,w,c
  4857  001322  0100               	movlb	0	; () banked
  4858  001324  5D64               	subwf	PotSetpoint@new_pos& (0+255),w,b
  4859  001326  0100               	movlb	0	; () banked
  4860  001328  5165               	movf	(PotSetpoint@new_pos+1)& (0+255),w,b
  4861  00132A  0A80               	xorlw	128
  4862  00132C  6E28               	movwf	??_PotSetpoint& (0+255),c
  4863  00132E  5037               	movf	_prev_pos+1,w,c
  4864  001330  0A80               	xorlw	128
  4865  001332  5828               	subwfb	??_PotSetpoint& (0+255),w,c
  4866  001334  B0D8               	btfsc	status,0,c
  4867  001336  D011               	goto	l3936
  4868                           
  4869                           ; BSR set to: 0
  4870                           ;DigiPot.c: 45: LATB3 = 0;
  4871  001338  968A               	bcf	3978,3,c	;volatile
  4872                           
  4873                           ; BSR set to: 0
  4874                           ;DigiPot.c: 46: set_point = prev_pos - new_pos;
  4875  00133A  C064  F028         	movff	PotSetpoint@new_pos,??_PotSetpoint
  4876  00133E  C065  F029         	movff	PotSetpoint@new_pos+1,??_PotSetpoint+1
  4877  001342  1E28               	comf	??_PotSetpoint,f,c
  4878  001344  1E29               	comf	??_PotSetpoint+1,f,c
  4879  001346  4A28               	infsnz	??_PotSetpoint,f,c
  4880  001348  2A29               	incf	??_PotSetpoint+1,f,c
  4881  00134A  5036               	movf	_prev_pos,w,c
  4882  00134C  2428               	addwf	??_PotSetpoint,w,c
  4883  00134E  0100               	movlb	0	; () banked
  4884  001350  6F60               	movwf	PotSetpoint@set_point& (0+255),b
  4885  001352  5037               	movf	_prev_pos+1,w,c
  4886  001354  2029               	addwfc	??_PotSetpoint+1,w,c
  4887  001356  0100               	movlb	0	; () banked
  4888  001358  6F61               	movwf	(PotSetpoint@set_point+1)& (0+255),b
  4889  00135A                     l3936:
  4890                           
  4891                           ; BSR set to: 0
  4892                           ;DigiPot.c: 47: }
  4893                           ;DigiPot.c: 48: Delay(1);
  4894  00135A  0E01               	movlw	1
  4895  00135C  6E1D               	movwf	Delay@wait,c
  4896  00135E  0E00               	movlw	0
  4897  001360  6E1E               	movwf	Delay@wait+1,c
  4898  001362  0E00               	movlw	0
  4899  001364  6E1F               	movwf	Delay@wait+2,c
  4900  001366  0E00               	movlw	0
  4901  001368  6E20               	movwf	Delay@wait+3,c
  4902  00136A  ECDA  F00E         	call	_Delay	;wreg free
  4903                           
  4904                           ;DigiPot.c: 50: int x;
  4905                           ;DigiPot.c: 52: for (x = 0; x < set_point; x++) {
  4906  00136E  0E00               	movlw	0
  4907  001370  0100               	movlb	0	; () banked
  4908  001372  6F63               	movwf	(PotSetpoint@x+1)& (0+255),b
  4909  001374  0E00               	movlw	0
  4910  001376  6F62               	movwf	PotSetpoint@x& (0+255),b
  4911  001378  D019               	goto	l3946
  4912  00137A                     l722:
  4913                           
  4914                           ; BSR set to: 0
  4915                           ;DigiPot.c: 53: LATB4 = 1;
  4916  00137A  888A               	bsf	3978,4,c	;volatile
  4917                           
  4918                           ; BSR set to: 0
  4919                           ;DigiPot.c: 54: Delay(1);
  4920  00137C  0E01               	movlw	1
  4921  00137E  6E1D               	movwf	Delay@wait,c
  4922  001380  0E00               	movlw	0
  4923  001382  6E1E               	movwf	Delay@wait+1,c
  4924  001384  0E00               	movlw	0
  4925  001386  6E1F               	movwf	Delay@wait+2,c
  4926  001388  0E00               	movlw	0
  4927  00138A  6E20               	movwf	Delay@wait+3,c
  4928  00138C  ECDA  F00E         	call	_Delay	;wreg free
  4929                           
  4930                           ;DigiPot.c: 55: LATB4 = 0;
  4931  001390  988A               	bcf	3978,4,c	;volatile
  4932                           
  4933                           ;DigiPot.c: 56: Delay(1);
  4934  001392  0E01               	movlw	1
  4935  001394  6E1D               	movwf	Delay@wait,c
  4936  001396  0E00               	movlw	0
  4937  001398  6E1E               	movwf	Delay@wait+1,c
  4938  00139A  0E00               	movlw	0
  4939  00139C  6E1F               	movwf	Delay@wait+2,c
  4940  00139E  0E00               	movlw	0
  4941  0013A0  6E20               	movwf	Delay@wait+3,c
  4942  0013A2  ECDA  F00E         	call	_Delay	;wreg free
  4943  0013A6  0100               	movlb	0	; () banked
  4944  0013A8  4B62               	infsnz	PotSetpoint@x& (0+255),f,b
  4945  0013AA  2B63               	incf	(PotSetpoint@x+1)& (0+255),f,b
  4946  0013AC                     l3946:
  4947                           
  4948                           ; BSR set to: 0
  4949  0013AC  0100               	movlb	0	; () banked
  4950  0013AE  5160               	movf	PotSetpoint@set_point& (0+255),w,b
  4951  0013B0  0100               	movlb	0	; () banked
  4952  0013B2  5D62               	subwf	PotSetpoint@x& (0+255),w,b
  4953  0013B4  0100               	movlb	0	; () banked
  4954  0013B6  5163               	movf	(PotSetpoint@x+1)& (0+255),w,b
  4955  0013B8  0A80               	xorlw	128
  4956  0013BA  6E28               	movwf	??_PotSetpoint& (0+255),c
  4957  0013BC  0100               	movlb	0	; () banked
  4958  0013BE  5161               	movf	(PotSetpoint@set_point+1)& (0+255),w,b
  4959  0013C0  0A80               	xorlw	128
  4960  0013C2  5828               	subwfb	??_PotSetpoint& (0+255),w,c
  4961  0013C4  A0D8               	btfss	status,0,c
  4962  0013C6  D7D9               	goto	l722
  4963                           
  4964                           ; BSR set to: 0
  4965                           ;DigiPot.c: 57: }
  4966                           ;DigiPot.c: 59: LATB5 = 1;
  4967  0013C8  8A8A               	bsf	3978,5,c	;volatile
  4968                           
  4969                           ;DigiPot.c: 60: prev_pos = new_pos;
  4970  0013CA  C064  F036         	movff	PotSetpoint@new_pos,_prev_pos
  4971  0013CE  C065  F037         	movff	PotSetpoint@new_pos+1,_prev_pos+1
  4972                           
  4973                           ; BSR set to: 0
  4974  0013D2  0012               	return		;funcret
  4975  0013D4                     __end_of_PotSetpoint:
  4976                           	opt stack 0
  4977                           tblptru	equ	0xFF8
  4978                           tblptrh	equ	0xFF7
  4979                           tblptrl	equ	0xFF6
  4980                           tablat	equ	0xFF5
  4981                           prodh	equ	0xFF4
  4982                           prodl	equ	0xFF3
  4983                           intcon	equ	0xFF2
  4984                           postinc0	equ	0xFEE
  4985                           wreg	equ	0xFE8
  4986                           indf1	equ	0xFE7
  4987                           postdec1	equ	0xFE5
  4988                           fsr1h	equ	0xFE2
  4989                           fsr1l	equ	0xFE1
  4990                           indf2	equ	0xFDF
  4991                           postinc2	equ	0xFDE
  4992                           postdec2	equ	0xFDD
  4993                           plusw2	equ	0xFDB
  4994                           fsr2h	equ	0xFDA
  4995                           fsr2l	equ	0xFD9
  4996                           status	equ	0xFD8
  4997                           
  4998 ;; *************** function _PotClear *****************
  4999 ;; Defined at:
  5000 ;;		line 66 in file "DigiPot.c"
  5001 ;; Parameters:    Size  Location     Type
  5002 ;;		None
  5003 ;; Auto vars:     Size  Location     Type
  5004 ;;  x               2   37[COMRAM] int 
  5005 ;; Return value:  Size  Location     Type
  5006 ;;                  1    wreg      void 
  5007 ;; Registers used:
  5008 ;;		wreg, status,2, status,0, cstack
  5009 ;; Tracked objects:
  5010 ;;		On entry : 0/0
  5011 ;;		On exit  : 0/0
  5012 ;;		Unchanged: 0/0
  5013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5014 ;;      Params:         0       0       0       0       0       0       0
  5015 ;;      Locals:         2       0       0       0       0       0       0
  5016 ;;      Temps:          0       0       0       0       0       0       0
  5017 ;;      Totals:         2       0       0       0       0       0       0
  5018 ;;Total ram usage:        2 bytes
  5019 ;; Hardware stack levels used:    1
  5020 ;; Hardware stack levels required when called:    7
  5021 ;; This function calls:
  5022 ;;		_Delay
  5023 ;; This function is called by:
  5024 ;;		_CoolingStart
  5025 ;;		_CoolingStop
  5026 ;; This function uses a non-reentrant model
  5027 ;;
  5028                           
  5029                           	psect	text23
  5030  001594                     __ptext23:
  5031                           	opt stack 0
  5032  001594                     _PotClear:
  5033                           	opt stack 20
  5034                           
  5035                           ;DigiPot.c: 67: Delay(1);
  5036                           
  5037                           ; BSR set to: 0
  5038                           ;incstack = 0
  5039  001594  0E01               	movlw	1
  5040  001596  6E1D               	movwf	Delay@wait,c
  5041  001598  0E00               	movlw	0
  5042  00159A  6E1E               	movwf	Delay@wait+1,c
  5043  00159C  0E00               	movlw	0
  5044  00159E  6E1F               	movwf	Delay@wait+2,c
  5045  0015A0  0E00               	movlw	0
  5046  0015A2  6E20               	movwf	Delay@wait+3,c
  5047  0015A4  ECDA  F00E         	call	_Delay	;wreg free
  5048                           
  5049                           ;DigiPot.c: 69: LATB5 = 0;
  5050  0015A8  9A8A               	bcf	3978,5,c	;volatile
  5051                           
  5052                           ;DigiPot.c: 70: Delay(1);
  5053  0015AA  0E01               	movlw	1
  5054  0015AC  6E1D               	movwf	Delay@wait,c
  5055  0015AE  0E00               	movlw	0
  5056  0015B0  6E1E               	movwf	Delay@wait+1,c
  5057  0015B2  0E00               	movlw	0
  5058  0015B4  6E1F               	movwf	Delay@wait+2,c
  5059  0015B6  0E00               	movlw	0
  5060  0015B8  6E20               	movwf	Delay@wait+3,c
  5061  0015BA  ECDA  F00E         	call	_Delay	;wreg free
  5062                           
  5063                           ;DigiPot.c: 71: LATB3 = 0;
  5064  0015BE  968A               	bcf	3978,3,c	;volatile
  5065                           
  5066                           ;DigiPot.c: 72: Delay(1);
  5067  0015C0  0E01               	movlw	1
  5068  0015C2  6E1D               	movwf	Delay@wait,c
  5069  0015C4  0E00               	movlw	0
  5070  0015C6  6E1E               	movwf	Delay@wait+1,c
  5071  0015C8  0E00               	movlw	0
  5072  0015CA  6E1F               	movwf	Delay@wait+2,c
  5073  0015CC  0E00               	movlw	0
  5074  0015CE  6E20               	movwf	Delay@wait+3,c
  5075  0015D0  ECDA  F00E         	call	_Delay	;wreg free
  5076                           
  5077                           ;DigiPot.c: 73: int x;
  5078                           ;DigiPot.c: 74: for (x = 0; x < 32; x++) {
  5079  0015D4  0E00               	movlw	0
  5080  0015D6  6E27               	movwf	PotClear@x+1,c
  5081  0015D8  0E00               	movlw	0
  5082  0015DA  6E26               	movwf	PotClear@x,c
  5083  0015DC  BE27               	btfsc	PotClear@x+1,7,c
  5084  0015DE  D006               	goto	l727
  5085  0015E0  5027               	movf	PotClear@x+1,w,c
  5086  0015E2  E121               	bnz	l728
  5087  0015E4  0E20               	movlw	32
  5088  0015E6  5C26               	subwf	PotClear@x,w,c
  5089  0015E8  B0D8               	btfsc	status,0,c
  5090  0015EA  D01D               	goto	l728
  5091  0015EC                     l727:
  5092                           
  5093                           ;DigiPot.c: 75: LATB4 = 1;
  5094  0015EC  888A               	bsf	3978,4,c	;volatile
  5095                           
  5096                           ;DigiPot.c: 76: Delay(1);
  5097  0015EE  0E01               	movlw	1
  5098  0015F0  6E1D               	movwf	Delay@wait,c
  5099  0015F2  0E00               	movlw	0
  5100  0015F4  6E1E               	movwf	Delay@wait+1,c
  5101  0015F6  0E00               	movlw	0
  5102  0015F8  6E1F               	movwf	Delay@wait+2,c
  5103  0015FA  0E00               	movlw	0
  5104  0015FC  6E20               	movwf	Delay@wait+3,c
  5105  0015FE  ECDA  F00E         	call	_Delay	;wreg free
  5106                           
  5107                           ;DigiPot.c: 77: LATB4 = 0;
  5108  001602  988A               	bcf	3978,4,c	;volatile
  5109                           
  5110                           ;DigiPot.c: 78: Delay(1);
  5111  001604  0E01               	movlw	1
  5112  001606  6E1D               	movwf	Delay@wait,c
  5113  001608  0E00               	movlw	0
  5114  00160A  6E1E               	movwf	Delay@wait+1,c
  5115  00160C  0E00               	movlw	0
  5116  00160E  6E1F               	movwf	Delay@wait+2,c
  5117  001610  0E00               	movlw	0
  5118  001612  6E20               	movwf	Delay@wait+3,c
  5119  001614  ECDA  F00E         	call	_Delay	;wreg free
  5120  001618  4A26               	infsnz	PotClear@x,f,c
  5121  00161A  2A27               	incf	PotClear@x+1,f,c
  5122  00161C  BE27               	btfsc	PotClear@x+1,7,c
  5123  00161E  D7E6               	goto	l727
  5124  001620  5027               	movf	PotClear@x+1,w,c
  5125  001622  E101               	bnz	u2560
  5126  001624  D7DF               	goto	L1
  5127  001626                     u2560:
  5128  001626                     l728:
  5129                           
  5130                           ;DigiPot.c: 79: }
  5131                           ;DigiPot.c: 80: LATB4 = 1;
  5132  001626  888A               	bsf	3978,4,c	;volatile
  5133                           
  5134                           ;DigiPot.c: 81: Delay(1);
  5135  001628  0E01               	movlw	1
  5136  00162A  6E1D               	movwf	Delay@wait,c
  5137  00162C  0E00               	movlw	0
  5138  00162E  6E1E               	movwf	Delay@wait+1,c
  5139  001630  0E00               	movlw	0
  5140  001632  6E1F               	movwf	Delay@wait+2,c
  5141  001634  0E00               	movlw	0
  5142  001636  6E20               	movwf	Delay@wait+3,c
  5143  001638  ECDA  F00E         	call	_Delay	;wreg free
  5144                           
  5145                           ;DigiPot.c: 83: LATB5 = 1;
  5146  00163C  8A8A               	bsf	3978,5,c	;volatile
  5147                           
  5148                           ;DigiPot.c: 84: prev_pos = 0;
  5149  00163E  0E00               	movlw	0
  5150  001640  6E37               	movwf	_prev_pos+1,c
  5151  001642  0E00               	movlw	0
  5152  001644  6E36               	movwf	_prev_pos,c
  5153                           
  5154                           ;DigiPot.c: 85: Delay(1);
  5155  001646  0E01               	movlw	1
  5156  001648  6E1D               	movwf	Delay@wait,c
  5157  00164A  0E00               	movlw	0
  5158  00164C  6E1E               	movwf	Delay@wait+1,c
  5159  00164E  0E00               	movlw	0
  5160  001650  6E1F               	movwf	Delay@wait+2,c
  5161  001652  0E00               	movlw	0
  5162  001654  6E20               	movwf	Delay@wait+3,c
  5163  001656  ECDA  F00E         	call	_Delay	;wreg free
  5164  00165A  0012               	return		;funcret
  5165  00165C                     __end_of_PotClear:
  5166                           	opt stack 0
  5167                           tblptru	equ	0xFF8
  5168                           tblptrh	equ	0xFF7
  5169                           tblptrl	equ	0xFF6
  5170                           tablat	equ	0xFF5
  5171                           prodh	equ	0xFF4
  5172                           prodl	equ	0xFF3
  5173                           intcon	equ	0xFF2
  5174                           postinc0	equ	0xFEE
  5175                           wreg	equ	0xFE8
  5176                           indf1	equ	0xFE7
  5177                           postdec1	equ	0xFE5
  5178                           fsr1h	equ	0xFE2
  5179                           fsr1l	equ	0xFE1
  5180                           indf2	equ	0xFDF
  5181                           postinc2	equ	0xFDE
  5182                           postdec2	equ	0xFDD
  5183                           plusw2	equ	0xFDB
  5184                           fsr2h	equ	0xFDA
  5185                           fsr2l	equ	0xFD9
  5186                           status	equ	0xFD8
  5187                           
  5188 ;; *************** function _PWM4_LoadDutyValue *****************
  5189 ;; Defined at:
  5190 ;;		line 81 in file "mcc_generated_files/pwm4.c"
  5191 ;; Parameters:    Size  Location     Type
  5192 ;;  dutyValue       2   28[COMRAM] unsigned int 
  5193 ;; Auto vars:     Size  Location     Type
  5194 ;;		None
  5195 ;; Return value:  Size  Location     Type
  5196 ;;                  1    wreg      void 
  5197 ;; Registers used:
  5198 ;;		wreg, status,2, status,0
  5199 ;; Tracked objects:
  5200 ;;		On entry : 0/0
  5201 ;;		On exit  : 0/0
  5202 ;;		Unchanged: 0/0
  5203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5204 ;;      Params:         2       0       0       0       0       0       0
  5205 ;;      Locals:         0       0       0       0       0       0       0
  5206 ;;      Temps:          2       0       0       0       0       0       0
  5207 ;;      Totals:         4       0       0       0       0       0       0
  5208 ;;Total ram usage:        4 bytes
  5209 ;; Hardware stack levels used:    1
  5210 ;; Hardware stack levels required when called:    6
  5211 ;; This function calls:
  5212 ;;		Nothing
  5213 ;; This function is called by:
  5214 ;;		_main
  5215 ;;		_CoolingStart
  5216 ;;		_CoolingStop
  5217 ;; This function uses a non-reentrant model
  5218 ;;
  5219                           
  5220                           	psect	text24
  5221  001F64                     __ptext24:
  5222                           	opt stack 0
  5223  001F64                     _PWM4_LoadDutyValue:
  5224                           	opt stack 21
  5225                           
  5226                           ;pwm4.c: 84: CCPR2L = ((dutyValue & 0x03FC)>>2);
  5227                           
  5228                           ;incstack = 0
  5229  001F64  C01D  F01F         	movff	PWM4_LoadDutyValue@dutyValue,??_PWM4_LoadDutyValue
  5230  001F68  C01E  F020         	movff	PWM4_LoadDutyValue@dutyValue+1,??_PWM4_LoadDutyValue+1
  5231  001F6C  90D8               	bcf	status,0,c
  5232  001F6E  3220               	rrcf	??_PWM4_LoadDutyValue+1,f,c
  5233  001F70  321F               	rrcf	??_PWM4_LoadDutyValue,f,c
  5234  001F72  90D8               	bcf	status,0,c
  5235  001F74  3220               	rrcf	??_PWM4_LoadDutyValue+1,f,c
  5236  001F76  321F               	rrcf	??_PWM4_LoadDutyValue,f,c
  5237  001F78  501F               	movf	??_PWM4_LoadDutyValue,w,c
  5238  001F7A  6E67               	movwf	3943,c	;volatile
  5239                           
  5240                           ;pwm4.c: 87: CCP2CON = (CCP2CON & 0xCF) | ((dutyValue & 0x0003)<<4);
  5241  001F7C  C01D  F01F         	movff	PWM4_LoadDutyValue@dutyValue,??_PWM4_LoadDutyValue
  5242  001F80  0E03               	movlw	3
  5243  001F82  161F               	andwf	??_PWM4_LoadDutyValue,f,c
  5244  001F84  3A1F               	swapf	??_PWM4_LoadDutyValue,f,c
  5245  001F86  0EF0               	movlw	240
  5246  001F88  161F               	andwf	??_PWM4_LoadDutyValue,f,c
  5247  001F8A  5066               	movf	3942,w,c	;volatile
  5248  001F8C  0BCF               	andlw	207
  5249  001F8E  101F               	iorwf	??_PWM4_LoadDutyValue,w,c
  5250  001F90  6E66               	movwf	3942,c	;volatile
  5251  001F92  0012               	return		;funcret
  5252  001F94                     __end_of_PWM4_LoadDutyValue:
  5253                           	opt stack 0
  5254                           tblptru	equ	0xFF8
  5255                           tblptrh	equ	0xFF7
  5256                           tblptrl	equ	0xFF6
  5257                           tablat	equ	0xFF5
  5258                           prodh	equ	0xFF4
  5259                           prodl	equ	0xFF3
  5260                           intcon	equ	0xFF2
  5261                           postinc0	equ	0xFEE
  5262                           wreg	equ	0xFE8
  5263                           indf1	equ	0xFE7
  5264                           postdec1	equ	0xFE5
  5265                           fsr1h	equ	0xFE2
  5266                           fsr1l	equ	0xFE1
  5267                           indf2	equ	0xFDF
  5268                           postinc2	equ	0xFDE
  5269                           postdec2	equ	0xFDD
  5270                           plusw2	equ	0xFDB
  5271                           fsr2h	equ	0xFDA
  5272                           fsr2l	equ	0xFD9
  5273                           status	equ	0xFD8
  5274                           
  5275 ;; *************** function _FaultsCollector *****************
  5276 ;; Defined at:
  5277 ;;		line 79 in file "Communications.c"
  5278 ;; Parameters:    Size  Location     Type
  5279 ;;		None
  5280 ;; Auto vars:     Size  Location     Type
  5281 ;;  i               2   34[COMRAM] int 
  5282 ;;  sendVal         2   32[COMRAM] unsigned int 
  5283 ;; Return value:  Size  Location     Type
  5284 ;;                  1    wreg      unsigned char 
  5285 ;; Registers used:
  5286 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5287 ;; Tracked objects:
  5288 ;;		On entry : 0/0
  5289 ;;		On exit  : 0/0
  5290 ;;		Unchanged: 0/0
  5291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5292 ;;      Params:         0       0       0       0       0       0       0
  5293 ;;      Locals:         4       0       0       0       0       0       0
  5294 ;;      Temps:          3       0       0       0       0       0       0
  5295 ;;      Totals:         7       0       0       0       0       0       0
  5296 ;;Total ram usage:        7 bytes
  5297 ;; Hardware stack levels used:    1
  5298 ;; Hardware stack levels required when called:    7
  5299 ;; This function calls:
  5300 ;;		_GetPDUFault
  5301 ;; This function is called by:
  5302 ;;		_updateComms
  5303 ;; This function uses a non-reentrant model
  5304 ;;
  5305                           
  5306                           	psect	text25
  5307  001C28                     __ptext25:
  5308                           	opt stack 0
  5309  001C28                     _FaultsCollector:
  5310                           	opt stack 22
  5311                           
  5312                           ;Communications.c: 80: unsigned int sendVal = 0;
  5313                           
  5314                           ;incstack = 0
  5315  001C28  0E00               	movlw	0
  5316  001C2A  6E22               	movwf	FaultsCollector@sendVal+1,c
  5317  001C2C  0E00               	movlw	0
  5318  001C2E  6E21               	movwf	FaultsCollector@sendVal,c
  5319                           
  5320                           ;Communications.c: 81: int i = 0;
  5321  001C30  0E00               	movlw	0
  5322  001C32  6E24               	movwf	FaultsCollector@i+1,c
  5323  001C34  0E00               	movlw	0
  5324  001C36  6E23               	movwf	FaultsCollector@i,c
  5325                           
  5326                           ;Communications.c: 82: for (i = 0; i < 5; i++) {
  5327  001C38  0E00               	movlw	0
  5328  001C3A  6E24               	movwf	FaultsCollector@i+1,c
  5329  001C3C  0E00               	movlw	0
  5330  001C3E  6E23               	movwf	FaultsCollector@i,c
  5331  001C40                     l4372:
  5332  001C40  BE24               	btfsc	FaultsCollector@i+1,7,c
  5333  001C42  D006               	goto	l4376
  5334  001C44  5024               	movf	FaultsCollector@i+1,w,c
  5335  001C46  E11C               	bnz	l4382
  5336  001C48  0E05               	movlw	5
  5337  001C4A  5C23               	subwf	FaultsCollector@i,w,c
  5338  001C4C  B0D8               	btfsc	status,0,c
  5339  001C4E  D018               	goto	l4382
  5340  001C50                     l4376:
  5341                           
  5342                           ;Communications.c: 83: sendVal = sendVal | ((GetPDUFault(i)&0x01) << i);
  5343  001C50  C023  F01E         	movff	FaultsCollector@i,??_FaultsCollector
  5344  001C54  5023               	movf	FaultsCollector@i,w,c
  5345  001C56  ECC9  F010         	call	_GetPDUFault
  5346  001C5A  0B01               	andlw	1
  5347  001C5C  6E1F               	movwf	(??_FaultsCollector+1)& (0+255),c
  5348  001C5E  6A20               	clrf	(??_FaultsCollector+2)& (0+255),c
  5349  001C60  2A1E               	incf	??_FaultsCollector,f,c
  5350  001C62  D003               	goto	u2964
  5351  001C64                     u2965:
  5352  001C64  90D8               	bcf	status,0,c
  5353  001C66  361F               	rlcf	??_FaultsCollector+1,f,c
  5354  001C68  3620               	rlcf	??_FaultsCollector+2,f,c
  5355  001C6A                     u2964:
  5356  001C6A  2E1E               	decfsz	??_FaultsCollector,f,c
  5357  001C6C  D7FB               	goto	u2965
  5358  001C6E  5021               	movf	FaultsCollector@sendVal,w,c
  5359  001C70  101F               	iorwf	??_FaultsCollector+1,w,c
  5360  001C72  6E21               	movwf	FaultsCollector@sendVal,c
  5361  001C74  5022               	movf	FaultsCollector@sendVal+1,w,c
  5362  001C76  1020               	iorwf	??_FaultsCollector+2,w,c
  5363  001C78  6E22               	movwf	FaultsCollector@sendVal+1,c
  5364  001C7A  4A23               	infsnz	FaultsCollector@i,f,c
  5365  001C7C  2A24               	incf	FaultsCollector@i+1,f,c
  5366  001C7E  D7E0               	goto	l4372
  5367  001C80                     l4382:
  5368                           
  5369                           ;Communications.c: 84: }
  5370                           ;Communications.c: 85: return sendVal;
  5371  001C80  5021               	movf	FaultsCollector@sendVal,w,c
  5372  001C82  0012               	return	
  5373  001C84                     __end_of_FaultsCollector:
  5374                           	opt stack 0
  5375                           tblptru	equ	0xFF8
  5376                           tblptrh	equ	0xFF7
  5377                           tblptrl	equ	0xFF6
  5378                           tablat	equ	0xFF5
  5379                           prodh	equ	0xFF4
  5380                           prodl	equ	0xFF3
  5381                           intcon	equ	0xFF2
  5382                           postinc0	equ	0xFEE
  5383                           wreg	equ	0xFE8
  5384                           indf1	equ	0xFE7
  5385                           postdec1	equ	0xFE5
  5386                           fsr1h	equ	0xFE2
  5387                           fsr1l	equ	0xFE1
  5388                           indf2	equ	0xFDF
  5389                           postinc2	equ	0xFDE
  5390                           postdec2	equ	0xFDD
  5391                           plusw2	equ	0xFDB
  5392                           fsr2h	equ	0xFDA
  5393                           fsr2l	equ	0xFD9
  5394                           status	equ	0xFD8
  5395                           
  5396 ;; *************** function _GetPDUFault *****************
  5397 ;; Defined at:
  5398 ;;		line 221 in file "PDU.c"
  5399 ;; Parameters:    Size  Location     Type
  5400 ;;  loc             1    wreg     unsigned char 
  5401 ;; Auto vars:     Size  Location     Type
  5402 ;;  loc             1   28[COMRAM] unsigned char 
  5403 ;; Return value:  Size  Location     Type
  5404 ;;                  1    wreg      unsigned char 
  5405 ;; Registers used:
  5406 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5407 ;; Tracked objects:
  5408 ;;		On entry : 0/0
  5409 ;;		On exit  : 0/0
  5410 ;;		Unchanged: 0/0
  5411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5412 ;;      Params:         0       0       0       0       0       0       0
  5413 ;;      Locals:         1       0       0       0       0       0       0
  5414 ;;      Temps:          0       0       0       0       0       0       0
  5415 ;;      Totals:         1       0       0       0       0       0       0
  5416 ;;Total ram usage:        1 bytes
  5417 ;; Hardware stack levels used:    1
  5418 ;; Hardware stack levels required when called:    6
  5419 ;; This function calls:
  5420 ;;		Nothing
  5421 ;; This function is called by:
  5422 ;;		_FaultsCollector
  5423 ;; This function uses a non-reentrant model
  5424 ;;
  5425                           
  5426                           	psect	text26
  5427  002192                     __ptext26:
  5428                           	opt stack 0
  5429  002192                     _GetPDUFault:
  5430                           	opt stack 22
  5431                           
  5432                           ;incstack = 0
  5433                           ;GetPDUFault@loc stored from wreg
  5434  002192  6E1D               	movwf	GetPDUFault@loc,c
  5435                           
  5436                           ;PDU.c: 222: return PDUFalult[loc];
  5437  002194  501D               	movf	GetPDUFault@loc,w,c
  5438  002196  0D01               	mullw	1
  5439  002198  0EF5               	movlw	low _PDUFalult
  5440  00219A  24F3               	addwf	prodl,w,c
  5441  00219C  6ED9               	movwf	fsr2l,c
  5442  00219E  0E00               	movlw	high _PDUFalult
  5443  0021A0  20F4               	addwfc	prodh,w,c
  5444  0021A2  6EDA               	movwf	fsr2h,c
  5445  0021A4  50DF               	movf	indf2,w,c
  5446  0021A6  0012               	return	
  5447  0021A8                     __end_of_GetPDUFault:
  5448                           	opt stack 0
  5449                           tblptru	equ	0xFF8
  5450                           tblptrh	equ	0xFF7
  5451                           tblptrl	equ	0xFF6
  5452                           tablat	equ	0xFF5
  5453                           prodh	equ	0xFF4
  5454                           prodl	equ	0xFF3
  5455                           intcon	equ	0xFF2
  5456                           postinc0	equ	0xFEE
  5457                           wreg	equ	0xFE8
  5458                           indf1	equ	0xFE7
  5459                           postdec1	equ	0xFE5
  5460                           fsr1h	equ	0xFE2
  5461                           fsr1l	equ	0xFE1
  5462                           indf2	equ	0xFDF
  5463                           postinc2	equ	0xFDE
  5464                           postdec2	equ	0xFDD
  5465                           plusw2	equ	0xFDB
  5466                           fsr2h	equ	0xFDA
  5467                           fsr2l	equ	0xFD9
  5468                           status	equ	0xFD8
  5469                           
  5470 ;; *************** function _SYSTEM_Initialize *****************
  5471 ;; Defined at:
  5472 ;;		line 113 in file "mcc_generated_files/mcc.c"
  5473 ;; Parameters:    Size  Location     Type
  5474 ;;		None
  5475 ;; Auto vars:     Size  Location     Type
  5476 ;;		None
  5477 ;; Return value:  Size  Location     Type
  5478 ;;                  1    wreg      void 
  5479 ;; Registers used:
  5480 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5481 ;; Tracked objects:
  5482 ;;		On entry : 0/0
  5483 ;;		On exit  : 0/0
  5484 ;;		Unchanged: 0/0
  5485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5486 ;;      Params:         0       0       0       0       0       0       0
  5487 ;;      Locals:         0       0       0       0       0       0       0
  5488 ;;      Temps:          0       0       0       0       0       0       0
  5489 ;;      Totals:         0       0       0       0       0       0       0
  5490 ;;Total ram usage:        0 bytes
  5491 ;; Hardware stack levels used:    1
  5492 ;; Hardware stack levels required when called:    9
  5493 ;; This function calls:
  5494 ;;		_ADC_Initialize
  5495 ;;		_EUSART1_Initialize
  5496 ;;		_INTERRUPT_Initialize
  5497 ;;		_OSCILLATOR_Initialize
  5498 ;;		_PIN_MANAGER_Initialize
  5499 ;;		_PWM4_Initialize
  5500 ;;		_TMR1_Initialize
  5501 ;;		_TMR2_Initialize
  5502 ;; This function is called by:
  5503 ;;		_main
  5504 ;; This function uses a non-reentrant model
  5505 ;;
  5506                           
  5507                           	psect	text27
  5508  002098                     __ptext27:
  5509                           	opt stack 0
  5510  002098                     _SYSTEM_Initialize:
  5511                           	opt stack 21
  5512                           
  5513                           ;mcc.c: 114: OSCILLATOR_Initialize();
  5514                           
  5515                           ;incstack = 0
  5516  002098  EC0D  F011         	call	_OSCILLATOR_Initialize	;wreg free
  5517                           
  5518                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  5519  00209C  EC15  F00D         	call	_PIN_MANAGER_Initialize	;wreg free
  5520                           
  5521                           ;mcc.c: 116: INTERRUPT_Initialize();
  5522  0020A0  EC14  F011         	call	_INTERRUPT_Initialize	;wreg free
  5523                           
  5524                           ;mcc.c: 117: EUSART1_Initialize();
  5525  0020A4  EC48  F00F         	call	_EUSART1_Initialize	;wreg free
  5526                           
  5527                           ;mcc.c: 118: PWM4_Initialize();
  5528  0020A8  ECE9  F010         	call	_PWM4_Initialize	;wreg free
  5529                           
  5530                           ;mcc.c: 119: TMR1_Initialize();
  5531  0020AC  EC5E  F010         	call	_TMR1_Initialize	;wreg free
  5532                           
  5533                           ;mcc.c: 120: TMR2_Initialize();
  5534  0020B0  ECDF  F010         	call	_TMR2_Initialize	;wreg free
  5535                           
  5536                           ;mcc.c: 121: LATB4 = 1;
  5537  0020B4  888A               	bsf	3978,4,c	;volatile
  5538                           
  5539                           ;mcc.c: 122: ADC_Initialize();
  5540  0020B6  EC9C  F010         	call	_ADC_Initialize	;wreg free
  5541  0020BA  0012               	return		;funcret
  5542  0020BC                     __end_of_SYSTEM_Initialize:
  5543                           	opt stack 0
  5544                           tblptru	equ	0xFF8
  5545                           tblptrh	equ	0xFF7
  5546                           tblptrl	equ	0xFF6
  5547                           tablat	equ	0xFF5
  5548                           prodh	equ	0xFF4
  5549                           prodl	equ	0xFF3
  5550                           intcon	equ	0xFF2
  5551                           postinc0	equ	0xFEE
  5552                           wreg	equ	0xFE8
  5553                           indf1	equ	0xFE7
  5554                           postdec1	equ	0xFE5
  5555                           fsr1h	equ	0xFE2
  5556                           fsr1l	equ	0xFE1
  5557                           indf2	equ	0xFDF
  5558                           postinc2	equ	0xFDE
  5559                           postdec2	equ	0xFDD
  5560                           plusw2	equ	0xFDB
  5561                           fsr2h	equ	0xFDA
  5562                           fsr2l	equ	0xFD9
  5563                           status	equ	0xFD8
  5564                           
  5565 ;; *************** function _TMR2_Initialize *****************
  5566 ;; Defined at:
  5567 ;;		line 9 in file "mcc_generated_files/tmr2.c"
  5568 ;; Parameters:    Size  Location     Type
  5569 ;;		None
  5570 ;; Auto vars:     Size  Location     Type
  5571 ;;		None
  5572 ;; Return value:  Size  Location     Type
  5573 ;;                  1    wreg      void 
  5574 ;; Registers used:
  5575 ;;		wreg, status,2, cstack
  5576 ;; Tracked objects:
  5577 ;;		On entry : 0/0
  5578 ;;		On exit  : 0/0
  5579 ;;		Unchanged: 0/0
  5580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5581 ;;      Params:         0       0       0       0       0       0       0
  5582 ;;      Locals:         0       0       0       0       0       0       0
  5583 ;;      Temps:          0       0       0       0       0       0       0
  5584 ;;      Totals:         0       0       0       0       0       0       0
  5585 ;;Total ram usage:        0 bytes
  5586 ;; Hardware stack levels used:    1
  5587 ;; Hardware stack levels required when called:    7
  5588 ;; This function calls:
  5589 ;;		_TMR2_StartTimer
  5590 ;; This function is called by:
  5591 ;;		_SYSTEM_Initialize
  5592 ;; This function uses a non-reentrant model
  5593 ;;
  5594                           
  5595                           	psect	text28
  5596  0021BE                     __ptext28:
  5597                           	opt stack 0
  5598  0021BE                     _TMR2_Initialize:
  5599                           	opt stack 22
  5600                           
  5601                           ;tmr2.c: 14: T2CON = 0x1A;
  5602                           
  5603                           ;incstack = 0
  5604  0021BE  0E1A               	movlw	26
  5605  0021C0  6EBA               	movwf	4026,c	;volatile
  5606                           
  5607                           ;tmr2.c: 17: PR2 = 0x7C;
  5608  0021C2  0E7C               	movlw	124
  5609  0021C4  6EBB               	movwf	4027,c	;volatile
  5610                           
  5611                           ;tmr2.c: 20: TMR2 = 0x00;
  5612  0021C6  0E00               	movlw	0
  5613  0021C8  6EBC               	movwf	4028,c	;volatile
  5614                           
  5615                           ;tmr2.c: 23: PIR1bits.TMR2IF = 0;
  5616  0021CA  929E               	bcf	3998,1,c	;volatile
  5617                           
  5618                           ;tmr2.c: 26: TMR2_StartTimer();
  5619  0021CC  EC23  F011         	call	_TMR2_StartTimer	;wreg free
  5620  0021D0  0012               	return		;funcret
  5621  0021D2                     __end_of_TMR2_Initialize:
  5622                           	opt stack 0
  5623                           tblptru	equ	0xFF8
  5624                           tblptrh	equ	0xFF7
  5625                           tblptrl	equ	0xFF6
  5626                           tablat	equ	0xFF5
  5627                           prodh	equ	0xFF4
  5628                           prodl	equ	0xFF3
  5629                           intcon	equ	0xFF2
  5630                           postinc0	equ	0xFEE
  5631                           wreg	equ	0xFE8
  5632                           indf1	equ	0xFE7
  5633                           postdec1	equ	0xFE5
  5634                           fsr1h	equ	0xFE2
  5635                           fsr1l	equ	0xFE1
  5636                           indf2	equ	0xFDF
  5637                           postinc2	equ	0xFDE
  5638                           postdec2	equ	0xFDD
  5639                           plusw2	equ	0xFDB
  5640                           fsr2h	equ	0xFDA
  5641                           fsr2l	equ	0xFD9
  5642                           status	equ	0xFD8
  5643                           
  5644 ;; *************** function _TMR2_StartTimer *****************
  5645 ;; Defined at:
  5646 ;;		line 29 in file "mcc_generated_files/tmr2.c"
  5647 ;; Parameters:    Size  Location     Type
  5648 ;;		None
  5649 ;; Auto vars:     Size  Location     Type
  5650 ;;		None
  5651 ;; Return value:  Size  Location     Type
  5652 ;;                  1    wreg      void 
  5653 ;; Registers used:
  5654 ;;		None
  5655 ;; Tracked objects:
  5656 ;;		On entry : 0/0
  5657 ;;		On exit  : 0/0
  5658 ;;		Unchanged: 0/0
  5659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5660 ;;      Params:         0       0       0       0       0       0       0
  5661 ;;      Locals:         0       0       0       0       0       0       0
  5662 ;;      Temps:          0       0       0       0       0       0       0
  5663 ;;      Totals:         0       0       0       0       0       0       0
  5664 ;;Total ram usage:        0 bytes
  5665 ;; Hardware stack levels used:    1
  5666 ;; Hardware stack levels required when called:    6
  5667 ;; This function calls:
  5668 ;;		Nothing
  5669 ;; This function is called by:
  5670 ;;		_TMR2_Initialize
  5671 ;; This function uses a non-reentrant model
  5672 ;;
  5673                           
  5674                           	psect	text29
  5675  002246                     __ptext29:
  5676                           	opt stack 0
  5677  002246                     _TMR2_StartTimer:
  5678                           	opt stack 22
  5679                           
  5680                           ;tmr2.c: 32: T2CONbits.TMR2ON = 1;
  5681                           
  5682                           ;incstack = 0
  5683  002246  84BA               	bsf	4026,2,c	;volatile
  5684  002248  0012               	return		;funcret
  5685  00224A                     __end_of_TMR2_StartTimer:
  5686                           	opt stack 0
  5687                           tblptru	equ	0xFF8
  5688                           tblptrh	equ	0xFF7
  5689                           tblptrl	equ	0xFF6
  5690                           tablat	equ	0xFF5
  5691                           prodh	equ	0xFF4
  5692                           prodl	equ	0xFF3
  5693                           intcon	equ	0xFF2
  5694                           postinc0	equ	0xFEE
  5695                           wreg	equ	0xFE8
  5696                           indf1	equ	0xFE7
  5697                           postdec1	equ	0xFE5
  5698                           fsr1h	equ	0xFE2
  5699                           fsr1l	equ	0xFE1
  5700                           indf2	equ	0xFDF
  5701                           postinc2	equ	0xFDE
  5702                           postdec2	equ	0xFDD
  5703                           plusw2	equ	0xFDB
  5704                           fsr2h	equ	0xFDA
  5705                           fsr2l	equ	0xFD9
  5706                           status	equ	0xFD8
  5707                           
  5708 ;; *************** function _TMR1_Initialize *****************
  5709 ;; Defined at:
  5710 ;;		line 66 in file "mcc_generated_files/tmr1.c"
  5711 ;; Parameters:    Size  Location     Type
  5712 ;;		None
  5713 ;; Auto vars:     Size  Location     Type
  5714 ;;		None
  5715 ;; Return value:  Size  Location     Type
  5716 ;;                  1    wreg      void 
  5717 ;; Registers used:
  5718 ;;		wreg, status,2, cstack
  5719 ;; Tracked objects:
  5720 ;;		On entry : 0/0
  5721 ;;		On exit  : 0/0
  5722 ;;		Unchanged: 0/0
  5723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5724 ;;      Params:         0       0       0       0       0       0       0
  5725 ;;      Locals:         0       0       0       0       0       0       0
  5726 ;;      Temps:          0       0       0       0       0       0       0
  5727 ;;      Totals:         0       0       0       0       0       0       0
  5728 ;;Total ram usage:        0 bytes
  5729 ;; Hardware stack levels used:    1
  5730 ;; Hardware stack levels required when called:    7
  5731 ;; This function calls:
  5732 ;;		_TMR1_StartTimer
  5733 ;; This function is called by:
  5734 ;;		_SYSTEM_Initialize
  5735 ;; This function uses a non-reentrant model
  5736 ;;
  5737                           
  5738                           	psect	text30
  5739  0020BC                     __ptext30:
  5740                           	opt stack 0
  5741  0020BC                     _TMR1_Initialize:
  5742                           	opt stack 22
  5743                           
  5744                           ;tmr1.c: 71: T1CON = 0x00;
  5745                           
  5746                           ;incstack = 0
  5747  0020BC  0E00               	movlw	0
  5748  0020BE  6ECD               	movwf	4045,c	;volatile
  5749                           
  5750                           ;tmr1.c: 75: T1GCON = 0x00;
  5751  0020C0  0E00               	movlw	0
  5752  0020C2  6ECC               	movwf	4044,c	;volatile
  5753                           
  5754                           ;tmr1.c: 78: TMR1H = 0x00;
  5755  0020C4  0E00               	movlw	0
  5756  0020C6  6ECF               	movwf	4047,c	;volatile
  5757                           
  5758                           ;tmr1.c: 81: TMR1L = 0x00;
  5759  0020C8  0E00               	movlw	0
  5760  0020CA  6ECE               	movwf	4046,c	;volatile
  5761                           
  5762                           ;tmr1.c: 84: timer1ReloadVal=0;
  5763  0020CC  0E00               	movlw	0
  5764  0020CE  6E39               	movwf	_timer1ReloadVal+1,c	;volatile
  5765  0020D0  0E00               	movlw	0
  5766  0020D2  6E38               	movwf	_timer1ReloadVal,c	;volatile
  5767                           
  5768                           ;tmr1.c: 87: PIR1bits.TMR1IF = 0;
  5769  0020D4  909E               	bcf	3998,0,c	;volatile
  5770                           
  5771                           ;tmr1.c: 90: PIE1bits.TMR1IE = 1;
  5772  0020D6  809D               	bsf	3997,0,c	;volatile
  5773                           
  5774                           ;tmr1.c: 93: TMR1_StartTimer();
  5775  0020D8  EC25  F011         	call	_TMR1_StartTimer	;wreg free
  5776  0020DC  0012               	return		;funcret
  5777  0020DE                     __end_of_TMR1_Initialize:
  5778                           	opt stack 0
  5779                           tblptru	equ	0xFF8
  5780                           tblptrh	equ	0xFF7
  5781                           tblptrl	equ	0xFF6
  5782                           tablat	equ	0xFF5
  5783                           prodh	equ	0xFF4
  5784                           prodl	equ	0xFF3
  5785                           intcon	equ	0xFF2
  5786                           postinc0	equ	0xFEE
  5787                           wreg	equ	0xFE8
  5788                           indf1	equ	0xFE7
  5789                           postdec1	equ	0xFE5
  5790                           fsr1h	equ	0xFE2
  5791                           fsr1l	equ	0xFE1
  5792                           indf2	equ	0xFDF
  5793                           postinc2	equ	0xFDE
  5794                           postdec2	equ	0xFDD
  5795                           plusw2	equ	0xFDB
  5796                           fsr2h	equ	0xFDA
  5797                           fsr2l	equ	0xFD9
  5798                           status	equ	0xFD8
  5799                           
  5800 ;; *************** function _TMR1_StartTimer *****************
  5801 ;; Defined at:
  5802 ;;		line 96 in file "mcc_generated_files/tmr1.c"
  5803 ;; Parameters:    Size  Location     Type
  5804 ;;		None
  5805 ;; Auto vars:     Size  Location     Type
  5806 ;;		None
  5807 ;; Return value:  Size  Location     Type
  5808 ;;                  1    wreg      void 
  5809 ;; Registers used:
  5810 ;;		None
  5811 ;; Tracked objects:
  5812 ;;		On entry : 0/0
  5813 ;;		On exit  : 0/0
  5814 ;;		Unchanged: 0/0
  5815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5816 ;;      Params:         0       0       0       0       0       0       0
  5817 ;;      Locals:         0       0       0       0       0       0       0
  5818 ;;      Temps:          0       0       0       0       0       0       0
  5819 ;;      Totals:         0       0       0       0       0       0       0
  5820 ;;Total ram usage:        0 bytes
  5821 ;; Hardware stack levels used:    1
  5822 ;; Hardware stack levels required when called:    6
  5823 ;; This function calls:
  5824 ;;		Nothing
  5825 ;; This function is called by:
  5826 ;;		_TMR1_Initialize
  5827 ;; This function uses a non-reentrant model
  5828 ;;
  5829                           
  5830                           	psect	text31
  5831  00224A                     __ptext31:
  5832                           	opt stack 0
  5833  00224A                     _TMR1_StartTimer:
  5834                           	opt stack 22
  5835                           
  5836                           ;tmr1.c: 99: T1CONbits.TMR1ON = 1;
  5837                           
  5838                           ;incstack = 0
  5839  00224A  80CD               	bsf	4045,0,c	;volatile
  5840  00224C  0012               	return		;funcret
  5841  00224E                     __end_of_TMR1_StartTimer:
  5842                           	opt stack 0
  5843                           tblptru	equ	0xFF8
  5844                           tblptrh	equ	0xFF7
  5845                           tblptrl	equ	0xFF6
  5846                           tablat	equ	0xFF5
  5847                           prodh	equ	0xFF4
  5848                           prodl	equ	0xFF3
  5849                           intcon	equ	0xFF2
  5850                           postinc0	equ	0xFEE
  5851                           wreg	equ	0xFE8
  5852                           indf1	equ	0xFE7
  5853                           postdec1	equ	0xFE5
  5854                           fsr1h	equ	0xFE2
  5855                           fsr1l	equ	0xFE1
  5856                           indf2	equ	0xFDF
  5857                           postinc2	equ	0xFDE
  5858                           postdec2	equ	0xFDD
  5859                           plusw2	equ	0xFDB
  5860                           fsr2h	equ	0xFDA
  5861                           fsr2l	equ	0xFD9
  5862                           status	equ	0xFD8
  5863                           
  5864 ;; *************** function _PWM4_Initialize *****************
  5865 ;; Defined at:
  5866 ;;		line 64 in file "mcc_generated_files/pwm4.c"
  5867 ;; Parameters:    Size  Location     Type
  5868 ;;		None
  5869 ;; Auto vars:     Size  Location     Type
  5870 ;;		None
  5871 ;; Return value:  Size  Location     Type
  5872 ;;                  1    wreg      void 
  5873 ;; Registers used:
  5874 ;;		wreg, status,2
  5875 ;; Tracked objects:
  5876 ;;		On entry : 0/0
  5877 ;;		On exit  : 0/0
  5878 ;;		Unchanged: 0/0
  5879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5880 ;;      Params:         0       0       0       0       0       0       0
  5881 ;;      Locals:         0       0       0       0       0       0       0
  5882 ;;      Temps:          0       0       0       0       0       0       0
  5883 ;;      Totals:         0       0       0       0       0       0       0
  5884 ;;Total ram usage:        0 bytes
  5885 ;; Hardware stack levels used:    1
  5886 ;; Hardware stack levels required when called:    6
  5887 ;; This function calls:
  5888 ;;		Nothing
  5889 ;; This function is called by:
  5890 ;;		_SYSTEM_Initialize
  5891 ;; This function uses a non-reentrant model
  5892 ;;
  5893                           
  5894                           	psect	text32
  5895  0021D2                     __ptext32:
  5896                           	opt stack 0
  5897  0021D2                     _PWM4_Initialize:
  5898                           	opt stack 23
  5899                           
  5900                           ;pwm4.c: 69: CCP2CON = 0x1C;
  5901                           
  5902                           ;incstack = 0
  5903  0021D2  0E1C               	movlw	28
  5904  0021D4  6E66               	movwf	3942,c	;volatile
  5905                           
  5906                           ;pwm4.c: 72: CCPR2L = 0x3E;
  5907  0021D6  0E3E               	movlw	62
  5908  0021D8  6E67               	movwf	3943,c	;volatile
  5909                           
  5910                           ;pwm4.c: 75: CCPR2H = 0x00;
  5911  0021DA  0E00               	movlw	0
  5912  0021DC  6E68               	movwf	3944,c	;volatile
  5913                           
  5914                           ;pwm4.c: 78: CCPTMRS1bits.C4TSEL = 0x0;
  5915  0021DE  0EFC               	movlw	-4
  5916  0021E0  010F               	movlb	15	; () banked
  5917  0021E2  1748               	andwf	72,f,b	;volatile
  5918                           
  5919                           ; BSR set to: 15
  5920  0021E4  0012               	return		;funcret
  5921  0021E6                     __end_of_PWM4_Initialize:
  5922                           	opt stack 0
  5923                           tblptru	equ	0xFF8
  5924                           tblptrh	equ	0xFF7
  5925                           tblptrl	equ	0xFF6
  5926                           tablat	equ	0xFF5
  5927                           prodh	equ	0xFF4
  5928                           prodl	equ	0xFF3
  5929                           intcon	equ	0xFF2
  5930                           postinc0	equ	0xFEE
  5931                           wreg	equ	0xFE8
  5932                           indf1	equ	0xFE7
  5933                           postdec1	equ	0xFE5
  5934                           fsr1h	equ	0xFE2
  5935                           fsr1l	equ	0xFE1
  5936                           indf2	equ	0xFDF
  5937                           postinc2	equ	0xFDE
  5938                           postdec2	equ	0xFDD
  5939                           plusw2	equ	0xFDB
  5940                           fsr2h	equ	0xFDA
  5941                           fsr2l	equ	0xFD9
  5942                           status	equ	0xFD8
  5943                           
  5944 ;; *************** function _PIN_MANAGER_Initialize *****************
  5945 ;; Defined at:
  5946 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  5947 ;; Parameters:    Size  Location     Type
  5948 ;;		None
  5949 ;; Auto vars:     Size  Location     Type
  5950 ;;		None
  5951 ;; Return value:  Size  Location     Type
  5952 ;;                  1    wreg      void 
  5953 ;; Registers used:
  5954 ;;		wreg, status,2
  5955 ;; Tracked objects:
  5956 ;;		On entry : 0/0
  5957 ;;		On exit  : 0/0
  5958 ;;		Unchanged: 0/0
  5959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5960 ;;      Params:         0       0       0       0       0       0       0
  5961 ;;      Locals:         0       0       0       0       0       0       0
  5962 ;;      Temps:          0       0       0       0       0       0       0
  5963 ;;      Totals:         0       0       0       0       0       0       0
  5964 ;;Total ram usage:        0 bytes
  5965 ;; Hardware stack levels used:    1
  5966 ;; Hardware stack levels required when called:    6
  5967 ;; This function calls:
  5968 ;;		Nothing
  5969 ;; This function is called by:
  5970 ;;		_SYSTEM_Initialize
  5971 ;; This function uses a non-reentrant model
  5972 ;;
  5973                           
  5974                           	psect	text33
  5975  001A2A                     __ptext33:
  5976                           	opt stack 0
  5977  001A2A                     _PIN_MANAGER_Initialize:
  5978                           	opt stack 23
  5979                           
  5980                           ;pin_manager.c: 52: LATA = 0x00;
  5981                           
  5982                           ; BSR set to: 15
  5983                           ;incstack = 0
  5984  001A2A  0E00               	movlw	0
  5985  001A2C  6E89               	movwf	3977,c	;volatile
  5986                           
  5987                           ;pin_manager.c: 53: TRISA = 0xF7;
  5988  001A2E  0EF7               	movlw	247
  5989  001A30  6E92               	movwf	3986,c	;volatile
  5990                           
  5991                           ;pin_manager.c: 54: ANSELA = 0x27;
  5992  001A32  0E27               	movlw	39
  5993  001A34  010F               	movlb	15	; () banked
  5994  001A36  6F38               	movwf	56,b	;volatile
  5995                           
  5996                           ;pin_manager.c: 56: LATB = 0x01;
  5997  001A38  0E01               	movlw	1
  5998  001A3A  6E8A               	movwf	3978,c	;volatile
  5999                           
  6000                           ;pin_manager.c: 57: TRISB = 0xFE;
  6001  001A3C  0EFE               	movlw	254
  6002  001A3E  6E93               	movwf	3987,c	;volatile
  6003                           
  6004                           ;pin_manager.c: 58: ANSELB = 0x3E;
  6005  001A40  0E3E               	movlw	62
  6006  001A42  010F               	movlb	15	; () banked
  6007  001A44  6F39               	movwf	57,b	;volatile
  6008                           
  6009                           ;pin_manager.c: 59: WPUB = 0x00;
  6010  001A46  0E00               	movlw	0
  6011  001A48  6E61               	movwf	3937,c	;volatile
  6012                           
  6013                           ;pin_manager.c: 61: LATC = 0x00;
  6014  001A4A  0E00               	movlw	0
  6015  001A4C  6E8B               	movwf	3979,c	;volatile
  6016                           
  6017                           ;pin_manager.c: 62: TRISC = 0xDF;
  6018  001A4E  0EDF               	movlw	223
  6019  001A50  6E94               	movwf	3988,c	;volatile
  6020                           
  6021                           ;pin_manager.c: 63: ANSELC = 0x1C;
  6022  001A52  0E1C               	movlw	28
  6023  001A54  010F               	movlb	15	; () banked
  6024  001A56  6F3A               	movwf	58,b	;volatile
  6025                           
  6026                           ;pin_manager.c: 65: LATD = 0x00;
  6027  001A58  0E00               	movlw	0
  6028  001A5A  6E8C               	movwf	3980,c	;volatile
  6029                           
  6030                           ;pin_manager.c: 66: TRISD = 0x0F;
  6031  001A5C  0E0F               	movlw	15
  6032  001A5E  6E95               	movwf	3989,c	;volatile
  6033                           
  6034                           ;pin_manager.c: 67: ANSELD = 0x0F;
  6035  001A60  0E0F               	movlw	15
  6036  001A62  010F               	movlb	15	; () banked
  6037  001A64  6F3B               	movwf	59,b	;volatile
  6038                           
  6039                           ;pin_manager.c: 69: LATE = 0x00;
  6040  001A66  0E00               	movlw	0
  6041  001A68  6E8D               	movwf	3981,c	;volatile
  6042                           
  6043                           ;pin_manager.c: 70: TRISE = 0x07;
  6044  001A6A  0E07               	movlw	7
  6045  001A6C  6E96               	movwf	3990,c	;volatile
  6046                           
  6047                           ;pin_manager.c: 71: ANSELE = 0x07;
  6048  001A6E  0E07               	movlw	7
  6049  001A70  010F               	movlb	15	; () banked
  6050  001A72  6F3C               	movwf	60,b	;volatile
  6051                           
  6052                           ; BSR set to: 15
  6053                           ;pin_manager.c: 72: TRISCbits.RC6 = 1;
  6054  001A74  8C94               	bsf	3988,6,c	;volatile
  6055                           
  6056                           ; BSR set to: 15
  6057                           ;pin_manager.c: 73: TRISCbits.RC7 = 1;
  6058  001A76  8E94               	bsf	3988,7,c	;volatile
  6059                           
  6060                           ; BSR set to: 15
  6061                           ;pin_manager.c: 74: TRISCbits.RC5 = 0;
  6062  001A78  9A94               	bcf	3988,5,c	;volatile
  6063                           
  6064                           ; BSR set to: 15
  6065                           ;pin_manager.c: 75: LATCbits.LATC5 = 1;
  6066  001A7A  8A8B               	bsf	3979,5,c	;volatile
  6067                           
  6068                           ; BSR set to: 15
  6069                           ;pin_manager.c: 76: LATCbits.LATC6 = 1;
  6070  001A7C  8C8B               	bsf	3979,6,c	;volatile
  6071                           
  6072                           ; BSR set to: 15
  6073                           ;pin_manager.c: 77: LATCbits.LATC7 = 1;
  6074  001A7E  8E8B               	bsf	3979,7,c	;volatile
  6075                           
  6076                           ; BSR set to: 15
  6077                           ;pin_manager.c: 78: ANSELCbits.ANSC5 =0;
  6078  001A80  010F               	movlb	15	; () banked
  6079  001A82  9B3A               	bcf	58,5,b	;volatile
  6080                           
  6081                           ; BSR set to: 15
  6082                           ;pin_manager.c: 79: ANSELCbits.ANSC6 =0;
  6083  001A84  010F               	movlb	15	; () banked
  6084  001A86  9D3A               	bcf	58,6,b	;volatile
  6085                           
  6086                           ; BSR set to: 15
  6087                           ;pin_manager.c: 80: ANSELCbits.ANSC7 =0;
  6088  001A88  010F               	movlb	15	; () banked
  6089  001A8A  9F3A               	bcf	58,7,b	;volatile
  6090                           
  6091                           ; BSR set to: 15
  6092                           ;pin_manager.c: 82: INTCON2bits.nRBPU = 0x01;
  6093  001A8C  8EF1               	bsf	intcon2,7,c	;volatile
  6094                           
  6095                           ; BSR set to: 15
  6096                           
  6097                           ; BSR set to: 15
  6098                           
  6099                           ;pin_manager.c: 84: do { TRISB4 = 0; } while(0);
  6100  001A8E  9893               	bcf	3987,4,c	;volatile
  6101                           
  6102                           ; BSR set to: 15
  6103                           
  6104                           ; BSR set to: 15
  6105                           
  6106                           ;pin_manager.c: 85: do { TRISB3 = 0; } while(0);
  6107                           
  6108                           ; BSR set to: 15
  6109  001A90  9693               	bcf	3987,3,c	;volatile
  6110                           
  6111                           ; BSR set to: 15
  6112                           
  6113                           ; BSR set to: 15
  6114                           
  6115                           ;pin_manager.c: 86: do { TRISB5 = 0; } while(0);
  6116                           
  6117                           ; BSR set to: 15
  6118  001A92  9A93               	bcf	3987,5,c	;volatile
  6119                           
  6120                           ; BSR set to: 15
  6121                           ;pin_manager.c: 88: TRISDbits.RD1 = 0;
  6122                           
  6123                           ; BSR set to: 15
  6124  001A94  9295               	bcf	3989,1,c	;volatile
  6125                           
  6126                           ; BSR set to: 15
  6127                           
  6128                           ; BSR set to: 15
  6129                           
  6130                           ;pin_manager.c: 90: do { ANSB3 = 0; } while(0);
  6131  001A96  010F               	movlb	15	; () banked
  6132  001A98  9739               	bcf	57,3,b	;volatile
  6133                           
  6134                           ; BSR set to: 15
  6135                           
  6136                           ; BSR set to: 15
  6137                           
  6138                           ;pin_manager.c: 91: do { ANSD7 = 0; } while(0);
  6139                           
  6140                           ; BSR set to: 15
  6141  001A9A  010F               	movlb	15	; () banked
  6142  001A9C  9F3B               	bcf	59,7,b	;volatile
  6143                           
  6144                           ; BSR set to: 15
  6145                           
  6146                           ; BSR set to: 15
  6147                           
  6148                           ;pin_manager.c: 92: do { ANSB4 = 0; } while(0);
  6149                           
  6150                           ; BSR set to: 15
  6151  001A9E  010F               	movlb	15	; () banked
  6152  001AA0  9939               	bcf	57,4,b	;volatile
  6153  001AA2  0012               	return	
  6154  001AA4                     __end_of_PIN_MANAGER_Initialize:
  6155                           	opt stack 0
  6156                           tblptru	equ	0xFF8
  6157                           tblptrh	equ	0xFF7
  6158                           tblptrl	equ	0xFF6
  6159                           tablat	equ	0xFF5
  6160                           prodh	equ	0xFF4
  6161                           prodl	equ	0xFF3
  6162                           intcon	equ	0xFF2
  6163                           intcon2	equ	0xFF1
  6164                           postinc0	equ	0xFEE
  6165                           wreg	equ	0xFE8
  6166                           indf1	equ	0xFE7
  6167                           postdec1	equ	0xFE5
  6168                           fsr1h	equ	0xFE2
  6169                           fsr1l	equ	0xFE1
  6170                           indf2	equ	0xFDF
  6171                           postinc2	equ	0xFDE
  6172                           postdec2	equ	0xFDD
  6173                           plusw2	equ	0xFDB
  6174                           fsr2h	equ	0xFDA
  6175                           fsr2l	equ	0xFD9
  6176                           status	equ	0xFD8
  6177                           
  6178 ;; *************** function _OSCILLATOR_Initialize *****************
  6179 ;; Defined at:
  6180 ;;		line 125 in file "mcc_generated_files/mcc.c"
  6181 ;; Parameters:    Size  Location     Type
  6182 ;;		None
  6183 ;; Auto vars:     Size  Location     Type
  6184 ;;		None
  6185 ;; Return value:  Size  Location     Type
  6186 ;;                  1    wreg      void 
  6187 ;; Registers used:
  6188 ;;		wreg, status,2
  6189 ;; Tracked objects:
  6190 ;;		On entry : 0/0
  6191 ;;		On exit  : 0/0
  6192 ;;		Unchanged: 0/0
  6193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6194 ;;      Params:         0       0       0       0       0       0       0
  6195 ;;      Locals:         0       0       0       0       0       0       0
  6196 ;;      Temps:          0       0       0       0       0       0       0
  6197 ;;      Totals:         0       0       0       0       0       0       0
  6198 ;;Total ram usage:        0 bytes
  6199 ;; Hardware stack levels used:    1
  6200 ;; Hardware stack levels required when called:    6
  6201 ;; This function calls:
  6202 ;;		Nothing
  6203 ;; This function is called by:
  6204 ;;		_SYSTEM_Initialize
  6205 ;; This function uses a non-reentrant model
  6206 ;;
  6207                           
  6208                           	psect	text34
  6209  00221A                     __ptext34:
  6210                           	opt stack 0
  6211  00221A                     _OSCILLATOR_Initialize:
  6212                           	opt stack 23
  6213                           
  6214                           ;mcc.c: 127: OSCCON = 0x72;
  6215                           
  6216                           ; BSR set to: 15
  6217                           ;incstack = 0
  6218  00221A  0E72               	movlw	114
  6219  00221C  6ED3               	movwf	4051,c	;volatile
  6220                           
  6221                           ;mcc.c: 129: OSCCON2 = 0x04;
  6222  00221E  0E04               	movlw	4
  6223  002220  6ED2               	movwf	4050,c	;volatile
  6224                           
  6225                           ;mcc.c: 131: OSCTUNE = 0x00;
  6226  002222  0E00               	movlw	0
  6227  002224  6E9B               	movwf	3995,c	;volatile
  6228  002226  0012               	return		;funcret
  6229  002228                     __end_of_OSCILLATOR_Initialize:
  6230                           	opt stack 0
  6231                           tblptru	equ	0xFF8
  6232                           tblptrh	equ	0xFF7
  6233                           tblptrl	equ	0xFF6
  6234                           tablat	equ	0xFF5
  6235                           prodh	equ	0xFF4
  6236                           prodl	equ	0xFF3
  6237                           intcon	equ	0xFF2
  6238                           intcon2	equ	0xFF1
  6239                           postinc0	equ	0xFEE
  6240                           wreg	equ	0xFE8
  6241                           indf1	equ	0xFE7
  6242                           postdec1	equ	0xFE5
  6243                           fsr1h	equ	0xFE2
  6244                           fsr1l	equ	0xFE1
  6245                           indf2	equ	0xFDF
  6246                           postinc2	equ	0xFDE
  6247                           postdec2	equ	0xFDD
  6248                           plusw2	equ	0xFDB
  6249                           fsr2h	equ	0xFDA
  6250                           fsr2l	equ	0xFD9
  6251                           status	equ	0xFD8
  6252                           
  6253 ;; *************** function _INTERRUPT_Initialize *****************
  6254 ;; Defined at:
  6255 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  6256 ;; Parameters:    Size  Location     Type
  6257 ;;		None
  6258 ;; Auto vars:     Size  Location     Type
  6259 ;;		None
  6260 ;; Return value:  Size  Location     Type
  6261 ;;                  1    wreg      void 
  6262 ;; Registers used:
  6263 ;;		None
  6264 ;; Tracked objects:
  6265 ;;		On entry : 0/0
  6266 ;;		On exit  : 0/0
  6267 ;;		Unchanged: 0/0
  6268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6269 ;;      Params:         0       0       0       0       0       0       0
  6270 ;;      Locals:         0       0       0       0       0       0       0
  6271 ;;      Temps:          0       0       0       0       0       0       0
  6272 ;;      Totals:         0       0       0       0       0       0       0
  6273 ;;Total ram usage:        0 bytes
  6274 ;; Hardware stack levels used:    1
  6275 ;; Hardware stack levels required when called:    6
  6276 ;; This function calls:
  6277 ;;		Nothing
  6278 ;; This function is called by:
  6279 ;;		_SYSTEM_Initialize
  6280 ;; This function uses a non-reentrant model
  6281 ;;
  6282                           
  6283                           	psect	text35
  6284  002228                     __ptext35:
  6285                           	opt stack 0
  6286  002228                     _INTERRUPT_Initialize:
  6287                           	opt stack 23
  6288                           
  6289                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  6290                           
  6291                           ;incstack = 0
  6292  002228  9ED0               	bcf	4048,7,c	;volatile
  6293                           
  6294                           ;interrupt_manager.c: 60: IPR1bits.RC1IP = 0;
  6295  00222A  9A9F               	bcf	3999,5,c	;volatile
  6296                           
  6297                           ;interrupt_manager.c: 62: IPR1bits.TX1IP = 0;
  6298  00222C  989F               	bcf	3999,4,c	;volatile
  6299                           
  6300                           ;interrupt_manager.c: 64: IPR1bits.ADIP = 0;
  6301  00222E  9C9F               	bcf	3999,6,c	;volatile
  6302  002230  0012               	return		;funcret
  6303  002232                     __end_of_INTERRUPT_Initialize:
  6304                           	opt stack 0
  6305                           tblptru	equ	0xFF8
  6306                           tblptrh	equ	0xFF7
  6307                           tblptrl	equ	0xFF6
  6308                           tablat	equ	0xFF5
  6309                           prodh	equ	0xFF4
  6310                           prodl	equ	0xFF3
  6311                           intcon	equ	0xFF2
  6312                           intcon2	equ	0xFF1
  6313                           postinc0	equ	0xFEE
  6314                           wreg	equ	0xFE8
  6315                           indf1	equ	0xFE7
  6316                           postdec1	equ	0xFE5
  6317                           fsr1h	equ	0xFE2
  6318                           fsr1l	equ	0xFE1
  6319                           indf2	equ	0xFDF
  6320                           postinc2	equ	0xFDE
  6321                           postdec2	equ	0xFDD
  6322                           plusw2	equ	0xFDB
  6323                           fsr2h	equ	0xFDA
  6324                           fsr2l	equ	0xFD9
  6325                           status	equ	0xFD8
  6326                           
  6327 ;; *************** function _EUSART1_Initialize *****************
  6328 ;; Defined at:
  6329 ;;		line 20 in file "UART.c"
  6330 ;; Parameters:    Size  Location     Type
  6331 ;;		None
  6332 ;; Auto vars:     Size  Location     Type
  6333 ;;		None
  6334 ;; Return value:  Size  Location     Type
  6335 ;;                  1    wreg      void 
  6336 ;; Registers used:
  6337 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6338 ;; Tracked objects:
  6339 ;;		On entry : 0/0
  6340 ;;		On exit  : 0/0
  6341 ;;		Unchanged: 0/0
  6342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6343 ;;      Params:         0       0       0       0       0       0       0
  6344 ;;      Locals:         0       0       0       0       0       0       0
  6345 ;;      Temps:          0       0       0       0       0       0       0
  6346 ;;      Totals:         0       0       0       0       0       0       0
  6347 ;;Total ram usage:        0 bytes
  6348 ;; Hardware stack levels used:    1
  6349 ;; Hardware stack levels required when called:    8
  6350 ;; This function calls:
  6351 ;;		_UART_buff_init
  6352 ;; This function is called by:
  6353 ;;		_SYSTEM_Initialize
  6354 ;; This function uses a non-reentrant model
  6355 ;;
  6356                           
  6357                           	psect	text36
  6358  001E90                     __ptext36:
  6359                           	opt stack 0
  6360  001E90                     _EUSART1_Initialize:
  6361                           	opt stack 21
  6362                           
  6363                           ;UART.c: 22: PIE1bits.RC1IE = 0;
  6364                           
  6365                           ;incstack = 0
  6366  001E90  9A9D               	bcf	3997,5,c	;volatile
  6367                           
  6368                           ;UART.c: 23: PIE1bits.TX1IE = 0;
  6369  001E92  989D               	bcf	3997,4,c	;volatile
  6370                           
  6371                           ;UART.c: 28: BAUD1CON = 0x48;
  6372  001E94  0E48               	movlw	72
  6373  001E96  6EB8               	movwf	4024,c	;volatile
  6374                           
  6375                           ;UART.c: 31: RC1STA = 0x98;
  6376  001E98  0E98               	movlw	152
  6377  001E9A  6EAB               	movwf	4011,c	;volatile
  6378                           
  6379                           ;UART.c: 34: TX1STA = 0x26;
  6380  001E9C  0E26               	movlw	38
  6381  001E9E  6EAC               	movwf	4012,c	;volatile
  6382                           
  6383                           ;UART.c: 37: SPBRG1 = (((16000000/38400)/4)-1);
  6384  001EA0  0E67               	movlw	103
  6385  001EA2  6EAF               	movwf	4015,c	;volatile
  6386                           
  6387                           ;UART.c: 40: SPBRGH1 = 0x00;
  6388  001EA4  0E00               	movlw	0
  6389  001EA6  6EB0               	movwf	4016,c	;volatile
  6390                           
  6391                           ;UART.c: 43: TXREG1 = 0x00;
  6392  001EA8  0E00               	movlw	0
  6393  001EAA  6EAD               	movwf	4013,c	;volatile
  6394                           
  6395                           ;UART.c: 46: RCREG1 = 0x00;
  6396  001EAC  0E00               	movlw	0
  6397  001EAE  6EAE               	movwf	4014,c	;volatile
  6398                           
  6399                           ;UART.c: 48: UART_buff_init(&input_buffer);
  6400  001EB0  0E3C               	movlw	low _input_buffer
  6401  001EB2  6E25               	movwf	UART_buff_init@_this,c
  6402  001EB4  0E01               	movlw	high _input_buffer
  6403  001EB6  6E26               	movwf	UART_buff_init@_this+1,c
  6404  001EB8  EC7E  F010         	call	_UART_buff_init	;wreg free
  6405                           
  6406                           ;UART.c: 49: UART_buff_init(&output_buffer);
  6407  001EBC  0E00               	movlw	low _output_buffer
  6408  001EBE  6E25               	movwf	UART_buff_init@_this,c
  6409  001EC0  0E02               	movlw	high _output_buffer
  6410  001EC2  6E26               	movwf	UART_buff_init@_this+1,c
  6411  001EC4  EC7E  F010         	call	_UART_buff_init	;wreg free
  6412                           
  6413                           ;UART.c: 51: PIE1bits.RC1IE = 1;
  6414  001EC8  8A9D               	bsf	3997,5,c	;volatile
  6415  001ECA  0012               	return		;funcret
  6416  001ECC                     __end_of_EUSART1_Initialize:
  6417                           	opt stack 0
  6418                           tblptru	equ	0xFF8
  6419                           tblptrh	equ	0xFF7
  6420                           tblptrl	equ	0xFF6
  6421                           tablat	equ	0xFF5
  6422                           prodh	equ	0xFF4
  6423                           prodl	equ	0xFF3
  6424                           intcon	equ	0xFF2
  6425                           intcon2	equ	0xFF1
  6426                           postinc0	equ	0xFEE
  6427                           wreg	equ	0xFE8
  6428                           indf1	equ	0xFE7
  6429                           postdec1	equ	0xFE5
  6430                           fsr1h	equ	0xFE2
  6431                           fsr1l	equ	0xFE1
  6432                           indf2	equ	0xFDF
  6433                           postinc2	equ	0xFDE
  6434                           postdec2	equ	0xFDD
  6435                           plusw2	equ	0xFDB
  6436                           fsr2h	equ	0xFDA
  6437                           fsr2l	equ	0xFD9
  6438                           status	equ	0xFD8
  6439                           
  6440 ;; *************** function _UART_buff_init *****************
  6441 ;; Defined at:
  6442 ;;		line 55 in file "UART.c"
  6443 ;; Parameters:    Size  Location     Type
  6444 ;;  _this           2   36[COMRAM] PTR struct UART_ring_buf
  6445 ;;		 -> output_buffer(106), input_buffer(106), 
  6446 ;; Auto vars:     Size  Location     Type
  6447 ;;		None
  6448 ;; Return value:  Size  Location     Type
  6449 ;;                  1    wreg      void 
  6450 ;; Registers used:
  6451 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6452 ;; Tracked objects:
  6453 ;;		On entry : 0/0
  6454 ;;		On exit  : 0/0
  6455 ;;		Unchanged: 0/0
  6456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6457 ;;      Params:         2       0       0       0       0       0       0
  6458 ;;      Locals:         0       0       0       0       0       0       0
  6459 ;;      Temps:          0       0       0       0       0       0       0
  6460 ;;      Totals:         2       0       0       0       0       0       0
  6461 ;;Total ram usage:        2 bytes
  6462 ;; Hardware stack levels used:    1
  6463 ;; Hardware stack levels required when called:    7
  6464 ;; This function calls:
  6465 ;;		_memset
  6466 ;; This function is called by:
  6467 ;;		_EUSART1_Initialize
  6468 ;; This function uses a non-reentrant model
  6469 ;;
  6470                           
  6471                           	psect	text37
  6472  0020FC                     __ptext37:
  6473                           	opt stack 0
  6474  0020FC                     _UART_buff_init:
  6475                           	opt stack 21
  6476                           
  6477                           ;UART.c: 64: memset(_this, 0, sizeof (*_this));
  6478                           
  6479                           ;incstack = 0
  6480  0020FC  C025  F01D         	movff	UART_buff_init@_this,memset@p1
  6481  002100  C026  F01E         	movff	UART_buff_init@_this+1,memset@p1+1
  6482  002104  0E00               	movlw	0
  6483  002106  6E20               	movwf	memset@c+1,c
  6484  002108  0E00               	movlw	0
  6485  00210A  6E1F               	movwf	memset@c,c
  6486  00210C  0E00               	movlw	0
  6487  00210E  6E22               	movwf	memset@n+1,c
  6488  002110  0E6A               	movlw	106
  6489  002112  6E21               	movwf	memset@n,c
  6490  002114  ECF9  F00F         	call	_memset	;wreg free
  6491  002118  0012               	return		;funcret
  6492  00211A                     __end_of_UART_buff_init:
  6493                           	opt stack 0
  6494                           tblptru	equ	0xFF8
  6495                           tblptrh	equ	0xFF7
  6496                           tblptrl	equ	0xFF6
  6497                           tablat	equ	0xFF5
  6498                           prodh	equ	0xFF4
  6499                           prodl	equ	0xFF3
  6500                           intcon	equ	0xFF2
  6501                           intcon2	equ	0xFF1
  6502                           postinc0	equ	0xFEE
  6503                           wreg	equ	0xFE8
  6504                           indf1	equ	0xFE7
  6505                           postdec1	equ	0xFE5
  6506                           fsr1h	equ	0xFE2
  6507                           fsr1l	equ	0xFE1
  6508                           indf2	equ	0xFDF
  6509                           postinc2	equ	0xFDE
  6510                           postdec2	equ	0xFDD
  6511                           plusw2	equ	0xFDB
  6512                           fsr2h	equ	0xFDA
  6513                           fsr2l	equ	0xFD9
  6514                           status	equ	0xFD8
  6515                           
  6516 ;; *************** function _memset *****************
  6517 ;; Defined at:
  6518 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\memset.c"
  6519 ;; Parameters:    Size  Location     Type
  6520 ;;  p1              2   28[COMRAM] PTR void 
  6521 ;;		 -> output_buffer(106), input_buffer(106), 
  6522 ;;  c               2   30[COMRAM] int 
  6523 ;;  n               2   32[COMRAM] unsigned int 
  6524 ;; Auto vars:     Size  Location     Type
  6525 ;;  p               2   34[COMRAM] PTR unsigned char 
  6526 ;;		 -> output_buffer(106), input_buffer(106), 
  6527 ;; Return value:  Size  Location     Type
  6528 ;;                  2   28[COMRAM] PTR void 
  6529 ;; Registers used:
  6530 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6531 ;; Tracked objects:
  6532 ;;		On entry : 0/0
  6533 ;;		On exit  : 0/0
  6534 ;;		Unchanged: 0/0
  6535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6536 ;;      Params:         6       0       0       0       0       0       0
  6537 ;;      Locals:         2       0       0       0       0       0       0
  6538 ;;      Temps:          0       0       0       0       0       0       0
  6539 ;;      Totals:         8       0       0       0       0       0       0
  6540 ;;Total ram usage:        8 bytes
  6541 ;; Hardware stack levels used:    1
  6542 ;; Hardware stack levels required when called:    6
  6543 ;; This function calls:
  6544 ;;		Nothing
  6545 ;; This function is called by:
  6546 ;;		_UART_buff_init
  6547 ;;		_UART_buff_flush
  6548 ;; This function uses a non-reentrant model
  6549 ;;
  6550                           
  6551                           	psect	text38
  6552  001FF2                     __ptext38:
  6553                           	opt stack 0
  6554  001FF2                     _memset:
  6555                           	opt stack 20
  6556                           
  6557                           ;incstack = 0
  6558  001FF2  C01D  F023         	movff	memset@p1,memset@p
  6559  001FF6  C01E  F024         	movff	memset@p1+1,memset@p+1
  6560  001FFA  D008               	goto	l3730
  6561  001FFC                     l3726:
  6562  001FFC  C023  FFD9         	movff	memset@p,fsr2l
  6563  002000  C024  FFDA         	movff	memset@p+1,fsr2h
  6564  002004  C01F  FFDF         	movff	memset@c,indf2
  6565  002008  4A23               	infsnz	memset@p,f,c
  6566  00200A  2A24               	incf	memset@p+1,f,c
  6567  00200C                     l3730:
  6568  00200C  0621               	decf	memset@n,f,c
  6569  00200E  A0D8               	btfss	status,0,c
  6570  002010  0622               	decf	memset@n+1,f,c
  6571  002012  2821               	incf	memset@n,w,c
  6572  002014  E1F3               	bnz	l3726
  6573  002016  2822               	incf	memset@n+1,w,c
  6574  002018  B4D8               	btfsc	status,2,c
  6575  00201A  0012               	return	
  6576  00201C  D7EF               	goto	l3726
  6577  00201E                     __end_of_memset:
  6578                           	opt stack 0
  6579                           tblptru	equ	0xFF8
  6580                           tblptrh	equ	0xFF7
  6581                           tblptrl	equ	0xFF6
  6582                           tablat	equ	0xFF5
  6583                           prodh	equ	0xFF4
  6584                           prodl	equ	0xFF3
  6585                           intcon	equ	0xFF2
  6586                           intcon2	equ	0xFF1
  6587                           postinc0	equ	0xFEE
  6588                           wreg	equ	0xFE8
  6589                           indf1	equ	0xFE7
  6590                           postdec1	equ	0xFE5
  6591                           fsr1h	equ	0xFE2
  6592                           fsr1l	equ	0xFE1
  6593                           indf2	equ	0xFDF
  6594                           postinc2	equ	0xFDE
  6595                           postdec2	equ	0xFDD
  6596                           plusw2	equ	0xFDB
  6597                           fsr2h	equ	0xFDA
  6598                           fsr2l	equ	0xFD9
  6599                           status	equ	0xFD8
  6600                           
  6601 ;; *************** function _ADC_Initialize *****************
  6602 ;; Defined at:
  6603 ;;		line 59 in file "mcc_generated_files/adc.c"
  6604 ;; Parameters:    Size  Location     Type
  6605 ;;		None
  6606 ;; Auto vars:     Size  Location     Type
  6607 ;;		None
  6608 ;; Return value:  Size  Location     Type
  6609 ;;                  1    wreg      void 
  6610 ;; Registers used:
  6611 ;;		wreg, status,2
  6612 ;; Tracked objects:
  6613 ;;		On entry : 0/0
  6614 ;;		On exit  : 0/0
  6615 ;;		Unchanged: 0/0
  6616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6617 ;;      Params:         0       0       0       0       0       0       0
  6618 ;;      Locals:         0       0       0       0       0       0       0
  6619 ;;      Temps:          0       0       0       0       0       0       0
  6620 ;;      Totals:         0       0       0       0       0       0       0
  6621 ;;Total ram usage:        0 bytes
  6622 ;; Hardware stack levels used:    1
  6623 ;; Hardware stack levels required when called:    6
  6624 ;; This function calls:
  6625 ;;		Nothing
  6626 ;; This function is called by:
  6627 ;;		_SYSTEM_Initialize
  6628 ;; This function uses a non-reentrant model
  6629 ;;
  6630                           
  6631                           	psect	text39
  6632  002138                     __ptext39:
  6633                           	opt stack 0
  6634  002138                     _ADC_Initialize:
  6635                           	opt stack 23
  6636                           
  6637                           ;adc.c: 64: ADCON0 = 0x01;
  6638                           
  6639                           ;incstack = 0
  6640  002138  0E01               	movlw	1
  6641  00213A  6EC2               	movwf	4034,c	;volatile
  6642                           
  6643                           ;adc.c: 67: ADCON1 = 0x80;
  6644  00213C  0E80               	movlw	128
  6645  00213E  6EC1               	movwf	4033,c	;volatile
  6646                           
  6647                           ;adc.c: 70: ADCON2 = 0x12;
  6648  002140  0E12               	movlw	18
  6649  002142  6EC0               	movwf	4032,c	;volatile
  6650                           
  6651                           ;adc.c: 72: ADCON2bits.ADFM = 1;
  6652  002144  8EC0               	bsf	4032,7,c	;volatile
  6653                           
  6654                           ;adc.c: 75: ADRESL = 0x00;
  6655  002146  0E00               	movlw	0
  6656  002148  6EC3               	movwf	4035,c	;volatile
  6657                           
  6658                           ;adc.c: 78: ADRESH = 0x00;
  6659  00214A  0E00               	movlw	0
  6660  00214C  6EC4               	movwf	4036,c	;volatile
  6661  00214E  0012               	return		;funcret
  6662  002150                     __end_of_ADC_Initialize:
  6663                           	opt stack 0
  6664                           tblptru	equ	0xFF8
  6665                           tblptrh	equ	0xFF7
  6666                           tblptrl	equ	0xFF6
  6667                           tablat	equ	0xFF5
  6668                           prodh	equ	0xFF4
  6669                           prodl	equ	0xFF3
  6670                           intcon	equ	0xFF2
  6671                           intcon2	equ	0xFF1
  6672                           postinc0	equ	0xFEE
  6673                           wreg	equ	0xFE8
  6674                           indf1	equ	0xFE7
  6675                           postdec1	equ	0xFE5
  6676                           fsr1h	equ	0xFE2
  6677                           fsr1l	equ	0xFE1
  6678                           indf2	equ	0xFDF
  6679                           postinc2	equ	0xFDE
  6680                           postdec2	equ	0xFDD
  6681                           plusw2	equ	0xFDB
  6682                           fsr2h	equ	0xFDA
  6683                           fsr2l	equ	0xFD9
  6684                           status	equ	0xFD8
  6685                           
  6686 ;; *************** function _PDUStartup *****************
  6687 ;; Defined at:
  6688 ;;		line 20 in file "PDU.c"
  6689 ;; Parameters:    Size  Location     Type
  6690 ;;		None
  6691 ;; Auto vars:     Size  Location     Type
  6692 ;;		None
  6693 ;; Return value:  Size  Location     Type
  6694 ;;                  1    wreg      void 
  6695 ;; Registers used:
  6696 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6697 ;; Tracked objects:
  6698 ;;		On entry : 0/0
  6699 ;;		On exit  : 0/0
  6700 ;;		Unchanged: 0/0
  6701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6702 ;;      Params:         0       0       0       0       0       0       0
  6703 ;;      Locals:         0       0       0       0       0       0       0
  6704 ;;      Temps:          0       0       0       0       0       0       0
  6705 ;;      Totals:         0       0       0       0       0       0       0
  6706 ;;Total ram usage:        0 bytes
  6707 ;; Hardware stack levels used:    1
  6708 ;; Hardware stack levels required when called:   10
  6709 ;; This function calls:
  6710 ;;		_ComputeStorageData
  6711 ;;		_EnableSlavePower
  6712 ;;		_StartUp595
  6713 ;;		_Update
  6714 ;; This function is called by:
  6715 ;;		_main
  6716 ;; This function uses a non-reentrant model
  6717 ;;
  6718                           
  6719                           	psect	text40
  6720  001B06                     __ptext40:
  6721                           	opt stack 0
  6722  001B06                     _PDUStartup:
  6723                           	opt stack 20
  6724                           
  6725                           ;PDU.c: 23: StartUp595();
  6726                           
  6727                           ;incstack = 0
  6728  001B06  ECB4  F00D         	call	_StartUp595	;wreg free
  6729                           
  6730                           ;PDU.c: 24: EnableSlavePower(SAS, ON);
  6731  001B0A  0E00               	movlw	0
  6732  001B0C  6E28               	movwf	EnableSlavePower@onof+1,c
  6733  001B0E  0E01               	movlw	1
  6734  001B10  6E27               	movwf	EnableSlavePower@onof,c
  6735  001B12  0E03               	movlw	3
  6736  001B14  ECEA  F009         	call	_EnableSlavePower
  6737                           
  6738                           ;PDU.c: 25: EnableSlavePower(DDS, ON);
  6739  001B18  0E00               	movlw	0
  6740  001B1A  6E28               	movwf	EnableSlavePower@onof+1,c
  6741  001B1C  0E01               	movlw	1
  6742  001B1E  6E27               	movwf	EnableSlavePower@onof,c
  6743  001B20  0E01               	movlw	1
  6744  001B22  ECEA  F009         	call	_EnableSlavePower
  6745                           
  6746                           ;PDU.c: 26: EnableSlavePower(MCS, OFF);
  6747  001B26  0E00               	movlw	0
  6748  001B28  6E28               	movwf	EnableSlavePower@onof+1,c
  6749  001B2A  0E00               	movlw	0
  6750  001B2C  6E27               	movwf	EnableSlavePower@onof,c
  6751  001B2E  0E02               	movlw	2
  6752  001B30  ECEA  F009         	call	_EnableSlavePower
  6753                           
  6754                           ;PDU.c: 27: EnableSlavePower(BMM, ON);
  6755  001B34  0E00               	movlw	0
  6756  001B36  6E28               	movwf	EnableSlavePower@onof+1,c
  6757  001B38  0E01               	movlw	1
  6758  001B3A  6E27               	movwf	EnableSlavePower@onof,c
  6759  001B3C  0E04               	movlw	4
  6760  001B3E  ECEA  F009         	call	_EnableSlavePower
  6761                           
  6762                           ;PDU.c: 28: EnableSlavePower(TSS, OFF);
  6763  001B42  0E00               	movlw	0
  6764  001B44  6E28               	movwf	EnableSlavePower@onof+1,c
  6765  001B46  0E00               	movlw	0
  6766  001B48  6E27               	movwf	EnableSlavePower@onof,c
  6767  001B4A  0E05               	movlw	5
  6768  001B4C  ECEA  F009         	call	_EnableSlavePower
  6769                           
  6770                           ;PDU.c: 29: EnableSlavePower(AUX, OFF);
  6771  001B50  0E00               	movlw	0
  6772  001B52  6E28               	movwf	EnableSlavePower@onof+1,c
  6773  001B54  0E00               	movlw	0
  6774  001B56  6E27               	movwf	EnableSlavePower@onof,c
  6775  001B58  0E06               	movlw	6
  6776  001B5A  ECEA  F009         	call	_EnableSlavePower
  6777                           
  6778                           ;PDU.c: 30: Update();
  6779  001B5E  EC1D  F011         	call	_Update	;wreg free
  6780                           
  6781                           ;PDU.c: 32: ComputeStorageData();
  6782  001B62  EC5C  F00A         	call	_ComputeStorageData	;wreg free
  6783  001B66  0012               	return		;funcret
  6784  001B68                     __end_of_PDUStartup:
  6785                           	opt stack 0
  6786                           tblptru	equ	0xFF8
  6787                           tblptrh	equ	0xFF7
  6788                           tblptrl	equ	0xFF6
  6789                           tablat	equ	0xFF5
  6790                           prodh	equ	0xFF4
  6791                           prodl	equ	0xFF3
  6792                           intcon	equ	0xFF2
  6793                           intcon2	equ	0xFF1
  6794                           postinc0	equ	0xFEE
  6795                           wreg	equ	0xFE8
  6796                           indf1	equ	0xFE7
  6797                           postdec1	equ	0xFE5
  6798                           fsr1h	equ	0xFE2
  6799                           fsr1l	equ	0xFE1
  6800                           indf2	equ	0xFDF
  6801                           postinc2	equ	0xFDE
  6802                           postdec2	equ	0xFDD
  6803                           plusw2	equ	0xFDB
  6804                           fsr2h	equ	0xFDA
  6805                           fsr2l	equ	0xFD9
  6806                           status	equ	0xFD8
  6807                           
  6808 ;; *************** function _Update *****************
  6809 ;; Defined at:
  6810 ;;		line 225 in file "PDU.c"
  6811 ;; Parameters:    Size  Location     Type
  6812 ;;		None
  6813 ;; Auto vars:     Size  Location     Type
  6814 ;;		None
  6815 ;; Return value:  Size  Location     Type
  6816 ;;                  1    wreg      void 
  6817 ;; Registers used:
  6818 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6819 ;; Tracked objects:
  6820 ;;		On entry : 0/0
  6821 ;;		On exit  : 0/0
  6822 ;;		Unchanged: 0/0
  6823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6824 ;;      Params:         0       0       0       0       0       0       0
  6825 ;;      Locals:         0       0       0       0       0       0       0
  6826 ;;      Temps:          0       0       0       0       0       0       0
  6827 ;;      Totals:         0       0       0       0       0       0       0
  6828 ;;Total ram usage:        0 bytes
  6829 ;; Hardware stack levels used:    1
  6830 ;; Hardware stack levels required when called:    8
  6831 ;; This function calls:
  6832 ;;		_writeRegisters
  6833 ;; This function is called by:
  6834 ;;		_processPowerRequest
  6835 ;;		_PDUStartup
  6836 ;; This function uses a non-reentrant model
  6837 ;;
  6838                           
  6839                           	psect	text41
  6840  00223A                     __ptext41:
  6841                           	opt stack 0
  6842  00223A                     _Update:
  6843                           	opt stack 20
  6844                           
  6845                           ;PDU.c: 226: writeRegisters();
  6846                           
  6847                           ;incstack = 0
  6848  00223A  EC58  F00C         	call	_writeRegisters	;wreg free
  6849  00223E  0012               	return		;funcret
  6850  002240                     __end_of_Update:
  6851                           	opt stack 0
  6852                           tblptru	equ	0xFF8
  6853                           tblptrh	equ	0xFF7
  6854                           tblptrl	equ	0xFF6
  6855                           tablat	equ	0xFF5
  6856                           prodh	equ	0xFF4
  6857                           prodl	equ	0xFF3
  6858                           intcon	equ	0xFF2
  6859                           intcon2	equ	0xFF1
  6860                           postinc0	equ	0xFEE
  6861                           wreg	equ	0xFE8
  6862                           indf1	equ	0xFE7
  6863                           postdec1	equ	0xFE5
  6864                           fsr1h	equ	0xFE2
  6865                           fsr1l	equ	0xFE1
  6866                           indf2	equ	0xFDF
  6867                           postinc2	equ	0xFDE
  6868                           postdec2	equ	0xFDD
  6869                           plusw2	equ	0xFDB
  6870                           fsr2h	equ	0xFDA
  6871                           fsr2l	equ	0xFD9
  6872                           status	equ	0xFD8
  6873                           
  6874 ;; *************** function _StartUp595 *****************
  6875 ;; Defined at:
  6876 ;;		line 10 in file "Shift595.c"
  6877 ;; Parameters:    Size  Location     Type
  6878 ;;		None
  6879 ;; Auto vars:     Size  Location     Type
  6880 ;;		None
  6881 ;; Return value:  Size  Location     Type
  6882 ;;                  1    wreg      void 
  6883 ;; Registers used:
  6884 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6885 ;; Tracked objects:
  6886 ;;		On entry : 0/0
  6887 ;;		On exit  : 0/0
  6888 ;;		Unchanged: 0/0
  6889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6890 ;;      Params:         0       0       0       0       0       0       0
  6891 ;;      Locals:         0       0       0       0       0       0       0
  6892 ;;      Temps:          0       0       0       0       0       0       0
  6893 ;;      Totals:         0       0       0       0       0       0       0
  6894 ;;Total ram usage:        0 bytes
  6895 ;; Hardware stack levels used:    1
  6896 ;; Hardware stack levels required when called:    9
  6897 ;; This function calls:
  6898 ;;		_Clear595
  6899 ;;		_Delay
  6900 ;; This function is called by:
  6901 ;;		_PDUStartup
  6902 ;; This function uses a non-reentrant model
  6903 ;;
  6904                           
  6905                           	psect	text42
  6906  001B68                     __ptext42:
  6907                           	opt stack 0
  6908  001B68                     _StartUp595:
  6909                           	opt stack 20
  6910                           
  6911                           ;incstack = 0
  6912                           ;Shift595.c: 12: do { LATD5 = 1; } while(0);
  6913  001B68  8A8C               	bsf	3980,5,c	;volatile
  6914                           
  6915                           ;Shift595.c: 13: do { LATB0 = 1; } while(0);
  6916  001B6A  808A               	bsf	3978,0,c	;volatile
  6917                           
  6918                           ;Shift595.c: 15: Delay(2);
  6919  001B6C  0E02               	movlw	2
  6920  001B6E  6E1D               	movwf	Delay@wait,c
  6921  001B70  0E00               	movlw	0
  6922  001B72  6E1E               	movwf	Delay@wait+1,c
  6923  001B74  0E00               	movlw	0
  6924  001B76  6E1F               	movwf	Delay@wait+2,c
  6925  001B78  0E00               	movlw	0
  6926  001B7A  6E20               	movwf	Delay@wait+3,c
  6927  001B7C  ECDA  F00E         	call	_Delay	;wreg free
  6928                           
  6929                           ;Shift595.c: 16: do { LATD5 = 0; } while(0);
  6930  001B80  9A8C               	bcf	3980,5,c	;volatile
  6931                           
  6932                           ;Shift595.c: 17: Delay(2);
  6933  001B82  0E02               	movlw	2
  6934  001B84  6E1D               	movwf	Delay@wait,c
  6935  001B86  0E00               	movlw	0
  6936  001B88  6E1E               	movwf	Delay@wait+1,c
  6937  001B8A  0E00               	movlw	0
  6938  001B8C  6E1F               	movwf	Delay@wait+2,c
  6939  001B8E  0E00               	movlw	0
  6940  001B90  6E20               	movwf	Delay@wait+3,c
  6941  001B92  ECDA  F00E         	call	_Delay	;wreg free
  6942                           
  6943                           ;Shift595.c: 18: do { LATB0 = 0; } while(0);
  6944  001B96  908A               	bcf	3978,0,c	;volatile
  6945                           
  6946                           ;Shift595.c: 19: Delay(2);
  6947  001B98  0E02               	movlw	2
  6948  001B9A  6E1D               	movwf	Delay@wait,c
  6949  001B9C  0E00               	movlw	0
  6950  001B9E  6E1E               	movwf	Delay@wait+1,c
  6951  001BA0  0E00               	movlw	0
  6952  001BA2  6E1F               	movwf	Delay@wait+2,c
  6953  001BA4  0E00               	movlw	0
  6954  001BA6  6E20               	movwf	Delay@wait+3,c
  6955  001BA8  ECDA  F00E         	call	_Delay	;wreg free
  6956                           
  6957                           ;Shift595.c: 20: do { LATD5 = 1; } while(0);
  6958  001BAC  8A8C               	bsf	3980,5,c	;volatile
  6959                           
  6960                           ;Shift595.c: 21: Delay(2);
  6961  001BAE  0E02               	movlw	2
  6962  001BB0  6E1D               	movwf	Delay@wait,c
  6963  001BB2  0E00               	movlw	0
  6964  001BB4  6E1E               	movwf	Delay@wait+1,c
  6965  001BB6  0E00               	movlw	0
  6966  001BB8  6E1F               	movwf	Delay@wait+2,c
  6967  001BBA  0E00               	movlw	0
  6968  001BBC  6E20               	movwf	Delay@wait+3,c
  6969  001BBE  ECDA  F00E         	call	_Delay	;wreg free
  6970                           
  6971                           ;Shift595.c: 22: do { LATB0 = 1; } while(0);
  6972  001BC2  808A               	bsf	3978,0,c	;volatile
  6973                           
  6974                           ;Shift595.c: 24: Clear595();
  6975  001BC4  EC66  F00F         	call	_Clear595	;wreg free
  6976  001BC8  0012               	return		;funcret
  6977  001BCA                     __end_of_StartUp595:
  6978                           	opt stack 0
  6979                           tblptru	equ	0xFF8
  6980                           tblptrh	equ	0xFF7
  6981                           tblptrl	equ	0xFF6
  6982                           tablat	equ	0xFF5
  6983                           prodh	equ	0xFF4
  6984                           prodl	equ	0xFF3
  6985                           intcon	equ	0xFF2
  6986                           intcon2	equ	0xFF1
  6987                           postinc0	equ	0xFEE
  6988                           wreg	equ	0xFE8
  6989                           indf1	equ	0xFE7
  6990                           postdec1	equ	0xFE5
  6991                           fsr1h	equ	0xFE2
  6992                           fsr1l	equ	0xFE1
  6993                           indf2	equ	0xFDF
  6994                           postinc2	equ	0xFDE
  6995                           postdec2	equ	0xFDD
  6996                           plusw2	equ	0xFDB
  6997                           fsr2h	equ	0xFDA
  6998                           fsr2l	equ	0xFD9
  6999                           status	equ	0xFD8
  7000                           
  7001 ;; *************** function _Clear595 *****************
  7002 ;; Defined at:
  7003 ;;		line 39 in file "Shift595.c"
  7004 ;; Parameters:    Size  Location     Type
  7005 ;;		None
  7006 ;; Auto vars:     Size  Location     Type
  7007 ;;  i               2   41[COMRAM] int 
  7008 ;; Return value:  Size  Location     Type
  7009 ;;                  1    wreg      void 
  7010 ;; Registers used:
  7011 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7012 ;; Tracked objects:
  7013 ;;		On entry : 0/0
  7014 ;;		On exit  : 0/0
  7015 ;;		Unchanged: 0/0
  7016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7017 ;;      Params:         0       0       0       0       0       0       0
  7018 ;;      Locals:         2       0       0       0       0       0       0
  7019 ;;      Temps:          0       0       0       0       0       0       0
  7020 ;;      Totals:         2       0       0       0       0       0       0
  7021 ;;Total ram usage:        2 bytes
  7022 ;; Hardware stack levels used:    1
  7023 ;; Hardware stack levels required when called:    8
  7024 ;; This function calls:
  7025 ;;		_writeRegisters
  7026 ;; This function is called by:
  7027 ;;		_StartUp595
  7028 ;; This function uses a non-reentrant model
  7029 ;;
  7030                           
  7031                           	psect	text43
  7032  001ECC                     __ptext43:
  7033                           	opt stack 0
  7034  001ECC                     _Clear595:
  7035                           	opt stack 20
  7036                           
  7037                           ;Shift595.c: 40: for (int i = 3 * 8 - 1; i >= 0; i--) {
  7038                           
  7039                           ;incstack = 0
  7040  001ECC  0E00               	movlw	0
  7041  001ECE  6E2B               	movwf	Clear595@i+1,c
  7042  001ED0  0E17               	movlw	23
  7043  001ED2  6E2A               	movwf	Clear595@i,c
  7044  001ED4                     l4088:
  7045  001ED4  BE2B               	btfsc	Clear595@i+1,7,c
  7046  001ED6  D011               	goto	l4098
  7047                           
  7048                           ;Shift595.c: 41: registers[i] = 0;
  7049  001ED8  90D8               	bcf	status,0,c
  7050  001EDA  342A               	rlcf	Clear595@i,w,c
  7051  001EDC  6ED9               	movwf	fsr2l,c
  7052  001EDE  342B               	rlcf	Clear595@i+1,w,c
  7053  001EE0  6EDA               	movwf	fsr2h,c
  7054  001EE2  0E00               	movlw	low _registers
  7055  001EE4  26D9               	addwf	fsr2l,f,c
  7056  001EE6  0E01               	movlw	high _registers
  7057  001EE8  22DA               	addwfc	fsr2h,f,c
  7058  001EEA  0E00               	movlw	0
  7059  001EEC  6EDE               	movwf	postinc2,c
  7060  001EEE  0E00               	movlw	0
  7061  001EF0  6EDD               	movwf	postdec2,c
  7062  001EF2  062A               	decf	Clear595@i,f,c
  7063  001EF4  A0D8               	btfss	status,0,c
  7064  001EF6  062B               	decf	Clear595@i+1,f,c
  7065  001EF8  D7ED               	goto	l4088
  7066  001EFA                     l4098:
  7067                           
  7068                           ;Shift595.c: 42: }
  7069                           ;Shift595.c: 44: writeRegisters();
  7070  001EFA  EC58  F00C         	call	_writeRegisters	;wreg free
  7071  001EFE  0012               	return		;funcret
  7072  001F00                     __end_of_Clear595:
  7073                           	opt stack 0
  7074                           tblptru	equ	0xFF8
  7075                           tblptrh	equ	0xFF7
  7076                           tblptrl	equ	0xFF6
  7077                           tablat	equ	0xFF5
  7078                           prodh	equ	0xFF4
  7079                           prodl	equ	0xFF3
  7080                           intcon	equ	0xFF2
  7081                           intcon2	equ	0xFF1
  7082                           postinc0	equ	0xFEE
  7083                           wreg	equ	0xFE8
  7084                           indf1	equ	0xFE7
  7085                           postdec1	equ	0xFE5
  7086                           fsr1h	equ	0xFE2
  7087                           fsr1l	equ	0xFE1
  7088                           indf2	equ	0xFDF
  7089                           postinc2	equ	0xFDE
  7090                           postdec2	equ	0xFDD
  7091                           plusw2	equ	0xFDB
  7092                           fsr2h	equ	0xFDA
  7093                           fsr2l	equ	0xFD9
  7094                           status	equ	0xFD8
  7095                           
  7096 ;; *************** function _writeRegisters *****************
  7097 ;; Defined at:
  7098 ;;		line 50 in file "Shift595.c"
  7099 ;; Parameters:    Size  Location     Type
  7100 ;;		None
  7101 ;; Auto vars:     Size  Location     Type
  7102 ;;  i               2   39[COMRAM] int 
  7103 ;;  val             2   37[COMRAM] int 
  7104 ;; Return value:  Size  Location     Type
  7105 ;;                  1    wreg      void 
  7106 ;; Registers used:
  7107 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7108 ;; Tracked objects:
  7109 ;;		On entry : 0/0
  7110 ;;		On exit  : 0/0
  7111 ;;		Unchanged: 0/0
  7112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7113 ;;      Params:         0       0       0       0       0       0       0
  7114 ;;      Locals:         4       0       0       0       0       0       0
  7115 ;;      Temps:          0       0       0       0       0       0       0
  7116 ;;      Totals:         4       0       0       0       0       0       0
  7117 ;;Total ram usage:        4 bytes
  7118 ;; Hardware stack levels used:    1
  7119 ;; Hardware stack levels required when called:    7
  7120 ;; This function calls:
  7121 ;;		_Delay
  7122 ;; This function is called by:
  7123 ;;		_Update
  7124 ;;		_Clear595
  7125 ;; This function uses a non-reentrant model
  7126 ;;
  7127                           
  7128                           	psect	text44
  7129  0018B0                     __ptext44:
  7130                           	opt stack 0
  7131  0018B0                     _writeRegisters:
  7132                           	opt stack 20
  7133                           
  7134                           ;Shift595.c: 51: int val = 0;
  7135                           
  7136                           ;incstack = 0
  7137  0018B0  0E00               	movlw	0
  7138  0018B2  6E27               	movwf	writeRegisters@val+1,c
  7139  0018B4  0E00               	movlw	0
  7140  0018B6  6E26               	movwf	writeRegisters@val,c
  7141                           
  7142                           ;Shift595.c: 52: for (int i = 3 * 8 - 1; i >= 0; i--) {
  7143  0018B8  0E00               	movlw	0
  7144  0018BA  6E29               	movwf	writeRegisters@i+1,c
  7145  0018BC  0E17               	movlw	23
  7146  0018BE  6E28               	movwf	writeRegisters@i,c
  7147  0018C0                     l3894:
  7148  0018C0  BE29               	btfsc	writeRegisters@i+1,7,c
  7149  0018C2  D01D               	goto	l554
  7150                           
  7151                           ;Shift595.c: 53: do { LATD7 = 0; } while(0);
  7152  0018C4  9E8C               	bcf	3980,7,c	;volatile
  7153                           
  7154                           ;Shift595.c: 55: val = registers[i];
  7155  0018C6  90D8               	bcf	status,0,c
  7156  0018C8  3428               	rlcf	writeRegisters@i,w,c
  7157  0018CA  6ED9               	movwf	fsr2l,c
  7158  0018CC  3429               	rlcf	writeRegisters@i+1,w,c
  7159  0018CE  6EDA               	movwf	fsr2h,c
  7160  0018D0  0E00               	movlw	low _registers
  7161  0018D2  26D9               	addwf	fsr2l,f,c
  7162  0018D4  0E01               	movlw	high _registers
  7163  0018D6  22DA               	addwfc	fsr2h,f,c
  7164  0018D8  CFDE F026          	movff	postinc2,writeRegisters@val
  7165  0018DC  CFDD F027          	movff	postdec2,writeRegisters@val+1
  7166                           
  7167                           ;Shift595.c: 56: if (val == 1) {
  7168  0018E0  0426               	decf	writeRegisters@val,w,c
  7169  0018E2  1027               	iorwf	writeRegisters@val+1,w,c
  7170  0018E4  A4D8               	btfss	status,2,c
  7171  0018E6  D002               	goto	l3902
  7172                           
  7173                           ;Shift595.c: 57: do { LATD4 = 1; } while(0);
  7174  0018E8  888C               	bsf	3980,4,c	;volatile
  7175                           
  7176                           ;Shift595.c: 58: } else if (val == 0) {
  7177  0018EA  D004               	goto	l552
  7178  0018EC                     l3902:
  7179  0018EC  5026               	movf	writeRegisters@val,w,c
  7180  0018EE  1027               	iorwf	writeRegisters@val+1,w,c
  7181  0018F0  B4D8               	btfsc	status,2,c
  7182                           
  7183                           ;Shift595.c: 59: do { LATD4 = 0; } while(0);
  7184  0018F2  988C               	bcf	3980,4,c	;volatile
  7185  0018F4                     l552:
  7186  0018F4  8E8C               	bsf	3980,7,c	;volatile
  7187  0018F6  0628               	decf	writeRegisters@i,f,c
  7188  0018F8  A0D8               	btfss	status,0,c
  7189  0018FA  0629               	decf	writeRegisters@i+1,f,c
  7190  0018FC  D7E1               	goto	l3894
  7191  0018FE                     l554:
  7192  0018FE  9E8C               	bcf	3980,7,c	;volatile
  7193                           
  7194                           ;Shift595.c: 67: Delay(1);
  7195  001900  0E01               	movlw	1
  7196  001902  6E1D               	movwf	Delay@wait,c
  7197  001904  0E00               	movlw	0
  7198  001906  6E1E               	movwf	Delay@wait+1,c
  7199  001908  0E00               	movlw	0
  7200  00190A  6E1F               	movwf	Delay@wait+2,c
  7201  00190C  0E00               	movlw	0
  7202  00190E  6E20               	movwf	Delay@wait+3,c
  7203  001910  ECDA  F00E         	call	_Delay	;wreg free
  7204                           
  7205                           ;Shift595.c: 68: do { LATD6 = 1; } while(0);
  7206  001914  8C8C               	bsf	3980,6,c	;volatile
  7207                           
  7208                           ;Shift595.c: 69: Delay(1);
  7209  001916  0E01               	movlw	1
  7210  001918  6E1D               	movwf	Delay@wait,c
  7211  00191A  0E00               	movlw	0
  7212  00191C  6E1E               	movwf	Delay@wait+1,c
  7213  00191E  0E00               	movlw	0
  7214  001920  6E1F               	movwf	Delay@wait+2,c
  7215  001922  0E00               	movlw	0
  7216  001924  6E20               	movwf	Delay@wait+3,c
  7217  001926  ECDA  F00E         	call	_Delay	;wreg free
  7218                           
  7219                           ;Shift595.c: 70: do { LATD6 = 0; } while(0);
  7220  00192A  9C8C               	bcf	3980,6,c	;volatile
  7221  00192C  0012               	return	
  7222  00192E                     __end_of_writeRegisters:
  7223                           	opt stack 0
  7224                           tblptru	equ	0xFF8
  7225                           tblptrh	equ	0xFF7
  7226                           tblptrl	equ	0xFF6
  7227                           tablat	equ	0xFF5
  7228                           prodh	equ	0xFF4
  7229                           prodl	equ	0xFF3
  7230                           intcon	equ	0xFF2
  7231                           intcon2	equ	0xFF1
  7232                           postinc0	equ	0xFEE
  7233                           wreg	equ	0xFE8
  7234                           indf1	equ	0xFE7
  7235                           postdec1	equ	0xFE5
  7236                           fsr1h	equ	0xFE2
  7237                           fsr1l	equ	0xFE1
  7238                           indf2	equ	0xFDF
  7239                           postinc2	equ	0xFDE
  7240                           postdec2	equ	0xFDD
  7241                           plusw2	equ	0xFDB
  7242                           fsr2h	equ	0xFDA
  7243                           fsr2l	equ	0xFD9
  7244                           status	equ	0xFD8
  7245                           
  7246 ;; *************** function _Delay *****************
  7247 ;; Defined at:
  7248 ;;		line 9 in file "Functions.c"
  7249 ;; Parameters:    Size  Location     Type
  7250 ;;  wait            4   28[COMRAM] long 
  7251 ;; Auto vars:     Size  Location     Type
  7252 ;;  i               4   33[COMRAM] long 
  7253 ;; Return value:  Size  Location     Type
  7254 ;;                  1    wreg      void 
  7255 ;; Registers used:
  7256 ;;		wreg, status,2, status,0
  7257 ;; Tracked objects:
  7258 ;;		On entry : 0/0
  7259 ;;		On exit  : 0/0
  7260 ;;		Unchanged: 0/0
  7261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7262 ;;      Params:         4       0       0       0       0       0       0
  7263 ;;      Locals:         4       0       0       0       0       0       0
  7264 ;;      Temps:          1       0       0       0       0       0       0
  7265 ;;      Totals:         9       0       0       0       0       0       0
  7266 ;;Total ram usage:        9 bytes
  7267 ;; Hardware stack levels used:    1
  7268 ;; Hardware stack levels required when called:    6
  7269 ;; This function calls:
  7270 ;;		Nothing
  7271 ;; This function is called by:
  7272 ;;		_StartUp595
  7273 ;;		_writeRegisters
  7274 ;;		_PotSetpoint
  7275 ;;		_PotClear
  7276 ;;		_ComController
  7277 ;; This function uses a non-reentrant model
  7278 ;;
  7279                           
  7280                           	psect	text45
  7281  001DB4                     __ptext45:
  7282                           	opt stack 0
  7283  001DB4                     _Delay:
  7284                           	opt stack 21
  7285                           
  7286                           ;Functions.c: 10: long int i = 0;
  7287                           
  7288                           ;incstack = 0
  7289  001DB4  0E00               	movlw	0
  7290  001DB6  6E22               	movwf	Delay@i,c
  7291  001DB8  0E00               	movlw	0
  7292  001DBA  6E23               	movwf	Delay@i+1,c
  7293  001DBC  0E00               	movlw	0
  7294  001DBE  6E24               	movwf	Delay@i+2,c
  7295  001DC0  0E00               	movlw	0
  7296  001DC2  6E25               	movwf	Delay@i+3,c
  7297                           
  7298                           ;Functions.c: 11: for (; wait > i; i++) {
  7299  001DC4  D00D               	goto	l3722
  7300  001DC6                     l3718:
  7301                           
  7302                           ;Functions.c: 12: _delay((unsigned long)((1)*(8000000/4000.0)));
  7303  001DC6  0E03               	movlw	3
  7304  001DC8  6E21               	movwf	??_Delay& (0+255),c
  7305  001DCA  0E98               	movlw	152
  7306  001DCC                     u3027:
  7307  001DCC  2EE8               	decfsz	wreg,f,c
  7308  001DCE  D7FE               	bra	u3027
  7309  001DD0  2E21               	decfsz	??_Delay& (0+255),f,c
  7310  001DD2  D7FC               	bra	u3027
  7311  001DD4  0E01               	movlw	1
  7312  001DD6  2622               	addwf	Delay@i,f,c
  7313  001DD8  0E00               	movlw	0
  7314  001DDA  2223               	addwfc	Delay@i+1,f,c
  7315  001DDC  2224               	addwfc	Delay@i+2,f,c
  7316  001DDE  2225               	addwfc	Delay@i+3,f,c
  7317  001DE0                     l3722:
  7318  001DE0  501D               	movf	Delay@wait,w,c
  7319  001DE2  5C22               	subwf	Delay@i,w,c
  7320  001DE4  501E               	movf	Delay@wait+1,w,c
  7321  001DE6  5823               	subwfb	Delay@i+1,w,c
  7322  001DE8  501F               	movf	Delay@wait+2,w,c
  7323  001DEA  5824               	subwfb	Delay@i+2,w,c
  7324  001DEC  5025               	movf	Delay@i+3,w,c
  7325  001DEE  0A80               	xorlw	128
  7326  001DF0  6E21               	movwf	??_Delay& (0+255),c
  7327  001DF2  5020               	movf	Delay@wait+3,w,c
  7328  001DF4  0A80               	xorlw	128
  7329  001DF6  5821               	subwfb	??_Delay& (0+255),w,c
  7330  001DF8  B0D8               	btfsc	status,0,c
  7331  001DFA  0012               	return	
  7332  001DFC  D7E4               	goto	l3718
  7333  001DFE                     __end_of_Delay:
  7334                           	opt stack 0
  7335                           tblptru	equ	0xFF8
  7336                           tblptrh	equ	0xFF7
  7337                           tblptrl	equ	0xFF6
  7338                           tablat	equ	0xFF5
  7339                           prodh	equ	0xFF4
  7340                           prodl	equ	0xFF3
  7341                           intcon	equ	0xFF2
  7342                           intcon2	equ	0xFF1
  7343                           postinc0	equ	0xFEE
  7344                           wreg	equ	0xFE8
  7345                           indf1	equ	0xFE7
  7346                           postdec1	equ	0xFE5
  7347                           fsr1h	equ	0xFE2
  7348                           fsr1l	equ	0xFE1
  7349                           indf2	equ	0xFDF
  7350                           postinc2	equ	0xFDE
  7351                           postdec2	equ	0xFDD
  7352                           plusw2	equ	0xFDB
  7353                           fsr2h	equ	0xFDA
  7354                           fsr2l	equ	0xFD9
  7355                           status	equ	0xFD8
  7356                           
  7357 ;; *************** function _EnableSlavePower *****************
  7358 ;; Defined at:
  7359 ;;		line 37 in file "PDU.c"
  7360 ;; Parameters:    Size  Location     Type
  7361 ;;  slave           1    wreg     enum E6
  7362 ;;  onof            2   38[COMRAM] int 
  7363 ;; Auto vars:     Size  Location     Type
  7364 ;;  slave           1   40[COMRAM] enum E6
  7365 ;; Return value:  Size  Location     Type
  7366 ;;                  1    wreg      void 
  7367 ;; Registers used:
  7368 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7369 ;; Tracked objects:
  7370 ;;		On entry : 0/0
  7371 ;;		On exit  : 0/0
  7372 ;;		Unchanged: 0/0
  7373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7374 ;;      Params:         2       0       0       0       0       0       0
  7375 ;;      Locals:         1       0       0       0       0       0       0
  7376 ;;      Temps:          0       0       0       0       0       0       0
  7377 ;;      Totals:         3       0       0       0       0       0       0
  7378 ;;Total ram usage:        3 bytes
  7379 ;; Hardware stack levels used:    1
  7380 ;; Hardware stack levels required when called:    7
  7381 ;; This function calls:
  7382 ;;		_SetPin595
  7383 ;; This function is called by:
  7384 ;;		_processPowerRequest
  7385 ;;		_PDUStartup
  7386 ;; This function uses a non-reentrant model
  7387 ;;
  7388                           
  7389                           	psect	text46
  7390  0013D4                     __ptext46:
  7391                           	opt stack 0
  7392  0013D4                     _EnableSlavePower:
  7393                           	opt stack 21
  7394                           
  7395                           ;incstack = 0
  7396                           ;EnableSlavePower@slave stored from wreg
  7397  0013D4  6E29               	movwf	EnableSlavePower@slave,c
  7398                           
  7399                           ;PDU.c: 38: switch (slave) {
  7400  0013D6  D05C               	goto	l4074
  7401  0013D8                     l4058:
  7402                           
  7403                           ;PDU.c: 40: SetPin595(2, 6, onof);
  7404  0013D8  0E00               	movlw	0
  7405  0013DA  6E1E               	movwf	SetPin595@Reg+1,c
  7406  0013DC  0E02               	movlw	2
  7407  0013DE  6E1D               	movwf	SetPin595@Reg,c
  7408  0013E0  0E00               	movlw	0
  7409  0013E2  6E20               	movwf	SetPin595@pin+1,c
  7410  0013E4  0E06               	movlw	6
  7411  0013E6  6E1F               	movwf	SetPin595@pin,c
  7412  0013E8  C027  F021         	movff	EnableSlavePower@onof,SetPin595@value
  7413  0013EC  C028  F022         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  7414  0013F0  EC42  F00E         	call	_SetPin595	;wreg free
  7415                           
  7416                           ;PDU.c: 41: break;
  7417  0013F4  0012               	return	
  7418  0013F6                     l4060:
  7419                           
  7420                           ;PDU.c: 43: SetPin595(1, 1, onof);
  7421  0013F6  0E00               	movlw	0
  7422  0013F8  6E1E               	movwf	SetPin595@Reg+1,c
  7423  0013FA  0E01               	movlw	1
  7424  0013FC  6E1D               	movwf	SetPin595@Reg,c
  7425  0013FE  0E00               	movlw	0
  7426  001400  6E20               	movwf	SetPin595@pin+1,c
  7427  001402  0E01               	movlw	1
  7428  001404  6E1F               	movwf	SetPin595@pin,c
  7429  001406  C027  F021         	movff	EnableSlavePower@onof,SetPin595@value
  7430  00140A  C028  F022         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  7431  00140E  EC42  F00E         	call	_SetPin595	;wreg free
  7432                           
  7433                           ;PDU.c: 44: break;
  7434  001412  0012               	return	
  7435  001414                     l4062:
  7436                           
  7437                           ;PDU.c: 46: SetPin595(1, 6, onof);
  7438  001414  0E00               	movlw	0
  7439  001416  6E1E               	movwf	SetPin595@Reg+1,c
  7440  001418  0E01               	movlw	1
  7441  00141A  6E1D               	movwf	SetPin595@Reg,c
  7442  00141C  0E00               	movlw	0
  7443  00141E  6E20               	movwf	SetPin595@pin+1,c
  7444  001420  0E06               	movlw	6
  7445  001422  6E1F               	movwf	SetPin595@pin,c
  7446  001424  C027  F021         	movff	EnableSlavePower@onof,SetPin595@value
  7447  001428  C028  F022         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  7448  00142C  EC42  F00E         	call	_SetPin595	;wreg free
  7449                           
  7450                           ;PDU.c: 47: MCSOn = onof;
  7451  001430  C027  F03A         	movff	EnableSlavePower@onof,_MCSOn
  7452                           
  7453                           ;PDU.c: 48: break;
  7454  001434  0012               	return	
  7455  001436                     l4066:
  7456                           
  7457                           ;PDU.c: 50: SetPin595(2, 1, onof);
  7458  001436  0E00               	movlw	0
  7459  001438  6E1E               	movwf	SetPin595@Reg+1,c
  7460  00143A  0E02               	movlw	2
  7461  00143C  6E1D               	movwf	SetPin595@Reg,c
  7462  00143E  0E00               	movlw	0
  7463  001440  6E20               	movwf	SetPin595@pin+1,c
  7464  001442  0E01               	movlw	1
  7465  001444  6E1F               	movwf	SetPin595@pin,c
  7466  001446  C027  F021         	movff	EnableSlavePower@onof,SetPin595@value
  7467  00144A  C028  F022         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  7468  00144E  EC42  F00E         	call	_SetPin595	;wreg free
  7469                           
  7470                           ;PDU.c: 51: break;
  7471  001452  0012               	return	
  7472  001454                     l4068:
  7473                           
  7474                           ;PDU.c: 53: SetPin595(3, 6, onof);
  7475  001454  0E00               	movlw	0
  7476  001456  6E1E               	movwf	SetPin595@Reg+1,c
  7477  001458  0E03               	movlw	3
  7478  00145A  6E1D               	movwf	SetPin595@Reg,c
  7479  00145C  0E00               	movlw	0
  7480  00145E  6E20               	movwf	SetPin595@pin+1,c
  7481  001460  0E06               	movlw	6
  7482  001462  6E1F               	movwf	SetPin595@pin,c
  7483  001464  C027  F021         	movff	EnableSlavePower@onof,SetPin595@value
  7484  001468  C028  F022         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  7485  00146C  EC42  F00E         	call	_SetPin595	;wreg free
  7486                           
  7487                           ;PDU.c: 54: break;
  7488  001470  0012               	return	
  7489  001472                     l4070:
  7490                           
  7491                           ;PDU.c: 56: SetPin595(3, 1, onof);
  7492  001472  0E00               	movlw	0
  7493  001474  6E1E               	movwf	SetPin595@Reg+1,c
  7494  001476  0E03               	movlw	3
  7495  001478  6E1D               	movwf	SetPin595@Reg,c
  7496  00147A  0E00               	movlw	0
  7497  00147C  6E20               	movwf	SetPin595@pin+1,c
  7498  00147E  0E01               	movlw	1
  7499  001480  6E1F               	movwf	SetPin595@pin,c
  7500  001482  C027  F021         	movff	EnableSlavePower@onof,SetPin595@value
  7501  001486  C028  F022         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  7502  00148A  EC42  F00E         	call	_SetPin595	;wreg free
  7503                           
  7504                           ;PDU.c: 58: }
  7505                           
  7506                           ;PDU.c: 57: break;
  7507  00148E  0012               	return	
  7508  001490                     l4074:
  7509  001490  5029               	movf	EnableSlavePower@slave,w,c
  7510                           
  7511                           ; Switch size 1, requested type "space"
  7512                           ; Number of cases is 6, Range of values is 1 to 6
  7513                           ; switch strategies available:
  7514                           ; Name         Instructions Cycles
  7515                           ; simple_byte           19    10 (average)
  7516                           ;	Chosen strategy is simple_byte
  7517  001492  0A01               	xorlw	1	; case 1
  7518  001494  B4D8               	btfsc	status,2,c
  7519  001496  D7CF               	goto	l4066
  7520  001498  0A03               	xorlw	3	; case 2
  7521  00149A  B4D8               	btfsc	status,2,c
  7522  00149C  D7BB               	goto	l4062
  7523  00149E  0A01               	xorlw	1	; case 3
  7524  0014A0  B4D8               	btfsc	status,2,c
  7525  0014A2  D79A               	goto	l4058
  7526  0014A4  0A07               	xorlw	7	; case 4
  7527  0014A6  B4D8               	btfsc	status,2,c
  7528  0014A8  D7A6               	goto	l4060
  7529  0014AA  0A01               	xorlw	1	; case 5
  7530  0014AC  B4D8               	btfsc	status,2,c
  7531  0014AE  D7D2               	goto	l4068
  7532  0014B0  0A03               	xorlw	3	; case 6
  7533  0014B2  A4D8               	btfss	status,2,c
  7534  0014B4  0012               	return	
  7535  0014B6  D7DD               	goto	l4070
  7536  0014B8                     __end_of_EnableSlavePower:
  7537                           	opt stack 0
  7538                           tblptru	equ	0xFF8
  7539                           tblptrh	equ	0xFF7
  7540                           tblptrl	equ	0xFF6
  7541                           tablat	equ	0xFF5
  7542                           prodh	equ	0xFF4
  7543                           prodl	equ	0xFF3
  7544                           intcon	equ	0xFF2
  7545                           intcon2	equ	0xFF1
  7546                           postinc0	equ	0xFEE
  7547                           wreg	equ	0xFE8
  7548                           indf1	equ	0xFE7
  7549                           postdec1	equ	0xFE5
  7550                           fsr1h	equ	0xFE2
  7551                           fsr1l	equ	0xFE1
  7552                           indf2	equ	0xFDF
  7553                           postinc2	equ	0xFDE
  7554                           postdec2	equ	0xFDD
  7555                           plusw2	equ	0xFDB
  7556                           fsr2h	equ	0xFDA
  7557                           fsr2l	equ	0xFD9
  7558                           status	equ	0xFD8
  7559                           
  7560 ;; *************** function _SetPin595 *****************
  7561 ;; Defined at:
  7562 ;;		line 32 in file "Shift595.c"
  7563 ;; Parameters:    Size  Location     Type
  7564 ;;  Reg             2   28[COMRAM] int 
  7565 ;;  pin             2   30[COMRAM] int 
  7566 ;;  value           2   32[COMRAM] int 
  7567 ;; Auto vars:     Size  Location     Type
  7568 ;;		None
  7569 ;; Return value:  Size  Location     Type
  7570 ;;                  1    wreg      void 
  7571 ;; Registers used:
  7572 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7573 ;; Tracked objects:
  7574 ;;		On entry : 0/0
  7575 ;;		On exit  : 0/0
  7576 ;;		Unchanged: 0/0
  7577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7578 ;;      Params:         6       0       0       0       0       0       0
  7579 ;;      Locals:         0       0       0       0       0       0       0
  7580 ;;      Temps:          4       0       0       0       0       0       0
  7581 ;;      Totals:        10       0       0       0       0       0       0
  7582 ;;Total ram usage:       10 bytes
  7583 ;; Hardware stack levels used:    1
  7584 ;; Hardware stack levels required when called:    6
  7585 ;; This function calls:
  7586 ;;		Nothing
  7587 ;; This function is called by:
  7588 ;;		_EnableSlavePower
  7589 ;; This function uses a non-reentrant model
  7590 ;;
  7591                           
  7592                           	psect	text47
  7593  001C84                     __ptext47:
  7594                           	opt stack 0
  7595  001C84                     _SetPin595:
  7596                           	opt stack 21
  7597                           
  7598                           ;Shift595.c: 33: registers[((Reg - 1)*8) + pin] = value;
  7599                           
  7600                           ;incstack = 0
  7601  001C84  0EF0               	movlw	240
  7602  001C86  6E23               	movwf	??_SetPin595& (0+255),c
  7603  001C88  0EFF               	movlw	255
  7604  001C8A  6E24               	movwf	(??_SetPin595+1)& (0+255),c
  7605  001C8C  C01D  F025         	movff	SetPin595@Reg,??_SetPin595+2
  7606  001C90  C01E  F026         	movff	SetPin595@Reg+1,??_SetPin595+3
  7607  001C94  90D8               	bcf	status,0,c
  7608  001C96  3625               	rlcf	??_SetPin595+2,f,c
  7609  001C98  3626               	rlcf	??_SetPin595+3,f,c
  7610  001C9A  90D8               	bcf	status,0,c
  7611  001C9C  3625               	rlcf	??_SetPin595+2,f,c
  7612  001C9E  3626               	rlcf	??_SetPin595+3,f,c
  7613  001CA0  90D8               	bcf	status,0,c
  7614  001CA2  3625               	rlcf	??_SetPin595+2,f,c
  7615  001CA4  3626               	rlcf	??_SetPin595+3,f,c
  7616  001CA6  501F               	movf	SetPin595@pin,w,c
  7617  001CA8  2625               	addwf	??_SetPin595+2,f,c
  7618  001CAA  5020               	movf	SetPin595@pin+1,w,c
  7619  001CAC  2226               	addwfc	??_SetPin595+3,f,c
  7620  001CAE  90D8               	bcf	status,0,c
  7621  001CB0  3625               	rlcf	??_SetPin595+2,f,c
  7622  001CB2  3626               	rlcf	??_SetPin595+3,f,c
  7623  001CB4  5023               	movf	??_SetPin595,w,c
  7624  001CB6  2625               	addwf	??_SetPin595+2,f,c
  7625  001CB8  5024               	movf	??_SetPin595+1,w,c
  7626  001CBA  2226               	addwfc	??_SetPin595+3,f,c
  7627  001CBC  0E00               	movlw	low _registers
  7628  001CBE  2425               	addwf	??_SetPin595+2,w,c
  7629  001CC0  6ED9               	movwf	fsr2l,c
  7630  001CC2  0E01               	movlw	high _registers
  7631  001CC4  2026               	addwfc	??_SetPin595+3,w,c
  7632  001CC6  6EDA               	movwf	fsr2h,c
  7633  001CC8  C021  FFDE         	movff	SetPin595@value,postinc2
  7634  001CCC  C022  FFDD         	movff	SetPin595@value+1,postdec2
  7635  001CD0  0012               	return		;funcret
  7636  001CD2                     __end_of_SetPin595:
  7637                           	opt stack 0
  7638                           tblptru	equ	0xFF8
  7639                           tblptrh	equ	0xFF7
  7640                           tblptrl	equ	0xFF6
  7641                           tablat	equ	0xFF5
  7642                           prodh	equ	0xFF4
  7643                           prodl	equ	0xFF3
  7644                           intcon	equ	0xFF2
  7645                           intcon2	equ	0xFF1
  7646                           postinc0	equ	0xFEE
  7647                           wreg	equ	0xFE8
  7648                           indf1	equ	0xFE7
  7649                           postdec1	equ	0xFE5
  7650                           fsr1h	equ	0xFE2
  7651                           fsr1l	equ	0xFE1
  7652                           indf2	equ	0xFDF
  7653                           postinc2	equ	0xFDE
  7654                           postdec2	equ	0xFDD
  7655                           plusw2	equ	0xFDB
  7656                           fsr2h	equ	0xFDA
  7657                           fsr2l	equ	0xFD9
  7658                           status	equ	0xFD8
  7659                           
  7660 ;; *************** function _ComputeStorageData *****************
  7661 ;; Defined at:
  7662 ;;		line 160 in file "PDU.c"
  7663 ;; Parameters:    Size  Location     Type
  7664 ;;		None
  7665 ;; Auto vars:     Size  Location     Type
  7666 ;;  i               2   31[COMRAM] int 
  7667 ;; Return value:  Size  Location     Type
  7668 ;;                  1    wreg      void 
  7669 ;; Registers used:
  7670 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7671 ;; Tracked objects:
  7672 ;;		On entry : 0/0
  7673 ;;		On exit  : 0/0
  7674 ;;		Unchanged: 0/0
  7675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7676 ;;      Params:         0       0       0       0       0       0       0
  7677 ;;      Locals:         2       0       0       0       0       0       0
  7678 ;;      Temps:          2       0       0       0       0       0       0
  7679 ;;      Totals:         4       0       0       0       0       0       0
  7680 ;;Total ram usage:        4 bytes
  7681 ;; Hardware stack levels used:    1
  7682 ;; Hardware stack levels required when called:    7
  7683 ;; This function calls:
  7684 ;;		_DATAEE_ReadByte
  7685 ;; This function is called by:
  7686 ;;		_PDUStartup
  7687 ;;		_main
  7688 ;; This function uses a non-reentrant model
  7689 ;;
  7690                           
  7691                           	psect	text48
  7692  0014B8                     __ptext48:
  7693                           	opt stack 0
  7694  0014B8                     _ComputeStorageData:
  7695                           	opt stack 22
  7696                           
  7697                           ;PDU.c: 161: for (int i = 0; i < 12; i++) {
  7698                           
  7699                           ;incstack = 0
  7700  0014B8  0E00               	movlw	0
  7701  0014BA  6E21               	movwf	ComputeStorageData@i+1,c
  7702  0014BC  0E00               	movlw	0
  7703  0014BE  6E20               	movwf	ComputeStorageData@i,c
  7704  0014C0                     l4400:
  7705  0014C0  BE21               	btfsc	ComputeStorageData@i+1,7,c
  7706  0014C2  D006               	goto	l4404
  7707  0014C4  5021               	movf	ComputeStorageData@i+1,w,c
  7708  0014C6  E111               	bnz	l4410
  7709  0014C8  0E0C               	movlw	12
  7710  0014CA  5C20               	subwf	ComputeStorageData@i,w,c
  7711  0014CC  B0D8               	btfsc	status,0,c
  7712  0014CE  D00D               	goto	l4410
  7713  0014D0                     l4404:
  7714                           
  7715                           ;PDU.c: 162: data[i] = DATAEE_ReadByte(i);
  7716  0014D0  0ED3               	movlw	low _data
  7717  0014D2  2420               	addwf	ComputeStorageData@i,w,c
  7718  0014D4  6ED9               	movwf	fsr2l,c
  7719  0014D6  0E00               	movlw	high _data
  7720  0014D8  2021               	addwfc	ComputeStorageData@i+1,w,c
  7721  0014DA  6EDA               	movwf	fsr2h,c
  7722  0014DC  5020               	movf	ComputeStorageData@i,w,c
  7723  0014DE  ECF3  F010         	call	_DATAEE_ReadByte
  7724  0014E2  6EDF               	movwf	indf2,c
  7725  0014E4  4A20               	infsnz	ComputeStorageData@i,f,c
  7726  0014E6  2A21               	incf	ComputeStorageData@i+1,f,c
  7727  0014E8  D7EB               	goto	l4400
  7728  0014EA                     l4410:
  7729                           
  7730                           ;PDU.c: 163: }
  7731                           ;PDU.c: 164: Currentcomp[0] = ((data[0] << 8) | data[1]);
  7732  0014EA  0100               	movlb	0	; () banked
  7733  0014EC  51D4               	movf	(_data+1)& (0+255),w,b
  7734  0014EE  C0D3  F01E         	movff	_data,??_ComputeStorageData
  7735  0014F2  6A1F               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7736  0014F4  C01E  F01F         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7737  0014F8  6A1E               	clrf	??_ComputeStorageData,c
  7738  0014FA  101E               	iorwf	??_ComputeStorageData,w,c
  7739  0014FC  0100               	movlb	0	; () banked
  7740  0014FE  6FDF               	movwf	_Currentcomp& (0+255),b
  7741  001500  501F               	movf	??_ComputeStorageData+1,w,c
  7742  001502  0100               	movlb	0	; () banked
  7743  001504  6FE0               	movwf	(_Currentcomp+1)& (0+255),b
  7744                           
  7745                           ;PDU.c: 165: Currentcomp[1] = ((data[2] << 8) | data[3]);
  7746  001506  0100               	movlb	0	; () banked
  7747  001508  51D6               	movf	(_data+3)& (0+255),w,b
  7748  00150A  C0D5  F01E         	movff	_data+2,??_ComputeStorageData
  7749  00150E  6A1F               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7750  001510  C01E  F01F         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7751  001514  6A1E               	clrf	??_ComputeStorageData,c
  7752  001516  101E               	iorwf	??_ComputeStorageData,w,c
  7753  001518  0100               	movlb	0	; () banked
  7754  00151A  6FE1               	movwf	(_Currentcomp+2)& (0+255),b
  7755  00151C  501F               	movf	??_ComputeStorageData+1,w,c
  7756  00151E  0100               	movlb	0	; () banked
  7757  001520  6FE2               	movwf	(_Currentcomp+3)& (0+255),b
  7758                           
  7759                           ;PDU.c: 166: Currentcomp[2] = ((data[4] << 8) | data[5]);
  7760  001522  0100               	movlb	0	; () banked
  7761  001524  51D8               	movf	(_data+5)& (0+255),w,b
  7762  001526  C0D7  F01E         	movff	_data+4,??_ComputeStorageData
  7763  00152A  6A1F               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7764  00152C  C01E  F01F         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7765  001530  6A1E               	clrf	??_ComputeStorageData,c
  7766  001532  101E               	iorwf	??_ComputeStorageData,w,c
  7767  001534  0100               	movlb	0	; () banked
  7768  001536  6FE3               	movwf	(_Currentcomp+4)& (0+255),b
  7769  001538  501F               	movf	??_ComputeStorageData+1,w,c
  7770  00153A  0100               	movlb	0	; () banked
  7771  00153C  6FE4               	movwf	(_Currentcomp+5)& (0+255),b
  7772                           
  7773                           ;PDU.c: 167: Currentcomp[3] = ((data[6] << 8) | data[7]);
  7774  00153E  0100               	movlb	0	; () banked
  7775  001540  51DA               	movf	(_data+7)& (0+255),w,b
  7776  001542  C0D9  F01E         	movff	_data+6,??_ComputeStorageData
  7777  001546  6A1F               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7778  001548  C01E  F01F         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7779  00154C  6A1E               	clrf	??_ComputeStorageData,c
  7780  00154E  101E               	iorwf	??_ComputeStorageData,w,c
  7781  001550  0100               	movlb	0	; () banked
  7782  001552  6FE5               	movwf	(_Currentcomp+6)& (0+255),b
  7783  001554  501F               	movf	??_ComputeStorageData+1,w,c
  7784  001556  0100               	movlb	0	; () banked
  7785  001558  6FE6               	movwf	(_Currentcomp+7)& (0+255),b
  7786                           
  7787                           ;PDU.c: 168: Currentcomp[4] = ((data[8] << 8) | data[9]);
  7788  00155A  0100               	movlb	0	; () banked
  7789  00155C  51DC               	movf	(_data+9)& (0+255),w,b
  7790  00155E  C0DB  F01E         	movff	_data+8,??_ComputeStorageData
  7791  001562  6A1F               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7792  001564  C01E  F01F         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7793  001568  6A1E               	clrf	??_ComputeStorageData,c
  7794  00156A  101E               	iorwf	??_ComputeStorageData,w,c
  7795  00156C  0100               	movlb	0	; () banked
  7796  00156E  6FE7               	movwf	(_Currentcomp+8)& (0+255),b
  7797  001570  501F               	movf	??_ComputeStorageData+1,w,c
  7798  001572  0100               	movlb	0	; () banked
  7799  001574  6FE8               	movwf	(_Currentcomp+9)& (0+255),b
  7800                           
  7801                           ;PDU.c: 169: Currentcomp[5] = ((data[10] << 8) | data[11]);
  7802  001576  0100               	movlb	0	; () banked
  7803  001578  51DE               	movf	(_data+11)& (0+255),w,b
  7804  00157A  C0DD  F01E         	movff	_data+10,??_ComputeStorageData
  7805  00157E  6A1F               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7806  001580  C01E  F01F         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7807  001584  6A1E               	clrf	??_ComputeStorageData,c
  7808  001586  101E               	iorwf	??_ComputeStorageData,w,c
  7809  001588  0100               	movlb	0	; () banked
  7810  00158A  6FE9               	movwf	(_Currentcomp+10)& (0+255),b
  7811  00158C  501F               	movf	??_ComputeStorageData+1,w,c
  7812  00158E  0100               	movlb	0	; () banked
  7813  001590  6FEA               	movwf	(_Currentcomp+11)& (0+255),b
  7814                           
  7815                           ; BSR set to: 0
  7816  001592  0012               	return		;funcret
  7817  001594                     __end_of_ComputeStorageData:
  7818                           	opt stack 0
  7819                           tblptru	equ	0xFF8
  7820                           tblptrh	equ	0xFF7
  7821                           tblptrl	equ	0xFF6
  7822                           tablat	equ	0xFF5
  7823                           prodh	equ	0xFF4
  7824                           prodl	equ	0xFF3
  7825                           intcon	equ	0xFF2
  7826                           intcon2	equ	0xFF1
  7827                           postinc0	equ	0xFEE
  7828                           wreg	equ	0xFE8
  7829                           indf1	equ	0xFE7
  7830                           postdec1	equ	0xFE5
  7831                           fsr1h	equ	0xFE2
  7832                           fsr1l	equ	0xFE1
  7833                           indf2	equ	0xFDF
  7834                           postinc2	equ	0xFDE
  7835                           postdec2	equ	0xFDD
  7836                           plusw2	equ	0xFDB
  7837                           fsr2h	equ	0xFDA
  7838                           fsr2l	equ	0xFD9
  7839                           status	equ	0xFD8
  7840                           
  7841 ;; *************** function _DATAEE_ReadByte *****************
  7842 ;; Defined at:
  7843 ;;		line 143 in file "mcc_generated_files/memory.c"
  7844 ;; Parameters:    Size  Location     Type
  7845 ;;  bAdd            1    wreg     unsigned char 
  7846 ;; Auto vars:     Size  Location     Type
  7847 ;;  bAdd            1   28[COMRAM] unsigned char 
  7848 ;; Return value:  Size  Location     Type
  7849 ;;                  1    wreg      unsigned char 
  7850 ;; Registers used:
  7851 ;;		wreg, status,2
  7852 ;; Tracked objects:
  7853 ;;		On entry : 0/0
  7854 ;;		On exit  : 0/0
  7855 ;;		Unchanged: 0/0
  7856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7857 ;;      Params:         0       0       0       0       0       0       0
  7858 ;;      Locals:         1       0       0       0       0       0       0
  7859 ;;      Temps:          0       0       0       0       0       0       0
  7860 ;;      Totals:         1       0       0       0       0       0       0
  7861 ;;Total ram usage:        1 bytes
  7862 ;; Hardware stack levels used:    1
  7863 ;; Hardware stack levels required when called:    6
  7864 ;; This function calls:
  7865 ;;		Nothing
  7866 ;; This function is called by:
  7867 ;;		_ComputeStorageData
  7868 ;; This function uses a non-reentrant model
  7869 ;;
  7870                           
  7871                           	psect	text49
  7872  0021E6                     __ptext49:
  7873                           	opt stack 0
  7874  0021E6                     _DATAEE_ReadByte:
  7875                           	opt stack 22
  7876                           
  7877                           ; BSR set to: 0
  7878                           ;incstack = 0
  7879                           ;DATAEE_ReadByte@bAdd stored from wreg
  7880  0021E6  6E1D               	movwf	DATAEE_ReadByte@bAdd,c
  7881                           
  7882                           ;memory.c: 145: EEADR = (bAdd & 0xFF);
  7883  0021E8  C01D  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
  7884                           
  7885                           ;memory.c: 146: EECON1bits.CFGS = 0;
  7886  0021EC  9CA6               	bcf	4006,6,c	;volatile
  7887                           
  7888                           ;memory.c: 147: EECON1bits.EEPGD = 0;
  7889  0021EE  9EA6               	bcf	4006,7,c	;volatile
  7890                           
  7891                           ;memory.c: 148: EECON1bits.RD = 1;
  7892  0021F0  80A6               	bsf	4006,0,c	;volatile
  7893                           
  7894                           ;memory.c: 149: __nop();
  7895  0021F2  F000               	nop	
  7896                           
  7897                           ;memory.c: 150: __nop();
  7898  0021F4  F000               	nop	
  7899                           
  7900                           ;memory.c: 152: return (EEDATA);
  7901  0021F6  50A8               	movf	4008,w,c	;volatile
  7902  0021F8  0012               	return	
  7903  0021FA                     __end_of_DATAEE_ReadByte:
  7904                           	opt stack 0
  7905                           tblptru	equ	0xFF8
  7906                           tblptrh	equ	0xFF7
  7907                           tblptrl	equ	0xFF6
  7908                           tablat	equ	0xFF5
  7909                           prodh	equ	0xFF4
  7910                           prodl	equ	0xFF3
  7911                           intcon	equ	0xFF2
  7912                           intcon2	equ	0xFF1
  7913                           postinc0	equ	0xFEE
  7914                           wreg	equ	0xFE8
  7915                           indf1	equ	0xFE7
  7916                           postdec1	equ	0xFE5
  7917                           fsr1h	equ	0xFE2
  7918                           fsr1l	equ	0xFE1
  7919                           indf2	equ	0xFDF
  7920                           postinc2	equ	0xFDE
  7921                           postdec2	equ	0xFDD
  7922                           plusw2	equ	0xFDB
  7923                           fsr2h	equ	0xFDA
  7924                           fsr2l	equ	0xFD9
  7925                           status	equ	0xFD8
  7926                           
  7927 ;; *************** function _INTERRUPT_InterruptManager *****************
  7928 ;; Defined at:
  7929 ;;		line 67 in file "mcc_generated_files/interrupt_manager.c"
  7930 ;; Parameters:    Size  Location     Type
  7931 ;;		None
  7932 ;; Auto vars:     Size  Location     Type
  7933 ;;		None
  7934 ;; Return value:  Size  Location     Type
  7935 ;;                  1    wreg      void 
  7936 ;; Registers used:
  7937 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7938 ;; Tracked objects:
  7939 ;;		On entry : 0/0
  7940 ;;		On exit  : 0/0
  7941 ;;		Unchanged: 0/0
  7942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7943 ;;      Params:         0       0       0       0       0       0       0
  7944 ;;      Locals:         0       0       0       0       0       0       0
  7945 ;;      Temps:         14       0       0       0       0       0       0
  7946 ;;      Totals:        14       0       0       0       0       0       0
  7947 ;;Total ram usage:       14 bytes
  7948 ;; Hardware stack levels used:    1
  7949 ;; Hardware stack levels required when called:    5
  7950 ;; This function calls:
  7951 ;;		_ADC_ISR
  7952 ;;		_EUSART1_Receive_ISR
  7953 ;;		_EUSART1_Transmit_ISR
  7954 ;;		_TMR1_ISR
  7955 ;; This function is called by:
  7956 ;;		Interrupt level 2
  7957 ;; This function uses a non-reentrant model
  7958 ;;
  7959                           
  7960                           	psect	intcode
  7961  000008                     __pintcode:
  7962                           	opt stack 0
  7963  000008                     _INTERRUPT_InterruptManager:
  7964                           	opt stack 18
  7965                           
  7966                           ;incstack = 0
  7967  000008  8242               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7968  00000A  CFFA F00F          	movff	pclath,??_INTERRUPT_InterruptManager
  7969  00000E  CFFB F010          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  7970  000012  CFE9 F011          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  7971  000016  CFEA F012          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  7972  00001A  CFE1 F013          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  7973  00001E  CFE2 F014          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  7974  000022  CFD9 F015          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  7975  000026  CFDA F016          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  7976  00002A  CFF3 F017          	movff	prodl,??_INTERRUPT_InterruptManager+8
  7977  00002E  CFF4 F018          	movff	prodh,??_INTERRUPT_InterruptManager+9
  7978  000032  CFF6 F019          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  7979  000036  CFF7 F01A          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  7980  00003A  CFF8 F01B          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  7981  00003E  CFF5 F01C          	movff	tablat,??_INTERRUPT_InterruptManager+13
  7982                           
  7983                           ;interrupt_manager.c: 70: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  7984  000042  BA9D               	btfsc	3997,5,c	;volatile
  7985  000044  AA9E               	btfss	3998,5,c	;volatile
  7986  000046  D003               	goto	i2l67
  7987                           
  7988                           ;interrupt_manager.c: 71: {
  7989                           ;interrupt_manager.c: 72: EUSART1_Receive_ISR();
  7990  000048  EC8D  F010         	call	_EUSART1_Receive_ISR	;wreg free
  7991                           
  7992                           ;interrupt_manager.c: 73: }
  7993  00004C  D011               	goto	i2l75
  7994  00004E                     i2l67:
  7995                           
  7996                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  7997  00004E  B89D               	btfsc	3997,4,c	;volatile
  7998  000050  A89E               	btfss	3998,4,c	;volatile
  7999  000052  D003               	goto	i2l69
  8000                           
  8001                           ;interrupt_manager.c: 75: {
  8002                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
  8003  000054  EC99  F00F         	call	_EUSART1_Transmit_ISR	;wreg free
  8004                           
  8005                           ;interrupt_manager.c: 77: }
  8006  000058  D00B               	goto	i2l75
  8007  00005A                     i2l69:
  8008                           
  8009                           ;interrupt_manager.c: 78: else if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
  8010  00005A  BC9D               	btfsc	3997,6,c	;volatile
  8011  00005C  AC9E               	btfss	3998,6,c	;volatile
  8012  00005E  D003               	goto	i2l71
  8013                           
  8014                           ;interrupt_manager.c: 79: {
  8015                           ;interrupt_manager.c: 80: ADC_ISR();
  8016  000060  EC27  F011         	call	_ADC_ISR	;wreg free
  8017                           
  8018                           ;interrupt_manager.c: 81: }
  8019  000064  D005               	goto	i2l75
  8020  000066                     i2l71:
  8021                           
  8022                           ;interrupt_manager.c: 82: else if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
  8023  000066  B09D               	btfsc	3997,0,c	;volatile
  8024  000068  A09E               	btfss	3998,0,c	;volatile
  8025  00006A  D002               	goto	i2l75
  8026                           
  8027                           ;interrupt_manager.c: 83: {
  8028                           ;interrupt_manager.c: 84: TMR1_ISR();
  8029  00006C  EC80  F00F         	call	_TMR1_ISR	;wreg free
  8030  000070                     i2l75:
  8031  000070  C01C  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  8032  000074  C01B  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  8033  000078  C01A  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  8034  00007C  C019  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  8035  000080  C018  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  8036  000084  C017  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  8037  000088  C016  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  8038  00008C  C015  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  8039  000090  C014  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  8040  000094  C013  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  8041  000098  C012  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  8042  00009C  C011  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  8043  0000A0  C010  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  8044  0000A4  C00F  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  8045  0000A8  9242               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8046  0000AA  0011               	retfie		f
  8047  0000AC                     __end_of_INTERRUPT_InterruptManager:
  8048                           	opt stack 0
  8049                           pclatu	equ	0xFFB
  8050                           pclath	equ	0xFFA
  8051                           tblptru	equ	0xFF8
  8052                           tblptrh	equ	0xFF7
  8053                           tblptrl	equ	0xFF6
  8054                           tablat	equ	0xFF5
  8055                           prodh	equ	0xFF4
  8056                           prodl	equ	0xFF3
  8057                           intcon	equ	0xFF2
  8058                           intcon2	equ	0xFF1
  8059                           postinc0	equ	0xFEE
  8060                           fsr0h	equ	0xFEA
  8061                           fsr0l	equ	0xFE9
  8062                           wreg	equ	0xFE8
  8063                           indf1	equ	0xFE7
  8064                           postdec1	equ	0xFE5
  8065                           fsr1h	equ	0xFE2
  8066                           fsr1l	equ	0xFE1
  8067                           indf2	equ	0xFDF
  8068                           postinc2	equ	0xFDE
  8069                           postdec2	equ	0xFDD
  8070                           plusw2	equ	0xFDB
  8071                           fsr2h	equ	0xFDA
  8072                           fsr2l	equ	0xFD9
  8073                           status	equ	0xFD8
  8074                           
  8075 ;; *************** function _TMR1_ISR *****************
  8076 ;; Defined at:
  8077 ;;		line 161 in file "mcc_generated_files/tmr1.c"
  8078 ;; Parameters:    Size  Location     Type
  8079 ;;		None
  8080 ;; Auto vars:     Size  Location     Type
  8081 ;;		None
  8082 ;; Return value:  Size  Location     Type
  8083 ;;                  1    wreg      void 
  8084 ;; Registers used:
  8085 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8086 ;; Tracked objects:
  8087 ;;		On entry : 0/0
  8088 ;;		On exit  : 0/0
  8089 ;;		Unchanged: 0/0
  8090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8091 ;;      Params:         0       0       0       0       0       0       0
  8092 ;;      Locals:         0       0       0       0       0       0       0
  8093 ;;      Temps:          0       0       0       0       0       0       0
  8094 ;;      Totals:         0       0       0       0       0       0       0
  8095 ;;Total ram usage:        0 bytes
  8096 ;; Hardware stack levels used:    1
  8097 ;; Hardware stack levels required when called:    4
  8098 ;; This function calls:
  8099 ;;		_FuseSystem
  8100 ;;		_ReadCurrent
  8101 ;; This function is called by:
  8102 ;;		_INTERRUPT_InterruptManager
  8103 ;; This function uses a non-reentrant model
  8104 ;;
  8105                           
  8106                           	psect	text51
  8107  001F00                     __ptext51:
  8108                           	opt stack 0
  8109  001F00                     _TMR1_ISR:
  8110                           	opt stack 18
  8111                           
  8112                           ;tmr1.c: 165: PIR1bits.TMR1IF = 0;
  8113                           
  8114                           ;incstack = 0
  8115  001F00  909E               	bcf	3998,0,c	;volatile
  8116                           
  8117                           ;tmr1.c: 168: TMR1H = (timer1ReloadVal >> 8);
  8118  001F02  5039               	movf	_timer1ReloadVal+1,w,c	;volatile
  8119  001F04  6ECF               	movwf	4047,c	;volatile
  8120                           
  8121                           ;tmr1.c: 169: TMR1L = (uint8_t) timer1ReloadVal;
  8122  001F06  C038  FFCE         	movff	_timer1ReloadVal,4046	;volatile
  8123                           
  8124                           ;tmr1.c: 170: readwhat++;
  8125  001F0A  4A3F               	infsnz	_readwhat,f,c
  8126  001F0C  2A40               	incf	_readwhat+1,f,c
  8127                           
  8128                           ;tmr1.c: 171: if(readwhat > 7)
  8129  001F0E  BE40               	btfsc	_readwhat+1,7,c
  8130  001F10  D00C               	goto	i2l3598
  8131  001F12  5040               	movf	_readwhat+1,w,c
  8132  001F14  E104               	bnz	i2u215_40
  8133  001F16  0E08               	movlw	8
  8134  001F18  5C3F               	subwf	_readwhat,w,c
  8135  001F1A  A0D8               	btfss	status,0,c
  8136  001F1C  D006               	goto	i2l3598
  8137  001F1E                     i2u215_40:
  8138                           
  8139                           ;tmr1.c: 172: {
  8140                           ;tmr1.c: 173: readwhat = 1;
  8141  001F1E  0E00               	movlw	0
  8142  001F20  6E40               	movwf	_readwhat+1,c
  8143  001F22  0E01               	movlw	1
  8144  001F24  6E3F               	movwf	_readwhat,c
  8145                           
  8146                           ;tmr1.c: 174: FuseSystem();
  8147  001F26  ECD6  F00C         	call	_FuseSystem	;wreg free
  8148  001F2A                     i2l3598:
  8149                           
  8150                           ;tmr1.c: 175: }
  8151                           ;tmr1.c: 176: ReadCurrent(readwhat);
  8152  001F2A  503F               	movf	_readwhat,w,c
  8153  001F2C  EC58  F000         	call	_ReadCurrent
  8154  001F30  0012               	return		;funcret
  8155  001F32                     __end_of_TMR1_ISR:
  8156                           	opt stack 0
  8157                           pclatu	equ	0xFFB
  8158                           pclath	equ	0xFFA
  8159                           tblptru	equ	0xFF8
  8160                           tblptrh	equ	0xFF7
  8161                           tblptrl	equ	0xFF6
  8162                           tablat	equ	0xFF5
  8163                           prodh	equ	0xFF4
  8164                           prodl	equ	0xFF3
  8165                           intcon	equ	0xFF2
  8166                           intcon2	equ	0xFF1
  8167                           postinc0	equ	0xFEE
  8168                           fsr0h	equ	0xFEA
  8169                           fsr0l	equ	0xFE9
  8170                           wreg	equ	0xFE8
  8171                           indf1	equ	0xFE7
  8172                           postdec1	equ	0xFE5
  8173                           fsr1h	equ	0xFE2
  8174                           fsr1l	equ	0xFE1
  8175                           indf2	equ	0xFDF
  8176                           postinc2	equ	0xFDE
  8177                           postdec2	equ	0xFDD
  8178                           plusw2	equ	0xFDB
  8179                           fsr2h	equ	0xFDA
  8180                           fsr2l	equ	0xFD9
  8181                           status	equ	0xFD8
  8182                           
  8183 ;; *************** function _ReadCurrent *****************
  8184 ;; Defined at:
  8185 ;;		line 63 in file "PDU.c"
  8186 ;; Parameters:    Size  Location     Type
  8187 ;;  gather          1    wreg     unsigned char 
  8188 ;; Auto vars:     Size  Location     Type
  8189 ;;  gather          1   13[COMRAM] unsigned char 
  8190 ;; Return value:  Size  Location     Type
  8191 ;;                  1    wreg      void 
  8192 ;; Registers used:
  8193 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8194 ;; Tracked objects:
  8195 ;;		On entry : 0/0
  8196 ;;		On exit  : 0/0
  8197 ;;		Unchanged: 0/0
  8198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8199 ;;      Params:         0       0       0       0       0       0       0
  8200 ;;      Locals:         1       0       0       0       0       0       0
  8201 ;;      Temps:          0       0       0       0       0       0       0
  8202 ;;      Totals:         1       0       0       0       0       0       0
  8203 ;;Total ram usage:        1 bytes
  8204 ;; Hardware stack levels used:    1
  8205 ;; Hardware stack levels required when called:    3
  8206 ;; This function calls:
  8207 ;;		_ADC_GetConversion
  8208 ;;		i2_SetPin595
  8209 ;;		i2_Update
  8210 ;; This function is called by:
  8211 ;;		_TMR1_ISR
  8212 ;; This function uses a non-reentrant model
  8213 ;;
  8214                           
  8215                           	psect	text52
  8216  0000B0                     __ptext52:
  8217                           	opt stack 0
  8218  0000B0                     _ReadCurrent:
  8219                           	opt stack 18
  8220                           
  8221                           ;incstack = 0
  8222                           ;ReadCurrent@gather stored from wreg
  8223  0000B0  6E0E               	movwf	ReadCurrent@gather,c
  8224                           
  8225                           ;PDU.c: 64: if (gather == 1) {
  8226  0000B2  040E               	decf	ReadCurrent@gather,w,c
  8227  0000B4  A4D8               	btfss	status,2,c
  8228  0000B6  D088               	goto	i2l3394
  8229                           
  8230                           ;PDU.c: 66: SetPin595(1, 4, ON);
  8231  0000B8  0E00               	movlw	0
  8232  0000BA  6E02               	movwf	i2SetPin595@Reg+1,c
  8233  0000BC  0E01               	movlw	1
  8234  0000BE  6E01               	movwf	i2SetPin595@Reg,c
  8235  0000C0  0E00               	movlw	0
  8236  0000C2  6E04               	movwf	i2SetPin595@pin+1,c
  8237  0000C4  0E04               	movlw	4
  8238  0000C6  6E03               	movwf	i2SetPin595@pin,c
  8239  0000C8  0E00               	movlw	0
  8240  0000CA  6E06               	movwf	i2SetPin595@value+1,c
  8241  0000CC  0E01               	movlw	1
  8242  0000CE  6E05               	movwf	i2SetPin595@value,c
  8243  0000D0  EC69  F00E         	call	i2_SetPin595	;wreg free
  8244                           
  8245                           ;PDU.c: 67: SetPin595(1, 3, OFF);
  8246  0000D4  0E00               	movlw	0
  8247  0000D6  6E02               	movwf	i2SetPin595@Reg+1,c
  8248  0000D8  0E01               	movlw	1
  8249  0000DA  6E01               	movwf	i2SetPin595@Reg,c
  8250  0000DC  0E00               	movlw	0
  8251  0000DE  6E04               	movwf	i2SetPin595@pin+1,c
  8252  0000E0  0E03               	movlw	3
  8253  0000E2  6E03               	movwf	i2SetPin595@pin,c
  8254  0000E4  0E00               	movlw	0
  8255  0000E6  6E06               	movwf	i2SetPin595@value+1,c
  8256  0000E8  0E00               	movlw	0
  8257  0000EA  6E05               	movwf	i2SetPin595@value,c
  8258  0000EC  EC69  F00E         	call	i2_SetPin595	;wreg free
  8259                           
  8260                           ;PDU.c: 68: SetPin595(1, 2, OFF);
  8261  0000F0  0E00               	movlw	0
  8262  0000F2  6E02               	movwf	i2SetPin595@Reg+1,c
  8263  0000F4  0E01               	movlw	1
  8264  0000F6  6E01               	movwf	i2SetPin595@Reg,c
  8265  0000F8  0E00               	movlw	0
  8266  0000FA  6E04               	movwf	i2SetPin595@pin+1,c
  8267  0000FC  0E02               	movlw	2
  8268  0000FE  6E03               	movwf	i2SetPin595@pin,c
  8269  000100  0E00               	movlw	0
  8270  000102  6E06               	movwf	i2SetPin595@value+1,c
  8271  000104  0E00               	movlw	0
  8272  000106  6E05               	movwf	i2SetPin595@value,c
  8273  000108  EC69  F00E         	call	i2_SetPin595	;wreg free
  8274                           
  8275                           ;PDU.c: 69: SetPin595(2, 4, OFF);
  8276  00010C  0E00               	movlw	0
  8277  00010E  6E02               	movwf	i2SetPin595@Reg+1,c
  8278  000110  0E02               	movlw	2
  8279  000112  6E01               	movwf	i2SetPin595@Reg,c
  8280  000114  0E00               	movlw	0
  8281  000116  6E04               	movwf	i2SetPin595@pin+1,c
  8282  000118  0E04               	movlw	4
  8283  00011A  6E03               	movwf	i2SetPin595@pin,c
  8284  00011C  0E00               	movlw	0
  8285  00011E  6E06               	movwf	i2SetPin595@value+1,c
  8286  000120  0E00               	movlw	0
  8287  000122  6E05               	movwf	i2SetPin595@value,c
  8288  000124  EC69  F00E         	call	i2_SetPin595	;wreg free
  8289                           
  8290                           ;PDU.c: 70: SetPin595(2, 3, OFF);
  8291  000128  0E00               	movlw	0
  8292  00012A  6E02               	movwf	i2SetPin595@Reg+1,c
  8293  00012C  0E02               	movlw	2
  8294  00012E  6E01               	movwf	i2SetPin595@Reg,c
  8295  000130  0E00               	movlw	0
  8296  000132  6E04               	movwf	i2SetPin595@pin+1,c
  8297  000134  0E03               	movlw	3
  8298  000136  6E03               	movwf	i2SetPin595@pin,c
  8299  000138  0E00               	movlw	0
  8300  00013A  6E06               	movwf	i2SetPin595@value+1,c
  8301  00013C  0E00               	movlw	0
  8302  00013E  6E05               	movwf	i2SetPin595@value,c
  8303  000140  EC69  F00E         	call	i2_SetPin595	;wreg free
  8304                           
  8305                           ;PDU.c: 71: SetPin595(2, 2, OFF);
  8306  000144  0E00               	movlw	0
  8307  000146  6E02               	movwf	i2SetPin595@Reg+1,c
  8308  000148  0E02               	movlw	2
  8309  00014A  6E01               	movwf	i2SetPin595@Reg,c
  8310  00014C  0E00               	movlw	0
  8311  00014E  6E04               	movwf	i2SetPin595@pin+1,c
  8312  000150  0E02               	movlw	2
  8313  000152  6E03               	movwf	i2SetPin595@pin,c
  8314  000154  0E00               	movlw	0
  8315  000156  6E06               	movwf	i2SetPin595@value+1,c
  8316  000158  0E00               	movlw	0
  8317  00015A  6E05               	movwf	i2SetPin595@value,c
  8318  00015C  EC69  F00E         	call	i2_SetPin595	;wreg free
  8319                           
  8320                           ;PDU.c: 72: SetPin595(3, 4, OFF);
  8321  000160  0E00               	movlw	0
  8322  000162  6E02               	movwf	i2SetPin595@Reg+1,c
  8323  000164  0E03               	movlw	3
  8324  000166  6E01               	movwf	i2SetPin595@Reg,c
  8325  000168  0E00               	movlw	0
  8326  00016A  6E04               	movwf	i2SetPin595@pin+1,c
  8327  00016C  0E04               	movlw	4
  8328  00016E  6E03               	movwf	i2SetPin595@pin,c
  8329  000170  0E00               	movlw	0
  8330  000172  6E06               	movwf	i2SetPin595@value+1,c
  8331  000174  0E00               	movlw	0
  8332  000176  6E05               	movwf	i2SetPin595@value,c
  8333  000178  EC69  F00E         	call	i2_SetPin595	;wreg free
  8334                           
  8335                           ;PDU.c: 73: SetPin595(3, 3, OFF);
  8336  00017C  0E00               	movlw	0
  8337  00017E  6E02               	movwf	i2SetPin595@Reg+1,c
  8338  000180  0E03               	movlw	3
  8339  000182  6E01               	movwf	i2SetPin595@Reg,c
  8340  000184  0E00               	movlw	0
  8341  000186  6E04               	movwf	i2SetPin595@pin+1,c
  8342  000188  0E03               	movlw	3
  8343  00018A  6E03               	movwf	i2SetPin595@pin,c
  8344  00018C  0E00               	movlw	0
  8345  00018E  6E06               	movwf	i2SetPin595@value+1,c
  8346  000190  0E00               	movlw	0
  8347  000192  6E05               	movwf	i2SetPin595@value,c
  8348  000194  EC69  F00E         	call	i2_SetPin595	;wreg free
  8349                           
  8350                           ;PDU.c: 74: SetPin595(3, 2, OFF);
  8351  000198  0E00               	movlw	0
  8352  00019A  6E02               	movwf	i2SetPin595@Reg+1,c
  8353  00019C  0E03               	movlw	3
  8354  00019E  6E01               	movwf	i2SetPin595@Reg,c
  8355  0001A0  0E00               	movlw	0
  8356  0001A2  6E04               	movwf	i2SetPin595@pin+1,c
  8357  0001A4  0E02               	movlw	2
  8358  0001A6  6E03               	movwf	i2SetPin595@pin,c
  8359  0001A8  0E00               	movlw	0
  8360  0001AA  6E06               	movwf	i2SetPin595@value+1,c
  8361  0001AC  0E00               	movlw	0
  8362  0001AE  6E05               	movwf	i2SetPin595@value,c
  8363  0001B0  EC69  F00E         	call	i2_SetPin595	;wreg free
  8364                           
  8365                           ;PDU.c: 75: Update();
  8366  0001B4  EC20  F011         	call	i2_Update	;wreg free
  8367                           
  8368                           ;PDU.c: 76: CurrentADC[5] = ADC_GetConversion(U10Multisense);
  8369  0001B8  0E17               	movlw	23
  8370  0001BA  ECCA  F00F         	call	_ADC_GetConversion
  8371  0001BE  C001  F0D1         	movff	?_ADC_GetConversion,_CurrentADC+10
  8372  0001C2  C002  F0D2         	movff	?_ADC_GetConversion+1,_CurrentADC+11
  8373                           
  8374                           ;PDU.c: 78: }
  8375  0001C6  0012               	return	
  8376  0001C8                     i2l3394:
  8377                           
  8378                           ;PDU.c: 79: else if(gather == 2){
  8379  0001C8  0E02               	movlw	2
  8380  0001CA  180E               	xorwf	ReadCurrent@gather,w,c
  8381  0001CC  A4D8               	btfss	status,2,c
  8382  0001CE  D088               	goto	i2l3400
  8383                           
  8384                           ;PDU.c: 81: SetPin595(1, 4, OFF);
  8385  0001D0  0E00               	movlw	0
  8386  0001D2  6E02               	movwf	i2SetPin595@Reg+1,c
  8387  0001D4  0E01               	movlw	1
  8388  0001D6  6E01               	movwf	i2SetPin595@Reg,c
  8389  0001D8  0E00               	movlw	0
  8390  0001DA  6E04               	movwf	i2SetPin595@pin+1,c
  8391  0001DC  0E04               	movlw	4
  8392  0001DE  6E03               	movwf	i2SetPin595@pin,c
  8393  0001E0  0E00               	movlw	0
  8394  0001E2  6E06               	movwf	i2SetPin595@value+1,c
  8395  0001E4  0E00               	movlw	0
  8396  0001E6  6E05               	movwf	i2SetPin595@value,c
  8397  0001E8  EC69  F00E         	call	i2_SetPin595	;wreg free
  8398                           
  8399                           ;PDU.c: 82: SetPin595(1, 3, OFF);
  8400  0001EC  0E00               	movlw	0
  8401  0001EE  6E02               	movwf	i2SetPin595@Reg+1,c
  8402  0001F0  0E01               	movlw	1
  8403  0001F2  6E01               	movwf	i2SetPin595@Reg,c
  8404  0001F4  0E00               	movlw	0
  8405  0001F6  6E04               	movwf	i2SetPin595@pin+1,c
  8406  0001F8  0E03               	movlw	3
  8407  0001FA  6E03               	movwf	i2SetPin595@pin,c
  8408  0001FC  0E00               	movlw	0
  8409  0001FE  6E06               	movwf	i2SetPin595@value+1,c
  8410  000200  0E00               	movlw	0
  8411  000202  6E05               	movwf	i2SetPin595@value,c
  8412  000204  EC69  F00E         	call	i2_SetPin595	;wreg free
  8413                           
  8414                           ;PDU.c: 83: SetPin595(1, 2, OFF);
  8415  000208  0E00               	movlw	0
  8416  00020A  6E02               	movwf	i2SetPin595@Reg+1,c
  8417  00020C  0E01               	movlw	1
  8418  00020E  6E01               	movwf	i2SetPin595@Reg,c
  8419  000210  0E00               	movlw	0
  8420  000212  6E04               	movwf	i2SetPin595@pin+1,c
  8421  000214  0E02               	movlw	2
  8422  000216  6E03               	movwf	i2SetPin595@pin,c
  8423  000218  0E00               	movlw	0
  8424  00021A  6E06               	movwf	i2SetPin595@value+1,c
  8425  00021C  0E00               	movlw	0
  8426  00021E  6E05               	movwf	i2SetPin595@value,c
  8427  000220  EC69  F00E         	call	i2_SetPin595	;wreg free
  8428                           
  8429                           ;PDU.c: 84: SetPin595(2, 4, ON);
  8430  000224  0E00               	movlw	0
  8431  000226  6E02               	movwf	i2SetPin595@Reg+1,c
  8432  000228  0E02               	movlw	2
  8433  00022A  6E01               	movwf	i2SetPin595@Reg,c
  8434  00022C  0E00               	movlw	0
  8435  00022E  6E04               	movwf	i2SetPin595@pin+1,c
  8436  000230  0E04               	movlw	4
  8437  000232  6E03               	movwf	i2SetPin595@pin,c
  8438  000234  0E00               	movlw	0
  8439  000236  6E06               	movwf	i2SetPin595@value+1,c
  8440  000238  0E01               	movlw	1
  8441  00023A  6E05               	movwf	i2SetPin595@value,c
  8442  00023C  EC69  F00E         	call	i2_SetPin595	;wreg free
  8443                           
  8444                           ;PDU.c: 85: SetPin595(2, 3, ON);
  8445  000240  0E00               	movlw	0
  8446  000242  6E02               	movwf	i2SetPin595@Reg+1,c
  8447  000244  0E02               	movlw	2
  8448  000246  6E01               	movwf	i2SetPin595@Reg,c
  8449  000248  0E00               	movlw	0
  8450  00024A  6E04               	movwf	i2SetPin595@pin+1,c
  8451  00024C  0E03               	movlw	3
  8452  00024E  6E03               	movwf	i2SetPin595@pin,c
  8453  000250  0E00               	movlw	0
  8454  000252  6E06               	movwf	i2SetPin595@value+1,c
  8455  000254  0E01               	movlw	1
  8456  000256  6E05               	movwf	i2SetPin595@value,c
  8457  000258  EC69  F00E         	call	i2_SetPin595	;wreg free
  8458                           
  8459                           ;PDU.c: 86: SetPin595(2, 2, OFF);
  8460  00025C  0E00               	movlw	0
  8461  00025E  6E02               	movwf	i2SetPin595@Reg+1,c
  8462  000260  0E02               	movlw	2
  8463  000262  6E01               	movwf	i2SetPin595@Reg,c
  8464  000264  0E00               	movlw	0
  8465  000266  6E04               	movwf	i2SetPin595@pin+1,c
  8466  000268  0E02               	movlw	2
  8467  00026A  6E03               	movwf	i2SetPin595@pin,c
  8468  00026C  0E00               	movlw	0
  8469  00026E  6E06               	movwf	i2SetPin595@value+1,c
  8470  000270  0E00               	movlw	0
  8471  000272  6E05               	movwf	i2SetPin595@value,c
  8472  000274  EC69  F00E         	call	i2_SetPin595	;wreg free
  8473                           
  8474                           ;PDU.c: 87: SetPin595(3, 4, OFF);
  8475  000278  0E00               	movlw	0
  8476  00027A  6E02               	movwf	i2SetPin595@Reg+1,c
  8477  00027C  0E03               	movlw	3
  8478  00027E  6E01               	movwf	i2SetPin595@Reg,c
  8479  000280  0E00               	movlw	0
  8480  000282  6E04               	movwf	i2SetPin595@pin+1,c
  8481  000284  0E04               	movlw	4
  8482  000286  6E03               	movwf	i2SetPin595@pin,c
  8483  000288  0E00               	movlw	0
  8484  00028A  6E06               	movwf	i2SetPin595@value+1,c
  8485  00028C  0E00               	movlw	0
  8486  00028E  6E05               	movwf	i2SetPin595@value,c
  8487  000290  EC69  F00E         	call	i2_SetPin595	;wreg free
  8488                           
  8489                           ;PDU.c: 88: SetPin595(3, 3, OFF);
  8490  000294  0E00               	movlw	0
  8491  000296  6E02               	movwf	i2SetPin595@Reg+1,c
  8492  000298  0E03               	movlw	3
  8493  00029A  6E01               	movwf	i2SetPin595@Reg,c
  8494  00029C  0E00               	movlw	0
  8495  00029E  6E04               	movwf	i2SetPin595@pin+1,c
  8496  0002A0  0E03               	movlw	3
  8497  0002A2  6E03               	movwf	i2SetPin595@pin,c
  8498  0002A4  0E00               	movlw	0
  8499  0002A6  6E06               	movwf	i2SetPin595@value+1,c
  8500  0002A8  0E00               	movlw	0
  8501  0002AA  6E05               	movwf	i2SetPin595@value,c
  8502  0002AC  EC69  F00E         	call	i2_SetPin595	;wreg free
  8503                           
  8504                           ;PDU.c: 89: SetPin595(3, 2, OFF);
  8505  0002B0  0E00               	movlw	0
  8506  0002B2  6E02               	movwf	i2SetPin595@Reg+1,c
  8507  0002B4  0E03               	movlw	3
  8508  0002B6  6E01               	movwf	i2SetPin595@Reg,c
  8509  0002B8  0E00               	movlw	0
  8510  0002BA  6E04               	movwf	i2SetPin595@pin+1,c
  8511  0002BC  0E02               	movlw	2
  8512  0002BE  6E03               	movwf	i2SetPin595@pin,c
  8513  0002C0  0E00               	movlw	0
  8514  0002C2  6E06               	movwf	i2SetPin595@value+1,c
  8515  0002C4  0E00               	movlw	0
  8516  0002C6  6E05               	movwf	i2SetPin595@value,c
  8517  0002C8  EC69  F00E         	call	i2_SetPin595	;wreg free
  8518                           
  8519                           ;PDU.c: 90: Update();
  8520  0002CC  EC20  F011         	call	i2_Update	;wreg free
  8521                           
  8522                           ;PDU.c: 91: CurrentADC[2] = ADC_GetConversion(U8Multisense);
  8523  0002D0  0E16               	movlw	22
  8524  0002D2  ECCA  F00F         	call	_ADC_GetConversion
  8525  0002D6  C001  F0CB         	movff	?_ADC_GetConversion,_CurrentADC+4
  8526  0002DA  C002  F0CC         	movff	?_ADC_GetConversion+1,_CurrentADC+5
  8527                           
  8528                           ;PDU.c: 93: }
  8529  0002DE  0012               	return	
  8530  0002E0                     i2l3400:
  8531                           
  8532                           ;PDU.c: 94: else if(gather == 3){
  8533  0002E0  0E03               	movlw	3
  8534  0002E2  180E               	xorwf	ReadCurrent@gather,w,c
  8535  0002E4  A4D8               	btfss	status,2,c
  8536  0002E6  D088               	goto	i2l3406
  8537                           
  8538                           ;PDU.c: 96: SetPin595(1, 4, OFF);
  8539  0002E8  0E00               	movlw	0
  8540  0002EA  6E02               	movwf	i2SetPin595@Reg+1,c
  8541  0002EC  0E01               	movlw	1
  8542  0002EE  6E01               	movwf	i2SetPin595@Reg,c
  8543  0002F0  0E00               	movlw	0
  8544  0002F2  6E04               	movwf	i2SetPin595@pin+1,c
  8545  0002F4  0E04               	movlw	4
  8546  0002F6  6E03               	movwf	i2SetPin595@pin,c
  8547  0002F8  0E00               	movlw	0
  8548  0002FA  6E06               	movwf	i2SetPin595@value+1,c
  8549  0002FC  0E00               	movlw	0
  8550  0002FE  6E05               	movwf	i2SetPin595@value,c
  8551  000300  EC69  F00E         	call	i2_SetPin595	;wreg free
  8552                           
  8553                           ;PDU.c: 97: SetPin595(1, 3, OFF);
  8554  000304  0E00               	movlw	0
  8555  000306  6E02               	movwf	i2SetPin595@Reg+1,c
  8556  000308  0E01               	movlw	1
  8557  00030A  6E01               	movwf	i2SetPin595@Reg,c
  8558  00030C  0E00               	movlw	0
  8559  00030E  6E04               	movwf	i2SetPin595@pin+1,c
  8560  000310  0E03               	movlw	3
  8561  000312  6E03               	movwf	i2SetPin595@pin,c
  8562  000314  0E00               	movlw	0
  8563  000316  6E06               	movwf	i2SetPin595@value+1,c
  8564  000318  0E00               	movlw	0
  8565  00031A  6E05               	movwf	i2SetPin595@value,c
  8566  00031C  EC69  F00E         	call	i2_SetPin595	;wreg free
  8567                           
  8568                           ;PDU.c: 98: SetPin595(1, 2, OFF);
  8569  000320  0E00               	movlw	0
  8570  000322  6E02               	movwf	i2SetPin595@Reg+1,c
  8571  000324  0E01               	movlw	1
  8572  000326  6E01               	movwf	i2SetPin595@Reg,c
  8573  000328  0E00               	movlw	0
  8574  00032A  6E04               	movwf	i2SetPin595@pin+1,c
  8575  00032C  0E02               	movlw	2
  8576  00032E  6E03               	movwf	i2SetPin595@pin,c
  8577  000330  0E00               	movlw	0
  8578  000332  6E06               	movwf	i2SetPin595@value+1,c
  8579  000334  0E00               	movlw	0
  8580  000336  6E05               	movwf	i2SetPin595@value,c
  8581  000338  EC69  F00E         	call	i2_SetPin595	;wreg free
  8582                           
  8583                           ;PDU.c: 99: SetPin595(2, 4, OFF);
  8584  00033C  0E00               	movlw	0
  8585  00033E  6E02               	movwf	i2SetPin595@Reg+1,c
  8586  000340  0E02               	movlw	2
  8587  000342  6E01               	movwf	i2SetPin595@Reg,c
  8588  000344  0E00               	movlw	0
  8589  000346  6E04               	movwf	i2SetPin595@pin+1,c
  8590  000348  0E04               	movlw	4
  8591  00034A  6E03               	movwf	i2SetPin595@pin,c
  8592  00034C  0E00               	movlw	0
  8593  00034E  6E06               	movwf	i2SetPin595@value+1,c
  8594  000350  0E00               	movlw	0
  8595  000352  6E05               	movwf	i2SetPin595@value,c
  8596  000354  EC69  F00E         	call	i2_SetPin595	;wreg free
  8597                           
  8598                           ;PDU.c: 100: SetPin595(2, 3, OFF);
  8599  000358  0E00               	movlw	0
  8600  00035A  6E02               	movwf	i2SetPin595@Reg+1,c
  8601  00035C  0E02               	movlw	2
  8602  00035E  6E01               	movwf	i2SetPin595@Reg,c
  8603  000360  0E00               	movlw	0
  8604  000362  6E04               	movwf	i2SetPin595@pin+1,c
  8605  000364  0E03               	movlw	3
  8606  000366  6E03               	movwf	i2SetPin595@pin,c
  8607  000368  0E00               	movlw	0
  8608  00036A  6E06               	movwf	i2SetPin595@value+1,c
  8609  00036C  0E00               	movlw	0
  8610  00036E  6E05               	movwf	i2SetPin595@value,c
  8611  000370  EC69  F00E         	call	i2_SetPin595	;wreg free
  8612                           
  8613                           ;PDU.c: 101: SetPin595(2, 2, OFF);
  8614  000374  0E00               	movlw	0
  8615  000376  6E02               	movwf	i2SetPin595@Reg+1,c
  8616  000378  0E02               	movlw	2
  8617  00037A  6E01               	movwf	i2SetPin595@Reg,c
  8618  00037C  0E00               	movlw	0
  8619  00037E  6E04               	movwf	i2SetPin595@pin+1,c
  8620  000380  0E02               	movlw	2
  8621  000382  6E03               	movwf	i2SetPin595@pin,c
  8622  000384  0E00               	movlw	0
  8623  000386  6E06               	movwf	i2SetPin595@value+1,c
  8624  000388  0E00               	movlw	0
  8625  00038A  6E05               	movwf	i2SetPin595@value,c
  8626  00038C  EC69  F00E         	call	i2_SetPin595	;wreg free
  8627                           
  8628                           ;PDU.c: 102: SetPin595(3, 4, ON);
  8629  000390  0E00               	movlw	0
  8630  000392  6E02               	movwf	i2SetPin595@Reg+1,c
  8631  000394  0E03               	movlw	3
  8632  000396  6E01               	movwf	i2SetPin595@Reg,c
  8633  000398  0E00               	movlw	0
  8634  00039A  6E04               	movwf	i2SetPin595@pin+1,c
  8635  00039C  0E04               	movlw	4
  8636  00039E  6E03               	movwf	i2SetPin595@pin,c
  8637  0003A0  0E00               	movlw	0
  8638  0003A2  6E06               	movwf	i2SetPin595@value+1,c
  8639  0003A4  0E01               	movlw	1
  8640  0003A6  6E05               	movwf	i2SetPin595@value,c
  8641  0003A8  EC69  F00E         	call	i2_SetPin595	;wreg free
  8642                           
  8643                           ;PDU.c: 103: SetPin595(3, 3, OFF);
  8644  0003AC  0E00               	movlw	0
  8645  0003AE  6E02               	movwf	i2SetPin595@Reg+1,c
  8646  0003B0  0E03               	movlw	3
  8647  0003B2  6E01               	movwf	i2SetPin595@Reg,c
  8648  0003B4  0E00               	movlw	0
  8649  0003B6  6E04               	movwf	i2SetPin595@pin+1,c
  8650  0003B8  0E03               	movlw	3
  8651  0003BA  6E03               	movwf	i2SetPin595@pin,c
  8652  0003BC  0E00               	movlw	0
  8653  0003BE  6E06               	movwf	i2SetPin595@value+1,c
  8654  0003C0  0E00               	movlw	0
  8655  0003C2  6E05               	movwf	i2SetPin595@value,c
  8656  0003C4  EC69  F00E         	call	i2_SetPin595	;wreg free
  8657                           
  8658                           ;PDU.c: 104: SetPin595(3, 2, OFF);
  8659  0003C8  0E00               	movlw	0
  8660  0003CA  6E02               	movwf	i2SetPin595@Reg+1,c
  8661  0003CC  0E03               	movlw	3
  8662  0003CE  6E01               	movwf	i2SetPin595@Reg,c
  8663  0003D0  0E00               	movlw	0
  8664  0003D2  6E04               	movwf	i2SetPin595@pin+1,c
  8665  0003D4  0E02               	movlw	2
  8666  0003D6  6E03               	movwf	i2SetPin595@pin,c
  8667  0003D8  0E00               	movlw	0
  8668  0003DA  6E06               	movwf	i2SetPin595@value+1,c
  8669  0003DC  0E00               	movlw	0
  8670  0003DE  6E05               	movwf	i2SetPin595@value,c
  8671  0003E0  EC69  F00E         	call	i2_SetPin595	;wreg free
  8672                           
  8673                           ;PDU.c: 105: Update();
  8674  0003E4  EC20  F011         	call	i2_Update	;wreg free
  8675                           
  8676                           ;PDU.c: 106: CurrentADC[1] = ADC_GetConversion(U5Multisense);
  8677  0003E8  0E10               	movlw	16
  8678  0003EA  ECCA  F00F         	call	_ADC_GetConversion
  8679  0003EE  C001  F0C9         	movff	?_ADC_GetConversion,_CurrentADC+2
  8680  0003F2  C002  F0CA         	movff	?_ADC_GetConversion+1,_CurrentADC+3
  8681                           
  8682                           ;PDU.c: 108: }
  8683  0003F6  0012               	return	
  8684  0003F8                     i2l3406:
  8685                           
  8686                           ;PDU.c: 109: else if(gather == 4){
  8687  0003F8  0E04               	movlw	4
  8688  0003FA  180E               	xorwf	ReadCurrent@gather,w,c
  8689  0003FC  A4D8               	btfss	status,2,c
  8690  0003FE  D088               	goto	i2l3412
  8691                           
  8692                           ;PDU.c: 111: SetPin595(1, 4, ON);
  8693  000400  0E00               	movlw	0
  8694  000402  6E02               	movwf	i2SetPin595@Reg+1,c
  8695  000404  0E01               	movlw	1
  8696  000406  6E01               	movwf	i2SetPin595@Reg,c
  8697  000408  0E00               	movlw	0
  8698  00040A  6E04               	movwf	i2SetPin595@pin+1,c
  8699  00040C  0E04               	movlw	4
  8700  00040E  6E03               	movwf	i2SetPin595@pin,c
  8701  000410  0E00               	movlw	0
  8702  000412  6E06               	movwf	i2SetPin595@value+1,c
  8703  000414  0E01               	movlw	1
  8704  000416  6E05               	movwf	i2SetPin595@value,c
  8705  000418  EC69  F00E         	call	i2_SetPin595	;wreg free
  8706                           
  8707                           ;PDU.c: 112: SetPin595(1, 3, ON);
  8708  00041C  0E00               	movlw	0
  8709  00041E  6E02               	movwf	i2SetPin595@Reg+1,c
  8710  000420  0E01               	movlw	1
  8711  000422  6E01               	movwf	i2SetPin595@Reg,c
  8712  000424  0E00               	movlw	0
  8713  000426  6E04               	movwf	i2SetPin595@pin+1,c
  8714  000428  0E03               	movlw	3
  8715  00042A  6E03               	movwf	i2SetPin595@pin,c
  8716  00042C  0E00               	movlw	0
  8717  00042E  6E06               	movwf	i2SetPin595@value+1,c
  8718  000430  0E01               	movlw	1
  8719  000432  6E05               	movwf	i2SetPin595@value,c
  8720  000434  EC69  F00E         	call	i2_SetPin595	;wreg free
  8721                           
  8722                           ;PDU.c: 113: SetPin595(1, 2, OFF);
  8723  000438  0E00               	movlw	0
  8724  00043A  6E02               	movwf	i2SetPin595@Reg+1,c
  8725  00043C  0E01               	movlw	1
  8726  00043E  6E01               	movwf	i2SetPin595@Reg,c
  8727  000440  0E00               	movlw	0
  8728  000442  6E04               	movwf	i2SetPin595@pin+1,c
  8729  000444  0E02               	movlw	2
  8730  000446  6E03               	movwf	i2SetPin595@pin,c
  8731  000448  0E00               	movlw	0
  8732  00044A  6E06               	movwf	i2SetPin595@value+1,c
  8733  00044C  0E00               	movlw	0
  8734  00044E  6E05               	movwf	i2SetPin595@value,c
  8735  000450  EC69  F00E         	call	i2_SetPin595	;wreg free
  8736                           
  8737                           ;PDU.c: 114: SetPin595(2, 4, OFF);
  8738  000454  0E00               	movlw	0
  8739  000456  6E02               	movwf	i2SetPin595@Reg+1,c
  8740  000458  0E02               	movlw	2
  8741  00045A  6E01               	movwf	i2SetPin595@Reg,c
  8742  00045C  0E00               	movlw	0
  8743  00045E  6E04               	movwf	i2SetPin595@pin+1,c
  8744  000460  0E04               	movlw	4
  8745  000462  6E03               	movwf	i2SetPin595@pin,c
  8746  000464  0E00               	movlw	0
  8747  000466  6E06               	movwf	i2SetPin595@value+1,c
  8748  000468  0E00               	movlw	0
  8749  00046A  6E05               	movwf	i2SetPin595@value,c
  8750  00046C  EC69  F00E         	call	i2_SetPin595	;wreg free
  8751                           
  8752                           ;PDU.c: 115: SetPin595(2, 3, OFF);
  8753  000470  0E00               	movlw	0
  8754  000472  6E02               	movwf	i2SetPin595@Reg+1,c
  8755  000474  0E02               	movlw	2
  8756  000476  6E01               	movwf	i2SetPin595@Reg,c
  8757  000478  0E00               	movlw	0
  8758  00047A  6E04               	movwf	i2SetPin595@pin+1,c
  8759  00047C  0E03               	movlw	3
  8760  00047E  6E03               	movwf	i2SetPin595@pin,c
  8761  000480  0E00               	movlw	0
  8762  000482  6E06               	movwf	i2SetPin595@value+1,c
  8763  000484  0E00               	movlw	0
  8764  000486  6E05               	movwf	i2SetPin595@value,c
  8765  000488  EC69  F00E         	call	i2_SetPin595	;wreg free
  8766                           
  8767                           ;PDU.c: 116: SetPin595(2, 2, OFF);
  8768  00048C  0E00               	movlw	0
  8769  00048E  6E02               	movwf	i2SetPin595@Reg+1,c
  8770  000490  0E02               	movlw	2
  8771  000492  6E01               	movwf	i2SetPin595@Reg,c
  8772  000494  0E00               	movlw	0
  8773  000496  6E04               	movwf	i2SetPin595@pin+1,c
  8774  000498  0E02               	movlw	2
  8775  00049A  6E03               	movwf	i2SetPin595@pin,c
  8776  00049C  0E00               	movlw	0
  8777  00049E  6E06               	movwf	i2SetPin595@value+1,c
  8778  0004A0  0E00               	movlw	0
  8779  0004A2  6E05               	movwf	i2SetPin595@value,c
  8780  0004A4  EC69  F00E         	call	i2_SetPin595	;wreg free
  8781                           
  8782                           ;PDU.c: 117: SetPin595(3, 4, OFF);
  8783  0004A8  0E00               	movlw	0
  8784  0004AA  6E02               	movwf	i2SetPin595@Reg+1,c
  8785  0004AC  0E03               	movlw	3
  8786  0004AE  6E01               	movwf	i2SetPin595@Reg,c
  8787  0004B0  0E00               	movlw	0
  8788  0004B2  6E04               	movwf	i2SetPin595@pin+1,c
  8789  0004B4  0E04               	movlw	4
  8790  0004B6  6E03               	movwf	i2SetPin595@pin,c
  8791  0004B8  0E00               	movlw	0
  8792  0004BA  6E06               	movwf	i2SetPin595@value+1,c
  8793  0004BC  0E00               	movlw	0
  8794  0004BE  6E05               	movwf	i2SetPin595@value,c
  8795  0004C0  EC69  F00E         	call	i2_SetPin595	;wreg free
  8796                           
  8797                           ;PDU.c: 118: SetPin595(3, 3, OFF);
  8798  0004C4  0E00               	movlw	0
  8799  0004C6  6E02               	movwf	i2SetPin595@Reg+1,c
  8800  0004C8  0E03               	movlw	3
  8801  0004CA  6E01               	movwf	i2SetPin595@Reg,c
  8802  0004CC  0E00               	movlw	0
  8803  0004CE  6E04               	movwf	i2SetPin595@pin+1,c
  8804  0004D0  0E03               	movlw	3
  8805  0004D2  6E03               	movwf	i2SetPin595@pin,c
  8806  0004D4  0E00               	movlw	0
  8807  0004D6  6E06               	movwf	i2SetPin595@value+1,c
  8808  0004D8  0E00               	movlw	0
  8809  0004DA  6E05               	movwf	i2SetPin595@value,c
  8810  0004DC  EC69  F00E         	call	i2_SetPin595	;wreg free
  8811                           
  8812                           ;PDU.c: 119: SetPin595(3, 2, OFF);
  8813  0004E0  0E00               	movlw	0
  8814  0004E2  6E02               	movwf	i2SetPin595@Reg+1,c
  8815  0004E4  0E03               	movlw	3
  8816  0004E6  6E01               	movwf	i2SetPin595@Reg,c
  8817  0004E8  0E00               	movlw	0
  8818  0004EA  6E04               	movwf	i2SetPin595@pin+1,c
  8819  0004EC  0E02               	movlw	2
  8820  0004EE  6E03               	movwf	i2SetPin595@pin,c
  8821  0004F0  0E00               	movlw	0
  8822  0004F2  6E06               	movwf	i2SetPin595@value+1,c
  8823  0004F4  0E00               	movlw	0
  8824  0004F6  6E05               	movwf	i2SetPin595@value,c
  8825  0004F8  EC69  F00E         	call	i2_SetPin595	;wreg free
  8826                           
  8827                           ;PDU.c: 120: Update();
  8828  0004FC  EC20  F011         	call	i2_Update	;wreg free
  8829                           
  8830                           ;PDU.c: 121: CurrentADC[4] = ADC_GetConversion(U10Multisense);
  8831  000500  0E17               	movlw	23
  8832  000502  ECCA  F00F         	call	_ADC_GetConversion
  8833  000506  C001  F0CF         	movff	?_ADC_GetConversion,_CurrentADC+8
  8834  00050A  C002  F0D0         	movff	?_ADC_GetConversion+1,_CurrentADC+9
  8835                           
  8836                           ;PDU.c: 123: }
  8837  00050E  0012               	return	
  8838  000510                     i2l3412:
  8839                           
  8840                           ;PDU.c: 124: else if(gather == 5){
  8841  000510  0E05               	movlw	5
  8842  000512  180E               	xorwf	ReadCurrent@gather,w,c
  8843  000514  A4D8               	btfss	status,2,c
  8844  000516  D088               	goto	i2l3418
  8845                           
  8846                           ;PDU.c: 126: SetPin595(1, 4, OFF);
  8847  000518  0E00               	movlw	0
  8848  00051A  6E02               	movwf	i2SetPin595@Reg+1,c
  8849  00051C  0E01               	movlw	1
  8850  00051E  6E01               	movwf	i2SetPin595@Reg,c
  8851  000520  0E00               	movlw	0
  8852  000522  6E04               	movwf	i2SetPin595@pin+1,c
  8853  000524  0E04               	movlw	4
  8854  000526  6E03               	movwf	i2SetPin595@pin,c
  8855  000528  0E00               	movlw	0
  8856  00052A  6E06               	movwf	i2SetPin595@value+1,c
  8857  00052C  0E00               	movlw	0
  8858  00052E  6E05               	movwf	i2SetPin595@value,c
  8859  000530  EC69  F00E         	call	i2_SetPin595	;wreg free
  8860                           
  8861                           ;PDU.c: 127: SetPin595(1, 3, OFF);
  8862  000534  0E00               	movlw	0
  8863  000536  6E02               	movwf	i2SetPin595@Reg+1,c
  8864  000538  0E01               	movlw	1
  8865  00053A  6E01               	movwf	i2SetPin595@Reg,c
  8866  00053C  0E00               	movlw	0
  8867  00053E  6E04               	movwf	i2SetPin595@pin+1,c
  8868  000540  0E03               	movlw	3
  8869  000542  6E03               	movwf	i2SetPin595@pin,c
  8870  000544  0E00               	movlw	0
  8871  000546  6E06               	movwf	i2SetPin595@value+1,c
  8872  000548  0E00               	movlw	0
  8873  00054A  6E05               	movwf	i2SetPin595@value,c
  8874  00054C  EC69  F00E         	call	i2_SetPin595	;wreg free
  8875                           
  8876                           ;PDU.c: 128: SetPin595(1, 2, OFF);
  8877  000550  0E00               	movlw	0
  8878  000552  6E02               	movwf	i2SetPin595@Reg+1,c
  8879  000554  0E01               	movlw	1
  8880  000556  6E01               	movwf	i2SetPin595@Reg,c
  8881  000558  0E00               	movlw	0
  8882  00055A  6E04               	movwf	i2SetPin595@pin+1,c
  8883  00055C  0E02               	movlw	2
  8884  00055E  6E03               	movwf	i2SetPin595@pin,c
  8885  000560  0E00               	movlw	0
  8886  000562  6E06               	movwf	i2SetPin595@value+1,c
  8887  000564  0E00               	movlw	0
  8888  000566  6E05               	movwf	i2SetPin595@value,c
  8889  000568  EC69  F00E         	call	i2_SetPin595	;wreg free
  8890                           
  8891                           ;PDU.c: 129: SetPin595(2, 4, ON);
  8892  00056C  0E00               	movlw	0
  8893  00056E  6E02               	movwf	i2SetPin595@Reg+1,c
  8894  000570  0E02               	movlw	2
  8895  000572  6E01               	movwf	i2SetPin595@Reg,c
  8896  000574  0E00               	movlw	0
  8897  000576  6E04               	movwf	i2SetPin595@pin+1,c
  8898  000578  0E04               	movlw	4
  8899  00057A  6E03               	movwf	i2SetPin595@pin,c
  8900  00057C  0E00               	movlw	0
  8901  00057E  6E06               	movwf	i2SetPin595@value+1,c
  8902  000580  0E01               	movlw	1
  8903  000582  6E05               	movwf	i2SetPin595@value,c
  8904  000584  EC69  F00E         	call	i2_SetPin595	;wreg free
  8905                           
  8906                           ;PDU.c: 130: SetPin595(2, 3, OFF);
  8907  000588  0E00               	movlw	0
  8908  00058A  6E02               	movwf	i2SetPin595@Reg+1,c
  8909  00058C  0E02               	movlw	2
  8910  00058E  6E01               	movwf	i2SetPin595@Reg,c
  8911  000590  0E00               	movlw	0
  8912  000592  6E04               	movwf	i2SetPin595@pin+1,c
  8913  000594  0E03               	movlw	3
  8914  000596  6E03               	movwf	i2SetPin595@pin,c
  8915  000598  0E00               	movlw	0
  8916  00059A  6E06               	movwf	i2SetPin595@value+1,c
  8917  00059C  0E00               	movlw	0
  8918  00059E  6E05               	movwf	i2SetPin595@value,c
  8919  0005A0  EC69  F00E         	call	i2_SetPin595	;wreg free
  8920                           
  8921                           ;PDU.c: 131: SetPin595(2, 2, OFF);
  8922  0005A4  0E00               	movlw	0
  8923  0005A6  6E02               	movwf	i2SetPin595@Reg+1,c
  8924  0005A8  0E02               	movlw	2
  8925  0005AA  6E01               	movwf	i2SetPin595@Reg,c
  8926  0005AC  0E00               	movlw	0
  8927  0005AE  6E04               	movwf	i2SetPin595@pin+1,c
  8928  0005B0  0E02               	movlw	2
  8929  0005B2  6E03               	movwf	i2SetPin595@pin,c
  8930  0005B4  0E00               	movlw	0
  8931  0005B6  6E06               	movwf	i2SetPin595@value+1,c
  8932  0005B8  0E00               	movlw	0
  8933  0005BA  6E05               	movwf	i2SetPin595@value,c
  8934  0005BC  EC69  F00E         	call	i2_SetPin595	;wreg free
  8935                           
  8936                           ;PDU.c: 132: SetPin595(3, 4, OFF);
  8937  0005C0  0E00               	movlw	0
  8938  0005C2  6E02               	movwf	i2SetPin595@Reg+1,c
  8939  0005C4  0E03               	movlw	3
  8940  0005C6  6E01               	movwf	i2SetPin595@Reg,c
  8941  0005C8  0E00               	movlw	0
  8942  0005CA  6E04               	movwf	i2SetPin595@pin+1,c
  8943  0005CC  0E04               	movlw	4
  8944  0005CE  6E03               	movwf	i2SetPin595@pin,c
  8945  0005D0  0E00               	movlw	0
  8946  0005D2  6E06               	movwf	i2SetPin595@value+1,c
  8947  0005D4  0E00               	movlw	0
  8948  0005D6  6E05               	movwf	i2SetPin595@value,c
  8949  0005D8  EC69  F00E         	call	i2_SetPin595	;wreg free
  8950                           
  8951                           ;PDU.c: 133: SetPin595(3, 3, OFF);
  8952  0005DC  0E00               	movlw	0
  8953  0005DE  6E02               	movwf	i2SetPin595@Reg+1,c
  8954  0005E0  0E03               	movlw	3
  8955  0005E2  6E01               	movwf	i2SetPin595@Reg,c
  8956  0005E4  0E00               	movlw	0
  8957  0005E6  6E04               	movwf	i2SetPin595@pin+1,c
  8958  0005E8  0E03               	movlw	3
  8959  0005EA  6E03               	movwf	i2SetPin595@pin,c
  8960  0005EC  0E00               	movlw	0
  8961  0005EE  6E06               	movwf	i2SetPin595@value+1,c
  8962  0005F0  0E00               	movlw	0
  8963  0005F2  6E05               	movwf	i2SetPin595@value,c
  8964  0005F4  EC69  F00E         	call	i2_SetPin595	;wreg free
  8965                           
  8966                           ;PDU.c: 134: SetPin595(3, 2, OFF);
  8967  0005F8  0E00               	movlw	0
  8968  0005FA  6E02               	movwf	i2SetPin595@Reg+1,c
  8969  0005FC  0E03               	movlw	3
  8970  0005FE  6E01               	movwf	i2SetPin595@Reg,c
  8971  000600  0E00               	movlw	0
  8972  000602  6E04               	movwf	i2SetPin595@pin+1,c
  8973  000604  0E02               	movlw	2
  8974  000606  6E03               	movwf	i2SetPin595@pin,c
  8975  000608  0E00               	movlw	0
  8976  00060A  6E06               	movwf	i2SetPin595@value+1,c
  8977  00060C  0E00               	movlw	0
  8978  00060E  6E05               	movwf	i2SetPin595@value,c
  8979  000610  EC69  F00E         	call	i2_SetPin595	;wreg free
  8980                           
  8981                           ;PDU.c: 135: Update();
  8982  000614  EC20  F011         	call	i2_Update	;wreg free
  8983                           
  8984                           ;PDU.c: 136: CurrentADC[3] = ADC_GetConversion(U8Multisense);
  8985  000618  0E16               	movlw	22
  8986  00061A  ECCA  F00F         	call	_ADC_GetConversion
  8987  00061E  C001  F0CD         	movff	?_ADC_GetConversion,_CurrentADC+6
  8988  000622  C002  F0CE         	movff	?_ADC_GetConversion+1,_CurrentADC+7
  8989                           
  8990                           ;PDU.c: 138: }
  8991  000626  0012               	return	
  8992  000628                     i2l3418:
  8993                           
  8994                           ;PDU.c: 139: else if(gather == 6){
  8995  000628  0E06               	movlw	6
  8996  00062A  180E               	xorwf	ReadCurrent@gather,w,c
  8997  00062C  A4D8               	btfss	status,2,c
  8998  00062E  0012               	return	
  8999                           
  9000                           ;PDU.c: 141: SetPin595(1, 4, OFF);
  9001  000630  0E00               	movlw	0
  9002  000632  6E02               	movwf	i2SetPin595@Reg+1,c
  9003  000634  0E01               	movlw	1
  9004  000636  6E01               	movwf	i2SetPin595@Reg,c
  9005  000638  0E00               	movlw	0
  9006  00063A  6E04               	movwf	i2SetPin595@pin+1,c
  9007  00063C  0E04               	movlw	4
  9008  00063E  6E03               	movwf	i2SetPin595@pin,c
  9009  000640  0E00               	movlw	0
  9010  000642  6E06               	movwf	i2SetPin595@value+1,c
  9011  000644  0E00               	movlw	0
  9012  000646  6E05               	movwf	i2SetPin595@value,c
  9013  000648  EC69  F00E         	call	i2_SetPin595	;wreg free
  9014                           
  9015                           ;PDU.c: 142: SetPin595(1, 3, OFF);
  9016  00064C  0E00               	movlw	0
  9017  00064E  6E02               	movwf	i2SetPin595@Reg+1,c
  9018  000650  0E01               	movlw	1
  9019  000652  6E01               	movwf	i2SetPin595@Reg,c
  9020  000654  0E00               	movlw	0
  9021  000656  6E04               	movwf	i2SetPin595@pin+1,c
  9022  000658  0E03               	movlw	3
  9023  00065A  6E03               	movwf	i2SetPin595@pin,c
  9024  00065C  0E00               	movlw	0
  9025  00065E  6E06               	movwf	i2SetPin595@value+1,c
  9026  000660  0E00               	movlw	0
  9027  000662  6E05               	movwf	i2SetPin595@value,c
  9028  000664  EC69  F00E         	call	i2_SetPin595	;wreg free
  9029                           
  9030                           ;PDU.c: 143: SetPin595(1, 2, OFF);
  9031  000668  0E00               	movlw	0
  9032  00066A  6E02               	movwf	i2SetPin595@Reg+1,c
  9033  00066C  0E01               	movlw	1
  9034  00066E  6E01               	movwf	i2SetPin595@Reg,c
  9035  000670  0E00               	movlw	0
  9036  000672  6E04               	movwf	i2SetPin595@pin+1,c
  9037  000674  0E02               	movlw	2
  9038  000676  6E03               	movwf	i2SetPin595@pin,c
  9039  000678  0E00               	movlw	0
  9040  00067A  6E06               	movwf	i2SetPin595@value+1,c
  9041  00067C  0E00               	movlw	0
  9042  00067E  6E05               	movwf	i2SetPin595@value,c
  9043  000680  EC69  F00E         	call	i2_SetPin595	;wreg free
  9044                           
  9045                           ;PDU.c: 144: SetPin595(2, 4, OFF);
  9046  000684  0E00               	movlw	0
  9047  000686  6E02               	movwf	i2SetPin595@Reg+1,c
  9048  000688  0E02               	movlw	2
  9049  00068A  6E01               	movwf	i2SetPin595@Reg,c
  9050  00068C  0E00               	movlw	0
  9051  00068E  6E04               	movwf	i2SetPin595@pin+1,c
  9052  000690  0E04               	movlw	4
  9053  000692  6E03               	movwf	i2SetPin595@pin,c
  9054  000694  0E00               	movlw	0
  9055  000696  6E06               	movwf	i2SetPin595@value+1,c
  9056  000698  0E00               	movlw	0
  9057  00069A  6E05               	movwf	i2SetPin595@value,c
  9058  00069C  EC69  F00E         	call	i2_SetPin595	;wreg free
  9059                           
  9060                           ;PDU.c: 145: SetPin595(2, 3, OFF);
  9061  0006A0  0E00               	movlw	0
  9062  0006A2  6E02               	movwf	i2SetPin595@Reg+1,c
  9063  0006A4  0E02               	movlw	2
  9064  0006A6  6E01               	movwf	i2SetPin595@Reg,c
  9065  0006A8  0E00               	movlw	0
  9066  0006AA  6E04               	movwf	i2SetPin595@pin+1,c
  9067  0006AC  0E03               	movlw	3
  9068  0006AE  6E03               	movwf	i2SetPin595@pin,c
  9069  0006B0  0E00               	movlw	0
  9070  0006B2  6E06               	movwf	i2SetPin595@value+1,c
  9071  0006B4  0E00               	movlw	0
  9072  0006B6  6E05               	movwf	i2SetPin595@value,c
  9073  0006B8  EC69  F00E         	call	i2_SetPin595	;wreg free
  9074                           
  9075                           ;PDU.c: 146: SetPin595(2, 2, OFF);
  9076  0006BC  0E00               	movlw	0
  9077  0006BE  6E02               	movwf	i2SetPin595@Reg+1,c
  9078  0006C0  0E02               	movlw	2
  9079  0006C2  6E01               	movwf	i2SetPin595@Reg,c
  9080  0006C4  0E00               	movlw	0
  9081  0006C6  6E04               	movwf	i2SetPin595@pin+1,c
  9082  0006C8  0E02               	movlw	2
  9083  0006CA  6E03               	movwf	i2SetPin595@pin,c
  9084  0006CC  0E00               	movlw	0
  9085  0006CE  6E06               	movwf	i2SetPin595@value+1,c
  9086  0006D0  0E00               	movlw	0
  9087  0006D2  6E05               	movwf	i2SetPin595@value,c
  9088  0006D4  EC69  F00E         	call	i2_SetPin595	;wreg free
  9089                           
  9090                           ;PDU.c: 147: SetPin595(3, 4, ON);
  9091  0006D8  0E00               	movlw	0
  9092  0006DA  6E02               	movwf	i2SetPin595@Reg+1,c
  9093  0006DC  0E03               	movlw	3
  9094  0006DE  6E01               	movwf	i2SetPin595@Reg,c
  9095  0006E0  0E00               	movlw	0
  9096  0006E2  6E04               	movwf	i2SetPin595@pin+1,c
  9097  0006E4  0E04               	movlw	4
  9098  0006E6  6E03               	movwf	i2SetPin595@pin,c
  9099  0006E8  0E00               	movlw	0
  9100  0006EA  6E06               	movwf	i2SetPin595@value+1,c
  9101  0006EC  0E01               	movlw	1
  9102  0006EE  6E05               	movwf	i2SetPin595@value,c
  9103  0006F0  EC69  F00E         	call	i2_SetPin595	;wreg free
  9104                           
  9105                           ;PDU.c: 148: SetPin595(3, 3, ON);
  9106  0006F4  0E00               	movlw	0
  9107  0006F6  6E02               	movwf	i2SetPin595@Reg+1,c
  9108  0006F8  0E03               	movlw	3
  9109  0006FA  6E01               	movwf	i2SetPin595@Reg,c
  9110  0006FC  0E00               	movlw	0
  9111  0006FE  6E04               	movwf	i2SetPin595@pin+1,c
  9112  000700  0E03               	movlw	3
  9113  000702  6E03               	movwf	i2SetPin595@pin,c
  9114  000704  0E00               	movlw	0
  9115  000706  6E06               	movwf	i2SetPin595@value+1,c
  9116  000708  0E01               	movlw	1
  9117  00070A  6E05               	movwf	i2SetPin595@value,c
  9118  00070C  EC69  F00E         	call	i2_SetPin595	;wreg free
  9119                           
  9120                           ;PDU.c: 149: SetPin595(3, 2, OFF);
  9121  000710  0E00               	movlw	0
  9122  000712  6E02               	movwf	i2SetPin595@Reg+1,c
  9123  000714  0E03               	movlw	3
  9124  000716  6E01               	movwf	i2SetPin595@Reg,c
  9125  000718  0E00               	movlw	0
  9126  00071A  6E04               	movwf	i2SetPin595@pin+1,c
  9127  00071C  0E02               	movlw	2
  9128  00071E  6E03               	movwf	i2SetPin595@pin,c
  9129  000720  0E00               	movlw	0
  9130  000722  6E06               	movwf	i2SetPin595@value+1,c
  9131  000724  0E00               	movlw	0
  9132  000726  6E05               	movwf	i2SetPin595@value,c
  9133  000728  EC69  F00E         	call	i2_SetPin595	;wreg free
  9134                           
  9135                           ;PDU.c: 150: Update();
  9136  00072C  EC20  F011         	call	i2_Update	;wreg free
  9137                           
  9138                           ;PDU.c: 151: CurrentADC[0] = ADC_GetConversion(U5Multisense);
  9139  000730  0E10               	movlw	16
  9140  000732  ECCA  F00F         	call	_ADC_GetConversion
  9141  000736  C001  F0C7         	movff	?_ADC_GetConversion,_CurrentADC
  9142  00073A  C002  F0C8         	movff	?_ADC_GetConversion+1,_CurrentADC+1
  9143  00073E  0012               	return	
  9144  000740                     __end_of_ReadCurrent:
  9145                           	opt stack 0
  9146                           pclatu	equ	0xFFB
  9147                           pclath	equ	0xFFA
  9148                           tblptru	equ	0xFF8
  9149                           tblptrh	equ	0xFF7
  9150                           tblptrl	equ	0xFF6
  9151                           tablat	equ	0xFF5
  9152                           prodh	equ	0xFF4
  9153                           prodl	equ	0xFF3
  9154                           intcon	equ	0xFF2
  9155                           intcon2	equ	0xFF1
  9156                           postinc0	equ	0xFEE
  9157                           fsr0h	equ	0xFEA
  9158                           fsr0l	equ	0xFE9
  9159                           wreg	equ	0xFE8
  9160                           indf1	equ	0xFE7
  9161                           postdec1	equ	0xFE5
  9162                           fsr1h	equ	0xFE2
  9163                           fsr1l	equ	0xFE1
  9164                           indf2	equ	0xFDF
  9165                           postinc2	equ	0xFDE
  9166                           postdec2	equ	0xFDD
  9167                           plusw2	equ	0xFDB
  9168                           fsr2h	equ	0xFDA
  9169                           fsr2l	equ	0xFD9
  9170                           status	equ	0xFD8
  9171                           
  9172 ;; *************** function i2_Update *****************
  9173 ;; Defined at:
  9174 ;;		line 225 in file "PDU.c"
  9175 ;; Parameters:    Size  Location     Type
  9176 ;;		None
  9177 ;; Auto vars:     Size  Location     Type
  9178 ;;		None
  9179 ;; Return value:  Size  Location     Type
  9180 ;;                  1    wreg      void 
  9181 ;; Registers used:
  9182 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9183 ;; Tracked objects:
  9184 ;;		On entry : 0/0
  9185 ;;		On exit  : 0/0
  9186 ;;		Unchanged: 0/0
  9187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9188 ;;      Params:         0       0       0       0       0       0       0
  9189 ;;      Locals:         0       0       0       0       0       0       0
  9190 ;;      Temps:          0       0       0       0       0       0       0
  9191 ;;      Totals:         0       0       0       0       0       0       0
  9192 ;;Total ram usage:        0 bytes
  9193 ;; Hardware stack levels used:    1
  9194 ;; Hardware stack levels required when called:    2
  9195 ;; This function calls:
  9196 ;;		i2_writeRegisters
  9197 ;; This function is called by:
  9198 ;;		_ReadCurrent
  9199 ;; This function uses a non-reentrant model
  9200 ;;
  9201                           
  9202                           	psect	text53
  9203  002240                     __ptext53:
  9204                           	opt stack 0
  9205  002240                     i2_Update:
  9206                           	opt stack 18
  9207                           
  9208                           ;PDU.c: 226: writeRegisters();
  9209                           
  9210                           ;incstack = 0
  9211  002240  EC97  F00C         	call	i2_writeRegisters	;wreg free
  9212  002244  0012               	return		;funcret
  9213  002246                     __end_ofi2_Update:
  9214                           	opt stack 0
  9215                           pclatu	equ	0xFFB
  9216                           pclath	equ	0xFFA
  9217                           tblptru	equ	0xFF8
  9218                           tblptrh	equ	0xFF7
  9219                           tblptrl	equ	0xFF6
  9220                           tablat	equ	0xFF5
  9221                           prodh	equ	0xFF4
  9222                           prodl	equ	0xFF3
  9223                           intcon	equ	0xFF2
  9224                           intcon2	equ	0xFF1
  9225                           postinc0	equ	0xFEE
  9226                           fsr0h	equ	0xFEA
  9227                           fsr0l	equ	0xFE9
  9228                           wreg	equ	0xFE8
  9229                           indf1	equ	0xFE7
  9230                           postdec1	equ	0xFE5
  9231                           fsr1h	equ	0xFE2
  9232                           fsr1l	equ	0xFE1
  9233                           indf2	equ	0xFDF
  9234                           postinc2	equ	0xFDE
  9235                           postdec2	equ	0xFDD
  9236                           plusw2	equ	0xFDB
  9237                           fsr2h	equ	0xFDA
  9238                           fsr2l	equ	0xFD9
  9239                           status	equ	0xFD8
  9240                           
  9241 ;; *************** function i2_writeRegisters *****************
  9242 ;; Defined at:
  9243 ;;		line 50 in file "Shift595.c"
  9244 ;; Parameters:    Size  Location     Type
  9245 ;;		None
  9246 ;; Auto vars:     Size  Location     Type
  9247 ;;  writeRegiste    2   11[COMRAM] int 
  9248 ;;  writeRegiste    2    9[COMRAM] int 
  9249 ;; Return value:  Size  Location     Type
  9250 ;;                  1    wreg      void 
  9251 ;; Registers used:
  9252 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9253 ;; Tracked objects:
  9254 ;;		On entry : 0/0
  9255 ;;		On exit  : 0/0
  9256 ;;		Unchanged: 0/0
  9257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9258 ;;      Params:         0       0       0       0       0       0       0
  9259 ;;      Locals:         4       0       0       0       0       0       0
  9260 ;;      Temps:          0       0       0       0       0       0       0
  9261 ;;      Totals:         4       0       0       0       0       0       0
  9262 ;;Total ram usage:        4 bytes
  9263 ;; Hardware stack levels used:    1
  9264 ;; Hardware stack levels required when called:    1
  9265 ;; This function calls:
  9266 ;;		i2_Delay
  9267 ;; This function is called by:
  9268 ;;		i2_Update
  9269 ;; This function uses a non-reentrant model
  9270 ;;
  9271                           
  9272                           	psect	text54
  9273  00192E                     __ptext54:
  9274                           	opt stack 0
  9275  00192E                     i2_writeRegisters:
  9276                           	opt stack 18
  9277                           
  9278                           ;Shift595.c: 51: int val = 0;
  9279                           
  9280                           ;incstack = 0
  9281  00192E  0E00               	movlw	0
  9282  001930  6E0B               	movwf	i2writeRegisters@val+1,c
  9283  001932  0E00               	movlw	0
  9284  001934  6E0A               	movwf	i2writeRegisters@val,c
  9285                           
  9286                           ;Shift595.c: 52: for (int i = 3 * 8 - 1; i >= 0; i--) {
  9287  001936  0E00               	movlw	0
  9288  001938  6E0D               	movwf	i2writeRegisters@i+1,c
  9289  00193A  0E17               	movlw	23
  9290  00193C  6E0C               	movwf	i2writeRegisters@i,c
  9291  00193E                     i2l3058:
  9292  00193E  BE0D               	btfsc	i2writeRegisters@i+1,7,c
  9293  001940  D01D               	goto	i2l554
  9294                           
  9295                           ;Shift595.c: 53: do { LATD7 = 0; } while(0);
  9296  001942  9E8C               	bcf	3980,7,c	;volatile
  9297                           
  9298                           ;Shift595.c: 55: val = registers[i];
  9299  001944  90D8               	bcf	status,0,c
  9300  001946  340C               	rlcf	i2writeRegisters@i,w,c
  9301  001948  6ED9               	movwf	fsr2l,c
  9302  00194A  340D               	rlcf	i2writeRegisters@i+1,w,c
  9303  00194C  6EDA               	movwf	fsr2h,c
  9304  00194E  0E00               	movlw	low _registers
  9305  001950  26D9               	addwf	fsr2l,f,c
  9306  001952  0E01               	movlw	high _registers
  9307  001954  22DA               	addwfc	fsr2h,f,c
  9308  001956  CFDE F00A          	movff	postinc2,i2writeRegisters@val
  9309  00195A  CFDD F00B          	movff	postdec2,i2writeRegisters@val+1
  9310                           
  9311                           ;Shift595.c: 56: if (val == 1) {
  9312  00195E  040A               	decf	i2writeRegisters@val,w,c
  9313  001960  100B               	iorwf	i2writeRegisters@val+1,w,c
  9314  001962  A4D8               	btfss	status,2,c
  9315  001964  D002               	goto	i2l3066
  9316                           
  9317                           ;Shift595.c: 57: do { LATD4 = 1; } while(0);
  9318  001966  888C               	bsf	3980,4,c	;volatile
  9319                           
  9320                           ;Shift595.c: 58: } else if (val == 0) {
  9321  001968  D004               	goto	i2l552
  9322  00196A                     i2l3066:
  9323  00196A  500A               	movf	i2writeRegisters@val,w,c
  9324  00196C  100B               	iorwf	i2writeRegisters@val+1,w,c
  9325  00196E  B4D8               	btfsc	status,2,c
  9326                           
  9327                           ;Shift595.c: 59: do { LATD4 = 0; } while(0);
  9328  001970  988C               	bcf	3980,4,c	;volatile
  9329  001972                     i2l552:
  9330  001972  8E8C               	bsf	3980,7,c	;volatile
  9331  001974  060C               	decf	i2writeRegisters@i,f,c
  9332  001976  A0D8               	btfss	status,0,c
  9333  001978  060D               	decf	i2writeRegisters@i+1,f,c
  9334  00197A  D7E1               	goto	i2l3058
  9335  00197C                     i2l554:
  9336  00197C  9E8C               	bcf	3980,7,c	;volatile
  9337                           
  9338                           ;Shift595.c: 67: Delay(1);
  9339  00197E  0E01               	movlw	1
  9340  001980  6E01               	movwf	i2Delay@wait,c
  9341  001982  0E00               	movlw	0
  9342  001984  6E02               	movwf	i2Delay@wait+1,c
  9343  001986  0E00               	movlw	0
  9344  001988  6E03               	movwf	i2Delay@wait+2,c
  9345  00198A  0E00               	movlw	0
  9346  00198C  6E04               	movwf	i2Delay@wait+3,c
  9347  00198E  ECFF  F00E         	call	i2_Delay	;wreg free
  9348                           
  9349                           ;Shift595.c: 68: do { LATD6 = 1; } while(0);
  9350  001992  8C8C               	bsf	3980,6,c	;volatile
  9351                           
  9352                           ;Shift595.c: 69: Delay(1);
  9353  001994  0E01               	movlw	1
  9354  001996  6E01               	movwf	i2Delay@wait,c
  9355  001998  0E00               	movlw	0
  9356  00199A  6E02               	movwf	i2Delay@wait+1,c
  9357  00199C  0E00               	movlw	0
  9358  00199E  6E03               	movwf	i2Delay@wait+2,c
  9359  0019A0  0E00               	movlw	0
  9360  0019A2  6E04               	movwf	i2Delay@wait+3,c
  9361  0019A4  ECFF  F00E         	call	i2_Delay	;wreg free
  9362                           
  9363                           ;Shift595.c: 70: do { LATD6 = 0; } while(0);
  9364  0019A8  9C8C               	bcf	3980,6,c	;volatile
  9365  0019AA  0012               	return	
  9366  0019AC                     __end_ofi2_writeRegisters:
  9367                           	opt stack 0
  9368                           pclatu	equ	0xFFB
  9369                           pclath	equ	0xFFA
  9370                           tblptru	equ	0xFF8
  9371                           tblptrh	equ	0xFF7
  9372                           tblptrl	equ	0xFF6
  9373                           tablat	equ	0xFF5
  9374                           prodh	equ	0xFF4
  9375                           prodl	equ	0xFF3
  9376                           intcon	equ	0xFF2
  9377                           intcon2	equ	0xFF1
  9378                           postinc0	equ	0xFEE
  9379                           fsr0h	equ	0xFEA
  9380                           fsr0l	equ	0xFE9
  9381                           wreg	equ	0xFE8
  9382                           indf1	equ	0xFE7
  9383                           postdec1	equ	0xFE5
  9384                           fsr1h	equ	0xFE2
  9385                           fsr1l	equ	0xFE1
  9386                           indf2	equ	0xFDF
  9387                           postinc2	equ	0xFDE
  9388                           postdec2	equ	0xFDD
  9389                           plusw2	equ	0xFDB
  9390                           fsr2h	equ	0xFDA
  9391                           fsr2l	equ	0xFD9
  9392                           status	equ	0xFD8
  9393                           
  9394 ;; *************** function i2_Delay *****************
  9395 ;; Defined at:
  9396 ;;		line 9 in file "Functions.c"
  9397 ;; Parameters:    Size  Location     Type
  9398 ;;  wait            4    0[COMRAM] long 
  9399 ;; Auto vars:     Size  Location     Type
  9400 ;;  Delay           4    5[COMRAM] long 
  9401 ;; Return value:  Size  Location     Type
  9402 ;;                  1    wreg      void 
  9403 ;; Registers used:
  9404 ;;		wreg, status,2, status,0
  9405 ;; Tracked objects:
  9406 ;;		On entry : 0/0
  9407 ;;		On exit  : 0/0
  9408 ;;		Unchanged: 0/0
  9409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9410 ;;      Params:         4       0       0       0       0       0       0
  9411 ;;      Locals:         4       0       0       0       0       0       0
  9412 ;;      Temps:          1       0       0       0       0       0       0
  9413 ;;      Totals:         9       0       0       0       0       0       0
  9414 ;;Total ram usage:        9 bytes
  9415 ;; Hardware stack levels used:    1
  9416 ;; This function calls:
  9417 ;;		Nothing
  9418 ;; This function is called by:
  9419 ;;		i2_writeRegisters
  9420 ;; This function uses a non-reentrant model
  9421 ;;
  9422                           
  9423                           	psect	text55
  9424  001DFE                     __ptext55:
  9425                           	opt stack 0
  9426  001DFE                     i2_Delay:
  9427                           	opt stack 18
  9428                           
  9429                           ;Functions.c: 10: long int i = 0;
  9430                           
  9431                           ;incstack = 0
  9432  001DFE  0E00               	movlw	0
  9433  001E00  6E06               	movwf	i2Delay@i,c
  9434  001E02  0E00               	movlw	0
  9435  001E04  6E07               	movwf	i2Delay@i+1,c
  9436  001E06  0E00               	movlw	0
  9437  001E08  6E08               	movwf	i2Delay@i+2,c
  9438  001E0A  0E00               	movlw	0
  9439  001E0C  6E09               	movwf	i2Delay@i+3,c
  9440                           
  9441                           ;Functions.c: 11: for (; wait > i; i++) {
  9442  001E0E  D00D               	goto	i2l2858
  9443  001E10                     i2l2854:
  9444                           
  9445                           ;Functions.c: 12: _delay((unsigned long)((1)*(8000000/4000.0)));
  9446  001E10  0E03               	movlw	3
  9447  001E12  6E05               	movwf	??i2_Delay& (0+255),c
  9448  001E14  0E98               	movlw	152
  9449  001E16                     i2u303_47:
  9450  001E16  2EE8               	decfsz	wreg,f,c
  9451  001E18  D7FE               	bra	i2u303_47
  9452  001E1A  2E05               	decfsz	??i2_Delay& (0+255),f,c
  9453  001E1C  D7FC               	bra	i2u303_47
  9454  001E1E  0E01               	movlw	1
  9455  001E20  2606               	addwf	i2Delay@i,f,c
  9456  001E22  0E00               	movlw	0
  9457  001E24  2207               	addwfc	i2Delay@i+1,f,c
  9458  001E26  2208               	addwfc	i2Delay@i+2,f,c
  9459  001E28  2209               	addwfc	i2Delay@i+3,f,c
  9460  001E2A                     i2l2858:
  9461  001E2A  5001               	movf	i2Delay@wait,w,c
  9462  001E2C  5C06               	subwf	i2Delay@i,w,c
  9463  001E2E  5002               	movf	i2Delay@wait+1,w,c
  9464  001E30  5807               	subwfb	i2Delay@i+1,w,c
  9465  001E32  5003               	movf	i2Delay@wait+2,w,c
  9466  001E34  5808               	subwfb	i2Delay@i+2,w,c
  9467  001E36  5009               	movf	i2Delay@i+3,w,c
  9468  001E38  0A80               	xorlw	128
  9469  001E3A  6E05               	movwf	??i2_Delay& (0+255),c
  9470  001E3C  5004               	movf	i2Delay@wait+3,w,c
  9471  001E3E  0A80               	xorlw	128
  9472  001E40  5805               	subwfb	??i2_Delay& (0+255),w,c
  9473  001E42  B0D8               	btfsc	status,0,c
  9474  001E44  0012               	return	
  9475  001E46  D7E4               	goto	i2l2854
  9476  001E48                     __end_ofi2_Delay:
  9477                           	opt stack 0
  9478                           pclatu	equ	0xFFB
  9479                           pclath	equ	0xFFA
  9480                           tblptru	equ	0xFF8
  9481                           tblptrh	equ	0xFF7
  9482                           tblptrl	equ	0xFF6
  9483                           tablat	equ	0xFF5
  9484                           prodh	equ	0xFF4
  9485                           prodl	equ	0xFF3
  9486                           intcon	equ	0xFF2
  9487                           intcon2	equ	0xFF1
  9488                           postinc0	equ	0xFEE
  9489                           fsr0h	equ	0xFEA
  9490                           fsr0l	equ	0xFE9
  9491                           wreg	equ	0xFE8
  9492                           indf1	equ	0xFE7
  9493                           postdec1	equ	0xFE5
  9494                           fsr1h	equ	0xFE2
  9495                           fsr1l	equ	0xFE1
  9496                           indf2	equ	0xFDF
  9497                           postinc2	equ	0xFDE
  9498                           postdec2	equ	0xFDD
  9499                           plusw2	equ	0xFDB
  9500                           fsr2h	equ	0xFDA
  9501                           fsr2l	equ	0xFD9
  9502                           status	equ	0xFD8
  9503                           
  9504 ;; *************** function i2_SetPin595 *****************
  9505 ;; Defined at:
  9506 ;;		line 32 in file "Shift595.c"
  9507 ;; Parameters:    Size  Location     Type
  9508 ;;  Reg             2    0[COMRAM] int 
  9509 ;;  pin             2    2[COMRAM] int 
  9510 ;;  value           2    4[COMRAM] int 
  9511 ;; Auto vars:     Size  Location     Type
  9512 ;;		None
  9513 ;; Return value:  Size  Location     Type
  9514 ;;                  1    wreg      void 
  9515 ;; Registers used:
  9516 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9517 ;; Tracked objects:
  9518 ;;		On entry : 0/0
  9519 ;;		On exit  : 0/0
  9520 ;;		Unchanged: 0/0
  9521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9522 ;;      Params:         6       0       0       0       0       0       0
  9523 ;;      Locals:         0       0       0       0       0       0       0
  9524 ;;      Temps:          4       0       0       0       0       0       0
  9525 ;;      Totals:        10       0       0       0       0       0       0
  9526 ;;Total ram usage:       10 bytes
  9527 ;; Hardware stack levels used:    1
  9528 ;; This function calls:
  9529 ;;		Nothing
  9530 ;; This function is called by:
  9531 ;;		_ReadCurrent
  9532 ;; This function uses a non-reentrant model
  9533 ;;
  9534                           
  9535                           	psect	text56
  9536  001CD2                     __ptext56:
  9537                           	opt stack 0
  9538  001CD2                     i2_SetPin595:
  9539                           	opt stack 20
  9540                           
  9541                           ;Shift595.c: 33: registers[((Reg - 1)*8) + pin] = value;
  9542                           
  9543                           ;incstack = 0
  9544  001CD2  0EF0               	movlw	240
  9545  001CD4  6E07               	movwf	??i2_SetPin595& (0+255),c
  9546  001CD6  0EFF               	movlw	255
  9547  001CD8  6E08               	movwf	(??i2_SetPin595+1)& (0+255),c
  9548  001CDA  C001  F009         	movff	i2SetPin595@Reg,??i2_SetPin595+2
  9549  001CDE  C002  F00A         	movff	i2SetPin595@Reg+1,??i2_SetPin595+3
  9550  001CE2  90D8               	bcf	status,0,c
  9551  001CE4  3609               	rlcf	??i2_SetPin595+2,f,c
  9552  001CE6  360A               	rlcf	??i2_SetPin595+3,f,c
  9553  001CE8  90D8               	bcf	status,0,c
  9554  001CEA  3609               	rlcf	??i2_SetPin595+2,f,c
  9555  001CEC  360A               	rlcf	??i2_SetPin595+3,f,c
  9556  001CEE  90D8               	bcf	status,0,c
  9557  001CF0  3609               	rlcf	??i2_SetPin595+2,f,c
  9558  001CF2  360A               	rlcf	??i2_SetPin595+3,f,c
  9559  001CF4  5003               	movf	i2SetPin595@pin,w,c
  9560  001CF6  2609               	addwf	??i2_SetPin595+2,f,c
  9561  001CF8  5004               	movf	i2SetPin595@pin+1,w,c
  9562  001CFA  220A               	addwfc	??i2_SetPin595+3,f,c
  9563  001CFC  90D8               	bcf	status,0,c
  9564  001CFE  3609               	rlcf	??i2_SetPin595+2,f,c
  9565  001D00  360A               	rlcf	??i2_SetPin595+3,f,c
  9566  001D02  5007               	movf	??i2_SetPin595,w,c
  9567  001D04  2609               	addwf	??i2_SetPin595+2,f,c
  9568  001D06  5008               	movf	??i2_SetPin595+1,w,c
  9569  001D08  220A               	addwfc	??i2_SetPin595+3,f,c
  9570  001D0A  0E00               	movlw	low _registers
  9571  001D0C  2409               	addwf	??i2_SetPin595+2,w,c
  9572  001D0E  6ED9               	movwf	fsr2l,c
  9573  001D10  0E01               	movlw	high _registers
  9574  001D12  200A               	addwfc	??i2_SetPin595+3,w,c
  9575  001D14  6EDA               	movwf	fsr2h,c
  9576  001D16  C005  FFDE         	movff	i2SetPin595@value,postinc2
  9577  001D1A  C006  FFDD         	movff	i2SetPin595@value+1,postdec2
  9578  001D1E  0012               	return		;funcret
  9579  001D20                     __end_ofi2_SetPin595:
  9580                           	opt stack 0
  9581                           pclatu	equ	0xFFB
  9582                           pclath	equ	0xFFA
  9583                           tblptru	equ	0xFF8
  9584                           tblptrh	equ	0xFF7
  9585                           tblptrl	equ	0xFF6
  9586                           tablat	equ	0xFF5
  9587                           prodh	equ	0xFF4
  9588                           prodl	equ	0xFF3
  9589                           intcon	equ	0xFF2
  9590                           intcon2	equ	0xFF1
  9591                           postinc0	equ	0xFEE
  9592                           fsr0h	equ	0xFEA
  9593                           fsr0l	equ	0xFE9
  9594                           wreg	equ	0xFE8
  9595                           indf1	equ	0xFE7
  9596                           postdec1	equ	0xFE5
  9597                           fsr1h	equ	0xFE2
  9598                           fsr1l	equ	0xFE1
  9599                           indf2	equ	0xFDF
  9600                           postinc2	equ	0xFDE
  9601                           postdec2	equ	0xFDD
  9602                           plusw2	equ	0xFDB
  9603                           fsr2h	equ	0xFDA
  9604                           fsr2l	equ	0xFD9
  9605                           status	equ	0xFD8
  9606                           
  9607 ;; *************** function _ADC_GetConversion *****************
  9608 ;; Defined at:
  9609 ;;		line 109 in file "mcc_generated_files/adc.c"
  9610 ;; Parameters:    Size  Location     Type
  9611 ;;  channel         1    wreg     enum E6965
  9612 ;; Auto vars:     Size  Location     Type
  9613 ;;  channel         1    4[COMRAM] enum E6965
  9614 ;; Return value:  Size  Location     Type
  9615 ;;                  2    0[COMRAM] unsigned int 
  9616 ;; Registers used:
  9617 ;;		wreg, status,2, status,0
  9618 ;; Tracked objects:
  9619 ;;		On entry : 0/0
  9620 ;;		On exit  : 0/0
  9621 ;;		Unchanged: 0/0
  9622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9623 ;;      Params:         2       0       0       0       0       0       0
  9624 ;;      Locals:         1       0       0       0       0       0       0
  9625 ;;      Temps:          2       0       0       0       0       0       0
  9626 ;;      Totals:         5       0       0       0       0       0       0
  9627 ;;Total ram usage:        5 bytes
  9628 ;; Hardware stack levels used:    1
  9629 ;; This function calls:
  9630 ;;		Nothing
  9631 ;; This function is called by:
  9632 ;;		_ReadCurrent
  9633 ;; This function uses a non-reentrant model
  9634 ;;
  9635                           
  9636                           	psect	text57
  9637  001F94                     __ptext57:
  9638                           	opt stack 0
  9639  001F94                     _ADC_GetConversion:
  9640                           	opt stack 20
  9641                           
  9642                           ;incstack = 0
  9643                           ;ADC_GetConversion@channel stored from wreg
  9644  001F94  6E05               	movwf	ADC_GetConversion@channel,c
  9645                           
  9646                           ;adc.c: 112: ADCON0bits.CHS = channel;
  9647  001F96  C005  F003         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
  9648  001F9A  4603               	rlncf	??_ADC_GetConversion,f,c
  9649  001F9C  4603               	rlncf	??_ADC_GetConversion,f,c
  9650  001F9E  50C2               	movf	4034,w,c	;volatile
  9651  001FA0  1803               	xorwf	??_ADC_GetConversion,w,c
  9652  001FA2  0B83               	andlw	-125
  9653  001FA4  1803               	xorwf	??_ADC_GetConversion,w,c
  9654  001FA6  6EC2               	movwf	4034,c	;volatile
  9655                           
  9656                           ;adc.c: 115: ADCON0bits.ADON = 1;
  9657  001FA8  80C2               	bsf	4034,0,c	;volatile
  9658                           
  9659                           ;adc.c: 119: ADCON0bits.GO_nDONE = 1;
  9660  001FAA  82C2               	bsf	4034,1,c	;volatile
  9661  001FAC                     i2l31:
  9662  001FAC  B2C2               	btfsc	4034,1,c	;volatile
  9663  001FAE  D7FE               	goto	i2l31
  9664                           
  9665                           ;adc.c: 124: }
  9666                           ;adc.c: 127: return ((ADRESH << 8) + ADRESL);
  9667  001FB0  50C4               	movf	4036,w,c	;volatile
  9668  001FB2  6E04               	movwf	(??_ADC_GetConversion+1)& (0+255),c
  9669  001FB4  6A03               	clrf	??_ADC_GetConversion& (0+255),c
  9670  001FB6  50C3               	movf	4035,w,c	;volatile
  9671  001FB8  2403               	addwf	??_ADC_GetConversion,w,c
  9672  001FBA  6E01               	movwf	?_ADC_GetConversion,c
  9673  001FBC  0E00               	movlw	0
  9674  001FBE  2004               	addwfc	??_ADC_GetConversion+1,w,c
  9675  001FC0  6E02               	movwf	?_ADC_GetConversion+1,c
  9676  001FC2  0012               	return	
  9677  001FC4                     __end_of_ADC_GetConversion:
  9678                           	opt stack 0
  9679                           pclatu	equ	0xFFB
  9680                           pclath	equ	0xFFA
  9681                           tblptru	equ	0xFF8
  9682                           tblptrh	equ	0xFF7
  9683                           tblptrl	equ	0xFF6
  9684                           tablat	equ	0xFF5
  9685                           prodh	equ	0xFF4
  9686                           prodl	equ	0xFF3
  9687                           intcon	equ	0xFF2
  9688                           intcon2	equ	0xFF1
  9689                           postinc0	equ	0xFEE
  9690                           fsr0h	equ	0xFEA
  9691                           fsr0l	equ	0xFE9
  9692                           wreg	equ	0xFE8
  9693                           indf1	equ	0xFE7
  9694                           postdec1	equ	0xFE5
  9695                           fsr1h	equ	0xFE2
  9696                           fsr1l	equ	0xFE1
  9697                           indf2	equ	0xFDF
  9698                           postinc2	equ	0xFDE
  9699                           postdec2	equ	0xFDD
  9700                           plusw2	equ	0xFDB
  9701                           fsr2h	equ	0xFDA
  9702                           fsr2l	equ	0xFD9
  9703                           status	equ	0xFD8
  9704                           
  9705 ;; *************** function _FuseSystem *****************
  9706 ;; Defined at:
  9707 ;;		line 175 in file "PDU.c"
  9708 ;; Parameters:    Size  Location     Type
  9709 ;;		None
  9710 ;; Auto vars:     Size  Location     Type
  9711 ;;  i               2    6[COMRAM] int 
  9712 ;;  i               2    8[COMRAM] int 
  9713 ;; Return value:  Size  Location     Type
  9714 ;;                  1    wreg      void 
  9715 ;; Registers used:
  9716 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9717 ;; Tracked objects:
  9718 ;;		On entry : 0/0
  9719 ;;		On exit  : 0/0
  9720 ;;		Unchanged: 0/0
  9721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9722 ;;      Params:         0       0       0       0       0       0       0
  9723 ;;      Locals:         4       0       0       0       0       0       0
  9724 ;;      Temps:          0       0       0       0       0       0       0
  9725 ;;      Totals:         4       0       0       0       0       0       0
  9726 ;;Total ram usage:        4 bytes
  9727 ;; Hardware stack levels used:    1
  9728 ;; Hardware stack levels required when called:    1
  9729 ;; This function calls:
  9730 ;;		___wmul
  9731 ;; This function is called by:
  9732 ;;		_TMR1_ISR
  9733 ;; This function uses a non-reentrant model
  9734 ;;
  9735                           
  9736                           	psect	text58
  9737  0019AC                     __ptext58:
  9738                           	opt stack 0
  9739  0019AC                     _FuseSystem:
  9740                           	opt stack 20
  9741                           
  9742                           ;PDU.c: 177: for (int i = 0; i < 6; i++) {
  9743                           
  9744                           ;incstack = 0
  9745  0019AC  0E00               	movlw	0
  9746  0019AE  6E0A               	movwf	FuseSystem@i+1,c
  9747  0019B0  0E00               	movlw	0
  9748  0019B2  6E09               	movwf	FuseSystem@i,c
  9749  0019B4                     i2l3368:
  9750  0019B4  BE0A               	btfsc	FuseSystem@i+1,7,c
  9751  0019B6  D006               	goto	i2l3372
  9752  0019B8  500A               	movf	FuseSystem@i+1,w,c
  9753  0019BA  E127               	bnz	i2l3378
  9754  0019BC  0E06               	movlw	6
  9755  0019BE  5C09               	subwf	FuseSystem@i,w,c
  9756  0019C0  B0D8               	btfsc	status,0,c
  9757  0019C2  D023               	goto	i2l3378
  9758  0019C4                     i2l3372:
  9759                           
  9760                           ;PDU.c: 178: Current[i] = CurrentADC[i]*48;
  9761  0019C4  90D8               	bcf	status,0,c
  9762  0019C6  3409               	rlcf	FuseSystem@i,w,c
  9763  0019C8  6ED9               	movwf	fsr2l,c
  9764  0019CA  340A               	rlcf	FuseSystem@i+1,w,c
  9765  0019CC  6EDA               	movwf	fsr2h,c
  9766  0019CE  0EC7               	movlw	low _CurrentADC
  9767  0019D0  26D9               	addwf	fsr2l,f,c
  9768  0019D2  0E00               	movlw	high _CurrentADC
  9769  0019D4  22DA               	addwfc	fsr2h,f,c
  9770  0019D6  CFDE F001          	movff	postinc2,___wmul@multiplier
  9771  0019DA  CFDD F002          	movff	postdec2,___wmul@multiplier+1
  9772  0019DE  0E00               	movlw	0
  9773  0019E0  6E04               	movwf	___wmul@multiplicand+1,c
  9774  0019E2  0E30               	movlw	48
  9775  0019E4  6E03               	movwf	___wmul@multiplicand,c
  9776  0019E6  EC39  F010         	call	___wmul	;wreg free
  9777  0019EA  90D8               	bcf	status,0,c
  9778  0019EC  3409               	rlcf	FuseSystem@i,w,c
  9779  0019EE  6ED9               	movwf	fsr2l,c
  9780  0019F0  340A               	rlcf	FuseSystem@i+1,w,c
  9781  0019F2  6EDA               	movwf	fsr2h,c
  9782  0019F4  0E30               	movlw	low _Current
  9783  0019F6  26D9               	addwf	fsr2l,f,c
  9784  0019F8  0E01               	movlw	high _Current
  9785  0019FA  22DA               	addwfc	fsr2h,f,c
  9786  0019FC  C001  FFDE         	movff	?___wmul,postinc2
  9787  001A00  C002  FFDD         	movff	?___wmul+1,postdec2
  9788  001A04  4A09               	infsnz	FuseSystem@i,f,c
  9789  001A06  2A0A               	incf	FuseSystem@i+1,f,c
  9790  001A08  D7D5               	goto	i2l3368
  9791  001A0A                     i2l3378:
  9792                           
  9793                           ;PDU.c: 181: }
  9794                           ;PDU.c: 183: for (int i = 0; i < 6; i++) {
  9795  001A0A  0E00               	movlw	0
  9796  001A0C  6E08               	movwf	FuseSystem@i_1234+1,c
  9797  001A0E  0E00               	movlw	0
  9798  001A10  6E07               	movwf	FuseSystem@i_1234,c
  9799  001A12                     i2l3380:
  9800  001A12  BE08               	btfsc	FuseSystem@i_1234+1,7,c
  9801  001A14  D006               	goto	i2l3384
  9802  001A16  5008               	movf	FuseSystem@i_1234+1,w,c
  9803  001A18  E107               	bnz	i2l485
  9804  001A1A  0E06               	movlw	6
  9805  001A1C  5C07               	subwf	FuseSystem@i_1234,w,c
  9806  001A1E  B0D8               	btfsc	status,0,c
  9807  001A20  0012               	return	
  9808  001A22                     i2l3384:
  9809  001A22  4A07               	infsnz	FuseSystem@i_1234,f,c
  9810  001A24  2A08               	incf	FuseSystem@i_1234+1,f,c
  9811  001A26  D7F5               	goto	i2l3380
  9812  001A28                     i2l485:
  9813  001A28  0012               	return		;funcret
  9814  001A2A                     __end_of_FuseSystem:
  9815                           	opt stack 0
  9816                           pclatu	equ	0xFFB
  9817                           pclath	equ	0xFFA
  9818                           tblptru	equ	0xFF8
  9819                           tblptrh	equ	0xFF7
  9820                           tblptrl	equ	0xFF6
  9821                           tablat	equ	0xFF5
  9822                           prodh	equ	0xFF4
  9823                           prodl	equ	0xFF3
  9824                           intcon	equ	0xFF2
  9825                           intcon2	equ	0xFF1
  9826                           postinc0	equ	0xFEE
  9827                           fsr0h	equ	0xFEA
  9828                           fsr0l	equ	0xFE9
  9829                           wreg	equ	0xFE8
  9830                           indf1	equ	0xFE7
  9831                           postdec1	equ	0xFE5
  9832                           fsr1h	equ	0xFE2
  9833                           fsr1l	equ	0xFE1
  9834                           indf2	equ	0xFDF
  9835                           postinc2	equ	0xFDE
  9836                           postdec2	equ	0xFDD
  9837                           plusw2	equ	0xFDB
  9838                           fsr2h	equ	0xFDA
  9839                           fsr2l	equ	0xFD9
  9840                           status	equ	0xFD8
  9841                           
  9842 ;; *************** function ___wmul *****************
  9843 ;; Defined at:
  9844 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
  9845 ;; Parameters:    Size  Location     Type
  9846 ;;  multiplier      2    0[COMRAM] unsigned int 
  9847 ;;  multiplicand    2    2[COMRAM] unsigned int 
  9848 ;; Auto vars:     Size  Location     Type
  9849 ;;  product         2    4[COMRAM] unsigned int 
  9850 ;; Return value:  Size  Location     Type
  9851 ;;                  2    0[COMRAM] unsigned int 
  9852 ;; Registers used:
  9853 ;;		wreg, status,2, status,0, prodl, prodh
  9854 ;; Tracked objects:
  9855 ;;		On entry : 0/0
  9856 ;;		On exit  : 0/0
  9857 ;;		Unchanged: 0/0
  9858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9859 ;;      Params:         4       0       0       0       0       0       0
  9860 ;;      Locals:         2       0       0       0       0       0       0
  9861 ;;      Temps:          0       0       0       0       0       0       0
  9862 ;;      Totals:         6       0       0       0       0       0       0
  9863 ;;Total ram usage:        6 bytes
  9864 ;; Hardware stack levels used:    1
  9865 ;; This function calls:
  9866 ;;		Nothing
  9867 ;; This function is called by:
  9868 ;;		_FuseSystem
  9869 ;; This function uses a non-reentrant model
  9870 ;;
  9871                           
  9872                           	psect	text59
  9873  002072                     __ptext59:
  9874                           	opt stack 0
  9875  002072                     ___wmul:
  9876                           	opt stack 20
  9877                           
  9878                           ;incstack = 0
  9879  002072  5001               	movf	___wmul@multiplier,w,c
  9880  002074  0203               	mulwf	___wmul@multiplicand,c
  9881  002076  CFF3 F005          	movff	prodl,___wmul@product
  9882  00207A  CFF4 F006          	movff	prodh,___wmul@product+1
  9883  00207E  5001               	movf	___wmul@multiplier,w,c
  9884  002080  0204               	mulwf	___wmul@multiplicand+1,c
  9885  002082  50F3               	movf	prodl,w,c
  9886  002084  2606               	addwf	___wmul@product+1,f,c
  9887  002086  5002               	movf	___wmul@multiplier+1,w,c
  9888  002088  0203               	mulwf	___wmul@multiplicand,c
  9889  00208A  50F3               	movf	prodl,w,c
  9890  00208C  2606               	addwf	___wmul@product+1,f,c
  9891  00208E  C005  F001         	movff	___wmul@product,?___wmul
  9892  002092  C006  F002         	movff	___wmul@product+1,?___wmul+1
  9893  002096  0012               	return	
  9894  002098                     __end_of___wmul:
  9895                           	opt stack 0
  9896                           pclatu	equ	0xFFB
  9897                           pclath	equ	0xFFA
  9898                           tblptru	equ	0xFF8
  9899                           tblptrh	equ	0xFF7
  9900                           tblptrl	equ	0xFF6
  9901                           tablat	equ	0xFF5
  9902                           prodh	equ	0xFF4
  9903                           prodl	equ	0xFF3
  9904                           intcon	equ	0xFF2
  9905                           intcon2	equ	0xFF1
  9906                           postinc0	equ	0xFEE
  9907                           fsr0h	equ	0xFEA
  9908                           fsr0l	equ	0xFE9
  9909                           wreg	equ	0xFE8
  9910                           indf1	equ	0xFE7
  9911                           postdec1	equ	0xFE5
  9912                           fsr1h	equ	0xFE2
  9913                           fsr1l	equ	0xFE1
  9914                           indf2	equ	0xFDF
  9915                           postinc2	equ	0xFDE
  9916                           postdec2	equ	0xFDD
  9917                           plusw2	equ	0xFDB
  9918                           fsr2h	equ	0xFDA
  9919                           fsr2l	equ	0xFD9
  9920                           status	equ	0xFD8
  9921                           
  9922 ;; *************** function _EUSART1_Transmit_ISR *****************
  9923 ;; Defined at:
  9924 ;;		line 149 in file "UART.c"
  9925 ;; Parameters:    Size  Location     Type
  9926 ;;		None
  9927 ;; Auto vars:     Size  Location     Type
  9928 ;;		None
  9929 ;; Return value:  Size  Location     Type
  9930 ;;                  1    wreg      void 
  9931 ;; Registers used:
  9932 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9933 ;; Tracked objects:
  9934 ;;		On entry : 0/0
  9935 ;;		On exit  : 0/0
  9936 ;;		Unchanged: 0/0
  9937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9938 ;;      Params:         0       0       0       0       0       0       0
  9939 ;;      Locals:         0       0       0       0       0       0       0
  9940 ;;      Temps:          0       0       0       0       0       0       0
  9941 ;;      Totals:         0       0       0       0       0       0       0
  9942 ;;Total ram usage:        0 bytes
  9943 ;; Hardware stack levels used:    1
  9944 ;; Hardware stack levels required when called:    2
  9945 ;; This function calls:
  9946 ;;		i2_UART_buff_get
  9947 ;;		i2_UART_buff_size
  9948 ;; This function is called by:
  9949 ;;		_INTERRUPT_InterruptManager
  9950 ;; This function uses a non-reentrant model
  9951 ;;
  9952                           
  9953                           	psect	text60
  9954  001F32                     __ptext60:
  9955                           	opt stack 0
  9956  001F32                     _EUSART1_Transmit_ISR:
  9957                           	opt stack 20
  9958                           
  9959                           ;UART.c: 151: if (UART_buff_size(&output_buffer) > 0) {
  9960                           
  9961                           ;incstack = 0
  9962  001F32  0E00               	movlw	low _output_buffer
  9963  001F34  6E01               	movwf	i2UART_buff_size@_this,c
  9964  001F36  0E02               	movlw	high _output_buffer
  9965  001F38  6E02               	movwf	i2UART_buff_size@_this+1,c
  9966  001F3A  ECD4  F010         	call	i2_UART_buff_size	;wreg free
  9967  001F3E  BE02               	btfsc	?i2_UART_buff_size+1,7,c
  9968  001F40  D00D               	goto	i2l3580
  9969  001F42  5002               	movf	?i2_UART_buff_size+1,w,c
  9970  001F44  E103               	bnz	i2u214_40
  9971  001F46  0401               	decf	?i2_UART_buff_size,w,c
  9972  001F48  A0D8               	btfss	status,0,c
  9973  001F4A  D008               	goto	i2l3580
  9974  001F4C                     i2u214_40:
  9975                           
  9976                           ;UART.c: 152: TXREG1 = UART_buff_get(&output_buffer);
  9977  001F4C  0E00               	movlw	low _output_buffer
  9978  001F4E  6E07               	movwf	i2UART_buff_get@_this,c
  9979  001F50  0E02               	movlw	high _output_buffer
  9980  001F52  6E08               	movwf	i2UART_buff_get@_this+1,c
  9981  001F54  EC0F  F00C         	call	i2_UART_buff_get	;wreg free
  9982  001F58  6EAD               	movwf	4013,c	;volatile
  9983                           
  9984                           ;UART.c: 153: } else {
  9985  001F5A  0012               	return	
  9986  001F5C                     i2l3580:
  9987                           
  9988                           ;UART.c: 154: Transmit_stall = 1;
  9989  001F5C  0E01               	movlw	1
  9990  001F5E  6E41               	movwf	_Transmit_stall,c
  9991                           
  9992                           ;UART.c: 155: PIE1bits.TX1IE = 0;
  9993  001F60  989D               	bcf	3997,4,c	;volatile
  9994  001F62  0012               	return	
  9995  001F64                     __end_of_EUSART1_Transmit_ISR:
  9996                           	opt stack 0
  9997                           pclatu	equ	0xFFB
  9998                           pclath	equ	0xFFA
  9999                           tblptru	equ	0xFF8
 10000                           tblptrh	equ	0xFF7
 10001                           tblptrl	equ	0xFF6
 10002                           tablat	equ	0xFF5
 10003                           prodh	equ	0xFF4
 10004                           prodl	equ	0xFF3
 10005                           intcon	equ	0xFF2
 10006                           intcon2	equ	0xFF1
 10007                           postinc0	equ	0xFEE
 10008                           fsr0h	equ	0xFEA
 10009                           fsr0l	equ	0xFE9
 10010                           wreg	equ	0xFE8
 10011                           indf1	equ	0xFE7
 10012                           postdec1	equ	0xFE5
 10013                           fsr1h	equ	0xFE2
 10014                           fsr1l	equ	0xFE1
 10015                           indf2	equ	0xFDF
 10016                           postinc2	equ	0xFDE
 10017                           postdec2	equ	0xFDD
 10018                           plusw2	equ	0xFDB
 10019                           fsr2h	equ	0xFDA
 10020                           fsr2l	equ	0xFD9
 10021                           status	equ	0xFD8
 10022                           
 10023 ;; *************** function i2_UART_buff_size *****************
 10024 ;; Defined at:
 10025 ;;		line 101 in file "UART.c"
 10026 ;; Parameters:    Size  Location     Type
 10027 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
 10028 ;;		 -> output_buffer(106), input_buffer(106), 
 10029 ;; Auto vars:     Size  Location     Type
 10030 ;;		None
 10031 ;; Return value:  Size  Location     Type
 10032 ;;                  2    0[COMRAM] int 
 10033 ;; Registers used:
 10034 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10035 ;; Tracked objects:
 10036 ;;		On entry : 0/0
 10037 ;;		On exit  : 0/0
 10038 ;;		Unchanged: 0/0
 10039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10040 ;;      Params:         2       0       0       0       0       0       0
 10041 ;;      Locals:         0       0       0       0       0       0       0
 10042 ;;      Temps:          0       0       0       0       0       0       0
 10043 ;;      Totals:         2       0       0       0       0       0       0
 10044 ;;Total ram usage:        2 bytes
 10045 ;; Hardware stack levels used:    1
 10046 ;; This function calls:
 10047 ;;		Nothing
 10048 ;; This function is called by:
 10049 ;;		_EUSART1_Transmit_ISR
 10050 ;; This function uses a non-reentrant model
 10051 ;;
 10052                           
 10053                           	psect	text61
 10054  0021A8                     __ptext61:
 10055                           	opt stack 0
 10056  0021A8                     i2_UART_buff_size:
 10057                           	opt stack 21
 10058                           
 10059                           ;UART.c: 102: return (_this->count);
 10060                           
 10061                           ;incstack = 0
 10062  0021A8  EE20 F068          	lfsr	2,104
 10063  0021AC  5001               	movf	i2UART_buff_size@_this,w,c
 10064  0021AE  26D9               	addwf	fsr2l,f,c
 10065  0021B0  5002               	movf	i2UART_buff_size@_this+1,w,c
 10066  0021B2  22DA               	addwfc	fsr2h,f,c
 10067  0021B4  CFDE F001          	movff	postinc2,?i2_UART_buff_size
 10068  0021B8  CFDD F002          	movff	postdec2,?i2_UART_buff_size+1
 10069  0021BC  0012               	return	
 10070  0021BE                     __end_ofi2_UART_buff_size:
 10071                           	opt stack 0
 10072                           pclatu	equ	0xFFB
 10073                           pclath	equ	0xFFA
 10074                           tblptru	equ	0xFF8
 10075                           tblptrh	equ	0xFF7
 10076                           tblptrl	equ	0xFF6
 10077                           tablat	equ	0xFF5
 10078                           prodh	equ	0xFF4
 10079                           prodl	equ	0xFF3
 10080                           intcon	equ	0xFF2
 10081                           intcon2	equ	0xFF1
 10082                           postinc0	equ	0xFEE
 10083                           fsr0h	equ	0xFEA
 10084                           fsr0l	equ	0xFE9
 10085                           wreg	equ	0xFE8
 10086                           indf1	equ	0xFE7
 10087                           postdec1	equ	0xFE5
 10088                           fsr1h	equ	0xFE2
 10089                           fsr1l	equ	0xFE1
 10090                           indf2	equ	0xFDF
 10091                           postinc2	equ	0xFDE
 10092                           postdec2	equ	0xFDD
 10093                           plusw2	equ	0xFDB
 10094                           fsr2h	equ	0xFDA
 10095                           fsr2l	equ	0xFD9
 10096                           status	equ	0xFD8
 10097                           
 10098 ;; *************** function i2_UART_buff_get *****************
 10099 ;; Defined at:
 10100 ;;		line 80 in file "UART.c"
 10101 ;; Parameters:    Size  Location     Type
 10102 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
 10103 ;;		 -> output_buffer(106), input_buffer(106), 
 10104 ;; Auto vars:     Size  Location     Type
 10105 ;;  UART_buff_ge    1   10[COMRAM] unsigned char 
 10106 ;; Return value:  Size  Location     Type
 10107 ;;                  1    wreg      unsigned char 
 10108 ;; Registers used:
 10109 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10110 ;; Tracked objects:
 10111 ;;		On entry : 0/0
 10112 ;;		On exit  : 0/0
 10113 ;;		Unchanged: 0/0
 10114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10115 ;;      Params:         2       0       0       0       0       0       0
 10116 ;;      Locals:         1       0       0       0       0       0       0
 10117 ;;      Temps:          2       0       0       0       0       0       0
 10118 ;;      Totals:         5       0       0       0       0       0       0
 10119 ;;Total ram usage:        5 bytes
 10120 ;; Hardware stack levels used:    1
 10121 ;; Hardware stack levels required when called:    1
 10122 ;; This function calls:
 10123 ;;		i2_UART_buff_modulo_inc
 10124 ;; This function is called by:
 10125 ;;		_EUSART1_Transmit_ISR
 10126 ;; This function uses a non-reentrant model
 10127 ;;
 10128                           
 10129                           	psect	text62
 10130  00181E                     __ptext62:
 10131                           	opt stack 0
 10132  00181E                     i2_UART_buff_get:
 10133                           	opt stack 20
 10134                           
 10135                           ;UART.c: 81: unsigned char c;
 10136                           ;UART.c: 82: if (_this->count > 0) {
 10137                           
 10138                           ;incstack = 0
 10139  00181E  EE20 F068          	lfsr	2,104
 10140  001822  5007               	movf	i2UART_buff_get@_this,w,c
 10141  001824  26D9               	addwf	fsr2l,f,c
 10142  001826  5008               	movf	i2UART_buff_get@_this+1,w,c
 10143  001828  22DA               	addwfc	fsr2h,f,c
 10144  00182A  0E01               	movlw	1
 10145  00182C  BEDB               	btfsc	plusw2,7,c
 10146  00182E  D03C               	goto	i2l3562
 10147  001830  0E01               	movlw	1
 10148  001832  50DB               	movf	plusw2,w,c
 10149  001834  E103               	bnz	i2u212_40
 10150  001836  04DE               	decf	postinc2,w,c
 10151  001838  A0D8               	btfss	status,0,c
 10152  00183A  D036               	goto	i2l3562
 10153  00183C                     i2u212_40:
 10154                           
 10155                           ;UART.c: 83: c = _this->buf[_this->tail];
 10156  00183C  EE20 F066          	lfsr	2,102
 10157  001840  5007               	movf	i2UART_buff_get@_this,w,c
 10158  001842  26D9               	addwf	fsr2l,f,c
 10159  001844  5008               	movf	i2UART_buff_get@_this+1,w,c
 10160  001846  22DA               	addwfc	fsr2h,f,c
 10161  001848  CFDE F009          	movff	postinc2,??i2_UART_buff_get
 10162  00184C  CFDD F00A          	movff	postdec2,??i2_UART_buff_get+1
 10163  001850  5009               	movf	??i2_UART_buff_get,w,c
 10164  001852  2407               	addwf	i2UART_buff_get@_this,w,c
 10165  001854  6ED9               	movwf	fsr2l,c
 10166  001856  500A               	movf	??i2_UART_buff_get+1,w,c
 10167  001858  2008               	addwfc	i2UART_buff_get@_this+1,w,c
 10168  00185A  6EDA               	movwf	fsr2h,c
 10169  00185C  50DF               	movf	indf2,w,c
 10170  00185E  6E0B               	movwf	i2UART_buff_get@c,c
 10171                           
 10172                           ;UART.c: 84: _this->tail = UART_buff_modulo_inc(_this->tail, 100);
 10173  001860  EE20 F066          	lfsr	2,102
 10174  001864  5007               	movf	i2UART_buff_get@_this,w,c
 10175  001866  26D9               	addwf	fsr2l,f,c
 10176  001868  5008               	movf	i2UART_buff_get@_this+1,w,c
 10177  00186A  22DA               	addwfc	fsr2h,f,c
 10178  00186C  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 10179  001870  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 10180  001874  0E00               	movlw	0
 10181  001876  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 10182  001878  0E64               	movlw	100
 10183  00187A  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 10184  00187C  EC24  F010         	call	i2_UART_buff_modulo_inc	;wreg free
 10185  001880  EE20 F066          	lfsr	2,102
 10186  001884  5007               	movf	i2UART_buff_get@_this,w,c
 10187  001886  26D9               	addwf	fsr2l,f,c
 10188  001888  5008               	movf	i2UART_buff_get@_this+1,w,c
 10189  00188A  22DA               	addwfc	fsr2h,f,c
 10190  00188C  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 10191  001890  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 10192                           
 10193                           ;UART.c: 85: --_this->count;
 10194  001894  EE20 F068          	lfsr	2,104
 10195  001898  5007               	movf	i2UART_buff_get@_this,w,c
 10196  00189A  26D9               	addwf	fsr2l,f,c
 10197  00189C  5008               	movf	i2UART_buff_get@_this+1,w,c
 10198  00189E  22DA               	addwfc	fsr2h,f,c
 10199  0018A0  06DE               	decf	postinc2,f,c
 10200  0018A2  0E00               	movlw	0
 10201  0018A4  5ADD               	subwfb	postdec2,f,c
 10202                           
 10203                           ;UART.c: 86: } else {
 10204  0018A6  D002               	goto	i2l605
 10205  0018A8                     i2l3562:
 10206                           
 10207                           ;UART.c: 87: c = 0;
 10208  0018A8  0E00               	movlw	0
 10209  0018AA  6E0B               	movwf	i2UART_buff_get@c,c
 10210  0018AC                     i2l605:
 10211                           
 10212                           ;UART.c: 88: }
 10213                           ;UART.c: 89: return (c);
 10214  0018AC  500B               	movf	i2UART_buff_get@c,w,c
 10215  0018AE  0012               	return	
 10216  0018B0                     __end_ofi2_UART_buff_get:
 10217                           	opt stack 0
 10218                           pclatu	equ	0xFFB
 10219                           pclath	equ	0xFFA
 10220                           tblptru	equ	0xFF8
 10221                           tblptrh	equ	0xFF7
 10222                           tblptrl	equ	0xFF6
 10223                           tablat	equ	0xFF5
 10224                           prodh	equ	0xFF4
 10225                           prodl	equ	0xFF3
 10226                           intcon	equ	0xFF2
 10227                           intcon2	equ	0xFF1
 10228                           postinc0	equ	0xFEE
 10229                           fsr0h	equ	0xFEA
 10230                           fsr0l	equ	0xFE9
 10231                           wreg	equ	0xFE8
 10232                           indf1	equ	0xFE7
 10233                           postdec1	equ	0xFE5
 10234                           fsr1h	equ	0xFE2
 10235                           fsr1l	equ	0xFE1
 10236                           indf2	equ	0xFDF
 10237                           postinc2	equ	0xFDE
 10238                           postdec2	equ	0xFDD
 10239                           plusw2	equ	0xFDB
 10240                           fsr2h	equ	0xFDA
 10241                           fsr2l	equ	0xFD9
 10242                           status	equ	0xFD8
 10243                           
 10244 ;; *************** function _EUSART1_Receive_ISR *****************
 10245 ;; Defined at:
 10246 ;;		line 138 in file "UART.c"
 10247 ;; Parameters:    Size  Location     Type
 10248 ;;		None
 10249 ;; Auto vars:     Size  Location     Type
 10250 ;;  data            1   11[COMRAM] unsigned char 
 10251 ;; Return value:  Size  Location     Type
 10252 ;;                  1    wreg      void 
 10253 ;; Registers used:
 10254 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10255 ;; Tracked objects:
 10256 ;;		On entry : 0/0
 10257 ;;		On exit  : 0/0
 10258 ;;		Unchanged: 0/0
 10259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10260 ;;      Params:         0       0       0       0       0       0       0
 10261 ;;      Locals:         1       0       0       0       0       0       0
 10262 ;;      Temps:          0       0       0       0       0       0       0
 10263 ;;      Totals:         1       0       0       0       0       0       0
 10264 ;;Total ram usage:        1 bytes
 10265 ;; Hardware stack levels used:    1
 10266 ;; Hardware stack levels required when called:    2
 10267 ;; This function calls:
 10268 ;;		i2_UART_buff_put
 10269 ;; This function is called by:
 10270 ;;		_INTERRUPT_InterruptManager
 10271 ;; This function uses a non-reentrant model
 10272 ;;
 10273                           
 10274                           	psect	text63
 10275  00211A                     __ptext63:
 10276                           	opt stack 0
 10277  00211A                     _EUSART1_Receive_ISR:
 10278                           	opt stack 20
 10279                           
 10280                           ;UART.c: 139: if (1 == RC1STAbits.OERR) {
 10281                           
 10282                           ;incstack = 0
 10283  00211A  A2AB               	btfss	4011,1,c	;volatile
 10284  00211C  D002               	goto	i2l636
 10285                           
 10286                           ;UART.c: 142: RC1STAbits.CREN = 0;
 10287  00211E  98AB               	bcf	4011,4,c	;volatile
 10288                           
 10289                           ;UART.c: 143: RC1STAbits.CREN = 1;
 10290  002120  88AB               	bsf	4011,4,c	;volatile
 10291  002122                     i2l636:
 10292                           
 10293                           ;UART.c: 144: }
 10294                           ;UART.c: 145: unsigned char data = RCREG1;
 10295  002122  CFAE F00C          	movff	4014,EUSART1_Receive_ISR@data	;volatile
 10296                           
 10297                           ;UART.c: 146: UART_buff_put(&input_buffer, data);
 10298  002126  0E3C               	movlw	low _input_buffer
 10299  002128  6E07               	movwf	i2UART_buff_put@_this,c
 10300  00212A  0E01               	movlw	high _input_buffer
 10301  00212C  6E08               	movwf	i2UART_buff_put@_this+1,c
 10302  00212E  C00C  F009         	movff	EUSART1_Receive_ISR@data,i2UART_buff_put@c
 10303  002132  EC54  F008         	call	i2_UART_buff_put	;wreg free
 10304  002136  0012               	return		;funcret
 10305  002138                     __end_of_EUSART1_Receive_ISR:
 10306                           	opt stack 0
 10307                           pclatu	equ	0xFFB
 10308                           pclath	equ	0xFFA
 10309                           tblptru	equ	0xFF8
 10310                           tblptrh	equ	0xFF7
 10311                           tblptrl	equ	0xFF6
 10312                           tablat	equ	0xFF5
 10313                           prodh	equ	0xFF4
 10314                           prodl	equ	0xFF3
 10315                           intcon	equ	0xFF2
 10316                           intcon2	equ	0xFF1
 10317                           postinc0	equ	0xFEE
 10318                           fsr0h	equ	0xFEA
 10319                           fsr0l	equ	0xFE9
 10320                           wreg	equ	0xFE8
 10321                           indf1	equ	0xFE7
 10322                           postdec1	equ	0xFE5
 10323                           fsr1h	equ	0xFE2
 10324                           fsr1l	equ	0xFE1
 10325                           indf2	equ	0xFDF
 10326                           postinc2	equ	0xFDE
 10327                           postdec2	equ	0xFDD
 10328                           plusw2	equ	0xFDB
 10329                           fsr2h	equ	0xFDA
 10330                           fsr2l	equ	0xFD9
 10331                           status	equ	0xFD8
 10332                           
 10333 ;; *************** function i2_UART_buff_put *****************
 10334 ;; Defined at:
 10335 ;;		line 67 in file "UART.c"
 10336 ;; Parameters:    Size  Location     Type
 10337 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
 10338 ;;		 -> output_buffer(106), input_buffer(106), 
 10339 ;;  c               1    8[COMRAM] const unsigned char 
 10340 ;; Auto vars:     Size  Location     Type
 10341 ;;		None
 10342 ;; Return value:  Size  Location     Type
 10343 ;;                  1    wreg      void 
 10344 ;; Registers used:
 10345 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10346 ;; Tracked objects:
 10347 ;;		On entry : 0/0
 10348 ;;		On exit  : 0/0
 10349 ;;		Unchanged: 0/0
 10350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10351 ;;      Params:         3       0       0       0       0       0       0
 10352 ;;      Locals:         0       0       0       0       0       0       0
 10353 ;;      Temps:          2       0       0       0       0       0       0
 10354 ;;      Totals:         5       0       0       0       0       0       0
 10355 ;;Total ram usage:        5 bytes
 10356 ;; Hardware stack levels used:    1
 10357 ;; Hardware stack levels required when called:    1
 10358 ;; This function calls:
 10359 ;;		i2_UART_buff_modulo_inc
 10360 ;; This function is called by:
 10361 ;;		_EUSART1_Receive_ISR
 10362 ;; This function uses a non-reentrant model
 10363 ;;
 10364                           
 10365                           	psect	text64
 10366  0010A8                     __ptext64:
 10367                           	opt stack 0
 10368  0010A8                     i2_UART_buff_put:
 10369                           	opt stack 20
 10370                           
 10371                           ;UART.c: 68: if (_this->count < 100) {
 10372                           
 10373                           ;incstack = 0
 10374  0010A8  EE20 F068          	lfsr	2,104
 10375  0010AC  5007               	movf	i2UART_buff_put@_this,w,c
 10376  0010AE  26D9               	addwf	fsr2l,f,c
 10377  0010B0  5008               	movf	i2UART_buff_put@_this+1,w,c
 10378  0010B2  22DA               	addwfc	fsr2h,f,c
 10379  0010B4  0E01               	movlw	1
 10380  0010B6  BEDB               	btfsc	plusw2,7,c
 10381  0010B8  D007               	goto	i2l3542
 10382  0010BA  0E01               	movlw	1
 10383  0010BC  50DB               	movf	plusw2,w,c
 10384  0010BE  E13A               	bnz	i2l3548
 10385  0010C0  0E64               	movlw	100
 10386  0010C2  5CDE               	subwf	postinc2,w,c
 10387  0010C4  B0D8               	btfsc	status,0,c
 10388  0010C6  D036               	goto	i2l3548
 10389  0010C8                     i2l3542:
 10390                           
 10391                           ;UART.c: 69: _this->buf[_this->head] = c;
 10392  0010C8  EE20 F064          	lfsr	2,100
 10393  0010CC  5007               	movf	i2UART_buff_put@_this,w,c
 10394  0010CE  26D9               	addwf	fsr2l,f,c
 10395  0010D0  5008               	movf	i2UART_buff_put@_this+1,w,c
 10396  0010D2  22DA               	addwfc	fsr2h,f,c
 10397  0010D4  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
 10398  0010D8  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
 10399  0010DC  500A               	movf	??i2_UART_buff_put,w,c
 10400  0010DE  2407               	addwf	i2UART_buff_put@_this,w,c
 10401  0010E0  6ED9               	movwf	fsr2l,c
 10402  0010E2  500B               	movf	??i2_UART_buff_put+1,w,c
 10403  0010E4  2008               	addwfc	i2UART_buff_put@_this+1,w,c
 10404  0010E6  6EDA               	movwf	fsr2h,c
 10405  0010E8  C009  FFDF         	movff	i2UART_buff_put@c,indf2
 10406                           
 10407                           ;UART.c: 70: _this->head = UART_buff_modulo_inc(_this->head, 100);
 10408  0010EC  EE20 F064          	lfsr	2,100
 10409  0010F0  5007               	movf	i2UART_buff_put@_this,w,c
 10410  0010F2  26D9               	addwf	fsr2l,f,c
 10411  0010F4  5008               	movf	i2UART_buff_put@_this+1,w,c
 10412  0010F6  22DA               	addwfc	fsr2h,f,c
 10413  0010F8  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 10414  0010FC  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 10415  001100  0E00               	movlw	0
 10416  001102  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 10417  001104  0E64               	movlw	100
 10418  001106  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 10419  001108  EC24  F010         	call	i2_UART_buff_modulo_inc	;wreg free
 10420  00110C  EE20 F064          	lfsr	2,100
 10421  001110  5007               	movf	i2UART_buff_put@_this,w,c
 10422  001112  26D9               	addwf	fsr2l,f,c
 10423  001114  5008               	movf	i2UART_buff_put@_this+1,w,c
 10424  001116  22DA               	addwfc	fsr2h,f,c
 10425  001118  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 10426  00111C  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 10427                           
 10428                           ;UART.c: 71: ++_this->count;
 10429  001120  EE20 F068          	lfsr	2,104
 10430  001124  5007               	movf	i2UART_buff_put@_this,w,c
 10431  001126  26D9               	addwf	fsr2l,f,c
 10432  001128  5008               	movf	i2UART_buff_put@_this+1,w,c
 10433  00112A  22DA               	addwfc	fsr2h,f,c
 10434  00112C  2ADE               	incf	postinc2,f,c
 10435  00112E  0E00               	movlw	0
 10436  001130  22DD               	addwfc	postdec2,f,c
 10437                           
 10438                           ;UART.c: 72: } else {
 10439  001132  0012               	return	
 10440  001134                     i2l3548:
 10441                           
 10442                           ;UART.c: 73: _this->buf[_this->head] = c;
 10443  001134  EE20 F064          	lfsr	2,100
 10444  001138  5007               	movf	i2UART_buff_put@_this,w,c
 10445  00113A  26D9               	addwf	fsr2l,f,c
 10446  00113C  5008               	movf	i2UART_buff_put@_this+1,w,c
 10447  00113E  22DA               	addwfc	fsr2h,f,c
 10448  001140  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
 10449  001144  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
 10450  001148  500A               	movf	??i2_UART_buff_put,w,c
 10451  00114A  2407               	addwf	i2UART_buff_put@_this,w,c
 10452  00114C  6ED9               	movwf	fsr2l,c
 10453  00114E  500B               	movf	??i2_UART_buff_put+1,w,c
 10454  001150  2008               	addwfc	i2UART_buff_put@_this+1,w,c
 10455  001152  6EDA               	movwf	fsr2h,c
 10456  001154  C009  FFDF         	movff	i2UART_buff_put@c,indf2
 10457                           
 10458                           ;UART.c: 74: _this->head = UART_buff_modulo_inc(_this->head, 100);
 10459  001158  EE20 F064          	lfsr	2,100
 10460  00115C  5007               	movf	i2UART_buff_put@_this,w,c
 10461  00115E  26D9               	addwf	fsr2l,f,c
 10462  001160  5008               	movf	i2UART_buff_put@_this+1,w,c
 10463  001162  22DA               	addwfc	fsr2h,f,c
 10464  001164  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 10465  001168  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 10466  00116C  0E00               	movlw	0
 10467  00116E  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 10468  001170  0E64               	movlw	100
 10469  001172  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 10470  001174  EC24  F010         	call	i2_UART_buff_modulo_inc	;wreg free
 10471  001178  EE20 F064          	lfsr	2,100
 10472  00117C  5007               	movf	i2UART_buff_put@_this,w,c
 10473  00117E  26D9               	addwf	fsr2l,f,c
 10474  001180  5008               	movf	i2UART_buff_put@_this+1,w,c
 10475  001182  22DA               	addwfc	fsr2h,f,c
 10476  001184  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 10477  001188  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 10478                           
 10479                           ;UART.c: 75: _this->tail = UART_buff_modulo_inc(_this->tail, 100);
 10480  00118C  EE20 F066          	lfsr	2,102
 10481  001190  5007               	movf	i2UART_buff_put@_this,w,c
 10482  001192  26D9               	addwf	fsr2l,f,c
 10483  001194  5008               	movf	i2UART_buff_put@_this+1,w,c
 10484  001196  22DA               	addwfc	fsr2h,f,c
 10485  001198  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 10486  00119C  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 10487  0011A0  0E00               	movlw	0
 10488  0011A2  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 10489  0011A4  0E64               	movlw	100
 10490  0011A6  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 10491  0011A8  EC24  F010         	call	i2_UART_buff_modulo_inc	;wreg free
 10492  0011AC  EE20 F066          	lfsr	2,102
 10493  0011B0  5007               	movf	i2UART_buff_put@_this,w,c
 10494  0011B2  26D9               	addwf	fsr2l,f,c
 10495  0011B4  5008               	movf	i2UART_buff_put@_this+1,w,c
 10496  0011B6  22DA               	addwfc	fsr2h,f,c
 10497  0011B8  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 10498  0011BC  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 10499  0011C0  0012               	return	
 10500  0011C2                     __end_ofi2_UART_buff_put:
 10501                           	opt stack 0
 10502                           pclatu	equ	0xFFB
 10503                           pclath	equ	0xFFA
 10504                           tblptru	equ	0xFF8
 10505                           tblptrh	equ	0xFF7
 10506                           tblptrl	equ	0xFF6
 10507                           tablat	equ	0xFF5
 10508                           prodh	equ	0xFF4
 10509                           prodl	equ	0xFF3
 10510                           intcon	equ	0xFF2
 10511                           intcon2	equ	0xFF1
 10512                           postinc0	equ	0xFEE
 10513                           fsr0h	equ	0xFEA
 10514                           fsr0l	equ	0xFE9
 10515                           wreg	equ	0xFE8
 10516                           indf1	equ	0xFE7
 10517                           postdec1	equ	0xFE5
 10518                           fsr1h	equ	0xFE2
 10519                           fsr1l	equ	0xFE1
 10520                           indf2	equ	0xFDF
 10521                           postinc2	equ	0xFDE
 10522                           postdec2	equ	0xFDD
 10523                           plusw2	equ	0xFDB
 10524                           fsr2h	equ	0xFDA
 10525                           fsr2l	equ	0xFD9
 10526                           status	equ	0xFD8
 10527                           
 10528 ;; *************** function i2_UART_buff_modulo_inc *****************
 10529 ;; Defined at:
 10530 ;;		line 105 in file "UART.c"
 10531 ;; Parameters:    Size  Location     Type
 10532 ;;  value           2    0[COMRAM] const unsigned int 
 10533 ;;  modulus         2    2[COMRAM] const unsigned int 
 10534 ;; Auto vars:     Size  Location     Type
 10535 ;;  UART_buff_mo    2    4[COMRAM] unsigned int 
 10536 ;; Return value:  Size  Location     Type
 10537 ;;                  2    0[COMRAM] unsigned int 
 10538 ;; Registers used:
 10539 ;;		wreg, status,2, status,0
 10540 ;; Tracked objects:
 10541 ;;		On entry : 0/0
 10542 ;;		On exit  : 0/0
 10543 ;;		Unchanged: 0/0
 10544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10545 ;;      Params:         4       0       0       0       0       0       0
 10546 ;;      Locals:         2       0       0       0       0       0       0
 10547 ;;      Temps:          0       0       0       0       0       0       0
 10548 ;;      Totals:         6       0       0       0       0       0       0
 10549 ;;Total ram usage:        6 bytes
 10550 ;; Hardware stack levels used:    1
 10551 ;; This function calls:
 10552 ;;		Nothing
 10553 ;; This function is called by:
 10554 ;;		i2_UART_buff_put
 10555 ;;		i2_UART_buff_get
 10556 ;; This function uses a non-reentrant model
 10557 ;;
 10558                           
 10559                           	psect	text65
 10560  002048                     __ptext65:
 10561                           	opt stack 0
 10562  002048                     i2_UART_buff_modulo_inc:
 10563                           	opt stack 20
 10564                           
 10565                           ;UART.c: 106: unsigned int my_value = value + 1;
 10566                           
 10567                           ;incstack = 0
 10568  002048  0E01               	movlw	1
 10569  00204A  2401               	addwf	i2UART_buff_modulo_inc@value,w,c
 10570  00204C  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
 10571  00204E  0E00               	movlw	0
 10572  002050  2002               	addwfc	i2UART_buff_modulo_inc@value+1,w,c
 10573  002052  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
 10574                           
 10575                           ;UART.c: 107: if (my_value >= modulus) {
 10576  002054  5003               	movf	i2UART_buff_modulo_inc@modulus,w,c
 10577  002056  5C05               	subwf	i2UART_buff_modulo_inc@my_value,w,c
 10578  002058  5004               	movf	i2UART_buff_modulo_inc@modulus+1,w,c
 10579  00205A  5806               	subwfb	i2UART_buff_modulo_inc@my_value+1,w,c
 10580  00205C  A0D8               	btfss	status,0,c
 10581  00205E  D004               	goto	i2l3292
 10582                           
 10583                           ;UART.c: 108: my_value = 0;
 10584  002060  0E00               	movlw	0
 10585  002062  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
 10586  002064  0E00               	movlw	0
 10587  002066  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
 10588  002068                     i2l3292:
 10589                           
 10590                           ;UART.c: 109: }
 10591                           ;UART.c: 110: return (my_value);
 10592  002068  C005  F001         	movff	i2UART_buff_modulo_inc@my_value,?i2_UART_buff_modulo_inc
 10593  00206C  C006  F002         	movff	i2UART_buff_modulo_inc@my_value+1,?i2_UART_buff_modulo_inc+1
 10594  002070  0012               	return	
 10595  002072                     __end_ofi2_UART_buff_modulo_inc:
 10596                           	opt stack 0
 10597                           pclatu	equ	0xFFB
 10598                           pclath	equ	0xFFA
 10599                           tblptru	equ	0xFF8
 10600                           tblptrh	equ	0xFF7
 10601                           tblptrl	equ	0xFF6
 10602                           tablat	equ	0xFF5
 10603                           prodh	equ	0xFF4
 10604                           prodl	equ	0xFF3
 10605                           intcon	equ	0xFF2
 10606                           intcon2	equ	0xFF1
 10607                           postinc0	equ	0xFEE
 10608                           fsr0h	equ	0xFEA
 10609                           fsr0l	equ	0xFE9
 10610                           wreg	equ	0xFE8
 10611                           indf1	equ	0xFE7
 10612                           postdec1	equ	0xFE5
 10613                           fsr1h	equ	0xFE2
 10614                           fsr1l	equ	0xFE1
 10615                           indf2	equ	0xFDF
 10616                           postinc2	equ	0xFDE
 10617                           postdec2	equ	0xFDD
 10618                           plusw2	equ	0xFDB
 10619                           fsr2h	equ	0xFDA
 10620                           fsr2l	equ	0xFD9
 10621                           status	equ	0xFD8
 10622                           
 10623 ;; *************** function _ADC_ISR *****************
 10624 ;; Defined at:
 10625 ;;		line 130 in file "mcc_generated_files/adc.c"
 10626 ;; Parameters:    Size  Location     Type
 10627 ;;		None
 10628 ;; Auto vars:     Size  Location     Type
 10629 ;;		None
 10630 ;; Return value:  Size  Location     Type
 10631 ;;                  1    wreg      void 
 10632 ;; Registers used:
 10633 ;;		None
 10634 ;; Tracked objects:
 10635 ;;		On entry : 0/0
 10636 ;;		On exit  : 0/0
 10637 ;;		Unchanged: 0/0
 10638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10639 ;;      Params:         0       0       0       0       0       0       0
 10640 ;;      Locals:         0       0       0       0       0       0       0
 10641 ;;      Temps:          0       0       0       0       0       0       0
 10642 ;;      Totals:         0       0       0       0       0       0       0
 10643 ;;Total ram usage:        0 bytes
 10644 ;; Hardware stack levels used:    1
 10645 ;; This function calls:
 10646 ;;		Nothing
 10647 ;; This function is called by:
 10648 ;;		_INTERRUPT_InterruptManager
 10649 ;; This function uses a non-reentrant model
 10650 ;;
 10651                           
 10652                           	psect	text66
 10653  00224E                     __ptext66:
 10654                           	opt stack 0
 10655  00224E                     _ADC_ISR:
 10656                           	opt stack 22
 10657                           
 10658                           ;adc.c: 133: PIR1bits.ADIF = 0;
 10659                           
 10660                           ;incstack = 0
 10661  00224E  9C9E               	bcf	3998,6,c	;volatile
 10662  002250  0012               	return		;funcret
 10663  002252                     __end_of_ADC_ISR:
 10664                           	opt stack 0
 10665  0000                     pclatu	equ	0xFFB
 10666                           pclath	equ	0xFFA
 10667                           tblptru	equ	0xFF8
 10668                           tblptrh	equ	0xFF7
 10669                           tblptrl	equ	0xFF6
 10670                           tablat	equ	0xFF5
 10671                           prodh	equ	0xFF4
 10672                           prodl	equ	0xFF3
 10673                           intcon	equ	0xFF2
 10674                           intcon2	equ	0xFF1
 10675                           postinc0	equ	0xFEE
 10676                           fsr0h	equ	0xFEA
 10677                           fsr0l	equ	0xFE9
 10678                           wreg	equ	0xFE8
 10679                           indf1	equ	0xFE7
 10680                           postdec1	equ	0xFE5
 10681                           fsr1h	equ	0xFE2
 10682                           fsr1l	equ	0xFE1
 10683                           indf2	equ	0xFDF
 10684                           postinc2	equ	0xFDE
 10685                           postdec2	equ	0xFDD
 10686                           plusw2	equ	0xFDB
 10687                           fsr2h	equ	0xFDA
 10688                           fsr2l	equ	0xFD9
 10689                           status	equ	0xFD8
 10690                           pclatu	equ	0xFFB
 10691                           pclath	equ	0xFFA
 10692                           tblptru	equ	0xFF8
 10693                           tblptrh	equ	0xFF7
 10694                           tblptrl	equ	0xFF6
 10695                           tablat	equ	0xFF5
 10696                           prodh	equ	0xFF4
 10697                           prodl	equ	0xFF3
 10698                           intcon	equ	0xFF2
 10699                           intcon2	equ	0xFF1
 10700                           postinc0	equ	0xFEE
 10701                           fsr0h	equ	0xFEA
 10702                           fsr0l	equ	0xFE9
 10703                           wreg	equ	0xFE8
 10704                           indf1	equ	0xFE7
 10705                           postdec1	equ	0xFE5
 10706                           fsr1h	equ	0xFE2
 10707                           fsr1l	equ	0xFE1
 10708                           indf2	equ	0xFDF
 10709                           postinc2	equ	0xFDE
 10710                           postdec2	equ	0xFDD
 10711                           plusw2	equ	0xFDB
 10712                           fsr2h	equ	0xFDA
 10713                           fsr2l	equ	0xFD9
 10714                           status	equ	0xFD8
 10715                           
 10716                           	psect	rparam
 10717  0000                     pclatu	equ	0xFFB
 10718                           pclath	equ	0xFFA
 10719                           tblptru	equ	0xFF8
 10720                           tblptrh	equ	0xFF7
 10721                           tblptrl	equ	0xFF6
 10722                           tablat	equ	0xFF5
 10723                           prodh	equ	0xFF4
 10724                           prodl	equ	0xFF3
 10725                           intcon	equ	0xFF2
 10726                           intcon2	equ	0xFF1
 10727                           postinc0	equ	0xFEE
 10728                           fsr0h	equ	0xFEA
 10729                           fsr0l	equ	0xFE9
 10730                           wreg	equ	0xFE8
 10731                           indf1	equ	0xFE7
 10732                           postdec1	equ	0xFE5
 10733                           fsr1h	equ	0xFE2
 10734                           fsr1l	equ	0xFE1
 10735                           indf2	equ	0xFDF
 10736                           postinc2	equ	0xFDE
 10737                           postdec2	equ	0xFDD
 10738                           plusw2	equ	0xFDB
 10739                           fsr2h	equ	0xFDA
 10740                           fsr2l	equ	0xFD9
 10741                           status	equ	0xFD8
 10742                           
 10743                           	psect	temp
 10744  000042                     btemp:
 10745                           	opt stack 0
 10746  000042                     	ds	1
 10747  0000                     int$flags	set	btemp
 10748                           pclatu	equ	0xFFB
 10749                           pclath	equ	0xFFA
 10750                           tblptru	equ	0xFF8
 10751                           tblptrh	equ	0xFF7
 10752                           tblptrl	equ	0xFF6
 10753                           tablat	equ	0xFF5
 10754                           prodh	equ	0xFF4
 10755                           prodl	equ	0xFF3
 10756                           intcon	equ	0xFF2
 10757                           intcon2	equ	0xFF1
 10758                           postinc0	equ	0xFEE
 10759                           fsr0h	equ	0xFEA
 10760                           fsr0l	equ	0xFE9
 10761                           wreg	equ	0xFE8
 10762                           indf1	equ	0xFE7
 10763                           postdec1	equ	0xFE5
 10764                           fsr1h	equ	0xFE2
 10765                           fsr1l	equ	0xFE1
 10766                           indf2	equ	0xFDF
 10767                           postinc2	equ	0xFDE
 10768                           postdec2	equ	0xFDD
 10769                           plusw2	equ	0xFDB
 10770                           fsr2h	equ	0xFDA
 10771                           fsr2l	equ	0xFD9
 10772                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        7
    BSS         400
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     44      65
    BANK0           160    103     157
    BANK1           256     25     251
    BANK2           256      0     106
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 106
		 -> output_buffer(BANK2[106]), input_buffer(BANK1[106]), 

    memset@p	PTR unsigned char  size(2) Largest target is 106
		 -> output_buffer(BANK2[106]), input_buffer(BANK1[106]), 

    SetDataDict@DataArray	PTR unsigned char  size(2) Largest target is 4
		 -> ComController@DataRecived(BANK1[4]), updateComms@DataGet(BANK0[2]), 

    GetDataDict@DataArray	PTR unsigned char  size(2) Largest target is 4
		 -> ComController@DataToSend_1656(BANK1[4]), ComController@DataToSend(BANK1[4]), updateComms@DataGet(BANK0[2]), 

    cobs_decode@dst_write_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK1[30]), 

    cobs_decode@dst_buf_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK1[30]), 

    cobs_decode@dst_buf_end_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK1[30]), 

    cobs_decode@src_ptr	PTR const unsigned char  size(2) Largest target is 30
		 -> ReciveArray(BANK1[30]), 

    cobs_decode@src_end_ptr	PTR const unsigned char  size(2) Largest target is 30
		 -> ReciveArray(BANK1[30]), 

    cobs_encode@dst_write_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> sendData@COBSArray(BANK0[30]), 

    cobs_encode@dst_code_write_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> sendData@COBSArray(BANK0[30]), 

    cobs_encode@dst_buf_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> sendData@COBSArray(BANK0[30]), 

    cobs_encode@dst_buf_end_ptr	PTR unsigned char  size(2) Largest target is 30
		 -> sendData@COBSArray(BANK0[30]), 

    cobs_encode@src_ptr	PTR const unsigned char  size(2) Largest target is 30
		 -> sendData@SendArray(BANK0[30]), 

    cobs_encode@src_end_ptr	PTR const unsigned char  size(2) Largest target is 30
		 -> sendData@SendArray(BANK0[30]), 

    ComController@DTI	PTR unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK1[30]), 

    sendData@DTS	PTR unsigned char  size(2) Largest target is 4
		 -> ComController@DataToSend_1656(BANK1[4]), ComController@DataToSend(BANK1[4]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 30
		 -> ProcessArray(BANK1[30]), sendData@SendArray(BANK0[30]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 106
		 -> output_buffer(BANK2[106]), input_buffer(BANK1[106]), 

    UART_buff_flush@_this	PTR struct UART_ring_buff size(2) Largest target is 106
		 -> input_buffer(BANK1[106]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 106
		 -> output_buffer(BANK2[106]), input_buffer(BANK1[106]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 106
		 -> output_buffer(BANK2[106]), input_buffer(BANK1[106]), 

    sp__memset	PTR void  size(2) Largest target is 106
		 -> output_buffer(BANK2[106]), input_buffer(BANK1[106]), 

    UART_buff_init@_this	PTR struct UART_ring_buff size(2) Largest target is 106
		 -> output_buffer(BANK2[106]), input_buffer(BANK1[106]), 


Critical Paths under _main in COMRAM

    _updateComms->_processPowerRequest
    _Receive_get->_UART_buff_get
    _Receive_available->_UART_buff_size
    _ComController->_sendData
    _sendData->_Send_put
    _Send_put->_UART_buff_get
    _Send_put->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc
    _UART_buff_get->_UART_buff_modulo_inc
    _ClearBuffer->_UART_buff_flush
    _UART_buff_flush->_memset
    _processPowerRequest->_EnableSlavePower
    _CoolingStop->_PotClear
    _CoolingStart->_PotSetpoint
    _PotSetpoint->_Delay
    _PotClear->_Delay
    _FaultsCollector->_GetPDUFault
    _EUSART1_Initialize->_UART_buff_init
    _UART_buff_init->_memset
    _Update->_writeRegisters
    _StartUp595->_Clear595
    _Clear595->_writeRegisters
    _writeRegisters->_Delay
    _EnableSlavePower->_SetPin595
    _ComputeStorageData->_DATAEE_ReadByte

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR1_ISR->_ReadCurrent
    i2_Update->i2_writeRegisters
    i2_writeRegisters->i2_Delay
    _FuseSystem->___wmul
    _EUSART1_Transmit_ISR->i2_UART_buff_get
    i2_UART_buff_get->i2_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->i2_UART_buff_put
    i2_UART_buff_put->i2_UART_buff_modulo_inc

Critical Paths under _main in BANK0

    _main->_updateComms
    _updateComms->_receiveData
    _receiveData->_ComController
    _ComController->_sendData
    _sendData->_cobs_encode
    _CoolingStart->_PotSetpoint

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _updateComms->_receiveData
    _receiveData->_ComController

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   64236
                                             20 BANK1      5     5      0
                 _ComputeStorageData
                         _PDUStartup
                 _PWM4_LoadDutyValue
                        _PotSetpoint
                  _SYSTEM_Initialize
                        _updateComms
 ---------------------------------------------------------------------------------
 (1) _updateComms                                          2     2      0   41846
                                            101 BANK0      2     2      0
                    _FaultsCollector
                        _GetDataDict
                        _SetDataDict
                _processPowerRequest
                        _receiveData
 ---------------------------------------------------------------------------------
 (2) _receiveData                                         12    12      0   17556
                                             96 BANK0      5     5      0
                                             13 BANK1      7     7      0
                               _CRC8
                        _ClearBuffer
                      _ComController
                  _Receive_available
                        _Receive_get
                        _cobs_decode
 ---------------------------------------------------------------------------------
 (3) _cobs_decode                                         24    16      8    1783
                                             28 COMRAM    10     2      8
                                              0 BANK0     14    14      0
 ---------------------------------------------------------------------------------
 (3) _Receive_get                                          0     0      0    1308
                      _UART_buff_get
 ---------------------------------------------------------------------------------
 (3) _Receive_available                                    2     0      2     176
                                             30 COMRAM     2     0      2
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (4) _UART_buff_size                                       2     0      2     176
                                             28 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _ComController                                       19    15      4   12407
                                             90 BANK0      6     2      4
                                              0 BANK1     13    13      0
                              _Delay
                        _GetDataDict
                        _SetDataDict
                           _sendData
 ---------------------------------------------------------------------------------
 (4) _sendData                                            81    74      7    7337
                                             40 COMRAM     4     4      0
                                             13 BANK0     77    70      7
                               _CRC8
                           _Send_put
                        _cobs_encode
 ---------------------------------------------------------------------------------
 (5) _cobs_encode                                         23    15      8    1613
                                             28 COMRAM    10     2      8
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (5) _Send_put                                             1     1      0    2913
                                             39 COMRAM     1     1      0
                      _UART_buff_get
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (6) _UART_buff_put                                        5     2      3    1574
                                             34 COMRAM     5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (4) _UART_buff_get                                        5     3      2    1308
                                             34 COMRAM     5     3      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _UART_buff_modulo_inc                                 6     2      4     850
                                             28 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _CRC8                                                 7     4      3     604
                                             28 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (4) _SetDataDict                                          8     4      4    1042
                                             28 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (4) _GetDataDict                                          8     4      4    1312
                                             28 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _ClearBuffer                                          0     0      0    1012
                    _UART_buff_flush
 ---------------------------------------------------------------------------------
 (4) _UART_buff_flush                                      4     0      4    1012
                                             36 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (2) _processPowerRequest                                  3     3      0   21590
                                             41 COMRAM     3     3      0
                       _CoolingStart
                        _CoolingStop
                   _EnableSlavePower
                             _Update
 ---------------------------------------------------------------------------------
 (3) _CoolingStop                                          0     0      0    2268
                 _PWM4_LoadDutyValue
                           _PotClear
 ---------------------------------------------------------------------------------
 (3) _CoolingStart                                         0     0      0    4579
                 _PWM4_LoadDutyValue
                           _PotClear
                        _PotSetpoint
 ---------------------------------------------------------------------------------
 (4) _PotSetpoint                                         10     8      2    2311
                                             37 COMRAM     4     2      2
                                              0 BANK0      6     6      0
                              _Delay
 ---------------------------------------------------------------------------------
 (4) _PotClear                                             2     2      0    1936
                                             37 COMRAM     2     2      0
                              _Delay
 ---------------------------------------------------------------------------------
 (4) _PWM4_LoadDutyValue                                   4     2      2     332
                                             28 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _FaultsCollector                                      7     7      0     232
                                             29 COMRAM     7     7      0
                        _GetPDUFault
 ---------------------------------------------------------------------------------
 (3) _GetPDUFault                                          1     1      0      31
                                             28 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     888
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM4_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0     888
                     _UART_buff_init
 ---------------------------------------------------------------------------------
 (3) _UART_buff_init                                       2     0      2     888
                                             36 COMRAM     2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               8     2      6     677
                                             28 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PDUStartup                                           0     0      0   18689
                 _ComputeStorageData
                   _EnableSlavePower
                         _StartUp595
                             _Update
 ---------------------------------------------------------------------------------
 (3) _Update                                               0     0      0    2035
                     _writeRegisters
 ---------------------------------------------------------------------------------
 (2) _StartUp595                                           0     0      0    4002
                           _Clear595
                              _Delay
 ---------------------------------------------------------------------------------
 (3) _Clear595                                             2     2      0    2134
                                             41 COMRAM     2     2      0
                     _writeRegisters
 ---------------------------------------------------------------------------------
 (4) _writeRegisters                                       4     4      0    2035
                                             37 COMRAM     4     4      0
                              _Delay
 ---------------------------------------------------------------------------------
 (4) _Delay                                                9     5      4    1868
                                             28 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (3) _EnableSlavePower                                     3     1      2   12491
                                             38 COMRAM     3     1      2
                          _SetPin595
 ---------------------------------------------------------------------------------
 (4) _SetPin595                                           10     4      6   10623
                                             28 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (2) _ComputeStorageData                                   4     4      0     161
                                             29 COMRAM     4     4      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_ReadByte                                      1     1      0      31
                                             28 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                          14    14      0    6300
                                             14 COMRAM    14    14      0
                            _ADC_ISR
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR1_ISR                                             0     0      0    5091
                         _FuseSystem
                        _ReadCurrent
 ---------------------------------------------------------------------------------
 (10) _ReadCurrent                                         1     1      0    4644
                                             13 COMRAM     1     1      0
                  _ADC_GetConversion
                        i2_SetPin595
                           i2_Update
 ---------------------------------------------------------------------------------
 (11) i2_Update                                            0     0      0     212
                   i2_writeRegisters
 ---------------------------------------------------------------------------------
 (12) i2_writeRegisters                                    4     4      0     212
                                              9 COMRAM     4     4      0
                            i2_Delay
 ---------------------------------------------------------------------------------
 (13) i2_Delay                                             9     5      4      98
                                              0 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (11) i2_SetPin595                                        10     4      6    4278
                                              0 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (11) _ADC_GetConversion                                   5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (10) _FuseSystem                                          4     4      0     447
                                              6 COMRAM     4     4      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (11) ___wmul                                              6     2      4     311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Transmit_ISR                                 0     0      0     528
                    i2_UART_buff_get
                   i2_UART_buff_size
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_size                                    2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_get                                     5     3      2     480
                                              6 COMRAM     5     3      2
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Receive_ISR                                  1     1      0     681
                                             11 COMRAM     1     1      0
                    i2_UART_buff_put
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_put                                     5     2      3     658
                                              6 COMRAM     5     2      3
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (11) i2_UART_buff_modulo_inc                              6     2      4     298
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _ADC_ISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ComputeStorageData
     _DATAEE_ReadByte
   _PDUStartup
     _ComputeStorageData
       _DATAEE_ReadByte
     _EnableSlavePower
       _SetPin595
     _StartUp595
       _Clear595
         _writeRegisters
           _Delay
       _Delay
     _Update
       _writeRegisters
         _Delay
   _PWM4_LoadDutyValue
   _PotSetpoint
     _Delay
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
       _UART_buff_init
         _memset
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM4_Initialize
     _TMR1_Initialize
       _TMR1_StartTimer
     _TMR2_Initialize
       _TMR2_StartTimer
   _updateComms
     _FaultsCollector
       _GetPDUFault
     _GetDataDict
     _SetDataDict
     _processPowerRequest
       _CoolingStart
         _PWM4_LoadDutyValue
         _PotClear
           _Delay
         _PotSetpoint
           _Delay
       _CoolingStop
         _PWM4_LoadDutyValue
         _PotClear
           _Delay
       _EnableSlavePower
         _SetPin595
       _Update
         _writeRegisters
           _Delay
     _receiveData
       _CRC8
       _ClearBuffer
         _UART_buff_flush
           _memset
       _ComController
         _Delay
         _GetDataDict
         _SetDataDict
         _sendData
           _CRC8
           _Send_put
             _UART_buff_get
               _UART_buff_modulo_inc
             _UART_buff_put
               _UART_buff_modulo_inc
           _cobs_encode
       _Receive_available
         _UART_buff_size
       _Receive_get
         _UART_buff_get
           _UART_buff_modulo_inc
       _cobs_decode

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
   _EUSART1_Receive_ISR
     i2_UART_buff_put
       i2_UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     i2_UART_buff_get
       i2_UART_buff_modulo_inc
     i2_UART_buff_size
   _TMR1_ISR
     _FuseSystem
       ___wmul
     _ReadCurrent
       _ADC_GetConversion
       i2_SetPin595
       i2_Update
         i2_writeRegisters
           i2_Delay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      6A       8       41.4%
BITBANK1           100      0       0       5        0.0%
BANK1              100     19      FB       6       98.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     67      9D       4       98.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2C      41       1       69.1%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     243       9        0.0%
DATA                 0      0     243      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Sun Aug 13 21:24:22 2017

                __end_of_GetDataDict 178C               i2_UART_buff_modulo_inc 2048  
                      ??_CoolingStop 0028             cobs_encode@dst_write_ptr 0068  
           GetDataDict@ReturnCounter 0024                  ___wmul@multiplicand 0003  
                     ??_CoolingStart 002A                         __CFG_CP0$OFF 000000  
                       __CFG_CP1$OFF 000000                         __CFG_CP2$OFF 000000  
                       __CFG_CP3$OFF 000000                                  l605 181A  
                                l552 18F4                                  l554 18FE  
                                l722 137A                                  l727 15EC  
                                l719 1320                                  l728 1626  
                                l768 1D9C                                  l883 1778  
                                l897 16E0                         __CFG_CPB$OFF 000000  
                                _PR2 000FBB                         __CFG_CPD$OFF 000000  
                    _timer1ReloadVal 0038                      __end_of_ADC_ISR 2252  
                    _TMR2_Initialize 21BE                      _PWM4_Initialize 21D2  
                                prod 000FF3                                  wreg 000FE8  
      i2UART_buff_modulo_inc@modulus 0003          _COBS_DECODE_DST_BUF_LEN_MAX 003B  
                       __CFG_LVP$OFF 000000            SetDataDict@DataTableIndex 001D  
                    _UART_buff_flush 1AA4                                 l4002 0992  
                               l4030 0ABE                                 l4022 0A54  
                               l4008 09D2                                 l4034 0ADA  
                               l4026 0A92                                 l4210 0820  
                               l4060 13F6                                 l4124 0B58  
                               l4070 1472                                 l4062 1414  
                               l4214 0862                                 l4206 0802  
                               l4134 0B82                                 l4126 0B60  
                               l4118 0B44                                 l4302 11F0  
                               l4400 14C0                                 l4152 0BFE  
                               l4144 0BC2                                 l4410 14EA  
                               l4066 1436                                 l4058 13D8  
                               l4074 1490                                 l4330 0E74  
                               l4154 0C02                                 l4322 12D4  
                               l4404 14D0                                 l4068 1454  
                               l4332 0E82                                 l4316 12B8  
                               l4350 0F0E                                 l4342 0ED4  
                               l4166 0C2C                                 l4174 0C44  
                               l4088 1ED4                                 l4360 0F64  
                               l4344 0EE2                                 l4336 0EA2  
                               l3712 1816                                 l4184 0C78  
                               l3722 1DE0                                 l4098 1EFA  
                               l3730 200C                                 l4362 0F72  
                               l4354 0F32                                 l4338 0EB0  
                               l4372 1C40                                 l4356 0F40  
                               l4348 0F00                                 l4188 0C8C  
                               l3718 1DC6                                 l3902 18EC  
                               l3726 1FFC                                 l4382 1C80  
                               l4366 0F84                                 l3750 1D86  
                               l3806 0DA6                                 l4376 1C50  
                               l4368 0F88                                 l3744 1D70  
                               l3760 1DA8                                 l3832 0E18  
                               l4464 1D64                                 l3834 0E24  
                               l3826 0DF6                                 l3852 1734  
                               l3844 1704                                 l3692 0FAE  
                               l3862 176E                                 l3854 173E  
                               l3846 170C                                 l3870 1674  
                               l3758 1DA2                                 l3686 203E  
                               l3782 0D36                                 l3936 135A  
                               l3856 1746                                 l3864 177C  
                               l3880 16AE                                 l3784 0D3E  
                               l3776 0D22                                 l3946 13AC  
                               l3698 101A                                 l3876 169C  
                               l3868 166C                                 l3788 0D58  
                               l3894 18C0                                 l3886 16D6  
                               l3878 16A6                                 l3888 16E4  
                               l3978 093A                                 l3988 0966  
              __end_of_ComController 092C                                 _CRC8 1D6A  
                               _LATA 000F89                                 _LATB 000F8A  
                               _LATC 000F8B                                 _LATD 000F8C  
                               u3017 120E                                 _LATE 000F8D  
                               u3027 1DCC                                 u2270 17AA  
                               u2560 1626                                 u2830 12B6  
                               u2915 0F48                                 u2790 11D6  
                               u2935 0F7A                                 u2964 1C6A  
                               u2965 1C64                                 i2l31 1FAC  
                               u2895 0F16                                 i2l71 0066  
                               i2l75 0070                                 i2l67 004E  
                               i2l69 005A                                 _TMR2 000FBC  
                               _WPUB 000F61                      __end_ofi2_Delay 1E48  
                               _data 00D3                                 _main 1D20  
           __end_of_EnableSlavePower 14B8                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 fsr2h 000FDA  
                               fsr0l 000FE9                                 indf1 000FE7  
                               indf2 000FDF                                 fsr1l 000FE1  
                               fsr2l 000FD9                                 btemp 0042  
                      __CFG_BORV$190 000000                                 prodh 000FF4  
                               prodl 000FF3                                 start 00AC  
                      __CFG_IESO$OFF 000000                    ?i2_writeRegisters 0001  
                   ?_FaultsCollector 0001                         ___param_bank 000000  
                      ??_ReadCurrent 000E                   ??i2_writeRegisters 000A  
     i2UART_buff_modulo_inc@my_value 0005                       GetPDUFault@loc 001D  
                              ?_CRC8 001D              ComController@DataToSend 01E6  
     __size_of_OSCILLATOR_Initialize 000E        __end_of_OSCILLATOR_Initialize 2228  
                              ?_main 0001                                _EEADR 000FA9  
                              _ANSB3 0079CB                                _ANSB4 0079CC  
                    _TMR1_StartTimer 224A                                _ANSD7 0079DF  
                              _T1CON 000FCD                                _T2CON 000FBA  
                              _LATB0 007C50                                _LATA3 007C4B  
                              _LATB3 007C53                                _LATB4 007C54  
                              _LATB5 007C55                                _LATC5 007C5D  
                              _LATD4 007C64                                _LATD5 007C65  
                              _LATD6 007C66                                _LATD7 007C67  
                     __CFG_DEBUG$OFF 000000                          ?_PDUStartup 0001  
                              i2l605 18AC                                i2l552 1972  
                              i2l554 197C                                i2l636 2122  
                              i2l485 1A28                                _MCSOn 003A  
                 _PWM4_LoadDutyValue 1F64                                _TMR1H 000FCF  
                              _TMR1L 000FCE                  __end_of_CoolingStop 220C  
                              _TRISA 000F92                                _TRISB 000F93  
                              _TRISC 000F94                                _TRISD 000F95  
                              _TRISE 000F96                                _Delay 1DB4  
                        _GetPDUFault 2192                        __CFG_WRT0$OFF 000000  
                      __CFG_WRT1$OFF 000000                        __CFG_WRT2$OFF 000000  
                      __CFG_WRT3$OFF 000000                 _EUSART1_Transmit_ISR 1F32  
                     __CFG_EBTR0$OFF 000000                       __CFG_FCMEN$OFF 000000  
                     __CFG_EBTR1$OFF 000000                       __CFG_EBTR2$OFF 000000  
                     __CFG_EBTR3$OFF 000000                     ??_writeRegisters 0026  
                   __end_of_TMR1_ISR 1F32                        __CFG_WRTB$OFF 000000  
                      __CFG_WRTC$OFF 000000                        __CFG_WRTD$OFF 000000  
                    _DATAEE_ReadByte 21E6                       __CFG_EBTRB$OFF 000000  
                ?_PWM4_LoadDutyValue 001D                   __CFG_MCLRE$EXTMCLR 000000  
                              main@i 01F6                                main@j 01F8  
           SetDataDict@ReturnCounter 0024                          _ClearBuffer 217C  
            __end_of_TMR1_Initialize 20DE                     __end_ofi2_Update 2246  
                              pclath 000FFA                                tablat 000FF5  
                      ??_Receive_get 0028                        receiveData@CS 01EF  
                              plusw2 000FDB                                status 000FD8  
                        _GetDataDict 16F4                     __end_of_Clear595 1F00  
                      ??_SetDataDict 0021                       __CFG_HFOFST$ON 000000  
                    _TMR2_StartTimer 2246                         ?_receiveData 0001  
                     __CFG_PBADEN$ON 000000                 PotSetpoint@new_point 0026  
                       __end_of_CRC8 1DB4                      __initialization 1BCA  
         __end_of_EUSART1_Initialize 1ECC                         __end_of_main 1D6A  
                         _CurrentADC 00C7           UART_buff_flush@clearBuffer 0027  
               ??_PWM4_LoadDutyValue 001F                               ??_CRC8 0020  
            __end_of_PWM4_Initialize 21E6              __end_of_TMR2_Initialize 21D2  
                          ??_ADC_ISR 0001          ?_INTERRUPT_InterruptManager 0001  
               PotSetpoint@set_point 0060                           _FuseSystem 19AC  
                             ??_main 002D             ComController@DataRecived 01E2  
                __end_of_ReadCurrent 0740                     __end_of_PotClear 165C  
                      __activetblptr 000002                     __end_of_Send_put 1FF2  
            __end_of_UART_buff_flush 1B06            __size_ofi2_UART_buff_size 0016  
                             ?_Delay 001D                ?_EUSART1_Transmit_ISR 0001  
               GetDataDict@DataArray 001E                 GetDataDict@DataCount 0023  
               GetDataDict@DataTable 0022                 SetDataDict@DataArray 001E  
               SetDataDict@DataCount 0023                 SetDataDict@DataTable 0022  
                          ??i2_Delay 0005                               _ADCON0 000FC2  
                             _ADCON1 000FC1                               _ADCON2 000FC0  
               __size_of_cobs_decode 01BE                          FuseSystem@i 0009  
                             _ADRESH 000FC4                               _ADRESL 000FC3  
                             _EEDATA 000FA8                               _CCPR2H 000F68  
                             _CCPR2L 000F67                               _EECON2 000FA7  
               __size_of_cobs_encode 0198                               _ANSELA 000F38  
                             _ANSELB 000F39                               _ANSELC 000F3A  
                             _ANSELD 000F3B                               _ANSELE 000F3C  
                             _T1GCON 000FCC                      i2_UART_buff_get 181E  
                             _RC1STA 000FAB                      i2_UART_buff_put 10A8  
                             Delay@i 0022                               i2l3400 02E0  
                             i2l3066 196A                               i2l3058 193E  
                             i2l3412 0510                               i2l3406 03F8  
                     __CFG_WDTEN$OFF 000000                               i2l3418 0628  
                             i2l3292 2068                               i2l3380 1A12  
                             i2l3372 19C4                               i2l3542 10C8  
                             i2l3384 1A22                               i2l3368 19B4  
        UART_buff_modulo_inc@modulus 001F                               i2l3562 18A8  
                             i2l3378 1A0A                               i2l3394 01C8  
                             i2l3548 1134                               i2l3580 1F5C  
                             i2l2854 1E10                               i2l2858 1E2A  
                             i2l3598 1F2A                               _TABLAT 000FF5  
                             _RCREG1 000FAE                               _OSCCON 000FD3  
        __end_of_processPowerRequest 0F8E                               _SPBRG1 000FAF  
               __end_of_CoolingStart 20FC                               _TX1STA 000FAC  
                             _TRISB3 007C9B                               _TRISB4 007C9C  
                             _TRISB5 007C9D                               _TXREG1 000FAD  
                __size_of_PDUStartup 0062                       __CFG_XINST$OFF 000000  
                      ??_PotSetpoint 0028                  __end_of_Receive_get 221A  
                       _CCPTMRS1bits 000F48                               _Update 223A  
                 __size_of_SetPin595 004E                        _output_buffer 0200  
            __end_of_TMR1_StartTimer 224E                  __end_of_SetDataDict 16F4  
                             ___wmul 2072                            CRC8@tempI 0022  
                     __CFG_STVREN$ON 000000                          _CoolingStop 21FA  
                             _memset 1FF2                               clear_0 1BF0  
                             clear_1 1BFC                               clear_2 1C08  
                             clear_3 1C14                               main@UP 01FA  
                   __end_of_sendData 0B00              __end_of_DATAEE_ReadByte 21FA  
                       __pdataCOMRAM 003B               cobs_encode@dst_buf_len 001F  
             cobs_encode@dst_buf_ptr 001D                        Send_put@_data 0028  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8                           _StartUp595 1B68  
           ADC_GetConversion@channel 0005         __end_of_UART_buff_modulo_inc 2048  
            __end_of_TMR2_StartTimer 224A        __size_of_INTERRUPT_Initialize 000A  
                  ReadCurrent@gather 000E                     ?_TMR1_Initialize 0001  
                  _SYSTEM_Initialize 2098                           __accesstop 0060  
            __end_of__initialization 1C1A                         ?i2_SetPin595 0001  
                      sendData@count 00B7                        sendData@lenth 0072  
                 ?_SYSTEM_Initialize 0001                        ___rparam_used 000001  
            ?i2_UART_buff_modulo_inc 0001                         ?_updateComms 0001  
                      __end_of_Delay 1DFE                       __pcstackCOMRAM 0001  
                ??_SYSTEM_Initialize 0027                          _ReadCurrent 00B0  
                          ?_TMR1_ISR 0001                     ?_TMR2_Initialize 0001  
                   ?_PWM4_Initialize 0001                 UART_buff_flush@_this 0025  
                        ?_FuseSystem 0001                            ?i2_Update 0001  
                __end_of_PotSetpoint 13D4          __size_of_ComputeStorageData 00DC  
        PWM4_LoadDutyValue@dutyValue 001D                   UART_buff_get@_this 0023  
                        _Currentcomp 00DF                __end_of_UART_buff_get 181E  
             ??_EUSART1_Transmit_ISR 000C                __end_of_UART_buff_put 10A8  
                          ?_Clear595 0001                     ?_UART_buff_flush 0025  
                            ??_Delay 0021              __end_ofi2_UART_buff_get 18B0  
            __end_ofi2_UART_buff_put 11C2          __end_of_EUSART1_Receive_ISR 2138  
                            CRC8@crc 0023                              CRC8@len 001F  
                            CRC8@sum 0020                    __end_of_SetPin595 1CD2  
          __end_of_SYSTEM_Initialize 20BC                          sendData@DTS 0070  
             cobs_decode@dst_buf_len 001F                           __pbssBANK0 00C7  
                         __pbssBANK1 0100                           __pbssBANK2 0200  
             cobs_decode@dst_buf_ptr 001D                      __CFG_PLLCFG$OFF 000000  
                        _Receive_get 220C       __end_ofi2_UART_buff_modulo_inc 2072  
                        _SetDataDict 165C                    ?_EnableSlavePower 0027  
            __size_of_UART_buff_init 001E                          _ReciveArray 01C4  
            __size_of_UART_buff_size 0016                            ?_PotClear 0001  
                          ?_Send_put 0001                   ??_EnableSlavePower 0029  
               __size_of_receiveData 0116                   __CFG_CCP2MX$PORTC1 000000  
                            ?_Update 0001                              ?___wmul 0001  
                   ?_TMR1_StartTimer 0001                           ??_TMR1_ISR 000F  
                 __CFG_CCP3MX$PORTB5 000000             cobs_decode@dst_write_ptr 0068  
         cobs_decode@remaining_bytes 0066                              _CCP2CON 000F66  
                            _ADC_ISR 224E                              ?_memset 001D  
                         ??i2_Update 000E              __size_of_ADC_Initialize 0018  
                   ?_DATAEE_ReadByte 0001                         ??_PDUStartup 002C  
                 UART_buff_put@_this 0023                      cobs_decode@F192 0030  
                         ??_Clear595 002A                     i2_UART_buff_size 21A8  
          __size_ofi2_writeRegisters 007E          i2UART_buff_modulo_inc@value 0001  
                       ?_GetPDUFault 0001                              _OSCCON2 000FD2  
                            _TBLPTRH 000FF7                              _TBLPTRL 000FF6  
                            _TBLPTRU 000FF8                          ?_StartUp595 0001  
                  _Receive_available 2150         UART_buff_modulo_inc@my_value 0021  
                  __CFG_PRICLKEN$OFF 000000                              _OSCTUNE 000F9B  
                            _SPBRGH1 000FB0                  sendData@whereToSend 00B0  
                            i2_Delay 1DFE                __size_of_CoolingStart 001E  
                   ?_TMR2_StartTimer 0001                   ?_Receive_available 001F  
                       ?_ClearBuffer 0001                         ?_GetDataDict 001D  
       ComController@DataToSend_1656 01EA                  __size_of_FuseSystem 007E  
                   ComController@DTI 00BA                  ??_Receive_available 0021  
                          ?_sendData 006D                              _Current 0130  
                    __CFG_PWRTEN$OFF 000000                           ??_PotClear 0026  
                         ??_Send_put 0028                              __Hparam 0000  
                            __Lparam 0000                   __end_of_PDUStartup 1B68  
             cobs_encode@src_end_ptr 0060                          _PotSetpoint 12D8  
                    __size_of_Update 0006                 _UART_buff_modulo_inc 201E  
                    __size_of___wmul 0026                              __pcinit 1BCA  
             __size_of_ComController 01EC                      __size_of_memset 002C  
                            __ramtop 0600                     FaultsCollector@i 0023  
                   i2UART_buff_get@c 000B                              __ptext0 1D20  
                            __ptext1 1E48                              __ptext2 11C2  
                            __ptext3 0B00                              __ptext4 220C  
                            __ptext5 2150                              __ptext6 2166  
                            __ptext7 0740                              __ptext8 092C  
                            __ptext9 0CBE             __size_of_FaultsCollector 005C  
                       _CoolingStart 20DE                     i2UART_buff_put@c 0009  
                          _T1CONbits 000FCD           cobs_encode@dst_buf_end_ptr 0063  
              _OSCILLATOR_Initialize 221A            __end_of_Receive_available 2166  
                          _T2CONbits 000FBA                  cobs_encode@src_byte 0062  
                 _EUSART1_Initialize 1E90                     ?i2_UART_buff_get 0007  
           ??_PIN_MANAGER_Initialize 001D                            Clear595@i 002A  
                   ?i2_UART_buff_put 0007           __size_of_SYSTEM_Initialize 0024  
               end_of_initialization 1C1A                            Delay@wait 001D  
                ?_EUSART1_Initialize 0001                      cobs_encode@F180 0033  
                            memset@c 001F                              memset@n 0021  
                            memset@p 0023                        __Lmediumconst 0000  
                         ??_sendData 0029                 __size_ofi2_SetPin595 004E  
                    receiveData@Data 01F2                            _PDUFalult 00F5  
              ?_UART_buff_modulo_inc 001D                 __size_of_updateComms 0048  
                            postdec1 000FE5                              postdec2 000FDD  
                __size_of_StartUp595 0062                              postinc0 000FEE  
                            postinc2 000FDE          __size_of_PWM4_LoadDutyValue 0030  
                       ?_CoolingStop 0001                         SetPin595@Reg 001D  
               ??_EUSART1_Initialize 0027                         SetPin595@pin 001F  
                  cobs_decode@result 006B               cobs_decode@src_end_ptr 0060  
                      ??_cobs_decode 0025                        ??_cobs_encode 0025  
                          _TRISCbits 000F94                            _TRISDbits 000F95  
                   FuseSystem@i_1234 0007                       sendData@result 00B2  
                      _ComController 0740                i2UART_buff_size@_this 0001  
                     _UART_buff_init 20FC                       _UART_buff_size 2166  
            __size_of_writeRegisters 007E                   updateComms@DataGet 00C5  
       __size_of_processPowerRequest 0138                         ?_ReadCurrent 0001  
       __end_of_INTERRUPT_Initialize 2232                       __end_of_Update 2240  
             GetDataDict@numbofbytes 0020                       __end_of___wmul 2098  
                      __pidataCOMRAM 2232                         ??_FuseSystem 0007  
                  __size_of_TMR1_ISR 0032                       _ADC_Initialize 2138  
             ?_OSCILLATOR_Initialize 0001                       __end_of_memset 201E  
                       receiveData@i 01F0           __size_of_Receive_available 0016  
                   i2_writeRegisters 192E                    __size_ofi2_Update 0006  
                start_initialization 1BCA      __size_of_PIN_MANAGER_Initialize 007A  
              EnableSlavePower@slave 0029               SetDataDict@numbofbytes 0020  
                  __size_of_Clear595 0034                    ??_FaultsCollector 001E  
               __size_of_GetPDUFault 0016                  i2writeRegisters@val 000A  
                          PotClear@x 0026                   ComController@lenth 00BC  
                     ?_ComController 00BA                  __end_of_cobs_decode 0CBE  
             __end_of_UART_buff_init 211A                       UART_buff_get@c 0027  
             __end_of_UART_buff_size 217C                  __end_of_cobs_encode 0E56  
                       ?_Receive_get 0001                            _SetPin595 1C84  
                     UART_buff_put@c 0025                 __size_of_ClearBuffer 0016  
                       ?_SetDataDict 001D                  DATAEE_ReadByte@bAdd 001D  
                 __end_of_FuseSystem 1A2A             __end_ofi2_UART_buff_size 21BE  
               __size_of_GetDataDict 0098                       ComController@k 01EE  
             ??_UART_buff_modulo_inc 0021             __size_of_TMR1_Initialize 0022  
                           CRC8@data 001D                             ??_Update 002A  
                  __size_of_PotClear 00C8                    __size_of_Send_put 002E  
                           ??___wmul 0005               __end_of_ADC_Initialize 2150  
         __end_of_ComputeStorageData 1594                             ?_ADC_ISR 0001  
                           ??_memset 0023            __size_of_EnableSlavePower 00E4  
                        __pbssCOMRAM 002D        __size_of_EUSART1_Transmit_ISR 0032  
                      __pcstackBANK0 0060                        __pcstackBANK1 01E2  
                       ??_StartUp595 002C             __size_of_PWM4_Initialize 0014  
           __size_of_TMR2_Initialize 0014                             ?i2_Delay 0001  
                UART_buff_init@_this 0025                    i2writeRegisters@i 000C  
                    ?_UART_buff_init 0025             __size_of_UART_buff_flush 0062  
                    ?_UART_buff_size 001D         __size_of_EUSART1_Receive_ISR 001E  
                         ?_SetPin595 001D                        ??_receiveData 00C0  
                         sendData@CS 00B1                cobs_encode@search_len 0065  
             __size_of_UART_buff_get 0092               __size_of_UART_buff_put 011A  
             _PIN_MANAGER_Initialize 1A2A                    __size_of_sendData 01D4  
                       ?_PotSetpoint 0026                            __pintcode 0008  
                 __end_of_StartUp595 1BCA                      ?_ADC_Initialize 0001  
       ??_INTERRUPT_InterruptManager 000F                 i2UART_buff_get@_this 0007  
               __size_of_CoolingStop 0012                       i2SetPin595@Reg 0001  
                     i2SetPin595@pin 0003                             _BAUD1CON 000FB8  
           __size_of_TMR1_StartTimer 0004                       __size_of_Delay 004A  
                        _cobs_decode 0B00                          _cobs_encode 0CBE  
             sendData@DataTableIndex 006F                      ??_ComController 00BE  
           __size_of_DATAEE_ReadByte 0014          _COBS_ENCODE_DST_BUF_LEN_MAX 003D  
             FaultsCollector@sendVal 0021                 _INTERRUPT_Initialize 2228  
                 cobs_encode@src_len 0023                   cobs_encode@src_ptr 0021  
        processPowerRequest@powerSet 002C                       ___wmul@product 0005  
                           _LATCbits 000F8B                       _writeRegisters 18B0  
                UART_buff_size@_this 001D                            _registers 0100  
                           _IPR1bits 000F9F                             _PIE1bits 000F9D  
           __size_of_TMR2_StartTimer 0004                             i2u212_40 183C  
                           i2Delay@i 0006                             i2u214_40 1F4C  
                           i2u215_40 1F1E  __size_of_INTERRUPT_InterruptManager 00A4  
                           i2u303_47 1E16                             _PIR1bits 000F9E  
                           _RCONbits 000FD0                     __CFG_WDTPS$32768 000000  
                __end_of_receiveData 12D8                             _TMR1_ISR 1F00  
                       PotSetpoint@x 0062                         _input_buffer 013C  
               __size_of_ReadCurrent 0690                    ??_TMR1_Initialize 001D  
                   __size_of_ADC_ISR 0004           cobs_decode@dst_buf_end_ptr 0062  
                           i2_Update 2240                           _ADCON0bits 000FC2  
                         _ADCON2bits 000FC0                    ___wmul@multiplier 0001  
               i2UART_buff_put@_this 0007                     i2SetPin595@value 0005  
                           _Clear595 1ECC                        _UART_buff_get 178C  
                      _UART_buff_put 0F8E                    sendData@COBSArray 0074  
      cobs_encode@dst_code_write_ptr 0066                  _processPowerRequest 0E56  
           ??i2_UART_buff_modulo_inc 0005                          _INTCON2bits 000FF1  
                   __size_ofi2_Delay 004A                            copy_data0 1BDE  
              ?_INTERRUPT_Initialize 0001                   sendData@ComandByte 006D  
             __end_of_writeRegisters 192E                   PotSetpoint@new_pos 0064  
                      ??i2_SetPin595 0007                          ??_SetPin595 0023  
               EnableSlavePower@onof 0027             __size_ofi2_UART_buff_get 0092  
                  ??_TMR2_Initialize 001D                    ??_PWM4_Initialize 001D  
           __size_ofi2_UART_buff_put 011A                           _EECON1bits 000FA6  
                      ??_updateComms 002D                 __size_of_Receive_get 000E  
           __end_ofi2_writeRegisters 19AC                             _PotClear 1594  
                           __Hrparam 0000                             _Send_put 1FC4  
               __size_of_SetDataDict 0098                    ??_UART_buff_flush 0029  
         __end_of_PWM4_LoadDutyValue 1F94                             __Lrparam 0000  
                  _ADC_GetConversion 1F94                 ?_processPowerRequest 0001  
                 __CFG_BOREN$SBORDIS 000000                    __CFG_P2BMX$PORTD2 000000  
            ??_OSCILLATOR_Initialize 001D                   ?_ADC_GetConversion 0001  
        __size_of_EUSART1_Initialize 003C                      _FaultsCollector 1C28  
                   _EnableSlavePower 13D4                           _ANSELCbits 000F3A  
                     ?_UART_buff_get 0023                       ?_UART_buff_put 0023  
                        CRC8@extract 0021                  ??_ADC_GetConversion 0003  
                   GetDataDict@Error 0021                     SetDataDict@Error 0021  
                          sendData@i 00B9                            sendData@j 00B5  
                           __ptext10 1FC4                             __ptext11 0F8E  
                           __ptext20 21FA                             __ptext12 178C  
                           __ptext21 20DE                             __ptext13 201E  
                         _T1GCONbits 000FCC                             __ptext30 20BC  
                           __ptext22 12D8                             __ptext14 1D6A  
                           __ptext31 224A                             __ptext23 1594  
                           __ptext15 165C                             __ptext40 1B06  
                           __ptext32 21D2                             __ptext24 1F64  
                           __ptext16 16F4                             __ptext41 223A  
                           __ptext33 1A2A                             __ptext25 1C28  
                           __ptext17 217C                             __ptext42 1B68  
                           __ptext34 221A                             __ptext26 2192  
                           __ptext18 1AA4                             __ptext51 1F00  
                           __ptext43 1ECC                             __ptext35 2228  
                           __ptext27 2098                             __ptext19 0E56  
                           __ptext60 1F32                             __ptext52 00B0  
                           __ptext44 18B0                             __ptext36 1E90  
                           __ptext28 21BE                             __ptext61 21A8  
                           __ptext53 2240                             __ptext45 1DB4  
                           __ptext37 20FC                             __ptext29 2246  
                           __ptext62 181E                             __ptext54 192E  
                           __ptext46 13D4                             __ptext38 1FF2  
                           __ptext63 211A                             __ptext55 1DFE  
                           __ptext47 1C84                             __ptext39 2138  
                           __ptext64 10A8                             __ptext56 1CD2  
                           __ptext48 14B8                             __ptext65 2048  
                           __ptext57 1F94                             __ptext49 21E6  
                           __ptext66 224E                             __ptext58 19AC  
                           __ptext59 2072                    ??_TMR1_StartTimer 001D  
                      __size_of_CRC8 004A            GetDataDict@DataTableIndex 001D  
                        i2Delay@wait 0001              EUSART1_Receive_ISR@data 000C  
                    ?_writeRegisters 0001                        __size_of_main 004A  
                  cobs_encode@result 006A                          _receiveData 11C2  
                           _readwhat 003F                       _Transmit_stall 0041  
                           _sendData 092C                    ??_DATAEE_ReadByte 001D  
          __end_of_ADC_GetConversion 1FC4                    ?i2_UART_buff_size 0001  
                  sendData@DataTable 006E                ??_processPowerRequest 002A  
                         _RC1STAbits 000FAB                  __end_ofi2_SetPin595 1D20  
                           _prev_pos 0036                         _ProcessArray 01A6  
                 ??i2_UART_buff_size 0003                    writeRegisters@val 0026  
                           int$flags 0042                    ??_TMR2_StartTimer 001D  
                __end_of_updateComms 1E90   __end_of_INTERRUPT_InterruptManager 00AC  
         _INTERRUPT_InterruptManager 0008                 __size_of_PotSetpoint 00FC  
                _EUSART1_Receive_ISR 211A                    receiveData@result 01F3  
                      ??_GetPDUFault 001D                           _INTCONbits 000FF2  
                ComputeStorageData@i 0020                   _DataTableArrayFour 002D  
          UART_buff_modulo_inc@value 001D                     ??_UART_buff_init 0027  
                   ??_UART_buff_size 001F                   _ComputeStorageData 14B8  
             ??_INTERRUPT_Initialize 001D                             memset@p1 001D  
    __size_ofi2_UART_buff_modulo_inc 002A                        ??_ClearBuffer 0029  
                           intlevel2 0000                  cobs_decode@len_code 006A  
               ?_EUSART1_Receive_ISR 0001                        ??_GetDataDict 0021  
                ?_ComputeStorageData 0001              ?_PIN_MANAGER_Initialize 0001  
                       cobs_decode@i 0065                       SetPin595@value 0021  
       __end_of_EUSART1_Transmit_ISR 1F64                     ??_ADC_Initialize 001D  
                  sendData@SendArray 0092              __end_of_FaultsCollector 1C84  
                  ??i2_UART_buff_get 0009                    ??i2_UART_buff_put 000A  
                cobs_decode@src_byte 0064        __size_of_UART_buff_modulo_inc 002A  
                  _DataTableArrayOne 00EB                      ??_UART_buff_get 0025  
                    ??_UART_buff_put 0026                 ??_ComputeStorageData 001E  
                      ?_CoolingStart 0001                           _PDUStartup 1B06  
                       ?_cobs_decode 001D                         ?_cobs_encode 001D  
                  __CFG_T3CMX$PORTC0 000000                      writeRegisters@i 0028  
                 cobs_decode@src_len 0023                   cobs_decode@src_ptr 0021  
                __end_of_GetPDUFault 21A8                ??_EUSART1_Receive_ISR 000C  
     __end_of_PIN_MANAGER_Initialize 1AA4                          i2_SetPin595 1CD2  
                  __CFG_FOSC$INTIO67 000000                  __end_of_ClearBuffer 2192  
         __size_of_ADC_GetConversion 0030                      _TMR1_Initialize 20BC  
                        _updateComms 1E48  
