

Microchip Technology PIC18 LITE Macro Assembler V1.36 build -262312587 
                                                                                               Fri May 27 21:56:51 2016

Microchip Technology Omniscient Code Generator v1.36 (Free mode) build 201601150325
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    78                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    79  0000                     
    80                           	psect	idataCOMRAM
    81  001E86                     __pidataCOMRAM:
    82                           	opt stack 0
    83                           
    84                           ;initializer for _Transmit_stall
    85  001E86  01                 	db	1
    86  0000                     _ANSELA	set	3896
    87  0000                     _ANSELB	set	3897
    88  0000                     _ANSELC	set	3898
    89  0000                     _ANSELCbits	set	3898
    90  0000                     _ANSELD	set	3899
    91  0000                     _ANSELE	set	3900
    92  0000                     _CCP4CON	set	3927
    93  0000                     _CCP5CON	set	3924
    94  0000                     _CCPR4H	set	3929
    95  0000                     _CCPR4L	set	3928
    96  0000                     _CCPR5H	set	3926
    97  0000                     _CCPR5L	set	3925
    98  0000                     _CCPTMRS1bits	set	3912
    99  0000                     _TMR1	set	4046
   100  0000                     _ADCON0	set	4034
   101  0000                     _ADCON0bits	set	4034
   102  0000                     _ADCON1	set	4033
   103  0000                     _ADCON2	set	4032
   104  0000                     _ADRESH	set	4036
   105  0000                     _ADRESL	set	4035
   106  0000                     _BAUD1CON	set	4024
   107  0000                     _EEADR	set	4009
   108  0000                     _EECON1bits	set	4006
   109  0000                     _EECON2	set	4007
   110  0000                     _EEDATA	set	4008
   111  0000                     _INTCON2bits	set	4081
   112  0000                     _INTCONbits	set	4082
   113  0000                     _IPR1bits	set	3999
   114  0000                     _LATA	set	3977
   115  0000                     _LATB	set	3978
   116  0000                     _LATC	set	3979
   117  0000                     _LATCbits	set	3979
   118  0000                     _LATD	set	3980
   119  0000                     _LATE	set	3981
   120  0000                     _OSCCON	set	4051
   121  0000                     _OSCCON2	set	4050
   122  0000                     _OSCTUNE	set	3995
   123  0000                     _PIE1bits	set	3997
   124  0000                     _PIE4bits	set	3962
   125  0000                     _PIR1bits	set	3998
   126  0000                     _PIR4bits	set	3963
   127  0000                     _PR2	set	4027
   128  0000                     _RC1STA	set	4011
   129  0000                     _RC1STAbits	set	4011
   130  0000                     _RCONbits	set	4048
   131  0000                     _RCREG1	set	4014
   132  0000                     _SPBRG1	set	4015
   133  0000                     _SPBRGH1	set	4016
   134  0000                     _T1CON	set	4045
   135  0000                     _T1CONbits	set	4045
   136  0000                     _T1GCON	set	4044
   137  0000                     _T1GCONbits	set	4044
   138  0000                     _T2CON	set	4026
   139  0000                     _T2CONbits	set	4026
   140  0000                     _TABLAT	set	4085
   141  0000                     _TBLPTRH	set	4087
   142  0000                     _TBLPTRL	set	4086
   143  0000                     _TBLPTRU	set	4088
   144  0000                     _TMR1H	set	4047
   145  0000                     _TMR1L	set	4046
   146  0000                     _TMR2	set	4028
   147  0000                     _TRISA	set	3986
   148  0000                     _TRISB	set	3987
   149  0000                     _TRISC	set	3988
   150  0000                     _TRISCbits	set	3988
   151  0000                     _TRISD	set	3989
   152  0000                     _TRISE	set	3990
   153  0000                     _TX1STA	set	4012
   154  0000                     _TXREG1	set	4013
   155  0000                     _WPUB	set	3937
   156  0000                     _LATA3	set	31819
   157  0000                     _LATB0	set	31824
   158  0000                     _LATB3	set	31827
   159  0000                     _LATB4	set	31828
   160  0000                     _LATB5	set	31829
   161  0000                     _LATD4	set	31844
   162  0000                     _LATD5	set	31845
   163  0000                     _LATD6	set	31846
   164  0000                     _LATD7	set	31847
   165                           
   166                           ; #config settings
   167  0000                     
   168                           	psect	cinit
   169  0017EE                     __pcinit:
   170                           	opt stack 0
   171  0017EE                     start_initialization:
   172                           	opt stack 0
   173  0017EE                     __initialization:
   174                           	opt stack 0
   175                           
   176                           ; Clear objects allocated to BANK4 (206 bytes)
   177  0017EE  EE04  F000         	lfsr	0,__pbssBANK4
   178  0017F2  0ECE               	movlw	206
   179  0017F4                     clear_0:
   180  0017F4  6AEE               	clrf	postinc0,c
   181  0017F6  06E8               	decf	wreg,f,c
   182  0017F8  E1FD               	bnz	clear_0
   183                           
   184                           ; Clear objects allocated to BANK3 (206 bytes)
   185  0017FA  EE03  F000         	lfsr	0,__pbssBANK3
   186  0017FE  0ECE               	movlw	206
   187  001800                     clear_1:
   188  001800  6AEE               	clrf	postinc0,c
   189  001802  06E8               	decf	wreg,f,c
   190  001804  E1FD               	bnz	clear_1
   191                           
   192                           ; Clear objects allocated to BANK2 (200 bytes)
   193  001806  EE02  F000         	lfsr	0,__pbssBANK2
   194  00180A  0EC8               	movlw	200
   195  00180C                     clear_2:
   196  00180C  6AEE               	clrf	postinc0,c
   197  00180E  06E8               	decf	wreg,f,c
   198  001810  E1FD               	bnz	clear_2
   199                           
   200                           ; Clear objects allocated to BANK1 (254 bytes)
   201  001812  EE01  F000         	lfsr	0,__pbssBANK1
   202  001816  0EFE               	movlw	254
   203  001818                     clear_3:
   204  001818  6AEE               	clrf	postinc0,c
   205  00181A  06E8               	decf	wreg,f,c
   206  00181C  E1FD               	bnz	clear_3
   207                           
   208                           ; Clear objects allocated to BANK0 (113 bytes)
   209  00181E  EE00  F060         	lfsr	0,__pbssBANK0
   210  001822  0E71               	movlw	113
   211  001824                     clear_4:
   212  001824  6AEE               	clrf	postinc0,c
   213  001826  06E8               	decf	wreg,f,c
   214  001828  E1FD               	bnz	clear_4
   215                           
   216                           ; Clear objects allocated to COMRAM (30 bytes)
   217  00182A  EE00  F026         	lfsr	0,__pbssCOMRAM
   218  00182E  0E1E               	movlw	30
   219  001830                     clear_5:
   220  001830  6AEE               	clrf	postinc0,c
   221  001832  06E8               	decf	wreg,f,c
   222  001834  E1FD               	bnz	clear_5
   223                           
   224                           ; Initialize objects allocated to COMRAM (1 bytes)
   225                           ; load TBLPTR registers with __pidataCOMRAM
   226  001836  0E86               	movlw	low __pidataCOMRAM
   227  001838  6EF6               	movwf	tblptrl,c
   228  00183A  0E1E               	movlw	high __pidataCOMRAM
   229  00183C  6EF7               	movwf	tblptrh,c
   230  00183E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   231  001840  6EF8               	movwf	tblptru,c
   232  001842  0009               	tblrd		*+	;fetch initializer
   233  001844  CFF5 F044          	movff	tablat,__pdataCOMRAM
   234  001848                     end_of_initialization:
   235                           	opt stack 0
   236  001848                     __end_of__initialization:
   237                           	opt stack 0
   238  001848  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   239  00184A  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   240  00184C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   241  00184E  6EF8               	movwf	tblptru,c
   242  001850  0100               	movlb	0
   243  001852  EFD5  F00E         	goto	_main	;jump to C main() function
   244                           tblptru	equ	0xFF8
   245                           tblptrh	equ	0xFF7
   246                           tblptrl	equ	0xFF6
   247                           tablat	equ	0xFF5
   248                           postinc0	equ	0xFEE
   249                           wreg	equ	0xFE8
   250                           
   251                           	psect	bssCOMRAM
   252  000026                     __pbssCOMRAM:
   253                           	opt stack 0
   254  000026                     _group:
   255                           	opt stack 0
   256  000026                     	ds	2
   257  000028                     _prev_pos:
   258                           	opt stack 0
   259  000028                     	ds	2
   260  00002A                     _readwhat:
   261                           	opt stack 0
   262  00002A                     	ds	2
   263  00002C                     _receiveArrayAddress:
   264                           	opt stack 0
   265  00002C                     	ds	2
   266  00002E                     _sendStructAddress:
   267                           	opt stack 0
   268  00002E                     	ds	2
   269  000030                     _serial_available:
   270                           	opt stack 0
   271  000030                     	ds	2
   272  000032                     _serial_peek:
   273                           	opt stack 0
   274  000032                     	ds	2
   275  000034                     _serial_read:
   276                           	opt stack 0
   277  000034                     	ds	2
   278  000036                     _serial_write:
   279                           	opt stack 0
   280  000036                     	ds	2
   281  000038                     _timer1ReloadVal:
   282                           	opt stack 0
   283  000038                     	ds	2
   284  00003A                     updateComms@previousPowerState:
   285                           	opt stack 0
   286  00003A                     	ds	2
   287  00003C                     _AKNAKsend:
   288                           	opt stack 0
   289  00003C                     	ds	1
   290  00003D                     _calc_CS:
   291                           	opt stack 0
   292  00003D                     	ds	1
   293  00003E                     _maxDataAddress:
   294                           	opt stack 0
   295  00003E                     	ds	1
   296  00003F                     _moduleAddress:
   297                           	opt stack 0
   298  00003F                     	ds	1
   299  000040                     _returnAddress:
   300                           	opt stack 0
   301  000040                     	ds	1
   302  000041                     _rx_address:
   303                           	opt stack 0
   304  000041                     	ds	1
   305  000042                     _rx_array_inx:
   306                           	opt stack 0
   307  000042                     	ds	1
   308  000043                     _rx_len:
   309                           	opt stack 0
   310  000043                     	ds	1
   311                           tblptru	equ	0xFF8
   312                           tblptrh	equ	0xFF7
   313                           tblptrl	equ	0xFF6
   314                           tablat	equ	0xFF5
   315                           postinc0	equ	0xFEE
   316                           wreg	equ	0xFE8
   317                           
   318                           	psect	dataCOMRAM
   319  000044                     __pdataCOMRAM:
   320                           	opt stack 0
   321  000044                     _Transmit_stall:
   322                           	opt stack 0
   323  000044                     	ds	1
   324                           tblptru	equ	0xFF8
   325                           tblptrh	equ	0xFF7
   326                           tblptrl	equ	0xFF6
   327                           tablat	equ	0xFF5
   328                           postinc0	equ	0xFEE
   329                           wreg	equ	0xFE8
   330                           
   331                           	psect	bssBANK0
   332  000060                     __pbssBANK0:
   333                           	opt stack 0
   334  000060                     _Current:
   335                           	opt stack 0
   336  000060                     	ds	12
   337  00006C                     _CurrentADC:
   338                           	opt stack 0
   339  00006C                     	ds	12
   340  000078                     _Currentcomp:
   341                           	opt stack 0
   342  000078                     	ds	12
   343  000084                     _data:
   344                           	opt stack 0
   345  000084                     	ds	12
   346  000090                     _addressErrorCounter:
   347                           	opt stack 0
   348  000090                     	ds	2
   349  000092                     _alignErrorCounter:
   350                           	opt stack 0
   351  000092                     	ds	2
   352  000094                     _crcErrorCounter:
   353                           	opt stack 0
   354  000094                     	ds	2
   355  000096                     _dataAdressErrorCounter:
   356                           	opt stack 0
   357  000096                     	ds	2
   358  000098                     _receiveArray:
   359                           	opt stack 0
   360  000098                     	ds	40
   361  0000C0                     _crc_buffer:
   362                           	opt stack 0
   363  0000C0                     	ds	17
   364                           tblptru	equ	0xFF8
   365                           tblptrh	equ	0xFF7
   366                           tblptrl	equ	0xFF6
   367                           tablat	equ	0xFF5
   368                           postinc0	equ	0xFEE
   369                           wreg	equ	0xFE8
   370                           
   371                           	psect	bssBANK1
   372  000100                     __pbssBANK1:
   373                           	opt stack 0
   374  000100                     _registers:
   375                           	opt stack 0
   376  000100                     	ds	48
   377  000130                     _ring_buffer:
   378                           	opt stack 0
   379  000130                     	ds	206
   380                           tblptru	equ	0xFF8
   381                           tblptrh	equ	0xFF7
   382                           tblptrl	equ	0xFF6
   383                           tablat	equ	0xFF5
   384                           postinc0	equ	0xFEE
   385                           wreg	equ	0xFE8
   386                           
   387                           	psect	bssBANK2
   388  000200                     __pbssBANK2:
   389                           	opt stack 0
   390  000200                     _rx_buffer:
   391                           	opt stack 0
   392  000200                     	ds	200
   393                           tblptru	equ	0xFF8
   394                           tblptrh	equ	0xFF7
   395                           tblptrl	equ	0xFF6
   396                           tablat	equ	0xFF5
   397                           postinc0	equ	0xFEE
   398                           wreg	equ	0xFE8
   399                           
   400                           	psect	bssBANK3
   401  000300                     __pbssBANK3:
   402                           	opt stack 0
   403  000300                     _input_buffer:
   404                           	opt stack 0
   405  000300                     	ds	206
   406                           tblptru	equ	0xFF8
   407                           tblptrh	equ	0xFF7
   408                           tblptrl	equ	0xFF6
   409                           tablat	equ	0xFF5
   410                           postinc0	equ	0xFEE
   411                           wreg	equ	0xFE8
   412                           
   413                           	psect	bssBANK4
   414  000400                     __pbssBANK4:
   415                           	opt stack 0
   416  000400                     _output_buffer:
   417                           	opt stack 0
   418  000400                     	ds	206
   419                           tblptru	equ	0xFF8
   420                           tblptrh	equ	0xFF7
   421                           tblptrl	equ	0xFF6
   422                           tablat	equ	0xFF5
   423                           postinc0	equ	0xFEE
   424                           wreg	equ	0xFE8
   425                           
   426                           	psect	cstackBANK0
   427  0000D1                     __pcstackBANK0:
   428                           	opt stack 0
   429  0000D1                     ??_FastTransfer_buffer_put:
   430  0000D1                     ??_PotSetpoint:
   431  0000D1                     Send_put@_data:
   432                           	opt stack 0
   433  0000D1                     begin@ptr:
   434                           	opt stack 0
   435  0000D1                     FastTransfer_buffer_flush@_this:
   436                           	opt stack 0
   437  0000D1                     crcBufS_get@wantedTime:
   438                           	opt stack 0
   439  0000D1                     EnableSlavePower@onof:
   440                           	opt stack 0
   441  0000D1                     writeRegisters@val:
   442                           	opt stack 0
   443                           
   444                           ; 2 bytes @ 0x0
   445  0000D1                     	ds	2
   446  0000D3                     begin@maxSize:
   447                           	opt stack 0
   448  0000D3                     CRCcheck@SentCRC:
   449                           	opt stack 0
   450  0000D3                     ToSend@what:
   451                           	opt stack 0
   452  0000D3                     FastTransfer_buffer_flush@clearBuffer:
   453                           	opt stack 0
   454  0000D3                     writeRegisters@i:
   455                           	opt stack 0
   456  0000D3                     PotSetpoint@set_point:
   457                           	opt stack 0
   458                           
   459                           ; 2 bytes @ 0x2
   460  0000D3                     	ds	1
   461  0000D4                     begin@givenAddress:
   462                           	opt stack 0
   463  0000D4                     CRCcheck@calculatedCRC:
   464                           	opt stack 0
   465                           
   466                           ; 1 bytes @ 0x3
   467  0000D4                     	ds	1
   468  0000D5                     ??_sendData:
   469  0000D5                     begin@error:
   470                           	opt stack 0
   471  0000D5                     ToSend@where:
   472                           	opt stack 0
   473  0000D5                     processPowerRequest@powerSet:
   474                           	opt stack 0
   475  0000D5                     PotSetpoint@x:
   476                           	opt stack 0
   477  0000D5                     CRCcheck@arrayHolder:
   478                           	opt stack 0
   479                           
   480                           ; 3 bytes @ 0x4
   481  0000D5                     	ds	1
   482  0000D6                     sendData@whereToSend:
   483                           	opt stack 0
   484  0000D6                     begin@stufftosend:
   485                           	opt stack 0
   486                           
   487                           ; 2 bytes @ 0x5
   488  0000D6                     	ds	1
   489  0000D7                     sendData@CS:
   490                           	opt stack 0
   491  0000D7                     PotSetpoint@new_pos:
   492                           	opt stack 0
   493                           
   494                           ; 2 bytes @ 0x6
   495  0000D7                     	ds	1
   496  0000D8                     begin@stufftoreceive:
   497                           	opt stack 0
   498  0000D8                     sendData@i:
   499                           	opt stack 0
   500  0000D8                     CRCcheck@rt:
   501                           	opt stack 0
   502                           
   503                           ; 2 bytes @ 0x7
   504  0000D8                     	ds	2
   505  0000DA                     ??_receiveData:
   506  0000DA                     begin@stuffavailable:
   507                           	opt stack 0
   508                           
   509                           ; 2 bytes @ 0x9
   510  0000DA                     	ds	2
   511  0000DC                     begin@stuffpeek:
   512                           	opt stack 0
   513                           
   514                           ; 2 bytes @ 0xB
   515  0000DC                     	ds	4
   516  0000E0                     receiveData@holder:
   517                           	opt stack 0
   518                           
   519                           ; 3 bytes @ 0xF
   520  0000E0                     	ds	3
   521  0000E3                     receiveData@holder_1382:
   522                           	opt stack 0
   523                           
   524                           ; 3 bytes @ 0x12
   525  0000E3                     	ds	3
   526  0000E6                     receiveData@crcHolder:
   527                           	opt stack 0
   528                           
   529                           ; 1 bytes @ 0x15
   530  0000E6                     	ds	1
   531  0000E7                     receiveData@crcHolder_1383:
   532                           	opt stack 0
   533                           
   534                           ; 1 bytes @ 0x16
   535  0000E7                     	ds	1
   536  0000E8                     receiveData@u:
   537                           	opt stack 0
   538                           
   539                           ; 2 bytes @ 0x17
   540  0000E8                     	ds	2
   541  0000EA                     receiveData@r:
   542                           	opt stack 0
   543                           
   544                           ; 2 bytes @ 0x19
   545  0000EA                     	ds	2
   546                           tblptru	equ	0xFF8
   547                           tblptrh	equ	0xFF7
   548                           tblptrl	equ	0xFF6
   549                           tablat	equ	0xFF5
   550                           postinc0	equ	0xFEE
   551                           wreg	equ	0xFE8
   552                           
   553                           	psect	cstackCOMRAM
   554  000001                     __pcstackCOMRAM:
   555                           	opt stack 0
   556  000001                     ?i2_UART_buff_size:
   557                           	opt stack 0
   558  000001                     ?i2_UART_buff_modulo_inc:
   559                           	opt stack 0
   560  000001                     i2UART_buff_size@_this:
   561                           	opt stack 0
   562  000001                     i2UART_buff_modulo_inc@value:
   563                           	opt stack 0
   564                           
   565                           ; 2 bytes @ 0x0
   566  000001                     	ds	2
   567  000003                     i2UART_buff_modulo_inc@modulus:
   568                           	opt stack 0
   569                           
   570                           ; 2 bytes @ 0x2
   571  000003                     	ds	2
   572  000005                     i2UART_buff_modulo_inc@my_value:
   573                           	opt stack 0
   574                           
   575                           ; 2 bytes @ 0x4
   576  000005                     	ds	2
   577  000007                     i2UART_buff_put@_this:
   578                           	opt stack 0
   579  000007                     i2UART_buff_get@_this:
   580                           	opt stack 0
   581                           
   582                           ; 2 bytes @ 0x6
   583  000007                     	ds	2
   584  000009                     ??i2_UART_buff_get:
   585  000009                     i2UART_buff_put@c:
   586                           	opt stack 0
   587                           
   588                           ; 1 bytes @ 0x8
   589  000009                     	ds	1
   590  00000A                     ??i2_UART_buff_put:
   591                           
   592                           ; 1 bytes @ 0x9
   593  00000A                     	ds	1
   594  00000B                     i2UART_buff_get@c:
   595                           	opt stack 0
   596                           
   597                           ; 1 bytes @ 0xA
   598  00000B                     	ds	1
   599  00000C                     EUSART1_Receive_ISR@data:
   600                           	opt stack 0
   601                           
   602                           ; 1 bytes @ 0xB
   603  00000C                     	ds	1
   604  00000D                     ??_INTERRUPT_InterruptManager:
   605                           
   606                           ; 1 bytes @ 0xC
   607  00000D                     	ds	14
   608  00001B                     ?_FastTransfer_buffer_modulo_inc:
   609                           	opt stack 0
   610  00001B                     ?_UART_buff_modulo_inc:
   611                           	opt stack 0
   612  00001B                     ?_UART_buff_size:
   613                           	opt stack 0
   614  00001B                     ?___awdiv:
   615                           	opt stack 0
   616  00001B                     DATAEE_ReadByte@bAdd:
   617                           	opt stack 0
   618  00001B                     PWM4_LoadDutyValue@dutyValue:
   619                           	opt stack 0
   620  00001B                     CRC8@data:
   621                           	opt stack 0
   622  00001B                     FastTransfer_buffer_modulo_inc@value:
   623                           	opt stack 0
   624  00001B                     crcBufS_put@_this:
   625                           	opt stack 0
   626  00001B                     crcBufS_status_put@_this:
   627                           	opt stack 0
   628  00001B                     crcBufS_get@_this:
   629                           	opt stack 0
   630  00001B                     SetPin595@Reg:
   631                           	opt stack 0
   632  00001B                     UART_buff_size@_this:
   633                           	opt stack 0
   634  00001B                     UART_buff_modulo_inc@value:
   635                           	opt stack 0
   636  00001B                     UART_buff_peek@_this:
   637                           	opt stack 0
   638  00001B                     ___awdiv@dividend:
   639                           	opt stack 0
   640  00001B                     memset@p1:
   641                           	opt stack 0
   642  00001B                     Delay@wait:
   643                           	opt stack 0
   644                           
   645                           ; 4 bytes @ 0x1A
   646  00001B                     	ds	1
   647  00001C                     ??_ComputeStorageData:
   648                           
   649                           ; 1 bytes @ 0x1B
   650  00001C                     	ds	1
   651  00001D                     ??_PWM4_LoadDutyValue:
   652  00001D                     ??_UART_buff_peek:
   653  00001D                     ?_Receive_available:
   654                           	opt stack 0
   655  00001D                     CRC8@len:
   656                           	opt stack 0
   657  00001D                     crcBufS_put@address:
   658                           	opt stack 0
   659  00001D                     crcBufS_status_put@time:
   660                           	opt stack 0
   661  00001D                     crcBufS_get@time:
   662                           	opt stack 0
   663  00001D                     FastTransfer_buffer_modulo_inc@modulus:
   664                           	opt stack 0
   665  00001D                     SetPin595@pin:
   666                           	opt stack 0
   667  00001D                     UART_buff_modulo_inc@modulus:
   668                           	opt stack 0
   669  00001D                     ___awdiv@divisor:
   670                           	opt stack 0
   671  00001D                     memset@c:
   672                           	opt stack 0
   673                           
   674                           ; 2 bytes @ 0x1C
   675  00001D                     	ds	1
   676  00001E                     CRC8@sum:
   677                           	opt stack 0
   678  00001E                     crcBufS_put@oldCRC:
   679                           	opt stack 0
   680  00001E                     crcBufS_status_put@status:
   681                           	opt stack 0
   682  00001E                     crcBufS_get@space:
   683                           	opt stack 0
   684  00001E                     ComputeStorageData@i:
   685                           	opt stack 0
   686                           
   687                           ; 2 bytes @ 0x1D
   688  00001E                     	ds	1
   689  00001F                     ??_Delay:
   690  00001F                     ??_crcBufS_get:
   691  00001F                     ??_crcBufS_status_put:
   692  00001F                     CRC8@extract:
   693                           	opt stack 0
   694  00001F                     crcBufS_put@status:
   695                           	opt stack 0
   696  00001F                     ___awdiv@counter:
   697                           	opt stack 0
   698  00001F                     FastTransfer_buffer_modulo_inc@my_value:
   699                           	opt stack 0
   700  00001F                     SetPin595@value:
   701                           	opt stack 0
   702  00001F                     UART_buff_modulo_inc@my_value:
   703                           	opt stack 0
   704  00001F                     memset@n:
   705                           	opt stack 0
   706                           
   707                           ; 2 bytes @ 0x1E
   708  00001F                     	ds	1
   709  000020                     ??_crcBufS_put:
   710  000020                     CRC8@tempI:
   711                           	opt stack 0
   712  000020                     ___awdiv@sign:
   713                           	opt stack 0
   714  000020                     Delay@i:
   715                           	opt stack 0
   716                           
   717                           ; 4 bytes @ 0x1F
   718  000020                     	ds	1
   719  000021                     ??_SetPin595:
   720  000021                     CRC8@crc:
   721                           	opt stack 0
   722  000021                     FastTransfer_buffer_put@_this:
   723                           	opt stack 0
   724  000021                     UART_buff_put@_this:
   725                           	opt stack 0
   726  000021                     UART_buff_get@_this:
   727                           	opt stack 0
   728  000021                     ___awdiv@quotient:
   729                           	opt stack 0
   730  000021                     memset@p:
   731                           	opt stack 0
   732                           
   733                           ; 2 bytes @ 0x20
   734  000021                     	ds	2
   735  000023                     ??_UART_buff_get:
   736  000023                     FastTransfer_buffer_put@towhere:
   737                           	opt stack 0
   738  000023                     UART_buff_put@c:
   739                           	opt stack 0
   740  000023                     crcBufS_status_put@wantedTime:
   741                           	opt stack 0
   742  000023                     UART_buff_init@_this:
   743                           	opt stack 0
   744                           
   745                           ; 2 bytes @ 0x22
   746  000023                     	ds	1
   747  000024                     ??_UART_buff_put:
   748  000024                     FastTransfer_buffer_put@towhat:
   749                           	opt stack 0
   750  000024                     Clear595@i:
   751                           	opt stack 0
   752  000024                     PotSetpoint@new_point:
   753                           	opt stack 0
   754  000024                     PotClear@x:
   755                           	opt stack 0
   756                           
   757                           ; 2 bytes @ 0x23
   758  000024                     	ds	1
   759  000025                     EnableSlavePower@slave:
   760                           	opt stack 0
   761  000025                     UART_buff_get@c:
   762                           	opt stack 0
   763                           
   764                           ; 1 bytes @ 0x24
   765  000025                     	ds	1
   766  000026                     tblptru	equ	0xFF8
   767                           tblptrh	equ	0xFF7
   768                           tblptrl	equ	0xFF6
   769                           tablat	equ	0xFF5
   770                           postinc0	equ	0xFEE
   771                           wreg	equ	0xFE8
   772                           
   773                           ; 1 bytes @ 0x25
   774 ;;
   775 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   776 ;;
   777 ;; *************** function _main *****************
   778 ;; Defined at:
   779 ;;		line 9 in file "main.c"
   780 ;; Parameters:    Size  Location     Type
   781 ;;		None
   782 ;; Auto vars:     Size  Location     Type
   783 ;;		None
   784 ;; Return value:  Size  Location     Type
   785 ;;                  1    wreg      void 
   786 ;; Registers used:
   787 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
   788 ;; Tracked objects:
   789 ;;		On entry : 0/0
   790 ;;		On exit  : 0/0
   791 ;;		Unchanged: 0/0
   792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   793 ;;      Params:         0       0       0       0       0       0       0
   794 ;;      Locals:         0       0       0       0       0       0       0
   795 ;;      Temps:          0       0       0       0       0       0       0
   796 ;;      Totals:         0       0       0       0       0       0       0
   797 ;;Total ram usage:        0 bytes
   798 ;; Hardware stack levels required when called:   10
   799 ;; This function calls:
   800 ;;		_CoolingStart
   801 ;;		_PDUStartup
   802 ;;		_SYSTEM_Initialize
   803 ;;		_updateComms
   804 ;; This function is called by:
   805 ;;		Startup code after reset
   806 ;; This function uses a non-reentrant model
   807 ;;
   808                           
   809                           	psect	text0
   810  001DAA                     __ptext0:
   811                           	opt stack 0
   812  001DAA                     _main:
   813                           	opt stack 21
   814                           
   815                           ;main.c: 11: SYSTEM_Initialize();
   816                           
   817                           ;incstack = 0
   818  001DAA  EC88  F00B         	call	_SYSTEM_Initialize	;wreg free
   819                           
   820                           ;main.c: 12: PDUStartup();
   821  001DAE  EC8F  F00C         	call	_PDUStartup	;wreg free
   822                           
   823                           ;main.c: 13: CoolingStart();
   824  001DB2  ECAA  F00E         	call	_CoolingStart	;wreg free
   825                           
   826                           ;main.c: 31: (INTCONbits.GIE = 1);
   827  001DB6  8EF2               	bsf	intcon,7,c	;volatile
   828                           
   829                           ;main.c: 34: (INTCONbits.PEIE = 1);
   830  001DB8  8CF2               	bsf	intcon,6,c	;volatile
   831                           
   832                           ;main.c: 42: LATCbits.LATC5 = 0;
   833  001DBA  9A8B               	bcf	3979,5,c	;volatile
   834  001DBC                     l4385:
   835                           
   836                           ;main.c: 50: updateComms();
   837  001DBC  ECA4  F00D         	call	_updateComms	;wreg free
   838  001DC0  D7FD               	goto	l4385
   839  001DC2                     __end_of_main:
   840                           	opt stack 0
   841                           tblptru	equ	0xFF8
   842                           tblptrh	equ	0xFF7
   843                           tblptrl	equ	0xFF6
   844                           tablat	equ	0xFF5
   845                           intcon	equ	0xFF2
   846                           postinc0	equ	0xFEE
   847                           wreg	equ	0xFE8
   848                           
   849 ;; *************** function _updateComms *****************
   850 ;; Defined at:
   851 ;;		line 21 in file "Communications.c"
   852 ;; Parameters:    Size  Location     Type
   853 ;;		None
   854 ;; Auto vars:     Size  Location     Type
   855 ;;		None
   856 ;; Return value:  Size  Location     Type
   857 ;;                  1    wreg      void 
   858 ;; Registers used:
   859 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
   860 ;; Tracked objects:
   861 ;;		On entry : 0/0
   862 ;;		On exit  : 0/0
   863 ;;		Unchanged: 0/0
   864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   865 ;;      Params:         0       0       0       0       0       0       0
   866 ;;      Locals:         0       0       0       0       0       0       0
   867 ;;      Temps:          0       0       0       0       0       0       0
   868 ;;      Totals:         0       0       0       0       0       0       0
   869 ;;Total ram usage:        0 bytes
   870 ;; Hardware stack levels used:    1
   871 ;; Hardware stack levels required when called:    9
   872 ;; This function calls:
   873 ;;		_processPowerRequest
   874 ;;		_receiveData
   875 ;;		_respondECU
   876 ;; This function is called by:
   877 ;;		_main
   878 ;; This function uses a non-reentrant model
   879 ;;
   880                           
   881                           	psect	text1
   882  001B48                     __ptext1:
   883                           	opt stack 0
   884  001B48                     _updateComms:
   885                           	opt stack 21
   886                           
   887                           ;Communications.c: 22: if (receiveData()) {
   888                           
   889                           ;incstack = 0
   890  001B48  EC52  F000         	call	_receiveData	;wreg free
   891  001B4C  0900               	iorlw	0
   892  001B4E  B4D8               	btfsc	status,2,c
   893  001B50  0012               	return	
   894                           
   895                           ;Communications.c: 23: static int previousPowerState;
   896                           ;Communications.c: 24: if (previousPowerState != receiveArray[1]) {
   897  001B52  503A               	movf	updateComms@previousPowerState,w,c
   898  001B54  0100               	movlb	0	; () banked
   899  001B56  199A               	xorwf	(_receiveArray+2)& (0+255),w,b	;volatile
   900  001B58  E105               	bnz	u4000
   901  001B5A  503B               	movf	updateComms@previousPowerState+1,w,c
   902  001B5C  0100               	movlb	0	; () banked
   903  001B5E  199B               	xorwf	(_receiveArray+3)& (0+255),w,b	;volatile
   904  001B60  B4D8               	btfsc	status,2,c
   905  001B62  D00A               	goto	l4257
   906  001B64                     u4000:
   907                           
   908                           ; BSR set to: 0
   909                           ;Communications.c: 25: previousPowerState = receiveArray[1];
   910  001B64  C09A  F03A         	movff	_receiveArray+2,updateComms@previousPowerState	;volatile
   911  001B68  C09B  F03B         	movff	_receiveArray+3,updateComms@previousPowerState+1	;volatile
   912                           
   913                           ; BSR set to: 0
   914                           ;Communications.c: 26: processPowerRequest(previousPowerState);
   915  001B6C  C03A  F0D5         	movff	updateComms@previousPowerState,processPowerRequest@powerSet
   916  001B70  C03B  F0D6         	movff	updateComms@previousPowerState+1,processPowerRequest@powerSet+1
   917  001B74  ECA0  F009         	call	_processPowerRequest	;wreg free
   918  001B78                     l4257:
   919                           
   920                           ;Communications.c: 27: }
   921                           ;Communications.c: 28: respondECU();
   922  001B78  ECEB  F00C         	call	_respondECU	;wreg free
   923  001B7C  0012               	return	
   924  001B7E                     __end_of_updateComms:
   925                           	opt stack 0
   926                           tblptru	equ	0xFF8
   927                           tblptrh	equ	0xFF7
   928                           tblptrl	equ	0xFF6
   929                           tablat	equ	0xFF5
   930                           intcon	equ	0xFF2
   931                           postinc0	equ	0xFEE
   932                           wreg	equ	0xFE8
   933                           status	equ	0xFD8
   934                           
   935 ;; *************** function _respondECU *****************
   936 ;; Defined at:
   937 ;;		line 48 in file "Communications.c"
   938 ;; Parameters:    Size  Location     Type
   939 ;;		None
   940 ;; Auto vars:     Size  Location     Type
   941 ;;		None
   942 ;; Return value:  Size  Location     Type
   943 ;;                  1    wreg      void 
   944 ;; Registers used:
   945 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
   946 ;; Tracked objects:
   947 ;;		On entry : 0/0
   948 ;;		On exit  : 0/0
   949 ;;		Unchanged: 0/0
   950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   951 ;;      Params:         0       0       0       0       0       0       0
   952 ;;      Locals:         0       0       0       0       0       0       0
   953 ;;      Temps:          0       0       0       0       0       0       0
   954 ;;      Totals:         0       0       0       0       0       0       0
   955 ;;Total ram usage:        0 bytes
   956 ;; Hardware stack levels used:    1
   957 ;; Hardware stack levels required when called:    8
   958 ;; This function calls:
   959 ;;		_Delay
   960 ;;		_ToSend
   961 ;;		_sendData
   962 ;; This function is called by:
   963 ;;		_updateComms
   964 ;; This function uses a non-reentrant model
   965 ;;
   966                           
   967                           	psect	text2
   968  0019D6                     __ptext2:
   969                           	opt stack 0
   970  0019D6                     _respondECU:
   971                           	opt stack 21
   972                           
   973                           ;Communications.c: 49: LATCbits.LATC5 = 1;
   974                           
   975                           ;incstack = 0
   976  0019D6  8A8B               	bsf	3979,5,c	;volatile
   977                           
   978                           ;Communications.c: 50: ToSend(0, 5);
   979  0019D8  0E00               	movlw	0
   980  0019DA  0100               	movlb	0	; () banked
   981  0019DC  6FD4               	movwf	(ToSend@what+1)& (0+255),b
   982  0019DE  0E05               	movlw	5
   983  0019E0  6FD3               	movwf	ToSend@what& (0+255),b
   984  0019E2  0E00               	movlw	0
   985  0019E4  EC8C  F00E         	call	_ToSend
   986                           
   987                           ;Communications.c: 51: ToSend(9, 5);
   988  0019E8  0E00               	movlw	0
   989  0019EA  0100               	movlb	0	; () banked
   990  0019EC  6FD4               	movwf	(ToSend@what+1)& (0+255),b
   991  0019EE  0E05               	movlw	5
   992  0019F0  6FD3               	movwf	ToSend@what& (0+255),b
   993  0019F2  0E09               	movlw	9
   994  0019F4  EC8C  F00E         	call	_ToSend
   995                           
   996                           ;Communications.c: 52: Delay(5);
   997  0019F8  0E05               	movlw	5
   998  0019FA  6E1B               	movwf	Delay@wait,c
   999  0019FC  0E00               	movlw	0
  1000  0019FE  6E1C               	movwf	Delay@wait+1,c
  1001  001A00  0E00               	movlw	0
  1002  001A02  6E1D               	movwf	Delay@wait+2,c
  1003  001A04  0E00               	movlw	0
  1004  001A06  6E1E               	movwf	Delay@wait+3,c
  1005  001A08  EC61  F00D         	call	_Delay	;wreg free
  1006                           
  1007                           ;Communications.c: 54: sendData(1);
  1008  001A0C  0E01               	movlw	1
  1009  001A0E  EC12  F005         	call	_sendData
  1010                           
  1011                           ;Communications.c: 55: Delay(3);
  1012  001A12  0E03               	movlw	3
  1013  001A14  6E1B               	movwf	Delay@wait,c
  1014  001A16  0E00               	movlw	0
  1015  001A18  6E1C               	movwf	Delay@wait+1,c
  1016  001A1A  0E00               	movlw	0
  1017  001A1C  6E1D               	movwf	Delay@wait+2,c
  1018  001A1E  0E00               	movlw	0
  1019  001A20  6E1E               	movwf	Delay@wait+3,c
  1020  001A22  EC61  F00D         	call	_Delay	;wreg free
  1021                           
  1022                           ;Communications.c: 56: LATCbits.LATC5 = 0;
  1023  001A26  9A8B               	bcf	3979,5,c	;volatile
  1024  001A28  0012               	return		;funcret
  1025  001A2A                     __end_of_respondECU:
  1026                           	opt stack 0
  1027                           tblptru	equ	0xFF8
  1028                           tblptrh	equ	0xFF7
  1029                           tblptrl	equ	0xFF6
  1030                           tablat	equ	0xFF5
  1031                           intcon	equ	0xFF2
  1032                           postinc0	equ	0xFEE
  1033                           wreg	equ	0xFE8
  1034                           status	equ	0xFD8
  1035                           
  1036 ;; *************** function _sendData *****************
  1037 ;; Defined at:
  1038 ;;		line 53 in file "FastTransfer.c"
  1039 ;; Parameters:    Size  Location     Type
  1040 ;;  whereToSend     1    wreg     unsigned char 
  1041 ;; Auto vars:     Size  Location     Type
  1042 ;;  whereToSend     1    5[BANK0 ] unsigned char 
  1043 ;;  i               2    7[BANK0 ] int 
  1044 ;;  CS              1    6[BANK0 ] unsigned char 
  1045 ;; Return value:  Size  Location     Type
  1046 ;;                  1    wreg      void 
  1047 ;; Registers used:
  1048 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
  1049 ;; Tracked objects:
  1050 ;;		On entry : 0/0
  1051 ;;		On exit  : 0/0
  1052 ;;		Unchanged: 0/0
  1053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1054 ;;      Params:         0       0       0       0       0       0       0
  1055 ;;      Locals:         0       4       0       0       0       0       0
  1056 ;;      Temps:          0       1       0       0       0       0       0
  1057 ;;      Totals:         0       5       0       0       0       0       0
  1058 ;;Total ram usage:        5 bytes
  1059 ;; Hardware stack levels used:    1
  1060 ;; Hardware stack levels required when called:    7
  1061 ;; This function calls:
  1062 ;;		Absolute function
  1063 ;;		_CRC8
  1064 ;;		_FastTransfer_buffer_flush
  1065 ;;		_Send_put
  1066 ;;		_crcBufS_put
  1067 ;; This function is called by:
  1068 ;;		_respondECU
  1069 ;; This function uses a non-reentrant model
  1070 ;;
  1071                           
  1072                           	psect	text3
  1073  000A24                     __ptext3:
  1074                           	opt stack 0
  1075  000A24                     _sendData:
  1076                           	opt stack 21
  1077                           
  1078                           ;incstack = 0
  1079                           ;sendData@whereToSend stored from wreg
  1080  000A24  0100               	movlb	0	; () banked
  1081  000A26  6FD6               	movwf	sendData@whereToSend& (0+255),b
  1082                           
  1083                           ;FastTransfer.c: 56: unsigned char CS = CRC8(sendStructAddress, ring_buffer.count);
  1084  000A28  C02E  F01B         	movff	_sendStructAddress,CRC8@data
  1085  000A2C  C02F  F01C         	movff	_sendStructAddress+1,CRC8@data+1
  1086  000A30  C1FC  F01D         	movff	_ring_buffer+204,CRC8@len
  1087  000A34  EC3C  F00D         	call	_CRC8	;wreg free
  1088  000A38  0100               	movlb	0	; () banked
  1089  000A3A  6FD7               	movwf	sendData@CS& (0+255),b
  1090                           
  1091                           ; BSR set to: 0
  1092                           ;FastTransfer.c: 58: serial_write(0x06);
  1093  000A3C  D801               	call	u3158
  1094  000A3E  D00B               	goto	l3851
  1095  000A40                     u3158:
  1096  000A40  0005               	push	
  1097  000A42  6EFA               	movwf	pclath,c
  1098  000A44  5036               	movf	_serial_write,w,c
  1099  000A46  6EFD               	movwf	tosl,c
  1100  000A48  5037               	movf	_serial_write+1,w,c
  1101  000A4A  6EFE               	movwf	tosh,c
  1102  000A4C  50F8               	movf	tblptru,w,c
  1103  000A4E  6EFF               	movwf	tosu,c
  1104  000A50  50FA               	movf	pclath,w,c
  1105  000A52  0E06               	movlw	6
  1106  000A54  0012               	return		;indir
  1107  000A56                     l3851:
  1108                           
  1109                           ;FastTransfer.c: 59: serial_write(0x85);
  1110  000A56  D801               	call	u3168
  1111  000A58  D00B               	goto	l3853
  1112  000A5A                     u3168:
  1113  000A5A  0005               	push	
  1114  000A5C  6EFA               	movwf	pclath,c
  1115  000A5E  5036               	movf	_serial_write,w,c
  1116  000A60  6EFD               	movwf	tosl,c
  1117  000A62  5037               	movf	_serial_write+1,w,c
  1118  000A64  6EFE               	movwf	tosh,c
  1119  000A66  50F8               	movf	tblptru,w,c
  1120  000A68  6EFF               	movwf	tosu,c
  1121  000A6A  50FA               	movf	pclath,w,c
  1122  000A6C  0E85               	movlw	133
  1123  000A6E  0012               	return		;indir
  1124  000A70                     l3853:
  1125                           
  1126                           ;FastTransfer.c: 60: serial_write(whereToSend);
  1127  000A70  D801               	call	u3178
  1128  000A72  D00C               	goto	l3855
  1129  000A74                     u3178:
  1130  000A74  0005               	push	
  1131  000A76  6EFA               	movwf	pclath,c
  1132  000A78  5036               	movf	_serial_write,w,c
  1133  000A7A  6EFD               	movwf	tosl,c
  1134  000A7C  5037               	movf	_serial_write+1,w,c
  1135  000A7E  6EFE               	movwf	tosh,c
  1136  000A80  50F8               	movf	tblptru,w,c
  1137  000A82  6EFF               	movwf	tosu,c
  1138  000A84  50FA               	movf	pclath,w,c
  1139  000A86  0100               	movlb	0	; () banked
  1140  000A88  51D6               	movf	sendData@whereToSend& (0+255),w,b
  1141  000A8A  0012               	return		;indir
  1142  000A8C                     l3855:
  1143                           
  1144                           ;FastTransfer.c: 61: serial_write(moduleAddress);
  1145  000A8C  D801               	call	u3188
  1146  000A8E  D00B               	goto	l3857
  1147  000A90                     u3188:
  1148  000A90  0005               	push	
  1149  000A92  6EFA               	movwf	pclath,c
  1150  000A94  5036               	movf	_serial_write,w,c
  1151  000A96  6EFD               	movwf	tosl,c
  1152  000A98  5037               	movf	_serial_write+1,w,c
  1153  000A9A  6EFE               	movwf	tosh,c
  1154  000A9C  50F8               	movf	tblptru,w,c
  1155  000A9E  6EFF               	movwf	tosu,c
  1156  000AA0  50FA               	movf	pclath,w,c
  1157  000AA2  503F               	movf	_moduleAddress,w,c
  1158  000AA4  0012               	return		;indir
  1159  000AA6                     l3857:
  1160                           
  1161                           ;FastTransfer.c: 62: serial_write(ring_buffer.count);
  1162  000AA6  D801               	call	u3198
  1163  000AA8  D00C               	goto	l3859
  1164  000AAA                     u3198:
  1165  000AAA  0005               	push	
  1166  000AAC  6EFA               	movwf	pclath,c
  1167  000AAE  5036               	movf	_serial_write,w,c
  1168  000AB0  6EFD               	movwf	tosl,c
  1169  000AB2  5037               	movf	_serial_write+1,w,c
  1170  000AB4  6EFE               	movwf	tosh,c
  1171  000AB6  50F8               	movf	tblptru,w,c
  1172  000AB8  6EFF               	movwf	tosu,c
  1173  000ABA  50FA               	movf	pclath,w,c
  1174  000ABC  0101               	movlb	1	; () banked
  1175  000ABE  51FC               	movf	(_ring_buffer+204)& (0+255),w,b
  1176  000AC0  0012               	return		;indir
  1177  000AC2                     l3859:
  1178                           
  1179                           ;FastTransfer.c: 66: int i;
  1180                           ;FastTransfer.c: 67: for (i = 0; i < ring_buffer.count; i++) {
  1181  000AC2  0E00               	movlw	0
  1182  000AC4  0100               	movlb	0	; () banked
  1183  000AC6  6FD9               	movwf	(sendData@i+1)& (0+255),b
  1184  000AC8  0E00               	movlw	0
  1185  000ACA  6FD8               	movwf	sendData@i& (0+255),b
  1186  000ACC  D018               	goto	l3865
  1187  000ACE                     l3861:
  1188                           
  1189                           ; BSR set to: 0
  1190                           ;FastTransfer.c: 68: serial_write(*(sendStructAddress + i));
  1191  000ACE  D801               	call	u3208
  1192  000AD0  D013               	goto	l3863
  1193  000AD2                     u3208:
  1194  000AD2  0005               	push	
  1195  000AD4  6EFA               	movwf	pclath,c
  1196  000AD6  5036               	movf	_serial_write,w,c
  1197  000AD8  6EFD               	movwf	tosl,c
  1198  000ADA  5037               	movf	_serial_write+1,w,c
  1199  000ADC  6EFE               	movwf	tosh,c
  1200  000ADE  50F8               	movf	tblptru,w,c
  1201  000AE0  6EFF               	movwf	tosu,c
  1202  000AE2  50FA               	movf	pclath,w,c
  1203  000AE4  0100               	movlb	0	; () banked
  1204  000AE6  51D8               	movf	sendData@i& (0+255),w,b
  1205  000AE8  242E               	addwf	_sendStructAddress,w,c
  1206  000AEA  6ED9               	movwf	fsr2l,c
  1207  000AEC  0100               	movlb	0	; () banked
  1208  000AEE  51D9               	movf	(sendData@i+1)& (0+255),w,b
  1209  000AF0  202F               	addwfc	_sendStructAddress+1,w,c
  1210  000AF2  6EDA               	movwf	fsr2h,c
  1211  000AF4  50DF               	movf	indf2,w,c
  1212  000AF6  0012               	return		;indir
  1213  000AF8                     l3863:
  1214  000AF8  0100               	movlb	0	; () banked
  1215  000AFA  4BD8               	infsnz	sendData@i& (0+255),f,b
  1216  000AFC  2BD9               	incf	(sendData@i+1)& (0+255),f,b
  1217  000AFE                     l3865:
  1218                           
  1219                           ; BSR set to: 0
  1220  000AFE  0101               	movlb	1	; () banked
  1221  000B00  51FC               	movf	(_ring_buffer+204)& (0+255),w,b
  1222  000B02  0100               	movlb	0	; () banked
  1223  000B04  5DD8               	subwf	sendData@i& (0+255),w,b
  1224  000B06  0100               	movlb	0	; () banked
  1225  000B08  51D9               	movf	(sendData@i+1)& (0+255),w,b
  1226  000B0A  0A80               	xorlw	128
  1227  000B0C  0100               	movlb	0	; () banked
  1228  000B0E  6FD5               	movwf	??_sendData& (0+255),b
  1229  000B10  0101               	movlb	1	; () banked
  1230  000B12  51FD               	movf	(_ring_buffer+205)& (0+255),w,b
  1231  000B14  0A80               	xorlw	128
  1232  000B16  0100               	movlb	0	; () banked
  1233  000B18  59D5               	subwfb	??_sendData& (0+255),w,b
  1234  000B1A  A0D8               	btfss	status,0,c
  1235  000B1C  D7D8               	goto	l3861
  1236                           
  1237                           ; BSR set to: 0
  1238                           ;FastTransfer.c: 69: }
  1239                           ;FastTransfer.c: 72: serial_write(CS);
  1240                           
  1241                           ; BSR set to: 0
  1242  000B1E  D801               	call	u3228
  1243  000B20  D00C               	goto	l3869
  1244  000B22                     u3228:
  1245  000B22  0005               	push	
  1246  000B24  6EFA               	movwf	pclath,c
  1247  000B26  5036               	movf	_serial_write,w,c
  1248  000B28  6EFD               	movwf	tosl,c
  1249  000B2A  5037               	movf	_serial_write+1,w,c
  1250  000B2C  6EFE               	movwf	tosh,c
  1251  000B2E  50F8               	movf	tblptru,w,c
  1252  000B30  6EFF               	movwf	tosu,c
  1253  000B32  50FA               	movf	pclath,w,c
  1254  000B34  0100               	movlb	0	; () banked
  1255  000B36  51D7               	movf	sendData@CS& (0+255),w,b
  1256  000B38  0012               	return		;indir
  1257  000B3A                     l3869:
  1258                           
  1259                           ;FastTransfer.c: 75: crcBufS_put(&crc_buffer, whereToSend, CS, 0);
  1260  000B3A  0EC0               	movlw	low _crc_buffer
  1261  000B3C  6E1B               	movwf	crcBufS_put@_this,c
  1262  000B3E  0E00               	movlw	high _crc_buffer
  1263  000B40  6E1C               	movwf	crcBufS_put@_this+1,c
  1264  000B42  C0D6  F01D         	movff	sendData@whereToSend,crcBufS_put@address
  1265  000B46  C0D7  F01E         	movff	sendData@CS,crcBufS_put@oldCRC
  1266  000B4A  0E00               	movlw	0
  1267  000B4C  6E1F               	movwf	crcBufS_put@status,c
  1268  000B4E  ECC9  F008         	call	_crcBufS_put
  1269                           
  1270                           ;FastTransfer.c: 78: FastTransfer_buffer_flush(&ring_buffer, 1);
  1271  000B52  0E30               	movlw	low _ring_buffer
  1272  000B54  0100               	movlb	0	; () banked
  1273  000B56  6FD1               	movwf	FastTransfer_buffer_flush@_this& (0+255),b
  1274  000B58  0E01               	movlw	high _ring_buffer
  1275  000B5A  0100               	movlb	0	; () banked
  1276  000B5C  6FD2               	movwf	(FastTransfer_buffer_flush@_this+1)& (0+255),b
  1277  000B5E  0E00               	movlw	0
  1278  000B60  0100               	movlb	0	; () banked
  1279  000B62  6FD4               	movwf	(FastTransfer_buffer_flush@clearBuffer+1)& (0+255),b
  1280  000B64  0E01               	movlw	1
  1281  000B66  6FD3               	movwf	FastTransfer_buffer_flush@clearBuffer& (0+255),b
  1282  000B68  ECC1  F00B         	call	_FastTransfer_buffer_flush	;wreg free
  1283  000B6C  0012               	return		;funcret
  1284  000B6E                     __end_of_sendData:
  1285                           	opt stack 0
  1286                           tosu	equ	0xFFF
  1287                           tosh	equ	0xFFE
  1288                           tosl	equ	0xFFD
  1289                           pclath	equ	0xFFA
  1290                           tblptru	equ	0xFF8
  1291                           tblptrh	equ	0xFF7
  1292                           tblptrl	equ	0xFF6
  1293                           tablat	equ	0xFF5
  1294                           intcon	equ	0xFF2
  1295                           postinc0	equ	0xFEE
  1296                           wreg	equ	0xFE8
  1297                           indf2	equ	0xFDF
  1298                           fsr2h	equ	0xFDA
  1299                           fsr2l	equ	0xFD9
  1300                           status	equ	0xFD8
  1301                           
  1302 ;; *************** function _crcBufS_put *****************
  1303 ;; Defined at:
  1304 ;;		line 321 in file "FastTransfer.c"
  1305 ;; Parameters:    Size  Location     Type
  1306 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  1307 ;;		 -> crc_buffer(17), 
  1308 ;;  address         1   28[COMRAM] unsigned char 
  1309 ;;  oldCRC          1   29[COMRAM] unsigned char 
  1310 ;;  status          1   30[COMRAM] unsigned char 
  1311 ;; Auto vars:     Size  Location     Type
  1312 ;;		None
  1313 ;; Return value:  Size  Location     Type
  1314 ;;                  1    wreg      void 
  1315 ;; Registers used:
  1316 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1317 ;; Tracked objects:
  1318 ;;		On entry : 0/0
  1319 ;;		On exit  : 0/0
  1320 ;;		Unchanged: 0/0
  1321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1322 ;;      Params:         5       0       0       0       0       0       0
  1323 ;;      Locals:         0       0       0       0       0       0       0
  1324 ;;      Temps:          2       0       0       0       0       0       0
  1325 ;;      Totals:         7       0       0       0       0       0       0
  1326 ;;Total ram usage:        7 bytes
  1327 ;; Hardware stack levels used:    1
  1328 ;; Hardware stack levels required when called:    4
  1329 ;; This function calls:
  1330 ;;		Nothing
  1331 ;; This function is called by:
  1332 ;;		_sendData
  1333 ;; This function uses a non-reentrant model
  1334 ;;
  1335                           
  1336                           	psect	text4
  1337  001192                     __ptext4:
  1338                           	opt stack 0
  1339  001192                     _crcBufS_put:
  1340                           	opt stack 23
  1341                           
  1342                           ;FastTransfer.c: 322: _this->buf[_this->head] = address;
  1343                           
  1344                           ;incstack = 0
  1345  001192  EE20 F00F          	lfsr	2,15
  1346  001196  501B               	movf	crcBufS_put@_this,w,c
  1347  001198  26D9               	addwf	fsr2l,f,c
  1348  00119A  501C               	movf	crcBufS_put@_this+1,w,c
  1349  00119C  22DA               	addwfc	fsr2h,f,c
  1350  00119E  CFDE F020          	movff	postinc2,??_crcBufS_put
  1351  0011A2  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1352  0011A6  5020               	movf	??_crcBufS_put,w,c
  1353  0011A8  241B               	addwf	crcBufS_put@_this,w,c
  1354  0011AA  6ED9               	movwf	fsr2l,c
  1355  0011AC  5021               	movf	??_crcBufS_put+1,w,c
  1356  0011AE  201C               	addwfc	crcBufS_put@_this+1,w,c
  1357  0011B0  6EDA               	movwf	fsr2h,c
  1358  0011B2  C01D  FFDF         	movff	crcBufS_put@address,indf2
  1359                           
  1360                           ;FastTransfer.c: 323: _this->head++;
  1361  0011B6  EE20 F00F          	lfsr	2,15
  1362  0011BA  501B               	movf	crcBufS_put@_this,w,c
  1363  0011BC  26D9               	addwf	fsr2l,f,c
  1364  0011BE  501C               	movf	crcBufS_put@_this+1,w,c
  1365  0011C0  22DA               	addwfc	fsr2h,f,c
  1366  0011C2  2ADE               	incf	postinc2,f,c
  1367  0011C4  0E00               	movlw	0
  1368  0011C6  22DD               	addwfc	postdec2,f,c
  1369                           
  1370                           ;FastTransfer.c: 324: _this->buf[_this->head] = oldCRC;
  1371  0011C8  EE20 F00F          	lfsr	2,15
  1372  0011CC  501B               	movf	crcBufS_put@_this,w,c
  1373  0011CE  26D9               	addwf	fsr2l,f,c
  1374  0011D0  501C               	movf	crcBufS_put@_this+1,w,c
  1375  0011D2  22DA               	addwfc	fsr2h,f,c
  1376  0011D4  CFDE F020          	movff	postinc2,??_crcBufS_put
  1377  0011D8  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1378  0011DC  5020               	movf	??_crcBufS_put,w,c
  1379  0011DE  241B               	addwf	crcBufS_put@_this,w,c
  1380  0011E0  6ED9               	movwf	fsr2l,c
  1381  0011E2  5021               	movf	??_crcBufS_put+1,w,c
  1382  0011E4  201C               	addwfc	crcBufS_put@_this+1,w,c
  1383  0011E6  6EDA               	movwf	fsr2h,c
  1384  0011E8  C01E  FFDF         	movff	crcBufS_put@oldCRC,indf2
  1385                           
  1386                           ;FastTransfer.c: 325: _this->head++;
  1387  0011EC  EE20 F00F          	lfsr	2,15
  1388  0011F0  501B               	movf	crcBufS_put@_this,w,c
  1389  0011F2  26D9               	addwf	fsr2l,f,c
  1390  0011F4  501C               	movf	crcBufS_put@_this+1,w,c
  1391  0011F6  22DA               	addwfc	fsr2h,f,c
  1392  0011F8  2ADE               	incf	postinc2,f,c
  1393  0011FA  0E00               	movlw	0
  1394  0011FC  22DD               	addwfc	postdec2,f,c
  1395                           
  1396                           ;FastTransfer.c: 326: _this->buf[_this->head] = status;
  1397  0011FE  EE20 F00F          	lfsr	2,15
  1398  001202  501B               	movf	crcBufS_put@_this,w,c
  1399  001204  26D9               	addwf	fsr2l,f,c
  1400  001206  501C               	movf	crcBufS_put@_this+1,w,c
  1401  001208  22DA               	addwfc	fsr2h,f,c
  1402  00120A  CFDE F020          	movff	postinc2,??_crcBufS_put
  1403  00120E  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1404  001212  5020               	movf	??_crcBufS_put,w,c
  1405  001214  241B               	addwf	crcBufS_put@_this,w,c
  1406  001216  6ED9               	movwf	fsr2l,c
  1407  001218  5021               	movf	??_crcBufS_put+1,w,c
  1408  00121A  201C               	addwfc	crcBufS_put@_this+1,w,c
  1409  00121C  6EDA               	movwf	fsr2h,c
  1410  00121E  C01F  FFDF         	movff	crcBufS_put@status,indf2
  1411                           
  1412                           ;FastTransfer.c: 327: _this->head++;
  1413  001222  EE20 F00F          	lfsr	2,15
  1414  001226  501B               	movf	crcBufS_put@_this,w,c
  1415  001228  26D9               	addwf	fsr2l,f,c
  1416  00122A  501C               	movf	crcBufS_put@_this+1,w,c
  1417  00122C  22DA               	addwfc	fsr2h,f,c
  1418  00122E  2ADE               	incf	postinc2,f,c
  1419  001230  0E00               	movlw	0
  1420  001232  22DD               	addwfc	postdec2,f,c
  1421                           
  1422                           ;FastTransfer.c: 328: if (_this->head >= (5 * 3)) {
  1423  001234  EE20 F00F          	lfsr	2,15
  1424  001238  501B               	movf	crcBufS_put@_this,w,c
  1425  00123A  26D9               	addwf	fsr2l,f,c
  1426  00123C  501C               	movf	crcBufS_put@_this+1,w,c
  1427  00123E  22DA               	addwfc	fsr2h,f,c
  1428  001240  0E01               	movlw	1
  1429  001242  BEDB               	btfsc	plusw2,7,c
  1430  001244  0012               	return	
  1431  001246  0E01               	movlw	1
  1432  001248  50DB               	movf	plusw2,w,c
  1433  00124A  E104               	bnz	u3020
  1434  00124C  0E0F               	movlw	15
  1435  00124E  5CDE               	subwf	postinc2,w,c
  1436  001250  A0D8               	btfss	status,0,c
  1437  001252  0012               	return	
  1438  001254                     u3020:
  1439                           
  1440                           ;FastTransfer.c: 329: _this->head = 0;
  1441  001254  EE20 F00F          	lfsr	2,15
  1442  001258  501B               	movf	crcBufS_put@_this,w,c
  1443  00125A  26D9               	addwf	fsr2l,f,c
  1444  00125C  501C               	movf	crcBufS_put@_this+1,w,c
  1445  00125E  22DA               	addwfc	fsr2h,f,c
  1446  001260  0E00               	movlw	0
  1447  001262  6EDE               	movwf	postinc2,c
  1448  001264  0E00               	movlw	0
  1449  001266  6EDD               	movwf	postdec2,c
  1450  001268  0012               	return	
  1451  00126A                     __end_of_crcBufS_put:
  1452                           	opt stack 0
  1453                           tosu	equ	0xFFF
  1454                           tosh	equ	0xFFE
  1455                           tosl	equ	0xFFD
  1456                           pclath	equ	0xFFA
  1457                           tblptru	equ	0xFF8
  1458                           tblptrh	equ	0xFF7
  1459                           tblptrl	equ	0xFF6
  1460                           tablat	equ	0xFF5
  1461                           intcon	equ	0xFF2
  1462                           postinc0	equ	0xFEE
  1463                           wreg	equ	0xFE8
  1464                           indf2	equ	0xFDF
  1465                           postinc2	equ	0xFDE
  1466                           postdec2	equ	0xFDD
  1467                           plusw2	equ	0xFDB
  1468                           fsr2h	equ	0xFDA
  1469                           fsr2l	equ	0xFD9
  1470                           status	equ	0xFD8
  1471                           
  1472 ;; *************** function _FastTransfer_buffer_flush *****************
  1473 ;; Defined at:
  1474 ;;		line 261 in file "FastTransfer.c"
  1475 ;; Parameters:    Size  Location     Type
  1476 ;;  _this           2    0[BANK0 ] PTR struct ringBufS
  1477 ;;		 -> ring_buffer(206), 
  1478 ;;  clearBuffer     2    2[BANK0 ] const int 
  1479 ;; Auto vars:     Size  Location     Type
  1480 ;;		None
  1481 ;; Return value:  Size  Location     Type
  1482 ;;                  1    wreg      void 
  1483 ;; Registers used:
  1484 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1485 ;; Tracked objects:
  1486 ;;		On entry : 0/0
  1487 ;;		On exit  : 0/0
  1488 ;;		Unchanged: 0/0
  1489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1490 ;;      Params:         0       4       0       0       0       0       0
  1491 ;;      Locals:         0       0       0       0       0       0       0
  1492 ;;      Temps:          0       0       0       0       0       0       0
  1493 ;;      Totals:         0       4       0       0       0       0       0
  1494 ;;Total ram usage:        4 bytes
  1495 ;; Hardware stack levels used:    1
  1496 ;; Hardware stack levels required when called:    5
  1497 ;; This function calls:
  1498 ;;		_memset
  1499 ;; This function is called by:
  1500 ;;		_sendData
  1501 ;; This function uses a non-reentrant model
  1502 ;;
  1503                           
  1504                           	psect	text5
  1505  001782                     __ptext5:
  1506                           	opt stack 0
  1507  001782                     _FastTransfer_buffer_flush:
  1508                           	opt stack 22
  1509                           
  1510                           ;FastTransfer.c: 262: _this->count = 0;
  1511                           
  1512                           ;incstack = 0
  1513  001782  0100               	movlb	0	; () banked
  1514  001784  EE20 F0CC          	lfsr	2,204
  1515  001788  51D1               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  1516  00178A  26D9               	addwf	fsr2l,f,c
  1517  00178C  51D2               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  1518  00178E  22DA               	addwfc	fsr2h,f,c
  1519  001790  0E00               	movlw	0
  1520  001792  6EDE               	movwf	postinc2,c
  1521  001794  0E00               	movlw	0
  1522  001796  6EDD               	movwf	postdec2,c
  1523                           
  1524                           ;FastTransfer.c: 263: _this->head = 0;
  1525  001798  0100               	movlb	0	; () banked
  1526  00179A  EE20 F0C8          	lfsr	2,200
  1527  00179E  51D1               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  1528  0017A0  26D9               	addwf	fsr2l,f,c
  1529  0017A2  51D2               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  1530  0017A4  22DA               	addwfc	fsr2h,f,c
  1531  0017A6  0E00               	movlw	0
  1532  0017A8  6EDE               	movwf	postinc2,c
  1533  0017AA  0E00               	movlw	0
  1534  0017AC  6EDD               	movwf	postdec2,c
  1535                           
  1536                           ;FastTransfer.c: 264: _this->tail = 0;
  1537  0017AE  0100               	movlb	0	; () banked
  1538  0017B0  EE20 F0CA          	lfsr	2,202
  1539  0017B4  51D1               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  1540  0017B6  26D9               	addwf	fsr2l,f,c
  1541  0017B8  51D2               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  1542  0017BA  22DA               	addwfc	fsr2h,f,c
  1543  0017BC  0E00               	movlw	0
  1544  0017BE  6EDE               	movwf	postinc2,c
  1545  0017C0  0E00               	movlw	0
  1546  0017C2  6EDD               	movwf	postdec2,c
  1547                           
  1548                           ; BSR set to: 0
  1549                           ;FastTransfer.c: 265: if (clearBuffer) {
  1550  0017C4  0100               	movlb	0	; () banked
  1551  0017C6  51D3               	movf	FastTransfer_buffer_flush@clearBuffer& (0+255),w,b
  1552  0017C8  0100               	movlb	0	; () banked
  1553  0017CA  11D4               	iorwf	(FastTransfer_buffer_flush@clearBuffer+1)& (0+255),w,b
  1554  0017CC  B4D8               	btfsc	status,2,c
  1555  0017CE  0012               	return	
  1556                           
  1557                           ; BSR set to: 0
  1558                           ;FastTransfer.c: 266: memset(_this->buf, 0, sizeof (_this->buf));
  1559  0017D0  C0D1  F01B         	movff	FastTransfer_buffer_flush@_this,memset@p1
  1560  0017D4  C0D2  F01C         	movff	FastTransfer_buffer_flush@_this+1,memset@p1+1
  1561  0017D8  0E00               	movlw	0
  1562  0017DA  6E1E               	movwf	memset@c+1,c
  1563  0017DC  0E00               	movlw	0
  1564  0017DE  6E1D               	movwf	memset@c,c
  1565  0017E0  0E00               	movlw	0
  1566  0017E2  6E20               	movwf	memset@n+1,c
  1567  0017E4  0EC8               	movlw	200
  1568  0017E6  6E1F               	movwf	memset@n,c
  1569  0017E8  EC25  F00E         	call	_memset	;wreg free
  1570  0017EC  0012               	return	
  1571  0017EE                     __end_of_FastTransfer_buffer_flush:
  1572                           	opt stack 0
  1573                           tosu	equ	0xFFF
  1574                           tosh	equ	0xFFE
  1575                           tosl	equ	0xFFD
  1576                           pclath	equ	0xFFA
  1577                           tblptru	equ	0xFF8
  1578                           tblptrh	equ	0xFF7
  1579                           tblptrl	equ	0xFF6
  1580                           tablat	equ	0xFF5
  1581                           intcon	equ	0xFF2
  1582                           postinc0	equ	0xFEE
  1583                           wreg	equ	0xFE8
  1584                           indf2	equ	0xFDF
  1585                           postinc2	equ	0xFDE
  1586                           postdec2	equ	0xFDD
  1587                           plusw2	equ	0xFDB
  1588                           fsr2h	equ	0xFDA
  1589                           fsr2l	equ	0xFD9
  1590                           status	equ	0xFD8
  1591                           
  1592 ;; *************** function _ToSend *****************
  1593 ;; Defined at:
  1594 ;;		line 216 in file "FastTransfer.c"
  1595 ;; Parameters:    Size  Location     Type
  1596 ;;  where           1    wreg     unsigned char 
  1597 ;;  what            2    2[BANK0 ] unsigned int 
  1598 ;; Auto vars:     Size  Location     Type
  1599 ;;  where           1    4[BANK0 ] unsigned char 
  1600 ;; Return value:  Size  Location     Type
  1601 ;;                  1    wreg      void 
  1602 ;; Registers used:
  1603 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1604 ;; Tracked objects:
  1605 ;;		On entry : 0/0
  1606 ;;		On exit  : 0/0
  1607 ;;		Unchanged: 0/0
  1608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1609 ;;      Params:         0       2       0       0       0       0       0
  1610 ;;      Locals:         0       1       0       0       0       0       0
  1611 ;;      Temps:          0       0       0       0       0       0       0
  1612 ;;      Totals:         0       3       0       0       0       0       0
  1613 ;;Total ram usage:        3 bytes
  1614 ;; Hardware stack levels used:    1
  1615 ;; Hardware stack levels required when called:    6
  1616 ;; This function calls:
  1617 ;;		_FastTransfer_buffer_put
  1618 ;; This function is called by:
  1619 ;;		_respondECU
  1620 ;; This function uses a non-reentrant model
  1621 ;;
  1622                           
  1623                           	psect	text6
  1624  001D18                     __ptext6:
  1625                           	opt stack 0
  1626  001D18                     _ToSend:
  1627                           	opt stack 22
  1628                           
  1629                           ;incstack = 0
  1630                           ;ToSend@where stored from wreg
  1631  001D18  0100               	movlb	0	; () banked
  1632  001D1A  6FD5               	movwf	ToSend@where& (0+255),b
  1633                           
  1634                           ;FastTransfer.c: 217: FastTransfer_buffer_put(&ring_buffer, where, what);
  1635  001D1C  0E30               	movlw	low _ring_buffer
  1636  001D1E  6E21               	movwf	FastTransfer_buffer_put@_this,c
  1637  001D20  0E01               	movlw	high _ring_buffer
  1638  001D22  6E22               	movwf	FastTransfer_buffer_put@_this+1,c
  1639  001D24  C0D5  F023         	movff	ToSend@where,FastTransfer_buffer_put@towhere
  1640  001D28  C0D3  F024         	movff	ToSend@what,FastTransfer_buffer_put@towhat
  1641  001D2C  C0D4  F025         	movff	ToSend@what+1,FastTransfer_buffer_put@towhat+1
  1642  001D30  ECA9  F003         	call	_FastTransfer_buffer_put	;wreg free
  1643  001D34  0012               	return		;funcret
  1644  001D36                     __end_of_ToSend:
  1645                           	opt stack 0
  1646                           tosu	equ	0xFFF
  1647                           tosh	equ	0xFFE
  1648                           tosl	equ	0xFFD
  1649                           pclath	equ	0xFFA
  1650                           tblptru	equ	0xFF8
  1651                           tblptrh	equ	0xFF7
  1652                           tblptrl	equ	0xFF6
  1653                           tablat	equ	0xFF5
  1654                           intcon	equ	0xFF2
  1655                           postinc0	equ	0xFEE
  1656                           wreg	equ	0xFE8
  1657                           indf2	equ	0xFDF
  1658                           postinc2	equ	0xFDE
  1659                           postdec2	equ	0xFDD
  1660                           plusw2	equ	0xFDB
  1661                           fsr2h	equ	0xFDA
  1662                           fsr2l	equ	0xFD9
  1663                           status	equ	0xFD8
  1664                           
  1665 ;; *************** function _FastTransfer_buffer_put *****************
  1666 ;; Defined at:
  1667 ;;		line 223 in file "FastTransfer.c"
  1668 ;; Parameters:    Size  Location     Type
  1669 ;;  _this           2   32[COMRAM] PTR struct ringBufS
  1670 ;;		 -> ring_buffer(206), 
  1671 ;;  towhere         1   34[COMRAM] unsigned char 
  1672 ;;  towhat          2   35[COMRAM] unsigned int 
  1673 ;; Auto vars:     Size  Location     Type
  1674 ;;		None
  1675 ;; Return value:  Size  Location     Type
  1676 ;;                  1    wreg      void 
  1677 ;; Registers used:
  1678 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1679 ;; Tracked objects:
  1680 ;;		On entry : 0/0
  1681 ;;		On exit  : 0/0
  1682 ;;		Unchanged: 0/0
  1683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1684 ;;      Params:         5       0       0       0       0       0       0
  1685 ;;      Locals:         0       0       0       0       0       0       0
  1686 ;;      Temps:          0       2       0       0       0       0       0
  1687 ;;      Totals:         5       2       0       0       0       0       0
  1688 ;;Total ram usage:        7 bytes
  1689 ;; Hardware stack levels used:    1
  1690 ;; Hardware stack levels required when called:    5
  1691 ;; This function calls:
  1692 ;;		_FastTransfer_buffer_modulo_inc
  1693 ;; This function is called by:
  1694 ;;		_ToSend
  1695 ;; This function uses a non-reentrant model
  1696 ;;
  1697                           
  1698                           	psect	text7
  1699  000752                     __ptext7:
  1700                           	opt stack 0
  1701  000752                     _FastTransfer_buffer_put:
  1702                           	opt stack 22
  1703                           
  1704                           ;FastTransfer.c: 225: group.integer = towhat;
  1705                           
  1706                           ;incstack = 0
  1707  000752  C024  F026         	movff	FastTransfer_buffer_put@towhat,_group
  1708  000756  C025  F027         	movff	FastTransfer_buffer_put@towhat+1,_group+1
  1709                           
  1710                           ;FastTransfer.c: 227: if (_this->count < (200 - 3)) {
  1711  00075A  EE20 F0CC          	lfsr	2,204
  1712  00075E  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1713  000760  26D9               	addwf	fsr2l,f,c
  1714  000762  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1715  000764  22DA               	addwfc	fsr2h,f,c
  1716  000766  0E01               	movlw	1
  1717  000768  BEDB               	btfsc	plusw2,7,c
  1718  00076A  D007               	goto	l3729
  1719  00076C  0E01               	movlw	1
  1720  00076E  50DB               	movf	plusw2,w,c
  1721  000770  E103               	bnz	u3041
  1722  000772  0EC5               	movlw	197
  1723  000774  5CDE               	subwf	postinc2,w,c
  1724  000776  B0D8               	btfsc	status,0,c
  1725  000778                     u3041:
  1726  000778  0012               	return	
  1727  00077A                     l3729:
  1728                           
  1729                           ;FastTransfer.c: 228: _this->buf[_this->head] = towhere;
  1730  00077A  EE20 F0C8          	lfsr	2,200
  1731  00077E  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1732  000780  26D9               	addwf	fsr2l,f,c
  1733  000782  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1734  000784  22DA               	addwfc	fsr2h,f,c
  1735  000786  CFDE F0D1          	movff	postinc2,??_FastTransfer_buffer_put
  1736  00078A  CFDD F0D2          	movff	postdec2,??_FastTransfer_buffer_put+1
  1737  00078E  0100               	movlb	0	; () banked
  1738  000790  51D1               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  1739  000792  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  1740  000794  6ED9               	movwf	fsr2l,c
  1741  000796  0100               	movlb	0	; () banked
  1742  000798  51D2               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  1743  00079A  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  1744  00079C  6EDA               	movwf	fsr2h,c
  1745  00079E  C023  FFDF         	movff	FastTransfer_buffer_put@towhere,indf2
  1746                           
  1747                           ; BSR set to: 0
  1748                           ;FastTransfer.c: 229: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1749  0007A2  EE20 F0C8          	lfsr	2,200
  1750  0007A6  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1751  0007A8  26D9               	addwf	fsr2l,f,c
  1752  0007AA  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1753  0007AC  22DA               	addwfc	fsr2h,f,c
  1754  0007AE  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1755  0007B2  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1756  0007B6  0E00               	movlw	0
  1757  0007B8  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  1758  0007BA  0EC8               	movlw	200
  1759  0007BC  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  1760  0007BE  EC3B  F00E         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1761  0007C2  EE20 F0C8          	lfsr	2,200
  1762  0007C6  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1763  0007C8  26D9               	addwf	fsr2l,f,c
  1764  0007CA  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1765  0007CC  22DA               	addwfc	fsr2h,f,c
  1766  0007CE  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1767  0007D2  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1768                           
  1769                           ;FastTransfer.c: 230: ++_this->count;
  1770  0007D6  EE20 F0CC          	lfsr	2,204
  1771  0007DA  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1772  0007DC  26D9               	addwf	fsr2l,f,c
  1773  0007DE  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1774  0007E0  22DA               	addwfc	fsr2h,f,c
  1775  0007E2  2ADE               	incf	postinc2,f,c
  1776  0007E4  0E00               	movlw	0
  1777  0007E6  22DD               	addwfc	postdec2,f,c
  1778                           
  1779                           ;FastTransfer.c: 231: _this->buf[_this->head] = group.parts[0];
  1780  0007E8  EE20 F0C8          	lfsr	2,200
  1781  0007EC  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1782  0007EE  26D9               	addwf	fsr2l,f,c
  1783  0007F0  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1784  0007F2  22DA               	addwfc	fsr2h,f,c
  1785  0007F4  CFDE F0D1          	movff	postinc2,??_FastTransfer_buffer_put
  1786  0007F8  CFDD F0D2          	movff	postdec2,??_FastTransfer_buffer_put+1
  1787  0007FC  0100               	movlb	0	; () banked
  1788  0007FE  51D1               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  1789  000800  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  1790  000802  6ED9               	movwf	fsr2l,c
  1791  000804  0100               	movlb	0	; () banked
  1792  000806  51D2               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  1793  000808  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  1794  00080A  6EDA               	movwf	fsr2h,c
  1795  00080C  C026  FFDF         	movff	_group,indf2
  1796                           
  1797                           ; BSR set to: 0
  1798                           ;FastTransfer.c: 232: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1799  000810  EE20 F0C8          	lfsr	2,200
  1800  000814  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1801  000816  26D9               	addwf	fsr2l,f,c
  1802  000818  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1803  00081A  22DA               	addwfc	fsr2h,f,c
  1804  00081C  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1805  000820  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1806  000824  0E00               	movlw	0
  1807  000826  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  1808  000828  0EC8               	movlw	200
  1809  00082A  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  1810  00082C  EC3B  F00E         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1811  000830  EE20 F0C8          	lfsr	2,200
  1812  000834  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1813  000836  26D9               	addwf	fsr2l,f,c
  1814  000838  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1815  00083A  22DA               	addwfc	fsr2h,f,c
  1816  00083C  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1817  000840  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1818                           
  1819                           ;FastTransfer.c: 233: ++_this->count;
  1820  000844  EE20 F0CC          	lfsr	2,204
  1821  000848  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1822  00084A  26D9               	addwf	fsr2l,f,c
  1823  00084C  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1824  00084E  22DA               	addwfc	fsr2h,f,c
  1825  000850  2ADE               	incf	postinc2,f,c
  1826  000852  0E00               	movlw	0
  1827  000854  22DD               	addwfc	postdec2,f,c
  1828                           
  1829                           ;FastTransfer.c: 234: _this->buf[_this->head] = group.parts[1];
  1830  000856  EE20 F0C8          	lfsr	2,200
  1831  00085A  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1832  00085C  26D9               	addwf	fsr2l,f,c
  1833  00085E  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1834  000860  22DA               	addwfc	fsr2h,f,c
  1835  000862  CFDE F0D1          	movff	postinc2,??_FastTransfer_buffer_put
  1836  000866  CFDD F0D2          	movff	postdec2,??_FastTransfer_buffer_put+1
  1837  00086A  0100               	movlb	0	; () banked
  1838  00086C  51D1               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  1839  00086E  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  1840  000870  6ED9               	movwf	fsr2l,c
  1841  000872  0100               	movlb	0	; () banked
  1842  000874  51D2               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  1843  000876  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  1844  000878  6EDA               	movwf	fsr2h,c
  1845  00087A  C027  FFDF         	movff	_group+1,indf2
  1846                           
  1847                           ; BSR set to: 0
  1848                           ;FastTransfer.c: 235: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1849  00087E  EE20 F0C8          	lfsr	2,200
  1850  000882  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1851  000884  26D9               	addwf	fsr2l,f,c
  1852  000886  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1853  000888  22DA               	addwfc	fsr2h,f,c
  1854  00088A  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1855  00088E  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1856  000892  0E00               	movlw	0
  1857  000894  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  1858  000896  0EC8               	movlw	200
  1859  000898  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  1860  00089A  EC3B  F00E         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1861  00089E  EE20 F0C8          	lfsr	2,200
  1862  0008A2  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1863  0008A4  26D9               	addwf	fsr2l,f,c
  1864  0008A6  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1865  0008A8  22DA               	addwfc	fsr2h,f,c
  1866  0008AA  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1867  0008AE  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1868                           
  1869                           ;FastTransfer.c: 236: ++_this->count;
  1870  0008B2  EE20 F0CC          	lfsr	2,204
  1871  0008B6  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1872  0008B8  26D9               	addwf	fsr2l,f,c
  1873  0008BA  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1874  0008BC  22DA               	addwfc	fsr2h,f,c
  1875  0008BE  2ADE               	incf	postinc2,f,c
  1876  0008C0  0E00               	movlw	0
  1877  0008C2  22DD               	addwfc	postdec2,f,c
  1878  0008C4  0012               	return	
  1879  0008C6                     __end_of_FastTransfer_buffer_put:
  1880                           	opt stack 0
  1881                           tosu	equ	0xFFF
  1882                           tosh	equ	0xFFE
  1883                           tosl	equ	0xFFD
  1884                           pclath	equ	0xFFA
  1885                           tblptru	equ	0xFF8
  1886                           tblptrh	equ	0xFF7
  1887                           tblptrl	equ	0xFF6
  1888                           tablat	equ	0xFF5
  1889                           intcon	equ	0xFF2
  1890                           postinc0	equ	0xFEE
  1891                           wreg	equ	0xFE8
  1892                           indf2	equ	0xFDF
  1893                           postinc2	equ	0xFDE
  1894                           postdec2	equ	0xFDD
  1895                           plusw2	equ	0xFDB
  1896                           fsr2h	equ	0xFDA
  1897                           fsr2l	equ	0xFD9
  1898                           status	equ	0xFD8
  1899                           
  1900 ;; *************** function _FastTransfer_buffer_modulo_inc *****************
  1901 ;; Defined at:
  1902 ;;		line 273 in file "FastTransfer.c"
  1903 ;; Parameters:    Size  Location     Type
  1904 ;;  value           2   26[COMRAM] const unsigned int 
  1905 ;;  modulus         2   28[COMRAM] const unsigned int 
  1906 ;; Auto vars:     Size  Location     Type
  1907 ;;  my_value        2   30[COMRAM] unsigned int 
  1908 ;; Return value:  Size  Location     Type
  1909 ;;                  2   26[COMRAM] unsigned int 
  1910 ;; Registers used:
  1911 ;;		wreg, status,2, status,0
  1912 ;; Tracked objects:
  1913 ;;		On entry : 0/0
  1914 ;;		On exit  : 0/0
  1915 ;;		Unchanged: 0/0
  1916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1917 ;;      Params:         4       0       0       0       0       0       0
  1918 ;;      Locals:         2       0       0       0       0       0       0
  1919 ;;      Temps:          0       0       0       0       0       0       0
  1920 ;;      Totals:         6       0       0       0       0       0       0
  1921 ;;Total ram usage:        6 bytes
  1922 ;; Hardware stack levels used:    1
  1923 ;; Hardware stack levels required when called:    4
  1924 ;; This function calls:
  1925 ;;		Nothing
  1926 ;; This function is called by:
  1927 ;;		_FastTransfer_buffer_put
  1928 ;;		_FastTransfer_buffer_get
  1929 ;; This function uses a non-reentrant model
  1930 ;;
  1931                           
  1932                           	psect	text8
  1933  001C76                     __ptext8:
  1934                           	opt stack 0
  1935  001C76                     _FastTransfer_buffer_modulo_inc:
  1936                           	opt stack 22
  1937                           
  1938                           ;FastTransfer.c: 274: unsigned int my_value = value + 1;
  1939                           
  1940                           ;incstack = 0
  1941  001C76  0E01               	movlw	1
  1942  001C78  241B               	addwf	FastTransfer_buffer_modulo_inc@value,w,c
  1943  001C7A  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  1944  001C7C  0E00               	movlw	0
  1945  001C7E  201C               	addwfc	FastTransfer_buffer_modulo_inc@value+1,w,c
  1946  001C80  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  1947                           
  1948                           ;FastTransfer.c: 275: if (my_value >= modulus) {
  1949  001C82  501D               	movf	FastTransfer_buffer_modulo_inc@modulus,w,c
  1950  001C84  5C1F               	subwf	FastTransfer_buffer_modulo_inc@my_value,w,c
  1951  001C86  501E               	movf	FastTransfer_buffer_modulo_inc@modulus+1,w,c
  1952  001C88  5820               	subwfb	FastTransfer_buffer_modulo_inc@my_value+1,w,c
  1953  001C8A  A0D8               	btfss	status,0,c
  1954  001C8C  D004               	goto	l3649
  1955                           
  1956                           ;FastTransfer.c: 276: my_value = 0;
  1957  001C8E  0E00               	movlw	0
  1958  001C90  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  1959  001C92  0E00               	movlw	0
  1960  001C94  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  1961  001C96                     l3649:
  1962                           
  1963                           ;FastTransfer.c: 277: }
  1964                           ;FastTransfer.c: 278: return (my_value);
  1965  001C96  C01F  F01B         	movff	FastTransfer_buffer_modulo_inc@my_value,?_FastTransfer_buffer_modulo_inc
  1966  001C9A  C020  F01C         	movff	FastTransfer_buffer_modulo_inc@my_value+1,?_FastTransfer_buffer_modulo_inc+1
  1967  001C9E  0012               	return	
  1968  001CA0                     __end_of_FastTransfer_buffer_modulo_inc:
  1969                           	opt stack 0
  1970                           tosu	equ	0xFFF
  1971                           tosh	equ	0xFFE
  1972                           tosl	equ	0xFFD
  1973                           pclath	equ	0xFFA
  1974                           tblptru	equ	0xFF8
  1975                           tblptrh	equ	0xFF7
  1976                           tblptrl	equ	0xFF6
  1977                           tablat	equ	0xFF5
  1978                           intcon	equ	0xFF2
  1979                           postinc0	equ	0xFEE
  1980                           wreg	equ	0xFE8
  1981                           indf2	equ	0xFDF
  1982                           postinc2	equ	0xFDE
  1983                           postdec2	equ	0xFDD
  1984                           plusw2	equ	0xFDB
  1985                           fsr2h	equ	0xFDA
  1986                           fsr2l	equ	0xFD9
  1987                           status	equ	0xFD8
  1988                           
  1989 ;; *************** function _receiveData *****************
  1990 ;; Defined at:
  1991 ;;		line 82 in file "FastTransfer.c"
  1992 ;; Parameters:    Size  Location     Type
  1993 ;;		None
  1994 ;; Auto vars:     Size  Location     Type
  1995 ;;  holder          3   18[BANK0 ] unsigned char [3]
  1996 ;;  crcHolder       1   22[BANK0 ] unsigned char 
  1997 ;;  holder          3   15[BANK0 ] unsigned char [3]
  1998 ;;  crcHolder       1   21[BANK0 ] unsigned char 
  1999 ;;  u               2   23[BANK0 ] int 
  2000 ;;  r               2   25[BANK0 ] int 
  2001 ;; Return value:  Size  Location     Type
  2002 ;;                  1    wreg      unsigned char 
  2003 ;; Registers used:
  2004 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  2005 ;; Tracked objects:
  2006 ;;		On entry : 0/0
  2007 ;;		On exit  : 0/0
  2008 ;;		Unchanged: 0/0
  2009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2010 ;;      Params:         0       0       0       0       0       0       0
  2011 ;;      Locals:         0      12       0       0       0       0       0
  2012 ;;      Temps:          0       6       0       0       0       0       0
  2013 ;;      Totals:         0      18       0       0       0       0       0
  2014 ;;Total ram usage:       18 bytes
  2015 ;; Hardware stack levels used:    1
  2016 ;; Hardware stack levels required when called:    8
  2017 ;; This function calls:
  2018 ;;		Absolute function
  2019 ;;		_CRC8
  2020 ;;		_CRCcheck
  2021 ;;		_Receive_available
  2022 ;;		_Receive_get
  2023 ;;		_Receive_peek
  2024 ;;		_Send_put
  2025 ;; This function is called by:
  2026 ;;		_updateComms
  2027 ;; This function uses a non-reentrant model
  2028 ;;
  2029                           
  2030                           	psect	text9
  2031  0000A4                     __ptext9:
  2032                           	opt stack 0
  2033  0000A4                     _receiveData:
  2034                           	opt stack 21
  2035                           
  2036                           ;FastTransfer.c: 85: if (rx_len == 0) {
  2037                           
  2038                           ;incstack = 0
  2039  0000A4  5043               	movf	_rx_len,w,c
  2040  0000A6  A4D8               	btfss	status,2,c
  2041  0000A8  D0AC               	goto	l3989
  2042                           
  2043                           ;FastTransfer.c: 87: if (serial_available() > 4) {
  2044  0000AA  D801               	call	u3398
  2045  0000AC  D00A               	goto	u3399
  2046  0000AE                     u3398:
  2047  0000AE  0005               	push	
  2048  0000B0  6EFA               	movwf	pclath,c
  2049  0000B2  5030               	movf	_serial_available,w,c
  2050  0000B4  6EFD               	movwf	tosl,c
  2051  0000B6  5031               	movf	_serial_available+1,w,c
  2052  0000B8  6EFE               	movwf	tosh,c
  2053  0000BA  50F8               	movf	tblptru,w,c
  2054  0000BC  6EFF               	movwf	tosu,c
  2055  0000BE  50FA               	movf	pclath,w,c
  2056  0000C0  0012               	return		;indir
  2057  0000C2                     u3399:
  2058  0000C2  BE1E               	btfsc	?_Receive_available+1,7,c
  2059  0000C4  D09E               	goto	l3989
  2060  0000C6  501E               	movf	?_Receive_available+1,w,c
  2061  0000C8  E11E               	bnz	l3965
  2062  0000CA  0E05               	movlw	5
  2063  0000CC  5C1D               	subwf	?_Receive_available,w,c
  2064  0000CE  B0D8               	btfsc	status,0,c
  2065  0000D0  D01A               	goto	l3965
  2066  0000D2  D097               	goto	l3989
  2067  0000D4                     l3957:
  2068                           
  2069                           ;FastTransfer.c: 93: alignErrorCounter++;
  2070  0000D4  0100               	movlb	0	; () banked
  2071  0000D6  4B92               	infsnz	_alignErrorCounter& (0+255),f,b
  2072  0000D8  2B93               	incf	(_alignErrorCounter+1)& (0+255),f,b
  2073                           
  2074                           ; BSR set to: 0
  2075                           ;FastTransfer.c: 94: if (serial_available() < 5)
  2076  0000DA  D801               	call	u3418
  2077  0000DC  D00A               	goto	u3419
  2078  0000DE                     u3418:
  2079  0000DE  0005               	push	
  2080  0000E0  6EFA               	movwf	pclath,c
  2081  0000E2  5030               	movf	_serial_available,w,c
  2082  0000E4  6EFD               	movwf	tosl,c
  2083  0000E6  5031               	movf	_serial_available+1,w,c
  2084  0000E8  6EFE               	movwf	tosh,c
  2085  0000EA  50F8               	movf	tblptru,w,c
  2086  0000EC  6EFF               	movwf	tosu,c
  2087  0000EE  50FA               	movf	pclath,w,c
  2088  0000F0  0012               	return		;indir
  2089  0000F2                     u3419:
  2090  0000F2  BE1E               	btfsc	?_Receive_available+1,7,c
  2091  0000F4  D006               	goto	l3961
  2092  0000F6  501E               	movf	?_Receive_available+1,w,c
  2093  0000F8  E106               	bnz	l3965
  2094  0000FA  0E05               	movlw	5
  2095  0000FC  5C1D               	subwf	?_Receive_available,w,c
  2096  0000FE  B0D8               	btfsc	status,0,c
  2097  000100  D002               	goto	l3965
  2098  000102                     l3961:
  2099                           
  2100                           ;FastTransfer.c: 95: return 0;
  2101  000102  0E00               	movlw	0
  2102  000104  0012               	return	
  2103  000106                     l3965:
  2104  000106  D801               	call	u3438
  2105  000108  D00A               	goto	u3439
  2106  00010A                     u3438:
  2107  00010A  0005               	push	
  2108  00010C  6EFA               	movwf	pclath,c
  2109  00010E  5034               	movf	_serial_read,w,c
  2110  000110  6EFD               	movwf	tosl,c
  2111  000112  5035               	movf	_serial_read+1,w,c
  2112  000114  6EFE               	movwf	tosh,c
  2113  000116  50F8               	movf	tblptru,w,c
  2114  000118  6EFF               	movwf	tosu,c
  2115  00011A  50FA               	movf	pclath,w,c
  2116  00011C  0012               	return		;indir
  2117  00011E                     u3439:
  2118  00011E  0A06               	xorlw	6
  2119  000120  A4D8               	btfss	status,2,c
  2120  000122  D7D8               	goto	l3957
  2121                           
  2122                           ;FastTransfer.c: 96: }
  2123                           ;FastTransfer.c: 97: if (serial_read() == 0x85) {
  2124  000124  D801               	call	u3458
  2125  000126  D00A               	goto	u3459
  2126  000128                     u3458:
  2127  000128  0005               	push	
  2128  00012A  6EFA               	movwf	pclath,c
  2129  00012C  5034               	movf	_serial_read,w,c
  2130  00012E  6EFD               	movwf	tosl,c
  2131  000130  5035               	movf	_serial_read+1,w,c
  2132  000132  6EFE               	movwf	tosh,c
  2133  000134  50F8               	movf	tblptru,w,c
  2134  000136  6EFF               	movwf	tosu,c
  2135  000138  50FA               	movf	pclath,w,c
  2136  00013A  0012               	return		;indir
  2137  00013C                     u3459:
  2138  00013C  0A85               	xorlw	133
  2139  00013E  A4D8               	btfss	status,2,c
  2140  000140  D060               	goto	l3989
  2141                           
  2142                           ;FastTransfer.c: 98: rx_address = serial_read();
  2143  000142  D801               	call	u3478
  2144  000144  D00A               	goto	u3479
  2145  000146                     u3478:
  2146  000146  0005               	push	
  2147  000148  6EFA               	movwf	pclath,c
  2148  00014A  5034               	movf	_serial_read,w,c
  2149  00014C  6EFD               	movwf	tosl,c
  2150  00014E  5035               	movf	_serial_read+1,w,c
  2151  000150  6EFE               	movwf	tosh,c
  2152  000152  50F8               	movf	tblptru,w,c
  2153  000154  6EFF               	movwf	tosu,c
  2154  000156  50FA               	movf	pclath,w,c
  2155  000158  0012               	return		;indir
  2156  00015A                     u3479:
  2157  00015A  6E41               	movwf	_rx_address,c
  2158                           
  2159                           ;FastTransfer.c: 99: returnAddress = serial_read();
  2160  00015C  D801               	call	u3488
  2161  00015E  D00A               	goto	u3489
  2162  000160                     u3488:
  2163  000160  0005               	push	
  2164  000162  6EFA               	movwf	pclath,c
  2165  000164  5034               	movf	_serial_read,w,c
  2166  000166  6EFD               	movwf	tosl,c
  2167  000168  5035               	movf	_serial_read+1,w,c
  2168  00016A  6EFE               	movwf	tosh,c
  2169  00016C  50F8               	movf	tblptru,w,c
  2170  00016E  6EFF               	movwf	tosu,c
  2171  000170  50FA               	movf	pclath,w,c
  2172  000172  0012               	return		;indir
  2173  000174                     u3489:
  2174  000174  6E40               	movwf	_returnAddress,c
  2175                           
  2176                           ;FastTransfer.c: 100: rx_len = serial_read();
  2177  000176  D801               	call	u3498
  2178  000178  D00A               	goto	u3499
  2179  00017A                     u3498:
  2180  00017A  0005               	push	
  2181  00017C  6EFA               	movwf	pclath,c
  2182  00017E  5034               	movf	_serial_read,w,c
  2183  000180  6EFD               	movwf	tosl,c
  2184  000182  5035               	movf	_serial_read+1,w,c
  2185  000184  6EFE               	movwf	tosh,c
  2186  000186  50F8               	movf	tblptru,w,c
  2187  000188  6EFF               	movwf	tosu,c
  2188  00018A  50FA               	movf	pclath,w,c
  2189  00018C  0012               	return		;indir
  2190  00018E                     u3499:
  2191  00018E  6E43               	movwf	_rx_len,c
  2192                           
  2193                           ;FastTransfer.c: 102: if (rx_address != moduleAddress) {
  2194  000190  503F               	movf	_moduleAddress,w,c
  2195  000192  1841               	xorwf	_rx_address,w,c
  2196  000194  B4D8               	btfsc	status,2,c
  2197  000196  D035               	goto	l3989
  2198                           
  2199                           ;FastTransfer.c: 103: addressErrorCounter++;
  2200  000198  0100               	movlb	0	; () banked
  2201  00019A  4B90               	infsnz	_addressErrorCounter& (0+255),f,b
  2202  00019C  2B91               	incf	(_addressErrorCounter+1)& (0+255),f,b
  2203                           
  2204                           ; BSR set to: 0
  2205                           ;FastTransfer.c: 106: int u;
  2206                           ;FastTransfer.c: 107: for (u = 0; u <= (rx_len + 1); u++) {
  2207  00019E  0E00               	movlw	0
  2208  0001A0  0100               	movlb	0	; () banked
  2209  0001A2  6FE9               	movwf	(receiveData@u+1)& (0+255),b
  2210  0001A4  0E00               	movlw	0
  2211  0001A6  6FE8               	movwf	receiveData@u& (0+255),b
  2212  0001A8  D00F               	goto	l3981
  2213  0001AA                     l3977:
  2214                           
  2215                           ; BSR set to: 0
  2216                           ;FastTransfer.c: 108: serial_read();
  2217  0001AA  D801               	call	u3518
  2218  0001AC  D00A               	goto	l3979
  2219  0001AE                     u3518:
  2220  0001AE  0005               	push	
  2221  0001B0  6EFA               	movwf	pclath,c
  2222  0001B2  5034               	movf	_serial_read,w,c
  2223  0001B4  6EFD               	movwf	tosl,c
  2224  0001B6  5035               	movf	_serial_read+1,w,c
  2225  0001B8  6EFE               	movwf	tosh,c
  2226  0001BA  50F8               	movf	tblptru,w,c
  2227  0001BC  6EFF               	movwf	tosu,c
  2228  0001BE  50FA               	movf	pclath,w,c
  2229  0001C0  0012               	return		;indir
  2230  0001C2                     l3979:
  2231  0001C2  0100               	movlb	0	; () banked
  2232  0001C4  4BE8               	infsnz	receiveData@u& (0+255),f,b
  2233  0001C6  2BE9               	incf	(receiveData@u+1)& (0+255),f,b
  2234  0001C8                     l3981:
  2235                           
  2236                           ; BSR set to: 0
  2237  0001C8  5043               	movf	_rx_len,w,c
  2238  0001CA  0100               	movlb	0	; () banked
  2239  0001CC  6FDA               	movwf	??_receiveData& (0+255),b
  2240  0001CE  6BDB               	clrf	(??_receiveData+1)& (0+255),b
  2241  0001D0  0E01               	movlw	1
  2242  0001D2  0100               	movlb	0	; () banked
  2243  0001D4  27DA               	addwf	??_receiveData& (0+255),f,b
  2244  0001D6  0E00               	movlw	0
  2245  0001D8  23DB               	addwfc	(??_receiveData+1)& (0+255),f,b
  2246  0001DA  0100               	movlb	0	; () banked
  2247  0001DC  51E8               	movf	receiveData@u& (0+255),w,b
  2248  0001DE  0100               	movlb	0	; () banked
  2249  0001E0  5DDA               	subwf	??_receiveData& (0+255),w,b
  2250  0001E2  0100               	movlb	0	; () banked
  2251  0001E4  51DB               	movf	(??_receiveData+1)& (0+255),w,b
  2252  0001E6  0A80               	xorlw	128
  2253  0001E8  0100               	movlb	0	; () banked
  2254  0001EA  6FDC               	movwf	(??_receiveData+2)& (0+255),b
  2255  0001EC  0100               	movlb	0	; () banked
  2256  0001EE  51E9               	movf	(receiveData@u+1)& (0+255),w,b
  2257  0001F0  0A80               	xorlw	128
  2258  0001F2  0100               	movlb	0	; () banked
  2259  0001F4  59DC               	subwfb	(??_receiveData+2)& (0+255),w,b
  2260  0001F6  B0D8               	btfsc	status,0,c
  2261  0001F8  D7D8               	goto	l3977
  2262                           
  2263                           ; BSR set to: 0
  2264                           ;FastTransfer.c: 109: }
  2265                           ;FastTransfer.c: 110: rx_len = 0;
  2266                           
  2267                           ; BSR set to: 0
  2268  0001FA  0E00               	movlw	0
  2269  0001FC  6E43               	movwf	_rx_len,c
  2270                           
  2271                           ; BSR set to: 0
  2272                           ;FastTransfer.c: 111: return 0;
  2273  0001FE  0E00               	movlw	0
  2274                           
  2275                           ; BSR set to: 0
  2276  000200  0012               	return	
  2277  000202                     l3989:
  2278                           
  2279                           ;FastTransfer.c: 112: }
  2280                           ;FastTransfer.c: 114: }
  2281                           ;FastTransfer.c: 115: }
  2282                           ;FastTransfer.c: 116: }
  2283                           ;FastTransfer.c: 119: if (rx_len != 0) {
  2284  000202  5043               	movf	_rx_len,w,c
  2285  000204  B4D8               	btfsc	status,2,c
  2286  000206  D2A3               	goto	l4113
  2287                           
  2288                           ;FastTransfer.c: 122: if (rx_array_inx == 0) {
  2289  000208  5042               	movf	_rx_array_inx,w,c
  2290  00020A  A4D8               	btfss	status,2,c
  2291  00020C  D043               	goto	l4013
  2292  00020E                     l3995:
  2293  00020E  D801               	call	u3558
  2294  000210  D00A               	goto	u3559
  2295  000212                     u3558:
  2296  000212  0005               	push	
  2297  000214  6EFA               	movwf	pclath,c
  2298  000216  5030               	movf	_serial_available,w,c
  2299  000218  6EFD               	movwf	tosl,c
  2300  00021A  5031               	movf	_serial_available+1,w,c
  2301  00021C  6EFE               	movwf	tosh,c
  2302  00021E  50F8               	movf	tblptru,w,c
  2303  000220  6EFF               	movwf	tosu,c
  2304  000222  50FA               	movf	pclath,w,c
  2305  000224  0012               	return		;indir
  2306  000226                     u3559:
  2307  000226  BE1E               	btfsc	?_Receive_available+1,7,c
  2308  000228  D7F2               	goto	l3995
  2309  00022A  501E               	movf	?_Receive_available+1,w,c
  2310  00022C  E103               	bnz	l3997
  2311  00022E  041D               	decf	?_Receive_available,w,c
  2312  000230  A0D8               	btfss	status,0,c
  2313  000232  D7ED               	goto	l3995
  2314  000234                     l3997:
  2315                           
  2316                           ;FastTransfer.c: 124: if (255 == serial_peek()) {
  2317  000234  D801               	call	u3578
  2318  000236  D00A               	goto	u3579
  2319  000238                     u3578:
  2320  000238  0005               	push	
  2321  00023A  6EFA               	movwf	pclath,c
  2322  00023C  5032               	movf	_serial_peek,w,c
  2323  00023E  6EFD               	movwf	tosl,c
  2324  000240  5033               	movf	_serial_peek+1,w,c
  2325  000242  6EFE               	movwf	tosh,c
  2326  000244  50F8               	movf	tblptru,w,c
  2327  000246  6EFF               	movwf	tosu,c
  2328  000248  50FA               	movf	pclath,w,c
  2329  00024A  0012               	return		;indir
  2330  00024C                     u3579:
  2331  00024C  0AFF               	xorlw	255
  2332  00024E  A4D8               	btfss	status,2,c
  2333  000250  D021               	goto	l4013
  2334                           
  2335                           ;FastTransfer.c: 125: CRCcheck();
  2336  000252  EC63  F004         	call	_CRCcheck	;wreg free
  2337                           
  2338                           ;FastTransfer.c: 126: rx_len = 0;
  2339  000256  0E00               	movlw	0
  2340  000258  6E43               	movwf	_rx_len,c
  2341                           
  2342                           ;FastTransfer.c: 127: rx_array_inx = 0;
  2343  00025A  0E00               	movlw	0
  2344  00025C  6E42               	movwf	_rx_array_inx,c
  2345                           
  2346                           ;FastTransfer.c: 128: return 0;
  2347  00025E  0E00               	movlw	0
  2348  000260  0012               	return	
  2349  000262                     l4009:
  2350                           
  2351                           ;FastTransfer.c: 134: rx_buffer[rx_array_inx++] = serial_read();
  2352  000262  D801               	call	u3598
  2353  000264  D00A               	goto	u3599
  2354  000266                     u3598:
  2355  000266  0005               	push	
  2356  000268  6EFA               	movwf	pclath,c
  2357  00026A  5034               	movf	_serial_read,w,c
  2358  00026C  6EFD               	movwf	tosl,c
  2359  00026E  5035               	movf	_serial_read+1,w,c
  2360  000270  6EFE               	movwf	tosh,c
  2361  000272  50F8               	movf	tblptru,w,c
  2362  000274  6EFF               	movwf	tosu,c
  2363  000276  50FA               	movf	pclath,w,c
  2364  000278  0012               	return		;indir
  2365  00027A                     u3599:
  2366  00027A  0100               	movlb	0	; () banked
  2367  00027C  6FDA               	movwf	??_receiveData& (0+255),b
  2368  00027E  5042               	movf	_rx_array_inx,w,c
  2369  000280  0D01               	mullw	1
  2370  000282  0E00               	movlw	low _rx_buffer
  2371  000284  24F3               	addwf	prodl,w,c
  2372  000286  6ED9               	movwf	fsr2l,c
  2373  000288  0E02               	movlw	high _rx_buffer
  2374  00028A  20F4               	addwfc	prodh,w,c
  2375  00028C  6EDA               	movwf	fsr2h,c
  2376  00028E  C0DA  FFDF         	movff	??_receiveData,indf2
  2377                           
  2378                           ; BSR set to: 0
  2379  000292  2A42               	incf	_rx_array_inx,f,c
  2380  000294                     l4013:
  2381  000294  D801               	call	u3608
  2382  000296  D00A               	goto	u3609
  2383  000298                     u3608:
  2384  000298  0005               	push	
  2385  00029A  6EFA               	movwf	pclath,c
  2386  00029C  5030               	movf	_serial_available,w,c
  2387  00029E  6EFD               	movwf	tosl,c
  2388  0002A0  5031               	movf	_serial_available+1,w,c
  2389  0002A2  6EFE               	movwf	tosh,c
  2390  0002A4  50F8               	movf	tblptru,w,c
  2391  0002A6  6EFF               	movwf	tosu,c
  2392  0002A8  50FA               	movf	pclath,w,c
  2393  0002AA  0012               	return		;indir
  2394  0002AC                     u3609:
  2395  0002AC  501D               	movf	?_Receive_available,w,c
  2396  0002AE  101E               	iorwf	?_Receive_available+1,w,c
  2397  0002B0  B4D8               	btfsc	status,2,c
  2398  0002B2  D004               	goto	l4017
  2399  0002B4  5042               	movf	_rx_array_inx,w,c
  2400  0002B6  5C43               	subwf	_rx_len,w,c
  2401  0002B8  B0D8               	btfsc	status,0,c
  2402  0002BA  D7D3               	goto	l4009
  2403  0002BC                     l4017:
  2404                           
  2405                           ;FastTransfer.c: 135: }
  2406                           ;FastTransfer.c: 137: if (rx_len == (rx_array_inx - 1)) {
  2407  0002BC  5043               	movf	_rx_len,w,c
  2408  0002BE  0100               	movlb	0	; () banked
  2409  0002C0  6FDA               	movwf	??_receiveData& (0+255),b
  2410  0002C2  6BDB               	clrf	(??_receiveData+1)& (0+255),b
  2411  0002C4  0EFF               	movlw	255
  2412  0002C6  0100               	movlb	0	; () banked
  2413  0002C8  6FDC               	movwf	(??_receiveData+2)& (0+255),b
  2414  0002CA  0EFF               	movlw	255
  2415  0002CC  0100               	movlb	0	; () banked
  2416  0002CE  6FDD               	movwf	(??_receiveData+3)& (0+255),b
  2417  0002D0  5042               	movf	_rx_array_inx,w,c
  2418  0002D2  0100               	movlb	0	; () banked
  2419  0002D4  6FDE               	movwf	(??_receiveData+4)& (0+255),b
  2420  0002D6  6BDF               	clrf	(??_receiveData+5)& (0+255),b
  2421  0002D8  0100               	movlb	0	; () banked
  2422  0002DA  51DC               	movf	(??_receiveData+2)& (0+255),w,b
  2423  0002DC  0100               	movlb	0	; () banked
  2424  0002DE  27DE               	addwf	(??_receiveData+4)& (0+255),f,b
  2425  0002E0  0100               	movlb	0	; () banked
  2426  0002E2  51DD               	movf	(??_receiveData+3)& (0+255),w,b
  2427  0002E4  0100               	movlb	0	; () banked
  2428  0002E6  23DF               	addwfc	(??_receiveData+5)& (0+255),f,b
  2429  0002E8  0100               	movlb	0	; () banked
  2430  0002EA  51DA               	movf	??_receiveData& (0+255),w,b
  2431  0002EC  0100               	movlb	0	; () banked
  2432  0002EE  19DE               	xorwf	(??_receiveData+4)& (0+255),w,b
  2433  0002F0  E105               	bnz	u3631
  2434  0002F2  0100               	movlb	0	; () banked
  2435  0002F4  51DB               	movf	(??_receiveData+1)& (0+255),w,b
  2436  0002F6  0100               	movlb	0	; () banked
  2437  0002F8  19DF               	xorwf	(??_receiveData+5)& (0+255),w,b
  2438  0002FA  A4D8               	btfss	status,2,c
  2439  0002FC                     u3631:
  2440  0002FC  D228               	goto	l4113
  2441                           
  2442                           ; BSR set to: 0
  2443                           ;FastTransfer.c: 140: calc_CS = CRC8(rx_buffer, rx_len);
  2444  0002FE  0E00               	movlw	low _rx_buffer
  2445  000300  6E1B               	movwf	CRC8@data,c
  2446  000302  0E02               	movlw	high _rx_buffer
  2447  000304  6E1C               	movwf	CRC8@data+1,c
  2448  000306  C043  F01D         	movff	_rx_len,CRC8@len
  2449  00030A  EC3C  F00D         	call	_CRC8	;wreg free
  2450  00030E  6E3D               	movwf	_calc_CS,c
  2451                           
  2452                           ;FastTransfer.c: 144: if (calc_CS == rx_buffer[rx_array_inx - 1]) {
  2453  000310  0EFF               	movlw	255
  2454  000312  0100               	movlb	0	; () banked
  2455  000314  6FDA               	movwf	??_receiveData& (0+255),b
  2456  000316  0EFF               	movlw	255
  2457  000318  0100               	movlb	0	; () banked
  2458  00031A  6FDB               	movwf	(??_receiveData+1)& (0+255),b
  2459  00031C  5042               	movf	_rx_array_inx,w,c
  2460  00031E  0100               	movlb	0	; () banked
  2461  000320  6FDC               	movwf	(??_receiveData+2)& (0+255),b
  2462  000322  6BDD               	clrf	(??_receiveData+3)& (0+255),b
  2463  000324  0100               	movlb	0	; () banked
  2464  000326  51DA               	movf	??_receiveData& (0+255),w,b
  2465  000328  0100               	movlb	0	; () banked
  2466  00032A  27DC               	addwf	(??_receiveData+2)& (0+255),f,b
  2467  00032C  0100               	movlb	0	; () banked
  2468  00032E  51DB               	movf	(??_receiveData+1)& (0+255),w,b
  2469  000330  0100               	movlb	0	; () banked
  2470  000332  23DD               	addwfc	(??_receiveData+3)& (0+255),f,b
  2471  000334  0E00               	movlw	low _rx_buffer
  2472  000336  0100               	movlb	0	; () banked
  2473  000338  25DC               	addwf	(??_receiveData+2)& (0+255),w,b
  2474  00033A  6ED9               	movwf	fsr2l,c
  2475  00033C  0E02               	movlw	high _rx_buffer
  2476  00033E  0100               	movlb	0	; () banked
  2477  000340  21DD               	addwfc	(??_receiveData+3)& (0+255),w,b
  2478  000342  6EDA               	movwf	fsr2h,c
  2479  000344  503D               	movf	_calc_CS,w,c
  2480  000346  18DE               	xorwf	postinc2,w,c
  2481  000348  A4D8               	btfss	status,2,c
  2482  00034A  D139               	goto	l4075
  2483                           
  2484                           ; BSR set to: 0
  2485                           ;FastTransfer.c: 147: int r;
  2486                           ;FastTransfer.c: 148: for (r = 0; r < rx_len; r = r + 3) {
  2487  00034C  0E00               	movlw	0
  2488  00034E  0100               	movlb	0	; () banked
  2489  000350  6FEB               	movwf	(receiveData@r+1)& (0+255),b
  2490  000352  0E00               	movlw	0
  2491  000354  6FEA               	movwf	receiveData@r& (0+255),b
  2492  000356  D05A               	goto	l4035
  2493  000358                     l4025:
  2494                           
  2495                           ; BSR set to: 0
  2496                           ;FastTransfer.c: 149: if (rx_buffer[r] < maxDataAddress) {
  2497  000358  0E00               	movlw	low _rx_buffer
  2498  00035A  0100               	movlb	0	; () banked
  2499  00035C  25EA               	addwf	receiveData@r& (0+255),w,b
  2500  00035E  6ED9               	movwf	fsr2l,c
  2501  000360  0E02               	movlw	high _rx_buffer
  2502  000362  0100               	movlb	0	; () banked
  2503  000364  21EB               	addwfc	(receiveData@r+1)& (0+255),w,b
  2504  000366  6EDA               	movwf	fsr2h,c
  2505  000368  503E               	movf	_maxDataAddress,w,c
  2506  00036A  5CDE               	subwf	postinc2,w,c
  2507  00036C  B0D8               	btfsc	status,0,c
  2508  00036E  D041               	goto	l4031
  2509                           
  2510                           ; BSR set to: 0
  2511                           ;FastTransfer.c: 150: group.parts[0] = rx_buffer[r + 1];
  2512  000370  0E01               	movlw	1
  2513  000372  0100               	movlb	0	; () banked
  2514  000374  25EA               	addwf	receiveData@r& (0+255),w,b
  2515  000376  0100               	movlb	0	; () banked
  2516  000378  6FDA               	movwf	??_receiveData& (0+255),b
  2517  00037A  0E00               	movlw	0
  2518  00037C  0100               	movlb	0	; () banked
  2519  00037E  21EB               	addwfc	(receiveData@r+1)& (0+255),w,b
  2520  000380  0100               	movlb	0	; () banked
  2521  000382  6FDB               	movwf	(??_receiveData+1)& (0+255),b
  2522  000384  0E00               	movlw	low _rx_buffer
  2523  000386  0100               	movlb	0	; () banked
  2524  000388  25DA               	addwf	??_receiveData& (0+255),w,b
  2525  00038A  6ED9               	movwf	fsr2l,c
  2526  00038C  0E02               	movlw	high _rx_buffer
  2527  00038E  0100               	movlb	0	; () banked
  2528  000390  21DB               	addwfc	(??_receiveData+1)& (0+255),w,b
  2529  000392  6EDA               	movwf	fsr2h,c
  2530  000394  50DF               	movf	indf2,w,c
  2531  000396  6E26               	movwf	_group,c
  2532                           
  2533                           ;FastTransfer.c: 151: group.parts[1] = rx_buffer[r + 2];
  2534  000398  0E02               	movlw	2
  2535  00039A  0100               	movlb	0	; () banked
  2536  00039C  25EA               	addwf	receiveData@r& (0+255),w,b
  2537  00039E  0100               	movlb	0	; () banked
  2538  0003A0  6FDA               	movwf	??_receiveData& (0+255),b
  2539  0003A2  0E00               	movlw	0
  2540  0003A4  0100               	movlb	0	; () banked
  2541  0003A6  21EB               	addwfc	(receiveData@r+1)& (0+255),w,b
  2542  0003A8  0100               	movlb	0	; () banked
  2543  0003AA  6FDB               	movwf	(??_receiveData+1)& (0+255),b
  2544  0003AC  0E00               	movlw	low _rx_buffer
  2545  0003AE  0100               	movlb	0	; () banked
  2546  0003B0  25DA               	addwf	??_receiveData& (0+255),w,b
  2547  0003B2  6ED9               	movwf	fsr2l,c
  2548  0003B4  0E02               	movlw	high _rx_buffer
  2549  0003B6  0100               	movlb	0	; () banked
  2550  0003B8  21DB               	addwfc	(??_receiveData+1)& (0+255),w,b
  2551  0003BA  6EDA               	movwf	fsr2h,c
  2552  0003BC  50DF               	movf	indf2,w,c
  2553  0003BE  6E27               	movwf	_group+1,c
  2554                           
  2555                           ; BSR set to: 0
  2556                           ;FastTransfer.c: 152: receiveArrayAddress[(rx_buffer[r])] = group.integer;
  2557  0003C0  0E00               	movlw	low _rx_buffer
  2558  0003C2  0100               	movlb	0	; () banked
  2559  0003C4  25EA               	addwf	receiveData@r& (0+255),w,b
  2560  0003C6  6ED9               	movwf	fsr2l,c
  2561  0003C8  0E02               	movlw	high _rx_buffer
  2562  0003CA  0100               	movlb	0	; () banked
  2563  0003CC  21EB               	addwfc	(receiveData@r+1)& (0+255),w,b
  2564  0003CE  6EDA               	movwf	fsr2h,c
  2565  0003D0  50DF               	movf	indf2,w,c
  2566  0003D2  0100               	movlb	0	; () banked
  2567  0003D4  6FDA               	movwf	??_receiveData& (0+255),b
  2568  0003D6  0100               	movlb	0	; () banked
  2569  0003D8  51DA               	movf	??_receiveData& (0+255),w,b
  2570  0003DA  0D02               	mullw	2
  2571  0003DC  50F3               	movf	prodl,w,c
  2572  0003DE  242C               	addwf	_receiveArrayAddress,w,c
  2573  0003E0  6ED9               	movwf	fsr2l,c
  2574  0003E2  50F4               	movf	prodh,w,c
  2575  0003E4  202D               	addwfc	_receiveArrayAddress+1,w,c
  2576  0003E6  6EDA               	movwf	fsr2h,c
  2577  0003E8  C026  FFDE         	movff	_group,postinc2
  2578  0003EC  C027  FFDD         	movff	_group+1,postdec2
  2579                           
  2580                           ;FastTransfer.c: 153: } else {
  2581  0003F0  D003               	goto	l4033
  2582  0003F2                     l4031:
  2583                           
  2584                           ; BSR set to: 0
  2585                           ;FastTransfer.c: 154: dataAdressErrorCounter++;
  2586  0003F2  0100               	movlb	0	; () banked
  2587  0003F4  4B96               	infsnz	_dataAdressErrorCounter& (0+255),f,b
  2588  0003F6  2B97               	incf	(_dataAdressErrorCounter+1)& (0+255),f,b
  2589  0003F8                     l4033:
  2590                           
  2591                           ; BSR set to: 0
  2592  0003F8  0E03               	movlw	3
  2593  0003FA  0100               	movlb	0	; () banked
  2594  0003FC  25EA               	addwf	receiveData@r& (0+255),w,b
  2595  0003FE  0100               	movlb	0	; () banked
  2596  000400  6FEA               	movwf	receiveData@r& (0+255),b
  2597  000402  0E00               	movlw	0
  2598  000404  0100               	movlb	0	; () banked
  2599  000406  21EB               	addwfc	(receiveData@r+1)& (0+255),w,b
  2600  000408  0100               	movlb	0	; () banked
  2601  00040A  6FEB               	movwf	(receiveData@r+1)& (0+255),b
  2602  00040C                     l4035:
  2603                           
  2604                           ; BSR set to: 0
  2605  00040C  5043               	movf	_rx_len,w,c
  2606  00040E  0100               	movlb	0	; () banked
  2607  000410  6FDA               	movwf	??_receiveData& (0+255),b
  2608  000412  6BDB               	clrf	(??_receiveData+1)& (0+255),b
  2609  000414  0100               	movlb	0	; () banked
  2610  000416  51DA               	movf	??_receiveData& (0+255),w,b
  2611  000418  0100               	movlb	0	; () banked
  2612  00041A  5DEA               	subwf	receiveData@r& (0+255),w,b
  2613  00041C  0100               	movlb	0	; () banked
  2614  00041E  51EB               	movf	(receiveData@r+1)& (0+255),w,b
  2615  000420  0A80               	xorlw	128
  2616  000422  0100               	movlb	0	; () banked
  2617  000424  6FDC               	movwf	(??_receiveData+2)& (0+255),b
  2618  000426  0100               	movlb	0	; () banked
  2619  000428  51DB               	movf	(??_receiveData+1)& (0+255),w,b
  2620  00042A  0A80               	xorlw	128
  2621  00042C  0100               	movlb	0	; () banked
  2622  00042E  59DC               	subwfb	(??_receiveData+2)& (0+255),w,b
  2623  000430  A0D8               	btfss	status,0,c
  2624  000432  D792               	goto	l4025
  2625                           
  2626                           ; BSR set to: 0
  2627                           ;FastTransfer.c: 155: }
  2628                           ;FastTransfer.c: 156: }
  2629                           ;FastTransfer.c: 159: if (AKNAKsend) {
  2630                           
  2631                           ; BSR set to: 0
  2632  000434  503C               	movf	_AKNAKsend,w,c
  2633  000436  B4D8               	btfsc	status,2,c
  2634  000438  D0BC               	goto	l4065
  2635                           
  2636                           ; BSR set to: 0
  2637                           ;FastTransfer.c: 160: unsigned char holder[3];
  2638                           ;FastTransfer.c: 161: holder[0] = 255;
  2639  00043A  0100               	movlb	0	; () banked
  2640  00043C  69E0               	setf	receiveData@holder& (0+255),b
  2641                           
  2642                           ; BSR set to: 0
  2643                           ;FastTransfer.c: 162: holder[1] = 1;
  2644  00043E  0E01               	movlw	1
  2645  000440  0100               	movlb	0	; () banked
  2646  000442  6FE1               	movwf	(receiveData@holder+1)& (0+255),b
  2647                           
  2648                           ; BSR set to: 0
  2649                           ;FastTransfer.c: 163: holder[2] = rx_buffer[rx_array_inx - 1];
  2650  000444  0EFF               	movlw	255
  2651  000446  0100               	movlb	0	; () banked
  2652  000448  6FDA               	movwf	??_receiveData& (0+255),b
  2653  00044A  0EFF               	movlw	255
  2654  00044C  0100               	movlb	0	; () banked
  2655  00044E  6FDB               	movwf	(??_receiveData+1)& (0+255),b
  2656  000450  5042               	movf	_rx_array_inx,w,c
  2657  000452  0100               	movlb	0	; () banked
  2658  000454  6FDC               	movwf	(??_receiveData+2)& (0+255),b
  2659  000456  6BDD               	clrf	(??_receiveData+3)& (0+255),b
  2660  000458  0100               	movlb	0	; () banked
  2661  00045A  51DA               	movf	??_receiveData& (0+255),w,b
  2662  00045C  0100               	movlb	0	; () banked
  2663  00045E  27DC               	addwf	(??_receiveData+2)& (0+255),f,b
  2664  000460  0100               	movlb	0	; () banked
  2665  000462  51DB               	movf	(??_receiveData+1)& (0+255),w,b
  2666  000464  0100               	movlb	0	; () banked
  2667  000466  23DD               	addwfc	(??_receiveData+3)& (0+255),f,b
  2668  000468  0E00               	movlw	low _rx_buffer
  2669  00046A  0100               	movlb	0	; () banked
  2670  00046C  25DC               	addwf	(??_receiveData+2)& (0+255),w,b
  2671  00046E  6ED9               	movwf	fsr2l,c
  2672  000470  0E02               	movlw	high _rx_buffer
  2673  000472  0100               	movlb	0	; () banked
  2674  000474  21DD               	addwfc	(??_receiveData+3)& (0+255),w,b
  2675  000476  6EDA               	movwf	fsr2h,c
  2676  000478  50DF               	movf	indf2,w,c
  2677  00047A  0100               	movlb	0	; () banked
  2678  00047C  6FE2               	movwf	(receiveData@holder+2)& (0+255),b
  2679                           
  2680                           ; BSR set to: 0
  2681                           ;FastTransfer.c: 164: unsigned char crcHolder = CRC8(holder, 3);
  2682  00047E  0EE0               	movlw	low receiveData@holder
  2683  000480  6E1B               	movwf	CRC8@data,c
  2684  000482  0E00               	movlw	high receiveData@holder
  2685  000484  6E1C               	movwf	CRC8@data+1,c
  2686  000486  0E03               	movlw	3
  2687  000488  6E1D               	movwf	CRC8@len,c
  2688  00048A  EC3C  F00D         	call	_CRC8	;wreg free
  2689  00048E  0100               	movlb	0	; () banked
  2690  000490  6FE6               	movwf	receiveData@crcHolder& (0+255),b
  2691                           
  2692                           ; BSR set to: 0
  2693                           ;FastTransfer.c: 165: serial_write(0x06);
  2694  000492  D801               	call	u3688
  2695  000494  D00B               	goto	l4049
  2696  000496                     u3688:
  2697  000496  0005               	push	
  2698  000498  6EFA               	movwf	pclath,c
  2699  00049A  5036               	movf	_serial_write,w,c
  2700  00049C  6EFD               	movwf	tosl,c
  2701  00049E  5037               	movf	_serial_write+1,w,c
  2702  0004A0  6EFE               	movwf	tosh,c
  2703  0004A2  50F8               	movf	tblptru,w,c
  2704  0004A4  6EFF               	movwf	tosu,c
  2705  0004A6  50FA               	movf	pclath,w,c
  2706  0004A8  0E06               	movlw	6
  2707  0004AA  0012               	return		;indir
  2708  0004AC                     l4049:
  2709                           
  2710                           ;FastTransfer.c: 166: serial_write(0x85);
  2711  0004AC  D801               	call	u3698
  2712  0004AE  D00B               	goto	l4051
  2713  0004B0                     u3698:
  2714  0004B0  0005               	push	
  2715  0004B2  6EFA               	movwf	pclath,c
  2716  0004B4  5036               	movf	_serial_write,w,c
  2717  0004B6  6EFD               	movwf	tosl,c
  2718  0004B8  5037               	movf	_serial_write+1,w,c
  2719  0004BA  6EFE               	movwf	tosh,c
  2720  0004BC  50F8               	movf	tblptru,w,c
  2721  0004BE  6EFF               	movwf	tosu,c
  2722  0004C0  50FA               	movf	pclath,w,c
  2723  0004C2  0E85               	movlw	133
  2724  0004C4  0012               	return		;indir
  2725  0004C6                     l4051:
  2726                           
  2727                           ;FastTransfer.c: 167: serial_write(returnAddress);
  2728  0004C6  D801               	call	u3708
  2729  0004C8  D00B               	goto	l4053
  2730  0004CA                     u3708:
  2731  0004CA  0005               	push	
  2732  0004CC  6EFA               	movwf	pclath,c
  2733  0004CE  5036               	movf	_serial_write,w,c
  2734  0004D0  6EFD               	movwf	tosl,c
  2735  0004D2  5037               	movf	_serial_write+1,w,c
  2736  0004D4  6EFE               	movwf	tosh,c
  2737  0004D6  50F8               	movf	tblptru,w,c
  2738  0004D8  6EFF               	movwf	tosu,c
  2739  0004DA  50FA               	movf	pclath,w,c
  2740  0004DC  5040               	movf	_returnAddress,w,c
  2741  0004DE  0012               	return		;indir
  2742  0004E0                     l4053:
  2743                           
  2744                           ;FastTransfer.c: 168: serial_write(moduleAddress);
  2745  0004E0  D801               	call	u3718
  2746  0004E2  D00B               	goto	l4055
  2747  0004E4                     u3718:
  2748  0004E4  0005               	push	
  2749  0004E6  6EFA               	movwf	pclath,c
  2750  0004E8  5036               	movf	_serial_write,w,c
  2751  0004EA  6EFD               	movwf	tosl,c
  2752  0004EC  5037               	movf	_serial_write+1,w,c
  2753  0004EE  6EFE               	movwf	tosh,c
  2754  0004F0  50F8               	movf	tblptru,w,c
  2755  0004F2  6EFF               	movwf	tosu,c
  2756  0004F4  50FA               	movf	pclath,w,c
  2757  0004F6  503F               	movf	_moduleAddress,w,c
  2758  0004F8  0012               	return		;indir
  2759  0004FA                     l4055:
  2760                           
  2761                           ;FastTransfer.c: 169: serial_write(3);
  2762  0004FA  D801               	call	u3728
  2763  0004FC  D00B               	goto	l4057
  2764  0004FE                     u3728:
  2765  0004FE  0005               	push	
  2766  000500  6EFA               	movwf	pclath,c
  2767  000502  5036               	movf	_serial_write,w,c
  2768  000504  6EFD               	movwf	tosl,c
  2769  000506  5037               	movf	_serial_write+1,w,c
  2770  000508  6EFE               	movwf	tosh,c
  2771  00050A  50F8               	movf	tblptru,w,c
  2772  00050C  6EFF               	movwf	tosu,c
  2773  00050E  50FA               	movf	pclath,w,c
  2774  000510  0E03               	movlw	3
  2775  000512  0012               	return		;indir
  2776  000514                     l4057:
  2777                           
  2778                           ;FastTransfer.c: 170: serial_write(255);
  2779  000514  D801               	call	u3738
  2780  000516  D00B               	goto	l4059
  2781  000518                     u3738:
  2782  000518  0005               	push	
  2783  00051A  6EFA               	movwf	pclath,c
  2784  00051C  5036               	movf	_serial_write,w,c
  2785  00051E  6EFD               	movwf	tosl,c
  2786  000520  5037               	movf	_serial_write+1,w,c
  2787  000522  6EFE               	movwf	tosh,c
  2788  000524  50F8               	movf	tblptru,w,c
  2789  000526  6EFF               	movwf	tosu,c
  2790  000528  50FA               	movf	pclath,w,c
  2791  00052A  0EFF               	movlw	255
  2792  00052C  0012               	return		;indir
  2793  00052E                     l4059:
  2794                           
  2795                           ;FastTransfer.c: 171: serial_write(1);
  2796  00052E  D801               	call	u3748
  2797  000530  D00B               	goto	l4061
  2798  000532                     u3748:
  2799  000532  0005               	push	
  2800  000534  6EFA               	movwf	pclath,c
  2801  000536  5036               	movf	_serial_write,w,c
  2802  000538  6EFD               	movwf	tosl,c
  2803  00053A  5037               	movf	_serial_write+1,w,c
  2804  00053C  6EFE               	movwf	tosh,c
  2805  00053E  50F8               	movf	tblptru,w,c
  2806  000540  6EFF               	movwf	tosu,c
  2807  000542  50FA               	movf	pclath,w,c
  2808  000544  0E01               	movlw	1
  2809  000546  0012               	return		;indir
  2810  000548                     l4061:
  2811                           
  2812                           ;FastTransfer.c: 172: serial_write(rx_buffer[rx_array_inx - 1]);
  2813  000548  D801               	call	u3758
  2814  00054A  D025               	goto	l4063
  2815  00054C                     u3758:
  2816  00054C  0005               	push	
  2817  00054E  6EFA               	movwf	pclath,c
  2818  000550  5036               	movf	_serial_write,w,c
  2819  000552  6EFD               	movwf	tosl,c
  2820  000554  5037               	movf	_serial_write+1,w,c
  2821  000556  6EFE               	movwf	tosh,c
  2822  000558  50F8               	movf	tblptru,w,c
  2823  00055A  6EFF               	movwf	tosu,c
  2824  00055C  50FA               	movf	pclath,w,c
  2825  00055E  0EFF               	movlw	255
  2826  000560  0100               	movlb	0	; () banked
  2827  000562  6FDA               	movwf	??_receiveData& (0+255),b
  2828  000564  0EFF               	movlw	255
  2829  000566  0100               	movlb	0	; () banked
  2830  000568  6FDB               	movwf	(??_receiveData+1)& (0+255),b
  2831  00056A  5042               	movf	_rx_array_inx,w,c
  2832  00056C  0100               	movlb	0	; () banked
  2833  00056E  6FDC               	movwf	(??_receiveData+2)& (0+255),b
  2834  000570  6BDD               	clrf	(??_receiveData+3)& (0+255),b
  2835  000572  0100               	movlb	0	; () banked
  2836  000574  51DA               	movf	??_receiveData& (0+255),w,b
  2837  000576  0100               	movlb	0	; () banked
  2838  000578  27DC               	addwf	(??_receiveData+2)& (0+255),f,b
  2839  00057A  0100               	movlb	0	; () banked
  2840  00057C  51DB               	movf	(??_receiveData+1)& (0+255),w,b
  2841  00057E  0100               	movlb	0	; () banked
  2842  000580  23DD               	addwfc	(??_receiveData+3)& (0+255),f,b
  2843  000582  0E00               	movlw	low _rx_buffer
  2844  000584  0100               	movlb	0	; () banked
  2845  000586  25DC               	addwf	(??_receiveData+2)& (0+255),w,b
  2846  000588  6ED9               	movwf	fsr2l,c
  2847  00058A  0E02               	movlw	high _rx_buffer
  2848  00058C  0100               	movlb	0	; () banked
  2849  00058E  21DD               	addwfc	(??_receiveData+3)& (0+255),w,b
  2850  000590  6EDA               	movwf	fsr2h,c
  2851  000592  50DF               	movf	indf2,w,c
  2852  000594  0012               	return		;indir
  2853  000596                     l4063:
  2854                           
  2855                           ;FastTransfer.c: 173: serial_write(crcHolder);
  2856  000596  D801               	call	u3768
  2857  000598  D00C               	goto	l4065
  2858  00059A                     u3768:
  2859  00059A  0005               	push	
  2860  00059C  6EFA               	movwf	pclath,c
  2861  00059E  5036               	movf	_serial_write,w,c
  2862  0005A0  6EFD               	movwf	tosl,c
  2863  0005A2  5037               	movf	_serial_write+1,w,c
  2864  0005A4  6EFE               	movwf	tosh,c
  2865  0005A6  50F8               	movf	tblptru,w,c
  2866  0005A8  6EFF               	movwf	tosu,c
  2867  0005AA  50FA               	movf	pclath,w,c
  2868  0005AC  0100               	movlb	0	; () banked
  2869  0005AE  51E6               	movf	receiveData@crcHolder& (0+255),w,b
  2870  0005B0  0012               	return		;indir
  2871  0005B2                     l4065:
  2872                           
  2873                           ;FastTransfer.c: 174: }
  2874                           ;FastTransfer.c: 178: rx_len = 0;
  2875  0005B2  0E00               	movlw	0
  2876  0005B4  6E43               	movwf	_rx_len,c
  2877                           
  2878                           ;FastTransfer.c: 179: rx_array_inx = 0;
  2879  0005B6  0E00               	movlw	0
  2880  0005B8  6E42               	movwf	_rx_array_inx,c
  2881                           
  2882                           ;FastTransfer.c: 180: return 1;
  2883  0005BA  0E01               	movlw	1
  2884  0005BC  0012               	return	
  2885  0005BE                     l4075:
  2886                           
  2887                           ;FastTransfer.c: 182: crcErrorCounter++;
  2888  0005BE  0100               	movlb	0	; () banked
  2889  0005C0  4B94               	infsnz	_crcErrorCounter& (0+255),f,b
  2890  0005C2  2B95               	incf	(_crcErrorCounter+1)& (0+255),f,b
  2891                           
  2892                           ; BSR set to: 0
  2893                           ;FastTransfer.c: 184: if (AKNAKsend) {
  2894  0005C4  503C               	movf	_AKNAKsend,w,c
  2895  0005C6  B4D8               	btfsc	status,2,c
  2896  0005C8  D0BC               	goto	l4105
  2897                           
  2898                           ; BSR set to: 0
  2899                           ;FastTransfer.c: 185: unsigned char holder[3];
  2900                           ;FastTransfer.c: 186: holder[0] = 255;
  2901  0005CA  0100               	movlb	0	; () banked
  2902  0005CC  69E3               	setf	receiveData@holder_1382& (0+255),b
  2903                           
  2904                           ; BSR set to: 0
  2905                           ;FastTransfer.c: 187: holder[1] = 2;
  2906  0005CE  0E02               	movlw	2
  2907  0005D0  0100               	movlb	0	; () banked
  2908  0005D2  6FE4               	movwf	(receiveData@holder_1382+1)& (0+255),b
  2909                           
  2910                           ; BSR set to: 0
  2911                           ;FastTransfer.c: 188: holder[2] = rx_buffer[rx_array_inx - 1];
  2912  0005D4  0EFF               	movlw	255
  2913  0005D6  0100               	movlb	0	; () banked
  2914  0005D8  6FDA               	movwf	??_receiveData& (0+255),b
  2915  0005DA  0EFF               	movlw	255
  2916  0005DC  0100               	movlb	0	; () banked
  2917  0005DE  6FDB               	movwf	(??_receiveData+1)& (0+255),b
  2918  0005E0  5042               	movf	_rx_array_inx,w,c
  2919  0005E2  0100               	movlb	0	; () banked
  2920  0005E4  6FDC               	movwf	(??_receiveData+2)& (0+255),b
  2921  0005E6  6BDD               	clrf	(??_receiveData+3)& (0+255),b
  2922  0005E8  0100               	movlb	0	; () banked
  2923  0005EA  51DA               	movf	??_receiveData& (0+255),w,b
  2924  0005EC  0100               	movlb	0	; () banked
  2925  0005EE  27DC               	addwf	(??_receiveData+2)& (0+255),f,b
  2926  0005F0  0100               	movlb	0	; () banked
  2927  0005F2  51DB               	movf	(??_receiveData+1)& (0+255),w,b
  2928  0005F4  0100               	movlb	0	; () banked
  2929  0005F6  23DD               	addwfc	(??_receiveData+3)& (0+255),f,b
  2930  0005F8  0E00               	movlw	low _rx_buffer
  2931  0005FA  0100               	movlb	0	; () banked
  2932  0005FC  25DC               	addwf	(??_receiveData+2)& (0+255),w,b
  2933  0005FE  6ED9               	movwf	fsr2l,c
  2934  000600  0E02               	movlw	high _rx_buffer
  2935  000602  0100               	movlb	0	; () banked
  2936  000604  21DD               	addwfc	(??_receiveData+3)& (0+255),w,b
  2937  000606  6EDA               	movwf	fsr2h,c
  2938  000608  50DF               	movf	indf2,w,c
  2939  00060A  0100               	movlb	0	; () banked
  2940  00060C  6FE5               	movwf	(receiveData@holder_1382+2)& (0+255),b
  2941                           
  2942                           ; BSR set to: 0
  2943                           ;FastTransfer.c: 189: unsigned char crcHolder = CRC8(holder, 3);
  2944  00060E  0EE3               	movlw	low receiveData@holder_1382
  2945  000610  6E1B               	movwf	CRC8@data,c
  2946  000612  0E00               	movlw	high receiveData@holder_1382
  2947  000614  6E1C               	movwf	CRC8@data+1,c
  2948  000616  0E03               	movlw	3
  2949  000618  6E1D               	movwf	CRC8@len,c
  2950  00061A  EC3C  F00D         	call	_CRC8
  2951  00061E  0100               	movlb	0	; () banked
  2952  000620  6FE7               	movwf	receiveData@crcHolder_1383& (0+255),b
  2953                           
  2954                           ; BSR set to: 0
  2955                           ;FastTransfer.c: 190: serial_write(0x06);
  2956  000622  D801               	call	u3788
  2957  000624  D00B               	goto	l4089
  2958  000626                     u3788:
  2959  000626  0005               	push	
  2960  000628  6EFA               	movwf	pclath,c
  2961  00062A  5036               	movf	_serial_write,w,c
  2962  00062C  6EFD               	movwf	tosl,c
  2963  00062E  5037               	movf	_serial_write+1,w,c
  2964  000630  6EFE               	movwf	tosh,c
  2965  000632  50F8               	movf	tblptru,w,c
  2966  000634  6EFF               	movwf	tosu,c
  2967  000636  50FA               	movf	pclath,w,c
  2968  000638  0E06               	movlw	6
  2969  00063A  0012               	return		;indir
  2970  00063C                     l4089:
  2971                           
  2972                           ;FastTransfer.c: 191: serial_write(0x85);
  2973  00063C  D801               	call	u3798
  2974  00063E  D00B               	goto	l4091
  2975  000640                     u3798:
  2976  000640  0005               	push	
  2977  000642  6EFA               	movwf	pclath,c
  2978  000644  5036               	movf	_serial_write,w,c
  2979  000646  6EFD               	movwf	tosl,c
  2980  000648  5037               	movf	_serial_write+1,w,c
  2981  00064A  6EFE               	movwf	tosh,c
  2982  00064C  50F8               	movf	tblptru,w,c
  2983  00064E  6EFF               	movwf	tosu,c
  2984  000650  50FA               	movf	pclath,w,c
  2985  000652  0E85               	movlw	133
  2986  000654  0012               	return		;indir
  2987  000656                     l4091:
  2988                           
  2989                           ;FastTransfer.c: 192: serial_write(returnAddress);
  2990  000656  D801               	call	u3808
  2991  000658  D00B               	goto	l4093
  2992  00065A                     u3808:
  2993  00065A  0005               	push	
  2994  00065C  6EFA               	movwf	pclath,c
  2995  00065E  5036               	movf	_serial_write,w,c
  2996  000660  6EFD               	movwf	tosl,c
  2997  000662  5037               	movf	_serial_write+1,w,c
  2998  000664  6EFE               	movwf	tosh,c
  2999  000666  50F8               	movf	tblptru,w,c
  3000  000668  6EFF               	movwf	tosu,c
  3001  00066A  50FA               	movf	pclath,w,c
  3002  00066C  5040               	movf	_returnAddress,w,c
  3003  00066E  0012               	return		;indir
  3004  000670                     l4093:
  3005                           
  3006                           ;FastTransfer.c: 193: serial_write(moduleAddress);
  3007  000670  D801               	call	u3818
  3008  000672  D00B               	goto	l4095
  3009  000674                     u3818:
  3010  000674  0005               	push	
  3011  000676  6EFA               	movwf	pclath,c
  3012  000678  5036               	movf	_serial_write,w,c
  3013  00067A  6EFD               	movwf	tosl,c
  3014  00067C  5037               	movf	_serial_write+1,w,c
  3015  00067E  6EFE               	movwf	tosh,c
  3016  000680  50F8               	movf	tblptru,w,c
  3017  000682  6EFF               	movwf	tosu,c
  3018  000684  50FA               	movf	pclath,w,c
  3019  000686  503F               	movf	_moduleAddress,w,c
  3020  000688  0012               	return		;indir
  3021  00068A                     l4095:
  3022                           
  3023                           ;FastTransfer.c: 194: serial_write(3);
  3024  00068A  D801               	call	u3828
  3025  00068C  D00B               	goto	l4097
  3026  00068E                     u3828:
  3027  00068E  0005               	push	
  3028  000690  6EFA               	movwf	pclath,c
  3029  000692  5036               	movf	_serial_write,w,c
  3030  000694  6EFD               	movwf	tosl,c
  3031  000696  5037               	movf	_serial_write+1,w,c
  3032  000698  6EFE               	movwf	tosh,c
  3033  00069A  50F8               	movf	tblptru,w,c
  3034  00069C  6EFF               	movwf	tosu,c
  3035  00069E  50FA               	movf	pclath,w,c
  3036  0006A0  0E03               	movlw	3
  3037  0006A2  0012               	return		;indir
  3038  0006A4                     l4097:
  3039                           
  3040                           ;FastTransfer.c: 195: serial_write(255);
  3041  0006A4  D801               	call	u3838
  3042  0006A6  D00B               	goto	l4099
  3043  0006A8                     u3838:
  3044  0006A8  0005               	push	
  3045  0006AA  6EFA               	movwf	pclath,c
  3046  0006AC  5036               	movf	_serial_write,w,c
  3047  0006AE  6EFD               	movwf	tosl,c
  3048  0006B0  5037               	movf	_serial_write+1,w,c
  3049  0006B2  6EFE               	movwf	tosh,c
  3050  0006B4  50F8               	movf	tblptru,w,c
  3051  0006B6  6EFF               	movwf	tosu,c
  3052  0006B8  50FA               	movf	pclath,w,c
  3053  0006BA  0EFF               	movlw	255
  3054  0006BC  0012               	return		;indir
  3055  0006BE                     l4099:
  3056                           
  3057                           ;FastTransfer.c: 196: serial_write(2);
  3058  0006BE  D801               	call	u3848
  3059  0006C0  D00B               	goto	l4101
  3060  0006C2                     u3848:
  3061  0006C2  0005               	push	
  3062  0006C4  6EFA               	movwf	pclath,c
  3063  0006C6  5036               	movf	_serial_write,w,c
  3064  0006C8  6EFD               	movwf	tosl,c
  3065  0006CA  5037               	movf	_serial_write+1,w,c
  3066  0006CC  6EFE               	movwf	tosh,c
  3067  0006CE  50F8               	movf	tblptru,w,c
  3068  0006D0  6EFF               	movwf	tosu,c
  3069  0006D2  50FA               	movf	pclath,w,c
  3070  0006D4  0E02               	movlw	2
  3071  0006D6  0012               	return		;indir
  3072  0006D8                     l4101:
  3073                           
  3074                           ;FastTransfer.c: 197: serial_write(rx_buffer[rx_array_inx - 1]);
  3075  0006D8  D801               	call	u3858
  3076  0006DA  D025               	goto	l4103
  3077  0006DC                     u3858:
  3078  0006DC  0005               	push	
  3079  0006DE  6EFA               	movwf	pclath,c
  3080  0006E0  5036               	movf	_serial_write,w,c
  3081  0006E2  6EFD               	movwf	tosl,c
  3082  0006E4  5037               	movf	_serial_write+1,w,c
  3083  0006E6  6EFE               	movwf	tosh,c
  3084  0006E8  50F8               	movf	tblptru,w,c
  3085  0006EA  6EFF               	movwf	tosu,c
  3086  0006EC  50FA               	movf	pclath,w,c
  3087  0006EE  0EFF               	movlw	255
  3088  0006F0  0100               	movlb	0	; () banked
  3089  0006F2  6FDA               	movwf	??_receiveData& (0+255),b
  3090  0006F4  0EFF               	movlw	255
  3091  0006F6  0100               	movlb	0	; () banked
  3092  0006F8  6FDB               	movwf	(??_receiveData+1)& (0+255),b
  3093  0006FA  5042               	movf	_rx_array_inx,w,c
  3094  0006FC  0100               	movlb	0	; () banked
  3095  0006FE  6FDC               	movwf	(??_receiveData+2)& (0+255),b
  3096  000700  6BDD               	clrf	(??_receiveData+3)& (0+255),b
  3097  000702  0100               	movlb	0	; () banked
  3098  000704  51DA               	movf	??_receiveData& (0+255),w,b
  3099  000706  0100               	movlb	0	; () banked
  3100  000708  27DC               	addwf	(??_receiveData+2)& (0+255),f,b
  3101  00070A  0100               	movlb	0	; () banked
  3102  00070C  51DB               	movf	(??_receiveData+1)& (0+255),w,b
  3103  00070E  0100               	movlb	0	; () banked
  3104  000710  23DD               	addwfc	(??_receiveData+3)& (0+255),f,b
  3105  000712  0E00               	movlw	low _rx_buffer
  3106  000714  0100               	movlb	0	; () banked
  3107  000716  25DC               	addwf	(??_receiveData+2)& (0+255),w,b
  3108  000718  6ED9               	movwf	fsr2l,c
  3109  00071A  0E02               	movlw	high _rx_buffer
  3110  00071C  0100               	movlb	0	; () banked
  3111  00071E  21DD               	addwfc	(??_receiveData+3)& (0+255),w,b
  3112  000720  6EDA               	movwf	fsr2h,c
  3113  000722  50DF               	movf	indf2,w,c
  3114  000724  0012               	return		;indir
  3115  000726                     l4103:
  3116                           
  3117                           ;FastTransfer.c: 198: serial_write(crcHolder);
  3118  000726  D801               	call	u3868
  3119  000728  D00C               	goto	l4105
  3120  00072A                     u3868:
  3121  00072A  0005               	push	
  3122  00072C  6EFA               	movwf	pclath,c
  3123  00072E  5036               	movf	_serial_write,w,c
  3124  000730  6EFD               	movwf	tosl,c
  3125  000732  5037               	movf	_serial_write+1,w,c
  3126  000734  6EFE               	movwf	tosh,c
  3127  000736  50F8               	movf	tblptru,w,c
  3128  000738  6EFF               	movwf	tosu,c
  3129  00073A  50FA               	movf	pclath,w,c
  3130  00073C  0100               	movlb	0	; () banked
  3131  00073E  51E7               	movf	receiveData@crcHolder_1383& (0+255),w,b
  3132  000740  0012               	return		;indir
  3133  000742                     l4105:
  3134                           
  3135                           ;FastTransfer.c: 199: }
  3136                           ;FastTransfer.c: 202: rx_len = 0;
  3137  000742  0E00               	movlw	0
  3138  000744  6E43               	movwf	_rx_len,c
  3139                           
  3140                           ;FastTransfer.c: 203: rx_array_inx = 0;
  3141  000746  0E00               	movlw	0
  3142  000748  6E42               	movwf	_rx_array_inx,c
  3143                           
  3144                           ;FastTransfer.c: 204: return 0;
  3145  00074A  0E00               	movlw	0
  3146  00074C  0012               	return	
  3147  00074E                     l4113:
  3148                           
  3149                           ;FastTransfer.c: 205: }
  3150                           ;FastTransfer.c: 206: }
  3151                           ;FastTransfer.c: 207: }
  3152                           ;FastTransfer.c: 210: return 0;
  3153  00074E  0E00               	movlw	0
  3154  000750  0012               	return	
  3155  000752                     __end_of_receiveData:
  3156                           	opt stack 0
  3157                           tosu	equ	0xFFF
  3158                           tosh	equ	0xFFE
  3159                           tosl	equ	0xFFD
  3160                           pclath	equ	0xFFA
  3161                           tblptru	equ	0xFF8
  3162                           tblptrh	equ	0xFF7
  3163                           tblptrl	equ	0xFF6
  3164                           tablat	equ	0xFF5
  3165                           prodh	equ	0xFF4
  3166                           prodl	equ	0xFF3
  3167                           intcon	equ	0xFF2
  3168                           postinc0	equ	0xFEE
  3169                           wreg	equ	0xFE8
  3170                           indf2	equ	0xFDF
  3171                           postinc2	equ	0xFDE
  3172                           postdec2	equ	0xFDD
  3173                           plusw2	equ	0xFDB
  3174                           fsr2h	equ	0xFDA
  3175                           fsr2l	equ	0xFD9
  3176                           status	equ	0xFD8
  3177                           
  3178 ;; *************** function _Send_put *****************
  3179 ;; Defined at:
  3180 ;;		line 130 in file "UART.c"
  3181 ;; Parameters:    Size  Location     Type
  3182 ;;  _data           1    wreg     unsigned char 
  3183 ;; Auto vars:     Size  Location     Type
  3184 ;;  _data           1    0[BANK0 ] unsigned char 
  3185 ;; Return value:  Size  Location     Type
  3186 ;;                  1    wreg      void 
  3187 ;; Registers used:
  3188 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3189 ;; Tracked objects:
  3190 ;;		On entry : 0/0
  3191 ;;		On exit  : 0/0
  3192 ;;		Unchanged: 0/0
  3193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3194 ;;      Params:         0       0       0       0       0       0       0
  3195 ;;      Locals:         0       1       0       0       0       0       0
  3196 ;;      Temps:          0       0       0       0       0       0       0
  3197 ;;      Totals:         0       1       0       0       0       0       0
  3198 ;;Total ram usage:        1 bytes
  3199 ;; Hardware stack levels used:    1
  3200 ;; Hardware stack levels required when called:    6
  3201 ;; This function calls:
  3202 ;;		_UART_buff_get
  3203 ;;		_UART_buff_put
  3204 ;; This function is called by:
  3205 ;;		_SYSTEM_Initialize
  3206 ;;		_putch
  3207 ;;		_sendData
  3208 ;;		_receiveData
  3209 ;; This function uses a non-reentrant model
  3210 ;;
  3211                           
  3212                           	psect	text10
  3213  001C1A                     __ptext10:
  3214                           	opt stack 0
  3215  001C1A                     _Send_put:
  3216                           	opt stack 21
  3217                           
  3218                           ;incstack = 0
  3219                           ;Send_put@_data stored from wreg
  3220  001C1A  0100               	movlb	0	; () banked
  3221  001C1C  6FD1               	movwf	Send_put@_data& (0+255),b
  3222                           
  3223                           ;UART.c: 131: UART_buff_put(&output_buffer, _data);
  3224  001C1E  0E00               	movlw	low _output_buffer
  3225  001C20  6E21               	movwf	UART_buff_put@_this,c
  3226  001C22  0E04               	movlw	high _output_buffer
  3227  001C24  6E22               	movwf	UART_buff_put@_this+1,c
  3228  001C26  C0D1  F023         	movff	Send_put@_data,UART_buff_put@c
  3229  001C2A  EC58  F006         	call	_UART_buff_put
  3230                           
  3231                           ;UART.c: 132: if (Transmit_stall == 1) {
  3232  001C2E  0444               	decf	_Transmit_stall,w,c
  3233  001C30  A4D8               	btfss	status,2,c
  3234  001C32  0012               	return	
  3235                           
  3236                           ;UART.c: 133: Transmit_stall = 0;
  3237  001C34  0E00               	movlw	0
  3238  001C36  6E44               	movwf	_Transmit_stall,c
  3239                           
  3240                           ;UART.c: 134: TXREG1 = UART_buff_get(&output_buffer);
  3241  001C38  0E00               	movlw	low _output_buffer
  3242  001C3A  6E21               	movwf	UART_buff_get@_this,c
  3243  001C3C  0E04               	movlw	high _output_buffer
  3244  001C3E  6E22               	movwf	UART_buff_get@_this+1,c
  3245  001C40  EC6B  F00A         	call	_UART_buff_get	;wreg free
  3246  001C44  6EAD               	movwf	4013,c	;volatile
  3247                           
  3248                           ;UART.c: 135: PIE1bits.TX1IE = 1;
  3249  001C46  889D               	bsf	3997,4,c	;volatile
  3250  001C48  0012               	return	
  3251  001C4A                     __end_of_Send_put:
  3252                           	opt stack 0
  3253                           tosu	equ	0xFFF
  3254                           tosh	equ	0xFFE
  3255                           tosl	equ	0xFFD
  3256                           pclath	equ	0xFFA
  3257                           tblptru	equ	0xFF8
  3258                           tblptrh	equ	0xFF7
  3259                           tblptrl	equ	0xFF6
  3260                           tablat	equ	0xFF5
  3261                           prodh	equ	0xFF4
  3262                           prodl	equ	0xFF3
  3263                           intcon	equ	0xFF2
  3264                           postinc0	equ	0xFEE
  3265                           wreg	equ	0xFE8
  3266                           indf2	equ	0xFDF
  3267                           postinc2	equ	0xFDE
  3268                           postdec2	equ	0xFDD
  3269                           plusw2	equ	0xFDB
  3270                           fsr2h	equ	0xFDA
  3271                           fsr2l	equ	0xFD9
  3272                           status	equ	0xFD8
  3273                           
  3274 ;; *************** function _UART_buff_put *****************
  3275 ;; Defined at:
  3276 ;;		line 68 in file "UART.c"
  3277 ;; Parameters:    Size  Location     Type
  3278 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  3279 ;;		 -> output_buffer(206), input_buffer(206), 
  3280 ;;  c               1   34[COMRAM] const unsigned char 
  3281 ;; Auto vars:     Size  Location     Type
  3282 ;;		None
  3283 ;; Return value:  Size  Location     Type
  3284 ;;                  1    wreg      void 
  3285 ;; Registers used:
  3286 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3287 ;; Tracked objects:
  3288 ;;		On entry : 0/0
  3289 ;;		On exit  : 0/0
  3290 ;;		Unchanged: 0/0
  3291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3292 ;;      Params:         3       0       0       0       0       0       0
  3293 ;;      Locals:         0       0       0       0       0       0       0
  3294 ;;      Temps:          2       0       0       0       0       0       0
  3295 ;;      Totals:         5       0       0       0       0       0       0
  3296 ;;Total ram usage:        5 bytes
  3297 ;; Hardware stack levels used:    1
  3298 ;; Hardware stack levels required when called:    5
  3299 ;; This function calls:
  3300 ;;		_UART_buff_modulo_inc
  3301 ;; This function is called by:
  3302 ;;		_Send_put
  3303 ;; This function uses a non-reentrant model
  3304 ;;
  3305                           
  3306                           	psect	text11
  3307  000CB0                     __ptext11:
  3308                           	opt stack 0
  3309  000CB0                     _UART_buff_put:
  3310                           	opt stack 21
  3311                           
  3312                           ;UART.c: 69: if (_this->count < 200) {
  3313                           
  3314                           ;incstack = 0
  3315  000CB0  EE20 F0CC          	lfsr	2,204
  3316  000CB4  5021               	movf	UART_buff_put@_this,w,c
  3317  000CB6  26D9               	addwf	fsr2l,f,c
  3318  000CB8  5022               	movf	UART_buff_put@_this+1,w,c
  3319  000CBA  22DA               	addwfc	fsr2h,f,c
  3320  000CBC  0E01               	movlw	1
  3321  000CBE  BEDB               	btfsc	plusw2,7,c
  3322  000CC0  D007               	goto	l3663
  3323  000CC2  0E01               	movlw	1
  3324  000CC4  50DB               	movf	plusw2,w,c
  3325  000CC6  E13A               	bnz	l3669
  3326  000CC8  0EC8               	movlw	200
  3327  000CCA  5CDE               	subwf	postinc2,w,c
  3328  000CCC  B0D8               	btfsc	status,0,c
  3329  000CCE  D036               	goto	l3669
  3330  000CD0                     l3663:
  3331                           
  3332                           ;UART.c: 70: _this->buf[_this->head] = c;
  3333  000CD0  EE20 F0C8          	lfsr	2,200
  3334  000CD4  5021               	movf	UART_buff_put@_this,w,c
  3335  000CD6  26D9               	addwf	fsr2l,f,c
  3336  000CD8  5022               	movf	UART_buff_put@_this+1,w,c
  3337  000CDA  22DA               	addwfc	fsr2h,f,c
  3338  000CDC  CFDE F024          	movff	postinc2,??_UART_buff_put
  3339  000CE0  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  3340  000CE4  5024               	movf	??_UART_buff_put,w,c
  3341  000CE6  2421               	addwf	UART_buff_put@_this,w,c
  3342  000CE8  6ED9               	movwf	fsr2l,c
  3343  000CEA  5025               	movf	??_UART_buff_put+1,w,c
  3344  000CEC  2022               	addwfc	UART_buff_put@_this+1,w,c
  3345  000CEE  6EDA               	movwf	fsr2h,c
  3346  000CF0  C023  FFDF         	movff	UART_buff_put@c,indf2
  3347                           
  3348                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3349  000CF4  EE20 F0C8          	lfsr	2,200
  3350  000CF8  5021               	movf	UART_buff_put@_this,w,c
  3351  000CFA  26D9               	addwf	fsr2l,f,c
  3352  000CFC  5022               	movf	UART_buff_put@_this+1,w,c
  3353  000CFE  22DA               	addwfc	fsr2h,f,c
  3354  000D00  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3355  000D04  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3356  000D08  0E00               	movlw	0
  3357  000D0A  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3358  000D0C  0EC8               	movlw	200
  3359  000D0E  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3360  000D10  EC50  F00E         	call	_UART_buff_modulo_inc	;wreg free
  3361  000D14  EE20 F0C8          	lfsr	2,200
  3362  000D18  5021               	movf	UART_buff_put@_this,w,c
  3363  000D1A  26D9               	addwf	fsr2l,f,c
  3364  000D1C  5022               	movf	UART_buff_put@_this+1,w,c
  3365  000D1E  22DA               	addwfc	fsr2h,f,c
  3366  000D20  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3367  000D24  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3368                           
  3369                           ;UART.c: 72: ++_this->count;
  3370  000D28  EE20 F0CC          	lfsr	2,204
  3371  000D2C  5021               	movf	UART_buff_put@_this,w,c
  3372  000D2E  26D9               	addwf	fsr2l,f,c
  3373  000D30  5022               	movf	UART_buff_put@_this+1,w,c
  3374  000D32  22DA               	addwfc	fsr2h,f,c
  3375  000D34  2ADE               	incf	postinc2,f,c
  3376  000D36  0E00               	movlw	0
  3377  000D38  22DD               	addwfc	postdec2,f,c
  3378                           
  3379                           ;UART.c: 73: } else {
  3380  000D3A  0012               	return	
  3381  000D3C                     l3669:
  3382                           
  3383                           ;UART.c: 74: _this->buf[_this->head] = c;
  3384  000D3C  EE20 F0C8          	lfsr	2,200
  3385  000D40  5021               	movf	UART_buff_put@_this,w,c
  3386  000D42  26D9               	addwf	fsr2l,f,c
  3387  000D44  5022               	movf	UART_buff_put@_this+1,w,c
  3388  000D46  22DA               	addwfc	fsr2h,f,c
  3389  000D48  CFDE F024          	movff	postinc2,??_UART_buff_put
  3390  000D4C  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  3391  000D50  5024               	movf	??_UART_buff_put,w,c
  3392  000D52  2421               	addwf	UART_buff_put@_this,w,c
  3393  000D54  6ED9               	movwf	fsr2l,c
  3394  000D56  5025               	movf	??_UART_buff_put+1,w,c
  3395  000D58  2022               	addwfc	UART_buff_put@_this+1,w,c
  3396  000D5A  6EDA               	movwf	fsr2h,c
  3397  000D5C  C023  FFDF         	movff	UART_buff_put@c,indf2
  3398                           
  3399                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3400  000D60  EE20 F0C8          	lfsr	2,200
  3401  000D64  5021               	movf	UART_buff_put@_this,w,c
  3402  000D66  26D9               	addwf	fsr2l,f,c
  3403  000D68  5022               	movf	UART_buff_put@_this+1,w,c
  3404  000D6A  22DA               	addwfc	fsr2h,f,c
  3405  000D6C  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3406  000D70  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3407  000D74  0E00               	movlw	0
  3408  000D76  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3409  000D78  0EC8               	movlw	200
  3410  000D7A  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3411  000D7C  EC50  F00E         	call	_UART_buff_modulo_inc	;wreg free
  3412  000D80  EE20 F0C8          	lfsr	2,200
  3413  000D84  5021               	movf	UART_buff_put@_this,w,c
  3414  000D86  26D9               	addwf	fsr2l,f,c
  3415  000D88  5022               	movf	UART_buff_put@_this+1,w,c
  3416  000D8A  22DA               	addwfc	fsr2h,f,c
  3417  000D8C  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3418  000D90  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3419                           
  3420                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  3421  000D94  EE20 F0CA          	lfsr	2,202
  3422  000D98  5021               	movf	UART_buff_put@_this,w,c
  3423  000D9A  26D9               	addwf	fsr2l,f,c
  3424  000D9C  5022               	movf	UART_buff_put@_this+1,w,c
  3425  000D9E  22DA               	addwfc	fsr2h,f,c
  3426  000DA0  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3427  000DA4  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3428  000DA8  0E00               	movlw	0
  3429  000DAA  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3430  000DAC  0EC8               	movlw	200
  3431  000DAE  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3432  000DB0  EC50  F00E         	call	_UART_buff_modulo_inc	;wreg free
  3433  000DB4  EE20 F0CA          	lfsr	2,202
  3434  000DB8  5021               	movf	UART_buff_put@_this,w,c
  3435  000DBA  26D9               	addwf	fsr2l,f,c
  3436  000DBC  5022               	movf	UART_buff_put@_this+1,w,c
  3437  000DBE  22DA               	addwfc	fsr2h,f,c
  3438  000DC0  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3439  000DC4  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3440  000DC8  0012               	return	
  3441  000DCA                     __end_of_UART_buff_put:
  3442                           	opt stack 0
  3443                           tosu	equ	0xFFF
  3444                           tosh	equ	0xFFE
  3445                           tosl	equ	0xFFD
  3446                           pclath	equ	0xFFA
  3447                           tblptru	equ	0xFF8
  3448                           tblptrh	equ	0xFF7
  3449                           tblptrl	equ	0xFF6
  3450                           tablat	equ	0xFF5
  3451                           prodh	equ	0xFF4
  3452                           prodl	equ	0xFF3
  3453                           intcon	equ	0xFF2
  3454                           postinc0	equ	0xFEE
  3455                           wreg	equ	0xFE8
  3456                           indf2	equ	0xFDF
  3457                           postinc2	equ	0xFDE
  3458                           postdec2	equ	0xFDD
  3459                           plusw2	equ	0xFDB
  3460                           fsr2h	equ	0xFDA
  3461                           fsr2l	equ	0xFD9
  3462                           status	equ	0xFD8
  3463                           
  3464 ;; *************** function _Receive_peek *****************
  3465 ;; Defined at:
  3466 ;;		line 118 in file "UART.c"
  3467 ;; Parameters:    Size  Location     Type
  3468 ;;		None
  3469 ;; Auto vars:     Size  Location     Type
  3470 ;;		None
  3471 ;; Return value:  Size  Location     Type
  3472 ;;                  1    wreg      unsigned char 
  3473 ;; Registers used:
  3474 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3475 ;; Tracked objects:
  3476 ;;		On entry : 0/0
  3477 ;;		On exit  : 0/0
  3478 ;;		Unchanged: 0/0
  3479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3480 ;;      Params:         0       0       0       0       0       0       0
  3481 ;;      Locals:         0       0       0       0       0       0       0
  3482 ;;      Temps:          0       0       0       0       0       0       0
  3483 ;;      Totals:         0       0       0       0       0       0       0
  3484 ;;Total ram usage:        0 bytes
  3485 ;; Hardware stack levels used:    1
  3486 ;; Hardware stack levels required when called:    5
  3487 ;; This function calls:
  3488 ;;		_UART_buff_peek
  3489 ;; This function is called by:
  3490 ;;		_SYSTEM_Initialize
  3491 ;;		_receiveData
  3492 ;; This function uses a non-reentrant model
  3493 ;;
  3494                           
  3495                           	psect	text12
  3496  001E44                     __ptext12:
  3497                           	opt stack 0
  3498  001E44                     _Receive_peek:
  3499                           	opt stack 23
  3500                           
  3501                           ;UART.c: 119: return UART_buff_peek(&input_buffer);
  3502                           
  3503                           ;incstack = 0
  3504  001E44  0E00               	movlw	low _input_buffer
  3505  001E46  6E1B               	movwf	UART_buff_peek@_this,c
  3506  001E48  0E03               	movlw	high _input_buffer
  3507  001E4A  6E1C               	movwf	UART_buff_peek@_this+1,c
  3508  001E4C  EC7A  F00E         	call	_UART_buff_peek	;wreg free
  3509  001E50  0012               	return	
  3510  001E52                     __end_of_Receive_peek:
  3511                           	opt stack 0
  3512                           tosu	equ	0xFFF
  3513                           tosh	equ	0xFFE
  3514                           tosl	equ	0xFFD
  3515                           pclath	equ	0xFFA
  3516                           tblptru	equ	0xFF8
  3517                           tblptrh	equ	0xFF7
  3518                           tblptrl	equ	0xFF6
  3519                           tablat	equ	0xFF5
  3520                           prodh	equ	0xFF4
  3521                           prodl	equ	0xFF3
  3522                           intcon	equ	0xFF2
  3523                           postinc0	equ	0xFEE
  3524                           wreg	equ	0xFE8
  3525                           indf2	equ	0xFDF
  3526                           postinc2	equ	0xFDE
  3527                           postdec2	equ	0xFDD
  3528                           plusw2	equ	0xFDB
  3529                           fsr2h	equ	0xFDA
  3530                           fsr2l	equ	0xFD9
  3531                           status	equ	0xFD8
  3532                           
  3533 ;; *************** function _UART_buff_peek *****************
  3534 ;; Defined at:
  3535 ;;		line 114 in file "UART.c"
  3536 ;; Parameters:    Size  Location     Type
  3537 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  3538 ;;		 -> input_buffer(206), 
  3539 ;; Auto vars:     Size  Location     Type
  3540 ;;		None
  3541 ;; Return value:  Size  Location     Type
  3542 ;;                  1    wreg      unsigned char 
  3543 ;; Registers used:
  3544 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3545 ;; Tracked objects:
  3546 ;;		On entry : 0/0
  3547 ;;		On exit  : 0/0
  3548 ;;		Unchanged: 0/0
  3549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3550 ;;      Params:         2       0       0       0       0       0       0
  3551 ;;      Locals:         0       0       0       0       0       0       0
  3552 ;;      Temps:          2       0       0       0       0       0       0
  3553 ;;      Totals:         4       0       0       0       0       0       0
  3554 ;;Total ram usage:        4 bytes
  3555 ;; Hardware stack levels used:    1
  3556 ;; Hardware stack levels required when called:    4
  3557 ;; This function calls:
  3558 ;;		Nothing
  3559 ;; This function is called by:
  3560 ;;		_Receive_peek
  3561 ;; This function uses a non-reentrant model
  3562 ;;
  3563                           
  3564                           	psect	text13
  3565  001CF4                     __ptext13:
  3566                           	opt stack 0
  3567  001CF4                     _UART_buff_peek:
  3568                           	opt stack 23
  3569                           
  3570                           ;UART.c: 115: return _this->buf[_this->tail];
  3571                           
  3572                           ;incstack = 0
  3573  001CF4  EE20 F0CA          	lfsr	2,202
  3574  001CF8  501B               	movf	UART_buff_peek@_this,w,c
  3575  001CFA  26D9               	addwf	fsr2l,f,c
  3576  001CFC  501C               	movf	UART_buff_peek@_this+1,w,c
  3577  001CFE  22DA               	addwfc	fsr2h,f,c
  3578  001D00  CFDE F01D          	movff	postinc2,??_UART_buff_peek
  3579  001D04  CFDD F01E          	movff	postdec2,??_UART_buff_peek+1
  3580  001D08  501D               	movf	??_UART_buff_peek,w,c
  3581  001D0A  241B               	addwf	UART_buff_peek@_this,w,c
  3582  001D0C  6ED9               	movwf	fsr2l,c
  3583  001D0E  501E               	movf	??_UART_buff_peek+1,w,c
  3584  001D10  201C               	addwfc	UART_buff_peek@_this+1,w,c
  3585  001D12  6EDA               	movwf	fsr2h,c
  3586  001D14  50DF               	movf	indf2,w,c
  3587  001D16  0012               	return	
  3588  001D18                     __end_of_UART_buff_peek:
  3589                           	opt stack 0
  3590                           tosu	equ	0xFFF
  3591                           tosh	equ	0xFFE
  3592                           tosl	equ	0xFFD
  3593                           pclath	equ	0xFFA
  3594                           tblptru	equ	0xFF8
  3595                           tblptrh	equ	0xFF7
  3596                           tblptrl	equ	0xFF6
  3597                           tablat	equ	0xFF5
  3598                           prodh	equ	0xFF4
  3599                           prodl	equ	0xFF3
  3600                           intcon	equ	0xFF2
  3601                           postinc0	equ	0xFEE
  3602                           wreg	equ	0xFE8
  3603                           indf2	equ	0xFDF
  3604                           postinc2	equ	0xFDE
  3605                           postdec2	equ	0xFDD
  3606                           plusw2	equ	0xFDB
  3607                           fsr2h	equ	0xFDA
  3608                           fsr2l	equ	0xFD9
  3609                           status	equ	0xFD8
  3610                           
  3611 ;; *************** function _CRCcheck *****************
  3612 ;; Defined at:
  3613 ;;		line 373 in file "FastTransfer.c"
  3614 ;; Parameters:    Size  Location     Type
  3615 ;;		None
  3616 ;; Auto vars:     Size  Location     Type
  3617 ;;  rt              2    7[BANK0 ] int 
  3618 ;;  arrayHolder     3    4[BANK0 ] unsigned char [3]
  3619 ;;  calculatedCR    1    3[BANK0 ] unsigned char 
  3620 ;;  SentCRC         1    2[BANK0 ] unsigned char 
  3621 ;; Return value:  Size  Location     Type
  3622 ;;                  1    wreg      void 
  3623 ;; Registers used:
  3624 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  3625 ;; Tracked objects:
  3626 ;;		On entry : 0/0
  3627 ;;		On exit  : 0/0
  3628 ;;		Unchanged: 0/0
  3629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3630 ;;      Params:         0       0       0       0       0       0       0
  3631 ;;      Locals:         0       7       0       0       0       0       0
  3632 ;;      Temps:          0       0       0       0       0       0       0
  3633 ;;      Totals:         0       7       0       0       0       0       0
  3634 ;;Total ram usage:        7 bytes
  3635 ;; Hardware stack levels used:    1
  3636 ;; Hardware stack levels required when called:    7
  3637 ;; This function calls:
  3638 ;;		Absolute function
  3639 ;;		_CRC8
  3640 ;;		_Receive_available
  3641 ;;		_Receive_get
  3642 ;;		_crcBufS_get
  3643 ;;		_crcBufS_status_put
  3644 ;; This function is called by:
  3645 ;;		_receiveData
  3646 ;; This function uses a non-reentrant model
  3647 ;;
  3648                           
  3649                           	psect	text14
  3650  0008C6                     __ptext14:
  3651                           	opt stack 0
  3652  0008C6                     _CRCcheck:
  3653                           	opt stack 21
  3654  0008C6                     l3875:
  3655  0008C6  D801               	call	u3238
  3656  0008C8  D00A               	goto	u3239
  3657  0008CA                     u3238:
  3658  0008CA  0005               	push	
  3659  0008CC  6EFA               	movwf	pclath,c
  3660  0008CE  5030               	movf	_serial_available,w,c
  3661  0008D0  6EFD               	movwf	tosl,c
  3662  0008D2  5031               	movf	_serial_available+1,w,c
  3663  0008D4  6EFE               	movwf	tosh,c
  3664  0008D6  50F8               	movf	tblptru,w,c
  3665  0008D8  6EFF               	movwf	tosu,c
  3666  0008DA  50FA               	movf	pclath,w,c
  3667  0008DC  0012               	return		;indir
  3668  0008DE                     u3239:
  3669  0008DE  BE1E               	btfsc	?_Receive_available+1,7,c
  3670  0008E0  D7F2               	goto	l3875
  3671  0008E2  501E               	movf	?_Receive_available+1,w,c
  3672  0008E4  E104               	bnz	l3877
  3673  0008E6  0E04               	movlw	4
  3674  0008E8  5C1D               	subwf	?_Receive_available,w,c
  3675  0008EA  A0D8               	btfss	status,0,c
  3676  0008EC  D7EC               	goto	l3875
  3677  0008EE                     l3877:
  3678                           
  3679                           ;FastTransfer.c: 377: unsigned char arrayHolder[3];
  3680                           ;FastTransfer.c: 378: arrayHolder[0] = serial_read();
  3681  0008EE  D801               	call	u3258
  3682  0008F0  D00A               	goto	u3259
  3683  0008F2                     u3258:
  3684  0008F2  0005               	push	
  3685  0008F4  6EFA               	movwf	pclath,c
  3686  0008F6  5034               	movf	_serial_read,w,c
  3687  0008F8  6EFD               	movwf	tosl,c
  3688  0008FA  5035               	movf	_serial_read+1,w,c
  3689  0008FC  6EFE               	movwf	tosh,c
  3690  0008FE  50F8               	movf	tblptru,w,c
  3691  000900  6EFF               	movwf	tosu,c
  3692  000902  50FA               	movf	pclath,w,c
  3693  000904  0012               	return		;indir
  3694  000906                     u3259:
  3695  000906  0100               	movlb	0	; () banked
  3696  000908  6FD5               	movwf	CRCcheck@arrayHolder& (0+255),b
  3697                           
  3698                           ;FastTransfer.c: 379: arrayHolder[1] = serial_read();
  3699  00090A  D801               	call	u3268
  3700  00090C  D00A               	goto	u3269
  3701  00090E                     u3268:
  3702  00090E  0005               	push	
  3703  000910  6EFA               	movwf	pclath,c
  3704  000912  5034               	movf	_serial_read,w,c
  3705  000914  6EFD               	movwf	tosl,c
  3706  000916  5035               	movf	_serial_read+1,w,c
  3707  000918  6EFE               	movwf	tosh,c
  3708  00091A  50F8               	movf	tblptru,w,c
  3709  00091C  6EFF               	movwf	tosu,c
  3710  00091E  50FA               	movf	pclath,w,c
  3711  000920  0012               	return		;indir
  3712  000922                     u3269:
  3713  000922  0100               	movlb	0	; () banked
  3714  000924  6FD6               	movwf	(CRCcheck@arrayHolder+1)& (0+255),b
  3715                           
  3716                           ;FastTransfer.c: 380: arrayHolder[2] = serial_read();
  3717  000926  D801               	call	u3278
  3718  000928  D00A               	goto	u3279
  3719  00092A                     u3278:
  3720  00092A  0005               	push	
  3721  00092C  6EFA               	movwf	pclath,c
  3722  00092E  5034               	movf	_serial_read,w,c
  3723  000930  6EFD               	movwf	tosl,c
  3724  000932  5035               	movf	_serial_read+1,w,c
  3725  000934  6EFE               	movwf	tosh,c
  3726  000936  50F8               	movf	tblptru,w,c
  3727  000938  6EFF               	movwf	tosu,c
  3728  00093A  50FA               	movf	pclath,w,c
  3729  00093C  0012               	return		;indir
  3730  00093E                     u3279:
  3731  00093E  0100               	movlb	0	; () banked
  3732  000940  6FD7               	movwf	(CRCcheck@arrayHolder+2)& (0+255),b
  3733                           
  3734                           ;FastTransfer.c: 381: unsigned char SentCRC = serial_read();
  3735  000942  D801               	call	u3288
  3736  000944  D00A               	goto	u3289
  3737  000946                     u3288:
  3738  000946  0005               	push	
  3739  000948  6EFA               	movwf	pclath,c
  3740  00094A  5034               	movf	_serial_read,w,c
  3741  00094C  6EFD               	movwf	tosl,c
  3742  00094E  5035               	movf	_serial_read+1,w,c
  3743  000950  6EFE               	movwf	tosh,c
  3744  000952  50F8               	movf	tblptru,w,c
  3745  000954  6EFF               	movwf	tosu,c
  3746  000956  50FA               	movf	pclath,w,c
  3747  000958  0012               	return		;indir
  3748  00095A                     u3289:
  3749  00095A  0100               	movlb	0	; () banked
  3750  00095C  6FD3               	movwf	CRCcheck@SentCRC& (0+255),b
  3751                           
  3752                           ; BSR set to: 0
  3753                           ;FastTransfer.c: 382: unsigned char calculatedCRC = CRC8(arrayHolder, 3);
  3754  00095E  0ED5               	movlw	low CRCcheck@arrayHolder
  3755  000960  6E1B               	movwf	CRC8@data,c
  3756  000962  0E00               	movlw	high CRCcheck@arrayHolder
  3757  000964  6E1C               	movwf	CRC8@data+1,c
  3758  000966  0E03               	movlw	3
  3759  000968  6E1D               	movwf	CRC8@len,c
  3760  00096A  EC3C  F00D         	call	_CRC8	;wreg free
  3761  00096E  0100               	movlb	0	; () banked
  3762  000970  6FD4               	movwf	CRCcheck@calculatedCRC& (0+255),b
  3763                           
  3764                           ; BSR set to: 0
  3765                           ;FastTransfer.c: 385: if (SentCRC == calculatedCRC) {
  3766  000972  0100               	movlb	0	; () banked
  3767  000974  51D4               	movf	CRCcheck@calculatedCRC& (0+255),w,b
  3768  000976  0100               	movlb	0	; () banked
  3769  000978  19D3               	xorwf	CRCcheck@SentCRC& (0+255),w,b
  3770  00097A  A4D8               	btfss	status,2,c
  3771  00097C  D04E               	goto	l3907
  3772                           
  3773                           ; BSR set to: 0
  3774                           ;FastTransfer.c: 387: int rt;
  3775                           ;FastTransfer.c: 388: for (rt = 0; rt < 5; rt++) {
  3776  00097E  0E00               	movlw	0
  3777  000980  0100               	movlb	0	; () banked
  3778  000982  6FD9               	movwf	(CRCcheck@rt+1)& (0+255),b
  3779  000984  0E00               	movlw	0
  3780  000986  6FD8               	movwf	CRCcheck@rt& (0+255),b
  3781  000988                     l3885:
  3782                           
  3783                           ; BSR set to: 0
  3784  000988  0100               	movlb	0	; () banked
  3785  00098A  BFD9               	btfsc	(CRCcheck@rt+1)& (0+255),7,b
  3786  00098C  D008               	goto	l3889
  3787  00098E  0100               	movlb	0	; () banked
  3788  000990  51D9               	movf	(CRCcheck@rt+1)& (0+255),w,b
  3789  000992  E147               	bnz	l584
  3790  000994  0E05               	movlw	5
  3791  000996  0100               	movlb	0	; () banked
  3792  000998  5DD8               	subwf	CRCcheck@rt& (0+255),w,b
  3793  00099A  B0D8               	btfsc	status,0,c
  3794  00099C  0012               	return	
  3795  00099E                     l3889:
  3796                           
  3797                           ; BSR set to: 0
  3798                           ;FastTransfer.c: 389: if (returnAddress == crcBufS_get(&crc_buffer, rt, 0)) {
  3799  00099E  0EC0               	movlw	low _crc_buffer
  3800  0009A0  6E1B               	movwf	crcBufS_get@_this,c
  3801  0009A2  0E00               	movlw	high _crc_buffer
  3802  0009A4  6E1C               	movwf	crcBufS_get@_this+1,c
  3803  0009A6  C0D8  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  3804  0009AA  0E00               	movlw	0
  3805  0009AC  6E1E               	movwf	crcBufS_get@space,c
  3806  0009AE  EC72  F007         	call	_crcBufS_get	;wreg free
  3807  0009B2  1840               	xorwf	_returnAddress,w,c
  3808  0009B4  A4D8               	btfss	status,2,c
  3809  0009B6  D02D               	goto	l3903
  3810                           
  3811                           ;FastTransfer.c: 390: if (arrayHolder[2] == crcBufS_get(&crc_buffer, rt, 1)) {
  3812  0009B8  0EC0               	movlw	low _crc_buffer
  3813  0009BA  6E1B               	movwf	crcBufS_get@_this,c
  3814  0009BC  0E00               	movlw	high _crc_buffer
  3815  0009BE  6E1C               	movwf	crcBufS_get@_this+1,c
  3816  0009C0  C0D8  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  3817  0009C4  0E01               	movlw	1
  3818  0009C6  6E1E               	movwf	crcBufS_get@space,c
  3819  0009C8  EC72  F007         	call	_crcBufS_get	;wreg free
  3820  0009CC  0100               	movlb	0	; () banked
  3821  0009CE  19D7               	xorwf	(CRCcheck@arrayHolder+2)& (0+255),w,b
  3822  0009D0  A4D8               	btfss	status,2,c
  3823  0009D2  D01F               	goto	l3903
  3824                           
  3825                           ; BSR set to: 0
  3826                           ;FastTransfer.c: 391: if (arrayHolder[1] == 1) {
  3827  0009D4  0100               	movlb	0	; () banked
  3828  0009D6  05D6               	decf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  3829  0009D8  A4D8               	btfss	status,2,c
  3830  0009DA  D00B               	goto	l3899
  3831                           
  3832                           ; BSR set to: 0
  3833                           ;FastTransfer.c: 392: crcBufS_status_put(&crc_buffer, rt, 1);
  3834  0009DC  0EC0               	movlw	low _crc_buffer
  3835  0009DE  6E1B               	movwf	crcBufS_status_put@_this,c
  3836  0009E0  0E00               	movlw	high _crc_buffer
  3837  0009E2  6E1C               	movwf	crcBufS_status_put@_this+1,c
  3838  0009E4  C0D8  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  3839  0009E8  0E01               	movlw	1
  3840  0009EA  6E1E               	movwf	crcBufS_status_put@status,c
  3841  0009EC  EC35  F009         	call	_crcBufS_status_put	;wreg free
  3842                           
  3843                           ;FastTransfer.c: 393: break;
  3844  0009F0  0012               	return	
  3845  0009F2                     l3899:
  3846  0009F2  0E02               	movlw	2
  3847  0009F4  0100               	movlb	0	; () banked
  3848  0009F6  19D6               	xorwf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  3849  0009F8  A4D8               	btfss	status,2,c
  3850  0009FA  D00B               	goto	l3903
  3851                           
  3852                           ; BSR set to: 0
  3853                           ;FastTransfer.c: 395: crcBufS_status_put(&crc_buffer, rt, 2);
  3854  0009FC  0EC0               	movlw	low _crc_buffer
  3855  0009FE  6E1B               	movwf	crcBufS_status_put@_this,c
  3856  000A00  0E00               	movlw	high _crc_buffer
  3857  000A02  6E1C               	movwf	crcBufS_status_put@_this+1,c
  3858  000A04  C0D8  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  3859  000A08  0E02               	movlw	2
  3860  000A0A  6E1E               	movwf	crcBufS_status_put@status,c
  3861  000A0C  EC35  F009         	call	_crcBufS_status_put	;wreg free
  3862                           
  3863                           ;FastTransfer.c: 396: break;
  3864  000A10  0012               	return	
  3865  000A12                     l3903:
  3866  000A12  0100               	movlb	0	; () banked
  3867  000A14  4BD8               	infsnz	CRCcheck@rt& (0+255),f,b
  3868  000A16  2BD9               	incf	(CRCcheck@rt+1)& (0+255),f,b
  3869  000A18  D7B7               	goto	l3885
  3870  000A1A                     l3907:
  3871                           
  3872                           ; BSR set to: 0
  3873                           ;FastTransfer.c: 402: crcErrorCounter++;
  3874  000A1A  0100               	movlb	0	; () banked
  3875  000A1C  4B94               	infsnz	_crcErrorCounter& (0+255),f,b
  3876  000A1E  2B95               	incf	(_crcErrorCounter+1)& (0+255),f,b
  3877  000A20  0012               	return	
  3878  000A22                     l584:
  3879  000A22  0012               	return		;funcret
  3880  000A24                     __end_of_CRCcheck:
  3881                           	opt stack 0
  3882                           tosu	equ	0xFFF
  3883                           tosh	equ	0xFFE
  3884                           tosl	equ	0xFFD
  3885                           pclath	equ	0xFFA
  3886                           tblptru	equ	0xFF8
  3887                           tblptrh	equ	0xFF7
  3888                           tblptrl	equ	0xFF6
  3889                           tablat	equ	0xFF5
  3890                           prodh	equ	0xFF4
  3891                           prodl	equ	0xFF3
  3892                           intcon	equ	0xFF2
  3893                           postinc0	equ	0xFEE
  3894                           wreg	equ	0xFE8
  3895                           indf2	equ	0xFDF
  3896                           postinc2	equ	0xFDE
  3897                           postdec2	equ	0xFDD
  3898                           plusw2	equ	0xFDB
  3899                           fsr2h	equ	0xFDA
  3900                           fsr2l	equ	0xFD9
  3901                           status	equ	0xFD8
  3902                           
  3903 ;; *************** function _crcBufS_status_put *****************
  3904 ;; Defined at:
  3905 ;;		line 336 in file "FastTransfer.c"
  3906 ;; Parameters:    Size  Location     Type
  3907 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  3908 ;;		 -> crc_buffer(17), 
  3909 ;;  time            1   28[COMRAM] unsigned char 
  3910 ;;  status          1   29[COMRAM] unsigned char 
  3911 ;; Auto vars:     Size  Location     Type
  3912 ;;  wantedTime      2   34[COMRAM] int 
  3913 ;; Return value:  Size  Location     Type
  3914 ;;                  1    wreg      void 
  3915 ;; Registers used:
  3916 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3917 ;; Tracked objects:
  3918 ;;		On entry : 0/0
  3919 ;;		On exit  : 0/0
  3920 ;;		Unchanged: 0/0
  3921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3922 ;;      Params:         4       0       0       0       0       0       0
  3923 ;;      Locals:         2       0       0       0       0       0       0
  3924 ;;      Temps:          4       0       0       0       0       0       0
  3925 ;;      Totals:        10       0       0       0       0       0       0
  3926 ;;Total ram usage:       10 bytes
  3927 ;; Hardware stack levels used:    1
  3928 ;; Hardware stack levels required when called:    4
  3929 ;; This function calls:
  3930 ;;		Nothing
  3931 ;; This function is called by:
  3932 ;;		_CRCcheck
  3933 ;; This function uses a non-reentrant model
  3934 ;;
  3935                           
  3936                           	psect	text15
  3937  00126A                     __ptext15:
  3938                           	opt stack 0
  3939  00126A                     _crcBufS_status_put:
  3940                           	opt stack 23
  3941                           
  3942                           ;FastTransfer.c: 337: if (time >= 5) {
  3943                           
  3944                           ;incstack = 0
  3945  00126A  0E04               	movlw	4
  3946  00126C  641D               	cpfsgt	crcBufS_status_put@time,c
  3947  00126E  D002               	goto	l3771
  3948                           
  3949                           ;FastTransfer.c: 338: time = 5 - 1;
  3950  001270  0E04               	movlw	4
  3951  001272  6E1D               	movwf	crcBufS_status_put@time,c
  3952  001274                     l3771:
  3953                           
  3954                           ;FastTransfer.c: 339: }
  3955                           ;FastTransfer.c: 340: time = time + 1;
  3956  001274  281D               	incf	crcBufS_status_put@time,w,c
  3957  001276  6E1D               	movwf	crcBufS_status_put@time,c
  3958                           
  3959                           ;FastTransfer.c: 341: int wantedTime = time * 3;
  3960  001278  501D               	movf	crcBufS_status_put@time,w,c
  3961  00127A  0D03               	mullw	3
  3962  00127C  CFF3 F023          	movff	prodl,crcBufS_status_put@wantedTime
  3963  001280  CFF4 F024          	movff	prodh,crcBufS_status_put@wantedTime+1
  3964                           
  3965                           ;FastTransfer.c: 342: if (wantedTime > _this->head) {
  3966  001284  EE20 F00F          	lfsr	2,15
  3967  001288  501B               	movf	crcBufS_status_put@_this,w,c
  3968  00128A  26D9               	addwf	fsr2l,f,c
  3969  00128C  501C               	movf	crcBufS_status_put@_this+1,w,c
  3970  00128E  22DA               	addwfc	fsr2h,f,c
  3971  001290  5023               	movf	crcBufS_status_put@wantedTime,w,c
  3972  001292  5CDE               	subwf	postinc2,w,c
  3973  001294  50DE               	movf	postinc2,w,c
  3974  001296  0A80               	xorlw	128
  3975  001298  6E21               	movwf	(??_crcBufS_status_put+2)& (0+255),c
  3976  00129A  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  3977  00129C  0A80               	xorlw	128
  3978  00129E  5821               	subwfb	(??_crcBufS_status_put+2)& (0+255),w,c
  3979  0012A0  B0D8               	btfsc	status,0,c
  3980  0012A2  D02B               	goto	l3779
  3981                           
  3982                           ;FastTransfer.c: 343: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  3983  0012A4  EE20 F00F          	lfsr	2,15
  3984  0012A8  501B               	movf	crcBufS_status_put@_this,w,c
  3985  0012AA  26D9               	addwf	fsr2l,f,c
  3986  0012AC  501C               	movf	crcBufS_status_put@_this+1,w,c
  3987  0012AE  22DA               	addwfc	fsr2h,f,c
  3988  0012B0  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  3989  0012B4  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  3990  0012B8  1E1F               	comf	??_crcBufS_status_put,f,c
  3991  0012BA  1E20               	comf	??_crcBufS_status_put+1,f,c
  3992  0012BC  4A1F               	infsnz	??_crcBufS_status_put,f,c
  3993  0012BE  2A20               	incf	??_crcBufS_status_put+1,f,c
  3994  0012C0  5023               	movf	crcBufS_status_put@wantedTime,w,c
  3995  0012C2  261F               	addwf	??_crcBufS_status_put,f,c
  3996  0012C4  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  3997  0012C6  2220               	addwfc	??_crcBufS_status_put+1,f,c
  3998  0012C8  1E1F               	comf	??_crcBufS_status_put,f,c
  3999  0012CA  1E20               	comf	??_crcBufS_status_put+1,f,c
  4000  0012CC  4A1F               	infsnz	??_crcBufS_status_put,f,c
  4001  0012CE  2A20               	incf	??_crcBufS_status_put+1,f,c
  4002  0012D0  0E0F               	movlw	15
  4003  0012D2  241F               	addwf	??_crcBufS_status_put,w,c
  4004  0012D4  6E23               	movwf	crcBufS_status_put@wantedTime,c
  4005  0012D6  0E00               	movlw	0
  4006  0012D8  2020               	addwfc	??_crcBufS_status_put+1,w,c
  4007  0012DA  6E24               	movwf	crcBufS_status_put@wantedTime+1,c
  4008                           
  4009                           ;FastTransfer.c: 344: _this->buf[(wantedTime + 2)] = status;
  4010  0012DC  0E02               	movlw	2
  4011  0012DE  2423               	addwf	crcBufS_status_put@wantedTime,w,c
  4012  0012E0  6E1F               	movwf	??_crcBufS_status_put& (0+255),c
  4013  0012E2  0E00               	movlw	0
  4014  0012E4  2024               	addwfc	crcBufS_status_put@wantedTime+1,w,c
  4015  0012E6  6E20               	movwf	(??_crcBufS_status_put+1)& (0+255),c
  4016  0012E8  501F               	movf	??_crcBufS_status_put,w,c
  4017  0012EA  241B               	addwf	crcBufS_status_put@_this,w,c
  4018  0012EC  6ED9               	movwf	fsr2l,c
  4019  0012EE  5020               	movf	??_crcBufS_status_put+1,w,c
  4020  0012F0  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  4021  0012F2  6EDA               	movwf	fsr2h,c
  4022  0012F4  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  4023                           
  4024                           ;FastTransfer.c: 345: } else {
  4025  0012F8  0012               	return	
  4026  0012FA                     l3779:
  4027                           
  4028                           ;FastTransfer.c: 346: _this->buf[(_this->head - wantedTime) + 2] = status;
  4029  0012FA  EE20 F00F          	lfsr	2,15
  4030  0012FE  501B               	movf	crcBufS_status_put@_this,w,c
  4031  001300  26D9               	addwf	fsr2l,f,c
  4032  001302  501C               	movf	crcBufS_status_put@_this+1,w,c
  4033  001304  22DA               	addwfc	fsr2h,f,c
  4034  001306  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  4035  00130A  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  4036  00130E  C023  F021         	movff	crcBufS_status_put@wantedTime,??_crcBufS_status_put+2
  4037  001312  C024  F022         	movff	crcBufS_status_put@wantedTime+1,??_crcBufS_status_put+3
  4038  001316  1E21               	comf	??_crcBufS_status_put+2,f,c
  4039  001318  1E22               	comf	??_crcBufS_status_put+3,f,c
  4040  00131A  4A21               	infsnz	??_crcBufS_status_put+2,f,c
  4041  00131C  2A22               	incf	??_crcBufS_status_put+3,f,c
  4042  00131E  501F               	movf	??_crcBufS_status_put,w,c
  4043  001320  2621               	addwf	??_crcBufS_status_put+2,f,c
  4044  001322  5020               	movf	??_crcBufS_status_put+1,w,c
  4045  001324  2222               	addwfc	??_crcBufS_status_put+3,f,c
  4046  001326  0E02               	movlw	2
  4047  001328  2621               	addwf	??_crcBufS_status_put+2,f,c
  4048  00132A  0E00               	movlw	0
  4049  00132C  2222               	addwfc	??_crcBufS_status_put+3,f,c
  4050  00132E  5021               	movf	??_crcBufS_status_put+2,w,c
  4051  001330  241B               	addwf	crcBufS_status_put@_this,w,c
  4052  001332  6ED9               	movwf	fsr2l,c
  4053  001334  5022               	movf	??_crcBufS_status_put+3,w,c
  4054  001336  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  4055  001338  6EDA               	movwf	fsr2h,c
  4056  00133A  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  4057  00133E  0012               	return	
  4058  001340                     __end_of_crcBufS_status_put:
  4059                           	opt stack 0
  4060                           tosu	equ	0xFFF
  4061                           tosh	equ	0xFFE
  4062                           tosl	equ	0xFFD
  4063                           pclath	equ	0xFFA
  4064                           tblptru	equ	0xFF8
  4065                           tblptrh	equ	0xFF7
  4066                           tblptrl	equ	0xFF6
  4067                           tablat	equ	0xFF5
  4068                           prodh	equ	0xFF4
  4069                           prodl	equ	0xFF3
  4070                           intcon	equ	0xFF2
  4071                           postinc0	equ	0xFEE
  4072                           wreg	equ	0xFE8
  4073                           indf2	equ	0xFDF
  4074                           postinc2	equ	0xFDE
  4075                           postdec2	equ	0xFDD
  4076                           plusw2	equ	0xFDB
  4077                           fsr2h	equ	0xFDA
  4078                           fsr2l	equ	0xFD9
  4079                           status	equ	0xFD8
  4080                           
  4081 ;; *************** function _crcBufS_get *****************
  4082 ;; Defined at:
  4083 ;;		line 353 in file "FastTransfer.c"
  4084 ;; Parameters:    Size  Location     Type
  4085 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  4086 ;;		 -> crc_buffer(17), 
  4087 ;;  time            1   28[COMRAM] unsigned char 
  4088 ;;  space           1   29[COMRAM] unsigned char 
  4089 ;; Auto vars:     Size  Location     Type
  4090 ;;  wantedTime      2    0[BANK0 ] int 
  4091 ;; Return value:  Size  Location     Type
  4092 ;;                  1    wreg      unsigned char 
  4093 ;; Registers used:
  4094 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4095 ;; Tracked objects:
  4096 ;;		On entry : 0/0
  4097 ;;		On exit  : 0/0
  4098 ;;		Unchanged: 0/0
  4099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4100 ;;      Params:         4       0       0       0       0       0       0
  4101 ;;      Locals:         0       2       0       0       0       0       0
  4102 ;;      Temps:          6       0       0       0       0       0       0
  4103 ;;      Totals:        10       2       0       0       0       0       0
  4104 ;;Total ram usage:       12 bytes
  4105 ;; Hardware stack levels used:    1
  4106 ;; Hardware stack levels required when called:    4
  4107 ;; This function calls:
  4108 ;;		Nothing
  4109 ;; This function is called by:
  4110 ;;		_CRCcheck
  4111 ;;		_AKNAK
  4112 ;; This function uses a non-reentrant model
  4113 ;;
  4114                           
  4115                           	psect	text16
  4116  000EE4                     __ptext16:
  4117                           	opt stack 0
  4118  000EE4                     _crcBufS_get:
  4119                           	opt stack 23
  4120                           
  4121                           ;FastTransfer.c: 354: if (time >= 5) {
  4122                           
  4123                           ;incstack = 0
  4124  000EE4  0E04               	movlw	4
  4125  000EE6  641D               	cpfsgt	crcBufS_get@time,c
  4126  000EE8  D002               	goto	l3747
  4127                           
  4128                           ;FastTransfer.c: 355: time = 5 - 1;
  4129  000EEA  0E04               	movlw	4
  4130  000EEC  6E1D               	movwf	crcBufS_get@time,c
  4131  000EEE                     l3747:
  4132                           
  4133                           ;FastTransfer.c: 356: }
  4134                           ;FastTransfer.c: 357: if (space >= 3) {
  4135  000EEE  0E02               	movlw	2
  4136  000EF0  641E               	cpfsgt	crcBufS_get@space,c
  4137  000EF2  D002               	goto	l3751
  4138                           
  4139                           ;FastTransfer.c: 358: space = 3 - 1;
  4140  000EF4  0E02               	movlw	2
  4141  000EF6  6E1E               	movwf	crcBufS_get@space,c
  4142  000EF8                     l3751:
  4143                           
  4144                           ;FastTransfer.c: 359: }
  4145                           ;FastTransfer.c: 360: time = time + 1;
  4146  000EF8  281D               	incf	crcBufS_get@time,w,c
  4147  000EFA  6E1D               	movwf	crcBufS_get@time,c
  4148                           
  4149                           ;FastTransfer.c: 361: int wantedTime = time * 3;
  4150  000EFC  501D               	movf	crcBufS_get@time,w,c
  4151  000EFE  0D03               	mullw	3
  4152  000F00  CFF3 F0D1          	movff	prodl,crcBufS_get@wantedTime
  4153  000F04  CFF4 F0D2          	movff	prodh,crcBufS_get@wantedTime+1
  4154                           
  4155                           ;FastTransfer.c: 362: if (wantedTime > _this->head) {
  4156  000F08  EE20 F00F          	lfsr	2,15
  4157  000F0C  501B               	movf	crcBufS_get@_this,w,c
  4158  000F0E  26D9               	addwf	fsr2l,f,c
  4159  000F10  501C               	movf	crcBufS_get@_this+1,w,c
  4160  000F12  22DA               	addwfc	fsr2h,f,c
  4161  000F14  0100               	movlb	0	; () banked
  4162  000F16  51D1               	movf	crcBufS_get@wantedTime& (0+255),w,b
  4163  000F18  5CDE               	subwf	postinc2,w,c
  4164  000F1A  50DE               	movf	postinc2,w,c
  4165  000F1C  0A80               	xorlw	128
  4166  000F1E  6E21               	movwf	(??_crcBufS_get+2)& (0+255),c
  4167  000F20  0100               	movlb	0	; () banked
  4168  000F22  51D2               	movf	(crcBufS_get@wantedTime+1)& (0+255),w,b
  4169  000F24  0A80               	xorlw	128
  4170  000F26  5821               	subwfb	(??_crcBufS_get+2)& (0+255),w,c
  4171  000F28  B0D8               	btfsc	status,0,c
  4172  000F2A  D030               	goto	l3763
  4173                           
  4174                           ; BSR set to: 0
  4175                           ;FastTransfer.c: 363: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  4176  000F2C  EE20 F00F          	lfsr	2,15
  4177  000F30  501B               	movf	crcBufS_get@_this,w,c
  4178  000F32  26D9               	addwf	fsr2l,f,c
  4179  000F34  501C               	movf	crcBufS_get@_this+1,w,c
  4180  000F36  22DA               	addwfc	fsr2h,f,c
  4181  000F38  CFDE F01F          	movff	postinc2,??_crcBufS_get
  4182  000F3C  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  4183  000F40  1E1F               	comf	??_crcBufS_get,f,c
  4184  000F42  1E20               	comf	??_crcBufS_get+1,f,c
  4185  000F44  4A1F               	infsnz	??_crcBufS_get,f,c
  4186  000F46  2A20               	incf	??_crcBufS_get+1,f,c
  4187  000F48  0100               	movlb	0	; () banked
  4188  000F4A  51D1               	movf	crcBufS_get@wantedTime& (0+255),w,b
  4189  000F4C  261F               	addwf	??_crcBufS_get,f,c
  4190  000F4E  0100               	movlb	0	; () banked
  4191  000F50  51D2               	movf	(crcBufS_get@wantedTime+1)& (0+255),w,b
  4192  000F52  2220               	addwfc	??_crcBufS_get+1,f,c
  4193  000F54  1E1F               	comf	??_crcBufS_get,f,c
  4194  000F56  1E20               	comf	??_crcBufS_get+1,f,c
  4195  000F58  4A1F               	infsnz	??_crcBufS_get,f,c
  4196  000F5A  2A20               	incf	??_crcBufS_get+1,f,c
  4197  000F5C  0E0F               	movlw	15
  4198  000F5E  241F               	addwf	??_crcBufS_get,w,c
  4199  000F60  0100               	movlb	0	; () banked
  4200  000F62  6FD1               	movwf	crcBufS_get@wantedTime& (0+255),b
  4201  000F64  0E00               	movlw	0
  4202  000F66  2020               	addwfc	??_crcBufS_get+1,w,c
  4203  000F68  0100               	movlb	0	; () banked
  4204  000F6A  6FD2               	movwf	(crcBufS_get@wantedTime+1)& (0+255),b
  4205                           
  4206                           ;FastTransfer.c: 364: return (_this->buf[(wantedTime + space)]);
  4207  000F6C  501E               	movf	crcBufS_get@space,w,c
  4208  000F6E  0100               	movlb	0	; () banked
  4209  000F70  25D1               	addwf	crcBufS_get@wantedTime& (0+255),w,b
  4210  000F72  6E1F               	movwf	??_crcBufS_get& (0+255),c
  4211  000F74  0E00               	movlw	0
  4212  000F76  0100               	movlb	0	; () banked
  4213  000F78  21D2               	addwfc	(crcBufS_get@wantedTime+1)& (0+255),w,b
  4214  000F7A  6E20               	movwf	(??_crcBufS_get+1)& (0+255),c
  4215  000F7C  501F               	movf	??_crcBufS_get,w,c
  4216  000F7E  241B               	addwf	crcBufS_get@_this,w,c
  4217  000F80  6ED9               	movwf	fsr2l,c
  4218  000F82  5020               	movf	??_crcBufS_get+1,w,c
  4219  000F84  201C               	addwfc	crcBufS_get@_this+1,w,c
  4220  000F86  6EDA               	movwf	fsr2h,c
  4221  000F88  50DF               	movf	indf2,w,c
  4222                           
  4223                           ; BSR set to: 0
  4224                           ;FastTransfer.c: 365: } else {
  4225                           
  4226                           ; BSR set to: 0
  4227  000F8A  0012               	return	
  4228  000F8C                     l3763:
  4229                           
  4230                           ; BSR set to: 0
  4231                           ;FastTransfer.c: 366: return (_this->buf[(_this->head - wantedTime) + space]);
  4232  000F8C  EE20 F00F          	lfsr	2,15
  4233  000F90  501B               	movf	crcBufS_get@_this,w,c
  4234  000F92  26D9               	addwf	fsr2l,f,c
  4235  000F94  501C               	movf	crcBufS_get@_this+1,w,c
  4236  000F96  22DA               	addwfc	fsr2h,f,c
  4237  000F98  CFDE F01F          	movff	postinc2,??_crcBufS_get
  4238  000F9C  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  4239  000FA0  C0D1  F021         	movff	crcBufS_get@wantedTime,??_crcBufS_get+2
  4240  000FA4  C0D2  F022         	movff	crcBufS_get@wantedTime+1,??_crcBufS_get+3
  4241  000FA8  1E21               	comf	??_crcBufS_get+2,f,c
  4242  000FAA  1E22               	comf	??_crcBufS_get+3,f,c
  4243  000FAC  4A21               	infsnz	??_crcBufS_get+2,f,c
  4244  000FAE  2A22               	incf	??_crcBufS_get+3,f,c
  4245  000FB0  501E               	movf	crcBufS_get@space,w,c
  4246  000FB2  6E23               	movwf	(??_crcBufS_get+4)& (0+255),c
  4247  000FB4  6A24               	clrf	(??_crcBufS_get+5)& (0+255),c
  4248  000FB6  5021               	movf	??_crcBufS_get+2,w,c
  4249  000FB8  2623               	addwf	??_crcBufS_get+4,f,c
  4250  000FBA  5022               	movf	??_crcBufS_get+3,w,c
  4251  000FBC  2224               	addwfc	??_crcBufS_get+5,f,c
  4252  000FBE  501F               	movf	??_crcBufS_get,w,c
  4253  000FC0  2623               	addwf	??_crcBufS_get+4,f,c
  4254  000FC2  5020               	movf	??_crcBufS_get+1,w,c
  4255  000FC4  2224               	addwfc	??_crcBufS_get+5,f,c
  4256  000FC6  5023               	movf	??_crcBufS_get+4,w,c
  4257  000FC8  241B               	addwf	crcBufS_get@_this,w,c
  4258  000FCA  6ED9               	movwf	fsr2l,c
  4259  000FCC  5024               	movf	??_crcBufS_get+5,w,c
  4260  000FCE  201C               	addwfc	crcBufS_get@_this+1,w,c
  4261  000FD0  6EDA               	movwf	fsr2h,c
  4262  000FD2  50DF               	movf	indf2,w,c
  4263                           
  4264                           ; BSR set to: 0
  4265  000FD4  0012               	return	
  4266  000FD6                     __end_of_crcBufS_get:
  4267                           	opt stack 0
  4268                           tosu	equ	0xFFF
  4269                           tosh	equ	0xFFE
  4270                           tosl	equ	0xFFD
  4271                           pclath	equ	0xFFA
  4272                           tblptru	equ	0xFF8
  4273                           tblptrh	equ	0xFF7
  4274                           tblptrl	equ	0xFF6
  4275                           tablat	equ	0xFF5
  4276                           prodh	equ	0xFF4
  4277                           prodl	equ	0xFF3
  4278                           intcon	equ	0xFF2
  4279                           postinc0	equ	0xFEE
  4280                           wreg	equ	0xFE8
  4281                           indf2	equ	0xFDF
  4282                           postinc2	equ	0xFDE
  4283                           postdec2	equ	0xFDD
  4284                           plusw2	equ	0xFDB
  4285                           fsr2h	equ	0xFDA
  4286                           fsr2l	equ	0xFD9
  4287                           status	equ	0xFD8
  4288                           
  4289 ;; *************** function _Receive_get *****************
  4290 ;; Defined at:
  4291 ;;		line 126 in file "UART.c"
  4292 ;; Parameters:    Size  Location     Type
  4293 ;;		None
  4294 ;; Auto vars:     Size  Location     Type
  4295 ;;		None
  4296 ;; Return value:  Size  Location     Type
  4297 ;;                  1    wreg      unsigned char 
  4298 ;; Registers used:
  4299 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4300 ;; Tracked objects:
  4301 ;;		On entry : 0/0
  4302 ;;		On exit  : 0/0
  4303 ;;		Unchanged: 0/0
  4304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4305 ;;      Params:         0       0       0       0       0       0       0
  4306 ;;      Locals:         0       0       0       0       0       0       0
  4307 ;;      Temps:          0       0       0       0       0       0       0
  4308 ;;      Totals:         0       0       0       0       0       0       0
  4309 ;;Total ram usage:        0 bytes
  4310 ;; Hardware stack levels used:    1
  4311 ;; Hardware stack levels required when called:    6
  4312 ;; This function calls:
  4313 ;;		_UART_buff_get
  4314 ;; This function is called by:
  4315 ;;		_SYSTEM_Initialize
  4316 ;;		_getch
  4317 ;;		_CRCcheck
  4318 ;;		_receiveData
  4319 ;; This function uses a non-reentrant model
  4320 ;;
  4321                           
  4322                           	psect	text17
  4323  001E52                     __ptext17:
  4324                           	opt stack 0
  4325  001E52                     _Receive_get:
  4326                           	opt stack 22
  4327                           
  4328                           ;UART.c: 127: return UART_buff_get(&input_buffer);
  4329                           
  4330                           ; BSR set to: 0
  4331                           ;incstack = 0
  4332  001E52  0E00               	movlw	low _input_buffer
  4333  001E54  6E21               	movwf	UART_buff_get@_this,c
  4334  001E56  0E03               	movlw	high _input_buffer
  4335  001E58  6E22               	movwf	UART_buff_get@_this+1,c
  4336  001E5A  EC6B  F00A         	call	_UART_buff_get	;wreg free
  4337  001E5E  0012               	return	
  4338  001E60                     __end_of_Receive_get:
  4339                           	opt stack 0
  4340                           tosu	equ	0xFFF
  4341                           tosh	equ	0xFFE
  4342                           tosl	equ	0xFFD
  4343                           pclath	equ	0xFFA
  4344                           tblptru	equ	0xFF8
  4345                           tblptrh	equ	0xFF7
  4346                           tblptrl	equ	0xFF6
  4347                           tablat	equ	0xFF5
  4348                           prodh	equ	0xFF4
  4349                           prodl	equ	0xFF3
  4350                           intcon	equ	0xFF2
  4351                           postinc0	equ	0xFEE
  4352                           wreg	equ	0xFE8
  4353                           indf2	equ	0xFDF
  4354                           postinc2	equ	0xFDE
  4355                           postdec2	equ	0xFDD
  4356                           plusw2	equ	0xFDB
  4357                           fsr2h	equ	0xFDA
  4358                           fsr2l	equ	0xFD9
  4359                           status	equ	0xFD8
  4360                           
  4361 ;; *************** function _UART_buff_get *****************
  4362 ;; Defined at:
  4363 ;;		line 81 in file "UART.c"
  4364 ;; Parameters:    Size  Location     Type
  4365 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  4366 ;;		 -> output_buffer(206), input_buffer(206), 
  4367 ;; Auto vars:     Size  Location     Type
  4368 ;;  c               1   36[COMRAM] unsigned char 
  4369 ;; Return value:  Size  Location     Type
  4370 ;;                  1    wreg      unsigned char 
  4371 ;; Registers used:
  4372 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4373 ;; Tracked objects:
  4374 ;;		On entry : 0/0
  4375 ;;		On exit  : 0/0
  4376 ;;		Unchanged: 0/0
  4377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4378 ;;      Params:         2       0       0       0       0       0       0
  4379 ;;      Locals:         1       0       0       0       0       0       0
  4380 ;;      Temps:          2       0       0       0       0       0       0
  4381 ;;      Totals:         5       0       0       0       0       0       0
  4382 ;;Total ram usage:        5 bytes
  4383 ;; Hardware stack levels used:    1
  4384 ;; Hardware stack levels required when called:    5
  4385 ;; This function calls:
  4386 ;;		_UART_buff_modulo_inc
  4387 ;; This function is called by:
  4388 ;;		_Receive_get
  4389 ;;		_Send_put
  4390 ;; This function uses a non-reentrant model
  4391 ;;
  4392                           
  4393                           	psect	text18
  4394  0014D6                     __ptext18:
  4395                           	opt stack 0
  4396  0014D6                     _UART_buff_get:
  4397                           	opt stack 21
  4398                           
  4399                           ;UART.c: 82: unsigned char c;
  4400                           ;UART.c: 83: if (_this->count > 0) {
  4401                           
  4402                           ;incstack = 0
  4403  0014D6  EE20 F0CC          	lfsr	2,204
  4404  0014DA  5021               	movf	UART_buff_get@_this,w,c
  4405  0014DC  26D9               	addwf	fsr2l,f,c
  4406  0014DE  5022               	movf	UART_buff_get@_this+1,w,c
  4407  0014E0  22DA               	addwfc	fsr2h,f,c
  4408  0014E2  0E01               	movlw	1
  4409  0014E4  BEDB               	btfsc	plusw2,7,c
  4410  0014E6  D03C               	goto	l3683
  4411  0014E8  0E01               	movlw	1
  4412  0014EA  50DB               	movf	plusw2,w,c
  4413  0014EC  E103               	bnz	u2980
  4414  0014EE  04DE               	decf	postinc2,w,c
  4415  0014F0  A0D8               	btfss	status,0,c
  4416  0014F2  D036               	goto	l3683
  4417  0014F4                     u2980:
  4418                           
  4419                           ;UART.c: 84: c = _this->buf[_this->tail];
  4420  0014F4  EE20 F0CA          	lfsr	2,202
  4421  0014F8  5021               	movf	UART_buff_get@_this,w,c
  4422  0014FA  26D9               	addwf	fsr2l,f,c
  4423  0014FC  5022               	movf	UART_buff_get@_this+1,w,c
  4424  0014FE  22DA               	addwfc	fsr2h,f,c
  4425  001500  CFDE F023          	movff	postinc2,??_UART_buff_get
  4426  001504  CFDD F024          	movff	postdec2,??_UART_buff_get+1
  4427  001508  5023               	movf	??_UART_buff_get,w,c
  4428  00150A  2421               	addwf	UART_buff_get@_this,w,c
  4429  00150C  6ED9               	movwf	fsr2l,c
  4430  00150E  5024               	movf	??_UART_buff_get+1,w,c
  4431  001510  2022               	addwfc	UART_buff_get@_this+1,w,c
  4432  001512  6EDA               	movwf	fsr2h,c
  4433  001514  50DF               	movf	indf2,w,c
  4434  001516  6E25               	movwf	UART_buff_get@c,c
  4435                           
  4436                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  4437  001518  EE20 F0CA          	lfsr	2,202
  4438  00151C  5021               	movf	UART_buff_get@_this,w,c
  4439  00151E  26D9               	addwf	fsr2l,f,c
  4440  001520  5022               	movf	UART_buff_get@_this+1,w,c
  4441  001522  22DA               	addwfc	fsr2h,f,c
  4442  001524  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  4443  001528  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  4444  00152C  0E00               	movlw	0
  4445  00152E  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  4446  001530  0EC8               	movlw	200
  4447  001532  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  4448  001534  EC50  F00E         	call	_UART_buff_modulo_inc	;wreg free
  4449  001538  EE20 F0CA          	lfsr	2,202
  4450  00153C  5021               	movf	UART_buff_get@_this,w,c
  4451  00153E  26D9               	addwf	fsr2l,f,c
  4452  001540  5022               	movf	UART_buff_get@_this+1,w,c
  4453  001542  22DA               	addwfc	fsr2h,f,c
  4454  001544  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  4455  001548  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  4456                           
  4457                           ;UART.c: 86: --_this->count;
  4458  00154C  EE20 F0CC          	lfsr	2,204
  4459  001550  5021               	movf	UART_buff_get@_this,w,c
  4460  001552  26D9               	addwf	fsr2l,f,c
  4461  001554  5022               	movf	UART_buff_get@_this+1,w,c
  4462  001556  22DA               	addwfc	fsr2h,f,c
  4463  001558  06DE               	decf	postinc2,f,c
  4464  00155A  0E00               	movlw	0
  4465  00155C  5ADD               	subwfb	postdec2,f,c
  4466                           
  4467                           ;UART.c: 87: } else {
  4468  00155E  D002               	goto	l779
  4469  001560                     l3683:
  4470                           
  4471                           ;UART.c: 88: c = 0;
  4472  001560  0E00               	movlw	0
  4473  001562  6E25               	movwf	UART_buff_get@c,c
  4474  001564                     l779:
  4475                           
  4476                           ;UART.c: 89: }
  4477                           ;UART.c: 90: return (c);
  4478  001564  5025               	movf	UART_buff_get@c,w,c
  4479  001566  0012               	return	
  4480  001568                     __end_of_UART_buff_get:
  4481                           	opt stack 0
  4482                           tosu	equ	0xFFF
  4483                           tosh	equ	0xFFE
  4484                           tosl	equ	0xFFD
  4485                           pclath	equ	0xFFA
  4486                           tblptru	equ	0xFF8
  4487                           tblptrh	equ	0xFF7
  4488                           tblptrl	equ	0xFF6
  4489                           tablat	equ	0xFF5
  4490                           prodh	equ	0xFF4
  4491                           prodl	equ	0xFF3
  4492                           intcon	equ	0xFF2
  4493                           postinc0	equ	0xFEE
  4494                           wreg	equ	0xFE8
  4495                           indf2	equ	0xFDF
  4496                           postinc2	equ	0xFDE
  4497                           postdec2	equ	0xFDD
  4498                           plusw2	equ	0xFDB
  4499                           fsr2h	equ	0xFDA
  4500                           fsr2l	equ	0xFD9
  4501                           status	equ	0xFD8
  4502                           
  4503 ;; *************** function _UART_buff_modulo_inc *****************
  4504 ;; Defined at:
  4505 ;;		line 106 in file "UART.c"
  4506 ;; Parameters:    Size  Location     Type
  4507 ;;  value           2   26[COMRAM] const unsigned int 
  4508 ;;  modulus         2   28[COMRAM] const unsigned int 
  4509 ;; Auto vars:     Size  Location     Type
  4510 ;;  my_value        2   30[COMRAM] unsigned int 
  4511 ;; Return value:  Size  Location     Type
  4512 ;;                  2   26[COMRAM] unsigned int 
  4513 ;; Registers used:
  4514 ;;		wreg, status,2, status,0
  4515 ;; Tracked objects:
  4516 ;;		On entry : 0/0
  4517 ;;		On exit  : 0/0
  4518 ;;		Unchanged: 0/0
  4519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4520 ;;      Params:         4       0       0       0       0       0       0
  4521 ;;      Locals:         2       0       0       0       0       0       0
  4522 ;;      Temps:          0       0       0       0       0       0       0
  4523 ;;      Totals:         6       0       0       0       0       0       0
  4524 ;;Total ram usage:        6 bytes
  4525 ;; Hardware stack levels used:    1
  4526 ;; Hardware stack levels required when called:    4
  4527 ;; This function calls:
  4528 ;;		Nothing
  4529 ;; This function is called by:
  4530 ;;		_UART_buff_put
  4531 ;;		_UART_buff_get
  4532 ;; This function uses a non-reentrant model
  4533 ;;
  4534                           
  4535                           	psect	text19
  4536  001CA0                     __ptext19:
  4537                           	opt stack 0
  4538  001CA0                     _UART_buff_modulo_inc:
  4539                           	opt stack 21
  4540                           
  4541                           ;UART.c: 107: unsigned int my_value = value + 1;
  4542                           
  4543                           ;incstack = 0
  4544  001CA0  0E01               	movlw	1
  4545  001CA2  241B               	addwf	UART_buff_modulo_inc@value,w,c
  4546  001CA4  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  4547  001CA6  0E00               	movlw	0
  4548  001CA8  201C               	addwfc	UART_buff_modulo_inc@value+1,w,c
  4549  001CAA  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  4550                           
  4551                           ;UART.c: 108: if (my_value >= modulus) {
  4552  001CAC  501D               	movf	UART_buff_modulo_inc@modulus,w,c
  4553  001CAE  5C1F               	subwf	UART_buff_modulo_inc@my_value,w,c
  4554  001CB0  501E               	movf	UART_buff_modulo_inc@modulus+1,w,c
  4555  001CB2  5820               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  4556  001CB4  A0D8               	btfss	status,0,c
  4557  001CB6  D004               	goto	l3633
  4558                           
  4559                           ;UART.c: 109: my_value = 0;
  4560  001CB8  0E00               	movlw	0
  4561  001CBA  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  4562  001CBC  0E00               	movlw	0
  4563  001CBE  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  4564  001CC0                     l3633:
  4565                           
  4566                           ;UART.c: 110: }
  4567                           ;UART.c: 111: return (my_value);
  4568  001CC0  C01F  F01B         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  4569  001CC4  C020  F01C         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  4570  001CC8  0012               	return	
  4571  001CCA                     __end_of_UART_buff_modulo_inc:
  4572                           	opt stack 0
  4573                           tosu	equ	0xFFF
  4574                           tosh	equ	0xFFE
  4575                           tosl	equ	0xFFD
  4576                           pclath	equ	0xFFA
  4577                           tblptru	equ	0xFF8
  4578                           tblptrh	equ	0xFF7
  4579                           tblptrl	equ	0xFF6
  4580                           tablat	equ	0xFF5
  4581                           prodh	equ	0xFF4
  4582                           prodl	equ	0xFF3
  4583                           intcon	equ	0xFF2
  4584                           postinc0	equ	0xFEE
  4585                           wreg	equ	0xFE8
  4586                           indf2	equ	0xFDF
  4587                           postinc2	equ	0xFDE
  4588                           postdec2	equ	0xFDD
  4589                           plusw2	equ	0xFDB
  4590                           fsr2h	equ	0xFDA
  4591                           fsr2l	equ	0xFD9
  4592                           status	equ	0xFD8
  4593                           
  4594 ;; *************** function _Receive_available *****************
  4595 ;; Defined at:
  4596 ;;		line 122 in file "UART.c"
  4597 ;; Parameters:    Size  Location     Type
  4598 ;;		None
  4599 ;; Auto vars:     Size  Location     Type
  4600 ;;		None
  4601 ;; Return value:  Size  Location     Type
  4602 ;;                  2   28[COMRAM] int 
  4603 ;; Registers used:
  4604 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4605 ;; Tracked objects:
  4606 ;;		On entry : 0/0
  4607 ;;		On exit  : 0/0
  4608 ;;		Unchanged: 0/0
  4609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4610 ;;      Params:         2       0       0       0       0       0       0
  4611 ;;      Locals:         0       0       0       0       0       0       0
  4612 ;;      Temps:          0       0       0       0       0       0       0
  4613 ;;      Totals:         2       0       0       0       0       0       0
  4614 ;;Total ram usage:        2 bytes
  4615 ;; Hardware stack levels used:    1
  4616 ;; Hardware stack levels required when called:    5
  4617 ;; This function calls:
  4618 ;;		_UART_buff_size
  4619 ;; This function is called by:
  4620 ;;		_SYSTEM_Initialize
  4621 ;;		_CRCcheck
  4622 ;;		_receiveData
  4623 ;; This function uses a non-reentrant model
  4624 ;;
  4625                           
  4626                           	psect	text20
  4627  001DDA                     __ptext20:
  4628                           	opt stack 0
  4629  001DDA                     _Receive_available:
  4630                           	opt stack 23
  4631                           
  4632                           ;UART.c: 123: return UART_buff_size(&input_buffer);
  4633                           
  4634                           ;incstack = 0
  4635  001DDA  0E00               	movlw	low _input_buffer
  4636  001DDC  6E1B               	movwf	UART_buff_size@_this,c
  4637  001DDE  0E03               	movlw	high _input_buffer
  4638  001DE0  6E1C               	movwf	UART_buff_size@_this+1,c
  4639  001DE2  ECF8  F00E         	call	_UART_buff_size	;wreg free
  4640  001DE6  C01B  F01D         	movff	?_UART_buff_size,?_Receive_available
  4641  001DEA  C01C  F01E         	movff	?_UART_buff_size+1,?_Receive_available+1
  4642  001DEE  0012               	return	
  4643  001DF0                     __end_of_Receive_available:
  4644                           	opt stack 0
  4645                           tosu	equ	0xFFF
  4646                           tosh	equ	0xFFE
  4647                           tosl	equ	0xFFD
  4648                           pclath	equ	0xFFA
  4649                           tblptru	equ	0xFF8
  4650                           tblptrh	equ	0xFF7
  4651                           tblptrl	equ	0xFF6
  4652                           tablat	equ	0xFF5
  4653                           prodh	equ	0xFF4
  4654                           prodl	equ	0xFF3
  4655                           intcon	equ	0xFF2
  4656                           postinc0	equ	0xFEE
  4657                           wreg	equ	0xFE8
  4658                           indf2	equ	0xFDF
  4659                           postinc2	equ	0xFDE
  4660                           postdec2	equ	0xFDD
  4661                           plusw2	equ	0xFDB
  4662                           fsr2h	equ	0xFDA
  4663                           fsr2l	equ	0xFD9
  4664                           status	equ	0xFD8
  4665                           
  4666 ;; *************** function _UART_buff_size *****************
  4667 ;; Defined at:
  4668 ;;		line 102 in file "UART.c"
  4669 ;; Parameters:    Size  Location     Type
  4670 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  4671 ;;		 -> output_buffer(206), input_buffer(206), 
  4672 ;; Auto vars:     Size  Location     Type
  4673 ;;		None
  4674 ;; Return value:  Size  Location     Type
  4675 ;;                  2   26[COMRAM] int 
  4676 ;; Registers used:
  4677 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4678 ;; Tracked objects:
  4679 ;;		On entry : 0/0
  4680 ;;		On exit  : 0/0
  4681 ;;		Unchanged: 0/0
  4682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4683 ;;      Params:         2       0       0       0       0       0       0
  4684 ;;      Locals:         0       0       0       0       0       0       0
  4685 ;;      Temps:          0       0       0       0       0       0       0
  4686 ;;      Totals:         2       0       0       0       0       0       0
  4687 ;;Total ram usage:        2 bytes
  4688 ;; Hardware stack levels used:    1
  4689 ;; Hardware stack levels required when called:    4
  4690 ;; This function calls:
  4691 ;;		Nothing
  4692 ;; This function is called by:
  4693 ;;		_Receive_available
  4694 ;; This function uses a non-reentrant model
  4695 ;;
  4696                           
  4697                           	psect	text21
  4698  001DF0                     __ptext21:
  4699                           	opt stack 0
  4700  001DF0                     _UART_buff_size:
  4701                           	opt stack 23
  4702                           
  4703                           ;UART.c: 103: return (_this->count);
  4704                           
  4705                           ;incstack = 0
  4706  001DF0  EE20 F0CC          	lfsr	2,204
  4707  001DF4  501B               	movf	UART_buff_size@_this,w,c
  4708  001DF6  26D9               	addwf	fsr2l,f,c
  4709  001DF8  501C               	movf	UART_buff_size@_this+1,w,c
  4710  001DFA  22DA               	addwfc	fsr2h,f,c
  4711  001DFC  CFDE F01B          	movff	postinc2,?_UART_buff_size
  4712  001E00  CFDD F01C          	movff	postdec2,?_UART_buff_size+1
  4713  001E04  0012               	return	
  4714  001E06                     __end_of_UART_buff_size:
  4715                           	opt stack 0
  4716                           tosu	equ	0xFFF
  4717                           tosh	equ	0xFFE
  4718                           tosl	equ	0xFFD
  4719                           pclath	equ	0xFFA
  4720                           tblptru	equ	0xFF8
  4721                           tblptrh	equ	0xFF7
  4722                           tblptrl	equ	0xFF6
  4723                           tablat	equ	0xFF5
  4724                           prodh	equ	0xFF4
  4725                           prodl	equ	0xFF3
  4726                           intcon	equ	0xFF2
  4727                           postinc0	equ	0xFEE
  4728                           wreg	equ	0xFE8
  4729                           indf2	equ	0xFDF
  4730                           postinc2	equ	0xFDE
  4731                           postdec2	equ	0xFDD
  4732                           plusw2	equ	0xFDB
  4733                           fsr2h	equ	0xFDA
  4734                           fsr2l	equ	0xFD9
  4735                           status	equ	0xFD8
  4736                           
  4737 ;; *************** function _CRC8 *****************
  4738 ;; Defined at:
  4739 ;;		line 34 in file "FastTransfer.c"
  4740 ;; Parameters:    Size  Location     Type
  4741 ;;  data            2   26[COMRAM] PTR const unsigned char 
  4742 ;;		 -> NULL(0), CRCcheck@arrayHolder(3), receiveData@holder_1382(3), receiveData@holder(3), 
  4743 ;;		 -> rx_buffer(200), ring_buffer(206), 
  4744 ;;  len             1   28[COMRAM] unsigned char 
  4745 ;; Auto vars:     Size  Location     Type
  4746 ;;  sum             1   29[COMRAM] unsigned char 
  4747 ;;  tempI           1   31[COMRAM] unsigned char 
  4748 ;;  extract         1   30[COMRAM] unsigned char 
  4749 ;;  crc             1   32[COMRAM] unsigned char 
  4750 ;; Return value:  Size  Location     Type
  4751 ;;                  1    wreg      unsigned char 
  4752 ;; Registers used:
  4753 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4754 ;; Tracked objects:
  4755 ;;		On entry : 0/0
  4756 ;;		On exit  : 0/0
  4757 ;;		Unchanged: 0/0
  4758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4759 ;;      Params:         3       0       0       0       0       0       0
  4760 ;;      Locals:         4       0       0       0       0       0       0
  4761 ;;      Temps:          0       0       0       0       0       0       0
  4762 ;;      Totals:         7       0       0       0       0       0       0
  4763 ;;Total ram usage:        7 bytes
  4764 ;; Hardware stack levels used:    1
  4765 ;; Hardware stack levels required when called:    4
  4766 ;; This function calls:
  4767 ;;		Nothing
  4768 ;; This function is called by:
  4769 ;;		_sendData
  4770 ;;		_receiveData
  4771 ;;		_CRCcheck
  4772 ;; This function uses a non-reentrant model
  4773 ;;
  4774                           
  4775                           	psect	text22
  4776  001A78                     __ptext22:
  4777                           	opt stack 0
  4778  001A78                     _CRC8:
  4779                           	opt stack 23
  4780                           
  4781                           ;FastTransfer.c: 35: unsigned char crc = 0x00;
  4782                           
  4783                           ;incstack = 0
  4784  001A78  0E00               	movlw	0
  4785  001A7A  6E21               	movwf	CRC8@crc,c
  4786                           
  4787                           ;FastTransfer.c: 36: while (len--) {
  4788  001A7C  D01C               	goto	l3709
  4789  001A7E                     l3693:
  4790                           
  4791                           ;FastTransfer.c: 37: unsigned char extract = *data++;
  4792  001A7E  C01B  FFD9         	movff	CRC8@data,fsr2l
  4793  001A82  C01C  FFDA         	movff	CRC8@data+1,fsr2h
  4794  001A86  50DF               	movf	indf2,w,c
  4795  001A88  6E1F               	movwf	CRC8@extract,c
  4796  001A8A  4A1B               	infsnz	CRC8@data,f,c
  4797  001A8C  2A1C               	incf	CRC8@data+1,f,c
  4798                           
  4799                           ;FastTransfer.c: 38: unsigned char tempI;
  4800                           ;FastTransfer.c: 39: for (tempI = 8; tempI; tempI--) {
  4801  001A8E  0E08               	movlw	8
  4802  001A90  6E20               	movwf	CRC8@tempI,c
  4803  001A92  D00E               	goto	l3707
  4804  001A94                     l3699:
  4805                           
  4806                           ;FastTransfer.c: 40: unsigned char sum = (crc ^ extract) & 0x01;
  4807  001A94  5021               	movf	CRC8@crc,w,c
  4808  001A96  181F               	xorwf	CRC8@extract,w,c
  4809  001A98  0B01               	andlw	1
  4810  001A9A  6E1E               	movwf	CRC8@sum,c
  4811                           
  4812                           ;FastTransfer.c: 41: crc >>= 1;
  4813  001A9C  90D8               	bcf	status,0,c
  4814  001A9E  3221               	rrcf	CRC8@crc,f,c
  4815                           
  4816                           ;FastTransfer.c: 42: if (sum) {
  4817  001AA0  501E               	movf	CRC8@sum,w,c
  4818  001AA2  B4D8               	btfsc	status,2,c
  4819  001AA4  D002               	goto	l470
  4820                           
  4821                           ;FastTransfer.c: 43: crc ^= 0x8C;
  4822  001AA6  0E8C               	movlw	140
  4823  001AA8  1A21               	xorwf	CRC8@crc,f,c
  4824  001AAA                     l470:
  4825                           
  4826                           ;FastTransfer.c: 44: }
  4827                           ;FastTransfer.c: 45: extract >>= 1;
  4828  001AAA  90D8               	bcf	status,0,c
  4829  001AAC  321F               	rrcf	CRC8@extract,f,c
  4830  001AAE  0620               	decf	CRC8@tempI,f,c
  4831  001AB0                     l3707:
  4832  001AB0  5020               	movf	CRC8@tempI,w,c
  4833  001AB2  A4D8               	btfss	status,2,c
  4834  001AB4  D7EF               	goto	l3699
  4835  001AB6                     l3709:
  4836  001AB6  061D               	decf	CRC8@len,f,c
  4837  001AB8  281D               	incf	CRC8@len,w,c
  4838  001ABA  A4D8               	btfss	status,2,c
  4839  001ABC  D7E0               	goto	l3693
  4840                           
  4841                           ;FastTransfer.c: 46: }
  4842                           ;FastTransfer.c: 47: }
  4843                           ;FastTransfer.c: 48: return crc;
  4844  001ABE  5021               	movf	CRC8@crc,w,c
  4845  001AC0  0012               	return	
  4846  001AC2                     __end_of_CRC8:
  4847                           	opt stack 0
  4848                           tosu	equ	0xFFF
  4849                           tosh	equ	0xFFE
  4850                           tosl	equ	0xFFD
  4851                           pclath	equ	0xFFA
  4852                           tblptru	equ	0xFF8
  4853                           tblptrh	equ	0xFF7
  4854                           tblptrl	equ	0xFF6
  4855                           tablat	equ	0xFF5
  4856                           prodh	equ	0xFF4
  4857                           prodl	equ	0xFF3
  4858                           intcon	equ	0xFF2
  4859                           postinc0	equ	0xFEE
  4860                           wreg	equ	0xFE8
  4861                           indf2	equ	0xFDF
  4862                           postinc2	equ	0xFDE
  4863                           postdec2	equ	0xFDD
  4864                           plusw2	equ	0xFDB
  4865                           fsr2h	equ	0xFDA
  4866                           fsr2l	equ	0xFD9
  4867                           status	equ	0xFD8
  4868                           
  4869 ;; *************** function _processPowerRequest *****************
  4870 ;; Defined at:
  4871 ;;		line 33 in file "Communications.c"
  4872 ;; Parameters:    Size  Location     Type
  4873 ;;  powerSet        2    4[BANK0 ] int 
  4874 ;; Auto vars:     Size  Location     Type
  4875 ;;		None
  4876 ;; Return value:  Size  Location     Type
  4877 ;;                  1    wreg      void 
  4878 ;; Registers used:
  4879 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4880 ;; Tracked objects:
  4881 ;;		On entry : 0/0
  4882 ;;		On exit  : 0/0
  4883 ;;		Unchanged: 0/0
  4884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4885 ;;      Params:         0       2       0       0       0       0       0
  4886 ;;      Locals:         0       0       0       0       0       0       0
  4887 ;;      Temps:          0       0       0       0       0       0       0
  4888 ;;      Totals:         0       2       0       0       0       0       0
  4889 ;;Total ram usage:        2 bytes
  4890 ;; Hardware stack levels used:    1
  4891 ;; Hardware stack levels required when called:    7
  4892 ;; This function calls:
  4893 ;;		_EnableSlavePower
  4894 ;;		_Update
  4895 ;; This function is called by:
  4896 ;;		_updateComms
  4897 ;; This function uses a non-reentrant model
  4898 ;;
  4899                           
  4900                           	psect	text23
  4901  001340                     __ptext23:
  4902                           	opt stack 0
  4903  001340                     _processPowerRequest:
  4904                           	opt stack 22
  4905                           
  4906                           ;Communications.c: 35: if (powerSet & 0x01) EnableSlavePower(BMM, ON);
  4907                           
  4908                           ;incstack = 0
  4909  001340  0100               	movlb	0	; () banked
  4910  001342  A1D5               	btfss	processPowerRequest@powerSet& (0+255),0,b
  4911  001344  D009               	goto	l4121
  4912                           
  4913                           ; BSR set to: 0
  4914  001346  0E00               	movlw	0
  4915  001348  0100               	movlb	0	; () banked
  4916  00134A  6FD2               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  4917  00134C  0E01               	movlw	1
  4918  00134E  6FD1               	movwf	EnableSlavePower@onof& (0+255),b
  4919  001350  0E04               	movlw	4
  4920  001352  ECEB  F007         	call	_EnableSlavePower
  4921  001356  D008               	goto	l4123
  4922  001358                     l4121:
  4923                           
  4924                           ;Communications.c: 36: else EnableSlavePower(BMM, OFF);
  4925  001358  0E00               	movlw	0
  4926  00135A  0100               	movlb	0	; () banked
  4927  00135C  6FD2               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  4928  00135E  0E00               	movlw	0
  4929  001360  6FD1               	movwf	EnableSlavePower@onof& (0+255),b
  4930  001362  0E04               	movlw	4
  4931  001364  ECEB  F007         	call	_EnableSlavePower
  4932  001368                     l4123:
  4933                           
  4934                           ;Communications.c: 37: if (powerSet & 0x02) EnableSlavePower(MCS, ON);
  4935  001368  0100               	movlb	0	; () banked
  4936  00136A  A3D5               	btfss	processPowerRequest@powerSet& (0+255),1,b
  4937  00136C  D009               	goto	l4127
  4938                           
  4939                           ; BSR set to: 0
  4940  00136E  0E00               	movlw	0
  4941  001370  0100               	movlb	0	; () banked
  4942  001372  6FD2               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  4943  001374  0E01               	movlw	1
  4944  001376  6FD1               	movwf	EnableSlavePower@onof& (0+255),b
  4945  001378  0E02               	movlw	2
  4946  00137A  ECEB  F007         	call	_EnableSlavePower
  4947  00137E  D008               	goto	l4129
  4948  001380                     l4127:
  4949                           
  4950                           ;Communications.c: 38: else EnableSlavePower(MCS,OFF);
  4951  001380  0E00               	movlw	0
  4952  001382  0100               	movlb	0	; () banked
  4953  001384  6FD2               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  4954  001386  0E00               	movlw	0
  4955  001388  6FD1               	movwf	EnableSlavePower@onof& (0+255),b
  4956  00138A  0E02               	movlw	2
  4957  00138C  ECEB  F007         	call	_EnableSlavePower
  4958  001390                     l4129:
  4959                           
  4960                           ;Communications.c: 39: if (powerSet & 0x04) EnableSlavePower(DDS,ON);
  4961  001390  0100               	movlb	0	; () banked
  4962  001392  A5D5               	btfss	processPowerRequest@powerSet& (0+255),2,b
  4963  001394  D009               	goto	l4133
  4964                           
  4965                           ; BSR set to: 0
  4966  001396  0E00               	movlw	0
  4967  001398  0100               	movlb	0	; () banked
  4968  00139A  6FD2               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  4969  00139C  0E01               	movlw	1
  4970  00139E  6FD1               	movwf	EnableSlavePower@onof& (0+255),b
  4971  0013A0  0E01               	movlw	1
  4972  0013A2  ECEB  F007         	call	_EnableSlavePower
  4973  0013A6  D008               	goto	l4135
  4974  0013A8                     l4133:
  4975                           
  4976                           ;Communications.c: 40: else EnableSlavePower(DDS,OFF);
  4977  0013A8  0E00               	movlw	0
  4978  0013AA  0100               	movlb	0	; () banked
  4979  0013AC  6FD2               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  4980  0013AE  0E00               	movlw	0
  4981  0013B0  6FD1               	movwf	EnableSlavePower@onof& (0+255),b
  4982  0013B2  0E01               	movlw	1
  4983  0013B4  ECEB  F007         	call	_EnableSlavePower
  4984  0013B8                     l4135:
  4985                           
  4986                           ;Communications.c: 41: if(powerSet & 0x08) EnableSlavePower(SAS,ON);
  4987  0013B8  0100               	movlb	0	; () banked
  4988  0013BA  A7D5               	btfss	processPowerRequest@powerSet& (0+255),3,b
  4989  0013BC  D009               	goto	l4139
  4990                           
  4991                           ; BSR set to: 0
  4992  0013BE  0E00               	movlw	0
  4993  0013C0  0100               	movlb	0	; () banked
  4994  0013C2  6FD2               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  4995  0013C4  0E01               	movlw	1
  4996  0013C6  6FD1               	movwf	EnableSlavePower@onof& (0+255),b
  4997  0013C8  0E03               	movlw	3
  4998  0013CA  ECEB  F007         	call	_EnableSlavePower
  4999  0013CE  D008               	goto	l4141
  5000  0013D0                     l4139:
  5001                           
  5002                           ;Communications.c: 42: else EnableSlavePower(SAS,OFF);
  5003  0013D0  0E00               	movlw	0
  5004  0013D2  0100               	movlb	0	; () banked
  5005  0013D4  6FD2               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  5006  0013D6  0E00               	movlw	0
  5007  0013D8  6FD1               	movwf	EnableSlavePower@onof& (0+255),b
  5008  0013DA  0E03               	movlw	3
  5009  0013DC  ECEB  F007         	call	_EnableSlavePower
  5010  0013E0                     l4141:
  5011                           
  5012                           ;Communications.c: 43: if(powerSet & 0x10) EnableSlavePower(TSS, ON);
  5013  0013E0  0100               	movlb	0	; () banked
  5014  0013E2  A9D5               	btfss	processPowerRequest@powerSet& (0+255),4,b
  5015  0013E4  D009               	goto	l4145
  5016                           
  5017                           ; BSR set to: 0
  5018  0013E6  0E00               	movlw	0
  5019  0013E8  0100               	movlb	0	; () banked
  5020  0013EA  6FD2               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  5021  0013EC  0E01               	movlw	1
  5022  0013EE  6FD1               	movwf	EnableSlavePower@onof& (0+255),b
  5023  0013F0  0E05               	movlw	5
  5024  0013F2  ECEB  F007         	call	_EnableSlavePower
  5025  0013F6  D008               	goto	l396
  5026  0013F8                     l4145:
  5027                           
  5028                           ;Communications.c: 44: else EnableSlavePower(TSS,OFF);
  5029  0013F8  0E00               	movlw	0
  5030  0013FA  0100               	movlb	0	; () banked
  5031  0013FC  6FD2               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  5032  0013FE  0E00               	movlw	0
  5033  001400  6FD1               	movwf	EnableSlavePower@onof& (0+255),b
  5034  001402  0E05               	movlw	5
  5035  001404  ECEB  F007         	call	_EnableSlavePower
  5036  001408                     l396:
  5037                           
  5038                           ;Communications.c: 45: Update();
  5039  001408  EC3C  F00F         	call	_Update	;wreg free
  5040  00140C  0012               	return		;funcret
  5041  00140E                     __end_of_processPowerRequest:
  5042                           	opt stack 0
  5043                           tosu	equ	0xFFF
  5044                           tosh	equ	0xFFE
  5045                           tosl	equ	0xFFD
  5046                           pclath	equ	0xFFA
  5047                           tblptru	equ	0xFF8
  5048                           tblptrh	equ	0xFF7
  5049                           tblptrl	equ	0xFF6
  5050                           tablat	equ	0xFF5
  5051                           prodh	equ	0xFF4
  5052                           prodl	equ	0xFF3
  5053                           intcon	equ	0xFF2
  5054                           postinc0	equ	0xFEE
  5055                           wreg	equ	0xFE8
  5056                           indf2	equ	0xFDF
  5057                           postinc2	equ	0xFDE
  5058                           postdec2	equ	0xFDD
  5059                           plusw2	equ	0xFDB
  5060                           fsr2h	equ	0xFDA
  5061                           fsr2l	equ	0xFD9
  5062                           status	equ	0xFD8
  5063                           
  5064 ;; *************** function _SYSTEM_Initialize *****************
  5065 ;; Defined at:
  5066 ;;		line 113 in file "mcc_generated_files/mcc.c"
  5067 ;; Parameters:    Size  Location     Type
  5068 ;;		None
  5069 ;; Auto vars:     Size  Location     Type
  5070 ;;		None
  5071 ;; Return value:  Size  Location     Type
  5072 ;;                  1    wreg      void 
  5073 ;; Registers used:
  5074 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5075 ;; Tracked objects:
  5076 ;;		On entry : 0/0
  5077 ;;		On exit  : 0/0
  5078 ;;		Unchanged: 0/0
  5079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5080 ;;      Params:         0       0       0       0       0       0       0
  5081 ;;      Locals:         0       0       0       0       0       0       0
  5082 ;;      Temps:          0       0       0       0       0       0       0
  5083 ;;      Totals:         0       0       0       0       0       0       0
  5084 ;;Total ram usage:        0 bytes
  5085 ;; Hardware stack levels used:    1
  5086 ;; Hardware stack levels required when called:    7
  5087 ;; This function calls:
  5088 ;;		_ADC_Initialize
  5089 ;;		_EUSART1_Initialize
  5090 ;;		_INTERRUPT_Initialize
  5091 ;;		_OSCILLATOR_Initialize
  5092 ;;		_PIN_MANAGER_Initialize
  5093 ;;		_PWM4_Initialize
  5094 ;;		_TMR2_Initialize
  5095 ;;		_begin
  5096 ;; This function is called by:
  5097 ;;		_main
  5098 ;; This function uses a non-reentrant model
  5099 ;;
  5100                           
  5101                           	psect	text24
  5102  001710                     __ptext24:
  5103                           	opt stack 0
  5104  001710                     _SYSTEM_Initialize:
  5105                           	opt stack 23
  5106                           
  5107                           ;mcc.c: 114: OSCILLATOR_Initialize();
  5108                           
  5109                           ;incstack = 0
  5110  001710  EC30  F00F         	call	_OSCILLATOR_Initialize	;wreg free
  5111                           
  5112                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  5113  001714  EC2B  F00C         	call	_PIN_MANAGER_Initialize	;wreg free
  5114                           
  5115                           ;mcc.c: 116: INTERRUPT_Initialize();
  5116  001718  EC37  F00F         	call	_INTERRUPT_Initialize	;wreg free
  5117                           
  5118                           ;mcc.c: 117: EUSART1_Initialize();
  5119  00171C  EC86  F00D         	call	_EUSART1_Initialize	;wreg free
  5120                           
  5121                           ;mcc.c: 118: begin(receiveArray, sizeof (receiveArray), 5, 0, Send_put, Receive_get, Rec
      +                          eive_available, Receive_peek);
  5122  001720  0E98               	movlw	low _receiveArray
  5123  001722  0100               	movlb	0	; () banked
  5124  001724  6FD1               	movwf	begin@ptr& (0+255),b
  5125  001726  0E00               	movlw	high _receiveArray
  5126  001728  0100               	movlb	0	; () banked
  5127  00172A  6FD2               	movwf	(begin@ptr+1)& (0+255),b
  5128  00172C  0E28               	movlw	40
  5129  00172E  0100               	movlb	0	; () banked
  5130  001730  6FD3               	movwf	begin@maxSize& (0+255),b
  5131  001732  0E05               	movlw	5
  5132  001734  0100               	movlb	0	; () banked
  5133  001736  6FD4               	movwf	begin@givenAddress& (0+255),b
  5134  001738  0E00               	movlw	0
  5135  00173A  0100               	movlb	0	; () banked
  5136  00173C  6FD5               	movwf	begin@error& (0+255),b
  5137  00173E  0E1A               	movlw	low _Send_put
  5138  001740  0100               	movlb	0	; () banked
  5139  001742  6FD6               	movwf	begin@stufftosend& (0+255),b
  5140  001744  0E1C               	movlw	high _Send_put
  5141  001746  0100               	movlb	0	; () banked
  5142  001748  6FD7               	movwf	(begin@stufftosend+1)& (0+255),b
  5143  00174A  0E52               	movlw	low _Receive_get
  5144  00174C  0100               	movlb	0	; () banked
  5145  00174E  6FD8               	movwf	begin@stufftoreceive& (0+255),b
  5146  001750  0E1E               	movlw	high _Receive_get
  5147  001752  0100               	movlb	0	; () banked
  5148  001754  6FD9               	movwf	(begin@stufftoreceive+1)& (0+255),b
  5149  001756  0EDA               	movlw	low _Receive_available
  5150  001758  0100               	movlb	0	; () banked
  5151  00175A  6FDA               	movwf	begin@stuffavailable& (0+255),b
  5152  00175C  0E1D               	movlw	high _Receive_available
  5153  00175E  0100               	movlb	0	; () banked
  5154  001760  6FDB               	movwf	(begin@stuffavailable+1)& (0+255),b
  5155  001762  0E44               	movlw	low _Receive_peek
  5156  001764  0100               	movlb	0	; () banked
  5157  001766  6FDC               	movwf	begin@stuffpeek& (0+255),b
  5158  001768  0E1E               	movlw	high _Receive_peek
  5159  00176A  0100               	movlb	0	; () banked
  5160  00176C  6FDD               	movwf	(begin@stuffpeek+1)& (0+255),b
  5161  00176E  ECBE  F00C         	call	_begin	;wreg free
  5162                           
  5163                           ;mcc.c: 119: PWM4_Initialize();
  5164  001772  ECC8  F00E         	call	_PWM4_Initialize	;wreg free
  5165                           
  5166                           ;mcc.c: 120: TMR2_Initialize();
  5167  001776  EC0E  F00F         	call	_TMR2_Initialize	;wreg free
  5168                           
  5169                           ;mcc.c: 121: LATB4 = 1;
  5170  00177A  888A               	bsf	3978,4,c	;volatile
  5171                           
  5172                           ;mcc.c: 122: ADC_Initialize();
  5173  00177C  ECE1  F00E         	call	_ADC_Initialize	;wreg free
  5174  001780  0012               	return		;funcret
  5175  001782                     __end_of_SYSTEM_Initialize:
  5176                           	opt stack 0
  5177                           tosu	equ	0xFFF
  5178                           tosh	equ	0xFFE
  5179                           tosl	equ	0xFFD
  5180                           pclath	equ	0xFFA
  5181                           tblptru	equ	0xFF8
  5182                           tblptrh	equ	0xFF7
  5183                           tblptrl	equ	0xFF6
  5184                           tablat	equ	0xFF5
  5185                           prodh	equ	0xFF4
  5186                           prodl	equ	0xFF3
  5187                           intcon	equ	0xFF2
  5188                           postinc0	equ	0xFEE
  5189                           wreg	equ	0xFE8
  5190                           indf2	equ	0xFDF
  5191                           postinc2	equ	0xFDE
  5192                           postdec2	equ	0xFDD
  5193                           plusw2	equ	0xFDB
  5194                           fsr2h	equ	0xFDA
  5195                           fsr2l	equ	0xFD9
  5196                           status	equ	0xFD8
  5197                           
  5198 ;; *************** function _begin *****************
  5199 ;; Defined at:
  5200 ;;		line 18 in file "FastTransfer.c"
  5201 ;; Parameters:    Size  Location     Type
  5202 ;;  ptr             2    0[BANK0 ] PTR volatile int 
  5203 ;;		 -> receiveArray(40), 
  5204 ;;  maxSize         1    2[BANK0 ] unsigned char 
  5205 ;;  givenAddress    1    3[BANK0 ] unsigned char 
  5206 ;;  error           1    4[BANK0 ] unsigned char 
  5207 ;;  stufftosend     2    5[BANK0 ] PTR FTN(unsigned char ,)
  5208 ;;		 -> Send_put(1), 
  5209 ;;  stufftorecei    2    7[BANK0 ] PTR FTN()unsigned char 
  5210 ;;		 -> Receive_get(1), 
  5211 ;;  stuffavailab    2    9[BANK0 ] PTR FTN()int 
  5212 ;;		 -> Receive_available(2), 
  5213 ;;  stuffpeek       2   11[BANK0 ] PTR FTN()unsigned char 
  5214 ;;		 -> Receive_peek(1), 
  5215 ;; Auto vars:     Size  Location     Type
  5216 ;;		None
  5217 ;; Return value:  Size  Location     Type
  5218 ;;                  1    wreg      void 
  5219 ;; Registers used:
  5220 ;;		wreg, status,2, status,0, cstack
  5221 ;; Tracked objects:
  5222 ;;		On entry : 0/0
  5223 ;;		On exit  : 0/0
  5224 ;;		Unchanged: 0/0
  5225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5226 ;;      Params:         0      13       0       0       0       0       0
  5227 ;;      Locals:         0       0       0       0       0       0       0
  5228 ;;      Temps:          0       0       0       0       0       0       0
  5229 ;;      Totals:         0      13       0       0       0       0       0
  5230 ;;Total ram usage:       13 bytes
  5231 ;; Hardware stack levels used:    1
  5232 ;; Hardware stack levels required when called:    5
  5233 ;; This function calls:
  5234 ;;		___awdiv
  5235 ;; This function is called by:
  5236 ;;		_SYSTEM_Initialize
  5237 ;; This function uses a non-reentrant model
  5238 ;;
  5239                           
  5240                           	psect	text25
  5241  00197C                     __ptext25:
  5242                           	opt stack 0
  5243  00197C                     _begin:
  5244                           	opt stack 24
  5245                           
  5246                           ;FastTransfer.c: 19: receiveArrayAddress = ptr;
  5247                           
  5248                           ;incstack = 0
  5249  00197C  C0D1  F02C         	movff	begin@ptr,_receiveArrayAddress
  5250  001980  C0D2  F02D         	movff	begin@ptr+1,_receiveArrayAddress+1
  5251                           
  5252                           ;FastTransfer.c: 20: moduleAddress = givenAddress;
  5253  001984  C0D4  F03F         	movff	begin@givenAddress,_moduleAddress
  5254                           
  5255                           ;FastTransfer.c: 21: serial_write = stufftosend;
  5256  001988  C0D6  F036         	movff	begin@stufftosend,_serial_write
  5257  00198C  C0D7  F037         	movff	begin@stufftosend+1,_serial_write+1
  5258                           
  5259                           ;FastTransfer.c: 22: serial_available = stuffavailable;
  5260  001990  C0DA  F030         	movff	begin@stuffavailable,_serial_available
  5261  001994  C0DB  F031         	movff	begin@stuffavailable+1,_serial_available+1
  5262                           
  5263                           ;FastTransfer.c: 23: serial_peek = stuffpeek;
  5264  001998  C0DC  F032         	movff	begin@stuffpeek,_serial_peek
  5265  00199C  C0DD  F033         	movff	begin@stuffpeek+1,_serial_peek+1
  5266                           
  5267                           ;FastTransfer.c: 24: serial_read = stufftoreceive;
  5268  0019A0  C0D8  F034         	movff	begin@stufftoreceive,_serial_read
  5269  0019A4  C0D9  F035         	movff	begin@stufftoreceive+1,_serial_read+1
  5270                           
  5271                           ;FastTransfer.c: 25: maxDataAddress = maxSize / 2;
  5272  0019A8  C0D3  F01B         	movff	begin@maxSize,___awdiv@dividend
  5273  0019AC  6A1C               	clrf	___awdiv@dividend+1,c
  5274  0019AE  0E00               	movlw	0
  5275  0019B0  6E1E               	movwf	___awdiv@divisor+1,c
  5276  0019B2  0E02               	movlw	2
  5277  0019B4  6E1D               	movwf	___awdiv@divisor,c
  5278  0019B6  EC46  F00B         	call	___awdiv	;wreg free
  5279  0019BA  501B               	movf	?___awdiv,w,c
  5280  0019BC  6E3E               	movwf	_maxDataAddress,c
  5281                           
  5282                           ;FastTransfer.c: 26: sendStructAddress = (unsigned char*) & ring_buffer;
  5283  0019BE  0E30               	movlw	low _ring_buffer
  5284  0019C0  6E2E               	movwf	_sendStructAddress,c
  5285  0019C2  0E01               	movlw	high _ring_buffer
  5286  0019C4  6E2F               	movwf	_sendStructAddress+1,c
  5287                           
  5288                           ;FastTransfer.c: 27: AKNAKsend = error;
  5289  0019C6  C0D5  F03C         	movff	begin@error,_AKNAKsend
  5290                           
  5291                           ;FastTransfer.c: 28: alignErrorCounter = 0;
  5292  0019CA  0E00               	movlw	0
  5293  0019CC  0100               	movlb	0	; () banked
  5294  0019CE  6F93               	movwf	(_alignErrorCounter+1)& (0+255),b
  5295  0019D0  0E00               	movlw	0
  5296  0019D2  6F92               	movwf	_alignErrorCounter& (0+255),b
  5297                           
  5298                           ; BSR set to: 0
  5299  0019D4  0012               	return		;funcret
  5300  0019D6                     __end_of_begin:
  5301                           	opt stack 0
  5302                           tosu	equ	0xFFF
  5303                           tosh	equ	0xFFE
  5304                           tosl	equ	0xFFD
  5305                           pclath	equ	0xFFA
  5306                           tblptru	equ	0xFF8
  5307                           tblptrh	equ	0xFF7
  5308                           tblptrl	equ	0xFF6
  5309                           tablat	equ	0xFF5
  5310                           prodh	equ	0xFF4
  5311                           prodl	equ	0xFF3
  5312                           intcon	equ	0xFF2
  5313                           postinc0	equ	0xFEE
  5314                           wreg	equ	0xFE8
  5315                           indf2	equ	0xFDF
  5316                           postinc2	equ	0xFDE
  5317                           postdec2	equ	0xFDD
  5318                           plusw2	equ	0xFDB
  5319                           fsr2h	equ	0xFDA
  5320                           fsr2l	equ	0xFD9
  5321                           status	equ	0xFD8
  5322                           
  5323 ;; *************** function ___awdiv *****************
  5324 ;; Defined at:
  5325 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\awdiv.c"
  5326 ;; Parameters:    Size  Location     Type
  5327 ;;  dividend        2   26[COMRAM] int 
  5328 ;;  divisor         2   28[COMRAM] int 
  5329 ;; Auto vars:     Size  Location     Type
  5330 ;;  quotient        2   32[COMRAM] int 
  5331 ;;  sign            1   31[COMRAM] unsigned char 
  5332 ;;  counter         1   30[COMRAM] unsigned char 
  5333 ;; Return value:  Size  Location     Type
  5334 ;;                  2   26[COMRAM] int 
  5335 ;; Registers used:
  5336 ;;		wreg, status,2, status,0
  5337 ;; Tracked objects:
  5338 ;;		On entry : 0/0
  5339 ;;		On exit  : 0/0
  5340 ;;		Unchanged: 0/0
  5341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5342 ;;      Params:         4       0       0       0       0       0       0
  5343 ;;      Locals:         4       0       0       0       0       0       0
  5344 ;;      Temps:          0       0       0       0       0       0       0
  5345 ;;      Totals:         8       0       0       0       0       0       0
  5346 ;;Total ram usage:        8 bytes
  5347 ;; Hardware stack levels used:    1
  5348 ;; Hardware stack levels required when called:    4
  5349 ;; This function calls:
  5350 ;;		Nothing
  5351 ;; This function is called by:
  5352 ;;		_begin
  5353 ;; This function uses a non-reentrant model
  5354 ;;
  5355                           
  5356                           	psect	text26
  5357  00168C                     __ptext26:
  5358                           	opt stack 0
  5359  00168C                     ___awdiv:
  5360                           	opt stack 24
  5361                           
  5362                           ; BSR set to: 0
  5363                           ;incstack = 0
  5364  00168C  0E00               	movlw	0
  5365  00168E  6E20               	movwf	___awdiv@sign,c
  5366  001690  AE1E               	btfss	___awdiv@divisor+1,7,c
  5367  001692  D006               	goto	l2999
  5368  001694  6C1D               	negf	___awdiv@divisor,c
  5369  001696  1E1E               	comf	___awdiv@divisor+1,f,c
  5370  001698  B0D8               	btfsc	status,0,c
  5371  00169A  2A1E               	incf	___awdiv@divisor+1,f,c
  5372  00169C  0E01               	movlw	1
  5373  00169E  6E20               	movwf	___awdiv@sign,c
  5374  0016A0                     l2999:
  5375  0016A0  AE1C               	btfss	___awdiv@dividend+1,7,c
  5376  0016A2  D006               	goto	l3005
  5377  0016A4  6C1B               	negf	___awdiv@dividend,c
  5378  0016A6  1E1C               	comf	___awdiv@dividend+1,f,c
  5379  0016A8  B0D8               	btfsc	status,0,c
  5380  0016AA  2A1C               	incf	___awdiv@dividend+1,f,c
  5381  0016AC  0E01               	movlw	1
  5382  0016AE  1A20               	xorwf	___awdiv@sign,f,c
  5383  0016B0                     l3005:
  5384  0016B0  0E00               	movlw	0
  5385  0016B2  6E22               	movwf	___awdiv@quotient+1,c
  5386  0016B4  0E00               	movlw	0
  5387  0016B6  6E21               	movwf	___awdiv@quotient,c
  5388  0016B8  501D               	movf	___awdiv@divisor,w,c
  5389  0016BA  101E               	iorwf	___awdiv@divisor+1,w,c
  5390  0016BC  B4D8               	btfsc	status,2,c
  5391  0016BE  D01C               	goto	l3027
  5392  0016C0  0E01               	movlw	1
  5393  0016C2  6E1F               	movwf	___awdiv@counter,c
  5394  0016C4  D004               	goto	l3013
  5395  0016C6                     l3011:
  5396  0016C6  90D8               	bcf	status,0,c
  5397  0016C8  361D               	rlcf	___awdiv@divisor,f,c
  5398  0016CA  361E               	rlcf	___awdiv@divisor+1,f,c
  5399  0016CC  2A1F               	incf	___awdiv@counter,f,c
  5400  0016CE                     l3013:
  5401  0016CE  AE1E               	btfss	___awdiv@divisor+1,7,c
  5402  0016D0  D7FA               	goto	l3011
  5403  0016D2                     l3015:
  5404  0016D2  90D8               	bcf	status,0,c
  5405  0016D4  3621               	rlcf	___awdiv@quotient,f,c
  5406  0016D6  3622               	rlcf	___awdiv@quotient+1,f,c
  5407  0016D8  501D               	movf	___awdiv@divisor,w,c
  5408  0016DA  5C1B               	subwf	___awdiv@dividend,w,c
  5409  0016DC  501E               	movf	___awdiv@divisor+1,w,c
  5410  0016DE  581C               	subwfb	___awdiv@dividend+1,w,c
  5411  0016E0  A0D8               	btfss	status,0,c
  5412  0016E2  D005               	goto	l3023
  5413  0016E4  501D               	movf	___awdiv@divisor,w,c
  5414  0016E6  5E1B               	subwf	___awdiv@dividend,f,c
  5415  0016E8  501E               	movf	___awdiv@divisor+1,w,c
  5416  0016EA  5A1C               	subwfb	___awdiv@dividend+1,f,c
  5417  0016EC  8021               	bsf	___awdiv@quotient,0,c
  5418  0016EE                     l3023:
  5419  0016EE  90D8               	bcf	status,0,c
  5420  0016F0  321E               	rrcf	___awdiv@divisor+1,f,c
  5421  0016F2  321D               	rrcf	___awdiv@divisor,f,c
  5422  0016F4  2E1F               	decfsz	___awdiv@counter,f,c
  5423  0016F6  D7ED               	goto	l3015
  5424  0016F8                     l3027:
  5425  0016F8  5020               	movf	___awdiv@sign,w,c
  5426  0016FA  B4D8               	btfsc	status,2,c
  5427  0016FC  D004               	goto	l3031
  5428  0016FE  6C21               	negf	___awdiv@quotient,c
  5429  001700  1E22               	comf	___awdiv@quotient+1,f,c
  5430  001702  B0D8               	btfsc	status,0,c
  5431  001704  2A22               	incf	___awdiv@quotient+1,f,c
  5432  001706                     l3031:
  5433  001706  C021  F01B         	movff	___awdiv@quotient,?___awdiv
  5434  00170A  C022  F01C         	movff	___awdiv@quotient+1,?___awdiv+1
  5435  00170E  0012               	return	
  5436  001710                     __end_of___awdiv:
  5437                           	opt stack 0
  5438                           tosu	equ	0xFFF
  5439                           tosh	equ	0xFFE
  5440                           tosl	equ	0xFFD
  5441                           pclath	equ	0xFFA
  5442                           tblptru	equ	0xFF8
  5443                           tblptrh	equ	0xFF7
  5444                           tblptrl	equ	0xFF6
  5445                           tablat	equ	0xFF5
  5446                           prodh	equ	0xFF4
  5447                           prodl	equ	0xFF3
  5448                           intcon	equ	0xFF2
  5449                           postinc0	equ	0xFEE
  5450                           wreg	equ	0xFE8
  5451                           indf2	equ	0xFDF
  5452                           postinc2	equ	0xFDE
  5453                           postdec2	equ	0xFDD
  5454                           plusw2	equ	0xFDB
  5455                           fsr2h	equ	0xFDA
  5456                           fsr2l	equ	0xFD9
  5457                           status	equ	0xFD8
  5458                           
  5459 ;; *************** function _TMR2_Initialize *****************
  5460 ;; Defined at:
  5461 ;;		line 58 in file "../../2016/trunk/PDU/mcc_generated_files/tmr2.c"
  5462 ;; Parameters:    Size  Location     Type
  5463 ;;		None
  5464 ;; Auto vars:     Size  Location     Type
  5465 ;;		None
  5466 ;; Return value:  Size  Location     Type
  5467 ;;                  1    wreg      void 
  5468 ;; Registers used:
  5469 ;;		wreg, status,2, cstack
  5470 ;; Tracked objects:
  5471 ;;		On entry : 0/0
  5472 ;;		On exit  : 0/0
  5473 ;;		Unchanged: 0/0
  5474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5475 ;;      Params:         0       0       0       0       0       0       0
  5476 ;;      Locals:         0       0       0       0       0       0       0
  5477 ;;      Temps:          0       0       0       0       0       0       0
  5478 ;;      Totals:         0       0       0       0       0       0       0
  5479 ;;Total ram usage:        0 bytes
  5480 ;; Hardware stack levels used:    1
  5481 ;; Hardware stack levels required when called:    5
  5482 ;; This function calls:
  5483 ;;		_TMR2_StartTimer
  5484 ;; This function is called by:
  5485 ;;		_SYSTEM_Initialize
  5486 ;; This function uses a non-reentrant model
  5487 ;;
  5488                           
  5489                           	psect	text27
  5490  001E1C                     __ptext27:
  5491                           	opt stack 0
  5492  001E1C                     _TMR2_Initialize:
  5493                           	opt stack 24
  5494                           
  5495                           ;tmr2.c: 63: T2CON = 0x29;
  5496                           
  5497                           ;incstack = 0
  5498  001E1C  0E29               	movlw	41
  5499  001E1E  6EBA               	movwf	4026,c	;volatile
  5500                           
  5501                           ;tmr2.c: 66: PR2 = 0xF9;
  5502  001E20  0EF9               	movlw	249
  5503  001E22  6EBB               	movwf	4027,c	;volatile
  5504                           
  5505                           ;tmr2.c: 69: TMR2 = 0x00;
  5506  001E24  0E00               	movlw	0
  5507  001E26  6EBC               	movwf	4028,c	;volatile
  5508                           
  5509                           ;tmr2.c: 72: PIR1bits.TMR2IF = 0;
  5510  001E28  929E               	bcf	3998,1,c	;volatile
  5511                           
  5512                           ;tmr2.c: 75: TMR2_StartTimer();
  5513  001E2A  EC3F  F00F         	call	_TMR2_StartTimer	;wreg free
  5514  001E2E  0012               	return		;funcret
  5515  001E30                     __end_of_TMR2_Initialize:
  5516                           	opt stack 0
  5517                           tosu	equ	0xFFF
  5518                           tosh	equ	0xFFE
  5519                           tosl	equ	0xFFD
  5520                           pclath	equ	0xFFA
  5521                           tblptru	equ	0xFF8
  5522                           tblptrh	equ	0xFF7
  5523                           tblptrl	equ	0xFF6
  5524                           tablat	equ	0xFF5
  5525                           prodh	equ	0xFF4
  5526                           prodl	equ	0xFF3
  5527                           intcon	equ	0xFF2
  5528                           postinc0	equ	0xFEE
  5529                           wreg	equ	0xFE8
  5530                           indf2	equ	0xFDF
  5531                           postinc2	equ	0xFDE
  5532                           postdec2	equ	0xFDD
  5533                           plusw2	equ	0xFDB
  5534                           fsr2h	equ	0xFDA
  5535                           fsr2l	equ	0xFD9
  5536                           status	equ	0xFD8
  5537                           
  5538 ;; *************** function _TMR2_StartTimer *****************
  5539 ;; Defined at:
  5540 ;;		line 78 in file "../../2016/trunk/PDU/mcc_generated_files/tmr2.c"
  5541 ;; Parameters:    Size  Location     Type
  5542 ;;		None
  5543 ;; Auto vars:     Size  Location     Type
  5544 ;;		None
  5545 ;; Return value:  Size  Location     Type
  5546 ;;                  1    wreg      void 
  5547 ;; Registers used:
  5548 ;;		None
  5549 ;; Tracked objects:
  5550 ;;		On entry : 0/0
  5551 ;;		On exit  : 0/0
  5552 ;;		Unchanged: 0/0
  5553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5554 ;;      Params:         0       0       0       0       0       0       0
  5555 ;;      Locals:         0       0       0       0       0       0       0
  5556 ;;      Temps:          0       0       0       0       0       0       0
  5557 ;;      Totals:         0       0       0       0       0       0       0
  5558 ;;Total ram usage:        0 bytes
  5559 ;; Hardware stack levels used:    1
  5560 ;; Hardware stack levels required when called:    4
  5561 ;; This function calls:
  5562 ;;		Nothing
  5563 ;; This function is called by:
  5564 ;;		_TMR2_Initialize
  5565 ;; This function uses a non-reentrant model
  5566 ;;
  5567                           
  5568                           	psect	text28
  5569  001E7E                     __ptext28:
  5570                           	opt stack 0
  5571  001E7E                     _TMR2_StartTimer:
  5572                           	opt stack 24
  5573                           
  5574                           ;tmr2.c: 81: T2CONbits.TMR2ON = 1;
  5575                           
  5576                           ;incstack = 0
  5577  001E7E  84BA               	bsf	4026,2,c	;volatile
  5578  001E80  0012               	return		;funcret
  5579  001E82                     __end_of_TMR2_StartTimer:
  5580                           	opt stack 0
  5581                           tosu	equ	0xFFF
  5582                           tosh	equ	0xFFE
  5583                           tosl	equ	0xFFD
  5584                           pclath	equ	0xFFA
  5585                           tblptru	equ	0xFF8
  5586                           tblptrh	equ	0xFF7
  5587                           tblptrl	equ	0xFF6
  5588                           tablat	equ	0xFF5
  5589                           prodh	equ	0xFF4
  5590                           prodl	equ	0xFF3
  5591                           intcon	equ	0xFF2
  5592                           postinc0	equ	0xFEE
  5593                           wreg	equ	0xFE8
  5594                           indf2	equ	0xFDF
  5595                           postinc2	equ	0xFDE
  5596                           postdec2	equ	0xFDD
  5597                           plusw2	equ	0xFDB
  5598                           fsr2h	equ	0xFDA
  5599                           fsr2l	equ	0xFD9
  5600                           status	equ	0xFD8
  5601                           
  5602 ;; *************** function _PWM4_Initialize *****************
  5603 ;; Defined at:
  5604 ;;		line 64 in file "../../2016/trunk/PDU/mcc_generated_files/pwm4.c"
  5605 ;; Parameters:    Size  Location     Type
  5606 ;;		None
  5607 ;; Auto vars:     Size  Location     Type
  5608 ;;		None
  5609 ;; Return value:  Size  Location     Type
  5610 ;;                  1    wreg      void 
  5611 ;; Registers used:
  5612 ;;		wreg, status,2
  5613 ;; Tracked objects:
  5614 ;;		On entry : 0/0
  5615 ;;		On exit  : 0/0
  5616 ;;		Unchanged: 0/0
  5617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5618 ;;      Params:         0       0       0       0       0       0       0
  5619 ;;      Locals:         0       0       0       0       0       0       0
  5620 ;;      Temps:          0       0       0       0       0       0       0
  5621 ;;      Totals:         0       0       0       0       0       0       0
  5622 ;;Total ram usage:        0 bytes
  5623 ;; Hardware stack levels used:    1
  5624 ;; Hardware stack levels required when called:    4
  5625 ;; This function calls:
  5626 ;;		Nothing
  5627 ;; This function is called by:
  5628 ;;		_SYSTEM_Initialize
  5629 ;; This function uses a non-reentrant model
  5630 ;;
  5631                           
  5632                           	psect	text29
  5633  001D90                     __ptext29:
  5634                           	opt stack 0
  5635  001D90                     _PWM4_Initialize:
  5636                           	opt stack 25
  5637                           
  5638                           ;pwm4.c: 69: CCP4CON = 0x3C;
  5639                           
  5640                           ;incstack = 0
  5641  001D90  0E3C               	movlw	60
  5642  001D92  010F               	movlb	15	; () banked
  5643  001D94  6F57               	movwf	87,b	;volatile
  5644                           
  5645                           ;pwm4.c: 72: CCPR4L = 0x7C;
  5646  001D96  0E7C               	movlw	124
  5647  001D98  010F               	movlb	15	; () banked
  5648  001D9A  6F58               	movwf	88,b	;volatile
  5649                           
  5650                           ;pwm4.c: 75: CCPR4H = 0x00;
  5651  001D9C  0E00               	movlw	0
  5652  001D9E  010F               	movlb	15	; () banked
  5653  001DA0  6F59               	movwf	89,b	;volatile
  5654                           
  5655                           ;pwm4.c: 78: CCPTMRS1bits.C4TSEL = 0x0;
  5656  001DA2  0EFC               	movlw	-4
  5657  001DA4  010F               	movlb	15	; () banked
  5658  001DA6  1748               	andwf	72,f,b	;volatile
  5659                           
  5660                           ; BSR set to: 15
  5661  001DA8  0012               	return		;funcret
  5662  001DAA                     __end_of_PWM4_Initialize:
  5663                           	opt stack 0
  5664                           tosu	equ	0xFFF
  5665                           tosh	equ	0xFFE
  5666                           tosl	equ	0xFFD
  5667                           pclath	equ	0xFFA
  5668                           tblptru	equ	0xFF8
  5669                           tblptrh	equ	0xFF7
  5670                           tblptrl	equ	0xFF6
  5671                           tablat	equ	0xFF5
  5672                           prodh	equ	0xFF4
  5673                           prodl	equ	0xFF3
  5674                           intcon	equ	0xFF2
  5675                           postinc0	equ	0xFEE
  5676                           wreg	equ	0xFE8
  5677                           indf2	equ	0xFDF
  5678                           postinc2	equ	0xFDE
  5679                           postdec2	equ	0xFDD
  5680                           plusw2	equ	0xFDB
  5681                           fsr2h	equ	0xFDA
  5682                           fsr2l	equ	0xFD9
  5683                           status	equ	0xFD8
  5684                           
  5685 ;; *************** function _PIN_MANAGER_Initialize *****************
  5686 ;; Defined at:
  5687 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  5688 ;; Parameters:    Size  Location     Type
  5689 ;;		None
  5690 ;; Auto vars:     Size  Location     Type
  5691 ;;		None
  5692 ;; Return value:  Size  Location     Type
  5693 ;;                  1    wreg      void 
  5694 ;; Registers used:
  5695 ;;		wreg, status,2
  5696 ;; Tracked objects:
  5697 ;;		On entry : 0/0
  5698 ;;		On exit  : 0/0
  5699 ;;		Unchanged: 0/0
  5700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5701 ;;      Params:         0       0       0       0       0       0       0
  5702 ;;      Locals:         0       0       0       0       0       0       0
  5703 ;;      Temps:          0       0       0       0       0       0       0
  5704 ;;      Totals:         0       0       0       0       0       0       0
  5705 ;;Total ram usage:        0 bytes
  5706 ;; Hardware stack levels used:    1
  5707 ;; Hardware stack levels required when called:    4
  5708 ;; This function calls:
  5709 ;;		Nothing
  5710 ;; This function is called by:
  5711 ;;		_SYSTEM_Initialize
  5712 ;; This function uses a non-reentrant model
  5713 ;;
  5714                           
  5715                           	psect	text30
  5716  001856                     __ptext30:
  5717                           	opt stack 0
  5718  001856                     _PIN_MANAGER_Initialize:
  5719                           	opt stack 25
  5720                           
  5721                           ;pin_manager.c: 52: LATA = 0x00;
  5722                           
  5723                           ; BSR set to: 15
  5724                           ;incstack = 0
  5725  001856  0E00               	movlw	0
  5726  001858  6E89               	movwf	3977,c	;volatile
  5727                           
  5728                           ;pin_manager.c: 53: TRISA = 0xF7;
  5729  00185A  0EF7               	movlw	247
  5730  00185C  6E92               	movwf	3986,c	;volatile
  5731                           
  5732                           ;pin_manager.c: 54: ANSELA = 0x27;
  5733  00185E  0E27               	movlw	39
  5734  001860  010F               	movlb	15	; () banked
  5735  001862  6F38               	movwf	56,b	;volatile
  5736                           
  5737                           ;pin_manager.c: 56: LATB = 0x01;
  5738  001864  0E01               	movlw	1
  5739  001866  6E8A               	movwf	3978,c	;volatile
  5740                           
  5741                           ;pin_manager.c: 57: TRISB = 0xFE;
  5742  001868  0EFE               	movlw	254
  5743  00186A  6E93               	movwf	3987,c	;volatile
  5744                           
  5745                           ;pin_manager.c: 58: ANSELB = 0x3E;
  5746  00186C  0E3E               	movlw	62
  5747  00186E  010F               	movlb	15	; () banked
  5748  001870  6F39               	movwf	57,b	;volatile
  5749                           
  5750                           ;pin_manager.c: 59: WPUB = 0x00;
  5751  001872  0E00               	movlw	0
  5752  001874  6E61               	movwf	3937,c	;volatile
  5753                           
  5754                           ;pin_manager.c: 61: LATC = 0x00;
  5755  001876  0E00               	movlw	0
  5756  001878  6E8B               	movwf	3979,c	;volatile
  5757                           
  5758                           ;pin_manager.c: 62: TRISC = 0xDF;
  5759  00187A  0EDF               	movlw	223
  5760  00187C  6E94               	movwf	3988,c	;volatile
  5761                           
  5762                           ;pin_manager.c: 63: ANSELC = 0x1C;
  5763  00187E  0E1C               	movlw	28
  5764  001880  010F               	movlb	15	; () banked
  5765  001882  6F3A               	movwf	58,b	;volatile
  5766                           
  5767                           ;pin_manager.c: 65: LATD = 0x00;
  5768  001884  0E00               	movlw	0
  5769  001886  6E8C               	movwf	3980,c	;volatile
  5770                           
  5771                           ;pin_manager.c: 66: TRISD = 0x0F;
  5772  001888  0E0F               	movlw	15
  5773  00188A  6E95               	movwf	3989,c	;volatile
  5774                           
  5775                           ;pin_manager.c: 67: ANSELD = 0x0F;
  5776  00188C  0E0F               	movlw	15
  5777  00188E  010F               	movlb	15	; () banked
  5778  001890  6F3B               	movwf	59,b	;volatile
  5779                           
  5780                           ;pin_manager.c: 69: LATE = 0x00;
  5781  001892  0E00               	movlw	0
  5782  001894  6E8D               	movwf	3981,c	;volatile
  5783                           
  5784                           ;pin_manager.c: 70: TRISE = 0x07;
  5785  001896  0E07               	movlw	7
  5786  001898  6E96               	movwf	3990,c	;volatile
  5787                           
  5788                           ;pin_manager.c: 71: ANSELE = 0x07;
  5789  00189A  0E07               	movlw	7
  5790  00189C  010F               	movlb	15	; () banked
  5791  00189E  6F3C               	movwf	60,b	;volatile
  5792                           
  5793                           ; BSR set to: 15
  5794                           ;pin_manager.c: 72: TRISCbits.RC6 = 1;
  5795  0018A0  8C94               	bsf	3988,6,c	;volatile
  5796                           
  5797                           ; BSR set to: 15
  5798                           ;pin_manager.c: 73: TRISCbits.RC7 = 1;
  5799  0018A2  8E94               	bsf	3988,7,c	;volatile
  5800                           
  5801                           ; BSR set to: 15
  5802                           ;pin_manager.c: 74: TRISCbits.RC5 = 0;
  5803  0018A4  9A94               	bcf	3988,5,c	;volatile
  5804                           
  5805                           ; BSR set to: 15
  5806                           ;pin_manager.c: 75: LATCbits.LATC5 = 1;
  5807  0018A6  8A8B               	bsf	3979,5,c	;volatile
  5808                           
  5809                           ; BSR set to: 15
  5810                           ;pin_manager.c: 76: LATCbits.LATC6 = 1;
  5811  0018A8  8C8B               	bsf	3979,6,c	;volatile
  5812                           
  5813                           ; BSR set to: 15
  5814                           ;pin_manager.c: 77: LATCbits.LATC7 = 1;
  5815  0018AA  8E8B               	bsf	3979,7,c	;volatile
  5816                           
  5817                           ; BSR set to: 15
  5818                           ;pin_manager.c: 78: ANSELCbits.ANSC5 =0;
  5819  0018AC  010F               	movlb	15	; () banked
  5820  0018AE  9B3A               	bcf	58,5,b	;volatile
  5821                           
  5822                           ; BSR set to: 15
  5823                           ;pin_manager.c: 79: ANSELCbits.ANSC6 =0;
  5824  0018B0  010F               	movlb	15	; () banked
  5825  0018B2  9D3A               	bcf	58,6,b	;volatile
  5826                           
  5827                           ; BSR set to: 15
  5828                           ;pin_manager.c: 80: ANSELCbits.ANSC7 =0;
  5829  0018B4  010F               	movlb	15	; () banked
  5830  0018B6  9F3A               	bcf	58,7,b	;volatile
  5831                           
  5832                           ; BSR set to: 15
  5833                           ;pin_manager.c: 82: INTCON2bits.nRBPU = 0x01;
  5834  0018B8  8EF1               	bsf	intcon2,7,c	;volatile
  5835                           
  5836                           ; BSR set to: 15
  5837  0018BA  0012               	return		;funcret
  5838  0018BC                     __end_of_PIN_MANAGER_Initialize:
  5839                           	opt stack 0
  5840                           tosu	equ	0xFFF
  5841                           tosh	equ	0xFFE
  5842                           tosl	equ	0xFFD
  5843                           pclath	equ	0xFFA
  5844                           tblptru	equ	0xFF8
  5845                           tblptrh	equ	0xFF7
  5846                           tblptrl	equ	0xFF6
  5847                           tablat	equ	0xFF5
  5848                           prodh	equ	0xFF4
  5849                           prodl	equ	0xFF3
  5850                           intcon	equ	0xFF2
  5851                           intcon2	equ	0xFF1
  5852                           postinc0	equ	0xFEE
  5853                           wreg	equ	0xFE8
  5854                           indf2	equ	0xFDF
  5855                           postinc2	equ	0xFDE
  5856                           postdec2	equ	0xFDD
  5857                           plusw2	equ	0xFDB
  5858                           fsr2h	equ	0xFDA
  5859                           fsr2l	equ	0xFD9
  5860                           status	equ	0xFD8
  5861                           
  5862 ;; *************** function _OSCILLATOR_Initialize *****************
  5863 ;; Defined at:
  5864 ;;		line 125 in file "mcc_generated_files/mcc.c"
  5865 ;; Parameters:    Size  Location     Type
  5866 ;;		None
  5867 ;; Auto vars:     Size  Location     Type
  5868 ;;		None
  5869 ;; Return value:  Size  Location     Type
  5870 ;;                  1    wreg      void 
  5871 ;; Registers used:
  5872 ;;		wreg, status,2
  5873 ;; Tracked objects:
  5874 ;;		On entry : 0/0
  5875 ;;		On exit  : 0/0
  5876 ;;		Unchanged: 0/0
  5877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5878 ;;      Params:         0       0       0       0       0       0       0
  5879 ;;      Locals:         0       0       0       0       0       0       0
  5880 ;;      Temps:          0       0       0       0       0       0       0
  5881 ;;      Totals:         0       0       0       0       0       0       0
  5882 ;;Total ram usage:        0 bytes
  5883 ;; Hardware stack levels used:    1
  5884 ;; Hardware stack levels required when called:    4
  5885 ;; This function calls:
  5886 ;;		Nothing
  5887 ;; This function is called by:
  5888 ;;		_SYSTEM_Initialize
  5889 ;; This function uses a non-reentrant model
  5890 ;;
  5891                           
  5892                           	psect	text31
  5893  001E60                     __ptext31:
  5894                           	opt stack 0
  5895  001E60                     _OSCILLATOR_Initialize:
  5896                           	opt stack 25
  5897                           
  5898                           ;mcc.c: 127: OSCCON = 0x60;
  5899                           
  5900                           ; BSR set to: 15
  5901                           ;incstack = 0
  5902  001E60  0E60               	movlw	96
  5903  001E62  6ED3               	movwf	4051,c	;volatile
  5904                           
  5905                           ;mcc.c: 129: OSCCON2 = 0x04;
  5906  001E64  0E04               	movlw	4
  5907  001E66  6ED2               	movwf	4050,c	;volatile
  5908                           
  5909                           ;mcc.c: 131: OSCTUNE = 0x00;
  5910  001E68  0E00               	movlw	0
  5911  001E6A  6E9B               	movwf	3995,c	;volatile
  5912  001E6C  0012               	return		;funcret
  5913  001E6E                     __end_of_OSCILLATOR_Initialize:
  5914                           	opt stack 0
  5915                           tosu	equ	0xFFF
  5916                           tosh	equ	0xFFE
  5917                           tosl	equ	0xFFD
  5918                           pclath	equ	0xFFA
  5919                           tblptru	equ	0xFF8
  5920                           tblptrh	equ	0xFF7
  5921                           tblptrl	equ	0xFF6
  5922                           tablat	equ	0xFF5
  5923                           prodh	equ	0xFF4
  5924                           prodl	equ	0xFF3
  5925                           intcon	equ	0xFF2
  5926                           intcon2	equ	0xFF1
  5927                           postinc0	equ	0xFEE
  5928                           wreg	equ	0xFE8
  5929                           indf2	equ	0xFDF
  5930                           postinc2	equ	0xFDE
  5931                           postdec2	equ	0xFDD
  5932                           plusw2	equ	0xFDB
  5933                           fsr2h	equ	0xFDA
  5934                           fsr2l	equ	0xFD9
  5935                           status	equ	0xFD8
  5936                           
  5937 ;; *************** function _INTERRUPT_Initialize *****************
  5938 ;; Defined at:
  5939 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  5940 ;; Parameters:    Size  Location     Type
  5941 ;;		None
  5942 ;; Auto vars:     Size  Location     Type
  5943 ;;		None
  5944 ;; Return value:  Size  Location     Type
  5945 ;;                  1    wreg      void 
  5946 ;; Registers used:
  5947 ;;		None
  5948 ;; Tracked objects:
  5949 ;;		On entry : 0/0
  5950 ;;		On exit  : 0/0
  5951 ;;		Unchanged: 0/0
  5952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5953 ;;      Params:         0       0       0       0       0       0       0
  5954 ;;      Locals:         0       0       0       0       0       0       0
  5955 ;;      Temps:          0       0       0       0       0       0       0
  5956 ;;      Totals:         0       0       0       0       0       0       0
  5957 ;;Total ram usage:        0 bytes
  5958 ;; Hardware stack levels used:    1
  5959 ;; Hardware stack levels required when called:    4
  5960 ;; This function calls:
  5961 ;;		Nothing
  5962 ;; This function is called by:
  5963 ;;		_SYSTEM_Initialize
  5964 ;; This function uses a non-reentrant model
  5965 ;;
  5966                           
  5967                           	psect	text32
  5968  001E6E                     __ptext32:
  5969                           	opt stack 0
  5970  001E6E                     _INTERRUPT_Initialize:
  5971                           	opt stack 25
  5972                           
  5973                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  5974                           
  5975                           ;incstack = 0
  5976  001E6E  9ED0               	bcf	4048,7,c	;volatile
  5977                           
  5978                           ;interrupt_manager.c: 60: IPR1bits.RC1IP = 0;
  5979  001E70  9A9F               	bcf	3999,5,c	;volatile
  5980                           
  5981                           ;interrupt_manager.c: 62: IPR1bits.TX1IP = 0;
  5982  001E72  989F               	bcf	3999,4,c	;volatile
  5983                           
  5984                           ;interrupt_manager.c: 64: IPR1bits.ADIP = 0;
  5985  001E74  9C9F               	bcf	3999,6,c	;volatile
  5986  001E76  0012               	return		;funcret
  5987  001E78                     __end_of_INTERRUPT_Initialize:
  5988                           	opt stack 0
  5989                           tosu	equ	0xFFF
  5990                           tosh	equ	0xFFE
  5991                           tosl	equ	0xFFD
  5992                           pclath	equ	0xFFA
  5993                           tblptru	equ	0xFF8
  5994                           tblptrh	equ	0xFF7
  5995                           tblptrl	equ	0xFF6
  5996                           tablat	equ	0xFF5
  5997                           prodh	equ	0xFF4
  5998                           prodl	equ	0xFF3
  5999                           intcon	equ	0xFF2
  6000                           intcon2	equ	0xFF1
  6001                           postinc0	equ	0xFEE
  6002                           wreg	equ	0xFE8
  6003                           indf2	equ	0xFDF
  6004                           postinc2	equ	0xFDE
  6005                           postdec2	equ	0xFDD
  6006                           plusw2	equ	0xFDB
  6007                           fsr2h	equ	0xFDA
  6008                           fsr2l	equ	0xFD9
  6009                           status	equ	0xFD8
  6010                           
  6011 ;; *************** function _EUSART1_Initialize *****************
  6012 ;; Defined at:
  6013 ;;		line 21 in file "UART.c"
  6014 ;; Parameters:    Size  Location     Type
  6015 ;;		None
  6016 ;; Auto vars:     Size  Location     Type
  6017 ;;		None
  6018 ;; Return value:  Size  Location     Type
  6019 ;;                  1    wreg      void 
  6020 ;; Registers used:
  6021 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6022 ;; Tracked objects:
  6023 ;;		On entry : 0/0
  6024 ;;		On exit  : 0/0
  6025 ;;		Unchanged: 0/0
  6026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6027 ;;      Params:         0       0       0       0       0       0       0
  6028 ;;      Locals:         0       0       0       0       0       0       0
  6029 ;;      Temps:          0       0       0       0       0       0       0
  6030 ;;      Totals:         0       0       0       0       0       0       0
  6031 ;;Total ram usage:        0 bytes
  6032 ;; Hardware stack levels used:    1
  6033 ;; Hardware stack levels required when called:    6
  6034 ;; This function calls:
  6035 ;;		_UART_buff_init
  6036 ;; This function is called by:
  6037 ;;		_SYSTEM_Initialize
  6038 ;; This function uses a non-reentrant model
  6039 ;;
  6040                           
  6041                           	psect	text33
  6042  001B0C                     __ptext33:
  6043                           	opt stack 0
  6044  001B0C                     _EUSART1_Initialize:
  6045                           	opt stack 23
  6046                           
  6047                           ;UART.c: 23: PIE1bits.RC1IE = 0;
  6048                           
  6049                           ;incstack = 0
  6050  001B0C  9A9D               	bcf	3997,5,c	;volatile
  6051                           
  6052                           ;UART.c: 24: PIE1bits.TX1IE = 0;
  6053  001B0E  989D               	bcf	3997,4,c	;volatile
  6054                           
  6055                           ;UART.c: 29: BAUD1CON = 0x48;
  6056  001B10  0E48               	movlw	72
  6057  001B12  6EB8               	movwf	4024,c	;volatile
  6058                           
  6059                           ;UART.c: 32: RC1STA = 0x98;
  6060  001B14  0E98               	movlw	152
  6061  001B16  6EAB               	movwf	4011,c	;volatile
  6062                           
  6063                           ;UART.c: 35: TX1STA = 0x26;
  6064  001B18  0E26               	movlw	38
  6065  001B1A  6EAC               	movwf	4012,c	;volatile
  6066                           
  6067                           ;UART.c: 38: SPBRG1 = (((8000000/38400)/4)-1);
  6068  001B1C  0E33               	movlw	51
  6069  001B1E  6EAF               	movwf	4015,c	;volatile
  6070                           
  6071                           ;UART.c: 41: SPBRGH1 = 0x00;
  6072  001B20  0E00               	movlw	0
  6073  001B22  6EB0               	movwf	4016,c	;volatile
  6074                           
  6075                           ;UART.c: 44: TXREG1 = 0x00;
  6076  001B24  0E00               	movlw	0
  6077  001B26  6EAD               	movwf	4013,c	;volatile
  6078                           
  6079                           ;UART.c: 47: RCREG1 = 0x00;
  6080  001B28  0E00               	movlw	0
  6081  001B2A  6EAE               	movwf	4014,c	;volatile
  6082                           
  6083                           ;UART.c: 49: UART_buff_init(&input_buffer);
  6084  001B2C  0E00               	movlw	low _input_buffer
  6085  001B2E  6E23               	movwf	UART_buff_init@_this,c
  6086  001B30  0E03               	movlw	high _input_buffer
  6087  001B32  6E24               	movwf	UART_buff_init@_this+1,c
  6088  001B34  EC9B  F00E         	call	_UART_buff_init	;wreg free
  6089                           
  6090                           ;UART.c: 50: UART_buff_init(&output_buffer);
  6091  001B38  0E00               	movlw	low _output_buffer
  6092  001B3A  6E23               	movwf	UART_buff_init@_this,c
  6093  001B3C  0E04               	movlw	high _output_buffer
  6094  001B3E  6E24               	movwf	UART_buff_init@_this+1,c
  6095  001B40  EC9B  F00E         	call	_UART_buff_init	;wreg free
  6096                           
  6097                           ;UART.c: 52: PIE1bits.RC1IE = 1;
  6098  001B44  8A9D               	bsf	3997,5,c	;volatile
  6099  001B46  0012               	return		;funcret
  6100  001B48                     __end_of_EUSART1_Initialize:
  6101                           	opt stack 0
  6102                           tosu	equ	0xFFF
  6103                           tosh	equ	0xFFE
  6104                           tosl	equ	0xFFD
  6105                           pclath	equ	0xFFA
  6106                           tblptru	equ	0xFF8
  6107                           tblptrh	equ	0xFF7
  6108                           tblptrl	equ	0xFF6
  6109                           tablat	equ	0xFF5
  6110                           prodh	equ	0xFF4
  6111                           prodl	equ	0xFF3
  6112                           intcon	equ	0xFF2
  6113                           intcon2	equ	0xFF1
  6114                           postinc0	equ	0xFEE
  6115                           wreg	equ	0xFE8
  6116                           indf2	equ	0xFDF
  6117                           postinc2	equ	0xFDE
  6118                           postdec2	equ	0xFDD
  6119                           plusw2	equ	0xFDB
  6120                           fsr2h	equ	0xFDA
  6121                           fsr2l	equ	0xFD9
  6122                           status	equ	0xFD8
  6123                           
  6124 ;; *************** function _UART_buff_init *****************
  6125 ;; Defined at:
  6126 ;;		line 56 in file "UART.c"
  6127 ;; Parameters:    Size  Location     Type
  6128 ;;  _this           2   34[COMRAM] PTR struct UART_ring_buf
  6129 ;;		 -> output_buffer(206), input_buffer(206), 
  6130 ;; Auto vars:     Size  Location     Type
  6131 ;;		None
  6132 ;; Return value:  Size  Location     Type
  6133 ;;                  1    wreg      void 
  6134 ;; Registers used:
  6135 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6136 ;; Tracked objects:
  6137 ;;		On entry : 0/0
  6138 ;;		On exit  : 0/0
  6139 ;;		Unchanged: 0/0
  6140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6141 ;;      Params:         2       0       0       0       0       0       0
  6142 ;;      Locals:         0       0       0       0       0       0       0
  6143 ;;      Temps:          0       0       0       0       0       0       0
  6144 ;;      Totals:         2       0       0       0       0       0       0
  6145 ;;Total ram usage:        2 bytes
  6146 ;; Hardware stack levels used:    1
  6147 ;; Hardware stack levels required when called:    5
  6148 ;; This function calls:
  6149 ;;		_memset
  6150 ;; This function is called by:
  6151 ;;		_EUSART1_Initialize
  6152 ;; This function uses a non-reentrant model
  6153 ;;
  6154                           
  6155                           	psect	text34
  6156  001D36                     __ptext34:
  6157                           	opt stack 0
  6158  001D36                     _UART_buff_init:
  6159                           	opt stack 23
  6160                           
  6161                           ;UART.c: 65: memset(_this, 0, sizeof (*_this));
  6162                           
  6163                           ;incstack = 0
  6164  001D36  C023  F01B         	movff	UART_buff_init@_this,memset@p1
  6165  001D3A  C024  F01C         	movff	UART_buff_init@_this+1,memset@p1+1
  6166  001D3E  0E00               	movlw	0
  6167  001D40  6E1E               	movwf	memset@c+1,c
  6168  001D42  0E00               	movlw	0
  6169  001D44  6E1D               	movwf	memset@c,c
  6170  001D46  0E00               	movlw	0
  6171  001D48  6E20               	movwf	memset@n+1,c
  6172  001D4A  0ECE               	movlw	206
  6173  001D4C  6E1F               	movwf	memset@n,c
  6174  001D4E  EC25  F00E         	call	_memset	;wreg free
  6175  001D52  0012               	return		;funcret
  6176  001D54                     __end_of_UART_buff_init:
  6177                           	opt stack 0
  6178                           tosu	equ	0xFFF
  6179                           tosh	equ	0xFFE
  6180                           tosl	equ	0xFFD
  6181                           pclath	equ	0xFFA
  6182                           tblptru	equ	0xFF8
  6183                           tblptrh	equ	0xFF7
  6184                           tblptrl	equ	0xFF6
  6185                           tablat	equ	0xFF5
  6186                           prodh	equ	0xFF4
  6187                           prodl	equ	0xFF3
  6188                           intcon	equ	0xFF2
  6189                           intcon2	equ	0xFF1
  6190                           postinc0	equ	0xFEE
  6191                           wreg	equ	0xFE8
  6192                           indf2	equ	0xFDF
  6193                           postinc2	equ	0xFDE
  6194                           postdec2	equ	0xFDD
  6195                           plusw2	equ	0xFDB
  6196                           fsr2h	equ	0xFDA
  6197                           fsr2l	equ	0xFD9
  6198                           status	equ	0xFD8
  6199                           
  6200 ;; *************** function _memset *****************
  6201 ;; Defined at:
  6202 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\memset.c"
  6203 ;; Parameters:    Size  Location     Type
  6204 ;;  p1              2   26[COMRAM] PTR void 
  6205 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  6206 ;;  c               2   28[COMRAM] int 
  6207 ;;  n               2   30[COMRAM] unsigned int 
  6208 ;; Auto vars:     Size  Location     Type
  6209 ;;  p               2   32[COMRAM] PTR unsigned char 
  6210 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  6211 ;; Return value:  Size  Location     Type
  6212 ;;                  2   26[COMRAM] PTR void 
  6213 ;; Registers used:
  6214 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6215 ;; Tracked objects:
  6216 ;;		On entry : 0/0
  6217 ;;		On exit  : 0/0
  6218 ;;		Unchanged: 0/0
  6219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6220 ;;      Params:         6       0       0       0       0       0       0
  6221 ;;      Locals:         2       0       0       0       0       0       0
  6222 ;;      Temps:          0       0       0       0       0       0       0
  6223 ;;      Totals:         8       0       0       0       0       0       0
  6224 ;;Total ram usage:        8 bytes
  6225 ;; Hardware stack levels used:    1
  6226 ;; Hardware stack levels required when called:    4
  6227 ;; This function calls:
  6228 ;;		Nothing
  6229 ;; This function is called by:
  6230 ;;		_FastTransfer_buffer_flush
  6231 ;;		_UART_buff_init
  6232 ;;		_UART_buff_flush
  6233 ;; This function uses a non-reentrant model
  6234 ;;
  6235                           
  6236                           	psect	text35
  6237  001C4A                     __ptext35:
  6238                           	opt stack 0
  6239  001C4A                     _memset:
  6240                           	opt stack 22
  6241                           
  6242                           ;incstack = 0
  6243  001C4A  C01B  F021         	movff	memset@p1,memset@p
  6244  001C4E  C01C  F022         	movff	memset@p1+1,memset@p+1
  6245  001C52  D008               	goto	l3659
  6246  001C54                     l3655:
  6247  001C54  C021  FFD9         	movff	memset@p,fsr2l
  6248  001C58  C022  FFDA         	movff	memset@p+1,fsr2h
  6249  001C5C  C01D  FFDF         	movff	memset@c,indf2
  6250  001C60  4A21               	infsnz	memset@p,f,c
  6251  001C62  2A22               	incf	memset@p+1,f,c
  6252  001C64                     l3659:
  6253  001C64  061F               	decf	memset@n,f,c
  6254  001C66  A0D8               	btfss	status,0,c
  6255  001C68  0620               	decf	memset@n+1,f,c
  6256  001C6A  281F               	incf	memset@n,w,c
  6257  001C6C  E1F3               	bnz	l3655
  6258  001C6E  2820               	incf	memset@n+1,w,c
  6259  001C70  B4D8               	btfsc	status,2,c
  6260  001C72  0012               	return	
  6261  001C74  D7EF               	goto	l3655
  6262  001C76                     __end_of_memset:
  6263                           	opt stack 0
  6264                           tosu	equ	0xFFF
  6265                           tosh	equ	0xFFE
  6266                           tosl	equ	0xFFD
  6267                           pclath	equ	0xFFA
  6268                           tblptru	equ	0xFF8
  6269                           tblptrh	equ	0xFF7
  6270                           tblptrl	equ	0xFF6
  6271                           tablat	equ	0xFF5
  6272                           prodh	equ	0xFF4
  6273                           prodl	equ	0xFF3
  6274                           intcon	equ	0xFF2
  6275                           intcon2	equ	0xFF1
  6276                           postinc0	equ	0xFEE
  6277                           wreg	equ	0xFE8
  6278                           indf2	equ	0xFDF
  6279                           postinc2	equ	0xFDE
  6280                           postdec2	equ	0xFDD
  6281                           plusw2	equ	0xFDB
  6282                           fsr2h	equ	0xFDA
  6283                           fsr2l	equ	0xFD9
  6284                           status	equ	0xFD8
  6285                           
  6286 ;; *************** function _ADC_Initialize *****************
  6287 ;; Defined at:
  6288 ;;		line 59 in file "mcc_generated_files/adc.c"
  6289 ;; Parameters:    Size  Location     Type
  6290 ;;		None
  6291 ;; Auto vars:     Size  Location     Type
  6292 ;;		None
  6293 ;; Return value:  Size  Location     Type
  6294 ;;                  1    wreg      void 
  6295 ;; Registers used:
  6296 ;;		wreg, status,2
  6297 ;; Tracked objects:
  6298 ;;		On entry : 0/0
  6299 ;;		On exit  : 0/0
  6300 ;;		Unchanged: 0/0
  6301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6302 ;;      Params:         0       0       0       0       0       0       0
  6303 ;;      Locals:         0       0       0       0       0       0       0
  6304 ;;      Temps:          0       0       0       0       0       0       0
  6305 ;;      Totals:         0       0       0       0       0       0       0
  6306 ;;Total ram usage:        0 bytes
  6307 ;; Hardware stack levels used:    1
  6308 ;; Hardware stack levels required when called:    4
  6309 ;; This function calls:
  6310 ;;		Nothing
  6311 ;; This function is called by:
  6312 ;;		_SYSTEM_Initialize
  6313 ;; This function uses a non-reentrant model
  6314 ;;
  6315                           
  6316                           	psect	text36
  6317  001DC2                     __ptext36:
  6318                           	opt stack 0
  6319  001DC2                     _ADC_Initialize:
  6320                           	opt stack 25
  6321                           
  6322                           ;adc.c: 64: ADCON0 = 0x01;
  6323                           
  6324                           ;incstack = 0
  6325  001DC2  0E01               	movlw	1
  6326  001DC4  6EC2               	movwf	4034,c	;volatile
  6327                           
  6328                           ;adc.c: 67: ADCON1 = 0x80;
  6329  001DC6  0E80               	movlw	128
  6330  001DC8  6EC1               	movwf	4033,c	;volatile
  6331                           
  6332                           ;adc.c: 70: ADCON2 = 0x12;
  6333  001DCA  0E12               	movlw	18
  6334  001DCC  6EC0               	movwf	4032,c	;volatile
  6335                           
  6336                           ;adc.c: 73: ADRESL = 0x00;
  6337  001DCE  0E00               	movlw	0
  6338  001DD0  6EC3               	movwf	4035,c	;volatile
  6339                           
  6340                           ;adc.c: 76: ADRESH = 0x00;
  6341  001DD2  0E00               	movlw	0
  6342  001DD4  6EC4               	movwf	4036,c	;volatile
  6343                           
  6344                           ;adc.c: 79: PIE1bits.ADIE = 1;
  6345  001DD6  8C9D               	bsf	3997,6,c	;volatile
  6346  001DD8  0012               	return		;funcret
  6347  001DDA                     __end_of_ADC_Initialize:
  6348                           	opt stack 0
  6349                           tosu	equ	0xFFF
  6350                           tosh	equ	0xFFE
  6351                           tosl	equ	0xFFD
  6352                           pclath	equ	0xFFA
  6353                           tblptru	equ	0xFF8
  6354                           tblptrh	equ	0xFF7
  6355                           tblptrl	equ	0xFF6
  6356                           tablat	equ	0xFF5
  6357                           prodh	equ	0xFF4
  6358                           prodl	equ	0xFF3
  6359                           intcon	equ	0xFF2
  6360                           intcon2	equ	0xFF1
  6361                           postinc0	equ	0xFEE
  6362                           wreg	equ	0xFE8
  6363                           indf2	equ	0xFDF
  6364                           postinc2	equ	0xFDE
  6365                           postdec2	equ	0xFDD
  6366                           plusw2	equ	0xFDB
  6367                           fsr2h	equ	0xFDA
  6368                           fsr2l	equ	0xFD9
  6369                           status	equ	0xFD8
  6370                           
  6371 ;; *************** function _PDUStartup *****************
  6372 ;; Defined at:
  6373 ;;		line 15 in file "PDU.c"
  6374 ;; Parameters:    Size  Location     Type
  6375 ;;		None
  6376 ;; Auto vars:     Size  Location     Type
  6377 ;;		None
  6378 ;; Return value:  Size  Location     Type
  6379 ;;                  1    wreg      void 
  6380 ;; Registers used:
  6381 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6382 ;; Tracked objects:
  6383 ;;		On entry : 0/0
  6384 ;;		On exit  : 0/0
  6385 ;;		Unchanged: 0/0
  6386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6387 ;;      Params:         0       0       0       0       0       0       0
  6388 ;;      Locals:         0       0       0       0       0       0       0
  6389 ;;      Temps:          0       0       0       0       0       0       0
  6390 ;;      Totals:         0       0       0       0       0       0       0
  6391 ;;Total ram usage:        0 bytes
  6392 ;; Hardware stack levels used:    1
  6393 ;; Hardware stack levels required when called:    8
  6394 ;; This function calls:
  6395 ;;		_ComputeStorageData
  6396 ;;		_EnableSlavePower
  6397 ;;		_StartUp595
  6398 ;;		_Update
  6399 ;; This function is called by:
  6400 ;;		_main
  6401 ;; This function uses a non-reentrant model
  6402 ;;
  6403                           
  6404                           	psect	text37
  6405  00191E                     __ptext37:
  6406                           	opt stack 0
  6407  00191E                     _PDUStartup:
  6408                           	opt stack 22
  6409                           
  6410                           ;PDU.c: 18: StartUp595();
  6411                           
  6412                           ;incstack = 0
  6413  00191E  EC5E  F00C         	call	_StartUp595	;wreg free
  6414                           
  6415                           ;PDU.c: 20: EnableSlavePower(SAS, ON);
  6416  001922  0E00               	movlw	0
  6417  001924  0100               	movlb	0	; () banked
  6418  001926  6FD2               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  6419  001928  0E01               	movlw	1
  6420  00192A  6FD1               	movwf	EnableSlavePower@onof& (0+255),b
  6421  00192C  0E03               	movlw	3
  6422  00192E  ECEB  F007         	call	_EnableSlavePower
  6423                           
  6424                           ;PDU.c: 21: EnableSlavePower(DDS, ON);
  6425  001932  0E00               	movlw	0
  6426  001934  0100               	movlb	0	; () banked
  6427  001936  6FD2               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  6428  001938  0E01               	movlw	1
  6429  00193A  6FD1               	movwf	EnableSlavePower@onof& (0+255),b
  6430  00193C  0E01               	movlw	1
  6431  00193E  ECEB  F007         	call	_EnableSlavePower
  6432                           
  6433                           ;PDU.c: 22: EnableSlavePower(MCS, ON);
  6434  001942  0E00               	movlw	0
  6435  001944  0100               	movlb	0	; () banked
  6436  001946  6FD2               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  6437  001948  0E01               	movlw	1
  6438  00194A  6FD1               	movwf	EnableSlavePower@onof& (0+255),b
  6439  00194C  0E02               	movlw	2
  6440  00194E  ECEB  F007         	call	_EnableSlavePower
  6441                           
  6442                           ;PDU.c: 23: EnableSlavePower(BMM, ON);
  6443  001952  0E00               	movlw	0
  6444  001954  0100               	movlb	0	; () banked
  6445  001956  6FD2               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  6446  001958  0E01               	movlw	1
  6447  00195A  6FD1               	movwf	EnableSlavePower@onof& (0+255),b
  6448  00195C  0E04               	movlw	4
  6449  00195E  ECEB  F007         	call	_EnableSlavePower
  6450                           
  6451                           ;PDU.c: 24: EnableSlavePower(TSS, ON);
  6452  001962  0E00               	movlw	0
  6453  001964  0100               	movlb	0	; () banked
  6454  001966  6FD2               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  6455  001968  0E01               	movlw	1
  6456  00196A  6FD1               	movwf	EnableSlavePower@onof& (0+255),b
  6457  00196C  0E05               	movlw	5
  6458  00196E  ECEB  F007         	call	_EnableSlavePower
  6459                           
  6460                           ;PDU.c: 25: Update();
  6461  001972  EC3C  F00F         	call	_Update	;wreg free
  6462                           
  6463                           ;PDU.c: 27: ComputeStorageData();
  6464  001976  EC5B  F008         	call	_ComputeStorageData	;wreg free
  6465  00197A  0012               	return		;funcret
  6466  00197C                     __end_of_PDUStartup:
  6467                           	opt stack 0
  6468                           tosu	equ	0xFFF
  6469                           tosh	equ	0xFFE
  6470                           tosl	equ	0xFFD
  6471                           pclath	equ	0xFFA
  6472                           tblptru	equ	0xFF8
  6473                           tblptrh	equ	0xFF7
  6474                           tblptrl	equ	0xFF6
  6475                           tablat	equ	0xFF5
  6476                           prodh	equ	0xFF4
  6477                           prodl	equ	0xFF3
  6478                           intcon	equ	0xFF2
  6479                           intcon2	equ	0xFF1
  6480                           postinc0	equ	0xFEE
  6481                           wreg	equ	0xFE8
  6482                           indf2	equ	0xFDF
  6483                           postinc2	equ	0xFDE
  6484                           postdec2	equ	0xFDD
  6485                           plusw2	equ	0xFDB
  6486                           fsr2h	equ	0xFDA
  6487                           fsr2l	equ	0xFD9
  6488                           status	equ	0xFD8
  6489                           
  6490 ;; *************** function _Update *****************
  6491 ;; Defined at:
  6492 ;;		line 142 in file "PDU.c"
  6493 ;; Parameters:    Size  Location     Type
  6494 ;;		None
  6495 ;; Auto vars:     Size  Location     Type
  6496 ;;		None
  6497 ;; Return value:  Size  Location     Type
  6498 ;;                  1    wreg      void 
  6499 ;; Registers used:
  6500 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6501 ;; Tracked objects:
  6502 ;;		On entry : 0/0
  6503 ;;		On exit  : 0/0
  6504 ;;		Unchanged: 0/0
  6505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6506 ;;      Params:         0       0       0       0       0       0       0
  6507 ;;      Locals:         0       0       0       0       0       0       0
  6508 ;;      Temps:          0       0       0       0       0       0       0
  6509 ;;      Totals:         0       0       0       0       0       0       0
  6510 ;;Total ram usage:        0 bytes
  6511 ;; Hardware stack levels used:    1
  6512 ;; Hardware stack levels required when called:    6
  6513 ;; This function calls:
  6514 ;;		_writeRegisters
  6515 ;; This function is called by:
  6516 ;;		_processPowerRequest
  6517 ;;		_PDUStartup
  6518 ;;		_ReadCurrent
  6519 ;; This function uses a non-reentrant model
  6520 ;;
  6521                           
  6522                           	psect	text38
  6523  001E78                     __ptext38:
  6524                           	opt stack 0
  6525  001E78                     _Update:
  6526                           	opt stack 22
  6527                           
  6528                           ;PDU.c: 143: writeRegisters();
  6529                           
  6530                           ;incstack = 0
  6531  001E78  ECB4  F00A         	call	_writeRegisters	;wreg free
  6532  001E7C  0012               	return		;funcret
  6533  001E7E                     __end_of_Update:
  6534                           	opt stack 0
  6535                           tosu	equ	0xFFF
  6536                           tosh	equ	0xFFE
  6537                           tosl	equ	0xFFD
  6538                           pclath	equ	0xFFA
  6539                           tblptru	equ	0xFF8
  6540                           tblptrh	equ	0xFF7
  6541                           tblptrl	equ	0xFF6
  6542                           tablat	equ	0xFF5
  6543                           prodh	equ	0xFF4
  6544                           prodl	equ	0xFF3
  6545                           intcon	equ	0xFF2
  6546                           intcon2	equ	0xFF1
  6547                           postinc0	equ	0xFEE
  6548                           wreg	equ	0xFE8
  6549                           indf2	equ	0xFDF
  6550                           postinc2	equ	0xFDE
  6551                           postdec2	equ	0xFDD
  6552                           plusw2	equ	0xFDB
  6553                           fsr2h	equ	0xFDA
  6554                           fsr2l	equ	0xFD9
  6555                           status	equ	0xFD8
  6556                           
  6557 ;; *************** function _StartUp595 *****************
  6558 ;; Defined at:
  6559 ;;		line 10 in file "Shift595.c"
  6560 ;; Parameters:    Size  Location     Type
  6561 ;;		None
  6562 ;; Auto vars:     Size  Location     Type
  6563 ;;		None
  6564 ;; Return value:  Size  Location     Type
  6565 ;;                  1    wreg      void 
  6566 ;; Registers used:
  6567 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6568 ;; Tracked objects:
  6569 ;;		On entry : 0/0
  6570 ;;		On exit  : 0/0
  6571 ;;		Unchanged: 0/0
  6572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6573 ;;      Params:         0       0       0       0       0       0       0
  6574 ;;      Locals:         0       0       0       0       0       0       0
  6575 ;;      Temps:          0       0       0       0       0       0       0
  6576 ;;      Totals:         0       0       0       0       0       0       0
  6577 ;;Total ram usage:        0 bytes
  6578 ;; Hardware stack levels used:    1
  6579 ;; Hardware stack levels required when called:    7
  6580 ;; This function calls:
  6581 ;;		_Clear595
  6582 ;;		_Delay
  6583 ;; This function is called by:
  6584 ;;		_PDUStartup
  6585 ;; This function uses a non-reentrant model
  6586 ;;
  6587                           
  6588                           	psect	text39
  6589  0018BC                     __ptext39:
  6590                           	opt stack 0
  6591  0018BC                     _StartUp595:
  6592                           	opt stack 22
  6593                           
  6594                           ;incstack = 0
  6595                           ;Shift595.c: 12: do { LATD5 = 1; } while(0);
  6596  0018BC  8A8C               	bsf	3980,5,c	;volatile
  6597                           
  6598                           ;Shift595.c: 13: do { LATB0 = 1; } while(0);
  6599  0018BE  808A               	bsf	3978,0,c	;volatile
  6600                           
  6601                           ;Shift595.c: 15: Delay(2);
  6602  0018C0  0E02               	movlw	2
  6603  0018C2  6E1B               	movwf	Delay@wait,c
  6604  0018C4  0E00               	movlw	0
  6605  0018C6  6E1C               	movwf	Delay@wait+1,c
  6606  0018C8  0E00               	movlw	0
  6607  0018CA  6E1D               	movwf	Delay@wait+2,c
  6608  0018CC  0E00               	movlw	0
  6609  0018CE  6E1E               	movwf	Delay@wait+3,c
  6610  0018D0  EC61  F00D         	call	_Delay	;wreg free
  6611                           
  6612                           ;Shift595.c: 16: do { LATD5 = 0; } while(0);
  6613  0018D4  9A8C               	bcf	3980,5,c	;volatile
  6614                           
  6615                           ;Shift595.c: 17: Delay(2);
  6616  0018D6  0E02               	movlw	2
  6617  0018D8  6E1B               	movwf	Delay@wait,c
  6618  0018DA  0E00               	movlw	0
  6619  0018DC  6E1C               	movwf	Delay@wait+1,c
  6620  0018DE  0E00               	movlw	0
  6621  0018E0  6E1D               	movwf	Delay@wait+2,c
  6622  0018E2  0E00               	movlw	0
  6623  0018E4  6E1E               	movwf	Delay@wait+3,c
  6624  0018E6  EC61  F00D         	call	_Delay	;wreg free
  6625                           
  6626                           ;Shift595.c: 18: do { LATB0 = 0; } while(0);
  6627  0018EA  908A               	bcf	3978,0,c	;volatile
  6628                           
  6629                           ;Shift595.c: 19: Delay(2);
  6630  0018EC  0E02               	movlw	2
  6631  0018EE  6E1B               	movwf	Delay@wait,c
  6632  0018F0  0E00               	movlw	0
  6633  0018F2  6E1C               	movwf	Delay@wait+1,c
  6634  0018F4  0E00               	movlw	0
  6635  0018F6  6E1D               	movwf	Delay@wait+2,c
  6636  0018F8  0E00               	movlw	0
  6637  0018FA  6E1E               	movwf	Delay@wait+3,c
  6638  0018FC  EC61  F00D         	call	_Delay	;wreg free
  6639                           
  6640                           ;Shift595.c: 20: do { LATD5 = 1; } while(0);
  6641  001900  8A8C               	bsf	3980,5,c	;volatile
  6642                           
  6643                           ;Shift595.c: 21: Delay(2);
  6644  001902  0E02               	movlw	2
  6645  001904  6E1B               	movwf	Delay@wait,c
  6646  001906  0E00               	movlw	0
  6647  001908  6E1C               	movwf	Delay@wait+1,c
  6648  00190A  0E00               	movlw	0
  6649  00190C  6E1D               	movwf	Delay@wait+2,c
  6650  00190E  0E00               	movlw	0
  6651  001910  6E1E               	movwf	Delay@wait+3,c
  6652  001912  EC61  F00D         	call	_Delay	;wreg free
  6653                           
  6654                           ;Shift595.c: 22: do { LATB0 = 1; } while(0);
  6655  001916  808A               	bsf	3978,0,c	;volatile
  6656                           
  6657                           ;Shift595.c: 24: Clear595();
  6658  001918  ECDA  F00D         	call	_Clear595	;wreg free
  6659  00191C  0012               	return		;funcret
  6660  00191E                     __end_of_StartUp595:
  6661                           	opt stack 0
  6662                           tosu	equ	0xFFF
  6663                           tosh	equ	0xFFE
  6664                           tosl	equ	0xFFD
  6665                           pclath	equ	0xFFA
  6666                           tblptru	equ	0xFF8
  6667                           tblptrh	equ	0xFF7
  6668                           tblptrl	equ	0xFF6
  6669                           tablat	equ	0xFF5
  6670                           prodh	equ	0xFF4
  6671                           prodl	equ	0xFF3
  6672                           intcon	equ	0xFF2
  6673                           intcon2	equ	0xFF1
  6674                           postinc0	equ	0xFEE
  6675                           wreg	equ	0xFE8
  6676                           indf2	equ	0xFDF
  6677                           postinc2	equ	0xFDE
  6678                           postdec2	equ	0xFDD
  6679                           plusw2	equ	0xFDB
  6680                           fsr2h	equ	0xFDA
  6681                           fsr2l	equ	0xFD9
  6682                           status	equ	0xFD8
  6683                           
  6684 ;; *************** function _Clear595 *****************
  6685 ;; Defined at:
  6686 ;;		line 39 in file "Shift595.c"
  6687 ;; Parameters:    Size  Location     Type
  6688 ;;		None
  6689 ;; Auto vars:     Size  Location     Type
  6690 ;;  i               2   35[COMRAM] int 
  6691 ;; Return value:  Size  Location     Type
  6692 ;;                  1    wreg      void 
  6693 ;; Registers used:
  6694 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6695 ;; Tracked objects:
  6696 ;;		On entry : 0/0
  6697 ;;		On exit  : 0/0
  6698 ;;		Unchanged: 0/0
  6699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6700 ;;      Params:         0       0       0       0       0       0       0
  6701 ;;      Locals:         2       0       0       0       0       0       0
  6702 ;;      Temps:          0       0       0       0       0       0       0
  6703 ;;      Totals:         2       0       0       0       0       0       0
  6704 ;;Total ram usage:        2 bytes
  6705 ;; Hardware stack levels used:    1
  6706 ;; Hardware stack levels required when called:    6
  6707 ;; This function calls:
  6708 ;;		_writeRegisters
  6709 ;; This function is called by:
  6710 ;;		_StartUp595
  6711 ;; This function uses a non-reentrant model
  6712 ;;
  6713                           
  6714                           	psect	text40
  6715  001BB4                     __ptext40:
  6716                           	opt stack 0
  6717  001BB4                     _Clear595:
  6718                           	opt stack 22
  6719                           
  6720                           ;Shift595.c: 40: for (int i = 3 * 8 - 1; i >= 0; i--) {
  6721                           
  6722                           ;incstack = 0
  6723  001BB4  0E00               	movlw	0
  6724  001BB6  6E25               	movwf	Clear595@i+1,c
  6725  001BB8  0E17               	movlw	23
  6726  001BBA  6E24               	movwf	Clear595@i,c
  6727  001BBC                     l3911:
  6728  001BBC  BE25               	btfsc	Clear595@i+1,7,c
  6729  001BBE  D011               	goto	l3921
  6730                           
  6731                           ;Shift595.c: 41: registers[i] = 0;
  6732  001BC0  90D8               	bcf	status,0,c
  6733  001BC2  3424               	rlcf	Clear595@i,w,c
  6734  001BC4  6ED9               	movwf	fsr2l,c
  6735  001BC6  3425               	rlcf	Clear595@i+1,w,c
  6736  001BC8  6EDA               	movwf	fsr2h,c
  6737  001BCA  0E00               	movlw	low _registers
  6738  001BCC  26D9               	addwf	fsr2l,f,c
  6739  001BCE  0E01               	movlw	high _registers
  6740  001BD0  22DA               	addwfc	fsr2h,f,c
  6741  001BD2  0E00               	movlw	0
  6742  001BD4  6EDE               	movwf	postinc2,c
  6743  001BD6  0E00               	movlw	0
  6744  001BD8  6EDD               	movwf	postdec2,c
  6745  001BDA  0624               	decf	Clear595@i,f,c
  6746  001BDC  A0D8               	btfss	status,0,c
  6747  001BDE  0625               	decf	Clear595@i+1,f,c
  6748  001BE0  D7ED               	goto	l3911
  6749  001BE2                     l3921:
  6750                           
  6751                           ;Shift595.c: 42: }
  6752                           ;Shift595.c: 44: writeRegisters();
  6753  001BE2  ECB4  F00A         	call	_writeRegisters	;wreg free
  6754  001BE6  0012               	return		;funcret
  6755  001BE8                     __end_of_Clear595:
  6756                           	opt stack 0
  6757                           tosu	equ	0xFFF
  6758                           tosh	equ	0xFFE
  6759                           tosl	equ	0xFFD
  6760                           pclath	equ	0xFFA
  6761                           tblptru	equ	0xFF8
  6762                           tblptrh	equ	0xFF7
  6763                           tblptrl	equ	0xFF6
  6764                           tablat	equ	0xFF5
  6765                           prodh	equ	0xFF4
  6766                           prodl	equ	0xFF3
  6767                           intcon	equ	0xFF2
  6768                           intcon2	equ	0xFF1
  6769                           postinc0	equ	0xFEE
  6770                           wreg	equ	0xFE8
  6771                           indf2	equ	0xFDF
  6772                           postinc2	equ	0xFDE
  6773                           postdec2	equ	0xFDD
  6774                           plusw2	equ	0xFDB
  6775                           fsr2h	equ	0xFDA
  6776                           fsr2l	equ	0xFD9
  6777                           status	equ	0xFD8
  6778                           
  6779 ;; *************** function _writeRegisters *****************
  6780 ;; Defined at:
  6781 ;;		line 50 in file "Shift595.c"
  6782 ;; Parameters:    Size  Location     Type
  6783 ;;		None
  6784 ;; Auto vars:     Size  Location     Type
  6785 ;;  i               2    2[BANK0 ] int 
  6786 ;;  val             2    0[BANK0 ] int 
  6787 ;; Return value:  Size  Location     Type
  6788 ;;                  1    wreg      void 
  6789 ;; Registers used:
  6790 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6791 ;; Tracked objects:
  6792 ;;		On entry : 0/0
  6793 ;;		On exit  : 0/0
  6794 ;;		Unchanged: 0/0
  6795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6796 ;;      Params:         0       0       0       0       0       0       0
  6797 ;;      Locals:         0       4       0       0       0       0       0
  6798 ;;      Temps:          0       0       0       0       0       0       0
  6799 ;;      Totals:         0       4       0       0       0       0       0
  6800 ;;Total ram usage:        4 bytes
  6801 ;; Hardware stack levels used:    1
  6802 ;; Hardware stack levels required when called:    5
  6803 ;; This function calls:
  6804 ;;		_Delay
  6805 ;; This function is called by:
  6806 ;;		_Update
  6807 ;;		_Clear595
  6808 ;; This function uses a non-reentrant model
  6809 ;;
  6810                           
  6811                           	psect	text41
  6812  001568                     __ptext41:
  6813                           	opt stack 0
  6814  001568                     _writeRegisters:
  6815                           	opt stack 22
  6816                           
  6817                           ;Shift595.c: 51: int val = 0;
  6818                           
  6819                           ;incstack = 0
  6820  001568  0E00               	movlw	0
  6821  00156A  0100               	movlb	0	; () banked
  6822  00156C  6FD2               	movwf	(writeRegisters@val+1)& (0+255),b
  6823  00156E  0E00               	movlw	0
  6824  001570  6FD1               	movwf	writeRegisters@val& (0+255),b
  6825                           
  6826                           ;Shift595.c: 52: for (int i = 3 * 8 - 1; i >= 0; i--) {
  6827  001572  0E00               	movlw	0
  6828  001574  0100               	movlb	0	; () banked
  6829  001576  6FD4               	movwf	(writeRegisters@i+1)& (0+255),b
  6830  001578  0E17               	movlw	23
  6831  00157A  6FD3               	movwf	writeRegisters@i& (0+255),b
  6832  00157C                     l3783:
  6833                           
  6834                           ; BSR set to: 0
  6835  00157C  0100               	movlb	0	; () banked
  6836  00157E  BFD4               	btfsc	(writeRegisters@i+1)& (0+255),7,b
  6837  001580  D024               	goto	l728
  6838                           
  6839                           ; BSR set to: 0
  6840                           
  6841                           ; BSR set to: 0
  6842                           ;Shift595.c: 53: do { LATD7 = 0; } while(0);
  6843                           
  6844                           ; BSR set to: 0
  6845  001582  9E8C               	bcf	3980,7,c	;volatile
  6846                           
  6847                           ; BSR set to: 0
  6848                           ;Shift595.c: 55: val = registers[i];
  6849                           
  6850                           ; BSR set to: 0
  6851  001584  90D8               	bcf	status,0,c
  6852  001586  0100               	movlb	0	; () banked
  6853  001588  35D3               	rlcf	writeRegisters@i& (0+255),w,b
  6854  00158A  6ED9               	movwf	fsr2l,c
  6855  00158C  0100               	movlb	0	; () banked
  6856  00158E  35D4               	rlcf	(writeRegisters@i+1)& (0+255),w,b
  6857  001590  6EDA               	movwf	fsr2h,c
  6858  001592  0E00               	movlw	low _registers
  6859  001594  26D9               	addwf	fsr2l,f,c
  6860  001596  0E01               	movlw	high _registers
  6861  001598  22DA               	addwfc	fsr2h,f,c
  6862  00159A  CFDE F0D1          	movff	postinc2,writeRegisters@val
  6863  00159E  CFDD F0D2          	movff	postdec2,writeRegisters@val+1
  6864                           
  6865                           ; BSR set to: 0
  6866                           ;Shift595.c: 56: if (val == 1) {
  6867  0015A2  0100               	movlb	0	; () banked
  6868  0015A4  05D1               	decf	writeRegisters@val& (0+255),w,b
  6869  0015A6  0100               	movlb	0	; () banked
  6870  0015A8  11D2               	iorwf	(writeRegisters@val+1)& (0+255),w,b
  6871  0015AA  A4D8               	btfss	status,2,c
  6872  0015AC  D002               	goto	l3791
  6873                           
  6874                           ; BSR set to: 0
  6875                           
  6876                           ;Shift595.c: 57: do { LATD4 = 1; } while(0);
  6877  0015AE  888C               	bsf	3980,4,c	;volatile
  6878                           
  6879                           ; BSR set to: 0
  6880                           ;Shift595.c: 58: } else if (val == 0) {
  6881  0015B0  D006               	goto	l726
  6882  0015B2                     l3791:
  6883                           
  6884                           ; BSR set to: 0
  6885  0015B2  0100               	movlb	0	; () banked
  6886  0015B4  51D1               	movf	writeRegisters@val& (0+255),w,b
  6887  0015B6  0100               	movlb	0	; () banked
  6888  0015B8  11D2               	iorwf	(writeRegisters@val+1)& (0+255),w,b
  6889  0015BA  B4D8               	btfsc	status,2,c
  6890                           
  6891                           ; BSR set to: 0
  6892                           
  6893                           ;Shift595.c: 59: do { LATD4 = 0; } while(0);
  6894  0015BC  988C               	bcf	3980,4,c	;volatile
  6895  0015BE                     l726:
  6896                           
  6897                           ; BSR set to: 0
  6898  0015BE  8E8C               	bsf	3980,7,c	;volatile
  6899                           
  6900                           ; BSR set to: 0
  6901                           
  6902                           ; BSR set to: 0
  6903  0015C0  0100               	movlb	0	; () banked
  6904  0015C2  07D3               	decf	writeRegisters@i& (0+255),f,b
  6905  0015C4  A0D8               	btfss	status,0,c
  6906  0015C6  07D4               	decf	(writeRegisters@i+1)& (0+255),f,b
  6907  0015C8  D7D9               	goto	l3783
  6908  0015CA                     l728:
  6909                           
  6910                           ; BSR set to: 0
  6911  0015CA  9E8C               	bcf	3980,7,c	;volatile
  6912                           
  6913                           ; BSR set to: 0
  6914                           ;Shift595.c: 67: Delay(1);
  6915                           
  6916                           ; BSR set to: 0
  6917  0015CC  0E01               	movlw	1
  6918  0015CE  6E1B               	movwf	Delay@wait,c
  6919  0015D0  0E00               	movlw	0
  6920  0015D2  6E1C               	movwf	Delay@wait+1,c
  6921  0015D4  0E00               	movlw	0
  6922  0015D6  6E1D               	movwf	Delay@wait+2,c
  6923  0015D8  0E00               	movlw	0
  6924  0015DA  6E1E               	movwf	Delay@wait+3,c
  6925  0015DC  EC61  F00D         	call	_Delay	;wreg free
  6926                           
  6927                           ;Shift595.c: 68: do { LATD6 = 1; } while(0);
  6928  0015E0  8C8C               	bsf	3980,6,c	;volatile
  6929                           
  6930                           ;Shift595.c: 69: Delay(1);
  6931  0015E2  0E01               	movlw	1
  6932  0015E4  6E1B               	movwf	Delay@wait,c
  6933  0015E6  0E00               	movlw	0
  6934  0015E8  6E1C               	movwf	Delay@wait+1,c
  6935  0015EA  0E00               	movlw	0
  6936  0015EC  6E1D               	movwf	Delay@wait+2,c
  6937  0015EE  0E00               	movlw	0
  6938  0015F0  6E1E               	movwf	Delay@wait+3,c
  6939  0015F2  EC61  F00D         	call	_Delay	;wreg free
  6940                           
  6941                           ;Shift595.c: 70: do { LATD6 = 0; } while(0);
  6942  0015F6  9C8C               	bcf	3980,6,c	;volatile
  6943  0015F8  0012               	return	
  6944  0015FA                     __end_of_writeRegisters:
  6945                           	opt stack 0
  6946                           tosu	equ	0xFFF
  6947                           tosh	equ	0xFFE
  6948                           tosl	equ	0xFFD
  6949                           pclath	equ	0xFFA
  6950                           tblptru	equ	0xFF8
  6951                           tblptrh	equ	0xFF7
  6952                           tblptrl	equ	0xFF6
  6953                           tablat	equ	0xFF5
  6954                           prodh	equ	0xFF4
  6955                           prodl	equ	0xFF3
  6956                           intcon	equ	0xFF2
  6957                           intcon2	equ	0xFF1
  6958                           postinc0	equ	0xFEE
  6959                           wreg	equ	0xFE8
  6960                           indf2	equ	0xFDF
  6961                           postinc2	equ	0xFDE
  6962                           postdec2	equ	0xFDD
  6963                           plusw2	equ	0xFDB
  6964                           fsr2h	equ	0xFDA
  6965                           fsr2l	equ	0xFD9
  6966                           status	equ	0xFD8
  6967                           
  6968 ;; *************** function _EnableSlavePower *****************
  6969 ;; Defined at:
  6970 ;;		line 32 in file "PDU.c"
  6971 ;; Parameters:    Size  Location     Type
  6972 ;;  slave           1    wreg     enum E5
  6973 ;;  onof            2    0[BANK0 ] int 
  6974 ;; Auto vars:     Size  Location     Type
  6975 ;;  slave           1   36[COMRAM] enum E5
  6976 ;; Return value:  Size  Location     Type
  6977 ;;                  1    wreg      void 
  6978 ;; Registers used:
  6979 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6980 ;; Tracked objects:
  6981 ;;		On entry : 0/0
  6982 ;;		On exit  : 0/0
  6983 ;;		Unchanged: 0/0
  6984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6985 ;;      Params:         0       2       0       0       0       0       0
  6986 ;;      Locals:         1       0       0       0       0       0       0
  6987 ;;      Temps:          0       0       0       0       0       0       0
  6988 ;;      Totals:         1       2       0       0       0       0       0
  6989 ;;Total ram usage:        3 bytes
  6990 ;; Hardware stack levels used:    1
  6991 ;; Hardware stack levels required when called:    5
  6992 ;; This function calls:
  6993 ;;		_SetPin595
  6994 ;; This function is called by:
  6995 ;;		_processPowerRequest
  6996 ;;		_PDUStartup
  6997 ;;		_FuseSystem
  6998 ;; This function uses a non-reentrant model
  6999 ;;
  7000                           
  7001                           	psect	text42
  7002  000FD6                     __ptext42:
  7003                           	opt stack 0
  7004  000FD6                     _EnableSlavePower:
  7005                           	opt stack 23
  7006                           
  7007                           ;incstack = 0
  7008                           ;EnableSlavePower@slave stored from wreg
  7009  000FD6  6E25               	movwf	EnableSlavePower@slave,c
  7010                           
  7011                           ;PDU.c: 33: switch (slave) {
  7012  000FD8  D05A               	goto	l3841
  7013  000FDA                     l3827:
  7014                           
  7015                           ;PDU.c: 35: SetPin595(2, 1, onof);
  7016  000FDA  0E00               	movlw	0
  7017  000FDC  6E1C               	movwf	SetPin595@Reg+1,c
  7018  000FDE  0E02               	movlw	2
  7019  000FE0  6E1B               	movwf	SetPin595@Reg,c
  7020  000FE2  0E00               	movlw	0
  7021  000FE4  6E1E               	movwf	SetPin595@pin+1,c
  7022  000FE6  0E01               	movlw	1
  7023  000FE8  6E1D               	movwf	SetPin595@pin,c
  7024  000FEA  C0D1  F01F         	movff	EnableSlavePower@onof,SetPin595@value
  7025  000FEE  C0D2  F020         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  7026  000FF2  EC15  F00D         	call	_SetPin595	;wreg free
  7027                           
  7028                           ;PDU.c: 36: break;
  7029  000FF6  0012               	return	
  7030  000FF8                     l3829:
  7031                           
  7032                           ;PDU.c: 38: SetPin595(1, 1, onof);
  7033  000FF8  0E00               	movlw	0
  7034  000FFA  6E1C               	movwf	SetPin595@Reg+1,c
  7035  000FFC  0E01               	movlw	1
  7036  000FFE  6E1B               	movwf	SetPin595@Reg,c
  7037  001000  0E00               	movlw	0
  7038  001002  6E1E               	movwf	SetPin595@pin+1,c
  7039  001004  0E01               	movlw	1
  7040  001006  6E1D               	movwf	SetPin595@pin,c
  7041  001008  C0D1  F01F         	movff	EnableSlavePower@onof,SetPin595@value
  7042  00100C  C0D2  F020         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  7043  001010  EC15  F00D         	call	_SetPin595	;wreg free
  7044                           
  7045                           ;PDU.c: 39: break;
  7046  001014  0012               	return	
  7047  001016                     l3831:
  7048                           
  7049                           ;PDU.c: 41: SetPin595(1, 6, onof);
  7050  001016  0E00               	movlw	0
  7051  001018  6E1C               	movwf	SetPin595@Reg+1,c
  7052  00101A  0E01               	movlw	1
  7053  00101C  6E1B               	movwf	SetPin595@Reg,c
  7054  00101E  0E00               	movlw	0
  7055  001020  6E1E               	movwf	SetPin595@pin+1,c
  7056  001022  0E06               	movlw	6
  7057  001024  6E1D               	movwf	SetPin595@pin,c
  7058  001026  C0D1  F01F         	movff	EnableSlavePower@onof,SetPin595@value
  7059  00102A  C0D2  F020         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  7060  00102E  EC15  F00D         	call	_SetPin595	;wreg free
  7061                           
  7062                           ;PDU.c: 42: break;
  7063  001032  0012               	return	
  7064  001034                     l3833:
  7065                           
  7066                           ;PDU.c: 44: SetPin595(2, 6, onof);
  7067  001034  0E00               	movlw	0
  7068  001036  6E1C               	movwf	SetPin595@Reg+1,c
  7069  001038  0E02               	movlw	2
  7070  00103A  6E1B               	movwf	SetPin595@Reg,c
  7071  00103C  0E00               	movlw	0
  7072  00103E  6E1E               	movwf	SetPin595@pin+1,c
  7073  001040  0E06               	movlw	6
  7074  001042  6E1D               	movwf	SetPin595@pin,c
  7075  001044  C0D1  F01F         	movff	EnableSlavePower@onof,SetPin595@value
  7076  001048  C0D2  F020         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  7077  00104C  EC15  F00D         	call	_SetPin595	;wreg free
  7078                           
  7079                           ;PDU.c: 45: break;
  7080  001050  0012               	return	
  7081  001052                     l3835:
  7082                           
  7083                           ;PDU.c: 47: SetPin595(3, 6, onof);
  7084  001052  0E00               	movlw	0
  7085  001054  6E1C               	movwf	SetPin595@Reg+1,c
  7086  001056  0E03               	movlw	3
  7087  001058  6E1B               	movwf	SetPin595@Reg,c
  7088  00105A  0E00               	movlw	0
  7089  00105C  6E1E               	movwf	SetPin595@pin+1,c
  7090  00105E  0E06               	movlw	6
  7091  001060  6E1D               	movwf	SetPin595@pin,c
  7092  001062  C0D1  F01F         	movff	EnableSlavePower@onof,SetPin595@value
  7093  001066  C0D2  F020         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  7094  00106A  EC15  F00D         	call	_SetPin595	;wreg free
  7095                           
  7096                           ;PDU.c: 48: break;
  7097  00106E  0012               	return	
  7098  001070                     l3837:
  7099                           
  7100                           ;PDU.c: 50: SetPin595(3, 1, onof);
  7101  001070  0E00               	movlw	0
  7102  001072  6E1C               	movwf	SetPin595@Reg+1,c
  7103  001074  0E03               	movlw	3
  7104  001076  6E1B               	movwf	SetPin595@Reg,c
  7105  001078  0E00               	movlw	0
  7106  00107A  6E1E               	movwf	SetPin595@pin+1,c
  7107  00107C  0E01               	movlw	1
  7108  00107E  6E1D               	movwf	SetPin595@pin,c
  7109  001080  C0D1  F01F         	movff	EnableSlavePower@onof,SetPin595@value
  7110  001084  C0D2  F020         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  7111  001088  EC15  F00D         	call	_SetPin595	;wreg free
  7112                           
  7113                           ;PDU.c: 52: }
  7114                           
  7115                           ;PDU.c: 51: break;
  7116  00108C  0012               	return	
  7117  00108E                     l3841:
  7118  00108E  5025               	movf	EnableSlavePower@slave,w,c
  7119                           
  7120                           ; Switch size 1, requested type "space"
  7121                           ; Number of cases is 6, Range of values is 1 to 6
  7122                           ; switch strategies available:
  7123                           ; Name         Instructions Cycles
  7124                           ; simple_byte           19    10 (average)
  7125                           ;	Chosen strategy is simple_byte
  7126  001090  0A01               	xorlw	1	; case 1
  7127  001092  B4D8               	btfsc	status,2,c
  7128  001094  D7CF               	goto	l3833
  7129  001096  0A03               	xorlw	3	; case 2
  7130  001098  B4D8               	btfsc	status,2,c
  7131  00109A  D7BD               	goto	l3831
  7132  00109C  0A01               	xorlw	1	; case 3
  7133  00109E  B4D8               	btfsc	status,2,c
  7134  0010A0  D79C               	goto	l3827
  7135  0010A2  0A07               	xorlw	7	; case 4
  7136  0010A4  B4D8               	btfsc	status,2,c
  7137  0010A6  D7A8               	goto	l3829
  7138  0010A8  0A01               	xorlw	1	; case 5
  7139  0010AA  B4D8               	btfsc	status,2,c
  7140  0010AC  D7D2               	goto	l3835
  7141  0010AE  0A03               	xorlw	3	; case 6
  7142  0010B0  A4D8               	btfss	status,2,c
  7143  0010B2  0012               	return	
  7144  0010B4  D7DD               	goto	l3837
  7145  0010B6                     __end_of_EnableSlavePower:
  7146                           	opt stack 0
  7147                           tosu	equ	0xFFF
  7148                           tosh	equ	0xFFE
  7149                           tosl	equ	0xFFD
  7150                           pclath	equ	0xFFA
  7151                           tblptru	equ	0xFF8
  7152                           tblptrh	equ	0xFF7
  7153                           tblptrl	equ	0xFF6
  7154                           tablat	equ	0xFF5
  7155                           prodh	equ	0xFF4
  7156                           prodl	equ	0xFF3
  7157                           intcon	equ	0xFF2
  7158                           intcon2	equ	0xFF1
  7159                           postinc0	equ	0xFEE
  7160                           wreg	equ	0xFE8
  7161                           indf2	equ	0xFDF
  7162                           postinc2	equ	0xFDE
  7163                           postdec2	equ	0xFDD
  7164                           plusw2	equ	0xFDB
  7165                           fsr2h	equ	0xFDA
  7166                           fsr2l	equ	0xFD9
  7167                           status	equ	0xFD8
  7168                           
  7169 ;; *************** function _SetPin595 *****************
  7170 ;; Defined at:
  7171 ;;		line 32 in file "Shift595.c"
  7172 ;; Parameters:    Size  Location     Type
  7173 ;;  Reg             2   26[COMRAM] int 
  7174 ;;  pin             2   28[COMRAM] int 
  7175 ;;  value           2   30[COMRAM] int 
  7176 ;; Auto vars:     Size  Location     Type
  7177 ;;		None
  7178 ;; Return value:  Size  Location     Type
  7179 ;;                  1    wreg      void 
  7180 ;; Registers used:
  7181 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7182 ;; Tracked objects:
  7183 ;;		On entry : 0/0
  7184 ;;		On exit  : 0/0
  7185 ;;		Unchanged: 0/0
  7186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7187 ;;      Params:         6       0       0       0       0       0       0
  7188 ;;      Locals:         0       0       0       0       0       0       0
  7189 ;;      Temps:          4       0       0       0       0       0       0
  7190 ;;      Totals:        10       0       0       0       0       0       0
  7191 ;;Total ram usage:       10 bytes
  7192 ;; Hardware stack levels used:    1
  7193 ;; Hardware stack levels required when called:    4
  7194 ;; This function calls:
  7195 ;;		Nothing
  7196 ;; This function is called by:
  7197 ;;		_EnableSlavePower
  7198 ;;		_ReadCurrent
  7199 ;; This function uses a non-reentrant model
  7200 ;;
  7201                           
  7202                           	psect	text43
  7203  001A2A                     __ptext43:
  7204                           	opt stack 0
  7205  001A2A                     _SetPin595:
  7206                           	opt stack 23
  7207                           
  7208                           ;Shift595.c: 33: registers[((Reg - 1)*8) + pin] = value;
  7209                           
  7210                           ;incstack = 0
  7211  001A2A  0EF0               	movlw	240
  7212  001A2C  6E21               	movwf	??_SetPin595& (0+255),c
  7213  001A2E  0EFF               	movlw	255
  7214  001A30  6E22               	movwf	(??_SetPin595+1)& (0+255),c
  7215  001A32  C01B  F023         	movff	SetPin595@Reg,??_SetPin595+2
  7216  001A36  C01C  F024         	movff	SetPin595@Reg+1,??_SetPin595+3
  7217  001A3A  90D8               	bcf	status,0,c
  7218  001A3C  3623               	rlcf	??_SetPin595+2,f,c
  7219  001A3E  3624               	rlcf	??_SetPin595+3,f,c
  7220  001A40  90D8               	bcf	status,0,c
  7221  001A42  3623               	rlcf	??_SetPin595+2,f,c
  7222  001A44  3624               	rlcf	??_SetPin595+3,f,c
  7223  001A46  90D8               	bcf	status,0,c
  7224  001A48  3623               	rlcf	??_SetPin595+2,f,c
  7225  001A4A  3624               	rlcf	??_SetPin595+3,f,c
  7226  001A4C  501D               	movf	SetPin595@pin,w,c
  7227  001A4E  2623               	addwf	??_SetPin595+2,f,c
  7228  001A50  501E               	movf	SetPin595@pin+1,w,c
  7229  001A52  2224               	addwfc	??_SetPin595+3,f,c
  7230  001A54  90D8               	bcf	status,0,c
  7231  001A56  3623               	rlcf	??_SetPin595+2,f,c
  7232  001A58  3624               	rlcf	??_SetPin595+3,f,c
  7233  001A5A  5021               	movf	??_SetPin595,w,c
  7234  001A5C  2623               	addwf	??_SetPin595+2,f,c
  7235  001A5E  5022               	movf	??_SetPin595+1,w,c
  7236  001A60  2224               	addwfc	??_SetPin595+3,f,c
  7237  001A62  0E00               	movlw	low _registers
  7238  001A64  2423               	addwf	??_SetPin595+2,w,c
  7239  001A66  6ED9               	movwf	fsr2l,c
  7240  001A68  0E01               	movlw	high _registers
  7241  001A6A  2024               	addwfc	??_SetPin595+3,w,c
  7242  001A6C  6EDA               	movwf	fsr2h,c
  7243  001A6E  C01F  FFDE         	movff	SetPin595@value,postinc2
  7244  001A72  C020  FFDD         	movff	SetPin595@value+1,postdec2
  7245  001A76  0012               	return		;funcret
  7246  001A78                     __end_of_SetPin595:
  7247                           	opt stack 0
  7248                           tosu	equ	0xFFF
  7249                           tosh	equ	0xFFE
  7250                           tosl	equ	0xFFD
  7251                           pclath	equ	0xFFA
  7252                           tblptru	equ	0xFF8
  7253                           tblptrh	equ	0xFF7
  7254                           tblptrl	equ	0xFF6
  7255                           tablat	equ	0xFF5
  7256                           prodh	equ	0xFF4
  7257                           prodl	equ	0xFF3
  7258                           intcon	equ	0xFF2
  7259                           intcon2	equ	0xFF1
  7260                           postinc0	equ	0xFEE
  7261                           wreg	equ	0xFE8
  7262                           indf2	equ	0xFDF
  7263                           postinc2	equ	0xFDE
  7264                           postdec2	equ	0xFDD
  7265                           plusw2	equ	0xFDB
  7266                           fsr2h	equ	0xFDA
  7267                           fsr2l	equ	0xFD9
  7268                           status	equ	0xFD8
  7269                           
  7270 ;; *************** function _ComputeStorageData *****************
  7271 ;; Defined at:
  7272 ;;		line 94 in file "PDU.c"
  7273 ;; Parameters:    Size  Location     Type
  7274 ;;		None
  7275 ;; Auto vars:     Size  Location     Type
  7276 ;;  i               2   29[COMRAM] int 
  7277 ;; Return value:  Size  Location     Type
  7278 ;;                  1    wreg      void 
  7279 ;; Registers used:
  7280 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7281 ;; Tracked objects:
  7282 ;;		On entry : 0/0
  7283 ;;		On exit  : 0/0
  7284 ;;		Unchanged: 0/0
  7285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7286 ;;      Params:         0       0       0       0       0       0       0
  7287 ;;      Locals:         2       0       0       0       0       0       0
  7288 ;;      Temps:          2       0       0       0       0       0       0
  7289 ;;      Totals:         4       0       0       0       0       0       0
  7290 ;;Total ram usage:        4 bytes
  7291 ;; Hardware stack levels used:    1
  7292 ;; Hardware stack levels required when called:    5
  7293 ;; This function calls:
  7294 ;;		_DATAEE_ReadByte
  7295 ;; This function is called by:
  7296 ;;		_PDUStartup
  7297 ;; This function uses a non-reentrant model
  7298 ;;
  7299                           
  7300                           	psect	text44
  7301  0010B6                     __ptext44:
  7302                           	opt stack 0
  7303  0010B6                     _ComputeStorageData:
  7304                           	opt stack 24
  7305                           
  7306                           ;PDU.c: 95: for (int i = 0; i < 12; i++) {
  7307                           
  7308                           ;incstack = 0
  7309  0010B6  0E00               	movlw	0
  7310  0010B8  6E1F               	movwf	ComputeStorageData@i+1,c
  7311  0010BA  0E00               	movlw	0
  7312  0010BC  6E1E               	movwf	ComputeStorageData@i,c
  7313  0010BE                     l3327:
  7314  0010BE  BE1F               	btfsc	ComputeStorageData@i+1,7,c
  7315  0010C0  D006               	goto	l3331
  7316  0010C2  501F               	movf	ComputeStorageData@i+1,w,c
  7317  0010C4  E111               	bnz	l3337
  7318  0010C6  0E0C               	movlw	12
  7319  0010C8  5C1E               	subwf	ComputeStorageData@i,w,c
  7320  0010CA  B0D8               	btfsc	status,0,c
  7321  0010CC  D00D               	goto	l3337
  7322  0010CE                     l3331:
  7323                           
  7324                           ;PDU.c: 96: data[i] = DATAEE_ReadByte(i);
  7325  0010CE  0E84               	movlw	low _data
  7326  0010D0  241E               	addwf	ComputeStorageData@i,w,c
  7327  0010D2  6ED9               	movwf	fsr2l,c
  7328  0010D4  0E00               	movlw	high _data
  7329  0010D6  201F               	addwfc	ComputeStorageData@i+1,w,c
  7330  0010D8  6EDA               	movwf	fsr2h,c
  7331  0010DA  501E               	movf	ComputeStorageData@i,w,c
  7332  0010DC  EC18  F00F         	call	_DATAEE_ReadByte
  7333  0010E0  6EDF               	movwf	indf2,c
  7334  0010E2  4A1E               	infsnz	ComputeStorageData@i,f,c
  7335  0010E4  2A1F               	incf	ComputeStorageData@i+1,f,c
  7336  0010E6  D7EB               	goto	l3327
  7337  0010E8                     l3337:
  7338                           
  7339                           ;PDU.c: 97: }
  7340                           ;PDU.c: 98: Currentcomp[0] = ((data[0] << 8) | data[1]);
  7341  0010E8  0100               	movlb	0	; () banked
  7342  0010EA  5185               	movf	(_data+1)& (0+255),w,b
  7343  0010EC  C084  F01C         	movff	_data,??_ComputeStorageData
  7344  0010F0  6A1D               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7345  0010F2  C01C  F01D         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7346  0010F6  6A1C               	clrf	??_ComputeStorageData,c
  7347  0010F8  101C               	iorwf	??_ComputeStorageData,w,c
  7348  0010FA  0100               	movlb	0	; () banked
  7349  0010FC  6F78               	movwf	_Currentcomp& (0+255),b
  7350  0010FE  501D               	movf	??_ComputeStorageData+1,w,c
  7351  001100  0100               	movlb	0	; () banked
  7352  001102  6F79               	movwf	(_Currentcomp+1)& (0+255),b
  7353                           
  7354                           ;PDU.c: 99: Currentcomp[1] = ((data[2] << 8) | data[3]);
  7355  001104  0100               	movlb	0	; () banked
  7356  001106  5187               	movf	(_data+3)& (0+255),w,b
  7357  001108  C086  F01C         	movff	_data+2,??_ComputeStorageData
  7358  00110C  6A1D               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7359  00110E  C01C  F01D         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7360  001112  6A1C               	clrf	??_ComputeStorageData,c
  7361  001114  101C               	iorwf	??_ComputeStorageData,w,c
  7362  001116  0100               	movlb	0	; () banked
  7363  001118  6F7A               	movwf	(_Currentcomp+2)& (0+255),b
  7364  00111A  501D               	movf	??_ComputeStorageData+1,w,c
  7365  00111C  0100               	movlb	0	; () banked
  7366  00111E  6F7B               	movwf	(_Currentcomp+3)& (0+255),b
  7367                           
  7368                           ;PDU.c: 100: Currentcomp[2] = ((data[4] << 8) | data[5]);
  7369  001120  0100               	movlb	0	; () banked
  7370  001122  5189               	movf	(_data+5)& (0+255),w,b
  7371  001124  C088  F01C         	movff	_data+4,??_ComputeStorageData
  7372  001128  6A1D               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7373  00112A  C01C  F01D         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7374  00112E  6A1C               	clrf	??_ComputeStorageData,c
  7375  001130  101C               	iorwf	??_ComputeStorageData,w,c
  7376  001132  0100               	movlb	0	; () banked
  7377  001134  6F7C               	movwf	(_Currentcomp+4)& (0+255),b
  7378  001136  501D               	movf	??_ComputeStorageData+1,w,c
  7379  001138  0100               	movlb	0	; () banked
  7380  00113A  6F7D               	movwf	(_Currentcomp+5)& (0+255),b
  7381                           
  7382                           ;PDU.c: 101: Currentcomp[3] = ((data[6] << 8) | data[7]);
  7383  00113C  0100               	movlb	0	; () banked
  7384  00113E  518B               	movf	(_data+7)& (0+255),w,b
  7385  001140  C08A  F01C         	movff	_data+6,??_ComputeStorageData
  7386  001144  6A1D               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7387  001146  C01C  F01D         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7388  00114A  6A1C               	clrf	??_ComputeStorageData,c
  7389  00114C  101C               	iorwf	??_ComputeStorageData,w,c
  7390  00114E  0100               	movlb	0	; () banked
  7391  001150  6F7E               	movwf	(_Currentcomp+6)& (0+255),b
  7392  001152  501D               	movf	??_ComputeStorageData+1,w,c
  7393  001154  0100               	movlb	0	; () banked
  7394  001156  6F7F               	movwf	(_Currentcomp+7)& (0+255),b
  7395                           
  7396                           ;PDU.c: 102: Currentcomp[4] = ((data[8] << 8) | data[9]);
  7397  001158  0100               	movlb	0	; () banked
  7398  00115A  518D               	movf	(_data+9)& (0+255),w,b
  7399  00115C  C08C  F01C         	movff	_data+8,??_ComputeStorageData
  7400  001160  6A1D               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7401  001162  C01C  F01D         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7402  001166  6A1C               	clrf	??_ComputeStorageData,c
  7403  001168  101C               	iorwf	??_ComputeStorageData,w,c
  7404  00116A  0100               	movlb	0	; () banked
  7405  00116C  6F80               	movwf	(_Currentcomp+8)& (0+255),b
  7406  00116E  501D               	movf	??_ComputeStorageData+1,w,c
  7407  001170  0100               	movlb	0	; () banked
  7408  001172  6F81               	movwf	(_Currentcomp+9)& (0+255),b
  7409                           
  7410                           ;PDU.c: 103: Currentcomp[5] = ((data[10] << 8) | data[11]);
  7411  001174  0100               	movlb	0	; () banked
  7412  001176  518F               	movf	(_data+11)& (0+255),w,b
  7413  001178  C08E  F01C         	movff	_data+10,??_ComputeStorageData
  7414  00117C  6A1D               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7415  00117E  C01C  F01D         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7416  001182  6A1C               	clrf	??_ComputeStorageData,c
  7417  001184  101C               	iorwf	??_ComputeStorageData,w,c
  7418  001186  0100               	movlb	0	; () banked
  7419  001188  6F82               	movwf	(_Currentcomp+10)& (0+255),b
  7420  00118A  501D               	movf	??_ComputeStorageData+1,w,c
  7421  00118C  0100               	movlb	0	; () banked
  7422  00118E  6F83               	movwf	(_Currentcomp+11)& (0+255),b
  7423                           
  7424                           ; BSR set to: 0
  7425  001190  0012               	return		;funcret
  7426  001192                     __end_of_ComputeStorageData:
  7427                           	opt stack 0
  7428                           tosu	equ	0xFFF
  7429                           tosh	equ	0xFFE
  7430                           tosl	equ	0xFFD
  7431                           pclath	equ	0xFFA
  7432                           tblptru	equ	0xFF8
  7433                           tblptrh	equ	0xFF7
  7434                           tblptrl	equ	0xFF6
  7435                           tablat	equ	0xFF5
  7436                           prodh	equ	0xFF4
  7437                           prodl	equ	0xFF3
  7438                           intcon	equ	0xFF2
  7439                           intcon2	equ	0xFF1
  7440                           postinc0	equ	0xFEE
  7441                           wreg	equ	0xFE8
  7442                           indf2	equ	0xFDF
  7443                           postinc2	equ	0xFDE
  7444                           postdec2	equ	0xFDD
  7445                           plusw2	equ	0xFDB
  7446                           fsr2h	equ	0xFDA
  7447                           fsr2l	equ	0xFD9
  7448                           status	equ	0xFD8
  7449                           
  7450 ;; *************** function _DATAEE_ReadByte *****************
  7451 ;; Defined at:
  7452 ;;		line 143 in file "mcc_generated_files/memory.c"
  7453 ;; Parameters:    Size  Location     Type
  7454 ;;  bAdd            1    wreg     unsigned char 
  7455 ;; Auto vars:     Size  Location     Type
  7456 ;;  bAdd            1   26[COMRAM] unsigned char 
  7457 ;; Return value:  Size  Location     Type
  7458 ;;                  1    wreg      unsigned char 
  7459 ;; Registers used:
  7460 ;;		wreg, status,2
  7461 ;; Tracked objects:
  7462 ;;		On entry : 0/0
  7463 ;;		On exit  : 0/0
  7464 ;;		Unchanged: 0/0
  7465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7466 ;;      Params:         0       0       0       0       0       0       0
  7467 ;;      Locals:         1       0       0       0       0       0       0
  7468 ;;      Temps:          0       0       0       0       0       0       0
  7469 ;;      Totals:         1       0       0       0       0       0       0
  7470 ;;Total ram usage:        1 bytes
  7471 ;; Hardware stack levels used:    1
  7472 ;; Hardware stack levels required when called:    4
  7473 ;; This function calls:
  7474 ;;		Nothing
  7475 ;; This function is called by:
  7476 ;;		_ComputeStorageData
  7477 ;; This function uses a non-reentrant model
  7478 ;;
  7479                           
  7480                           	psect	text45
  7481  001E30                     __ptext45:
  7482                           	opt stack 0
  7483  001E30                     _DATAEE_ReadByte:
  7484                           	opt stack 24
  7485                           
  7486                           ; BSR set to: 0
  7487                           ;incstack = 0
  7488                           ;DATAEE_ReadByte@bAdd stored from wreg
  7489  001E30  6E1B               	movwf	DATAEE_ReadByte@bAdd,c
  7490                           
  7491                           ;memory.c: 145: EEADR = (bAdd & 0xFF);
  7492  001E32  C01B  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
  7493                           
  7494                           ;memory.c: 146: EECON1bits.CFGS = 0;
  7495  001E36  9CA6               	bcf	4006,6,c	;volatile
  7496                           
  7497                           ;memory.c: 147: EECON1bits.EEPGD = 0;
  7498  001E38  9EA6               	bcf	4006,7,c	;volatile
  7499                           
  7500                           ;memory.c: 148: EECON1bits.RD = 1;
  7501  001E3A  80A6               	bsf	4006,0,c	;volatile
  7502                           
  7503                           ;memory.c: 149: __nop();
  7504  001E3C  F000               	nop	
  7505                           
  7506                           ;memory.c: 150: __nop();
  7507  001E3E  F000               	nop	
  7508                           
  7509                           ;memory.c: 152: return (EEDATA);
  7510  001E40  50A8               	movf	4008,w,c	;volatile
  7511  001E42  0012               	return	
  7512  001E44                     __end_of_DATAEE_ReadByte:
  7513                           	opt stack 0
  7514                           tosu	equ	0xFFF
  7515                           tosh	equ	0xFFE
  7516                           tosl	equ	0xFFD
  7517                           pclath	equ	0xFFA
  7518                           tblptru	equ	0xFF8
  7519                           tblptrh	equ	0xFF7
  7520                           tblptrl	equ	0xFF6
  7521                           tablat	equ	0xFF5
  7522                           prodh	equ	0xFF4
  7523                           prodl	equ	0xFF3
  7524                           intcon	equ	0xFF2
  7525                           intcon2	equ	0xFF1
  7526                           postinc0	equ	0xFEE
  7527                           wreg	equ	0xFE8
  7528                           indf2	equ	0xFDF
  7529                           postinc2	equ	0xFDE
  7530                           postdec2	equ	0xFDD
  7531                           plusw2	equ	0xFDB
  7532                           fsr2h	equ	0xFDA
  7533                           fsr2l	equ	0xFD9
  7534                           status	equ	0xFD8
  7535                           
  7536 ;; *************** function _CoolingStart *****************
  7537 ;; Defined at:
  7538 ;;		line 19 in file "../../2016/trunk/PDU/CoolingControl.c"
  7539 ;; Parameters:    Size  Location     Type
  7540 ;;		None
  7541 ;; Auto vars:     Size  Location     Type
  7542 ;;		None
  7543 ;; Return value:  Size  Location     Type
  7544 ;;                  1    wreg      void 
  7545 ;; Registers used:
  7546 ;;		wreg, status,2, status,0, cstack
  7547 ;; Tracked objects:
  7548 ;;		On entry : 0/0
  7549 ;;		On exit  : 0/0
  7550 ;;		Unchanged: 0/0
  7551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7552 ;;      Params:         0       0       0       0       0       0       0
  7553 ;;      Locals:         0       0       0       0       0       0       0
  7554 ;;      Temps:          0       0       0       0       0       0       0
  7555 ;;      Totals:         0       0       0       0       0       0       0
  7556 ;;Total ram usage:        0 bytes
  7557 ;; Hardware stack levels used:    1
  7558 ;; Hardware stack levels required when called:    6
  7559 ;; This function calls:
  7560 ;;		_PWM4_LoadDutyValue
  7561 ;;		_PotClear
  7562 ;;		_PotSetpoint
  7563 ;; This function is called by:
  7564 ;;		_main
  7565 ;; This function uses a non-reentrant model
  7566 ;;
  7567                           
  7568                           	psect	text46
  7569  001D54                     __ptext46:
  7570                           	opt stack 0
  7571  001D54                     _CoolingStart:
  7572                           	opt stack 24
  7573                           
  7574                           ;CoolingControl.c: 21: PotClear();
  7575                           
  7576                           ;incstack = 0
  7577  001D54  EC07  F00A         	call	_PotClear	;wreg free
  7578                           
  7579                           ;CoolingControl.c: 22: PotSetpoint(15);
  7580  001D58  0E00               	movlw	0
  7581  001D5A  6E25               	movwf	PotSetpoint@new_point+1,c
  7582  001D5C  0E0F               	movlw	15
  7583  001D5E  6E24               	movwf	PotSetpoint@new_point,c
  7584  001D60  ECB7  F005         	call	_PotSetpoint	;wreg free
  7585                           
  7586                           ;CoolingControl.c: 23: PWM4_LoadDutyValue(700);
  7587  001D64  0E02               	movlw	2
  7588  001D66  6E1C               	movwf	PWM4_LoadDutyValue@dutyValue+1,c
  7589  001D68  0EBC               	movlw	188
  7590  001D6A  6E1B               	movwf	PWM4_LoadDutyValue@dutyValue,c
  7591  001D6C  ECBF  F00D         	call	_PWM4_LoadDutyValue	;wreg free
  7592  001D70  0012               	return		;funcret
  7593  001D72                     __end_of_CoolingStart:
  7594                           	opt stack 0
  7595                           tosu	equ	0xFFF
  7596                           tosh	equ	0xFFE
  7597                           tosl	equ	0xFFD
  7598                           pclath	equ	0xFFA
  7599                           tblptru	equ	0xFF8
  7600                           tblptrh	equ	0xFF7
  7601                           tblptrl	equ	0xFF6
  7602                           tablat	equ	0xFF5
  7603                           prodh	equ	0xFF4
  7604                           prodl	equ	0xFF3
  7605                           intcon	equ	0xFF2
  7606                           intcon2	equ	0xFF1
  7607                           postinc0	equ	0xFEE
  7608                           wreg	equ	0xFE8
  7609                           indf2	equ	0xFDF
  7610                           postinc2	equ	0xFDE
  7611                           postdec2	equ	0xFDD
  7612                           plusw2	equ	0xFDB
  7613                           fsr2h	equ	0xFDA
  7614                           fsr2l	equ	0xFD9
  7615                           status	equ	0xFD8
  7616                           
  7617 ;; *************** function _PotSetpoint *****************
  7618 ;; Defined at:
  7619 ;;		line 21 in file "../../2016/trunk/PDU/DigiPot.c"
  7620 ;; Parameters:    Size  Location     Type
  7621 ;;  new_point       2   35[COMRAM] int 
  7622 ;; Auto vars:     Size  Location     Type
  7623 ;;  new_pos         2    6[BANK0 ] int 
  7624 ;;  x               2    4[BANK0 ] int 
  7625 ;;  set_point       2    2[BANK0 ] int 
  7626 ;; Return value:  Size  Location     Type
  7627 ;;                  1    wreg      void 
  7628 ;; Registers used:
  7629 ;;		wreg, status,2, status,0, cstack
  7630 ;; Tracked objects:
  7631 ;;		On entry : 0/0
  7632 ;;		On exit  : 0/0
  7633 ;;		Unchanged: 0/0
  7634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7635 ;;      Params:         2       0       0       0       0       0       0
  7636 ;;      Locals:         0       6       0       0       0       0       0
  7637 ;;      Temps:          0       2       0       0       0       0       0
  7638 ;;      Totals:         2       8       0       0       0       0       0
  7639 ;;Total ram usage:       10 bytes
  7640 ;; Hardware stack levels used:    1
  7641 ;; Hardware stack levels required when called:    5
  7642 ;; This function calls:
  7643 ;;		_Delay
  7644 ;; This function is called by:
  7645 ;;		_CoolingStart
  7646 ;; This function uses a non-reentrant model
  7647 ;;
  7648                           
  7649                           	psect	text47
  7650  000B6E                     __ptext47:
  7651                           	opt stack 0
  7652  000B6E                     _PotSetpoint:
  7653                           	opt stack 24
  7654                           
  7655                           ;DigiPot.c: 22: int set_point;
  7656                           ;DigiPot.c: 24: if (new_point > 32) {
  7657                           
  7658                           ;incstack = 0
  7659  000B6E  BE25               	btfsc	PotSetpoint@new_point+1,7,c
  7660  000B70  D00A               	goto	l4203
  7661  000B72  5025               	movf	PotSetpoint@new_point+1,w,c
  7662  000B74  E104               	bnz	u3940
  7663  000B76  0E21               	movlw	33
  7664  000B78  5C24               	subwf	PotSetpoint@new_point,w,c
  7665  000B7A  A0D8               	btfss	status,0,c
  7666  000B7C  D004               	goto	l4203
  7667  000B7E                     u3940:
  7668                           
  7669                           ;DigiPot.c: 25: new_point = 32;
  7670  000B7E  0E00               	movlw	0
  7671  000B80  6E25               	movwf	PotSetpoint@new_point+1,c
  7672  000B82  0E20               	movlw	32
  7673  000B84  6E24               	movwf	PotSetpoint@new_point,c
  7674  000B86                     l4203:
  7675                           
  7676                           ;DigiPot.c: 26: }
  7677                           ;DigiPot.c: 27: if (new_point <= 0) {
  7678  000B86  BE25               	btfsc	PotSetpoint@new_point+1,7,c
  7679  000B88  D005               	goto	l4205
  7680  000B8A  5025               	movf	PotSetpoint@new_point+1,w,c
  7681  000B8C  E107               	bnz	l4207
  7682  000B8E  0424               	decf	PotSetpoint@new_point,w,c
  7683  000B90  B0D8               	btfsc	status,0,c
  7684  000B92  D004               	goto	l4207
  7685  000B94                     l4205:
  7686                           
  7687                           ;DigiPot.c: 28: new_point = 0;
  7688  000B94  0E00               	movlw	0
  7689  000B96  6E25               	movwf	PotSetpoint@new_point+1,c
  7690  000B98  0E00               	movlw	0
  7691  000B9A  6E24               	movwf	PotSetpoint@new_point,c
  7692  000B9C                     l4207:
  7693                           
  7694                           ;DigiPot.c: 29: }
  7695                           ;DigiPot.c: 31: int new_pos = new_point;
  7696  000B9C  C024  F0D7         	movff	PotSetpoint@new_point,PotSetpoint@new_pos
  7697  000BA0  C025  F0D8         	movff	PotSetpoint@new_point+1,PotSetpoint@new_pos+1
  7698                           
  7699                           ;DigiPot.c: 35: LATB5 = 0;
  7700  000BA4  9A8A               	bcf	3978,5,c	;volatile
  7701                           
  7702                           ;DigiPot.c: 38: if (new_pos > prev_pos) {
  7703  000BA6  0100               	movlb	0	; () banked
  7704  000BA8  51D7               	movf	PotSetpoint@new_pos& (0+255),w,b
  7705  000BAA  5C28               	subwf	_prev_pos,w,c
  7706  000BAC  5029               	movf	_prev_pos+1,w,c
  7707  000BAE  0A80               	xorlw	128
  7708  000BB0  0100               	movlb	0	; () banked
  7709  000BB2  6FD1               	movwf	??_PotSetpoint& (0+255),b
  7710  000BB4  0100               	movlb	0	; () banked
  7711  000BB6  51D8               	movf	(PotSetpoint@new_pos+1)& (0+255),w,b
  7712  000BB8  0A80               	xorlw	128
  7713  000BBA  0100               	movlb	0	; () banked
  7714  000BBC  59D1               	subwfb	??_PotSetpoint& (0+255),w,b
  7715  000BBE  B0D8               	btfsc	status,0,c
  7716  000BC0  D016               	goto	l881
  7717                           
  7718                           ; BSR set to: 0
  7719                           ;DigiPot.c: 40: LATB3 = 1;
  7720  000BC2  868A               	bsf	3978,3,c	;volatile
  7721                           
  7722                           ; BSR set to: 0
  7723                           ;DigiPot.c: 41: set_point = new_pos - prev_pos;
  7724  000BC4  C028  F0D1         	movff	_prev_pos,??_PotSetpoint
  7725  000BC8  C029  F0D2         	movff	_prev_pos+1,??_PotSetpoint+1
  7726  000BCC  0100               	movlb	0	; () banked
  7727  000BCE  1FD1               	comf	??_PotSetpoint& (0+255),f,b
  7728  000BD0  1FD2               	comf	(??_PotSetpoint+1)& (0+255),f,b
  7729  000BD2  4BD1               	infsnz	??_PotSetpoint& (0+255),f,b
  7730  000BD4  2BD2               	incf	(??_PotSetpoint+1)& (0+255),f,b
  7731  000BD6  0100               	movlb	0	; () banked
  7732  000BD8  51D7               	movf	PotSetpoint@new_pos& (0+255),w,b
  7733  000BDA  0100               	movlb	0	; () banked
  7734  000BDC  25D1               	addwf	??_PotSetpoint& (0+255),w,b
  7735  000BDE  0100               	movlb	0	; () banked
  7736  000BE0  6FD3               	movwf	PotSetpoint@set_point& (0+255),b
  7737  000BE2  0100               	movlb	0	; () banked
  7738  000BE4  51D8               	movf	(PotSetpoint@new_pos+1)& (0+255),w,b
  7739  000BE6  0100               	movlb	0	; () banked
  7740  000BE8  21D2               	addwfc	(??_PotSetpoint+1)& (0+255),w,b
  7741  000BEA  0100               	movlb	0	; () banked
  7742  000BEC  6FD4               	movwf	(PotSetpoint@set_point+1)& (0+255),b
  7743  000BEE                     l881:
  7744                           
  7745                           ; BSR set to: 0
  7746                           ;DigiPot.c: 42: }
  7747                           ;DigiPot.c: 43: if (new_pos < prev_pos) {
  7748  000BEE  5028               	movf	_prev_pos,w,c
  7749  000BF0  0100               	movlb	0	; () banked
  7750  000BF2  5DD7               	subwf	PotSetpoint@new_pos& (0+255),w,b
  7751  000BF4  0100               	movlb	0	; () banked
  7752  000BF6  51D8               	movf	(PotSetpoint@new_pos+1)& (0+255),w,b
  7753  000BF8  0A80               	xorlw	128
  7754  000BFA  0100               	movlb	0	; () banked
  7755  000BFC  6FD1               	movwf	??_PotSetpoint& (0+255),b
  7756  000BFE  5029               	movf	_prev_pos+1,w,c
  7757  000C00  0A80               	xorlw	128
  7758  000C02  0100               	movlb	0	; () banked
  7759  000C04  59D1               	subwfb	??_PotSetpoint& (0+255),w,b
  7760  000C06  B0D8               	btfsc	status,0,c
  7761  000C08  D014               	goto	l4221
  7762                           
  7763                           ; BSR set to: 0
  7764                           ;DigiPot.c: 45: LATB3 = 0;
  7765  000C0A  968A               	bcf	3978,3,c	;volatile
  7766                           
  7767                           ; BSR set to: 0
  7768                           ;DigiPot.c: 46: set_point = prev_pos - new_pos;
  7769  000C0C  C0D7  F0D1         	movff	PotSetpoint@new_pos,??_PotSetpoint
  7770  000C10  C0D8  F0D2         	movff	PotSetpoint@new_pos+1,??_PotSetpoint+1
  7771  000C14  0100               	movlb	0	; () banked
  7772  000C16  1FD1               	comf	??_PotSetpoint& (0+255),f,b
  7773  000C18  1FD2               	comf	(??_PotSetpoint+1)& (0+255),f,b
  7774  000C1A  4BD1               	infsnz	??_PotSetpoint& (0+255),f,b
  7775  000C1C  2BD2               	incf	(??_PotSetpoint+1)& (0+255),f,b
  7776  000C1E  5028               	movf	_prev_pos,w,c
  7777  000C20  0100               	movlb	0	; () banked
  7778  000C22  25D1               	addwf	??_PotSetpoint& (0+255),w,b
  7779  000C24  0100               	movlb	0	; () banked
  7780  000C26  6FD3               	movwf	PotSetpoint@set_point& (0+255),b
  7781  000C28  5029               	movf	_prev_pos+1,w,c
  7782  000C2A  0100               	movlb	0	; () banked
  7783  000C2C  21D2               	addwfc	(??_PotSetpoint+1)& (0+255),w,b
  7784  000C2E  0100               	movlb	0	; () banked
  7785  000C30  6FD4               	movwf	(PotSetpoint@set_point+1)& (0+255),b
  7786  000C32                     l4221:
  7787                           
  7788                           ; BSR set to: 0
  7789                           ;DigiPot.c: 47: }
  7790                           ;DigiPot.c: 48: Delay(1);
  7791  000C32  0E01               	movlw	1
  7792  000C34  6E1B               	movwf	Delay@wait,c
  7793  000C36  0E00               	movlw	0
  7794  000C38  6E1C               	movwf	Delay@wait+1,c
  7795  000C3A  0E00               	movlw	0
  7796  000C3C  6E1D               	movwf	Delay@wait+2,c
  7797  000C3E  0E00               	movlw	0
  7798  000C40  6E1E               	movwf	Delay@wait+3,c
  7799  000C42  EC61  F00D         	call	_Delay	;wreg free
  7800                           
  7801                           ;DigiPot.c: 50: int x;
  7802                           ;DigiPot.c: 52: for (x = 0; x < set_point; x++) {
  7803  000C46  0E00               	movlw	0
  7804  000C48  0100               	movlb	0	; () banked
  7805  000C4A  6FD6               	movwf	(PotSetpoint@x+1)& (0+255),b
  7806  000C4C  0E00               	movlw	0
  7807  000C4E  6FD5               	movwf	PotSetpoint@x& (0+255),b
  7808  000C50  D019               	goto	l4231
  7809  000C52                     l884:
  7810                           
  7811                           ; BSR set to: 0
  7812                           ;DigiPot.c: 53: LATB4 = 1;
  7813  000C52  888A               	bsf	3978,4,c	;volatile
  7814                           
  7815                           ; BSR set to: 0
  7816                           ;DigiPot.c: 54: Delay(1);
  7817  000C54  0E01               	movlw	1
  7818  000C56  6E1B               	movwf	Delay@wait,c
  7819  000C58  0E00               	movlw	0
  7820  000C5A  6E1C               	movwf	Delay@wait+1,c
  7821  000C5C  0E00               	movlw	0
  7822  000C5E  6E1D               	movwf	Delay@wait+2,c
  7823  000C60  0E00               	movlw	0
  7824  000C62  6E1E               	movwf	Delay@wait+3,c
  7825  000C64  EC61  F00D         	call	_Delay	;wreg free
  7826                           
  7827                           ;DigiPot.c: 55: LATB4 = 0;
  7828  000C68  988A               	bcf	3978,4,c	;volatile
  7829                           
  7830                           ;DigiPot.c: 56: Delay(1);
  7831  000C6A  0E01               	movlw	1
  7832  000C6C  6E1B               	movwf	Delay@wait,c
  7833  000C6E  0E00               	movlw	0
  7834  000C70  6E1C               	movwf	Delay@wait+1,c
  7835  000C72  0E00               	movlw	0
  7836  000C74  6E1D               	movwf	Delay@wait+2,c
  7837  000C76  0E00               	movlw	0
  7838  000C78  6E1E               	movwf	Delay@wait+3,c
  7839  000C7A  EC61  F00D         	call	_Delay	;wreg free
  7840  000C7E  0100               	movlb	0	; () banked
  7841  000C80  4BD5               	infsnz	PotSetpoint@x& (0+255),f,b
  7842  000C82  2BD6               	incf	(PotSetpoint@x+1)& (0+255),f,b
  7843  000C84                     l4231:
  7844                           
  7845                           ; BSR set to: 0
  7846  000C84  0100               	movlb	0	; () banked
  7847  000C86  51D3               	movf	PotSetpoint@set_point& (0+255),w,b
  7848  000C88  0100               	movlb	0	; () banked
  7849  000C8A  5DD5               	subwf	PotSetpoint@x& (0+255),w,b
  7850  000C8C  0100               	movlb	0	; () banked
  7851  000C8E  51D6               	movf	(PotSetpoint@x+1)& (0+255),w,b
  7852  000C90  0A80               	xorlw	128
  7853  000C92  0100               	movlb	0	; () banked
  7854  000C94  6FD1               	movwf	??_PotSetpoint& (0+255),b
  7855  000C96  0100               	movlb	0	; () banked
  7856  000C98  51D4               	movf	(PotSetpoint@set_point+1)& (0+255),w,b
  7857  000C9A  0A80               	xorlw	128
  7858  000C9C  0100               	movlb	0	; () banked
  7859  000C9E  59D1               	subwfb	??_PotSetpoint& (0+255),w,b
  7860  000CA0  A0D8               	btfss	status,0,c
  7861  000CA2  D7D7               	goto	l884
  7862                           
  7863                           ; BSR set to: 0
  7864                           ;DigiPot.c: 57: }
  7865                           ;DigiPot.c: 59: LATB5 = 1;
  7866  000CA4  8A8A               	bsf	3978,5,c	;volatile
  7867                           
  7868                           ;DigiPot.c: 60: prev_pos = new_pos;
  7869  000CA6  C0D7  F028         	movff	PotSetpoint@new_pos,_prev_pos
  7870  000CAA  C0D8  F029         	movff	PotSetpoint@new_pos+1,_prev_pos+1
  7871                           
  7872                           ; BSR set to: 0
  7873  000CAE  0012               	return		;funcret
  7874  000CB0                     __end_of_PotSetpoint:
  7875                           	opt stack 0
  7876                           tosu	equ	0xFFF
  7877                           tosh	equ	0xFFE
  7878                           tosl	equ	0xFFD
  7879                           pclath	equ	0xFFA
  7880                           tblptru	equ	0xFF8
  7881                           tblptrh	equ	0xFF7
  7882                           tblptrl	equ	0xFF6
  7883                           tablat	equ	0xFF5
  7884                           prodh	equ	0xFF4
  7885                           prodl	equ	0xFF3
  7886                           intcon	equ	0xFF2
  7887                           intcon2	equ	0xFF1
  7888                           postinc0	equ	0xFEE
  7889                           wreg	equ	0xFE8
  7890                           indf2	equ	0xFDF
  7891                           postinc2	equ	0xFDE
  7892                           postdec2	equ	0xFDD
  7893                           plusw2	equ	0xFDB
  7894                           fsr2h	equ	0xFDA
  7895                           fsr2l	equ	0xFD9
  7896                           status	equ	0xFD8
  7897                           
  7898 ;; *************** function _PotClear *****************
  7899 ;; Defined at:
  7900 ;;		line 66 in file "../../2016/trunk/PDU/DigiPot.c"
  7901 ;; Parameters:    Size  Location     Type
  7902 ;;		None
  7903 ;; Auto vars:     Size  Location     Type
  7904 ;;  x               2   35[COMRAM] int 
  7905 ;; Return value:  Size  Location     Type
  7906 ;;                  1    wreg      void 
  7907 ;; Registers used:
  7908 ;;		wreg, status,2, status,0, cstack
  7909 ;; Tracked objects:
  7910 ;;		On entry : 0/0
  7911 ;;		On exit  : 0/0
  7912 ;;		Unchanged: 0/0
  7913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7914 ;;      Params:         0       0       0       0       0       0       0
  7915 ;;      Locals:         2       0       0       0       0       0       0
  7916 ;;      Temps:          0       0       0       0       0       0       0
  7917 ;;      Totals:         2       0       0       0       0       0       0
  7918 ;;Total ram usage:        2 bytes
  7919 ;; Hardware stack levels used:    1
  7920 ;; Hardware stack levels required when called:    5
  7921 ;; This function calls:
  7922 ;;		_Delay
  7923 ;; This function is called by:
  7924 ;;		_CoolingStart
  7925 ;; This function uses a non-reentrant model
  7926 ;;
  7927                           
  7928                           	psect	text48
  7929  00140E                     __ptext48:
  7930                           	opt stack 0
  7931  00140E                     _PotClear:
  7932                           	opt stack 24
  7933                           
  7934                           ;DigiPot.c: 67: Delay(1);
  7935                           
  7936                           ; BSR set to: 0
  7937                           ;incstack = 0
  7938  00140E  0E01               	movlw	1
  7939  001410  6E1B               	movwf	Delay@wait,c
  7940  001412  0E00               	movlw	0
  7941  001414  6E1C               	movwf	Delay@wait+1,c
  7942  001416  0E00               	movlw	0
  7943  001418  6E1D               	movwf	Delay@wait+2,c
  7944  00141A  0E00               	movlw	0
  7945  00141C  6E1E               	movwf	Delay@wait+3,c
  7946  00141E  EC61  F00D         	call	_Delay	;wreg free
  7947                           
  7948                           ;DigiPot.c: 69: LATB5 = 0;
  7949  001422  9A8A               	bcf	3978,5,c	;volatile
  7950                           
  7951                           ;DigiPot.c: 70: Delay(1);
  7952  001424  0E01               	movlw	1
  7953  001426  6E1B               	movwf	Delay@wait,c
  7954  001428  0E00               	movlw	0
  7955  00142A  6E1C               	movwf	Delay@wait+1,c
  7956  00142C  0E00               	movlw	0
  7957  00142E  6E1D               	movwf	Delay@wait+2,c
  7958  001430  0E00               	movlw	0
  7959  001432  6E1E               	movwf	Delay@wait+3,c
  7960  001434  EC61  F00D         	call	_Delay	;wreg free
  7961                           
  7962                           ;DigiPot.c: 71: LATB3 = 0;
  7963  001438  968A               	bcf	3978,3,c	;volatile
  7964                           
  7965                           ;DigiPot.c: 72: Delay(1);
  7966  00143A  0E01               	movlw	1
  7967  00143C  6E1B               	movwf	Delay@wait,c
  7968  00143E  0E00               	movlw	0
  7969  001440  6E1C               	movwf	Delay@wait+1,c
  7970  001442  0E00               	movlw	0
  7971  001444  6E1D               	movwf	Delay@wait+2,c
  7972  001446  0E00               	movlw	0
  7973  001448  6E1E               	movwf	Delay@wait+3,c
  7974  00144A  EC61  F00D         	call	_Delay	;wreg free
  7975                           
  7976                           ;DigiPot.c: 73: int x;
  7977                           ;DigiPot.c: 74: for (x = 0; x < 32; x++) {
  7978  00144E  0E00               	movlw	0
  7979  001450  6E25               	movwf	PotClear@x+1,c
  7980  001452  0E00               	movlw	0
  7981  001454  6E24               	movwf	PotClear@x,c
  7982  001456  BE25               	btfsc	PotClear@x+1,7,c
  7983  001458  D006               	goto	l889
  7984  00145A  5025               	movf	PotClear@x+1,w,c
  7985  00145C  E121               	bnz	l890
  7986  00145E  0E20               	movlw	32
  7987  001460  5C24               	subwf	PotClear@x,w,c
  7988  001462  B0D8               	btfsc	status,0,c
  7989  001464  D01D               	goto	l890
  7990  001466                     l889:
  7991                           
  7992                           ;DigiPot.c: 75: LATB4 = 1;
  7993  001466  888A               	bsf	3978,4,c	;volatile
  7994                           
  7995                           ;DigiPot.c: 76: Delay(1);
  7996  001468  0E01               	movlw	1
  7997  00146A  6E1B               	movwf	Delay@wait,c
  7998  00146C  0E00               	movlw	0
  7999  00146E  6E1C               	movwf	Delay@wait+1,c
  8000  001470  0E00               	movlw	0
  8001  001472  6E1D               	movwf	Delay@wait+2,c
  8002  001474  0E00               	movlw	0
  8003  001476  6E1E               	movwf	Delay@wait+3,c
  8004  001478  EC61  F00D         	call	_Delay	;wreg free
  8005                           
  8006                           ;DigiPot.c: 77: LATB4 = 0;
  8007  00147C  988A               	bcf	3978,4,c	;volatile
  8008                           
  8009                           ;DigiPot.c: 78: Delay(1);
  8010  00147E  0E01               	movlw	1
  8011  001480  6E1B               	movwf	Delay@wait,c
  8012  001482  0E00               	movlw	0
  8013  001484  6E1C               	movwf	Delay@wait+1,c
  8014  001486  0E00               	movlw	0
  8015  001488  6E1D               	movwf	Delay@wait+2,c
  8016  00148A  0E00               	movlw	0
  8017  00148C  6E1E               	movwf	Delay@wait+3,c
  8018  00148E  EC61  F00D         	call	_Delay	;wreg free
  8019  001492  4A24               	infsnz	PotClear@x,f,c
  8020  001494  2A25               	incf	PotClear@x+1,f,c
  8021  001496  BE25               	btfsc	PotClear@x+1,7,c
  8022  001498  D7E6               	goto	l889
  8023  00149A  5025               	movf	PotClear@x+1,w,c
  8024  00149C  E101               	bnz	u3930
  8025  00149E  D7DF               	goto	L1
  8026  0014A0                     u3930:
  8027  0014A0                     l890:
  8028                           
  8029                           ;DigiPot.c: 79: }
  8030                           ;DigiPot.c: 80: LATB4 = 1;
  8031  0014A0  888A               	bsf	3978,4,c	;volatile
  8032                           
  8033                           ;DigiPot.c: 81: Delay(1);
  8034  0014A2  0E01               	movlw	1
  8035  0014A4  6E1B               	movwf	Delay@wait,c
  8036  0014A6  0E00               	movlw	0
  8037  0014A8  6E1C               	movwf	Delay@wait+1,c
  8038  0014AA  0E00               	movlw	0
  8039  0014AC  6E1D               	movwf	Delay@wait+2,c
  8040  0014AE  0E00               	movlw	0
  8041  0014B0  6E1E               	movwf	Delay@wait+3,c
  8042  0014B2  EC61  F00D         	call	_Delay	;wreg free
  8043                           
  8044                           ;DigiPot.c: 83: LATB5 = 1;
  8045  0014B6  8A8A               	bsf	3978,5,c	;volatile
  8046                           
  8047                           ;DigiPot.c: 84: prev_pos = 0;
  8048  0014B8  0E00               	movlw	0
  8049  0014BA  6E29               	movwf	_prev_pos+1,c
  8050  0014BC  0E00               	movlw	0
  8051  0014BE  6E28               	movwf	_prev_pos,c
  8052                           
  8053                           ;DigiPot.c: 85: Delay(1);
  8054  0014C0  0E01               	movlw	1
  8055  0014C2  6E1B               	movwf	Delay@wait,c
  8056  0014C4  0E00               	movlw	0
  8057  0014C6  6E1C               	movwf	Delay@wait+1,c
  8058  0014C8  0E00               	movlw	0
  8059  0014CA  6E1D               	movwf	Delay@wait+2,c
  8060  0014CC  0E00               	movlw	0
  8061  0014CE  6E1E               	movwf	Delay@wait+3,c
  8062  0014D0  EC61  F00D         	call	_Delay	;wreg free
  8063  0014D4  0012               	return		;funcret
  8064  0014D6                     __end_of_PotClear:
  8065                           	opt stack 0
  8066                           tosu	equ	0xFFF
  8067                           tosh	equ	0xFFE
  8068                           tosl	equ	0xFFD
  8069                           pclath	equ	0xFFA
  8070                           tblptru	equ	0xFF8
  8071                           tblptrh	equ	0xFF7
  8072                           tblptrl	equ	0xFF6
  8073                           tablat	equ	0xFF5
  8074                           prodh	equ	0xFF4
  8075                           prodl	equ	0xFF3
  8076                           intcon	equ	0xFF2
  8077                           intcon2	equ	0xFF1
  8078                           postinc0	equ	0xFEE
  8079                           wreg	equ	0xFE8
  8080                           indf2	equ	0xFDF
  8081                           postinc2	equ	0xFDE
  8082                           postdec2	equ	0xFDD
  8083                           plusw2	equ	0xFDB
  8084                           fsr2h	equ	0xFDA
  8085                           fsr2l	equ	0xFD9
  8086                           status	equ	0xFD8
  8087                           
  8088 ;; *************** function _Delay *****************
  8089 ;; Defined at:
  8090 ;;		line 9 in file "Functions.c"
  8091 ;; Parameters:    Size  Location     Type
  8092 ;;  wait            4   26[COMRAM] long 
  8093 ;; Auto vars:     Size  Location     Type
  8094 ;;  i               4   31[COMRAM] long 
  8095 ;; Return value:  Size  Location     Type
  8096 ;;                  1    wreg      void 
  8097 ;; Registers used:
  8098 ;;		wreg, status,2, status,0
  8099 ;; Tracked objects:
  8100 ;;		On entry : 0/0
  8101 ;;		On exit  : 0/0
  8102 ;;		Unchanged: 0/0
  8103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8104 ;;      Params:         4       0       0       0       0       0       0
  8105 ;;      Locals:         4       0       0       0       0       0       0
  8106 ;;      Temps:          1       0       0       0       0       0       0
  8107 ;;      Totals:         9       0       0       0       0       0       0
  8108 ;;Total ram usage:        9 bytes
  8109 ;; Hardware stack levels used:    1
  8110 ;; Hardware stack levels required when called:    4
  8111 ;; This function calls:
  8112 ;;		Nothing
  8113 ;; This function is called by:
  8114 ;;		_respondECU
  8115 ;;		_StartUp595
  8116 ;;		_writeRegisters
  8117 ;;		_PotSetpoint
  8118 ;;		_PotClear
  8119 ;; This function uses a non-reentrant model
  8120 ;;
  8121                           
  8122                           	psect	text49
  8123  001AC2                     __ptext49:
  8124                           	opt stack 0
  8125  001AC2                     _Delay:
  8126                           	opt stack 24
  8127                           
  8128                           ;Functions.c: 10: long int i = 0;
  8129                           
  8130                           ;incstack = 0
  8131  001AC2  0E00               	movlw	0
  8132  001AC4  6E20               	movwf	Delay@i,c
  8133  001AC6  0E00               	movlw	0
  8134  001AC8  6E21               	movwf	Delay@i+1,c
  8135  001ACA  0E00               	movlw	0
  8136  001ACC  6E22               	movwf	Delay@i+2,c
  8137  001ACE  0E00               	movlw	0
  8138  001AD0  6E23               	movwf	Delay@i+3,c
  8139                           
  8140                           ;Functions.c: 11: for (; wait > i; i++) {
  8141  001AD2  D00D               	goto	l3643
  8142  001AD4                     l3639:
  8143                           
  8144                           ;Functions.c: 12: _delay((unsigned long)((1)*(8000000/4000.0)));
  8145  001AD4  0E03               	movlw	3
  8146  001AD6  6E1F               	movwf	??_Delay& (0+255),c
  8147  001AD8  0E98               	movlw	152
  8148  001ADA                     u4137:
  8149  001ADA  2EE8               	decfsz	wreg,f,c
  8150  001ADC  D7FE               	goto	u4137
  8151  001ADE  2E1F               	decfsz	??_Delay& (0+255),f,c
  8152  001AE0  D7FC               	goto	u4137
  8153  001AE2  0E01               	movlw	1
  8154  001AE4  2620               	addwf	Delay@i,f,c
  8155  001AE6  0E00               	movlw	0
  8156  001AE8  2221               	addwfc	Delay@i+1,f,c
  8157  001AEA  2222               	addwfc	Delay@i+2,f,c
  8158  001AEC  2223               	addwfc	Delay@i+3,f,c
  8159  001AEE                     l3643:
  8160  001AEE  501B               	movf	Delay@wait,w,c
  8161  001AF0  5C20               	subwf	Delay@i,w,c
  8162  001AF2  501C               	movf	Delay@wait+1,w,c
  8163  001AF4  5821               	subwfb	Delay@i+1,w,c
  8164  001AF6  501D               	movf	Delay@wait+2,w,c
  8165  001AF8  5822               	subwfb	Delay@i+2,w,c
  8166  001AFA  5023               	movf	Delay@i+3,w,c
  8167  001AFC  0A80               	xorlw	128
  8168  001AFE  6E1F               	movwf	??_Delay& (0+255),c
  8169  001B00  501E               	movf	Delay@wait+3,w,c
  8170  001B02  0A80               	xorlw	128
  8171  001B04  581F               	subwfb	??_Delay& (0+255),w,c
  8172  001B06  B0D8               	btfsc	status,0,c
  8173  001B08  0012               	return	
  8174  001B0A  D7E4               	goto	l3639
  8175  001B0C                     __end_of_Delay:
  8176                           	opt stack 0
  8177                           tosu	equ	0xFFF
  8178                           tosh	equ	0xFFE
  8179                           tosl	equ	0xFFD
  8180                           pclath	equ	0xFFA
  8181                           tblptru	equ	0xFF8
  8182                           tblptrh	equ	0xFF7
  8183                           tblptrl	equ	0xFF6
  8184                           tablat	equ	0xFF5
  8185                           prodh	equ	0xFF4
  8186                           prodl	equ	0xFF3
  8187                           intcon	equ	0xFF2
  8188                           intcon2	equ	0xFF1
  8189                           postinc0	equ	0xFEE
  8190                           wreg	equ	0xFE8
  8191                           indf2	equ	0xFDF
  8192                           postinc2	equ	0xFDE
  8193                           postdec2	equ	0xFDD
  8194                           plusw2	equ	0xFDB
  8195                           fsr2h	equ	0xFDA
  8196                           fsr2l	equ	0xFD9
  8197                           status	equ	0xFD8
  8198                           
  8199 ;; *************** function _PWM4_LoadDutyValue *****************
  8200 ;; Defined at:
  8201 ;;		line 81 in file "../../2016/trunk/PDU/mcc_generated_files/pwm4.c"
  8202 ;; Parameters:    Size  Location     Type
  8203 ;;  dutyValue       2   26[COMRAM] unsigned int 
  8204 ;; Auto vars:     Size  Location     Type
  8205 ;;		None
  8206 ;; Return value:  Size  Location     Type
  8207 ;;                  1    wreg      void 
  8208 ;; Registers used:
  8209 ;;		wreg, status,2, status,0
  8210 ;; Tracked objects:
  8211 ;;		On entry : 0/0
  8212 ;;		On exit  : 0/0
  8213 ;;		Unchanged: 0/0
  8214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8215 ;;      Params:         2       0       0       0       0       0       0
  8216 ;;      Locals:         0       0       0       0       0       0       0
  8217 ;;      Temps:          2       0       0       0       0       0       0
  8218 ;;      Totals:         4       0       0       0       0       0       0
  8219 ;;Total ram usage:        4 bytes
  8220 ;; Hardware stack levels used:    1
  8221 ;; Hardware stack levels required when called:    4
  8222 ;; This function calls:
  8223 ;;		Nothing
  8224 ;; This function is called by:
  8225 ;;		_CoolingStart
  8226 ;; This function uses a non-reentrant model
  8227 ;;
  8228                           
  8229                           	psect	text50
  8230  001B7E                     __ptext50:
  8231                           	opt stack 0
  8232  001B7E                     _PWM4_LoadDutyValue:
  8233                           	opt stack 25
  8234                           
  8235                           ;pwm4.c: 84: CCPR4L = ((dutyValue & 0x03FC)>>2);
  8236                           
  8237                           ;incstack = 0
  8238  001B7E  C01B  F01D         	movff	PWM4_LoadDutyValue@dutyValue,??_PWM4_LoadDutyValue
  8239  001B82  C01C  F01E         	movff	PWM4_LoadDutyValue@dutyValue+1,??_PWM4_LoadDutyValue+1
  8240  001B86  90D8               	bcf	status,0,c
  8241  001B88  321E               	rrcf	??_PWM4_LoadDutyValue+1,f,c
  8242  001B8A  321D               	rrcf	??_PWM4_LoadDutyValue,f,c
  8243  001B8C  90D8               	bcf	status,0,c
  8244  001B8E  321E               	rrcf	??_PWM4_LoadDutyValue+1,f,c
  8245  001B90  321D               	rrcf	??_PWM4_LoadDutyValue,f,c
  8246  001B92  501D               	movf	??_PWM4_LoadDutyValue,w,c
  8247  001B94  010F               	movlb	15	; () banked
  8248  001B96  6F58               	movwf	88,b	;volatile
  8249                           
  8250                           ;pwm4.c: 87: CCP4CON = (CCP4CON & 0xCF) | ((dutyValue & 0x0003)<<4);
  8251  001B98  C01B  F01D         	movff	PWM4_LoadDutyValue@dutyValue,??_PWM4_LoadDutyValue
  8252  001B9C  0E03               	movlw	3
  8253  001B9E  161D               	andwf	??_PWM4_LoadDutyValue,f,c
  8254  001BA0  3A1D               	swapf	??_PWM4_LoadDutyValue,f,c
  8255  001BA2  0EF0               	movlw	240
  8256  001BA4  161D               	andwf	??_PWM4_LoadDutyValue,f,c
  8257  001BA6  010F               	movlb	15	; () banked
  8258  001BA8  5157               	movf	87,w,b	;volatile
  8259  001BAA  0BCF               	andlw	207
  8260  001BAC  101D               	iorwf	??_PWM4_LoadDutyValue,w,c
  8261  001BAE  010F               	movlb	15	; () banked
  8262  001BB0  6F57               	movwf	87,b	;volatile
  8263                           
  8264                           ; BSR set to: 15
  8265  001BB2  0012               	return		;funcret
  8266  001BB4                     __end_of_PWM4_LoadDutyValue:
  8267                           	opt stack 0
  8268                           tosu	equ	0xFFF
  8269                           tosh	equ	0xFFE
  8270                           tosl	equ	0xFFD
  8271                           pclath	equ	0xFFA
  8272                           tblptru	equ	0xFF8
  8273                           tblptrh	equ	0xFF7
  8274                           tblptrl	equ	0xFF6
  8275                           tablat	equ	0xFF5
  8276                           prodh	equ	0xFF4
  8277                           prodl	equ	0xFF3
  8278                           intcon	equ	0xFF2
  8279                           intcon2	equ	0xFF1
  8280                           postinc0	equ	0xFEE
  8281                           wreg	equ	0xFE8
  8282                           indf2	equ	0xFDF
  8283                           postinc2	equ	0xFDE
  8284                           postdec2	equ	0xFDD
  8285                           plusw2	equ	0xFDB
  8286                           fsr2h	equ	0xFDA
  8287                           fsr2l	equ	0xFD9
  8288                           status	equ	0xFD8
  8289                           
  8290 ;; *************** function _INTERRUPT_InterruptManager *****************
  8291 ;; Defined at:
  8292 ;;		line 67 in file "mcc_generated_files/interrupt_manager.c"
  8293 ;; Parameters:    Size  Location     Type
  8294 ;;		None
  8295 ;; Auto vars:     Size  Location     Type
  8296 ;;		None
  8297 ;; Return value:  Size  Location     Type
  8298 ;;                  1    wreg      void 
  8299 ;; Registers used:
  8300 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8301 ;; Tracked objects:
  8302 ;;		On entry : 0/0
  8303 ;;		On exit  : 0/0
  8304 ;;		Unchanged: 0/0
  8305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8306 ;;      Params:         0       0       0       0       0       0       0
  8307 ;;      Locals:         0       0       0       0       0       0       0
  8308 ;;      Temps:         14       0       0       0       0       0       0
  8309 ;;      Totals:        14       0       0       0       0       0       0
  8310 ;;Total ram usage:       14 bytes
  8311 ;; Hardware stack levels used:    1
  8312 ;; Hardware stack levels required when called:    3
  8313 ;; This function calls:
  8314 ;;		_ADC_ISR
  8315 ;;		_EUSART1_Receive_ISR
  8316 ;;		_EUSART1_Transmit_ISR
  8317 ;; This function is called by:
  8318 ;;		Interrupt level 2
  8319 ;; This function uses a non-reentrant model
  8320 ;;
  8321                           
  8322                           	psect	intcode
  8323  000008                     __pintcode:
  8324                           	opt stack 0
  8325  000008                     _INTERRUPT_InterruptManager:
  8326                           	opt stack 21
  8327                           
  8328                           ; BSR set to: 15
  8329                           ;incstack = 0
  8330  000008  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8331  00000A  CFFA F00D          	movff	pclath,??_INTERRUPT_InterruptManager
  8332  00000E  CFFB F00E          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  8333  000012  CFE9 F00F          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  8334  000016  CFEA F010          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  8335  00001A  CFE1 F011          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  8336  00001E  CFE2 F012          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  8337  000022  CFD9 F013          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  8338  000026  CFDA F014          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  8339  00002A  CFF3 F015          	movff	prodl,??_INTERRUPT_InterruptManager+8
  8340  00002E  CFF4 F016          	movff	prodh,??_INTERRUPT_InterruptManager+9
  8341  000032  CFF6 F017          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  8342  000036  CFF7 F018          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  8343  00003A  CFF8 F019          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  8344  00003E  CFF5 F01A          	movff	tablat,??_INTERRUPT_InterruptManager+13
  8345                           
  8346                           ;interrupt_manager.c: 70: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  8347  000042  BA9D               	btfsc	3997,5,c	;volatile
  8348  000044  AA9E               	btfss	3998,5,c	;volatile
  8349  000046  D003               	goto	i2l63
  8350                           
  8351                           ;interrupt_manager.c: 71: {
  8352                           ;interrupt_manager.c: 72: EUSART1_Receive_ISR();
  8353  000048  ECB9  F00E         	call	_EUSART1_Receive_ISR	;wreg free
  8354                           
  8355                           ;interrupt_manager.c: 73: }
  8356  00004C  D00B               	goto	i2l69
  8357  00004E                     i2l63:
  8358                           
  8359                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  8360  00004E  B89D               	btfsc	3997,4,c	;volatile
  8361  000050  A89E               	btfss	3998,4,c	;volatile
  8362  000052  D003               	goto	i2l65
  8363                           
  8364                           ;interrupt_manager.c: 75: {
  8365                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
  8366  000054  ECF4  F00D         	call	_EUSART1_Transmit_ISR	;wreg free
  8367                           
  8368                           ;interrupt_manager.c: 77: }
  8369  000058  D005               	goto	i2l69
  8370  00005A                     i2l65:
  8371                           
  8372                           ;interrupt_manager.c: 78: else if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
  8373  00005A  BC9D               	btfsc	3997,6,c	;volatile
  8374  00005C  AC9E               	btfss	3998,6,c	;volatile
  8375  00005E  D002               	goto	i2l69
  8376                           
  8377                           ;interrupt_manager.c: 79: {
  8378                           ;interrupt_manager.c: 80: ADC_ISR();
  8379  000060  EC41  F00F         	call	_ADC_ISR	;wreg free
  8380  000064                     i2l69:
  8381  000064  C01A  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  8382  000068  C019  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  8383  00006C  C018  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  8384  000070  C017  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  8385  000074  C016  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  8386  000078  C015  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  8387  00007C  C014  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  8388  000080  C013  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  8389  000084  C012  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  8390  000088  C011  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  8391  00008C  C010  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  8392  000090  C00F  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  8393  000094  C00E  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  8394  000098  C00D  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  8395  00009C  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8396  00009E  0011               	retfie		f
  8397  0000A0                     __end_of_INTERRUPT_InterruptManager:
  8398                           	opt stack 0
  8399                           tosu	equ	0xFFF
  8400                           tosh	equ	0xFFE
  8401                           tosl	equ	0xFFD
  8402                           pclatu	equ	0xFFB
  8403                           pclath	equ	0xFFA
  8404                           tblptru	equ	0xFF8
  8405                           tblptrh	equ	0xFF7
  8406                           tblptrl	equ	0xFF6
  8407                           tablat	equ	0xFF5
  8408                           prodh	equ	0xFF4
  8409                           prodl	equ	0xFF3
  8410                           intcon	equ	0xFF2
  8411                           intcon2	equ	0xFF1
  8412                           postinc0	equ	0xFEE
  8413                           fsr0h	equ	0xFEA
  8414                           fsr0l	equ	0xFE9
  8415                           wreg	equ	0xFE8
  8416                           fsr1h	equ	0xFE2
  8417                           fsr1l	equ	0xFE1
  8418                           indf2	equ	0xFDF
  8419                           postinc2	equ	0xFDE
  8420                           postdec2	equ	0xFDD
  8421                           plusw2	equ	0xFDB
  8422                           fsr2h	equ	0xFDA
  8423                           fsr2l	equ	0xFD9
  8424                           status	equ	0xFD8
  8425                           
  8426 ;; *************** function _EUSART1_Transmit_ISR *****************
  8427 ;; Defined at:
  8428 ;;		line 150 in file "UART.c"
  8429 ;; Parameters:    Size  Location     Type
  8430 ;;		None
  8431 ;; Auto vars:     Size  Location     Type
  8432 ;;		None
  8433 ;; Return value:  Size  Location     Type
  8434 ;;                  1    wreg      void 
  8435 ;; Registers used:
  8436 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8437 ;; Tracked objects:
  8438 ;;		On entry : 0/0
  8439 ;;		On exit  : 0/0
  8440 ;;		Unchanged: 0/0
  8441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8442 ;;      Params:         0       0       0       0       0       0       0
  8443 ;;      Locals:         0       0       0       0       0       0       0
  8444 ;;      Temps:          0       0       0       0       0       0       0
  8445 ;;      Totals:         0       0       0       0       0       0       0
  8446 ;;Total ram usage:        0 bytes
  8447 ;; Hardware stack levels used:    1
  8448 ;; Hardware stack levels required when called:    2
  8449 ;; This function calls:
  8450 ;;		i2_UART_buff_get
  8451 ;;		i2_UART_buff_size
  8452 ;; This function is called by:
  8453 ;;		_INTERRUPT_InterruptManager
  8454 ;; This function uses a non-reentrant model
  8455 ;;
  8456                           
  8457                           	psect	text52
  8458  001BE8                     __ptext52:
  8459                           	opt stack 0
  8460  001BE8                     _EUSART1_Transmit_ISR:
  8461                           	opt stack 21
  8462                           
  8463                           ;UART.c: 152: if (UART_buff_size(&output_buffer) > 0) {
  8464                           
  8465                           ;incstack = 0
  8466  001BE8  0E00               	movlw	low _output_buffer
  8467  001BEA  6E01               	movwf	i2UART_buff_size@_this,c
  8468  001BEC  0E04               	movlw	high _output_buffer
  8469  001BEE  6E02               	movwf	i2UART_buff_size@_this+1,c
  8470  001BF0  EC03  F00F         	call	i2_UART_buff_size	;wreg free
  8471  001BF4  BE02               	btfsc	?i2_UART_buff_size+1,7,c
  8472  001BF6  D00D               	goto	i2l3451
  8473  001BF8  5002               	movf	?i2_UART_buff_size+1,w,c
  8474  001BFA  E103               	bnz	i2u272_40
  8475  001BFC  0401               	decf	?i2_UART_buff_size,w,c
  8476  001BFE  A0D8               	btfss	status,0,c
  8477  001C00  D008               	goto	i2l3451
  8478  001C02                     i2u272_40:
  8479                           
  8480                           ;UART.c: 153: TXREG1 = UART_buff_get(&output_buffer);
  8481  001C02  0E00               	movlw	low _output_buffer
  8482  001C04  6E07               	movwf	i2UART_buff_get@_this,c
  8483  001C06  0E04               	movlw	high _output_buffer
  8484  001C08  6E08               	movwf	i2UART_buff_get@_this+1,c
  8485  001C0A  ECFD  F00A         	call	i2_UART_buff_get	;wreg free
  8486  001C0E  6EAD               	movwf	4013,c	;volatile
  8487                           
  8488                           ;UART.c: 154: } else {
  8489  001C10  0012               	return	
  8490  001C12                     i2l3451:
  8491                           
  8492                           ;UART.c: 155: Transmit_stall = 1;
  8493  001C12  0E01               	movlw	1
  8494  001C14  6E44               	movwf	_Transmit_stall,c
  8495                           
  8496                           ;UART.c: 156: PIE1bits.TX1IE = 0;
  8497  001C16  989D               	bcf	3997,4,c	;volatile
  8498  001C18  0012               	return	
  8499  001C1A                     __end_of_EUSART1_Transmit_ISR:
  8500                           	opt stack 0
  8501                           tosu	equ	0xFFF
  8502                           tosh	equ	0xFFE
  8503                           tosl	equ	0xFFD
  8504                           pclatu	equ	0xFFB
  8505                           pclath	equ	0xFFA
  8506                           tblptru	equ	0xFF8
  8507                           tblptrh	equ	0xFF7
  8508                           tblptrl	equ	0xFF6
  8509                           tablat	equ	0xFF5
  8510                           prodh	equ	0xFF4
  8511                           prodl	equ	0xFF3
  8512                           intcon	equ	0xFF2
  8513                           intcon2	equ	0xFF1
  8514                           postinc0	equ	0xFEE
  8515                           fsr0h	equ	0xFEA
  8516                           fsr0l	equ	0xFE9
  8517                           wreg	equ	0xFE8
  8518                           fsr1h	equ	0xFE2
  8519                           fsr1l	equ	0xFE1
  8520                           indf2	equ	0xFDF
  8521                           postinc2	equ	0xFDE
  8522                           postdec2	equ	0xFDD
  8523                           plusw2	equ	0xFDB
  8524                           fsr2h	equ	0xFDA
  8525                           fsr2l	equ	0xFD9
  8526                           status	equ	0xFD8
  8527                           
  8528 ;; *************** function i2_UART_buff_size *****************
  8529 ;; Defined at:
  8530 ;;		line 102 in file "UART.c"
  8531 ;; Parameters:    Size  Location     Type
  8532 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
  8533 ;;		 -> output_buffer(206), input_buffer(206), 
  8534 ;; Auto vars:     Size  Location     Type
  8535 ;;		None
  8536 ;; Return value:  Size  Location     Type
  8537 ;;                  2    0[COMRAM] int 
  8538 ;; Registers used:
  8539 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8540 ;; Tracked objects:
  8541 ;;		On entry : 0/0
  8542 ;;		On exit  : 0/0
  8543 ;;		Unchanged: 0/0
  8544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8545 ;;      Params:         2       0       0       0       0       0       0
  8546 ;;      Locals:         0       0       0       0       0       0       0
  8547 ;;      Temps:          0       0       0       0       0       0       0
  8548 ;;      Totals:         2       0       0       0       0       0       0
  8549 ;;Total ram usage:        2 bytes
  8550 ;; Hardware stack levels used:    1
  8551 ;; This function calls:
  8552 ;;		Nothing
  8553 ;; This function is called by:
  8554 ;;		_EUSART1_Transmit_ISR
  8555 ;; This function uses a non-reentrant model
  8556 ;;
  8557                           
  8558                           	psect	text53
  8559  001E06                     __ptext53:
  8560                           	opt stack 0
  8561  001E06                     i2_UART_buff_size:
  8562                           	opt stack 22
  8563                           
  8564                           ;UART.c: 103: return (_this->count);
  8565                           
  8566                           ;incstack = 0
  8567  001E06  EE20 F0CC          	lfsr	2,204
  8568  001E0A  5001               	movf	i2UART_buff_size@_this,w,c
  8569  001E0C  26D9               	addwf	fsr2l,f,c
  8570  001E0E  5002               	movf	i2UART_buff_size@_this+1,w,c
  8571  001E10  22DA               	addwfc	fsr2h,f,c
  8572  001E12  CFDE F001          	movff	postinc2,?i2_UART_buff_size
  8573  001E16  CFDD F002          	movff	postdec2,?i2_UART_buff_size+1
  8574  001E1A  0012               	return	
  8575  001E1C                     __end_ofi2_UART_buff_size:
  8576                           	opt stack 0
  8577                           tosu	equ	0xFFF
  8578                           tosh	equ	0xFFE
  8579                           tosl	equ	0xFFD
  8580                           pclatu	equ	0xFFB
  8581                           pclath	equ	0xFFA
  8582                           tblptru	equ	0xFF8
  8583                           tblptrh	equ	0xFF7
  8584                           tblptrl	equ	0xFF6
  8585                           tablat	equ	0xFF5
  8586                           prodh	equ	0xFF4
  8587                           prodl	equ	0xFF3
  8588                           intcon	equ	0xFF2
  8589                           intcon2	equ	0xFF1
  8590                           postinc0	equ	0xFEE
  8591                           fsr0h	equ	0xFEA
  8592                           fsr0l	equ	0xFE9
  8593                           wreg	equ	0xFE8
  8594                           fsr1h	equ	0xFE2
  8595                           fsr1l	equ	0xFE1
  8596                           indf2	equ	0xFDF
  8597                           postinc2	equ	0xFDE
  8598                           postdec2	equ	0xFDD
  8599                           plusw2	equ	0xFDB
  8600                           fsr2h	equ	0xFDA
  8601                           fsr2l	equ	0xFD9
  8602                           status	equ	0xFD8
  8603                           
  8604 ;; *************** function i2_UART_buff_get *****************
  8605 ;; Defined at:
  8606 ;;		line 81 in file "UART.c"
  8607 ;; Parameters:    Size  Location     Type
  8608 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  8609 ;;		 -> output_buffer(206), input_buffer(206), 
  8610 ;; Auto vars:     Size  Location     Type
  8611 ;;  UART_buff_ge    1   10[COMRAM] unsigned char 
  8612 ;; Return value:  Size  Location     Type
  8613 ;;                  1    wreg      unsigned char 
  8614 ;; Registers used:
  8615 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8616 ;; Tracked objects:
  8617 ;;		On entry : 0/0
  8618 ;;		On exit  : 0/0
  8619 ;;		Unchanged: 0/0
  8620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8621 ;;      Params:         2       0       0       0       0       0       0
  8622 ;;      Locals:         1       0       0       0       0       0       0
  8623 ;;      Temps:          2       0       0       0       0       0       0
  8624 ;;      Totals:         5       0       0       0       0       0       0
  8625 ;;Total ram usage:        5 bytes
  8626 ;; Hardware stack levels used:    1
  8627 ;; Hardware stack levels required when called:    1
  8628 ;; This function calls:
  8629 ;;		i2_UART_buff_modulo_inc
  8630 ;; This function is called by:
  8631 ;;		_EUSART1_Transmit_ISR
  8632 ;; This function uses a non-reentrant model
  8633 ;;
  8634                           
  8635                           	psect	text54
  8636  0015FA                     __ptext54:
  8637                           	opt stack 0
  8638  0015FA                     i2_UART_buff_get:
  8639                           	opt stack 21
  8640                           
  8641                           ;UART.c: 82: unsigned char c;
  8642                           ;UART.c: 83: if (_this->count > 0) {
  8643                           
  8644                           ;incstack = 0
  8645  0015FA  EE20 F0CC          	lfsr	2,204
  8646  0015FE  5007               	movf	i2UART_buff_get@_this,w,c
  8647  001600  26D9               	addwf	fsr2l,f,c
  8648  001602  5008               	movf	i2UART_buff_get@_this+1,w,c
  8649  001604  22DA               	addwfc	fsr2h,f,c
  8650  001606  0E01               	movlw	1
  8651  001608  BEDB               	btfsc	plusw2,7,c
  8652  00160A  D03C               	goto	i2l3423
  8653  00160C  0E01               	movlw	1
  8654  00160E  50DB               	movf	plusw2,w,c
  8655  001610  E103               	bnz	i2u269_40
  8656  001612  04DE               	decf	postinc2,w,c
  8657  001614  A0D8               	btfss	status,0,c
  8658  001616  D036               	goto	i2l3423
  8659  001618                     i2u269_40:
  8660                           
  8661                           ;UART.c: 84: c = _this->buf[_this->tail];
  8662  001618  EE20 F0CA          	lfsr	2,202
  8663  00161C  5007               	movf	i2UART_buff_get@_this,w,c
  8664  00161E  26D9               	addwf	fsr2l,f,c
  8665  001620  5008               	movf	i2UART_buff_get@_this+1,w,c
  8666  001622  22DA               	addwfc	fsr2h,f,c
  8667  001624  CFDE F009          	movff	postinc2,??i2_UART_buff_get
  8668  001628  CFDD F00A          	movff	postdec2,??i2_UART_buff_get+1
  8669  00162C  5009               	movf	??i2_UART_buff_get,w,c
  8670  00162E  2407               	addwf	i2UART_buff_get@_this,w,c
  8671  001630  6ED9               	movwf	fsr2l,c
  8672  001632  500A               	movf	??i2_UART_buff_get+1,w,c
  8673  001634  2008               	addwfc	i2UART_buff_get@_this+1,w,c
  8674  001636  6EDA               	movwf	fsr2h,c
  8675  001638  50DF               	movf	indf2,w,c
  8676  00163A  6E0B               	movwf	i2UART_buff_get@c,c
  8677                           
  8678                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  8679  00163C  EE20 F0CA          	lfsr	2,202
  8680  001640  5007               	movf	i2UART_buff_get@_this,w,c
  8681  001642  26D9               	addwf	fsr2l,f,c
  8682  001644  5008               	movf	i2UART_buff_get@_this+1,w,c
  8683  001646  22DA               	addwfc	fsr2h,f,c
  8684  001648  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  8685  00164C  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  8686  001650  0E00               	movlw	0
  8687  001652  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  8688  001654  0EC8               	movlw	200
  8689  001656  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  8690  001658  EC65  F00E         	call	i2_UART_buff_modulo_inc	;wreg free
  8691  00165C  EE20 F0CA          	lfsr	2,202
  8692  001660  5007               	movf	i2UART_buff_get@_this,w,c
  8693  001662  26D9               	addwf	fsr2l,f,c
  8694  001664  5008               	movf	i2UART_buff_get@_this+1,w,c
  8695  001666  22DA               	addwfc	fsr2h,f,c
  8696  001668  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  8697  00166C  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  8698                           
  8699                           ;UART.c: 86: --_this->count;
  8700  001670  EE20 F0CC          	lfsr	2,204
  8701  001674  5007               	movf	i2UART_buff_get@_this,w,c
  8702  001676  26D9               	addwf	fsr2l,f,c
  8703  001678  5008               	movf	i2UART_buff_get@_this+1,w,c
  8704  00167A  22DA               	addwfc	fsr2h,f,c
  8705  00167C  06DE               	decf	postinc2,f,c
  8706  00167E  0E00               	movlw	0
  8707  001680  5ADD               	subwfb	postdec2,f,c
  8708                           
  8709                           ;UART.c: 87: } else {
  8710  001682  D002               	goto	i2l779
  8711  001684                     i2l3423:
  8712                           
  8713                           ;UART.c: 88: c = 0;
  8714  001684  0E00               	movlw	0
  8715  001686  6E0B               	movwf	i2UART_buff_get@c,c
  8716  001688                     i2l779:
  8717                           
  8718                           ;UART.c: 89: }
  8719                           ;UART.c: 90: return (c);
  8720  001688  500B               	movf	i2UART_buff_get@c,w,c
  8721  00168A  0012               	return	
  8722  00168C                     __end_ofi2_UART_buff_get:
  8723                           	opt stack 0
  8724                           tosu	equ	0xFFF
  8725                           tosh	equ	0xFFE
  8726                           tosl	equ	0xFFD
  8727                           pclatu	equ	0xFFB
  8728                           pclath	equ	0xFFA
  8729                           tblptru	equ	0xFF8
  8730                           tblptrh	equ	0xFF7
  8731                           tblptrl	equ	0xFF6
  8732                           tablat	equ	0xFF5
  8733                           prodh	equ	0xFF4
  8734                           prodl	equ	0xFF3
  8735                           intcon	equ	0xFF2
  8736                           intcon2	equ	0xFF1
  8737                           postinc0	equ	0xFEE
  8738                           fsr0h	equ	0xFEA
  8739                           fsr0l	equ	0xFE9
  8740                           wreg	equ	0xFE8
  8741                           fsr1h	equ	0xFE2
  8742                           fsr1l	equ	0xFE1
  8743                           indf2	equ	0xFDF
  8744                           postinc2	equ	0xFDE
  8745                           postdec2	equ	0xFDD
  8746                           plusw2	equ	0xFDB
  8747                           fsr2h	equ	0xFDA
  8748                           fsr2l	equ	0xFD9
  8749                           status	equ	0xFD8
  8750                           
  8751 ;; *************** function _EUSART1_Receive_ISR *****************
  8752 ;; Defined at:
  8753 ;;		line 139 in file "UART.c"
  8754 ;; Parameters:    Size  Location     Type
  8755 ;;		None
  8756 ;; Auto vars:     Size  Location     Type
  8757 ;;  data            1   11[COMRAM] unsigned char 
  8758 ;; Return value:  Size  Location     Type
  8759 ;;                  1    wreg      void 
  8760 ;; Registers used:
  8761 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8762 ;; Tracked objects:
  8763 ;;		On entry : 0/0
  8764 ;;		On exit  : 0/0
  8765 ;;		Unchanged: 0/0
  8766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8767 ;;      Params:         0       0       0       0       0       0       0
  8768 ;;      Locals:         1       0       0       0       0       0       0
  8769 ;;      Temps:          0       0       0       0       0       0       0
  8770 ;;      Totals:         1       0       0       0       0       0       0
  8771 ;;Total ram usage:        1 bytes
  8772 ;; Hardware stack levels used:    1
  8773 ;; Hardware stack levels required when called:    2
  8774 ;; This function calls:
  8775 ;;		i2_UART_buff_put
  8776 ;; This function is called by:
  8777 ;;		_INTERRUPT_InterruptManager
  8778 ;; This function uses a non-reentrant model
  8779 ;;
  8780                           
  8781                           	psect	text55
  8782  001D72                     __ptext55:
  8783                           	opt stack 0
  8784  001D72                     _EUSART1_Receive_ISR:
  8785                           	opt stack 21
  8786                           
  8787                           ;UART.c: 140: if (1 == RC1STAbits.OERR) {
  8788                           
  8789                           ;incstack = 0
  8790  001D72  A2AB               	btfss	4011,1,c	;volatile
  8791  001D74  D002               	goto	i2l810
  8792                           
  8793                           ;UART.c: 143: RC1STAbits.CREN = 0;
  8794  001D76  98AB               	bcf	4011,4,c	;volatile
  8795                           
  8796                           ;UART.c: 144: RC1STAbits.CREN = 1;
  8797  001D78  88AB               	bsf	4011,4,c	;volatile
  8798  001D7A                     i2l810:
  8799                           
  8800                           ;UART.c: 145: }
  8801                           ;UART.c: 146: unsigned char data = RCREG1;
  8802  001D7A  CFAE F00C          	movff	4014,EUSART1_Receive_ISR@data	;volatile
  8803                           
  8804                           ;UART.c: 147: UART_buff_put(&input_buffer, data);
  8805  001D7E  0E00               	movlw	low _input_buffer
  8806  001D80  6E07               	movwf	i2UART_buff_put@_this,c
  8807  001D82  0E03               	movlw	high _input_buffer
  8808  001D84  6E08               	movwf	i2UART_buff_put@_this+1,c
  8809  001D86  C00C  F009         	movff	EUSART1_Receive_ISR@data,i2UART_buff_put@c
  8810  001D8A  ECE5  F006         	call	i2_UART_buff_put	;wreg free
  8811  001D8E  0012               	return		;funcret
  8812  001D90                     __end_of_EUSART1_Receive_ISR:
  8813                           	opt stack 0
  8814                           tosu	equ	0xFFF
  8815                           tosh	equ	0xFFE
  8816                           tosl	equ	0xFFD
  8817                           pclatu	equ	0xFFB
  8818                           pclath	equ	0xFFA
  8819                           tblptru	equ	0xFF8
  8820                           tblptrh	equ	0xFF7
  8821                           tblptrl	equ	0xFF6
  8822                           tablat	equ	0xFF5
  8823                           prodh	equ	0xFF4
  8824                           prodl	equ	0xFF3
  8825                           intcon	equ	0xFF2
  8826                           intcon2	equ	0xFF1
  8827                           postinc0	equ	0xFEE
  8828                           fsr0h	equ	0xFEA
  8829                           fsr0l	equ	0xFE9
  8830                           wreg	equ	0xFE8
  8831                           fsr1h	equ	0xFE2
  8832                           fsr1l	equ	0xFE1
  8833                           indf2	equ	0xFDF
  8834                           postinc2	equ	0xFDE
  8835                           postdec2	equ	0xFDD
  8836                           plusw2	equ	0xFDB
  8837                           fsr2h	equ	0xFDA
  8838                           fsr2l	equ	0xFD9
  8839                           status	equ	0xFD8
  8840                           
  8841 ;; *************** function i2_UART_buff_put *****************
  8842 ;; Defined at:
  8843 ;;		line 68 in file "UART.c"
  8844 ;; Parameters:    Size  Location     Type
  8845 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  8846 ;;		 -> output_buffer(206), input_buffer(206), 
  8847 ;;  c               1    8[COMRAM] const unsigned char 
  8848 ;; Auto vars:     Size  Location     Type
  8849 ;;		None
  8850 ;; Return value:  Size  Location     Type
  8851 ;;                  1    wreg      void 
  8852 ;; Registers used:
  8853 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8854 ;; Tracked objects:
  8855 ;;		On entry : 0/0
  8856 ;;		On exit  : 0/0
  8857 ;;		Unchanged: 0/0
  8858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8859 ;;      Params:         3       0       0       0       0       0       0
  8860 ;;      Locals:         0       0       0       0       0       0       0
  8861 ;;      Temps:          2       0       0       0       0       0       0
  8862 ;;      Totals:         5       0       0       0       0       0       0
  8863 ;;Total ram usage:        5 bytes
  8864 ;; Hardware stack levels used:    1
  8865 ;; Hardware stack levels required when called:    1
  8866 ;; This function calls:
  8867 ;;		i2_UART_buff_modulo_inc
  8868 ;; This function is called by:
  8869 ;;		_EUSART1_Receive_ISR
  8870 ;; This function uses a non-reentrant model
  8871 ;;
  8872                           
  8873                           	psect	text56
  8874  000DCA                     __ptext56:
  8875                           	opt stack 0
  8876  000DCA                     i2_UART_buff_put:
  8877                           	opt stack 21
  8878                           
  8879                           ;UART.c: 69: if (_this->count < 200) {
  8880                           
  8881                           ;incstack = 0
  8882  000DCA  EE20 F0CC          	lfsr	2,204
  8883  000DCE  5007               	movf	i2UART_buff_put@_this,w,c
  8884  000DD0  26D9               	addwf	fsr2l,f,c
  8885  000DD2  5008               	movf	i2UART_buff_put@_this+1,w,c
  8886  000DD4  22DA               	addwfc	fsr2h,f,c
  8887  000DD6  0E01               	movlw	1
  8888  000DD8  BEDB               	btfsc	plusw2,7,c
  8889  000DDA  D007               	goto	i2l3403
  8890  000DDC  0E01               	movlw	1
  8891  000DDE  50DB               	movf	plusw2,w,c
  8892  000DE0  E13A               	bnz	i2l3409
  8893  000DE2  0EC8               	movlw	200
  8894  000DE4  5CDE               	subwf	postinc2,w,c
  8895  000DE6  B0D8               	btfsc	status,0,c
  8896  000DE8  D036               	goto	i2l3409
  8897  000DEA                     i2l3403:
  8898                           
  8899                           ;UART.c: 70: _this->buf[_this->head] = c;
  8900  000DEA  EE20 F0C8          	lfsr	2,200
  8901  000DEE  5007               	movf	i2UART_buff_put@_this,w,c
  8902  000DF0  26D9               	addwf	fsr2l,f,c
  8903  000DF2  5008               	movf	i2UART_buff_put@_this+1,w,c
  8904  000DF4  22DA               	addwfc	fsr2h,f,c
  8905  000DF6  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  8906  000DFA  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  8907  000DFE  500A               	movf	??i2_UART_buff_put,w,c
  8908  000E00  2407               	addwf	i2UART_buff_put@_this,w,c
  8909  000E02  6ED9               	movwf	fsr2l,c
  8910  000E04  500B               	movf	??i2_UART_buff_put+1,w,c
  8911  000E06  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  8912  000E08  6EDA               	movwf	fsr2h,c
  8913  000E0A  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  8914                           
  8915                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
  8916  000E0E  EE20 F0C8          	lfsr	2,200
  8917  000E12  5007               	movf	i2UART_buff_put@_this,w,c
  8918  000E14  26D9               	addwf	fsr2l,f,c
  8919  000E16  5008               	movf	i2UART_buff_put@_this+1,w,c
  8920  000E18  22DA               	addwfc	fsr2h,f,c
  8921  000E1A  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  8922  000E1E  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  8923  000E22  0E00               	movlw	0
  8924  000E24  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  8925  000E26  0EC8               	movlw	200
  8926  000E28  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  8927  000E2A  EC65  F00E         	call	i2_UART_buff_modulo_inc	;wreg free
  8928  000E2E  EE20 F0C8          	lfsr	2,200
  8929  000E32  5007               	movf	i2UART_buff_put@_this,w,c
  8930  000E34  26D9               	addwf	fsr2l,f,c
  8931  000E36  5008               	movf	i2UART_buff_put@_this+1,w,c
  8932  000E38  22DA               	addwfc	fsr2h,f,c
  8933  000E3A  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  8934  000E3E  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  8935                           
  8936                           ;UART.c: 72: ++_this->count;
  8937  000E42  EE20 F0CC          	lfsr	2,204
  8938  000E46  5007               	movf	i2UART_buff_put@_this,w,c
  8939  000E48  26D9               	addwf	fsr2l,f,c
  8940  000E4A  5008               	movf	i2UART_buff_put@_this+1,w,c
  8941  000E4C  22DA               	addwfc	fsr2h,f,c
  8942  000E4E  2ADE               	incf	postinc2,f,c
  8943  000E50  0E00               	movlw	0
  8944  000E52  22DD               	addwfc	postdec2,f,c
  8945                           
  8946                           ;UART.c: 73: } else {
  8947  000E54  0012               	return	
  8948  000E56                     i2l3409:
  8949                           
  8950                           ;UART.c: 74: _this->buf[_this->head] = c;
  8951  000E56  EE20 F0C8          	lfsr	2,200
  8952  000E5A  5007               	movf	i2UART_buff_put@_this,w,c
  8953  000E5C  26D9               	addwf	fsr2l,f,c
  8954  000E5E  5008               	movf	i2UART_buff_put@_this+1,w,c
  8955  000E60  22DA               	addwfc	fsr2h,f,c
  8956  000E62  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  8957  000E66  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  8958  000E6A  500A               	movf	??i2_UART_buff_put,w,c
  8959  000E6C  2407               	addwf	i2UART_buff_put@_this,w,c
  8960  000E6E  6ED9               	movwf	fsr2l,c
  8961  000E70  500B               	movf	??i2_UART_buff_put+1,w,c
  8962  000E72  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  8963  000E74  6EDA               	movwf	fsr2h,c
  8964  000E76  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  8965                           
  8966                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
  8967  000E7A  EE20 F0C8          	lfsr	2,200
  8968  000E7E  5007               	movf	i2UART_buff_put@_this,w,c
  8969  000E80  26D9               	addwf	fsr2l,f,c
  8970  000E82  5008               	movf	i2UART_buff_put@_this+1,w,c
  8971  000E84  22DA               	addwfc	fsr2h,f,c
  8972  000E86  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  8973  000E8A  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  8974  000E8E  0E00               	movlw	0
  8975  000E90  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  8976  000E92  0EC8               	movlw	200
  8977  000E94  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  8978  000E96  EC65  F00E         	call	i2_UART_buff_modulo_inc	;wreg free
  8979  000E9A  EE20 F0C8          	lfsr	2,200
  8980  000E9E  5007               	movf	i2UART_buff_put@_this,w,c
  8981  000EA0  26D9               	addwf	fsr2l,f,c
  8982  000EA2  5008               	movf	i2UART_buff_put@_this+1,w,c
  8983  000EA4  22DA               	addwfc	fsr2h,f,c
  8984  000EA6  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  8985  000EAA  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  8986                           
  8987                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  8988  000EAE  EE20 F0CA          	lfsr	2,202
  8989  000EB2  5007               	movf	i2UART_buff_put@_this,w,c
  8990  000EB4  26D9               	addwf	fsr2l,f,c
  8991  000EB6  5008               	movf	i2UART_buff_put@_this+1,w,c
  8992  000EB8  22DA               	addwfc	fsr2h,f,c
  8993  000EBA  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  8994  000EBE  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  8995  000EC2  0E00               	movlw	0
  8996  000EC4  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  8997  000EC6  0EC8               	movlw	200
  8998  000EC8  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  8999  000ECA  EC65  F00E         	call	i2_UART_buff_modulo_inc	;wreg free
  9000  000ECE  EE20 F0CA          	lfsr	2,202
  9001  000ED2  5007               	movf	i2UART_buff_put@_this,w,c
  9002  000ED4  26D9               	addwf	fsr2l,f,c
  9003  000ED6  5008               	movf	i2UART_buff_put@_this+1,w,c
  9004  000ED8  22DA               	addwfc	fsr2h,f,c
  9005  000EDA  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  9006  000EDE  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  9007  000EE2  0012               	return	
  9008  000EE4                     __end_ofi2_UART_buff_put:
  9009                           	opt stack 0
  9010                           tosu	equ	0xFFF
  9011                           tosh	equ	0xFFE
  9012                           tosl	equ	0xFFD
  9013                           pclatu	equ	0xFFB
  9014                           pclath	equ	0xFFA
  9015                           tblptru	equ	0xFF8
  9016                           tblptrh	equ	0xFF7
  9017                           tblptrl	equ	0xFF6
  9018                           tablat	equ	0xFF5
  9019                           prodh	equ	0xFF4
  9020                           prodl	equ	0xFF3
  9021                           intcon	equ	0xFF2
  9022                           intcon2	equ	0xFF1
  9023                           postinc0	equ	0xFEE
  9024                           fsr0h	equ	0xFEA
  9025                           fsr0l	equ	0xFE9
  9026                           wreg	equ	0xFE8
  9027                           fsr1h	equ	0xFE2
  9028                           fsr1l	equ	0xFE1
  9029                           indf2	equ	0xFDF
  9030                           postinc2	equ	0xFDE
  9031                           postdec2	equ	0xFDD
  9032                           plusw2	equ	0xFDB
  9033                           fsr2h	equ	0xFDA
  9034                           fsr2l	equ	0xFD9
  9035                           status	equ	0xFD8
  9036                           
  9037 ;; *************** function i2_UART_buff_modulo_inc *****************
  9038 ;; Defined at:
  9039 ;;		line 106 in file "UART.c"
  9040 ;; Parameters:    Size  Location     Type
  9041 ;;  value           2    0[COMRAM] const unsigned int 
  9042 ;;  modulus         2    2[COMRAM] const unsigned int 
  9043 ;; Auto vars:     Size  Location     Type
  9044 ;;  UART_buff_mo    2    4[COMRAM] unsigned int 
  9045 ;; Return value:  Size  Location     Type
  9046 ;;                  2    0[COMRAM] unsigned int 
  9047 ;; Registers used:
  9048 ;;		wreg, status,2, status,0
  9049 ;; Tracked objects:
  9050 ;;		On entry : 0/0
  9051 ;;		On exit  : 0/0
  9052 ;;		Unchanged: 0/0
  9053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9054 ;;      Params:         4       0       0       0       0       0       0
  9055 ;;      Locals:         2       0       0       0       0       0       0
  9056 ;;      Temps:          0       0       0       0       0       0       0
  9057 ;;      Totals:         6       0       0       0       0       0       0
  9058 ;;Total ram usage:        6 bytes
  9059 ;; Hardware stack levels used:    1
  9060 ;; This function calls:
  9061 ;;		Nothing
  9062 ;; This function is called by:
  9063 ;;		i2_UART_buff_put
  9064 ;;		i2_UART_buff_get
  9065 ;; This function uses a non-reentrant model
  9066 ;;
  9067                           
  9068                           	psect	text57
  9069  001CCA                     __ptext57:
  9070                           	opt stack 0
  9071  001CCA                     i2_UART_buff_modulo_inc:
  9072                           	opt stack 21
  9073                           
  9074                           ;UART.c: 107: unsigned int my_value = value + 1;
  9075                           
  9076                           ;incstack = 0
  9077  001CCA  0E01               	movlw	1
  9078  001CCC  2401               	addwf	i2UART_buff_modulo_inc@value,w,c
  9079  001CCE  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  9080  001CD0  0E00               	movlw	0
  9081  001CD2  2002               	addwfc	i2UART_buff_modulo_inc@value+1,w,c
  9082  001CD4  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  9083                           
  9084                           ;UART.c: 108: if (my_value >= modulus) {
  9085  001CD6  5003               	movf	i2UART_buff_modulo_inc@modulus,w,c
  9086  001CD8  5C05               	subwf	i2UART_buff_modulo_inc@my_value,w,c
  9087  001CDA  5004               	movf	i2UART_buff_modulo_inc@modulus+1,w,c
  9088  001CDC  5806               	subwfb	i2UART_buff_modulo_inc@my_value+1,w,c
  9089  001CDE  A0D8               	btfss	status,0,c
  9090  001CE0  D004               	goto	i2l3039
  9091                           
  9092                           ;UART.c: 109: my_value = 0;
  9093  001CE2  0E00               	movlw	0
  9094  001CE4  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  9095  001CE6  0E00               	movlw	0
  9096  001CE8  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  9097  001CEA                     i2l3039:
  9098                           
  9099                           ;UART.c: 110: }
  9100                           ;UART.c: 111: return (my_value);
  9101  001CEA  C005  F001         	movff	i2UART_buff_modulo_inc@my_value,?i2_UART_buff_modulo_inc
  9102  001CEE  C006  F002         	movff	i2UART_buff_modulo_inc@my_value+1,?i2_UART_buff_modulo_inc+1
  9103  001CF2  0012               	return	
  9104  001CF4                     __end_ofi2_UART_buff_modulo_inc:
  9105                           	opt stack 0
  9106                           tosu	equ	0xFFF
  9107                           tosh	equ	0xFFE
  9108                           tosl	equ	0xFFD
  9109                           pclatu	equ	0xFFB
  9110                           pclath	equ	0xFFA
  9111                           tblptru	equ	0xFF8
  9112                           tblptrh	equ	0xFF7
  9113                           tblptrl	equ	0xFF6
  9114                           tablat	equ	0xFF5
  9115                           prodh	equ	0xFF4
  9116                           prodl	equ	0xFF3
  9117                           intcon	equ	0xFF2
  9118                           intcon2	equ	0xFF1
  9119                           postinc0	equ	0xFEE
  9120                           fsr0h	equ	0xFEA
  9121                           fsr0l	equ	0xFE9
  9122                           wreg	equ	0xFE8
  9123                           fsr1h	equ	0xFE2
  9124                           fsr1l	equ	0xFE1
  9125                           indf2	equ	0xFDF
  9126                           postinc2	equ	0xFDE
  9127                           postdec2	equ	0xFDD
  9128                           plusw2	equ	0xFDB
  9129                           fsr2h	equ	0xFDA
  9130                           fsr2l	equ	0xFD9
  9131                           status	equ	0xFD8
  9132                           
  9133 ;; *************** function _ADC_ISR *****************
  9134 ;; Defined at:
  9135 ;;		line 128 in file "mcc_generated_files/adc.c"
  9136 ;; Parameters:    Size  Location     Type
  9137 ;;		None
  9138 ;; Auto vars:     Size  Location     Type
  9139 ;;		None
  9140 ;; Return value:  Size  Location     Type
  9141 ;;                  1    wreg      void 
  9142 ;; Registers used:
  9143 ;;		None
  9144 ;; Tracked objects:
  9145 ;;		On entry : 0/0
  9146 ;;		On exit  : 0/0
  9147 ;;		Unchanged: 0/0
  9148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9149 ;;      Params:         0       0       0       0       0       0       0
  9150 ;;      Locals:         0       0       0       0       0       0       0
  9151 ;;      Temps:          0       0       0       0       0       0       0
  9152 ;;      Totals:         0       0       0       0       0       0       0
  9153 ;;Total ram usage:        0 bytes
  9154 ;; Hardware stack levels used:    1
  9155 ;; This function calls:
  9156 ;;		Nothing
  9157 ;; This function is called by:
  9158 ;;		_INTERRUPT_InterruptManager
  9159 ;; This function uses a non-reentrant model
  9160 ;;
  9161                           
  9162                           	psect	text58
  9163  001E82                     __ptext58:
  9164                           	opt stack 0
  9165  001E82                     _ADC_ISR:
  9166                           	opt stack 23
  9167                           
  9168                           ;adc.c: 131: PIR1bits.ADIF = 0;
  9169                           
  9170                           ;incstack = 0
  9171  001E82  9C9E               	bcf	3998,6,c	;volatile
  9172  001E84  0012               	return		;funcret
  9173  001E86                     __end_of_ADC_ISR:
  9174                           	opt stack 0
  9175  0000                     tosu	equ	0xFFF
  9176                           tosh	equ	0xFFE
  9177                           tosl	equ	0xFFD
  9178                           pclatu	equ	0xFFB
  9179                           pclath	equ	0xFFA
  9180                           tblptru	equ	0xFF8
  9181                           tblptrh	equ	0xFF7
  9182                           tblptrl	equ	0xFF6
  9183                           tablat	equ	0xFF5
  9184                           prodh	equ	0xFF4
  9185                           prodl	equ	0xFF3
  9186                           intcon	equ	0xFF2
  9187                           intcon2	equ	0xFF1
  9188                           postinc0	equ	0xFEE
  9189                           fsr0h	equ	0xFEA
  9190                           fsr0l	equ	0xFE9
  9191                           wreg	equ	0xFE8
  9192                           fsr1h	equ	0xFE2
  9193                           fsr1l	equ	0xFE1
  9194                           indf2	equ	0xFDF
  9195                           postinc2	equ	0xFDE
  9196                           postdec2	equ	0xFDD
  9197                           plusw2	equ	0xFDB
  9198                           fsr2h	equ	0xFDA
  9199                           fsr2l	equ	0xFD9
  9200                           status	equ	0xFD8
  9201                           tosu	equ	0xFFF
  9202                           tosh	equ	0xFFE
  9203                           tosl	equ	0xFFD
  9204                           pclatu	equ	0xFFB
  9205                           pclath	equ	0xFFA
  9206                           tblptru	equ	0xFF8
  9207                           tblptrh	equ	0xFF7
  9208                           tblptrl	equ	0xFF6
  9209                           tablat	equ	0xFF5
  9210                           prodh	equ	0xFF4
  9211                           prodl	equ	0xFF3
  9212                           intcon	equ	0xFF2
  9213                           intcon2	equ	0xFF1
  9214                           postinc0	equ	0xFEE
  9215                           fsr0h	equ	0xFEA
  9216                           fsr0l	equ	0xFE9
  9217                           wreg	equ	0xFE8
  9218                           fsr1h	equ	0xFE2
  9219                           fsr1l	equ	0xFE1
  9220                           indf2	equ	0xFDF
  9221                           postinc2	equ	0xFDE
  9222                           postdec2	equ	0xFDD
  9223                           plusw2	equ	0xFDB
  9224                           fsr2h	equ	0xFDA
  9225                           fsr2l	equ	0xFD9
  9226                           status	equ	0xFD8
  9227                           
  9228                           	psect	text59
  9229  000000                     __ptext59:
  9230                           	opt stack 0
  9231                           tosu	equ	0xFFF
  9232                           tosh	equ	0xFFE
  9233                           tosl	equ	0xFFD
  9234                           pclatu	equ	0xFFB
  9235                           pclath	equ	0xFFA
  9236                           tblptru	equ	0xFF8
  9237                           tblptrh	equ	0xFF7
  9238                           tblptrl	equ	0xFF6
  9239                           tablat	equ	0xFF5
  9240                           prodh	equ	0xFF4
  9241                           prodl	equ	0xFF3
  9242                           intcon	equ	0xFF2
  9243                           intcon2	equ	0xFF1
  9244                           postinc0	equ	0xFEE
  9245                           fsr0h	equ	0xFEA
  9246                           fsr0l	equ	0xFE9
  9247                           wreg	equ	0xFE8
  9248                           fsr1h	equ	0xFE2
  9249                           fsr1l	equ	0xFE1
  9250                           indf2	equ	0xFDF
  9251                           postinc2	equ	0xFDE
  9252                           postdec2	equ	0xFDD
  9253                           plusw2	equ	0xFDB
  9254                           fsr2h	equ	0xFDA
  9255                           fsr2l	equ	0xFD9
  9256                           status	equ	0xFD8
  9257                           
  9258                           	psect	rparam
  9259  0000                     tosu	equ	0xFFF
  9260                           tosh	equ	0xFFE
  9261                           tosl	equ	0xFFD
  9262                           pclatu	equ	0xFFB
  9263                           pclath	equ	0xFFA
  9264                           tblptru	equ	0xFF8
  9265                           tblptrh	equ	0xFF7
  9266                           tblptrl	equ	0xFF6
  9267                           tablat	equ	0xFF5
  9268                           prodh	equ	0xFF4
  9269                           prodl	equ	0xFF3
  9270                           intcon	equ	0xFF2
  9271                           intcon2	equ	0xFF1
  9272                           postinc0	equ	0xFEE
  9273                           fsr0h	equ	0xFEA
  9274                           fsr0l	equ	0xFE9
  9275                           wreg	equ	0xFE8
  9276                           fsr1h	equ	0xFE2
  9277                           fsr1l	equ	0xFE1
  9278                           indf2	equ	0xFDF
  9279                           postinc2	equ	0xFDE
  9280                           postdec2	equ	0xFDD
  9281                           plusw2	equ	0xFDB
  9282                           fsr2h	equ	0xFDA
  9283                           fsr2l	equ	0xFD9
  9284                           status	equ	0xFD8
  9285                           
  9286                           	psect	temp
  9287  000045                     btemp:
  9288                           	opt stack 0
  9289  000045                     	ds	1
  9290  0000                     int$flags	set	btemp
  9291                           tosu	equ	0xFFF
  9292                           tosh	equ	0xFFE
  9293                           tosl	equ	0xFFD
  9294                           pclatu	equ	0xFFB
  9295                           pclath	equ	0xFFA
  9296                           tblptru	equ	0xFF8
  9297                           tblptrh	equ	0xFF7
  9298                           tblptrl	equ	0xFF6
  9299                           tablat	equ	0xFF5
  9300                           prodh	equ	0xFF4
  9301                           prodl	equ	0xFF3
  9302                           intcon	equ	0xFF2
  9303                           intcon2	equ	0xFF1
  9304                           postinc0	equ	0xFEE
  9305                           fsr0h	equ	0xFEA
  9306                           fsr0l	equ	0xFE9
  9307                           wreg	equ	0xFE8
  9308                           fsr1h	equ	0xFE2
  9309                           fsr1l	equ	0xFE1
  9310                           indf2	equ	0xFDF
  9311                           postinc2	equ	0xFDE
  9312                           postdec2	equ	0xFDD
  9313                           plusw2	equ	0xFDB
  9314                           fsr2h	equ	0xFDA
  9315                           fsr2l	equ	0xFD9
  9316                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         1009
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     37      68
    BANK0           160     27     140
    BANK1           256      0     254
    BANK2           256      0     200
    BANK3           256      0     206
    BANK4           256      0     206
    BANK5           256      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    memset@p	PTR unsigned char  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    UART_buff_peek@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> input_buffer(BANK3[206]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_init@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    crcBufS_get@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_status_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    sp__memset	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    FastTransfer_buffer_flush@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    FastTransfer_buffer_put@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), CRCcheck@arrayHolder(BANK0[3]), receiveData@holder_1382(BANK0[3]), receiveData@holder(BANK0[3]), 
		 -> rx_buffer(BANK2[200]), ring_buffer(BANK1[206]), 

    sendStructAddress	PTR unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), ring_buffer(BANK1[206]), 

    begin@stufftoreceive	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_get(), 

    serial_read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_get(), 

    begin@stuffpeek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_peek(), 

    serial_peek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_peek(), 

    begin@stuffavailable	PTR FTN()int  size(2) Largest target is 2
		 -> Receive_available(), 

    serial_available	PTR FTN()int  size(2) Largest target is 2
		 -> Absolute function(), Receive_available(), 

    begin@stufftosend	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Send_put(), 

    serial_write	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), Send_put(), 

    begin@ptr	PTR volatile int  size(2) Largest target is 40
		 -> receiveArray(BANK0[40]), 

    receiveArrayAddress	PTR volatile int  size(2) Largest target is 40
		 -> NULL(NULL[0]), receiveArray(BANK0[40]), 


Critical Paths under _main in COMRAM

    _FastTransfer_buffer_flush->_memset
    _ToSend->_FastTransfer_buffer_put
    _FastTransfer_buffer_put->_FastTransfer_buffer_modulo_inc
    _Send_put->_UART_buff_get
    _Send_put->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc
    _Receive_peek->_UART_buff_peek
    _Receive_get->_UART_buff_get
    _UART_buff_get->_UART_buff_modulo_inc
    _Receive_available->_UART_buff_size
    _processPowerRequest->_EnableSlavePower
    _begin->___awdiv
    _EUSART1_Initialize->_UART_buff_init
    _UART_buff_init->_memset
    _PDUStartup->_EnableSlavePower
    _StartUp595->_Clear595
    _writeRegisters->_Delay
    _EnableSlavePower->_SetPin595
    _ComputeStorageData->_DATAEE_ReadByte
    _CoolingStart->_PotClear
    _CoolingStart->_PotSetpoint
    _PotSetpoint->_Delay
    _PotClear->_Delay

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _EUSART1_Transmit_ISR->i2_UART_buff_get
    i2_UART_buff_get->i2_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->i2_UART_buff_put
    i2_UART_buff_put->i2_UART_buff_modulo_inc

Critical Paths under _main in BANK0

    _updateComms->_receiveData
    _respondECU->_sendData
    _sendData->_FastTransfer_buffer_flush
    _ToSend->_FastTransfer_buffer_put
    _receiveData->_CRCcheck
    _CRCcheck->_crcBufS_get
    _SYSTEM_Initialize->_begin
    _Update->_writeRegisters
    _Clear595->_writeRegisters
    _CoolingStart->_PotSetpoint

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   45199
                       _CoolingStart
                         _PDUStartup
                  _SYSTEM_Initialize
                        _updateComms
 ---------------------------------------------------------------------------------
 (1) _updateComms                                          0     0      0   27985
                _processPowerRequest
                        _receiveData
                         _respondECU
 ---------------------------------------------------------------------------------
 (2) _respondECU                                           0     0      0    8909
                              _Delay
                             _ToSend
                           _sendData
 ---------------------------------------------------------------------------------
 (3) _sendData                                             5     5      0    5704
                                              4 BANK0      5     5      0
                   Absolute function *
                               _CRC8
          _FastTransfer_buffer_flush
                           _Send_put *
                        _crcBufS_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_put                                          7     2      5     742
                                             26 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_flush                            4     0      4    1139
                                              0 BANK0      4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (3) _ToSend                                               3     1      2    1751
                                              2 BANK0      3     1      2
            _FastTransfer_buffer_put
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_put                              7     2      5    1535
                                             32 COMRAM     5     0      5
                                              0 BANK0      2     2      0
     _FastTransfer_buffer_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _FastTransfer_buffer_modulo_inc                       6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _receiveData                                         18    18      0   10715
                                              9 BANK0     18    18      0
                   Absolute function *
                               _CRC8
                           _CRCcheck
                  _Receive_available *
                        _Receive_get *
                       _Receive_peek *
                           _Send_put *
 ---------------------------------------------------------------------------------
 (4) _Send_put                                             1     1      0    2614
                                              0 BANK0      1     1      0
                      _UART_buff_get
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (5) _UART_buff_put                                        5     2      3    1418
                                             32 COMRAM     5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (3) _Receive_peek                                         0     0      0     139
                     _UART_buff_peek
 ---------------------------------------------------------------------------------
 (4) _UART_buff_peek                                       4     2      2     139
                                             26 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _CRCcheck                                             7     7      0    5114
                                              2 BANK0      7     7      0
                   Absolute function *
                               _CRC8
                  _Receive_available *
                        _Receive_get *
                        _crcBufS_get
                 _crcBufS_status_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_status_put                                  10     6      4     908
                                             26 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (4) _crcBufS_get                                         12     8      4    1404
                                             26 COMRAM    10     6      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _Receive_get                                          0     0      0    1165
                      _UART_buff_get
 ---------------------------------------------------------------------------------
 (5) _UART_buff_get                                        5     3      2    1165
                                             32 COMRAM     5     3      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (6) _UART_buff_modulo_inc                                 6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _Receive_available                                    2     0      2     150
                                             28 COMRAM     2     0      2
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (4) _UART_buff_size                                       2     0      2     150
                                             26 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _CRC8                                                 7     4      3    1014
                                             26 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _processPowerRequest                                  2     0      2    8361
                                              4 BANK0      2     0      2
                   _EnableSlavePower
                             _Update
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    2307
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM4_Initialize
                    _TMR2_Initialize
                              _begin
 ---------------------------------------------------------------------------------
 (2) _begin                                               13     0     13    1292
                                              0 BANK0     13     0     13
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     428
                                             26 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0    1015
                     _UART_buff_init
 ---------------------------------------------------------------------------------
 (3) _UART_buff_init                                       2     0      2    1015
                                             34 COMRAM     2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               8     2      6     830
                                             26 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PDUStartup                                           0     0      0   11415
                 _ComputeStorageData
                   _EnableSlavePower
                         _StartUp595
                             _Update
 ---------------------------------------------------------------------------------
 (3) _Update                                               0     0      0    1621
                     _writeRegisters
 ---------------------------------------------------------------------------------
 (2) _StartUp595                                           0     0      0    3174
                           _Clear595
                              _Delay
 ---------------------------------------------------------------------------------
 (3) _Clear595                                             2     2      0    1720
                                             35 COMRAM     2     2      0
                     _writeRegisters
 ---------------------------------------------------------------------------------
 (4) _writeRegisters                                       4     4      0    1621
                                              0 BANK0      4     4      0
                              _Delay
 ---------------------------------------------------------------------------------
 (3) _EnableSlavePower                                     3     1      2    6508
                                             36 COMRAM     1     1      0
                                              0 BANK0      2     0      2
                          _SetPin595
 ---------------------------------------------------------------------------------
 (4) _SetPin595                                           10     4      6    4674
                                             26 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (2) _ComputeStorageData                                   4     4      0     112
                                             27 COMRAM     4     4      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_ReadByte                                      1     1      0      22
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _CoolingStart                                         0     0      0    3492
                 _PWM4_LoadDutyValue
                           _PotClear
                        _PotSetpoint
 ---------------------------------------------------------------------------------
 (2) _PotSetpoint                                         10     8      2    1862
                                             35 COMRAM     2     0      2
                                              0 BANK0      8     8      0
                              _Delay
 ---------------------------------------------------------------------------------
 (2) _PotClear                                             2     2      0    1522
                                             35 COMRAM     2     2      0
                              _Delay
 ---------------------------------------------------------------------------------
 (3) _Delay                                                9     5      4    1454
                                             26 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _PWM4_LoadDutyValue                                   4     2      2     108
                                             26 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                          14    14      0    1209
                                             12 COMRAM    14    14      0
                            _ADC_ISR
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Transmit_ISR                                 0     0      0     528
                    i2_UART_buff_get
                   i2_UART_buff_size
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_size                                     2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_get                                      5     3      2     480
                                              6 COMRAM     5     3      2
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Receive_ISR                                  1     1      0     681
                                             11 COMRAM     1     1      0
                    i2_UART_buff_put
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_put                                      5     2      3     658
                                              6 COMRAM     5     2      3
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_modulo_inc                              6     2      4     298
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) _ADC_ISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CoolingStart
     _PWM4_LoadDutyValue
     _PotClear
       _Delay
     _PotSetpoint
       _Delay
   _PDUStartup
     _ComputeStorageData
       _DATAEE_ReadByte
     _EnableSlavePower
       _SetPin595
     _StartUp595
       _Clear595
         _writeRegisters
           _Delay
       _Delay
     _Update
       _writeRegisters
         _Delay
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
       _UART_buff_init
         _memset
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM4_Initialize
     _TMR2_Initialize
       _TMR2_StartTimer
     _begin
       ___awdiv
   _updateComms
     _processPowerRequest
       _EnableSlavePower
         _SetPin595
       _Update
         _writeRegisters
           _Delay
     _receiveData
       Absolute function(Fake) *
       _CRC8 *
       _CRCcheck *
         Absolute function(Fake) *
         _CRC8 *
         _Receive_available *
           _UART_buff_size
         _Receive_get *
           _UART_buff_get
             _UART_buff_modulo_inc
         _crcBufS_get *
         _crcBufS_status_put *
       _Receive_available *
         _UART_buff_size
       _Receive_get *
         _UART_buff_get
           _UART_buff_modulo_inc
       _Receive_peek *
         _UART_buff_peek
       _Send_put *
         _UART_buff_get
           _UART_buff_modulo_inc
         _UART_buff_put
           _UART_buff_modulo_inc
     _respondECU
       _Delay
       _ToSend
         _FastTransfer_buffer_put
           _FastTransfer_buffer_modulo_inc
       _sendData
         Absolute function(Fake) *
         _CRC8 *
         _FastTransfer_buffer_flush *
           _memset
         _Send_put *
           _UART_buff_get
             _UART_buff_modulo_inc
           _UART_buff_put
             _UART_buff_modulo_inc
         _crcBufS_put *

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
   _EUSART1_Receive_ISR
     i2_UART_buff_put
       i2_UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     i2_UART_buff_get
       i2_UART_buff_modulo_inc
     i2_UART_buff_size

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      CE      13       80.5%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      CE      11       80.5%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      C8       8       78.1%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      FE       6       99.2%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     1B      8C       4       87.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     25      44       1       72.3%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     432       9        0.0%
DATA                 0      0     432      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Fri May 27 21:56:51 2016

      __end_of_FastTransfer_buffer_flush 17EE                   i2_UART_buff_modulo_inc 1CCA  
                           _rx_array_inx 0042                             ___awdiv@sign 0020  
                         ??_CoolingStart 0026                             __CFG_CP0$OFF 000000  
                           __CFG_CP1$OFF 000000                             __CFG_CP2$OFF 000000  
                           __CFG_CP3$OFF 000000                                      l470 1AAA  
                                    l396 1408                                      l726 15BE  
                                    l728 15CA                                      l584 0A22  
                                    l881 0BEE                                      l890 14A0  
                                    l779 1564                                      l884 0C52  
                                    l889 1466                             __CFG_CPB$OFF 000000  
                                    _PR2 000FBB                             __CFG_CPD$OFF 000000  
                        _timer1ReloadVal 0038                          __end_of_ADC_ISR 1E86  
   FastTransfer_buffer_flush@clearBuffer 00D3                          _TMR2_Initialize 1E1C  
                        _PWM4_Initialize 1D90                                      prod 000FF3  
                                    tosl 000FFD                                      wreg 000FE8  
          i2UART_buff_modulo_inc@modulus 0003                             __CFG_LVP$OFF 000000  
                                   l3011 16C6                                     l3013 16CE  
                                   l3005 16B0                                     l3031 1706  
                                   l3023 16EE                                     l3015 16D2  
                                   l3027 16F8                                     l4101 06D8  
                                   l4013 0294                                     l4103 0726  
                                   l4031 03F2                                     l4121 1358  
                                   l4105 0742                                     l4033 03F8  
                                   l4025 0358                                     l4017 02BC  
                                   l4009 0262                                     l4113 074E  
                                   l4203 0B86                                     l3331 10CE  
                                   l4123 1368                                     l4051 04C6  
                                   l4035 040C                                     l4221 0C32  
                                   l4205 0B94                                     l4141 13E0  
                                   l4133 13A8                                     l4061 0548  
                                   l4053 04E0                                     l4231 0C84  
                                   l4207 0B9C                                     l3327 10BE  
                                   l4135 13B8                                     l4127 1380  
                                   l4063 0596                                     l4055 04FA  
                                   l3337 10E8                                     l4145 13F8  
                                   l4129 1390                                     l4057 0514  
                                   l4049 04AC                                     l4065 05B2  
                                   l4139 13D0                                     l4091 0656  
                                   l4059 052E                                     l4075 05BE  
                                   l4093 0670                                     l4095 068A  
                                   l3633 1CC0                                     l4097 06A4  
                                   l4089 063C                                     l4257 1B78  
                                   l3643 1AEE                                     l3707 1AB0  
                                   l4099 06BE                                     l3709 1AB6  
                                   l3639 1AD4                                     l3831 1016  
                                   l3911 1BBC                                     l3655 1C54  
                                   l3751 0EF8                                     l3903 0A12  
                                   l3663 0CD0                                     l3833 1034  
                                   l3841 108E                                     l3921 1BE2  
                                   l3649 1C96                                     l3729 077A  
                                   l4385 1DBC                                     l3835 1052  
                                   l3827 0FDA                                     l3659 1C64  
                                   l3683 1560                                     l3763 0F8C  
                                   l3747 0EEE                                     l3771 1274  
                                   l3907 0A1A                                     l3851 0A56  
                                   l3837 1070                                     l3829 0FF8  
                                   l3693 1A7E                                     l3669 0D3C  
                                   l3861 0ACE                                     l3853 0A70  
                                   l3791 15B2                                     l3783 157C  
                                   l3863 0AF8                                     l3855 0A8C  
                                   l3961 0102                                     l3865 0AFE  
                                   l3857 0AA6                     receiveData@crcHolder 00E6  
                                   l3699 1A94                                     l3779 12FA  
                                   l3875 08C6                                     l3859 0AC2  
                                   l3885 0988                                     l3877 08EE  
                                   l3981 01C8                                     l3957 00D4  
                                   l3965 0106                                     l3869 0B3A  
                                   l2999 16A0                                     l3889 099E  
                                   l3977 01AA                                     l3899 09F2  
                                   l3995 020E                                     l3979 01C2  
                                   l3997 0234                                     l3989 0202  
                                   _CRC8 1A78                                     u3020 1254  
                                   _LATA 000F89                                     _LATB 000F8A  
                                   _LATC 000F8B                                     u4000 1B64  
                                   _LATD 000F8C                                     u3041 0778  
                                   _LATE 000F8D                                     u3208 0AD2  
                                   u3228 0B22                                     u3238 08CA  
                                   u3158 0A40                                     u3239 08DE  
                                   u3168 0A5A                                     u4137 1ADA  
                                   u3258 08F2                                     u3418 00DE  
                                   u3178 0A74                                     u3259 0906  
                                   u3419 00F2                                     u3268 090E  
                                   u3188 0A90                                     u3269 0922  
                                   u3278 092A                                     u3518 01AE  
                                   u3438 010A                                     u3198 0AAA  
                                   u3279 093E                                     u3631 02FC  
                                   u3439 011E                                     u3288 0946  
                                   u3608 0298                                     u3289 095A  
                                   u3609 02AC                                     u3458 0128  
                                   u3459 013C                                     u3708 04CA  
                                   u3718 04E4                                     u3558 0212  
                                   u3478 0146                                     u3398 00AE  
                                   u3559 0226                                     u3479 015A  
                                   u3399 00C2                                     u3808 065A  
                                   u3728 04FE                                     u3488 0160  
                                   u3489 0174                                     u3930 14A0  
                                   u3818 0674                                     u3738 0518  
                                   u3578 0238                                     u3498 017A  
                                   u3579 024C                                     u3499 018E  
                                   u3940 0B7E                                     u2980 14F4  
                                   u3828 068E                                     u3748 0532  
                                   u3838 06A8                                     u3758 054C  
                                   u3598 0266                                     u3599 027A  
                                   u3848 06C2                                     u3768 059A  
                                   u3688 0496                                     u3858 06DC  
                                   u3698 04B0                                     u3868 072A  
                                   u3788 0626                                     u3798 0640  
                                   i2l63 004E                                     i2l65 005A  
                                   i2l69 0064                                     _TMR1 000FCE  
                                   _TMR2 000FBC                                     _WPUB 000F61  
                                   _data 0084                                     _main 1DAA  
               __end_of_EnableSlavePower 10B6                                     fsr0h 000FEA  
                                   fsr1h 000FE2                                     fsr0l 000FE9  
                                   fsr2h 000FDA                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                                   btemp 0045                            __CFG_BORV$190 000000  
                                   pclat 000FFA                                     prodh 000FF4  
                                   prodl 000FF3          __end_of_FastTransfer_buffer_put 08C6  
                                   start 00A0                            __CFG_IESO$OFF 000000  
                           ___param_bank 000010           i2UART_buff_modulo_inc@my_value 0005  
                                  ?_CRC8 001B                         __end_of_CRCcheck 0A24  
         __size_of_OSCILLATOR_Initialize 000E            __end_of_OSCILLATOR_Initialize 1E6E  
                     crcBufS_put@address 001D                                    ?_main 0001  
                        __end_of___awdiv 1710                                    _EEADR 000FA9  
                        ___awdiv@divisor 001D                                    _T1CON 000FCD  
                                  _T2CON 000FBA                                    _LATB0 007C50  
                                  _LATA3 007C4B                                    _LATB3 007C53  
                                  _LATB4 007C54                                    _LATB5 007C55  
                                  _LATD4 007C64                                    _LATD5 007C65  
                                  _LATD6 007C66                                    _LATD7 007C67  
                         __CFG_DEBUG$OFF 000000                              ?_PDUStartup 0001  
                                  i2l810 1D7A                                    i2l779 1688  
                        ___awdiv@counter 001F                       _PWM4_LoadDutyValue 1B7E  
                                  _TMR1H 000FCF                                    _TMR1L 000FCE  
                                  _TRISA 000F92                                    _TRISB 000F93  
                                  _TRISC 000F94                                    _TRISD 000F95  
                                  _TRISE 000F96                                    _Delay 1AC2  
                          __CFG_WRT0$OFF 000000                            __CFG_WRT1$OFF 000000  
                          __CFG_WRT2$OFF 000000                            __CFG_WRT3$OFF 000000  
                   _EUSART1_Transmit_ISR 1BE8                           __CFG_EBTR0$OFF 000000  
                         __CFG_FCMEN$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                           __CFG_EBTR3$OFF 000000  
                       ??_writeRegisters 0024                            __CFG_WRTB$OFF 000000  
                          __CFG_WRTC$OFF 000000                            __CFG_WRTD$OFF 000000  
                                  _begin 197C                          _DATAEE_ReadByte 1E30  
                         __CFG_EBTRB$OFF 000000                                    _group 0026  
                    ?_PWM4_LoadDutyValue 001B                       __CFG_MCLRE$EXTMCLR 000000  
                                  pclath 000FFA                                    tablat 000FF5  
                          ??_Receive_get 0026                     __size_of_crcBufS_get 00F2  
                                  plusw2 000FDB                           begin@stuffpeek 00DC  
                   __size_of_crcBufS_put 00D8                                    status 000FD8  
                       __end_of_Clear595 1BE8                           __CFG_HFOFST$ON 000000  
                        _TMR2_StartTimer 1E7E                             ?_receiveData 0001  
                         __CFG_PBADEN$ON 000000                     PotSetpoint@new_point 0024  
                           __end_of_CRC8 1AC2                          CRCcheck@SentCRC 00D3  
                        __initialization 17EE               __end_of_EUSART1_Initialize 1B48  
                           __end_of_main 1DC2                               _CurrentADC 006C  
                   ??_PWM4_LoadDutyValue 001D                               ToSend@what 00D3  
                                 ??_CRC8 001E                  __end_of_PWM4_Initialize 1DAA  
                __end_of_TMR2_Initialize 1E30                                ??_ADC_ISR 0001  
            ?_INTERRUPT_InterruptManager 0001                     PotSetpoint@set_point 00D3  
                                 ??_main 0026                         __end_of_PotClear 14D6  
                          __activetblptr 000002                         __end_of_Send_put 1C4A  
              __size_ofi2_UART_buff_size 0016                                   ?_Delay 001B  
                  ?_EUSART1_Transmit_ISR 0001            FastTransfer_buffer_put@towhat 0024  
                          ?_Receive_peek 0001                                   ?_begin 00D1  
                                 _ADCON0 000FC2                                   _ADCON1 000FC1  
                                 _ADCON2 000FC0                                   _ADRESH 000FC4  
                                 _ADRESL 000FC3                                   _EEDATA 000FA8  
                                 _CCPR4H 000F59                                   _CCPR5H 000F56  
                                 _CCPR4L 000F58                                   _CCPR5L 000F55  
                                 _EECON2 000FA7                         ___awdiv@dividend 001B  
                                 _ANSELA 000F38                                   _ANSELB 000F39  
                                 _ANSELC 000F3A                                   _ANSELD 000F3B  
                                 _ANSELE 000F3C                                   _T1GCON 000FCC  
                        i2_UART_buff_get 15FA                                   _RC1STA 000FAB  
                        i2_UART_buff_put 0DCA                                   Delay@i 0020  
                                 i2l3039 1CEA                                   i2l3403 0DEA  
                         __CFG_WDTEN$OFF 000000                                   i2l3423 1684  
                                 i2l3409 0E56                                   i2l3451 1C12  
            UART_buff_modulo_inc@modulus 001D                                   _TABLAT 000FF5  
                                 _RCREG1 000FAE                                   _OSCCON 000FD3  
            __end_of_processPowerRequest 140E                                   _SPBRG1 000FAF  
                   __end_of_CoolingStart 1D72                                   _TX1STA 000FAC  
                                 _TXREG1 000FAD                      __size_of_PDUStartup 005E  
                         __CFG_XINST$OFF 000000                                   _ToSend 1D18  
                          ??_PotSetpoint 00D1                      __end_of_Receive_get 1E60  
                       crcBufS_get@_this 001B                             _CCPTMRS1bits 000F48  
            ??_FastTransfer_buffer_flush 0023                                   _Update 1E78  
                     __size_of_SetPin595 004E                            _output_buffer 0400  
                       crcBufS_get@space 001E                                ??___awdiv 001F  
                              CRC8@tempI 0020                           __CFG_STVREN$ON 000000  
                                 _memset 1C4A                                   clear_0 17F4  
                                 clear_1 1800                                   clear_2 180C  
                                 clear_3 1818                                   clear_4 1824  
                                 clear_5 1830                         ___awdiv@quotient 0021  
                                 _rx_len 0043                         __end_of_sendData 0B6E  
                __end_of_DATAEE_ReadByte 1E44                             __pdataCOMRAM 0044  
                          Send_put@_data 00D1                           ??_Receive_peek 001F  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8         __size_of_FastTransfer_buffer_put 0174  
                             _StartUp595 18BC             __end_of_UART_buff_modulo_inc 1CCA  
                __end_of_TMR2_StartTimer 1E82            __size_of_INTERRUPT_Initialize 000A  
                      _SYSTEM_Initialize 1710                               __accesstop 0060  
                __end_of__initialization 1848                                ?_CRCcheck 0001  
                     ?_SYSTEM_Initialize 0001                            ___rparam_used 000001  
                ?i2_UART_buff_modulo_inc 0001                             ?_updateComms 0001  
                          __end_of_Delay 1B0C                           __pcstackCOMRAM 0001  
                     _crcBufS_status_put 126A                      ??_SYSTEM_Initialize 0025  
                       crcBufS_put@_this 001B                            __end_of_begin 19D6  
 __end_of_FastTransfer_buffer_modulo_inc 1CA0  __size_of_FastTransfer_buffer_modulo_inc 002A  
         _FastTransfer_buffer_modulo_inc 1C76                         ?_TMR2_Initialize 0001  
                       ?_PWM4_Initialize 0001             FastTransfer_buffer_put@_this 0021  
                            ToSend@where 00D5                      __end_of_PotSetpoint 0CB0  
            __size_of_ComputeStorageData 00DC              PWM4_LoadDutyValue@dutyValue 001B  
                     UART_buff_get@_this 0021                      ?_crcBufS_status_put 001B  
                            _Currentcomp 0078                    __end_of_UART_buff_get 1568  
                 ??_EUSART1_Transmit_ISR 000C                    __end_of_UART_buff_put 0DCA  
                              ?_Clear595 0001                                  ??_Delay 001F  
                __end_ofi2_UART_buff_get 168C                  __end_ofi2_UART_buff_put 0EE4  
            __end_of_EUSART1_Receive_ISR 1D90                _FastTransfer_buffer_flush 1782  
                                CRC8@crc 0021                                  CRC8@len 001D  
                                CRC8@sum 001E                                  ??_begin 0023  
                      __end_of_SetPin595 1A78                __end_of_SYSTEM_Initialize 1782  
                 receiveData@holder_1382 00E3                      _addressErrorCounter 0090  
                             __pbssBANK0 0060                               __pbssBANK1 0100  
                             __pbssBANK2 0200                               __pbssBANK3 0300  
                             __pbssBANK4 0400                          __CFG_PLLCFG$OFF 000000  
                            _Receive_get 1E52                               ??_CRCcheck 0026  
                   ??_crcBufS_status_put 001F           __end_ofi2_UART_buff_modulo_inc 1CF4  
                      begin@givenAddress 00D4                        ?_EnableSlavePower 00D1  
                __size_of_UART_buff_init 001E                  __size_of_UART_buff_peek 0024  
                __size_of_UART_buff_size 0016                                ?_PotClear 0001  
                              ?_Send_put 0001                       ??_EnableSlavePower 0025  
                   __size_of_receiveData 06AE                                  ?_ToSend 00D3  
                     __CFG_CCP2MX$PORTC1 000000                                  ?_Update 0001  
                     __CFG_CCP3MX$PORTB5 000000      FastTransfer_buffer_modulo_inc@value 001B  
                                _CCP4CON 000F57                                  _CCP5CON 000F54  
                                _ADC_ISR 1E82                                  ?_memset 001B  
                             _crc_buffer 00C0                  __size_of_ADC_Initialize 0018  
                       ?_DATAEE_ReadByte 0001                             ??_PDUStartup 0026  
                     UART_buff_put@_this 0021                               ??_Clear595 0024  
                       i2_UART_buff_size 1E06              i2UART_buff_modulo_inc@value 0001  
                                _OSCCON2 000FD2                                  _TBLPTRH 000FF7  
                                _TBLPTRL 000FF6                                  _TBLPTRU 000FF8  
                            ?_StartUp595 0001                        _Receive_available 1DDA  
           UART_buff_modulo_inc@my_value 001F                        __CFG_PRICLKEN$OFF 000000  
                                _OSCTUNE 000F9B                                  _SPBRGH1 000FB0  
                    sendData@whereToSend 00D6                      _receiveArrayAddress 002C  
                  __size_of_CoolingStart 001E                         ?_TMR2_StartTimer 0001  
                     ?_Receive_available 001D                               begin@error 00D5  
                    ??_Receive_available 001F                                ?_sendData 0001  
                                _Current 0060                        _alignErrorCounter 0092  
                        __CFG_PWRTEN$OFF 000000                               ??_PotClear 0024  
                             ??_Send_put 0026                                  __Hparam 0000  
                                __Lparam 0000                       __end_of_PDUStartup 197C  
                        __size_of_ToSend 001E                     __end_of_Receive_peek 1E52  
                            _PotSetpoint 0B6E                                _AKNAKsend 003C  
                        __size_of_Update 0006                                  ___awdiv 168C  
                   _UART_buff_modulo_inc 1CA0                                  _calc_CS 003D  
                                __pcinit 17EE                          __size_of_memset 002C  
                                __ramtop 0600                         i2UART_buff_get@c 000B  
                                __ptext0 1DAA                                  __ptext1 1B48  
                                __ptext2 19D6                                  __ptext3 0A24  
                                __ptext4 1192                                  __ptext5 1782  
                                __ptext6 1D18                                  __ptext7 0752  
                                __ptext8 1C76                                  __ptext9 00A4  
                           _CoolingStart 1D54                         i2UART_buff_put@c 0009  
                              _T1CONbits 000FCD                    _OSCILLATOR_Initialize 1E60  
              __end_of_Receive_available 1DF0                                _T2CONbits 000FBA  
                _FastTransfer_buffer_put 0752                    CRCcheck@calculatedCRC 00D4  
                     _EUSART1_Initialize 1B0C                         ?i2_UART_buff_get 0007  
               ??_PIN_MANAGER_Initialize 001B                                Clear595@i 0024  
                       ?i2_UART_buff_put 0007             crcBufS_status_put@wantedTime 0023  
                          ??_crcBufS_get 001F                            ??_crcBufS_put 0020  
             __size_of_SYSTEM_Initialize 0072                     end_of_initialization 1848  
                              Delay@wait 001B                      ?_EUSART1_Initialize 0001  
                                memset@c 001D                                  memset@n 001F  
                                memset@p 0021                            __Lmediumconst 0000  
                             ??_sendData 00D5                    ?_UART_buff_modulo_inc 001B  
                   __size_of_updateComms 0036                                  postdec2 000FDD  
                    __size_of_StartUp595 0062                                  postinc0 000FEE  
                                postinc2 000FDE                               _respondECU 19D6  
            __size_of_PWM4_LoadDutyValue 0036                         begin@stufftosend 00D6  
                    CRCcheck@arrayHolder 00D5                             SetPin595@Reg 001B  
                   ??_EUSART1_Initialize 0025                             SetPin595@pin 001D  
                 _dataAdressErrorCounter 0096                               _rx_address 0041  
                              _TRISCbits 000F94                             begin@maxSize 00D3  
     __size_of_FastTransfer_buffer_flush 006C                    i2UART_buff_size@_this 0001  
                         _UART_buff_init 1D36                           _UART_buff_peek 1CF4  
                         _UART_buff_size 1DF0                      __end_of_crcBufS_get 0FD6  
                __size_of_writeRegisters 0092                      __end_of_crcBufS_put 126A  
                      __size_of_CRCcheck 015E                            _moduleAddress 003F  
                             CRCcheck@rt 00D8             __size_of_processPowerRequest 00CE  
                         __end_of_ToSend 1D36             __end_of_INTERRUPT_Initialize 1E78  
                         __end_of_Update 1E7E                          _crcErrorCounter 0094  
                      crcBufS_put@oldCRC 001E                            __pidataCOMRAM 1E86  
                         _ADC_Initialize 1DC2                ??_FastTransfer_buffer_put 00D1  
                 ?_OSCILLATOR_Initialize 0001                           __end_of_memset 1C76  
                      crcBufS_put@status 001F                             receiveData@r 00EA  
             __size_of_Receive_available 0016                             receiveData@u 00E8  
                    start_initialization 17EE          __size_of_PIN_MANAGER_Initialize 0066  
                  crcBufS_get@wantedTime 00D1                    EnableSlavePower@slave 0025  
                      __size_of_Clear595 0034                                PotClear@x 0024  
                 __end_of_UART_buff_init 1D54                   __end_of_UART_buff_peek 1D18  
                         UART_buff_get@c 0025                   __end_of_UART_buff_size 1E06  
                           ?_Receive_get 0001                                _SetPin595 1A2A  
                         UART_buff_put@c 0023                    __size_of_Receive_peek 000E  
                    DATAEE_ReadByte@bAdd 001B                 __end_ofi2_UART_buff_size 1E1C  
                               ??_ToSend 0026                   ??_UART_buff_modulo_inc 001F  
                               CRC8@data 001B                                 ??_Update 0024  
                        crcBufS_get@time 001D                        __size_of_PotClear 00C8  
                      __size_of_Send_put 0030                              ?_respondECU 0001  
                 __end_of_ADC_Initialize 1DDA               __end_of_ComputeStorageData 1192  
                               ?_ADC_ISR 0001                                 ??_memset 0021  
              __size_of_EnableSlavePower 00E0                              __pbssCOMRAM 0026  
          __size_of_EUSART1_Transmit_ISR 0032                            __pcstackBANK0 00D1  
                           ??_StartUp595 0026                 __size_of_PWM4_Initialize 001A  
               __size_of_TMR2_Initialize 0014                             _Receive_peek 1E44  
                    UART_buff_init@_this 0023                              _crcBufS_get 0EE4  
                    UART_buff_peek@_this 001B                              _crcBufS_put 1192  
                        ?_UART_buff_init 0023                          ?_UART_buff_peek 001B  
                        ?_UART_buff_size 001B             __size_of_EUSART1_Receive_ISR 001E  
                             ?_SetPin595 001B                            ??_receiveData 00DA  
            __size_of_crcBufS_status_put 00D6                               sendData@CS 00D7  
                 __size_of_UART_buff_get 0092                   __size_of_UART_buff_put 011A  
                 _PIN_MANAGER_Initialize 1856                        __size_of_sendData 014A  
                           ?_PotSetpoint 0024                                __pintcode 0008  
                               ?___awdiv 001B                       __end_of_StartUp595 191E  
                        ?_ADC_Initialize 0001             ??_INTERRUPT_InterruptManager 000D  
                   i2UART_buff_get@_this 0007                                 _BAUD1CON 000FB8  
                         __size_of_Delay 004A                           __size_of_begin 005A  
               __size_of_DATAEE_ReadByte 0014                      __size_of_respondECU 0054  
                   _INTERRUPT_Initialize 1E6E                             _receiveArray 0098  
            processPowerRequest@powerSet 00D5                                 _CRCcheck 08C6  
                               _LATCbits 000F8B                           _writeRegisters 1568  
                    UART_buff_size@_this 001B                                _registers 0100  
                               _IPR1bits 000F9F                                 _PIE1bits 000F9D  
                               _PIE4bits 000F7A                 __size_of_TMR2_StartTimer 0004  
    __size_of_INTERRUPT_InterruptManager 0098                                 i2u272_40 1C02  
                               _PIR1bits 000F9E                                 i2u269_40 1618  
                               _PIR4bits 000F7B                      begin@stuffavailable 00DA  
                               _RCONbits 000FD0                         __CFG_WDTPS$32768 000000  
                    __end_of_receiveData 0752           FastTransfer_buffer_flush@_this 00D1  
                           PotSetpoint@x 00D5                             _input_buffer 0300  
                              _rx_buffer 0200                         __size_of_ADC_ISR 0004  
                             _ADCON0bits 000FC2                     i2UART_buff_put@_this 0007  
                               _Clear595 1BB4                            _UART_buff_get 14D6  
                          _UART_buff_put 0CB0                      _processPowerRequest 1340  
               ??i2_UART_buff_modulo_inc 0005                              _INTCON2bits 000FF1  
                  ?_INTERRUPT_Initialize 0001                        _sendStructAddress 002E  
                 __end_of_writeRegisters 15FA                       PotSetpoint@new_pos 00D7  
                            ??_SetPin595 0021                     EnableSlavePower@onof 00D1  
               __size_ofi2_UART_buff_get 0092                        ??_TMR2_Initialize 001B  
                      ??_PWM4_Initialize 001B                 __size_ofi2_UART_buff_put 011A  
                             _EECON1bits 000FA6                            ??_updateComms 0026  
                   __size_of_Receive_get 000E                                 _PotClear 140E  
                               __Hrparam 0000                                 _Send_put 1C1A  
             __end_of_PWM4_LoadDutyValue 1BB4                                 __Lrparam 0000  
                   ?_processPowerRequest 00D5                       __CFG_BOREN$SBORDIS 000000  
                      __CFG_P2BMX$PORTD2 000000                  ??_OSCILLATOR_Initialize 001B  
                       __size_of___awdiv 0084              __size_of_EUSART1_Initialize 003C  
                    begin@stufftoreceive 00D8                         _EnableSlavePower 0FD6  
                             _ANSELCbits 000F3A                           ?_UART_buff_get 0021  
                         ?_UART_buff_put 0021                              CRC8@extract 001F  
                              sendData@i 00D8                 crcBufS_status_put@status 001E  
                               __ptext10 1C1A                                 __ptext11 0CB0  
                               __ptext20 1DDA                                 __ptext12 1E44  
                               __ptext21 1DF0                                 __ptext13 1CF4  
                             _T1GCONbits 000FCC                                 __ptext30 1856  
                               __ptext22 1A78                                 __ptext14 08C6  
                               __ptext31 1E60                                 __ptext23 1340  
                               __ptext15 126A                                 __ptext40 1BB4  
                               __ptext32 1E6E                                 __ptext24 1710  
                               __ptext16 0EE4                                 __ptext41 1568  
                               __ptext33 1B0C                                 __ptext25 197C  
                               __ptext17 1E52                                 __ptext50 1B7E  
                               __ptext42 0FD6                                 __ptext34 1D36  
                               __ptext26 168C                                 __ptext18 14D6  
                               __ptext43 1A2A                                 __ptext35 1C4A  
                               __ptext27 1E1C                                 __ptext19 1CA0  
                               __ptext52 1BE8                                 __ptext44 10B6  
                               __ptext36 1DC2                                 __ptext28 1E7E  
                               __ptext53 1E06                                 __ptext45 1E30  
                               __ptext37 191E                                 __ptext29 1D90  
                               __ptext54 15FA                                 __ptext46 1D54  
                               __ptext38 1E78                                 __ptext55 1D72  
                               __ptext47 0B6E                                 __ptext39 18BC  
                               __ptext56 0DCA                                 __ptext48 140E  
                               __ptext57 1CCA                                 __ptext49 1AC2  
                               __ptext58 1E82                                 __ptext59 0000  
                          __size_of_CRC8 004A                                 begin@ptr 00D1  
                EUSART1_Receive_ISR@data 000C                          ?_writeRegisters 0001  
                          _returnAddress 0040                            __size_of_main 0018  
                            _receiveData 00A4                                 _readwhat 002A  
                         _Transmit_stall 0044                                 _sendData 0A24  
                      ??_DATAEE_ReadByte 001B                        ?i2_UART_buff_size 0001  
                  ??_processPowerRequest 0026                               _RC1STAbits 000FAB  
                               _prev_pos 0028                             ??_respondECU 0026  
                     ??i2_UART_buff_size 0003                        writeRegisters@val 00D1  
                               int$flags 0045                             _serial_write 0036  
                      ??_TMR2_StartTimer 001B                      __end_of_updateComms 1B7E  
     __end_of_INTERRUPT_InterruptManager 00A0               _INTERRUPT_InterruptManager 0008  
                   __size_of_PotSetpoint 0142                      _EUSART1_Receive_ISR 1D72  
                      receiveData@holder 00E0                               _INTCONbits 000FF2  
                    ComputeStorageData@i 001E                UART_buff_modulo_inc@value 001B  
                       ??_UART_buff_init 0025                         ??_UART_buff_peek 001D  
                       ??_UART_buff_size 001D                       _ComputeStorageData 10B6  
                 ??_INTERRUPT_Initialize 001B                                 memset@p1 001B  
                       _serial_available 0030          __size_ofi2_UART_buff_modulo_inc 002A  
                           ?_crcBufS_get 001B                             ?_crcBufS_put 001B  
                               intlevel2 0000                  crcBufS_status_put@_this 001B  
                     __end_of_respondECU 1A2A                     ?_EUSART1_Receive_ISR 0001  
 FastTransfer_buffer_modulo_inc@my_value 001F           FastTransfer_buffer_put@towhere 0023  
                    ?_ComputeStorageData 0001                  ?_PIN_MANAGER_Initialize 0001  
                         SetPin595@value 001F             __end_of_EUSART1_Transmit_ISR 1C1A  
                            _ring_buffer 0130                         ??_ADC_Initialize 001B  
             ?_FastTransfer_buffer_flush 00D1                        ??i2_UART_buff_get 0009  
                            _serial_peek 0032                              _serial_read 0034  
                      ??i2_UART_buff_put 000A                 ?_FastTransfer_buffer_put 0021  
          __size_of_UART_buff_modulo_inc 002A                          ??_UART_buff_get 0023  
                        ??_UART_buff_put 0024                     ??_ComputeStorageData 001C  
                          ?_CoolingStart 0001    FastTransfer_buffer_modulo_inc@modulus 001D  
                             _PDUStartup 191E                   crcBufS_status_put@time 001D  
              receiveData@crcHolder_1383 00E7                        __CFG_T3CMX$PORTC0 000000  
                         _maxDataAddress 003E                          writeRegisters@i 00D3  
             __end_of_crcBufS_status_put 1340                    ??_EUSART1_Receive_ISR 000C  
         __end_of_PIN_MANAGER_Initialize 18BC         ??_FastTransfer_buffer_modulo_inc 001F  
        ?_FastTransfer_buffer_modulo_inc 001B            updateComms@previousPowerState 003A  
                      __CFG_FOSC$INTIO67 000000                              _updateComms 1B48  
